
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000270ec  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002a8  20000000  000390ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000053f0  200002b0  000393a0  000302b0  2**4
                  ALLOC
  3 .stack        00002000  200056a0  0003e790  000302b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
  6 .debug_info   00117b49  00000000  00000000  00030329  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00010964  00000000  00000000  00147e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001202b  00000000  00000000  001587d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003220  00000000  00000000  0016a801  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002e98  00000000  00000000  0016da21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003f94b  00000000  00000000  001708b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005877e  00000000  00000000  001b0204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000bcd44  00000000  00000000  00208982  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000ba8c  00000000  00000000  002c56c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	a0 76 00 20 a5 a2 02 00 9d a3 02 00 9d a3 02 00     .v. ............
	...
   1202c:	3d 94 01 00 00 00 00 00 00 00 00 00 61 95 01 00     =...........a...
   1203c:	a9 95 01 00 9d a3 02 00 9d a3 02 00 9d a3 02 00     ................
   1204c:	f5 63 02 00 21 59 02 00 9d a3 02 00 c5 30 01 00     .c..!Y.......0..
   1205c:	9d a3 02 00 09 32 01 00 99 6a 02 00 b1 6a 02 00     .....2...j...j..
   1206c:	c9 6a 02 00 e1 6a 02 00 f9 6a 02 00 11 6b 02 00     .j...j...j...k..
   1207c:	ed a1 02 00 01 a2 02 00 15 a2 02 00 29 71 01 00     ............)q..
   1208c:	3d 71 01 00 51 71 01 00 00 00 00 00 00 00 00 00     =q..Qq..........
   1209c:	4d 2f 01 00 9d a3 02 00 89 30 01 00 9d a3 02 00     M/.......0......
   120ac:	9d a3 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	200002b0 	.word	0x200002b0
   120d4:	00000000 	.word	0x00000000
   120d8:	000390ec 	.word	0x000390ec

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	200002b4 	.word	0x200002b4
   12108:	000390ec 	.word	0x000390ec
   1210c:	000390ec 	.word	0x000390ec
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b28      	ldr	r3, [pc, #160]	; (121d0 <ssd1306_init+0xa8>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b28      	ldr	r3, [pc, #160]	; (121d4 <ssd1306_init+0xac>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b28      	ldr	r3, [pc, #160]	; (121d8 <ssd1306_init+0xb0>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD4
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b26      	ldr	r3, [pc, #152]	; (121d8 <ssd1306_init+0xb0>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b25      	ldr	r3, [pc, #148]	; (121d8 <ssd1306_init+0xb0>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b23      	ldr	r3, [pc, #140]	; (121d8 <ssd1306_init+0xb0>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x3F); //2F
   1214c:	203f      	movs	r0, #63	; 0x3f
   1214e:	4b22      	ldr	r3, [pc, #136]	; (121d8 <ssd1306_init+0xb0>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b20      	ldr	r3, [pc, #128]	; (121d8 <ssd1306_init+0xb0>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1f      	ldr	r3, [pc, #124]	; (121d8 <ssd1306_init+0xb0>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1d      	ldr	r3, [pc, #116]	; (121d8 <ssd1306_init+0xb0>)
   12162:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0); //A1
   12164:	20a1      	movs	r0, #161	; 0xa1
   12166:	4b1c      	ldr	r3, [pc, #112]	; (121d8 <ssd1306_init+0xb0>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0XC8);
   1216a:	20c8      	movs	r0, #200	; 0xc8
   1216c:	4b1a      	ldr	r3, [pc, #104]	; (121d8 <ssd1306_init+0xb0>)
   1216e:	4798      	blx	r3

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12170:	208d      	movs	r0, #141	; 0x8d
   12172:	4b19      	ldr	r3, [pc, #100]	; (121d8 <ssd1306_init+0xb0>)
   12174:	4798      	blx	r3
	ssd1306_write_command(0x14);
   12176:	2014      	movs	r0, #20
   12178:	4b17      	ldr	r3, [pc, #92]	; (121d8 <ssd1306_init+0xb0>)
   1217a:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   1217c:	20a6      	movs	r0, #166	; 0xa6
   1217e:	4b16      	ldr	r3, [pc, #88]	; (121d8 <ssd1306_init+0xb0>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12182:	20a4      	movs	r0, #164	; 0xa4
   12184:	4b14      	ldr	r3, [pc, #80]	; (121d8 <ssd1306_init+0xb0>)
   12186:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1);
   12188:	20a1      	movs	r0, #161	; 0xa1
   1218a:	4b13      	ldr	r3, [pc, #76]	; (121d8 <ssd1306_init+0xb0>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
   1218e:	20c8      	movs	r0, #200	; 0xc8
   12190:	4b11      	ldr	r3, [pc, #68]	; (121d8 <ssd1306_init+0xb0>)
   12192:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
   12194:	20da      	movs	r0, #218	; 0xda
   12196:	4b10      	ldr	r3, [pc, #64]	; (121d8 <ssd1306_init+0xb0>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1219a:	2012      	movs	r0, #18
   1219c:	4b0e      	ldr	r3, [pc, #56]	; (121d8 <ssd1306_init+0xb0>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
   121a0:	2081      	movs	r0, #129	; 0x81
   121a2:	4b0d      	ldr	r3, [pc, #52]	; (121d8 <ssd1306_init+0xb0>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   121a6:	208f      	movs	r0, #143	; 0x8f
   121a8:	4b0b      	ldr	r3, [pc, #44]	; (121d8 <ssd1306_init+0xb0>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
   121ac:	20d9      	movs	r0, #217	; 0xd9
   121ae:	4b0a      	ldr	r3, [pc, #40]	; (121d8 <ssd1306_init+0xb0>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0xF1);
   121b2:	20f1      	movs	r0, #241	; 0xf1
   121b4:	4b08      	ldr	r3, [pc, #32]	; (121d8 <ssd1306_init+0xb0>)
   121b6:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
   121b8:	20db      	movs	r0, #219	; 0xdb
   121ba:	4b07      	ldr	r3, [pc, #28]	; (121d8 <ssd1306_init+0xb0>)
   121bc:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121be:	2040      	movs	r0, #64	; 0x40
   121c0:	4b05      	ldr	r3, [pc, #20]	; (121d8 <ssd1306_init+0xb0>)
   121c2:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121c4:	20af      	movs	r0, #175	; 0xaf
   121c6:	4b04      	ldr	r3, [pc, #16]	; (121d8 <ssd1306_init+0xb0>)
   121c8:	4798      	blx	r3

}
   121ca:	46c0      	nop			; (mov r8, r8)
   121cc:	46bd      	mov	sp, r7
   121ce:	bd80      	pop	{r7, pc}
   121d0:	0001211f 	.word	0x0001211f
   121d4:	00012115 	.word	0x00012115
   121d8:	000121dd 	.word	0x000121dd

000121dc <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121dc:	b580      	push	{r7, lr}
   121de:	b084      	sub	sp, #16
   121e0:	af00      	add	r7, sp, #0
   121e2:	0002      	movs	r2, r0
   121e4:	1dfb      	adds	r3, r7, #7
   121e6:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = 0x00;
   121e8:	230c      	movs	r3, #12
   121ea:	18fb      	adds	r3, r7, r3
   121ec:	2200      	movs	r2, #0
   121ee:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121f0:	230c      	movs	r3, #12
   121f2:	18fb      	adds	r3, r7, r3
   121f4:	1dfa      	adds	r2, r7, #7
   121f6:	7812      	ldrb	r2, [r2, #0]
   121f8:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121fa:	4b0c      	ldr	r3, [pc, #48]	; (1222c <ssd1306_write_command+0x50>)
   121fc:	223c      	movs	r2, #60	; 0x3c
   121fe:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = &data;
   12200:	4b0a      	ldr	r3, [pc, #40]	; (1222c <ssd1306_write_command+0x50>)
   12202:	220c      	movs	r2, #12
   12204:	18ba      	adds	r2, r7, r2
   12206:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   12208:	4b08      	ldr	r3, [pc, #32]	; (1222c <ssd1306_write_command+0x50>)
   1220a:	2202      	movs	r2, #2
   1220c:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1220e:	4b07      	ldr	r3, [pc, #28]	; (1222c <ssd1306_write_command+0x50>)
   12210:	2200      	movs	r2, #0
   12212:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12214:	4b05      	ldr	r3, [pc, #20]	; (1222c <ssd1306_write_command+0x50>)
   12216:	2200      	movs	r2, #0
   12218:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1221a:	4b04      	ldr	r3, [pc, #16]	; (1222c <ssd1306_write_command+0x50>)
   1221c:	2164      	movs	r1, #100	; 0x64
   1221e:	0018      	movs	r0, r3
   12220:	4b03      	ldr	r3, [pc, #12]	; (12230 <ssd1306_write_command+0x54>)
   12222:	4798      	blx	r3
}
   12224:	46c0      	nop			; (mov r8, r8)
   12226:	46bd      	mov	sp, r7
   12228:	b004      	add	sp, #16
   1222a:	bd80      	pop	{r7, pc}
   1222c:	200042c4 	.word	0x200042c4
   12230:	000161ad 	.word	0x000161ad

00012234 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12234:	b580      	push	{r7, lr}
   12236:	b084      	sub	sp, #16
   12238:	af00      	add	r7, sp, #0
   1223a:	0002      	movs	r2, r0
   1223c:	1dfb      	adds	r3, r7, #7
   1223e:	701a      	strb	r2, [r3, #0]
	uint8_t datum[2];
	datum[0] = 0x40;
   12240:	230c      	movs	r3, #12
   12242:	18fb      	adds	r3, r7, r3
   12244:	2240      	movs	r2, #64	; 0x40
   12246:	701a      	strb	r2, [r3, #0]
	datum[1] = data;
   12248:	230c      	movs	r3, #12
   1224a:	18fb      	adds	r3, r7, r3
   1224c:	1dfa      	adds	r2, r7, #7
   1224e:	7812      	ldrb	r2, [r2, #0]
   12250:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12252:	4b0c      	ldr	r3, [pc, #48]	; (12284 <ssd1306_write_data+0x50>)
   12254:	223c      	movs	r2, #60	; 0x3c
   12256:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = &datum;
   12258:	4b0a      	ldr	r3, [pc, #40]	; (12284 <ssd1306_write_data+0x50>)
   1225a:	220c      	movs	r2, #12
   1225c:	18ba      	adds	r2, r7, r2
   1225e:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(datum);
   12260:	4b08      	ldr	r3, [pc, #32]	; (12284 <ssd1306_write_data+0x50>)
   12262:	2202      	movs	r2, #2
   12264:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12266:	4b07      	ldr	r3, [pc, #28]	; (12284 <ssd1306_write_data+0x50>)
   12268:	2200      	movs	r2, #0
   1226a:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   1226c:	4b05      	ldr	r3, [pc, #20]	; (12284 <ssd1306_write_data+0x50>)
   1226e:	2200      	movs	r2, #0
   12270:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12272:	4b04      	ldr	r3, [pc, #16]	; (12284 <ssd1306_write_data+0x50>)
   12274:	2164      	movs	r1, #100	; 0x64
   12276:	0018      	movs	r0, r3
   12278:	4b03      	ldr	r3, [pc, #12]	; (12288 <ssd1306_write_data+0x54>)
   1227a:	4798      	blx	r3
}
   1227c:	46c0      	nop			; (mov r8, r8)
   1227e:	46bd      	mov	sp, r7
   12280:	b004      	add	sp, #16
   12282:	bd80      	pop	{r7, pc}
   12284:	200042c4 	.word	0x200042c4
   12288:	000161ad 	.word	0x000161ad

0001228c <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   1228c:	b580      	push	{r7, lr}
   1228e:	b082      	sub	sp, #8
   12290:	af00      	add	r7, sp, #0
   12292:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12294:	4b03      	ldr	r3, [pc, #12]	; (122a4 <gfx_mono_set_framebuffer+0x18>)
   12296:	687a      	ldr	r2, [r7, #4]
   12298:	601a      	str	r2, [r3, #0]
}
   1229a:	46c0      	nop			; (mov r8, r8)
   1229c:	46bd      	mov	sp, r7
   1229e:	b002      	add	sp, #8
   122a0:	bd80      	pop	{r7, pc}
   122a2:	46c0      	nop			; (mov r8, r8)
   122a4:	200002cc 	.word	0x200002cc

000122a8 <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   122a8:	b590      	push	{r4, r7, lr}
   122aa:	b083      	sub	sp, #12
   122ac:	af00      	add	r7, sp, #0
   122ae:	0004      	movs	r4, r0
   122b0:	0008      	movs	r0, r1
   122b2:	0011      	movs	r1, r2
   122b4:	1dfb      	adds	r3, r7, #7
   122b6:	1c22      	adds	r2, r4, #0
   122b8:	701a      	strb	r2, [r3, #0]
   122ba:	1dbb      	adds	r3, r7, #6
   122bc:	1c02      	adds	r2, r0, #0
   122be:	701a      	strb	r2, [r3, #0]
   122c0:	1d7b      	adds	r3, r7, #5
   122c2:	1c0a      	adds	r2, r1, #0
   122c4:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122c6:	4b0a      	ldr	r3, [pc, #40]	; (122f0 <gfx_mono_framebuffer_put_byte+0x48>)
   122c8:	6819      	ldr	r1, [r3, #0]
   122ca:	1dfb      	adds	r3, r7, #7
   122cc:	781a      	ldrb	r2, [r3, #0]
   122ce:	0013      	movs	r3, r2
   122d0:	011b      	lsls	r3, r3, #4
   122d2:	189b      	adds	r3, r3, r2
   122d4:	009b      	lsls	r3, r3, #2
   122d6:	001a      	movs	r2, r3
   122d8:	1dbb      	adds	r3, r7, #6
   122da:	781b      	ldrb	r3, [r3, #0]
   122dc:	18d3      	adds	r3, r2, r3
   122de:	18cb      	adds	r3, r1, r3
   122e0:	1d7a      	adds	r2, r7, #5
   122e2:	7812      	ldrb	r2, [r2, #0]
   122e4:	701a      	strb	r2, [r3, #0]
}
   122e6:	46c0      	nop			; (mov r8, r8)
   122e8:	46bd      	mov	sp, r7
   122ea:	b003      	add	sp, #12
   122ec:	bd90      	pop	{r4, r7, pc}
   122ee:	46c0      	nop			; (mov r8, r8)
   122f0:	200002cc 	.word	0x200002cc

000122f4 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122f4:	b580      	push	{r7, lr}
   122f6:	b082      	sub	sp, #8
   122f8:	af00      	add	r7, sp, #0
   122fa:	0002      	movs	r2, r0
   122fc:	1dfb      	adds	r3, r7, #7
   122fe:	701a      	strb	r2, [r3, #0]
   12300:	1dbb      	adds	r3, r7, #6
   12302:	1c0a      	adds	r2, r1, #0
   12304:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   12306:	4b09      	ldr	r3, [pc, #36]	; (1232c <gfx_mono_framebuffer_get_byte+0x38>)
   12308:	6819      	ldr	r1, [r3, #0]
   1230a:	1dfb      	adds	r3, r7, #7
   1230c:	781a      	ldrb	r2, [r3, #0]
   1230e:	0013      	movs	r3, r2
   12310:	011b      	lsls	r3, r3, #4
   12312:	189b      	adds	r3, r3, r2
   12314:	009b      	lsls	r3, r3, #2
   12316:	001a      	movs	r2, r3
   12318:	1dbb      	adds	r3, r7, #6
   1231a:	781b      	ldrb	r3, [r3, #0]
   1231c:	18d3      	adds	r3, r2, r3
   1231e:	18cb      	adds	r3, r1, r3
   12320:	781b      	ldrb	r3, [r3, #0]
}
   12322:	0018      	movs	r0, r3
   12324:	46bd      	mov	sp, r7
   12326:	b002      	add	sp, #8
   12328:	bd80      	pop	{r7, pc}
   1232a:	46c0      	nop			; (mov r8, r8)
   1232c:	200002cc 	.word	0x200002cc

00012330 <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12330:	b5b0      	push	{r4, r5, r7, lr}
   12332:	b084      	sub	sp, #16
   12334:	af00      	add	r7, sp, #0
   12336:	0005      	movs	r5, r0
   12338:	000c      	movs	r4, r1
   1233a:	0010      	movs	r0, r2
   1233c:	0019      	movs	r1, r3
   1233e:	1dfb      	adds	r3, r7, #7
   12340:	1c2a      	adds	r2, r5, #0
   12342:	701a      	strb	r2, [r3, #0]
   12344:	1dbb      	adds	r3, r7, #6
   12346:	1c22      	adds	r2, r4, #0
   12348:	701a      	strb	r2, [r3, #0]
   1234a:	1d7b      	adds	r3, r7, #5
   1234c:	1c02      	adds	r2, r0, #0
   1234e:	701a      	strb	r2, [r3, #0]
   12350:	1d3b      	adds	r3, r7, #4
   12352:	1c0a      	adds	r2, r1, #0
   12354:	701a      	strb	r2, [r3, #0]
	if (length == 0) {
   12356:	1d7b      	adds	r3, r7, #5
   12358:	781b      	ldrb	r3, [r3, #0]
   1235a:	2b00      	cmp	r3, #0
   1235c:	d100      	bne.n	12360 <gfx_mono_generic_draw_vertical_line+0x30>
   1235e:	e0a7      	b.n	124b0 <gfx_mono_generic_draw_vertical_line+0x180>
		return;
	}

	gfx_coord_t y2 = y + length - 1;
   12360:	1dba      	adds	r2, r7, #6
   12362:	1d7b      	adds	r3, r7, #5
   12364:	7812      	ldrb	r2, [r2, #0]
   12366:	781b      	ldrb	r3, [r3, #0]
   12368:	18d3      	adds	r3, r2, r3
   1236a:	b2da      	uxtb	r2, r3
   1236c:	230f      	movs	r3, #15
   1236e:	18fb      	adds	r3, r7, r3
   12370:	3a01      	subs	r2, #1
   12372:	701a      	strb	r2, [r3, #0]

	if (y == y2) {
   12374:	1dba      	adds	r2, r7, #6
   12376:	230f      	movs	r3, #15
   12378:	18fb      	adds	r3, r7, r3
   1237a:	7812      	ldrb	r2, [r2, #0]
   1237c:	781b      	ldrb	r3, [r3, #0]
   1237e:	429a      	cmp	r2, r3
   12380:	d109      	bne.n	12396 <gfx_mono_generic_draw_vertical_line+0x66>
		gfx_mono_draw_pixel(x, y, color);
   12382:	1d3b      	adds	r3, r7, #4
   12384:	781a      	ldrb	r2, [r3, #0]
   12386:	1dbb      	adds	r3, r7, #6
   12388:	7819      	ldrb	r1, [r3, #0]
   1238a:	1dfb      	adds	r3, r7, #7
   1238c:	781b      	ldrb	r3, [r3, #0]
   1238e:	0018      	movs	r0, r3
   12390:	4b49      	ldr	r3, [pc, #292]	; (124b8 <gfx_mono_generic_draw_vertical_line+0x188>)
   12392:	4798      	blx	r3
		return;
   12394:	e08d      	b.n	124b2 <gfx_mono_generic_draw_vertical_line+0x182>
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
   12396:	230f      	movs	r3, #15
   12398:	18fb      	adds	r3, r7, r3
   1239a:	781b      	ldrb	r3, [r3, #0]
   1239c:	2b1e      	cmp	r3, #30
   1239e:	d903      	bls.n	123a8 <gfx_mono_generic_draw_vertical_line+0x78>
		y2 = GFX_MONO_LCD_HEIGHT - 1;
   123a0:	230f      	movs	r3, #15
   123a2:	18fb      	adds	r3, r7, r3
   123a4:	221f      	movs	r2, #31
   123a6:	701a      	strb	r2, [r3, #0]
	}

	gfx_coord_t y1page = y / 8;
   123a8:	230e      	movs	r3, #14
   123aa:	18fb      	adds	r3, r7, r3
   123ac:	1dba      	adds	r2, r7, #6
   123ae:	7812      	ldrb	r2, [r2, #0]
   123b0:	08d2      	lsrs	r2, r2, #3
   123b2:	701a      	strb	r2, [r3, #0]
	gfx_coord_t y2page = y2 / 8;
   123b4:	230d      	movs	r3, #13
   123b6:	18fb      	adds	r3, r7, r3
   123b8:	220f      	movs	r2, #15
   123ba:	18ba      	adds	r2, r7, r2
   123bc:	7812      	ldrb	r2, [r2, #0]
   123be:	08d2      	lsrs	r2, r2, #3
   123c0:	701a      	strb	r2, [r3, #0]

	uint8_t y1bitpos = y & 0x07;
   123c2:	230c      	movs	r3, #12
   123c4:	18fb      	adds	r3, r7, r3
   123c6:	1dba      	adds	r2, r7, #6
   123c8:	7812      	ldrb	r2, [r2, #0]
   123ca:	2107      	movs	r1, #7
   123cc:	400a      	ands	r2, r1
   123ce:	701a      	strb	r2, [r3, #0]
	uint8_t y2bitpos = y2 & 0x07;
   123d0:	230b      	movs	r3, #11
   123d2:	18fb      	adds	r3, r7, r3
   123d4:	220f      	movs	r2, #15
   123d6:	18ba      	adds	r2, r7, r2
   123d8:	7812      	ldrb	r2, [r2, #0]
   123da:	2107      	movs	r1, #7
   123dc:	400a      	ands	r2, r1
   123de:	701a      	strb	r2, [r3, #0]

	uint8_t y1pixelmask = 0xFF << y1bitpos;
   123e0:	230c      	movs	r3, #12
   123e2:	18fb      	adds	r3, r7, r3
   123e4:	781b      	ldrb	r3, [r3, #0]
   123e6:	22ff      	movs	r2, #255	; 0xff
   123e8:	409a      	lsls	r2, r3
   123ea:	230a      	movs	r3, #10
   123ec:	18fb      	adds	r3, r7, r3
   123ee:	701a      	strb	r2, [r3, #0]
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
   123f0:	230b      	movs	r3, #11
   123f2:	18fb      	adds	r3, r7, r3
   123f4:	781b      	ldrb	r3, [r3, #0]
   123f6:	2207      	movs	r2, #7
   123f8:	1ad3      	subs	r3, r2, r3
   123fa:	22ff      	movs	r2, #255	; 0xff
   123fc:	411a      	asrs	r2, r3
   123fe:	2309      	movs	r3, #9
   12400:	18fb      	adds	r3, r7, r3
   12402:	701a      	strb	r2, [r3, #0]

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
   12404:	230e      	movs	r3, #14
   12406:	18fa      	adds	r2, r7, r3
   12408:	230d      	movs	r3, #13
   1240a:	18fb      	adds	r3, r7, r3
   1240c:	7812      	ldrb	r2, [r2, #0]
   1240e:	781b      	ldrb	r3, [r3, #0]
   12410:	429a      	cmp	r2, r3
   12412:	d117      	bne.n	12444 <gfx_mono_generic_draw_vertical_line+0x114>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
   12414:	2308      	movs	r3, #8
   12416:	18fb      	adds	r3, r7, r3
   12418:	220a      	movs	r2, #10
   1241a:	18ba      	adds	r2, r7, r2
   1241c:	2109      	movs	r1, #9
   1241e:	1879      	adds	r1, r7, r1
   12420:	7812      	ldrb	r2, [r2, #0]
   12422:	7809      	ldrb	r1, [r1, #0]
   12424:	400a      	ands	r2, r1
   12426:	701a      	strb	r2, [r3, #0]
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
   12428:	1d3b      	adds	r3, r7, #4
   1242a:	781c      	ldrb	r4, [r3, #0]
   1242c:	2308      	movs	r3, #8
   1242e:	18fb      	adds	r3, r7, r3
   12430:	781a      	ldrb	r2, [r3, #0]
   12432:	1dfb      	adds	r3, r7, #7
   12434:	7819      	ldrb	r1, [r3, #0]
   12436:	230e      	movs	r3, #14
   12438:	18fb      	adds	r3, r7, r3
   1243a:	7818      	ldrb	r0, [r3, #0]
   1243c:	0023      	movs	r3, r4
   1243e:	4c1f      	ldr	r4, [pc, #124]	; (124bc <gfx_mono_generic_draw_vertical_line+0x18c>)
   12440:	47a0      	blx	r4
   12442:	e036      	b.n	124b2 <gfx_mono_generic_draw_vertical_line+0x182>
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
   12444:	1d3b      	adds	r3, r7, #4
   12446:	781c      	ldrb	r4, [r3, #0]
   12448:	230a      	movs	r3, #10
   1244a:	18fb      	adds	r3, r7, r3
   1244c:	781a      	ldrb	r2, [r3, #0]
   1244e:	1dfb      	adds	r3, r7, #7
   12450:	7819      	ldrb	r1, [r3, #0]
   12452:	230e      	movs	r3, #14
   12454:	18fb      	adds	r3, r7, r3
   12456:	7818      	ldrb	r0, [r3, #0]
   12458:	0023      	movs	r3, r4
   1245a:	4c18      	ldr	r4, [pc, #96]	; (124bc <gfx_mono_generic_draw_vertical_line+0x18c>)
   1245c:	47a0      	blx	r4

		while (++y1page < y2page) {
   1245e:	e00a      	b.n	12476 <gfx_mono_generic_draw_vertical_line+0x146>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
   12460:	1d3b      	adds	r3, r7, #4
   12462:	781a      	ldrb	r2, [r3, #0]
   12464:	1dfb      	adds	r3, r7, #7
   12466:	7819      	ldrb	r1, [r3, #0]
   12468:	230e      	movs	r3, #14
   1246a:	18fb      	adds	r3, r7, r3
   1246c:	7818      	ldrb	r0, [r3, #0]
   1246e:	0013      	movs	r3, r2
   12470:	22ff      	movs	r2, #255	; 0xff
   12472:	4c12      	ldr	r4, [pc, #72]	; (124bc <gfx_mono_generic_draw_vertical_line+0x18c>)
   12474:	47a0      	blx	r4
		while (++y1page < y2page) {
   12476:	230e      	movs	r3, #14
   12478:	18fb      	adds	r3, r7, r3
   1247a:	220e      	movs	r2, #14
   1247c:	18ba      	adds	r2, r7, r2
   1247e:	7812      	ldrb	r2, [r2, #0]
   12480:	3201      	adds	r2, #1
   12482:	701a      	strb	r2, [r3, #0]
   12484:	230e      	movs	r3, #14
   12486:	18fa      	adds	r2, r7, r3
   12488:	230d      	movs	r3, #13
   1248a:	18fb      	adds	r3, r7, r3
   1248c:	7812      	ldrb	r2, [r2, #0]
   1248e:	781b      	ldrb	r3, [r3, #0]
   12490:	429a      	cmp	r2, r3
   12492:	d3e5      	bcc.n	12460 <gfx_mono_generic_draw_vertical_line+0x130>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
   12494:	1d3b      	adds	r3, r7, #4
   12496:	781c      	ldrb	r4, [r3, #0]
   12498:	2309      	movs	r3, #9
   1249a:	18fb      	adds	r3, r7, r3
   1249c:	781a      	ldrb	r2, [r3, #0]
   1249e:	1dfb      	adds	r3, r7, #7
   124a0:	7819      	ldrb	r1, [r3, #0]
   124a2:	230d      	movs	r3, #13
   124a4:	18fb      	adds	r3, r7, r3
   124a6:	7818      	ldrb	r0, [r3, #0]
   124a8:	0023      	movs	r3, r4
   124aa:	4c04      	ldr	r4, [pc, #16]	; (124bc <gfx_mono_generic_draw_vertical_line+0x18c>)
   124ac:	47a0      	blx	r4
   124ae:	e000      	b.n	124b2 <gfx_mono_generic_draw_vertical_line+0x182>
		return;
   124b0:	46c0      	nop			; (mov r8, r8)
	}
}
   124b2:	46bd      	mov	sp, r7
   124b4:	b004      	add	sp, #16
   124b6:	bdb0      	pop	{r4, r5, r7, pc}
   124b8:	00012af9 	.word	0x00012af9
   124bc:	00012cbd 	.word	0x00012cbd

000124c0 <gfx_mono_generic_draw_line>:
 * \param[in]  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
   124c0:	b5b0      	push	{r4, r5, r7, lr}
   124c2:	b084      	sub	sp, #16
   124c4:	af00      	add	r7, sp, #0
   124c6:	0005      	movs	r5, r0
   124c8:	000c      	movs	r4, r1
   124ca:	0010      	movs	r0, r2
   124cc:	0019      	movs	r1, r3
   124ce:	1dfb      	adds	r3, r7, #7
   124d0:	1c2a      	adds	r2, r5, #0
   124d2:	701a      	strb	r2, [r3, #0]
   124d4:	1dbb      	adds	r3, r7, #6
   124d6:	1c22      	adds	r2, r4, #0
   124d8:	701a      	strb	r2, [r3, #0]
   124da:	1d7b      	adds	r3, r7, #5
   124dc:	1c02      	adds	r2, r0, #0
   124de:	701a      	strb	r2, [r3, #0]
   124e0:	1d3b      	adds	r3, r7, #4
   124e2:	1c0a      	adds	r2, r1, #0
   124e4:	701a      	strb	r2, [r3, #0]
	int8_t dx;
	int8_t dy;
	int8_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
   124e6:	1dfa      	adds	r2, r7, #7
   124e8:	1d7b      	adds	r3, r7, #5
   124ea:	7812      	ldrb	r2, [r2, #0]
   124ec:	781b      	ldrb	r3, [r3, #0]
   124ee:	429a      	cmp	r2, r3
   124f0:	d91b      	bls.n	1252a <gfx_mono_generic_draw_line+0x6a>
		dx = x1;
   124f2:	230a      	movs	r3, #10
   124f4:	18fb      	adds	r3, r7, r3
   124f6:	1dfa      	adds	r2, r7, #7
   124f8:	7812      	ldrb	r2, [r2, #0]
   124fa:	701a      	strb	r2, [r3, #0]
		x1 = x2;
   124fc:	1dfb      	adds	r3, r7, #7
   124fe:	1d7a      	adds	r2, r7, #5
   12500:	7812      	ldrb	r2, [r2, #0]
   12502:	701a      	strb	r2, [r3, #0]
		x2 = dx;
   12504:	1d7b      	adds	r3, r7, #5
   12506:	220a      	movs	r2, #10
   12508:	18ba      	adds	r2, r7, r2
   1250a:	7812      	ldrb	r2, [r2, #0]
   1250c:	701a      	strb	r2, [r3, #0]
		dy = y1;
   1250e:	2309      	movs	r3, #9
   12510:	18fb      	adds	r3, r7, r3
   12512:	1dba      	adds	r2, r7, #6
   12514:	7812      	ldrb	r2, [r2, #0]
   12516:	701a      	strb	r2, [r3, #0]
		y1 = y2;
   12518:	1dbb      	adds	r3, r7, #6
   1251a:	1d3a      	adds	r2, r7, #4
   1251c:	7812      	ldrb	r2, [r2, #0]
   1251e:	701a      	strb	r2, [r3, #0]
		y2 = dy;
   12520:	1d3b      	adds	r3, r7, #4
   12522:	2209      	movs	r2, #9
   12524:	18ba      	adds	r2, r7, r2
   12526:	7812      	ldrb	r2, [r2, #0]
   12528:	701a      	strb	r2, [r3, #0]
	}

	dx = x2 - x1;
   1252a:	1d7a      	adds	r2, r7, #5
   1252c:	1dfb      	adds	r3, r7, #7
   1252e:	7812      	ldrb	r2, [r2, #0]
   12530:	781b      	ldrb	r3, [r3, #0]
   12532:	1ad3      	subs	r3, r2, r3
   12534:	b2da      	uxtb	r2, r3
   12536:	230a      	movs	r3, #10
   12538:	18fb      	adds	r3, r7, r3
   1253a:	701a      	strb	r2, [r3, #0]
	dy = y2 - y1;
   1253c:	1d3a      	adds	r2, r7, #4
   1253e:	1dbb      	adds	r3, r7, #6
   12540:	7812      	ldrb	r2, [r2, #0]
   12542:	781b      	ldrb	r3, [r3, #0]
   12544:	1ad3      	subs	r3, r2, r3
   12546:	b2da      	uxtb	r2, r3
   12548:	2309      	movs	r3, #9
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	701a      	strb	r2, [r3, #0]

	x = x1;
   1254e:	230e      	movs	r3, #14
   12550:	18fb      	adds	r3, r7, r3
   12552:	1dfa      	adds	r2, r7, #7
   12554:	7812      	ldrb	r2, [r2, #0]
   12556:	701a      	strb	r2, [r3, #0]
	y = y1;
   12558:	230d      	movs	r3, #13
   1255a:	18fb      	adds	r3, r7, r3
   1255c:	1dba      	adds	r2, r7, #6
   1255e:	7812      	ldrb	r2, [r2, #0]
   12560:	701a      	strb	r2, [r3, #0]

	if (dx < 0) {
   12562:	230a      	movs	r3, #10
   12564:	18fb      	adds	r3, r7, r3
   12566:	781b      	ldrb	r3, [r3, #0]
   12568:	2b7f      	cmp	r3, #127	; 0x7f
   1256a:	d90c      	bls.n	12586 <gfx_mono_generic_draw_line+0xc6>
		xinc = -1;
   1256c:	230c      	movs	r3, #12
   1256e:	18fb      	adds	r3, r7, r3
   12570:	22ff      	movs	r2, #255	; 0xff
   12572:	701a      	strb	r2, [r3, #0]
		dx = -dx;
   12574:	230a      	movs	r3, #10
   12576:	18fb      	adds	r3, r7, r3
   12578:	781b      	ldrb	r3, [r3, #0]
   1257a:	425b      	negs	r3, r3
   1257c:	b2da      	uxtb	r2, r3
   1257e:	230a      	movs	r3, #10
   12580:	18fb      	adds	r3, r7, r3
   12582:	701a      	strb	r2, [r3, #0]
   12584:	e003      	b.n	1258e <gfx_mono_generic_draw_line+0xce>
	} else {
		xinc = 1;
   12586:	230c      	movs	r3, #12
   12588:	18fb      	adds	r3, r7, r3
   1258a:	2201      	movs	r2, #1
   1258c:	701a      	strb	r2, [r3, #0]
	}

	if (dy < 0) {
   1258e:	2309      	movs	r3, #9
   12590:	18fb      	adds	r3, r7, r3
   12592:	781b      	ldrb	r3, [r3, #0]
   12594:	2b7f      	cmp	r3, #127	; 0x7f
   12596:	d90c      	bls.n	125b2 <gfx_mono_generic_draw_line+0xf2>
		yinc = -1;
   12598:	230b      	movs	r3, #11
   1259a:	18fb      	adds	r3, r7, r3
   1259c:	22ff      	movs	r2, #255	; 0xff
   1259e:	701a      	strb	r2, [r3, #0]
		dy = -dy;
   125a0:	2309      	movs	r3, #9
   125a2:	18fb      	adds	r3, r7, r3
   125a4:	781b      	ldrb	r3, [r3, #0]
   125a6:	425b      	negs	r3, r3
   125a8:	b2da      	uxtb	r2, r3
   125aa:	2309      	movs	r3, #9
   125ac:	18fb      	adds	r3, r7, r3
   125ae:	701a      	strb	r2, [r3, #0]
   125b0:	e003      	b.n	125ba <gfx_mono_generic_draw_line+0xfa>
	} else {
		yinc = 1;
   125b2:	230b      	movs	r3, #11
   125b4:	18fb      	adds	r3, r7, r3
   125b6:	2201      	movs	r2, #1
   125b8:	701a      	strb	r2, [r3, #0]
	}

	if (dx > dy) {
   125ba:	230a      	movs	r3, #10
   125bc:	18fa      	adds	r2, r7, r3
   125be:	2309      	movs	r3, #9
   125c0:	18fb      	adds	r3, r7, r3
   125c2:	7812      	ldrb	r2, [r2, #0]
   125c4:	b252      	sxtb	r2, r2
   125c6:	781b      	ldrb	r3, [r3, #0]
   125c8:	b25b      	sxtb	r3, r3
   125ca:	429a      	cmp	r2, r3
   125cc:	dd5b      	ble.n	12686 <gfx_mono_generic_draw_line+0x1c6>
		e = dy - dx;
   125ce:	2309      	movs	r3, #9
   125d0:	18fb      	adds	r3, r7, r3
   125d2:	781a      	ldrb	r2, [r3, #0]
   125d4:	230a      	movs	r3, #10
   125d6:	18fb      	adds	r3, r7, r3
   125d8:	781b      	ldrb	r3, [r3, #0]
   125da:	1ad3      	subs	r3, r2, r3
   125dc:	b2da      	uxtb	r2, r3
   125de:	2308      	movs	r3, #8
   125e0:	18fb      	adds	r3, r7, r3
   125e2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dx; i++) {
   125e4:	230f      	movs	r3, #15
   125e6:	18fb      	adds	r3, r7, r3
   125e8:	2200      	movs	r2, #0
   125ea:	701a      	strb	r2, [r3, #0]
   125ec:	e041      	b.n	12672 <gfx_mono_generic_draw_line+0x1b2>
			gfx_mono_draw_pixel(x, y, color);
   125ee:	2320      	movs	r3, #32
   125f0:	18fb      	adds	r3, r7, r3
   125f2:	781a      	ldrb	r2, [r3, #0]
   125f4:	230d      	movs	r3, #13
   125f6:	18fb      	adds	r3, r7, r3
   125f8:	7819      	ldrb	r1, [r3, #0]
   125fa:	230e      	movs	r3, #14
   125fc:	18fb      	adds	r3, r7, r3
   125fe:	781b      	ldrb	r3, [r3, #0]
   12600:	0018      	movs	r0, r3
   12602:	4b50      	ldr	r3, [pc, #320]	; (12744 <gfx_mono_generic_draw_line+0x284>)
   12604:	4798      	blx	r3
			if (e >= 0) {
   12606:	2308      	movs	r3, #8
   12608:	18fb      	adds	r3, r7, r3
   1260a:	781b      	ldrb	r3, [r3, #0]
   1260c:	2b7f      	cmp	r3, #127	; 0x7f
   1260e:	d814      	bhi.n	1263a <gfx_mono_generic_draw_line+0x17a>
				e -= dx;
   12610:	2308      	movs	r3, #8
   12612:	18fb      	adds	r3, r7, r3
   12614:	781a      	ldrb	r2, [r3, #0]
   12616:	230a      	movs	r3, #10
   12618:	18fb      	adds	r3, r7, r3
   1261a:	781b      	ldrb	r3, [r3, #0]
   1261c:	1ad3      	subs	r3, r2, r3
   1261e:	b2da      	uxtb	r2, r3
   12620:	2308      	movs	r3, #8
   12622:	18fb      	adds	r3, r7, r3
   12624:	701a      	strb	r2, [r3, #0]
				y += yinc;
   12626:	230b      	movs	r3, #11
   12628:	18fb      	adds	r3, r7, r3
   1262a:	7819      	ldrb	r1, [r3, #0]
   1262c:	230d      	movs	r3, #13
   1262e:	18fb      	adds	r3, r7, r3
   12630:	220d      	movs	r2, #13
   12632:	18ba      	adds	r2, r7, r2
   12634:	7812      	ldrb	r2, [r2, #0]
   12636:	188a      	adds	r2, r1, r2
   12638:	701a      	strb	r2, [r3, #0]
			}

			e += dy;
   1263a:	2308      	movs	r3, #8
   1263c:	18fb      	adds	r3, r7, r3
   1263e:	781a      	ldrb	r2, [r3, #0]
   12640:	2309      	movs	r3, #9
   12642:	18fb      	adds	r3, r7, r3
   12644:	781b      	ldrb	r3, [r3, #0]
   12646:	18d3      	adds	r3, r2, r3
   12648:	b2da      	uxtb	r2, r3
   1264a:	2308      	movs	r3, #8
   1264c:	18fb      	adds	r3, r7, r3
   1264e:	701a      	strb	r2, [r3, #0]
			x += xinc;
   12650:	230c      	movs	r3, #12
   12652:	18fb      	adds	r3, r7, r3
   12654:	7819      	ldrb	r1, [r3, #0]
   12656:	230e      	movs	r3, #14
   12658:	18fb      	adds	r3, r7, r3
   1265a:	220e      	movs	r2, #14
   1265c:	18ba      	adds	r2, r7, r2
   1265e:	7812      	ldrb	r2, [r2, #0]
   12660:	188a      	adds	r2, r1, r2
   12662:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dx; i++) {
   12664:	230f      	movs	r3, #15
   12666:	18fb      	adds	r3, r7, r3
   12668:	781a      	ldrb	r2, [r3, #0]
   1266a:	230f      	movs	r3, #15
   1266c:	18fb      	adds	r3, r7, r3
   1266e:	3201      	adds	r2, #1
   12670:	701a      	strb	r2, [r3, #0]
   12672:	230f      	movs	r3, #15
   12674:	18fb      	adds	r3, r7, r3
   12676:	781a      	ldrb	r2, [r3, #0]
   12678:	230a      	movs	r3, #10
   1267a:	18fb      	adds	r3, r7, r3
   1267c:	781b      	ldrb	r3, [r3, #0]
   1267e:	b25b      	sxtb	r3, r3
   12680:	429a      	cmp	r2, r3
   12682:	ddb4      	ble.n	125ee <gfx_mono_generic_draw_line+0x12e>

			e += dx;
			y += yinc;
		}
	}
}
   12684:	e05a      	b.n	1273c <gfx_mono_generic_draw_line+0x27c>
		e = dx - dy;
   12686:	230a      	movs	r3, #10
   12688:	18fb      	adds	r3, r7, r3
   1268a:	781a      	ldrb	r2, [r3, #0]
   1268c:	2309      	movs	r3, #9
   1268e:	18fb      	adds	r3, r7, r3
   12690:	781b      	ldrb	r3, [r3, #0]
   12692:	1ad3      	subs	r3, r2, r3
   12694:	b2da      	uxtb	r2, r3
   12696:	2308      	movs	r3, #8
   12698:	18fb      	adds	r3, r7, r3
   1269a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dy; i++) {
   1269c:	230f      	movs	r3, #15
   1269e:	18fb      	adds	r3, r7, r3
   126a0:	2200      	movs	r2, #0
   126a2:	701a      	strb	r2, [r3, #0]
   126a4:	e041      	b.n	1272a <gfx_mono_generic_draw_line+0x26a>
			gfx_mono_draw_pixel(x, y, color);
   126a6:	2320      	movs	r3, #32
   126a8:	18fb      	adds	r3, r7, r3
   126aa:	781a      	ldrb	r2, [r3, #0]
   126ac:	230d      	movs	r3, #13
   126ae:	18fb      	adds	r3, r7, r3
   126b0:	7819      	ldrb	r1, [r3, #0]
   126b2:	230e      	movs	r3, #14
   126b4:	18fb      	adds	r3, r7, r3
   126b6:	781b      	ldrb	r3, [r3, #0]
   126b8:	0018      	movs	r0, r3
   126ba:	4b22      	ldr	r3, [pc, #136]	; (12744 <gfx_mono_generic_draw_line+0x284>)
   126bc:	4798      	blx	r3
			if (e >= 0) {
   126be:	2308      	movs	r3, #8
   126c0:	18fb      	adds	r3, r7, r3
   126c2:	781b      	ldrb	r3, [r3, #0]
   126c4:	2b7f      	cmp	r3, #127	; 0x7f
   126c6:	d814      	bhi.n	126f2 <gfx_mono_generic_draw_line+0x232>
				e -= dy;
   126c8:	2308      	movs	r3, #8
   126ca:	18fb      	adds	r3, r7, r3
   126cc:	781a      	ldrb	r2, [r3, #0]
   126ce:	2309      	movs	r3, #9
   126d0:	18fb      	adds	r3, r7, r3
   126d2:	781b      	ldrb	r3, [r3, #0]
   126d4:	1ad3      	subs	r3, r2, r3
   126d6:	b2da      	uxtb	r2, r3
   126d8:	2308      	movs	r3, #8
   126da:	18fb      	adds	r3, r7, r3
   126dc:	701a      	strb	r2, [r3, #0]
				x += xinc;
   126de:	230c      	movs	r3, #12
   126e0:	18fb      	adds	r3, r7, r3
   126e2:	7819      	ldrb	r1, [r3, #0]
   126e4:	230e      	movs	r3, #14
   126e6:	18fb      	adds	r3, r7, r3
   126e8:	220e      	movs	r2, #14
   126ea:	18ba      	adds	r2, r7, r2
   126ec:	7812      	ldrb	r2, [r2, #0]
   126ee:	188a      	adds	r2, r1, r2
   126f0:	701a      	strb	r2, [r3, #0]
			e += dx;
   126f2:	2308      	movs	r3, #8
   126f4:	18fb      	adds	r3, r7, r3
   126f6:	781a      	ldrb	r2, [r3, #0]
   126f8:	230a      	movs	r3, #10
   126fa:	18fb      	adds	r3, r7, r3
   126fc:	781b      	ldrb	r3, [r3, #0]
   126fe:	18d3      	adds	r3, r2, r3
   12700:	b2da      	uxtb	r2, r3
   12702:	2308      	movs	r3, #8
   12704:	18fb      	adds	r3, r7, r3
   12706:	701a      	strb	r2, [r3, #0]
			y += yinc;
   12708:	230b      	movs	r3, #11
   1270a:	18fb      	adds	r3, r7, r3
   1270c:	7819      	ldrb	r1, [r3, #0]
   1270e:	230d      	movs	r3, #13
   12710:	18fb      	adds	r3, r7, r3
   12712:	220d      	movs	r2, #13
   12714:	18ba      	adds	r2, r7, r2
   12716:	7812      	ldrb	r2, [r2, #0]
   12718:	188a      	adds	r2, r1, r2
   1271a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dy; i++) {
   1271c:	230f      	movs	r3, #15
   1271e:	18fb      	adds	r3, r7, r3
   12720:	781a      	ldrb	r2, [r3, #0]
   12722:	230f      	movs	r3, #15
   12724:	18fb      	adds	r3, r7, r3
   12726:	3201      	adds	r2, #1
   12728:	701a      	strb	r2, [r3, #0]
   1272a:	230f      	movs	r3, #15
   1272c:	18fb      	adds	r3, r7, r3
   1272e:	781a      	ldrb	r2, [r3, #0]
   12730:	2309      	movs	r3, #9
   12732:	18fb      	adds	r3, r7, r3
   12734:	781b      	ldrb	r3, [r3, #0]
   12736:	b25b      	sxtb	r3, r3
   12738:	429a      	cmp	r2, r3
   1273a:	ddb4      	ble.n	126a6 <gfx_mono_generic_draw_line+0x1e6>
}
   1273c:	46c0      	nop			; (mov r8, r8)
   1273e:	46bd      	mov	sp, r7
   12740:	b004      	add	sp, #16
   12742:	bdb0      	pop	{r4, r5, r7, pc}
   12744:	00012af9 	.word	0x00012af9

00012748 <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
   12748:	b5b0      	push	{r4, r5, r7, lr}
   1274a:	b084      	sub	sp, #16
   1274c:	af00      	add	r7, sp, #0
   1274e:	0005      	movs	r5, r0
   12750:	000c      	movs	r4, r1
   12752:	0010      	movs	r0, r2
   12754:	0019      	movs	r1, r3
   12756:	1dfb      	adds	r3, r7, #7
   12758:	1c2a      	adds	r2, r5, #0
   1275a:	701a      	strb	r2, [r3, #0]
   1275c:	1dbb      	adds	r3, r7, #6
   1275e:	1c22      	adds	r2, r4, #0
   12760:	701a      	strb	r2, [r3, #0]
   12762:	1d7b      	adds	r3, r7, #5
   12764:	1c02      	adds	r2, r0, #0
   12766:	701a      	strb	r2, [r3, #0]
   12768:	1d3b      	adds	r3, r7, #4
   1276a:	1c0a      	adds	r2, r1, #0
   1276c:	701a      	strb	r2, [r3, #0]
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
   1276e:	1d7b      	adds	r3, r7, #5
   12770:	781b      	ldrb	r3, [r3, #0]
   12772:	2b00      	cmp	r3, #0
   12774:	d109      	bne.n	1278a <gfx_mono_generic_draw_filled_circle+0x42>
		gfx_mono_draw_pixel(x, y, color);
   12776:	1d3b      	adds	r3, r7, #4
   12778:	781a      	ldrb	r2, [r3, #0]
   1277a:	1dbb      	adds	r3, r7, #6
   1277c:	7819      	ldrb	r1, [r3, #0]
   1277e:	1dfb      	adds	r3, r7, #7
   12780:	781b      	ldrb	r3, [r3, #0]
   12782:	0018      	movs	r0, r3
   12784:	4b8f      	ldr	r3, [pc, #572]	; (129c4 <gfx_mono_generic_draw_filled_circle+0x27c>)
   12786:	4798      	blx	r3
		return;
   12788:	e118      	b.n	129bc <gfx_mono_generic_draw_filled_circle+0x274>
	}

	/* Set up start iterators. */
	offset_x = 0;
   1278a:	230f      	movs	r3, #15
   1278c:	18fb      	adds	r3, r7, r3
   1278e:	2200      	movs	r2, #0
   12790:	701a      	strb	r2, [r3, #0]
	offset_y = radius;
   12792:	230e      	movs	r3, #14
   12794:	18fb      	adds	r3, r7, r3
   12796:	1d7a      	adds	r2, r7, #5
   12798:	7812      	ldrb	r2, [r2, #0]
   1279a:	701a      	strb	r2, [r3, #0]
	error = 3 - 2 * radius;
   1279c:	1d7b      	adds	r3, r7, #5
   1279e:	781b      	ldrb	r3, [r3, #0]
   127a0:	b29b      	uxth	r3, r3
   127a2:	18db      	adds	r3, r3, r3
   127a4:	b29b      	uxth	r3, r3
   127a6:	2203      	movs	r2, #3
   127a8:	1ad3      	subs	r3, r2, r3
   127aa:	b29a      	uxth	r2, r3
   127ac:	230c      	movs	r3, #12
   127ae:	18fb      	adds	r3, r7, r3
   127b0:	801a      	strh	r2, [r3, #0]

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
   127b2:	e0fa      	b.n	129aa <gfx_mono_generic_draw_filled_circle+0x262>
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
   127b4:	2320      	movs	r3, #32
   127b6:	18fb      	adds	r3, r7, r3
   127b8:	781b      	ldrb	r3, [r3, #0]
   127ba:	2203      	movs	r2, #3
   127bc:	4013      	ands	r3, r2
   127be:	d02d      	beq.n	1281c <gfx_mono_generic_draw_filled_circle+0xd4>
			gfx_mono_draw_vertical_line(x + offset_y,
   127c0:	1dfa      	adds	r2, r7, #7
   127c2:	230e      	movs	r3, #14
   127c4:	18fb      	adds	r3, r7, r3
   127c6:	7812      	ldrb	r2, [r2, #0]
   127c8:	781b      	ldrb	r3, [r3, #0]
   127ca:	18d3      	adds	r3, r2, r3
   127cc:	b2d8      	uxtb	r0, r3
   127ce:	1dba      	adds	r2, r7, #6
   127d0:	230f      	movs	r3, #15
   127d2:	18fb      	adds	r3, r7, r3
   127d4:	7812      	ldrb	r2, [r2, #0]
   127d6:	781b      	ldrb	r3, [r3, #0]
   127d8:	1ad3      	subs	r3, r2, r3
   127da:	b2d9      	uxtb	r1, r3
   127dc:	230f      	movs	r3, #15
   127de:	18fb      	adds	r3, r7, r3
   127e0:	781b      	ldrb	r3, [r3, #0]
   127e2:	3301      	adds	r3, #1
   127e4:	b2da      	uxtb	r2, r3
   127e6:	1d3b      	adds	r3, r7, #4
   127e8:	781b      	ldrb	r3, [r3, #0]
   127ea:	4c77      	ldr	r4, [pc, #476]	; (129c8 <gfx_mono_generic_draw_filled_circle+0x280>)
   127ec:	47a0      	blx	r4
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
   127ee:	1dfa      	adds	r2, r7, #7
   127f0:	230f      	movs	r3, #15
   127f2:	18fb      	adds	r3, r7, r3
   127f4:	7812      	ldrb	r2, [r2, #0]
   127f6:	781b      	ldrb	r3, [r3, #0]
   127f8:	18d3      	adds	r3, r2, r3
   127fa:	b2d8      	uxtb	r0, r3
   127fc:	1dba      	adds	r2, r7, #6
   127fe:	230e      	movs	r3, #14
   12800:	18fb      	adds	r3, r7, r3
   12802:	7812      	ldrb	r2, [r2, #0]
   12804:	781b      	ldrb	r3, [r3, #0]
   12806:	1ad3      	subs	r3, r2, r3
   12808:	b2d9      	uxtb	r1, r3
   1280a:	230e      	movs	r3, #14
   1280c:	18fb      	adds	r3, r7, r3
   1280e:	781b      	ldrb	r3, [r3, #0]
   12810:	3301      	adds	r3, #1
   12812:	b2da      	uxtb	r2, r3
   12814:	1d3b      	adds	r3, r7, #4
   12816:	781b      	ldrb	r3, [r3, #0]
   12818:	4c6b      	ldr	r4, [pc, #428]	; (129c8 <gfx_mono_generic_draw_filled_circle+0x280>)
   1281a:	47a0      	blx	r4
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
   1281c:	2320      	movs	r3, #32
   1281e:	18fb      	adds	r3, r7, r3
   12820:	781b      	ldrb	r3, [r3, #0]
   12822:	220c      	movs	r2, #12
   12824:	4013      	ands	r3, r2
   12826:	d02d      	beq.n	12884 <gfx_mono_generic_draw_filled_circle+0x13c>
			gfx_mono_draw_vertical_line(x - offset_y,
   12828:	1dfa      	adds	r2, r7, #7
   1282a:	230e      	movs	r3, #14
   1282c:	18fb      	adds	r3, r7, r3
   1282e:	7812      	ldrb	r2, [r2, #0]
   12830:	781b      	ldrb	r3, [r3, #0]
   12832:	1ad3      	subs	r3, r2, r3
   12834:	b2d8      	uxtb	r0, r3
   12836:	1dba      	adds	r2, r7, #6
   12838:	230f      	movs	r3, #15
   1283a:	18fb      	adds	r3, r7, r3
   1283c:	7812      	ldrb	r2, [r2, #0]
   1283e:	781b      	ldrb	r3, [r3, #0]
   12840:	1ad3      	subs	r3, r2, r3
   12842:	b2d9      	uxtb	r1, r3
   12844:	230f      	movs	r3, #15
   12846:	18fb      	adds	r3, r7, r3
   12848:	781b      	ldrb	r3, [r3, #0]
   1284a:	3301      	adds	r3, #1
   1284c:	b2da      	uxtb	r2, r3
   1284e:	1d3b      	adds	r3, r7, #4
   12850:	781b      	ldrb	r3, [r3, #0]
   12852:	4c5d      	ldr	r4, [pc, #372]	; (129c8 <gfx_mono_generic_draw_filled_circle+0x280>)
   12854:	47a0      	blx	r4
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
   12856:	1dfa      	adds	r2, r7, #7
   12858:	230f      	movs	r3, #15
   1285a:	18fb      	adds	r3, r7, r3
   1285c:	7812      	ldrb	r2, [r2, #0]
   1285e:	781b      	ldrb	r3, [r3, #0]
   12860:	1ad3      	subs	r3, r2, r3
   12862:	b2d8      	uxtb	r0, r3
   12864:	1dba      	adds	r2, r7, #6
   12866:	230e      	movs	r3, #14
   12868:	18fb      	adds	r3, r7, r3
   1286a:	7812      	ldrb	r2, [r2, #0]
   1286c:	781b      	ldrb	r3, [r3, #0]
   1286e:	1ad3      	subs	r3, r2, r3
   12870:	b2d9      	uxtb	r1, r3
   12872:	230e      	movs	r3, #14
   12874:	18fb      	adds	r3, r7, r3
   12876:	781b      	ldrb	r3, [r3, #0]
   12878:	3301      	adds	r3, #1
   1287a:	b2da      	uxtb	r2, r3
   1287c:	1d3b      	adds	r3, r7, #4
   1287e:	781b      	ldrb	r3, [r3, #0]
   12880:	4c51      	ldr	r4, [pc, #324]	; (129c8 <gfx_mono_generic_draw_filled_circle+0x280>)
   12882:	47a0      	blx	r4
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
   12884:	2320      	movs	r3, #32
   12886:	18fb      	adds	r3, r7, r3
   12888:	781b      	ldrb	r3, [r3, #0]
   1288a:	2230      	movs	r2, #48	; 0x30
   1288c:	4013      	ands	r3, r2
   1288e:	d025      	beq.n	128dc <gfx_mono_generic_draw_filled_circle+0x194>
			gfx_mono_draw_vertical_line(x - offset_y,
   12890:	1dfa      	adds	r2, r7, #7
   12892:	230e      	movs	r3, #14
   12894:	18fb      	adds	r3, r7, r3
   12896:	7812      	ldrb	r2, [r2, #0]
   12898:	781b      	ldrb	r3, [r3, #0]
   1289a:	1ad3      	subs	r3, r2, r3
   1289c:	b2d8      	uxtb	r0, r3
   1289e:	230f      	movs	r3, #15
   128a0:	18fb      	adds	r3, r7, r3
   128a2:	781b      	ldrb	r3, [r3, #0]
   128a4:	3301      	adds	r3, #1
   128a6:	b2da      	uxtb	r2, r3
   128a8:	1d3b      	adds	r3, r7, #4
   128aa:	781c      	ldrb	r4, [r3, #0]
   128ac:	1dbb      	adds	r3, r7, #6
   128ae:	7819      	ldrb	r1, [r3, #0]
   128b0:	0023      	movs	r3, r4
   128b2:	4c45      	ldr	r4, [pc, #276]	; (129c8 <gfx_mono_generic_draw_filled_circle+0x280>)
   128b4:	47a0      	blx	r4
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
   128b6:	1dfa      	adds	r2, r7, #7
   128b8:	230f      	movs	r3, #15
   128ba:	18fb      	adds	r3, r7, r3
   128bc:	7812      	ldrb	r2, [r2, #0]
   128be:	781b      	ldrb	r3, [r3, #0]
   128c0:	1ad3      	subs	r3, r2, r3
   128c2:	b2d8      	uxtb	r0, r3
   128c4:	230e      	movs	r3, #14
   128c6:	18fb      	adds	r3, r7, r3
   128c8:	781b      	ldrb	r3, [r3, #0]
   128ca:	3301      	adds	r3, #1
   128cc:	b2da      	uxtb	r2, r3
   128ce:	1d3b      	adds	r3, r7, #4
   128d0:	781c      	ldrb	r4, [r3, #0]
   128d2:	1dbb      	adds	r3, r7, #6
   128d4:	7819      	ldrb	r1, [r3, #0]
   128d6:	0023      	movs	r3, r4
   128d8:	4c3b      	ldr	r4, [pc, #236]	; (129c8 <gfx_mono_generic_draw_filled_circle+0x280>)
   128da:	47a0      	blx	r4
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
   128dc:	2320      	movs	r3, #32
   128de:	18fb      	adds	r3, r7, r3
   128e0:	781b      	ldrb	r3, [r3, #0]
   128e2:	22c0      	movs	r2, #192	; 0xc0
   128e4:	4013      	ands	r3, r2
   128e6:	d025      	beq.n	12934 <gfx_mono_generic_draw_filled_circle+0x1ec>
			gfx_mono_draw_vertical_line(x + offset_y,
   128e8:	1dfa      	adds	r2, r7, #7
   128ea:	230e      	movs	r3, #14
   128ec:	18fb      	adds	r3, r7, r3
   128ee:	7812      	ldrb	r2, [r2, #0]
   128f0:	781b      	ldrb	r3, [r3, #0]
   128f2:	18d3      	adds	r3, r2, r3
   128f4:	b2d8      	uxtb	r0, r3
   128f6:	230f      	movs	r3, #15
   128f8:	18fb      	adds	r3, r7, r3
   128fa:	781b      	ldrb	r3, [r3, #0]
   128fc:	3301      	adds	r3, #1
   128fe:	b2da      	uxtb	r2, r3
   12900:	1d3b      	adds	r3, r7, #4
   12902:	781c      	ldrb	r4, [r3, #0]
   12904:	1dbb      	adds	r3, r7, #6
   12906:	7819      	ldrb	r1, [r3, #0]
   12908:	0023      	movs	r3, r4
   1290a:	4c2f      	ldr	r4, [pc, #188]	; (129c8 <gfx_mono_generic_draw_filled_circle+0x280>)
   1290c:	47a0      	blx	r4
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
   1290e:	1dfa      	adds	r2, r7, #7
   12910:	230f      	movs	r3, #15
   12912:	18fb      	adds	r3, r7, r3
   12914:	7812      	ldrb	r2, [r2, #0]
   12916:	781b      	ldrb	r3, [r3, #0]
   12918:	18d3      	adds	r3, r2, r3
   1291a:	b2d8      	uxtb	r0, r3
   1291c:	230e      	movs	r3, #14
   1291e:	18fb      	adds	r3, r7, r3
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	3301      	adds	r3, #1
   12924:	b2da      	uxtb	r2, r3
   12926:	1d3b      	adds	r3, r7, #4
   12928:	781c      	ldrb	r4, [r3, #0]
   1292a:	1dbb      	adds	r3, r7, #6
   1292c:	7819      	ldrb	r1, [r3, #0]
   1292e:	0023      	movs	r3, r4
   12930:	4c25      	ldr	r4, [pc, #148]	; (129c8 <gfx_mono_generic_draw_filled_circle+0x280>)
   12932:	47a0      	blx	r4
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
   12934:	230c      	movs	r3, #12
   12936:	18fb      	adds	r3, r7, r3
   12938:	2200      	movs	r2, #0
   1293a:	5e9b      	ldrsh	r3, [r3, r2]
   1293c:	2b00      	cmp	r3, #0
   1293e:	da10      	bge.n	12962 <gfx_mono_generic_draw_filled_circle+0x21a>
			error += ((offset_x << 2) + 6);
   12940:	230f      	movs	r3, #15
   12942:	18fb      	adds	r3, r7, r3
   12944:	781b      	ldrb	r3, [r3, #0]
   12946:	b29b      	uxth	r3, r3
   12948:	009b      	lsls	r3, r3, #2
   1294a:	b29a      	uxth	r2, r3
   1294c:	230c      	movs	r3, #12
   1294e:	18fb      	adds	r3, r7, r3
   12950:	881b      	ldrh	r3, [r3, #0]
   12952:	18d3      	adds	r3, r2, r3
   12954:	b29b      	uxth	r3, r3
   12956:	3306      	adds	r3, #6
   12958:	b29a      	uxth	r2, r3
   1295a:	230c      	movs	r3, #12
   1295c:	18fb      	adds	r3, r7, r3
   1295e:	801a      	strh	r2, [r3, #0]
   12960:	e01c      	b.n	1299c <gfx_mono_generic_draw_filled_circle+0x254>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
   12962:	230f      	movs	r3, #15
   12964:	18fb      	adds	r3, r7, r3
   12966:	781b      	ldrb	r3, [r3, #0]
   12968:	b29a      	uxth	r2, r3
   1296a:	230e      	movs	r3, #14
   1296c:	18fb      	adds	r3, r7, r3
   1296e:	781b      	ldrb	r3, [r3, #0]
   12970:	b29b      	uxth	r3, r3
   12972:	1ad3      	subs	r3, r2, r3
   12974:	b29b      	uxth	r3, r3
   12976:	009b      	lsls	r3, r3, #2
   12978:	b29a      	uxth	r2, r3
   1297a:	230c      	movs	r3, #12
   1297c:	18fb      	adds	r3, r7, r3
   1297e:	881b      	ldrh	r3, [r3, #0]
   12980:	18d3      	adds	r3, r2, r3
   12982:	b29b      	uxth	r3, r3
   12984:	330a      	adds	r3, #10
   12986:	b29a      	uxth	r2, r3
   12988:	230c      	movs	r3, #12
   1298a:	18fb      	adds	r3, r7, r3
   1298c:	801a      	strh	r2, [r3, #0]
			--offset_y;
   1298e:	230e      	movs	r3, #14
   12990:	18fb      	adds	r3, r7, r3
   12992:	220e      	movs	r2, #14
   12994:	18ba      	adds	r2, r7, r2
   12996:	7812      	ldrb	r2, [r2, #0]
   12998:	3a01      	subs	r2, #1
   1299a:	701a      	strb	r2, [r3, #0]
		}

		/* Next X. */
		++offset_x;
   1299c:	230f      	movs	r3, #15
   1299e:	18fb      	adds	r3, r7, r3
   129a0:	220f      	movs	r2, #15
   129a2:	18ba      	adds	r2, r7, r2
   129a4:	7812      	ldrb	r2, [r2, #0]
   129a6:	3201      	adds	r2, #1
   129a8:	701a      	strb	r2, [r3, #0]
	while (offset_x <= offset_y) {
   129aa:	230f      	movs	r3, #15
   129ac:	18fa      	adds	r2, r7, r3
   129ae:	230e      	movs	r3, #14
   129b0:	18fb      	adds	r3, r7, r3
   129b2:	7812      	ldrb	r2, [r2, #0]
   129b4:	781b      	ldrb	r3, [r3, #0]
   129b6:	429a      	cmp	r2, r3
   129b8:	d800      	bhi.n	129bc <gfx_mono_generic_draw_filled_circle+0x274>
   129ba:	e6fb      	b.n	127b4 <gfx_mono_generic_draw_filled_circle+0x6c>
	}
}
   129bc:	46bd      	mov	sp, r7
   129be:	b004      	add	sp, #16
   129c0:	bdb0      	pop	{r4, r5, r7, pc}
   129c2:	46c0      	nop			; (mov r8, r8)
   129c4:	00012af9 	.word	0x00012af9
   129c8:	00012331 	.word	0x00012331

000129cc <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   129cc:	b580      	push	{r7, lr}
   129ce:	b082      	sub	sp, #8
   129d0:	af00      	add	r7, sp, #0
   129d2:	0002      	movs	r2, r0
   129d4:	1dfb      	adds	r3, r7, #7
   129d6:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   129d8:	1dfb      	adds	r3, r7, #7
   129da:	1dfa      	adds	r2, r7, #7
   129dc:	7812      	ldrb	r2, [r2, #0]
   129de:	210f      	movs	r1, #15
   129e0:	400a      	ands	r2, r1
   129e2:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   129e4:	1dfb      	adds	r3, r7, #7
   129e6:	781b      	ldrb	r3, [r3, #0]
   129e8:	2250      	movs	r2, #80	; 0x50
   129ea:	4252      	negs	r2, r2
   129ec:	4313      	orrs	r3, r2
   129ee:	b2db      	uxtb	r3, r3
   129f0:	0018      	movs	r0, r3
   129f2:	4b03      	ldr	r3, [pc, #12]	; (12a00 <ssd1306_set_page_address+0x34>)
   129f4:	4798      	blx	r3
}
   129f6:	46c0      	nop			; (mov r8, r8)
   129f8:	46bd      	mov	sp, r7
   129fa:	b002      	add	sp, #8
   129fc:	bd80      	pop	{r7, pc}
   129fe:	46c0      	nop			; (mov r8, r8)
   12a00:	000121dd 	.word	0x000121dd

00012a04 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   12a04:	b580      	push	{r7, lr}
   12a06:	b082      	sub	sp, #8
   12a08:	af00      	add	r7, sp, #0
   12a0a:	0002      	movs	r2, r0
   12a0c:	1dfb      	adds	r3, r7, #7
   12a0e:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12a10:	1dfb      	adds	r3, r7, #7
   12a12:	1dfa      	adds	r2, r7, #7
   12a14:	7812      	ldrb	r2, [r2, #0]
   12a16:	217f      	movs	r1, #127	; 0x7f
   12a18:	400a      	ands	r2, r1
   12a1a:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
   12a1c:	1dfb      	adds	r3, r7, #7
   12a1e:	781b      	ldrb	r3, [r3, #0]
   12a20:	091b      	lsrs	r3, r3, #4
   12a22:	b2db      	uxtb	r3, r3
   12a24:	2210      	movs	r2, #16
   12a26:	4313      	orrs	r3, r2
   12a28:	b2db      	uxtb	r3, r3
   12a2a:	0018      	movs	r0, r3
   12a2c:	4b06      	ldr	r3, [pc, #24]	; (12a48 <ssd1306_set_column_address+0x44>)
   12a2e:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   12a30:	1dfb      	adds	r3, r7, #7
   12a32:	781b      	ldrb	r3, [r3, #0]
   12a34:	220f      	movs	r2, #15
   12a36:	4013      	ands	r3, r2
   12a38:	b2db      	uxtb	r3, r3
   12a3a:	0018      	movs	r0, r3
   12a3c:	4b02      	ldr	r3, [pc, #8]	; (12a48 <ssd1306_set_column_address+0x44>)
   12a3e:	4798      	blx	r3
}
   12a40:	46c0      	nop			; (mov r8, r8)
   12a42:	46bd      	mov	sp, r7
   12a44:	b002      	add	sp, #8
   12a46:	bd80      	pop	{r7, pc}
   12a48:	000121dd 	.word	0x000121dd

00012a4c <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12a4c:	b580      	push	{r7, lr}
   12a4e:	b082      	sub	sp, #8
   12a50:	af00      	add	r7, sp, #0
   12a52:	0002      	movs	r2, r0
   12a54:	1dfb      	adds	r3, r7, #7
   12a56:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12a58:	1dfb      	adds	r3, r7, #7
   12a5a:	1dfa      	adds	r2, r7, #7
   12a5c:	7812      	ldrb	r2, [r2, #0]
   12a5e:	213f      	movs	r1, #63	; 0x3f
   12a60:	400a      	ands	r2, r1
   12a62:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12a64:	1dfb      	adds	r3, r7, #7
   12a66:	781b      	ldrb	r3, [r3, #0]
   12a68:	2240      	movs	r2, #64	; 0x40
   12a6a:	4313      	orrs	r3, r2
   12a6c:	b2db      	uxtb	r3, r3
   12a6e:	0018      	movs	r0, r3
   12a70:	4b02      	ldr	r3, [pc, #8]	; (12a7c <ssd1306_set_display_start_line_address+0x30>)
   12a72:	4798      	blx	r3
}
   12a74:	46c0      	nop			; (mov r8, r8)
   12a76:	46bd      	mov	sp, r7
   12a78:	b002      	add	sp, #8
   12a7a:	bd80      	pop	{r7, pc}
   12a7c:	000121dd 	.word	0x000121dd

00012a80 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   12a80:	b590      	push	{r4, r7, lr}
   12a82:	b083      	sub	sp, #12
   12a84:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12a86:	4b17      	ldr	r3, [pc, #92]	; (12ae4 <gfx_mono_ssd1306_init+0x64>)
   12a88:	0018      	movs	r0, r3
   12a8a:	4b17      	ldr	r3, [pc, #92]	; (12ae8 <gfx_mono_ssd1306_init+0x68>)
   12a8c:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   12a8e:	4b17      	ldr	r3, [pc, #92]	; (12aec <gfx_mono_ssd1306_init+0x6c>)
   12a90:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   12a92:	2000      	movs	r0, #0
   12a94:	4b16      	ldr	r3, [pc, #88]	; (12af0 <gfx_mono_ssd1306_init+0x70>)
   12a96:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12a98:	1dfb      	adds	r3, r7, #7
   12a9a:	2200      	movs	r2, #0
   12a9c:	701a      	strb	r2, [r3, #0]
   12a9e:	e019      	b.n	12ad4 <gfx_mono_ssd1306_init+0x54>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
   12aa0:	1dbb      	adds	r3, r7, #6
   12aa2:	2200      	movs	r2, #0
   12aa4:	701a      	strb	r2, [r3, #0]
   12aa6:	e00c      	b.n	12ac2 <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   12aa8:	1dbb      	adds	r3, r7, #6
   12aaa:	7819      	ldrb	r1, [r3, #0]
   12aac:	1dfb      	adds	r3, r7, #7
   12aae:	7818      	ldrb	r0, [r3, #0]
   12ab0:	2301      	movs	r3, #1
   12ab2:	2200      	movs	r2, #0
   12ab4:	4c0f      	ldr	r4, [pc, #60]	; (12af4 <gfx_mono_ssd1306_init+0x74>)
   12ab6:	47a0      	blx	r4
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
   12ab8:	1dbb      	adds	r3, r7, #6
   12aba:	781a      	ldrb	r2, [r3, #0]
   12abc:	1dbb      	adds	r3, r7, #6
   12abe:	3201      	adds	r2, #1
   12ac0:	701a      	strb	r2, [r3, #0]
   12ac2:	1dbb      	adds	r3, r7, #6
   12ac4:	781b      	ldrb	r3, [r3, #0]
   12ac6:	2b43      	cmp	r3, #67	; 0x43
   12ac8:	d9ee      	bls.n	12aa8 <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12aca:	1dfb      	adds	r3, r7, #7
   12acc:	781a      	ldrb	r2, [r3, #0]
   12ace:	1dfb      	adds	r3, r7, #7
   12ad0:	3201      	adds	r2, #1
   12ad2:	701a      	strb	r2, [r3, #0]
   12ad4:	1dfb      	adds	r3, r7, #7
   12ad6:	781b      	ldrb	r3, [r3, #0]
   12ad8:	2b03      	cmp	r3, #3
   12ada:	d9e1      	bls.n	12aa0 <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   12adc:	46c0      	nop			; (mov r8, r8)
   12ade:	46bd      	mov	sp, r7
   12ae0:	b003      	add	sp, #12
   12ae2:	bd90      	pop	{r4, r7, pc}
   12ae4:	200002d0 	.word	0x200002d0
   12ae8:	0001228d 	.word	0x0001228d
   12aec:	00012129 	.word	0x00012129
   12af0:	00012a4d 	.word	0x00012a4d
   12af4:	00012bed 	.word	0x00012bed

00012af8 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   12af8:	b590      	push	{r4, r7, lr}
   12afa:	b085      	sub	sp, #20
   12afc:	af00      	add	r7, sp, #0
   12afe:	0004      	movs	r4, r0
   12b00:	0008      	movs	r0, r1
   12b02:	0011      	movs	r1, r2
   12b04:	1dfb      	adds	r3, r7, #7
   12b06:	1c22      	adds	r2, r4, #0
   12b08:	701a      	strb	r2, [r3, #0]
   12b0a:	1dbb      	adds	r3, r7, #6
   12b0c:	1c02      	adds	r2, r0, #0
   12b0e:	701a      	strb	r2, [r3, #0]
   12b10:	1d7b      	adds	r3, r7, #5
   12b12:	1c0a      	adds	r2, r1, #0
   12b14:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12b16:	1dfb      	adds	r3, r7, #7
   12b18:	781b      	ldrb	r3, [r3, #0]
   12b1a:	2b43      	cmp	r3, #67	; 0x43
   12b1c:	d85d      	bhi.n	12bda <gfx_mono_ssd1306_draw_pixel+0xe2>
   12b1e:	1dbb      	adds	r3, r7, #6
   12b20:	781b      	ldrb	r3, [r3, #0]
   12b22:	2b1f      	cmp	r3, #31
   12b24:	d859      	bhi.n	12bda <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12b26:	230e      	movs	r3, #14
   12b28:	18fb      	adds	r3, r7, r3
   12b2a:	1dba      	adds	r2, r7, #6
   12b2c:	7812      	ldrb	r2, [r2, #0]
   12b2e:	08d2      	lsrs	r2, r2, #3
   12b30:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12b32:	1dbb      	adds	r3, r7, #6
   12b34:	781a      	ldrb	r2, [r3, #0]
   12b36:	230e      	movs	r3, #14
   12b38:	18fb      	adds	r3, r7, r3
   12b3a:	781b      	ldrb	r3, [r3, #0]
   12b3c:	00db      	lsls	r3, r3, #3
   12b3e:	1ad3      	subs	r3, r2, r3
   12b40:	2201      	movs	r2, #1
   12b42:	409a      	lsls	r2, r3
   12b44:	230d      	movs	r3, #13
   12b46:	18fb      	adds	r3, r7, r3
   12b48:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   12b4a:	230f      	movs	r3, #15
   12b4c:	18fc      	adds	r4, r7, r3
   12b4e:	1dfb      	adds	r3, r7, #7
   12b50:	781a      	ldrb	r2, [r3, #0]
   12b52:	230e      	movs	r3, #14
   12b54:	18fb      	adds	r3, r7, r3
   12b56:	781b      	ldrb	r3, [r3, #0]
   12b58:	0011      	movs	r1, r2
   12b5a:	0018      	movs	r0, r3
   12b5c:	4b21      	ldr	r3, [pc, #132]	; (12be4 <gfx_mono_ssd1306_draw_pixel+0xec>)
   12b5e:	4798      	blx	r3
   12b60:	0003      	movs	r3, r0
   12b62:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12b64:	1d7b      	adds	r3, r7, #5
   12b66:	781b      	ldrb	r3, [r3, #0]
   12b68:	2b01      	cmp	r3, #1
   12b6a:	d004      	beq.n	12b76 <gfx_mono_ssd1306_draw_pixel+0x7e>
   12b6c:	2b02      	cmp	r3, #2
   12b6e:	d01d      	beq.n	12bac <gfx_mono_ssd1306_draw_pixel+0xb4>
   12b70:	2b00      	cmp	r3, #0
   12b72:	d00b      	beq.n	12b8c <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   12b74:	e025      	b.n	12bc2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   12b76:	230f      	movs	r3, #15
   12b78:	18fb      	adds	r3, r7, r3
   12b7a:	220f      	movs	r2, #15
   12b7c:	18b9      	adds	r1, r7, r2
   12b7e:	220d      	movs	r2, #13
   12b80:	18ba      	adds	r2, r7, r2
   12b82:	7809      	ldrb	r1, [r1, #0]
   12b84:	7812      	ldrb	r2, [r2, #0]
   12b86:	430a      	orrs	r2, r1
   12b88:	701a      	strb	r2, [r3, #0]
		break;
   12b8a:	e01a      	b.n	12bc2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   12b8c:	230d      	movs	r3, #13
   12b8e:	18fb      	adds	r3, r7, r3
   12b90:	781b      	ldrb	r3, [r3, #0]
   12b92:	b25b      	sxtb	r3, r3
   12b94:	43db      	mvns	r3, r3
   12b96:	b25b      	sxtb	r3, r3
   12b98:	220f      	movs	r2, #15
   12b9a:	18ba      	adds	r2, r7, r2
   12b9c:	7812      	ldrb	r2, [r2, #0]
   12b9e:	b252      	sxtb	r2, r2
   12ba0:	4013      	ands	r3, r2
   12ba2:	b25a      	sxtb	r2, r3
   12ba4:	230f      	movs	r3, #15
   12ba6:	18fb      	adds	r3, r7, r3
   12ba8:	701a      	strb	r2, [r3, #0]
		break;
   12baa:	e00a      	b.n	12bc2 <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   12bac:	230f      	movs	r3, #15
   12bae:	18fb      	adds	r3, r7, r3
   12bb0:	220f      	movs	r2, #15
   12bb2:	18b9      	adds	r1, r7, r2
   12bb4:	220d      	movs	r2, #13
   12bb6:	18ba      	adds	r2, r7, r2
   12bb8:	7809      	ldrb	r1, [r1, #0]
   12bba:	7812      	ldrb	r2, [r2, #0]
   12bbc:	404a      	eors	r2, r1
   12bbe:	701a      	strb	r2, [r3, #0]
		break;
   12bc0:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   12bc2:	230f      	movs	r3, #15
   12bc4:	18fb      	adds	r3, r7, r3
   12bc6:	781a      	ldrb	r2, [r3, #0]
   12bc8:	1dfb      	adds	r3, r7, #7
   12bca:	7819      	ldrb	r1, [r3, #0]
   12bcc:	230e      	movs	r3, #14
   12bce:	18fb      	adds	r3, r7, r3
   12bd0:	7818      	ldrb	r0, [r3, #0]
   12bd2:	2300      	movs	r3, #0
   12bd4:	4c04      	ldr	r4, [pc, #16]	; (12be8 <gfx_mono_ssd1306_draw_pixel+0xf0>)
   12bd6:	47a0      	blx	r4
   12bd8:	e000      	b.n	12bdc <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   12bda:	46c0      	nop			; (mov r8, r8)
}
   12bdc:	46bd      	mov	sp, r7
   12bde:	b005      	add	sp, #20
   12be0:	bd90      	pop	{r4, r7, pc}
   12be2:	46c0      	nop			; (mov r8, r8)
   12be4:	00012c8d 	.word	0x00012c8d
   12be8:	00012bed 	.word	0x00012bed

00012bec <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   12bec:	b5b0      	push	{r4, r5, r7, lr}
   12bee:	b082      	sub	sp, #8
   12bf0:	af00      	add	r7, sp, #0
   12bf2:	0005      	movs	r5, r0
   12bf4:	000c      	movs	r4, r1
   12bf6:	0010      	movs	r0, r2
   12bf8:	0019      	movs	r1, r3
   12bfa:	1dfb      	adds	r3, r7, #7
   12bfc:	1c2a      	adds	r2, r5, #0
   12bfe:	701a      	strb	r2, [r3, #0]
   12c00:	1dbb      	adds	r3, r7, #6
   12c02:	1c22      	adds	r2, r4, #0
   12c04:	701a      	strb	r2, [r3, #0]
   12c06:	1d7b      	adds	r3, r7, #5
   12c08:	1c02      	adds	r2, r0, #0
   12c0a:	701a      	strb	r2, [r3, #0]
   12c0c:	1d3b      	adds	r3, r7, #4
   12c0e:	1c0a      	adds	r2, r1, #0
   12c10:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   12c12:	1d3b      	adds	r3, r7, #4
   12c14:	781b      	ldrb	r3, [r3, #0]
   12c16:	2201      	movs	r2, #1
   12c18:	4053      	eors	r3, r2
   12c1a:	b2db      	uxtb	r3, r3
   12c1c:	2b00      	cmp	r3, #0
   12c1e:	d00d      	beq.n	12c3c <gfx_mono_ssd1306_put_byte+0x50>
   12c20:	1dbb      	adds	r3, r7, #6
   12c22:	781a      	ldrb	r2, [r3, #0]
   12c24:	1dfb      	adds	r3, r7, #7
   12c26:	781b      	ldrb	r3, [r3, #0]
   12c28:	0011      	movs	r1, r2
   12c2a:	0018      	movs	r0, r3
   12c2c:	4b12      	ldr	r3, [pc, #72]	; (12c78 <gfx_mono_ssd1306_put_byte+0x8c>)
   12c2e:	4798      	blx	r3
   12c30:	0003      	movs	r3, r0
   12c32:	001a      	movs	r2, r3
   12c34:	1d7b      	adds	r3, r7, #5
   12c36:	781b      	ldrb	r3, [r3, #0]
   12c38:	4293      	cmp	r3, r2
   12c3a:	d018      	beq.n	12c6e <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   12c3c:	1d7b      	adds	r3, r7, #5
   12c3e:	781a      	ldrb	r2, [r3, #0]
   12c40:	1dbb      	adds	r3, r7, #6
   12c42:	7819      	ldrb	r1, [r3, #0]
   12c44:	1dfb      	adds	r3, r7, #7
   12c46:	781b      	ldrb	r3, [r3, #0]
   12c48:	0018      	movs	r0, r3
   12c4a:	4b0c      	ldr	r3, [pc, #48]	; (12c7c <gfx_mono_ssd1306_put_byte+0x90>)
   12c4c:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   12c4e:	1dfb      	adds	r3, r7, #7
   12c50:	781b      	ldrb	r3, [r3, #0]
   12c52:	0018      	movs	r0, r3
   12c54:	4b0a      	ldr	r3, [pc, #40]	; (12c80 <gfx_mono_ssd1306_put_byte+0x94>)
   12c56:	4798      	blx	r3
	ssd1306_set_column_address(column);
   12c58:	1dbb      	adds	r3, r7, #6
   12c5a:	781b      	ldrb	r3, [r3, #0]
   12c5c:	0018      	movs	r0, r3
   12c5e:	4b09      	ldr	r3, [pc, #36]	; (12c84 <gfx_mono_ssd1306_put_byte+0x98>)
   12c60:	4798      	blx	r3

	ssd1306_write_data(data);
   12c62:	1d7b      	adds	r3, r7, #5
   12c64:	781b      	ldrb	r3, [r3, #0]
   12c66:	0018      	movs	r0, r3
   12c68:	4b07      	ldr	r3, [pc, #28]	; (12c88 <gfx_mono_ssd1306_put_byte+0x9c>)
   12c6a:	4798      	blx	r3
   12c6c:	e000      	b.n	12c70 <gfx_mono_ssd1306_put_byte+0x84>
		return;
   12c6e:	46c0      	nop			; (mov r8, r8)
}
   12c70:	46bd      	mov	sp, r7
   12c72:	b002      	add	sp, #8
   12c74:	bdb0      	pop	{r4, r5, r7, pc}
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	000122f5 	.word	0x000122f5
   12c7c:	000122a9 	.word	0x000122a9
   12c80:	000129cd 	.word	0x000129cd
   12c84:	00012a05 	.word	0x00012a05
   12c88:	00012235 	.word	0x00012235

00012c8c <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   12c8c:	b580      	push	{r7, lr}
   12c8e:	b082      	sub	sp, #8
   12c90:	af00      	add	r7, sp, #0
   12c92:	0002      	movs	r2, r0
   12c94:	1dfb      	adds	r3, r7, #7
   12c96:	701a      	strb	r2, [r3, #0]
   12c98:	1dbb      	adds	r3, r7, #6
   12c9a:	1c0a      	adds	r2, r1, #0
   12c9c:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   12c9e:	1dbb      	adds	r3, r7, #6
   12ca0:	781a      	ldrb	r2, [r3, #0]
   12ca2:	1dfb      	adds	r3, r7, #7
   12ca4:	781b      	ldrb	r3, [r3, #0]
   12ca6:	0011      	movs	r1, r2
   12ca8:	0018      	movs	r0, r3
   12caa:	4b03      	ldr	r3, [pc, #12]	; (12cb8 <gfx_mono_ssd1306_get_byte+0x2c>)
   12cac:	4798      	blx	r3
   12cae:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   12cb0:	0018      	movs	r0, r3
   12cb2:	46bd      	mov	sp, r7
   12cb4:	b002      	add	sp, #8
   12cb6:	bd80      	pop	{r7, pc}
   12cb8:	000122f5 	.word	0x000122f5

00012cbc <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
   12cbc:	b5b0      	push	{r4, r5, r7, lr}
   12cbe:	b084      	sub	sp, #16
   12cc0:	af00      	add	r7, sp, #0
   12cc2:	0005      	movs	r5, r0
   12cc4:	000c      	movs	r4, r1
   12cc6:	0010      	movs	r0, r2
   12cc8:	0019      	movs	r1, r3
   12cca:	1dfb      	adds	r3, r7, #7
   12ccc:	1c2a      	adds	r2, r5, #0
   12cce:	701a      	strb	r2, [r3, #0]
   12cd0:	1dbb      	adds	r3, r7, #6
   12cd2:	1c22      	adds	r2, r4, #0
   12cd4:	701a      	strb	r2, [r3, #0]
   12cd6:	1d7b      	adds	r3, r7, #5
   12cd8:	1c02      	adds	r2, r0, #0
   12cda:	701a      	strb	r2, [r3, #0]
   12cdc:	1d3b      	adds	r3, r7, #4
   12cde:	1c0a      	adds	r2, r1, #0
   12ce0:	701a      	strb	r2, [r3, #0]
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);
   12ce2:	230f      	movs	r3, #15
   12ce4:	18fc      	adds	r4, r7, r3
   12ce6:	1dbb      	adds	r3, r7, #6
   12ce8:	781a      	ldrb	r2, [r3, #0]
   12cea:	1dfb      	adds	r3, r7, #7
   12cec:	781b      	ldrb	r3, [r3, #0]
   12cee:	0011      	movs	r1, r2
   12cf0:	0018      	movs	r0, r3
   12cf2:	4b1f      	ldr	r3, [pc, #124]	; (12d70 <gfx_mono_ssd1306_mask_byte+0xb4>)
   12cf4:	4798      	blx	r3
   12cf6:	0003      	movs	r3, r0
   12cf8:	7023      	strb	r3, [r4, #0]

	switch (color) {
   12cfa:	1d3b      	adds	r3, r7, #4
   12cfc:	781b      	ldrb	r3, [r3, #0]
   12cfe:	2b01      	cmp	r3, #1
   12d00:	d004      	beq.n	12d0c <gfx_mono_ssd1306_mask_byte+0x50>
   12d02:	2b02      	cmp	r3, #2
   12d04:	d01b      	beq.n	12d3e <gfx_mono_ssd1306_mask_byte+0x82>
   12d06:	2b00      	cmp	r3, #0
   12d08:	d00a      	beq.n	12d20 <gfx_mono_ssd1306_mask_byte+0x64>
	case GFX_PIXEL_XOR:
		temp ^= pixel_mask;
		break;

	default:
		break;
   12d0a:	e022      	b.n	12d52 <gfx_mono_ssd1306_mask_byte+0x96>
		temp |= pixel_mask;
   12d0c:	230f      	movs	r3, #15
   12d0e:	18fb      	adds	r3, r7, r3
   12d10:	220f      	movs	r2, #15
   12d12:	18b9      	adds	r1, r7, r2
   12d14:	1d7a      	adds	r2, r7, #5
   12d16:	7809      	ldrb	r1, [r1, #0]
   12d18:	7812      	ldrb	r2, [r2, #0]
   12d1a:	430a      	orrs	r2, r1
   12d1c:	701a      	strb	r2, [r3, #0]
		break;
   12d1e:	e018      	b.n	12d52 <gfx_mono_ssd1306_mask_byte+0x96>
		temp &= ~pixel_mask;
   12d20:	1d7b      	adds	r3, r7, #5
   12d22:	781b      	ldrb	r3, [r3, #0]
   12d24:	b25b      	sxtb	r3, r3
   12d26:	43db      	mvns	r3, r3
   12d28:	b25b      	sxtb	r3, r3
   12d2a:	220f      	movs	r2, #15
   12d2c:	18ba      	adds	r2, r7, r2
   12d2e:	7812      	ldrb	r2, [r2, #0]
   12d30:	b252      	sxtb	r2, r2
   12d32:	4013      	ands	r3, r2
   12d34:	b25a      	sxtb	r2, r3
   12d36:	230f      	movs	r3, #15
   12d38:	18fb      	adds	r3, r7, r3
   12d3a:	701a      	strb	r2, [r3, #0]
		break;
   12d3c:	e009      	b.n	12d52 <gfx_mono_ssd1306_mask_byte+0x96>
		temp ^= pixel_mask;
   12d3e:	230f      	movs	r3, #15
   12d40:	18fb      	adds	r3, r7, r3
   12d42:	220f      	movs	r2, #15
   12d44:	18b9      	adds	r1, r7, r2
   12d46:	1d7a      	adds	r2, r7, #5
   12d48:	7809      	ldrb	r1, [r1, #0]
   12d4a:	7812      	ldrb	r2, [r2, #0]
   12d4c:	404a      	eors	r2, r1
   12d4e:	701a      	strb	r2, [r3, #0]
		break;
   12d50:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, column, temp);
   12d52:	230f      	movs	r3, #15
   12d54:	18fb      	adds	r3, r7, r3
   12d56:	781a      	ldrb	r2, [r3, #0]
   12d58:	1dbb      	adds	r3, r7, #6
   12d5a:	7819      	ldrb	r1, [r3, #0]
   12d5c:	1dfb      	adds	r3, r7, #7
   12d5e:	7818      	ldrb	r0, [r3, #0]
   12d60:	2300      	movs	r3, #0
   12d62:	4c04      	ldr	r4, [pc, #16]	; (12d74 <gfx_mono_ssd1306_mask_byte+0xb8>)
   12d64:	47a0      	blx	r4
}
   12d66:	46c0      	nop			; (mov r8, r8)
   12d68:	46bd      	mov	sp, r7
   12d6a:	b004      	add	sp, #16
   12d6c:	bdb0      	pop	{r4, r5, r7, pc}
   12d6e:	46c0      	nop			; (mov r8, r8)
   12d70:	00012c8d 	.word	0x00012c8d
   12d74:	00012bed 	.word	0x00012bed

00012d78 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12d78:	b580      	push	{r7, lr}
   12d7a:	b084      	sub	sp, #16
   12d7c:	af00      	add	r7, sp, #0
   12d7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   12d80:	687b      	ldr	r3, [r7, #4]
   12d82:	681b      	ldr	r3, [r3, #0]
   12d84:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12d86:	68fb      	ldr	r3, [r7, #12]
   12d88:	7e5b      	ldrb	r3, [r3, #25]
   12d8a:	b2db      	uxtb	r3, r3
   12d8c:	b25b      	sxtb	r3, r3
   12d8e:	2b00      	cmp	r3, #0
   12d90:	da01      	bge.n	12d96 <adc_is_syncing+0x1e>
		return true;
   12d92:	2301      	movs	r3, #1
   12d94:	e000      	b.n	12d98 <adc_is_syncing+0x20>
	}

	return false;
   12d96:	2300      	movs	r3, #0
}
   12d98:	0018      	movs	r0, r3
   12d9a:	46bd      	mov	sp, r7
   12d9c:	b004      	add	sp, #16
   12d9e:	bd80      	pop	{r7, pc}

00012da0 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   12da0:	b580      	push	{r7, lr}
   12da2:	b084      	sub	sp, #16
   12da4:	af00      	add	r7, sp, #0
   12da6:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12da8:	687b      	ldr	r3, [r7, #4]
   12daa:	681b      	ldr	r3, [r3, #0]
   12dac:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   12dae:	46c0      	nop			; (mov r8, r8)
   12db0:	687b      	ldr	r3, [r7, #4]
   12db2:	0018      	movs	r0, r3
   12db4:	4b0b      	ldr	r3, [pc, #44]	; (12de4 <adc_start_conversion+0x44>)
   12db6:	4798      	blx	r3
   12db8:	1e03      	subs	r3, r0, #0
   12dba:	d1f9      	bne.n	12db0 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12dbc:	68fb      	ldr	r3, [r7, #12]
   12dbe:	7b1b      	ldrb	r3, [r3, #12]
   12dc0:	b2db      	uxtb	r3, r3
   12dc2:	2202      	movs	r2, #2
   12dc4:	4313      	orrs	r3, r2
   12dc6:	b2da      	uxtb	r2, r3
   12dc8:	68fb      	ldr	r3, [r7, #12]
   12dca:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12dcc:	46c0      	nop			; (mov r8, r8)
   12dce:	687b      	ldr	r3, [r7, #4]
   12dd0:	0018      	movs	r0, r3
   12dd2:	4b04      	ldr	r3, [pc, #16]	; (12de4 <adc_start_conversion+0x44>)
   12dd4:	4798      	blx	r3
   12dd6:	1e03      	subs	r3, r0, #0
   12dd8:	d1f9      	bne.n	12dce <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12dda:	46c0      	nop			; (mov r8, r8)
   12ddc:	46bd      	mov	sp, r7
   12dde:	b004      	add	sp, #16
   12de0:	bd80      	pop	{r7, pc}
   12de2:	46c0      	nop			; (mov r8, r8)
   12de4:	00012d79 	.word	0x00012d79

00012de8 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12de8:	b580      	push	{r7, lr}
   12dea:	b084      	sub	sp, #16
   12dec:	af00      	add	r7, sp, #0
   12dee:	6078      	str	r0, [r7, #4]
   12df0:	000a      	movs	r2, r1
   12df2:	1cfb      	adds	r3, r7, #3
   12df4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12df6:	687b      	ldr	r3, [r7, #4]
   12df8:	681b      	ldr	r3, [r3, #0]
   12dfa:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12dfc:	68fb      	ldr	r3, [r7, #12]
   12dfe:	1cfa      	adds	r2, r7, #3
   12e00:	7812      	ldrb	r2, [r2, #0]
   12e02:	759a      	strb	r2, [r3, #22]
}
   12e04:	46c0      	nop			; (mov r8, r8)
   12e06:	46bd      	mov	sp, r7
   12e08:	b004      	add	sp, #16
   12e0a:	bd80      	pop	{r7, pc}

00012e0c <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   12e0c:	b580      	push	{r7, lr}
   12e0e:	b084      	sub	sp, #16
   12e10:	af00      	add	r7, sp, #0
   12e12:	0002      	movs	r2, r0
   12e14:	1dfb      	adds	r3, r7, #7
   12e16:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   12e18:	1dfb      	adds	r3, r7, #7
   12e1a:	781a      	ldrb	r2, [r3, #0]
   12e1c:	4b47      	ldr	r3, [pc, #284]	; (12f3c <_adc_interrupt_handler+0x130>)
   12e1e:	0092      	lsls	r2, r2, #2
   12e20:	58d3      	ldr	r3, [r2, r3]
   12e22:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   12e24:	68fb      	ldr	r3, [r7, #12]
   12e26:	681b      	ldr	r3, [r3, #0]
   12e28:	7e1b      	ldrb	r3, [r3, #24]
   12e2a:	b2da      	uxtb	r2, r3
   12e2c:	68fb      	ldr	r3, [r7, #12]
   12e2e:	681b      	ldr	r3, [r3, #0]
   12e30:	7ddb      	ldrb	r3, [r3, #23]
   12e32:	b2db      	uxtb	r3, r3
   12e34:	4013      	ands	r3, r2
   12e36:	b2db      	uxtb	r3, r3
   12e38:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   12e3a:	68bb      	ldr	r3, [r7, #8]
   12e3c:	2201      	movs	r2, #1
   12e3e:	4013      	ands	r3, r2
   12e40:	d045      	beq.n	12ece <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   12e42:	68fb      	ldr	r3, [r7, #12]
   12e44:	681b      	ldr	r3, [r3, #0]
   12e46:	2201      	movs	r2, #1
   12e48:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   12e4a:	46c0      	nop			; (mov r8, r8)
   12e4c:	68fb      	ldr	r3, [r7, #12]
   12e4e:	0018      	movs	r0, r3
   12e50:	4b3b      	ldr	r3, [pc, #236]	; (12f40 <_adc_interrupt_handler+0x134>)
   12e52:	4798      	blx	r3
   12e54:	1e03      	subs	r3, r0, #0
   12e56:	d1f9      	bne.n	12e4c <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12e58:	68fb      	ldr	r3, [r7, #12]
   12e5a:	695b      	ldr	r3, [r3, #20]
   12e5c:	1c99      	adds	r1, r3, #2
   12e5e:	68fa      	ldr	r2, [r7, #12]
   12e60:	6151      	str	r1, [r2, #20]
   12e62:	68fa      	ldr	r2, [r7, #12]
   12e64:	6812      	ldr	r2, [r2, #0]
   12e66:	8b52      	ldrh	r2, [r2, #26]
   12e68:	b292      	uxth	r2, r2
   12e6a:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12e6c:	68fb      	ldr	r3, [r7, #12]
   12e6e:	8b1b      	ldrh	r3, [r3, #24]
   12e70:	b29b      	uxth	r3, r3
   12e72:	3b01      	subs	r3, #1
   12e74:	b29b      	uxth	r3, r3
   12e76:	68fa      	ldr	r2, [r7, #12]
   12e78:	1c19      	adds	r1, r3, #0
   12e7a:	8311      	strh	r1, [r2, #24]
   12e7c:	2b00      	cmp	r3, #0
   12e7e:	d008      	beq.n	12e92 <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   12e80:	68fb      	ldr	r3, [r7, #12]
   12e82:	7f5b      	ldrb	r3, [r3, #29]
   12e84:	2b00      	cmp	r3, #0
   12e86:	d022      	beq.n	12ece <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12e88:	68fb      	ldr	r3, [r7, #12]
   12e8a:	0018      	movs	r0, r3
   12e8c:	4b2d      	ldr	r3, [pc, #180]	; (12f44 <_adc_interrupt_handler+0x138>)
   12e8e:	4798      	blx	r3
   12e90:	e01d      	b.n	12ece <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   12e92:	68fb      	ldr	r3, [r7, #12]
   12e94:	2101      	movs	r1, #1
   12e96:	0018      	movs	r0, r3
   12e98:	4b2b      	ldr	r3, [pc, #172]	; (12f48 <_adc_interrupt_handler+0x13c>)
   12e9a:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12e9c:	68fb      	ldr	r3, [r7, #12]
   12e9e:	7f1b      	ldrb	r3, [r3, #28]
   12ea0:	b2db      	uxtb	r3, r3
   12ea2:	2b05      	cmp	r3, #5
   12ea4:	d113      	bne.n	12ece <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12ea6:	68fb      	ldr	r3, [r7, #12]
   12ea8:	2200      	movs	r2, #0
   12eaa:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12eac:	68fb      	ldr	r3, [r7, #12]
   12eae:	7edb      	ldrb	r3, [r3, #27]
   12eb0:	001a      	movs	r2, r3
   12eb2:	2301      	movs	r3, #1
   12eb4:	4013      	ands	r3, r2
   12eb6:	d00a      	beq.n	12ece <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12eb8:	68fb      	ldr	r3, [r7, #12]
   12eba:	7e9b      	ldrb	r3, [r3, #26]
   12ebc:	001a      	movs	r2, r3
   12ebe:	2301      	movs	r3, #1
   12ec0:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   12ec2:	d004      	beq.n	12ece <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12ec4:	68fb      	ldr	r3, [r7, #12]
   12ec6:	689b      	ldr	r3, [r3, #8]
   12ec8:	68fa      	ldr	r2, [r7, #12]
   12eca:	0010      	movs	r0, r2
   12ecc:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   12ece:	68bb      	ldr	r3, [r7, #8]
   12ed0:	2204      	movs	r2, #4
   12ed2:	4013      	ands	r3, r2
   12ed4:	d014      	beq.n	12f00 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12ed6:	68fb      	ldr	r3, [r7, #12]
   12ed8:	681b      	ldr	r3, [r3, #0]
   12eda:	2204      	movs	r2, #4
   12edc:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12ede:	68fb      	ldr	r3, [r7, #12]
   12ee0:	7edb      	ldrb	r3, [r3, #27]
   12ee2:	001a      	movs	r2, r3
   12ee4:	2302      	movs	r3, #2
   12ee6:	4013      	ands	r3, r2
   12ee8:	d00a      	beq.n	12f00 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12eea:	68fb      	ldr	r3, [r7, #12]
   12eec:	7e9b      	ldrb	r3, [r3, #26]
   12eee:	001a      	movs	r2, r3
   12ef0:	2302      	movs	r3, #2
   12ef2:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12ef4:	d004      	beq.n	12f00 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12ef6:	68fb      	ldr	r3, [r7, #12]
   12ef8:	68db      	ldr	r3, [r3, #12]
   12efa:	68fa      	ldr	r2, [r7, #12]
   12efc:	0010      	movs	r0, r2
   12efe:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   12f00:	68bb      	ldr	r3, [r7, #8]
   12f02:	2202      	movs	r2, #2
   12f04:	4013      	ands	r3, r2
   12f06:	d014      	beq.n	12f32 <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   12f08:	68fb      	ldr	r3, [r7, #12]
   12f0a:	681b      	ldr	r3, [r3, #0]
   12f0c:	2202      	movs	r2, #2
   12f0e:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12f10:	68fb      	ldr	r3, [r7, #12]
   12f12:	7edb      	ldrb	r3, [r3, #27]
   12f14:	001a      	movs	r2, r3
   12f16:	2304      	movs	r3, #4
   12f18:	4013      	ands	r3, r2
   12f1a:	d00a      	beq.n	12f32 <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   12f1c:	68fb      	ldr	r3, [r7, #12]
   12f1e:	7e9b      	ldrb	r3, [r3, #26]
   12f20:	001a      	movs	r2, r3
   12f22:	2304      	movs	r3, #4
   12f24:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   12f26:	d004      	beq.n	12f32 <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   12f28:	68fb      	ldr	r3, [r7, #12]
   12f2a:	691b      	ldr	r3, [r3, #16]
   12f2c:	68fa      	ldr	r2, [r7, #12]
   12f2e:	0010      	movs	r0, r2
   12f30:	4798      	blx	r3
		}
	}
}
   12f32:	46c0      	nop			; (mov r8, r8)
   12f34:	46bd      	mov	sp, r7
   12f36:	b004      	add	sp, #16
   12f38:	bd80      	pop	{r7, pc}
   12f3a:	46c0      	nop			; (mov r8, r8)
   12f3c:	200042d8 	.word	0x200042d8
   12f40:	00012d79 	.word	0x00012d79
   12f44:	00012da1 	.word	0x00012da1
   12f48:	00012de9 	.word	0x00012de9

00012f4c <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   12f4c:	b580      	push	{r7, lr}
   12f4e:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   12f50:	2000      	movs	r0, #0
   12f52:	4b02      	ldr	r3, [pc, #8]	; (12f5c <ADC_Handler+0x10>)
   12f54:	4798      	blx	r3
}
   12f56:	46c0      	nop			; (mov r8, r8)
   12f58:	46bd      	mov	sp, r7
   12f5a:	bd80      	pop	{r7, pc}
   12f5c:	00012e0d 	.word	0x00012e0d

00012f60 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   12f60:	b580      	push	{r7, lr}
   12f62:	b082      	sub	sp, #8
   12f64:	af00      	add	r7, sp, #0
   12f66:	0002      	movs	r2, r0
   12f68:	1dfb      	adds	r3, r7, #7
   12f6a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12f6c:	4a07      	ldr	r2, [pc, #28]	; (12f8c <system_interrupt_disable+0x2c>)
   12f6e:	1dfb      	adds	r3, r7, #7
   12f70:	781b      	ldrb	r3, [r3, #0]
   12f72:	0019      	movs	r1, r3
   12f74:	231f      	movs	r3, #31
   12f76:	400b      	ands	r3, r1
   12f78:	2101      	movs	r1, #1
   12f7a:	4099      	lsls	r1, r3
   12f7c:	000b      	movs	r3, r1
   12f7e:	0019      	movs	r1, r3
   12f80:	2380      	movs	r3, #128	; 0x80
   12f82:	50d1      	str	r1, [r2, r3]
}
   12f84:	46c0      	nop			; (mov r8, r8)
   12f86:	46bd      	mov	sp, r7
   12f88:	b002      	add	sp, #8
   12f8a:	bd80      	pop	{r7, pc}
   12f8c:	e000e100 	.word	0xe000e100

00012f90 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   12f90:	b580      	push	{r7, lr}
   12f92:	b084      	sub	sp, #16
   12f94:	af00      	add	r7, sp, #0
   12f96:	0002      	movs	r2, r0
   12f98:	1dfb      	adds	r3, r7, #7
   12f9a:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12f9c:	1dfb      	adds	r3, r7, #7
   12f9e:	781a      	ldrb	r2, [r3, #0]
   12fa0:	4b37      	ldr	r3, [pc, #220]	; (13080 <_dac_interrupt_handler+0xf0>)
   12fa2:	0092      	lsls	r2, r2, #2
   12fa4:	58d3      	ldr	r3, [r2, r3]
   12fa6:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12fa8:	68fb      	ldr	r3, [r7, #12]
   12faa:	681b      	ldr	r3, [r3, #0]
   12fac:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   12fae:	68bb      	ldr	r3, [r7, #8]
   12fb0:	799b      	ldrb	r3, [r3, #6]
   12fb2:	b2db      	uxtb	r3, r3
   12fb4:	001a      	movs	r2, r3
   12fb6:	2301      	movs	r3, #1
   12fb8:	4013      	ands	r3, r2
   12fba:	d00e      	beq.n	12fda <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12fbc:	68bb      	ldr	r3, [r7, #8]
   12fbe:	2201      	movs	r2, #1
   12fc0:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   12fc2:	68fb      	ldr	r3, [r7, #12]
   12fc4:	3314      	adds	r3, #20
   12fc6:	2b00      	cmp	r3, #0
   12fc8:	d007      	beq.n	12fda <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12fca:	68fb      	ldr	r3, [r7, #12]
   12fcc:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d003      	beq.n	12fda <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   12fd2:	68fb      	ldr	r3, [r7, #12]
   12fd4:	699b      	ldr	r3, [r3, #24]
   12fd6:	2000      	movs	r0, #0
   12fd8:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12fda:	68bb      	ldr	r3, [r7, #8]
   12fdc:	799b      	ldrb	r3, [r3, #6]
   12fde:	b2db      	uxtb	r3, r3
   12fe0:	001a      	movs	r2, r3
   12fe2:	2302      	movs	r3, #2
   12fe4:	4013      	ands	r3, r2
   12fe6:	d047      	beq.n	13078 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12fe8:	68bb      	ldr	r3, [r7, #8]
   12fea:	2202      	movs	r2, #2
   12fec:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   12fee:	68fb      	ldr	r3, [r7, #12]
   12ff0:	899b      	ldrh	r3, [r3, #12]
   12ff2:	b29b      	uxth	r3, r3
   12ff4:	2b00      	cmp	r3, #0
   12ff6:	d033      	beq.n	13060 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12ff8:	68fb      	ldr	r3, [r7, #12]
   12ffa:	689a      	ldr	r2, [r3, #8]
   12ffc:	68fb      	ldr	r3, [r7, #12]
   12ffe:	89db      	ldrh	r3, [r3, #14]
   13000:	b29b      	uxth	r3, r3
   13002:	1c59      	adds	r1, r3, #1
   13004:	b288      	uxth	r0, r1
   13006:	68f9      	ldr	r1, [r7, #12]
   13008:	81c8      	strh	r0, [r1, #14]
   1300a:	005b      	lsls	r3, r3, #1
   1300c:	18d3      	adds	r3, r2, r3
   1300e:	881b      	ldrh	r3, [r3, #0]
   13010:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   13012:	68bb      	ldr	r3, [r7, #8]
   13014:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   13016:	68fb      	ldr	r3, [r7, #12]
   13018:	899b      	ldrh	r3, [r3, #12]
   1301a:	b29b      	uxth	r3, r3
   1301c:	3b01      	subs	r3, #1
   1301e:	b29a      	uxth	r2, r3
   13020:	68fb      	ldr	r3, [r7, #12]
   13022:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   13024:	68fb      	ldr	r3, [r7, #12]
   13026:	899b      	ldrh	r3, [r3, #12]
   13028:	b29b      	uxth	r3, r3
   1302a:	2b00      	cmp	r3, #0
   1302c:	d118      	bne.n	13060 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   1302e:	68fb      	ldr	r3, [r7, #12]
   13030:	2220      	movs	r2, #32
   13032:	2100      	movs	r1, #0
   13034:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   13036:	68bb      	ldr	r3, [r7, #8]
   13038:	2202      	movs	r2, #2
   1303a:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   1303c:	68bb      	ldr	r3, [r7, #8]
   1303e:	2202      	movs	r2, #2
   13040:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   13042:	2019      	movs	r0, #25
   13044:	4b0f      	ldr	r3, [pc, #60]	; (13084 <_dac_interrupt_handler+0xf4>)
   13046:	4798      	blx	r3

				if ((module->callback) &&
   13048:	68fb      	ldr	r3, [r7, #12]
   1304a:	3314      	adds	r3, #20
   1304c:	2b00      	cmp	r3, #0
   1304e:	d007      	beq.n	13060 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   13050:	68fb      	ldr	r3, [r7, #12]
   13052:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   13054:	2b00      	cmp	r3, #0
   13056:	d003      	beq.n	13060 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   13058:	68fb      	ldr	r3, [r7, #12]
   1305a:	69db      	ldr	r3, [r3, #28]
   1305c:	2000      	movs	r0, #0
   1305e:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   13060:	68fb      	ldr	r3, [r7, #12]
   13062:	3314      	adds	r3, #20
   13064:	2b00      	cmp	r3, #0
   13066:	d007      	beq.n	13078 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   13068:	68fb      	ldr	r3, [r7, #12]
   1306a:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   1306c:	2b00      	cmp	r3, #0
   1306e:	d003      	beq.n	13078 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   13070:	68fb      	ldr	r3, [r7, #12]
   13072:	695b      	ldr	r3, [r3, #20]
   13074:	2000      	movs	r0, #0
   13076:	4798      	blx	r3
		}
	}
}
   13078:	46c0      	nop			; (mov r8, r8)
   1307a:	46bd      	mov	sp, r7
   1307c:	b004      	add	sp, #16
   1307e:	bd80      	pop	{r7, pc}
   13080:	200042dc 	.word	0x200042dc
   13084:	00012f61 	.word	0x00012f61

00013088 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   13088:	b580      	push	{r7, lr}
   1308a:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   1308c:	2000      	movs	r0, #0
   1308e:	4b02      	ldr	r3, [pc, #8]	; (13098 <DAC_Handler+0x10>)
   13090:	4798      	blx	r3
}
   13092:	46c0      	nop			; (mov r8, r8)
   13094:	46bd      	mov	sp, r7
   13096:	bd80      	pop	{r7, pc}
   13098:	00012f91 	.word	0x00012f91

0001309c <system_interrupt_enter_critical_section>:
{
   1309c:	b580      	push	{r7, lr}
   1309e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   130a0:	4b02      	ldr	r3, [pc, #8]	; (130ac <system_interrupt_enter_critical_section+0x10>)
   130a2:	4798      	blx	r3
}
   130a4:	46c0      	nop			; (mov r8, r8)
   130a6:	46bd      	mov	sp, r7
   130a8:	bd80      	pop	{r7, pc}
   130aa:	46c0      	nop			; (mov r8, r8)
   130ac:	00025581 	.word	0x00025581

000130b0 <system_interrupt_leave_critical_section>:
{
   130b0:	b580      	push	{r7, lr}
   130b2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   130b4:	4b02      	ldr	r3, [pc, #8]	; (130c0 <system_interrupt_leave_critical_section+0x10>)
   130b6:	4798      	blx	r3
}
   130b8:	46c0      	nop			; (mov r8, r8)
   130ba:	46bd      	mov	sp, r7
   130bc:	bd80      	pop	{r7, pc}
   130be:	46c0      	nop			; (mov r8, r8)
   130c0:	000255d5 	.word	0x000255d5

000130c4 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   130c4:	b580      	push	{r7, lr}
   130c6:	b086      	sub	sp, #24
   130c8:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   130ca:	4b49      	ldr	r3, [pc, #292]	; (131f0 <DMAC_Handler+0x12c>)
   130cc:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   130ce:	4b49      	ldr	r3, [pc, #292]	; (131f4 <DMAC_Handler+0x130>)
   130d0:	8c1b      	ldrh	r3, [r3, #32]
   130d2:	b29b      	uxth	r3, r3
   130d4:	b2da      	uxtb	r2, r3
   130d6:	2317      	movs	r3, #23
   130d8:	18fb      	adds	r3, r7, r3
   130da:	210f      	movs	r1, #15
   130dc:	400a      	ands	r2, r1
   130de:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   130e0:	2317      	movs	r3, #23
   130e2:	18fb      	adds	r3, r7, r3
   130e4:	781a      	ldrb	r2, [r3, #0]
   130e6:	4b44      	ldr	r3, [pc, #272]	; (131f8 <DMAC_Handler+0x134>)
   130e8:	0092      	lsls	r2, r2, #2
   130ea:	58d3      	ldr	r3, [r2, r3]
   130ec:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   130ee:	4a41      	ldr	r2, [pc, #260]	; (131f4 <DMAC_Handler+0x130>)
   130f0:	693b      	ldr	r3, [r7, #16]
   130f2:	781b      	ldrb	r3, [r3, #0]
   130f4:	210f      	movs	r1, #15
   130f6:	400b      	ands	r3, r1
   130f8:	b2d9      	uxtb	r1, r3
   130fa:	233f      	movs	r3, #63	; 0x3f
   130fc:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   130fe:	493d      	ldr	r1, [pc, #244]	; (131f4 <DMAC_Handler+0x130>)
   13100:	230f      	movs	r3, #15
   13102:	18fb      	adds	r3, r7, r3
   13104:	224e      	movs	r2, #78	; 0x4e
   13106:	5c8a      	ldrb	r2, [r1, r2]
   13108:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   1310a:	693b      	ldr	r3, [r7, #16]
   1310c:	781b      	ldrb	r3, [r3, #0]
   1310e:	4a3b      	ldr	r2, [pc, #236]	; (131fc <DMAC_Handler+0x138>)
   13110:	011b      	lsls	r3, r3, #4
   13112:	18d3      	adds	r3, r2, r3
   13114:	3302      	adds	r3, #2
   13116:	881b      	ldrh	r3, [r3, #0]
   13118:	b29b      	uxth	r3, r3
   1311a:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   1311c:	693b      	ldr	r3, [r7, #16]
   1311e:	781b      	ldrb	r3, [r3, #0]
   13120:	4a37      	ldr	r2, [pc, #220]	; (13200 <DMAC_Handler+0x13c>)
   13122:	011b      	lsls	r3, r3, #4
   13124:	18d3      	adds	r3, r2, r3
   13126:	3302      	adds	r3, #2
   13128:	881b      	ldrh	r3, [r3, #0]
   1312a:	b29b      	uxth	r3, r3
   1312c:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   1312e:	68ba      	ldr	r2, [r7, #8]
   13130:	687b      	ldr	r3, [r7, #4]
   13132:	1ad2      	subs	r2, r2, r3
   13134:	693b      	ldr	r3, [r7, #16]
   13136:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   13138:	230f      	movs	r3, #15
   1313a:	18fb      	adds	r3, r7, r3
   1313c:	781b      	ldrb	r3, [r3, #0]
   1313e:	2201      	movs	r2, #1
   13140:	4013      	ands	r3, r2
   13142:	d016      	beq.n	13172 <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   13144:	4a2b      	ldr	r2, [pc, #172]	; (131f4 <DMAC_Handler+0x130>)
   13146:	234e      	movs	r3, #78	; 0x4e
   13148:	2101      	movs	r1, #1
   1314a:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   1314c:	693b      	ldr	r3, [r7, #16]
   1314e:	2210      	movs	r2, #16
   13150:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   13152:	693b      	ldr	r3, [r7, #16]
   13154:	7c1b      	ldrb	r3, [r3, #16]
   13156:	001a      	movs	r2, r3
   13158:	2301      	movs	r3, #1
   1315a:	4013      	ands	r3, r2
   1315c:	d042      	beq.n	131e4 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   1315e:	693b      	ldr	r3, [r7, #16]
   13160:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   13162:	2b00      	cmp	r3, #0
   13164:	d03e      	beq.n	131e4 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   13166:	693b      	ldr	r3, [r7, #16]
   13168:	685b      	ldr	r3, [r3, #4]
   1316a:	693a      	ldr	r2, [r7, #16]
   1316c:	0010      	movs	r0, r2
   1316e:	4798      	blx	r3
   13170:	e038      	b.n	131e4 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   13172:	230f      	movs	r3, #15
   13174:	18fb      	adds	r3, r7, r3
   13176:	781b      	ldrb	r3, [r3, #0]
   13178:	2202      	movs	r2, #2
   1317a:	4013      	ands	r3, r2
   1317c:	d016      	beq.n	131ac <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1317e:	4a1d      	ldr	r2, [pc, #116]	; (131f4 <DMAC_Handler+0x130>)
   13180:	234e      	movs	r3, #78	; 0x4e
   13182:	2102      	movs	r1, #2
   13184:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   13186:	693b      	ldr	r3, [r7, #16]
   13188:	2200      	movs	r2, #0
   1318a:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1318c:	693b      	ldr	r3, [r7, #16]
   1318e:	7c1b      	ldrb	r3, [r3, #16]
   13190:	001a      	movs	r2, r3
   13192:	2302      	movs	r3, #2
   13194:	4013      	ands	r3, r2
   13196:	d025      	beq.n	131e4 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   13198:	693b      	ldr	r3, [r7, #16]
   1319a:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   1319c:	2b00      	cmp	r3, #0
   1319e:	d021      	beq.n	131e4 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   131a0:	693b      	ldr	r3, [r7, #16]
   131a2:	689b      	ldr	r3, [r3, #8]
   131a4:	693a      	ldr	r2, [r7, #16]
   131a6:	0010      	movs	r0, r2
   131a8:	4798      	blx	r3
   131aa:	e01b      	b.n	131e4 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   131ac:	230f      	movs	r3, #15
   131ae:	18fb      	adds	r3, r7, r3
   131b0:	781b      	ldrb	r3, [r3, #0]
   131b2:	2204      	movs	r2, #4
   131b4:	4013      	ands	r3, r2
   131b6:	d015      	beq.n	131e4 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   131b8:	4a0e      	ldr	r2, [pc, #56]	; (131f4 <DMAC_Handler+0x130>)
   131ba:	234e      	movs	r3, #78	; 0x4e
   131bc:	2104      	movs	r1, #4
   131be:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   131c0:	693b      	ldr	r3, [r7, #16]
   131c2:	2206      	movs	r2, #6
   131c4:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   131c6:	693b      	ldr	r3, [r7, #16]
   131c8:	7c1b      	ldrb	r3, [r3, #16]
   131ca:	001a      	movs	r2, r3
   131cc:	2304      	movs	r3, #4
   131ce:	4013      	ands	r3, r2
   131d0:	d008      	beq.n	131e4 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   131d2:	693b      	ldr	r3, [r7, #16]
   131d4:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   131d6:	2b00      	cmp	r3, #0
   131d8:	d004      	beq.n	131e4 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   131da:	693b      	ldr	r3, [r7, #16]
   131dc:	68db      	ldr	r3, [r3, #12]
   131de:	693a      	ldr	r2, [r7, #16]
   131e0:	0010      	movs	r0, r2
   131e2:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   131e4:	4b07      	ldr	r3, [pc, #28]	; (13204 <DMAC_Handler+0x140>)
   131e6:	4798      	blx	r3
}
   131e8:	46c0      	nop			; (mov r8, r8)
   131ea:	46bd      	mov	sp, r7
   131ec:	b006      	add	sp, #24
   131ee:	bd80      	pop	{r7, pc}
   131f0:	0001309d 	.word	0x0001309d
   131f4:	41004800 	.word	0x41004800
   131f8:	20000430 	.word	0x20000430
   131fc:	200042e0 	.word	0x200042e0
   13200:	200003e0 	.word	0x200003e0
   13204:	000130b1 	.word	0x000130b1

00013208 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   13208:	b580      	push	{r7, lr}
   1320a:	b082      	sub	sp, #8
   1320c:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   1320e:	4b15      	ldr	r3, [pc, #84]	; (13264 <EVSYS_Handler+0x5c>)
   13210:	691b      	ldr	r3, [r3, #16]
   13212:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   13214:	4b14      	ldr	r3, [pc, #80]	; (13268 <EVSYS_Handler+0x60>)
   13216:	699b      	ldr	r3, [r3, #24]
   13218:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   1321a:	4b12      	ldr	r3, [pc, #72]	; (13264 <EVSYS_Handler+0x5c>)
   1321c:	689a      	ldr	r2, [r3, #8]
   1321e:	683b      	ldr	r3, [r7, #0]
   13220:	431a      	orrs	r2, r3
   13222:	4b10      	ldr	r3, [pc, #64]	; (13264 <EVSYS_Handler+0x5c>)
   13224:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   13226:	4b10      	ldr	r3, [pc, #64]	; (13268 <EVSYS_Handler+0x60>)
   13228:	4a10      	ldr	r2, [pc, #64]	; (1326c <EVSYS_Handler+0x64>)
   1322a:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   1322c:	e008      	b.n	13240 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   1322e:	687b      	ldr	r3, [r7, #4]
   13230:	685a      	ldr	r2, [r3, #4]
   13232:	687b      	ldr	r3, [r7, #4]
   13234:	681b      	ldr	r3, [r3, #0]
   13236:	0018      	movs	r0, r3
   13238:	4790      	blx	r2
		current_hook = current_hook->next;
   1323a:	687b      	ldr	r3, [r7, #4]
   1323c:	689b      	ldr	r3, [r3, #8]
   1323e:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   13240:	687b      	ldr	r3, [r7, #4]
   13242:	2b00      	cmp	r3, #0
   13244:	d1f3      	bne.n	1322e <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   13246:	4b07      	ldr	r3, [pc, #28]	; (13264 <EVSYS_Handler+0x5c>)
   13248:	68db      	ldr	r3, [r3, #12]
   1324a:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   1324c:	4b05      	ldr	r3, [pc, #20]	; (13264 <EVSYS_Handler+0x5c>)
   1324e:	689b      	ldr	r3, [r3, #8]
   13250:	683a      	ldr	r2, [r7, #0]
   13252:	43d2      	mvns	r2, r2
   13254:	401a      	ands	r2, r3
   13256:	4b03      	ldr	r3, [pc, #12]	; (13264 <EVSYS_Handler+0x5c>)
   13258:	609a      	str	r2, [r3, #8]
}
   1325a:	46c0      	nop			; (mov r8, r8)
   1325c:	46bd      	mov	sp, r7
   1325e:	b002      	add	sp, #8
   13260:	bd80      	pop	{r7, pc}
   13262:	46c0      	nop			; (mov r8, r8)
   13264:	20000000 	.word	0x20000000
   13268:	42000400 	.word	0x42000400
   1326c:	0f0fffff 	.word	0x0f0fffff

00013270 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   13270:	b580      	push	{r7, lr}
   13272:	b082      	sub	sp, #8
   13274:	af00      	add	r7, sp, #0
   13276:	0002      	movs	r2, r0
   13278:	6039      	str	r1, [r7, #0]
   1327a:	1dfb      	adds	r3, r7, #7
   1327c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1327e:	1dfb      	adds	r3, r7, #7
   13280:	781b      	ldrb	r3, [r3, #0]
   13282:	2b01      	cmp	r3, #1
   13284:	d00a      	beq.n	1329c <system_apb_clock_set_mask+0x2c>
   13286:	2b02      	cmp	r3, #2
   13288:	d00f      	beq.n	132aa <system_apb_clock_set_mask+0x3a>
   1328a:	2b00      	cmp	r3, #0
   1328c:	d114      	bne.n	132b8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1328e:	4b0e      	ldr	r3, [pc, #56]	; (132c8 <system_apb_clock_set_mask+0x58>)
   13290:	4a0d      	ldr	r2, [pc, #52]	; (132c8 <system_apb_clock_set_mask+0x58>)
   13292:	6991      	ldr	r1, [r2, #24]
   13294:	683a      	ldr	r2, [r7, #0]
   13296:	430a      	orrs	r2, r1
   13298:	619a      	str	r2, [r3, #24]
			break;
   1329a:	e00f      	b.n	132bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   1329c:	4b0a      	ldr	r3, [pc, #40]	; (132c8 <system_apb_clock_set_mask+0x58>)
   1329e:	4a0a      	ldr	r2, [pc, #40]	; (132c8 <system_apb_clock_set_mask+0x58>)
   132a0:	69d1      	ldr	r1, [r2, #28]
   132a2:	683a      	ldr	r2, [r7, #0]
   132a4:	430a      	orrs	r2, r1
   132a6:	61da      	str	r2, [r3, #28]
			break;
   132a8:	e008      	b.n	132bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   132aa:	4b07      	ldr	r3, [pc, #28]	; (132c8 <system_apb_clock_set_mask+0x58>)
   132ac:	4a06      	ldr	r2, [pc, #24]	; (132c8 <system_apb_clock_set_mask+0x58>)
   132ae:	6a11      	ldr	r1, [r2, #32]
   132b0:	683a      	ldr	r2, [r7, #0]
   132b2:	430a      	orrs	r2, r1
   132b4:	621a      	str	r2, [r3, #32]
			break;
   132b6:	e001      	b.n	132bc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   132b8:	2317      	movs	r3, #23
   132ba:	e000      	b.n	132be <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   132bc:	2300      	movs	r3, #0
}
   132be:	0018      	movs	r0, r3
   132c0:	46bd      	mov	sp, r7
   132c2:	b002      	add	sp, #8
   132c4:	bd80      	pop	{r7, pc}
   132c6:	46c0      	nop			; (mov r8, r8)
   132c8:	40000400 	.word	0x40000400

000132cc <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   132cc:	b580      	push	{r7, lr}
   132ce:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   132d0:	2102      	movs	r1, #2
   132d2:	2002      	movs	r0, #2
   132d4:	4b07      	ldr	r3, [pc, #28]	; (132f4 <_system_events_init+0x28>)
   132d6:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   132d8:	4b07      	ldr	r3, [pc, #28]	; (132f8 <_system_events_init+0x2c>)
   132da:	2201      	movs	r2, #1
   132dc:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   132de:	46c0      	nop			; (mov r8, r8)
   132e0:	4b05      	ldr	r3, [pc, #20]	; (132f8 <_system_events_init+0x2c>)
   132e2:	781b      	ldrb	r3, [r3, #0]
   132e4:	b2db      	uxtb	r3, r3
   132e6:	001a      	movs	r2, r3
   132e8:	2301      	movs	r3, #1
   132ea:	4013      	ands	r3, r2
   132ec:	d1f8      	bne.n	132e0 <_system_events_init+0x14>
	}
}
   132ee:	46c0      	nop			; (mov r8, r8)
   132f0:	46bd      	mov	sp, r7
   132f2:	bd80      	pop	{r7, pc}
   132f4:	00013271 	.word	0x00013271
   132f8:	42000400 	.word	0x42000400

000132fc <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   132fc:	b580      	push	{r7, lr}
   132fe:	b084      	sub	sp, #16
   13300:	af00      	add	r7, sp, #0
   13302:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13304:	687b      	ldr	r3, [r7, #4]
   13306:	681b      	ldr	r3, [r3, #0]
   13308:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1330a:	68fb      	ldr	r3, [r7, #12]
   1330c:	69db      	ldr	r3, [r3, #28]
   1330e:	2207      	movs	r2, #7
   13310:	4013      	ands	r3, r2
   13312:	1e5a      	subs	r2, r3, #1
   13314:	4193      	sbcs	r3, r2
   13316:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   13318:	0018      	movs	r0, r3
   1331a:	46bd      	mov	sp, r7
   1331c:	b004      	add	sp, #16
   1331e:	bd80      	pop	{r7, pc}

00013320 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   13320:	b580      	push	{r7, lr}
   13322:	b082      	sub	sp, #8
   13324:	af00      	add	r7, sp, #0
   13326:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   13328:	46c0      	nop			; (mov r8, r8)
   1332a:	687b      	ldr	r3, [r7, #4]
   1332c:	0018      	movs	r0, r3
   1332e:	4b04      	ldr	r3, [pc, #16]	; (13340 <_i2c_master_wait_for_sync+0x20>)
   13330:	4798      	blx	r3
   13332:	1e03      	subs	r3, r0, #0
   13334:	d1f9      	bne.n	1332a <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   13336:	46c0      	nop			; (mov r8, r8)
   13338:	46bd      	mov	sp, r7
   1333a:	b002      	add	sp, #8
   1333c:	bd80      	pop	{r7, pc}
   1333e:	46c0      	nop			; (mov r8, r8)
   13340:	000132fd 	.word	0x000132fd

00013344 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   13344:	b580      	push	{r7, lr}
   13346:	b084      	sub	sp, #16
   13348:	af00      	add	r7, sp, #0
   1334a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1334c:	687b      	ldr	r3, [r7, #4]
   1334e:	681b      	ldr	r3, [r3, #0]
   13350:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13352:	68fb      	ldr	r3, [r7, #12]
   13354:	681b      	ldr	r3, [r3, #0]
   13356:	011b      	lsls	r3, r3, #4
   13358:	0fdb      	lsrs	r3, r3, #31
   1335a:	b2db      	uxtb	r3, r3
   1335c:	001a      	movs	r2, r3
   1335e:	230b      	movs	r3, #11
   13360:	18fb      	adds	r3, r7, r3
   13362:	1e51      	subs	r1, r2, #1
   13364:	418a      	sbcs	r2, r1
   13366:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   13368:	2308      	movs	r3, #8
   1336a:	18fb      	adds	r3, r7, r3
   1336c:	687a      	ldr	r2, [r7, #4]
   1336e:	8b52      	ldrh	r2, [r2, #26]
   13370:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   13372:	687b      	ldr	r3, [r7, #4]
   13374:	8b9b      	ldrh	r3, [r3, #28]
   13376:	b29a      	uxth	r2, r3
   13378:	2308      	movs	r3, #8
   1337a:	18fb      	adds	r3, r7, r3
   1337c:	2108      	movs	r1, #8
   1337e:	1879      	adds	r1, r7, r1
   13380:	8809      	ldrh	r1, [r1, #0]
   13382:	1a8a      	subs	r2, r1, r2
   13384:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   13386:	687b      	ldr	r3, [r7, #4]
   13388:	8b9b      	ldrh	r3, [r3, #28]
   1338a:	b29b      	uxth	r3, r3
   1338c:	3b01      	subs	r3, #1
   1338e:	b29a      	uxth	r2, r3
   13390:	687b      	ldr	r3, [r7, #4]
   13392:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   13394:	230b      	movs	r3, #11
   13396:	18fb      	adds	r3, r7, r3
   13398:	781b      	ldrb	r3, [r3, #0]
   1339a:	2b00      	cmp	r3, #0
   1339c:	d010      	beq.n	133c0 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1339e:	687b      	ldr	r3, [r7, #4]
   133a0:	7adb      	ldrb	r3, [r3, #11]
   133a2:	2b00      	cmp	r3, #0
   133a4:	d01c      	beq.n	133e0 <_i2c_master_read+0x9c>
   133a6:	687b      	ldr	r3, [r7, #4]
   133a8:	8b9b      	ldrh	r3, [r3, #28]
   133aa:	b29b      	uxth	r3, r3
   133ac:	2b01      	cmp	r3, #1
   133ae:	d117      	bne.n	133e0 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   133b0:	68fb      	ldr	r3, [r7, #12]
   133b2:	685b      	ldr	r3, [r3, #4]
   133b4:	2280      	movs	r2, #128	; 0x80
   133b6:	02d2      	lsls	r2, r2, #11
   133b8:	431a      	orrs	r2, r3
   133ba:	68fb      	ldr	r3, [r7, #12]
   133bc:	605a      	str	r2, [r3, #4]
   133be:	e00f      	b.n	133e0 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   133c0:	687b      	ldr	r3, [r7, #4]
   133c2:	7adb      	ldrb	r3, [r3, #11]
   133c4:	2b00      	cmp	r3, #0
   133c6:	d00b      	beq.n	133e0 <_i2c_master_read+0x9c>
   133c8:	687b      	ldr	r3, [r7, #4]
   133ca:	8b9b      	ldrh	r3, [r3, #28]
   133cc:	b29b      	uxth	r3, r3
   133ce:	2b00      	cmp	r3, #0
   133d0:	d106      	bne.n	133e0 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   133d2:	68fb      	ldr	r3, [r7, #12]
   133d4:	685b      	ldr	r3, [r3, #4]
   133d6:	2280      	movs	r2, #128	; 0x80
   133d8:	02d2      	lsls	r2, r2, #11
   133da:	431a      	orrs	r2, r3
   133dc:	68fb      	ldr	r3, [r7, #12]
   133de:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   133e0:	687b      	ldr	r3, [r7, #4]
   133e2:	8b9b      	ldrh	r3, [r3, #28]
   133e4:	b29b      	uxth	r3, r3
   133e6:	2b00      	cmp	r3, #0
   133e8:	d10e      	bne.n	13408 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   133ea:	687b      	ldr	r3, [r7, #4]
   133ec:	7a9b      	ldrb	r3, [r3, #10]
   133ee:	2b00      	cmp	r3, #0
   133f0:	d00a      	beq.n	13408 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   133f2:	687b      	ldr	r3, [r7, #4]
   133f4:	0018      	movs	r0, r3
   133f6:	4b0e      	ldr	r3, [pc, #56]	; (13430 <_i2c_master_read+0xec>)
   133f8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   133fa:	68fb      	ldr	r3, [r7, #12]
   133fc:	685b      	ldr	r3, [r3, #4]
   133fe:	22c0      	movs	r2, #192	; 0xc0
   13400:	0292      	lsls	r2, r2, #10
   13402:	431a      	orrs	r2, r3
   13404:	68fb      	ldr	r3, [r7, #12]
   13406:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   13408:	687b      	ldr	r3, [r7, #4]
   1340a:	0018      	movs	r0, r3
   1340c:	4b08      	ldr	r3, [pc, #32]	; (13430 <_i2c_master_read+0xec>)
   1340e:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   13410:	687b      	ldr	r3, [r7, #4]
   13412:	6a1a      	ldr	r2, [r3, #32]
   13414:	2308      	movs	r3, #8
   13416:	18fb      	adds	r3, r7, r3
   13418:	881b      	ldrh	r3, [r3, #0]
   1341a:	18d3      	adds	r3, r2, r3
   1341c:	68fa      	ldr	r2, [r7, #12]
   1341e:	2128      	movs	r1, #40	; 0x28
   13420:	5c52      	ldrb	r2, [r2, r1]
   13422:	b2d2      	uxtb	r2, r2
   13424:	701a      	strb	r2, [r3, #0]
}
   13426:	46c0      	nop			; (mov r8, r8)
   13428:	46bd      	mov	sp, r7
   1342a:	b004      	add	sp, #16
   1342c:	bd80      	pop	{r7, pc}
   1342e:	46c0      	nop			; (mov r8, r8)
   13430:	00013321 	.word	0x00013321

00013434 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   13434:	b580      	push	{r7, lr}
   13436:	b084      	sub	sp, #16
   13438:	af00      	add	r7, sp, #0
   1343a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1343c:	687b      	ldr	r3, [r7, #4]
   1343e:	681b      	ldr	r3, [r3, #0]
   13440:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   13442:	68fb      	ldr	r3, [r7, #12]
   13444:	8b5b      	ldrh	r3, [r3, #26]
   13446:	b29b      	uxth	r3, r3
   13448:	001a      	movs	r2, r3
   1344a:	2304      	movs	r3, #4
   1344c:	4013      	ands	r3, r2
   1344e:	d004      	beq.n	1345a <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   13450:	687b      	ldr	r3, [r7, #4]
   13452:	2225      	movs	r2, #37	; 0x25
   13454:	211e      	movs	r1, #30
   13456:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   13458:	e024      	b.n	134a4 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   1345a:	230a      	movs	r3, #10
   1345c:	18fb      	adds	r3, r7, r3
   1345e:	687a      	ldr	r2, [r7, #4]
   13460:	8b52      	ldrh	r2, [r2, #26]
   13462:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   13464:	687b      	ldr	r3, [r7, #4]
   13466:	8b9b      	ldrh	r3, [r3, #28]
   13468:	b29a      	uxth	r2, r3
   1346a:	230a      	movs	r3, #10
   1346c:	18fb      	adds	r3, r7, r3
   1346e:	210a      	movs	r1, #10
   13470:	1879      	adds	r1, r7, r1
   13472:	8809      	ldrh	r1, [r1, #0]
   13474:	1a8a      	subs	r2, r1, r2
   13476:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   13478:	687b      	ldr	r3, [r7, #4]
   1347a:	8b9b      	ldrh	r3, [r3, #28]
   1347c:	b29b      	uxth	r3, r3
   1347e:	3b01      	subs	r3, #1
   13480:	b29a      	uxth	r2, r3
   13482:	687b      	ldr	r3, [r7, #4]
   13484:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   13486:	687b      	ldr	r3, [r7, #4]
   13488:	0018      	movs	r0, r3
   1348a:	4b08      	ldr	r3, [pc, #32]	; (134ac <_i2c_master_write+0x78>)
   1348c:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   1348e:	687b      	ldr	r3, [r7, #4]
   13490:	6a1a      	ldr	r2, [r3, #32]
   13492:	230a      	movs	r3, #10
   13494:	18fb      	adds	r3, r7, r3
   13496:	881b      	ldrh	r3, [r3, #0]
   13498:	18d3      	adds	r3, r2, r3
   1349a:	781b      	ldrb	r3, [r3, #0]
   1349c:	b2d9      	uxtb	r1, r3
   1349e:	68fb      	ldr	r3, [r7, #12]
   134a0:	2228      	movs	r2, #40	; 0x28
   134a2:	5499      	strb	r1, [r3, r2]
}
   134a4:	46bd      	mov	sp, r7
   134a6:	b004      	add	sp, #16
   134a8:	bd80      	pop	{r7, pc}
   134aa:	46c0      	nop			; (mov r8, r8)
   134ac:	00013321 	.word	0x00013321

000134b0 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   134b0:	b580      	push	{r7, lr}
   134b2:	b084      	sub	sp, #16
   134b4:	af00      	add	r7, sp, #0
   134b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   134b8:	687b      	ldr	r3, [r7, #4]
   134ba:	681b      	ldr	r3, [r3, #0]
   134bc:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   134be:	68fb      	ldr	r3, [r7, #12]
   134c0:	7e1b      	ldrb	r3, [r3, #24]
   134c2:	b2db      	uxtb	r3, r3
   134c4:	001a      	movs	r2, r3
   134c6:	2301      	movs	r3, #1
   134c8:	4013      	ands	r3, r2
   134ca:	d02b      	beq.n	13524 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   134cc:	68fb      	ldr	r3, [r7, #12]
   134ce:	2201      	movs	r2, #1
   134d0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   134d2:	68fb      	ldr	r3, [r7, #12]
   134d4:	8b5b      	ldrh	r3, [r3, #26]
   134d6:	b29b      	uxth	r3, r3
   134d8:	001a      	movs	r2, r3
   134da:	2302      	movs	r3, #2
   134dc:	4013      	ands	r3, r2
   134de:	d004      	beq.n	134ea <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   134e0:	687b      	ldr	r3, [r7, #4]
   134e2:	2225      	movs	r2, #37	; 0x25
   134e4:	2141      	movs	r1, #65	; 0x41
   134e6:	5499      	strb	r1, [r3, r2]
   134e8:	e01c      	b.n	13524 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   134ea:	68fb      	ldr	r3, [r7, #12]
   134ec:	8b5b      	ldrh	r3, [r3, #26]
   134ee:	b29b      	uxth	r3, r3
   134f0:	001a      	movs	r2, r3
   134f2:	2304      	movs	r3, #4
   134f4:	4013      	ands	r3, r2
   134f6:	d015      	beq.n	13524 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   134f8:	687b      	ldr	r3, [r7, #4]
   134fa:	2225      	movs	r2, #37	; 0x25
   134fc:	2118      	movs	r1, #24
   134fe:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   13500:	687b      	ldr	r3, [r7, #4]
   13502:	2200      	movs	r2, #0
   13504:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   13506:	687b      	ldr	r3, [r7, #4]
   13508:	7a9b      	ldrb	r3, [r3, #10]
   1350a:	2b00      	cmp	r3, #0
   1350c:	d00a      	beq.n	13524 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   1350e:	687b      	ldr	r3, [r7, #4]
   13510:	0018      	movs	r0, r3
   13512:	4b13      	ldr	r3, [pc, #76]	; (13560 <_i2c_master_async_address_response+0xb0>)
   13514:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13516:	68fb      	ldr	r3, [r7, #12]
   13518:	685b      	ldr	r3, [r3, #4]
   1351a:	22c0      	movs	r2, #192	; 0xc0
   1351c:	0292      	lsls	r2, r2, #10
   1351e:	431a      	orrs	r2, r3
   13520:	68fb      	ldr	r3, [r7, #12]
   13522:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   13524:	687b      	ldr	r3, [r7, #4]
   13526:	8b9b      	ldrh	r3, [r3, #28]
   13528:	b29a      	uxth	r2, r3
   1352a:	687b      	ldr	r3, [r7, #4]
   1352c:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   1352e:	687b      	ldr	r3, [r7, #4]
   13530:	2225      	movs	r2, #37	; 0x25
   13532:	5c9b      	ldrb	r3, [r3, r2]
   13534:	b2db      	uxtb	r3, r3
   13536:	2b05      	cmp	r3, #5
   13538:	d10e      	bne.n	13558 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   1353a:	687b      	ldr	r3, [r7, #4]
   1353c:	2224      	movs	r2, #36	; 0x24
   1353e:	5c9b      	ldrb	r3, [r3, r2]
   13540:	b2db      	uxtb	r3, r3
   13542:	2b00      	cmp	r3, #0
   13544:	d104      	bne.n	13550 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   13546:	687b      	ldr	r3, [r7, #4]
   13548:	0018      	movs	r0, r3
   1354a:	4b06      	ldr	r3, [pc, #24]	; (13564 <_i2c_master_async_address_response+0xb4>)
   1354c:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   1354e:	e003      	b.n	13558 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   13550:	687b      	ldr	r3, [r7, #4]
   13552:	0018      	movs	r0, r3
   13554:	4b04      	ldr	r3, [pc, #16]	; (13568 <_i2c_master_async_address_response+0xb8>)
   13556:	4798      	blx	r3
}
   13558:	46c0      	nop			; (mov r8, r8)
   1355a:	46bd      	mov	sp, r7
   1355c:	b004      	add	sp, #16
   1355e:	bd80      	pop	{r7, pc}
   13560:	00013321 	.word	0x00013321
   13564:	00013435 	.word	0x00013435
   13568:	00013345 	.word	0x00013345

0001356c <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   1356c:	b580      	push	{r7, lr}
   1356e:	b084      	sub	sp, #16
   13570:	af00      	add	r7, sp, #0
   13572:	60f8      	str	r0, [r7, #12]
   13574:	60b9      	str	r1, [r7, #8]
   13576:	1dfb      	adds	r3, r7, #7
   13578:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   1357a:	1dfb      	adds	r3, r7, #7
   1357c:	781b      	ldrb	r3, [r3, #0]
   1357e:	68fa      	ldr	r2, [r7, #12]
   13580:	3302      	adds	r3, #2
   13582:	009b      	lsls	r3, r3, #2
   13584:	18d3      	adds	r3, r2, r3
   13586:	3304      	adds	r3, #4
   13588:	68ba      	ldr	r2, [r7, #8]
   1358a:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   1358c:	68fb      	ldr	r3, [r7, #12]
   1358e:	7e1b      	ldrb	r3, [r3, #24]
   13590:	b2db      	uxtb	r3, r3
   13592:	b25a      	sxtb	r2, r3
   13594:	1dfb      	adds	r3, r7, #7
   13596:	781b      	ldrb	r3, [r3, #0]
   13598:	2101      	movs	r1, #1
   1359a:	4099      	lsls	r1, r3
   1359c:	000b      	movs	r3, r1
   1359e:	b25b      	sxtb	r3, r3
   135a0:	4313      	orrs	r3, r2
   135a2:	b25b      	sxtb	r3, r3
   135a4:	b2da      	uxtb	r2, r3
   135a6:	68fb      	ldr	r3, [r7, #12]
   135a8:	761a      	strb	r2, [r3, #24]
}
   135aa:	46c0      	nop			; (mov r8, r8)
   135ac:	46bd      	mov	sp, r7
   135ae:	b004      	add	sp, #16
   135b0:	bd80      	pop	{r7, pc}
	...

000135b4 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   135b4:	b590      	push	{r4, r7, lr}
   135b6:	b087      	sub	sp, #28
   135b8:	af00      	add	r7, sp, #0
   135ba:	6078      	str	r0, [r7, #4]
   135bc:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   135be:	687b      	ldr	r3, [r7, #4]
   135c0:	681b      	ldr	r3, [r3, #0]
   135c2:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   135c4:	683b      	ldr	r3, [r7, #0]
   135c6:	685a      	ldr	r2, [r3, #4]
   135c8:	687b      	ldr	r3, [r7, #4]
   135ca:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   135cc:	683b      	ldr	r3, [r7, #0]
   135ce:	885a      	ldrh	r2, [r3, #2]
   135d0:	687b      	ldr	r3, [r7, #4]
   135d2:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   135d4:	687b      	ldr	r3, [r7, #4]
   135d6:	2224      	movs	r2, #36	; 0x24
   135d8:	2101      	movs	r1, #1
   135da:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   135dc:	687b      	ldr	r3, [r7, #4]
   135de:	2225      	movs	r2, #37	; 0x25
   135e0:	2105      	movs	r1, #5
   135e2:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   135e4:	693b      	ldr	r3, [r7, #16]
   135e6:	681b      	ldr	r3, [r3, #0]
   135e8:	011b      	lsls	r3, r3, #4
   135ea:	0fdb      	lsrs	r3, r3, #31
   135ec:	b2db      	uxtb	r3, r3
   135ee:	001a      	movs	r2, r3
   135f0:	230f      	movs	r3, #15
   135f2:	18fb      	adds	r3, r7, r3
   135f4:	1e51      	subs	r1, r2, #1
   135f6:	418a      	sbcs	r2, r1
   135f8:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   135fa:	683b      	ldr	r3, [r7, #0]
   135fc:	7a5b      	ldrb	r3, [r3, #9]
   135fe:	2b00      	cmp	r3, #0
   13600:	d006      	beq.n	13610 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13602:	683b      	ldr	r3, [r7, #0]
   13604:	7a9a      	ldrb	r2, [r3, #10]
   13606:	687b      	ldr	r3, [r7, #4]
   13608:	0011      	movs	r1, r2
   1360a:	0018      	movs	r0, r3
   1360c:	4b3b      	ldr	r3, [pc, #236]	; (136fc <_i2c_master_read_packet+0x148>)
   1360e:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13610:	230f      	movs	r3, #15
   13612:	18fb      	adds	r3, r7, r3
   13614:	781b      	ldrb	r3, [r3, #0]
   13616:	2b00      	cmp	r3, #0
   13618:	d00b      	beq.n	13632 <_i2c_master_read_packet+0x7e>
   1361a:	683b      	ldr	r3, [r7, #0]
   1361c:	885b      	ldrh	r3, [r3, #2]
   1361e:	2b01      	cmp	r3, #1
   13620:	d107      	bne.n	13632 <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13622:	693b      	ldr	r3, [r7, #16]
   13624:	685b      	ldr	r3, [r3, #4]
   13626:	2280      	movs	r2, #128	; 0x80
   13628:	02d2      	lsls	r2, r2, #11
   1362a:	431a      	orrs	r2, r3
   1362c:	693b      	ldr	r3, [r7, #16]
   1362e:	605a      	str	r2, [r3, #4]
   13630:	e005      	b.n	1363e <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13632:	693b      	ldr	r3, [r7, #16]
   13634:	685b      	ldr	r3, [r3, #4]
   13636:	4a32      	ldr	r2, [pc, #200]	; (13700 <_i2c_master_read_packet+0x14c>)
   13638:	401a      	ands	r2, r3
   1363a:	693b      	ldr	r3, [r7, #16]
   1363c:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   1363e:	683b      	ldr	r3, [r7, #0]
   13640:	7a1b      	ldrb	r3, [r3, #8]
   13642:	2b00      	cmp	r3, #0
   13644:	d045      	beq.n	136d2 <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   13646:	683b      	ldr	r3, [r7, #0]
   13648:	881b      	ldrh	r3, [r3, #0]
   1364a:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1364c:	683b      	ldr	r3, [r7, #0]
   1364e:	7a5b      	ldrb	r3, [r3, #9]
   13650:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13652:	4313      	orrs	r3, r2
   13654:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13656:	2380      	movs	r3, #128	; 0x80
   13658:	021b      	lsls	r3, r3, #8
   1365a:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   1365c:	693b      	ldr	r3, [r7, #16]
   1365e:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   13660:	2317      	movs	r3, #23
   13662:	18fc      	adds	r4, r7, r3
   13664:	687b      	ldr	r3, [r7, #4]
   13666:	0018      	movs	r0, r3
   13668:	4b26      	ldr	r3, [pc, #152]	; (13704 <_i2c_master_read_packet+0x150>)
   1366a:	4798      	blx	r3
   1366c:	0003      	movs	r3, r0
   1366e:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13670:	693b      	ldr	r3, [r7, #16]
   13672:	685b      	ldr	r3, [r3, #4]
   13674:	4a22      	ldr	r2, [pc, #136]	; (13700 <_i2c_master_read_packet+0x14c>)
   13676:	401a      	ands	r2, r3
   13678:	693b      	ldr	r3, [r7, #16]
   1367a:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   1367c:	2317      	movs	r3, #23
   1367e:	18fb      	adds	r3, r7, r3
   13680:	781b      	ldrb	r3, [r3, #0]
   13682:	2b00      	cmp	r3, #0
   13684:	d107      	bne.n	13696 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   13686:	2317      	movs	r3, #23
   13688:	18fc      	adds	r4, r7, r3
   1368a:	687b      	ldr	r3, [r7, #4]
   1368c:	0018      	movs	r0, r3
   1368e:	4b1e      	ldr	r3, [pc, #120]	; (13708 <_i2c_master_read_packet+0x154>)
   13690:	4798      	blx	r3
   13692:	0003      	movs	r3, r0
   13694:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   13696:	2317      	movs	r3, #23
   13698:	18fb      	adds	r3, r7, r3
   1369a:	781b      	ldrb	r3, [r3, #0]
   1369c:	2b00      	cmp	r3, #0
   1369e:	d114      	bne.n	136ca <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   136a0:	693b      	ldr	r3, [r7, #16]
   136a2:	2203      	movs	r2, #3
   136a4:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   136a6:	683b      	ldr	r3, [r7, #0]
   136a8:	881b      	ldrh	r3, [r3, #0]
   136aa:	0a1b      	lsrs	r3, r3, #8
   136ac:	b29b      	uxth	r3, r3
   136ae:	2278      	movs	r2, #120	; 0x78
   136b0:	4313      	orrs	r3, r2
   136b2:	b29b      	uxth	r3, r3
   136b4:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   136b6:	683b      	ldr	r3, [r7, #0]
   136b8:	7a5b      	ldrb	r3, [r3, #9]
   136ba:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   136bc:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   136be:	2201      	movs	r2, #1
   136c0:	4313      	orrs	r3, r2
   136c2:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   136c4:	693b      	ldr	r3, [r7, #16]
   136c6:	625a      	str	r2, [r3, #36]	; 0x24
   136c8:	e012      	b.n	136f0 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   136ca:	2317      	movs	r3, #23
   136cc:	18fb      	adds	r3, r7, r3
   136ce:	781b      	ldrb	r3, [r3, #0]
   136d0:	e00f      	b.n	136f2 <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   136d2:	693b      	ldr	r3, [r7, #16]
   136d4:	2203      	movs	r2, #3
   136d6:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   136d8:	683b      	ldr	r3, [r7, #0]
   136da:	881b      	ldrh	r3, [r3, #0]
   136dc:	005b      	lsls	r3, r3, #1
   136de:	2201      	movs	r2, #1
   136e0:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   136e2:	683b      	ldr	r3, [r7, #0]
   136e4:	7a5b      	ldrb	r3, [r3, #9]
   136e6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   136e8:	4313      	orrs	r3, r2
   136ea:	001a      	movs	r2, r3
   136ec:	693b      	ldr	r3, [r7, #16]
   136ee:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   136f0:	2300      	movs	r3, #0
}
   136f2:	0018      	movs	r0, r3
   136f4:	46bd      	mov	sp, r7
   136f6:	b007      	add	sp, #28
   136f8:	bd90      	pop	{r4, r7, pc}
   136fa:	46c0      	nop			; (mov r8, r8)
   136fc:	000170d5 	.word	0x000170d5
   13700:	fffbffff 	.word	0xfffbffff
   13704:	00017077 	.word	0x00017077
   13708:	00017019 	.word	0x00017019

0001370c <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   1370c:	b580      	push	{r7, lr}
   1370e:	b082      	sub	sp, #8
   13710:	af00      	add	r7, sp, #0
   13712:	6078      	str	r0, [r7, #4]
   13714:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   13716:	687b      	ldr	r3, [r7, #4]
   13718:	8b9b      	ldrh	r3, [r3, #28]
   1371a:	b29b      	uxth	r3, r3
   1371c:	2b00      	cmp	r3, #0
   1371e:	d001      	beq.n	13724 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13720:	2305      	movs	r3, #5
   13722:	e00c      	b.n	1373e <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13724:	687b      	ldr	r3, [r7, #4]
   13726:	2201      	movs	r2, #1
   13728:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1372a:	687b      	ldr	r3, [r7, #4]
   1372c:	2201      	movs	r2, #1
   1372e:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13730:	683a      	ldr	r2, [r7, #0]
   13732:	687b      	ldr	r3, [r7, #4]
   13734:	0011      	movs	r1, r2
   13736:	0018      	movs	r0, r3
   13738:	4b03      	ldr	r3, [pc, #12]	; (13748 <i2c_master_read_packet_job+0x3c>)
   1373a:	4798      	blx	r3
   1373c:	0003      	movs	r3, r0
}
   1373e:	0018      	movs	r0, r3
   13740:	46bd      	mov	sp, r7
   13742:	b002      	add	sp, #8
   13744:	bd80      	pop	{r7, pc}
   13746:	46c0      	nop			; (mov r8, r8)
   13748:	000135b5 	.word	0x000135b5

0001374c <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   1374c:	b580      	push	{r7, lr}
   1374e:	b084      	sub	sp, #16
   13750:	af00      	add	r7, sp, #0
   13752:	6078      	str	r0, [r7, #4]
   13754:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13756:	687b      	ldr	r3, [r7, #4]
   13758:	681b      	ldr	r3, [r3, #0]
   1375a:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   1375c:	683b      	ldr	r3, [r7, #0]
   1375e:	7a5b      	ldrb	r3, [r3, #9]
   13760:	2b00      	cmp	r3, #0
   13762:	d006      	beq.n	13772 <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13764:	683b      	ldr	r3, [r7, #0]
   13766:	7a9a      	ldrb	r2, [r3, #10]
   13768:	687b      	ldr	r3, [r7, #4]
   1376a:	0011      	movs	r1, r2
   1376c:	0018      	movs	r0, r3
   1376e:	4b1e      	ldr	r3, [pc, #120]	; (137e8 <_i2c_master_write_packet+0x9c>)
   13770:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13772:	68fb      	ldr	r3, [r7, #12]
   13774:	685b      	ldr	r3, [r3, #4]
   13776:	4a1d      	ldr	r2, [pc, #116]	; (137ec <_i2c_master_write_packet+0xa0>)
   13778:	401a      	ands	r2, r3
   1377a:	68fb      	ldr	r3, [r7, #12]
   1377c:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   1377e:	683b      	ldr	r3, [r7, #0]
   13780:	685a      	ldr	r2, [r3, #4]
   13782:	687b      	ldr	r3, [r7, #4]
   13784:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13786:	683b      	ldr	r3, [r7, #0]
   13788:	885a      	ldrh	r2, [r3, #2]
   1378a:	687b      	ldr	r3, [r7, #4]
   1378c:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   1378e:	687b      	ldr	r3, [r7, #4]
   13790:	2224      	movs	r2, #36	; 0x24
   13792:	2100      	movs	r1, #0
   13794:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13796:	687b      	ldr	r3, [r7, #4]
   13798:	2225      	movs	r2, #37	; 0x25
   1379a:	2105      	movs	r1, #5
   1379c:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   1379e:	68fb      	ldr	r3, [r7, #12]
   137a0:	2203      	movs	r2, #3
   137a2:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   137a4:	683b      	ldr	r3, [r7, #0]
   137a6:	7a1b      	ldrb	r3, [r3, #8]
   137a8:	2b00      	cmp	r3, #0
   137aa:	d00d      	beq.n	137c8 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   137ac:	683b      	ldr	r3, [r7, #0]
   137ae:	881b      	ldrh	r3, [r3, #0]
   137b0:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   137b2:	683b      	ldr	r3, [r7, #0]
   137b4:	7a5b      	ldrb	r3, [r3, #9]
   137b6:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   137b8:	4313      	orrs	r3, r2
   137ba:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   137bc:	2380      	movs	r3, #128	; 0x80
   137be:	021b      	lsls	r3, r3, #8
   137c0:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   137c2:	68fb      	ldr	r3, [r7, #12]
   137c4:	625a      	str	r2, [r3, #36]	; 0x24
   137c6:	e009      	b.n	137dc <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   137c8:	683b      	ldr	r3, [r7, #0]
   137ca:	881b      	ldrh	r3, [r3, #0]
   137cc:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   137ce:	683b      	ldr	r3, [r7, #0]
   137d0:	7a5b      	ldrb	r3, [r3, #9]
   137d2:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   137d4:	4313      	orrs	r3, r2
   137d6:	001a      	movs	r2, r3
   137d8:	68fb      	ldr	r3, [r7, #12]
   137da:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   137dc:	2300      	movs	r3, #0
}
   137de:	0018      	movs	r0, r3
   137e0:	46bd      	mov	sp, r7
   137e2:	b004      	add	sp, #16
   137e4:	bd80      	pop	{r7, pc}
   137e6:	46c0      	nop			; (mov r8, r8)
   137e8:	000170d5 	.word	0x000170d5
   137ec:	fffbffff 	.word	0xfffbffff

000137f0 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   137f0:	b580      	push	{r7, lr}
   137f2:	b082      	sub	sp, #8
   137f4:	af00      	add	r7, sp, #0
   137f6:	6078      	str	r0, [r7, #4]
   137f8:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   137fa:	687b      	ldr	r3, [r7, #4]
   137fc:	8b9b      	ldrh	r3, [r3, #28]
   137fe:	b29b      	uxth	r3, r3
   13800:	2b00      	cmp	r3, #0
   13802:	d001      	beq.n	13808 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   13804:	2305      	movs	r3, #5
   13806:	e00c      	b.n	13822 <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   13808:	687b      	ldr	r3, [r7, #4]
   1380a:	2201      	movs	r2, #1
   1380c:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   1380e:	687b      	ldr	r3, [r7, #4]
   13810:	2201      	movs	r2, #1
   13812:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13814:	683a      	ldr	r2, [r7, #0]
   13816:	687b      	ldr	r3, [r7, #4]
   13818:	0011      	movs	r1, r2
   1381a:	0018      	movs	r0, r3
   1381c:	4b03      	ldr	r3, [pc, #12]	; (1382c <i2c_master_write_packet_job+0x3c>)
   1381e:	4798      	blx	r3
   13820:	0003      	movs	r3, r0
}
   13822:	0018      	movs	r0, r3
   13824:	46bd      	mov	sp, r7
   13826:	b002      	add	sp, #8
   13828:	bd80      	pop	{r7, pc}
   1382a:	46c0      	nop			; (mov r8, r8)
   1382c:	0001374d 	.word	0x0001374d

00013830 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13830:	b580      	push	{r7, lr}
   13832:	b086      	sub	sp, #24
   13834:	af00      	add	r7, sp, #0
   13836:	0002      	movs	r2, r0
   13838:	1dfb      	adds	r3, r7, #7
   1383a:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   1383c:	1dfb      	adds	r3, r7, #7
   1383e:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13840:	4b93      	ldr	r3, [pc, #588]	; (13a90 <_i2c_master_interrupt_handler+0x260>)
   13842:	0092      	lsls	r2, r2, #2
   13844:	58d3      	ldr	r3, [r2, r3]
   13846:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13848:	697b      	ldr	r3, [r7, #20]
   1384a:	681b      	ldr	r3, [r3, #0]
   1384c:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   1384e:	693b      	ldr	r3, [r7, #16]
   13850:	681b      	ldr	r3, [r3, #0]
   13852:	011b      	lsls	r3, r3, #4
   13854:	0fdb      	lsrs	r3, r3, #31
   13856:	b2db      	uxtb	r3, r3
   13858:	001a      	movs	r2, r3
   1385a:	230f      	movs	r3, #15
   1385c:	18fb      	adds	r3, r7, r3
   1385e:	1e51      	subs	r1, r2, #1
   13860:	418a      	sbcs	r2, r1
   13862:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   13864:	230e      	movs	r3, #14
   13866:	18fb      	adds	r3, r7, r3
   13868:	697a      	ldr	r2, [r7, #20]
   1386a:	7e52      	ldrb	r2, [r2, #25]
   1386c:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   1386e:	697b      	ldr	r3, [r7, #20]
   13870:	7e1b      	ldrb	r3, [r3, #24]
   13872:	b2da      	uxtb	r2, r3
   13874:	230e      	movs	r3, #14
   13876:	18fb      	adds	r3, r7, r3
   13878:	210e      	movs	r1, #14
   1387a:	1879      	adds	r1, r7, r1
   1387c:	7809      	ldrb	r1, [r1, #0]
   1387e:	400a      	ands	r2, r1
   13880:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   13882:	697b      	ldr	r3, [r7, #20]
   13884:	8b5b      	ldrh	r3, [r3, #26]
   13886:	b29b      	uxth	r3, r3
   13888:	2b00      	cmp	r3, #0
   1388a:	d109      	bne.n	138a0 <_i2c_master_interrupt_handler+0x70>
   1388c:	697b      	ldr	r3, [r7, #20]
   1388e:	8b9b      	ldrh	r3, [r3, #28]
   13890:	b29b      	uxth	r3, r3
   13892:	2b00      	cmp	r3, #0
   13894:	d004      	beq.n	138a0 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   13896:	697b      	ldr	r3, [r7, #20]
   13898:	0018      	movs	r0, r3
   1389a:	4b7e      	ldr	r3, [pc, #504]	; (13a94 <_i2c_master_interrupt_handler+0x264>)
   1389c:	4798      	blx	r3
   1389e:	e070      	b.n	13982 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   138a0:	697b      	ldr	r3, [r7, #20]
   138a2:	8b5b      	ldrh	r3, [r3, #26]
   138a4:	b29b      	uxth	r3, r3
   138a6:	2b00      	cmp	r3, #0
   138a8:	d039      	beq.n	1391e <_i2c_master_interrupt_handler+0xee>
   138aa:	697b      	ldr	r3, [r7, #20]
   138ac:	8b9b      	ldrh	r3, [r3, #28]
   138ae:	b29b      	uxth	r3, r3
   138b0:	2b00      	cmp	r3, #0
   138b2:	d134      	bne.n	1391e <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   138b4:	697b      	ldr	r3, [r7, #20]
   138b6:	2225      	movs	r2, #37	; 0x25
   138b8:	5c9b      	ldrb	r3, [r3, r2]
   138ba:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   138bc:	2b05      	cmp	r3, #5
   138be:	d12e      	bne.n	1391e <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   138c0:	697b      	ldr	r3, [r7, #20]
   138c2:	2224      	movs	r2, #36	; 0x24
   138c4:	5c9b      	ldrb	r3, [r3, r2]
   138c6:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   138c8:	2b00      	cmp	r3, #0
   138ca:	d128      	bne.n	1391e <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   138cc:	693b      	ldr	r3, [r7, #16]
   138ce:	2203      	movs	r2, #3
   138d0:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   138d2:	697b      	ldr	r3, [r7, #20]
   138d4:	2200      	movs	r2, #0
   138d6:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   138d8:	697b      	ldr	r3, [r7, #20]
   138da:	2225      	movs	r2, #37	; 0x25
   138dc:	2100      	movs	r1, #0
   138de:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   138e0:	697b      	ldr	r3, [r7, #20]
   138e2:	7a9b      	ldrb	r3, [r3, #10]
   138e4:	2b00      	cmp	r3, #0
   138e6:	d00b      	beq.n	13900 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   138e8:	697b      	ldr	r3, [r7, #20]
   138ea:	0018      	movs	r0, r3
   138ec:	4b6a      	ldr	r3, [pc, #424]	; (13a98 <_i2c_master_interrupt_handler+0x268>)
   138ee:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   138f0:	693b      	ldr	r3, [r7, #16]
   138f2:	685b      	ldr	r3, [r3, #4]
   138f4:	22c0      	movs	r2, #192	; 0xc0
   138f6:	0292      	lsls	r2, r2, #10
   138f8:	431a      	orrs	r2, r3
   138fa:	693b      	ldr	r3, [r7, #16]
   138fc:	605a      	str	r2, [r3, #4]
   138fe:	e002      	b.n	13906 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   13900:	693b      	ldr	r3, [r7, #16]
   13902:	2201      	movs	r2, #1
   13904:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13906:	230e      	movs	r3, #14
   13908:	18fb      	adds	r3, r7, r3
   1390a:	781b      	ldrb	r3, [r3, #0]
   1390c:	2201      	movs	r2, #1
   1390e:	4013      	ands	r3, r2
   13910:	d037      	beq.n	13982 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13912:	697b      	ldr	r3, [r7, #20]
   13914:	68db      	ldr	r3, [r3, #12]
   13916:	697a      	ldr	r2, [r7, #20]
   13918:	0010      	movs	r0, r2
   1391a:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   1391c:	e031      	b.n	13982 <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   1391e:	697b      	ldr	r3, [r7, #20]
   13920:	8b5b      	ldrh	r3, [r3, #26]
   13922:	b29b      	uxth	r3, r3
   13924:	2b00      	cmp	r3, #0
   13926:	d02c      	beq.n	13982 <_i2c_master_interrupt_handler+0x152>
   13928:	697b      	ldr	r3, [r7, #20]
   1392a:	8b9b      	ldrh	r3, [r3, #28]
   1392c:	b29b      	uxth	r3, r3
   1392e:	2b00      	cmp	r3, #0
   13930:	d027      	beq.n	13982 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13932:	693b      	ldr	r3, [r7, #16]
   13934:	8b5b      	ldrh	r3, [r3, #26]
   13936:	b29b      	uxth	r3, r3
   13938:	001a      	movs	r2, r3
   1393a:	2320      	movs	r3, #32
   1393c:	4013      	ands	r3, r2
   1393e:	d111      	bne.n	13964 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13940:	230f      	movs	r3, #15
   13942:	18fb      	adds	r3, r7, r3
   13944:	781b      	ldrb	r3, [r3, #0]
   13946:	2201      	movs	r2, #1
   13948:	4053      	eors	r3, r2
   1394a:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   1394c:	2b00      	cmp	r3, #0
   1394e:	d104      	bne.n	1395a <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13950:	697b      	ldr	r3, [r7, #20]
   13952:	8b9b      	ldrh	r3, [r3, #28]
   13954:	b29b      	uxth	r3, r3
   13956:	2b01      	cmp	r3, #1
   13958:	d004      	beq.n	13964 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   1395a:	697b      	ldr	r3, [r7, #20]
   1395c:	2225      	movs	r2, #37	; 0x25
   1395e:	2141      	movs	r1, #65	; 0x41
   13960:	5499      	strb	r1, [r3, r2]
   13962:	e00e      	b.n	13982 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   13964:	697b      	ldr	r3, [r7, #20]
   13966:	2224      	movs	r2, #36	; 0x24
   13968:	5c9b      	ldrb	r3, [r3, r2]
   1396a:	b2db      	uxtb	r3, r3
   1396c:	2b00      	cmp	r3, #0
   1396e:	d104      	bne.n	1397a <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   13970:	697b      	ldr	r3, [r7, #20]
   13972:	0018      	movs	r0, r3
   13974:	4b49      	ldr	r3, [pc, #292]	; (13a9c <_i2c_master_interrupt_handler+0x26c>)
   13976:	4798      	blx	r3
   13978:	e003      	b.n	13982 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   1397a:	697b      	ldr	r3, [r7, #20]
   1397c:	0018      	movs	r0, r3
   1397e:	4b48      	ldr	r3, [pc, #288]	; (13aa0 <_i2c_master_interrupt_handler+0x270>)
   13980:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13982:	697b      	ldr	r3, [r7, #20]
   13984:	8b5b      	ldrh	r3, [r3, #26]
   13986:	b29b      	uxth	r3, r3
   13988:	2b00      	cmp	r3, #0
   1398a:	d047      	beq.n	13a1c <_i2c_master_interrupt_handler+0x1ec>
   1398c:	697b      	ldr	r3, [r7, #20]
   1398e:	8b9b      	ldrh	r3, [r3, #28]
   13990:	b29b      	uxth	r3, r3
   13992:	2b00      	cmp	r3, #0
   13994:	d142      	bne.n	13a1c <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   13996:	697b      	ldr	r3, [r7, #20]
   13998:	2225      	movs	r2, #37	; 0x25
   1399a:	5c9b      	ldrb	r3, [r3, r2]
   1399c:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   1399e:	2b05      	cmp	r3, #5
   139a0:	d13c      	bne.n	13a1c <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   139a2:	697b      	ldr	r3, [r7, #20]
   139a4:	2224      	movs	r2, #36	; 0x24
   139a6:	5c9b      	ldrb	r3, [r3, r2]
   139a8:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   139aa:	2b01      	cmp	r3, #1
   139ac:	d136      	bne.n	13a1c <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   139ae:	693b      	ldr	r3, [r7, #16]
   139b0:	7e1b      	ldrb	r3, [r3, #24]
   139b2:	b2db      	uxtb	r3, r3
   139b4:	001a      	movs	r2, r3
   139b6:	2302      	movs	r3, #2
   139b8:	4013      	ands	r3, r2
   139ba:	d002      	beq.n	139c2 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   139bc:	693b      	ldr	r3, [r7, #16]
   139be:	2202      	movs	r2, #2
   139c0:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   139c2:	693b      	ldr	r3, [r7, #16]
   139c4:	2203      	movs	r2, #3
   139c6:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   139c8:	697b      	ldr	r3, [r7, #20]
   139ca:	2200      	movs	r2, #0
   139cc:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   139ce:	697b      	ldr	r3, [r7, #20]
   139d0:	2225      	movs	r2, #37	; 0x25
   139d2:	2100      	movs	r1, #0
   139d4:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   139d6:	230e      	movs	r3, #14
   139d8:	18fb      	adds	r3, r7, r3
   139da:	781b      	ldrb	r3, [r3, #0]
   139dc:	2202      	movs	r2, #2
   139de:	4013      	ands	r3, r2
   139e0:	d00b      	beq.n	139fa <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   139e2:	697b      	ldr	r3, [r7, #20]
   139e4:	2224      	movs	r2, #36	; 0x24
   139e6:	5c9b      	ldrb	r3, [r3, r2]
   139e8:	b2db      	uxtb	r3, r3
   139ea:	2b01      	cmp	r3, #1
   139ec:	d105      	bne.n	139fa <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   139ee:	697b      	ldr	r3, [r7, #20]
   139f0:	691b      	ldr	r3, [r3, #16]
   139f2:	697a      	ldr	r2, [r7, #20]
   139f4:	0010      	movs	r0, r2
   139f6:	4798      	blx	r3
   139f8:	e010      	b.n	13a1c <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   139fa:	230e      	movs	r3, #14
   139fc:	18fb      	adds	r3, r7, r3
   139fe:	781b      	ldrb	r3, [r3, #0]
   13a00:	2201      	movs	r2, #1
   13a02:	4013      	ands	r3, r2
   13a04:	d00a      	beq.n	13a1c <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13a06:	697b      	ldr	r3, [r7, #20]
   13a08:	2224      	movs	r2, #36	; 0x24
   13a0a:	5c9b      	ldrb	r3, [r3, r2]
   13a0c:	b2db      	uxtb	r3, r3
   13a0e:	2b00      	cmp	r3, #0
   13a10:	d104      	bne.n	13a1c <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13a12:	697b      	ldr	r3, [r7, #20]
   13a14:	68db      	ldr	r3, [r3, #12]
   13a16:	697a      	ldr	r2, [r7, #20]
   13a18:	0010      	movs	r0, r2
   13a1a:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13a1c:	697b      	ldr	r3, [r7, #20]
   13a1e:	2225      	movs	r2, #37	; 0x25
   13a20:	5c9b      	ldrb	r3, [r3, r2]
   13a22:	b2db      	uxtb	r3, r3
   13a24:	2b05      	cmp	r3, #5
   13a26:	d02e      	beq.n	13a86 <_i2c_master_interrupt_handler+0x256>
   13a28:	697b      	ldr	r3, [r7, #20]
   13a2a:	2225      	movs	r2, #37	; 0x25
   13a2c:	5c9b      	ldrb	r3, [r3, r2]
   13a2e:	b2db      	uxtb	r3, r3
   13a30:	2b00      	cmp	r3, #0
   13a32:	d028      	beq.n	13a86 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13a34:	693b      	ldr	r3, [r7, #16]
   13a36:	2203      	movs	r2, #3
   13a38:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13a3a:	697b      	ldr	r3, [r7, #20]
   13a3c:	2200      	movs	r2, #0
   13a3e:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13a40:	697b      	ldr	r3, [r7, #20]
   13a42:	2200      	movs	r2, #0
   13a44:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   13a46:	697b      	ldr	r3, [r7, #20]
   13a48:	2225      	movs	r2, #37	; 0x25
   13a4a:	5c9b      	ldrb	r3, [r3, r2]
   13a4c:	b2db      	uxtb	r3, r3
   13a4e:	2b41      	cmp	r3, #65	; 0x41
   13a50:	d00e      	beq.n	13a70 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13a52:	697b      	ldr	r3, [r7, #20]
   13a54:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   13a56:	2b00      	cmp	r3, #0
   13a58:	d00a      	beq.n	13a70 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   13a5a:	697b      	ldr	r3, [r7, #20]
   13a5c:	0018      	movs	r0, r3
   13a5e:	4b0e      	ldr	r3, [pc, #56]	; (13a98 <_i2c_master_interrupt_handler+0x268>)
   13a60:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   13a62:	693b      	ldr	r3, [r7, #16]
   13a64:	685b      	ldr	r3, [r3, #4]
   13a66:	22e0      	movs	r2, #224	; 0xe0
   13a68:	02d2      	lsls	r2, r2, #11
   13a6a:	431a      	orrs	r2, r3
   13a6c:	693b      	ldr	r3, [r7, #16]
   13a6e:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   13a70:	230e      	movs	r3, #14
   13a72:	18fb      	adds	r3, r7, r3
   13a74:	781b      	ldrb	r3, [r3, #0]
   13a76:	2204      	movs	r2, #4
   13a78:	4013      	ands	r3, r2
   13a7a:	d004      	beq.n	13a86 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   13a7c:	697b      	ldr	r3, [r7, #20]
   13a7e:	695b      	ldr	r3, [r3, #20]
   13a80:	697a      	ldr	r2, [r7, #20]
   13a82:	0010      	movs	r0, r2
   13a84:	4798      	blx	r3
		}
	}
}
   13a86:	46c0      	nop			; (mov r8, r8)
   13a88:	46bd      	mov	sp, r7
   13a8a:	b006      	add	sp, #24
   13a8c:	bd80      	pop	{r7, pc}
   13a8e:	46c0      	nop			; (mov r8, r8)
   13a90:	20005614 	.word	0x20005614
   13a94:	000134b1 	.word	0x000134b1
   13a98:	00013321 	.word	0x00013321
   13a9c:	00013435 	.word	0x00013435
   13aa0:	00013345 	.word	0x00013345

00013aa4 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   13aa4:	b580      	push	{r7, lr}
   13aa6:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   13aa8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   13aac:	4b02      	ldr	r3, [pc, #8]	; (13ab8 <NVIC_SystemReset+0x14>)
   13aae:	4a03      	ldr	r2, [pc, #12]	; (13abc <NVIC_SystemReset+0x18>)
   13ab0:	60da      	str	r2, [r3, #12]
   13ab2:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   13ab6:	e7fe      	b.n	13ab6 <NVIC_SystemReset+0x12>
   13ab8:	e000ed00 	.word	0xe000ed00
   13abc:	05fa0004 	.word	0x05fa0004

00013ac0 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13ac0:	b580      	push	{r7, lr}
   13ac2:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13ac4:	4b02      	ldr	r3, [pc, #8]	; (13ad0 <system_reset+0x10>)
   13ac6:	4798      	blx	r3
}
   13ac8:	46c0      	nop			; (mov r8, r8)
   13aca:	46bd      	mov	sp, r7
   13acc:	bd80      	pop	{r7, pc}
   13ace:	46c0      	nop			; (mov r8, r8)
   13ad0:	00013aa5 	.word	0x00013aa5

00013ad4 <vCommandConsoleTask>:
/******************************************************************************
* CLI Thread
******************************************************************************/

void vCommandConsoleTask( void *pvParameters )
{
   13ad4:	b580      	push	{r7, lr}
   13ad6:	b088      	sub	sp, #32
   13ad8:	af00      	add	r7, sp, #0
   13ada:	6078      	str	r0, [r7, #4]
//REGISTER COMMANDS HERE
FreeRTOS_CLIRegisterCommand( &xOTAUCommand);
   13adc:	4b90      	ldr	r3, [pc, #576]	; (13d20 <vCommandConsoleTask+0x24c>)
   13ade:	0018      	movs	r0, r3
   13ae0:	4b90      	ldr	r3, [pc, #576]	; (13d24 <vCommandConsoleTask+0x250>)
   13ae2:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xClearScreen );
   13ae4:	4b90      	ldr	r3, [pc, #576]	; (13d28 <vCommandConsoleTask+0x254>)
   13ae6:	0018      	movs	r0, r3
   13ae8:	4b8e      	ldr	r3, [pc, #568]	; (13d24 <vCommandConsoleTask+0x250>)
   13aea:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xResetCommand );
   13aec:	4b8f      	ldr	r3, [pc, #572]	; (13d2c <vCommandConsoleTask+0x258>)
   13aee:	0018      	movs	r0, r3
   13af0:	4b8c      	ldr	r3, [pc, #560]	; (13d24 <vCommandConsoleTask+0x250>)
   13af2:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xNeotrellisTurnLEDCommand );
   13af4:	4b8e      	ldr	r3, [pc, #568]	; (13d30 <vCommandConsoleTask+0x25c>)
   13af6:	0018      	movs	r0, r3
   13af8:	4b8a      	ldr	r3, [pc, #552]	; (13d24 <vCommandConsoleTask+0x250>)
   13afa:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xNeotrellisProcessButtonCommand );
   13afc:	4b8d      	ldr	r3, [pc, #564]	; (13d34 <vCommandConsoleTask+0x260>)
   13afe:	0018      	movs	r0, r3
   13b00:	4b88      	ldr	r3, [pc, #544]	; (13d24 <vCommandConsoleTask+0x250>)
   13b02:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xSendDummyGameData);
   13b04:	4b8c      	ldr	r3, [pc, #560]	; (13d38 <vCommandConsoleTask+0x264>)
   13b06:	0018      	movs	r0, r3
   13b08:	4b86      	ldr	r3, [pc, #536]	; (13d24 <vCommandConsoleTask+0x250>)
   13b0a:	4798      	blx	r3

uint8_t cRxedChar[2], cInputIndex = 0;
   13b0c:	231f      	movs	r3, #31
   13b0e:	18fb      	adds	r3, r7, r3
   13b10:	2200      	movs	r2, #0
   13b12:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString( pcWelcomeMessage);
   13b14:	4b89      	ldr	r3, [pc, #548]	; (13d3c <vCommandConsoleTask+0x268>)
   13b16:	0018      	movs	r0, r3
   13b18:	4b89      	ldr	r3, [pc, #548]	; (13d40 <vCommandConsoleTask+0x26c>)
   13b1a:	4798      	blx	r3

    for( ;; )
    {
        /* This implementation reads a single character at a time.  Wait in the
        Blocked state until a character is received. */
        int recv = SerialConsoleReadCharacter(&cRxedChar);
   13b1c:	2310      	movs	r3, #16
   13b1e:	18fb      	adds	r3, r7, r3
   13b20:	0018      	movs	r0, r3
   13b22:	4b88      	ldr	r3, [pc, #544]	; (13d44 <vCommandConsoleTask+0x270>)
   13b24:	4798      	blx	r3
   13b26:	0003      	movs	r3, r0
   13b28:	61bb      	str	r3, [r7, #24]
		if(recv == -1) //If no characters in the buffer, thread goes to sleep for a while
   13b2a:	69bb      	ldr	r3, [r7, #24]
   13b2c:	3301      	adds	r3, #1
   13b2e:	d103      	bne.n	13b38 <vCommandConsoleTask+0x64>
		{
			vTaskDelay( CLI_TASK_DELAY);
   13b30:	2096      	movs	r0, #150	; 0x96
   13b32:	4b85      	ldr	r3, [pc, #532]	; (13d48 <vCommandConsoleTask+0x274>)
   13b34:	4798      	blx	r3
   13b36:	e7f1      	b.n	13b1c <vCommandConsoleTask+0x48>
		}else if( cRxedChar[0] == '\n' || cRxedChar[0] == '\r'  )
   13b38:	2310      	movs	r3, #16
   13b3a:	18fb      	adds	r3, r7, r3
   13b3c:	781b      	ldrb	r3, [r3, #0]
   13b3e:	2b0a      	cmp	r3, #10
   13b40:	d004      	beq.n	13b4c <vCommandConsoleTask+0x78>
   13b42:	2310      	movs	r3, #16
   13b44:	18fb      	adds	r3, r7, r3
   13b46:	781b      	ldrb	r3, [r3, #0]
   13b48:	2b0d      	cmp	r3, #13
   13b4a:	d131      	bne.n	13bb0 <vCommandConsoleTask+0xdc>
        {
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString("\r\n");
   13b4c:	4b7f      	ldr	r3, [pc, #508]	; (13d4c <vCommandConsoleTask+0x278>)
   13b4e:	0018      	movs	r0, r3
   13b50:	4b7b      	ldr	r3, [pc, #492]	; (13d40 <vCommandConsoleTask+0x26c>)
   13b52:	4798      	blx	r3
			//Copy for last command
			isEscapeCode = false; pcEscapeCodePos = 0;
   13b54:	4b7e      	ldr	r3, [pc, #504]	; (13d50 <vCommandConsoleTask+0x27c>)
   13b56:	2200      	movs	r2, #0
   13b58:	701a      	strb	r2, [r3, #0]
   13b5a:	4b7e      	ldr	r3, [pc, #504]	; (13d54 <vCommandConsoleTask+0x280>)
   13b5c:	2200      	movs	r2, #0
   13b5e:	701a      	strb	r2, [r3, #0]
			strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI-1);
   13b60:	497d      	ldr	r1, [pc, #500]	; (13d58 <vCommandConsoleTask+0x284>)
   13b62:	4b7e      	ldr	r3, [pc, #504]	; (13d5c <vCommandConsoleTask+0x288>)
   13b64:	2231      	movs	r2, #49	; 0x31
   13b66:	0018      	movs	r0, r3
   13b68:	4b7d      	ldr	r3, [pc, #500]	; (13d60 <vCommandConsoleTask+0x28c>)
   13b6a:	4798      	blx	r3
			pcLastCommand[MAX_INPUT_LENGTH_CLI-1] = 0;	//Ensure null termination
   13b6c:	4b7b      	ldr	r3, [pc, #492]	; (13d5c <vCommandConsoleTask+0x288>)
   13b6e:	2231      	movs	r2, #49	; 0x31
   13b70:	2100      	movs	r1, #0
   13b72:	5499      	strb	r1, [r3, r2]
            do
            {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
   13b74:	497b      	ldr	r1, [pc, #492]	; (13d64 <vCommandConsoleTask+0x290>)
   13b76:	4b78      	ldr	r3, [pc, #480]	; (13d58 <vCommandConsoleTask+0x284>)
   13b78:	2282      	movs	r2, #130	; 0x82
   13b7a:	0018      	movs	r0, r3
   13b7c:	4b7a      	ldr	r3, [pc, #488]	; (13d68 <vCommandConsoleTask+0x294>)
   13b7e:	4798      	blx	r3
   13b80:	0003      	movs	r3, r0
   13b82:	617b      	str	r3, [r7, #20]
                              );

                /* Write the output generated by the command interpreter to the
                console. */
				//Ensure it is null terminated
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   13b84:	4b77      	ldr	r3, [pc, #476]	; (13d64 <vCommandConsoleTask+0x290>)
   13b86:	2281      	movs	r2, #129	; 0x81
   13b88:	2100      	movs	r1, #0
   13b8a:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   13b8c:	4b75      	ldr	r3, [pc, #468]	; (13d64 <vCommandConsoleTask+0x290>)
   13b8e:	0018      	movs	r0, r3
   13b90:	4b6b      	ldr	r3, [pc, #428]	; (13d40 <vCommandConsoleTask+0x26c>)
   13b92:	4798      	blx	r3

            } while( xMoreDataToFollow != pdFALSE );
   13b94:	697b      	ldr	r3, [r7, #20]
   13b96:	2b00      	cmp	r3, #0
   13b98:	d1ec      	bne.n	13b74 <vCommandConsoleTask+0xa0>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   13b9a:	231f      	movs	r3, #31
   13b9c:	18fb      	adds	r3, r7, r3
   13b9e:	2200      	movs	r2, #0
   13ba0:	701a      	strb	r2, [r3, #0]
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
   13ba2:	4b6d      	ldr	r3, [pc, #436]	; (13d58 <vCommandConsoleTask+0x284>)
   13ba4:	2232      	movs	r2, #50	; 0x32
   13ba6:	2100      	movs	r1, #0
   13ba8:	0018      	movs	r0, r3
   13baa:	4b70      	ldr	r3, [pc, #448]	; (13d6c <vCommandConsoleTask+0x298>)
   13bac:	4798      	blx	r3
   13bae:	e0b5      	b.n	13d1c <vCommandConsoleTask+0x248>
        {
		            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */
		
			if (true == isEscapeCode) {
   13bb0:	4b67      	ldr	r3, [pc, #412]	; (13d50 <vCommandConsoleTask+0x27c>)
   13bb2:	781b      	ldrb	r3, [r3, #0]
   13bb4:	2b00      	cmp	r3, #0
   13bb6:	d059      	beq.n	13c6c <vCommandConsoleTask+0x198>

				if(pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   13bb8:	4b66      	ldr	r3, [pc, #408]	; (13d54 <vCommandConsoleTask+0x280>)
   13bba:	781b      	ldrb	r3, [r3, #0]
   13bbc:	2b03      	cmp	r3, #3
   13bbe:	d80c      	bhi.n	13bda <vCommandConsoleTask+0x106>
					pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   13bc0:	4b64      	ldr	r3, [pc, #400]	; (13d54 <vCommandConsoleTask+0x280>)
   13bc2:	781b      	ldrb	r3, [r3, #0]
   13bc4:	1c5a      	adds	r2, r3, #1
   13bc6:	b2d1      	uxtb	r1, r2
   13bc8:	4a62      	ldr	r2, [pc, #392]	; (13d54 <vCommandConsoleTask+0x280>)
   13bca:	7011      	strb	r1, [r2, #0]
   13bcc:	001a      	movs	r2, r3
   13bce:	2310      	movs	r3, #16
   13bd0:	18fb      	adds	r3, r7, r3
   13bd2:	7819      	ldrb	r1, [r3, #0]
   13bd4:	4b66      	ldr	r3, [pc, #408]	; (13d70 <vCommandConsoleTask+0x29c>)
   13bd6:	5499      	strb	r1, [r3, r2]
   13bd8:	e005      	b.n	13be6 <vCommandConsoleTask+0x112>
				}
				else {
					isEscapeCode = false; pcEscapeCodePos = 0;
   13bda:	4b5d      	ldr	r3, [pc, #372]	; (13d50 <vCommandConsoleTask+0x27c>)
   13bdc:	2200      	movs	r2, #0
   13bde:	701a      	strb	r2, [r3, #0]
   13be0:	4b5c      	ldr	r3, [pc, #368]	; (13d54 <vCommandConsoleTask+0x280>)
   13be2:	2200      	movs	r2, #0
   13be4:	701a      	strb	r2, [r3, #0]
				}
			
				if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   13be6:	4b5b      	ldr	r3, [pc, #364]	; (13d54 <vCommandConsoleTask+0x280>)
   13be8:	781b      	ldrb	r3, [r3, #0]
   13bea:	2b01      	cmp	r3, #1
   13bec:	d996      	bls.n	13b1c <vCommandConsoleTask+0x48>
				
					// UP ARROW SHOW LAST COMMAND
					if(strcasecmp(pcEscapeCodes, "oa"))	{
   13bee:	4a61      	ldr	r2, [pc, #388]	; (13d74 <vCommandConsoleTask+0x2a0>)
   13bf0:	4b5f      	ldr	r3, [pc, #380]	; (13d70 <vCommandConsoleTask+0x29c>)
   13bf2:	0011      	movs	r1, r2
   13bf4:	0018      	movs	r0, r3
   13bf6:	4b60      	ldr	r3, [pc, #384]	; (13d78 <vCommandConsoleTask+0x2a4>)
   13bf8:	4798      	blx	r3
   13bfa:	1e03      	subs	r3, r0, #0
   13bfc:	d02f      	beq.n	13c5e <vCommandConsoleTask+0x18a>
                            /// Delete current line and add prompt (">")
                            sprintf(pcInputString, "%c[2K\r>", 27);
   13bfe:	495f      	ldr	r1, [pc, #380]	; (13d7c <vCommandConsoleTask+0x2a8>)
   13c00:	4b55      	ldr	r3, [pc, #340]	; (13d58 <vCommandConsoleTask+0x284>)
   13c02:	221b      	movs	r2, #27
   13c04:	0018      	movs	r0, r3
   13c06:	4b5e      	ldr	r3, [pc, #376]	; (13d80 <vCommandConsoleTask+0x2ac>)
   13c08:	4798      	blx	r3
				            SerialConsoleWriteString(pcInputString);
   13c0a:	4b53      	ldr	r3, [pc, #332]	; (13d58 <vCommandConsoleTask+0x284>)
   13c0c:	0018      	movs	r0, r3
   13c0e:	4b4c      	ldr	r3, [pc, #304]	; (13d40 <vCommandConsoleTask+0x26c>)
   13c10:	4798      	blx	r3
                            /// Clear input buffer
                            cInputIndex = 0;
   13c12:	231f      	movs	r3, #31
   13c14:	18fb      	adds	r3, r7, r3
   13c16:	2200      	movs	r2, #0
   13c18:	701a      	strb	r2, [r3, #0]
                            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
   13c1a:	4b4f      	ldr	r3, [pc, #316]	; (13d58 <vCommandConsoleTask+0x284>)
   13c1c:	2232      	movs	r2, #50	; 0x32
   13c1e:	2100      	movs	r1, #0
   13c20:	0018      	movs	r0, r3
   13c22:	4b52      	ldr	r3, [pc, #328]	; (13d6c <vCommandConsoleTask+0x298>)
   13c24:	4798      	blx	r3
                        /// Send last command
						strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1); 	
   13c26:	494d      	ldr	r1, [pc, #308]	; (13d5c <vCommandConsoleTask+0x288>)
   13c28:	4b4b      	ldr	r3, [pc, #300]	; (13d58 <vCommandConsoleTask+0x284>)
   13c2a:	2231      	movs	r2, #49	; 0x31
   13c2c:	0018      	movs	r0, r3
   13c2e:	4b4c      	ldr	r3, [pc, #304]	; (13d60 <vCommandConsoleTask+0x28c>)
   13c30:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   13c32:	4b49      	ldr	r3, [pc, #292]	; (13d58 <vCommandConsoleTask+0x284>)
   13c34:	0018      	movs	r0, r3
   13c36:	4b53      	ldr	r3, [pc, #332]	; (13d84 <vCommandConsoleTask+0x2b0>)
   13c38:	4798      	blx	r3
   13c3a:	0003      	movs	r3, r0
   13c3c:	2b30      	cmp	r3, #48	; 0x30
   13c3e:	d806      	bhi.n	13c4e <vCommandConsoleTask+0x17a>
   13c40:	4b46      	ldr	r3, [pc, #280]	; (13d5c <vCommandConsoleTask+0x288>)
   13c42:	0018      	movs	r0, r3
   13c44:	4b4f      	ldr	r3, [pc, #316]	; (13d84 <vCommandConsoleTask+0x2b0>)
   13c46:	4798      	blx	r3
   13c48:	0003      	movs	r3, r0
   13c4a:	b2da      	uxtb	r2, r3
   13c4c:	e000      	b.n	13c50 <vCommandConsoleTask+0x17c>
   13c4e:	2231      	movs	r2, #49	; 0x31
   13c50:	231f      	movs	r3, #31
   13c52:	18fb      	adds	r3, r7, r3
   13c54:	701a      	strb	r2, [r3, #0]
						SerialConsoleWriteString(pcInputString);
   13c56:	4b40      	ldr	r3, [pc, #256]	; (13d58 <vCommandConsoleTask+0x284>)
   13c58:	0018      	movs	r0, r3
   13c5a:	4b39      	ldr	r3, [pc, #228]	; (13d40 <vCommandConsoleTask+0x26c>)
   13c5c:	4798      	blx	r3
					}
				
					isEscapeCode = false; pcEscapeCodePos = 0;
   13c5e:	4b3c      	ldr	r3, [pc, #240]	; (13d50 <vCommandConsoleTask+0x27c>)
   13c60:	2200      	movs	r2, #0
   13c62:	701a      	strb	r2, [r3, #0]
   13c64:	4b3b      	ldr	r3, [pc, #236]	; (13d54 <vCommandConsoleTask+0x280>)
   13c66:	2200      	movs	r2, #0
   13c68:	701a      	strb	r2, [r3, #0]
   13c6a:	e757      	b.n	13b1c <vCommandConsoleTask+0x48>
			}
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if( cRxedChar[0] == '\r' )
   13c6c:	2310      	movs	r3, #16
   13c6e:	18fb      	adds	r3, r7, r3
   13c70:	781b      	ldrb	r3, [r3, #0]
   13c72:	2b0d      	cmp	r3, #13
   13c74:	d100      	bne.n	13c78 <vCommandConsoleTask+0x1a4>
   13c76:	e751      	b.n	13b1c <vCommandConsoleTask+0x48>
            {
                /* Ignore carriage returns. */
            }
            else if( cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE )
   13c78:	2310      	movs	r3, #16
   13c7a:	18fb      	adds	r3, r7, r3
   13c7c:	781b      	ldrb	r3, [r3, #0]
   13c7e:	2b08      	cmp	r3, #8
   13c80:	d004      	beq.n	13c8c <vCommandConsoleTask+0x1b8>
   13c82:	2310      	movs	r3, #16
   13c84:	18fb      	adds	r3, r7, r3
   13c86:	781b      	ldrb	r3, [r3, #0]
   13c88:	2b7f      	cmp	r3, #127	; 0x7f
   13c8a:	d11c      	bne.n	13cc6 <vCommandConsoleTask+0x1f2>
            {
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13c8c:	230c      	movs	r3, #12
   13c8e:	18fb      	adds	r3, r7, r3
   13c90:	4a3d      	ldr	r2, [pc, #244]	; (13d88 <vCommandConsoleTask+0x2b4>)
   13c92:	6812      	ldr	r2, [r2, #0]
   13c94:	601a      	str	r2, [r3, #0]
				SerialConsoleWriteString(erase);
   13c96:	230c      	movs	r3, #12
   13c98:	18fb      	adds	r3, r7, r3
   13c9a:	0018      	movs	r0, r3
   13c9c:	4b28      	ldr	r3, [pc, #160]	; (13d40 <vCommandConsoleTask+0x26c>)
   13c9e:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if( cInputIndex > 0 )
   13ca0:	231f      	movs	r3, #31
   13ca2:	18fb      	adds	r3, r7, r3
   13ca4:	781b      	ldrb	r3, [r3, #0]
   13ca6:	2b00      	cmp	r3, #0
   13ca8:	d037      	beq.n	13d1a <vCommandConsoleTask+0x246>
                {
                    cInputIndex--;
   13caa:	231f      	movs	r3, #31
   13cac:	18fb      	adds	r3, r7, r3
   13cae:	781a      	ldrb	r2, [r3, #0]
   13cb0:	231f      	movs	r3, #31
   13cb2:	18fb      	adds	r3, r7, r3
   13cb4:	3a01      	subs	r2, #1
   13cb6:	701a      	strb	r2, [r3, #0]
                    pcInputString[ cInputIndex ] = 0;
   13cb8:	231f      	movs	r3, #31
   13cba:	18fb      	adds	r3, r7, r3
   13cbc:	781b      	ldrb	r3, [r3, #0]
   13cbe:	4a26      	ldr	r2, [pc, #152]	; (13d58 <vCommandConsoleTask+0x284>)
   13cc0:	2100      	movs	r1, #0
   13cc2:	54d1      	strb	r1, [r2, r3]
            {
   13cc4:	e029      	b.n	13d1a <vCommandConsoleTask+0x246>
                }
            }
			// ESC
			else if( cRxedChar[0] == ASCII_ESC) {
   13cc6:	2310      	movs	r3, #16
   13cc8:	18fb      	adds	r3, r7, r3
   13cca:	781b      	ldrb	r3, [r3, #0]
   13ccc:	2b1b      	cmp	r3, #27
   13cce:	d106      	bne.n	13cde <vCommandConsoleTask+0x20a>
				isEscapeCode = true; //Next characters will be code arguments
   13cd0:	4b1f      	ldr	r3, [pc, #124]	; (13d50 <vCommandConsoleTask+0x27c>)
   13cd2:	2201      	movs	r2, #1
   13cd4:	701a      	strb	r2, [r3, #0]
				pcEscapeCodePos = 0;
   13cd6:	4b1f      	ldr	r3, [pc, #124]	; (13d54 <vCommandConsoleTask+0x280>)
   13cd8:	2200      	movs	r2, #0
   13cda:	701a      	strb	r2, [r3, #0]
   13cdc:	e71e      	b.n	13b1c <vCommandConsoleTask+0x48>
            {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
   13cde:	231f      	movs	r3, #31
   13ce0:	18fb      	adds	r3, r7, r3
   13ce2:	781b      	ldrb	r3, [r3, #0]
   13ce4:	2b31      	cmp	r3, #49	; 0x31
   13ce6:	d80e      	bhi.n	13d06 <vCommandConsoleTask+0x232>
                {
                    pcInputString[ cInputIndex ] = cRxedChar[0];
   13ce8:	231f      	movs	r3, #31
   13cea:	18fb      	adds	r3, r7, r3
   13cec:	781b      	ldrb	r3, [r3, #0]
   13cee:	2210      	movs	r2, #16
   13cf0:	18ba      	adds	r2, r7, r2
   13cf2:	7811      	ldrb	r1, [r2, #0]
   13cf4:	4a18      	ldr	r2, [pc, #96]	; (13d58 <vCommandConsoleTask+0x284>)
   13cf6:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   13cf8:	231f      	movs	r3, #31
   13cfa:	18fb      	adds	r3, r7, r3
   13cfc:	781a      	ldrb	r2, [r3, #0]
   13cfe:	231f      	movs	r3, #31
   13d00:	18fb      	adds	r3, r7, r3
   13d02:	3201      	adds	r2, #1
   13d04:	701a      	strb	r2, [r3, #0]
                }

					//Order Echo
					cRxedChar[1] = 0;
   13d06:	2310      	movs	r3, #16
   13d08:	18fb      	adds	r3, r7, r3
   13d0a:	2200      	movs	r2, #0
   13d0c:	705a      	strb	r2, [r3, #1]
					SerialConsoleWriteString(&cRxedChar[0]);
   13d0e:	2310      	movs	r3, #16
   13d10:	18fb      	adds	r3, r7, r3
   13d12:	0018      	movs	r0, r3
   13d14:	4b0a      	ldr	r3, [pc, #40]	; (13d40 <vCommandConsoleTask+0x26c>)
   13d16:	4798      	blx	r3
   13d18:	e700      	b.n	13b1c <vCommandConsoleTask+0x48>
            {
   13d1a:	46c0      	nop			; (mov r8, r8)
    {
   13d1c:	e6fe      	b.n	13b1c <vCommandConsoleTask+0x48>
   13d1e:	46c0      	nop			; (mov r8, r8)
   13d20:	00034ff0 	.word	0x00034ff0
   13d24:	0001721d 	.word	0x0001721d
   13d28:	00035040 	.word	0x00035040
   13d2c:	00035000 	.word	0x00035000
   13d30:	00035010 	.word	0x00035010
   13d34:	00035020 	.word	0x00035020
   13d38:	00035030 	.word	0x00035030
   13d3c:	00034ddc 	.word	0x00034ddc
   13d40:	0001d149 	.word	0x0001d149
   13d44:	0001d1e5 	.word	0x0001d1e5
   13d48:	0001b4f5 	.word	0x0001b4f5
   13d4c:	00034f6c 	.word	0x00034f6c
   13d50:	20000454 	.word	0x20000454
   13d54:	20000455 	.word	0x20000455
   13d58:	2000048c 	.word	0x2000048c
   13d5c:	20000458 	.word	0x20000458
   13d60:	00033de7 	.word	0x00033de7
   13d64:	200004c0 	.word	0x200004c0
   13d68:	0001728d 	.word	0x0001728d
   13d6c:	000339ff 	.word	0x000339ff
   13d70:	20000544 	.word	0x20000544
   13d74:	00034f70 	.word	0x00034f70
   13d78:	00033d01 	.word	0x00033d01
   13d7c:	00034f74 	.word	0x00034f74
   13d80:	00033cbd 	.word	0x00033cbd
   13d84:	00033db7 	.word	0x00033db7
   13d88:	00034f7c 	.word	0x00034f7c

00013d8c <xCliClearTerminalScreen>:
//THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
//SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
//CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen( char *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   13d8c:	b590      	push	{r4, r7, lr}
   13d8e:	b087      	sub	sp, #28
   13d90:	af00      	add	r7, sp, #0
   13d92:	60f8      	str	r0, [r7, #12]
   13d94:	60b9      	str	r1, [r7, #8]
   13d96:	607a      	str	r2, [r7, #4]
	char clearScreen = ASCII_ESC;
   13d98:	2317      	movs	r3, #23
   13d9a:	18fb      	adds	r3, r7, r3
   13d9c:	221b      	movs	r2, #27
   13d9e:	701a      	strb	r2, [r3, #0]
	snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   13da0:	2317      	movs	r3, #23
   13da2:	18fb      	adds	r3, r7, r3
   13da4:	781b      	ldrb	r3, [r3, #0]
   13da6:	4a08      	ldr	r2, [pc, #32]	; (13dc8 <xCliClearTerminalScreen+0x3c>)
   13da8:	4808      	ldr	r0, [pc, #32]	; (13dcc <xCliClearTerminalScreen+0x40>)
   13daa:	210f      	movs	r1, #15
   13dac:	4c08      	ldr	r4, [pc, #32]	; (13dd0 <xCliClearTerminalScreen+0x44>)
   13dae:	47a0      	blx	r4
	snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   13db0:	4a06      	ldr	r2, [pc, #24]	; (13dcc <xCliClearTerminalScreen+0x40>)
   13db2:	68b9      	ldr	r1, [r7, #8]
   13db4:	68fb      	ldr	r3, [r7, #12]
   13db6:	0018      	movs	r0, r3
   13db8:	4b05      	ldr	r3, [pc, #20]	; (13dd0 <xCliClearTerminalScreen+0x44>)
   13dba:	4798      	blx	r3
	return pdFALSE;
   13dbc:	2300      	movs	r3, #0
}
   13dbe:	0018      	movs	r0, r3
   13dc0:	46bd      	mov	sp, r7
   13dc2:	b007      	add	sp, #28
   13dc4:	bd90      	pop	{r4, r7, pc}
   13dc6:	46c0      	nop			; (mov r8, r8)
   13dc8:	00034f80 	.word	0x00034f80
   13dcc:	20000444 	.word	0x20000444
   13dd0:	00033c59 	.word	0x00033c59

00013dd4 <CLI_OTAU>:



//Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   13dd4:	b580      	push	{r7, lr}
   13dd6:	b084      	sub	sp, #16
   13dd8:	af00      	add	r7, sp, #0
   13dda:	60f8      	str	r0, [r7, #12]
   13ddc:	60b9      	str	r1, [r7, #8]
   13dde:	607a      	str	r2, [r7, #4]
	WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13de0:	2002      	movs	r0, #2
   13de2:	4b03      	ldr	r3, [pc, #12]	; (13df0 <CLI_OTAU+0x1c>)
   13de4:	4798      	blx	r3
//	WifiHandlerSetState(WIFI_DOWNLOAD_HANDLE);
return pdFALSE;
   13de6:	2300      	movs	r3, #0
}
   13de8:	0018      	movs	r0, r3
   13dea:	46bd      	mov	sp, r7
   13dec:	b004      	add	sp, #16
   13dee:	bd80      	pop	{r7, pc}
   13df0:	00015b41 	.word	0x00015b41

00013df4 <CLI_ResetDevice>:

//Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   13df4:	b580      	push	{r7, lr}
   13df6:	b084      	sub	sp, #16
   13df8:	af00      	add	r7, sp, #0
   13dfa:	60f8      	str	r0, [r7, #12]
   13dfc:	60b9      	str	r1, [r7, #8]
   13dfe:	607a      	str	r2, [r7, #4]
	system_reset();
   13e00:	4b03      	ldr	r3, [pc, #12]	; (13e10 <CLI_ResetDevice+0x1c>)
   13e02:	4798      	blx	r3
	return pdFALSE;
   13e04:	2300      	movs	r3, #0
}
   13e06:	0018      	movs	r0, r3
   13e08:	46bd      	mov	sp, r7
   13e0a:	b004      	add	sp, #16
   13e0c:	bd80      	pop	{r7, pc}
   13e0e:	46c0      	nop			; (mov r8, r8)
   13e10:	00013ac1 	.word	0x00013ac1

00013e14 <CLI_NeotrellisSetLed>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_NeotrellisSetLed( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   13e14:	b580      	push	{r7, lr}
   13e16:	b084      	sub	sp, #16
   13e18:	af00      	add	r7, sp, #0
   13e1a:	60f8      	str	r0, [r7, #12]
   13e1c:	60b9      	str	r1, [r7, #8]
   13e1e:	607a      	str	r2, [r7, #4]
	snprintf(pcWriteBuffer,xWriteBufferLen, "Students to fill out!");
   13e20:	4a05      	ldr	r2, [pc, #20]	; (13e38 <CLI_NeotrellisSetLed+0x24>)
   13e22:	68b9      	ldr	r1, [r7, #8]
   13e24:	68fb      	ldr	r3, [r7, #12]
   13e26:	0018      	movs	r0, r3
   13e28:	4b04      	ldr	r3, [pc, #16]	; (13e3c <CLI_NeotrellisSetLed+0x28>)
   13e2a:	4798      	blx	r3
	//Check code SeesawSetLed and SeesawSetLed
	//How do you get parameters? Checl link in comments!
	//Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
	//return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
	//This function expects 4 arguments inside pcCommandString: key, R, G, B.
	return pdFALSE;
   13e2c:	2300      	movs	r3, #0
}
   13e2e:	0018      	movs	r0, r3
   13e30:	46bd      	mov	sp, r7
   13e32:	b004      	add	sp, #16
   13e34:	bd80      	pop	{r7, pc}
   13e36:	46c0      	nop			; (mov r8, r8)
   13e38:	00034f88 	.word	0x00034f88
   13e3c:	00033c59 	.word	0x00033c59

00013e40 <CLI_NeotrellProcessButtonBuffer>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_NeotrellProcessButtonBuffer( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   13e40:	b590      	push	{r4, r7, lr}
   13e42:	b099      	sub	sp, #100	; 0x64
   13e44:	af00      	add	r7, sp, #0
   13e46:	60f8      	str	r0, [r7, #12]
   13e48:	60b9      	str	r1, [r7, #8]
   13e4a:	607a      	str	r2, [r7, #4]
	//snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
	//Print to pcWriteBuffer in order.
	//If the string is too long to print, print what you can.
	//The function you write will be useful in the future.
	uint8_t buffer[64];
	uint8_t count = SeesawGetKeypadCount();
   13e4c:	235f      	movs	r3, #95	; 0x5f
   13e4e:	18fc      	adds	r4, r7, r3
   13e50:	4b36      	ldr	r3, [pc, #216]	; (13f2c <CLI_NeotrellProcessButtonBuffer+0xec>)
   13e52:	4798      	blx	r3
   13e54:	0003      	movs	r3, r0
   13e56:	7023      	strb	r3, [r4, #0]
	if(count >= 1)
   13e58:	235f      	movs	r3, #95	; 0x5f
   13e5a:	18fb      	adds	r3, r7, r3
   13e5c:	781b      	ldrb	r3, [r3, #0]
   13e5e:	2b00      	cmp	r3, #0
   13e60:	d05d      	beq.n	13f1e <CLI_NeotrellProcessButtonBuffer+0xde>
	{
	int32_t res = SeesawReadKeypad(buffer,1);
   13e62:	2310      	movs	r3, #16
   13e64:	18fb      	adds	r3, r7, r3
   13e66:	2101      	movs	r1, #1
   13e68:	0018      	movs	r0, r3
   13e6a:	4b31      	ldr	r3, [pc, #196]	; (13f30 <CLI_NeotrellProcessButtonBuffer+0xf0>)
   13e6c:	4798      	blx	r3
   13e6e:	0003      	movs	r3, r0
   13e70:	65bb      	str	r3, [r7, #88]	; 0x58
	if(res==0)
   13e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13e74:	2b00      	cmp	r3, #0
   13e76:	d150      	bne.n	13f1a <CLI_NeotrellProcessButtonBuffer+0xda>
		{
			uint8_t pos,press;
			press = buffer[0] & 0x3;
   13e78:	2310      	movs	r3, #16
   13e7a:	18fb      	adds	r3, r7, r3
   13e7c:	781a      	ldrb	r2, [r3, #0]
   13e7e:	2357      	movs	r3, #87	; 0x57
   13e80:	18fb      	adds	r3, r7, r3
   13e82:	2103      	movs	r1, #3
   13e84:	400a      	ands	r2, r1
   13e86:	701a      	strb	r2, [r3, #0]
			pos =  buffer[0]>>2;
   13e88:	2310      	movs	r3, #16
   13e8a:	18fb      	adds	r3, r7, r3
   13e8c:	781a      	ldrb	r2, [r3, #0]
   13e8e:	2356      	movs	r3, #86	; 0x56
   13e90:	18fb      	adds	r3, r7, r3
   13e92:	0892      	lsrs	r2, r2, #2
   13e94:	701a      	strb	r2, [r3, #0]
			int num = NEO_TRELLIS_SEESAW_KEY(pos);
   13e96:	2356      	movs	r3, #86	; 0x56
   13e98:	18fb      	adds	r3, r7, r3
   13e9a:	781b      	ldrb	r3, [r3, #0]
   13e9c:	08db      	lsrs	r3, r3, #3
   13e9e:	b2db      	uxtb	r3, r3
   13ea0:	009a      	lsls	r2, r3, #2
   13ea2:	2356      	movs	r3, #86	; 0x56
   13ea4:	18fb      	adds	r3, r7, r3
   13ea6:	781b      	ldrb	r3, [r3, #0]
   13ea8:	2107      	movs	r1, #7
   13eaa:	400b      	ands	r3, r1
   13eac:	18d3      	adds	r3, r2, r3
   13eae:	653b      	str	r3, [r7, #80]	; 0x50
			if(press == 0x2){
   13eb0:	2357      	movs	r3, #87	; 0x57
   13eb2:	18fb      	adds	r3, r7, r3
   13eb4:	781b      	ldrb	r3, [r3, #0]
   13eb6:	2b02      	cmp	r3, #2
   13eb8:	d115      	bne.n	13ee6 <CLI_NeotrellProcessButtonBuffer+0xa6>
				snprintf( pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n",NEO_TRELLIS_SEESAW_KEY(num));
   13eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13ebc:	2b00      	cmp	r3, #0
   13ebe:	da00      	bge.n	13ec2 <CLI_NeotrellProcessButtonBuffer+0x82>
   13ec0:	3307      	adds	r3, #7
   13ec2:	10db      	asrs	r3, r3, #3
   13ec4:	009a      	lsls	r2, r3, #2
   13ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13ec8:	491a      	ldr	r1, [pc, #104]	; (13f34 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   13eca:	400b      	ands	r3, r1
   13ecc:	d504      	bpl.n	13ed8 <CLI_NeotrellProcessButtonBuffer+0x98>
   13ece:	3b01      	subs	r3, #1
   13ed0:	2108      	movs	r1, #8
   13ed2:	4249      	negs	r1, r1
   13ed4:	430b      	orrs	r3, r1
   13ed6:	3301      	adds	r3, #1
   13ed8:	18d3      	adds	r3, r2, r3
   13eda:	4a17      	ldr	r2, [pc, #92]	; (13f38 <CLI_NeotrellProcessButtonBuffer+0xf8>)
   13edc:	68b9      	ldr	r1, [r7, #8]
   13ede:	68f8      	ldr	r0, [r7, #12]
   13ee0:	4c16      	ldr	r4, [pc, #88]	; (13f3c <CLI_NeotrellProcessButtonBuffer+0xfc>)
   13ee2:	47a0      	blx	r4
   13ee4:	e019      	b.n	13f1a <CLI_NeotrellProcessButtonBuffer+0xda>
			}
			else if(press == 0x3){
   13ee6:	2357      	movs	r3, #87	; 0x57
   13ee8:	18fb      	adds	r3, r7, r3
   13eea:	781b      	ldrb	r3, [r3, #0]
   13eec:	2b03      	cmp	r3, #3
   13eee:	d114      	bne.n	13f1a <CLI_NeotrellProcessButtonBuffer+0xda>
				snprintf( pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n",NEO_TRELLIS_SEESAW_KEY(num));
   13ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13ef2:	2b00      	cmp	r3, #0
   13ef4:	da00      	bge.n	13ef8 <CLI_NeotrellProcessButtonBuffer+0xb8>
   13ef6:	3307      	adds	r3, #7
   13ef8:	10db      	asrs	r3, r3, #3
   13efa:	009a      	lsls	r2, r3, #2
   13efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13efe:	490d      	ldr	r1, [pc, #52]	; (13f34 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   13f00:	400b      	ands	r3, r1
   13f02:	d504      	bpl.n	13f0e <CLI_NeotrellProcessButtonBuffer+0xce>
   13f04:	3b01      	subs	r3, #1
   13f06:	2108      	movs	r1, #8
   13f08:	4249      	negs	r1, r1
   13f0a:	430b      	orrs	r3, r1
   13f0c:	3301      	adds	r3, #1
   13f0e:	18d3      	adds	r3, r2, r3
   13f10:	4a0b      	ldr	r2, [pc, #44]	; (13f40 <CLI_NeotrellProcessButtonBuffer+0x100>)
   13f12:	68b9      	ldr	r1, [r7, #8]
   13f14:	68f8      	ldr	r0, [r7, #12]
   13f16:	4c09      	ldr	r4, [pc, #36]	; (13f3c <CLI_NeotrellProcessButtonBuffer+0xfc>)
   13f18:	47a0      	blx	r4
			}
		}
		return pdTRUE;
   13f1a:	2301      	movs	r3, #1
   13f1c:	e002      	b.n	13f24 <CLI_NeotrellProcessButtonBuffer+0xe4>
	}
	else
	{
	pcWriteBuffer = 0;
   13f1e:	2300      	movs	r3, #0
   13f20:	60fb      	str	r3, [r7, #12]
		return pdFALSE;
   13f22:	2300      	movs	r3, #0
	}
	

}
   13f24:	0018      	movs	r0, r3
   13f26:	46bd      	mov	sp, r7
   13f28:	b019      	add	sp, #100	; 0x64
   13f2a:	bd90      	pop	{r4, r7, pc}
   13f2c:	000164c1 	.word	0x000164c1
   13f30:	00016529 	.word	0x00016529
   13f34:	80000007 	.word	0x80000007
   13f38:	00034fa0 	.word	0x00034fa0
   13f3c:	00033c59 	.word	0x00033c59
   13f40:	00034fbc 	.word	0x00034fbc

00013f44 <CLI_SendDummyGameData>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_SendDummyGameData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   13f44:	b580      	push	{r7, lr}
   13f46:	b08a      	sub	sp, #40	; 0x28
   13f48:	af00      	add	r7, sp, #0
   13f4a:	60f8      	str	r0, [r7, #12]
   13f4c:	60b9      	str	r1, [r7, #8]
   13f4e:	607a      	str	r2, [r7, #4]
struct GameDataPacket gamevar;

gamevar.game[0] = 0;
   13f50:	2310      	movs	r3, #16
   13f52:	18fb      	adds	r3, r7, r3
   13f54:	2200      	movs	r2, #0
   13f56:	701a      	strb	r2, [r3, #0]
gamevar.game[1] = 1;
   13f58:	2310      	movs	r3, #16
   13f5a:	18fb      	adds	r3, r7, r3
   13f5c:	2201      	movs	r2, #1
   13f5e:	705a      	strb	r2, [r3, #1]
gamevar.game[2] = 2;
   13f60:	2310      	movs	r3, #16
   13f62:	18fb      	adds	r3, r7, r3
   13f64:	2202      	movs	r2, #2
   13f66:	709a      	strb	r2, [r3, #2]
gamevar.game[3] = 3;
   13f68:	2310      	movs	r3, #16
   13f6a:	18fb      	adds	r3, r7, r3
   13f6c:	2203      	movs	r2, #3
   13f6e:	70da      	strb	r2, [r3, #3]
gamevar.game[4] = 4;
   13f70:	2310      	movs	r3, #16
   13f72:	18fb      	adds	r3, r7, r3
   13f74:	2204      	movs	r2, #4
   13f76:	711a      	strb	r2, [r3, #4]
gamevar.game[5] = 5;
   13f78:	2310      	movs	r3, #16
   13f7a:	18fb      	adds	r3, r7, r3
   13f7c:	2205      	movs	r2, #5
   13f7e:	715a      	strb	r2, [r3, #5]
gamevar.game[6] = 6;
   13f80:	2310      	movs	r3, #16
   13f82:	18fb      	adds	r3, r7, r3
   13f84:	2206      	movs	r2, #6
   13f86:	719a      	strb	r2, [r3, #6]
gamevar.game[7] = 7;
   13f88:	2310      	movs	r3, #16
   13f8a:	18fb      	adds	r3, r7, r3
   13f8c:	2207      	movs	r2, #7
   13f8e:	71da      	strb	r2, [r3, #7]
gamevar.game[8] = 8;
   13f90:	2310      	movs	r3, #16
   13f92:	18fb      	adds	r3, r7, r3
   13f94:	2208      	movs	r2, #8
   13f96:	721a      	strb	r2, [r3, #8]
gamevar.game[9] = 9;
   13f98:	2310      	movs	r3, #16
   13f9a:	18fb      	adds	r3, r7, r3
   13f9c:	2209      	movs	r2, #9
   13f9e:	725a      	strb	r2, [r3, #9]
gamevar.game[10] = 0xFF;
   13fa0:	2310      	movs	r3, #16
   13fa2:	18fb      	adds	r3, r7, r3
   13fa4:	22ff      	movs	r2, #255	; 0xff
   13fa6:	729a      	strb	r2, [r3, #10]

	int error = WifiAddGameDataToQueue(&gamevar);
   13fa8:	2310      	movs	r3, #16
   13faa:	18fb      	adds	r3, r7, r3
   13fac:	0018      	movs	r0, r3
   13fae:	4b09      	ldr	r3, [pc, #36]	; (13fd4 <CLI_SendDummyGameData+0x90>)
   13fb0:	4798      	blx	r3
   13fb2:	0003      	movs	r3, r0
   13fb4:	627b      	str	r3, [r7, #36]	; 0x24
	if(error == pdTRUE)
   13fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13fb8:	2b01      	cmp	r3, #1
   13fba:	d105      	bne.n	13fc8 <CLI_SendDummyGameData+0x84>
	{
		snprintf(pcWriteBuffer,xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
   13fbc:	4a06      	ldr	r2, [pc, #24]	; (13fd8 <CLI_SendDummyGameData+0x94>)
   13fbe:	68b9      	ldr	r1, [r7, #8]
   13fc0:	68fb      	ldr	r3, [r7, #12]
   13fc2:	0018      	movs	r0, r3
   13fc4:	4b05      	ldr	r3, [pc, #20]	; (13fdc <CLI_SendDummyGameData+0x98>)
   13fc6:	4798      	blx	r3
	}
	return pdFALSE;
   13fc8:	2300      	movs	r3, #0
}
   13fca:	0018      	movs	r0, r3
   13fcc:	46bd      	mov	sp, r7
   13fce:	b00a      	add	sp, #40	; 0x28
   13fd0:	bd80      	pop	{r7, pc}
   13fd2:	46c0      	nop			; (mov r8, r8)
   13fd4:	00015b75 	.word	0x00015b75
   13fd8:	00034fd4 	.word	0x00034fd4
   13fdc:	00033c59 	.word	0x00033c59

00013fe0 <vControlHandlerTask>:
* @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
* @return		Should not return! This is a task defining function.
* @note         
*****************************************************************************/
void vControlHandlerTask( void *pvParameters )
{
   13fe0:	b580      	push	{r7, lr}
   13fe2:	b088      	sub	sp, #32
   13fe4:	af00      	add	r7, sp, #0
   13fe6:	6078      	str	r0, [r7, #4]
	SerialConsoleWriteString("ESE516 - Control Init Code\r\n");
   13fe8:	4b52      	ldr	r3, [pc, #328]	; (14134 <vControlHandlerTask+0x154>)
   13fea:	0018      	movs	r0, r3
   13fec:	4b52      	ldr	r3, [pc, #328]	; (14138 <vControlHandlerTask+0x158>)
   13fee:	4798      	blx	r3

	//Initialize Queues
	xQueueGameBufferIn = xQueueCreate( 2, sizeof( struct GameDataPacket ) );
   13ff0:	2200      	movs	r2, #0
   13ff2:	2114      	movs	r1, #20
   13ff4:	2002      	movs	r0, #2
   13ff6:	4b51      	ldr	r3, [pc, #324]	; (1413c <vControlHandlerTask+0x15c>)
   13ff8:	4798      	blx	r3
   13ffa:	0002      	movs	r2, r0
   13ffc:	4b50      	ldr	r3, [pc, #320]	; (14140 <vControlHandlerTask+0x160>)
   13ffe:	601a      	str	r2, [r3, #0]
	xQueueRgbColorBuffer = xQueueCreate( 2, sizeof( struct RgbColorPacket ) );
   14000:	2200      	movs	r2, #0
   14002:	2103      	movs	r1, #3
   14004:	2002      	movs	r0, #2
   14006:	4b4d      	ldr	r3, [pc, #308]	; (1413c <vControlHandlerTask+0x15c>)
   14008:	4798      	blx	r3
   1400a:	0002      	movs	r2, r0
   1400c:	4b4d      	ldr	r3, [pc, #308]	; (14144 <vControlHandlerTask+0x164>)
   1400e:	601a      	str	r2, [r3, #0]
	xQueueStatusBuffer  = xQueueCreate( 5, sizeof( uint8_t ) );
   14010:	2200      	movs	r2, #0
   14012:	2101      	movs	r1, #1
   14014:	2005      	movs	r0, #5
   14016:	4b49      	ldr	r3, [pc, #292]	; (1413c <vControlHandlerTask+0x15c>)
   14018:	4798      	blx	r3
   1401a:	0002      	movs	r2, r0
   1401c:	4b4a      	ldr	r3, [pc, #296]	; (14148 <vControlHandlerTask+0x168>)
   1401e:	601a      	str	r2, [r3, #0]

	if(xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL || xQueueStatusBuffer==NULL){
   14020:	4b47      	ldr	r3, [pc, #284]	; (14140 <vControlHandlerTask+0x160>)
   14022:	681b      	ldr	r3, [r3, #0]
   14024:	2b00      	cmp	r3, #0
   14026:	d007      	beq.n	14038 <vControlHandlerTask+0x58>
   14028:	4b46      	ldr	r3, [pc, #280]	; (14144 <vControlHandlerTask+0x164>)
   1402a:	681b      	ldr	r3, [r3, #0]
   1402c:	2b00      	cmp	r3, #0
   1402e:	d003      	beq.n	14038 <vControlHandlerTask+0x58>
   14030:	4b45      	ldr	r3, [pc, #276]	; (14148 <vControlHandlerTask+0x168>)
   14032:	681b      	ldr	r3, [r3, #0]
   14034:	2b00      	cmp	r3, #0
   14036:	d103      	bne.n	14040 <vControlHandlerTask+0x60>
		SerialConsoleWriteString("ERROR Initializing Control Data queues!\r\n");
   14038:	4b44      	ldr	r3, [pc, #272]	; (1414c <vControlHandlerTask+0x16c>)
   1403a:	0018      	movs	r0, r3
   1403c:	4b3e      	ldr	r3, [pc, #248]	; (14138 <vControlHandlerTask+0x158>)
   1403e:	4798      	blx	r3
	}
	controlState = CONTROL_WAIT_FOR_STATUS; //Initial state
   14040:	4b43      	ldr	r3, [pc, #268]	; (14150 <vControlHandlerTask+0x170>)
   14042:	2200      	movs	r2, #0
   14044:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		switch(controlState)
   14046:	4b42      	ldr	r3, [pc, #264]	; (14150 <vControlHandlerTask+0x170>)
   14048:	781b      	ldrb	r3, [r3, #0]
   1404a:	2b01      	cmp	r3, #1
   1404c:	d035      	beq.n	140ba <vControlHandlerTask+0xda>
   1404e:	dc02      	bgt.n	14056 <vControlHandlerTask+0x76>
   14050:	2b00      	cmp	r3, #0
   14052:	d005      	beq.n	14060 <vControlHandlerTask+0x80>
   14054:	e061      	b.n	1411a <vControlHandlerTask+0x13a>
   14056:	2b02      	cmp	r3, #2
   14058:	d049      	beq.n	140ee <vControlHandlerTask+0x10e>
   1405a:	2b03      	cmp	r3, #3
   1405c:	d061      	beq.n	14122 <vControlHandlerTask+0x142>
   1405e:	e05c      	b.n	1411a <vControlHandlerTask+0x13a>
		{
			case (CONTROL_WAIT_FOR_STATUS):
			{	//Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
				uint8_t gamestatus;
				if(pdPASS == xQueueReceive( xQueueStatusBuffer , &gamestatus, 0 ))
   14060:	4b39      	ldr	r3, [pc, #228]	; (14148 <vControlHandlerTask+0x168>)
   14062:	681b      	ldr	r3, [r3, #0]
   14064:	221f      	movs	r2, #31
   14066:	18b9      	adds	r1, r7, r2
   14068:	2200      	movs	r2, #0
   1406a:	0018      	movs	r0, r3
   1406c:	4b39      	ldr	r3, [pc, #228]	; (14154 <vControlHandlerTask+0x174>)
   1406e:	4798      	blx	r3
   14070:	0003      	movs	r3, r0
   14072:	2b01      	cmp	r3, #1
   14074:	d121      	bne.n	140ba <vControlHandlerTask+0xda>
				{
					switch (gamestatus){
   14076:	231f      	movs	r3, #31
   14078:	18fb      	adds	r3, r7, r3
   1407a:	781b      	ldrb	r3, [r3, #0]
   1407c:	2b02      	cmp	r3, #2
   1407e:	d00c      	beq.n	1409a <vControlHandlerTask+0xba>
   14080:	dc02      	bgt.n	14088 <vControlHandlerTask+0xa8>
   14082:	2b01      	cmp	r3, #1
   14084:	d005      	beq.n	14092 <vControlHandlerTask+0xb2>
   14086:	e014      	b.n	140b2 <vControlHandlerTask+0xd2>
   14088:	2b03      	cmp	r3, #3
   1408a:	d00a      	beq.n	140a2 <vControlHandlerTask+0xc2>
   1408c:	2b04      	cmp	r3, #4
   1408e:	d00c      	beq.n	140aa <vControlHandlerTask+0xca>
   14090:	e00f      	b.n	140b2 <vControlHandlerTask+0xd2>
// 							// OLED PRINT P2 TURN
// 							controlState = CONTROL_WAIT_FOR_STATUS;
// 							break;
// 						}
						case P2_turn:{
							controlState = CONTROL_WAIT_FOR_STATUS;
   14092:	4b2f      	ldr	r3, [pc, #188]	; (14150 <vControlHandlerTask+0x170>)
   14094:	2200      	movs	r2, #0
   14096:	701a      	strb	r2, [r3, #0]
							break;							
   14098:	e00f      	b.n	140ba <vControlHandlerTask+0xda>
						}
						case P1_turn:{	// OLED PRINT YOUR TURN
							controlState = CONTROL_WAIT_FOR_GAME;	
   1409a:	4b2d      	ldr	r3, [pc, #180]	; (14150 <vControlHandlerTask+0x170>)
   1409c:	2201      	movs	r2, #1
   1409e:	701a      	strb	r2, [r3, #0]
							break;
   140a0:	e00b      	b.n	140ba <vControlHandlerTask+0xda>
						}
						case P1_Lose:{
						// OLED PRINT YOU LOSE // End game
						controlState = CONTROL_WAIT_FOR_STATUS;
   140a2:	4b2b      	ldr	r3, [pc, #172]	; (14150 <vControlHandlerTask+0x170>)
   140a4:	2200      	movs	r2, #0
   140a6:	701a      	strb	r2, [r3, #0]
						break;
   140a8:	e007      	b.n	140ba <vControlHandlerTask+0xda>
						}
						case P2_Lose:{
						// OLED PRINT YOU WIN // End game
						controlState = CONTROL_WAIT_FOR_STATUS;
   140aa:	4b29      	ldr	r3, [pc, #164]	; (14150 <vControlHandlerTask+0x170>)
   140ac:	2200      	movs	r2, #0
   140ae:	701a      	strb	r2, [r3, #0]
						break;
   140b0:	e003      	b.n	140ba <vControlHandlerTask+0xda>
						}
						default:{
						controlState = CONTROL_WAIT_FOR_STATUS;
   140b2:	4b27      	ldr	r3, [pc, #156]	; (14150 <vControlHandlerTask+0x170>)
   140b4:	2200      	movs	r2, #0
   140b6:	701a      	strb	r2, [r3, #0]
						break;	
   140b8:	46c0      	nop			; (mov r8, r8)

			}
			case (CONTROL_WAIT_FOR_GAME):
			{	//Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
				struct GameDataPacket gamePacketIn;
				if(pdPASS == xQueueReceive( xQueueGameBufferIn , &gamePacketIn, 0 ))
   140ba:	4b21      	ldr	r3, [pc, #132]	; (14140 <vControlHandlerTask+0x160>)
   140bc:	681b      	ldr	r3, [r3, #0]
   140be:	2208      	movs	r2, #8
   140c0:	18b9      	adds	r1, r7, r2
   140c2:	2200      	movs	r2, #0
   140c4:	0018      	movs	r0, r3
   140c6:	4b23      	ldr	r3, [pc, #140]	; (14154 <vControlHandlerTask+0x174>)
   140c8:	4798      	blx	r3
   140ca:	0003      	movs	r3, r0
   140cc:	2b01      	cmp	r3, #1
   140ce:	d12a      	bne.n	14126 <vControlHandlerTask+0x146>
				{
					LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   140d0:	4b21      	ldr	r3, [pc, #132]	; (14158 <vControlHandlerTask+0x178>)
   140d2:	0019      	movs	r1, r3
   140d4:	2001      	movs	r0, #1
   140d6:	4b21      	ldr	r3, [pc, #132]	; (1415c <vControlHandlerTask+0x17c>)
   140d8:	4798      	blx	r3
					UiOrderShowMoves(&gamePacketIn);
   140da:	2308      	movs	r3, #8
   140dc:	18fb      	adds	r3, r7, r3
   140de:	0018      	movs	r0, r3
   140e0:	4b1f      	ldr	r3, [pc, #124]	; (14160 <vControlHandlerTask+0x180>)
   140e2:	4798      	blx	r3
					controlState = CONTROL_PLAYING_MOVE;
   140e4:	4b1a      	ldr	r3, [pc, #104]	; (14150 <vControlHandlerTask+0x170>)
   140e6:	2202      	movs	r2, #2
   140e8:	701a      	strb	r2, [r3, #0]
				}
		
				break;
   140ea:	46c0      	nop			; (mov r8, r8)
   140ec:	e01b      	b.n	14126 <vControlHandlerTask+0x146>
			}

			case (CONTROL_PLAYING_MOVE):
			{	//Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
				//after posting the game to MQTT
				if(UiPlayIsDone() == true)
   140ee:	4b1d      	ldr	r3, [pc, #116]	; (14164 <vControlHandlerTask+0x184>)
   140f0:	4798      	blx	r3
   140f2:	1e03      	subs	r3, r0, #0
   140f4:	d019      	beq.n	1412a <vControlHandlerTask+0x14a>
				{
					//Send back local game packet
					if( pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut()))
   140f6:	4b1c      	ldr	r3, [pc, #112]	; (14168 <vControlHandlerTask+0x188>)
   140f8:	4798      	blx	r3
   140fa:	0003      	movs	r3, r0
   140fc:	0018      	movs	r0, r3
   140fe:	4b1b      	ldr	r3, [pc, #108]	; (1416c <vControlHandlerTask+0x18c>)
   14100:	4798      	blx	r3
   14102:	0003      	movs	r3, r0
   14104:	2b01      	cmp	r3, #1
   14106:	d004      	beq.n	14112 <vControlHandlerTask+0x132>
					{
						LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   14108:	4b19      	ldr	r3, [pc, #100]	; (14170 <vControlHandlerTask+0x190>)
   1410a:	0019      	movs	r1, r3
   1410c:	2001      	movs	r0, #1
   1410e:	4b13      	ldr	r3, [pc, #76]	; (1415c <vControlHandlerTask+0x17c>)
   14110:	4798      	blx	r3
					}
					controlState = CONTROL_WAIT_FOR_GAME;
   14112:	4b0f      	ldr	r3, [pc, #60]	; (14150 <vControlHandlerTask+0x170>)
   14114:	2201      	movs	r2, #1
   14116:	701a      	strb	r2, [r3, #0]
				}

				break;
   14118:	e007      	b.n	1412a <vControlHandlerTask+0x14a>
				break;
			}


			default:
				controlState = CONTROL_WAIT_FOR_STATUS;
   1411a:	4b0d      	ldr	r3, [pc, #52]	; (14150 <vControlHandlerTask+0x170>)
   1411c:	2200      	movs	r2, #0
   1411e:	701a      	strb	r2, [r3, #0]
			break;
   14120:	e004      	b.n	1412c <vControlHandlerTask+0x14c>
				break;
   14122:	46c0      	nop			; (mov r8, r8)
   14124:	e002      	b.n	1412c <vControlHandlerTask+0x14c>
				break;
   14126:	46c0      	nop			; (mov r8, r8)
   14128:	e000      	b.n	1412c <vControlHandlerTask+0x14c>
				break;
   1412a:	46c0      	nop			; (mov r8, r8)

		}
	vTaskDelay(40);
   1412c:	2028      	movs	r0, #40	; 0x28
   1412e:	4b11      	ldr	r3, [pc, #68]	; (14174 <vControlHandlerTask+0x194>)
   14130:	4798      	blx	r3
		switch(controlState)
   14132:	e788      	b.n	14046 <vControlHandlerTask+0x66>
   14134:	00035050 	.word	0x00035050
   14138:	0001d149 	.word	0x0001d149
   1413c:	000197e9 	.word	0x000197e9
   14140:	20000548 	.word	0x20000548
   14144:	2000054c 	.word	0x2000054c
   14148:	20000550 	.word	0x20000550
   1414c:	00035070 	.word	0x00035070
   14150:	20004331 	.word	0x20004331
   14154:	0001a349 	.word	0x0001a349
   14158:	0003509c 	.word	0x0003509c
   1415c:	0001d235 	.word	0x0001d235
   14160:	00014489 	.word	0x00014489
   14164:	000144c5 	.word	0x000144c5
   14168:	000144d9 	.word	0x000144d9
   1416c:	00015b75 	.word	0x00015b75
   14170:	000350c4 	.word	0x000350c4
   14174:	0001b4f5 	.word	0x0001b4f5

00014178 <ControlAddGameData>:
* @return		Returns pdTrue if data can be added to queue, 0 if queue is full
* @note         

*****************************************************************************/
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   14178:	b590      	push	{r4, r7, lr}
   1417a:	b085      	sub	sp, #20
   1417c:	af00      	add	r7, sp, #0
   1417e:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueGameBufferIn , gameIn, ( TickType_t ) 10);
   14180:	4b06      	ldr	r3, [pc, #24]	; (1419c <ControlAddGameData+0x24>)
   14182:	6818      	ldr	r0, [r3, #0]
   14184:	6879      	ldr	r1, [r7, #4]
   14186:	2300      	movs	r3, #0
   14188:	220a      	movs	r2, #10
   1418a:	4c05      	ldr	r4, [pc, #20]	; (141a0 <ControlAddGameData+0x28>)
   1418c:	47a0      	blx	r4
   1418e:	0003      	movs	r3, r0
   14190:	60fb      	str	r3, [r7, #12]
	return error;
   14192:	68fb      	ldr	r3, [r7, #12]
}
   14194:	0018      	movs	r0, r3
   14196:	46bd      	mov	sp, r7
   14198:	b005      	add	sp, #20
   1419a:	bd90      	pop	{r4, r7, pc}
   1419c:	20000548 	.word	0x20000548
   141a0:	00019a91 	.word	0x00019a91

000141a4 <ControlAddStatusDataToQueue>:
* @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
* @note

*****************************************************************************/
int ControlAddStatusDataToQueue(uint8_t *statusdada)
{
   141a4:	b590      	push	{r4, r7, lr}
   141a6:	b085      	sub	sp, #20
   141a8:	af00      	add	r7, sp, #0
   141aa:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueStatusBuffer , statusdada, ( TickType_t ) 10);
   141ac:	4b06      	ldr	r3, [pc, #24]	; (141c8 <ControlAddStatusDataToQueue+0x24>)
   141ae:	6818      	ldr	r0, [r3, #0]
   141b0:	6879      	ldr	r1, [r7, #4]
   141b2:	2300      	movs	r3, #0
   141b4:	220a      	movs	r2, #10
   141b6:	4c05      	ldr	r4, [pc, #20]	; (141cc <ControlAddStatusDataToQueue+0x28>)
   141b8:	47a0      	blx	r4
   141ba:	0003      	movs	r3, r0
   141bc:	60fb      	str	r3, [r7, #12]
	return error;
   141be:	68fb      	ldr	r3, [r7, #12]
   141c0:	0018      	movs	r0, r3
   141c2:	46bd      	mov	sp, r7
   141c4:	b005      	add	sp, #20
   141c6:	bd90      	pop	{r4, r7, pc}
   141c8:	20000550 	.word	0x20000550
   141cc:	00019a91 	.word	0x00019a91

000141d0 <vUiHandlerTask>:
* @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
* @return		Should not return! This is a task defining function.
* @note         
*****************************************************************************/
void vUiHandlerTask( void *pvParameters )
{
   141d0:	b590      	push	{r4, r7, lr}
   141d2:	b08b      	sub	sp, #44	; 0x2c
   141d4:	af02      	add	r7, sp, #8
   141d6:	6078      	str	r0, [r7, #4]
//Do initialization code here
SerialConsoleWriteString("UI Task Started!");
   141d8:	4b96      	ldr	r3, [pc, #600]	; (14434 <vUiHandlerTask+0x264>)
   141da:	0018      	movs	r0, r3
   141dc:	4b96      	ldr	r3, [pc, #600]	; (14438 <vUiHandlerTask+0x268>)
   141de:	4798      	blx	r3
uiState = UI_STATE_IGNORE_PRESSES; //Initial state
   141e0:	4b96      	ldr	r3, [pc, #600]	; (1443c <vUiHandlerTask+0x26c>)
   141e2:	2201      	movs	r2, #1
   141e4:	701a      	strb	r2, [r3, #0]

//Graphics Test - Remove if not using
gfx_mono_init();
   141e6:	4b96      	ldr	r3, [pc, #600]	; (14440 <vUiHandlerTask+0x270>)
   141e8:	4798      	blx	r3
gfx_mono_draw_line(1, 1, 62, 46, GFX_PIXEL_SET);
   141ea:	2301      	movs	r3, #1
   141ec:	9300      	str	r3, [sp, #0]
   141ee:	232e      	movs	r3, #46	; 0x2e
   141f0:	223e      	movs	r2, #62	; 0x3e
   141f2:	2101      	movs	r1, #1
   141f4:	2001      	movs	r0, #1
   141f6:	4c93      	ldr	r4, [pc, #588]	; (14444 <vUiHandlerTask+0x274>)
   141f8:	47a0      	blx	r4
// Draw a filled circle with all quadrant drawn
gfx_mono_draw_filled_circle(36, 20, 20, GFX_PIXEL_SET, GFX_WHOLE);
   141fa:	23ff      	movs	r3, #255	; 0xff
   141fc:	9300      	str	r3, [sp, #0]
   141fe:	2301      	movs	r3, #1
   14200:	2214      	movs	r2, #20
   14202:	2114      	movs	r1, #20
   14204:	2024      	movs	r0, #36	; 0x24
   14206:	4c90      	ldr	r4, [pc, #576]	; (14448 <vUiHandlerTask+0x278>)
   14208:	47a0      	blx	r4


//Here we start the loop for the UI State Machine
while(1)
{
	switch(uiState)
   1420a:	4b8c      	ldr	r3, [pc, #560]	; (1443c <vUiHandlerTask+0x26c>)
   1420c:	781b      	ldrb	r3, [r3, #0]
   1420e:	2b01      	cmp	r3, #1
   14210:	d100      	bne.n	14214 <vUiHandlerTask+0x44>
   14212:	e108      	b.n	14426 <vUiHandlerTask+0x256>
   14214:	2b02      	cmp	r3, #2
   14216:	d002      	beq.n	1421e <vUiHandlerTask+0x4e>
   14218:	2b00      	cmp	r3, #0
   1421a:	d06f      	beq.n	142fc <vUiHandlerTask+0x12c>
   1421c:	e0ff      	b.n	1441e <vUiHandlerTask+0x24e>
		}

		case(UI_STATE_SHOW_MOVES):
		{
			//Set initial state variable that will be used on the UI_STATE_Handle_Buttons and need to be initialized once
			pressedKeys = 0; //Set number of keys pressed by player to 0.
   1421e:	4b8b      	ldr	r3, [pc, #556]	; (1444c <vUiHandlerTask+0x27c>)
   14220:	2200      	movs	r2, #0
   14222:	701a      	strb	r2, [r3, #0]
			//keysToPress = 1; //Set as an example to 1. STUDENTS should change this to the number of key presses needed.
			memset(gamePacketOut.game,0xff, sizeof(gamePacketOut.game)); //Erase gamePacketOut to an initial state
   14224:	4b8a      	ldr	r3, [pc, #552]	; (14450 <vUiHandlerTask+0x280>)
   14226:	2214      	movs	r2, #20
   14228:	21ff      	movs	r1, #255	; 0xff
   1422a:	0018      	movs	r0, r3
   1422c:	4b89      	ldr	r3, [pc, #548]	; (14454 <vUiHandlerTask+0x284>)
   1422e:	4798      	blx	r3
			playIsDone = false; //Set play to false
   14230:	4b89      	ldr	r3, [pc, #548]	; (14458 <vUiHandlerTask+0x288>)
   14232:	2200      	movs	r2, #0
   14234:	701a      	strb	r2, [r3, #0]
			uint8_t presses = SeesawGetKeypadCount();
   14236:	231f      	movs	r3, #31
   14238:	18fc      	adds	r4, r7, r3
   1423a:	4b88      	ldr	r3, [pc, #544]	; (1445c <vUiHandlerTask+0x28c>)
   1423c:	4798      	blx	r3
   1423e:	0003      	movs	r3, r0
   14240:	7023      	strb	r3, [r4, #0]
			if(presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   14242:	231f      	movs	r3, #31
   14244:	18fb      	adds	r3, r7, r3
   14246:	781b      	ldrb	r3, [r3, #0]
   14248:	2b0f      	cmp	r3, #15
   1424a:	d903      	bls.n	14254 <vUiHandlerTask+0x84>
   1424c:	231f      	movs	r3, #31
   1424e:	18fb      	adds	r3, r7, r3
   14250:	2210      	movs	r2, #16
   14252:	701a      	strb	r2, [r3, #0]
			if(presses != 0) SeesawReadKeypad(buttons,presses); //Empty Seesaw buffer just in case it has latent presses on it!
   14254:	231f      	movs	r3, #31
   14256:	18fb      	adds	r3, r7, r3
   14258:	781b      	ldrb	r3, [r3, #0]
   1425a:	2b00      	cmp	r3, #0
   1425c:	d007      	beq.n	1426e <vUiHandlerTask+0x9e>
   1425e:	231f      	movs	r3, #31
   14260:	18fb      	adds	r3, r7, r3
   14262:	781a      	ldrb	r2, [r3, #0]
   14264:	4b7e      	ldr	r3, [pc, #504]	; (14460 <vUiHandlerTask+0x290>)
   14266:	0011      	movs	r1, r2
   14268:	0018      	movs	r0, r3
   1426a:	4b7e      	ldr	r3, [pc, #504]	; (14464 <vUiHandlerTask+0x294>)
   1426c:	4798      	blx	r3
			memset(buttons, 0, BUTTON_PRESSES_MAX);
   1426e:	4b7c      	ldr	r3, [pc, #496]	; (14460 <vUiHandlerTask+0x290>)
   14270:	2210      	movs	r2, #16
   14272:	2100      	movs	r1, #0
   14274:	0018      	movs	r0, r3
   14276:	4b77      	ldr	r3, [pc, #476]	; (14454 <vUiHandlerTask+0x284>)
   14278:	4798      	blx	r3
			//STUDENTS: Make this function show the moves of the gamePacketIn.
			//You can use a static delay to show each move but a quicker delay as the message gets longer might be more fun!
			//After you finish showing the move should go to state UI_STATE_HANDLE_BUTTONS
			
			for (int i =0; i < GAME_SIZE;i++)
   1427a:	2300      	movs	r3, #0
   1427c:	61bb      	str	r3, [r7, #24]
   1427e:	e036      	b.n	142ee <vUiHandlerTask+0x11e>
			{
				//quit if it reaches the end of the move
				if (gamePacketIn.game[i]==0xff)
   14280:	4a79      	ldr	r2, [pc, #484]	; (14468 <vUiHandlerTask+0x298>)
   14282:	69bb      	ldr	r3, [r7, #24]
   14284:	18d3      	adds	r3, r2, r3
   14286:	781b      	ldrb	r3, [r3, #0]
   14288:	2bff      	cmp	r3, #255	; 0xff
   1428a:	d106      	bne.n	1429a <vUiHandlerTask+0xca>
				{
					keysToPress = i+1;
   1428c:	69bb      	ldr	r3, [r7, #24]
   1428e:	b2db      	uxtb	r3, r3
   14290:	3301      	adds	r3, #1
   14292:	b2da      	uxtb	r2, r3
   14294:	4b75      	ldr	r3, [pc, #468]	; (1446c <vUiHandlerTask+0x29c>)
   14296:	701a      	strb	r2, [r3, #0]
					break;
   14298:	e02c      	b.n	142f4 <vUiHandlerTask+0x124>
				}
				uint8_t keyToShow = gamePacketIn.game[i];
   1429a:	230f      	movs	r3, #15
   1429c:	18fb      	adds	r3, r7, r3
   1429e:	4972      	ldr	r1, [pc, #456]	; (14468 <vUiHandlerTask+0x298>)
   142a0:	69ba      	ldr	r2, [r7, #24]
   142a2:	188a      	adds	r2, r1, r2
   142a4:	7812      	ldrb	r2, [r2, #0]
   142a6:	701a      	strb	r2, [r3, #0]
				SeesawSetLed(keyToShow, red, green, blue); //Turn button 1 on
   142a8:	4b71      	ldr	r3, [pc, #452]	; (14470 <vUiHandlerTask+0x2a0>)
   142aa:	781b      	ldrb	r3, [r3, #0]
   142ac:	b2d9      	uxtb	r1, r3
   142ae:	4b71      	ldr	r3, [pc, #452]	; (14474 <vUiHandlerTask+0x2a4>)
   142b0:	781b      	ldrb	r3, [r3, #0]
   142b2:	b2da      	uxtb	r2, r3
   142b4:	4b70      	ldr	r3, [pc, #448]	; (14478 <vUiHandlerTask+0x2a8>)
   142b6:	781b      	ldrb	r3, [r3, #0]
   142b8:	b2dc      	uxtb	r4, r3
   142ba:	230f      	movs	r3, #15
   142bc:	18fb      	adds	r3, r7, r3
   142be:	7818      	ldrb	r0, [r3, #0]
   142c0:	0023      	movs	r3, r4
   142c2:	4c6e      	ldr	r4, [pc, #440]	; (1447c <vUiHandlerTask+0x2ac>)
   142c4:	47a0      	blx	r4
				SeesawOrderLedUpdate();
   142c6:	4b6e      	ldr	r3, [pc, #440]	; (14480 <vUiHandlerTask+0x2b0>)
   142c8:	4798      	blx	r3
				vTaskDelay(1000);			
   142ca:	23fa      	movs	r3, #250	; 0xfa
   142cc:	009b      	lsls	r3, r3, #2
   142ce:	0018      	movs	r0, r3
   142d0:	4b6c      	ldr	r3, [pc, #432]	; (14484 <vUiHandlerTask+0x2b4>)
   142d2:	4798      	blx	r3
				SeesawSetLed(keyToShow, 0, 0, 0); //Turn button 1 on
   142d4:	230f      	movs	r3, #15
   142d6:	18fb      	adds	r3, r7, r3
   142d8:	7818      	ldrb	r0, [r3, #0]
   142da:	2300      	movs	r3, #0
   142dc:	2200      	movs	r2, #0
   142de:	2100      	movs	r1, #0
   142e0:	4c66      	ldr	r4, [pc, #408]	; (1447c <vUiHandlerTask+0x2ac>)
   142e2:	47a0      	blx	r4
				SeesawOrderLedUpdate();
   142e4:	4b66      	ldr	r3, [pc, #408]	; (14480 <vUiHandlerTask+0x2b0>)
   142e6:	4798      	blx	r3
			for (int i =0; i < GAME_SIZE;i++)
   142e8:	69bb      	ldr	r3, [r7, #24]
   142ea:	3301      	adds	r3, #1
   142ec:	61bb      	str	r3, [r7, #24]
   142ee:	69bb      	ldr	r3, [r7, #24]
   142f0:	2b13      	cmp	r3, #19
   142f2:	ddc5      	ble.n	14280 <vUiHandlerTask+0xb0>
// 			SeesawOrderLedUpdate();
// 			vTaskDelay(1000);
// 			SeesawSetLed(15,0,0,0); //Turn button 15 off
// 			SeesawOrderLedUpdate();
// 			vTaskDelay(1000);
			uiState = UI_STATE_HANDLE_BUTTONS;
   142f4:	4b51      	ldr	r3, [pc, #324]	; (1443c <vUiHandlerTask+0x26c>)
   142f6:	2200      	movs	r2, #0
   142f8:	701a      	strb	r2, [r3, #0]

			break;
   142fa:	e097      	b.n	1442c <vUiHandlerTask+0x25c>
		//This state should accept (gamePacketIn length + 1) moves from the player (capped to maximum 19 + new move)
		//The moves by the player should be stored on "gamePacketOut". The keypresses that should count are when the player RELEASES the button.
		
		//In this example, we return after only one button press!
		
		uint8_t numPresses = SeesawGetKeypadCount();
   142fc:	2317      	movs	r3, #23
   142fe:	18fc      	adds	r4, r7, r3
   14300:	4b56      	ldr	r3, [pc, #344]	; (1445c <vUiHandlerTask+0x28c>)
   14302:	4798      	blx	r3
   14304:	0003      	movs	r3, r0
   14306:	7023      	strb	r3, [r4, #0]
		memset(buttons, 0, BUTTON_PRESSES_MAX);
   14308:	4b55      	ldr	r3, [pc, #340]	; (14460 <vUiHandlerTask+0x290>)
   1430a:	2210      	movs	r2, #16
   1430c:	2100      	movs	r1, #0
   1430e:	0018      	movs	r0, r3
   14310:	4b50      	ldr	r3, [pc, #320]	; (14454 <vUiHandlerTask+0x284>)
   14312:	4798      	blx	r3

		if(numPresses >= BUTTON_PRESSES_MAX )
   14314:	2317      	movs	r3, #23
   14316:	18fb      	adds	r3, r7, r3
   14318:	781b      	ldrb	r3, [r3, #0]
   1431a:	2b0f      	cmp	r3, #15
   1431c:	d903      	bls.n	14326 <vUiHandlerTask+0x156>
		{
			numPresses = BUTTON_PRESSES_MAX;
   1431e:	2317      	movs	r3, #23
   14320:	18fb      	adds	r3, r7, r3
   14322:	2210      	movs	r2, #16
   14324:	701a      	strb	r2, [r3, #0]
		}
		if(numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses))
   14326:	2317      	movs	r3, #23
   14328:	18fb      	adds	r3, r7, r3
   1432a:	781b      	ldrb	r3, [r3, #0]
   1432c:	2b00      	cmp	r3, #0
   1432e:	d065      	beq.n	143fc <vUiHandlerTask+0x22c>
   14330:	2317      	movs	r3, #23
   14332:	18fb      	adds	r3, r7, r3
   14334:	781a      	ldrb	r2, [r3, #0]
   14336:	4b4a      	ldr	r3, [pc, #296]	; (14460 <vUiHandlerTask+0x290>)
   14338:	0011      	movs	r1, r2
   1433a:	0018      	movs	r0, r3
   1433c:	4b49      	ldr	r3, [pc, #292]	; (14464 <vUiHandlerTask+0x294>)
   1433e:	4798      	blx	r3
   14340:	1e03      	subs	r3, r0, #0
   14342:	d15b      	bne.n	143fc <vUiHandlerTask+0x22c>
		{
			//Process Buttons
			for (int iter = 0; iter < numPresses; iter++)
   14344:	2300      	movs	r3, #0
   14346:	613b      	str	r3, [r7, #16]
   14348:	e050      	b.n	143ec <vUiHandlerTask+0x21c>
			{
				uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   1434a:	4a45      	ldr	r2, [pc, #276]	; (14460 <vUiHandlerTask+0x290>)
   1434c:	693b      	ldr	r3, [r7, #16]
   1434e:	18d3      	adds	r3, r2, r3
   14350:	781b      	ldrb	r3, [r3, #0]
   14352:	089b      	lsrs	r3, r3, #2
   14354:	b2db      	uxtb	r3, r3
   14356:	2b00      	cmp	r3, #0
   14358:	da00      	bge.n	1435c <vUiHandlerTask+0x18c>
   1435a:	3307      	adds	r3, #7
   1435c:	10db      	asrs	r3, r3, #3
   1435e:	b2db      	uxtb	r3, r3
   14360:	009b      	lsls	r3, r3, #2
   14362:	b2d9      	uxtb	r1, r3
   14364:	4a3e      	ldr	r2, [pc, #248]	; (14460 <vUiHandlerTask+0x290>)
   14366:	693b      	ldr	r3, [r7, #16]
   14368:	18d3      	adds	r3, r2, r3
   1436a:	781b      	ldrb	r3, [r3, #0]
   1436c:	089b      	lsrs	r3, r3, #2
   1436e:	b2db      	uxtb	r3, r3
   14370:	2207      	movs	r2, #7
   14372:	4013      	ands	r3, r2
   14374:	b2da      	uxtb	r2, r3
   14376:	230e      	movs	r3, #14
   14378:	18fb      	adds	r3, r7, r3
   1437a:	188a      	adds	r2, r1, r2
   1437c:	701a      	strb	r2, [r3, #0]
				uint8_t actionButton = buttons[iter] & 0x03;
   1437e:	4a38      	ldr	r2, [pc, #224]	; (14460 <vUiHandlerTask+0x290>)
   14380:	693b      	ldr	r3, [r7, #16]
   14382:	18d3      	adds	r3, r2, r3
   14384:	781a      	ldrb	r2, [r3, #0]
   14386:	230d      	movs	r3, #13
   14388:	18fb      	adds	r3, r7, r3
   1438a:	2103      	movs	r1, #3
   1438c:	400a      	ands	r2, r1
   1438e:	701a      	strb	r2, [r3, #0]
				if(actionButton == 0x03) 
   14390:	230d      	movs	r3, #13
   14392:	18fb      	adds	r3, r7, r3
   14394:	781b      	ldrb	r3, [r3, #0]
   14396:	2b03      	cmp	r3, #3
   14398:	d10f      	bne.n	143ba <vUiHandlerTask+0x1ea>
				{
					SeesawSetLed(keynum, red, green, blue);
   1439a:	4b35      	ldr	r3, [pc, #212]	; (14470 <vUiHandlerTask+0x2a0>)
   1439c:	781b      	ldrb	r3, [r3, #0]
   1439e:	b2d9      	uxtb	r1, r3
   143a0:	4b34      	ldr	r3, [pc, #208]	; (14474 <vUiHandlerTask+0x2a4>)
   143a2:	781b      	ldrb	r3, [r3, #0]
   143a4:	b2da      	uxtb	r2, r3
   143a6:	4b34      	ldr	r3, [pc, #208]	; (14478 <vUiHandlerTask+0x2a8>)
   143a8:	781b      	ldrb	r3, [r3, #0]
   143aa:	b2dc      	uxtb	r4, r3
   143ac:	230e      	movs	r3, #14
   143ae:	18fb      	adds	r3, r7, r3
   143b0:	7818      	ldrb	r0, [r3, #0]
   143b2:	0023      	movs	r3, r4
   143b4:	4c31      	ldr	r4, [pc, #196]	; (1447c <vUiHandlerTask+0x2ac>)
   143b6:	47a0      	blx	r4
   143b8:	e015      	b.n	143e6 <vUiHandlerTask+0x216>
				}
				else
				{
					SeesawSetLed(keynum, 0, 0, 0);
   143ba:	230e      	movs	r3, #14
   143bc:	18fb      	adds	r3, r7, r3
   143be:	7818      	ldrb	r0, [r3, #0]
   143c0:	2300      	movs	r3, #0
   143c2:	2200      	movs	r2, #0
   143c4:	2100      	movs	r1, #0
   143c6:	4c2d      	ldr	r4, [pc, #180]	; (1447c <vUiHandlerTask+0x2ac>)
   143c8:	47a0      	blx	r4
					//Button released! Count this into the buttons pressed by user.
					gamePacketOut.game[pressedKeys] = keynum;
   143ca:	4b20      	ldr	r3, [pc, #128]	; (1444c <vUiHandlerTask+0x27c>)
   143cc:	781b      	ldrb	r3, [r3, #0]
   143ce:	0019      	movs	r1, r3
   143d0:	4b1f      	ldr	r3, [pc, #124]	; (14450 <vUiHandlerTask+0x280>)
   143d2:	220e      	movs	r2, #14
   143d4:	18ba      	adds	r2, r7, r2
   143d6:	7812      	ldrb	r2, [r2, #0]
   143d8:	545a      	strb	r2, [r3, r1]
					pressedKeys++;
   143da:	4b1c      	ldr	r3, [pc, #112]	; (1444c <vUiHandlerTask+0x27c>)
   143dc:	781b      	ldrb	r3, [r3, #0]
   143de:	3301      	adds	r3, #1
   143e0:	b2da      	uxtb	r2, r3
   143e2:	4b1a      	ldr	r3, [pc, #104]	; (1444c <vUiHandlerTask+0x27c>)
   143e4:	701a      	strb	r2, [r3, #0]
			for (int iter = 0; iter < numPresses; iter++)
   143e6:	693b      	ldr	r3, [r7, #16]
   143e8:	3301      	adds	r3, #1
   143ea:	613b      	str	r3, [r7, #16]
   143ec:	2317      	movs	r3, #23
   143ee:	18fb      	adds	r3, r7, r3
   143f0:	781a      	ldrb	r2, [r3, #0]
   143f2:	693b      	ldr	r3, [r7, #16]
   143f4:	429a      	cmp	r2, r3
   143f6:	dca8      	bgt.n	1434a <vUiHandlerTask+0x17a>
				}
			}
			SeesawOrderLedUpdate();
   143f8:	4b21      	ldr	r3, [pc, #132]	; (14480 <vUiHandlerTask+0x2b0>)
   143fa:	4798      	blx	r3
		}

		//Check if we are done!
		if(pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE)
   143fc:	4b13      	ldr	r3, [pc, #76]	; (1444c <vUiHandlerTask+0x27c>)
   143fe:	781a      	ldrb	r2, [r3, #0]
   14400:	4b1a      	ldr	r3, [pc, #104]	; (1446c <vUiHandlerTask+0x29c>)
   14402:	781b      	ldrb	r3, [r3, #0]
   14404:	429a      	cmp	r2, r3
   14406:	d203      	bcs.n	14410 <vUiHandlerTask+0x240>
   14408:	4b10      	ldr	r3, [pc, #64]	; (1444c <vUiHandlerTask+0x27c>)
   1440a:	781b      	ldrb	r3, [r3, #0]
   1440c:	2b13      	cmp	r3, #19
   1440e:	d90c      	bls.n	1442a <vUiHandlerTask+0x25a>
		{
			//Tell control gamePacketOut is ready to be send out AND go back to UI_STATE_IGNORE_PRESSES
			playIsDone = true;
   14410:	4b11      	ldr	r3, [pc, #68]	; (14458 <vUiHandlerTask+0x288>)
   14412:	2201      	movs	r2, #1
   14414:	701a      	strb	r2, [r3, #0]
			uiState = UI_STATE_IGNORE_PRESSES;
   14416:	4b09      	ldr	r3, [pc, #36]	; (1443c <vUiHandlerTask+0x26c>)
   14418:	2201      	movs	r2, #1
   1441a:	701a      	strb	r2, [r3, #0]
		}


		break;
   1441c:	e005      	b.n	1442a <vUiHandlerTask+0x25a>
		}



		default: //In case of unforseen error, it is always good to sent state machine to an initial state.
			uiState = UI_STATE_HANDLE_BUTTONS;
   1441e:	4b07      	ldr	r3, [pc, #28]	; (1443c <vUiHandlerTask+0x26c>)
   14420:	2200      	movs	r2, #0
   14422:	701a      	strb	r2, [r3, #0]
		break;
   14424:	e002      	b.n	1442c <vUiHandlerTask+0x25c>
			break;
   14426:	46c0      	nop			; (mov r8, r8)
   14428:	e000      	b.n	1442c <vUiHandlerTask+0x25c>
		break;
   1442a:	46c0      	nop			; (mov r8, r8)
	}

	//After execution, you can put a thread to sleep for some time.
	vTaskDelay(50);
   1442c:	2032      	movs	r0, #50	; 0x32
   1442e:	4b15      	ldr	r3, [pc, #84]	; (14484 <vUiHandlerTask+0x2b4>)
   14430:	4798      	blx	r3
	switch(uiState)
   14432:	e6ea      	b.n	1420a <vUiHandlerTask+0x3a>
   14434:	000350f4 	.word	0x000350f4
   14438:	0001d149 	.word	0x0001d149
   1443c:	2000436c 	.word	0x2000436c
   14440:	00012a81 	.word	0x00012a81
   14444:	000124c1 	.word	0x000124c1
   14448:	00012749 	.word	0x00012749
   1444c:	20000555 	.word	0x20000555
   14450:	20004334 	.word	0x20004334
   14454:	000339ff 	.word	0x000339ff
   14458:	20000557 	.word	0x20000557
   1445c:	000164c1 	.word	0x000164c1
   14460:	2000435c 	.word	0x2000435c
   14464:	00016529 	.word	0x00016529
   14468:	20004348 	.word	0x20004348
   1446c:	20000556 	.word	0x20000556
   14470:	20000554 	.word	0x20000554
   14474:	20000014 	.word	0x20000014
   14478:	20000015 	.word	0x20000015
   1447c:	00016675 	.word	0x00016675
   14480:	00016749 	.word	0x00016749
   14484:	0001b4f5 	.word	0x0001b4f5

00014488 <UiOrderShowMoves>:


/******************************************************************************
* Functions
******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn){
   14488:	b580      	push	{r7, lr}
   1448a:	b082      	sub	sp, #8
   1448c:	af00      	add	r7, sp, #0
   1448e:	6078      	str	r0, [r7, #4]
	memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   14490:	4a08      	ldr	r2, [pc, #32]	; (144b4 <UiOrderShowMoves+0x2c>)
   14492:	687b      	ldr	r3, [r7, #4]
   14494:	0010      	movs	r0, r2
   14496:	0019      	movs	r1, r3
   14498:	2314      	movs	r3, #20
   1449a:	001a      	movs	r2, r3
   1449c:	4b06      	ldr	r3, [pc, #24]	; (144b8 <UiOrderShowMoves+0x30>)
   1449e:	4798      	blx	r3
	uiState = UI_STATE_SHOW_MOVES;
   144a0:	4b06      	ldr	r3, [pc, #24]	; (144bc <UiOrderShowMoves+0x34>)
   144a2:	2202      	movs	r2, #2
   144a4:	701a      	strb	r2, [r3, #0]
	playIsDone = false; //Set play to false
   144a6:	4b06      	ldr	r3, [pc, #24]	; (144c0 <UiOrderShowMoves+0x38>)
   144a8:	2200      	movs	r2, #0
   144aa:	701a      	strb	r2, [r3, #0]
}
   144ac:	46c0      	nop			; (mov r8, r8)
   144ae:	46bd      	mov	sp, r7
   144b0:	b002      	add	sp, #8
   144b2:	bd80      	pop	{r7, pc}
   144b4:	20004348 	.word	0x20004348
   144b8:	000339c9 	.word	0x000339c9
   144bc:	2000436c 	.word	0x2000436c
   144c0:	20000557 	.word	0x20000557

000144c4 <UiPlayIsDone>:


bool UiPlayIsDone(void)
{
   144c4:	b580      	push	{r7, lr}
   144c6:	af00      	add	r7, sp, #0
	return playIsDone;
   144c8:	4b02      	ldr	r3, [pc, #8]	; (144d4 <UiPlayIsDone+0x10>)
   144ca:	781b      	ldrb	r3, [r3, #0]
}
   144cc:	0018      	movs	r0, r3
   144ce:	46bd      	mov	sp, r7
   144d0:	bd80      	pop	{r7, pc}
   144d2:	46c0      	nop			; (mov r8, r8)
   144d4:	20000557 	.word	0x20000557

000144d8 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   144d8:	b580      	push	{r7, lr}
   144da:	af00      	add	r7, sp, #0
	return &gamePacketOut;
   144dc:	4b01      	ldr	r3, [pc, #4]	; (144e4 <UiGetGamePacketOut+0xc>)
}
   144de:	0018      	movs	r0, r3
   144e0:	46bd      	mov	sp, r7
   144e2:	bd80      	pop	{r7, pc}
   144e4:	20004334 	.word	0x20004334

000144e8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   144e8:	b580      	push	{r7, lr}
   144ea:	b084      	sub	sp, #16
   144ec:	af00      	add	r7, sp, #0
   144ee:	0002      	movs	r2, r0
   144f0:	1dfb      	adds	r3, r7, #7
   144f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   144f4:	230f      	movs	r3, #15
   144f6:	18fb      	adds	r3, r7, r3
   144f8:	1dfa      	adds	r2, r7, #7
   144fa:	7812      	ldrb	r2, [r2, #0]
   144fc:	09d2      	lsrs	r2, r2, #7
   144fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   14500:	230e      	movs	r3, #14
   14502:	18fb      	adds	r3, r7, r3
   14504:	1dfa      	adds	r2, r7, #7
   14506:	7812      	ldrb	r2, [r2, #0]
   14508:	0952      	lsrs	r2, r2, #5
   1450a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1450c:	4b0d      	ldr	r3, [pc, #52]	; (14544 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1450e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   14510:	230f      	movs	r3, #15
   14512:	18fb      	adds	r3, r7, r3
   14514:	781b      	ldrb	r3, [r3, #0]
   14516:	2b00      	cmp	r3, #0
   14518:	d10f      	bne.n	1453a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1451a:	230f      	movs	r3, #15
   1451c:	18fb      	adds	r3, r7, r3
   1451e:	781b      	ldrb	r3, [r3, #0]
   14520:	009b      	lsls	r3, r3, #2
   14522:	2210      	movs	r2, #16
   14524:	4694      	mov	ip, r2
   14526:	44bc      	add	ip, r7
   14528:	4463      	add	r3, ip
   1452a:	3b08      	subs	r3, #8
   1452c:	681a      	ldr	r2, [r3, #0]
   1452e:	230e      	movs	r3, #14
   14530:	18fb      	adds	r3, r7, r3
   14532:	781b      	ldrb	r3, [r3, #0]
   14534:	01db      	lsls	r3, r3, #7
   14536:	18d3      	adds	r3, r2, r3
   14538:	e000      	b.n	1453c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   1453a:	2300      	movs	r3, #0
	}
}
   1453c:	0018      	movs	r0, r3
   1453e:	46bd      	mov	sp, r7
   14540:	b004      	add	sp, #16
   14542:	bd80      	pop	{r7, pc}
   14544:	41004400 	.word	0x41004400

00014548 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   14548:	b580      	push	{r7, lr}
   1454a:	b082      	sub	sp, #8
   1454c:	af00      	add	r7, sp, #0
   1454e:	0002      	movs	r2, r0
   14550:	1dfb      	adds	r3, r7, #7
   14552:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   14554:	1dfb      	adds	r3, r7, #7
   14556:	781b      	ldrb	r3, [r3, #0]
   14558:	0018      	movs	r0, r3
   1455a:	4b03      	ldr	r3, [pc, #12]	; (14568 <port_get_group_from_gpio_pin+0x20>)
   1455c:	4798      	blx	r3
   1455e:	0003      	movs	r3, r0
}
   14560:	0018      	movs	r0, r3
   14562:	46bd      	mov	sp, r7
   14564:	b002      	add	sp, #8
   14566:	bd80      	pop	{r7, pc}
   14568:	000144e9 	.word	0x000144e9

0001456c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   1456c:	b580      	push	{r7, lr}
   1456e:	b084      	sub	sp, #16
   14570:	af00      	add	r7, sp, #0
   14572:	0002      	movs	r2, r0
   14574:	1dfb      	adds	r3, r7, #7
   14576:	701a      	strb	r2, [r3, #0]
   14578:	1dbb      	adds	r3, r7, #6
   1457a:	1c0a      	adds	r2, r1, #0
   1457c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1457e:	1dfb      	adds	r3, r7, #7
   14580:	781b      	ldrb	r3, [r3, #0]
   14582:	0018      	movs	r0, r3
   14584:	4b0d      	ldr	r3, [pc, #52]	; (145bc <port_pin_set_output_level+0x50>)
   14586:	4798      	blx	r3
   14588:	0003      	movs	r3, r0
   1458a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1458c:	1dfb      	adds	r3, r7, #7
   1458e:	781b      	ldrb	r3, [r3, #0]
   14590:	221f      	movs	r2, #31
   14592:	4013      	ands	r3, r2
   14594:	2201      	movs	r2, #1
   14596:	409a      	lsls	r2, r3
   14598:	0013      	movs	r3, r2
   1459a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   1459c:	1dbb      	adds	r3, r7, #6
   1459e:	781b      	ldrb	r3, [r3, #0]
   145a0:	2b00      	cmp	r3, #0
   145a2:	d003      	beq.n	145ac <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   145a4:	68fb      	ldr	r3, [r7, #12]
   145a6:	68ba      	ldr	r2, [r7, #8]
   145a8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   145aa:	e002      	b.n	145b2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   145ac:	68fb      	ldr	r3, [r7, #12]
   145ae:	68ba      	ldr	r2, [r7, #8]
   145b0:	615a      	str	r2, [r3, #20]
}
   145b2:	46c0      	nop			; (mov r8, r8)
   145b4:	46bd      	mov	sp, r7
   145b6:	b004      	add	sp, #16
   145b8:	bd80      	pop	{r7, pc}
   145ba:	46c0      	nop			; (mov r8, r8)
   145bc:	00014549 	.word	0x00014549

000145c0 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   145c0:	b580      	push	{r7, lr}
   145c2:	af00      	add	r7, sp, #0
	down_state = NOT_READY;
   145c4:	4b02      	ldr	r3, [pc, #8]	; (145d0 <init_state+0x10>)
   145c6:	2200      	movs	r2, #0
   145c8:	701a      	strb	r2, [r3, #0]
}
   145ca:	46c0      	nop			; (mov r8, r8)
   145cc:	46bd      	mov	sp, r7
   145ce:	bd80      	pop	{r7, pc}
   145d0:	20000565 	.word	0x20000565

000145d4 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   145d4:	b580      	push	{r7, lr}
   145d6:	b082      	sub	sp, #8
   145d8:	af00      	add	r7, sp, #0
   145da:	0002      	movs	r2, r0
   145dc:	1dfb      	adds	r3, r7, #7
   145de:	701a      	strb	r2, [r3, #0]
	down_state &= ~mask;
   145e0:	1dfb      	adds	r3, r7, #7
   145e2:	781b      	ldrb	r3, [r3, #0]
   145e4:	b25b      	sxtb	r3, r3
   145e6:	43db      	mvns	r3, r3
   145e8:	b25b      	sxtb	r3, r3
   145ea:	4a06      	ldr	r2, [pc, #24]	; (14604 <clear_state+0x30>)
   145ec:	7812      	ldrb	r2, [r2, #0]
   145ee:	b252      	sxtb	r2, r2
   145f0:	4013      	ands	r3, r2
   145f2:	b25b      	sxtb	r3, r3
   145f4:	b2da      	uxtb	r2, r3
   145f6:	4b03      	ldr	r3, [pc, #12]	; (14604 <clear_state+0x30>)
   145f8:	701a      	strb	r2, [r3, #0]
}
   145fa:	46c0      	nop			; (mov r8, r8)
   145fc:	46bd      	mov	sp, r7
   145fe:	b002      	add	sp, #8
   14600:	bd80      	pop	{r7, pc}
   14602:	46c0      	nop			; (mov r8, r8)
   14604:	20000565 	.word	0x20000565

00014608 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   14608:	b580      	push	{r7, lr}
   1460a:	b082      	sub	sp, #8
   1460c:	af00      	add	r7, sp, #0
   1460e:	0002      	movs	r2, r0
   14610:	1dfb      	adds	r3, r7, #7
   14612:	701a      	strb	r2, [r3, #0]
	down_state |= mask;
   14614:	4b05      	ldr	r3, [pc, #20]	; (1462c <add_state+0x24>)
   14616:	781a      	ldrb	r2, [r3, #0]
   14618:	1dfb      	adds	r3, r7, #7
   1461a:	781b      	ldrb	r3, [r3, #0]
   1461c:	4313      	orrs	r3, r2
   1461e:	b2da      	uxtb	r2, r3
   14620:	4b02      	ldr	r3, [pc, #8]	; (1462c <add_state+0x24>)
   14622:	701a      	strb	r2, [r3, #0]
}
   14624:	46c0      	nop			; (mov r8, r8)
   14626:	46bd      	mov	sp, r7
   14628:	b002      	add	sp, #8
   1462a:	bd80      	pop	{r7, pc}
   1462c:	20000565 	.word	0x20000565

00014630 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   14630:	b580      	push	{r7, lr}
   14632:	b082      	sub	sp, #8
   14634:	af00      	add	r7, sp, #0
   14636:	0002      	movs	r2, r0
   14638:	1dfb      	adds	r3, r7, #7
   1463a:	701a      	strb	r2, [r3, #0]
	return ((down_state & mask) != 0);
   1463c:	4b06      	ldr	r3, [pc, #24]	; (14658 <is_state_set+0x28>)
   1463e:	781b      	ldrb	r3, [r3, #0]
   14640:	1dfa      	adds	r2, r7, #7
   14642:	7812      	ldrb	r2, [r2, #0]
   14644:	4013      	ands	r3, r2
   14646:	b2db      	uxtb	r3, r3
   14648:	1e5a      	subs	r2, r3, #1
   1464a:	4193      	sbcs	r3, r2
   1464c:	b2db      	uxtb	r3, r3
}
   1464e:	0018      	movs	r0, r3
   14650:	46bd      	mov	sp, r7
   14652:	b002      	add	sp, #8
   14654:	bd80      	pop	{r7, pc}
   14656:	46c0      	nop			; (mov r8, r8)
   14658:	20000565 	.word	0x20000565

0001465c <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   1465c:	b590      	push	{r4, r7, lr}
   1465e:	b085      	sub	sp, #20
   14660:	af00      	add	r7, sp, #0
   14662:	6078      	str	r0, [r7, #4]
   14664:	6039      	str	r1, [r7, #0]
	if (fp == NULL || file_path_name == NULL) {
   14666:	687b      	ldr	r3, [r7, #4]
   14668:	2b00      	cmp	r3, #0
   1466a:	d002      	beq.n	14672 <is_exist_file+0x16>
   1466c:	683b      	ldr	r3, [r7, #0]
   1466e:	2b00      	cmp	r3, #0
   14670:	d101      	bne.n	14676 <is_exist_file+0x1a>
		return false;
   14672:	2300      	movs	r3, #0
   14674:	e013      	b.n	1469e <is_exist_file+0x42>
	}

	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   14676:	230f      	movs	r3, #15
   14678:	18fc      	adds	r4, r7, r3
   1467a:	6839      	ldr	r1, [r7, #0]
   1467c:	4b0a      	ldr	r3, [pc, #40]	; (146a8 <is_exist_file+0x4c>)
   1467e:	2200      	movs	r2, #0
   14680:	0018      	movs	r0, r3
   14682:	4b0a      	ldr	r3, [pc, #40]	; (146ac <is_exist_file+0x50>)
   14684:	4798      	blx	r3
   14686:	0003      	movs	r3, r0
   14688:	7023      	strb	r3, [r4, #0]
	f_close(&file_object);
   1468a:	4b07      	ldr	r3, [pc, #28]	; (146a8 <is_exist_file+0x4c>)
   1468c:	0018      	movs	r0, r3
   1468e:	4b08      	ldr	r3, [pc, #32]	; (146b0 <is_exist_file+0x54>)
   14690:	4798      	blx	r3
	return (ret == FR_OK);
   14692:	230f      	movs	r3, #15
   14694:	18fb      	adds	r3, r7, r3
   14696:	781b      	ldrb	r3, [r3, #0]
   14698:	425a      	negs	r2, r3
   1469a:	4153      	adcs	r3, r2
   1469c:	b2db      	uxtb	r3, r3
}
   1469e:	0018      	movs	r0, r3
   146a0:	46bd      	mov	sp, r7
   146a2:	b005      	add	sp, #20
   146a4:	bd90      	pop	{r4, r7, pc}
   146a6:	46c0      	nop			; (mov r8, r8)
   146a8:	20000798 	.word	0x20000798
   146ac:	0002ccd9 	.word	0x0002ccd9
   146b0:	0002d6d9 	.word	0x0002d6d9

000146b4 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   146b4:	b580      	push	{r7, lr}
   146b6:	b09e      	sub	sp, #120	; 0x78
   146b8:	af00      	add	r7, sp, #0
   146ba:	60f8      	str	r0, [r7, #12]
   146bc:	60b9      	str	r1, [r7, #8]
   146be:	1dfb      	adds	r3, r7, #7
   146c0:	701a      	strb	r2, [r3, #0]
	#define NUMBRING_MAX (3)
	#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
	uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   146c2:	2376      	movs	r3, #118	; 0x76
   146c4:	18fb      	adds	r3, r7, r3
   146c6:	2201      	movs	r2, #1
   146c8:	801a      	strh	r2, [r3, #0]
   146ca:	2374      	movs	r3, #116	; 0x74
   146cc:	18fb      	adds	r3, r7, r3
   146ce:	2200      	movs	r2, #0
   146d0:	801a      	strh	r2, [r3, #0]
   146d2:	236e      	movs	r3, #110	; 0x6e
   146d4:	18fb      	adds	r3, r7, r3
   146d6:	2200      	movs	r2, #0
   146d8:	801a      	strh	r2, [r3, #0]
   146da:	2372      	movs	r3, #114	; 0x72
   146dc:	18fb      	adds	r3, r7, r3
   146de:	2200      	movs	r2, #0
   146e0:	801a      	strh	r2, [r3, #0]
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   146e2:	2324      	movs	r3, #36	; 0x24
   146e4:	18fb      	adds	r3, r7, r3
   146e6:	0018      	movs	r0, r3
   146e8:	2341      	movs	r3, #65	; 0x41
   146ea:	001a      	movs	r2, r3
   146ec:	2100      	movs	r1, #0
   146ee:	4b92      	ldr	r3, [pc, #584]	; (14938 <rename_to_unique+0x284>)
   146f0:	4798      	blx	r3
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   146f2:	2318      	movs	r3, #24
   146f4:	18fb      	adds	r3, r7, r3
   146f6:	0018      	movs	r0, r3
   146f8:	2309      	movs	r3, #9
   146fa:	001a      	movs	r2, r3
   146fc:	2100      	movs	r1, #0
   146fe:	4b8e      	ldr	r3, [pc, #568]	; (14938 <rename_to_unique+0x284>)
   14700:	4798      	blx	r3
	char numbering[NUMBRING_MAX + 1] = {0};
   14702:	2314      	movs	r3, #20
   14704:	18fb      	adds	r3, r7, r3
   14706:	2200      	movs	r2, #0
   14708:	601a      	str	r2, [r3, #0]
	char *p = NULL;
   1470a:	2300      	movs	r3, #0
   1470c:	66bb      	str	r3, [r7, #104]	; 0x68
	bool valid_ext = false;
   1470e:	2371      	movs	r3, #113	; 0x71
   14710:	18fb      	adds	r3, r7, r3
   14712:	2200      	movs	r2, #0
   14714:	701a      	strb	r2, [r3, #0]

	if (file_path_name == NULL) {
   14716:	68bb      	ldr	r3, [r7, #8]
   14718:	2b00      	cmp	r3, #0
   1471a:	d101      	bne.n	14720 <rename_to_unique+0x6c>
		return false;
   1471c:	2300      	movs	r3, #0
   1471e:	e106      	b.n	1492e <rename_to_unique+0x27a>
	}

	if (!is_exist_file(fp, file_path_name)) {
   14720:	68ba      	ldr	r2, [r7, #8]
   14722:	68fb      	ldr	r3, [r7, #12]
   14724:	0011      	movs	r1, r2
   14726:	0018      	movs	r0, r3
   14728:	4b84      	ldr	r3, [pc, #528]	; (1493c <rename_to_unique+0x288>)
   1472a:	4798      	blx	r3
   1472c:	0003      	movs	r3, r0
   1472e:	001a      	movs	r2, r3
   14730:	2301      	movs	r3, #1
   14732:	4053      	eors	r3, r2
   14734:	b2db      	uxtb	r3, r3
   14736:	2b00      	cmp	r3, #0
   14738:	d001      	beq.n	1473e <rename_to_unique+0x8a>
		return true;
   1473a:	2301      	movs	r3, #1
   1473c:	e0f7      	b.n	1492e <rename_to_unique+0x27a>
	} 
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   1473e:	68bb      	ldr	r3, [r7, #8]
   14740:	0018      	movs	r0, r3
   14742:	4b7f      	ldr	r3, [pc, #508]	; (14940 <rename_to_unique+0x28c>)
   14744:	4798      	blx	r3
   14746:	0003      	movs	r3, r0
   14748:	2b40      	cmp	r3, #64	; 0x40
   1474a:	d901      	bls.n	14750 <rename_to_unique+0x9c>
		return false;
   1474c:	2300      	movs	r3, #0
   1474e:	e0ee      	b.n	1492e <rename_to_unique+0x27a>
	}

	p = strrchr(file_path_name, '.');
   14750:	68bb      	ldr	r3, [r7, #8]
   14752:	212e      	movs	r1, #46	; 0x2e
   14754:	0018      	movs	r0, r3
   14756:	4b7b      	ldr	r3, [pc, #492]	; (14944 <rename_to_unique+0x290>)
   14758:	4798      	blx	r3
   1475a:	0003      	movs	r3, r0
   1475c:	66bb      	str	r3, [r7, #104]	; 0x68
	if (p != NULL) {
   1475e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   14760:	2b00      	cmp	r3, #0
   14762:	d052      	beq.n	1480a <rename_to_unique+0x156>
		ext_len = strlen(p);
   14764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   14766:	0018      	movs	r0, r3
   14768:	4b75      	ldr	r3, [pc, #468]	; (14940 <rename_to_unique+0x28c>)
   1476a:	4798      	blx	r3
   1476c:	0002      	movs	r2, r0
   1476e:	236e      	movs	r3, #110	; 0x6e
   14770:	18fb      	adds	r3, r7, r3
   14772:	801a      	strh	r2, [r3, #0]
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   14774:	236e      	movs	r3, #110	; 0x6e
   14776:	18fb      	adds	r3, r7, r3
   14778:	881b      	ldrh	r3, [r3, #0]
   1477a:	2b07      	cmp	r3, #7
   1477c:	d837      	bhi.n	147ee <rename_to_unique+0x13a>
			valid_ext = true;
   1477e:	2371      	movs	r3, #113	; 0x71
   14780:	18fb      	adds	r3, r7, r3
   14782:	2201      	movs	r2, #1
   14784:	701a      	strb	r2, [r3, #0]
			strcpy(ext, p);
   14786:	6eba      	ldr	r2, [r7, #104]	; 0x68
   14788:	2318      	movs	r3, #24
   1478a:	18fb      	adds	r3, r7, r3
   1478c:	0011      	movs	r1, r2
   1478e:	0018      	movs	r0, r3
   14790:	4b6d      	ldr	r3, [pc, #436]	; (14948 <rename_to_unique+0x294>)
   14792:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   14794:	68bb      	ldr	r3, [r7, #8]
   14796:	0018      	movs	r0, r3
   14798:	4b69      	ldr	r3, [pc, #420]	; (14940 <rename_to_unique+0x28c>)
   1479a:	4798      	blx	r3
   1479c:	0002      	movs	r2, r0
   1479e:	236e      	movs	r3, #110	; 0x6e
   147a0:	18fb      	adds	r3, r7, r3
   147a2:	881b      	ldrh	r3, [r3, #0]
   147a4:	1ad3      	subs	r3, r2, r3
   147a6:	2b3c      	cmp	r3, #60	; 0x3c
   147a8:	d911      	bls.n	147ce <rename_to_unique+0x11a>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   147aa:	2374      	movs	r3, #116	; 0x74
   147ac:	18fb      	adds	r3, r7, r3
   147ae:	226e      	movs	r2, #110	; 0x6e
   147b0:	18ba      	adds	r2, r7, r2
   147b2:	8812      	ldrh	r2, [r2, #0]
   147b4:	213c      	movs	r1, #60	; 0x3c
   147b6:	1a8a      	subs	r2, r1, r2
   147b8:	801a      	strh	r2, [r3, #0]
				strncpy(name, file_path_name, name_len);
   147ba:	2374      	movs	r3, #116	; 0x74
   147bc:	18fb      	adds	r3, r7, r3
   147be:	881a      	ldrh	r2, [r3, #0]
   147c0:	68b9      	ldr	r1, [r7, #8]
   147c2:	2324      	movs	r3, #36	; 0x24
   147c4:	18fb      	adds	r3, r7, r3
   147c6:	0018      	movs	r0, r3
   147c8:	4b60      	ldr	r3, [pc, #384]	; (1494c <rename_to_unique+0x298>)
   147ca:	4798      	blx	r3
   147cc:	e02a      	b.n	14824 <rename_to_unique+0x170>
			} 
			else {
				name_len = (p - file_path_name);
   147ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
   147d0:	68bb      	ldr	r3, [r7, #8]
   147d2:	1ad2      	subs	r2, r2, r3
   147d4:	2374      	movs	r3, #116	; 0x74
   147d6:	18fb      	adds	r3, r7, r3
   147d8:	801a      	strh	r2, [r3, #0]
				strncpy(name, file_path_name, name_len);
   147da:	2374      	movs	r3, #116	; 0x74
   147dc:	18fb      	adds	r3, r7, r3
   147de:	881a      	ldrh	r2, [r3, #0]
   147e0:	68b9      	ldr	r1, [r7, #8]
   147e2:	2324      	movs	r3, #36	; 0x24
   147e4:	18fb      	adds	r3, r7, r3
   147e6:	0018      	movs	r0, r3
   147e8:	4b58      	ldr	r3, [pc, #352]	; (1494c <rename_to_unique+0x298>)
   147ea:	4798      	blx	r3
   147ec:	e01a      	b.n	14824 <rename_to_unique+0x170>
			}
		} 
		else {
			name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   147ee:	2374      	movs	r3, #116	; 0x74
   147f0:	18fb      	adds	r3, r7, r3
   147f2:	223c      	movs	r2, #60	; 0x3c
   147f4:	801a      	strh	r2, [r3, #0]
			strncpy(name, file_path_name, name_len);
   147f6:	2374      	movs	r3, #116	; 0x74
   147f8:	18fb      	adds	r3, r7, r3
   147fa:	881a      	ldrh	r2, [r3, #0]
   147fc:	68b9      	ldr	r1, [r7, #8]
   147fe:	2324      	movs	r3, #36	; 0x24
   14800:	18fb      	adds	r3, r7, r3
   14802:	0018      	movs	r0, r3
   14804:	4b51      	ldr	r3, [pc, #324]	; (1494c <rename_to_unique+0x298>)
   14806:	4798      	blx	r3
   14808:	e00c      	b.n	14824 <rename_to_unique+0x170>
		}
	} 
	else {
		name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1480a:	2374      	movs	r3, #116	; 0x74
   1480c:	18fb      	adds	r3, r7, r3
   1480e:	223c      	movs	r2, #60	; 0x3c
   14810:	801a      	strh	r2, [r3, #0]
		strncpy(name, file_path_name, name_len);
   14812:	2374      	movs	r3, #116	; 0x74
   14814:	18fb      	adds	r3, r7, r3
   14816:	881a      	ldrh	r2, [r3, #0]
   14818:	68b9      	ldr	r1, [r7, #8]
   1481a:	2324      	movs	r3, #36	; 0x24
   1481c:	18fb      	adds	r3, r7, r3
   1481e:	0018      	movs	r0, r3
   14820:	4b4a      	ldr	r3, [pc, #296]	; (1494c <rename_to_unique+0x298>)
   14822:	4798      	blx	r3
	}

	name[name_len++] = '-';
   14824:	2374      	movs	r3, #116	; 0x74
   14826:	18fb      	adds	r3, r7, r3
   14828:	881b      	ldrh	r3, [r3, #0]
   1482a:	2274      	movs	r2, #116	; 0x74
   1482c:	18ba      	adds	r2, r7, r2
   1482e:	1c59      	adds	r1, r3, #1
   14830:	8011      	strh	r1, [r2, #0]
   14832:	001a      	movs	r2, r3
   14834:	2324      	movs	r3, #36	; 0x24
   14836:	18fb      	adds	r3, r7, r3
   14838:	212d      	movs	r1, #45	; 0x2d
   1483a:	5499      	strb	r1, [r3, r2]

	for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   1483c:	2376      	movs	r3, #118	; 0x76
   1483e:	18fb      	adds	r3, r7, r3
   14840:	2200      	movs	r2, #0
   14842:	801a      	strh	r2, [r3, #0]
   14844:	2372      	movs	r3, #114	; 0x72
   14846:	18fb      	adds	r3, r7, r3
   14848:	2201      	movs	r2, #1
   1484a:	801a      	strh	r2, [r3, #0]
   1484c:	e010      	b.n	14870 <rename_to_unique+0x1bc>
		count *= 10;
   1484e:	2372      	movs	r3, #114	; 0x72
   14850:	18fa      	adds	r2, r7, r3
   14852:	2372      	movs	r3, #114	; 0x72
   14854:	18fb      	adds	r3, r7, r3
   14856:	881b      	ldrh	r3, [r3, #0]
   14858:	1c19      	adds	r1, r3, #0
   1485a:	0089      	lsls	r1, r1, #2
   1485c:	18cb      	adds	r3, r1, r3
   1485e:	18db      	adds	r3, r3, r3
   14860:	8013      	strh	r3, [r2, #0]
	for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   14862:	2376      	movs	r3, #118	; 0x76
   14864:	18fb      	adds	r3, r7, r3
   14866:	881a      	ldrh	r2, [r3, #0]
   14868:	2376      	movs	r3, #118	; 0x76
   1486a:	18fb      	adds	r3, r7, r3
   1486c:	3201      	adds	r2, #1
   1486e:	801a      	strh	r2, [r3, #0]
   14870:	2376      	movs	r3, #118	; 0x76
   14872:	18fb      	adds	r3, r7, r3
   14874:	881b      	ldrh	r3, [r3, #0]
   14876:	2b02      	cmp	r3, #2
   14878:	d9e9      	bls.n	1484e <rename_to_unique+0x19a>
	}
	for (i = 1; i < count; i++) {
   1487a:	2376      	movs	r3, #118	; 0x76
   1487c:	18fb      	adds	r3, r7, r3
   1487e:	2201      	movs	r2, #1
   14880:	801a      	strh	r2, [r3, #0]
   14882:	e04b      	b.n	1491c <rename_to_unique+0x268>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   14884:	2376      	movs	r3, #118	; 0x76
   14886:	18fb      	adds	r3, r7, r3
   14888:	881a      	ldrh	r2, [r3, #0]
   1488a:	4931      	ldr	r1, [pc, #196]	; (14950 <rename_to_unique+0x29c>)
   1488c:	2314      	movs	r3, #20
   1488e:	18fb      	adds	r3, r7, r3
   14890:	0018      	movs	r0, r3
   14892:	4b30      	ldr	r3, [pc, #192]	; (14954 <rename_to_unique+0x2a0>)
   14894:	4798      	blx	r3
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
   14896:	2374      	movs	r3, #116	; 0x74
   14898:	18fb      	adds	r3, r7, r3
   1489a:	881b      	ldrh	r3, [r3, #0]
   1489c:	2224      	movs	r2, #36	; 0x24
   1489e:	18ba      	adds	r2, r7, r2
   148a0:	18d3      	adds	r3, r2, r3
   148a2:	2214      	movs	r2, #20
   148a4:	18b9      	adds	r1, r7, r2
   148a6:	2203      	movs	r2, #3
   148a8:	0018      	movs	r0, r3
   148aa:	4b28      	ldr	r3, [pc, #160]	; (1494c <rename_to_unique+0x298>)
   148ac:	4798      	blx	r3
		if (valid_ext) {
   148ae:	2371      	movs	r3, #113	; 0x71
   148b0:	18fb      	adds	r3, r7, r3
   148b2:	781b      	ldrb	r3, [r3, #0]
   148b4:	2b00      	cmp	r3, #0
   148b6:	d00c      	beq.n	148d2 <rename_to_unique+0x21e>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   148b8:	2374      	movs	r3, #116	; 0x74
   148ba:	18fb      	adds	r3, r7, r3
   148bc:	881b      	ldrh	r3, [r3, #0]
   148be:	3303      	adds	r3, #3
   148c0:	2224      	movs	r2, #36	; 0x24
   148c2:	18ba      	adds	r2, r7, r2
   148c4:	18d3      	adds	r3, r2, r3
   148c6:	2218      	movs	r2, #24
   148c8:	18ba      	adds	r2, r7, r2
   148ca:	0011      	movs	r1, r2
   148cc:	0018      	movs	r0, r3
   148ce:	4b1e      	ldr	r3, [pc, #120]	; (14948 <rename_to_unique+0x294>)
   148d0:	4798      	blx	r3
		}

		if (!is_exist_file(fp, name)) {
   148d2:	2324      	movs	r3, #36	; 0x24
   148d4:	18fa      	adds	r2, r7, r3
   148d6:	68fb      	ldr	r3, [r7, #12]
   148d8:	0011      	movs	r1, r2
   148da:	0018      	movs	r0, r3
   148dc:	4b17      	ldr	r3, [pc, #92]	; (1493c <rename_to_unique+0x288>)
   148de:	4798      	blx	r3
   148e0:	0003      	movs	r3, r0
   148e2:	001a      	movs	r2, r3
   148e4:	2301      	movs	r3, #1
   148e6:	4053      	eors	r3, r2
   148e8:	b2db      	uxtb	r3, r3
   148ea:	2b00      	cmp	r3, #0
   148ec:	d00f      	beq.n	1490e <rename_to_unique+0x25a>
			memset(file_path_name, 0, max_len);
   148ee:	1dfb      	adds	r3, r7, #7
   148f0:	781a      	ldrb	r2, [r3, #0]
   148f2:	68bb      	ldr	r3, [r7, #8]
   148f4:	2100      	movs	r1, #0
   148f6:	0018      	movs	r0, r3
   148f8:	4b0f      	ldr	r3, [pc, #60]	; (14938 <rename_to_unique+0x284>)
   148fa:	4798      	blx	r3
			strcpy(file_path_name, name);
   148fc:	2324      	movs	r3, #36	; 0x24
   148fe:	18fa      	adds	r2, r7, r3
   14900:	68bb      	ldr	r3, [r7, #8]
   14902:	0011      	movs	r1, r2
   14904:	0018      	movs	r0, r3
   14906:	4b10      	ldr	r3, [pc, #64]	; (14948 <rename_to_unique+0x294>)
   14908:	4798      	blx	r3
			return true;
   1490a:	2301      	movs	r3, #1
   1490c:	e00f      	b.n	1492e <rename_to_unique+0x27a>
	for (i = 1; i < count; i++) {
   1490e:	2376      	movs	r3, #118	; 0x76
   14910:	18fb      	adds	r3, r7, r3
   14912:	881a      	ldrh	r2, [r3, #0]
   14914:	2376      	movs	r3, #118	; 0x76
   14916:	18fb      	adds	r3, r7, r3
   14918:	3201      	adds	r2, #1
   1491a:	801a      	strh	r2, [r3, #0]
   1491c:	2376      	movs	r3, #118	; 0x76
   1491e:	18fa      	adds	r2, r7, r3
   14920:	2372      	movs	r3, #114	; 0x72
   14922:	18fb      	adds	r3, r7, r3
   14924:	8812      	ldrh	r2, [r2, #0]
   14926:	881b      	ldrh	r3, [r3, #0]
   14928:	429a      	cmp	r2, r3
   1492a:	d3ab      	bcc.n	14884 <rename_to_unique+0x1d0>
		}
	}
	return false;
   1492c:	2300      	movs	r3, #0
}
   1492e:	0018      	movs	r0, r3
   14930:	46bd      	mov	sp, r7
   14932:	b01e      	add	sp, #120	; 0x78
   14934:	bd80      	pop	{r7, pc}
   14936:	46c0      	nop			; (mov r8, r8)
   14938:	000339ff 	.word	0x000339ff
   1493c:	0001465d 	.word	0x0001465d
   14940:	00033db7 	.word	0x00033db7
   14944:	00033e11 	.word	0x00033e11
   14948:	00033d6b 	.word	0x00033d6b
   1494c:	00033de7 	.word	0x00033de7
   14950:	0003511c 	.word	0x0003511c
   14954:	00033cbd 	.word	0x00033cbd

00014958 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   14958:	b590      	push	{r4, r7, lr}
   1495a:	b083      	sub	sp, #12
   1495c:	af02      	add	r7, sp, #8
	if (!is_state_set(STORAGE_READY)) {
   1495e:	2001      	movs	r0, #1
   14960:	4b22      	ldr	r3, [pc, #136]	; (149ec <start_download+0x94>)
   14962:	4798      	blx	r3
   14964:	0003      	movs	r3, r0
   14966:	001a      	movs	r2, r3
   14968:	2301      	movs	r3, #1
   1496a:	4053      	eors	r3, r2
   1496c:	b2db      	uxtb	r3, r3
   1496e:	2b00      	cmp	r3, #0
   14970:	d005      	beq.n	1497e <start_download+0x26>
		LogMessage(LOG_DEBUG_LVL,"start_download: MMC storage not ready.\r\n");
   14972:	4b1f      	ldr	r3, [pc, #124]	; (149f0 <start_download+0x98>)
   14974:	0019      	movs	r1, r3
   14976:	2001      	movs	r0, #1
   14978:	4b1e      	ldr	r3, [pc, #120]	; (149f4 <start_download+0x9c>)
   1497a:	4798      	blx	r3
		return;
   1497c:	e032      	b.n	149e4 <start_download+0x8c>
	}

	if (!is_state_set(WIFI_CONNECTED)) {
   1497e:	2002      	movs	r0, #2
   14980:	4b1a      	ldr	r3, [pc, #104]	; (149ec <start_download+0x94>)
   14982:	4798      	blx	r3
   14984:	0003      	movs	r3, r0
   14986:	001a      	movs	r2, r3
   14988:	2301      	movs	r3, #1
   1498a:	4053      	eors	r3, r2
   1498c:	b2db      	uxtb	r3, r3
   1498e:	2b00      	cmp	r3, #0
   14990:	d005      	beq.n	1499e <start_download+0x46>
		LogMessage(LOG_DEBUG_LVL,"start_download: Wi-Fi is not connected.\r\n");
   14992:	4b19      	ldr	r3, [pc, #100]	; (149f8 <start_download+0xa0>)
   14994:	0019      	movs	r1, r3
   14996:	2001      	movs	r0, #1
   14998:	4b16      	ldr	r3, [pc, #88]	; (149f4 <start_download+0x9c>)
   1499a:	4798      	blx	r3
		return;
   1499c:	e022      	b.n	149e4 <start_download+0x8c>
	}

	if (is_state_set(GET_REQUESTED)) {
   1499e:	2004      	movs	r0, #4
   149a0:	4b12      	ldr	r3, [pc, #72]	; (149ec <start_download+0x94>)
   149a2:	4798      	blx	r3
   149a4:	1e03      	subs	r3, r0, #0
   149a6:	d005      	beq.n	149b4 <start_download+0x5c>
		LogMessage(LOG_DEBUG_LVL,"start_download: request is sent already.\r\n");
   149a8:	4b14      	ldr	r3, [pc, #80]	; (149fc <start_download+0xa4>)
   149aa:	0019      	movs	r1, r3
   149ac:	2001      	movs	r0, #1
   149ae:	4b11      	ldr	r3, [pc, #68]	; (149f4 <start_download+0x9c>)
   149b0:	4798      	blx	r3
		return;
   149b2:	e017      	b.n	149e4 <start_download+0x8c>
	}

	if (is_state_set(DOWNLOADING)) {
   149b4:	2008      	movs	r0, #8
   149b6:	4b0d      	ldr	r3, [pc, #52]	; (149ec <start_download+0x94>)
   149b8:	4798      	blx	r3
   149ba:	1e03      	subs	r3, r0, #0
   149bc:	d005      	beq.n	149ca <start_download+0x72>
		LogMessage(LOG_DEBUG_LVL,"start_download: running download already.\r\n");
   149be:	4b10      	ldr	r3, [pc, #64]	; (14a00 <start_download+0xa8>)
   149c0:	0019      	movs	r1, r3
   149c2:	2001      	movs	r0, #1
   149c4:	4b0b      	ldr	r3, [pc, #44]	; (149f4 <start_download+0x9c>)
   149c6:	4798      	blx	r3
		return;
   149c8:	e00c      	b.n	149e4 <start_download+0x8c>
	}

	/* Send the HTTP request. */
	LogMessage(LOG_DEBUG_LVL,"start_download: sending HTTP request...\r\n");
   149ca:	4b0e      	ldr	r3, [pc, #56]	; (14a04 <start_download+0xac>)
   149cc:	0019      	movs	r1, r3
   149ce:	2001      	movs	r0, #1
   149d0:	4b08      	ldr	r3, [pc, #32]	; (149f4 <start_download+0x9c>)
   149d2:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   149d4:	490c      	ldr	r1, [pc, #48]	; (14a08 <start_download+0xb0>)
   149d6:	480d      	ldr	r0, [pc, #52]	; (14a0c <start_download+0xb4>)
   149d8:	2300      	movs	r3, #0
   149da:	9300      	str	r3, [sp, #0]
   149dc:	2300      	movs	r3, #0
   149de:	2201      	movs	r2, #1
   149e0:	4c0b      	ldr	r4, [pc, #44]	; (14a10 <start_download+0xb8>)
   149e2:	47a0      	blx	r4
}
   149e4:	46bd      	mov	sp, r7
   149e6:	b001      	add	sp, #4
   149e8:	bd90      	pop	{r4, r7, pc}
   149ea:	46c0      	nop			; (mov r8, r8)
   149ec:	00014631 	.word	0x00014631
   149f0:	00035124 	.word	0x00035124
   149f4:	0001d235 	.word	0x0001d235
   149f8:	00035150 	.word	0x00035150
   149fc:	0003517c 	.word	0x0003517c
   14a00:	000351a8 	.word	0x000351a8
   14a04:	000351d4 	.word	0x000351d4
   14a08:	00035200 	.word	0x00035200
   14a0c:	200043c8 	.word	0x200043c8
   14a10:	0003032d 	.word	0x0003032d

00014a14 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   14a14:	b5b0      	push	{r4, r5, r7, lr}
   14a16:	b086      	sub	sp, #24
   14a18:	af00      	add	r7, sp, #0
   14a1a:	6078      	str	r0, [r7, #4]
   14a1c:	6039      	str	r1, [r7, #0]
	FRESULT ret;
	if ((data == NULL) || (length < 1)) {
   14a1e:	687b      	ldr	r3, [r7, #4]
   14a20:	2b00      	cmp	r3, #0
   14a22:	d002      	beq.n	14a2a <store_file_packet+0x16>
   14a24:	683b      	ldr	r3, [r7, #0]
   14a26:	2b00      	cmp	r3, #0
   14a28:	d105      	bne.n	14a36 <store_file_packet+0x22>
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: empty data.\r\n");
   14a2a:	4b58      	ldr	r3, [pc, #352]	; (14b8c <store_file_packet+0x178>)
   14a2c:	0019      	movs	r1, r3
   14a2e:	2001      	movs	r0, #1
   14a30:	4b57      	ldr	r3, [pc, #348]	; (14b90 <store_file_packet+0x17c>)
   14a32:	4798      	blx	r3
		return;
   14a34:	e0a6      	b.n	14b84 <store_file_packet+0x170>
	}

	if (!is_state_set(DOWNLOADING)) {
   14a36:	2008      	movs	r0, #8
   14a38:	4b56      	ldr	r3, [pc, #344]	; (14b94 <store_file_packet+0x180>)
   14a3a:	4798      	blx	r3
   14a3c:	0003      	movs	r3, r0
   14a3e:	001a      	movs	r2, r3
   14a40:	2301      	movs	r3, #1
   14a42:	4053      	eors	r3, r2
   14a44:	b2db      	uxtb	r3, r3
   14a46:	2b00      	cmp	r3, #0
   14a48:	d055      	beq.n	14af6 <store_file_packet+0xe2>
		char *cp = NULL;
   14a4a:	2300      	movs	r3, #0
   14a4c:	617b      	str	r3, [r7, #20]
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   14a4e:	4b52      	ldr	r3, [pc, #328]	; (14b98 <store_file_packet+0x184>)
   14a50:	2230      	movs	r2, #48	; 0x30
   14a52:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
   14a54:	4b50      	ldr	r3, [pc, #320]	; (14b98 <store_file_packet+0x184>)
   14a56:	223a      	movs	r2, #58	; 0x3a
   14a58:	705a      	strb	r2, [r3, #1]
		cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   14a5a:	4b50      	ldr	r3, [pc, #320]	; (14b9c <store_file_packet+0x188>)
   14a5c:	617b      	str	r3, [r7, #20]
		while (*cp != '/') {
   14a5e:	e002      	b.n	14a66 <store_file_packet+0x52>
			cp--;
   14a60:	697b      	ldr	r3, [r7, #20]
   14a62:	3b01      	subs	r3, #1
   14a64:	617b      	str	r3, [r7, #20]
		while (*cp != '/') {
   14a66:	697b      	ldr	r3, [r7, #20]
   14a68:	781b      	ldrb	r3, [r3, #0]
   14a6a:	2b2f      	cmp	r3, #47	; 0x2f
   14a6c:	d1f8      	bne.n	14a60 <store_file_packet+0x4c>
		}
		if (strlen(cp) > 1) {
   14a6e:	697b      	ldr	r3, [r7, #20]
   14a70:	0018      	movs	r0, r3
   14a72:	4b4b      	ldr	r3, [pc, #300]	; (14ba0 <store_file_packet+0x18c>)
   14a74:	4798      	blx	r3
   14a76:	0003      	movs	r3, r0
   14a78:	2b01      	cmp	r3, #1
   14a7a:	d924      	bls.n	14ac6 <store_file_packet+0xb2>
			cp++;
   14a7c:	697b      	ldr	r3, [r7, #20]
   14a7e:	3301      	adds	r3, #1
   14a80:	617b      	str	r3, [r7, #20]
			strcpy(&save_file_name[2], cp);
   14a82:	697a      	ldr	r2, [r7, #20]
   14a84:	4b47      	ldr	r3, [pc, #284]	; (14ba4 <store_file_packet+0x190>)
   14a86:	0011      	movs	r1, r2
   14a88:	0018      	movs	r0, r3
   14a8a:	4b47      	ldr	r3, [pc, #284]	; (14ba8 <store_file_packet+0x194>)
   14a8c:	4798      	blx	r3
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file name is invalid. Download canceled.\r\n");
			add_state(CANCELED);
			return;
		}

		rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   14a8e:	4942      	ldr	r1, [pc, #264]	; (14b98 <store_file_packet+0x184>)
   14a90:	4b46      	ldr	r3, [pc, #280]	; (14bac <store_file_packet+0x198>)
   14a92:	2240      	movs	r2, #64	; 0x40
   14a94:	0018      	movs	r0, r3
   14a96:	4b46      	ldr	r3, [pc, #280]	; (14bb0 <store_file_packet+0x19c>)
   14a98:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: creating file [%s]\r\n", save_file_name);
   14a9a:	4a3f      	ldr	r2, [pc, #252]	; (14b98 <store_file_packet+0x184>)
   14a9c:	4b45      	ldr	r3, [pc, #276]	; (14bb4 <store_file_packet+0x1a0>)
   14a9e:	0019      	movs	r1, r3
   14aa0:	2001      	movs	r0, #1
   14aa2:	4b3b      	ldr	r3, [pc, #236]	; (14b90 <store_file_packet+0x17c>)
   14aa4:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   14aa6:	2313      	movs	r3, #19
   14aa8:	18fc      	adds	r4, r7, r3
   14aaa:	493b      	ldr	r1, [pc, #236]	; (14b98 <store_file_packet+0x184>)
   14aac:	4b3f      	ldr	r3, [pc, #252]	; (14bac <store_file_packet+0x198>)
   14aae:	220a      	movs	r2, #10
   14ab0:	0018      	movs	r0, r3
   14ab2:	4b41      	ldr	r3, [pc, #260]	; (14bb8 <store_file_packet+0x1a4>)
   14ab4:	4798      	blx	r3
   14ab6:	0003      	movs	r3, r0
   14ab8:	7023      	strb	r3, [r4, #0]
		if (ret != FR_OK) {
   14aba:	2313      	movs	r3, #19
   14abc:	18fb      	adds	r3, r7, r3
   14abe:	781b      	ldrb	r3, [r3, #0]
   14ac0:	2b00      	cmp	r3, #0
   14ac2:	d012      	beq.n	14aea <store_file_packet+0xd6>
   14ac4:	e008      	b.n	14ad8 <store_file_packet+0xc4>
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file name is invalid. Download canceled.\r\n");
   14ac6:	4b3d      	ldr	r3, [pc, #244]	; (14bbc <store_file_packet+0x1a8>)
   14ac8:	0019      	movs	r1, r3
   14aca:	2001      	movs	r0, #1
   14acc:	4b30      	ldr	r3, [pc, #192]	; (14b90 <store_file_packet+0x17c>)
   14ace:	4798      	blx	r3
			add_state(CANCELED);
   14ad0:	2020      	movs	r0, #32
   14ad2:	4b3b      	ldr	r3, [pc, #236]	; (14bc0 <store_file_packet+0x1ac>)
   14ad4:	4798      	blx	r3
			return;
   14ad6:	e055      	b.n	14b84 <store_file_packet+0x170>
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file creation error! ret:%d\r\n", ret);
   14ad8:	2313      	movs	r3, #19
   14ada:	18fb      	adds	r3, r7, r3
   14adc:	781a      	ldrb	r2, [r3, #0]
   14ade:	4b39      	ldr	r3, [pc, #228]	; (14bc4 <store_file_packet+0x1b0>)
   14ae0:	0019      	movs	r1, r3
   14ae2:	2001      	movs	r0, #1
   14ae4:	4b2a      	ldr	r3, [pc, #168]	; (14b90 <store_file_packet+0x17c>)
   14ae6:	4798      	blx	r3
			return;
   14ae8:	e04c      	b.n	14b84 <store_file_packet+0x170>
		}

		received_file_size = 0;
   14aea:	4b37      	ldr	r3, [pc, #220]	; (14bc8 <store_file_packet+0x1b4>)
   14aec:	2200      	movs	r2, #0
   14aee:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
   14af0:	2008      	movs	r0, #8
   14af2:	4b33      	ldr	r3, [pc, #204]	; (14bc0 <store_file_packet+0x1ac>)
   14af4:	4798      	blx	r3
	}

	if (data != NULL) {
   14af6:	687b      	ldr	r3, [r7, #4]
   14af8:	2b00      	cmp	r3, #0
   14afa:	d043      	beq.n	14b84 <store_file_packet+0x170>
		UINT wsize = 0;
   14afc:	2300      	movs	r3, #0
   14afe:	60fb      	str	r3, [r7, #12]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
   14b00:	2313      	movs	r3, #19
   14b02:	18fc      	adds	r4, r7, r3
   14b04:	230c      	movs	r3, #12
   14b06:	18fb      	adds	r3, r7, r3
   14b08:	683a      	ldr	r2, [r7, #0]
   14b0a:	6879      	ldr	r1, [r7, #4]
   14b0c:	4827      	ldr	r0, [pc, #156]	; (14bac <store_file_packet+0x198>)
   14b0e:	4d2f      	ldr	r5, [pc, #188]	; (14bcc <store_file_packet+0x1b8>)
   14b10:	47a8      	blx	r5
   14b12:	0003      	movs	r3, r0
   14b14:	7023      	strb	r3, [r4, #0]
		if (ret != FR_OK) {
   14b16:	2313      	movs	r3, #19
   14b18:	18fb      	adds	r3, r7, r3
   14b1a:	781b      	ldrb	r3, [r3, #0]
   14b1c:	2b00      	cmp	r3, #0
   14b1e:	d00c      	beq.n	14b3a <store_file_packet+0x126>
			f_close(&file_object);
   14b20:	4b22      	ldr	r3, [pc, #136]	; (14bac <store_file_packet+0x198>)
   14b22:	0018      	movs	r0, r3
   14b24:	4b2a      	ldr	r3, [pc, #168]	; (14bd0 <store_file_packet+0x1bc>)
   14b26:	4798      	blx	r3
			add_state(CANCELED);
   14b28:	2020      	movs	r0, #32
   14b2a:	4b25      	ldr	r3, [pc, #148]	; (14bc0 <store_file_packet+0x1ac>)
   14b2c:	4798      	blx	r3
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file write error, download canceled.\r\n");
   14b2e:	4b29      	ldr	r3, [pc, #164]	; (14bd4 <store_file_packet+0x1c0>)
   14b30:	0019      	movs	r1, r3
   14b32:	2001      	movs	r0, #1
   14b34:	4b16      	ldr	r3, [pc, #88]	; (14b90 <store_file_packet+0x17c>)
   14b36:	4798      	blx	r3
			return;
   14b38:	e024      	b.n	14b84 <store_file_packet+0x170>
		}

		received_file_size += wsize;
   14b3a:	4b23      	ldr	r3, [pc, #140]	; (14bc8 <store_file_packet+0x1b4>)
   14b3c:	681a      	ldr	r2, [r3, #0]
   14b3e:	68fb      	ldr	r3, [r7, #12]
   14b40:	18d2      	adds	r2, r2, r3
   14b42:	4b21      	ldr	r3, [pc, #132]	; (14bc8 <store_file_packet+0x1b4>)
   14b44:	601a      	str	r2, [r3, #0]
		LogMessage(LOG_DEBUG_LVL,"store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   14b46:	4b20      	ldr	r3, [pc, #128]	; (14bc8 <store_file_packet+0x1b4>)
   14b48:	681a      	ldr	r2, [r3, #0]
   14b4a:	4b23      	ldr	r3, [pc, #140]	; (14bd8 <store_file_packet+0x1c4>)
   14b4c:	681b      	ldr	r3, [r3, #0]
   14b4e:	4923      	ldr	r1, [pc, #140]	; (14bdc <store_file_packet+0x1c8>)
   14b50:	2001      	movs	r0, #1
   14b52:	4c0f      	ldr	r4, [pc, #60]	; (14b90 <store_file_packet+0x17c>)
   14b54:	47a0      	blx	r4
		if (received_file_size >= http_file_size) {
   14b56:	4b1c      	ldr	r3, [pc, #112]	; (14bc8 <store_file_packet+0x1b4>)
   14b58:	681a      	ldr	r2, [r3, #0]
   14b5a:	4b1f      	ldr	r3, [pc, #124]	; (14bd8 <store_file_packet+0x1c4>)
   14b5c:	681b      	ldr	r3, [r3, #0]
   14b5e:	429a      	cmp	r2, r3
   14b60:	d310      	bcc.n	14b84 <store_file_packet+0x170>
			f_close(&file_object);
   14b62:	4b12      	ldr	r3, [pc, #72]	; (14bac <store_file_packet+0x198>)
   14b64:	0018      	movs	r0, r3
   14b66:	4b1a      	ldr	r3, [pc, #104]	; (14bd0 <store_file_packet+0x1bc>)
   14b68:	4798      	blx	r3
			LogMessage(LOG_DEBUG_LVL,"store_file_packet: file downloaded successfully.\r\n");
   14b6a:	4b1d      	ldr	r3, [pc, #116]	; (14be0 <store_file_packet+0x1cc>)
   14b6c:	0019      	movs	r1, r3
   14b6e:	2001      	movs	r0, #1
   14b70:	4b07      	ldr	r3, [pc, #28]	; (14b90 <store_file_packet+0x17c>)
   14b72:	4798      	blx	r3
			port_pin_set_output_level(LED_0_PIN, false);
   14b74:	2100      	movs	r1, #0
   14b76:	2017      	movs	r0, #23
   14b78:	4b1a      	ldr	r3, [pc, #104]	; (14be4 <store_file_packet+0x1d0>)
   14b7a:	4798      	blx	r3
			add_state(COMPLETED);
   14b7c:	2010      	movs	r0, #16
   14b7e:	4b10      	ldr	r3, [pc, #64]	; (14bc0 <store_file_packet+0x1ac>)
   14b80:	4798      	blx	r3
			return;
   14b82:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   14b84:	46bd      	mov	sp, r7
   14b86:	b006      	add	sp, #24
   14b88:	bdb0      	pop	{r4, r5, r7, pc}
   14b8a:	46c0      	nop			; (mov r8, r8)
   14b8c:	0003522c 	.word	0x0003522c
   14b90:	0001d235 	.word	0x0001d235
   14b94:	00014631 	.word	0x00014631
   14b98:	2000005c 	.word	0x2000005c
   14b9c:	0003522a 	.word	0x0003522a
   14ba0:	00033db7 	.word	0x00033db7
   14ba4:	2000005e 	.word	0x2000005e
   14ba8:	00033d6b 	.word	0x00033d6b
   14bac:	20000798 	.word	0x20000798
   14bb0:	000146b5 	.word	0x000146b5
   14bb4:	00035290 	.word	0x00035290
   14bb8:	0002ccd9 	.word	0x0002ccd9
   14bbc:	00035250 	.word	0x00035250
   14bc0:	00014609 	.word	0x00014609
   14bc4:	000352b8 	.word	0x000352b8
   14bc8:	200007c0 	.word	0x200007c0
   14bcc:	0002d209 	.word	0x0002d209
   14bd0:	0002d6d9 	.word	0x0002d6d9
   14bd4:	000352ec 	.word	0x000352ec
   14bd8:	200007bc 	.word	0x200007bc
   14bdc:	00035328 	.word	0x00035328
   14be0:	0003535c 	.word	0x0003535c
   14be4:	0001456d 	.word	0x0001456d

00014be8 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   14be8:	b590      	push	{r4, r7, lr}
   14bea:	b085      	sub	sp, #20
   14bec:	af00      	add	r7, sp, #0
   14bee:	60f8      	str	r0, [r7, #12]
   14bf0:	60b9      	str	r1, [r7, #8]
   14bf2:	607a      	str	r2, [r7, #4]
	switch (type) {
   14bf4:	68bb      	ldr	r3, [r7, #8]
   14bf6:	2b04      	cmp	r3, #4
   14bf8:	d900      	bls.n	14bfc <http_client_callback+0x14>
   14bfa:	e077      	b.n	14cec <http_client_callback+0x104>
   14bfc:	68bb      	ldr	r3, [r7, #8]
   14bfe:	009a      	lsls	r2, r3, #2
   14c00:	4b3c      	ldr	r3, [pc, #240]	; (14cf4 <http_client_callback+0x10c>)
   14c02:	18d3      	adds	r3, r2, r3
   14c04:	681b      	ldr	r3, [r3, #0]
   14c06:	469f      	mov	pc, r3
	case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: HTTP client socket connected.\r\n");
   14c08:	4b3b      	ldr	r3, [pc, #236]	; (14cf8 <http_client_callback+0x110>)
   14c0a:	0019      	movs	r1, r3
   14c0c:	2001      	movs	r0, #1
   14c0e:	4b3b      	ldr	r3, [pc, #236]	; (14cfc <http_client_callback+0x114>)
   14c10:	4798      	blx	r3
		break;
   14c12:	e06b      	b.n	14cec <http_client_callback+0x104>

	case HTTP_CLIENT_CALLBACK_REQUESTED:
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: request completed.\r\n");
   14c14:	4b3a      	ldr	r3, [pc, #232]	; (14d00 <http_client_callback+0x118>)
   14c16:	0019      	movs	r1, r3
   14c18:	2001      	movs	r0, #1
   14c1a:	4b38      	ldr	r3, [pc, #224]	; (14cfc <http_client_callback+0x114>)
   14c1c:	4798      	blx	r3
		add_state(GET_REQUESTED);
   14c1e:	2004      	movs	r0, #4
   14c20:	4b38      	ldr	r3, [pc, #224]	; (14d04 <http_client_callback+0x11c>)
   14c22:	4798      	blx	r3
		break;
   14c24:	e062      	b.n	14cec <http_client_callback+0x104>

	case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: received response %u data size %u\r\n",
				(unsigned int)data->recv_response.response_code,
   14c26:	687b      	ldr	r3, [r7, #4]
   14c28:	881b      	ldrh	r3, [r3, #0]
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: received response %u data size %u\r\n",
   14c2a:	001a      	movs	r2, r3
				(unsigned int)data->recv_response.content_length);
   14c2c:	687b      	ldr	r3, [r7, #4]
   14c2e:	685b      	ldr	r3, [r3, #4]
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: received response %u data size %u\r\n",
   14c30:	4935      	ldr	r1, [pc, #212]	; (14d08 <http_client_callback+0x120>)
   14c32:	2001      	movs	r0, #1
   14c34:	4c31      	ldr	r4, [pc, #196]	; (14cfc <http_client_callback+0x114>)
   14c36:	47a0      	blx	r4
		if ((unsigned int)data->recv_response.response_code == 200) {
   14c38:	687b      	ldr	r3, [r7, #4]
   14c3a:	881b      	ldrh	r3, [r3, #0]
   14c3c:	2bc8      	cmp	r3, #200	; 0xc8
   14c3e:	d10d      	bne.n	14c5c <http_client_callback+0x74>
			http_file_size = data->recv_response.content_length;
   14c40:	687b      	ldr	r3, [r7, #4]
   14c42:	685a      	ldr	r2, [r3, #4]
   14c44:	4b31      	ldr	r3, [pc, #196]	; (14d0c <http_client_callback+0x124>)
   14c46:	601a      	str	r2, [r3, #0]
			received_file_size = 0;
   14c48:	4b31      	ldr	r3, [pc, #196]	; (14d10 <http_client_callback+0x128>)
   14c4a:	2200      	movs	r2, #0
   14c4c:	601a      	str	r2, [r3, #0]
		} 
		else {
			add_state(CANCELED);
			return;
		}
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   14c4e:	687b      	ldr	r3, [r7, #4]
   14c50:	685a      	ldr	r2, [r3, #4]
   14c52:	2380      	movs	r3, #128	; 0x80
   14c54:	009b      	lsls	r3, r3, #2
   14c56:	429a      	cmp	r2, r3
   14c58:	d843      	bhi.n	14ce2 <http_client_callback+0xfa>
   14c5a:	e003      	b.n	14c64 <http_client_callback+0x7c>
			add_state(CANCELED);
   14c5c:	2020      	movs	r0, #32
   14c5e:	4b29      	ldr	r3, [pc, #164]	; (14d04 <http_client_callback+0x11c>)
   14c60:	4798      	blx	r3
			return;
   14c62:	e043      	b.n	14cec <http_client_callback+0x104>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
   14c64:	687b      	ldr	r3, [r7, #4]
   14c66:	689a      	ldr	r2, [r3, #8]
   14c68:	687b      	ldr	r3, [r7, #4]
   14c6a:	685b      	ldr	r3, [r3, #4]
   14c6c:	0019      	movs	r1, r3
   14c6e:	0010      	movs	r0, r2
   14c70:	4b28      	ldr	r3, [pc, #160]	; (14d14 <http_client_callback+0x12c>)
   14c72:	4798      	blx	r3
			add_state(COMPLETED);
   14c74:	2010      	movs	r0, #16
   14c76:	4b23      	ldr	r3, [pc, #140]	; (14d04 <http_client_callback+0x11c>)
   14c78:	4798      	blx	r3
		}
		break;
   14c7a:	e032      	b.n	14ce2 <http_client_callback+0xfa>

	case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   14c7c:	687b      	ldr	r3, [r7, #4]
   14c7e:	685a      	ldr	r2, [r3, #4]
   14c80:	687b      	ldr	r3, [r7, #4]
   14c82:	681b      	ldr	r3, [r3, #0]
   14c84:	0019      	movs	r1, r3
   14c86:	0010      	movs	r0, r2
   14c88:	4b22      	ldr	r3, [pc, #136]	; (14d14 <http_client_callback+0x12c>)
   14c8a:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
   14c8c:	687b      	ldr	r3, [r7, #4]
   14c8e:	7a1b      	ldrb	r3, [r3, #8]
   14c90:	2b00      	cmp	r3, #0
   14c92:	d028      	beq.n	14ce6 <http_client_callback+0xfe>
			add_state(COMPLETED);
   14c94:	2010      	movs	r0, #16
   14c96:	4b1b      	ldr	r3, [pc, #108]	; (14d04 <http_client_callback+0x11c>)
   14c98:	4798      	blx	r3
		}

		break;
   14c9a:	e024      	b.n	14ce6 <http_client_callback+0xfe>

	case HTTP_CLIENT_CALLBACK_DISCONNECTED:
		LogMessage(LOG_DEBUG_LVL,"http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   14c9c:	687b      	ldr	r3, [r7, #4]
   14c9e:	681a      	ldr	r2, [r3, #0]
   14ca0:	4b1d      	ldr	r3, [pc, #116]	; (14d18 <http_client_callback+0x130>)
   14ca2:	0019      	movs	r1, r3
   14ca4:	2001      	movs	r0, #1
   14ca6:	4b15      	ldr	r3, [pc, #84]	; (14cfc <http_client_callback+0x114>)
   14ca8:	4798      	blx	r3

		/* If disconnect reason is equal to -ECONNRESET(-104),
		 * It means the server has closed the connection (timeout).
		 * This is normal operation.
		 */
		if (data->disconnected.reason == -EAGAIN) {
   14caa:	687b      	ldr	r3, [r7, #4]
   14cac:	681b      	ldr	r3, [r3, #0]
   14cae:	330b      	adds	r3, #11
   14cb0:	d11b      	bne.n	14cea <http_client_callback+0x102>
			/* Server has not responded. Retry immediately. */
			if (is_state_set(DOWNLOADING)) {
   14cb2:	2008      	movs	r0, #8
   14cb4:	4b19      	ldr	r3, [pc, #100]	; (14d1c <http_client_callback+0x134>)
   14cb6:	4798      	blx	r3
   14cb8:	1e03      	subs	r3, r0, #0
   14cba:	d006      	beq.n	14cca <http_client_callback+0xe2>
				f_close(&file_object);
   14cbc:	4b18      	ldr	r3, [pc, #96]	; (14d20 <http_client_callback+0x138>)
   14cbe:	0018      	movs	r0, r3
   14cc0:	4b18      	ldr	r3, [pc, #96]	; (14d24 <http_client_callback+0x13c>)
   14cc2:	4798      	blx	r3
				clear_state(DOWNLOADING);
   14cc4:	2008      	movs	r0, #8
   14cc6:	4b18      	ldr	r3, [pc, #96]	; (14d28 <http_client_callback+0x140>)
   14cc8:	4798      	blx	r3
			}

			if (is_state_set(GET_REQUESTED)) {
   14cca:	2004      	movs	r0, #4
   14ccc:	4b13      	ldr	r3, [pc, #76]	; (14d1c <http_client_callback+0x134>)
   14cce:	4798      	blx	r3
   14cd0:	1e03      	subs	r3, r0, #0
   14cd2:	d002      	beq.n	14cda <http_client_callback+0xf2>
				clear_state(GET_REQUESTED);
   14cd4:	2004      	movs	r0, #4
   14cd6:	4b14      	ldr	r3, [pc, #80]	; (14d28 <http_client_callback+0x140>)
   14cd8:	4798      	blx	r3
			}

			start_download();
   14cda:	4b14      	ldr	r3, [pc, #80]	; (14d2c <http_client_callback+0x144>)
   14cdc:	4798      	blx	r3
		}

		break;
   14cde:	46c0      	nop			; (mov r8, r8)
   14ce0:	e003      	b.n	14cea <http_client_callback+0x102>
		break;
   14ce2:	46c0      	nop			; (mov r8, r8)
   14ce4:	e002      	b.n	14cec <http_client_callback+0x104>
		break;
   14ce6:	46c0      	nop			; (mov r8, r8)
   14ce8:	e000      	b.n	14cec <http_client_callback+0x104>
		break;
   14cea:	46c0      	nop			; (mov r8, r8)
	}
}
   14cec:	46bd      	mov	sp, r7
   14cee:	b005      	add	sp, #20
   14cf0:	bd90      	pop	{r4, r7, pc}
   14cf2:	46c0      	nop			; (mov r8, r8)
   14cf4:	00035a54 	.word	0x00035a54
   14cf8:	00035390 	.word	0x00035390
   14cfc:	0001d235 	.word	0x0001d235
   14d00:	000353c8 	.word	0x000353c8
   14d04:	00014609 	.word	0x00014609
   14d08:	000353f4 	.word	0x000353f4
   14d0c:	200007bc 	.word	0x200007bc
   14d10:	200007c0 	.word	0x200007c0
   14d14:	00014a15 	.word	0x00014a15
   14d18:	00035430 	.word	0x00035430
   14d1c:	00014631 	.word	0x00014631
   14d20:	20000798 	.word	0x20000798
   14d24:	0002d6d9 	.word	0x0002d6d9
   14d28:	000145d5 	.word	0x000145d5
   14d2c:	00014959 	.word	0x00014959

00014d30 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   14d30:	b580      	push	{r7, lr}
   14d32:	b082      	sub	sp, #8
   14d34:	af00      	add	r7, sp, #0
   14d36:	603a      	str	r2, [r7, #0]
   14d38:	1dfb      	adds	r3, r7, #7
   14d3a:	1c02      	adds	r2, r0, #0
   14d3c:	701a      	strb	r2, [r3, #0]
   14d3e:	1dbb      	adds	r3, r7, #6
   14d40:	1c0a      	adds	r2, r1, #0
   14d42:	701a      	strb	r2, [r3, #0]
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   14d44:	683a      	ldr	r2, [r7, #0]
   14d46:	1dbb      	adds	r3, r7, #6
   14d48:	7819      	ldrb	r1, [r3, #0]
   14d4a:	1dfb      	adds	r3, r7, #7
   14d4c:	781b      	ldrb	r3, [r3, #0]
   14d4e:	b25b      	sxtb	r3, r3
   14d50:	0018      	movs	r0, r3
   14d52:	4b03      	ldr	r3, [pc, #12]	; (14d60 <socket_cb+0x30>)
   14d54:	4798      	blx	r3
}
   14d56:	46c0      	nop			; (mov r8, r8)
   14d58:	46bd      	mov	sp, r7
   14d5a:	b002      	add	sp, #8
   14d5c:	bd80      	pop	{r7, pc}
   14d5e:	46c0      	nop			; (mov r8, r8)
   14d60:	0003003d 	.word	0x0003003d

00014d64 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   14d64:	b5b0      	push	{r4, r5, r7, lr}
   14d66:	b086      	sub	sp, #24
   14d68:	af04      	add	r7, sp, #16
   14d6a:	6078      	str	r0, [r7, #4]
   14d6c:	6039      	str	r1, [r7, #0]
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   14d6e:	683b      	ldr	r3, [r7, #0]
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   14d70:	22ff      	movs	r2, #255	; 0xff
   14d72:	4013      	ands	r3, r2
   14d74:	001c      	movs	r4, r3
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   14d76:	683b      	ldr	r3, [r7, #0]
   14d78:	0a1b      	lsrs	r3, r3, #8
   14d7a:	001a      	movs	r2, r3
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   14d7c:	23ff      	movs	r3, #255	; 0xff
   14d7e:	4013      	ands	r3, r2
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   14d80:	683a      	ldr	r2, [r7, #0]
   14d82:	0c12      	lsrs	r2, r2, #16
   14d84:	0011      	movs	r1, r2
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   14d86:	22ff      	movs	r2, #255	; 0xff
   14d88:	400a      	ands	r2, r1
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   14d8a:	6839      	ldr	r1, [r7, #0]
   14d8c:	0e09      	lsrs	r1, r1, #24
	LogMessage(LOG_DEBUG_LVL,"resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   14d8e:	000d      	movs	r5, r1
   14d90:	6878      	ldr	r0, [r7, #4]
   14d92:	4909      	ldr	r1, [pc, #36]	; (14db8 <resolve_cb+0x54>)
   14d94:	9502      	str	r5, [sp, #8]
   14d96:	9201      	str	r2, [sp, #4]
   14d98:	9300      	str	r3, [sp, #0]
   14d9a:	0023      	movs	r3, r4
   14d9c:	0002      	movs	r2, r0
   14d9e:	2001      	movs	r0, #1
   14da0:	4c06      	ldr	r4, [pc, #24]	; (14dbc <resolve_cb+0x58>)
   14da2:	47a0      	blx	r4
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   14da4:	683a      	ldr	r2, [r7, #0]
   14da6:	687b      	ldr	r3, [r7, #4]
   14da8:	0011      	movs	r1, r2
   14daa:	0018      	movs	r0, r3
   14dac:	4b04      	ldr	r3, [pc, #16]	; (14dc0 <resolve_cb+0x5c>)
   14dae:	4798      	blx	r3
}
   14db0:	46c0      	nop			; (mov r8, r8)
   14db2:	46bd      	mov	sp, r7
   14db4:	b002      	add	sp, #8
   14db6:	bdb0      	pop	{r4, r5, r7, pc}
   14db8:	00035460 	.word	0x00035460
   14dbc:	0001d235 	.word	0x0001d235
   14dc0:	000301a1 	.word	0x000301a1

00014dc4 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   14dc4:	b590      	push	{r4, r7, lr}
   14dc6:	b087      	sub	sp, #28
   14dc8:	af02      	add	r7, sp, #8
   14dca:	0002      	movs	r2, r0
   14dcc:	6039      	str	r1, [r7, #0]
   14dce:	1dfb      	adds	r3, r7, #7
   14dd0:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
   14dd2:	1dfb      	adds	r3, r7, #7
   14dd4:	781b      	ldrb	r3, [r3, #0]
   14dd6:	2b2c      	cmp	r3, #44	; 0x2c
   14dd8:	d002      	beq.n	14de0 <wifi_cb+0x1c>
   14dda:	2b32      	cmp	r3, #50	; 0x32
   14ddc:	d03d      	beq.n	14e5a <wifi_cb+0x96>
	}
		break;
	

	default:
		break;
   14dde:	e06f      	b.n	14ec0 <wifi_cb+0xfc>
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   14de0:	683b      	ldr	r3, [r7, #0]
   14de2:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   14de4:	68fb      	ldr	r3, [r7, #12]
   14de6:	781b      	ldrb	r3, [r3, #0]
   14de8:	2b01      	cmp	r3, #1
   14dea:	d107      	bne.n	14dfc <wifi_cb+0x38>
			LogMessage(LOG_DEBUG_LVL,"wifi_cb: M2M_WIFI_CONNECTED\r\n");
   14dec:	4b36      	ldr	r3, [pc, #216]	; (14ec8 <wifi_cb+0x104>)
   14dee:	0019      	movs	r1, r3
   14df0:	2001      	movs	r0, #1
   14df2:	4b36      	ldr	r3, [pc, #216]	; (14ecc <wifi_cb+0x108>)
   14df4:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   14df6:	4b36      	ldr	r3, [pc, #216]	; (14ed0 <wifi_cb+0x10c>)
   14df8:	4798      	blx	r3
		break;
   14dfa:	e05e      	b.n	14eba <wifi_cb+0xf6>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   14dfc:	68fb      	ldr	r3, [r7, #12]
   14dfe:	781b      	ldrb	r3, [r3, #0]
   14e00:	2b00      	cmp	r3, #0
   14e02:	d15a      	bne.n	14eba <wifi_cb+0xf6>
			LogMessage(LOG_DEBUG_LVL,"wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   14e04:	4b33      	ldr	r3, [pc, #204]	; (14ed4 <wifi_cb+0x110>)
   14e06:	0019      	movs	r1, r3
   14e08:	2001      	movs	r0, #1
   14e0a:	4b30      	ldr	r3, [pc, #192]	; (14ecc <wifi_cb+0x108>)
   14e0c:	4798      	blx	r3
			clear_state(WIFI_CONNECTED);
   14e0e:	2002      	movs	r0, #2
   14e10:	4b31      	ldr	r3, [pc, #196]	; (14ed8 <wifi_cb+0x114>)
   14e12:	4798      	blx	r3
			if (is_state_set(DOWNLOADING)) {
   14e14:	2008      	movs	r0, #8
   14e16:	4b31      	ldr	r3, [pc, #196]	; (14edc <wifi_cb+0x118>)
   14e18:	4798      	blx	r3
   14e1a:	1e03      	subs	r3, r0, #0
   14e1c:	d006      	beq.n	14e2c <wifi_cb+0x68>
				f_close(&file_object);
   14e1e:	4b30      	ldr	r3, [pc, #192]	; (14ee0 <wifi_cb+0x11c>)
   14e20:	0018      	movs	r0, r3
   14e22:	4b30      	ldr	r3, [pc, #192]	; (14ee4 <wifi_cb+0x120>)
   14e24:	4798      	blx	r3
				clear_state(DOWNLOADING);
   14e26:	2008      	movs	r0, #8
   14e28:	4b2b      	ldr	r3, [pc, #172]	; (14ed8 <wifi_cb+0x114>)
   14e2a:	4798      	blx	r3
			if (is_state_set(GET_REQUESTED)) {
   14e2c:	2004      	movs	r0, #4
   14e2e:	4b2b      	ldr	r3, [pc, #172]	; (14edc <wifi_cb+0x118>)
   14e30:	4798      	blx	r3
   14e32:	1e03      	subs	r3, r0, #0
   14e34:	d002      	beq.n	14e3c <wifi_cb+0x78>
				clear_state(GET_REQUESTED);
   14e36:	2004      	movs	r0, #4
   14e38:	4b27      	ldr	r3, [pc, #156]	; (14ed8 <wifi_cb+0x114>)
   14e3a:	4798      	blx	r3
			mqtt_disconnect(&mqtt_inst, 1);
   14e3c:	4b2a      	ldr	r3, [pc, #168]	; (14ee8 <wifi_cb+0x124>)
   14e3e:	2101      	movs	r1, #1
   14e40:	0018      	movs	r0, r3
   14e42:	4b2a      	ldr	r3, [pc, #168]	; (14eec <wifi_cb+0x128>)
   14e44:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   14e46:	4a2a      	ldr	r2, [pc, #168]	; (14ef0 <wifi_cb+0x12c>)
   14e48:	482a      	ldr	r0, [pc, #168]	; (14ef4 <wifi_cb+0x130>)
   14e4a:	23ff      	movs	r3, #255	; 0xff
   14e4c:	9300      	str	r3, [sp, #0]
   14e4e:	0013      	movs	r3, r2
   14e50:	2202      	movs	r2, #2
   14e52:	210d      	movs	r1, #13
   14e54:	4c28      	ldr	r4, [pc, #160]	; (14ef8 <wifi_cb+0x134>)
   14e56:	47a0      	blx	r4
		break;
   14e58:	e02f      	b.n	14eba <wifi_cb+0xf6>
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   14e5a:	683b      	ldr	r3, [r7, #0]
   14e5c:	60bb      	str	r3, [r7, #8]
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   14e5e:	68bb      	ldr	r3, [r7, #8]
   14e60:	781b      	ldrb	r3, [r3, #0]
		LogMessage(LOG_DEBUG_LVL,"wifi_cb: IP address is %u.%u.%u.%u\r\n",
   14e62:	0018      	movs	r0, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   14e64:	68bb      	ldr	r3, [r7, #8]
   14e66:	3301      	adds	r3, #1
   14e68:	781b      	ldrb	r3, [r3, #0]
		LogMessage(LOG_DEBUG_LVL,"wifi_cb: IP address is %u.%u.%u.%u\r\n",
   14e6a:	001c      	movs	r4, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   14e6c:	68bb      	ldr	r3, [r7, #8]
   14e6e:	3302      	adds	r3, #2
   14e70:	781b      	ldrb	r3, [r3, #0]
		LogMessage(LOG_DEBUG_LVL,"wifi_cb: IP address is %u.%u.%u.%u\r\n",
   14e72:	001a      	movs	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   14e74:	68bb      	ldr	r3, [r7, #8]
   14e76:	3303      	adds	r3, #3
   14e78:	781b      	ldrb	r3, [r3, #0]
		LogMessage(LOG_DEBUG_LVL,"wifi_cb: IP address is %u.%u.%u.%u\r\n",
   14e7a:	4920      	ldr	r1, [pc, #128]	; (14efc <wifi_cb+0x138>)
   14e7c:	9301      	str	r3, [sp, #4]
   14e7e:	9200      	str	r2, [sp, #0]
   14e80:	0023      	movs	r3, r4
   14e82:	0002      	movs	r2, r0
   14e84:	2001      	movs	r0, #1
   14e86:	4c11      	ldr	r4, [pc, #68]	; (14ecc <wifi_cb+0x108>)
   14e88:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
   14e8a:	2002      	movs	r0, #2
   14e8c:	4b1c      	ldr	r3, [pc, #112]	; (14f00 <wifi_cb+0x13c>)
   14e8e:	4798      	blx	r3
		if(do_download_flag == 1)
   14e90:	4b1c      	ldr	r3, [pc, #112]	; (14f04 <wifi_cb+0x140>)
   14e92:	781b      	ldrb	r3, [r3, #0]
   14e94:	2b01      	cmp	r3, #1
   14e96:	d102      	bne.n	14e9e <wifi_cb+0xda>
			start_download();
   14e98:	4b1b      	ldr	r3, [pc, #108]	; (14f08 <wifi_cb+0x144>)
   14e9a:	4798      	blx	r3
		break;
   14e9c:	e00f      	b.n	14ebe <wifi_cb+0xfa>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   14e9e:	4a1b      	ldr	r2, [pc, #108]	; (14f0c <wifi_cb+0x148>)
   14ea0:	4b11      	ldr	r3, [pc, #68]	; (14ee8 <wifi_cb+0x124>)
   14ea2:	0011      	movs	r1, r2
   14ea4:	0018      	movs	r0, r3
   14ea6:	4b1a      	ldr	r3, [pc, #104]	; (14f10 <wifi_cb+0x14c>)
   14ea8:	4798      	blx	r3
   14eaa:	1e03      	subs	r3, r0, #0
   14eac:	d007      	beq.n	14ebe <wifi_cb+0xfa>
			LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   14eae:	4b19      	ldr	r3, [pc, #100]	; (14f14 <wifi_cb+0x150>)
   14eb0:	0019      	movs	r1, r3
   14eb2:	2001      	movs	r0, #1
   14eb4:	4b05      	ldr	r3, [pc, #20]	; (14ecc <wifi_cb+0x108>)
   14eb6:	4798      	blx	r3
		break;
   14eb8:	e001      	b.n	14ebe <wifi_cb+0xfa>
		break;
   14eba:	46c0      	nop			; (mov r8, r8)
   14ebc:	e000      	b.n	14ec0 <wifi_cb+0xfc>
		break;
   14ebe:	46c0      	nop			; (mov r8, r8)
	}
}
   14ec0:	46c0      	nop			; (mov r8, r8)
   14ec2:	46bd      	mov	sp, r7
   14ec4:	b005      	add	sp, #20
   14ec6:	bd90      	pop	{r4, r7, pc}
   14ec8:	00035490 	.word	0x00035490
   14ecc:	0001d235 	.word	0x0001d235
   14ed0:	0002180d 	.word	0x0002180d
   14ed4:	000354b0 	.word	0x000354b0
   14ed8:	000145d5 	.word	0x000145d5
   14edc:	00014631 	.word	0x00014631
   14ee0:	20000798 	.word	0x20000798
   14ee4:	0002d6d9 	.word	0x0002d6d9
   14ee8:	200007c4 	.word	0x200007c4
   14eec:	0002ece9 	.word	0x0002ece9
   14ef0:	000354d4 	.word	0x000354d4
   14ef4:	000354e8 	.word	0x000354e8
   14ef8:	00021339 	.word	0x00021339
   14efc:	000354f8 	.word	0x000354f8
   14f00:	00014609 	.word	0x00014609
   14f04:	20000564 	.word	0x20000564
   14f08:	00014959 	.word	0x00014959
   14f0c:	00035108 	.word	0x00035108
   14f10:	0002ebb5 	.word	0x0002ebb5
   14f14:	00035520 	.word	0x00035520

00014f18 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   14f18:	b590      	push	{r4, r7, lr}
   14f1a:	b083      	sub	sp, #12
   14f1c:	af00      	add	r7, sp, #0
	FRESULT res;
	Ctrl_status status;

	/* Initialize SD/MMC stack. */
	sd_mmc_init();
   14f1e:	4b29      	ldr	r3, [pc, #164]	; (14fc4 <init_storage+0xac>)
   14f20:	4798      	blx	r3
	while (true) {
		LogMessage(LOG_DEBUG_LVL,"init_storage: please plug an SD/MMC card in slot...\r\n");
   14f22:	4b29      	ldr	r3, [pc, #164]	; (14fc8 <init_storage+0xb0>)
   14f24:	0019      	movs	r1, r3
   14f26:	2001      	movs	r0, #1
   14f28:	4b28      	ldr	r3, [pc, #160]	; (14fcc <init_storage+0xb4>)
   14f2a:	4798      	blx	r3

		/* Wait card present and ready. */
		do {
			status = sd_mmc_test_unit_ready(0);
   14f2c:	1dfc      	adds	r4, r7, #7
   14f2e:	2000      	movs	r0, #0
   14f30:	4b27      	ldr	r3, [pc, #156]	; (14fd0 <init_storage+0xb8>)
   14f32:	4798      	blx	r3
   14f34:	0003      	movs	r3, r0
   14f36:	7023      	strb	r3, [r4, #0]
			if (CTRL_FAIL == status) {
   14f38:	1dfb      	adds	r3, r7, #7
   14f3a:	781b      	ldrb	r3, [r3, #0]
   14f3c:	2b01      	cmp	r3, #1
   14f3e:	d110      	bne.n	14f62 <init_storage+0x4a>
				LogMessage(LOG_DEBUG_LVL,"init_storage: SD Card install failed.\r\n");
   14f40:	4b24      	ldr	r3, [pc, #144]	; (14fd4 <init_storage+0xbc>)
   14f42:	0019      	movs	r1, r3
   14f44:	2001      	movs	r0, #1
   14f46:	4b21      	ldr	r3, [pc, #132]	; (14fcc <init_storage+0xb4>)
   14f48:	4798      	blx	r3
				LogMessage(LOG_DEBUG_LVL,"init_storage: try unplug and re-plug the card.\r\n");
   14f4a:	4b23      	ldr	r3, [pc, #140]	; (14fd8 <init_storage+0xc0>)
   14f4c:	0019      	movs	r1, r3
   14f4e:	2001      	movs	r0, #1
   14f50:	4b1e      	ldr	r3, [pc, #120]	; (14fcc <init_storage+0xb4>)
   14f52:	4798      	blx	r3
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   14f54:	46c0      	nop			; (mov r8, r8)
   14f56:	2000      	movs	r0, #0
   14f58:	4b20      	ldr	r3, [pc, #128]	; (14fdc <init_storage+0xc4>)
   14f5a:	4798      	blx	r3
   14f5c:	0003      	movs	r3, r0
   14f5e:	2b02      	cmp	r3, #2
   14f60:	d1f9      	bne.n	14f56 <init_storage+0x3e>
				}
			}
		} while (CTRL_GOOD != status);
   14f62:	1dfb      	adds	r3, r7, #7
   14f64:	781b      	ldrb	r3, [r3, #0]
   14f66:	2b00      	cmp	r3, #0
   14f68:	d1e0      	bne.n	14f2c <init_storage+0x14>

		LogMessage(LOG_DEBUG_LVL,"init_storage: mounting SD card...\r\n");
   14f6a:	4b1d      	ldr	r3, [pc, #116]	; (14fe0 <init_storage+0xc8>)
   14f6c:	0019      	movs	r1, r3
   14f6e:	2001      	movs	r0, #1
   14f70:	4b16      	ldr	r3, [pc, #88]	; (14fcc <init_storage+0xb4>)
   14f72:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
   14f74:	238c      	movs	r3, #140	; 0x8c
   14f76:	009a      	lsls	r2, r3, #2
   14f78:	4b1a      	ldr	r3, [pc, #104]	; (14fe4 <init_storage+0xcc>)
   14f7a:	2100      	movs	r1, #0
   14f7c:	0018      	movs	r0, r3
   14f7e:	4b1a      	ldr	r3, [pc, #104]	; (14fe8 <init_storage+0xd0>)
   14f80:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   14f82:	1dbc      	adds	r4, r7, #6
   14f84:	4b17      	ldr	r3, [pc, #92]	; (14fe4 <init_storage+0xcc>)
   14f86:	0019      	movs	r1, r3
   14f88:	2000      	movs	r0, #0
   14f8a:	4b18      	ldr	r3, [pc, #96]	; (14fec <init_storage+0xd4>)
   14f8c:	4798      	blx	r3
   14f8e:	0003      	movs	r3, r0
   14f90:	7023      	strb	r3, [r4, #0]
		if (FR_INVALID_DRIVE == res) {
   14f92:	1dbb      	adds	r3, r7, #6
   14f94:	781b      	ldrb	r3, [r3, #0]
   14f96:	2b0b      	cmp	r3, #11
   14f98:	d107      	bne.n	14faa <init_storage+0x92>
			LogMessage(LOG_DEBUG_LVL,"init_storage: SD card mount failed! (res %d)\r\n", res);
   14f9a:	1dbb      	adds	r3, r7, #6
   14f9c:	781a      	ldrb	r2, [r3, #0]
   14f9e:	4b14      	ldr	r3, [pc, #80]	; (14ff0 <init_storage+0xd8>)
   14fa0:	0019      	movs	r1, r3
   14fa2:	2001      	movs	r0, #1
   14fa4:	4b09      	ldr	r3, [pc, #36]	; (14fcc <init_storage+0xb4>)
   14fa6:	4798      	blx	r3
			return;
   14fa8:	e008      	b.n	14fbc <init_storage+0xa4>
		}

		LogMessage(LOG_DEBUG_LVL,"init_storage: SD card mount OK.\r\n");
   14faa:	4b12      	ldr	r3, [pc, #72]	; (14ff4 <init_storage+0xdc>)
   14fac:	0019      	movs	r1, r3
   14fae:	2001      	movs	r0, #1
   14fb0:	4b06      	ldr	r3, [pc, #24]	; (14fcc <init_storage+0xb4>)
   14fb2:	4798      	blx	r3
		add_state(STORAGE_READY);
   14fb4:	2001      	movs	r0, #1
   14fb6:	4b10      	ldr	r3, [pc, #64]	; (14ff8 <init_storage+0xe0>)
   14fb8:	4798      	blx	r3
		return;
   14fba:	46c0      	nop			; (mov r8, r8)
	}
}
   14fbc:	46bd      	mov	sp, r7
   14fbe:	b003      	add	sp, #12
   14fc0:	bd90      	pop	{r4, r7, pc}
   14fc2:	46c0      	nop			; (mov r8, r8)
   14fc4:	0001e045 	.word	0x0001e045
   14fc8:	00035544 	.word	0x00035544
   14fcc:	0001d235 	.word	0x0001d235
   14fd0:	0001e521 	.word	0x0001e521
   14fd4:	0003557c 	.word	0x0003557c
   14fd8:	000355a4 	.word	0x000355a4
   14fdc:	0001e095 	.word	0x0001e095
   14fe0:	000355d8 	.word	0x000355d8
   14fe4:	20000568 	.word	0x20000568
   14fe8:	000339ff 	.word	0x000339ff
   14fec:	0002cc81 	.word	0x0002cc81
   14ff0:	000355fc 	.word	0x000355fc
   14ff4:	0003562c 	.word	0x0003562c
   14ff8:	00014609 	.word	0x00014609

00014ffc <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   14ffc:	b580      	push	{r7, lr}
   14ffe:	b082      	sub	sp, #8
   15000:	af00      	add	r7, sp, #0
	struct sw_timer_config swt_conf;
	sw_timer_get_config_defaults(&swt_conf);
   15002:	1d3b      	adds	r3, r7, #4
   15004:	0018      	movs	r0, r3
   15006:	4b08      	ldr	r3, [pc, #32]	; (15028 <configure_timer+0x2c>)
   15008:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
   1500a:	1d3a      	adds	r2, r7, #4
   1500c:	4b07      	ldr	r3, [pc, #28]	; (1502c <configure_timer+0x30>)
   1500e:	0011      	movs	r1, r2
   15010:	0018      	movs	r0, r3
   15012:	4b07      	ldr	r3, [pc, #28]	; (15030 <configure_timer+0x34>)
   15014:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
   15016:	4b05      	ldr	r3, [pc, #20]	; (1502c <configure_timer+0x30>)
   15018:	0018      	movs	r0, r3
   1501a:	4b06      	ldr	r3, [pc, #24]	; (15034 <configure_timer+0x38>)
   1501c:	4798      	blx	r3
}
   1501e:	46c0      	nop			; (mov r8, r8)
   15020:	46bd      	mov	sp, r7
   15022:	b002      	add	sp, #8
   15024:	bd80      	pop	{r7, pc}
   15026:	46c0      	nop			; (mov r8, r8)
   15028:	000317d1 	.word	0x000317d1
   1502c:	20004370 	.word	0x20004370
   15030:	000317f5 	.word	0x000317f5
   15034:	000318e1 	.word	0x000318e1

00015038 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   15038:	b580      	push	{r7, lr}
   1503a:	b088      	sub	sp, #32
   1503c:	af00      	add	r7, sp, #0
	struct http_client_config httpc_conf;
	int ret;

	http_client_get_config_defaults(&httpc_conf);
   1503e:	003b      	movs	r3, r7
   15040:	0018      	movs	r0, r3
   15042:	4b16      	ldr	r3, [pc, #88]	; (1509c <configure_http_client+0x64>)
   15044:	4798      	blx	r3

	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   15046:	003b      	movs	r3, r7
   15048:	2280      	movs	r2, #128	; 0x80
   1504a:	0092      	lsls	r2, r2, #2
   1504c:	611a      	str	r2, [r3, #16]
	httpc_conf.timer_inst = &swt_module_inst;
   1504e:	003b      	movs	r3, r7
   15050:	4a13      	ldr	r2, [pc, #76]	; (150a0 <configure_http_client+0x68>)
   15052:	605a      	str	r2, [r3, #4]
	httpc_conf.port = 443;
   15054:	003b      	movs	r3, r7
   15056:	22bc      	movs	r2, #188	; 0xbc
   15058:	32ff      	adds	r2, #255	; 0xff
   1505a:	801a      	strh	r2, [r3, #0]
	httpc_conf.tls = 1;
   1505c:	003b      	movs	r3, r7
   1505e:	2201      	movs	r2, #1
   15060:	709a      	strb	r2, [r3, #2]

	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   15062:	003a      	movs	r2, r7
   15064:	4b0f      	ldr	r3, [pc, #60]	; (150a4 <configure_http_client+0x6c>)
   15066:	0011      	movs	r1, r2
   15068:	0018      	movs	r0, r3
   1506a:	4b0f      	ldr	r3, [pc, #60]	; (150a8 <configure_http_client+0x70>)
   1506c:	4798      	blx	r3
   1506e:	0003      	movs	r3, r0
   15070:	61fb      	str	r3, [r7, #28]
	if (ret < 0) {
   15072:	69fb      	ldr	r3, [r7, #28]
   15074:	2b00      	cmp	r3, #0
   15076:	da06      	bge.n	15086 <configure_http_client+0x4e>
		LogMessage(LOG_DEBUG_LVL,"configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   15078:	69fa      	ldr	r2, [r7, #28]
   1507a:	4b0c      	ldr	r3, [pc, #48]	; (150ac <configure_http_client+0x74>)
   1507c:	0019      	movs	r1, r3
   1507e:	2001      	movs	r0, #1
   15080:	4b0b      	ldr	r3, [pc, #44]	; (150b0 <configure_http_client+0x78>)
   15082:	4798      	blx	r3
		while (1) {
   15084:	e7fe      	b.n	15084 <configure_http_client+0x4c>
		} /* Loop forever. */
	}

	http_client_register_callback(&http_client_module_inst, http_client_callback);
   15086:	4a0b      	ldr	r2, [pc, #44]	; (150b4 <configure_http_client+0x7c>)
   15088:	4b06      	ldr	r3, [pc, #24]	; (150a4 <configure_http_client+0x6c>)
   1508a:	0011      	movs	r1, r2
   1508c:	0018      	movs	r0, r3
   1508e:	4b0a      	ldr	r3, [pc, #40]	; (150b8 <configure_http_client+0x80>)
   15090:	4798      	blx	r3
}
   15092:	46c0      	nop			; (mov r8, r8)
   15094:	46bd      	mov	sp, r7
   15096:	b008      	add	sp, #32
   15098:	bd80      	pop	{r7, pc}
   1509a:	46c0      	nop			; (mov r8, r8)
   1509c:	0002fe65 	.word	0x0002fe65
   150a0:	20004370 	.word	0x20004370
   150a4:	200043c8 	.word	0x200043c8
   150a8:	0002feb1 	.word	0x0002feb1
   150ac:	00035650 	.word	0x00035650
   150b0:	0001d235 	.word	0x0001d235
   150b4:	00014be9 	.word	0x00014be9
   150b8:	0002ff9d 	.word	0x0002ff9d

000150bc <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   150bc:	b580      	push	{r7, lr}
   150be:	b082      	sub	sp, #8
   150c0:	af00      	add	r7, sp, #0
   150c2:	603a      	str	r2, [r7, #0]
   150c4:	1dfb      	adds	r3, r7, #7
   150c6:	1c02      	adds	r2, r0, #0
   150c8:	701a      	strb	r2, [r3, #0]
   150ca:	1dbb      	adds	r3, r7, #6
   150cc:	1c0a      	adds	r2, r1, #0
   150ce:	701a      	strb	r2, [r3, #0]
	mqtt_socket_event_handler(sock, msg_type, msg_data);
   150d0:	683a      	ldr	r2, [r7, #0]
   150d2:	1dbb      	adds	r3, r7, #6
   150d4:	7819      	ldrb	r1, [r3, #0]
   150d6:	1dfb      	adds	r3, r7, #7
   150d8:	781b      	ldrb	r3, [r3, #0]
   150da:	b25b      	sxtb	r3, r3
   150dc:	0018      	movs	r0, r3
   150de:	4b03      	ldr	r3, [pc, #12]	; (150ec <socket_event_handler+0x30>)
   150e0:	4798      	blx	r3
}
   150e2:	46c0      	nop			; (mov r8, r8)
   150e4:	46bd      	mov	sp, r7
   150e6:	b002      	add	sp, #8
   150e8:	bd80      	pop	{r7, pc}
   150ea:	46c0      	nop			; (mov r8, r8)
   150ec:	0002eb5d 	.word	0x0002eb5d

000150f0 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   150f0:	b580      	push	{r7, lr}
   150f2:	b082      	sub	sp, #8
   150f4:	af00      	add	r7, sp, #0
   150f6:	6078      	str	r0, [r7, #4]
   150f8:	6039      	str	r1, [r7, #0]
	mqtt_socket_resolve_handler(doamin_name, server_ip);
   150fa:	683a      	ldr	r2, [r7, #0]
   150fc:	687b      	ldr	r3, [r7, #4]
   150fe:	0011      	movs	r1, r2
   15100:	0018      	movs	r0, r3
   15102:	4b03      	ldr	r3, [pc, #12]	; (15110 <socket_resolve_handler+0x20>)
   15104:	4798      	blx	r3
}
   15106:	46c0      	nop			; (mov r8, r8)
   15108:	46bd      	mov	sp, r7
   1510a:	b002      	add	sp, #8
   1510c:	bd80      	pop	{r7, pc}
   1510e:	46c0      	nop			; (mov r8, r8)
   15110:	0002eb91 	.word	0x0002eb91

00015114 <SubscribeHandlerStatusTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerStatusTopic(MessageData *msgData)
{
   15114:	b590      	push	{r4, r7, lr}
   15116:	b085      	sub	sp, #20
   15118:	af00      	add	r7, sp, #0
   1511a:	6078      	str	r0, [r7, #4]
	uint8_t status;
	LogMessage(LOG_DEBUG_LVL,"\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   1511c:	687b      	ldr	r3, [r7, #4]
   1511e:	685b      	ldr	r3, [r3, #4]
   15120:	685a      	ldr	r2, [r3, #4]
   15122:	687b      	ldr	r3, [r7, #4]
   15124:	685b      	ldr	r3, [r3, #4]
   15126:	689b      	ldr	r3, [r3, #8]
   15128:	4919      	ldr	r1, [pc, #100]	; (15190 <SubscribeHandlerStatusTopic+0x7c>)
   1512a:	2001      	movs	r0, #1
   1512c:	4c19      	ldr	r4, [pc, #100]	; (15194 <SubscribeHandlerStatusTopic+0x80>)
   1512e:	47a0      	blx	r4
	//Will receive something of the style "rgb(222, 224, 189)"
	if (strncmp(msgData->message->payload, "status:", 7)== 0)
   15130:	687b      	ldr	r3, [r7, #4]
   15132:	681b      	ldr	r3, [r3, #0]
   15134:	689b      	ldr	r3, [r3, #8]
   15136:	4918      	ldr	r1, [pc, #96]	; (15198 <SubscribeHandlerStatusTopic+0x84>)
   15138:	2207      	movs	r2, #7
   1513a:	0018      	movs	r0, r3
   1513c:	4b17      	ldr	r3, [pc, #92]	; (1519c <SubscribeHandlerStatusTopic+0x88>)
   1513e:	4798      	blx	r3
   15140:	1e03      	subs	r3, r0, #0
   15142:	d121      	bne.n	15188 <SubscribeHandlerStatusTopic+0x74>
	{
		char *p = (char *)&msgData->message->payload[7];
   15144:	687b      	ldr	r3, [r7, #4]
   15146:	681b      	ldr	r3, [r3, #0]
   15148:	689b      	ldr	r3, [r3, #8]
   1514a:	3307      	adds	r3, #7
   1514c:	60fb      	str	r3, [r7, #12]
		status = p[0]-'0';
   1514e:	68fb      	ldr	r3, [r7, #12]
   15150:	781b      	ldrb	r3, [r3, #0]
   15152:	3b30      	subs	r3, #48	; 0x30
   15154:	b2da      	uxtb	r2, r3
   15156:	230b      	movs	r3, #11
   15158:	18fb      	adds	r3, r7, r3
   1515a:	701a      	strb	r2, [r3, #0]
// 		rgb[nb++] = strtol(p, &p, 10);
// 		if (*p != ',')
// 		break;
// 		p++; /* skip, */
// 	}
	LogMessage(LOG_DEBUG_LVL,"\r\nSTATUS Receive%d\r\n", status);
   1515c:	230b      	movs	r3, #11
   1515e:	18fb      	adds	r3, r7, r3
   15160:	781b      	ldrb	r3, [r3, #0]
   15162:	001a      	movs	r2, r3
   15164:	4b0e      	ldr	r3, [pc, #56]	; (151a0 <SubscribeHandlerStatusTopic+0x8c>)
   15166:	0019      	movs	r1, r3
   15168:	2001      	movs	r0, #1
   1516a:	4b0a      	ldr	r3, [pc, #40]	; (15194 <SubscribeHandlerStatusTopic+0x80>)
   1516c:	4798      	blx	r3
	if(pdTRUE == ControlAddStatusDataToQueue(&status))
   1516e:	230b      	movs	r3, #11
   15170:	18fb      	adds	r3, r7, r3
   15172:	0018      	movs	r0, r3
   15174:	4b0b      	ldr	r3, [pc, #44]	; (151a4 <SubscribeHandlerStatusTopic+0x90>)
   15176:	4798      	blx	r3
   15178:	0003      	movs	r3, r0
   1517a:	2b01      	cmp	r3, #1
   1517c:	d104      	bne.n	15188 <SubscribeHandlerStatusTopic+0x74>
	{
		LogMessage(LOG_DEBUG_LVL,"\r\nSent status to control!\r\n");
   1517e:	4b0a      	ldr	r3, [pc, #40]	; (151a8 <SubscribeHandlerStatusTopic+0x94>)
   15180:	0019      	movs	r1, r3
   15182:	2001      	movs	r0, #1
   15184:	4b03      	ldr	r3, [pc, #12]	; (15194 <SubscribeHandlerStatusTopic+0x80>)
   15186:	4798      	blx	r3
	}
	//UIChangeColors(rgb[0],rgb[1], rgb[2]);
	}
}
   15188:	46c0      	nop			; (mov r8, r8)
   1518a:	46bd      	mov	sp, r7
   1518c:	b005      	add	sp, #20
   1518e:	bd90      	pop	{r4, r7, pc}
   15190:	00035698 	.word	0x00035698
   15194:	0001d235 	.word	0x0001d235
   15198:	000356a0 	.word	0x000356a0
   1519c:	00033dc5 	.word	0x00033dc5
   151a0:	000356a8 	.word	0x000356a8
   151a4:	000141a5 	.word	0x000141a5
   151a8:	000356c0 	.word	0x000356c0

000151ac <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   151ac:	b590      	push	{r4, r7, lr}
   151ae:	b08b      	sub	sp, #44	; 0x2c
   151b0:	af00      	add	r7, sp, #0
   151b2:	6078      	str	r0, [r7, #4]
	struct GameDataPacket game;
	memset(game.game, 0xff, sizeof(game.game));
   151b4:	230c      	movs	r3, #12
   151b6:	18fb      	adds	r3, r7, r3
   151b8:	2214      	movs	r2, #20
   151ba:	21ff      	movs	r1, #255	; 0xff
   151bc:	0018      	movs	r0, r3
   151be:	4b48      	ldr	r3, [pc, #288]	; (152e0 <SubscribeHandlerGameTopic+0x134>)
   151c0:	4798      	blx	r3

	//Parse input. The start string must be '{"game":['
	if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0)
   151c2:	687b      	ldr	r3, [r7, #4]
   151c4:	681b      	ldr	r3, [r3, #0]
   151c6:	689b      	ldr	r3, [r3, #8]
   151c8:	4946      	ldr	r1, [pc, #280]	; (152e4 <SubscribeHandlerGameTopic+0x138>)
   151ca:	2209      	movs	r2, #9
   151cc:	0018      	movs	r0, r3
   151ce:	4b46      	ldr	r3, [pc, #280]	; (152e8 <SubscribeHandlerGameTopic+0x13c>)
   151d0:	4798      	blx	r3
   151d2:	1e03      	subs	r3, r0, #0
   151d4:	d166      	bne.n	152a4 <SubscribeHandlerGameTopic+0xf8>
	{
		LogMessage(LOG_DEBUG_LVL,"\r\nGame message received!\r\n");
   151d6:	4b45      	ldr	r3, [pc, #276]	; (152ec <SubscribeHandlerGameTopic+0x140>)
   151d8:	0019      	movs	r1, r3
   151da:	2001      	movs	r0, #1
   151dc:	4b44      	ldr	r3, [pc, #272]	; (152f0 <SubscribeHandlerGameTopic+0x144>)
   151de:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,"\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   151e0:	687b      	ldr	r3, [r7, #4]
   151e2:	685b      	ldr	r3, [r3, #4]
   151e4:	685a      	ldr	r2, [r3, #4]
   151e6:	687b      	ldr	r3, [r7, #4]
   151e8:	685b      	ldr	r3, [r3, #4]
   151ea:	689b      	ldr	r3, [r3, #8]
   151ec:	4941      	ldr	r1, [pc, #260]	; (152f4 <SubscribeHandlerGameTopic+0x148>)
   151ee:	2001      	movs	r0, #1
   151f0:	4c3f      	ldr	r4, [pc, #252]	; (152f0 <SubscribeHandlerGameTopic+0x144>)
   151f2:	47a0      	blx	r4
		LogMessage(LOG_DEBUG_LVL,"%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);
   151f4:	687b      	ldr	r3, [r7, #4]
   151f6:	681b      	ldr	r3, [r3, #0]
   151f8:	68da      	ldr	r2, [r3, #12]
   151fa:	687b      	ldr	r3, [r7, #4]
   151fc:	681b      	ldr	r3, [r3, #0]
   151fe:	689b      	ldr	r3, [r3, #8]
   15200:	493d      	ldr	r1, [pc, #244]	; (152f8 <SubscribeHandlerGameTopic+0x14c>)
   15202:	2001      	movs	r0, #1
   15204:	4c3a      	ldr	r4, [pc, #232]	; (152f0 <SubscribeHandlerGameTopic+0x144>)
   15206:	47a0      	blx	r4

		int nb = 0;
   15208:	2300      	movs	r3, #0
   1520a:	627b      	str	r3, [r7, #36]	; 0x24
		char *p = &msgData->message->payload[9];
   1520c:	687b      	ldr	r3, [r7, #4]
   1520e:	681b      	ldr	r3, [r3, #0]
   15210:	689b      	ldr	r3, [r3, #8]
   15212:	3309      	adds	r3, #9
   15214:	60bb      	str	r3, [r7, #8]
		while (nb < GAME_SIZE && *p) {
   15216:	e015      	b.n	15244 <SubscribeHandlerGameTopic+0x98>
			game.game[nb++] = strtol(p, &p, 10);
   15218:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   1521a:	1c63      	adds	r3, r4, #1
   1521c:	627b      	str	r3, [r7, #36]	; 0x24
   1521e:	68bb      	ldr	r3, [r7, #8]
   15220:	2208      	movs	r2, #8
   15222:	18b9      	adds	r1, r7, r2
   15224:	220a      	movs	r2, #10
   15226:	0018      	movs	r0, r3
   15228:	4b34      	ldr	r3, [pc, #208]	; (152fc <SubscribeHandlerGameTopic+0x150>)
   1522a:	4798      	blx	r3
   1522c:	0003      	movs	r3, r0
   1522e:	b2da      	uxtb	r2, r3
   15230:	230c      	movs	r3, #12
   15232:	18fb      	adds	r3, r7, r3
   15234:	551a      	strb	r2, [r3, r4]
			if (*p != ',')
   15236:	68bb      	ldr	r3, [r7, #8]
   15238:	781b      	ldrb	r3, [r3, #0]
   1523a:	2b2c      	cmp	r3, #44	; 0x2c
   1523c:	d10a      	bne.n	15254 <SubscribeHandlerGameTopic+0xa8>
			break;
			p++; /* skip, */
   1523e:	68bb      	ldr	r3, [r7, #8]
   15240:	3301      	adds	r3, #1
   15242:	60bb      	str	r3, [r7, #8]
		while (nb < GAME_SIZE && *p) {
   15244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15246:	2b13      	cmp	r3, #19
   15248:	dc05      	bgt.n	15256 <SubscribeHandlerGameTopic+0xaa>
   1524a:	68bb      	ldr	r3, [r7, #8]
   1524c:	781b      	ldrb	r3, [r3, #0]
   1524e:	2b00      	cmp	r3, #0
   15250:	d1e2      	bne.n	15218 <SubscribeHandlerGameTopic+0x6c>
   15252:	e000      	b.n	15256 <SubscribeHandlerGameTopic+0xaa>
			break;
   15254:	46c0      	nop			; (mov r8, r8)
		}
		LogMessage(LOG_DEBUG_LVL,"\r\nParsed Command: ");
   15256:	4b2a      	ldr	r3, [pc, #168]	; (15300 <SubscribeHandlerGameTopic+0x154>)
   15258:	0019      	movs	r1, r3
   1525a:	2001      	movs	r0, #1
   1525c:	4b24      	ldr	r3, [pc, #144]	; (152f0 <SubscribeHandlerGameTopic+0x144>)
   1525e:	4798      	blx	r3
		for(int i = 0; i < GAME_SIZE; i++)
   15260:	2300      	movs	r3, #0
   15262:	623b      	str	r3, [r7, #32]
   15264:	e00d      	b.n	15282 <SubscribeHandlerGameTopic+0xd6>
		{
			LogMessage(LOG_DEBUG_LVL,"%d,", game.game[i]);
   15266:	230c      	movs	r3, #12
   15268:	18fa      	adds	r2, r7, r3
   1526a:	6a3b      	ldr	r3, [r7, #32]
   1526c:	18d3      	adds	r3, r2, r3
   1526e:	781b      	ldrb	r3, [r3, #0]
   15270:	001a      	movs	r2, r3
   15272:	4b24      	ldr	r3, [pc, #144]	; (15304 <SubscribeHandlerGameTopic+0x158>)
   15274:	0019      	movs	r1, r3
   15276:	2001      	movs	r0, #1
   15278:	4b1d      	ldr	r3, [pc, #116]	; (152f0 <SubscribeHandlerGameTopic+0x144>)
   1527a:	4798      	blx	r3
		for(int i = 0; i < GAME_SIZE; i++)
   1527c:	6a3b      	ldr	r3, [r7, #32]
   1527e:	3301      	adds	r3, #1
   15280:	623b      	str	r3, [r7, #32]
   15282:	6a3b      	ldr	r3, [r7, #32]
   15284:	2b13      	cmp	r3, #19
   15286:	ddee      	ble.n	15266 <SubscribeHandlerGameTopic+0xba>
		}

		if(pdTRUE == ControlAddGameData(&game))
   15288:	230c      	movs	r3, #12
   1528a:	18fb      	adds	r3, r7, r3
   1528c:	0018      	movs	r0, r3
   1528e:	4b1e      	ldr	r3, [pc, #120]	; (15308 <SubscribeHandlerGameTopic+0x15c>)
   15290:	4798      	blx	r3
   15292:	0003      	movs	r3, r0
   15294:	2b01      	cmp	r3, #1
   15296:	d11e      	bne.n	152d6 <SubscribeHandlerGameTopic+0x12a>
		{
			LogMessage(LOG_DEBUG_LVL,"\r\nSent play to control!\r\n");
   15298:	4b1c      	ldr	r3, [pc, #112]	; (1530c <SubscribeHandlerGameTopic+0x160>)
   1529a:	0019      	movs	r1, r3
   1529c:	2001      	movs	r0, #1
   1529e:	4b14      	ldr	r3, [pc, #80]	; (152f0 <SubscribeHandlerGameTopic+0x144>)
   152a0:	4798      	blx	r3
	}




}
   152a2:	e018      	b.n	152d6 <SubscribeHandlerGameTopic+0x12a>
		LogMessage(LOG_DEBUG_LVL,"\r\nGame message received but not understood!\r\n");
   152a4:	4b1a      	ldr	r3, [pc, #104]	; (15310 <SubscribeHandlerGameTopic+0x164>)
   152a6:	0019      	movs	r1, r3
   152a8:	2001      	movs	r0, #1
   152aa:	4b11      	ldr	r3, [pc, #68]	; (152f0 <SubscribeHandlerGameTopic+0x144>)
   152ac:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,"\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   152ae:	687b      	ldr	r3, [r7, #4]
   152b0:	685b      	ldr	r3, [r3, #4]
   152b2:	685a      	ldr	r2, [r3, #4]
   152b4:	687b      	ldr	r3, [r7, #4]
   152b6:	685b      	ldr	r3, [r3, #4]
   152b8:	689b      	ldr	r3, [r3, #8]
   152ba:	490e      	ldr	r1, [pc, #56]	; (152f4 <SubscribeHandlerGameTopic+0x148>)
   152bc:	2001      	movs	r0, #1
   152be:	4c0c      	ldr	r4, [pc, #48]	; (152f0 <SubscribeHandlerGameTopic+0x144>)
   152c0:	47a0      	blx	r4
		LogMessage(LOG_DEBUG_LVL,"%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);
   152c2:	687b      	ldr	r3, [r7, #4]
   152c4:	681b      	ldr	r3, [r3, #0]
   152c6:	68da      	ldr	r2, [r3, #12]
   152c8:	687b      	ldr	r3, [r7, #4]
   152ca:	681b      	ldr	r3, [r3, #0]
   152cc:	689b      	ldr	r3, [r3, #8]
   152ce:	490a      	ldr	r1, [pc, #40]	; (152f8 <SubscribeHandlerGameTopic+0x14c>)
   152d0:	2001      	movs	r0, #1
   152d2:	4c07      	ldr	r4, [pc, #28]	; (152f0 <SubscribeHandlerGameTopic+0x144>)
   152d4:	47a0      	blx	r4
}
   152d6:	46c0      	nop			; (mov r8, r8)
   152d8:	46bd      	mov	sp, r7
   152da:	b00b      	add	sp, #44	; 0x2c
   152dc:	bd90      	pop	{r4, r7, pc}
   152de:	46c0      	nop			; (mov r8, r8)
   152e0:	000339ff 	.word	0x000339ff
   152e4:	000356dc 	.word	0x000356dc
   152e8:	00033dc5 	.word	0x00033dc5
   152ec:	000356e8 	.word	0x000356e8
   152f0:	0001d235 	.word	0x0001d235
   152f4:	00035698 	.word	0x00035698
   152f8:	00035704 	.word	0x00035704
   152fc:	00033f71 	.word	0x00033f71
   15300:	0003570c 	.word	0x0003570c
   15304:	00035720 	.word	0x00035720
   15308:	00014179 	.word	0x00014179
   1530c:	00035724 	.word	0x00035724
   15310:	00035740 	.word	0x00035740

00015314 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   15314:	b590      	push	{r4, r7, lr}
   15316:	b08b      	sub	sp, #44	; 0x2c
   15318:	af06      	add	r7, sp, #24
   1531a:	60f8      	str	r0, [r7, #12]
   1531c:	60b9      	str	r1, [r7, #8]
   1531e:	607a      	str	r2, [r7, #4]
	switch (type) {
   15320:	68bb      	ldr	r3, [r7, #8]
   15322:	2b01      	cmp	r3, #1
   15324:	d03b      	beq.n	1539e <mqtt_callback+0x8a>
   15326:	2b05      	cmp	r3, #5
   15328:	d058      	beq.n	153dc <mqtt_callback+0xc8>
   1532a:	2b00      	cmp	r3, #0
   1532c:	d000      	beq.n	15330 <mqtt_callback+0x1c>
		/* Stop timer and USART callback. */
		LogMessage(LOG_DEBUG_LVL,"MQTT disconnected\r\n");
		//usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
   1532e:	e05b      	b.n	153e8 <mqtt_callback+0xd4>
		if (data->sock_connected.result >= 0) {
   15330:	687b      	ldr	r3, [r7, #4]
   15332:	681b      	ldr	r3, [r3, #0]
   15334:	2b00      	cmp	r3, #0
   15336:	db25      	blt.n	15384 <mqtt_callback+0x70>
			LogMessage(LOG_DEBUG_LVL,"\r\nConnecting to Broker...");
   15338:	4b2d      	ldr	r3, [pc, #180]	; (153f0 <mqtt_callback+0xdc>)
   1533a:	0019      	movs	r1, r3
   1533c:	2001      	movs	r0, #1
   1533e:	4b2d      	ldr	r3, [pc, #180]	; (153f4 <mqtt_callback+0xe0>)
   15340:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
   15342:	492d      	ldr	r1, [pc, #180]	; (153f8 <mqtt_callback+0xe4>)
   15344:	4a2d      	ldr	r2, [pc, #180]	; (153fc <mqtt_callback+0xe8>)
   15346:	68f8      	ldr	r0, [r7, #12]
   15348:	2300      	movs	r3, #0
   1534a:	9305      	str	r3, [sp, #20]
   1534c:	2300      	movs	r3, #0
   1534e:	9304      	str	r3, [sp, #16]
   15350:	2300      	movs	r3, #0
   15352:	9303      	str	r3, [sp, #12]
   15354:	2300      	movs	r3, #0
   15356:	9302      	str	r3, [sp, #8]
   15358:	2300      	movs	r3, #0
   1535a:	9301      	str	r3, [sp, #4]
   1535c:	4b27      	ldr	r3, [pc, #156]	; (153fc <mqtt_callback+0xe8>)
   1535e:	9300      	str	r3, [sp, #0]
   15360:	000b      	movs	r3, r1
   15362:	2101      	movs	r1, #1
   15364:	4c26      	ldr	r4, [pc, #152]	; (15400 <mqtt_callback+0xec>)
   15366:	47a0      	blx	r4
   15368:	1e03      	subs	r3, r0, #0
   1536a:	d005      	beq.n	15378 <mqtt_callback+0x64>
				LogMessage(LOG_DEBUG_LVL,"MQTT  Error - NOT Connected to broker\r\n");
   1536c:	4b25      	ldr	r3, [pc, #148]	; (15404 <mqtt_callback+0xf0>)
   1536e:	0019      	movs	r1, r3
   15370:	2001      	movs	r0, #1
   15372:	4b20      	ldr	r3, [pc, #128]	; (153f4 <mqtt_callback+0xe0>)
   15374:	4798      	blx	r3
	break;
   15376:	e037      	b.n	153e8 <mqtt_callback+0xd4>
				LogMessage(LOG_DEBUG_LVL,"MQTT Connected to broker\r\n");
   15378:	4b23      	ldr	r3, [pc, #140]	; (15408 <mqtt_callback+0xf4>)
   1537a:	0019      	movs	r1, r3
   1537c:	2001      	movs	r0, #1
   1537e:	4b1d      	ldr	r3, [pc, #116]	; (153f4 <mqtt_callback+0xe0>)
   15380:	4798      	blx	r3
	break;
   15382:	e031      	b.n	153e8 <mqtt_callback+0xd4>
			LogMessage(LOG_DEBUG_LVL,"Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   15384:	4a21      	ldr	r2, [pc, #132]	; (1540c <mqtt_callback+0xf8>)
   15386:	4b22      	ldr	r3, [pc, #136]	; (15410 <mqtt_callback+0xfc>)
   15388:	0019      	movs	r1, r3
   1538a:	2001      	movs	r0, #1
   1538c:	4b19      	ldr	r3, [pc, #100]	; (153f4 <mqtt_callback+0xe0>)
   1538e:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   15390:	4a1e      	ldr	r2, [pc, #120]	; (1540c <mqtt_callback+0xf8>)
   15392:	68fb      	ldr	r3, [r7, #12]
   15394:	0011      	movs	r1, r2
   15396:	0018      	movs	r0, r3
   15398:	4b1e      	ldr	r3, [pc, #120]	; (15414 <mqtt_callback+0x100>)
   1539a:	4798      	blx	r3
	break;
   1539c:	e024      	b.n	153e8 <mqtt_callback+0xd4>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   1539e:	687b      	ldr	r3, [r7, #4]
   153a0:	781b      	ldrb	r3, [r3, #0]
   153a2:	2b00      	cmp	r3, #0
   153a4:	d111      	bne.n	153ca <mqtt_callback+0xb6>
			mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   153a6:	4b1c      	ldr	r3, [pc, #112]	; (15418 <mqtt_callback+0x104>)
   153a8:	491c      	ldr	r1, [pc, #112]	; (1541c <mqtt_callback+0x108>)
   153aa:	68f8      	ldr	r0, [r7, #12]
   153ac:	2202      	movs	r2, #2
   153ae:	4c1c      	ldr	r4, [pc, #112]	; (15420 <mqtt_callback+0x10c>)
   153b0:	47a0      	blx	r4
			mqtt_subscribe(module_inst, STATUS_TOPIC, 2, SubscribeHandlerStatusTopic);
   153b2:	4b1c      	ldr	r3, [pc, #112]	; (15424 <mqtt_callback+0x110>)
   153b4:	491c      	ldr	r1, [pc, #112]	; (15428 <mqtt_callback+0x114>)
   153b6:	68f8      	ldr	r0, [r7, #12]
   153b8:	2202      	movs	r2, #2
   153ba:	4c19      	ldr	r4, [pc, #100]	; (15420 <mqtt_callback+0x10c>)
   153bc:	47a0      	blx	r4
			LogMessage(LOG_DEBUG_LVL,"MQTT Connected\r\n");
   153be:	4b1b      	ldr	r3, [pc, #108]	; (1542c <mqtt_callback+0x118>)
   153c0:	0019      	movs	r1, r3
   153c2:	2001      	movs	r0, #1
   153c4:	4b0b      	ldr	r3, [pc, #44]	; (153f4 <mqtt_callback+0xe0>)
   153c6:	4798      	blx	r3
		break;
   153c8:	e00e      	b.n	153e8 <mqtt_callback+0xd4>
			LogMessage(LOG_DEBUG_LVL,"MQTT broker decline your access! error code %d\r\n", data->connected.result);
   153ca:	687b      	ldr	r3, [r7, #4]
   153cc:	781b      	ldrb	r3, [r3, #0]
   153ce:	001a      	movs	r2, r3
   153d0:	4b17      	ldr	r3, [pc, #92]	; (15430 <mqtt_callback+0x11c>)
   153d2:	0019      	movs	r1, r3
   153d4:	2001      	movs	r0, #1
   153d6:	4b07      	ldr	r3, [pc, #28]	; (153f4 <mqtt_callback+0xe0>)
   153d8:	4798      	blx	r3
		break;
   153da:	e005      	b.n	153e8 <mqtt_callback+0xd4>
		LogMessage(LOG_DEBUG_LVL,"MQTT disconnected\r\n");
   153dc:	4b15      	ldr	r3, [pc, #84]	; (15434 <mqtt_callback+0x120>)
   153de:	0019      	movs	r1, r3
   153e0:	2001      	movs	r0, #1
   153e2:	4b04      	ldr	r3, [pc, #16]	; (153f4 <mqtt_callback+0xe0>)
   153e4:	4798      	blx	r3
		break;
   153e6:	46c0      	nop			; (mov r8, r8)
}
   153e8:	46c0      	nop			; (mov r8, r8)
   153ea:	46bd      	mov	sp, r7
   153ec:	b005      	add	sp, #20
   153ee:	bd90      	pop	{r4, r7, pc}
   153f0:	000357a0 	.word	0x000357a0
   153f4:	0001d235 	.word	0x0001d235
   153f8:	000357bc 	.word	0x000357bc
   153fc:	000357d0 	.word	0x000357d0
   15400:	0002ebfd 	.word	0x0002ebfd
   15404:	000357dc 	.word	0x000357dc
   15408:	00035804 	.word	0x00035804
   1540c:	00035108 	.word	0x00035108
   15410:	00035820 	.word	0x00035820
   15414:	0002ebb5 	.word	0x0002ebb5
   15418:	000151ad 	.word	0x000151ad
   1541c:	00035858 	.word	0x00035858
   15420:	0002ed9d 	.word	0x0002ed9d
   15424:	00015115 	.word	0x00015115
   15428:	00035870 	.word	0x00035870
   1542c:	00035888 	.word	0x00035888
   15430:	0003589c 	.word	0x0003589c
   15434:	000358d0 	.word	0x000358d0

00015438 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   15438:	b580      	push	{r7, lr}
   1543a:	b088      	sub	sp, #32
   1543c:	af00      	add	r7, sp, #0
	struct mqtt_config mqtt_conf;
	int result;

	mqtt_get_config_defaults(&mqtt_conf);
   1543e:	1d3b      	adds	r3, r7, #4
   15440:	0018      	movs	r0, r3
   15442:	4b1f      	ldr	r3, [pc, #124]	; (154c0 <configure_mqtt+0x88>)
   15444:	4798      	blx	r3
	/* To use the MQTT service, it is necessary to always set the buffer and the timer. */
	mqtt_conf.read_buffer = mqtt_read_buffer;
   15446:	1d3b      	adds	r3, r7, #4
   15448:	4a1e      	ldr	r2, [pc, #120]	; (154c4 <configure_mqtt+0x8c>)
   1544a:	609a      	str	r2, [r3, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1544c:	1d3b      	adds	r3, r7, #4
   1544e:	2280      	movs	r2, #128	; 0x80
   15450:	0092      	lsls	r2, r2, #2
   15452:	60da      	str	r2, [r3, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
   15454:	1d3b      	adds	r3, r7, #4
   15456:	4a1c      	ldr	r2, [pc, #112]	; (154c8 <configure_mqtt+0x90>)
   15458:	611a      	str	r2, [r3, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1545a:	1d3b      	adds	r3, r7, #4
   1545c:	2280      	movs	r2, #128	; 0x80
   1545e:	0092      	lsls	r2, r2, #2
   15460:	615a      	str	r2, [r3, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
   15462:	1d3b      	adds	r3, r7, #4
   15464:	4a19      	ldr	r2, [pc, #100]	; (154cc <configure_mqtt+0x94>)
   15466:	801a      	strh	r2, [r3, #0]
	mqtt_conf.keep_alive = 6000;
   15468:	1d3b      	adds	r3, r7, #4
   1546a:	4a19      	ldr	r2, [pc, #100]	; (154d0 <configure_mqtt+0x98>)
   1546c:	809a      	strh	r2, [r3, #4]
	
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   1546e:	1d3a      	adds	r2, r7, #4
   15470:	4b18      	ldr	r3, [pc, #96]	; (154d4 <configure_mqtt+0x9c>)
   15472:	0011      	movs	r1, r2
   15474:	0018      	movs	r0, r3
   15476:	4b18      	ldr	r3, [pc, #96]	; (154d8 <configure_mqtt+0xa0>)
   15478:	4798      	blx	r3
   1547a:	0003      	movs	r3, r0
   1547c:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
   1547e:	69fb      	ldr	r3, [r7, #28]
   15480:	2b00      	cmp	r3, #0
   15482:	da06      	bge.n	15492 <configure_mqtt+0x5a>
		LogMessage(LOG_DEBUG_LVL,"MQTT initialization failed. Error code is (%d)\r\n", result);
   15484:	69fa      	ldr	r2, [r7, #28]
   15486:	4b15      	ldr	r3, [pc, #84]	; (154dc <configure_mqtt+0xa4>)
   15488:	0019      	movs	r1, r3
   1548a:	2001      	movs	r0, #1
   1548c:	4b14      	ldr	r3, [pc, #80]	; (154e0 <configure_mqtt+0xa8>)
   1548e:	4798      	blx	r3
		while (1) {
   15490:	e7fe      	b.n	15490 <configure_mqtt+0x58>
		}
	}

	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   15492:	4a14      	ldr	r2, [pc, #80]	; (154e4 <configure_mqtt+0xac>)
   15494:	4b0f      	ldr	r3, [pc, #60]	; (154d4 <configure_mqtt+0x9c>)
   15496:	0011      	movs	r1, r2
   15498:	0018      	movs	r0, r3
   1549a:	4b13      	ldr	r3, [pc, #76]	; (154e8 <configure_mqtt+0xb0>)
   1549c:	4798      	blx	r3
   1549e:	0003      	movs	r3, r0
   154a0:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
   154a2:	69fb      	ldr	r3, [r7, #28]
   154a4:	2b00      	cmp	r3, #0
   154a6:	da06      	bge.n	154b6 <configure_mqtt+0x7e>
		LogMessage(LOG_DEBUG_LVL,"MQTT register callback failed. Error code is (%d)\r\n", result);
   154a8:	69fa      	ldr	r2, [r7, #28]
   154aa:	4b10      	ldr	r3, [pc, #64]	; (154ec <configure_mqtt+0xb4>)
   154ac:	0019      	movs	r1, r3
   154ae:	2001      	movs	r0, #1
   154b0:	4b0b      	ldr	r3, [pc, #44]	; (154e0 <configure_mqtt+0xa8>)
   154b2:	4798      	blx	r3
		while (1) {
   154b4:	e7fe      	b.n	154b4 <configure_mqtt+0x7c>
		}
	}
}
   154b6:	46c0      	nop			; (mov r8, r8)
   154b8:	46bd      	mov	sp, r7
   154ba:	b008      	add	sp, #32
   154bc:	bd80      	pop	{r7, pc}
   154be:	46c0      	nop			; (mov r8, r8)
   154c0:	0002eaf5 	.word	0x0002eaf5
   154c4:	200007fc 	.word	0x200007fc
   154c8:	200009fc 	.word	0x200009fc
   154cc:	0000075b 	.word	0x0000075b
   154d0:	00001770 	.word	0x00001770
   154d4:	200007c4 	.word	0x200007c4
   154d8:	0002ea45 	.word	0x0002ea45
   154dc:	000358e4 	.word	0x000358e4
   154e0:	0001d235 	.word	0x0001d235
   154e4:	00015315 	.word	0x00015315
   154e8:	0002eb35 	.word	0x0002eb35
   154ec:	00035918 	.word	0x00035918

000154f0 <configure_extint_channel>:

//SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   154f0:	b580      	push	{r7, lr}
   154f2:	b084      	sub	sp, #16
   154f4:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   154f6:	1d3b      	adds	r3, r7, #4
   154f8:	0018      	movs	r0, r3
   154fa:	4b0b      	ldr	r3, [pc, #44]	; (15528 <configure_extint_channel+0x38>)
   154fc:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
   154fe:	1d3b      	adds	r3, r7, #4
   15500:	2237      	movs	r2, #55	; 0x37
   15502:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
   15504:	1d3b      	adds	r3, r7, #4
   15506:	2200      	movs	r2, #0
   15508:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   1550a:	1d3b      	adds	r3, r7, #4
   1550c:	2201      	movs	r2, #1
   1550e:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   15510:	1d3b      	adds	r3, r7, #4
   15512:	2202      	movs	r2, #2
   15514:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   15516:	1d3b      	adds	r3, r7, #4
   15518:	0019      	movs	r1, r3
   1551a:	2007      	movs	r0, #7
   1551c:	4b03      	ldr	r3, [pc, #12]	; (1552c <configure_extint_channel+0x3c>)
   1551e:	4798      	blx	r3
}
   15520:	46c0      	nop			; (mov r8, r8)
   15522:	46bd      	mov	sp, r7
   15524:	b004      	add	sp, #16
   15526:	bd80      	pop	{r7, pc}
   15528:	00025c2d 	.word	0x00025c2d
   1552c:	00025c61 	.word	0x00025c61

00015530 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   15530:	b580      	push	{r7, lr}
   15532:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback,
   15534:	4b06      	ldr	r3, [pc, #24]	; (15550 <configure_extint_callbacks+0x20>)
   15536:	2200      	movs	r2, #0
   15538:	2107      	movs	r1, #7
   1553a:	0018      	movs	r0, r3
   1553c:	4b05      	ldr	r3, [pc, #20]	; (15554 <configure_extint_callbacks+0x24>)
   1553e:	4798      	blx	r3
            BUTTON_0_EIC_LINE,
            EXTINT_CALLBACK_TYPE_DETECT);
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
   15540:	2100      	movs	r1, #0
   15542:	2007      	movs	r0, #7
   15544:	4b04      	ldr	r3, [pc, #16]	; (15558 <configure_extint_callbacks+0x28>)
   15546:	4798      	blx	r3
            EXTINT_CALLBACK_TYPE_DETECT);
}
   15548:	46c0      	nop			; (mov r8, r8)
   1554a:	46bd      	mov	sp, r7
   1554c:	bd80      	pop	{r7, pc}
   1554e:	46c0      	nop			; (mov r8, r8)
   15550:	0001555d 	.word	0x0001555d
   15554:	0002582d 	.word	0x0002582d
   15558:	00025891 	.word	0x00025891

0001555c <extint_detection_callback>:


volatile bool isPressed = false;
void extint_detection_callback(void)
{
   1555c:	b580      	push	{r7, lr}
   1555e:	af00      	add	r7, sp, #0
	//Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
	temperature++;
   15560:	4b08      	ldr	r3, [pc, #32]	; (15584 <extint_detection_callback+0x28>)
   15562:	681b      	ldr	r3, [r3, #0]
   15564:	1c5a      	adds	r2, r3, #1
   15566:	4b07      	ldr	r3, [pc, #28]	; (15584 <extint_detection_callback+0x28>)
   15568:	601a      	str	r2, [r3, #0]
	if (temperature > 40) temperature = 1;
   1556a:	4b06      	ldr	r3, [pc, #24]	; (15584 <extint_detection_callback+0x28>)
   1556c:	681b      	ldr	r3, [r3, #0]
   1556e:	2b28      	cmp	r3, #40	; 0x28
   15570:	d902      	bls.n	15578 <extint_detection_callback+0x1c>
   15572:	4b04      	ldr	r3, [pc, #16]	; (15584 <extint_detection_callback+0x28>)
   15574:	2201      	movs	r2, #1
   15576:	601a      	str	r2, [r3, #0]
	//snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temperature);imuDataVar
	isPressed = true;
   15578:	4b03      	ldr	r3, [pc, #12]	; (15588 <extint_detection_callback+0x2c>)
   1557a:	2201      	movs	r2, #1
   1557c:	701a      	strb	r2, [r3, #0]
	
}
   1557e:	46c0      	nop			; (mov r8, r8)
   15580:	46bd      	mov	sp, r7
   15582:	bd80      	pop	{r7, pc}
   15584:	20000058 	.word	0x20000058
   15588:	20000bfc 	.word	0x20000bfc

0001558c <HTTP_DownloadFileInit>:
* @brief	Routine to initialize HTTP download of the OTAU file
* @note

*****************************************************************************/
static void HTTP_DownloadFileInit(void)
{
   1558c:	b580      	push	{r7, lr}
   1558e:	af00      	add	r7, sp, #0
	
	if(mqtt_disconnect(&mqtt_inst, main_mqtt_broker))
   15590:	4a15      	ldr	r2, [pc, #84]	; (155e8 <HTTP_DownloadFileInit+0x5c>)
   15592:	4b16      	ldr	r3, [pc, #88]	; (155ec <HTTP_DownloadFileInit+0x60>)
   15594:	0011      	movs	r1, r2
   15596:	0018      	movs	r0, r3
   15598:	4b15      	ldr	r3, [pc, #84]	; (155f0 <HTTP_DownloadFileInit+0x64>)
   1559a:	4798      	blx	r3
   1559c:	1e03      	subs	r3, r0, #0
   1559e:	d008      	beq.n	155b2 <HTTP_DownloadFileInit+0x26>
	{
		LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   155a0:	4b14      	ldr	r3, [pc, #80]	; (155f4 <HTTP_DownloadFileInit+0x68>)
   155a2:	0019      	movs	r1, r3
   155a4:	2001      	movs	r0, #1
   155a6:	4b14      	ldr	r3, [pc, #80]	; (155f8 <HTTP_DownloadFileInit+0x6c>)
   155a8:	4798      	blx	r3
	}
	while((mqtt_inst.isConnected))
   155aa:	e002      	b.n	155b2 <HTTP_DownloadFileInit+0x26>
	{
		m2m_wifi_handle_events(NULL);
   155ac:	2000      	movs	r0, #0
   155ae:	4b13      	ldr	r3, [pc, #76]	; (155fc <HTTP_DownloadFileInit+0x70>)
   155b0:	4798      	blx	r3
	while((mqtt_inst.isConnected))
   155b2:	4b0e      	ldr	r3, [pc, #56]	; (155ec <HTTP_DownloadFileInit+0x60>)
   155b4:	2234      	movs	r2, #52	; 0x34
   155b6:	5c9b      	ldrb	r3, [r3, r2]
   155b8:	2b00      	cmp	r3, #0
   155ba:	d1f7      	bne.n	155ac <HTTP_DownloadFileInit+0x20>
	}
	socketDeinit();
   155bc:	4b10      	ldr	r3, [pc, #64]	; (15600 <HTTP_DownloadFileInit+0x74>)
   155be:	4798      	blx	r3
	//DOWNLOAD A FILE
	do_download_flag = true;
   155c0:	4b10      	ldr	r3, [pc, #64]	; (15604 <HTTP_DownloadFileInit+0x78>)
   155c2:	2201      	movs	r2, #1
   155c4:	701a      	strb	r2, [r3, #0]
	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
   155c6:	4a10      	ldr	r2, [pc, #64]	; (15608 <HTTP_DownloadFileInit+0x7c>)
   155c8:	4b10      	ldr	r3, [pc, #64]	; (1560c <HTTP_DownloadFileInit+0x80>)
   155ca:	0011      	movs	r1, r2
   155cc:	0018      	movs	r0, r3
   155ce:	4b10      	ldr	r3, [pc, #64]	; (15610 <HTTP_DownloadFileInit+0x84>)
   155d0:	4798      	blx	r3
	/* Initialize socket module. */
	socketInit();
   155d2:	4b10      	ldr	r3, [pc, #64]	; (15614 <HTTP_DownloadFileInit+0x88>)
   155d4:	4798      	blx	r3
	


	start_download();
   155d6:	4b10      	ldr	r3, [pc, #64]	; (15618 <HTTP_DownloadFileInit+0x8c>)
   155d8:	4798      	blx	r3
	wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   155da:	4b10      	ldr	r3, [pc, #64]	; (1561c <HTTP_DownloadFileInit+0x90>)
   155dc:	2203      	movs	r2, #3
   155de:	701a      	strb	r2, [r3, #0]
}
   155e0:	46c0      	nop			; (mov r8, r8)
   155e2:	46bd      	mov	sp, r7
   155e4:	bd80      	pop	{r7, pc}
   155e6:	46c0      	nop			; (mov r8, r8)
   155e8:	00035108 	.word	0x00035108
   155ec:	200007c4 	.word	0x200007c4
   155f0:	0002ece9 	.word	0x0002ece9
   155f4:	00035520 	.word	0x00035520
   155f8:	0001d235 	.word	0x0001d235
   155fc:	0002131d 	.word	0x0002131d
   15600:	000248d9 	.word	0x000248d9
   15604:	20000564 	.word	0x20000564
   15608:	00014d65 	.word	0x00014d65
   1560c:	00014d31 	.word	0x00014d31
   15610:	00024921 	.word	0x00024921
   15614:	00024889 	.word	0x00024889
   15618:	00014959 	.word	0x00014959
   1561c:	20000558 	.word	0x20000558

00015620 <HTTP_DownloadFileTransaction>:
* @brief	Routine to handle the HTTP transaction of downloading a file
* @note

*****************************************************************************/
static void HTTP_DownloadFileTransaction(void)
{
   15620:	b590      	push	{r4, r7, lr}
   15622:	b085      	sub	sp, #20
   15624:	af00      	add	r7, sp, #0

	/* Connect to router. */
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   15626:	e006      	b.n	15636 <HTTP_DownloadFileTransaction+0x16>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
   15628:	2000      	movs	r0, #0
   1562a:	4b2a      	ldr	r3, [pc, #168]	; (156d4 <HTTP_DownloadFileTransaction+0xb4>)
   1562c:	4798      	blx	r3
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
   1562e:	4b2a      	ldr	r3, [pc, #168]	; (156d8 <HTTP_DownloadFileTransaction+0xb8>)
   15630:	0018      	movs	r0, r3
   15632:	4b2a      	ldr	r3, [pc, #168]	; (156dc <HTTP_DownloadFileTransaction+0xbc>)
   15634:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   15636:	2010      	movs	r0, #16
   15638:	4b29      	ldr	r3, [pc, #164]	; (156e0 <HTTP_DownloadFileTransaction+0xc0>)
   1563a:	4798      	blx	r3
   1563c:	0003      	movs	r3, r0
   1563e:	001a      	movs	r2, r3
   15640:	2301      	movs	r3, #1
   15642:	4053      	eors	r3, r2
   15644:	b2db      	uxtb	r3, r3
   15646:	2b00      	cmp	r3, #0
   15648:	d009      	beq.n	1565e <HTTP_DownloadFileTransaction+0x3e>
   1564a:	2020      	movs	r0, #32
   1564c:	4b24      	ldr	r3, [pc, #144]	; (156e0 <HTTP_DownloadFileTransaction+0xc0>)
   1564e:	4798      	blx	r3
   15650:	0003      	movs	r3, r0
   15652:	001a      	movs	r2, r3
   15654:	2301      	movs	r3, #1
   15656:	4053      	eors	r3, r2
   15658:	b2db      	uxtb	r3, r3
   1565a:	2b00      	cmp	r3, #0
   1565c:	d1e4      	bne.n	15628 <HTTP_DownloadFileTransaction+0x8>
		//vTaskDelay(5);
	}

	//Disable socket for HTTP Transfer
	socketDeinit();
   1565e:	4b21      	ldr	r3, [pc, #132]	; (156e4 <HTTP_DownloadFileTransaction+0xc4>)
   15660:	4798      	blx	r3
	vTaskDelay(1000);
   15662:	23fa      	movs	r3, #250	; 0xfa
   15664:	009b      	lsls	r3, r3, #2
   15666:	0018      	movs	r0, r3
   15668:	4b1f      	ldr	r3, [pc, #124]	; (156e8 <HTTP_DownloadFileTransaction+0xc8>)
   1566a:	4798      	blx	r3
	//CONNECT TO MQTT BROKER
	do_download_flag = false;
   1566c:	4b1f      	ldr	r3, [pc, #124]	; (156ec <HTTP_DownloadFileTransaction+0xcc>)
   1566e:	2200      	movs	r2, #0
   15670:	701a      	strb	r2, [r3, #0]

	//Write Flag
	char test_file_name[] = "0:Update.txt";
   15672:	003b      	movs	r3, r7
   15674:	4a1e      	ldr	r2, [pc, #120]	; (156f0 <HTTP_DownloadFileTransaction+0xd0>)
   15676:	ca13      	ldmia	r2!, {r0, r1, r4}
   15678:	c313      	stmia	r3!, {r0, r1, r4}
   1567a:	7812      	ldrb	r2, [r2, #0]
   1567c:	701a      	strb	r2, [r3, #0]
	test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   1567e:	003b      	movs	r3, r7
   15680:	2230      	movs	r2, #48	; 0x30
   15682:	701a      	strb	r2, [r3, #0]
	FRESULT res = f_open(&file_object,
   15684:	230f      	movs	r3, #15
   15686:	18fc      	adds	r4, r7, r3
   15688:	0039      	movs	r1, r7
   1568a:	4b1a      	ldr	r3, [pc, #104]	; (156f4 <HTTP_DownloadFileTransaction+0xd4>)
   1568c:	220a      	movs	r2, #10
   1568e:	0018      	movs	r0, r3
   15690:	4b19      	ldr	r3, [pc, #100]	; (156f8 <HTTP_DownloadFileTransaction+0xd8>)
   15692:	4798      	blx	r3
   15694:	0003      	movs	r3, r0
   15696:	7023      	strb	r3, [r4, #0]
	(char const *)test_file_name,
	FA_CREATE_ALWAYS | FA_WRITE);
	if (res != FR_OK)
   15698:	230f      	movs	r3, #15
   1569a:	18fb      	adds	r3, r7, r3
   1569c:	781b      	ldrb	r3, [r3, #0]
   1569e:	2b00      	cmp	r3, #0
   156a0:	d008      	beq.n	156b4 <HTTP_DownloadFileTransaction+0x94>
	{
		LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
   156a2:	230f      	movs	r3, #15
   156a4:	18fb      	adds	r3, r7, r3
   156a6:	781a      	ldrb	r2, [r3, #0]
   156a8:	4b14      	ldr	r3, [pc, #80]	; (156fc <HTTP_DownloadFileTransaction+0xdc>)
   156aa:	0019      	movs	r1, r3
   156ac:	2000      	movs	r0, #0
   156ae:	4b14      	ldr	r3, [pc, #80]	; (15700 <HTTP_DownloadFileTransaction+0xe0>)
   156b0:	4798      	blx	r3
   156b2:	e003      	b.n	156bc <HTTP_DownloadFileTransaction+0x9c>
	}
	else
	{
		SerialConsoleWriteString("Update.txt added!\r\n");
   156b4:	4b13      	ldr	r3, [pc, #76]	; (15704 <HTTP_DownloadFileTransaction+0xe4>)
   156b6:	0018      	movs	r0, r3
   156b8:	4b13      	ldr	r3, [pc, #76]	; (15708 <HTTP_DownloadFileTransaction+0xe8>)
   156ba:	4798      	blx	r3
	}
	f_close(&file_object);
   156bc:	4b0d      	ldr	r3, [pc, #52]	; (156f4 <HTTP_DownloadFileTransaction+0xd4>)
   156be:	0018      	movs	r0, r3
   156c0:	4b12      	ldr	r3, [pc, #72]	; (1570c <HTTP_DownloadFileTransaction+0xec>)
   156c2:	4798      	blx	r3
	wifiStateMachine = WIFI_MQTT_INIT;	
   156c4:	4b12      	ldr	r3, [pc, #72]	; (15710 <HTTP_DownloadFileTransaction+0xf0>)
   156c6:	2200      	movs	r2, #0
   156c8:	701a      	strb	r2, [r3, #0]
}
   156ca:	46c0      	nop			; (mov r8, r8)
   156cc:	46bd      	mov	sp, r7
   156ce:	b005      	add	sp, #20
   156d0:	bd90      	pop	{r4, r7, pc}
   156d2:	46c0      	nop			; (mov r8, r8)
   156d4:	0002131d 	.word	0x0002131d
   156d8:	20004370 	.word	0x20004370
   156dc:	00031a11 	.word	0x00031a11
   156e0:	00014631 	.word	0x00014631
   156e4:	000248d9 	.word	0x000248d9
   156e8:	0001b4f5 	.word	0x0001b4f5
   156ec:	20000564 	.word	0x20000564
   156f0:	00035970 	.word	0x00035970
   156f4:	20000798 	.word	0x20000798
   156f8:	0002ccd9 	.word	0x0002ccd9
   156fc:	0003594c 	.word	0x0003594c
   15700:	0001d235 	.word	0x0001d235
   15704:	0003595c 	.word	0x0003595c
   15708:	0001d149 	.word	0x0001d149
   1570c:	0002d6d9 	.word	0x0002d6d9
   15710:	20000558 	.word	0x20000558

00015714 <MQTT_InitRoutine>:
* @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
* @note         

*****************************************************************************/
static void MQTT_InitRoutine(void)
{
   15714:	b580      	push	{r7, lr}
   15716:	af00      	add	r7, sp, #0
	socketDeinit();
   15718:	4b18      	ldr	r3, [pc, #96]	; (1577c <MQTT_InitRoutine+0x68>)
   1571a:	4798      	blx	r3
	configure_mqtt();
   1571c:	4b18      	ldr	r3, [pc, #96]	; (15780 <MQTT_InitRoutine+0x6c>)
   1571e:	4798      	blx	r3
	//Re-enable socket for MQTT Transfer
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
   15720:	4a18      	ldr	r2, [pc, #96]	; (15784 <MQTT_InitRoutine+0x70>)
   15722:	4b19      	ldr	r3, [pc, #100]	; (15788 <MQTT_InitRoutine+0x74>)
   15724:	0011      	movs	r1, r2
   15726:	0018      	movs	r0, r3
   15728:	4b18      	ldr	r3, [pc, #96]	; (1578c <MQTT_InitRoutine+0x78>)
   1572a:	4798      	blx	r3
	socketInit();
   1572c:	4b18      	ldr	r3, [pc, #96]	; (15790 <MQTT_InitRoutine+0x7c>)
   1572e:	4798      	blx	r3
	/* Connect to router. */
	if(!(mqtt_inst.isConnected))
   15730:	4b18      	ldr	r3, [pc, #96]	; (15794 <MQTT_InitRoutine+0x80>)
   15732:	2234      	movs	r2, #52	; 0x34
   15734:	5c9b      	ldrb	r3, [r3, r2]
   15736:	2201      	movs	r2, #1
   15738:	4053      	eors	r3, r2
   1573a:	b2db      	uxtb	r3, r3
   1573c:	2b00      	cmp	r3, #0
   1573e:	d00c      	beq.n	1575a <MQTT_InitRoutine+0x46>
	{
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   15740:	4a15      	ldr	r2, [pc, #84]	; (15798 <MQTT_InitRoutine+0x84>)
   15742:	4b14      	ldr	r3, [pc, #80]	; (15794 <MQTT_InitRoutine+0x80>)
   15744:	0011      	movs	r1, r2
   15746:	0018      	movs	r0, r3
   15748:	4b14      	ldr	r3, [pc, #80]	; (1579c <MQTT_InitRoutine+0x88>)
   1574a:	4798      	blx	r3
   1574c:	1e03      	subs	r3, r0, #0
   1574e:	d004      	beq.n	1575a <MQTT_InitRoutine+0x46>
		{
			LogMessage(LOG_DEBUG_LVL,"Error connecting to MQTT Broker!\r\n");
   15750:	4b13      	ldr	r3, [pc, #76]	; (157a0 <MQTT_InitRoutine+0x8c>)
   15752:	0019      	movs	r1, r3
   15754:	2001      	movs	r0, #1
   15756:	4b13      	ldr	r3, [pc, #76]	; (157a4 <MQTT_InitRoutine+0x90>)
   15758:	4798      	blx	r3
		}
	}

	if(mqtt_inst.isConnected)
   1575a:	4b0e      	ldr	r3, [pc, #56]	; (15794 <MQTT_InitRoutine+0x80>)
   1575c:	2234      	movs	r2, #52	; 0x34
   1575e:	5c9b      	ldrb	r3, [r3, r2]
   15760:	2b00      	cmp	r3, #0
   15762:	d004      	beq.n	1576e <MQTT_InitRoutine+0x5a>
	{
		LogMessage(LOG_DEBUG_LVL,"Connected to MQTT Broker!\r\n");
   15764:	4b10      	ldr	r3, [pc, #64]	; (157a8 <MQTT_InitRoutine+0x94>)
   15766:	0019      	movs	r1, r3
   15768:	2001      	movs	r0, #1
   1576a:	4b0e      	ldr	r3, [pc, #56]	; (157a4 <MQTT_InitRoutine+0x90>)
   1576c:	4798      	blx	r3
	}
	wifiStateMachine = WIFI_MQTT_HANDLE;
   1576e:	4b0f      	ldr	r3, [pc, #60]	; (157ac <MQTT_InitRoutine+0x98>)
   15770:	2201      	movs	r2, #1
   15772:	701a      	strb	r2, [r3, #0]
}
   15774:	46c0      	nop			; (mov r8, r8)
   15776:	46bd      	mov	sp, r7
   15778:	bd80      	pop	{r7, pc}
   1577a:	46c0      	nop			; (mov r8, r8)
   1577c:	000248d9 	.word	0x000248d9
   15780:	00015439 	.word	0x00015439
   15784:	000150f1 	.word	0x000150f1
   15788:	000150bd 	.word	0x000150bd
   1578c:	00024921 	.word	0x00024921
   15790:	00024889 	.word	0x00024889
   15794:	200007c4 	.word	0x200007c4
   15798:	00035108 	.word	0x00035108
   1579c:	0002ebb5 	.word	0x0002ebb5
   157a0:	00035520 	.word	0x00035520
   157a4:	0001d235 	.word	0x0001d235
   157a8:	00035980 	.word	0x00035980
   157ac:	20000558 	.word	0x20000558

000157b0 <MQTT_HandleTransactions>:
* @brief	Routine to handle MQTT transactions
* @note

*****************************************************************************/
static void MQTT_HandleTransactions(void)
{
   157b0:	b580      	push	{r7, lr}
   157b2:	af00      	add	r7, sp, #0
	
	/* Handle pending events from network controller. */
	m2m_wifi_handle_events(NULL);
   157b4:	2000      	movs	r0, #0
   157b6:	4b0a      	ldr	r3, [pc, #40]	; (157e0 <MQTT_HandleTransactions+0x30>)
   157b8:	4798      	blx	r3
	sw_timer_task(&swt_module_inst);
   157ba:	4b0a      	ldr	r3, [pc, #40]	; (157e4 <MQTT_HandleTransactions+0x34>)
   157bc:	0018      	movs	r0, r3
   157be:	4b0a      	ldr	r3, [pc, #40]	; (157e8 <MQTT_HandleTransactions+0x38>)
   157c0:	4798      	blx	r3


	//Check if data has to be sent!
	MQTT_HandleGameMessages();
   157c2:	4b0a      	ldr	r3, [pc, #40]	; (157ec <MQTT_HandleTransactions+0x3c>)
   157c4:	4798      	blx	r3

	//Handle MQTT messages
	if(mqtt_inst.isConnected)
   157c6:	4b0a      	ldr	r3, [pc, #40]	; (157f0 <MQTT_HandleTransactions+0x40>)
   157c8:	2234      	movs	r2, #52	; 0x34
   157ca:	5c9b      	ldrb	r3, [r3, r2]
   157cc:	2b00      	cmp	r3, #0
   157ce:	d004      	beq.n	157da <MQTT_HandleTransactions+0x2a>
	mqtt_yield(&mqtt_inst, 100);	
   157d0:	4b07      	ldr	r3, [pc, #28]	; (157f0 <MQTT_HandleTransactions+0x40>)
   157d2:	2164      	movs	r1, #100	; 0x64
   157d4:	0018      	movs	r0, r3
   157d6:	4b07      	ldr	r3, [pc, #28]	; (157f4 <MQTT_HandleTransactions+0x44>)
   157d8:	4798      	blx	r3
}
   157da:	46c0      	nop			; (mov r8, r8)
   157dc:	46bd      	mov	sp, r7
   157de:	bd80      	pop	{r7, pc}
   157e0:	0002131d 	.word	0x0002131d
   157e4:	20004370 	.word	0x20004370
   157e8:	00031a11 	.word	0x00031a11
   157ec:	000157f9 	.word	0x000157f9
   157f0:	200007c4 	.word	0x200007c4
   157f4:	0002ede5 	.word	0x0002ede5

000157f8 <MQTT_HandleGameMessages>:


static void MQTT_HandleGameMessages(void)
{
   157f8:	b590      	push	{r4, r7, lr}
   157fa:	b08b      	sub	sp, #44	; 0x2c
   157fc:	af02      	add	r7, sp, #8
	struct GameDataPacket gamePacket;
	if  (pdPASS == xQueueReceive( xQueueGameBuffer , &gamePacket, 0 ))
   157fe:	4b39      	ldr	r3, [pc, #228]	; (158e4 <MQTT_HandleGameMessages+0xec>)
   15800:	681b      	ldr	r3, [r3, #0]
   15802:	2208      	movs	r2, #8
   15804:	18b9      	adds	r1, r7, r2
   15806:	2200      	movs	r2, #0
   15808:	0018      	movs	r0, r3
   1580a:	4b37      	ldr	r3, [pc, #220]	; (158e8 <MQTT_HandleGameMessages+0xf0>)
   1580c:	4798      	blx	r3
   1580e:	0003      	movs	r3, r0
   15810:	2b01      	cmp	r3, #1
   15812:	d163      	bne.n	158dc <MQTT_HandleGameMessages+0xe4>
	{
		snprintf(mqtt_msg, 63, "{\"game\":[");
   15814:	4b35      	ldr	r3, [pc, #212]	; (158ec <MQTT_HandleGameMessages+0xf4>)
   15816:	4a36      	ldr	r2, [pc, #216]	; (158f0 <MQTT_HandleGameMessages+0xf8>)
   15818:	ca03      	ldmia	r2!, {r0, r1}
   1581a:	c303      	stmia	r3!, {r0, r1}
   1581c:	8812      	ldrh	r2, [r2, #0]
   1581e:	801a      	strh	r2, [r3, #0]
			for(int iter = 0; iter < GAME_SIZE; iter++)
   15820:	2300      	movs	r3, #0
   15822:	61fb      	str	r3, [r7, #28]
   15824:	e02d      	b.n	15882 <MQTT_HandleGameMessages+0x8a>
			{
				char numGame[5];
				if(gamePacket.game[iter] != 0xFF)
   15826:	2308      	movs	r3, #8
   15828:	18fa      	adds	r2, r7, r3
   1582a:	69fb      	ldr	r3, [r7, #28]
   1582c:	18d3      	adds	r3, r2, r3
   1582e:	781b      	ldrb	r3, [r3, #0]
   15830:	2bff      	cmp	r3, #255	; 0xff
   15832:	d02a      	beq.n	1588a <MQTT_HandleGameMessages+0x92>
				{
					snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   15834:	2308      	movs	r3, #8
   15836:	18fa      	adds	r2, r7, r3
   15838:	69fb      	ldr	r3, [r7, #28]
   1583a:	18d3      	adds	r3, r2, r3
   1583c:	781b      	ldrb	r3, [r3, #0]
   1583e:	4a2d      	ldr	r2, [pc, #180]	; (158f4 <MQTT_HandleGameMessages+0xfc>)
   15840:	0038      	movs	r0, r7
   15842:	2103      	movs	r1, #3
   15844:	4c2c      	ldr	r4, [pc, #176]	; (158f8 <MQTT_HandleGameMessages+0x100>)
   15846:	47a0      	blx	r4
					strcat(mqtt_msg, numGame);
   15848:	003a      	movs	r2, r7
   1584a:	4b28      	ldr	r3, [pc, #160]	; (158ec <MQTT_HandleGameMessages+0xf4>)
   1584c:	0011      	movs	r1, r2
   1584e:	0018      	movs	r0, r3
   15850:	4b2a      	ldr	r3, [pc, #168]	; (158fc <MQTT_HandleGameMessages+0x104>)
   15852:	4798      	blx	r3
					if(gamePacket.game[iter+1] != 0xFF && iter+1 <GAME_SIZE)
   15854:	69fb      	ldr	r3, [r7, #28]
   15856:	3301      	adds	r3, #1
   15858:	2208      	movs	r2, #8
   1585a:	18ba      	adds	r2, r7, r2
   1585c:	5cd3      	ldrb	r3, [r2, r3]
   1585e:	2bff      	cmp	r3, #255	; 0xff
   15860:	d00c      	beq.n	1587c <MQTT_HandleGameMessages+0x84>
   15862:	69fb      	ldr	r3, [r7, #28]
   15864:	3301      	adds	r3, #1
   15866:	2b13      	cmp	r3, #19
   15868:	dc08      	bgt.n	1587c <MQTT_HandleGameMessages+0x84>
					{
						snprintf(numGame, 5, ",");
   1586a:	003b      	movs	r3, r7
   1586c:	222c      	movs	r2, #44	; 0x2c
   1586e:	801a      	strh	r2, [r3, #0]
						strcat(mqtt_msg, numGame);
   15870:	003a      	movs	r2, r7
   15872:	4b1e      	ldr	r3, [pc, #120]	; (158ec <MQTT_HandleGameMessages+0xf4>)
   15874:	0011      	movs	r1, r2
   15876:	0018      	movs	r0, r3
   15878:	4b20      	ldr	r3, [pc, #128]	; (158fc <MQTT_HandleGameMessages+0x104>)
   1587a:	4798      	blx	r3
			for(int iter = 0; iter < GAME_SIZE; iter++)
   1587c:	69fb      	ldr	r3, [r7, #28]
   1587e:	3301      	adds	r3, #1
   15880:	61fb      	str	r3, [r7, #28]
   15882:	69fb      	ldr	r3, [r7, #28]
   15884:	2b13      	cmp	r3, #19
   15886:	ddce      	ble.n	15826 <MQTT_HandleGameMessages+0x2e>
   15888:	e000      	b.n	1588c <MQTT_HandleGameMessages+0x94>
					}
				}else
				{
					break;
   1588a:	46c0      	nop			; (mov r8, r8)
				}
			}
		strcat(mqtt_msg, "]}");
   1588c:	4b17      	ldr	r3, [pc, #92]	; (158ec <MQTT_HandleGameMessages+0xf4>)
   1588e:	0018      	movs	r0, r3
   15890:	4b1b      	ldr	r3, [pc, #108]	; (15900 <MQTT_HandleGameMessages+0x108>)
   15892:	4798      	blx	r3
   15894:	0003      	movs	r3, r0
   15896:	001a      	movs	r2, r3
   15898:	4b14      	ldr	r3, [pc, #80]	; (158ec <MQTT_HandleGameMessages+0xf4>)
   1589a:	18d2      	adds	r2, r2, r3
   1589c:	4b19      	ldr	r3, [pc, #100]	; (15904 <MQTT_HandleGameMessages+0x10c>)
   1589e:	0010      	movs	r0, r2
   158a0:	0019      	movs	r1, r3
   158a2:	2303      	movs	r3, #3
   158a4:	001a      	movs	r2, r3
   158a6:	4b18      	ldr	r3, [pc, #96]	; (15908 <MQTT_HandleGameMessages+0x110>)
   158a8:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL,mqtt_msg);LogMessage(LOG_DEBUG_LVL,"\r\n");
   158aa:	4b10      	ldr	r3, [pc, #64]	; (158ec <MQTT_HandleGameMessages+0xf4>)
   158ac:	0019      	movs	r1, r3
   158ae:	2001      	movs	r0, #1
   158b0:	4b16      	ldr	r3, [pc, #88]	; (1590c <MQTT_HandleGameMessages+0x114>)
   158b2:	4798      	blx	r3
   158b4:	4b16      	ldr	r3, [pc, #88]	; (15910 <MQTT_HandleGameMessages+0x118>)
   158b6:	0019      	movs	r1, r3
   158b8:	2001      	movs	r0, #1
   158ba:	4b14      	ldr	r3, [pc, #80]	; (1590c <MQTT_HandleGameMessages+0x114>)
   158bc:	4798      	blx	r3
		mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   158be:	4b0b      	ldr	r3, [pc, #44]	; (158ec <MQTT_HandleGameMessages+0xf4>)
   158c0:	0018      	movs	r0, r3
   158c2:	4b0f      	ldr	r3, [pc, #60]	; (15900 <MQTT_HandleGameMessages+0x108>)
   158c4:	4798      	blx	r3
   158c6:	0004      	movs	r4, r0
   158c8:	4a08      	ldr	r2, [pc, #32]	; (158ec <MQTT_HandleGameMessages+0xf4>)
   158ca:	4912      	ldr	r1, [pc, #72]	; (15914 <MQTT_HandleGameMessages+0x11c>)
   158cc:	4812      	ldr	r0, [pc, #72]	; (15918 <MQTT_HandleGameMessages+0x120>)
   158ce:	2300      	movs	r3, #0
   158d0:	9301      	str	r3, [sp, #4]
   158d2:	2301      	movs	r3, #1
   158d4:	9300      	str	r3, [sp, #0]
   158d6:	0023      	movs	r3, r4
   158d8:	4c10      	ldr	r4, [pc, #64]	; (1591c <MQTT_HandleGameMessages+0x124>)
   158da:	47a0      	blx	r4
	}
}
   158dc:	46c0      	nop			; (mov r8, r8)
   158de:	46bd      	mov	sp, r7
   158e0:	b009      	add	sp, #36	; 0x24
   158e2:	bd90      	pop	{r4, r7, pc}
   158e4:	20000560 	.word	0x20000560
   158e8:	0001a349 	.word	0x0001a349
   158ec:	20000018 	.word	0x20000018
   158f0:	000356dc 	.word	0x000356dc
   158f4:	0003599c 	.word	0x0003599c
   158f8:	00033c59 	.word	0x00033c59
   158fc:	00033d3d 	.word	0x00033d3d
   15900:	00033db7 	.word	0x00033db7
   15904:	000359a0 	.word	0x000359a0
   15908:	000339c9 	.word	0x000339c9
   1590c:	0001d235 	.word	0x0001d235
   15910:	000359a4 	.word	0x000359a4
   15914:	000359a8 	.word	0x000359a8
   15918:	200007c4 	.word	0x200007c4
   1591c:	0002ed31 	.word	0x0002ed31

00015920 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask( void *pvParameters )
{
   15920:	b590      	push	{r4, r7, lr}
   15922:	b08d      	sub	sp, #52	; 0x34
   15924:	af02      	add	r7, sp, #8
   15926:	6078      	str	r0, [r7, #4]
	tstrWifiInitParam param;
	int8_t ret;
	vTaskDelay(100);
   15928:	2064      	movs	r0, #100	; 0x64
   1592a:	4b5f      	ldr	r3, [pc, #380]	; (15aa8 <vWifiTask+0x188>)
   1592c:	4798      	blx	r3
	init_state();
   1592e:	4b5f      	ldr	r3, [pc, #380]	; (15aac <vWifiTask+0x18c>)
   15930:	4798      	blx	r3
	//Create buffers to send data
	xQueueWifiState = xQueueCreate( 5, sizeof( uint32_t ) );
   15932:	2200      	movs	r2, #0
   15934:	2104      	movs	r1, #4
   15936:	2005      	movs	r0, #5
   15938:	4b5d      	ldr	r3, [pc, #372]	; (15ab0 <vWifiTask+0x190>)
   1593a:	4798      	blx	r3
   1593c:	0002      	movs	r2, r0
   1593e:	4b5d      	ldr	r3, [pc, #372]	; (15ab4 <vWifiTask+0x194>)
   15940:	601a      	str	r2, [r3, #0]
	xQueueGameBuffer = xQueueCreate( 2, sizeof( struct GameDataPacket ) );
   15942:	2200      	movs	r2, #0
   15944:	2114      	movs	r1, #20
   15946:	2002      	movs	r0, #2
   15948:	4b59      	ldr	r3, [pc, #356]	; (15ab0 <vWifiTask+0x190>)
   1594a:	4798      	blx	r3
   1594c:	0002      	movs	r2, r0
   1594e:	4b5a      	ldr	r3, [pc, #360]	; (15ab8 <vWifiTask+0x198>)
   15950:	601a      	str	r2, [r3, #0]

	if(xQueueWifiState == NULL || xQueueGameBuffer == NULL)
   15952:	4b58      	ldr	r3, [pc, #352]	; (15ab4 <vWifiTask+0x194>)
   15954:	681b      	ldr	r3, [r3, #0]
   15956:	2b00      	cmp	r3, #0
   15958:	d003      	beq.n	15962 <vWifiTask+0x42>
   1595a:	4b57      	ldr	r3, [pc, #348]	; (15ab8 <vWifiTask+0x198>)
   1595c:	681b      	ldr	r3, [r3, #0]
   1595e:	2b00      	cmp	r3, #0
   15960:	d103      	bne.n	1596a <vWifiTask+0x4a>
	{
		SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   15962:	4b56      	ldr	r3, [pc, #344]	; (15abc <vWifiTask+0x19c>)
   15964:	0018      	movs	r0, r3
   15966:	4b56      	ldr	r3, [pc, #344]	; (15ac0 <vWifiTask+0x1a0>)
   15968:	4798      	blx	r3
	}

	SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   1596a:	4b56      	ldr	r3, [pc, #344]	; (15ac4 <vWifiTask+0x1a4>)
   1596c:	0018      	movs	r0, r3
   1596e:	4b54      	ldr	r3, [pc, #336]	; (15ac0 <vWifiTask+0x1a0>)
   15970:	4798      	blx	r3
	/* Initialize the Timer. */
	configure_timer();
   15972:	4b55      	ldr	r3, [pc, #340]	; (15ac8 <vWifiTask+0x1a8>)
   15974:	4798      	blx	r3

	/* Initialize the HTTP client service. */
	configure_http_client();
   15976:	4b55      	ldr	r3, [pc, #340]	; (15acc <vWifiTask+0x1ac>)
   15978:	4798      	blx	r3

	/* Initialize the MQTT service. */
	configure_mqtt();
   1597a:	4b55      	ldr	r3, [pc, #340]	; (15ad0 <vWifiTask+0x1b0>)
   1597c:	4798      	blx	r3

	/* Initialize SD/MMC storage. */
	init_storage();
   1597e:	4b55      	ldr	r3, [pc, #340]	; (15ad4 <vWifiTask+0x1b4>)
   15980:	4798      	blx	r3

	/*Initialize BUTTON 0 as an external interrupt*/
	configure_extint_channel();
   15982:	4b55      	ldr	r3, [pc, #340]	; (15ad8 <vWifiTask+0x1b8>)
   15984:	4798      	blx	r3
	configure_extint_callbacks();
   15986:	4b55      	ldr	r3, [pc, #340]	; (15adc <vWifiTask+0x1bc>)
   15988:	4798      	blx	r3

	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   1598a:	230c      	movs	r3, #12
   1598c:	18fb      	adds	r3, r7, r3
   1598e:	2218      	movs	r2, #24
   15990:	2100      	movs	r1, #0
   15992:	0018      	movs	r0, r3
   15994:	4b52      	ldr	r3, [pc, #328]	; (15ae0 <vWifiTask+0x1c0>)
   15996:	4798      	blx	r3

	nm_bsp_init();
   15998:	4b52      	ldr	r3, [pc, #328]	; (15ae4 <vWifiTask+0x1c4>)
   1599a:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
   1599c:	230c      	movs	r3, #12
   1599e:	18fb      	adds	r3, r7, r3
   159a0:	4a51      	ldr	r2, [pc, #324]	; (15ae8 <vWifiTask+0x1c8>)
   159a2:	601a      	str	r2, [r3, #0]
	ret = m2m_wifi_init(&param);
   159a4:	2327      	movs	r3, #39	; 0x27
   159a6:	18fc      	adds	r4, r7, r3
   159a8:	230c      	movs	r3, #12
   159aa:	18fb      	adds	r3, r7, r3
   159ac:	0018      	movs	r0, r3
   159ae:	4b4f      	ldr	r3, [pc, #316]	; (15aec <vWifiTask+0x1cc>)
   159b0:	4798      	blx	r3
   159b2:	0003      	movs	r3, r0
   159b4:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   159b6:	2327      	movs	r3, #39	; 0x27
   159b8:	18fb      	adds	r3, r7, r3
   159ba:	781b      	ldrb	r3, [r3, #0]
   159bc:	b25b      	sxtb	r3, r3
   159be:	2b00      	cmp	r3, #0
   159c0:	d009      	beq.n	159d6 <vWifiTask+0xb6>
		LogMessage(LOG_DEBUG_LVL,"main: m2m_wifi_init call error! (res %d)\r\n", ret);
   159c2:	2327      	movs	r3, #39	; 0x27
   159c4:	18fb      	adds	r3, r7, r3
   159c6:	2200      	movs	r2, #0
   159c8:	569a      	ldrsb	r2, [r3, r2]
   159ca:	4b49      	ldr	r3, [pc, #292]	; (15af0 <vWifiTask+0x1d0>)
   159cc:	0019      	movs	r1, r3
   159ce:	2001      	movs	r0, #1
   159d0:	4b48      	ldr	r3, [pc, #288]	; (15af4 <vWifiTask+0x1d4>)
   159d2:	4798      	blx	r3
		while (1) {
   159d4:	e7fe      	b.n	159d4 <vWifiTask+0xb4>
				}
		}

	LogMessage(LOG_DEBUG_LVL,"main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   159d6:	4a48      	ldr	r2, [pc, #288]	; (15af8 <vWifiTask+0x1d8>)
   159d8:	4b48      	ldr	r3, [pc, #288]	; (15afc <vWifiTask+0x1dc>)
   159da:	0019      	movs	r1, r3
   159dc:	2001      	movs	r0, #1
   159de:	4b45      	ldr	r3, [pc, #276]	; (15af4 <vWifiTask+0x1d4>)
   159e0:	4798      	blx	r3
	
	//Re-enable socket for MQTT Transfer
	socketInit();
   159e2:	4b47      	ldr	r3, [pc, #284]	; (15b00 <vWifiTask+0x1e0>)
   159e4:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
   159e6:	4a47      	ldr	r2, [pc, #284]	; (15b04 <vWifiTask+0x1e4>)
   159e8:	4b47      	ldr	r3, [pc, #284]	; (15b08 <vWifiTask+0x1e8>)
   159ea:	0011      	movs	r1, r2
   159ec:	0018      	movs	r0, r3
   159ee:	4b47      	ldr	r3, [pc, #284]	; (15b0c <vWifiTask+0x1ec>)
   159f0:	4798      	blx	r3

	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   159f2:	4a47      	ldr	r2, [pc, #284]	; (15b10 <vWifiTask+0x1f0>)
   159f4:	4840      	ldr	r0, [pc, #256]	; (15af8 <vWifiTask+0x1d8>)
   159f6:	23ff      	movs	r3, #255	; 0xff
   159f8:	9300      	str	r3, [sp, #0]
   159fa:	0013      	movs	r3, r2
   159fc:	2202      	movs	r2, #2
   159fe:	210d      	movs	r1, #13
   15a00:	4c44      	ldr	r4, [pc, #272]	; (15b14 <vWifiTask+0x1f4>)
   15a02:	47a0      	blx	r4

	while (!(is_state_set(WIFI_CONNECTED)))
   15a04:	e006      	b.n	15a14 <vWifiTask+0xf4>
	{
			/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
   15a06:	2000      	movs	r0, #0
   15a08:	4b43      	ldr	r3, [pc, #268]	; (15b18 <vWifiTask+0x1f8>)
   15a0a:	4798      	blx	r3
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
   15a0c:	4b43      	ldr	r3, [pc, #268]	; (15b1c <vWifiTask+0x1fc>)
   15a0e:	0018      	movs	r0, r3
   15a10:	4b43      	ldr	r3, [pc, #268]	; (15b20 <vWifiTask+0x200>)
   15a12:	4798      	blx	r3
	while (!(is_state_set(WIFI_CONNECTED)))
   15a14:	2002      	movs	r0, #2
   15a16:	4b43      	ldr	r3, [pc, #268]	; (15b24 <vWifiTask+0x204>)
   15a18:	4798      	blx	r3
   15a1a:	0003      	movs	r3, r0
   15a1c:	001a      	movs	r2, r3
   15a1e:	2301      	movs	r3, #1
   15a20:	4053      	eors	r3, r2
   15a22:	b2db      	uxtb	r3, r3
   15a24:	2b00      	cmp	r3, #0
   15a26:	d1ee      	bne.n	15a06 <vWifiTask+0xe6>
	}

	vTaskDelay(1000);
   15a28:	23fa      	movs	r3, #250	; 0xfa
   15a2a:	009b      	lsls	r3, r3, #2
   15a2c:	0018      	movs	r0, r3
   15a2e:	4b1e      	ldr	r3, [pc, #120]	; (15aa8 <vWifiTask+0x188>)
   15a30:	4798      	blx	r3
	
	wifiStateMachine = WIFI_MQTT_HANDLE;
   15a32:	4b3d      	ldr	r3, [pc, #244]	; (15b28 <vWifiTask+0x208>)
   15a34:	2201      	movs	r2, #1
   15a36:	701a      	strb	r2, [r3, #0]
	while (1) {

	switch(wifiStateMachine)
   15a38:	4b3b      	ldr	r3, [pc, #236]	; (15b28 <vWifiTask+0x208>)
   15a3a:	781b      	ldrb	r3, [r3, #0]
   15a3c:	b25b      	sxtb	r3, r3
   15a3e:	2b01      	cmp	r3, #1
   15a40:	d00b      	beq.n	15a5a <vWifiTask+0x13a>
   15a42:	dc02      	bgt.n	15a4a <vWifiTask+0x12a>
   15a44:	2b00      	cmp	r3, #0
   15a46:	d005      	beq.n	15a54 <vWifiTask+0x134>
   15a48:	e010      	b.n	15a6c <vWifiTask+0x14c>
   15a4a:	2b02      	cmp	r3, #2
   15a4c:	d008      	beq.n	15a60 <vWifiTask+0x140>
   15a4e:	2b03      	cmp	r3, #3
   15a50:	d009      	beq.n	15a66 <vWifiTask+0x146>
   15a52:	e00b      	b.n	15a6c <vWifiTask+0x14c>
	{
		case(WIFI_MQTT_INIT):
		{
			MQTT_InitRoutine();
   15a54:	4b35      	ldr	r3, [pc, #212]	; (15b2c <vWifiTask+0x20c>)
   15a56:	4798      	blx	r3
			break;
   15a58:	e00c      	b.n	15a74 <vWifiTask+0x154>
		}
		case(WIFI_MQTT_HANDLE):
		{
			MQTT_HandleTransactions();
   15a5a:	4b35      	ldr	r3, [pc, #212]	; (15b30 <vWifiTask+0x210>)
   15a5c:	4798      	blx	r3
			break;
   15a5e:	e009      	b.n	15a74 <vWifiTask+0x154>
		}
		case(WIFI_DOWNLOAD_INIT):
		{

			HTTP_DownloadFileInit();
   15a60:	4b34      	ldr	r3, [pc, #208]	; (15b34 <vWifiTask+0x214>)
   15a62:	4798      	blx	r3
			break;
   15a64:	e006      	b.n	15a74 <vWifiTask+0x154>
		}
		case(WIFI_DOWNLOAD_HANDLE):
		{
			HTTP_DownloadFileTransaction();
   15a66:	4b34      	ldr	r3, [pc, #208]	; (15b38 <vWifiTask+0x218>)
   15a68:	4798      	blx	r3
		break;
   15a6a:	e003      	b.n	15a74 <vWifiTask+0x154>
		}
		default:
		{
			wifiStateMachine = WIFI_MQTT_INIT;
   15a6c:	4b2e      	ldr	r3, [pc, #184]	; (15b28 <vWifiTask+0x208>)
   15a6e:	2200      	movs	r2, #0
   15a70:	701a      	strb	r2, [r3, #0]
			break;
   15a72:	46c0      	nop			; (mov r8, r8)
		}
	}
	//Check if a new state was called
	uint8_t DataToReceive = 0;
   15a74:	230b      	movs	r3, #11
   15a76:	18fb      	adds	r3, r7, r3
   15a78:	2200      	movs	r2, #0
   15a7a:	701a      	strb	r2, [r3, #0]
	if (pdPASS == xQueueReceive( xQueueWifiState, &DataToReceive, 0 ))
   15a7c:	4b0d      	ldr	r3, [pc, #52]	; (15ab4 <vWifiTask+0x194>)
   15a7e:	681b      	ldr	r3, [r3, #0]
   15a80:	220b      	movs	r2, #11
   15a82:	18b9      	adds	r1, r7, r2
   15a84:	2200      	movs	r2, #0
   15a86:	0018      	movs	r0, r3
   15a88:	4b2c      	ldr	r3, [pc, #176]	; (15b3c <vWifiTask+0x21c>)
   15a8a:	4798      	blx	r3
   15a8c:	0003      	movs	r3, r0
   15a8e:	2b01      	cmp	r3, #1
   15a90:	d105      	bne.n	15a9e <vWifiTask+0x17e>
	{
		wifiStateMachine = DataToReceive; // Update new state
   15a92:	230b      	movs	r3, #11
   15a94:	18fb      	adds	r3, r7, r3
   15a96:	781b      	ldrb	r3, [r3, #0]
   15a98:	b25a      	sxtb	r2, r3
   15a9a:	4b23      	ldr	r3, [pc, #140]	; (15b28 <vWifiTask+0x208>)
   15a9c:	701a      	strb	r2, [r3, #0]
	}
	
	vTaskDelay(100);	
   15a9e:	2064      	movs	r0, #100	; 0x64
   15aa0:	4b01      	ldr	r3, [pc, #4]	; (15aa8 <vWifiTask+0x188>)
   15aa2:	4798      	blx	r3
	while (1) {
   15aa4:	e7c8      	b.n	15a38 <vWifiTask+0x118>
   15aa6:	46c0      	nop			; (mov r8, r8)
   15aa8:	0001b4f5 	.word	0x0001b4f5
   15aac:	000145c1 	.word	0x000145c1
   15ab0:	000197e9 	.word	0x000197e9
   15ab4:	2000055c 	.word	0x2000055c
   15ab8:	20000560 	.word	0x20000560
   15abc:	000359c0 	.word	0x000359c0
   15ac0:	0001d149 	.word	0x0001d149
   15ac4:	000359e8 	.word	0x000359e8
   15ac8:	00014ffd 	.word	0x00014ffd
   15acc:	00015039 	.word	0x00015039
   15ad0:	00015439 	.word	0x00015439
   15ad4:	00014f19 	.word	0x00014f19
   15ad8:	000154f1 	.word	0x000154f1
   15adc:	00015531 	.word	0x00015531
   15ae0:	000339ff 	.word	0x000339ff
   15ae4:	0001f651 	.word	0x0001f651
   15ae8:	00014dc5 	.word	0x00014dc5
   15aec:	00021129 	.word	0x00021129
   15af0:	00035a04 	.word	0x00035a04
   15af4:	0001d235 	.word	0x0001d235
   15af8:	000354e8 	.word	0x000354e8
   15afc:	00035a30 	.word	0x00035a30
   15b00:	00024889 	.word	0x00024889
   15b04:	000150f1 	.word	0x000150f1
   15b08:	000150bd 	.word	0x000150bd
   15b0c:	00024921 	.word	0x00024921
   15b10:	000354d4 	.word	0x000354d4
   15b14:	00021339 	.word	0x00021339
   15b18:	0002131d 	.word	0x0002131d
   15b1c:	20004370 	.word	0x20004370
   15b20:	00031a11 	.word	0x00031a11
   15b24:	00014631 	.word	0x00014631
   15b28:	20000558 	.word	0x20000558
   15b2c:	00015715 	.word	0x00015715
   15b30:	000157b1 	.word	0x000157b1
   15b34:	0001558d 	.word	0x0001558d
   15b38:	00015621 	.word	0x00015621
   15b3c:	0001a349 	.word	0x0001a349

00015b40 <WifiHandlerSetState>:
	return 0;
}


void WifiHandlerSetState(uint8_t state)
{
   15b40:	b590      	push	{r4, r7, lr}
   15b42:	b083      	sub	sp, #12
   15b44:	af00      	add	r7, sp, #0
   15b46:	0002      	movs	r2, r0
   15b48:	1dfb      	adds	r3, r7, #7
   15b4a:	701a      	strb	r2, [r3, #0]
	if( state <= WIFI_DOWNLOAD_HANDLE){
   15b4c:	1dfb      	adds	r3, r7, #7
   15b4e:	781b      	ldrb	r3, [r3, #0]
   15b50:	2b03      	cmp	r3, #3
   15b52:	d806      	bhi.n	15b62 <WifiHandlerSetState+0x22>
		xQueueSend( xQueueWifiState, &state, ( TickType_t ) 10 );
   15b54:	4b05      	ldr	r3, [pc, #20]	; (15b6c <WifiHandlerSetState+0x2c>)
   15b56:	6818      	ldr	r0, [r3, #0]
   15b58:	1df9      	adds	r1, r7, #7
   15b5a:	2300      	movs	r3, #0
   15b5c:	220a      	movs	r2, #10
   15b5e:	4c04      	ldr	r4, [pc, #16]	; (15b70 <WifiHandlerSetState+0x30>)
   15b60:	47a0      	blx	r4
	}
}
   15b62:	46c0      	nop			; (mov r8, r8)
   15b64:	46bd      	mov	sp, r7
   15b66:	b003      	add	sp, #12
   15b68:	bd90      	pop	{r4, r7, pc}
   15b6a:	46c0      	nop			; (mov r8, r8)
   15b6c:	2000055c 	.word	0x2000055c
   15b70:	00019a91 	.word	0x00019a91

00015b74 <WifiAddGameDataToQueue>:
* @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
* @note         

*****************************************************************************/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   15b74:	b590      	push	{r4, r7, lr}
   15b76:	b085      	sub	sp, #20
   15b78:	af00      	add	r7, sp, #0
   15b7a:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueGameBuffer , game, ( TickType_t ) 10);
   15b7c:	4b06      	ldr	r3, [pc, #24]	; (15b98 <WifiAddGameDataToQueue+0x24>)
   15b7e:	6818      	ldr	r0, [r3, #0]
   15b80:	6879      	ldr	r1, [r7, #4]
   15b82:	2300      	movs	r3, #0
   15b84:	220a      	movs	r2, #10
   15b86:	4c05      	ldr	r4, [pc, #20]	; (15b9c <WifiAddGameDataToQueue+0x28>)
   15b88:	47a0      	blx	r4
   15b8a:	0003      	movs	r3, r0
   15b8c:	60fb      	str	r3, [r7, #12]
	return error;
   15b8e:	68fb      	ldr	r3, [r7, #12]
   15b90:	0018      	movs	r0, r3
   15b92:	46bd      	mov	sp, r7
   15b94:	b005      	add	sp, #20
   15b96:	bd90      	pop	{r4, r7, pc}
   15b98:	20000560 	.word	0x20000560
   15b9c:	00019a91 	.word	0x00019a91

00015ba0 <system_interrupt_enable>:
{
   15ba0:	b580      	push	{r7, lr}
   15ba2:	b082      	sub	sp, #8
   15ba4:	af00      	add	r7, sp, #0
   15ba6:	0002      	movs	r2, r0
   15ba8:	1dfb      	adds	r3, r7, #7
   15baa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15bac:	4b06      	ldr	r3, [pc, #24]	; (15bc8 <system_interrupt_enable+0x28>)
   15bae:	1dfa      	adds	r2, r7, #7
   15bb0:	7812      	ldrb	r2, [r2, #0]
   15bb2:	0011      	movs	r1, r2
   15bb4:	221f      	movs	r2, #31
   15bb6:	400a      	ands	r2, r1
   15bb8:	2101      	movs	r1, #1
   15bba:	4091      	lsls	r1, r2
   15bbc:	000a      	movs	r2, r1
   15bbe:	601a      	str	r2, [r3, #0]
}
   15bc0:	46c0      	nop			; (mov r8, r8)
   15bc2:	46bd      	mov	sp, r7
   15bc4:	b002      	add	sp, #8
   15bc6:	bd80      	pop	{r7, pc}
   15bc8:	e000e100 	.word	0xe000e100

00015bcc <i2c_master_is_syncing>:
{
   15bcc:	b580      	push	{r7, lr}
   15bce:	b084      	sub	sp, #16
   15bd0:	af00      	add	r7, sp, #0
   15bd2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   15bd4:	687b      	ldr	r3, [r7, #4]
   15bd6:	681b      	ldr	r3, [r3, #0]
   15bd8:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   15bda:	68fb      	ldr	r3, [r7, #12]
   15bdc:	69db      	ldr	r3, [r3, #28]
   15bde:	2207      	movs	r2, #7
   15be0:	4013      	ands	r3, r2
   15be2:	1e5a      	subs	r2, r3, #1
   15be4:	4193      	sbcs	r3, r2
   15be6:	b2db      	uxtb	r3, r3
}
   15be8:	0018      	movs	r0, r3
   15bea:	46bd      	mov	sp, r7
   15bec:	b004      	add	sp, #16
   15bee:	bd80      	pop	{r7, pc}

00015bf0 <_i2c_master_wait_for_sync>:
{
   15bf0:	b580      	push	{r7, lr}
   15bf2:	b082      	sub	sp, #8
   15bf4:	af00      	add	r7, sp, #0
   15bf6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   15bf8:	46c0      	nop			; (mov r8, r8)
   15bfa:	687b      	ldr	r3, [r7, #4]
   15bfc:	0018      	movs	r0, r3
   15bfe:	4b04      	ldr	r3, [pc, #16]	; (15c10 <_i2c_master_wait_for_sync+0x20>)
   15c00:	4798      	blx	r3
   15c02:	1e03      	subs	r3, r0, #0
   15c04:	d1f9      	bne.n	15bfa <_i2c_master_wait_for_sync+0xa>
}
   15c06:	46c0      	nop			; (mov r8, r8)
   15c08:	46bd      	mov	sp, r7
   15c0a:	b002      	add	sp, #8
   15c0c:	bd80      	pop	{r7, pc}
   15c0e:	46c0      	nop			; (mov r8, r8)
   15c10:	00015bcd 	.word	0x00015bcd

00015c14 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   15c14:	b580      	push	{r7, lr}
   15c16:	b082      	sub	sp, #8
   15c18:	af00      	add	r7, sp, #0
   15c1a:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   15c1c:	687b      	ldr	r3, [r7, #4]
   15c1e:	2264      	movs	r2, #100	; 0x64
   15c20:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   15c22:	687b      	ldr	r3, [r7, #4]
   15c24:	4a1b      	ldr	r2, [pc, #108]	; (15c94 <i2c_master_get_config_defaults+0x80>)
   15c26:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   15c28:	687b      	ldr	r3, [r7, #4]
   15c2a:	2200      	movs	r2, #0
   15c2c:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   15c2e:	687b      	ldr	r3, [r7, #4]
   15c30:	2200      	movs	r2, #0
   15c32:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   15c34:	687b      	ldr	r3, [r7, #4]
   15c36:	2200      	movs	r2, #0
   15c38:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   15c3a:	687b      	ldr	r3, [r7, #4]
   15c3c:	2280      	movs	r2, #128	; 0x80
   15c3e:	0392      	lsls	r2, r2, #14
   15c40:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   15c42:	687b      	ldr	r3, [r7, #4]
   15c44:	2201      	movs	r2, #1
   15c46:	4252      	negs	r2, r2
   15c48:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   15c4a:	687b      	ldr	r3, [r7, #4]
   15c4c:	2201      	movs	r2, #1
   15c4e:	4252      	negs	r2, r2
   15c50:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   15c52:	687b      	ldr	r3, [r7, #4]
   15c54:	2200      	movs	r2, #0
   15c56:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   15c58:	687b      	ldr	r3, [r7, #4]
   15c5a:	2200      	movs	r2, #0
   15c5c:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   15c5e:	687b      	ldr	r3, [r7, #4]
   15c60:	2224      	movs	r2, #36	; 0x24
   15c62:	2100      	movs	r1, #0
   15c64:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   15c66:	687b      	ldr	r3, [r7, #4]
   15c68:	2200      	movs	r2, #0
   15c6a:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   15c6c:	687b      	ldr	r3, [r7, #4]
   15c6e:	222c      	movs	r2, #44	; 0x2c
   15c70:	2100      	movs	r1, #0
   15c72:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   15c74:	687b      	ldr	r3, [r7, #4]
   15c76:	222d      	movs	r2, #45	; 0x2d
   15c78:	2100      	movs	r1, #0
   15c7a:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   15c7c:	687b      	ldr	r3, [r7, #4]
   15c7e:	222e      	movs	r2, #46	; 0x2e
   15c80:	2100      	movs	r1, #0
   15c82:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   15c84:	687b      	ldr	r3, [r7, #4]
   15c86:	22d7      	movs	r2, #215	; 0xd7
   15c88:	861a      	strh	r2, [r3, #48]	; 0x30
}
   15c8a:	46c0      	nop			; (mov r8, r8)
   15c8c:	46bd      	mov	sp, r7
   15c8e:	b002      	add	sp, #8
   15c90:	bd80      	pop	{r7, pc}
   15c92:	46c0      	nop			; (mov r8, r8)
   15c94:	00000d48 	.word	0x00000d48

00015c98 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   15c98:	b580      	push	{r7, lr}
   15c9a:	b084      	sub	sp, #16
   15c9c:	af00      	add	r7, sp, #0
   15c9e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   15ca0:	687b      	ldr	r3, [r7, #4]
   15ca2:	681b      	ldr	r3, [r3, #0]
   15ca4:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   15ca6:	2300      	movs	r3, #0
   15ca8:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   15caa:	687b      	ldr	r3, [r7, #4]
   15cac:	0018      	movs	r0, r3
   15cae:	4b14      	ldr	r3, [pc, #80]	; (15d00 <i2c_master_enable+0x68>)
   15cb0:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   15cb2:	68bb      	ldr	r3, [r7, #8]
   15cb4:	681b      	ldr	r3, [r3, #0]
   15cb6:	2202      	movs	r2, #2
   15cb8:	431a      	orrs	r2, r3
   15cba:	68bb      	ldr	r3, [r7, #8]
   15cbc:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   15cbe:	687b      	ldr	r3, [r7, #4]
   15cc0:	681b      	ldr	r3, [r3, #0]
   15cc2:	0018      	movs	r0, r3
   15cc4:	4b0f      	ldr	r3, [pc, #60]	; (15d04 <i2c_master_enable+0x6c>)
   15cc6:	4798      	blx	r3
   15cc8:	0003      	movs	r3, r0
   15cca:	0018      	movs	r0, r3
   15ccc:	4b0e      	ldr	r3, [pc, #56]	; (15d08 <i2c_master_enable+0x70>)
   15cce:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   15cd0:	e00c      	b.n	15cec <i2c_master_enable+0x54>
		timeout_counter++;
   15cd2:	68fb      	ldr	r3, [r7, #12]
   15cd4:	3301      	adds	r3, #1
   15cd6:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   15cd8:	687b      	ldr	r3, [r7, #4]
   15cda:	88db      	ldrh	r3, [r3, #6]
   15cdc:	001a      	movs	r2, r3
   15cde:	68fb      	ldr	r3, [r7, #12]
   15ce0:	429a      	cmp	r2, r3
   15ce2:	d803      	bhi.n	15cec <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   15ce4:	68bb      	ldr	r3, [r7, #8]
   15ce6:	2210      	movs	r2, #16
   15ce8:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   15cea:	e006      	b.n	15cfa <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   15cec:	68bb      	ldr	r3, [r7, #8]
   15cee:	8b5b      	ldrh	r3, [r3, #26]
   15cf0:	b29b      	uxth	r3, r3
   15cf2:	001a      	movs	r2, r3
   15cf4:	2310      	movs	r3, #16
   15cf6:	4013      	ands	r3, r2
   15cf8:	d0eb      	beq.n	15cd2 <i2c_master_enable+0x3a>
		}
	}
}
   15cfa:	46bd      	mov	sp, r7
   15cfc:	b004      	add	sp, #16
   15cfe:	bd80      	pop	{r7, pc}
   15d00:	00015bf1 	.word	0x00015bf1
   15d04:	00026a55 	.word	0x00026a55
   15d08:	00015ba1 	.word	0x00015ba1

00015d0c <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   15d0c:	b580      	push	{r7, lr}
   15d0e:	b082      	sub	sp, #8
   15d10:	af00      	add	r7, sp, #0
   15d12:	6078      	str	r0, [r7, #4]
   15d14:	000a      	movs	r2, r1
   15d16:	1cfb      	adds	r3, r7, #3
   15d18:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   15d1a:	687b      	ldr	r3, [r7, #4]
   15d1c:	7e5b      	ldrb	r3, [r3, #25]
   15d1e:	b2db      	uxtb	r3, r3
   15d20:	b25a      	sxtb	r2, r3
   15d22:	1cfb      	adds	r3, r7, #3
   15d24:	781b      	ldrb	r3, [r3, #0]
   15d26:	2101      	movs	r1, #1
   15d28:	4099      	lsls	r1, r3
   15d2a:	000b      	movs	r3, r1
   15d2c:	b25b      	sxtb	r3, r3
   15d2e:	4313      	orrs	r3, r2
   15d30:	b25b      	sxtb	r3, r3
   15d32:	b2da      	uxtb	r2, r3
   15d34:	687b      	ldr	r3, [r7, #4]
   15d36:	765a      	strb	r2, [r3, #25]
}
   15d38:	46c0      	nop			; (mov r8, r8)
   15d3a:	46bd      	mov	sp, r7
   15d3c:	b002      	add	sp, #8
   15d3e:	bd80      	pop	{r7, pc}

00015d40 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
* Forward Declarations
******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   15d40:	b590      	push	{r4, r7, lr}
   15d42:	b091      	sub	sp, #68	; 0x44
   15d44:	af00      	add	r7, sp, #0
	int32_t error = STATUS_OK;
   15d46:	2300      	movs	r3, #0
   15d48:	63fb      	str	r3, [r7, #60]	; 0x3c
	status_code_genare_t errCodeAsf = STATUS_OK;
   15d4a:	233a      	movs	r3, #58	; 0x3a
   15d4c:	18fb      	adds	r3, r7, r3
   15d4e:	2200      	movs	r2, #0
   15d50:	701a      	strb	r2, [r3, #0]
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
   15d52:	1d3b      	adds	r3, r7, #4
   15d54:	0018      	movs	r0, r3
   15d56:	4b21      	ldr	r3, [pc, #132]	; (15ddc <I2cDriverConfigureSensorBus+0x9c>)
   15d58:	4798      	blx	r3
	
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   15d5a:	1d3b      	adds	r3, r7, #4
   15d5c:	4a20      	ldr	r2, [pc, #128]	; (15de0 <I2cDriverConfigureSensorBus+0xa0>)
   15d5e:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   15d60:	1d3b      	adds	r3, r7, #4
   15d62:	4a20      	ldr	r2, [pc, #128]	; (15de4 <I2cDriverConfigureSensorBus+0xa4>)
   15d64:	621a      	str	r2, [r3, #32]
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 1000;
   15d66:	1d3b      	adds	r3, r7, #4
   15d68:	22fa      	movs	r2, #250	; 0xfa
   15d6a:	0092      	lsls	r2, r2, #2
   15d6c:	82da      	strh	r2, [r3, #22]
	/* Initialize and enable device with config. Try three times to initialize */
	
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
   15d6e:	233b      	movs	r3, #59	; 0x3b
   15d70:	18fb      	adds	r3, r7, r3
   15d72:	2203      	movs	r2, #3
   15d74:	701a      	strb	r2, [r3, #0]
   15d76:	e01e      	b.n	15db6 <I2cDriverConfigureSensorBus+0x76>
		errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   15d78:	233a      	movs	r3, #58	; 0x3a
   15d7a:	18fc      	adds	r4, r7, r3
   15d7c:	1d3a      	adds	r2, r7, #4
   15d7e:	491a      	ldr	r1, [pc, #104]	; (15de8 <I2cDriverConfigureSensorBus+0xa8>)
   15d80:	4b1a      	ldr	r3, [pc, #104]	; (15dec <I2cDriverConfigureSensorBus+0xac>)
   15d82:	0018      	movs	r0, r3
   15d84:	4b1a      	ldr	r3, [pc, #104]	; (15df0 <I2cDriverConfigureSensorBus+0xb0>)
   15d86:	4798      	blx	r3
   15d88:	0003      	movs	r3, r0
   15d8a:	7023      	strb	r3, [r4, #0]
		if(STATUS_OK == errCodeAsf){
   15d8c:	233a      	movs	r3, #58	; 0x3a
   15d8e:	18fb      	adds	r3, r7, r3
   15d90:	781b      	ldrb	r3, [r3, #0]
   15d92:	2b00      	cmp	r3, #0
   15d94:	d104      	bne.n	15da0 <I2cDriverConfigureSensorBus+0x60>
			error = errCodeAsf;
   15d96:	233a      	movs	r3, #58	; 0x3a
   15d98:	18fb      	adds	r3, r7, r3
   15d9a:	781b      	ldrb	r3, [r3, #0]
   15d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
   15d9e:	e00f      	b.n	15dc0 <I2cDriverConfigureSensorBus+0x80>
			}else{
			i2c_master_reset(&i2cSensorBusInstance);
   15da0:	4b12      	ldr	r3, [pc, #72]	; (15dec <I2cDriverConfigureSensorBus+0xac>)
   15da2:	0018      	movs	r0, r3
   15da4:	4b13      	ldr	r3, [pc, #76]	; (15df4 <I2cDriverConfigureSensorBus+0xb4>)
   15da6:	4798      	blx	r3
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
   15da8:	233b      	movs	r3, #59	; 0x3b
   15daa:	18fb      	adds	r3, r7, r3
   15dac:	781a      	ldrb	r2, [r3, #0]
   15dae:	233b      	movs	r3, #59	; 0x3b
   15db0:	18fb      	adds	r3, r7, r3
   15db2:	3a01      	subs	r2, #1
   15db4:	701a      	strb	r2, [r3, #0]
   15db6:	233b      	movs	r3, #59	; 0x3b
   15db8:	18fb      	adds	r3, r7, r3
   15dba:	781b      	ldrb	r3, [r3, #0]
   15dbc:	2b00      	cmp	r3, #0
   15dbe:	d1db      	bne.n	15d78 <I2cDriverConfigureSensorBus+0x38>
		}
	}
	
	if(STATUS_OK != error) goto exit;
   15dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15dc2:	2b00      	cmp	r3, #0
   15dc4:	d104      	bne.n	15dd0 <I2cDriverConfigureSensorBus+0x90>
	
	i2c_master_enable(&i2cSensorBusInstance);
   15dc6:	4b09      	ldr	r3, [pc, #36]	; (15dec <I2cDriverConfigureSensorBus+0xac>)
   15dc8:	0018      	movs	r0, r3
   15dca:	4b0b      	ldr	r3, [pc, #44]	; (15df8 <I2cDriverConfigureSensorBus+0xb8>)
   15dcc:	4798      	blx	r3
   15dce:	e000      	b.n	15dd2 <I2cDriverConfigureSensorBus+0x92>
	if(STATUS_OK != error) goto exit;
   15dd0:	46c0      	nop			; (mov r8, r8)
	
	exit:
	return error;
   15dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   15dd4:	0018      	movs	r0, r3
   15dd6:	46bd      	mov	sp, r7
   15dd8:	b011      	add	sp, #68	; 0x44
   15dda:	bd90      	pop	{r4, r7, pc}
   15ddc:	00015c15 	.word	0x00015c15
   15de0:	00080002 	.word	0x00080002
   15de4:	00090002 	.word	0x00090002
   15de8:	42000800 	.word	0x42000800
   15dec:	200044b4 	.word	0x200044b4
   15df0:	00016e7d 	.word	0x00016e7d
   15df4:	00016fb1 	.word	0x00016fb1
   15df8:	00015c99 	.word	0x00015c99

00015dfc <I2cSensorsTxComplete>:
				and is currently waiting for a notification that it has finished.
 * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsTxComplete(struct i2c_master_module *const module){
   15dfc:	b580      	push	{r7, lr}
   15dfe:	b084      	sub	sp, #16
   15e00:	af00      	add	r7, sp, #0
   15e02:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
   15e04:	4b0e      	ldr	r3, [pc, #56]	; (15e40 <I2cSensorsTxComplete+0x44>)
   15e06:	2200      	movs	r2, #0
   15e08:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.rxDoneFlag = true;			
   15e0a:	4b0d      	ldr	r3, [pc, #52]	; (15e40 <I2cSensorsTxComplete+0x44>)
   15e0c:	2201      	movs	r2, #1
   15e0e:	609a      	str	r2, [r3, #8]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   15e10:	2300      	movs	r3, #0
   15e12:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   15e14:	4b0b      	ldr	r3, [pc, #44]	; (15e44 <I2cSensorsTxComplete+0x48>)
   15e16:	681b      	ldr	r3, [r3, #0]
   15e18:	220c      	movs	r2, #12
   15e1a:	18ba      	adds	r2, r7, r2
   15e1c:	0011      	movs	r1, r2
   15e1e:	0018      	movs	r0, r3
   15e20:	4b09      	ldr	r3, [pc, #36]	; (15e48 <I2cSensorsTxComplete+0x4c>)
   15e22:	4798      	blx	r3
	sensorTransmitError = false;
   15e24:	4b09      	ldr	r3, [pc, #36]	; (15e4c <I2cSensorsTxComplete+0x50>)
   15e26:	2200      	movs	r2, #0
   15e28:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   15e2a:	68fb      	ldr	r3, [r7, #12]
   15e2c:	2b00      	cmp	r3, #0
   15e2e:	d003      	beq.n	15e38 <I2cSensorsTxComplete+0x3c>
   15e30:	4b07      	ldr	r3, [pc, #28]	; (15e50 <I2cSensorsTxComplete+0x54>)
   15e32:	2280      	movs	r2, #128	; 0x80
   15e34:	0552      	lsls	r2, r2, #21
   15e36:	601a      	str	r2, [r3, #0]
}
   15e38:	46c0      	nop			; (mov r8, r8)
   15e3a:	46bd      	mov	sp, r7
   15e3c:	b004      	add	sp, #16
   15e3e:	bd80      	pop	{r7, pc}
   15e40:	20000c00 	.word	0x20000c00
   15e44:	200044dc 	.word	0x200044dc
   15e48:	0001a119 	.word	0x0001a119
   15e4c:	20000bfd 	.word	0x20000bfd
   15e50:	e000ed04 	.word	0xe000ed04

00015e54 <I2cSensorsRxComplete>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsRxComplete(struct i2c_master_module *const module){
   15e54:	b580      	push	{r7, lr}
   15e56:	b084      	sub	sp, #16
   15e58:	af00      	add	r7, sp, #0
   15e5a:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
   15e5c:	4b0e      	ldr	r3, [pc, #56]	; (15e98 <I2cSensorsRxComplete+0x44>)
   15e5e:	2200      	movs	r2, #0
   15e60:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.rxDoneFlag = true;
   15e62:	4b0d      	ldr	r3, [pc, #52]	; (15e98 <I2cSensorsRxComplete+0x44>)
   15e64:	2201      	movs	r2, #1
   15e66:	609a      	str	r2, [r3, #8]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   15e68:	2300      	movs	r3, #0
   15e6a:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   15e6c:	4b0b      	ldr	r3, [pc, #44]	; (15e9c <I2cSensorsRxComplete+0x48>)
   15e6e:	681b      	ldr	r3, [r3, #0]
   15e70:	220c      	movs	r2, #12
   15e72:	18ba      	adds	r2, r7, r2
   15e74:	0011      	movs	r1, r2
   15e76:	0018      	movs	r0, r3
   15e78:	4b09      	ldr	r3, [pc, #36]	; (15ea0 <I2cSensorsRxComplete+0x4c>)
   15e7a:	4798      	blx	r3
	sensorTransmitError = false;
   15e7c:	4b09      	ldr	r3, [pc, #36]	; (15ea4 <I2cSensorsRxComplete+0x50>)
   15e7e:	2200      	movs	r2, #0
   15e80:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   15e82:	68fb      	ldr	r3, [r7, #12]
   15e84:	2b00      	cmp	r3, #0
   15e86:	d003      	beq.n	15e90 <I2cSensorsRxComplete+0x3c>
   15e88:	4b07      	ldr	r3, [pc, #28]	; (15ea8 <I2cSensorsRxComplete+0x54>)
   15e8a:	2280      	movs	r2, #128	; 0x80
   15e8c:	0552      	lsls	r2, r2, #21
   15e8e:	601a      	str	r2, [r3, #0]
}
   15e90:	46c0      	nop			; (mov r8, r8)
   15e92:	46bd      	mov	sp, r7
   15e94:	b004      	add	sp, #16
   15e96:	bd80      	pop	{r7, pc}
   15e98:	20000c00 	.word	0x20000c00
   15e9c:	200044dc 	.word	0x200044dc
   15ea0:	0001a119 	.word	0x0001a119
   15ea4:	20000bfd 	.word	0x20000bfd
   15ea8:	e000ed04 	.word	0xe000ed04

00015eac <I2cSensorsError>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsError(struct i2c_master_module *const module){
   15eac:	b580      	push	{r7, lr}
   15eae:	b084      	sub	sp, #16
   15eb0:	af00      	add	r7, sp, #0
   15eb2:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
   15eb4:	4b0e      	ldr	r3, [pc, #56]	; (15ef0 <I2cSensorsError+0x44>)
   15eb6:	2200      	movs	r2, #0
   15eb8:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.txDoneFlag = true;
   15eba:	4b0d      	ldr	r3, [pc, #52]	; (15ef0 <I2cSensorsError+0x44>)
   15ebc:	2201      	movs	r2, #1
   15ebe:	605a      	str	r2, [r3, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   15ec0:	2300      	movs	r3, #0
   15ec2:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   15ec4:	4b0b      	ldr	r3, [pc, #44]	; (15ef4 <I2cSensorsError+0x48>)
   15ec6:	681b      	ldr	r3, [r3, #0]
   15ec8:	220c      	movs	r2, #12
   15eca:	18ba      	adds	r2, r7, r2
   15ecc:	0011      	movs	r1, r2
   15ece:	0018      	movs	r0, r3
   15ed0:	4b09      	ldr	r3, [pc, #36]	; (15ef8 <I2cSensorsError+0x4c>)
   15ed2:	4798      	blx	r3
	sensorTransmitError = false;
   15ed4:	4b09      	ldr	r3, [pc, #36]	; (15efc <I2cSensorsError+0x50>)
   15ed6:	2200      	movs	r2, #0
   15ed8:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   15eda:	68fb      	ldr	r3, [r7, #12]
   15edc:	2b00      	cmp	r3, #0
   15ede:	d003      	beq.n	15ee8 <I2cSensorsError+0x3c>
   15ee0:	4b07      	ldr	r3, [pc, #28]	; (15f00 <I2cSensorsError+0x54>)
   15ee2:	2280      	movs	r2, #128	; 0x80
   15ee4:	0552      	lsls	r2, r2, #21
   15ee6:	601a      	str	r2, [r3, #0]
}
   15ee8:	46c0      	nop			; (mov r8, r8)
   15eea:	46bd      	mov	sp, r7
   15eec:	b004      	add	sp, #16
   15eee:	bd80      	pop	{r7, pc}
   15ef0:	20000c00 	.word	0x20000c00
   15ef4:	200044dc 	.word	0x200044dc
   15ef8:	0001a119 	.word	0x0001a119
   15efc:	20000bfd 	.word	0x20000bfd
   15f00:	e000ed04 	.word	0xe000ed04

00015f04 <I2cDriverRegisterSensorBusCallbacks>:



void I2cDriverRegisterSensorBusCallbacks(void)
{
   15f04:	b580      	push	{r7, lr}
   15f06:	af00      	add	r7, sp, #0
	/* Register callback function. */
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   15f08:	4911      	ldr	r1, [pc, #68]	; (15f50 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   15f0a:	4b12      	ldr	r3, [pc, #72]	; (15f54 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15f0c:	2200      	movs	r2, #0
   15f0e:	0018      	movs	r0, r3
   15f10:	4b11      	ldr	r3, [pc, #68]	; (15f58 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   15f12:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   15f14:	4b0f      	ldr	r3, [pc, #60]	; (15f54 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15f16:	2100      	movs	r1, #0
   15f18:	0018      	movs	r0, r3
   15f1a:	4b10      	ldr	r3, [pc, #64]	; (15f5c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   15f1c:	4798      	blx	r3
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   15f1e:	4910      	ldr	r1, [pc, #64]	; (15f60 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   15f20:	4b0c      	ldr	r3, [pc, #48]	; (15f54 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15f22:	2201      	movs	r2, #1
   15f24:	0018      	movs	r0, r3
   15f26:	4b0c      	ldr	r3, [pc, #48]	; (15f58 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   15f28:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_READ_COMPLETE);
   15f2a:	4b0a      	ldr	r3, [pc, #40]	; (15f54 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15f2c:	2101      	movs	r1, #1
   15f2e:	0018      	movs	r0, r3
   15f30:	4b0a      	ldr	r3, [pc, #40]	; (15f5c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   15f32:	4798      	blx	r3
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError,I2C_MASTER_CALLBACK_ERROR);
   15f34:	490b      	ldr	r1, [pc, #44]	; (15f64 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   15f36:	4b07      	ldr	r3, [pc, #28]	; (15f54 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15f38:	2202      	movs	r2, #2
   15f3a:	0018      	movs	r0, r3
   15f3c:	4b06      	ldr	r3, [pc, #24]	; (15f58 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   15f3e:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_ERROR);
   15f40:	4b04      	ldr	r3, [pc, #16]	; (15f54 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15f42:	2102      	movs	r1, #2
   15f44:	0018      	movs	r0, r3
   15f46:	4b05      	ldr	r3, [pc, #20]	; (15f5c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   15f48:	4798      	blx	r3
}
   15f4a:	46c0      	nop			; (mov r8, r8)
   15f4c:	46bd      	mov	sp, r7
   15f4e:	bd80      	pop	{r7, pc}
   15f50:	00015dfd 	.word	0x00015dfd
   15f54:	200044b4 	.word	0x200044b4
   15f58:	0001356d 	.word	0x0001356d
   15f5c:	00015d0d 	.word	0x00015d0d
   15f60:	00015e55 	.word	0x00015e55
   15f64:	00015ead 	.word	0x00015ead

00015f68 <I2cInitializeDriver>:
 * @fn			int32_t I2cInitializeDriver(void)
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note        
 *****************************************************************************/
 int32_t I2cInitializeDriver(void){
   15f68:	b580      	push	{r7, lr}
   15f6a:	b082      	sub	sp, #8
   15f6c:	af00      	add	r7, sp, #0
	
	int32_t error = STATUS_OK;
   15f6e:	2300      	movs	r3, #0
   15f70:	607b      	str	r3, [r7, #4]


	error = I2cDriverConfigureSensorBus();
   15f72:	4b14      	ldr	r3, [pc, #80]	; (15fc4 <I2cInitializeDriver+0x5c>)
   15f74:	4798      	blx	r3
   15f76:	0003      	movs	r3, r0
   15f78:	607b      	str	r3, [r7, #4]
	if(STATUS_OK != error) goto exit;
   15f7a:	687b      	ldr	r3, [r7, #4]
   15f7c:	2b00      	cmp	r3, #0
   15f7e:	d11a      	bne.n	15fb6 <I2cInitializeDriver+0x4e>
	
	I2cDriverRegisterSensorBusCallbacks();
   15f80:	4b11      	ldr	r3, [pc, #68]	; (15fc8 <I2cInitializeDriver+0x60>)
   15f82:	4798      	blx	r3
	
		
	sensorI2cMutexHandle = xSemaphoreCreateMutex();
   15f84:	2001      	movs	r0, #1
   15f86:	4b11      	ldr	r3, [pc, #68]	; (15fcc <I2cInitializeDriver+0x64>)
   15f88:	4798      	blx	r3
   15f8a:	0002      	movs	r2, r0
   15f8c:	4b10      	ldr	r3, [pc, #64]	; (15fd0 <I2cInitializeDriver+0x68>)
   15f8e:	601a      	str	r2, [r3, #0]
	
	sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   15f90:	2203      	movs	r2, #3
   15f92:	2100      	movs	r1, #0
   15f94:	2001      	movs	r0, #1
   15f96:	4b0f      	ldr	r3, [pc, #60]	; (15fd4 <I2cInitializeDriver+0x6c>)
   15f98:	4798      	blx	r3
   15f9a:	0002      	movs	r2, r0
   15f9c:	4b0e      	ldr	r3, [pc, #56]	; (15fd8 <I2cInitializeDriver+0x70>)
   15f9e:	601a      	str	r2, [r3, #0]
	//xSemaphoreGive(sensorI2cSemaphoreHandle);

	
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
   15fa0:	4b0b      	ldr	r3, [pc, #44]	; (15fd0 <I2cInitializeDriver+0x68>)
   15fa2:	681b      	ldr	r3, [r3, #0]
   15fa4:	2b00      	cmp	r3, #0
   15fa6:	d003      	beq.n	15fb0 <I2cInitializeDriver+0x48>
   15fa8:	4b0b      	ldr	r3, [pc, #44]	; (15fd8 <I2cInitializeDriver+0x70>)
   15faa:	681b      	ldr	r3, [r3, #0]
   15fac:	2b00      	cmp	r3, #0
   15fae:	d103      	bne.n	15fb8 <I2cInitializeDriver+0x50>
		error = STATUS_SUSPEND;	//Could not initialize mutex!
   15fb0:	2306      	movs	r3, #6
   15fb2:	607b      	str	r3, [r7, #4]
		goto exit;
   15fb4:	e000      	b.n	15fb8 <I2cInitializeDriver+0x50>
	if(STATUS_OK != error) goto exit;
   15fb6:	46c0      	nop			; (mov r8, r8)
	}

	exit:
	return error;		
   15fb8:	687b      	ldr	r3, [r7, #4]
}
   15fba:	0018      	movs	r0, r3
   15fbc:	46bd      	mov	sp, r7
   15fbe:	b002      	add	sp, #8
   15fc0:	bd80      	pop	{r7, pc}
   15fc2:	46c0      	nop			; (mov r8, r8)
   15fc4:	00015d41 	.word	0x00015d41
   15fc8:	00015f05 	.word	0x00015f05
   15fcc:	00019a51 	.word	0x00019a51
   15fd0:	200044b0 	.word	0x200044b0
   15fd4:	000197e9 	.word	0x000197e9
   15fd8:	200044dc 	.word	0x200044dc

00015fdc <I2cWriteData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData(I2C_Data *data){
   15fdc:	b590      	push	{r4, r7, lr}
   15fde:	b089      	sub	sp, #36	; 0x24
   15fe0:	af00      	add	r7, sp, #0
   15fe2:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
   15fe4:	2300      	movs	r3, #0
   15fe6:	61fb      	str	r3, [r7, #28]
	enum status_code hwError;
	struct i2c_master_module *I2CBusHw = NULL;
   15fe8:	2300      	movs	r3, #0
   15fea:	61bb      	str	r3, [r7, #24]
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
   15fec:	2300      	movs	r3, #0
   15fee:	617b      	str	r3, [r7, #20]
	struct i2c_master_packet *readPacket = NULL;
   15ff0:	2300      	movs	r3, #0
   15ff2:	613b      	str	r3, [r7, #16]
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   15ff4:	687b      	ldr	r3, [r7, #4]
   15ff6:	2b00      	cmp	r3, #0
   15ff8:	d003      	beq.n	16002 <I2cWriteData+0x26>
   15ffa:	687b      	ldr	r3, [r7, #4]
   15ffc:	685b      	ldr	r3, [r3, #4]
   15ffe:	2b00      	cmp	r3, #0
   16000:	d103      	bne.n	1600a <I2cWriteData+0x2e>
		error = ERR_INVALID_ARG;
   16002:	2308      	movs	r3, #8
   16004:	425b      	negs	r3, r3
   16006:	61fb      	str	r3, [r7, #28]
		goto exit;
   16008:	e01f      	b.n	1604a <I2cWriteData+0x6e>
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
   1600a:	687b      	ldr	r3, [r7, #4]
   1600c:	781b      	ldrb	r3, [r3, #0]
   1600e:	b29a      	uxth	r2, r3
   16010:	4b10      	ldr	r3, [pc, #64]	; (16054 <I2cWriteData+0x78>)
   16012:	801a      	strh	r2, [r3, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
   16014:	687b      	ldr	r3, [r7, #4]
   16016:	685a      	ldr	r2, [r3, #4]
   16018:	4b0e      	ldr	r3, [pc, #56]	; (16054 <I2cWriteData+0x78>)
   1601a:	605a      	str	r2, [r3, #4]
	sensorPacketWrite.data_length = data->lenOut;
   1601c:	687b      	ldr	r3, [r7, #4]
   1601e:	89da      	ldrh	r2, [r3, #14]
   16020:	4b0c      	ldr	r3, [pc, #48]	; (16054 <I2cWriteData+0x78>)
   16022:	805a      	strh	r2, [r3, #2]
	
	//Write

	 hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   16024:	230f      	movs	r3, #15
   16026:	18fc      	adds	r4, r7, r3
   16028:	4a0a      	ldr	r2, [pc, #40]	; (16054 <I2cWriteData+0x78>)
   1602a:	4b0b      	ldr	r3, [pc, #44]	; (16058 <I2cWriteData+0x7c>)
   1602c:	0011      	movs	r1, r2
   1602e:	0018      	movs	r0, r3
   16030:	4b0a      	ldr	r3, [pc, #40]	; (1605c <I2cWriteData+0x80>)
   16032:	4798      	blx	r3
   16034:	0003      	movs	r3, r0
   16036:	7023      	strb	r3, [r4, #0]
	
	if(STATUS_OK != hwError)
   16038:	230f      	movs	r3, #15
   1603a:	18fb      	adds	r3, r7, r3
   1603c:	781b      	ldrb	r3, [r3, #0]
   1603e:	2b00      	cmp	r3, #0
   16040:	d003      	beq.n	1604a <I2cWriteData+0x6e>
	{
		error = ERROR_IO;
   16042:	2306      	movs	r3, #6
   16044:	425b      	negs	r3, r3
   16046:	61fb      	str	r3, [r7, #28]
		goto exit;
   16048:	46c0      	nop			; (mov r8, r8)
	}
	
	exit:
	return error;
   1604a:	69fb      	ldr	r3, [r7, #28]
}
   1604c:	0018      	movs	r0, r3
   1604e:	46bd      	mov	sp, r7
   16050:	b009      	add	sp, #36	; 0x24
   16052:	bd90      	pop	{r4, r7, pc}
   16054:	200044e0 	.word	0x200044e0
   16058:	200044b4 	.word	0x200044b4
   1605c:	000137f1 	.word	0x000137f1

00016060 <I2cReadData>:
 * @details     
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
int32_t I2cReadData(I2C_Data *data){
   16060:	b590      	push	{r4, r7, lr}
   16062:	b089      	sub	sp, #36	; 0x24
   16064:	af00      	add	r7, sp, #0
   16066:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
   16068:	2300      	movs	r3, #0
   1606a:	61fb      	str	r3, [r7, #28]
	enum status_code hwError;
	struct i2c_master_module *I2CBusHw = NULL;
   1606c:	2300      	movs	r3, #0
   1606e:	61bb      	str	r3, [r7, #24]
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
   16070:	2300      	movs	r3, #0
   16072:	617b      	str	r3, [r7, #20]
	struct i2c_master_packet *readPacket = NULL;
   16074:	2300      	movs	r3, #0
   16076:	613b      	str	r3, [r7, #16]
	
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   16078:	687b      	ldr	r3, [r7, #4]
   1607a:	2b00      	cmp	r3, #0
   1607c:	d003      	beq.n	16086 <I2cReadData+0x26>
   1607e:	687b      	ldr	r3, [r7, #4]
   16080:	685b      	ldr	r3, [r3, #4]
   16082:	2b00      	cmp	r3, #0
   16084:	d103      	bne.n	1608e <I2cReadData+0x2e>
		error = ERR_INVALID_ARG;
   16086:	2308      	movs	r3, #8
   16088:	425b      	negs	r3, r3
   1608a:	61fb      	str	r3, [r7, #28]
		goto exit;
   1608c:	e01f      	b.n	160ce <I2cReadData+0x6e>
	}

	//Prepare to read
	sensorPacketWrite.address = data->address;
   1608e:	687b      	ldr	r3, [r7, #4]
   16090:	781b      	ldrb	r3, [r3, #0]
   16092:	b29a      	uxth	r2, r3
   16094:	4b10      	ldr	r3, [pc, #64]	; (160d8 <I2cReadData+0x78>)
   16096:	801a      	strh	r2, [r3, #0]
	sensorPacketWrite.data = data->msgIn;
   16098:	687b      	ldr	r3, [r7, #4]
   1609a:	689a      	ldr	r2, [r3, #8]
   1609c:	4b0e      	ldr	r3, [pc, #56]	; (160d8 <I2cReadData+0x78>)
   1609e:	605a      	str	r2, [r3, #4]
	sensorPacketWrite.data_length = data->lenIn;
   160a0:	687b      	ldr	r3, [r7, #4]
   160a2:	899a      	ldrh	r2, [r3, #12]
   160a4:	4b0c      	ldr	r3, [pc, #48]	; (160d8 <I2cReadData+0x78>)
   160a6:	805a      	strh	r2, [r3, #2]
	
	//Read

	hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   160a8:	230f      	movs	r3, #15
   160aa:	18fc      	adds	r4, r7, r3
   160ac:	4a0a      	ldr	r2, [pc, #40]	; (160d8 <I2cReadData+0x78>)
   160ae:	4b0b      	ldr	r3, [pc, #44]	; (160dc <I2cReadData+0x7c>)
   160b0:	0011      	movs	r1, r2
   160b2:	0018      	movs	r0, r3
   160b4:	4b0a      	ldr	r3, [pc, #40]	; (160e0 <I2cReadData+0x80>)
   160b6:	4798      	blx	r3
   160b8:	0003      	movs	r3, r0
   160ba:	7023      	strb	r3, [r4, #0]
	
	if(STATUS_OK != hwError)
   160bc:	230f      	movs	r3, #15
   160be:	18fb      	adds	r3, r7, r3
   160c0:	781b      	ldrb	r3, [r3, #0]
   160c2:	2b00      	cmp	r3, #0
   160c4:	d003      	beq.n	160ce <I2cReadData+0x6e>
	{
		error = ERROR_IO;
   160c6:	2306      	movs	r3, #6
   160c8:	425b      	negs	r3, r3
   160ca:	61fb      	str	r3, [r7, #28]
		goto exit;
   160cc:	46c0      	nop			; (mov r8, r8)
	}
	
	exit:
	return error;
   160ce:	69fb      	ldr	r3, [r7, #28]
}
   160d0:	0018      	movs	r0, r3
   160d2:	46bd      	mov	sp, r7
   160d4:	b009      	add	sp, #36	; 0x24
   160d6:	bd90      	pop	{r4, r7, pc}
   160d8:	200044e0 	.word	0x200044e0
   160dc:	200044b4 	.word	0x200044b4
   160e0:	0001370d 	.word	0x0001370d

000160e4 <I2cFreeMutex>:
 * @details     
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note        
 *****************************************************************************/
int32_t I2cFreeMutex(void){
   160e4:	b590      	push	{r4, r7, lr}
   160e6:	b083      	sub	sp, #12
   160e8:	af00      	add	r7, sp, #0
	
	int32_t error = ERROR_NONE;
   160ea:	2300      	movs	r3, #0
   160ec:	607b      	str	r3, [r7, #4]
	
	if( xSemaphoreGive( sensorI2cMutexHandle ) != pdTRUE ){
   160ee:	4b09      	ldr	r3, [pc, #36]	; (16114 <I2cFreeMutex+0x30>)
   160f0:	6818      	ldr	r0, [r3, #0]
   160f2:	2300      	movs	r3, #0
   160f4:	2200      	movs	r2, #0
   160f6:	2100      	movs	r1, #0
   160f8:	4c07      	ldr	r4, [pc, #28]	; (16118 <I2cFreeMutex+0x34>)
   160fa:	47a0      	blx	r4
   160fc:	0003      	movs	r3, r0
   160fe:	2b01      	cmp	r3, #1
   16100:	d002      	beq.n	16108 <I2cFreeMutex+0x24>
		error = ERROR_NOT_INITIALIZED;	//We could not return the mutex! We must not have it!
   16102:	2314      	movs	r3, #20
   16104:	425b      	negs	r3, r3
   16106:	607b      	str	r3, [r7, #4]
	}
	return error;
   16108:	687b      	ldr	r3, [r7, #4]
}
   1610a:	0018      	movs	r0, r3
   1610c:	46bd      	mov	sp, r7
   1610e:	b003      	add	sp, #12
   16110:	bd90      	pop	{r4, r7, pc}
   16112:	46c0      	nop			; (mov r8, r8)
   16114:	200044b0 	.word	0x200044b0
   16118:	00019a91 	.word	0x00019a91

0001611c <I2cGetMutex>:
 * @details     
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note        
 *****************************************************************************/
int32_t I2cGetMutex(TickType_t waitTime){
   1611c:	b580      	push	{r7, lr}
   1611e:	b084      	sub	sp, #16
   16120:	af00      	add	r7, sp, #0
   16122:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
   16124:	2300      	movs	r3, #0
   16126:	60fb      	str	r3, [r7, #12]
	if(xSemaphoreTake( sensorI2cMutexHandle, waitTime ) != pdTRUE)
   16128:	4b08      	ldr	r3, [pc, #32]	; (1614c <I2cGetMutex+0x30>)
   1612a:	681b      	ldr	r3, [r3, #0]
   1612c:	687a      	ldr	r2, [r7, #4]
   1612e:	0011      	movs	r1, r2
   16130:	0018      	movs	r0, r3
   16132:	4b07      	ldr	r3, [pc, #28]	; (16150 <I2cGetMutex+0x34>)
   16134:	4798      	blx	r3
   16136:	0003      	movs	r3, r0
   16138:	2b01      	cmp	r3, #1
   1613a:	d002      	beq.n	16142 <I2cGetMutex+0x26>
	{
		error = ERROR_NOT_READY;
   1613c:	231d      	movs	r3, #29
   1613e:	425b      	negs	r3, r3
   16140:	60fb      	str	r3, [r7, #12]
	}
	return error;
   16142:	68fb      	ldr	r3, [r7, #12]
}
   16144:	0018      	movs	r0, r3
   16146:	46bd      	mov	sp, r7
   16148:	b004      	add	sp, #16
   1614a:	bd80      	pop	{r7, pc}
   1614c:	200044b0 	.word	0x200044b0
   16150:	0001a7a1 	.word	0x0001a7a1

00016154 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle){
   16154:	b580      	push	{r7, lr}
   16156:	b084      	sub	sp, #16
   16158:	af00      	add	r7, sp, #0
   1615a:	6078      	str	r0, [r7, #4]
	int32_t error = ERROR_NONE;
   1615c:	2300      	movs	r3, #0
   1615e:	60fb      	str	r3, [r7, #12]
	*handle = sensorI2cSemaphoreHandle;
   16160:	4b04      	ldr	r3, [pc, #16]	; (16174 <I2cGetSemaphoreHandle+0x20>)
   16162:	681a      	ldr	r2, [r3, #0]
   16164:	687b      	ldr	r3, [r7, #4]
   16166:	601a      	str	r2, [r3, #0]
	return error;
   16168:	68fb      	ldr	r3, [r7, #12]
}
   1616a:	0018      	movs	r0, r3
   1616c:	46bd      	mov	sp, r7
   1616e:	b004      	add	sp, #16
   16170:	bd80      	pop	{r7, pc}
   16172:	46c0      	nop			; (mov r8, r8)
   16174:	200044dc 	.word	0x200044dc

00016178 <I2cGetTaskErrorStatus>:
 * @brief       Sets the error state of the latest I2C bus transaction for a given I2C data, which holds which physical I2C bus we are using.
 * @details     This error flag is set to indicate when a I2C transaction has failed on a given I2C bus (encapsulated in the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
 static uint8_t I2cGetTaskErrorStatus(void){
   16178:	b580      	push	{r7, lr}
   1617a:	af00      	add	r7, sp, #0
	 return sensorTransmitError;
   1617c:	4b02      	ldr	r3, [pc, #8]	; (16188 <I2cGetTaskErrorStatus+0x10>)
   1617e:	781b      	ldrb	r3, [r3, #0]
 }
   16180:	0018      	movs	r0, r3
   16182:	46bd      	mov	sp, r7
   16184:	bd80      	pop	{r7, pc}
   16186:	46c0      	nop			; (mov r8, r8)
   16188:	20000bfd 	.word	0x20000bfd

0001618c <I2cSetTaskErrorStatus>:
 * @details     This error flag is set to indicate when a I2C transaction has failed on a given I2C bus (encapsulated in the I2C data structure).
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
 static void I2cSetTaskErrorStatus(uint8_t value){
   1618c:	b580      	push	{r7, lr}
   1618e:	b082      	sub	sp, #8
   16190:	af00      	add	r7, sp, #0
   16192:	0002      	movs	r2, r0
   16194:	1dfb      	adds	r3, r7, #7
   16196:	701a      	strb	r2, [r3, #0]
	sensorTransmitError = value;
   16198:	4b03      	ldr	r3, [pc, #12]	; (161a8 <I2cSetTaskErrorStatus+0x1c>)
   1619a:	1dfa      	adds	r2, r7, #7
   1619c:	7812      	ldrb	r2, [r2, #0]
   1619e:	701a      	strb	r2, [r3, #0]
 }
   161a0:	46c0      	nop			; (mov r8, r8)
   161a2:	46bd      	mov	sp, r7
   161a4:	b002      	add	sp, #8
   161a6:	bd80      	pop	{r7, pc}
   161a8:	20000bfd 	.word	0x20000bfd

000161ac <I2cWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime){
   161ac:	b580      	push	{r7, lr}
   161ae:	b084      	sub	sp, #16
   161b0:	af00      	add	r7, sp, #0
   161b2:	6078      	str	r0, [r7, #4]
   161b4:	6039      	str	r1, [r7, #0]

int32_t error = ERROR_NONE;
   161b6:	2300      	movs	r3, #0
   161b8:	60fb      	str	r3, [r7, #12]
SemaphoreHandle_t semHandle = NULL;
   161ba:	2300      	movs	r3, #0
   161bc:	60bb      	str	r3, [r7, #8]


//---0. Get Mutex
error = I2cGetMutex(WAIT_I2C_LINE_MS);
   161be:	2396      	movs	r3, #150	; 0x96
   161c0:	005b      	lsls	r3, r3, #1
   161c2:	0018      	movs	r0, r3
   161c4:	4b27      	ldr	r3, [pc, #156]	; (16264 <I2cWriteDataWait+0xb8>)
   161c6:	4798      	blx	r3
   161c8:	0003      	movs	r3, r0
   161ca:	60fb      	str	r3, [r7, #12]
if(ERROR_NONE != error) goto exit;
   161cc:	68fb      	ldr	r3, [r7, #12]
   161ce:	2b00      	cmp	r3, #0
   161d0:	d138      	bne.n	16244 <I2cWriteDataWait+0x98>


//---1. Get Semaphore Handle
error = I2cGetSemaphoreHandle(&semHandle);
   161d2:	2308      	movs	r3, #8
   161d4:	18fb      	adds	r3, r7, r3
   161d6:	0018      	movs	r0, r3
   161d8:	4b23      	ldr	r3, [pc, #140]	; (16268 <I2cWriteDataWait+0xbc>)
   161da:	4798      	blx	r3
   161dc:	0003      	movs	r3, r0
   161de:	60fb      	str	r3, [r7, #12]
if(ERROR_NONE != error) goto exit;
   161e0:	68fb      	ldr	r3, [r7, #12]
   161e2:	2b00      	cmp	r3, #0
   161e4:	d130      	bne.n	16248 <I2cWriteDataWait+0x9c>

//---2. Initiate sending data

error = I2cWriteData(data);
   161e6:	687b      	ldr	r3, [r7, #4]
   161e8:	0018      	movs	r0, r3
   161ea:	4b20      	ldr	r3, [pc, #128]	; (1626c <I2cWriteDataWait+0xc0>)
   161ec:	4798      	blx	r3
   161ee:	0003      	movs	r3, r0
   161f0:	60fb      	str	r3, [r7, #12]
if (ERROR_NONE != error){
   161f2:	68fb      	ldr	r3, [r7, #12]
   161f4:	2b00      	cmp	r3, #0
   161f6:	d12a      	bne.n	1624e <I2cWriteDataWait+0xa2>
	goto exitError0;
}

//---2. Wait for binary semaphore to tell us that we are done!
if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   161f8:	68bb      	ldr	r3, [r7, #8]
   161fa:	683a      	ldr	r2, [r7, #0]
   161fc:	0011      	movs	r1, r2
   161fe:	0018      	movs	r0, r3
   16200:	4b1b      	ldr	r3, [pc, #108]	; (16270 <I2cWriteDataWait+0xc4>)
   16202:	4798      	blx	r3
   16204:	0003      	movs	r3, r0
   16206:	2b01      	cmp	r3, #1
   16208:	d111      	bne.n	1622e <I2cWriteDataWait+0x82>
	/* The transmission ended as expected. We now delay until the I2C sensor is finished */
	if(I2cGetTaskErrorStatus()){
   1620a:	4b1a      	ldr	r3, [pc, #104]	; (16274 <I2cWriteDataWait+0xc8>)
   1620c:	4798      	blx	r3
   1620e:	1e03      	subs	r3, r0, #0
   16210:	d011      	beq.n	16236 <I2cWriteDataWait+0x8a>
		I2cSetTaskErrorStatus(false);
   16212:	2000      	movs	r0, #0
   16214:	4b18      	ldr	r3, [pc, #96]	; (16278 <I2cWriteDataWait+0xcc>)
   16216:	4798      	blx	r3
		if(error != ERROR_NONE){
   16218:	68fb      	ldr	r3, [r7, #12]
   1621a:	2b00      	cmp	r3, #0
   1621c:	d003      	beq.n	16226 <I2cWriteDataWait+0x7a>
    		error = ERROR_I2C_HANG_RESET;
   1621e:	2321      	movs	r3, #33	; 0x21
   16220:	425b      	negs	r3, r3
   16222:	60fb      	str	r3, [r7, #12]
    	}else{
    		error = ERROR_ABORTED;
		}
		goto exitError0;
   16224:	e014      	b.n	16250 <I2cWriteDataWait+0xa4>
    		error = ERROR_ABORTED;
   16226:	2303      	movs	r3, #3
   16228:	425b      	negs	r3, r3
   1622a:	60fb      	str	r3, [r7, #12]
		goto exitError0;
   1622c:	e010      	b.n	16250 <I2cWriteDataWait+0xa4>
	}
}else{
	/* The call to ulTaskNotifyTake() timed out. */
	error = ERR_TIMEOUT;
   1622e:	2303      	movs	r3, #3
   16230:	425b      	negs	r3, r3
   16232:	60fb      	str	r3, [r7, #12]
	goto exitError0;
   16234:	e00c      	b.n	16250 <I2cWriteDataWait+0xa4>
}

//---8. Release Mutex
error |= I2cFreeMutex();
   16236:	4b11      	ldr	r3, [pc, #68]	; (1627c <I2cWriteDataWait+0xd0>)
   16238:	4798      	blx	r3
   1623a:	0002      	movs	r2, r0
   1623c:	68fb      	ldr	r3, [r7, #12]
   1623e:	4313      	orrs	r3, r2
   16240:	60fb      	str	r3, [r7, #12]
   16242:	e002      	b.n	1624a <I2cWriteDataWait+0x9e>
if(ERROR_NONE != error) goto exit;
   16244:	46c0      	nop			; (mov r8, r8)
   16246:	e000      	b.n	1624a <I2cWriteDataWait+0x9e>
if(ERROR_NONE != error) goto exit;
   16248:	46c0      	nop			; (mov r8, r8)
//xSemaphoreGive(semHandle);
exit:
return error;
   1624a:	68fb      	ldr	r3, [r7, #12]
   1624c:	e005      	b.n	1625a <I2cWriteDataWait+0xae>
	goto exitError0;
   1624e:	46c0      	nop			; (mov r8, r8)

exitError0:
error = I2cFreeMutex();
   16250:	4b0a      	ldr	r3, [pc, #40]	; (1627c <I2cWriteDataWait+0xd0>)
   16252:	4798      	blx	r3
   16254:	0003      	movs	r3, r0
   16256:	60fb      	str	r3, [r7, #12]
//xSemaphoreGive(semHandle);
return error;
   16258:	68fb      	ldr	r3, [r7, #12]

}
   1625a:	0018      	movs	r0, r3
   1625c:	46bd      	mov	sp, r7
   1625e:	b004      	add	sp, #16
   16260:	bd80      	pop	{r7, pc}
   16262:	46c0      	nop			; (mov r8, r8)
   16264:	0001611d 	.word	0x0001611d
   16268:	00016155 	.word	0x00016155
   1626c:	00015fdd 	.word	0x00015fdd
   16270:	0001a7a1 	.word	0x0001a7a1
   16274:	00016179 	.word	0x00016179
   16278:	0001618d 	.word	0x0001618d
   1627c:	000160e5 	.word	0x000160e5

00016280 <I2cReadDataWait>:
 * @param[in]   delay Delay that the I2C device needs to return the response. Can be 0 if the response is ready instantly. It can be the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
 *****************************************************************************/
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime){
   16280:	b580      	push	{r7, lr}
   16282:	b086      	sub	sp, #24
   16284:	af00      	add	r7, sp, #0
   16286:	60f8      	str	r0, [r7, #12]
   16288:	60b9      	str	r1, [r7, #8]
   1628a:	607a      	str	r2, [r7, #4]
	int32_t error = ERROR_NONE;
   1628c:	2300      	movs	r3, #0
   1628e:	617b      	str	r3, [r7, #20]
	SemaphoreHandle_t semHandle = NULL;
   16290:	2300      	movs	r3, #0
   16292:	613b      	str	r3, [r7, #16]
	

	//---0. Get Mutex
	error = I2cGetMutex( WAIT_I2C_LINE_MS);
   16294:	2396      	movs	r3, #150	; 0x96
   16296:	005b      	lsls	r3, r3, #1
   16298:	0018      	movs	r0, r3
   1629a:	4b36      	ldr	r3, [pc, #216]	; (16374 <I2cReadDataWait+0xf4>)
   1629c:	4798      	blx	r3
   1629e:	0003      	movs	r3, r0
   162a0:	617b      	str	r3, [r7, #20]
	if(ERROR_NONE != error) goto exit;
   162a2:	697b      	ldr	r3, [r7, #20]
   162a4:	2b00      	cmp	r3, #0
   162a6:	d155      	bne.n	16354 <I2cReadDataWait+0xd4>


	//---1. Get Semaphore Handle
	error = I2cGetSemaphoreHandle( &semHandle);
   162a8:	2310      	movs	r3, #16
   162aa:	18fb      	adds	r3, r7, r3
   162ac:	0018      	movs	r0, r3
   162ae:	4b32      	ldr	r3, [pc, #200]	; (16378 <I2cReadDataWait+0xf8>)
   162b0:	4798      	blx	r3
   162b2:	0003      	movs	r3, r0
   162b4:	617b      	str	r3, [r7, #20]
	if(ERROR_NONE != error) goto exit;
   162b6:	697b      	ldr	r3, [r7, #20]
   162b8:	2b00      	cmp	r3, #0
   162ba:	d14d      	bne.n	16358 <I2cReadDataWait+0xd8>

	//---2. Initiate sending data

	error = I2cWriteData(data);
   162bc:	68fb      	ldr	r3, [r7, #12]
   162be:	0018      	movs	r0, r3
   162c0:	4b2e      	ldr	r3, [pc, #184]	; (1637c <I2cReadDataWait+0xfc>)
   162c2:	4798      	blx	r3
   162c4:	0003      	movs	r3, r0
   162c6:	617b      	str	r3, [r7, #20]
	if (ERROR_NONE != error){
   162c8:	697b      	ldr	r3, [r7, #20]
   162ca:	2b00      	cmp	r3, #0
   162cc:	d147      	bne.n	1635e <I2cReadDataWait+0xde>
		goto exitError0;
	}

	//---2. Wait for binary semaphore to tell us that we are done!
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   162ce:	693b      	ldr	r3, [r7, #16]
   162d0:	687a      	ldr	r2, [r7, #4]
   162d2:	0011      	movs	r1, r2
   162d4:	0018      	movs	r0, r3
   162d6:	4b2a      	ldr	r3, [pc, #168]	; (16380 <I2cReadDataWait+0x100>)
   162d8:	4798      	blx	r3
   162da:	0003      	movs	r3, r0
   162dc:	2b01      	cmp	r3, #1
   162de:	d118      	bne.n	16312 <I2cReadDataWait+0x92>
		/* The transmission ended as expected. We now delay until the I2C sensor is finished */
		if(I2cGetTaskErrorStatus()){
   162e0:	4b28      	ldr	r3, [pc, #160]	; (16384 <I2cReadDataWait+0x104>)
   162e2:	4798      	blx	r3
   162e4:	1e03      	subs	r3, r0, #0
   162e6:	d006      	beq.n	162f6 <I2cReadDataWait+0x76>
			I2cSetTaskErrorStatus(false);
   162e8:	2000      	movs	r0, #0
   162ea:	4b27      	ldr	r3, [pc, #156]	; (16388 <I2cReadDataWait+0x108>)
   162ec:	4798      	blx	r3
			error = ERROR_ABORTED;
   162ee:	2303      	movs	r3, #3
   162f0:	425b      	negs	r3, r3
   162f2:	617b      	str	r3, [r7, #20]
			goto exitError0;
   162f4:	e034      	b.n	16360 <I2cReadDataWait+0xe0>
		}
		vTaskDelay( delay );
   162f6:	68bb      	ldr	r3, [r7, #8]
   162f8:	0018      	movs	r0, r3
   162fa:	4b24      	ldr	r3, [pc, #144]	; (1638c <I2cReadDataWait+0x10c>)
   162fc:	4798      	blx	r3
		error = ERR_TIMEOUT;
		goto exitError0;
	}
	
	//---6. Initiate Read data
	error = I2cReadData(data);
   162fe:	68fb      	ldr	r3, [r7, #12]
   16300:	0018      	movs	r0, r3
   16302:	4b23      	ldr	r3, [pc, #140]	; (16390 <I2cReadDataWait+0x110>)
   16304:	4798      	blx	r3
   16306:	0003      	movs	r3, r0
   16308:	617b      	str	r3, [r7, #20]
	if (ERROR_NONE != error){
   1630a:	697b      	ldr	r3, [r7, #20]
   1630c:	2b00      	cmp	r3, #0
   1630e:	d004      	beq.n	1631a <I2cReadDataWait+0x9a>
		goto exitError0;
   16310:	e026      	b.n	16360 <I2cReadDataWait+0xe0>
		error = ERR_TIMEOUT;
   16312:	2303      	movs	r3, #3
   16314:	425b      	negs	r3, r3
   16316:	617b      	str	r3, [r7, #20]
		goto exitError0;
   16318:	e022      	b.n	16360 <I2cReadDataWait+0xe0>
	}
	//---7. Wait for notification
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   1631a:	693b      	ldr	r3, [r7, #16]
   1631c:	687a      	ldr	r2, [r7, #4]
   1631e:	0011      	movs	r1, r2
   16320:	0018      	movs	r0, r3
   16322:	4b17      	ldr	r3, [pc, #92]	; (16380 <I2cReadDataWait+0x100>)
   16324:	4798      	blx	r3
   16326:	0003      	movs	r3, r0
   16328:	2b01      	cmp	r3, #1
   1632a:	d10a      	bne.n	16342 <I2cReadDataWait+0xc2>
		/* The transmission ended as expected. We now delay until the I2C sensor is finished */
		if(I2cGetTaskErrorStatus()){
   1632c:	4b15      	ldr	r3, [pc, #84]	; (16384 <I2cReadDataWait+0x104>)
   1632e:	4798      	blx	r3
   16330:	1e03      	subs	r3, r0, #0
   16332:	d00a      	beq.n	1634a <I2cReadDataWait+0xca>
			I2cSetTaskErrorStatus(false);
   16334:	2000      	movs	r0, #0
   16336:	4b14      	ldr	r3, [pc, #80]	; (16388 <I2cReadDataWait+0x108>)
   16338:	4798      	blx	r3
			error = ERROR_ABORTED;
   1633a:	2303      	movs	r3, #3
   1633c:	425b      	negs	r3, r3
   1633e:	617b      	str	r3, [r7, #20]
			goto exitError0;
   16340:	e00e      	b.n	16360 <I2cReadDataWait+0xe0>
		}
		}else{
		/* The call to ulTaskNotifyTake() timed out. */
		error = ERR_TIMEOUT;
   16342:	2303      	movs	r3, #3
   16344:	425b      	negs	r3, r3
   16346:	617b      	str	r3, [r7, #20]
		goto exitError0;
   16348:	e00a      	b.n	16360 <I2cReadDataWait+0xe0>
	}
	
	//---8. Release Mutex
	error = I2cFreeMutex();
   1634a:	4b12      	ldr	r3, [pc, #72]	; (16394 <I2cReadDataWait+0x114>)
   1634c:	4798      	blx	r3
   1634e:	0003      	movs	r3, r0
   16350:	617b      	str	r3, [r7, #20]
   16352:	e002      	b.n	1635a <I2cReadDataWait+0xda>
	if(ERROR_NONE != error) goto exit;
   16354:	46c0      	nop			; (mov r8, r8)
   16356:	e000      	b.n	1635a <I2cReadDataWait+0xda>
	if(ERROR_NONE != error) goto exit;
   16358:	46c0      	nop			; (mov r8, r8)
	//xSemaphoreGive(semHandle);
	exit:
	return error;
   1635a:	697b      	ldr	r3, [r7, #20]
   1635c:	e005      	b.n	1636a <I2cReadDataWait+0xea>
		goto exitError0;
   1635e:	46c0      	nop			; (mov r8, r8)

	exitError0:
	error = I2cFreeMutex();
   16360:	4b0c      	ldr	r3, [pc, #48]	; (16394 <I2cReadDataWait+0x114>)
   16362:	4798      	blx	r3
   16364:	0003      	movs	r3, r0
   16366:	617b      	str	r3, [r7, #20]
	//xSemaphoreGive(semHandle);
	return error;
   16368:	697b      	ldr	r3, [r7, #20]

	
}
   1636a:	0018      	movs	r0, r3
   1636c:	46bd      	mov	sp, r7
   1636e:	b006      	add	sp, #24
   16370:	bd80      	pop	{r7, pc}
   16372:	46c0      	nop			; (mov r8, r8)
   16374:	0001611d 	.word	0x0001611d
   16378:	00016155 	.word	0x00016155
   1637c:	00015fdd 	.word	0x00015fdd
   16380:	0001a7a1 	.word	0x0001a7a1
   16384:	00016179 	.word	0x00016179
   16388:	0001618d 	.word	0x0001618d
   1638c:	0001b4f5 	.word	0x0001b4f5
   16390:	00016061 	.word	0x00016061
   16394:	000160e5 	.word	0x000160e5

00016398 <InitializeSeesaw>:
                				
* @return		Returns 0 if no errors.
* @note         
*****************************************************************************/
int InitializeSeesaw(void)
{
   16398:	b580      	push	{r7, lr}
   1639a:	b082      	sub	sp, #8
   1639c:	af00      	add	r7, sp, #0
	uint8_t readData[2];
	seesawData.address = NEO_TRELLIS_ADDR;
   1639e:	4b38      	ldr	r3, [pc, #224]	; (16480 <InitializeSeesaw+0xe8>)
   163a0:	222e      	movs	r2, #46	; 0x2e
   163a2:	701a      	strb	r2, [r3, #0]
	seesawData.msgOut = &msgBaseGetHWID;
   163a4:	4b36      	ldr	r3, [pc, #216]	; (16480 <InitializeSeesaw+0xe8>)
   163a6:	4a37      	ldr	r2, [pc, #220]	; (16484 <InitializeSeesaw+0xec>)
   163a8:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgBaseGetHWID);
   163aa:	4b35      	ldr	r3, [pc, #212]	; (16480 <InitializeSeesaw+0xe8>)
   163ac:	2202      	movs	r2, #2
   163ae:	81da      	strh	r2, [r3, #14]
	seesawData.msgIn = &readData;
   163b0:	4b33      	ldr	r3, [pc, #204]	; (16480 <InitializeSeesaw+0xe8>)
   163b2:	003a      	movs	r2, r7
   163b4:	609a      	str	r2, [r3, #8]
	seesawData.lenIn = 1;
   163b6:	4b32      	ldr	r3, [pc, #200]	; (16480 <InitializeSeesaw+0xe8>)
   163b8:	2201      	movs	r2, #1
   163ba:	819a      	strh	r2, [r3, #12]

	//Check if device is on the line - it should answer with its HW ID

	int error = I2cReadDataWait(&seesawData, 0, 100);
   163bc:	4b30      	ldr	r3, [pc, #192]	; (16480 <InitializeSeesaw+0xe8>)
   163be:	2264      	movs	r2, #100	; 0x64
   163c0:	2100      	movs	r1, #0
   163c2:	0018      	movs	r0, r3
   163c4:	4b30      	ldr	r3, [pc, #192]	; (16488 <InitializeSeesaw+0xf0>)
   163c6:	4798      	blx	r3
   163c8:	0003      	movs	r3, r0
   163ca:	607b      	str	r3, [r7, #4]

	if(ERROR_NONE != error)
   163cc:	687b      	ldr	r3, [r7, #4]
   163ce:	2b00      	cmp	r3, #0
   163d0:	d004      	beq.n	163dc <InitializeSeesaw+0x44>
	{
		SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   163d2:	4b2e      	ldr	r3, [pc, #184]	; (1648c <InitializeSeesaw+0xf4>)
   163d4:	0018      	movs	r0, r3
   163d6:	4b2e      	ldr	r3, [pc, #184]	; (16490 <InitializeSeesaw+0xf8>)
   163d8:	4798      	blx	r3
   163da:	e00c      	b.n	163f6 <InitializeSeesaw+0x5e>
	}
	else
	{
		if(readData[0] != SEESAW_HW_ID_CODE )
   163dc:	003b      	movs	r3, r7
   163de:	781b      	ldrb	r3, [r3, #0]
   163e0:	2b55      	cmp	r3, #85	; 0x55
   163e2:	d004      	beq.n	163ee <InitializeSeesaw+0x56>
		{
			SerialConsoleWriteString("Error/r/n");
   163e4:	4b2b      	ldr	r3, [pc, #172]	; (16494 <InitializeSeesaw+0xfc>)
   163e6:	0018      	movs	r0, r3
   163e8:	4b29      	ldr	r3, [pc, #164]	; (16490 <InitializeSeesaw+0xf8>)
   163ea:	4798      	blx	r3
   163ec:	e003      	b.n	163f6 <InitializeSeesaw+0x5e>
		}
		else
		{
		SerialConsoleWriteString("Found Seesaw!/r/n");
   163ee:	4b2a      	ldr	r3, [pc, #168]	; (16498 <InitializeSeesaw+0x100>)
   163f0:	0018      	movs	r0, r3
   163f2:	4b27      	ldr	r3, [pc, #156]	; (16490 <InitializeSeesaw+0xf8>)
   163f4:	4798      	blx	r3
		}
	}

	//Tell the Seesaw which pins to use
	seesawData.msgOut = &msgNeopixelPin;
   163f6:	4b22      	ldr	r3, [pc, #136]	; (16480 <InitializeSeesaw+0xe8>)
   163f8:	4a28      	ldr	r2, [pc, #160]	; (1649c <InitializeSeesaw+0x104>)
   163fa:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgNeopixelPin);
   163fc:	4b20      	ldr	r3, [pc, #128]	; (16480 <InitializeSeesaw+0xe8>)
   163fe:	2203      	movs	r2, #3
   16400:	81da      	strh	r2, [r3, #14]

	error = I2cWriteDataWait(&seesawData, 100);
   16402:	4b1f      	ldr	r3, [pc, #124]	; (16480 <InitializeSeesaw+0xe8>)
   16404:	2164      	movs	r1, #100	; 0x64
   16406:	0018      	movs	r0, r3
   16408:	4b25      	ldr	r3, [pc, #148]	; (164a0 <InitializeSeesaw+0x108>)
   1640a:	4798      	blx	r3
   1640c:	0003      	movs	r3, r0
   1640e:	607b      	str	r3, [r7, #4]
	if(ERROR_NONE != error)
   16410:	687b      	ldr	r3, [r7, #4]
   16412:	2b00      	cmp	r3, #0
   16414:	d003      	beq.n	1641e <InitializeSeesaw+0x86>
	{
		SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   16416:	4b23      	ldr	r3, [pc, #140]	; (164a4 <InitializeSeesaw+0x10c>)
   16418:	0018      	movs	r0, r3
   1641a:	4b1d      	ldr	r3, [pc, #116]	; (16490 <InitializeSeesaw+0xf8>)
   1641c:	4798      	blx	r3
	}

	//Set seesaw Neopixel speed
	seesawData.msgOut = &msgNeopixelSpeed;
   1641e:	4b18      	ldr	r3, [pc, #96]	; (16480 <InitializeSeesaw+0xe8>)
   16420:	4a21      	ldr	r2, [pc, #132]	; (164a8 <InitializeSeesaw+0x110>)
   16422:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgNeopixelSpeed);
   16424:	4b16      	ldr	r3, [pc, #88]	; (16480 <InitializeSeesaw+0xe8>)
   16426:	2203      	movs	r2, #3
   16428:	81da      	strh	r2, [r3, #14]

	error = I2cWriteDataWait(&seesawData, 100);
   1642a:	4b15      	ldr	r3, [pc, #84]	; (16480 <InitializeSeesaw+0xe8>)
   1642c:	2164      	movs	r1, #100	; 0x64
   1642e:	0018      	movs	r0, r3
   16430:	4b1b      	ldr	r3, [pc, #108]	; (164a0 <InitializeSeesaw+0x108>)
   16432:	4798      	blx	r3
   16434:	0003      	movs	r3, r0
   16436:	607b      	str	r3, [r7, #4]
	if(ERROR_NONE != error)
   16438:	687b      	ldr	r3, [r7, #4]
   1643a:	2b00      	cmp	r3, #0
   1643c:	d003      	beq.n	16446 <InitializeSeesaw+0xae>
	{
		SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   1643e:	4b1b      	ldr	r3, [pc, #108]	; (164ac <InitializeSeesaw+0x114>)
   16440:	0018      	movs	r0, r3
   16442:	4b13      	ldr	r3, [pc, #76]	; (16490 <InitializeSeesaw+0xf8>)
   16444:	4798      	blx	r3
	}

	//Set seesaw Neopixel number of devices
	seesawData.msgOut = &msgNeopixelBufLength;
   16446:	4b0e      	ldr	r3, [pc, #56]	; (16480 <InitializeSeesaw+0xe8>)
   16448:	4a19      	ldr	r2, [pc, #100]	; (164b0 <InitializeSeesaw+0x118>)
   1644a:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgNeopixelBufLength);
   1644c:	4b0c      	ldr	r3, [pc, #48]	; (16480 <InitializeSeesaw+0xe8>)
   1644e:	2204      	movs	r2, #4
   16450:	81da      	strh	r2, [r3, #14]

	error = I2cWriteDataWait(&seesawData, 100);
   16452:	4b0b      	ldr	r3, [pc, #44]	; (16480 <InitializeSeesaw+0xe8>)
   16454:	2164      	movs	r1, #100	; 0x64
   16456:	0018      	movs	r0, r3
   16458:	4b11      	ldr	r3, [pc, #68]	; (164a0 <InitializeSeesaw+0x108>)
   1645a:	4798      	blx	r3
   1645c:	0003      	movs	r3, r0
   1645e:	607b      	str	r3, [r7, #4]
	if(ERROR_NONE != error)
   16460:	687b      	ldr	r3, [r7, #4]
   16462:	2b00      	cmp	r3, #0
   16464:	d003      	beq.n	1646e <InitializeSeesaw+0xd6>
	{
		SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   16466:	4b13      	ldr	r3, [pc, #76]	; (164b4 <InitializeSeesaw+0x11c>)
   16468:	0018      	movs	r0, r3
   1646a:	4b09      	ldr	r3, [pc, #36]	; (16490 <InitializeSeesaw+0xf8>)
   1646c:	4798      	blx	r3
	}

	SeesawTurnOnLedTest();
   1646e:	4b12      	ldr	r3, [pc, #72]	; (164b8 <InitializeSeesaw+0x120>)
   16470:	4798      	blx	r3


	SeesawInitializeKeypad();
   16472:	4b12      	ldr	r3, [pc, #72]	; (164bc <InitializeSeesaw+0x124>)
   16474:	4798      	blx	r3
	return error;
   16476:	687b      	ldr	r3, [r7, #4]

}
   16478:	0018      	movs	r0, r3
   1647a:	46bd      	mov	sp, r7
   1647c:	b002      	add	sp, #8
   1647e:	bd80      	pop	{r7, pc}
   16480:	200044ec 	.word	0x200044ec
   16484:	00035a68 	.word	0x00035a68
   16488:	00016281 	.word	0x00016281
   1648c:	00035a80 	.word	0x00035a80
   16490:	0001d149 	.word	0x0001d149
   16494:	00035aa0 	.word	0x00035aa0
   16498:	00035aac 	.word	0x00035aac
   1649c:	00035a6c 	.word	0x00035a6c
   164a0:	000161ad 	.word	0x000161ad
   164a4:	00035ac0 	.word	0x00035ac0
   164a8:	00035a70 	.word	0x00035a70
   164ac:	00035ae0 	.word	0x00035ae0
   164b0:	00035a74 	.word	0x00035a74
   164b4:	00035b0c 	.word	0x00035b0c
   164b8:	00016879 	.word	0x00016879
   164bc:	00016789 	.word	0x00016789

000164c0 <SeesawGetKeypadCount>:
* @details 	Assumes Seesaw is already initialized
                				
* @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
* @note         
*****************************************************************************/
uint8_t SeesawGetKeypadCount(void) {
   164c0:	b580      	push	{r7, lr}
   164c2:	b082      	sub	sp, #8
   164c4:	af00      	add	r7, sp, #0
	uint8_t count = 0;
   164c6:	1cfb      	adds	r3, r7, #3
   164c8:	2200      	movs	r2, #0
   164ca:	701a      	strb	r2, [r3, #0]
	seesawData.address = NEO_TRELLIS_ADDR;
   164cc:	4b11      	ldr	r3, [pc, #68]	; (16514 <SeesawGetKeypadCount+0x54>)
   164ce:	222e      	movs	r2, #46	; 0x2e
   164d0:	701a      	strb	r2, [r3, #0]
	seesawData.msgOut = &msgKeypadGetCount;
   164d2:	4b10      	ldr	r3, [pc, #64]	; (16514 <SeesawGetKeypadCount+0x54>)
   164d4:	4a10      	ldr	r2, [pc, #64]	; (16518 <SeesawGetKeypadCount+0x58>)
   164d6:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgKeypadGetCount);
   164d8:	4b0e      	ldr	r3, [pc, #56]	; (16514 <SeesawGetKeypadCount+0x54>)
   164da:	2202      	movs	r2, #2
   164dc:	81da      	strh	r2, [r3, #14]
	seesawData.msgIn = &count;
   164de:	4b0d      	ldr	r3, [pc, #52]	; (16514 <SeesawGetKeypadCount+0x54>)
   164e0:	1cfa      	adds	r2, r7, #3
   164e2:	609a      	str	r2, [r3, #8]
	seesawData.lenIn = 1;
   164e4:	4b0b      	ldr	r3, [pc, #44]	; (16514 <SeesawGetKeypadCount+0x54>)
   164e6:	2201      	movs	r2, #1
   164e8:	819a      	strh	r2, [r3, #12]

	int error = I2cReadDataWait(&seesawData, 0, 100);
   164ea:	4b0a      	ldr	r3, [pc, #40]	; (16514 <SeesawGetKeypadCount+0x54>)
   164ec:	2264      	movs	r2, #100	; 0x64
   164ee:	2100      	movs	r1, #0
   164f0:	0018      	movs	r0, r3
   164f2:	4b0a      	ldr	r3, [pc, #40]	; (1651c <SeesawGetKeypadCount+0x5c>)
   164f4:	4798      	blx	r3
   164f6:	0003      	movs	r3, r0
   164f8:	607b      	str	r3, [r7, #4]

	if(ERROR_NONE != error)
   164fa:	687b      	ldr	r3, [r7, #4]
   164fc:	2b00      	cmp	r3, #0
   164fe:	d003      	beq.n	16508 <SeesawGetKeypadCount+0x48>
	{
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   16500:	4b07      	ldr	r3, [pc, #28]	; (16520 <SeesawGetKeypadCount+0x60>)
   16502:	0018      	movs	r0, r3
   16504:	4b07      	ldr	r3, [pc, #28]	; (16524 <SeesawGetKeypadCount+0x64>)
   16506:	4798      	blx	r3
	}
	return count;
   16508:	1cfb      	adds	r3, r7, #3
   1650a:	781b      	ldrb	r3, [r3, #0]
}
   1650c:	0018      	movs	r0, r3
   1650e:	46bd      	mov	sp, r7
   16510:	b002      	add	sp, #8
   16512:	bd80      	pop	{r7, pc}
   16514:	200044ec 	.word	0x200044ec
   16518:	00035a7c 	.word	0x00035a7c
   1651c:	00016281 	.word	0x00016281
   16520:	00035b40 	.word	0x00035b40
   16524:	0001d149 	.word	0x0001d149

00016528 <SeesawReadKeypad>:
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*****************************************************************************/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
	{
   16528:	b580      	push	{r7, lr}
   1652a:	b084      	sub	sp, #16
   1652c:	af00      	add	r7, sp, #0
   1652e:	6078      	str	r0, [r7, #4]
   16530:	000a      	movs	r2, r1
   16532:	1cfb      	adds	r3, r7, #3
   16534:	701a      	strb	r2, [r3, #0]
	if (count == 0) return ERROR_NONE;
   16536:	1cfb      	adds	r3, r7, #3
   16538:	781b      	ldrb	r3, [r3, #0]
   1653a:	2b00      	cmp	r3, #0
   1653c:	d101      	bne.n	16542 <SeesawReadKeypad+0x1a>
   1653e:	2300      	movs	r3, #0
   16540:	e026      	b.n	16590 <SeesawReadKeypad+0x68>
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   16542:	2308      	movs	r3, #8
   16544:	18fb      	adds	r3, r7, r3
   16546:	4a14      	ldr	r2, [pc, #80]	; (16598 <SeesawReadKeypad+0x70>)
   16548:	8812      	ldrh	r2, [r2, #0]
   1654a:	801a      	strh	r2, [r3, #0]
	seesawData.address = NEO_TRELLIS_ADDR;
   1654c:	4b13      	ldr	r3, [pc, #76]	; (1659c <SeesawReadKeypad+0x74>)
   1654e:	222e      	movs	r2, #46	; 0x2e
   16550:	701a      	strb	r2, [r3, #0]
	seesawData.msgOut = &cmd;
   16552:	4b12      	ldr	r3, [pc, #72]	; (1659c <SeesawReadKeypad+0x74>)
   16554:	2208      	movs	r2, #8
   16556:	18ba      	adds	r2, r7, r2
   16558:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(cmd);
   1655a:	4b10      	ldr	r3, [pc, #64]	; (1659c <SeesawReadKeypad+0x74>)
   1655c:	2202      	movs	r2, #2
   1655e:	81da      	strh	r2, [r3, #14]
	seesawData.msgIn = buffer;
   16560:	4b0e      	ldr	r3, [pc, #56]	; (1659c <SeesawReadKeypad+0x74>)
   16562:	687a      	ldr	r2, [r7, #4]
   16564:	609a      	str	r2, [r3, #8]
	seesawData.lenIn = count;
   16566:	1cfb      	adds	r3, r7, #3
   16568:	781b      	ldrb	r3, [r3, #0]
   1656a:	b29a      	uxth	r2, r3
   1656c:	4b0b      	ldr	r3, [pc, #44]	; (1659c <SeesawReadKeypad+0x74>)
   1656e:	819a      	strh	r2, [r3, #12]

	int error = I2cReadDataWait(&seesawData, 0, 100);
   16570:	4b0a      	ldr	r3, [pc, #40]	; (1659c <SeesawReadKeypad+0x74>)
   16572:	2264      	movs	r2, #100	; 0x64
   16574:	2100      	movs	r1, #0
   16576:	0018      	movs	r0, r3
   16578:	4b09      	ldr	r3, [pc, #36]	; (165a0 <SeesawReadKeypad+0x78>)
   1657a:	4798      	blx	r3
   1657c:	0003      	movs	r3, r0
   1657e:	60fb      	str	r3, [r7, #12]

	if(ERROR_NONE != error)
   16580:	68fb      	ldr	r3, [r7, #12]
   16582:	2b00      	cmp	r3, #0
   16584:	d003      	beq.n	1658e <SeesawReadKeypad+0x66>
	{
		SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   16586:	4b07      	ldr	r3, [pc, #28]	; (165a4 <SeesawReadKeypad+0x7c>)
   16588:	0018      	movs	r0, r3
   1658a:	4b07      	ldr	r3, [pc, #28]	; (165a8 <SeesawReadKeypad+0x80>)
   1658c:	4798      	blx	r3
	}
	return error;
   1658e:	68fb      	ldr	r3, [r7, #12]
}
   16590:	0018      	movs	r0, r3
   16592:	46bd      	mov	sp, r7
   16594:	b004      	add	sp, #16
   16596:	bd80      	pop	{r7, pc}
   16598:	00035b64 	.word	0x00035b64
   1659c:	200044ec 	.word	0x200044ec
   165a0:	00016281 	.word	0x00016281
   165a4:	00035b40 	.word	0x00035b40
   165a8:	0001d149 	.word	0x0001d149

000165ac <SeesawActivateKey>:
                				
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         
*****************************************************************************/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
	{
   165ac:	b590      	push	{r4, r7, lr}
   165ae:	b087      	sub	sp, #28
   165b0:	af00      	add	r7, sp, #0
   165b2:	0004      	movs	r4, r0
   165b4:	0008      	movs	r0, r1
   165b6:	0011      	movs	r1, r2
   165b8:	1dfb      	adds	r3, r7, #7
   165ba:	1c22      	adds	r2, r4, #0
   165bc:	701a      	strb	r2, [r3, #0]
   165be:	1dbb      	adds	r3, r7, #6
   165c0:	1c02      	adds	r2, r0, #0
   165c2:	701a      	strb	r2, [r3, #0]
   165c4:	1d7b      	adds	r3, r7, #5
   165c6:	1c0a      	adds	r2, r1, #0
   165c8:	701a      	strb	r2, [r3, #0]
	union keyState ks;
	ks.bit.STATE = enable;
   165ca:	2310      	movs	r3, #16
   165cc:	18fb      	adds	r3, r7, r3
   165ce:	1d7a      	adds	r2, r7, #5
   165d0:	7812      	ldrb	r2, [r2, #0]
   165d2:	2101      	movs	r1, #1
   165d4:	0010      	movs	r0, r2
   165d6:	4008      	ands	r0, r1
   165d8:	781a      	ldrb	r2, [r3, #0]
   165da:	2101      	movs	r1, #1
   165dc:	438a      	bics	r2, r1
   165de:	1c11      	adds	r1, r2, #0
   165e0:	1c02      	adds	r2, r0, #0
   165e2:	430a      	orrs	r2, r1
   165e4:	701a      	strb	r2, [r3, #0]
	ks.bit.ACTIVE = (1 << edge);
   165e6:	1dbb      	adds	r3, r7, #6
   165e8:	781b      	ldrb	r3, [r3, #0]
   165ea:	2201      	movs	r2, #1
   165ec:	409a      	lsls	r2, r3
   165ee:	0013      	movs	r3, r2
   165f0:	b2db      	uxtb	r3, r3
   165f2:	1c1a      	adds	r2, r3, #0
   165f4:	230f      	movs	r3, #15
   165f6:	4013      	ands	r3, r2
   165f8:	b2da      	uxtb	r2, r3
   165fa:	2310      	movs	r3, #16
   165fc:	18fb      	adds	r3, r7, r3
   165fe:	210f      	movs	r1, #15
   16600:	400a      	ands	r2, r1
   16602:	1890      	adds	r0, r2, r2
   16604:	781a      	ldrb	r2, [r3, #0]
   16606:	211e      	movs	r1, #30
   16608:	438a      	bics	r2, r1
   1660a:	1c11      	adds	r1, r2, #0
   1660c:	1c02      	adds	r2, r0, #0
   1660e:	430a      	orrs	r2, r1
   16610:	701a      	strb	r2, [r3, #0]
	uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   16612:	230c      	movs	r3, #12
   16614:	18fb      	adds	r3, r7, r3
   16616:	2210      	movs	r2, #16
   16618:	701a      	strb	r2, [r3, #0]
   1661a:	230c      	movs	r3, #12
   1661c:	18fb      	adds	r3, r7, r3
   1661e:	2201      	movs	r2, #1
   16620:	705a      	strb	r2, [r3, #1]
   16622:	230c      	movs	r3, #12
   16624:	18fb      	adds	r3, r7, r3
   16626:	1dfa      	adds	r2, r7, #7
   16628:	7812      	ldrb	r2, [r2, #0]
   1662a:	709a      	strb	r2, [r3, #2]
   1662c:	2310      	movs	r3, #16
   1662e:	18fb      	adds	r3, r7, r3
   16630:	781a      	ldrb	r2, [r3, #0]
   16632:	230c      	movs	r3, #12
   16634:	18fb      	adds	r3, r7, r3
   16636:	70da      	strb	r2, [r3, #3]

	seesawData.address = NEO_TRELLIS_ADDR;
   16638:	4b0c      	ldr	r3, [pc, #48]	; (1666c <SeesawActivateKey+0xc0>)
   1663a:	222e      	movs	r2, #46	; 0x2e
   1663c:	701a      	strb	r2, [r3, #0]
	seesawData.msgOut = &cmd;
   1663e:	4b0b      	ldr	r3, [pc, #44]	; (1666c <SeesawActivateKey+0xc0>)
   16640:	220c      	movs	r2, #12
   16642:	18ba      	adds	r2, r7, r2
   16644:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(cmd);
   16646:	4b09      	ldr	r3, [pc, #36]	; (1666c <SeesawActivateKey+0xc0>)
   16648:	2204      	movs	r2, #4
   1664a:	81da      	strh	r2, [r3, #14]
	seesawData.lenIn = 0;
   1664c:	4b07      	ldr	r3, [pc, #28]	; (1666c <SeesawActivateKey+0xc0>)
   1664e:	2200      	movs	r2, #0
   16650:	819a      	strh	r2, [r3, #12]
	int32_t error = I2cWriteDataWait(&seesawData, 100);
   16652:	4b06      	ldr	r3, [pc, #24]	; (1666c <SeesawActivateKey+0xc0>)
   16654:	2164      	movs	r1, #100	; 0x64
   16656:	0018      	movs	r0, r3
   16658:	4b05      	ldr	r3, [pc, #20]	; (16670 <SeesawActivateKey+0xc4>)
   1665a:	4798      	blx	r3
   1665c:	0003      	movs	r3, r0
   1665e:	617b      	str	r3, [r7, #20]
	return error;
   16660:	697b      	ldr	r3, [r7, #20]
}
   16662:	0018      	movs	r0, r3
   16664:	46bd      	mov	sp, r7
   16666:	b007      	add	sp, #28
   16668:	bd90      	pop	{r4, r7, pc}
   1666a:	46c0      	nop			; (mov r8, r8)
   1666c:	200044ec 	.word	0x200044ec
   16670:	000161ad 	.word	0x000161ad

00016674 <SeesawSetLed>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
	FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*****************************************************************************/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   16674:	b5b0      	push	{r4, r5, r7, lr}
   16676:	b088      	sub	sp, #32
   16678:	af00      	add	r7, sp, #0
   1667a:	0005      	movs	r5, r0
   1667c:	000c      	movs	r4, r1
   1667e:	0010      	movs	r0, r2
   16680:	0019      	movs	r1, r3
   16682:	1dfb      	adds	r3, r7, #7
   16684:	1c2a      	adds	r2, r5, #0
   16686:	701a      	strb	r2, [r3, #0]
   16688:	1dbb      	adds	r3, r7, #6
   1668a:	1c22      	adds	r2, r4, #0
   1668c:	701a      	strb	r2, [r3, #0]
   1668e:	1d7b      	adds	r3, r7, #5
   16690:	1c02      	adds	r2, r0, #0
   16692:	701a      	strb	r2, [r3, #0]
   16694:	1d3b      	adds	r3, r7, #4
   16696:	1c0a      	adds	r2, r1, #0
   16698:	701a      	strb	r2, [r3, #0]
	uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green,red, blue};
   1669a:	2310      	movs	r3, #16
   1669c:	18fb      	adds	r3, r7, r3
   1669e:	220e      	movs	r2, #14
   166a0:	701a      	strb	r2, [r3, #0]
   166a2:	2310      	movs	r3, #16
   166a4:	18fb      	adds	r3, r7, r3
   166a6:	2204      	movs	r2, #4
   166a8:	705a      	strb	r2, [r3, #1]
   166aa:	2310      	movs	r3, #16
   166ac:	18fb      	adds	r3, r7, r3
   166ae:	2200      	movs	r2, #0
   166b0:	709a      	strb	r2, [r3, #2]
   166b2:	2310      	movs	r3, #16
   166b4:	18fb      	adds	r3, r7, r3
   166b6:	2200      	movs	r2, #0
   166b8:	70da      	strb	r2, [r3, #3]
   166ba:	2310      	movs	r3, #16
   166bc:	18fb      	adds	r3, r7, r3
   166be:	1d7a      	adds	r2, r7, #5
   166c0:	7812      	ldrb	r2, [r2, #0]
   166c2:	711a      	strb	r2, [r3, #4]
   166c4:	2310      	movs	r3, #16
   166c6:	18fb      	adds	r3, r7, r3
   166c8:	1dba      	adds	r2, r7, #6
   166ca:	7812      	ldrb	r2, [r2, #0]
   166cc:	715a      	strb	r2, [r3, #5]
   166ce:	2310      	movs	r3, #16
   166d0:	18fb      	adds	r3, r7, r3
   166d2:	1d3a      	adds	r2, r7, #4
   166d4:	7812      	ldrb	r2, [r2, #0]
   166d6:	719a      	strb	r2, [r3, #6]
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   166d8:	230c      	movs	r3, #12
   166da:	18fb      	adds	r3, r7, r3
   166dc:	4a17      	ldr	r2, [pc, #92]	; (1673c <SeesawSetLed+0xc8>)
   166de:	8812      	ldrh	r2, [r2, #0]
   166e0:	801a      	strh	r2, [r3, #0]

	uint16_t offset = 3 * key; //RGB LED
   166e2:	1dfb      	adds	r3, r7, #7
   166e4:	781b      	ldrb	r3, [r3, #0]
   166e6:	b29b      	uxth	r3, r3
   166e8:	221e      	movs	r2, #30
   166ea:	18ba      	adds	r2, r7, r2
   166ec:	1c19      	adds	r1, r3, #0
   166ee:	1c0b      	adds	r3, r1, #0
   166f0:	18db      	adds	r3, r3, r3
   166f2:	185b      	adds	r3, r3, r1
   166f4:	8013      	strh	r3, [r2, #0]
	write_buffer1[2] = (offset >> 8);
   166f6:	231e      	movs	r3, #30
   166f8:	18fb      	adds	r3, r7, r3
   166fa:	881b      	ldrh	r3, [r3, #0]
   166fc:	0a1b      	lsrs	r3, r3, #8
   166fe:	b29b      	uxth	r3, r3
   16700:	b2da      	uxtb	r2, r3
   16702:	2310      	movs	r3, #16
   16704:	18fb      	adds	r3, r7, r3
   16706:	709a      	strb	r2, [r3, #2]
	write_buffer1[3] = (offset);
   16708:	231e      	movs	r3, #30
   1670a:	18fb      	adds	r3, r7, r3
   1670c:	881b      	ldrh	r3, [r3, #0]
   1670e:	b2da      	uxtb	r2, r3
   16710:	2310      	movs	r3, #16
   16712:	18fb      	adds	r3, r7, r3
   16714:	70da      	strb	r2, [r3, #3]

	seesawData.msgOut = &write_buffer1;
   16716:	4b0a      	ldr	r3, [pc, #40]	; (16740 <SeesawSetLed+0xcc>)
   16718:	2210      	movs	r2, #16
   1671a:	18ba      	adds	r2, r7, r2
   1671c:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(write_buffer1);
   1671e:	4b08      	ldr	r3, [pc, #32]	; (16740 <SeesawSetLed+0xcc>)
   16720:	2207      	movs	r2, #7
   16722:	81da      	strh	r2, [r3, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
   16724:	4b06      	ldr	r3, [pc, #24]	; (16740 <SeesawSetLed+0xcc>)
   16726:	2164      	movs	r1, #100	; 0x64
   16728:	0018      	movs	r0, r3
   1672a:	4b06      	ldr	r3, [pc, #24]	; (16744 <SeesawSetLed+0xd0>)
   1672c:	4798      	blx	r3
   1672e:	0003      	movs	r3, r0
   16730:	61bb      	str	r3, [r7, #24]
	return error;
   16732:	69bb      	ldr	r3, [r7, #24]

}
   16734:	0018      	movs	r0, r3
   16736:	46bd      	mov	sp, r7
   16738:	b008      	add	sp, #32
   1673a:	bdb0      	pop	{r4, r5, r7, pc}
   1673c:	00035b68 	.word	0x00035b68
   16740:	200044ec 	.word	0x200044ec
   16744:	000161ad 	.word	0x000161ad

00016748 <SeesawOrderLedUpdate>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*****************************************************************************/
int32_t SeesawOrderLedUpdate(void)
{
   16748:	b580      	push	{r7, lr}
   1674a:	b082      	sub	sp, #8
   1674c:	af00      	add	r7, sp, #0
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   1674e:	003b      	movs	r3, r7
   16750:	4a0a      	ldr	r2, [pc, #40]	; (1677c <SeesawOrderLedUpdate+0x34>)
   16752:	8812      	ldrh	r2, [r2, #0]
   16754:	801a      	strh	r2, [r3, #0]

	seesawData.msgOut = &orderBuffer;
   16756:	4b0a      	ldr	r3, [pc, #40]	; (16780 <SeesawOrderLedUpdate+0x38>)
   16758:	003a      	movs	r2, r7
   1675a:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(orderBuffer);
   1675c:	4b08      	ldr	r3, [pc, #32]	; (16780 <SeesawOrderLedUpdate+0x38>)
   1675e:	2202      	movs	r2, #2
   16760:	81da      	strh	r2, [r3, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
   16762:	4b07      	ldr	r3, [pc, #28]	; (16780 <SeesawOrderLedUpdate+0x38>)
   16764:	2164      	movs	r1, #100	; 0x64
   16766:	0018      	movs	r0, r3
   16768:	4b06      	ldr	r3, [pc, #24]	; (16784 <SeesawOrderLedUpdate+0x3c>)
   1676a:	4798      	blx	r3
   1676c:	0003      	movs	r3, r0
   1676e:	607b      	str	r3, [r7, #4]
	return error;
   16770:	687b      	ldr	r3, [r7, #4]
}
   16772:	0018      	movs	r0, r3
   16774:	46bd      	mov	sp, r7
   16776:	b002      	add	sp, #8
   16778:	bd80      	pop	{r7, pc}
   1677a:	46c0      	nop			; (mov r8, r8)
   1677c:	00035b68 	.word	0x00035b68
   16780:	200044ec 	.word	0x200044ec
   16784:	000161ad 	.word	0x000161ad

00016788 <SeesawInitializeKeypad>:
/*****************************************************************************************
*  @brief     Activates a given key on the keypad
*  @return     Returns any error code found when executing task.
****************************************************************************************/
static void SeesawInitializeKeypad(void)
{
   16788:	b580      	push	{r7, lr}
   1678a:	b082      	sub	sp, #8
   1678c:	af00      	add	r7, sp, #0
	seesawData.address = NEO_TRELLIS_ADDR;
   1678e:	4b33      	ldr	r3, [pc, #204]	; (1685c <SeesawInitializeKeypad+0xd4>)
   16790:	222e      	movs	r2, #46	; 0x2e
   16792:	701a      	strb	r2, [r3, #0]
	seesawData.msgOut = &msgKeypadEnableInt;
   16794:	4b31      	ldr	r3, [pc, #196]	; (1685c <SeesawInitializeKeypad+0xd4>)
   16796:	4a32      	ldr	r2, [pc, #200]	; (16860 <SeesawInitializeKeypad+0xd8>)
   16798:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(msgKeypadEnableInt);
   1679a:	4b30      	ldr	r3, [pc, #192]	; (1685c <SeesawInitializeKeypad+0xd4>)
   1679c:	2203      	movs	r2, #3
   1679e:	81da      	strh	r2, [r3, #14]
	seesawData.lenIn = 0;
   167a0:	4b2e      	ldr	r3, [pc, #184]	; (1685c <SeesawInitializeKeypad+0xd4>)
   167a2:	2200      	movs	r2, #0
   167a4:	819a      	strh	r2, [r3, #12]

	int32_t error = I2cWriteDataWait(&seesawData, 100);
   167a6:	4b2d      	ldr	r3, [pc, #180]	; (1685c <SeesawInitializeKeypad+0xd4>)
   167a8:	2164      	movs	r1, #100	; 0x64
   167aa:	0018      	movs	r0, r3
   167ac:	4b2d      	ldr	r3, [pc, #180]	; (16864 <SeesawInitializeKeypad+0xdc>)
   167ae:	4798      	blx	r3
   167b0:	0003      	movs	r3, r0
   167b2:	603b      	str	r3, [r7, #0]
	if(ERROR_NONE != error)
   167b4:	683b      	ldr	r3, [r7, #0]
   167b6:	2b00      	cmp	r3, #0
   167b8:	d003      	beq.n	167c2 <SeesawInitializeKeypad+0x3a>
	{
		SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   167ba:	4b2b      	ldr	r3, [pc, #172]	; (16868 <SeesawInitializeKeypad+0xe0>)
   167bc:	0018      	movs	r0, r3
   167be:	4b2b      	ldr	r3, [pc, #172]	; (1686c <SeesawInitializeKeypad+0xe4>)
   167c0:	4798      	blx	r3
	}

	//Initialize all buttons to register an event for both press and release
	for(int i=0; i<16; i++){
   167c2:	2300      	movs	r3, #0
   167c4:	607b      	str	r3, [r7, #4]
   167c6:	e041      	b.n	1684c <SeesawInitializeKeypad+0xc4>
		error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   167c8:	687b      	ldr	r3, [r7, #4]
   167ca:	2b00      	cmp	r3, #0
   167cc:	da00      	bge.n	167d0 <SeesawInitializeKeypad+0x48>
   167ce:	3303      	adds	r3, #3
   167d0:	109b      	asrs	r3, r3, #2
   167d2:	b2db      	uxtb	r3, r3
   167d4:	00db      	lsls	r3, r3, #3
   167d6:	b2da      	uxtb	r2, r3
   167d8:	687b      	ldr	r3, [r7, #4]
   167da:	4925      	ldr	r1, [pc, #148]	; (16870 <SeesawInitializeKeypad+0xe8>)
   167dc:	400b      	ands	r3, r1
   167de:	d504      	bpl.n	167ea <SeesawInitializeKeypad+0x62>
   167e0:	3b01      	subs	r3, #1
   167e2:	2104      	movs	r1, #4
   167e4:	4249      	negs	r1, r1
   167e6:	430b      	orrs	r3, r1
   167e8:	3301      	adds	r3, #1
   167ea:	b2db      	uxtb	r3, r3
   167ec:	18d3      	adds	r3, r2, r3
   167ee:	b2db      	uxtb	r3, r3
   167f0:	2201      	movs	r2, #1
   167f2:	2103      	movs	r1, #3
   167f4:	0018      	movs	r0, r3
   167f6:	4b1f      	ldr	r3, [pc, #124]	; (16874 <SeesawInitializeKeypad+0xec>)
   167f8:	4798      	blx	r3
   167fa:	0003      	movs	r3, r0
   167fc:	603b      	str	r3, [r7, #0]
		error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   167fe:	687b      	ldr	r3, [r7, #4]
   16800:	2b00      	cmp	r3, #0
   16802:	da00      	bge.n	16806 <SeesawInitializeKeypad+0x7e>
   16804:	3303      	adds	r3, #3
   16806:	109b      	asrs	r3, r3, #2
   16808:	b2db      	uxtb	r3, r3
   1680a:	00db      	lsls	r3, r3, #3
   1680c:	b2da      	uxtb	r2, r3
   1680e:	687b      	ldr	r3, [r7, #4]
   16810:	4917      	ldr	r1, [pc, #92]	; (16870 <SeesawInitializeKeypad+0xe8>)
   16812:	400b      	ands	r3, r1
   16814:	d504      	bpl.n	16820 <SeesawInitializeKeypad+0x98>
   16816:	3b01      	subs	r3, #1
   16818:	2104      	movs	r1, #4
   1681a:	4249      	negs	r1, r1
   1681c:	430b      	orrs	r3, r1
   1681e:	3301      	adds	r3, #1
   16820:	b2db      	uxtb	r3, r3
   16822:	18d3      	adds	r3, r2, r3
   16824:	b2db      	uxtb	r3, r3
   16826:	2201      	movs	r2, #1
   16828:	2102      	movs	r1, #2
   1682a:	0018      	movs	r0, r3
   1682c:	4b11      	ldr	r3, [pc, #68]	; (16874 <SeesawInitializeKeypad+0xec>)
   1682e:	4798      	blx	r3
   16830:	0002      	movs	r2, r0
   16832:	683b      	ldr	r3, [r7, #0]
   16834:	4313      	orrs	r3, r2
   16836:	603b      	str	r3, [r7, #0]
		if(ERROR_NONE != error)
   16838:	683b      	ldr	r3, [r7, #0]
   1683a:	2b00      	cmp	r3, #0
   1683c:	d003      	beq.n	16846 <SeesawInitializeKeypad+0xbe>
		{
			SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   1683e:	4b0a      	ldr	r3, [pc, #40]	; (16868 <SeesawInitializeKeypad+0xe0>)
   16840:	0018      	movs	r0, r3
   16842:	4b0a      	ldr	r3, [pc, #40]	; (1686c <SeesawInitializeKeypad+0xe4>)
   16844:	4798      	blx	r3
	for(int i=0; i<16; i++){
   16846:	687b      	ldr	r3, [r7, #4]
   16848:	3301      	adds	r3, #1
   1684a:	607b      	str	r3, [r7, #4]
   1684c:	687b      	ldr	r3, [r7, #4]
   1684e:	2b0f      	cmp	r3, #15
   16850:	ddba      	ble.n	167c8 <SeesawInitializeKeypad+0x40>
		}
	}
}
   16852:	46c0      	nop			; (mov r8, r8)
   16854:	46bd      	mov	sp, r7
   16856:	b002      	add	sp, #8
   16858:	bd80      	pop	{r7, pc}
   1685a:	46c0      	nop			; (mov r8, r8)
   1685c:	200044ec 	.word	0x200044ec
   16860:	00035a78 	.word	0x00035a78
   16864:	000161ad 	.word	0x000161ad
   16868:	00035b6c 	.word	0x00035b6c
   1686c:	0001d149 	.word	0x0001d149
   16870:	80000003 	.word	0x80000003
   16874:	000165ad 	.word	0x000165ad

00016878 <SeesawTurnOnLedTest>:


static void SeesawTurnOnLedTest(void)
{
   16878:	b5b0      	push	{r4, r5, r7, lr}
   1687a:	af00      	add	r7, sp, #0
	SeesawSetLed(15, 255, 255, 255);
   1687c:	23ff      	movs	r3, #255	; 0xff
   1687e:	22ff      	movs	r2, #255	; 0xff
   16880:	21ff      	movs	r1, #255	; 0xff
   16882:	200f      	movs	r0, #15
   16884:	4c09      	ldr	r4, [pc, #36]	; (168ac <SeesawTurnOnLedTest+0x34>)
   16886:	47a0      	blx	r4
	SeesawOrderLedUpdate();
   16888:	4b09      	ldr	r3, [pc, #36]	; (168b0 <SeesawTurnOnLedTest+0x38>)
   1688a:	4798      	blx	r3
	vTaskDelay(400);
   1688c:	23c8      	movs	r3, #200	; 0xc8
   1688e:	005b      	lsls	r3, r3, #1
   16890:	0018      	movs	r0, r3
   16892:	4b08      	ldr	r3, [pc, #32]	; (168b4 <SeesawTurnOnLedTest+0x3c>)
   16894:	4798      	blx	r3

	SeesawSetLed(15, 0, 0, 0);
   16896:	2300      	movs	r3, #0
   16898:	2200      	movs	r2, #0
   1689a:	2100      	movs	r1, #0
   1689c:	200f      	movs	r0, #15
   1689e:	4c03      	ldr	r4, [pc, #12]	; (168ac <SeesawTurnOnLedTest+0x34>)
   168a0:	47a0      	blx	r4
	SeesawOrderLedUpdate();
   168a2:	4b03      	ldr	r3, [pc, #12]	; (168b0 <SeesawTurnOnLedTest+0x38>)
   168a4:	4798      	blx	r3
   168a6:	46c0      	nop			; (mov r8, r8)
   168a8:	46bd      	mov	sp, r7
   168aa:	bdb0      	pop	{r4, r5, r7, pc}
   168ac:	00016675 	.word	0x00016675
   168b0:	00016749 	.word	0x00016749
   168b4:	0001b4f5 	.word	0x0001b4f5

000168b8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   168b8:	b580      	push	{r7, lr}
   168ba:	b082      	sub	sp, #8
   168bc:	af00      	add	r7, sp, #0
   168be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   168c0:	687b      	ldr	r3, [r7, #4]
   168c2:	2200      	movs	r2, #0
   168c4:	701a      	strb	r2, [r3, #0]
}
   168c6:	46c0      	nop			; (mov r8, r8)
   168c8:	46bd      	mov	sp, r7
   168ca:	b002      	add	sp, #8
   168cc:	bd80      	pop	{r7, pc}
	...

000168d0 <system_apb_clock_set_mask>:
{
   168d0:	b580      	push	{r7, lr}
   168d2:	b082      	sub	sp, #8
   168d4:	af00      	add	r7, sp, #0
   168d6:	0002      	movs	r2, r0
   168d8:	6039      	str	r1, [r7, #0]
   168da:	1dfb      	adds	r3, r7, #7
   168dc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   168de:	1dfb      	adds	r3, r7, #7
   168e0:	781b      	ldrb	r3, [r3, #0]
   168e2:	2b01      	cmp	r3, #1
   168e4:	d00a      	beq.n	168fc <system_apb_clock_set_mask+0x2c>
   168e6:	2b02      	cmp	r3, #2
   168e8:	d00f      	beq.n	1690a <system_apb_clock_set_mask+0x3a>
   168ea:	2b00      	cmp	r3, #0
   168ec:	d114      	bne.n	16918 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   168ee:	4b0e      	ldr	r3, [pc, #56]	; (16928 <system_apb_clock_set_mask+0x58>)
   168f0:	4a0d      	ldr	r2, [pc, #52]	; (16928 <system_apb_clock_set_mask+0x58>)
   168f2:	6991      	ldr	r1, [r2, #24]
   168f4:	683a      	ldr	r2, [r7, #0]
   168f6:	430a      	orrs	r2, r1
   168f8:	619a      	str	r2, [r3, #24]
			break;
   168fa:	e00f      	b.n	1691c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   168fc:	4b0a      	ldr	r3, [pc, #40]	; (16928 <system_apb_clock_set_mask+0x58>)
   168fe:	4a0a      	ldr	r2, [pc, #40]	; (16928 <system_apb_clock_set_mask+0x58>)
   16900:	69d1      	ldr	r1, [r2, #28]
   16902:	683a      	ldr	r2, [r7, #0]
   16904:	430a      	orrs	r2, r1
   16906:	61da      	str	r2, [r3, #28]
			break;
   16908:	e008      	b.n	1691c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1690a:	4b07      	ldr	r3, [pc, #28]	; (16928 <system_apb_clock_set_mask+0x58>)
   1690c:	4a06      	ldr	r2, [pc, #24]	; (16928 <system_apb_clock_set_mask+0x58>)
   1690e:	6a11      	ldr	r1, [r2, #32]
   16910:	683a      	ldr	r2, [r7, #0]
   16912:	430a      	orrs	r2, r1
   16914:	621a      	str	r2, [r3, #32]
			break;
   16916:	e001      	b.n	1691c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   16918:	2317      	movs	r3, #23
   1691a:	e000      	b.n	1691e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1691c:	2300      	movs	r3, #0
}
   1691e:	0018      	movs	r0, r3
   16920:	46bd      	mov	sp, r7
   16922:	b002      	add	sp, #8
   16924:	bd80      	pop	{r7, pc}
   16926:	46c0      	nop			; (mov r8, r8)
   16928:	40000400 	.word	0x40000400

0001692c <system_pinmux_get_config_defaults>:
{
   1692c:	b580      	push	{r7, lr}
   1692e:	b082      	sub	sp, #8
   16930:	af00      	add	r7, sp, #0
   16932:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   16934:	687b      	ldr	r3, [r7, #4]
   16936:	2280      	movs	r2, #128	; 0x80
   16938:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1693a:	687b      	ldr	r3, [r7, #4]
   1693c:	2200      	movs	r2, #0
   1693e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   16940:	687b      	ldr	r3, [r7, #4]
   16942:	2201      	movs	r2, #1
   16944:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   16946:	687b      	ldr	r3, [r7, #4]
   16948:	2200      	movs	r2, #0
   1694a:	70da      	strb	r2, [r3, #3]
}
   1694c:	46c0      	nop			; (mov r8, r8)
   1694e:	46bd      	mov	sp, r7
   16950:	b002      	add	sp, #8
   16952:	bd80      	pop	{r7, pc}

00016954 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   16954:	b580      	push	{r7, lr}
   16956:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   16958:	4b05      	ldr	r3, [pc, #20]	; (16970 <system_is_debugger_present+0x1c>)
   1695a:	789b      	ldrb	r3, [r3, #2]
   1695c:	b2db      	uxtb	r3, r3
   1695e:	001a      	movs	r2, r3
   16960:	2302      	movs	r3, #2
   16962:	4013      	ands	r3, r2
   16964:	1e5a      	subs	r2, r3, #1
   16966:	4193      	sbcs	r3, r2
   16968:	b2db      	uxtb	r3, r3
}
   1696a:	0018      	movs	r0, r3
   1696c:	46bd      	mov	sp, r7
   1696e:	bd80      	pop	{r7, pc}
   16970:	41002000 	.word	0x41002000

00016974 <system_interrupt_enter_critical_section>:
{
   16974:	b580      	push	{r7, lr}
   16976:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   16978:	4b02      	ldr	r3, [pc, #8]	; (16984 <system_interrupt_enter_critical_section+0x10>)
   1697a:	4798      	blx	r3
}
   1697c:	46c0      	nop			; (mov r8, r8)
   1697e:	46bd      	mov	sp, r7
   16980:	bd80      	pop	{r7, pc}
   16982:	46c0      	nop			; (mov r8, r8)
   16984:	00025581 	.word	0x00025581

00016988 <system_interrupt_leave_critical_section>:
{
   16988:	b580      	push	{r7, lr}
   1698a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1698c:	4b02      	ldr	r3, [pc, #8]	; (16998 <system_interrupt_leave_critical_section+0x10>)
   1698e:	4798      	blx	r3
}
   16990:	46c0      	nop			; (mov r8, r8)
   16992:	46bd      	mov	sp, r7
   16994:	bd80      	pop	{r7, pc}
   16996:	46c0      	nop			; (mov r8, r8)
   16998:	000255d5 	.word	0x000255d5

0001699c <system_interrupt_disable>:
{
   1699c:	b580      	push	{r7, lr}
   1699e:	b082      	sub	sp, #8
   169a0:	af00      	add	r7, sp, #0
   169a2:	0002      	movs	r2, r0
   169a4:	1dfb      	adds	r3, r7, #7
   169a6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   169a8:	4a07      	ldr	r2, [pc, #28]	; (169c8 <system_interrupt_disable+0x2c>)
   169aa:	1dfb      	adds	r3, r7, #7
   169ac:	781b      	ldrb	r3, [r3, #0]
   169ae:	0019      	movs	r1, r3
   169b0:	231f      	movs	r3, #31
   169b2:	400b      	ands	r3, r1
   169b4:	2101      	movs	r1, #1
   169b6:	4099      	lsls	r1, r3
   169b8:	000b      	movs	r3, r1
   169ba:	0019      	movs	r1, r3
   169bc:	2380      	movs	r3, #128	; 0x80
   169be:	50d1      	str	r1, [r2, r3]
}
   169c0:	46c0      	nop			; (mov r8, r8)
   169c2:	46bd      	mov	sp, r7
   169c4:	b002      	add	sp, #8
   169c6:	bd80      	pop	{r7, pc}
   169c8:	e000e100 	.word	0xe000e100

000169cc <i2c_master_is_syncing>:
{
   169cc:	b580      	push	{r7, lr}
   169ce:	b084      	sub	sp, #16
   169d0:	af00      	add	r7, sp, #0
   169d2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   169d4:	687b      	ldr	r3, [r7, #4]
   169d6:	681b      	ldr	r3, [r3, #0]
   169d8:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   169da:	68fb      	ldr	r3, [r7, #12]
   169dc:	69db      	ldr	r3, [r3, #28]
   169de:	2207      	movs	r2, #7
   169e0:	4013      	ands	r3, r2
   169e2:	1e5a      	subs	r2, r3, #1
   169e4:	4193      	sbcs	r3, r2
   169e6:	b2db      	uxtb	r3, r3
}
   169e8:	0018      	movs	r0, r3
   169ea:	46bd      	mov	sp, r7
   169ec:	b004      	add	sp, #16
   169ee:	bd80      	pop	{r7, pc}

000169f0 <_i2c_master_wait_for_sync>:
{
   169f0:	b580      	push	{r7, lr}
   169f2:	b082      	sub	sp, #8
   169f4:	af00      	add	r7, sp, #0
   169f6:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   169f8:	46c0      	nop			; (mov r8, r8)
   169fa:	687b      	ldr	r3, [r7, #4]
   169fc:	0018      	movs	r0, r3
   169fe:	4b04      	ldr	r3, [pc, #16]	; (16a10 <_i2c_master_wait_for_sync+0x20>)
   16a00:	4798      	blx	r3
   16a02:	1e03      	subs	r3, r0, #0
   16a04:	d1f9      	bne.n	169fa <_i2c_master_wait_for_sync+0xa>
}
   16a06:	46c0      	nop			; (mov r8, r8)
   16a08:	46bd      	mov	sp, r7
   16a0a:	b002      	add	sp, #8
   16a0c:	bd80      	pop	{r7, pc}
   16a0e:	46c0      	nop			; (mov r8, r8)
   16a10:	000169cd 	.word	0x000169cd

00016a14 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   16a14:	b580      	push	{r7, lr}
   16a16:	b084      	sub	sp, #16
   16a18:	af00      	add	r7, sp, #0
   16a1a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16a1c:	687b      	ldr	r3, [r7, #4]
   16a1e:	681b      	ldr	r3, [r3, #0]
   16a20:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   16a22:	687b      	ldr	r3, [r7, #4]
   16a24:	681b      	ldr	r3, [r3, #0]
   16a26:	0018      	movs	r0, r3
   16a28:	4b0d      	ldr	r3, [pc, #52]	; (16a60 <i2c_master_disable+0x4c>)
   16a2a:	4798      	blx	r3
   16a2c:	0003      	movs	r3, r0
   16a2e:	0018      	movs	r0, r3
   16a30:	4b0c      	ldr	r3, [pc, #48]	; (16a64 <i2c_master_disable+0x50>)
   16a32:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   16a34:	687b      	ldr	r3, [r7, #4]
   16a36:	0018      	movs	r0, r3
   16a38:	4b0b      	ldr	r3, [pc, #44]	; (16a68 <i2c_master_disable+0x54>)
   16a3a:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   16a3c:	68fb      	ldr	r3, [r7, #12]
   16a3e:	2283      	movs	r2, #131	; 0x83
   16a40:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   16a42:	68fb      	ldr	r3, [r7, #12]
   16a44:	2283      	movs	r2, #131	; 0x83
   16a46:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   16a48:	68fb      	ldr	r3, [r7, #12]
   16a4a:	681b      	ldr	r3, [r3, #0]
   16a4c:	2202      	movs	r2, #2
   16a4e:	4393      	bics	r3, r2
   16a50:	001a      	movs	r2, r3
   16a52:	68fb      	ldr	r3, [r7, #12]
   16a54:	601a      	str	r2, [r3, #0]

}
   16a56:	46c0      	nop			; (mov r8, r8)
   16a58:	46bd      	mov	sp, r7
   16a5a:	b004      	add	sp, #16
   16a5c:	bd80      	pop	{r7, pc}
   16a5e:	46c0      	nop			; (mov r8, r8)
   16a60:	00026a55 	.word	0x00026a55
   16a64:	0001699d 	.word	0x0001699d
   16a68:	000169f1 	.word	0x000169f1

00016a6c <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   16a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a6e:	b097      	sub	sp, #92	; 0x5c
   16a70:	af00      	add	r7, sp, #0
   16a72:	6178      	str	r0, [r7, #20]
   16a74:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   16a76:	2300      	movs	r3, #0
   16a78:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   16a7a:	2300      	movs	r3, #0
   16a7c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   16a7e:	2300      	movs	r3, #0
   16a80:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   16a82:	233b      	movs	r3, #59	; 0x3b
   16a84:	2210      	movs	r2, #16
   16a86:	4694      	mov	ip, r2
   16a88:	44bc      	add	ip, r7
   16a8a:	4463      	add	r3, ip
   16a8c:	2200      	movs	r2, #0
   16a8e:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16a90:	697b      	ldr	r3, [r7, #20]
   16a92:	681b      	ldr	r3, [r3, #0]
   16a94:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   16a96:	697b      	ldr	r3, [r7, #20]
   16a98:	681b      	ldr	r3, [r3, #0]
   16a9a:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   16a9c:	2323      	movs	r3, #35	; 0x23
   16a9e:	2210      	movs	r2, #16
   16aa0:	18ba      	adds	r2, r7, r2
   16aa2:	18d4      	adds	r4, r2, r3
   16aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16aa6:	0018      	movs	r0, r3
   16aa8:	4bc0      	ldr	r3, [pc, #768]	; (16dac <_i2c_master_set_config+0x340>)
   16aaa:	4798      	blx	r3
   16aac:	0003      	movs	r3, r0
   16aae:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   16ab0:	230c      	movs	r3, #12
   16ab2:	2210      	movs	r2, #16
   16ab4:	4694      	mov	ip, r2
   16ab6:	44bc      	add	ip, r7
   16ab8:	4463      	add	r3, ip
   16aba:	0018      	movs	r0, r3
   16abc:	4bbc      	ldr	r3, [pc, #752]	; (16db0 <_i2c_master_set_config+0x344>)
   16abe:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   16ac0:	693b      	ldr	r3, [r7, #16]
   16ac2:	69db      	ldr	r3, [r3, #28]
   16ac4:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   16ac6:	693b      	ldr	r3, [r7, #16]
   16ac8:	6a1b      	ldr	r3, [r3, #32]
   16aca:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   16acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16ace:	2b00      	cmp	r3, #0
   16ad0:	d106      	bne.n	16ae0 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   16ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ad4:	2100      	movs	r1, #0
   16ad6:	0018      	movs	r0, r3
   16ad8:	4bb6      	ldr	r3, [pc, #728]	; (16db4 <_i2c_master_set_config+0x348>)
   16ada:	4798      	blx	r3
   16adc:	0003      	movs	r3, r0
   16ade:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   16ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16ae2:	b2da      	uxtb	r2, r3
   16ae4:	230c      	movs	r3, #12
   16ae6:	2110      	movs	r1, #16
   16ae8:	468c      	mov	ip, r1
   16aea:	44bc      	add	ip, r7
   16aec:	4463      	add	r3, ip
   16aee:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   16af0:	230c      	movs	r3, #12
   16af2:	2210      	movs	r2, #16
   16af4:	4694      	mov	ip, r2
   16af6:	44bc      	add	ip, r7
   16af8:	4463      	add	r3, ip
   16afa:	2202      	movs	r2, #2
   16afc:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   16afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16b00:	0c1b      	lsrs	r3, r3, #16
   16b02:	b2db      	uxtb	r3, r3
   16b04:	220c      	movs	r2, #12
   16b06:	2110      	movs	r1, #16
   16b08:	468c      	mov	ip, r1
   16b0a:	44bc      	add	ip, r7
   16b0c:	4462      	add	r2, ip
   16b0e:	0011      	movs	r1, r2
   16b10:	0018      	movs	r0, r3
   16b12:	4ba9      	ldr	r3, [pc, #676]	; (16db8 <_i2c_master_set_config+0x34c>)
   16b14:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   16b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16b18:	2b00      	cmp	r3, #0
   16b1a:	d106      	bne.n	16b2a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   16b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b1e:	2101      	movs	r1, #1
   16b20:	0018      	movs	r0, r3
   16b22:	4ba4      	ldr	r3, [pc, #656]	; (16db4 <_i2c_master_set_config+0x348>)
   16b24:	4798      	blx	r3
   16b26:	0003      	movs	r3, r0
   16b28:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   16b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16b2c:	b2da      	uxtb	r2, r3
   16b2e:	230c      	movs	r3, #12
   16b30:	2110      	movs	r1, #16
   16b32:	468c      	mov	ip, r1
   16b34:	44bc      	add	ip, r7
   16b36:	4463      	add	r3, ip
   16b38:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   16b3a:	230c      	movs	r3, #12
   16b3c:	2210      	movs	r2, #16
   16b3e:	4694      	mov	ip, r2
   16b40:	44bc      	add	ip, r7
   16b42:	4463      	add	r3, ip
   16b44:	2202      	movs	r2, #2
   16b46:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   16b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16b4a:	0c1b      	lsrs	r3, r3, #16
   16b4c:	b2db      	uxtb	r3, r3
   16b4e:	220c      	movs	r2, #12
   16b50:	2110      	movs	r1, #16
   16b52:	468c      	mov	ip, r1
   16b54:	44bc      	add	ip, r7
   16b56:	4462      	add	r2, ip
   16b58:	0011      	movs	r1, r2
   16b5a:	0018      	movs	r0, r3
   16b5c:	4b96      	ldr	r3, [pc, #600]	; (16db8 <_i2c_master_set_config+0x34c>)
   16b5e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   16b60:	693b      	ldr	r3, [r7, #16]
   16b62:	8a9a      	ldrh	r2, [r3, #20]
   16b64:	697b      	ldr	r3, [r7, #20]
   16b66:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   16b68:	693b      	ldr	r3, [r7, #16]
   16b6a:	8ada      	ldrh	r2, [r3, #22]
   16b6c:	697b      	ldr	r3, [r7, #20]
   16b6e:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   16b70:	693b      	ldr	r3, [r7, #16]
   16b72:	7e1b      	ldrb	r3, [r3, #24]
   16b74:	2b00      	cmp	r3, #0
   16b76:	d103      	bne.n	16b80 <_i2c_master_set_config+0x114>
   16b78:	4b90      	ldr	r3, [pc, #576]	; (16dbc <_i2c_master_set_config+0x350>)
   16b7a:	4798      	blx	r3
   16b7c:	1e03      	subs	r3, r0, #0
   16b7e:	d002      	beq.n	16b86 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   16b80:	2380      	movs	r3, #128	; 0x80
   16b82:	657b      	str	r3, [r7, #84]	; 0x54
   16b84:	e001      	b.n	16b8a <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   16b86:	2300      	movs	r3, #0
   16b88:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   16b8a:	693b      	ldr	r3, [r7, #16]
   16b8c:	691b      	ldr	r3, [r3, #16]
   16b8e:	2b00      	cmp	r3, #0
   16b90:	d004      	beq.n	16b9c <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   16b92:	693b      	ldr	r3, [r7, #16]
   16b94:	691b      	ldr	r3, [r3, #16]
   16b96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   16b98:	4313      	orrs	r3, r2
   16b9a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   16b9c:	693b      	ldr	r3, [r7, #16]
   16b9e:	689b      	ldr	r3, [r3, #8]
   16ba0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   16ba2:	4313      	orrs	r3, r2
   16ba4:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   16ba6:	693b      	ldr	r3, [r7, #16]
   16ba8:	2224      	movs	r2, #36	; 0x24
   16baa:	5c9b      	ldrb	r3, [r3, r2]
   16bac:	2b00      	cmp	r3, #0
   16bae:	d004      	beq.n	16bba <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   16bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16bb2:	2280      	movs	r2, #128	; 0x80
   16bb4:	05d2      	lsls	r2, r2, #23
   16bb6:	4313      	orrs	r3, r2
   16bb8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   16bba:	693b      	ldr	r3, [r7, #16]
   16bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16bbe:	2b00      	cmp	r3, #0
   16bc0:	d004      	beq.n	16bcc <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   16bc2:	693b      	ldr	r3, [r7, #16]
   16bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16bc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   16bc8:	4313      	orrs	r3, r2
   16bca:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   16bcc:	693b      	ldr	r3, [r7, #16]
   16bce:	222c      	movs	r2, #44	; 0x2c
   16bd0:	5c9b      	ldrb	r3, [r3, r2]
   16bd2:	2b00      	cmp	r3, #0
   16bd4:	d105      	bne.n	16be2 <_i2c_master_set_config+0x176>
   16bd6:	693b      	ldr	r3, [r7, #16]
   16bd8:	689a      	ldr	r2, [r3, #8]
   16bda:	2380      	movs	r3, #128	; 0x80
   16bdc:	049b      	lsls	r3, r3, #18
   16bde:	429a      	cmp	r2, r3
   16be0:	d104      	bne.n	16bec <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   16be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16be4:	2280      	movs	r2, #128	; 0x80
   16be6:	0512      	lsls	r2, r2, #20
   16be8:	4313      	orrs	r3, r2
   16bea:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   16bec:	693b      	ldr	r3, [r7, #16]
   16bee:	222d      	movs	r2, #45	; 0x2d
   16bf0:	5c9b      	ldrb	r3, [r3, r2]
   16bf2:	2b00      	cmp	r3, #0
   16bf4:	d004      	beq.n	16c00 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   16bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16bf8:	2280      	movs	r2, #128	; 0x80
   16bfa:	0412      	lsls	r2, r2, #16
   16bfc:	4313      	orrs	r3, r2
   16bfe:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   16c00:	693b      	ldr	r3, [r7, #16]
   16c02:	222e      	movs	r2, #46	; 0x2e
   16c04:	5c9b      	ldrb	r3, [r3, r2]
   16c06:	2b00      	cmp	r3, #0
   16c08:	d004      	beq.n	16c14 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   16c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16c0c:	2280      	movs	r2, #128	; 0x80
   16c0e:	03d2      	lsls	r2, r2, #15
   16c10:	4313      	orrs	r3, r2
   16c12:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   16c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16c16:	681a      	ldr	r2, [r3, #0]
   16c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16c1a:	431a      	orrs	r2, r3
   16c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16c1e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   16c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16c22:	2280      	movs	r2, #128	; 0x80
   16c24:	0052      	lsls	r2, r2, #1
   16c26:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   16c28:	2323      	movs	r3, #35	; 0x23
   16c2a:	2210      	movs	r2, #16
   16c2c:	4694      	mov	ip, r2
   16c2e:	44bc      	add	ip, r7
   16c30:	4463      	add	r3, ip
   16c32:	781b      	ldrb	r3, [r3, #0]
   16c34:	3314      	adds	r3, #20
   16c36:	b2db      	uxtb	r3, r3
   16c38:	0018      	movs	r0, r3
   16c3a:	4b61      	ldr	r3, [pc, #388]	; (16dc0 <_i2c_master_set_config+0x354>)
   16c3c:	4798      	blx	r3
   16c3e:	0003      	movs	r3, r0
   16c40:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   16c42:	693b      	ldr	r3, [r7, #16]
   16c44:	681b      	ldr	r3, [r3, #0]
   16c46:	22fa      	movs	r2, #250	; 0xfa
   16c48:	0092      	lsls	r2, r2, #2
   16c4a:	4353      	muls	r3, r2
   16c4c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   16c4e:	693b      	ldr	r3, [r7, #16]
   16c50:	685b      	ldr	r3, [r3, #4]
   16c52:	22fa      	movs	r2, #250	; 0xfa
   16c54:	0092      	lsls	r2, r2, #2
   16c56:	4353      	muls	r3, r2
   16c58:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   16c5a:	693b      	ldr	r3, [r7, #16]
   16c5c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   16c5e:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   16c60:	4b58      	ldr	r3, [pc, #352]	; (16dc4 <_i2c_master_set_config+0x358>)
   16c62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16c64:	4798      	blx	r3
   16c66:	0005      	movs	r5, r0
   16c68:	000e      	movs	r6, r1
   16c6a:	4b56      	ldr	r3, [pc, #344]	; (16dc4 <_i2c_master_set_config+0x358>)
   16c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   16c6e:	4798      	blx	r3
   16c70:	60b8      	str	r0, [r7, #8]
   16c72:	60f9      	str	r1, [r7, #12]
   16c74:	4b53      	ldr	r3, [pc, #332]	; (16dc4 <_i2c_master_set_config+0x358>)
   16c76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16c78:	4798      	blx	r3
   16c7a:	4c53      	ldr	r4, [pc, #332]	; (16dc8 <_i2c_master_set_config+0x35c>)
   16c7c:	4a53      	ldr	r2, [pc, #332]	; (16dcc <_i2c_master_set_config+0x360>)
   16c7e:	4b54      	ldr	r3, [pc, #336]	; (16dd0 <_i2c_master_set_config+0x364>)
   16c80:	47a0      	blx	r4
   16c82:	0003      	movs	r3, r0
   16c84:	000c      	movs	r4, r1
   16c86:	603b      	str	r3, [r7, #0]
   16c88:	607c      	str	r4, [r7, #4]
   16c8a:	4b4e      	ldr	r3, [pc, #312]	; (16dc4 <_i2c_master_set_config+0x358>)
   16c8c:	6a38      	ldr	r0, [r7, #32]
   16c8e:	4798      	blx	r3
   16c90:	0002      	movs	r2, r0
   16c92:	000b      	movs	r3, r1
   16c94:	4c4c      	ldr	r4, [pc, #304]	; (16dc8 <_i2c_master_set_config+0x35c>)
   16c96:	6838      	ldr	r0, [r7, #0]
   16c98:	6879      	ldr	r1, [r7, #4]
   16c9a:	47a0      	blx	r4
   16c9c:	0003      	movs	r3, r0
   16c9e:	000c      	movs	r4, r1
   16ca0:	0018      	movs	r0, r3
   16ca2:	0021      	movs	r1, r4
   16ca4:	4c4b      	ldr	r4, [pc, #300]	; (16dd4 <_i2c_master_set_config+0x368>)
   16ca6:	2200      	movs	r2, #0
   16ca8:	4b4b      	ldr	r3, [pc, #300]	; (16dd8 <_i2c_master_set_config+0x36c>)
   16caa:	47a0      	blx	r4
   16cac:	0003      	movs	r3, r0
   16cae:	000c      	movs	r4, r1
   16cb0:	001a      	movs	r2, r3
   16cb2:	0023      	movs	r3, r4
   16cb4:	4c44      	ldr	r4, [pc, #272]	; (16dc8 <_i2c_master_set_config+0x35c>)
   16cb6:	68b8      	ldr	r0, [r7, #8]
   16cb8:	68f9      	ldr	r1, [r7, #12]
   16cba:	47a0      	blx	r4
   16cbc:	0003      	movs	r3, r0
   16cbe:	000c      	movs	r4, r1
   16cc0:	001a      	movs	r2, r3
   16cc2:	0023      	movs	r3, r4
   16cc4:	4c45      	ldr	r4, [pc, #276]	; (16ddc <_i2c_master_set_config+0x370>)
   16cc6:	0028      	movs	r0, r5
   16cc8:	0031      	movs	r1, r6
   16cca:	47a0      	blx	r4
   16ccc:	0003      	movs	r3, r0
   16cce:	000c      	movs	r4, r1
   16cd0:	001d      	movs	r5, r3
   16cd2:	0026      	movs	r6, r4
   16cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16cd6:	005a      	lsls	r2, r3, #1
   16cd8:	4b3a      	ldr	r3, [pc, #232]	; (16dc4 <_i2c_master_set_config+0x358>)
   16cda:	0010      	movs	r0, r2
   16cdc:	4798      	blx	r3
   16cde:	0002      	movs	r2, r0
   16ce0:	000b      	movs	r3, r1
   16ce2:	4c3c      	ldr	r4, [pc, #240]	; (16dd4 <_i2c_master_set_config+0x368>)
   16ce4:	0028      	movs	r0, r5
   16ce6:	0031      	movs	r1, r6
   16ce8:	47a0      	blx	r4
   16cea:	0003      	movs	r3, r0
   16cec:	000c      	movs	r4, r1
   16cee:	0018      	movs	r0, r3
   16cf0:	0021      	movs	r1, r4
   16cf2:	4c3a      	ldr	r4, [pc, #232]	; (16ddc <_i2c_master_set_config+0x370>)
   16cf4:	2200      	movs	r2, #0
   16cf6:	4b3a      	ldr	r3, [pc, #232]	; (16de0 <_i2c_master_set_config+0x374>)
   16cf8:	47a0      	blx	r4
   16cfa:	0003      	movs	r3, r0
   16cfc:	000c      	movs	r4, r1
   16cfe:	001d      	movs	r5, r3
   16d00:	0026      	movs	r6, r4
   16d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16d04:	005a      	lsls	r2, r3, #1
   16d06:	4b2f      	ldr	r3, [pc, #188]	; (16dc4 <_i2c_master_set_config+0x358>)
   16d08:	0010      	movs	r0, r2
   16d0a:	4798      	blx	r3
   16d0c:	0002      	movs	r2, r0
   16d0e:	000b      	movs	r3, r1
   16d10:	4c34      	ldr	r4, [pc, #208]	; (16de4 <_i2c_master_set_config+0x378>)
   16d12:	0028      	movs	r0, r5
   16d14:	0031      	movs	r1, r6
   16d16:	47a0      	blx	r4
   16d18:	0003      	movs	r3, r0
   16d1a:	000c      	movs	r4, r1
   16d1c:	0019      	movs	r1, r3
   16d1e:	0022      	movs	r2, r4
   16d20:	4b31      	ldr	r3, [pc, #196]	; (16de8 <_i2c_master_set_config+0x37c>)
   16d22:	0008      	movs	r0, r1
   16d24:	0011      	movs	r1, r2
   16d26:	4798      	blx	r3
   16d28:	0003      	movs	r3, r0
   16d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   16d2c:	693b      	ldr	r3, [r7, #16]
   16d2e:	689a      	ldr	r2, [r3, #8]
   16d30:	2380      	movs	r3, #128	; 0x80
   16d32:	049b      	lsls	r3, r3, #18
   16d34:	429a      	cmp	r2, r3
   16d36:	d16a      	bne.n	16e0e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   16d38:	4b22      	ldr	r3, [pc, #136]	; (16dc4 <_i2c_master_set_config+0x358>)
   16d3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16d3c:	4798      	blx	r3
   16d3e:	4c25      	ldr	r4, [pc, #148]	; (16dd4 <_i2c_master_set_config+0x368>)
   16d40:	0002      	movs	r2, r0
   16d42:	000b      	movs	r3, r1
   16d44:	47a0      	blx	r4
   16d46:	0003      	movs	r3, r0
   16d48:	000c      	movs	r4, r1
   16d4a:	001d      	movs	r5, r3
   16d4c:	0026      	movs	r6, r4
   16d4e:	4b1d      	ldr	r3, [pc, #116]	; (16dc4 <_i2c_master_set_config+0x358>)
   16d50:	6a78      	ldr	r0, [r7, #36]	; 0x24
   16d52:	4798      	blx	r3
   16d54:	4c1c      	ldr	r4, [pc, #112]	; (16dc8 <_i2c_master_set_config+0x35c>)
   16d56:	2200      	movs	r2, #0
   16d58:	4b24      	ldr	r3, [pc, #144]	; (16dec <_i2c_master_set_config+0x380>)
   16d5a:	47a0      	blx	r4
   16d5c:	0003      	movs	r3, r0
   16d5e:	000c      	movs	r4, r1
   16d60:	001a      	movs	r2, r3
   16d62:	0023      	movs	r3, r4
   16d64:	4c1f      	ldr	r4, [pc, #124]	; (16de4 <_i2c_master_set_config+0x378>)
   16d66:	0028      	movs	r0, r5
   16d68:	0031      	movs	r1, r6
   16d6a:	47a0      	blx	r4
   16d6c:	0003      	movs	r3, r0
   16d6e:	000c      	movs	r4, r1
   16d70:	0018      	movs	r0, r3
   16d72:	0021      	movs	r1, r4
   16d74:	4c19      	ldr	r4, [pc, #100]	; (16ddc <_i2c_master_set_config+0x370>)
   16d76:	2200      	movs	r2, #0
   16d78:	4b19      	ldr	r3, [pc, #100]	; (16de0 <_i2c_master_set_config+0x374>)
   16d7a:	47a0      	blx	r4
   16d7c:	0003      	movs	r3, r0
   16d7e:	000c      	movs	r4, r1
   16d80:	0019      	movs	r1, r3
   16d82:	0022      	movs	r2, r4
   16d84:	4b18      	ldr	r3, [pc, #96]	; (16de8 <_i2c_master_set_config+0x37c>)
   16d86:	0008      	movs	r0, r1
   16d88:	0011      	movs	r1, r2
   16d8a:	4798      	blx	r3
   16d8c:	0003      	movs	r3, r0
   16d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   16d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16d92:	2b00      	cmp	r3, #0
   16d94:	d02e      	beq.n	16df4 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   16d96:	4b16      	ldr	r3, [pc, #88]	; (16df0 <_i2c_master_set_config+0x384>)
   16d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
   16d9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16d9c:	4798      	blx	r3
   16d9e:	0003      	movs	r3, r0
   16da0:	1e9a      	subs	r2, r3, #2
   16da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16da4:	1ad3      	subs	r3, r2, r3
   16da6:	653b      	str	r3, [r7, #80]	; 0x50
   16da8:	e031      	b.n	16e0e <_i2c_master_set_config+0x3a2>
   16daa:	46c0      	nop			; (mov r8, r8)
   16dac:	00026985 	.word	0x00026985
   16db0:	0001692d 	.word	0x0001692d
   16db4:	000267c9 	.word	0x000267c9
   16db8:	00029575 	.word	0x00029575
   16dbc:	00016955 	.word	0x00016955
   16dc0:	00029339 	.word	0x00029339
   16dc4:	000338a1 	.word	0x000338a1
   16dc8:	00032d0d 	.word	0x00032d0d
   16dcc:	e826d695 	.word	0xe826d695
   16dd0:	3e112e0b 	.word	0x3e112e0b
   16dd4:	00032085 	.word	0x00032085
   16dd8:	40240000 	.word	0x40240000
   16ddc:	0003320d 	.word	0x0003320d
   16de0:	3ff00000 	.word	0x3ff00000
   16de4:	000326a5 	.word	0x000326a5
   16de8:	00033839 	.word	0x00033839
   16dec:	40080000 	.word	0x40080000
   16df0:	00031d45 	.word	0x00031d45
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   16df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16df6:	005a      	lsls	r2, r3, #1
   16df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16dfa:	18d3      	adds	r3, r2, r3
   16dfc:	1e5a      	subs	r2, r3, #1
   16dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16e00:	0059      	lsls	r1, r3, #1
   16e02:	4b1d      	ldr	r3, [pc, #116]	; (16e78 <_i2c_master_set_config+0x40c>)
   16e04:	0010      	movs	r0, r2
   16e06:	4798      	blx	r3
   16e08:	0003      	movs	r3, r0
   16e0a:	3b01      	subs	r3, #1
   16e0c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   16e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16e10:	2bff      	cmp	r3, #255	; 0xff
   16e12:	dc08      	bgt.n	16e26 <_i2c_master_set_config+0x3ba>
   16e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16e16:	2b00      	cmp	r3, #0
   16e18:	db05      	blt.n	16e26 <_i2c_master_set_config+0x3ba>
   16e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   16e1c:	2bff      	cmp	r3, #255	; 0xff
   16e1e:	dc02      	bgt.n	16e26 <_i2c_master_set_config+0x3ba>
   16e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   16e22:	2b00      	cmp	r3, #0
   16e24:	da06      	bge.n	16e34 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   16e26:	233b      	movs	r3, #59	; 0x3b
   16e28:	2210      	movs	r2, #16
   16e2a:	4694      	mov	ip, r2
   16e2c:	44bc      	add	ip, r7
   16e2e:	4463      	add	r3, ip
   16e30:	2240      	movs	r2, #64	; 0x40
   16e32:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   16e34:	233b      	movs	r3, #59	; 0x3b
   16e36:	2210      	movs	r2, #16
   16e38:	4694      	mov	ip, r2
   16e3a:	44bc      	add	ip, r7
   16e3c:	4463      	add	r3, ip
   16e3e:	781b      	ldrb	r3, [r3, #0]
   16e40:	2b40      	cmp	r3, #64	; 0x40
   16e42:	d00e      	beq.n	16e62 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16e46:	22ff      	movs	r2, #255	; 0xff
   16e48:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   16e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   16e4c:	041b      	lsls	r3, r3, #16
   16e4e:	0019      	movs	r1, r3
   16e50:	23ff      	movs	r3, #255	; 0xff
   16e52:	041b      	lsls	r3, r3, #16
   16e54:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16e56:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   16e58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   16e5a:	0612      	lsls	r2, r2, #24
   16e5c:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16e60:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   16e62:	233b      	movs	r3, #59	; 0x3b
   16e64:	2210      	movs	r2, #16
   16e66:	4694      	mov	ip, r2
   16e68:	44bc      	add	ip, r7
   16e6a:	4463      	add	r3, ip
   16e6c:	781b      	ldrb	r3, [r3, #0]
}
   16e6e:	0018      	movs	r0, r3
   16e70:	46bd      	mov	sp, r7
   16e72:	b017      	add	sp, #92	; 0x5c
   16e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16e76:	46c0      	nop			; (mov r8, r8)
   16e78:	00031d45 	.word	0x00031d45

00016e7c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   16e7c:	b590      	push	{r4, r7, lr}
   16e7e:	b08b      	sub	sp, #44	; 0x2c
   16e80:	af00      	add	r7, sp, #0
   16e82:	60f8      	str	r0, [r7, #12]
   16e84:	60b9      	str	r1, [r7, #8]
   16e86:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   16e88:	68fb      	ldr	r3, [r7, #12]
   16e8a:	68ba      	ldr	r2, [r7, #8]
   16e8c:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16e8e:	68fb      	ldr	r3, [r7, #12]
   16e90:	681b      	ldr	r3, [r3, #0]
   16e92:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   16e94:	68fb      	ldr	r3, [r7, #12]
   16e96:	681b      	ldr	r3, [r3, #0]
   16e98:	0018      	movs	r0, r3
   16e9a:	4b3b      	ldr	r3, [pc, #236]	; (16f88 <i2c_master_init+0x10c>)
   16e9c:	4798      	blx	r3
   16e9e:	0003      	movs	r3, r0
   16ea0:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   16ea2:	6a3b      	ldr	r3, [r7, #32]
   16ea4:	3302      	adds	r3, #2
   16ea6:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   16ea8:	6a3b      	ldr	r3, [r7, #32]
   16eaa:	3314      	adds	r3, #20
   16eac:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   16eae:	2201      	movs	r2, #1
   16eb0:	69fb      	ldr	r3, [r7, #28]
   16eb2:	409a      	lsls	r2, r3
   16eb4:	0013      	movs	r3, r2
   16eb6:	0019      	movs	r1, r3
   16eb8:	2002      	movs	r0, #2
   16eba:	4b34      	ldr	r3, [pc, #208]	; (16f8c <i2c_master_init+0x110>)
   16ebc:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   16ebe:	2314      	movs	r3, #20
   16ec0:	18fb      	adds	r3, r7, r3
   16ec2:	0018      	movs	r0, r3
   16ec4:	4b32      	ldr	r3, [pc, #200]	; (16f90 <i2c_master_init+0x114>)
   16ec6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   16ec8:	687b      	ldr	r3, [r7, #4]
   16eca:	7b1a      	ldrb	r2, [r3, #12]
   16ecc:	2314      	movs	r3, #20
   16ece:	18fb      	adds	r3, r7, r3
   16ed0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   16ed2:	69bb      	ldr	r3, [r7, #24]
   16ed4:	b2db      	uxtb	r3, r3
   16ed6:	2214      	movs	r2, #20
   16ed8:	18ba      	adds	r2, r7, r2
   16eda:	0011      	movs	r1, r2
   16edc:	0018      	movs	r0, r3
   16ede:	4b2d      	ldr	r3, [pc, #180]	; (16f94 <i2c_master_init+0x118>)
   16ee0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   16ee2:	69bb      	ldr	r3, [r7, #24]
   16ee4:	b2db      	uxtb	r3, r3
   16ee6:	0018      	movs	r0, r3
   16ee8:	4b2b      	ldr	r3, [pc, #172]	; (16f98 <i2c_master_init+0x11c>)
   16eea:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   16eec:	687b      	ldr	r3, [r7, #4]
   16eee:	7b1b      	ldrb	r3, [r3, #12]
   16ef0:	2100      	movs	r1, #0
   16ef2:	0018      	movs	r0, r3
   16ef4:	4b29      	ldr	r3, [pc, #164]	; (16f9c <i2c_master_init+0x120>)
   16ef6:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   16ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16efa:	681b      	ldr	r3, [r3, #0]
   16efc:	2202      	movs	r2, #2
   16efe:	4013      	ands	r3, r2
   16f00:	d001      	beq.n	16f06 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   16f02:	231c      	movs	r3, #28
   16f04:	e03b      	b.n	16f7e <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   16f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16f08:	681b      	ldr	r3, [r3, #0]
   16f0a:	2201      	movs	r2, #1
   16f0c:	4013      	ands	r3, r2
   16f0e:	d001      	beq.n	16f14 <i2c_master_init+0x98>
		return STATUS_BUSY;
   16f10:	2305      	movs	r3, #5
   16f12:	e034      	b.n	16f7e <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   16f14:	68fb      	ldr	r3, [r7, #12]
   16f16:	681b      	ldr	r3, [r3, #0]
   16f18:	2217      	movs	r2, #23
   16f1a:	18bc      	adds	r4, r7, r2
   16f1c:	0018      	movs	r0, r3
   16f1e:	4b1a      	ldr	r3, [pc, #104]	; (16f88 <i2c_master_init+0x10c>)
   16f20:	4798      	blx	r3
   16f22:	0003      	movs	r3, r0
   16f24:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   16f26:	4a1e      	ldr	r2, [pc, #120]	; (16fa0 <i2c_master_init+0x124>)
   16f28:	2317      	movs	r3, #23
   16f2a:	18fb      	adds	r3, r7, r3
   16f2c:	781b      	ldrb	r3, [r3, #0]
   16f2e:	0011      	movs	r1, r2
   16f30:	0018      	movs	r0, r3
   16f32:	4b1c      	ldr	r3, [pc, #112]	; (16fa4 <i2c_master_init+0x128>)
   16f34:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   16f36:	2317      	movs	r3, #23
   16f38:	18fb      	adds	r3, r7, r3
   16f3a:	781a      	ldrb	r2, [r3, #0]
   16f3c:	4b1a      	ldr	r3, [pc, #104]	; (16fa8 <i2c_master_init+0x12c>)
   16f3e:	0092      	lsls	r2, r2, #2
   16f40:	68f9      	ldr	r1, [r7, #12]
   16f42:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   16f44:	68fb      	ldr	r3, [r7, #12]
   16f46:	2200      	movs	r2, #0
   16f48:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   16f4a:	68fb      	ldr	r3, [r7, #12]
   16f4c:	2200      	movs	r2, #0
   16f4e:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   16f50:	68fb      	ldr	r3, [r7, #12]
   16f52:	2200      	movs	r2, #0
   16f54:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   16f56:	68fb      	ldr	r3, [r7, #12]
   16f58:	2200      	movs	r2, #0
   16f5a:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   16f5c:	68fb      	ldr	r3, [r7, #12]
   16f5e:	2225      	movs	r2, #37	; 0x25
   16f60:	2100      	movs	r1, #0
   16f62:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   16f64:	68fb      	ldr	r3, [r7, #12]
   16f66:	2200      	movs	r2, #0
   16f68:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   16f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16f6c:	2214      	movs	r2, #20
   16f6e:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   16f70:	687a      	ldr	r2, [r7, #4]
   16f72:	68fb      	ldr	r3, [r7, #12]
   16f74:	0011      	movs	r1, r2
   16f76:	0018      	movs	r0, r3
   16f78:	4b0c      	ldr	r3, [pc, #48]	; (16fac <i2c_master_init+0x130>)
   16f7a:	4798      	blx	r3
   16f7c:	0003      	movs	r3, r0
}
   16f7e:	0018      	movs	r0, r3
   16f80:	46bd      	mov	sp, r7
   16f82:	b00b      	add	sp, #44	; 0x2c
   16f84:	bd90      	pop	{r4, r7, pc}
   16f86:	46c0      	nop			; (mov r8, r8)
   16f88:	00026985 	.word	0x00026985
   16f8c:	000168d1 	.word	0x000168d1
   16f90:	000168b9 	.word	0x000168b9
   16f94:	00029215 	.word	0x00029215
   16f98:	00029259 	.word	0x00029259
   16f9c:	0002673d 	.word	0x0002673d
   16fa0:	00013831 	.word	0x00013831
   16fa4:	000269e9 	.word	0x000269e9
   16fa8:	20005614 	.word	0x20005614
   16fac:	00016a6d 	.word	0x00016a6d

00016fb0 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   16fb0:	b580      	push	{r7, lr}
   16fb2:	b084      	sub	sp, #16
   16fb4:	af00      	add	r7, sp, #0
   16fb6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16fb8:	687b      	ldr	r3, [r7, #4]
   16fba:	681b      	ldr	r3, [r3, #0]
   16fbc:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   16fbe:	687b      	ldr	r3, [r7, #4]
   16fc0:	0018      	movs	r0, r3
   16fc2:	4b0f      	ldr	r3, [pc, #60]	; (17000 <i2c_master_reset+0x50>)
   16fc4:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   16fc6:	687b      	ldr	r3, [r7, #4]
   16fc8:	0018      	movs	r0, r3
   16fca:	4b0e      	ldr	r3, [pc, #56]	; (17004 <i2c_master_reset+0x54>)
   16fcc:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   16fce:	4b0e      	ldr	r3, [pc, #56]	; (17008 <i2c_master_reset+0x58>)
   16fd0:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   16fd2:	687b      	ldr	r3, [r7, #4]
   16fd4:	681b      	ldr	r3, [r3, #0]
   16fd6:	0018      	movs	r0, r3
   16fd8:	4b0c      	ldr	r3, [pc, #48]	; (1700c <i2c_master_reset+0x5c>)
   16fda:	4798      	blx	r3
   16fdc:	0003      	movs	r3, r0
   16fde:	0018      	movs	r0, r3
   16fe0:	4b0b      	ldr	r3, [pc, #44]	; (17010 <i2c_master_reset+0x60>)
   16fe2:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   16fe4:	4b0b      	ldr	r3, [pc, #44]	; (17014 <i2c_master_reset+0x64>)
   16fe6:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   16fe8:	687b      	ldr	r3, [r7, #4]
   16fea:	0018      	movs	r0, r3
   16fec:	4b04      	ldr	r3, [pc, #16]	; (17000 <i2c_master_reset+0x50>)
   16fee:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   16ff0:	68fb      	ldr	r3, [r7, #12]
   16ff2:	2201      	movs	r2, #1
   16ff4:	601a      	str	r2, [r3, #0]
}
   16ff6:	46c0      	nop			; (mov r8, r8)
   16ff8:	46bd      	mov	sp, r7
   16ffa:	b004      	add	sp, #16
   16ffc:	bd80      	pop	{r7, pc}
   16ffe:	46c0      	nop			; (mov r8, r8)
   17000:	000169f1 	.word	0x000169f1
   17004:	00016a15 	.word	0x00016a15
   17008:	00016975 	.word	0x00016975
   1700c:	00026a55 	.word	0x00026a55
   17010:	00029391 	.word	0x00029391
   17014:	00016989 	.word	0x00016989

00017018 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   17018:	b580      	push	{r7, lr}
   1701a:	b084      	sub	sp, #16
   1701c:	af00      	add	r7, sp, #0
   1701e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17020:	687b      	ldr	r3, [r7, #4]
   17022:	681b      	ldr	r3, [r3, #0]
   17024:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   17026:	68fb      	ldr	r3, [r7, #12]
   17028:	7e1b      	ldrb	r3, [r3, #24]
   1702a:	b2db      	uxtb	r3, r3
   1702c:	001a      	movs	r2, r3
   1702e:	2302      	movs	r3, #2
   17030:	4013      	ands	r3, r2
   17032:	d00b      	beq.n	1704c <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   17034:	68fb      	ldr	r3, [r7, #12]
   17036:	2202      	movs	r2, #2
   17038:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1703a:	68fb      	ldr	r3, [r7, #12]
   1703c:	8b5b      	ldrh	r3, [r3, #26]
   1703e:	b29b      	uxth	r3, r3
   17040:	001a      	movs	r2, r3
   17042:	2302      	movs	r3, #2
   17044:	4013      	ands	r3, r2
   17046:	d011      	beq.n	1706c <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   17048:	2341      	movs	r3, #65	; 0x41
   1704a:	e010      	b.n	1706e <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1704c:	68fb      	ldr	r3, [r7, #12]
   1704e:	8b5b      	ldrh	r3, [r3, #26]
   17050:	b29b      	uxth	r3, r3
   17052:	001a      	movs	r2, r3
   17054:	2304      	movs	r3, #4
   17056:	4013      	ands	r3, r2
   17058:	d008      	beq.n	1706c <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1705a:	68fb      	ldr	r3, [r7, #12]
   1705c:	685b      	ldr	r3, [r3, #4]
   1705e:	22c0      	movs	r2, #192	; 0xc0
   17060:	0292      	lsls	r2, r2, #10
   17062:	431a      	orrs	r2, r3
   17064:	68fb      	ldr	r3, [r7, #12]
   17066:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   17068:	2318      	movs	r3, #24
   1706a:	e000      	b.n	1706e <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   1706c:	2300      	movs	r3, #0
}
   1706e:	0018      	movs	r0, r3
   17070:	46bd      	mov	sp, r7
   17072:	b004      	add	sp, #16
   17074:	bd80      	pop	{r7, pc}

00017076 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   17076:	b580      	push	{r7, lr}
   17078:	b084      	sub	sp, #16
   1707a:	af00      	add	r7, sp, #0
   1707c:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1707e:	687b      	ldr	r3, [r7, #4]
   17080:	681b      	ldr	r3, [r3, #0]
   17082:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   17084:	230e      	movs	r3, #14
   17086:	18fb      	adds	r3, r7, r3
   17088:	2200      	movs	r2, #0
   1708a:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1708c:	e00f      	b.n	170ae <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   1708e:	230e      	movs	r3, #14
   17090:	18fb      	adds	r3, r7, r3
   17092:	220e      	movs	r2, #14
   17094:	18ba      	adds	r2, r7, r2
   17096:	8812      	ldrh	r2, [r2, #0]
   17098:	3201      	adds	r2, #1
   1709a:	801a      	strh	r2, [r3, #0]
   1709c:	687b      	ldr	r3, [r7, #4]
   1709e:	891b      	ldrh	r3, [r3, #8]
   170a0:	220e      	movs	r2, #14
   170a2:	18ba      	adds	r2, r7, r2
   170a4:	8812      	ldrh	r2, [r2, #0]
   170a6:	429a      	cmp	r2, r3
   170a8:	d301      	bcc.n	170ae <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   170aa:	2312      	movs	r3, #18
   170ac:	e00e      	b.n	170cc <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   170ae:	68bb      	ldr	r3, [r7, #8]
   170b0:	7e1b      	ldrb	r3, [r3, #24]
   170b2:	b2db      	uxtb	r3, r3
   170b4:	001a      	movs	r2, r3
   170b6:	2301      	movs	r3, #1
   170b8:	4013      	ands	r3, r2
   170ba:	d106      	bne.n	170ca <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   170bc:	68bb      	ldr	r3, [r7, #8]
   170be:	7e1b      	ldrb	r3, [r3, #24]
   170c0:	b2db      	uxtb	r3, r3
   170c2:	001a      	movs	r2, r3
   170c4:	2302      	movs	r3, #2
   170c6:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   170c8:	d0e1      	beq.n	1708e <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   170ca:	2300      	movs	r3, #0
}
   170cc:	0018      	movs	r0, r3
   170ce:	46bd      	mov	sp, r7
   170d0:	b004      	add	sp, #16
   170d2:	bd80      	pop	{r7, pc}

000170d4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   170d4:	b590      	push	{r4, r7, lr}
   170d6:	b085      	sub	sp, #20
   170d8:	af00      	add	r7, sp, #0
   170da:	6078      	str	r0, [r7, #4]
   170dc:	000a      	movs	r2, r1
   170de:	1cfb      	adds	r3, r7, #3
   170e0:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   170e2:	687b      	ldr	r3, [r7, #4]
   170e4:	681b      	ldr	r3, [r3, #0]
   170e6:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   170e8:	68fb      	ldr	r3, [r7, #12]
   170ea:	685b      	ldr	r3, [r3, #4]
   170ec:	2280      	movs	r2, #128	; 0x80
   170ee:	02d2      	lsls	r2, r2, #11
   170f0:	431a      	orrs	r2, r3
   170f2:	68fb      	ldr	r3, [r7, #12]
   170f4:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   170f6:	1cfb      	adds	r3, r7, #3
   170f8:	781a      	ldrb	r2, [r3, #0]
   170fa:	68fb      	ldr	r3, [r7, #12]
   170fc:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   170fe:	230b      	movs	r3, #11
   17100:	18fc      	adds	r4, r7, r3
   17102:	687b      	ldr	r3, [r7, #4]
   17104:	0018      	movs	r0, r3
   17106:	4b07      	ldr	r3, [pc, #28]	; (17124 <_i2c_master_send_hs_master_code+0x50>)
   17108:	4798      	blx	r3
   1710a:	0003      	movs	r3, r0
   1710c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   1710e:	68fb      	ldr	r3, [r7, #12]
   17110:	2201      	movs	r2, #1
   17112:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   17114:	230b      	movs	r3, #11
   17116:	18fb      	adds	r3, r7, r3
   17118:	781b      	ldrb	r3, [r3, #0]
}
   1711a:	0018      	movs	r0, r3
   1711c:	46bd      	mov	sp, r7
   1711e:	b005      	add	sp, #20
   17120:	bd90      	pop	{r4, r7, pc}
   17122:	46c0      	nop			; (mov r8, r8)
   17124:	00017077 	.word	0x00017077

00017128 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   17128:	b580      	push	{r7, lr}
   1712a:	af00      	add	r7, sp, #0
   1712c:	2000      	movs	r0, #0
   1712e:	4b02      	ldr	r3, [pc, #8]	; (17138 <TC3_Handler+0x10>)
   17130:	4798      	blx	r3
   17132:	46c0      	nop			; (mov r8, r8)
   17134:	46bd      	mov	sp, r7
   17136:	bd80      	pop	{r7, pc}
   17138:	00017165 	.word	0x00017165

0001713c <TC4_Handler>:
   1713c:	b580      	push	{r7, lr}
   1713e:	af00      	add	r7, sp, #0
   17140:	2001      	movs	r0, #1
   17142:	4b02      	ldr	r3, [pc, #8]	; (1714c <TC4_Handler+0x10>)
   17144:	4798      	blx	r3
   17146:	46c0      	nop			; (mov r8, r8)
   17148:	46bd      	mov	sp, r7
   1714a:	bd80      	pop	{r7, pc}
   1714c:	00017165 	.word	0x00017165

00017150 <TC5_Handler>:
   17150:	b580      	push	{r7, lr}
   17152:	af00      	add	r7, sp, #0
   17154:	2002      	movs	r0, #2
   17156:	4b02      	ldr	r3, [pc, #8]	; (17160 <TC5_Handler+0x10>)
   17158:	4798      	blx	r3
   1715a:	46c0      	nop			; (mov r8, r8)
   1715c:	46bd      	mov	sp, r7
   1715e:	bd80      	pop	{r7, pc}
   17160:	00017165 	.word	0x00017165

00017164 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   17164:	b580      	push	{r7, lr}
   17166:	b084      	sub	sp, #16
   17168:	af00      	add	r7, sp, #0
   1716a:	0002      	movs	r2, r0
   1716c:	1dfb      	adds	r3, r7, #7
   1716e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   17170:	1dfb      	adds	r3, r7, #7
   17172:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   17174:	4b28      	ldr	r3, [pc, #160]	; (17218 <_tc_interrupt_handler+0xb4>)
   17176:	0092      	lsls	r2, r2, #2
   17178:	58d3      	ldr	r3, [r2, r3]
   1717a:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1717c:	68fb      	ldr	r3, [r7, #12]
   1717e:	681b      	ldr	r3, [r3, #0]
   17180:	7b9b      	ldrb	r3, [r3, #14]
   17182:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   17184:	68fa      	ldr	r2, [r7, #12]
   17186:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17188:	4013      	ands	r3, r2
   1718a:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   1718c:	68fb      	ldr	r3, [r7, #12]
   1718e:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17190:	230b      	movs	r3, #11
   17192:	18fb      	adds	r3, r7, r3
   17194:	400a      	ands	r2, r1
   17196:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   17198:	230b      	movs	r3, #11
   1719a:	18fb      	adds	r3, r7, r3
   1719c:	781b      	ldrb	r3, [r3, #0]
   1719e:	2201      	movs	r2, #1
   171a0:	4013      	ands	r3, r2
   171a2:	d008      	beq.n	171b6 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   171a4:	68fb      	ldr	r3, [r7, #12]
   171a6:	689b      	ldr	r3, [r3, #8]
   171a8:	68fa      	ldr	r2, [r7, #12]
   171aa:	0010      	movs	r0, r2
   171ac:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   171ae:	68fb      	ldr	r3, [r7, #12]
   171b0:	681b      	ldr	r3, [r3, #0]
   171b2:	2201      	movs	r2, #1
   171b4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   171b6:	230b      	movs	r3, #11
   171b8:	18fb      	adds	r3, r7, r3
   171ba:	781b      	ldrb	r3, [r3, #0]
   171bc:	2202      	movs	r2, #2
   171be:	4013      	ands	r3, r2
   171c0:	d008      	beq.n	171d4 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   171c2:	68fb      	ldr	r3, [r7, #12]
   171c4:	68db      	ldr	r3, [r3, #12]
   171c6:	68fa      	ldr	r2, [r7, #12]
   171c8:	0010      	movs	r0, r2
   171ca:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   171cc:	68fb      	ldr	r3, [r7, #12]
   171ce:	681b      	ldr	r3, [r3, #0]
   171d0:	2202      	movs	r2, #2
   171d2:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   171d4:	230b      	movs	r3, #11
   171d6:	18fb      	adds	r3, r7, r3
   171d8:	781b      	ldrb	r3, [r3, #0]
   171da:	2210      	movs	r2, #16
   171dc:	4013      	ands	r3, r2
   171de:	d008      	beq.n	171f2 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   171e0:	68fb      	ldr	r3, [r7, #12]
   171e2:	691b      	ldr	r3, [r3, #16]
   171e4:	68fa      	ldr	r2, [r7, #12]
   171e6:	0010      	movs	r0, r2
   171e8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   171ea:	68fb      	ldr	r3, [r7, #12]
   171ec:	681b      	ldr	r3, [r3, #0]
   171ee:	2210      	movs	r2, #16
   171f0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   171f2:	230b      	movs	r3, #11
   171f4:	18fb      	adds	r3, r7, r3
   171f6:	781b      	ldrb	r3, [r3, #0]
   171f8:	2220      	movs	r2, #32
   171fa:	4013      	ands	r3, r2
   171fc:	d008      	beq.n	17210 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   171fe:	68fb      	ldr	r3, [r7, #12]
   17200:	695b      	ldr	r3, [r3, #20]
   17202:	68fa      	ldr	r2, [r7, #12]
   17204:	0010      	movs	r0, r2
   17206:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   17208:	68fb      	ldr	r3, [r7, #12]
   1720a:	681b      	ldr	r3, [r3, #0]
   1720c:	2220      	movs	r2, #32
   1720e:	739a      	strb	r2, [r3, #14]
	}
}
   17210:	46c0      	nop			; (mov r8, r8)
   17212:	46bd      	mov	sp, r7
   17214:	b004      	add	sp, #16
   17216:	bd80      	pop	{r7, pc}
   17218:	200044fc 	.word	0x200044fc

0001721c <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   1721c:	b580      	push	{r7, lr}
   1721e:	b084      	sub	sp, #16
   17220:	af00      	add	r7, sp, #0
   17222:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   17224:	2300      	movs	r3, #0
   17226:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   17228:	687b      	ldr	r3, [r7, #4]
   1722a:	2b00      	cmp	r3, #0
   1722c:	d101      	bne.n	17232 <FreeRTOS_CLIRegisterCommand+0x16>
   1722e:	b672      	cpsid	i
   17230:	e7fe      	b.n	17230 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   17232:	2008      	movs	r0, #8
   17234:	4b11      	ldr	r3, [pc, #68]	; (1727c <FreeRTOS_CLIRegisterCommand+0x60>)
   17236:	4798      	blx	r3
   17238:	0003      	movs	r3, r0
   1723a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   1723c:	68bb      	ldr	r3, [r7, #8]
   1723e:	2b00      	cmp	r3, #0
   17240:	d101      	bne.n	17246 <FreeRTOS_CLIRegisterCommand+0x2a>
   17242:	b672      	cpsid	i
   17244:	e7fe      	b.n	17244 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   17246:	68bb      	ldr	r3, [r7, #8]
   17248:	2b00      	cmp	r3, #0
   1724a:	d012      	beq.n	17272 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   1724c:	4b0c      	ldr	r3, [pc, #48]	; (17280 <FreeRTOS_CLIRegisterCommand+0x64>)
   1724e:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   17250:	68bb      	ldr	r3, [r7, #8]
   17252:	687a      	ldr	r2, [r7, #4]
   17254:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   17256:	68bb      	ldr	r3, [r7, #8]
   17258:	2200      	movs	r2, #0
   1725a:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   1725c:	4b09      	ldr	r3, [pc, #36]	; (17284 <FreeRTOS_CLIRegisterCommand+0x68>)
   1725e:	681b      	ldr	r3, [r3, #0]
   17260:	68ba      	ldr	r2, [r7, #8]
   17262:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   17264:	4b07      	ldr	r3, [pc, #28]	; (17284 <FreeRTOS_CLIRegisterCommand+0x68>)
   17266:	68ba      	ldr	r2, [r7, #8]
   17268:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   1726a:	4b07      	ldr	r3, [pc, #28]	; (17288 <FreeRTOS_CLIRegisterCommand+0x6c>)
   1726c:	4798      	blx	r3

		xReturn = pdPASS;
   1726e:	2301      	movs	r3, #1
   17270:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   17272:	68fb      	ldr	r3, [r7, #12]
}
   17274:	0018      	movs	r0, r3
   17276:	46bd      	mov	sp, r7
   17278:	b004      	add	sp, #16
   1727a:	bd80      	pop	{r7, pc}
   1727c:	00019631 	.word	0x00019631
   17280:	000194f9 	.word	0x000194f9
   17284:	200000a8 	.word	0x200000a8
   17288:	0001951d 	.word	0x0001951d

0001728c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   1728c:	b580      	push	{r7, lr}
   1728e:	b088      	sub	sp, #32
   17290:	af00      	add	r7, sp, #0
   17292:	60f8      	str	r0, [r7, #12]
   17294:	60b9      	str	r1, [r7, #8]
   17296:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   17298:	2301      	movs	r3, #1
   1729a:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   1729c:	4b3d      	ldr	r3, [pc, #244]	; (17394 <FreeRTOS_CLIProcessCommand+0x108>)
   1729e:	681b      	ldr	r3, [r3, #0]
   172a0:	2b00      	cmp	r3, #0
   172a2:	d144      	bne.n	1732e <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   172a4:	4b3b      	ldr	r3, [pc, #236]	; (17394 <FreeRTOS_CLIProcessCommand+0x108>)
   172a6:	4a3c      	ldr	r2, [pc, #240]	; (17398 <FreeRTOS_CLIProcessCommand+0x10c>)
   172a8:	601a      	str	r2, [r3, #0]
   172aa:	e03a      	b.n	17322 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   172ac:	4b39      	ldr	r3, [pc, #228]	; (17394 <FreeRTOS_CLIProcessCommand+0x108>)
   172ae:	681b      	ldr	r3, [r3, #0]
   172b0:	681b      	ldr	r3, [r3, #0]
   172b2:	681b      	ldr	r3, [r3, #0]
   172b4:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   172b6:	69bb      	ldr	r3, [r7, #24]
   172b8:	0018      	movs	r0, r3
   172ba:	4b38      	ldr	r3, [pc, #224]	; (1739c <FreeRTOS_CLIProcessCommand+0x110>)
   172bc:	4798      	blx	r3
   172be:	0003      	movs	r3, r0
   172c0:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   172c2:	68fa      	ldr	r2, [r7, #12]
   172c4:	697b      	ldr	r3, [r7, #20]
   172c6:	18d3      	adds	r3, r2, r3
   172c8:	781b      	ldrb	r3, [r3, #0]
   172ca:	2b20      	cmp	r3, #32
   172cc:	d005      	beq.n	172da <FreeRTOS_CLIProcessCommand+0x4e>
   172ce:	68fa      	ldr	r2, [r7, #12]
   172d0:	697b      	ldr	r3, [r7, #20]
   172d2:	18d3      	adds	r3, r2, r3
   172d4:	781b      	ldrb	r3, [r3, #0]
   172d6:	2b00      	cmp	r3, #0
   172d8:	d11e      	bne.n	17318 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   172da:	697a      	ldr	r2, [r7, #20]
   172dc:	69b9      	ldr	r1, [r7, #24]
   172de:	68fb      	ldr	r3, [r7, #12]
   172e0:	0018      	movs	r0, r3
   172e2:	4b2f      	ldr	r3, [pc, #188]	; (173a0 <FreeRTOS_CLIProcessCommand+0x114>)
   172e4:	4798      	blx	r3
   172e6:	1e03      	subs	r3, r0, #0
   172e8:	d116      	bne.n	17318 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   172ea:	4b2a      	ldr	r3, [pc, #168]	; (17394 <FreeRTOS_CLIProcessCommand+0x108>)
   172ec:	681b      	ldr	r3, [r3, #0]
   172ee:	681b      	ldr	r3, [r3, #0]
   172f0:	7b1b      	ldrb	r3, [r3, #12]
   172f2:	b25b      	sxtb	r3, r3
   172f4:	2b00      	cmp	r3, #0
   172f6:	db19      	blt.n	1732c <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   172f8:	68fb      	ldr	r3, [r7, #12]
   172fa:	0018      	movs	r0, r3
   172fc:	4b29      	ldr	r3, [pc, #164]	; (173a4 <FreeRTOS_CLIProcessCommand+0x118>)
   172fe:	4798      	blx	r3
   17300:	0003      	movs	r3, r0
   17302:	001a      	movs	r2, r3
   17304:	4b23      	ldr	r3, [pc, #140]	; (17394 <FreeRTOS_CLIProcessCommand+0x108>)
   17306:	681b      	ldr	r3, [r3, #0]
   17308:	681b      	ldr	r3, [r3, #0]
   1730a:	7b1b      	ldrb	r3, [r3, #12]
   1730c:	b25b      	sxtb	r3, r3
   1730e:	429a      	cmp	r2, r3
   17310:	d00c      	beq.n	1732c <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   17312:	2300      	movs	r3, #0
   17314:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   17316:	e009      	b.n	1732c <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   17318:	4b1e      	ldr	r3, [pc, #120]	; (17394 <FreeRTOS_CLIProcessCommand+0x108>)
   1731a:	681b      	ldr	r3, [r3, #0]
   1731c:	685a      	ldr	r2, [r3, #4]
   1731e:	4b1d      	ldr	r3, [pc, #116]	; (17394 <FreeRTOS_CLIProcessCommand+0x108>)
   17320:	601a      	str	r2, [r3, #0]
   17322:	4b1c      	ldr	r3, [pc, #112]	; (17394 <FreeRTOS_CLIProcessCommand+0x108>)
   17324:	681b      	ldr	r3, [r3, #0]
   17326:	2b00      	cmp	r3, #0
   17328:	d1c0      	bne.n	172ac <FreeRTOS_CLIProcessCommand+0x20>
   1732a:	e000      	b.n	1732e <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   1732c:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   1732e:	4b19      	ldr	r3, [pc, #100]	; (17394 <FreeRTOS_CLIProcessCommand+0x108>)
   17330:	681b      	ldr	r3, [r3, #0]
   17332:	2b00      	cmp	r3, #0
   17334:	d00c      	beq.n	17350 <FreeRTOS_CLIProcessCommand+0xc4>
   17336:	69fb      	ldr	r3, [r7, #28]
   17338:	2b00      	cmp	r3, #0
   1733a:	d109      	bne.n	17350 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1733c:	687a      	ldr	r2, [r7, #4]
   1733e:	491a      	ldr	r1, [pc, #104]	; (173a8 <FreeRTOS_CLIProcessCommand+0x11c>)
   17340:	68bb      	ldr	r3, [r7, #8]
   17342:	0018      	movs	r0, r3
   17344:	4b19      	ldr	r3, [pc, #100]	; (173ac <FreeRTOS_CLIProcessCommand+0x120>)
   17346:	4798      	blx	r3
		pxCommand = NULL;
   17348:	4b12      	ldr	r3, [pc, #72]	; (17394 <FreeRTOS_CLIProcessCommand+0x108>)
   1734a:	2200      	movs	r2, #0
   1734c:	601a      	str	r2, [r3, #0]
   1734e:	e01c      	b.n	1738a <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   17350:	4b10      	ldr	r3, [pc, #64]	; (17394 <FreeRTOS_CLIProcessCommand+0x108>)
   17352:	681b      	ldr	r3, [r3, #0]
   17354:	2b00      	cmp	r3, #0
   17356:	d010      	beq.n	1737a <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   17358:	4b0e      	ldr	r3, [pc, #56]	; (17394 <FreeRTOS_CLIProcessCommand+0x108>)
   1735a:	681b      	ldr	r3, [r3, #0]
   1735c:	681b      	ldr	r3, [r3, #0]
   1735e:	689b      	ldr	r3, [r3, #8]
   17360:	68fa      	ldr	r2, [r7, #12]
   17362:	6879      	ldr	r1, [r7, #4]
   17364:	68b8      	ldr	r0, [r7, #8]
   17366:	4798      	blx	r3
   17368:	0003      	movs	r3, r0
   1736a:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   1736c:	69fb      	ldr	r3, [r7, #28]
   1736e:	2b00      	cmp	r3, #0
   17370:	d10b      	bne.n	1738a <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   17372:	4b08      	ldr	r3, [pc, #32]	; (17394 <FreeRTOS_CLIProcessCommand+0x108>)
   17374:	2200      	movs	r2, #0
   17376:	601a      	str	r2, [r3, #0]
   17378:	e007      	b.n	1738a <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1737a:	687a      	ldr	r2, [r7, #4]
   1737c:	490c      	ldr	r1, [pc, #48]	; (173b0 <FreeRTOS_CLIProcessCommand+0x124>)
   1737e:	68bb      	ldr	r3, [r7, #8]
   17380:	0018      	movs	r0, r3
   17382:	4b0a      	ldr	r3, [pc, #40]	; (173ac <FreeRTOS_CLIProcessCommand+0x120>)
   17384:	4798      	blx	r3
		xReturn = pdFALSE;
   17386:	2300      	movs	r3, #0
   17388:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   1738a:	69fb      	ldr	r3, [r7, #28]
}
   1738c:	0018      	movs	r0, r3
   1738e:	46bd      	mov	sp, r7
   17390:	b008      	add	sp, #32
   17392:	bd80      	pop	{r7, pc}
   17394:	20000c14 	.word	0x20000c14
   17398:	200000a0 	.word	0x200000a0
   1739c:	00033db7 	.word	0x00033db7
   173a0:	00033dc5 	.word	0x00033dc5
   173a4:	00017415 	.word	0x00017415
   173a8:	00035bc8 	.word	0x00035bc8
   173ac:	00033de7 	.word	0x00033de7
   173b0:	00035c20 	.word	0x00035c20

000173b4 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   173b4:	b580      	push	{r7, lr}
   173b6:	b086      	sub	sp, #24
   173b8:	af00      	add	r7, sp, #0
   173ba:	60f8      	str	r0, [r7, #12]
   173bc:	60b9      	str	r1, [r7, #8]
   173be:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   173c0:	4b11      	ldr	r3, [pc, #68]	; (17408 <prvHelpCommand+0x54>)
   173c2:	681b      	ldr	r3, [r3, #0]
   173c4:	2b00      	cmp	r3, #0
   173c6:	d102      	bne.n	173ce <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   173c8:	4b0f      	ldr	r3, [pc, #60]	; (17408 <prvHelpCommand+0x54>)
   173ca:	4a10      	ldr	r2, [pc, #64]	; (1740c <prvHelpCommand+0x58>)
   173cc:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   173ce:	4b0e      	ldr	r3, [pc, #56]	; (17408 <prvHelpCommand+0x54>)
   173d0:	681b      	ldr	r3, [r3, #0]
   173d2:	681b      	ldr	r3, [r3, #0]
   173d4:	6859      	ldr	r1, [r3, #4]
   173d6:	68ba      	ldr	r2, [r7, #8]
   173d8:	68fb      	ldr	r3, [r7, #12]
   173da:	0018      	movs	r0, r3
   173dc:	4b0c      	ldr	r3, [pc, #48]	; (17410 <prvHelpCommand+0x5c>)
   173de:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   173e0:	4b09      	ldr	r3, [pc, #36]	; (17408 <prvHelpCommand+0x54>)
   173e2:	681b      	ldr	r3, [r3, #0]
   173e4:	685a      	ldr	r2, [r3, #4]
   173e6:	4b08      	ldr	r3, [pc, #32]	; (17408 <prvHelpCommand+0x54>)
   173e8:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   173ea:	4b07      	ldr	r3, [pc, #28]	; (17408 <prvHelpCommand+0x54>)
   173ec:	681b      	ldr	r3, [r3, #0]
   173ee:	2b00      	cmp	r3, #0
   173f0:	d102      	bne.n	173f8 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   173f2:	2300      	movs	r3, #0
   173f4:	617b      	str	r3, [r7, #20]
   173f6:	e001      	b.n	173fc <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   173f8:	2301      	movs	r3, #1
   173fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   173fc:	697b      	ldr	r3, [r7, #20]
}
   173fe:	0018      	movs	r0, r3
   17400:	46bd      	mov	sp, r7
   17402:	b006      	add	sp, #24
   17404:	bd80      	pop	{r7, pc}
   17406:	46c0      	nop			; (mov r8, r8)
   17408:	20000c18 	.word	0x20000c18
   1740c:	200000a0 	.word	0x200000a0
   17410:	00033de7 	.word	0x00033de7

00017414 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   17414:	b580      	push	{r7, lr}
   17416:	b084      	sub	sp, #16
   17418:	af00      	add	r7, sp, #0
   1741a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   1741c:	230f      	movs	r3, #15
   1741e:	18fb      	adds	r3, r7, r3
   17420:	2200      	movs	r2, #0
   17422:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   17424:	2300      	movs	r3, #0
   17426:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   17428:	e018      	b.n	1745c <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   1742a:	687b      	ldr	r3, [r7, #4]
   1742c:	781b      	ldrb	r3, [r3, #0]
   1742e:	2b20      	cmp	r3, #32
   17430:	d10f      	bne.n	17452 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   17432:	68bb      	ldr	r3, [r7, #8]
   17434:	2b01      	cmp	r3, #1
   17436:	d00e      	beq.n	17456 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   17438:	230f      	movs	r3, #15
   1743a:	18fb      	adds	r3, r7, r3
   1743c:	781b      	ldrb	r3, [r3, #0]
   1743e:	b25b      	sxtb	r3, r3
   17440:	b2db      	uxtb	r3, r3
   17442:	3301      	adds	r3, #1
   17444:	b2da      	uxtb	r2, r3
   17446:	230f      	movs	r3, #15
   17448:	18fb      	adds	r3, r7, r3
   1744a:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   1744c:	2301      	movs	r3, #1
   1744e:	60bb      	str	r3, [r7, #8]
   17450:	e001      	b.n	17456 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   17452:	2300      	movs	r3, #0
   17454:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   17456:	687b      	ldr	r3, [r7, #4]
   17458:	3301      	adds	r3, #1
   1745a:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   1745c:	687b      	ldr	r3, [r7, #4]
   1745e:	781b      	ldrb	r3, [r3, #0]
   17460:	2b00      	cmp	r3, #0
   17462:	d1e2      	bne.n	1742a <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   17464:	68bb      	ldr	r3, [r7, #8]
   17466:	2b01      	cmp	r3, #1
   17468:	d109      	bne.n	1747e <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   1746a:	230f      	movs	r3, #15
   1746c:	18fb      	adds	r3, r7, r3
   1746e:	781b      	ldrb	r3, [r3, #0]
   17470:	b25b      	sxtb	r3, r3
   17472:	b2db      	uxtb	r3, r3
   17474:	3b01      	subs	r3, #1
   17476:	b2da      	uxtb	r2, r3
   17478:	230f      	movs	r3, #15
   1747a:	18fb      	adds	r3, r7, r3
   1747c:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   1747e:	230f      	movs	r3, #15
   17480:	18fb      	adds	r3, r7, r3
   17482:	781b      	ldrb	r3, [r3, #0]
   17484:	b25b      	sxtb	r3, r3
}
   17486:	0018      	movs	r0, r3
   17488:	46bd      	mov	sp, r7
   1748a:	b004      	add	sp, #16
   1748c:	bd80      	pop	{r7, pc}
	...

00017490 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   17490:	b580      	push	{r7, lr}
   17492:	b082      	sub	sp, #8
   17494:	af00      	add	r7, sp, #0
   17496:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   17498:	687b      	ldr	r3, [r7, #4]
   1749a:	0018      	movs	r0, r3
   1749c:	4b03      	ldr	r3, [pc, #12]	; (174ac <prvTraceGetQueueNumber+0x1c>)
   1749e:	4798      	blx	r3
   174a0:	0003      	movs	r3, r0
}
   174a2:	0018      	movs	r0, r3
   174a4:	46bd      	mov	sp, r7
   174a6:	b002      	add	sp, #8
   174a8:	bd80      	pop	{r7, pc}
   174aa:	46c0      	nop			; (mov r8, r8)
   174ac:	0001ac59 	.word	0x0001ac59

000174b0 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   174b0:	b580      	push	{r7, lr}
   174b2:	b082      	sub	sp, #8
   174b4:	af00      	add	r7, sp, #0
   174b6:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   174b8:	687b      	ldr	r3, [r7, #4]
   174ba:	0018      	movs	r0, r3
   174bc:	4b03      	ldr	r3, [pc, #12]	; (174cc <prvTraceGetQueueType+0x1c>)
   174be:	4798      	blx	r3
   174c0:	0003      	movs	r3, r0
}
   174c2:	0018      	movs	r0, r3
   174c4:	46bd      	mov	sp, r7
   174c6:	b002      	add	sp, #8
   174c8:	bd80      	pop	{r7, pc}
   174ca:	46c0      	nop			; (mov r8, r8)
   174cc:	0001ac85 	.word	0x0001ac85

000174d0 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   174d0:	b580      	push	{r7, lr}
   174d2:	b082      	sub	sp, #8
   174d4:	af00      	add	r7, sp, #0
   174d6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   174d8:	687b      	ldr	r3, [r7, #4]
   174da:	0018      	movs	r0, r3
   174dc:	4b03      	ldr	r3, [pc, #12]	; (174ec <prvTraceGetTaskNumberLow16+0x1c>)
   174de:	4798      	blx	r3
   174e0:	0003      	movs	r3, r0
   174e2:	b29b      	uxth	r3, r3
}
   174e4:	0018      	movs	r0, r3
   174e6:	46bd      	mov	sp, r7
   174e8:	b002      	add	sp, #8
   174ea:	bd80      	pop	{r7, pc}
   174ec:	0001bfb5 	.word	0x0001bfb5

000174f0 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   174f0:	b580      	push	{r7, lr}
   174f2:	b082      	sub	sp, #8
   174f4:	af00      	add	r7, sp, #0
   174f6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   174f8:	687b      	ldr	r3, [r7, #4]
   174fa:	0018      	movs	r0, r3
   174fc:	4b04      	ldr	r3, [pc, #16]	; (17510 <prvTraceGetTaskNumberHigh16+0x20>)
   174fe:	4798      	blx	r3
   17500:	0003      	movs	r3, r0
   17502:	0c1b      	lsrs	r3, r3, #16
   17504:	b29b      	uxth	r3, r3
}
   17506:	0018      	movs	r0, r3
   17508:	46bd      	mov	sp, r7
   1750a:	b002      	add	sp, #8
   1750c:	bd80      	pop	{r7, pc}
   1750e:	46c0      	nop			; (mov r8, r8)
   17510:	0001bfb5 	.word	0x0001bfb5

00017514 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   17514:	b580      	push	{r7, lr}
   17516:	b082      	sub	sp, #8
   17518:	af00      	add	r7, sp, #0
   1751a:	6078      	str	r0, [r7, #4]
   1751c:	000a      	movs	r2, r1
   1751e:	1cbb      	adds	r3, r7, #2
   17520:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   17522:	687b      	ldr	r3, [r7, #4]
   17524:	0018      	movs	r0, r3
   17526:	4b08      	ldr	r3, [pc, #32]	; (17548 <prvTraceSetTaskNumberLow16+0x34>)
   17528:	4798      	blx	r3
   1752a:	0003      	movs	r3, r0
   1752c:	0c1b      	lsrs	r3, r3, #16
   1752e:	041a      	lsls	r2, r3, #16
   17530:	1cbb      	adds	r3, r7, #2
   17532:	881b      	ldrh	r3, [r3, #0]
   17534:	431a      	orrs	r2, r3
   17536:	687b      	ldr	r3, [r7, #4]
   17538:	0011      	movs	r1, r2
   1753a:	0018      	movs	r0, r3
   1753c:	4b03      	ldr	r3, [pc, #12]	; (1754c <prvTraceSetTaskNumberLow16+0x38>)
   1753e:	4798      	blx	r3
}
   17540:	46c0      	nop			; (mov r8, r8)
   17542:	46bd      	mov	sp, r7
   17544:	b002      	add	sp, #8
   17546:	bd80      	pop	{r7, pc}
   17548:	0001bfb5 	.word	0x0001bfb5
   1754c:	0001bfdd 	.word	0x0001bfdd

00017550 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   17550:	b580      	push	{r7, lr}
   17552:	b082      	sub	sp, #8
   17554:	af00      	add	r7, sp, #0
   17556:	6078      	str	r0, [r7, #4]
   17558:	000a      	movs	r2, r1
   1755a:	1cbb      	adds	r3, r7, #2
   1755c:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   1755e:	687b      	ldr	r3, [r7, #4]
   17560:	0018      	movs	r0, r3
   17562:	4b09      	ldr	r3, [pc, #36]	; (17588 <prvTraceSetTaskNumberHigh16+0x38>)
   17564:	4798      	blx	r3
   17566:	0003      	movs	r3, r0
   17568:	041b      	lsls	r3, r3, #16
   1756a:	0c1a      	lsrs	r2, r3, #16
   1756c:	1cbb      	adds	r3, r7, #2
   1756e:	881b      	ldrh	r3, [r3, #0]
   17570:	041b      	lsls	r3, r3, #16
   17572:	431a      	orrs	r2, r3
   17574:	687b      	ldr	r3, [r7, #4]
   17576:	0011      	movs	r1, r2
   17578:	0018      	movs	r0, r3
   1757a:	4b04      	ldr	r3, [pc, #16]	; (1758c <prvTraceSetTaskNumberHigh16+0x3c>)
   1757c:	4798      	blx	r3
}
   1757e:	46c0      	nop			; (mov r8, r8)
   17580:	46bd      	mov	sp, r7
   17582:	b002      	add	sp, #8
   17584:	bd80      	pop	{r7, pc}
   17586:	46c0      	nop			; (mov r8, r8)
   17588:	0001bfb5 	.word	0x0001bfb5
   1758c:	0001bfdd 	.word	0x0001bfdd

00017590 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   17590:	b580      	push	{r7, lr}
   17592:	b082      	sub	sp, #8
   17594:	af00      	add	r7, sp, #0
   17596:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   17598:	687b      	ldr	r3, [r7, #4]
   1759a:	0018      	movs	r0, r3
   1759c:	4b03      	ldr	r3, [pc, #12]	; (175ac <prvTraceGetQueueNumberLow16+0x1c>)
   1759e:	4798      	blx	r3
   175a0:	0003      	movs	r3, r0
   175a2:	b29b      	uxth	r3, r3
}
   175a4:	0018      	movs	r0, r3
   175a6:	46bd      	mov	sp, r7
   175a8:	b002      	add	sp, #8
   175aa:	bd80      	pop	{r7, pc}
   175ac:	00017491 	.word	0x00017491

000175b0 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   175b0:	b580      	push	{r7, lr}
   175b2:	b082      	sub	sp, #8
   175b4:	af00      	add	r7, sp, #0
   175b6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   175b8:	687b      	ldr	r3, [r7, #4]
   175ba:	0018      	movs	r0, r3
   175bc:	4b04      	ldr	r3, [pc, #16]	; (175d0 <prvTraceGetQueueNumberHigh16+0x20>)
   175be:	4798      	blx	r3
   175c0:	0003      	movs	r3, r0
   175c2:	0c1b      	lsrs	r3, r3, #16
   175c4:	b29b      	uxth	r3, r3
}
   175c6:	0018      	movs	r0, r3
   175c8:	46bd      	mov	sp, r7
   175ca:	b002      	add	sp, #8
   175cc:	bd80      	pop	{r7, pc}
   175ce:	46c0      	nop			; (mov r8, r8)
   175d0:	00017491 	.word	0x00017491

000175d4 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   175d4:	b580      	push	{r7, lr}
   175d6:	b082      	sub	sp, #8
   175d8:	af00      	add	r7, sp, #0
   175da:	6078      	str	r0, [r7, #4]
   175dc:	000a      	movs	r2, r1
   175de:	1cbb      	adds	r3, r7, #2
   175e0:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   175e2:	687b      	ldr	r3, [r7, #4]
   175e4:	0018      	movs	r0, r3
   175e6:	4b08      	ldr	r3, [pc, #32]	; (17608 <prvTraceSetQueueNumberLow16+0x34>)
   175e8:	4798      	blx	r3
   175ea:	0003      	movs	r3, r0
   175ec:	0c1b      	lsrs	r3, r3, #16
   175ee:	041a      	lsls	r2, r3, #16
   175f0:	1cbb      	adds	r3, r7, #2
   175f2:	881b      	ldrh	r3, [r3, #0]
   175f4:	431a      	orrs	r2, r3
   175f6:	687b      	ldr	r3, [r7, #4]
   175f8:	0011      	movs	r1, r2
   175fa:	0018      	movs	r0, r3
   175fc:	4b03      	ldr	r3, [pc, #12]	; (1760c <prvTraceSetQueueNumberLow16+0x38>)
   175fe:	4798      	blx	r3
}
   17600:	46c0      	nop			; (mov r8, r8)
   17602:	46bd      	mov	sp, r7
   17604:	b002      	add	sp, #8
   17606:	bd80      	pop	{r7, pc}
   17608:	00017491 	.word	0x00017491
   1760c:	0001ac6d 	.word	0x0001ac6d

00017610 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   17610:	b580      	push	{r7, lr}
   17612:	b082      	sub	sp, #8
   17614:	af00      	add	r7, sp, #0
   17616:	6078      	str	r0, [r7, #4]
   17618:	000a      	movs	r2, r1
   1761a:	1cbb      	adds	r3, r7, #2
   1761c:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   1761e:	687b      	ldr	r3, [r7, #4]
   17620:	0018      	movs	r0, r3
   17622:	4b09      	ldr	r3, [pc, #36]	; (17648 <prvTraceSetQueueNumberHigh16+0x38>)
   17624:	4798      	blx	r3
   17626:	0003      	movs	r3, r0
   17628:	041b      	lsls	r3, r3, #16
   1762a:	0c1a      	lsrs	r2, r3, #16
   1762c:	1cbb      	adds	r3, r7, #2
   1762e:	881b      	ldrh	r3, [r3, #0]
   17630:	041b      	lsls	r3, r3, #16
   17632:	431a      	orrs	r2, r3
   17634:	687b      	ldr	r3, [r7, #4]
   17636:	0011      	movs	r1, r2
   17638:	0018      	movs	r0, r3
   1763a:	4b04      	ldr	r3, [pc, #16]	; (1764c <prvTraceSetQueueNumberHigh16+0x3c>)
   1763c:	4798      	blx	r3
}
   1763e:	46c0      	nop			; (mov r8, r8)
   17640:	46bd      	mov	sp, r7
   17642:	b002      	add	sp, #8
   17644:	bd80      	pop	{r7, pc}
   17646:	46c0      	nop			; (mov r8, r8)
   17648:	00017491 	.word	0x00017491
   1764c:	0001ac6d 	.word	0x0001ac6d

00017650 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   17650:	b580      	push	{r7, lr}
   17652:	b084      	sub	sp, #16
   17654:	af00      	add	r7, sp, #0
   17656:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   17658:	2300      	movs	r3, #0
   1765a:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1765c:	2300      	movs	r3, #0
   1765e:	60bb      	str	r3, [r7, #8]
   17660:	e018      	b.n	17694 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   17662:	4b14      	ldr	r3, [pc, #80]	; (176b4 <prvAddTaskToStackMonitor+0x64>)
   17664:	68ba      	ldr	r2, [r7, #8]
   17666:	00d2      	lsls	r2, r2, #3
   17668:	58d3      	ldr	r3, [r2, r3]
   1766a:	2b00      	cmp	r3, #0
   1766c:	d10f      	bne.n	1768e <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   1766e:	4b11      	ldr	r3, [pc, #68]	; (176b4 <prvAddTaskToStackMonitor+0x64>)
   17670:	68ba      	ldr	r2, [r7, #8]
   17672:	00d2      	lsls	r2, r2, #3
   17674:	6879      	ldr	r1, [r7, #4]
   17676:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   17678:	4a0e      	ldr	r2, [pc, #56]	; (176b4 <prvAddTaskToStackMonitor+0x64>)
   1767a:	68bb      	ldr	r3, [r7, #8]
   1767c:	00db      	lsls	r3, r3, #3
   1767e:	18d3      	adds	r3, r2, r3
   17680:	3304      	adds	r3, #4
   17682:	2201      	movs	r2, #1
   17684:	4252      	negs	r2, r2
   17686:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   17688:	2301      	movs	r3, #1
   1768a:	60fb      	str	r3, [r7, #12]
			break;
   1768c:	e005      	b.n	1769a <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1768e:	68bb      	ldr	r3, [r7, #8]
   17690:	3301      	adds	r3, #1
   17692:	60bb      	str	r3, [r7, #8]
   17694:	68bb      	ldr	r3, [r7, #8]
   17696:	2b09      	cmp	r3, #9
   17698:	dde3      	ble.n	17662 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   1769a:	68fb      	ldr	r3, [r7, #12]
   1769c:	2b00      	cmp	r3, #0
   1769e:	d104      	bne.n	176aa <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   176a0:	4b05      	ldr	r3, [pc, #20]	; (176b8 <prvAddTaskToStackMonitor+0x68>)
   176a2:	681b      	ldr	r3, [r3, #0]
   176a4:	1c5a      	adds	r2, r3, #1
   176a6:	4b04      	ldr	r3, [pc, #16]	; (176b8 <prvAddTaskToStackMonitor+0x68>)
   176a8:	601a      	str	r2, [r3, #0]
	}
}
   176aa:	46c0      	nop			; (mov r8, r8)
   176ac:	46bd      	mov	sp, r7
   176ae:	b004      	add	sp, #16
   176b0:	bd80      	pop	{r7, pc}
   176b2:	46c0      	nop			; (mov r8, r8)
   176b4:	20000c20 	.word	0x20000c20
   176b8:	20000c70 	.word	0x20000c70

000176bc <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   176bc:	b590      	push	{r4, r7, lr}
   176be:	b085      	sub	sp, #20
   176c0:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   176c2:	2300      	movs	r3, #0
   176c4:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   176c6:	4b2b      	ldr	r3, [pc, #172]	; (17774 <prvReportStackUsage+0xb8>)
   176c8:	681b      	ldr	r3, [r3, #0]
   176ca:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   176cc:	4b29      	ldr	r3, [pc, #164]	; (17774 <prvReportStackUsage+0xb8>)
   176ce:	681a      	ldr	r2, [r3, #0]
   176d0:	4b29      	ldr	r3, [pc, #164]	; (17778 <prvReportStackUsage+0xbc>)
   176d2:	00d2      	lsls	r2, r2, #3
   176d4:	58d3      	ldr	r3, [r2, r3]
   176d6:	2b00      	cmp	r3, #0
   176d8:	d035      	beq.n	17746 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   176da:	4b26      	ldr	r3, [pc, #152]	; (17774 <prvReportStackUsage+0xb8>)
   176dc:	681a      	ldr	r2, [r3, #0]
   176de:	4b26      	ldr	r3, [pc, #152]	; (17778 <prvReportStackUsage+0xbc>)
   176e0:	00d2      	lsls	r2, r2, #3
   176e2:	58d3      	ldr	r3, [r2, r3]
   176e4:	0018      	movs	r0, r3
   176e6:	4b25      	ldr	r3, [pc, #148]	; (1777c <prvReportStackUsage+0xc0>)
   176e8:	4798      	blx	r3
   176ea:	0003      	movs	r3, r0
   176ec:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   176ee:	4b21      	ldr	r3, [pc, #132]	; (17774 <prvReportStackUsage+0xb8>)
   176f0:	681b      	ldr	r3, [r3, #0]
   176f2:	4a21      	ldr	r2, [pc, #132]	; (17778 <prvReportStackUsage+0xbc>)
   176f4:	00db      	lsls	r3, r3, #3
   176f6:	18d3      	adds	r3, r2, r3
   176f8:	3304      	adds	r3, #4
   176fa:	681a      	ldr	r2, [r3, #0]
   176fc:	687b      	ldr	r3, [r7, #4]
   176fe:	429a      	cmp	r2, r3
   17700:	d907      	bls.n	17712 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   17702:	4b1c      	ldr	r3, [pc, #112]	; (17774 <prvReportStackUsage+0xb8>)
   17704:	681b      	ldr	r3, [r3, #0]
   17706:	4a1c      	ldr	r2, [pc, #112]	; (17778 <prvReportStackUsage+0xbc>)
   17708:	00db      	lsls	r3, r3, #3
   1770a:	18d3      	adds	r3, r2, r3
   1770c:	3304      	adds	r3, #4
   1770e:	687a      	ldr	r2, [r7, #4]
   17710:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   17712:	4b18      	ldr	r3, [pc, #96]	; (17774 <prvReportStackUsage+0xb8>)
   17714:	681a      	ldr	r2, [r3, #0]
   17716:	4b18      	ldr	r3, [pc, #96]	; (17778 <prvReportStackUsage+0xbc>)
   17718:	00d2      	lsls	r2, r2, #3
   1771a:	58d3      	ldr	r3, [r2, r3]
   1771c:	0018      	movs	r0, r3
   1771e:	4b18      	ldr	r3, [pc, #96]	; (17780 <prvReportStackUsage+0xc4>)
   17720:	4798      	blx	r3
   17722:	0003      	movs	r3, r0
   17724:	b2db      	uxtb	r3, r3
   17726:	0019      	movs	r1, r3
   17728:	4b12      	ldr	r3, [pc, #72]	; (17774 <prvReportStackUsage+0xb8>)
   1772a:	681b      	ldr	r3, [r3, #0]
   1772c:	4a12      	ldr	r2, [pc, #72]	; (17778 <prvReportStackUsage+0xbc>)
   1772e:	00db      	lsls	r3, r3, #3
   17730:	18d3      	adds	r3, r2, r3
   17732:	3304      	adds	r3, #4
   17734:	681b      	ldr	r3, [r3, #0]
   17736:	000a      	movs	r2, r1
   17738:	2103      	movs	r1, #3
   1773a:	20ea      	movs	r0, #234	; 0xea
   1773c:	4c11      	ldr	r4, [pc, #68]	; (17784 <prvReportStackUsage+0xc8>)
   1773e:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   17740:	68fb      	ldr	r3, [r7, #12]
   17742:	3301      	adds	r3, #1
   17744:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   17746:	4b0b      	ldr	r3, [pc, #44]	; (17774 <prvReportStackUsage+0xb8>)
   17748:	681b      	ldr	r3, [r3, #0]
   1774a:	1c5a      	adds	r2, r3, #1
   1774c:	4b0e      	ldr	r3, [pc, #56]	; (17788 <prvReportStackUsage+0xcc>)
   1774e:	210a      	movs	r1, #10
   17750:	0010      	movs	r0, r2
   17752:	4798      	blx	r3
   17754:	000b      	movs	r3, r1
   17756:	001a      	movs	r2, r3
   17758:	4b06      	ldr	r3, [pc, #24]	; (17774 <prvReportStackUsage+0xb8>)
   1775a:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   1775c:	68fb      	ldr	r3, [r7, #12]
   1775e:	2b00      	cmp	r3, #0
   17760:	dc04      	bgt.n	1776c <prvReportStackUsage+0xb0>
   17762:	4b04      	ldr	r3, [pc, #16]	; (17774 <prvReportStackUsage+0xb8>)
   17764:	681a      	ldr	r2, [r3, #0]
   17766:	68bb      	ldr	r3, [r7, #8]
   17768:	429a      	cmp	r2, r3
   1776a:	d1af      	bne.n	176cc <prvReportStackUsage+0x10>
}
   1776c:	46c0      	nop			; (mov r8, r8)
   1776e:	46bd      	mov	sp, r7
   17770:	b005      	add	sp, #20
   17772:	bd90      	pop	{r4, r7, pc}
   17774:	20000c74 	.word	0x20000c74
   17778:	20000c20 	.word	0x20000c20
   1777c:	0001c155 	.word	0x0001c155
   17780:	000174d1 	.word	0x000174d1
   17784:	00018019 	.word	0x00018019
   17788:	00032025 	.word	0x00032025

0001778c <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   1778c:	b580      	push	{r7, lr}
   1778e:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   17790:	4b02      	ldr	r3, [pc, #8]	; (1779c <prvTraceGetCurrentTaskHandle+0x10>)
   17792:	4798      	blx	r3
   17794:	0003      	movs	r3, r0
}
   17796:	0018      	movs	r0, r3
   17798:	46bd      	mov	sp, r7
   1779a:	bd80      	pop	{r7, pc}
   1779c:	0001c201 	.word	0x0001c201

000177a0 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   177a0:	b590      	push	{r4, r7, lr}
   177a2:	b085      	sub	sp, #20
   177a4:	af02      	add	r7, sp, #8
   177a6:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   177a8:	4b14      	ldr	r3, [pc, #80]	; (177fc <vTraceEnable+0x5c>)
   177aa:	4798      	blx	r3

	if (startOption == TRC_START)
   177ac:	687b      	ldr	r3, [r7, #4]
   177ae:	2b01      	cmp	r3, #1
   177b0:	d102      	bne.n	177b8 <vTraceEnable+0x18>
	{
		vTraceStart();
   177b2:	4b13      	ldr	r3, [pc, #76]	; (17800 <vTraceEnable+0x60>)
   177b4:	4798      	blx	r3
   177b6:	e00e      	b.n	177d6 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   177b8:	687b      	ldr	r3, [r7, #4]
   177ba:	2b02      	cmp	r3, #2
   177bc:	d104      	bne.n	177c8 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   177be:	4b11      	ldr	r3, [pc, #68]	; (17804 <vTraceEnable+0x64>)
   177c0:	0018      	movs	r0, r3
   177c2:	4b11      	ldr	r3, [pc, #68]	; (17808 <vTraceEnable+0x68>)
   177c4:	4798      	blx	r3
   177c6:	e006      	b.n	177d6 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   177c8:	687b      	ldr	r3, [r7, #4]
   177ca:	2b00      	cmp	r3, #0
   177cc:	d003      	beq.n	177d6 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   177ce:	4b0f      	ldr	r3, [pc, #60]	; (1780c <vTraceEnable+0x6c>)
   177d0:	0018      	movs	r0, r3
   177d2:	4b0d      	ldr	r3, [pc, #52]	; (17808 <vTraceEnable+0x68>)
   177d4:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   177d6:	4b0e      	ldr	r3, [pc, #56]	; (17810 <vTraceEnable+0x70>)
   177d8:	681b      	ldr	r3, [r3, #0]
   177da:	2b00      	cmp	r3, #0
   177dc:	d109      	bne.n	177f2 <vTraceEnable+0x52>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   177de:	490d      	ldr	r1, [pc, #52]	; (17814 <vTraceEnable+0x74>)
   177e0:	480d      	ldr	r0, [pc, #52]	; (17818 <vTraceEnable+0x78>)
   177e2:	4b0b      	ldr	r3, [pc, #44]	; (17810 <vTraceEnable+0x70>)
   177e4:	9301      	str	r3, [sp, #4]
   177e6:	2304      	movs	r3, #4
   177e8:	9300      	str	r3, [sp, #0]
   177ea:	2300      	movs	r3, #0
   177ec:	22c8      	movs	r2, #200	; 0xc8
   177ee:	4c0b      	ldr	r4, [pc, #44]	; (1781c <vTraceEnable+0x7c>)
   177f0:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   177f2:	46c0      	nop			; (mov r8, r8)
   177f4:	46bd      	mov	sp, r7
   177f6:	b003      	add	sp, #12
   177f8:	bd90      	pop	{r4, r7, pc}
   177fa:	46c0      	nop			; (mov r8, r8)
   177fc:	000186e5 	.word	0x000186e5
   17800:	00017c3d 	.word	0x00017c3d
   17804:	00035c80 	.word	0x00035c80
   17808:	00018d8d 	.word	0x00018d8d
   1780c:	00035cc0 	.word	0x00035cc0
   17810:	20000c1c 	.word	0x20000c1c
   17814:	00035cf4 	.word	0x00035cf4
   17818:	00017821 	.word	0x00017821
   1781c:	0001b159 	.word	0x0001b159

00017820 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   17820:	b580      	push	{r7, lr}
   17822:	b082      	sub	sp, #8
   17824:	af00      	add	r7, sp, #0
   17826:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   17828:	4b04      	ldr	r3, [pc, #16]	; (1783c <TzCtrl+0x1c>)
   1782a:	4798      	blx	r3
   1782c:	1e03      	subs	r3, r0, #0
   1782e:	d001      	beq.n	17834 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   17830:	4b03      	ldr	r3, [pc, #12]	; (17840 <TzCtrl+0x20>)
   17832:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   17834:	2004      	movs	r0, #4
   17836:	4b03      	ldr	r3, [pc, #12]	; (17844 <TzCtrl+0x24>)
   17838:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   1783a:	e7f5      	b.n	17828 <TzCtrl+0x8>
   1783c:	00017c81 	.word	0x00017c81
   17840:	000176bd 	.word	0x000176bd
   17844:	0001b4f5 	.word	0x0001b4f5

00017848 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   17848:	b580      	push	{r7, lr}
   1784a:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   1784c:	4b60      	ldr	r3, [pc, #384]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   1784e:	681b      	ldr	r3, [r3, #0]
   17850:	2209      	movs	r2, #9
   17852:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   17854:	4b5e      	ldr	r3, [pc, #376]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   17856:	681b      	ldr	r3, [r3, #0]
   17858:	2264      	movs	r2, #100	; 0x64
   1785a:	210a      	movs	r1, #10
   1785c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   1785e:	4b5c      	ldr	r3, [pc, #368]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   17860:	681b      	ldr	r3, [r3, #0]
   17862:	2265      	movs	r2, #101	; 0x65
   17864:	210a      	movs	r1, #10
   17866:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   17868:	4b59      	ldr	r3, [pc, #356]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   1786a:	681b      	ldr	r3, [r3, #0]
   1786c:	2266      	movs	r2, #102	; 0x66
   1786e:	210a      	movs	r1, #10
   17870:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   17872:	4b57      	ldr	r3, [pc, #348]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   17874:	681b      	ldr	r3, [r3, #0]
   17876:	2267      	movs	r2, #103	; 0x67
   17878:	210f      	movs	r1, #15
   1787a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   1787c:	4b54      	ldr	r3, [pc, #336]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   1787e:	681b      	ldr	r3, [r3, #0]
   17880:	2268      	movs	r2, #104	; 0x68
   17882:	2105      	movs	r1, #5
   17884:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   17886:	4b52      	ldr	r3, [pc, #328]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   17888:	681b      	ldr	r3, [r3, #0]
   1788a:	2269      	movs	r2, #105	; 0x69
   1788c:	2105      	movs	r1, #5
   1788e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   17890:	4b4f      	ldr	r3, [pc, #316]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   17892:	681b      	ldr	r3, [r3, #0]
   17894:	226a      	movs	r2, #106	; 0x6a
   17896:	2105      	movs	r1, #5
   17898:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   1789a:	4b4d      	ldr	r3, [pc, #308]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   1789c:	681b      	ldr	r3, [r3, #0]
   1789e:	226b      	movs	r2, #107	; 0x6b
   178a0:	2105      	movs	r1, #5
   178a2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   178a4:	4b4a      	ldr	r3, [pc, #296]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   178a6:	681b      	ldr	r3, [r3, #0]
   178a8:	226c      	movs	r2, #108	; 0x6c
   178aa:	2105      	movs	r1, #5
   178ac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   178ae:	4b48      	ldr	r3, [pc, #288]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   178b0:	681b      	ldr	r3, [r3, #0]
   178b2:	2270      	movs	r2, #112	; 0x70
   178b4:	210f      	movs	r1, #15
   178b6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   178b8:	4b45      	ldr	r3, [pc, #276]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   178ba:	681b      	ldr	r3, [r3, #0]
   178bc:	2271      	movs	r2, #113	; 0x71
   178be:	210f      	movs	r1, #15
   178c0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   178c2:	4b43      	ldr	r3, [pc, #268]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   178c4:	681b      	ldr	r3, [r3, #0]
   178c6:	2272      	movs	r2, #114	; 0x72
   178c8:	210f      	movs	r1, #15
   178ca:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   178cc:	4b40      	ldr	r3, [pc, #256]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   178ce:	681b      	ldr	r3, [r3, #0]
   178d0:	2273      	movs	r2, #115	; 0x73
   178d2:	210f      	movs	r1, #15
   178d4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   178d6:	4b3e      	ldr	r3, [pc, #248]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   178d8:	681b      	ldr	r3, [r3, #0]
   178da:	2274      	movs	r2, #116	; 0x74
   178dc:	210f      	movs	r1, #15
   178de:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   178e0:	4b3b      	ldr	r3, [pc, #236]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   178e2:	681b      	ldr	r3, [r3, #0]
   178e4:	2275      	movs	r2, #117	; 0x75
   178e6:	210f      	movs	r1, #15
   178e8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   178ea:	4b39      	ldr	r3, [pc, #228]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   178ec:	681b      	ldr	r3, [r3, #0]
   178ee:	2276      	movs	r2, #118	; 0x76
   178f0:	210f      	movs	r1, #15
   178f2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   178f4:	4b36      	ldr	r3, [pc, #216]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   178f6:	681b      	ldr	r3, [r3, #0]
   178f8:	2277      	movs	r2, #119	; 0x77
   178fa:	210f      	movs	r1, #15
   178fc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   178fe:	4b34      	ldr	r3, [pc, #208]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   17900:	681b      	ldr	r3, [r3, #0]
   17902:	2278      	movs	r2, #120	; 0x78
   17904:	210f      	movs	r1, #15
   17906:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   17908:	4b31      	ldr	r3, [pc, #196]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   1790a:	681b      	ldr	r3, [r3, #0]
   1790c:	227c      	movs	r2, #124	; 0x7c
   1790e:	2110      	movs	r1, #16
   17910:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   17912:	4b2f      	ldr	r3, [pc, #188]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   17914:	681b      	ldr	r3, [r3, #0]
   17916:	227d      	movs	r2, #125	; 0x7d
   17918:	2110      	movs	r1, #16
   1791a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   1791c:	4b2c      	ldr	r3, [pc, #176]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   1791e:	681b      	ldr	r3, [r3, #0]
   17920:	227e      	movs	r2, #126	; 0x7e
   17922:	2110      	movs	r1, #16
   17924:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   17926:	4b2a      	ldr	r3, [pc, #168]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   17928:	681b      	ldr	r3, [r3, #0]
   1792a:	227f      	movs	r2, #127	; 0x7f
   1792c:	2113      	movs	r1, #19
   1792e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   17930:	4b27      	ldr	r3, [pc, #156]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   17932:	681b      	ldr	r3, [r3, #0]
   17934:	2280      	movs	r2, #128	; 0x80
   17936:	2111      	movs	r1, #17
   17938:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   1793a:	4b25      	ldr	r3, [pc, #148]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   1793c:	681b      	ldr	r3, [r3, #0]
   1793e:	2281      	movs	r2, #129	; 0x81
   17940:	2110      	movs	r1, #16
   17942:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   17944:	4b22      	ldr	r3, [pc, #136]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   17946:	681b      	ldr	r3, [r3, #0]
   17948:	2282      	movs	r2, #130	; 0x82
   1794a:	2113      	movs	r1, #19
   1794c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   1794e:	4b20      	ldr	r3, [pc, #128]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   17950:	681b      	ldr	r3, [r3, #0]
   17952:	2283      	movs	r2, #131	; 0x83
   17954:	2113      	movs	r1, #19
   17956:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   17958:	4b1d      	ldr	r3, [pc, #116]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   1795a:	681b      	ldr	r3, [r3, #0]
   1795c:	2284      	movs	r2, #132	; 0x84
   1795e:	2113      	movs	r1, #19
   17960:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   17962:	4b1b      	ldr	r3, [pc, #108]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   17964:	681b      	ldr	r3, [r3, #0]
   17966:	2288      	movs	r2, #136	; 0x88
   17968:	2100      	movs	r1, #0
   1796a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   1796c:	4b18      	ldr	r3, [pc, #96]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   1796e:	681b      	ldr	r3, [r3, #0]
   17970:	228a      	movs	r2, #138	; 0x8a
   17972:	21a0      	movs	r1, #160	; 0xa0
   17974:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   17976:	4b16      	ldr	r3, [pc, #88]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   17978:	681b      	ldr	r3, [r3, #0]
   1797a:	228c      	movs	r2, #140	; 0x8c
   1797c:	21a0      	movs	r1, #160	; 0xa0
   1797e:	0049      	lsls	r1, r1, #1
   17980:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   17982:	4b13      	ldr	r3, [pc, #76]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   17984:	681b      	ldr	r3, [r3, #0]
   17986:	228e      	movs	r2, #142	; 0x8e
   17988:	21f0      	movs	r1, #240	; 0xf0
   1798a:	0049      	lsls	r1, r1, #1
   1798c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   1798e:	4b10      	ldr	r3, [pc, #64]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   17990:	681b      	ldr	r3, [r3, #0]
   17992:	2290      	movs	r2, #144	; 0x90
   17994:	490f      	ldr	r1, [pc, #60]	; (179d4 <vTraceInitObjectPropertyTable+0x18c>)
   17996:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   17998:	4b0d      	ldr	r3, [pc, #52]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   1799a:	681b      	ldr	r3, [r3, #0]
   1799c:	2292      	movs	r2, #146	; 0x92
   1799e:	490e      	ldr	r1, [pc, #56]	; (179d8 <vTraceInitObjectPropertyTable+0x190>)
   179a0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   179a2:	4b0b      	ldr	r3, [pc, #44]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   179a4:	681b      	ldr	r3, [r3, #0]
   179a6:	2294      	movs	r2, #148	; 0x94
   179a8:	490c      	ldr	r1, [pc, #48]	; (179dc <vTraceInitObjectPropertyTable+0x194>)
   179aa:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   179ac:	4b08      	ldr	r3, [pc, #32]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   179ae:	681b      	ldr	r3, [r3, #0]
   179b0:	2296      	movs	r2, #150	; 0x96
   179b2:	490b      	ldr	r1, [pc, #44]	; (179e0 <vTraceInitObjectPropertyTable+0x198>)
   179b4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   179b6:	4b06      	ldr	r3, [pc, #24]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   179b8:	681b      	ldr	r3, [r3, #0]
   179ba:	2298      	movs	r2, #152	; 0x98
   179bc:	218c      	movs	r1, #140	; 0x8c
   179be:	00c9      	lsls	r1, r1, #3
   179c0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   179c2:	4b03      	ldr	r3, [pc, #12]	; (179d0 <vTraceInitObjectPropertyTable+0x188>)
   179c4:	681b      	ldr	r3, [r3, #0]
   179c6:	4a07      	ldr	r2, [pc, #28]	; (179e4 <vTraceInitObjectPropertyTable+0x19c>)
   179c8:	661a      	str	r2, [r3, #96]	; 0x60
}
   179ca:	46c0      	nop			; (mov r8, r8)
   179cc:	46bd      	mov	sp, r7
   179ce:	bd80      	pop	{r7, pc}
   179d0:	20000d34 	.word	0x20000d34
   179d4:	000002fd 	.word	0x000002fd
   179d8:	00000352 	.word	0x00000352
   179dc:	000003a2 	.word	0x000003a2
   179e0:	00000401 	.word	0x00000401
   179e4:	000004bf 	.word	0x000004bf

000179e8 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   179e8:	b580      	push	{r7, lr}
   179ea:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   179ec:	4b2e      	ldr	r3, [pc, #184]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   179ee:	2200      	movs	r2, #0
   179f0:	825a      	strh	r2, [r3, #18]
   179f2:	4b2d      	ldr	r3, [pc, #180]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   179f4:	8a5a      	ldrh	r2, [r3, #18]
   179f6:	4b2c      	ldr	r3, [pc, #176]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   179f8:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   179fa:	4b2b      	ldr	r3, [pc, #172]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   179fc:	220a      	movs	r2, #10
   179fe:	829a      	strh	r2, [r3, #20]
   17a00:	4b29      	ldr	r3, [pc, #164]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a02:	8a9a      	ldrh	r2, [r3, #20]
   17a04:	4b28      	ldr	r3, [pc, #160]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a06:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   17a08:	4b27      	ldr	r3, [pc, #156]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a0a:	2214      	movs	r2, #20
   17a0c:	82da      	strh	r2, [r3, #22]
   17a0e:	4b26      	ldr	r3, [pc, #152]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a10:	8ada      	ldrh	r2, [r3, #22]
   17a12:	4b25      	ldr	r3, [pc, #148]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a14:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   17a16:	4b24      	ldr	r3, [pc, #144]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a18:	221e      	movs	r2, #30
   17a1a:	831a      	strh	r2, [r3, #24]
   17a1c:	4b22      	ldr	r3, [pc, #136]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a1e:	8b1a      	ldrh	r2, [r3, #24]
   17a20:	4b21      	ldr	r3, [pc, #132]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a22:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   17a24:	4b20      	ldr	r3, [pc, #128]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a26:	222d      	movs	r2, #45	; 0x2d
   17a28:	835a      	strh	r2, [r3, #26]
   17a2a:	4b1f      	ldr	r3, [pc, #124]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a2c:	8b5a      	ldrh	r2, [r3, #26]
   17a2e:	4b1e      	ldr	r3, [pc, #120]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a30:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   17a32:	4b1d      	ldr	r3, [pc, #116]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a34:	2232      	movs	r2, #50	; 0x32
   17a36:	839a      	strh	r2, [r3, #28]
   17a38:	4b1b      	ldr	r3, [pc, #108]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a3a:	8b9a      	ldrh	r2, [r3, #28]
   17a3c:	4b1a      	ldr	r3, [pc, #104]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a3e:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   17a40:	4b19      	ldr	r3, [pc, #100]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a42:	2237      	movs	r2, #55	; 0x37
   17a44:	83da      	strh	r2, [r3, #30]
   17a46:	4b18      	ldr	r3, [pc, #96]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a48:	8bda      	ldrh	r2, [r3, #30]
   17a4a:	4b17      	ldr	r3, [pc, #92]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a4c:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   17a4e:	4b16      	ldr	r3, [pc, #88]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a50:	223c      	movs	r2, #60	; 0x3c
   17a52:	841a      	strh	r2, [r3, #32]
   17a54:	4b14      	ldr	r3, [pc, #80]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a56:	8c1a      	ldrh	r2, [r3, #32]
   17a58:	4b13      	ldr	r3, [pc, #76]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a5a:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   17a5c:	4b12      	ldr	r3, [pc, #72]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a5e:	2241      	movs	r2, #65	; 0x41
   17a60:	845a      	strh	r2, [r3, #34]	; 0x22
   17a62:	4b11      	ldr	r3, [pc, #68]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a64:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   17a66:	4b10      	ldr	r3, [pc, #64]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a68:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   17a6a:	4b0f      	ldr	r3, [pc, #60]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a6c:	2209      	movs	r2, #9
   17a6e:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   17a70:	4b0d      	ldr	r3, [pc, #52]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a72:	2213      	movs	r2, #19
   17a74:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   17a76:	4b0c      	ldr	r3, [pc, #48]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a78:	221d      	movs	r2, #29
   17a7a:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   17a7c:	4b0a      	ldr	r3, [pc, #40]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a7e:	222c      	movs	r2, #44	; 0x2c
   17a80:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   17a82:	4b09      	ldr	r3, [pc, #36]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a84:	2231      	movs	r2, #49	; 0x31
   17a86:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   17a88:	4b07      	ldr	r3, [pc, #28]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a8a:	2236      	movs	r2, #54	; 0x36
   17a8c:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   17a8e:	4b06      	ldr	r3, [pc, #24]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a90:	223b      	movs	r2, #59	; 0x3b
   17a92:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   17a94:	4b04      	ldr	r3, [pc, #16]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a96:	2240      	movs	r2, #64	; 0x40
   17a98:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   17a9a:	4b03      	ldr	r3, [pc, #12]	; (17aa8 <vTraceInitObjectHandleStack+0xc0>)
   17a9c:	2245      	movs	r2, #69	; 0x45
   17a9e:	869a      	strh	r2, [r3, #52]	; 0x34
}
   17aa0:	46c0      	nop			; (mov r8, r8)
   17aa2:	46bd      	mov	sp, r7
   17aa4:	bd80      	pop	{r7, pc}
   17aa6:	46c0      	nop			; (mov r8, r8)
   17aa8:	20000ca4 	.word	0x20000ca4

00017aac <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   17aac:	b580      	push	{r7, lr}
   17aae:	b082      	sub	sp, #8
   17ab0:	af00      	add	r7, sp, #0
   17ab2:	0002      	movs	r2, r0
   17ab4:	1dfb      	adds	r3, r7, #7
   17ab6:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   17ab8:	1dfb      	adds	r3, r7, #7
   17aba:	781b      	ldrb	r3, [r3, #0]
   17abc:	2b08      	cmp	r3, #8
   17abe:	d816      	bhi.n	17aee <pszTraceGetErrorNotEnoughHandles+0x42>
   17ac0:	009a      	lsls	r2, r3, #2
   17ac2:	4b0d      	ldr	r3, [pc, #52]	; (17af8 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   17ac4:	18d3      	adds	r3, r2, r3
   17ac6:	681b      	ldr	r3, [r3, #0]
   17ac8:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   17aca:	4b0c      	ldr	r3, [pc, #48]	; (17afc <pszTraceGetErrorNotEnoughHandles+0x50>)
   17acc:	e010      	b.n	17af0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   17ace:	4b0c      	ldr	r3, [pc, #48]	; (17b00 <pszTraceGetErrorNotEnoughHandles+0x54>)
   17ad0:	e00e      	b.n	17af0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   17ad2:	4b0c      	ldr	r3, [pc, #48]	; (17b04 <pszTraceGetErrorNotEnoughHandles+0x58>)
   17ad4:	e00c      	b.n	17af0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   17ad6:	4b0c      	ldr	r3, [pc, #48]	; (17b08 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   17ad8:	e00a      	b.n	17af0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   17ada:	4b0c      	ldr	r3, [pc, #48]	; (17b0c <pszTraceGetErrorNotEnoughHandles+0x60>)
   17adc:	e008      	b.n	17af0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   17ade:	4b0c      	ldr	r3, [pc, #48]	; (17b10 <pszTraceGetErrorNotEnoughHandles+0x64>)
   17ae0:	e006      	b.n	17af0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   17ae2:	4b0c      	ldr	r3, [pc, #48]	; (17b14 <pszTraceGetErrorNotEnoughHandles+0x68>)
   17ae4:	e004      	b.n	17af0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   17ae6:	4b0c      	ldr	r3, [pc, #48]	; (17b18 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   17ae8:	e002      	b.n	17af0 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   17aea:	4b0c      	ldr	r3, [pc, #48]	; (17b1c <pszTraceGetErrorNotEnoughHandles+0x70>)
   17aec:	e000      	b.n	17af0 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   17aee:	4b0c      	ldr	r3, [pc, #48]	; (17b20 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   17af0:	0018      	movs	r0, r3
   17af2:	46bd      	mov	sp, r7
   17af4:	b002      	add	sp, #8
   17af6:	bd80      	pop	{r7, pc}
   17af8:	00035ffc 	.word	0x00035ffc
   17afc:	00035cfc 	.word	0x00035cfc
   17b00:	00035d44 	.word	0x00035d44
   17b04:	00035d8c 	.word	0x00035d8c
   17b08:	00035de0 	.word	0x00035de0
   17b0c:	00035e2c 	.word	0x00035e2c
   17b10:	00035e78 	.word	0x00035e78
   17b14:	00035ec4 	.word	0x00035ec4
   17b18:	00035f18 	.word	0x00035f18
   17b1c:	00035f70 	.word	0x00035f70
   17b20:	00035fcc 	.word	0x00035fcc

00017b24 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   17b24:	b590      	push	{r4, r7, lr}
   17b26:	b087      	sub	sp, #28
   17b28:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   17b2a:	2317      	movs	r3, #23
   17b2c:	18fb      	adds	r3, r7, r3
   17b2e:	2200      	movs	r2, #0
   17b30:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   17b32:	4b36      	ldr	r3, [pc, #216]	; (17c0c <uiTraceStart+0xe8>)
   17b34:	681b      	ldr	r3, [r3, #0]
   17b36:	2b00      	cmp	r3, #0
   17b38:	d10b      	bne.n	17b52 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   17b3a:	4b34      	ldr	r3, [pc, #208]	; (17c0c <uiTraceStart+0xe8>)
   17b3c:	681b      	ldr	r3, [r3, #0]
   17b3e:	2b00      	cmp	r3, #0
   17b40:	d105      	bne.n	17b4e <uiTraceStart+0x2a>
   17b42:	4b33      	ldr	r3, [pc, #204]	; (17c10 <uiTraceStart+0xec>)
   17b44:	0018      	movs	r0, r3
   17b46:	4b33      	ldr	r3, [pc, #204]	; (17c14 <uiTraceStart+0xf0>)
   17b48:	4798      	blx	r3
   17b4a:	2300      	movs	r3, #0
   17b4c:	e059      	b.n	17c02 <uiTraceStart+0xde>
		return 0;
   17b4e:	2300      	movs	r3, #0
   17b50:	e057      	b.n	17c02 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   17b52:	4b2e      	ldr	r3, [pc, #184]	; (17c0c <uiTraceStart+0xe8>)
   17b54:	681b      	ldr	r3, [r3, #0]
   17b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17b58:	2b01      	cmp	r3, #1
   17b5a:	d101      	bne.n	17b60 <uiTraceStart+0x3c>
		return 1; /* Already running */
   17b5c:	2301      	movs	r3, #1
   17b5e:	e050      	b.n	17c02 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   17b60:	4b2d      	ldr	r3, [pc, #180]	; (17c18 <uiTraceStart+0xf4>)
   17b62:	681b      	ldr	r3, [r3, #0]
   17b64:	2b00      	cmp	r3, #0
   17b66:	d149      	bne.n	17bfc <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17b68:	f3ef 8310 	mrs	r3, PRIMASK
   17b6c:	60bb      	str	r3, [r7, #8]
  return(result);
   17b6e:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   17b70:	613b      	str	r3, [r7, #16]
   17b72:	2301      	movs	r3, #1
   17b74:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17b76:	68fb      	ldr	r3, [r7, #12]
   17b78:	f383 8810 	msr	PRIMASK, r3
   17b7c:	4b27      	ldr	r3, [pc, #156]	; (17c1c <uiTraceStart+0xf8>)
   17b7e:	681b      	ldr	r3, [r3, #0]
   17b80:	1c5a      	adds	r2, r3, #1
   17b82:	4b26      	ldr	r3, [pc, #152]	; (17c1c <uiTraceStart+0xf8>)
   17b84:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   17b86:	4b21      	ldr	r3, [pc, #132]	; (17c0c <uiTraceStart+0xe8>)
   17b88:	681b      	ldr	r3, [r3, #0]
   17b8a:	2201      	movs	r2, #1
   17b8c:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   17b8e:	4b24      	ldr	r3, [pc, #144]	; (17c20 <uiTraceStart+0xfc>)
   17b90:	4798      	blx	r3
   17b92:	0003      	movs	r3, r0
   17b94:	0018      	movs	r0, r3
   17b96:	4b23      	ldr	r3, [pc, #140]	; (17c24 <uiTraceStart+0x100>)
   17b98:	4798      	blx	r3
   17b9a:	0003      	movs	r3, r0
   17b9c:	001a      	movs	r2, r3
   17b9e:	2317      	movs	r3, #23
   17ba0:	18fb      	adds	r3, r7, r3
   17ba2:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   17ba4:	2317      	movs	r3, #23
   17ba6:	18fb      	adds	r3, r7, r3
   17ba8:	781b      	ldrb	r3, [r3, #0]
   17baa:	2b00      	cmp	r3, #0
   17bac:	d116      	bne.n	17bdc <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   17bae:	2317      	movs	r3, #23
   17bb0:	18fc      	adds	r4, r7, r3
   17bb2:	2003      	movs	r0, #3
   17bb4:	4b1c      	ldr	r3, [pc, #112]	; (17c28 <uiTraceStart+0x104>)
   17bb6:	4798      	blx	r3
   17bb8:	0003      	movs	r3, r0
   17bba:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   17bbc:	4a1b      	ldr	r2, [pc, #108]	; (17c2c <uiTraceStart+0x108>)
   17bbe:	2317      	movs	r3, #23
   17bc0:	18fb      	adds	r3, r7, r3
   17bc2:	781b      	ldrb	r3, [r3, #0]
   17bc4:	0019      	movs	r1, r3
   17bc6:	2003      	movs	r0, #3
   17bc8:	4b19      	ldr	r3, [pc, #100]	; (17c30 <uiTraceStart+0x10c>)
   17bca:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   17bcc:	2317      	movs	r3, #23
   17bce:	18fb      	adds	r3, r7, r3
   17bd0:	781b      	ldrb	r3, [r3, #0]
   17bd2:	2200      	movs	r2, #0
   17bd4:	0019      	movs	r1, r3
   17bd6:	2003      	movs	r0, #3
   17bd8:	4b16      	ldr	r3, [pc, #88]	; (17c34 <uiTraceStart+0x110>)
   17bda:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   17bdc:	2317      	movs	r3, #23
   17bde:	18fb      	adds	r3, r7, r3
   17be0:	781b      	ldrb	r3, [r3, #0]
   17be2:	0018      	movs	r0, r3
   17be4:	4b14      	ldr	r3, [pc, #80]	; (17c38 <uiTraceStart+0x114>)
   17be6:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   17be8:	4b0c      	ldr	r3, [pc, #48]	; (17c1c <uiTraceStart+0xf8>)
   17bea:	681b      	ldr	r3, [r3, #0]
   17bec:	1e5a      	subs	r2, r3, #1
   17bee:	4b0b      	ldr	r3, [pc, #44]	; (17c1c <uiTraceStart+0xf8>)
   17bf0:	601a      	str	r2, [r3, #0]
   17bf2:	693b      	ldr	r3, [r7, #16]
   17bf4:	607b      	str	r3, [r7, #4]
   17bf6:	687b      	ldr	r3, [r7, #4]
   17bf8:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   17bfc:	4b03      	ldr	r3, [pc, #12]	; (17c0c <uiTraceStart+0xe8>)
   17bfe:	681b      	ldr	r3, [r3, #0]
   17c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   17c02:	0018      	movs	r0, r3
   17c04:	46bd      	mov	sp, r7
   17c06:	b007      	add	sp, #28
   17c08:	bd90      	pop	{r4, r7, pc}
   17c0a:	46c0      	nop			; (mov r8, r8)
   17c0c:	20000d34 	.word	0x20000d34
   17c10:	00036020 	.word	0x00036020
   17c14:	00018d8d 	.word	0x00018d8d
   17c18:	20000c94 	.word	0x20000c94
   17c1c:	20000c8c 	.word	0x20000c8c
   17c20:	0001778d 	.word	0x0001778d
   17c24:	000174d1 	.word	0x000174d1
   17c28:	00018a71 	.word	0x00018a71
   17c2c:	00036064 	.word	0x00036064
   17c30:	00018ca1 	.word	0x00018ca1
   17c34:	00018405 	.word	0x00018405
   17c38:	000182ed 	.word	0x000182ed

00017c3c <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   17c3c:	b580      	push	{r7, lr}
   17c3e:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   17c40:	4b02      	ldr	r3, [pc, #8]	; (17c4c <vTraceStart+0x10>)
   17c42:	4798      	blx	r3
}
   17c44:	46c0      	nop			; (mov r8, r8)
   17c46:	46bd      	mov	sp, r7
   17c48:	bd80      	pop	{r7, pc}
   17c4a:	46c0      	nop			; (mov r8, r8)
   17c4c:	00017b25 	.word	0x00017b25

00017c50 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   17c50:	b580      	push	{r7, lr}
   17c52:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   17c54:	4b08      	ldr	r3, [pc, #32]	; (17c78 <vTraceStop+0x28>)
   17c56:	681b      	ldr	r3, [r3, #0]
   17c58:	2b00      	cmp	r3, #0
   17c5a:	d003      	beq.n	17c64 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   17c5c:	4b06      	ldr	r3, [pc, #24]	; (17c78 <vTraceStop+0x28>)
   17c5e:	681b      	ldr	r3, [r3, #0]
   17c60:	2200      	movs	r2, #0
   17c62:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   17c64:	4b05      	ldr	r3, [pc, #20]	; (17c7c <vTraceStop+0x2c>)
   17c66:	681b      	ldr	r3, [r3, #0]
   17c68:	2b00      	cmp	r3, #0
   17c6a:	d002      	beq.n	17c72 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   17c6c:	4b03      	ldr	r3, [pc, #12]	; (17c7c <vTraceStop+0x2c>)
   17c6e:	681b      	ldr	r3, [r3, #0]
   17c70:	4798      	blx	r3
	}
}
   17c72:	46c0      	nop			; (mov r8, r8)
   17c74:	46bd      	mov	sp, r7
   17c76:	bd80      	pop	{r7, pc}
   17c78:	20000d34 	.word	0x20000d34
   17c7c:	20000c9c 	.word	0x20000c9c

00017c80 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   17c80:	b580      	push	{r7, lr}
   17c82:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   17c84:	4b05      	ldr	r3, [pc, #20]	; (17c9c <xTraceIsRecordingEnabled+0x1c>)
   17c86:	681b      	ldr	r3, [r3, #0]
   17c88:	2b00      	cmp	r3, #0
   17c8a:	d003      	beq.n	17c94 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   17c8c:	4b03      	ldr	r3, [pc, #12]	; (17c9c <xTraceIsRecordingEnabled+0x1c>)
   17c8e:	681b      	ldr	r3, [r3, #0]
   17c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17c92:	e000      	b.n	17c96 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   17c94:	2300      	movs	r3, #0
	}
}
   17c96:	0018      	movs	r0, r3
   17c98:	46bd      	mov	sp, r7
   17c9a:	bd80      	pop	{r7, pc}
   17c9c:	20000d34 	.word	0x20000d34

00017ca0 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   17ca0:	b590      	push	{r4, r7, lr}
   17ca2:	b089      	sub	sp, #36	; 0x24
   17ca4:	af00      	add	r7, sp, #0
   17ca6:	0002      	movs	r2, r0
   17ca8:	1dfb      	adds	r3, r7, #7
   17caa:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   17cac:	1dfb      	adds	r3, r7, #7
   17cae:	781b      	ldrb	r3, [r3, #0]
   17cb0:	2b00      	cmp	r3, #0
   17cb2:	d057      	beq.n	17d64 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   17cb4:	4b2e      	ldr	r3, [pc, #184]	; (17d70 <prvTraceStoreTaskReady+0xd0>)
   17cb6:	681b      	ldr	r3, [r3, #0]
   17cb8:	2b00      	cmp	r3, #0
   17cba:	d055      	beq.n	17d68 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   17cbc:	1dfb      	adds	r3, r7, #7
   17cbe:	781b      	ldrb	r3, [r3, #0]
   17cc0:	2b0f      	cmp	r3, #15
   17cc2:	d904      	bls.n	17cce <prvTraceStoreTaskReady+0x2e>
   17cc4:	4b2b      	ldr	r3, [pc, #172]	; (17d74 <prvTraceStoreTaskReady+0xd4>)
   17cc6:	0018      	movs	r0, r3
   17cc8:	4b2b      	ldr	r3, [pc, #172]	; (17d78 <prvTraceStoreTaskReady+0xd8>)
   17cca:	4798      	blx	r3
   17ccc:	e04d      	b.n	17d6a <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   17cce:	4b2b      	ldr	r3, [pc, #172]	; (17d7c <prvTraceStoreTaskReady+0xdc>)
   17cd0:	681b      	ldr	r3, [r3, #0]
   17cd2:	2b00      	cmp	r3, #0
   17cd4:	d004      	beq.n	17ce0 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   17cd6:	4b2a      	ldr	r3, [pc, #168]	; (17d80 <prvTraceStoreTaskReady+0xe0>)
   17cd8:	0018      	movs	r0, r3
   17cda:	4b27      	ldr	r3, [pc, #156]	; (17d78 <prvTraceStoreTaskReady+0xd8>)
   17cdc:	4798      	blx	r3
		return;
   17cde:	e044      	b.n	17d6a <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17ce0:	f3ef 8310 	mrs	r3, PRIMASK
   17ce4:	60fb      	str	r3, [r7, #12]
  return(result);
   17ce6:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   17ce8:	61fb      	str	r3, [r7, #28]
   17cea:	2301      	movs	r3, #1
   17cec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17cee:	693b      	ldr	r3, [r7, #16]
   17cf0:	f383 8810 	msr	PRIMASK, r3
   17cf4:	4b21      	ldr	r3, [pc, #132]	; (17d7c <prvTraceStoreTaskReady+0xdc>)
   17cf6:	681b      	ldr	r3, [r3, #0]
   17cf8:	1c5a      	adds	r2, r3, #1
   17cfa:	4b20      	ldr	r3, [pc, #128]	; (17d7c <prvTraceStoreTaskReady+0xdc>)
   17cfc:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   17cfe:	4b21      	ldr	r3, [pc, #132]	; (17d84 <prvTraceStoreTaskReady+0xe4>)
   17d00:	681b      	ldr	r3, [r3, #0]
   17d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17d04:	2b00      	cmp	r3, #0
   17d06:	d022      	beq.n	17d4e <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   17d08:	231a      	movs	r3, #26
   17d0a:	18fc      	adds	r4, r7, r3
   17d0c:	4b1e      	ldr	r3, [pc, #120]	; (17d88 <prvTraceStoreTaskReady+0xe8>)
   17d0e:	0018      	movs	r0, r3
   17d10:	4b1e      	ldr	r3, [pc, #120]	; (17d8c <prvTraceStoreTaskReady+0xec>)
   17d12:	4798      	blx	r3
   17d14:	0003      	movs	r3, r0
   17d16:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   17d18:	2319      	movs	r3, #25
   17d1a:	18fb      	adds	r3, r7, r3
   17d1c:	1dfa      	adds	r2, r7, #7
   17d1e:	7812      	ldrb	r2, [r2, #0]
   17d20:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   17d22:	4b1b      	ldr	r3, [pc, #108]	; (17d90 <prvTraceStoreTaskReady+0xf0>)
   17d24:	4798      	blx	r3
   17d26:	0003      	movs	r3, r0
   17d28:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   17d2a:	697b      	ldr	r3, [r7, #20]
   17d2c:	2b00      	cmp	r3, #0
   17d2e:	d00e      	beq.n	17d4e <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   17d30:	697b      	ldr	r3, [r7, #20]
   17d32:	2202      	movs	r2, #2
   17d34:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   17d36:	697b      	ldr	r3, [r7, #20]
   17d38:	221a      	movs	r2, #26
   17d3a:	18ba      	adds	r2, r7, r2
   17d3c:	8812      	ldrh	r2, [r2, #0]
   17d3e:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   17d40:	697b      	ldr	r3, [r7, #20]
   17d42:	2219      	movs	r2, #25
   17d44:	18ba      	adds	r2, r7, r2
   17d46:	7812      	ldrb	r2, [r2, #0]
   17d48:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   17d4a:	4b12      	ldr	r3, [pc, #72]	; (17d94 <prvTraceStoreTaskReady+0xf4>)
   17d4c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   17d4e:	4b0b      	ldr	r3, [pc, #44]	; (17d7c <prvTraceStoreTaskReady+0xdc>)
   17d50:	681b      	ldr	r3, [r3, #0]
   17d52:	1e5a      	subs	r2, r3, #1
   17d54:	4b09      	ldr	r3, [pc, #36]	; (17d7c <prvTraceStoreTaskReady+0xdc>)
   17d56:	601a      	str	r2, [r3, #0]
   17d58:	69fb      	ldr	r3, [r7, #28]
   17d5a:	60bb      	str	r3, [r7, #8]
   17d5c:	68bb      	ldr	r3, [r7, #8]
   17d5e:	f383 8810 	msr	PRIMASK, r3
   17d62:	e002      	b.n	17d6a <prvTraceStoreTaskReady+0xca>
		return;
   17d64:	46c0      	nop			; (mov r8, r8)
   17d66:	e000      	b.n	17d6a <prvTraceStoreTaskReady+0xca>
		return;
   17d68:	46c0      	nop			; (mov r8, r8)
}
   17d6a:	46bd      	mov	sp, r7
   17d6c:	b009      	add	sp, #36	; 0x24
   17d6e:	bd90      	pop	{r4, r7, pc}
   17d70:	200000b4 	.word	0x200000b4
   17d74:	000363cc 	.word	0x000363cc
   17d78:	00018d8d 	.word	0x00018d8d
   17d7c:	20000c8c 	.word	0x20000c8c
   17d80:	0003640c 	.word	0x0003640c
   17d84:	20000d34 	.word	0x20000d34
   17d88:	0000ffff 	.word	0x0000ffff
   17d8c:	00018fa1 	.word	0x00018fa1
   17d90:	00018945 	.word	0x00018945
   17d94:	00018f49 	.word	0x00018f49

00017d98 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   17d98:	b580      	push	{r7, lr}
   17d9a:	b08e      	sub	sp, #56	; 0x38
   17d9c:	af00      	add	r7, sp, #0
   17d9e:	60f8      	str	r0, [r7, #12]
   17da0:	60b9      	str	r1, [r7, #8]
   17da2:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   17da4:	4b48      	ldr	r3, [pc, #288]	; (17ec8 <vTraceStoreMemMangEvent+0x130>)
   17da6:	681b      	ldr	r3, [r3, #0]
   17da8:	2b00      	cmp	r3, #0
   17daa:	d100      	bne.n	17dae <vTraceStoreMemMangEvent+0x16>
   17dac:	e088      	b.n	17ec0 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   17dae:	687b      	ldr	r3, [r7, #4]
   17db0:	2b00      	cmp	r3, #0
   17db2:	da03      	bge.n	17dbc <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   17db4:	687b      	ldr	r3, [r7, #4]
   17db6:	425b      	negs	r3, r3
   17db8:	637b      	str	r3, [r7, #52]	; 0x34
   17dba:	e001      	b.n	17dc0 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   17dbc:	687b      	ldr	r3, [r7, #4]
   17dbe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17dc0:	f3ef 8310 	mrs	r3, PRIMASK
   17dc4:	61bb      	str	r3, [r7, #24]
  return(result);
   17dc6:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   17dc8:	633b      	str	r3, [r7, #48]	; 0x30
   17dca:	2301      	movs	r3, #1
   17dcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17dce:	69fb      	ldr	r3, [r7, #28]
   17dd0:	f383 8810 	msr	PRIMASK, r3
   17dd4:	4b3d      	ldr	r3, [pc, #244]	; (17ecc <vTraceStoreMemMangEvent+0x134>)
   17dd6:	681b      	ldr	r3, [r3, #0]
   17dd8:	1c5a      	adds	r2, r3, #1
   17dda:	4b3c      	ldr	r3, [pc, #240]	; (17ecc <vTraceStoreMemMangEvent+0x134>)
   17ddc:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   17dde:	68bb      	ldr	r3, [r7, #8]
   17de0:	2b00      	cmp	r3, #0
   17de2:	d005      	beq.n	17df0 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   17de4:	4b3a      	ldr	r3, [pc, #232]	; (17ed0 <vTraceStoreMemMangEvent+0x138>)
   17de6:	681a      	ldr	r2, [r3, #0]
   17de8:	687b      	ldr	r3, [r7, #4]
   17dea:	18d2      	adds	r2, r2, r3
   17dec:	4b38      	ldr	r3, [pc, #224]	; (17ed0 <vTraceStoreMemMangEvent+0x138>)
   17dee:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   17df0:	4b35      	ldr	r3, [pc, #212]	; (17ec8 <vTraceStoreMemMangEvent+0x130>)
   17df2:	681b      	ldr	r3, [r3, #0]
   17df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17df6:	2b00      	cmp	r3, #0
   17df8:	d057      	beq.n	17eaa <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   17dfa:	20ff      	movs	r0, #255	; 0xff
   17dfc:	4b35      	ldr	r3, [pc, #212]	; (17ed4 <vTraceStoreMemMangEvent+0x13c>)
   17dfe:	4798      	blx	r3
   17e00:	0003      	movs	r3, r0
   17e02:	001a      	movs	r2, r3
   17e04:	232f      	movs	r3, #47	; 0x2f
   17e06:	18fb      	adds	r3, r7, r3
   17e08:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   17e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17e0c:	4a32      	ldr	r2, [pc, #200]	; (17ed8 <vTraceStoreMemMangEvent+0x140>)
   17e0e:	0019      	movs	r1, r3
   17e10:	0010      	movs	r0, r2
   17e12:	4b32      	ldr	r3, [pc, #200]	; (17edc <vTraceStoreMemMangEvent+0x144>)
   17e14:	4798      	blx	r3
   17e16:	0002      	movs	r2, r0
   17e18:	232c      	movs	r3, #44	; 0x2c
   17e1a:	18fb      	adds	r3, r7, r3
   17e1c:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   17e1e:	4b30      	ldr	r3, [pc, #192]	; (17ee0 <vTraceStoreMemMangEvent+0x148>)
   17e20:	4798      	blx	r3
   17e22:	0003      	movs	r3, r0
   17e24:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   17e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e28:	2b00      	cmp	r3, #0
   17e2a:	d03e      	beq.n	17eaa <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   17e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e2e:	222f      	movs	r2, #47	; 0x2f
   17e30:	18ba      	adds	r2, r7, r2
   17e32:	7812      	ldrb	r2, [r2, #0]
   17e34:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   17e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e38:	2200      	movs	r2, #0
   17e3a:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   17e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e3e:	222c      	movs	r2, #44	; 0x2c
   17e40:	18ba      	adds	r2, r7, r2
   17e42:	8812      	ldrh	r2, [r2, #0]
   17e44:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   17e46:	4b27      	ldr	r3, [pc, #156]	; (17ee4 <vTraceStoreMemMangEvent+0x14c>)
   17e48:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   17e4a:	68bb      	ldr	r3, [r7, #8]
   17e4c:	4a22      	ldr	r2, [pc, #136]	; (17ed8 <vTraceStoreMemMangEvent+0x140>)
   17e4e:	0019      	movs	r1, r3
   17e50:	0010      	movs	r0, r2
   17e52:	4b22      	ldr	r3, [pc, #136]	; (17edc <vTraceStoreMemMangEvent+0x144>)
   17e54:	4798      	blx	r3
   17e56:	0002      	movs	r2, r0
   17e58:	2326      	movs	r3, #38	; 0x26
   17e5a:	18fb      	adds	r3, r7, r3
   17e5c:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   17e5e:	2325      	movs	r3, #37	; 0x25
   17e60:	18fb      	adds	r3, r7, r3
   17e62:	2200      	movs	r2, #0
   17e64:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   17e66:	4b1e      	ldr	r3, [pc, #120]	; (17ee0 <vTraceStoreMemMangEvent+0x148>)
   17e68:	4798      	blx	r3
   17e6a:	0003      	movs	r3, r0
   17e6c:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   17e6e:	6a3b      	ldr	r3, [r7, #32]
   17e70:	2b00      	cmp	r3, #0
   17e72:	d01a      	beq.n	17eaa <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   17e74:	6a3b      	ldr	r3, [r7, #32]
   17e76:	2226      	movs	r2, #38	; 0x26
   17e78:	18ba      	adds	r2, r7, r2
   17e7a:	8812      	ldrh	r2, [r2, #0]
   17e7c:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   17e7e:	6a3b      	ldr	r3, [r7, #32]
   17e80:	2225      	movs	r2, #37	; 0x25
   17e82:	18ba      	adds	r2, r7, r2
   17e84:	7812      	ldrb	r2, [r2, #0]
   17e86:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   17e88:	68fb      	ldr	r3, [r7, #12]
   17e8a:	b2db      	uxtb	r3, r3
   17e8c:	3301      	adds	r3, #1
   17e8e:	b2da      	uxtb	r2, r3
   17e90:	6a3b      	ldr	r3, [r7, #32]
   17e92:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   17e94:	68fb      	ldr	r3, [r7, #12]
   17e96:	b2da      	uxtb	r2, r3
   17e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17e9a:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   17e9c:	4b11      	ldr	r3, [pc, #68]	; (17ee4 <vTraceStoreMemMangEvent+0x14c>)
   17e9e:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   17ea0:	4b09      	ldr	r3, [pc, #36]	; (17ec8 <vTraceStoreMemMangEvent+0x130>)
   17ea2:	681b      	ldr	r3, [r3, #0]
   17ea4:	4a0a      	ldr	r2, [pc, #40]	; (17ed0 <vTraceStoreMemMangEvent+0x138>)
   17ea6:	6812      	ldr	r2, [r2, #0]
   17ea8:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   17eaa:	4b08      	ldr	r3, [pc, #32]	; (17ecc <vTraceStoreMemMangEvent+0x134>)
   17eac:	681b      	ldr	r3, [r3, #0]
   17eae:	1e5a      	subs	r2, r3, #1
   17eb0:	4b06      	ldr	r3, [pc, #24]	; (17ecc <vTraceStoreMemMangEvent+0x134>)
   17eb2:	601a      	str	r2, [r3, #0]
   17eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17eb6:	617b      	str	r3, [r7, #20]
   17eb8:	697b      	ldr	r3, [r7, #20]
   17eba:	f383 8810 	msr	PRIMASK, r3
   17ebe:	e000      	b.n	17ec2 <vTraceStoreMemMangEvent+0x12a>
		return;
   17ec0:	46c0      	nop			; (mov r8, r8)
}
   17ec2:	46bd      	mov	sp, r7
   17ec4:	b00e      	add	sp, #56	; 0x38
   17ec6:	bd80      	pop	{r7, pc}
   17ec8:	20000d34 	.word	0x20000d34
   17ecc:	20000c8c 	.word	0x20000c8c
   17ed0:	20000ca0 	.word	0x20000ca0
   17ed4:	00018fa1 	.word	0x00018fa1
   17ed8:	0000ffff 	.word	0x0000ffff
   17edc:	00018165 	.word	0x00018165
   17ee0:	00018945 	.word	0x00018945
   17ee4:	00018f49 	.word	0x00018f49

00017ee8 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   17ee8:	b590      	push	{r4, r7, lr}
   17eea:	b08b      	sub	sp, #44	; 0x2c
   17eec:	af00      	add	r7, sp, #0
   17eee:	60f8      	str	r0, [r7, #12]
   17ef0:	607a      	str	r2, [r7, #4]
   17ef2:	230b      	movs	r3, #11
   17ef4:	18fb      	adds	r3, r7, r3
   17ef6:	1c0a      	adds	r2, r1, #0
   17ef8:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   17efa:	68fb      	ldr	r3, [r7, #12]
   17efc:	2bfe      	cmp	r3, #254	; 0xfe
   17efe:	d904      	bls.n	17f0a <prvTraceStoreKernelCall+0x22>
   17f00:	4b39      	ldr	r3, [pc, #228]	; (17fe8 <prvTraceStoreKernelCall+0x100>)
   17f02:	0018      	movs	r0, r3
   17f04:	4b39      	ldr	r3, [pc, #228]	; (17fec <prvTraceStoreKernelCall+0x104>)
   17f06:	4798      	blx	r3
   17f08:	e06b      	b.n	17fe2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   17f0a:	230b      	movs	r3, #11
   17f0c:	18fb      	adds	r3, r7, r3
   17f0e:	781b      	ldrb	r3, [r3, #0]
   17f10:	2b08      	cmp	r3, #8
   17f12:	d904      	bls.n	17f1e <prvTraceStoreKernelCall+0x36>
   17f14:	4b36      	ldr	r3, [pc, #216]	; (17ff0 <prvTraceStoreKernelCall+0x108>)
   17f16:	0018      	movs	r0, r3
   17f18:	4b34      	ldr	r3, [pc, #208]	; (17fec <prvTraceStoreKernelCall+0x104>)
   17f1a:	4798      	blx	r3
   17f1c:	e061      	b.n	17fe2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   17f1e:	4b35      	ldr	r3, [pc, #212]	; (17ff4 <prvTraceStoreKernelCall+0x10c>)
   17f20:	681a      	ldr	r2, [r3, #0]
   17f22:	230b      	movs	r3, #11
   17f24:	18fb      	adds	r3, r7, r3
   17f26:	781b      	ldrb	r3, [r3, #0]
   17f28:	2164      	movs	r1, #100	; 0x64
   17f2a:	18d3      	adds	r3, r2, r3
   17f2c:	185b      	adds	r3, r3, r1
   17f2e:	781b      	ldrb	r3, [r3, #0]
   17f30:	001a      	movs	r2, r3
   17f32:	687b      	ldr	r3, [r7, #4]
   17f34:	429a      	cmp	r2, r3
   17f36:	d204      	bcs.n	17f42 <prvTraceStoreKernelCall+0x5a>
   17f38:	4b2f      	ldr	r3, [pc, #188]	; (17ff8 <prvTraceStoreKernelCall+0x110>)
   17f3a:	0018      	movs	r0, r3
   17f3c:	4b2b      	ldr	r3, [pc, #172]	; (17fec <prvTraceStoreKernelCall+0x104>)
   17f3e:	4798      	blx	r3
   17f40:	e04f      	b.n	17fe2 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   17f42:	4b2e      	ldr	r3, [pc, #184]	; (17ffc <prvTraceStoreKernelCall+0x114>)
   17f44:	681b      	ldr	r3, [r3, #0]
   17f46:	2b00      	cmp	r3, #0
   17f48:	d004      	beq.n	17f54 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   17f4a:	4b2d      	ldr	r3, [pc, #180]	; (18000 <prvTraceStoreKernelCall+0x118>)
   17f4c:	0018      	movs	r0, r3
   17f4e:	4b27      	ldr	r3, [pc, #156]	; (17fec <prvTraceStoreKernelCall+0x104>)
   17f50:	4798      	blx	r3
		return;
   17f52:	e046      	b.n	17fe2 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   17f54:	4b2b      	ldr	r3, [pc, #172]	; (18004 <prvTraceStoreKernelCall+0x11c>)
   17f56:	781b      	ldrb	r3, [r3, #0]
   17f58:	2b00      	cmp	r3, #0
   17f5a:	d041      	beq.n	17fe0 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17f5c:	f3ef 8310 	mrs	r3, PRIMASK
   17f60:	617b      	str	r3, [r7, #20]
  return(result);
   17f62:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   17f64:	627b      	str	r3, [r7, #36]	; 0x24
   17f66:	2301      	movs	r3, #1
   17f68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17f6a:	69bb      	ldr	r3, [r7, #24]
   17f6c:	f383 8810 	msr	PRIMASK, r3
   17f70:	4b22      	ldr	r3, [pc, #136]	; (17ffc <prvTraceStoreKernelCall+0x114>)
   17f72:	681b      	ldr	r3, [r3, #0]
   17f74:	1c5a      	adds	r2, r3, #1
   17f76:	4b21      	ldr	r3, [pc, #132]	; (17ffc <prvTraceStoreKernelCall+0x114>)
   17f78:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   17f7a:	4b1e      	ldr	r3, [pc, #120]	; (17ff4 <prvTraceStoreKernelCall+0x10c>)
   17f7c:	681b      	ldr	r3, [r3, #0]
   17f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17f80:	2b00      	cmp	r3, #0
   17f82:	d022      	beq.n	17fca <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   17f84:	2322      	movs	r3, #34	; 0x22
   17f86:	18fc      	adds	r4, r7, r3
   17f88:	4b1f      	ldr	r3, [pc, #124]	; (18008 <prvTraceStoreKernelCall+0x120>)
   17f8a:	0018      	movs	r0, r3
   17f8c:	4b1f      	ldr	r3, [pc, #124]	; (1800c <prvTraceStoreKernelCall+0x124>)
   17f8e:	4798      	blx	r3
   17f90:	0003      	movs	r3, r0
   17f92:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   17f94:	2321      	movs	r3, #33	; 0x21
   17f96:	18fb      	adds	r3, r7, r3
   17f98:	687a      	ldr	r2, [r7, #4]
   17f9a:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   17f9c:	4b1c      	ldr	r3, [pc, #112]	; (18010 <prvTraceStoreKernelCall+0x128>)
   17f9e:	4798      	blx	r3
   17fa0:	0003      	movs	r3, r0
   17fa2:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   17fa4:	69fb      	ldr	r3, [r7, #28]
   17fa6:	2b00      	cmp	r3, #0
   17fa8:	d00f      	beq.n	17fca <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   17faa:	69fb      	ldr	r3, [r7, #28]
   17fac:	2222      	movs	r2, #34	; 0x22
   17fae:	18ba      	adds	r2, r7, r2
   17fb0:	8812      	ldrh	r2, [r2, #0]
   17fb2:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   17fb4:	68fb      	ldr	r3, [r7, #12]
   17fb6:	b2da      	uxtb	r2, r3
   17fb8:	69fb      	ldr	r3, [r7, #28]
   17fba:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   17fbc:	69fb      	ldr	r3, [r7, #28]
   17fbe:	2221      	movs	r2, #33	; 0x21
   17fc0:	18ba      	adds	r2, r7, r2
   17fc2:	7812      	ldrb	r2, [r2, #0]
   17fc4:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   17fc6:	4b13      	ldr	r3, [pc, #76]	; (18014 <prvTraceStoreKernelCall+0x12c>)
   17fc8:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   17fca:	4b0c      	ldr	r3, [pc, #48]	; (17ffc <prvTraceStoreKernelCall+0x114>)
   17fcc:	681b      	ldr	r3, [r3, #0]
   17fce:	1e5a      	subs	r2, r3, #1
   17fd0:	4b0a      	ldr	r3, [pc, #40]	; (17ffc <prvTraceStoreKernelCall+0x114>)
   17fd2:	601a      	str	r2, [r3, #0]
   17fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17fd6:	613b      	str	r3, [r7, #16]
   17fd8:	693b      	ldr	r3, [r7, #16]
   17fda:	f383 8810 	msr	PRIMASK, r3
   17fde:	e000      	b.n	17fe2 <prvTraceStoreKernelCall+0xfa>
		return;
   17fe0:	46c0      	nop			; (mov r8, r8)
}
   17fe2:	46bd      	mov	sp, r7
   17fe4:	b00b      	add	sp, #44	; 0x2c
   17fe6:	bd90      	pop	{r4, r7, pc}
   17fe8:	0003647c 	.word	0x0003647c
   17fec:	00018d8d 	.word	0x00018d8d
   17ff0:	000364b4 	.word	0x000364b4
   17ff4:	20000d34 	.word	0x20000d34
   17ff8:	000364fc 	.word	0x000364fc
   17ffc:	20000c8c 	.word	0x20000c8c
   18000:	00036544 	.word	0x00036544
   18004:	20000c98 	.word	0x20000c98
   18008:	0000ffff 	.word	0x0000ffff
   1800c:	00018fa1 	.word	0x00018fa1
   18010:	00018945 	.word	0x00018945
   18014:	00018f49 	.word	0x00018f49

00018018 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   18018:	b580      	push	{r7, lr}
   1801a:	b08a      	sub	sp, #40	; 0x28
   1801c:	af00      	add	r7, sp, #0
   1801e:	60f8      	str	r0, [r7, #12]
   18020:	607a      	str	r2, [r7, #4]
   18022:	603b      	str	r3, [r7, #0]
   18024:	230b      	movs	r3, #11
   18026:	18fb      	adds	r3, r7, r3
   18028:	1c0a      	adds	r2, r1, #0
   1802a:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   1802c:	68fb      	ldr	r3, [r7, #12]
   1802e:	2bfe      	cmp	r3, #254	; 0xfe
   18030:	d904      	bls.n	1803c <prvTraceStoreKernelCallWithParam+0x24>
   18032:	4b40      	ldr	r3, [pc, #256]	; (18134 <prvTraceStoreKernelCallWithParam+0x11c>)
   18034:	0018      	movs	r0, r3
   18036:	4b40      	ldr	r3, [pc, #256]	; (18138 <prvTraceStoreKernelCallWithParam+0x120>)
   18038:	4798      	blx	r3
   1803a:	e077      	b.n	1812c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1803c:	230b      	movs	r3, #11
   1803e:	18fb      	adds	r3, r7, r3
   18040:	781b      	ldrb	r3, [r3, #0]
   18042:	2b08      	cmp	r3, #8
   18044:	d904      	bls.n	18050 <prvTraceStoreKernelCallWithParam+0x38>
   18046:	4b3d      	ldr	r3, [pc, #244]	; (1813c <prvTraceStoreKernelCallWithParam+0x124>)
   18048:	0018      	movs	r0, r3
   1804a:	4b3b      	ldr	r3, [pc, #236]	; (18138 <prvTraceStoreKernelCallWithParam+0x120>)
   1804c:	4798      	blx	r3
   1804e:	e06d      	b.n	1812c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   18050:	4b3b      	ldr	r3, [pc, #236]	; (18140 <prvTraceStoreKernelCallWithParam+0x128>)
   18052:	681a      	ldr	r2, [r3, #0]
   18054:	230b      	movs	r3, #11
   18056:	18fb      	adds	r3, r7, r3
   18058:	781b      	ldrb	r3, [r3, #0]
   1805a:	2164      	movs	r1, #100	; 0x64
   1805c:	18d3      	adds	r3, r2, r3
   1805e:	185b      	adds	r3, r3, r1
   18060:	781b      	ldrb	r3, [r3, #0]
   18062:	001a      	movs	r2, r3
   18064:	687b      	ldr	r3, [r7, #4]
   18066:	429a      	cmp	r2, r3
   18068:	d204      	bcs.n	18074 <prvTraceStoreKernelCallWithParam+0x5c>
   1806a:	4b36      	ldr	r3, [pc, #216]	; (18144 <prvTraceStoreKernelCallWithParam+0x12c>)
   1806c:	0018      	movs	r0, r3
   1806e:	4b32      	ldr	r3, [pc, #200]	; (18138 <prvTraceStoreKernelCallWithParam+0x120>)
   18070:	4798      	blx	r3
   18072:	e05b      	b.n	1812c <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   18074:	4b34      	ldr	r3, [pc, #208]	; (18148 <prvTraceStoreKernelCallWithParam+0x130>)
   18076:	681b      	ldr	r3, [r3, #0]
   18078:	2b00      	cmp	r3, #0
   1807a:	d004      	beq.n	18086 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   1807c:	4b33      	ldr	r3, [pc, #204]	; (1814c <prvTraceStoreKernelCallWithParam+0x134>)
   1807e:	0018      	movs	r0, r3
   18080:	4b2d      	ldr	r3, [pc, #180]	; (18138 <prvTraceStoreKernelCallWithParam+0x120>)
   18082:	4798      	blx	r3
		return;
   18084:	e052      	b.n	1812c <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18086:	f3ef 8310 	mrs	r3, PRIMASK
   1808a:	617b      	str	r3, [r7, #20]
  return(result);
   1808c:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   1808e:	627b      	str	r3, [r7, #36]	; 0x24
   18090:	2301      	movs	r3, #1
   18092:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18094:	69bb      	ldr	r3, [r7, #24]
   18096:	f383 8810 	msr	PRIMASK, r3
   1809a:	4b2b      	ldr	r3, [pc, #172]	; (18148 <prvTraceStoreKernelCallWithParam+0x130>)
   1809c:	681b      	ldr	r3, [r3, #0]
   1809e:	1c5a      	adds	r2, r3, #1
   180a0:	4b29      	ldr	r3, [pc, #164]	; (18148 <prvTraceStoreKernelCallWithParam+0x130>)
   180a2:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   180a4:	4b26      	ldr	r3, [pc, #152]	; (18140 <prvTraceStoreKernelCallWithParam+0x128>)
   180a6:	681b      	ldr	r3, [r3, #0]
   180a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   180aa:	2b00      	cmp	r3, #0
   180ac:	d034      	beq.n	18118 <prvTraceStoreKernelCallWithParam+0x100>
   180ae:	4b28      	ldr	r3, [pc, #160]	; (18150 <prvTraceStoreKernelCallWithParam+0x138>)
   180b0:	781b      	ldrb	r3, [r3, #0]
   180b2:	2b00      	cmp	r3, #0
   180b4:	d030      	beq.n	18118 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   180b6:	20ff      	movs	r0, #255	; 0xff
   180b8:	4b26      	ldr	r3, [pc, #152]	; (18154 <prvTraceStoreKernelCallWithParam+0x13c>)
   180ba:	4798      	blx	r3
   180bc:	0003      	movs	r3, r0
   180be:	001a      	movs	r2, r3
   180c0:	2323      	movs	r3, #35	; 0x23
   180c2:	18fb      	adds	r3, r7, r3
   180c4:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   180c6:	683b      	ldr	r3, [r7, #0]
   180c8:	0019      	movs	r1, r3
   180ca:	20ff      	movs	r0, #255	; 0xff
   180cc:	4b22      	ldr	r3, [pc, #136]	; (18158 <prvTraceStoreKernelCallWithParam+0x140>)
   180ce:	4798      	blx	r3
   180d0:	0002      	movs	r2, r0
   180d2:	2322      	movs	r3, #34	; 0x22
   180d4:	18fb      	adds	r3, r7, r3
   180d6:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   180d8:	2321      	movs	r3, #33	; 0x21
   180da:	18fb      	adds	r3, r7, r3
   180dc:	687a      	ldr	r2, [r7, #4]
   180de:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   180e0:	4b1e      	ldr	r3, [pc, #120]	; (1815c <prvTraceStoreKernelCallWithParam+0x144>)
   180e2:	4798      	blx	r3
   180e4:	0003      	movs	r3, r0
   180e6:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   180e8:	69fb      	ldr	r3, [r7, #28]
   180ea:	2b00      	cmp	r3, #0
   180ec:	d014      	beq.n	18118 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   180ee:	69fb      	ldr	r3, [r7, #28]
   180f0:	2223      	movs	r2, #35	; 0x23
   180f2:	18ba      	adds	r2, r7, r2
   180f4:	7812      	ldrb	r2, [r2, #0]
   180f6:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   180f8:	68fb      	ldr	r3, [r7, #12]
   180fa:	b2da      	uxtb	r2, r3
   180fc:	69fb      	ldr	r3, [r7, #28]
   180fe:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   18100:	69fb      	ldr	r3, [r7, #28]
   18102:	2221      	movs	r2, #33	; 0x21
   18104:	18ba      	adds	r2, r7, r2
   18106:	7812      	ldrb	r2, [r2, #0]
   18108:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   1810a:	69fb      	ldr	r3, [r7, #28]
   1810c:	2222      	movs	r2, #34	; 0x22
   1810e:	18ba      	adds	r2, r7, r2
   18110:	7812      	ldrb	r2, [r2, #0]
   18112:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   18114:	4b12      	ldr	r3, [pc, #72]	; (18160 <prvTraceStoreKernelCallWithParam+0x148>)
   18116:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18118:	4b0b      	ldr	r3, [pc, #44]	; (18148 <prvTraceStoreKernelCallWithParam+0x130>)
   1811a:	681b      	ldr	r3, [r3, #0]
   1811c:	1e5a      	subs	r2, r3, #1
   1811e:	4b0a      	ldr	r3, [pc, #40]	; (18148 <prvTraceStoreKernelCallWithParam+0x130>)
   18120:	601a      	str	r2, [r3, #0]
   18122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18124:	613b      	str	r3, [r7, #16]
   18126:	693b      	ldr	r3, [r7, #16]
   18128:	f383 8810 	msr	PRIMASK, r3
}
   1812c:	46bd      	mov	sp, r7
   1812e:	b00a      	add	sp, #40	; 0x28
   18130:	bd80      	pop	{r7, pc}
   18132:	46c0      	nop			; (mov r8, r8)
   18134:	0003657c 	.word	0x0003657c
   18138:	00018d8d 	.word	0x00018d8d
   1813c:	000365bc 	.word	0x000365bc
   18140:	20000d34 	.word	0x20000d34
   18144:	0003660c 	.word	0x0003660c
   18148:	20000c8c 	.word	0x20000c8c
   1814c:	0003665c 	.word	0x0003665c
   18150:	20000c98 	.word	0x20000c98
   18154:	00018fa1 	.word	0x00018fa1
   18158:	00018165 	.word	0x00018165
   1815c:	00018945 	.word	0x00018945
   18160:	00018f49 	.word	0x00018f49

00018164 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   18164:	b580      	push	{r7, lr}
   18166:	b084      	sub	sp, #16
   18168:	af00      	add	r7, sp, #0
   1816a:	6078      	str	r0, [r7, #4]
   1816c:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   1816e:	687b      	ldr	r3, [r7, #4]
   18170:	2bff      	cmp	r3, #255	; 0xff
   18172:	d009      	beq.n	18188 <prvTraceGetParam+0x24>
   18174:	687b      	ldr	r3, [r7, #4]
   18176:	4a19      	ldr	r2, [pc, #100]	; (181dc <prvTraceGetParam+0x78>)
   18178:	4293      	cmp	r3, r2
   1817a:	d005      	beq.n	18188 <prvTraceGetParam+0x24>
   1817c:	4b18      	ldr	r3, [pc, #96]	; (181e0 <prvTraceGetParam+0x7c>)
   1817e:	0018      	movs	r0, r3
   18180:	4b18      	ldr	r3, [pc, #96]	; (181e4 <prvTraceGetParam+0x80>)
   18182:	4798      	blx	r3
   18184:	683b      	ldr	r3, [r7, #0]
   18186:	e024      	b.n	181d2 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   18188:	683a      	ldr	r2, [r7, #0]
   1818a:	687b      	ldr	r3, [r7, #4]
   1818c:	429a      	cmp	r2, r3
   1818e:	d801      	bhi.n	18194 <prvTraceGetParam+0x30>
	{
		return param;
   18190:	683b      	ldr	r3, [r7, #0]
   18192:	e01e      	b.n	181d2 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   18194:	4b14      	ldr	r3, [pc, #80]	; (181e8 <prvTraceGetParam+0x84>)
   18196:	4798      	blx	r3
   18198:	0003      	movs	r3, r0
   1819a:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   1819c:	68fb      	ldr	r3, [r7, #12]
   1819e:	2b00      	cmp	r3, #0
   181a0:	d014      	beq.n	181cc <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   181a2:	68fb      	ldr	r3, [r7, #12]
   181a4:	2201      	movs	r2, #1
   181a6:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   181a8:	687b      	ldr	r3, [r7, #4]
   181aa:	43db      	mvns	r3, r3
   181ac:	683a      	ldr	r2, [r7, #0]
   181ae:	4013      	ands	r3, r2
   181b0:	0a1b      	lsrs	r3, r3, #8
   181b2:	b2da      	uxtb	r2, r3
   181b4:	68fb      	ldr	r3, [r7, #12]
   181b6:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   181b8:	687b      	ldr	r3, [r7, #4]
   181ba:	43db      	mvns	r3, r3
   181bc:	683a      	ldr	r2, [r7, #0]
   181be:	4013      	ands	r3, r2
   181c0:	0c1b      	lsrs	r3, r3, #16
   181c2:	b29a      	uxth	r2, r3
   181c4:	68fb      	ldr	r3, [r7, #12]
   181c6:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   181c8:	4b08      	ldr	r3, [pc, #32]	; (181ec <prvTraceGetParam+0x88>)
   181ca:	4798      	blx	r3
		}

		return param & param_max;
   181cc:	683b      	ldr	r3, [r7, #0]
   181ce:	687a      	ldr	r2, [r7, #4]
   181d0:	4013      	ands	r3, r2
	}
}
   181d2:	0018      	movs	r0, r3
   181d4:	46bd      	mov	sp, r7
   181d6:	b004      	add	sp, #16
   181d8:	bd80      	pop	{r7, pc}
   181da:	46c0      	nop			; (mov r8, r8)
   181dc:	0000ffff 	.word	0x0000ffff
   181e0:	00036694 	.word	0x00036694
   181e4:	00018d8d 	.word	0x00018d8d
   181e8:	00018945 	.word	0x00018945
   181ec:	00018f49 	.word	0x00018f49

000181f0 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   181f0:	b580      	push	{r7, lr}
   181f2:	b08a      	sub	sp, #40	; 0x28
   181f4:	af00      	add	r7, sp, #0
   181f6:	6078      	str	r0, [r7, #4]
   181f8:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   181fa:	2326      	movs	r3, #38	; 0x26
   181fc:	18fb      	adds	r3, r7, r3
   181fe:	2200      	movs	r2, #0
   18200:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   18202:	687b      	ldr	r3, [r7, #4]
   18204:	2bfe      	cmp	r3, #254	; 0xfe
   18206:	d904      	bls.n	18212 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   18208:	4b2d      	ldr	r3, [pc, #180]	; (182c0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   1820a:	0018      	movs	r0, r3
   1820c:	4b2d      	ldr	r3, [pc, #180]	; (182c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1820e:	4798      	blx	r3
   18210:	e053      	b.n	182ba <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   18212:	4b2d      	ldr	r3, [pc, #180]	; (182c8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18214:	681b      	ldr	r3, [r3, #0]
   18216:	2b00      	cmp	r3, #0
   18218:	d004      	beq.n	18224 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   1821a:	4b2c      	ldr	r3, [pc, #176]	; (182cc <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   1821c:	0018      	movs	r0, r3
   1821e:	4b29      	ldr	r3, [pc, #164]	; (182c4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   18220:	4798      	blx	r3
		return;
   18222:	e04a      	b.n	182ba <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18224:	f3ef 8310 	mrs	r3, PRIMASK
   18228:	613b      	str	r3, [r7, #16]
  return(result);
   1822a:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   1822c:	623b      	str	r3, [r7, #32]
   1822e:	2301      	movs	r3, #1
   18230:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18232:	697b      	ldr	r3, [r7, #20]
   18234:	f383 8810 	msr	PRIMASK, r3
   18238:	4b23      	ldr	r3, [pc, #140]	; (182c8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1823a:	681b      	ldr	r3, [r3, #0]
   1823c:	1c5a      	adds	r2, r3, #1
   1823e:	4b22      	ldr	r3, [pc, #136]	; (182c8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18240:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   18242:	4b23      	ldr	r3, [pc, #140]	; (182d0 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   18244:	681b      	ldr	r3, [r3, #0]
   18246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18248:	2b00      	cmp	r3, #0
   1824a:	d02c      	beq.n	182a6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   1824c:	4b21      	ldr	r3, [pc, #132]	; (182d4 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   1824e:	781b      	ldrb	r3, [r3, #0]
   18250:	2b00      	cmp	r3, #0
   18252:	d028      	beq.n	182a6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   18254:	20ff      	movs	r0, #255	; 0xff
   18256:	4b20      	ldr	r3, [pc, #128]	; (182d8 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   18258:	4798      	blx	r3
   1825a:	0003      	movs	r3, r0
   1825c:	001a      	movs	r2, r3
   1825e:	231f      	movs	r3, #31
   18260:	18fb      	adds	r3, r7, r3
   18262:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   18264:	683b      	ldr	r3, [r7, #0]
   18266:	4a1d      	ldr	r2, [pc, #116]	; (182dc <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   18268:	0019      	movs	r1, r3
   1826a:	0010      	movs	r0, r2
   1826c:	4b1c      	ldr	r3, [pc, #112]	; (182e0 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   1826e:	4798      	blx	r3
   18270:	0002      	movs	r2, r0
   18272:	2326      	movs	r3, #38	; 0x26
   18274:	18fb      	adds	r3, r7, r3
   18276:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   18278:	4b1a      	ldr	r3, [pc, #104]	; (182e4 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   1827a:	4798      	blx	r3
   1827c:	0003      	movs	r3, r0
   1827e:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   18280:	69bb      	ldr	r3, [r7, #24]
   18282:	2b00      	cmp	r3, #0
   18284:	d00f      	beq.n	182a6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   18286:	69bb      	ldr	r3, [r7, #24]
   18288:	221f      	movs	r2, #31
   1828a:	18ba      	adds	r2, r7, r2
   1828c:	7812      	ldrb	r2, [r2, #0]
   1828e:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   18290:	687b      	ldr	r3, [r7, #4]
   18292:	b2da      	uxtb	r2, r3
   18294:	69bb      	ldr	r3, [r7, #24]
   18296:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   18298:	69bb      	ldr	r3, [r7, #24]
   1829a:	2226      	movs	r2, #38	; 0x26
   1829c:	18ba      	adds	r2, r7, r2
   1829e:	8812      	ldrh	r2, [r2, #0]
   182a0:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   182a2:	4b11      	ldr	r3, [pc, #68]	; (182e8 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   182a4:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   182a6:	4b08      	ldr	r3, [pc, #32]	; (182c8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   182a8:	681b      	ldr	r3, [r3, #0]
   182aa:	1e5a      	subs	r2, r3, #1
   182ac:	4b06      	ldr	r3, [pc, #24]	; (182c8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   182ae:	601a      	str	r2, [r3, #0]
   182b0:	6a3b      	ldr	r3, [r7, #32]
   182b2:	60fb      	str	r3, [r7, #12]
   182b4:	68fb      	ldr	r3, [r7, #12]
   182b6:	f383 8810 	msr	PRIMASK, r3
}
   182ba:	46bd      	mov	sp, r7
   182bc:	b00a      	add	sp, #40	; 0x28
   182be:	bd80      	pop	{r7, pc}
   182c0:	000366d0 	.word	0x000366d0
   182c4:	00018d8d 	.word	0x00018d8d
   182c8:	20000c8c 	.word	0x20000c8c
   182cc:	00036728 	.word	0x00036728
   182d0:	20000d34 	.word	0x20000d34
   182d4:	20000c98 	.word	0x20000c98
   182d8:	00018fa1 	.word	0x00018fa1
   182dc:	0000ffff 	.word	0x0000ffff
   182e0:	00018165 	.word	0x00018165
   182e4:	00018945 	.word	0x00018945
   182e8:	00018f49 	.word	0x00018f49

000182ec <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   182ec:	b590      	push	{r4, r7, lr}
   182ee:	b089      	sub	sp, #36	; 0x24
   182f0:	af00      	add	r7, sp, #0
   182f2:	0002      	movs	r2, r0
   182f4:	1dfb      	adds	r3, r7, #7
   182f6:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   182f8:	1dfb      	adds	r3, r7, #7
   182fa:	781b      	ldrb	r3, [r3, #0]
   182fc:	2b0f      	cmp	r3, #15
   182fe:	d904      	bls.n	1830a <prvTraceStoreTaskswitch+0x1e>
   18300:	4b34      	ldr	r3, [pc, #208]	; (183d4 <prvTraceStoreTaskswitch+0xe8>)
   18302:	0018      	movs	r0, r3
   18304:	4b34      	ldr	r3, [pc, #208]	; (183d8 <prvTraceStoreTaskswitch+0xec>)
   18306:	4798      	blx	r3
   18308:	e061      	b.n	183ce <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1830a:	f3ef 8310 	mrs	r3, PRIMASK
   1830e:	60fb      	str	r3, [r7, #12]
  return(result);
   18310:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   18312:	61fb      	str	r3, [r7, #28]
   18314:	2301      	movs	r3, #1
   18316:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18318:	693b      	ldr	r3, [r7, #16]
   1831a:	f383 8810 	msr	PRIMASK, r3
   1831e:	4b2f      	ldr	r3, [pc, #188]	; (183dc <prvTraceStoreTaskswitch+0xf0>)
   18320:	681b      	ldr	r3, [r3, #0]
   18322:	1c5a      	adds	r2, r3, #1
   18324:	4b2d      	ldr	r3, [pc, #180]	; (183dc <prvTraceStoreTaskswitch+0xf0>)
   18326:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   18328:	4b2d      	ldr	r3, [pc, #180]	; (183e0 <prvTraceStoreTaskswitch+0xf4>)
   1832a:	781b      	ldrb	r3, [r3, #0]
   1832c:	1dfa      	adds	r2, r7, #7
   1832e:	7812      	ldrb	r2, [r2, #0]
   18330:	429a      	cmp	r2, r3
   18332:	d042      	beq.n	183ba <prvTraceStoreTaskswitch+0xce>
   18334:	4b2b      	ldr	r3, [pc, #172]	; (183e4 <prvTraceStoreTaskswitch+0xf8>)
   18336:	681b      	ldr	r3, [r3, #0]
   18338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1833a:	2b00      	cmp	r3, #0
   1833c:	d03d      	beq.n	183ba <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   1833e:	4b2a      	ldr	r3, [pc, #168]	; (183e8 <prvTraceStoreTaskswitch+0xfc>)
   18340:	2200      	movs	r2, #0
   18342:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18344:	231a      	movs	r3, #26
   18346:	18fc      	adds	r4, r7, r3
   18348:	4b28      	ldr	r3, [pc, #160]	; (183ec <prvTraceStoreTaskswitch+0x100>)
   1834a:	0018      	movs	r0, r3
   1834c:	4b28      	ldr	r3, [pc, #160]	; (183f0 <prvTraceStoreTaskswitch+0x104>)
   1834e:	4798      	blx	r3
   18350:	0003      	movs	r3, r0
   18352:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   18354:	4b22      	ldr	r3, [pc, #136]	; (183e0 <prvTraceStoreTaskswitch+0xf4>)
   18356:	1dfa      	adds	r2, r7, #7
   18358:	7812      	ldrb	r2, [r2, #0]
   1835a:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   1835c:	2319      	movs	r3, #25
   1835e:	18fb      	adds	r3, r7, r3
   18360:	4a1f      	ldr	r2, [pc, #124]	; (183e0 <prvTraceStoreTaskswitch+0xf4>)
   18362:	7812      	ldrb	r2, [r2, #0]
   18364:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   18366:	4b23      	ldr	r3, [pc, #140]	; (183f4 <prvTraceStoreTaskswitch+0x108>)
   18368:	4798      	blx	r3
   1836a:	0003      	movs	r3, r0
   1836c:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   1836e:	697b      	ldr	r3, [r7, #20]
   18370:	2b00      	cmp	r3, #0
   18372:	d022      	beq.n	183ba <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   18374:	4b1a      	ldr	r3, [pc, #104]	; (183e0 <prvTraceStoreTaskswitch+0xf4>)
   18376:	781b      	ldrb	r3, [r3, #0]
   18378:	0019      	movs	r1, r3
   1837a:	2003      	movs	r0, #3
   1837c:	4b1e      	ldr	r3, [pc, #120]	; (183f8 <prvTraceStoreTaskswitch+0x10c>)
   1837e:	4798      	blx	r3
   18380:	0003      	movs	r3, r0
   18382:	2b01      	cmp	r3, #1
   18384:	d103      	bne.n	1838e <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   18386:	697b      	ldr	r3, [r7, #20]
   18388:	2207      	movs	r2, #7
   1838a:	701a      	strb	r2, [r3, #0]
   1838c:	e002      	b.n	18394 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   1838e:	697b      	ldr	r3, [r7, #20]
   18390:	2206      	movs	r2, #6
   18392:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   18394:	697b      	ldr	r3, [r7, #20]
   18396:	221a      	movs	r2, #26
   18398:	18ba      	adds	r2, r7, r2
   1839a:	8812      	ldrh	r2, [r2, #0]
   1839c:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   1839e:	697b      	ldr	r3, [r7, #20]
   183a0:	2219      	movs	r2, #25
   183a2:	18ba      	adds	r2, r7, r2
   183a4:	7812      	ldrb	r2, [r2, #0]
   183a6:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   183a8:	4b0d      	ldr	r3, [pc, #52]	; (183e0 <prvTraceStoreTaskswitch+0xf4>)
   183aa:	781b      	ldrb	r3, [r3, #0]
   183ac:	2201      	movs	r2, #1
   183ae:	0019      	movs	r1, r3
   183b0:	2003      	movs	r0, #3
   183b2:	4b12      	ldr	r3, [pc, #72]	; (183fc <prvTraceStoreTaskswitch+0x110>)
   183b4:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   183b6:	4b12      	ldr	r3, [pc, #72]	; (18400 <prvTraceStoreTaskswitch+0x114>)
   183b8:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   183ba:	4b08      	ldr	r3, [pc, #32]	; (183dc <prvTraceStoreTaskswitch+0xf0>)
   183bc:	681b      	ldr	r3, [r3, #0]
   183be:	1e5a      	subs	r2, r3, #1
   183c0:	4b06      	ldr	r3, [pc, #24]	; (183dc <prvTraceStoreTaskswitch+0xf0>)
   183c2:	601a      	str	r2, [r3, #0]
   183c4:	69fb      	ldr	r3, [r7, #28]
   183c6:	60bb      	str	r3, [r7, #8]
   183c8:	68bb      	ldr	r3, [r7, #8]
   183ca:	f383 8810 	msr	PRIMASK, r3
}
   183ce:	46bd      	mov	sp, r7
   183d0:	b009      	add	sp, #36	; 0x24
   183d2:	bd90      	pop	{r4, r7, pc}
   183d4:	00036760 	.word	0x00036760
   183d8:	00018d8d 	.word	0x00018d8d
   183dc:	20000c8c 	.word	0x20000c8c
   183e0:	20000c98 	.word	0x20000c98
   183e4:	20000d34 	.word	0x20000d34
   183e8:	20000c78 	.word	0x20000c78
   183ec:	0000ffff 	.word	0x0000ffff
   183f0:	00018fa1 	.word	0x00018fa1
   183f4:	00018945 	.word	0x00018945
   183f8:	000185e9 	.word	0x000185e9
   183fc:	00018545 	.word	0x00018545
   18400:	00018f49 	.word	0x00018f49

00018404 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18404:	b590      	push	{r4, r7, lr}
   18406:	b083      	sub	sp, #12
   18408:	af00      	add	r7, sp, #0
   1840a:	0004      	movs	r4, r0
   1840c:	0008      	movs	r0, r1
   1840e:	0011      	movs	r1, r2
   18410:	1dfb      	adds	r3, r7, #7
   18412:	1c22      	adds	r2, r4, #0
   18414:	701a      	strb	r2, [r3, #0]
   18416:	1dbb      	adds	r3, r7, #6
   18418:	1c02      	adds	r2, r0, #0
   1841a:	701a      	strb	r2, [r3, #0]
   1841c:	1d7b      	adds	r3, r7, #5
   1841e:	1c0a      	adds	r2, r1, #0
   18420:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18422:	1dfb      	adds	r3, r7, #7
   18424:	781b      	ldrb	r3, [r3, #0]
   18426:	2b08      	cmp	r3, #8
   18428:	d904      	bls.n	18434 <prvTraceSetPriorityProperty+0x30>
   1842a:	4b1a      	ldr	r3, [pc, #104]	; (18494 <prvTraceSetPriorityProperty+0x90>)
   1842c:	0018      	movs	r0, r3
   1842e:	4b1a      	ldr	r3, [pc, #104]	; (18498 <prvTraceSetPriorityProperty+0x94>)
   18430:	4798      	blx	r3
   18432:	e02c      	b.n	1848e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18434:	4b19      	ldr	r3, [pc, #100]	; (1849c <prvTraceSetPriorityProperty+0x98>)
   18436:	681a      	ldr	r2, [r3, #0]
   18438:	1dfb      	adds	r3, r7, #7
   1843a:	781b      	ldrb	r3, [r3, #0]
   1843c:	2164      	movs	r1, #100	; 0x64
   1843e:	18d3      	adds	r3, r2, r3
   18440:	185b      	adds	r3, r3, r1
   18442:	781b      	ldrb	r3, [r3, #0]
   18444:	1dba      	adds	r2, r7, #6
   18446:	7812      	ldrb	r2, [r2, #0]
   18448:	429a      	cmp	r2, r3
   1844a:	d904      	bls.n	18456 <prvTraceSetPriorityProperty+0x52>
   1844c:	4b14      	ldr	r3, [pc, #80]	; (184a0 <prvTraceSetPriorityProperty+0x9c>)
   1844e:	0018      	movs	r0, r3
   18450:	4b11      	ldr	r3, [pc, #68]	; (18498 <prvTraceSetPriorityProperty+0x94>)
   18452:	4798      	blx	r3
   18454:	e01b      	b.n	1848e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   18456:	4b11      	ldr	r3, [pc, #68]	; (1849c <prvTraceSetPriorityProperty+0x98>)
   18458:	681c      	ldr	r4, [r3, #0]
   1845a:	1dfb      	adds	r3, r7, #7
   1845c:	781a      	ldrb	r2, [r3, #0]
   1845e:	1dbb      	adds	r3, r7, #6
   18460:	781b      	ldrb	r3, [r3, #0]
   18462:	0011      	movs	r1, r2
   18464:	0018      	movs	r0, r3
   18466:	4b0f      	ldr	r3, [pc, #60]	; (184a4 <prvTraceSetPriorityProperty+0xa0>)
   18468:	4798      	blx	r3
   1846a:	0003      	movs	r3, r0
   1846c:	0018      	movs	r0, r3
   1846e:	4b0b      	ldr	r3, [pc, #44]	; (1849c <prvTraceSetPriorityProperty+0x98>)
   18470:	681a      	ldr	r2, [r3, #0]
   18472:	1dfb      	adds	r3, r7, #7
   18474:	781b      	ldrb	r3, [r3, #0]
   18476:	2170      	movs	r1, #112	; 0x70
   18478:	18d3      	adds	r3, r2, r3
   1847a:	185b      	adds	r3, r3, r1
   1847c:	781b      	ldrb	r3, [r3, #0]
   1847e:	18c3      	adds	r3, r0, r3
   18480:	3301      	adds	r3, #1
   18482:	229c      	movs	r2, #156	; 0x9c
   18484:	18e3      	adds	r3, r4, r3
   18486:	189b      	adds	r3, r3, r2
   18488:	1d7a      	adds	r2, r7, #5
   1848a:	7812      	ldrb	r2, [r2, #0]
   1848c:	701a      	strb	r2, [r3, #0]
}
   1848e:	46bd      	mov	sp, r7
   18490:	b003      	add	sp, #12
   18492:	bd90      	pop	{r4, r7, pc}
   18494:	000368f4 	.word	0x000368f4
   18498:	00018d8d 	.word	0x00018d8d
   1849c:	20000d34 	.word	0x20000d34
   184a0:	00036940 	.word	0x00036940
   184a4:	00018999 	.word	0x00018999

000184a8 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   184a8:	b590      	push	{r4, r7, lr}
   184aa:	b083      	sub	sp, #12
   184ac:	af00      	add	r7, sp, #0
   184ae:	0002      	movs	r2, r0
   184b0:	1dfb      	adds	r3, r7, #7
   184b2:	701a      	strb	r2, [r3, #0]
   184b4:	1dbb      	adds	r3, r7, #6
   184b6:	1c0a      	adds	r2, r1, #0
   184b8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   184ba:	1dfb      	adds	r3, r7, #7
   184bc:	781b      	ldrb	r3, [r3, #0]
   184be:	2b08      	cmp	r3, #8
   184c0:	d905      	bls.n	184ce <prvTraceGetPriorityProperty+0x26>
   184c2:	4b1b      	ldr	r3, [pc, #108]	; (18530 <prvTraceGetPriorityProperty+0x88>)
   184c4:	0018      	movs	r0, r3
   184c6:	4b1b      	ldr	r3, [pc, #108]	; (18534 <prvTraceGetPriorityProperty+0x8c>)
   184c8:	4798      	blx	r3
   184ca:	2300      	movs	r3, #0
   184cc:	e02b      	b.n	18526 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   184ce:	4b1a      	ldr	r3, [pc, #104]	; (18538 <prvTraceGetPriorityProperty+0x90>)
   184d0:	681a      	ldr	r2, [r3, #0]
   184d2:	1dfb      	adds	r3, r7, #7
   184d4:	781b      	ldrb	r3, [r3, #0]
   184d6:	2164      	movs	r1, #100	; 0x64
   184d8:	18d3      	adds	r3, r2, r3
   184da:	185b      	adds	r3, r3, r1
   184dc:	781b      	ldrb	r3, [r3, #0]
   184de:	1dba      	adds	r2, r7, #6
   184e0:	7812      	ldrb	r2, [r2, #0]
   184e2:	429a      	cmp	r2, r3
   184e4:	d905      	bls.n	184f2 <prvTraceGetPriorityProperty+0x4a>
   184e6:	4b15      	ldr	r3, [pc, #84]	; (1853c <prvTraceGetPriorityProperty+0x94>)
   184e8:	0018      	movs	r0, r3
   184ea:	4b12      	ldr	r3, [pc, #72]	; (18534 <prvTraceGetPriorityProperty+0x8c>)
   184ec:	4798      	blx	r3
   184ee:	2300      	movs	r3, #0
   184f0:	e019      	b.n	18526 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   184f2:	4b11      	ldr	r3, [pc, #68]	; (18538 <prvTraceGetPriorityProperty+0x90>)
   184f4:	681c      	ldr	r4, [r3, #0]
   184f6:	1dfb      	adds	r3, r7, #7
   184f8:	781a      	ldrb	r2, [r3, #0]
   184fa:	1dbb      	adds	r3, r7, #6
   184fc:	781b      	ldrb	r3, [r3, #0]
   184fe:	0011      	movs	r1, r2
   18500:	0018      	movs	r0, r3
   18502:	4b0f      	ldr	r3, [pc, #60]	; (18540 <prvTraceGetPriorityProperty+0x98>)
   18504:	4798      	blx	r3
   18506:	0003      	movs	r3, r0
   18508:	0018      	movs	r0, r3
   1850a:	4b0b      	ldr	r3, [pc, #44]	; (18538 <prvTraceGetPriorityProperty+0x90>)
   1850c:	681a      	ldr	r2, [r3, #0]
   1850e:	1dfb      	adds	r3, r7, #7
   18510:	781b      	ldrb	r3, [r3, #0]
   18512:	2170      	movs	r1, #112	; 0x70
   18514:	18d3      	adds	r3, r2, r3
   18516:	185b      	adds	r3, r3, r1
   18518:	781b      	ldrb	r3, [r3, #0]
   1851a:	18c3      	adds	r3, r0, r3
   1851c:	3301      	adds	r3, #1
   1851e:	229c      	movs	r2, #156	; 0x9c
   18520:	18e3      	adds	r3, r4, r3
   18522:	189b      	adds	r3, r3, r2
   18524:	781b      	ldrb	r3, [r3, #0]
}
   18526:	0018      	movs	r0, r3
   18528:	46bd      	mov	sp, r7
   1852a:	b003      	add	sp, #12
   1852c:	bd90      	pop	{r4, r7, pc}
   1852e:	46c0      	nop			; (mov r8, r8)
   18530:	00036980 	.word	0x00036980
   18534:	00018d8d 	.word	0x00018d8d
   18538:	20000d34 	.word	0x20000d34
   1853c:	000369cc 	.word	0x000369cc
   18540:	00018999 	.word	0x00018999

00018544 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18544:	b590      	push	{r4, r7, lr}
   18546:	b083      	sub	sp, #12
   18548:	af00      	add	r7, sp, #0
   1854a:	0004      	movs	r4, r0
   1854c:	0008      	movs	r0, r1
   1854e:	0011      	movs	r1, r2
   18550:	1dfb      	adds	r3, r7, #7
   18552:	1c22      	adds	r2, r4, #0
   18554:	701a      	strb	r2, [r3, #0]
   18556:	1dbb      	adds	r3, r7, #6
   18558:	1c02      	adds	r2, r0, #0
   1855a:	701a      	strb	r2, [r3, #0]
   1855c:	1d7b      	adds	r3, r7, #5
   1855e:	1c0a      	adds	r2, r1, #0
   18560:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18562:	1dfb      	adds	r3, r7, #7
   18564:	781b      	ldrb	r3, [r3, #0]
   18566:	2b08      	cmp	r3, #8
   18568:	d904      	bls.n	18574 <prvTraceSetObjectState+0x30>
   1856a:	4b1a      	ldr	r3, [pc, #104]	; (185d4 <prvTraceSetObjectState+0x90>)
   1856c:	0018      	movs	r0, r3
   1856e:	4b1a      	ldr	r3, [pc, #104]	; (185d8 <prvTraceSetObjectState+0x94>)
   18570:	4798      	blx	r3
   18572:	e02b      	b.n	185cc <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18574:	4b19      	ldr	r3, [pc, #100]	; (185dc <prvTraceSetObjectState+0x98>)
   18576:	681a      	ldr	r2, [r3, #0]
   18578:	1dfb      	adds	r3, r7, #7
   1857a:	781b      	ldrb	r3, [r3, #0]
   1857c:	2164      	movs	r1, #100	; 0x64
   1857e:	18d3      	adds	r3, r2, r3
   18580:	185b      	adds	r3, r3, r1
   18582:	781b      	ldrb	r3, [r3, #0]
   18584:	1dba      	adds	r2, r7, #6
   18586:	7812      	ldrb	r2, [r2, #0]
   18588:	429a      	cmp	r2, r3
   1858a:	d904      	bls.n	18596 <prvTraceSetObjectState+0x52>
   1858c:	4b14      	ldr	r3, [pc, #80]	; (185e0 <prvTraceSetObjectState+0x9c>)
   1858e:	0018      	movs	r0, r3
   18590:	4b11      	ldr	r3, [pc, #68]	; (185d8 <prvTraceSetObjectState+0x94>)
   18592:	4798      	blx	r3
   18594:	e01a      	b.n	185cc <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   18596:	4b11      	ldr	r3, [pc, #68]	; (185dc <prvTraceSetObjectState+0x98>)
   18598:	681c      	ldr	r4, [r3, #0]
   1859a:	1dfb      	adds	r3, r7, #7
   1859c:	781a      	ldrb	r2, [r3, #0]
   1859e:	1dbb      	adds	r3, r7, #6
   185a0:	781b      	ldrb	r3, [r3, #0]
   185a2:	0011      	movs	r1, r2
   185a4:	0018      	movs	r0, r3
   185a6:	4b0f      	ldr	r3, [pc, #60]	; (185e4 <prvTraceSetObjectState+0xa0>)
   185a8:	4798      	blx	r3
   185aa:	0003      	movs	r3, r0
   185ac:	0018      	movs	r0, r3
   185ae:	4b0b      	ldr	r3, [pc, #44]	; (185dc <prvTraceSetObjectState+0x98>)
   185b0:	681a      	ldr	r2, [r3, #0]
   185b2:	1dfb      	adds	r3, r7, #7
   185b4:	781b      	ldrb	r3, [r3, #0]
   185b6:	2170      	movs	r1, #112	; 0x70
   185b8:	18d3      	adds	r3, r2, r3
   185ba:	185b      	adds	r3, r3, r1
   185bc:	781b      	ldrb	r3, [r3, #0]
   185be:	18c3      	adds	r3, r0, r3
   185c0:	229c      	movs	r2, #156	; 0x9c
   185c2:	18e3      	adds	r3, r4, r3
   185c4:	189b      	adds	r3, r3, r2
   185c6:	1d7a      	adds	r2, r7, #5
   185c8:	7812      	ldrb	r2, [r2, #0]
   185ca:	701a      	strb	r2, [r3, #0]
}
   185cc:	46bd      	mov	sp, r7
   185ce:	b003      	add	sp, #12
   185d0:	bd90      	pop	{r4, r7, pc}
   185d2:	46c0      	nop			; (mov r8, r8)
   185d4:	00036a0c 	.word	0x00036a0c
   185d8:	00018d8d 	.word	0x00018d8d
   185dc:	20000d34 	.word	0x20000d34
   185e0:	00036a50 	.word	0x00036a50
   185e4:	00018999 	.word	0x00018999

000185e8 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   185e8:	b590      	push	{r4, r7, lr}
   185ea:	b083      	sub	sp, #12
   185ec:	af00      	add	r7, sp, #0
   185ee:	0002      	movs	r2, r0
   185f0:	1dfb      	adds	r3, r7, #7
   185f2:	701a      	strb	r2, [r3, #0]
   185f4:	1dbb      	adds	r3, r7, #6
   185f6:	1c0a      	adds	r2, r1, #0
   185f8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   185fa:	1dfb      	adds	r3, r7, #7
   185fc:	781b      	ldrb	r3, [r3, #0]
   185fe:	2b08      	cmp	r3, #8
   18600:	d905      	bls.n	1860e <prvTraceGetObjectState+0x26>
   18602:	4b1a      	ldr	r3, [pc, #104]	; (1866c <prvTraceGetObjectState+0x84>)
   18604:	0018      	movs	r0, r3
   18606:	4b1a      	ldr	r3, [pc, #104]	; (18670 <prvTraceGetObjectState+0x88>)
   18608:	4798      	blx	r3
   1860a:	2300      	movs	r3, #0
   1860c:	e02a      	b.n	18664 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1860e:	4b19      	ldr	r3, [pc, #100]	; (18674 <prvTraceGetObjectState+0x8c>)
   18610:	681a      	ldr	r2, [r3, #0]
   18612:	1dfb      	adds	r3, r7, #7
   18614:	781b      	ldrb	r3, [r3, #0]
   18616:	2164      	movs	r1, #100	; 0x64
   18618:	18d3      	adds	r3, r2, r3
   1861a:	185b      	adds	r3, r3, r1
   1861c:	781b      	ldrb	r3, [r3, #0]
   1861e:	1dba      	adds	r2, r7, #6
   18620:	7812      	ldrb	r2, [r2, #0]
   18622:	429a      	cmp	r2, r3
   18624:	d905      	bls.n	18632 <prvTraceGetObjectState+0x4a>
   18626:	4b14      	ldr	r3, [pc, #80]	; (18678 <prvTraceGetObjectState+0x90>)
   18628:	0018      	movs	r0, r3
   1862a:	4b11      	ldr	r3, [pc, #68]	; (18670 <prvTraceGetObjectState+0x88>)
   1862c:	4798      	blx	r3
   1862e:	2300      	movs	r3, #0
   18630:	e018      	b.n	18664 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   18632:	4b10      	ldr	r3, [pc, #64]	; (18674 <prvTraceGetObjectState+0x8c>)
   18634:	681c      	ldr	r4, [r3, #0]
   18636:	1dfb      	adds	r3, r7, #7
   18638:	781a      	ldrb	r2, [r3, #0]
   1863a:	1dbb      	adds	r3, r7, #6
   1863c:	781b      	ldrb	r3, [r3, #0]
   1863e:	0011      	movs	r1, r2
   18640:	0018      	movs	r0, r3
   18642:	4b0e      	ldr	r3, [pc, #56]	; (1867c <prvTraceGetObjectState+0x94>)
   18644:	4798      	blx	r3
   18646:	0003      	movs	r3, r0
   18648:	0018      	movs	r0, r3
   1864a:	4b0a      	ldr	r3, [pc, #40]	; (18674 <prvTraceGetObjectState+0x8c>)
   1864c:	681a      	ldr	r2, [r3, #0]
   1864e:	1dfb      	adds	r3, r7, #7
   18650:	781b      	ldrb	r3, [r3, #0]
   18652:	2170      	movs	r1, #112	; 0x70
   18654:	18d3      	adds	r3, r2, r3
   18656:	185b      	adds	r3, r3, r1
   18658:	781b      	ldrb	r3, [r3, #0]
   1865a:	18c3      	adds	r3, r0, r3
   1865c:	229c      	movs	r2, #156	; 0x9c
   1865e:	18e3      	adds	r3, r4, r3
   18660:	189b      	adds	r3, r3, r2
   18662:	781b      	ldrb	r3, [r3, #0]
}
   18664:	0018      	movs	r0, r3
   18666:	46bd      	mov	sp, r7
   18668:	b003      	add	sp, #12
   1866a:	bd90      	pop	{r4, r7, pc}
   1866c:	00036a8c 	.word	0x00036a8c
   18670:	00018d8d 	.word	0x00018d8d
   18674:	20000d34 	.word	0x20000d34
   18678:	00036ad0 	.word	0x00036ad0
   1867c:	00018999 	.word	0x00018999

00018680 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   18680:	b590      	push	{r4, r7, lr}
   18682:	b083      	sub	sp, #12
   18684:	af00      	add	r7, sp, #0
   18686:	0002      	movs	r2, r0
   18688:	1dfb      	adds	r3, r7, #7
   1868a:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   1868c:	4b11      	ldr	r3, [pc, #68]	; (186d4 <prvTraceSetTaskInstanceFinished+0x54>)
   1868e:	681b      	ldr	r3, [r3, #0]
   18690:	2267      	movs	r2, #103	; 0x67
   18692:	5c9b      	ldrb	r3, [r3, r2]
   18694:	1dfa      	adds	r2, r7, #7
   18696:	7812      	ldrb	r2, [r2, #0]
   18698:	429a      	cmp	r2, r3
   1869a:	d904      	bls.n	186a6 <prvTraceSetTaskInstanceFinished+0x26>
   1869c:	4b0e      	ldr	r3, [pc, #56]	; (186d8 <prvTraceSetTaskInstanceFinished+0x58>)
   1869e:	0018      	movs	r0, r3
   186a0:	4b0e      	ldr	r3, [pc, #56]	; (186dc <prvTraceSetTaskInstanceFinished+0x5c>)
   186a2:	4798      	blx	r3
   186a4:	e013      	b.n	186ce <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   186a6:	4b0b      	ldr	r3, [pc, #44]	; (186d4 <prvTraceSetTaskInstanceFinished+0x54>)
   186a8:	681c      	ldr	r4, [r3, #0]
   186aa:	1dfb      	adds	r3, r7, #7
   186ac:	781b      	ldrb	r3, [r3, #0]
   186ae:	2103      	movs	r1, #3
   186b0:	0018      	movs	r0, r3
   186b2:	4b0b      	ldr	r3, [pc, #44]	; (186e0 <prvTraceSetTaskInstanceFinished+0x60>)
   186b4:	4798      	blx	r3
   186b6:	0003      	movs	r3, r0
   186b8:	0019      	movs	r1, r3
   186ba:	4b06      	ldr	r3, [pc, #24]	; (186d4 <prvTraceSetTaskInstanceFinished+0x54>)
   186bc:	681b      	ldr	r3, [r3, #0]
   186be:	2273      	movs	r2, #115	; 0x73
   186c0:	5c9b      	ldrb	r3, [r3, r2]
   186c2:	18cb      	adds	r3, r1, r3
   186c4:	229c      	movs	r2, #156	; 0x9c
   186c6:	18e3      	adds	r3, r4, r3
   186c8:	189b      	adds	r3, r3, r2
   186ca:	2200      	movs	r2, #0
   186cc:	701a      	strb	r2, [r3, #0]
#endif
}
   186ce:	46bd      	mov	sp, r7
   186d0:	b003      	add	sp, #12
   186d2:	bd90      	pop	{r4, r7, pc}
   186d4:	20000d34 	.word	0x20000d34
   186d8:	00036b0c 	.word	0x00036b0c
   186dc:	00018d8d 	.word	0x00018d8d
   186e0:	00018999 	.word	0x00018999

000186e4 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   186e4:	b580      	push	{r7, lr}
   186e6:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   186e8:	4b75      	ldr	r3, [pc, #468]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   186ea:	681b      	ldr	r3, [r3, #0]
   186ec:	2b00      	cmp	r3, #0
   186ee:	d103      	bne.n	186f8 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   186f0:	4b73      	ldr	r3, [pc, #460]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   186f2:	4a74      	ldr	r2, [pc, #464]	; (188c4 <prvTraceInitTraceData+0x1e0>)
   186f4:	601a      	str	r2, [r3, #0]
   186f6:	e006      	b.n	18706 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   186f8:	4b71      	ldr	r3, [pc, #452]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   186fa:	681b      	ldr	r3, [r3, #0]
   186fc:	781b      	ldrb	r3, [r3, #0]
   186fe:	b2db      	uxtb	r3, r3
   18700:	2b01      	cmp	r3, #1
   18702:	d100      	bne.n	18706 <prvTraceInitTraceData+0x22>
   18704:	e0d8      	b.n	188b8 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   18706:	4b70      	ldr	r3, [pc, #448]	; (188c8 <prvTraceInitTraceData+0x1e4>)
   18708:	681a      	ldr	r2, [r3, #0]
   1870a:	4b70      	ldr	r3, [pc, #448]	; (188cc <prvTraceInitTraceData+0x1e8>)
   1870c:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1870e:	4b6c      	ldr	r3, [pc, #432]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18710:	6818      	ldr	r0, [r3, #0]
   18712:	23bd      	movs	r3, #189	; 0xbd
   18714:	011b      	lsls	r3, r3, #4
   18716:	001a      	movs	r2, r3
   18718:	2100      	movs	r1, #0
   1871a:	4b6d      	ldr	r3, [pc, #436]	; (188d0 <prvTraceInitTraceData+0x1ec>)
   1871c:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1871e:	4b68      	ldr	r3, [pc, #416]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18720:	681b      	ldr	r3, [r3, #0]
   18722:	4a6c      	ldr	r2, [pc, #432]	; (188d4 <prvTraceInitTraceData+0x1f0>)
   18724:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   18726:	4b66      	ldr	r3, [pc, #408]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18728:	681b      	ldr	r3, [r3, #0]
   1872a:	2205      	movs	r2, #5
   1872c:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1872e:	4b64      	ldr	r3, [pc, #400]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18730:	681b      	ldr	r3, [r3, #0]
   18732:	2200      	movs	r2, #0
   18734:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   18736:	4b62      	ldr	r3, [pc, #392]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18738:	681b      	ldr	r3, [r3, #0]
   1873a:	22bd      	movs	r2, #189	; 0xbd
   1873c:	0112      	lsls	r2, r2, #4
   1873e:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   18740:	4b5f      	ldr	r3, [pc, #380]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18742:	681b      	ldr	r3, [r3, #0]
   18744:	2296      	movs	r2, #150	; 0x96
   18746:	0052      	lsls	r2, r2, #1
   18748:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1874a:	4b5d      	ldr	r3, [pc, #372]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   1874c:	681b      	ldr	r3, [r3, #0]
   1874e:	4a62      	ldr	r2, [pc, #392]	; (188d8 <prvTraceInitTraceData+0x1f4>)
   18750:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   18752:	4b5b      	ldr	r3, [pc, #364]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18754:	681b      	ldr	r3, [r3, #0]
   18756:	2200      	movs	r2, #0
   18758:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   1875a:	4b59      	ldr	r3, [pc, #356]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   1875c:	681b      	ldr	r3, [r3, #0]
   1875e:	2200      	movs	r2, #0
   18760:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   18762:	4b5e      	ldr	r3, [pc, #376]	; (188dc <prvTraceInitTraceData+0x1f8>)
   18764:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   18766:	4b56      	ldr	r3, [pc, #344]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18768:	681b      	ldr	r3, [r3, #0]
   1876a:	4a5d      	ldr	r2, [pc, #372]	; (188e0 <prvTraceInitTraceData+0x1fc>)
   1876c:	495d      	ldr	r1, [pc, #372]	; (188e4 <prvTraceInitTraceData+0x200>)
   1876e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   18770:	4b53      	ldr	r3, [pc, #332]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18772:	681a      	ldr	r2, [r3, #0]
   18774:	23ac      	movs	r3, #172	; 0xac
   18776:	00db      	lsls	r3, r3, #3
   18778:	21c8      	movs	r1, #200	; 0xc8
   1877a:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   1877c:	4b50      	ldr	r3, [pc, #320]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   1877e:	681b      	ldr	r3, [r3, #0]
   18780:	4a59      	ldr	r2, [pc, #356]	; (188e8 <prvTraceInitTraceData+0x204>)
   18782:	2101      	movs	r1, #1
   18784:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   18786:	4b4e      	ldr	r3, [pc, #312]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18788:	681a      	ldr	r2, [r3, #0]
   1878a:	23d7      	movs	r3, #215	; 0xd7
   1878c:	00db      	lsls	r3, r3, #3
   1878e:	4957      	ldr	r1, [pc, #348]	; (188ec <prvTraceInitTraceData+0x208>)
   18790:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   18792:	4b4b      	ldr	r3, [pc, #300]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18794:	681b      	ldr	r3, [r3, #0]
   18796:	4a56      	ldr	r2, [pc, #344]	; (188f0 <prvTraceInitTraceData+0x20c>)
   18798:	4694      	mov	ip, r2
   1879a:	4463      	add	r3, ip
   1879c:	4955      	ldr	r1, [pc, #340]	; (188f4 <prvTraceInitTraceData+0x210>)
   1879e:	2250      	movs	r2, #80	; 0x50
   187a0:	0018      	movs	r0, r3
   187a2:	4b55      	ldr	r3, [pc, #340]	; (188f8 <prvTraceInitTraceData+0x214>)
   187a4:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   187a6:	4b46      	ldr	r3, [pc, #280]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   187a8:	681b      	ldr	r3, [r3, #0]
   187aa:	4a54      	ldr	r2, [pc, #336]	; (188fc <prvTraceInitTraceData+0x218>)
   187ac:	4954      	ldr	r1, [pc, #336]	; (18900 <prvTraceInitTraceData+0x21c>)
   187ae:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   187b0:	4b43      	ldr	r3, [pc, #268]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   187b2:	681b      	ldr	r3, [r3, #0]
   187b4:	4a53      	ldr	r2, [pc, #332]	; (18904 <prvTraceInitTraceData+0x220>)
   187b6:	210a      	movs	r1, #10
   187b8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   187ba:	4b41      	ldr	r3, [pc, #260]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   187bc:	681b      	ldr	r3, [r3, #0]
   187be:	4a52      	ldr	r2, [pc, #328]	; (18908 <prvTraceInitTraceData+0x224>)
   187c0:	210b      	movs	r1, #11
   187c2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   187c4:	4b3e      	ldr	r3, [pc, #248]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   187c6:	681b      	ldr	r3, [r3, #0]
   187c8:	4a50      	ldr	r2, [pc, #320]	; (1890c <prvTraceInitTraceData+0x228>)
   187ca:	210c      	movs	r1, #12
   187cc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   187ce:	4b3c      	ldr	r3, [pc, #240]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   187d0:	681b      	ldr	r3, [r3, #0]
   187d2:	4a4f      	ldr	r2, [pc, #316]	; (18910 <prvTraceInitTraceData+0x22c>)
   187d4:	210d      	movs	r1, #13
   187d6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   187d8:	4b39      	ldr	r3, [pc, #228]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   187da:	681b      	ldr	r3, [r3, #0]
   187dc:	4a4d      	ldr	r2, [pc, #308]	; (18914 <prvTraceInitTraceData+0x230>)
   187de:	2171      	movs	r1, #113	; 0x71
   187e0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   187e2:	4b37      	ldr	r3, [pc, #220]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   187e4:	681b      	ldr	r3, [r3, #0]
   187e6:	4a4c      	ldr	r2, [pc, #304]	; (18918 <prvTraceInitTraceData+0x234>)
   187e8:	2172      	movs	r1, #114	; 0x72
   187ea:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   187ec:	4b34      	ldr	r3, [pc, #208]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   187ee:	681b      	ldr	r3, [r3, #0]
   187f0:	4a4a      	ldr	r2, [pc, #296]	; (1891c <prvTraceInitTraceData+0x238>)
   187f2:	2173      	movs	r1, #115	; 0x73
   187f4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   187f6:	4b32      	ldr	r3, [pc, #200]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   187f8:	681b      	ldr	r3, [r3, #0]
   187fa:	4a49      	ldr	r2, [pc, #292]	; (18920 <prvTraceInitTraceData+0x23c>)
   187fc:	2174      	movs	r1, #116	; 0x74
   187fe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   18800:	4b2f      	ldr	r3, [pc, #188]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18802:	681b      	ldr	r3, [r3, #0]
   18804:	4a47      	ldr	r2, [pc, #284]	; (18924 <prvTraceInitTraceData+0x240>)
   18806:	21f1      	movs	r1, #241	; 0xf1
   18808:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   1880a:	4b2d      	ldr	r3, [pc, #180]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   1880c:	681b      	ldr	r3, [r3, #0]
   1880e:	4a46      	ldr	r2, [pc, #280]	; (18928 <prvTraceInitTraceData+0x244>)
   18810:	21f2      	movs	r1, #242	; 0xf2
   18812:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   18814:	4b2a      	ldr	r3, [pc, #168]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18816:	681b      	ldr	r3, [r3, #0]
   18818:	4a44      	ldr	r2, [pc, #272]	; (1892c <prvTraceInitTraceData+0x248>)
   1881a:	21f3      	movs	r1, #243	; 0xf3
   1881c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1881e:	4b28      	ldr	r3, [pc, #160]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18820:	681b      	ldr	r3, [r3, #0]
   18822:	4a43      	ldr	r2, [pc, #268]	; (18930 <prvTraceInitTraceData+0x24c>)
   18824:	21f4      	movs	r1, #244	; 0xf4
   18826:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   18828:	4b42      	ldr	r3, [pc, #264]	; (18934 <prvTraceInitTraceData+0x250>)
   1882a:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   1882c:	4b24      	ldr	r3, [pc, #144]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   1882e:	681b      	ldr	r3, [r3, #0]
   18830:	22f4      	movs	r2, #244	; 0xf4
   18832:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   18834:	4b22      	ldr	r3, [pc, #136]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18836:	681b      	ldr	r3, [r3, #0]
   18838:	22f3      	movs	r2, #243	; 0xf3
   1883a:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   1883c:	4b20      	ldr	r3, [pc, #128]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   1883e:	681b      	ldr	r3, [r3, #0]
   18840:	22f2      	movs	r2, #242	; 0xf2
   18842:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   18844:	4b1e      	ldr	r3, [pc, #120]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18846:	681b      	ldr	r3, [r3, #0]
   18848:	22f1      	movs	r2, #241	; 0xf1
   1884a:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   1884c:	4b1c      	ldr	r3, [pc, #112]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   1884e:	681b      	ldr	r3, [r3, #0]
   18850:	2274      	movs	r2, #116	; 0x74
   18852:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   18854:	4b1a      	ldr	r3, [pc, #104]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18856:	681b      	ldr	r3, [r3, #0]
   18858:	2273      	movs	r2, #115	; 0x73
   1885a:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   1885c:	4b18      	ldr	r3, [pc, #96]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   1885e:	681b      	ldr	r3, [r3, #0]
   18860:	2272      	movs	r2, #114	; 0x72
   18862:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   18864:	4b16      	ldr	r3, [pc, #88]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18866:	681b      	ldr	r3, [r3, #0]
   18868:	2271      	movs	r2, #113	; 0x71
   1886a:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   1886c:	4b14      	ldr	r3, [pc, #80]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   1886e:	681b      	ldr	r3, [r3, #0]
   18870:	2204      	movs	r2, #4
   18872:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   18874:	4b12      	ldr	r3, [pc, #72]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18876:	681b      	ldr	r3, [r3, #0]
   18878:	2203      	movs	r2, #3
   1887a:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1887c:	4b10      	ldr	r3, [pc, #64]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   1887e:	681b      	ldr	r3, [r3, #0]
   18880:	2202      	movs	r2, #2
   18882:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   18884:	4b0e      	ldr	r3, [pc, #56]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18886:	681b      	ldr	r3, [r3, #0]
   18888:	2201      	movs	r2, #1
   1888a:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   1888c:	4b2a      	ldr	r3, [pc, #168]	; (18938 <prvTraceInitTraceData+0x254>)
   1888e:	681b      	ldr	r3, [r3, #0]
   18890:	2b00      	cmp	r3, #0
   18892:	d012      	beq.n	188ba <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   18894:	4b0a      	ldr	r3, [pc, #40]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   18896:	681b      	ldr	r3, [r3, #0]
   18898:	4a15      	ldr	r2, [pc, #84]	; (188f0 <prvTraceInitTraceData+0x20c>)
   1889a:	1898      	adds	r0, r3, r2
   1889c:	4b26      	ldr	r3, [pc, #152]	; (18938 <prvTraceInitTraceData+0x254>)
   1889e:	681b      	ldr	r3, [r3, #0]
   188a0:	2250      	movs	r2, #80	; 0x50
   188a2:	0019      	movs	r1, r3
   188a4:	4b14      	ldr	r3, [pc, #80]	; (188f8 <prvTraceInitTraceData+0x214>)
   188a6:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   188a8:	4b05      	ldr	r3, [pc, #20]	; (188c0 <prvTraceInitTraceData+0x1dc>)
   188aa:	681b      	ldr	r3, [r3, #0]
   188ac:	4a23      	ldr	r2, [pc, #140]	; (1893c <prvTraceInitTraceData+0x258>)
   188ae:	2101      	movs	r1, #1
   188b0:	5099      	str	r1, [r3, r2]
		vTraceStop();
   188b2:	4b23      	ldr	r3, [pc, #140]	; (18940 <prvTraceInitTraceData+0x25c>)
   188b4:	4798      	blx	r3
   188b6:	e000      	b.n	188ba <prvTraceInitTraceData+0x1d6>
			return;
   188b8:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   188ba:	46bd      	mov	sp, r7
   188bc:	bd80      	pop	{r7, pc}
   188be:	46c0      	nop			; (mov r8, r8)
   188c0:	20000d34 	.word	0x20000d34
   188c4:	20004508 	.word	0x20004508
   188c8:	e000e018 	.word	0xe000e018
   188cc:	200050d8 	.word	0x200050d8
   188d0:	000339ff 	.word	0x000339ff
   188d4:	00001aa1 	.word	0x00001aa1
   188d8:	f0f0f0f0 	.word	0xf0f0f0f0
   188dc:	00017849 	.word	0x00017849
   188e0:	0000055c 	.word	0x0000055c
   188e4:	f1f1f1f1 	.word	0xf1f1f1f1
   188e8:	00000564 	.word	0x00000564
   188ec:	f2f2f2f2 	.word	0xf2f2f2f2
   188f0:	000006bc 	.word	0x000006bc
   188f4:	00036b54 	.word	0x00036b54
   188f8:	00018c59 	.word	0x00018c59
   188fc:	0000070c 	.word	0x0000070c
   18900:	f3f3f3f3 	.word	0xf3f3f3f3
   18904:	00000bc4 	.word	0x00000bc4
   18908:	00000bc5 	.word	0x00000bc5
   1890c:	00000bc6 	.word	0x00000bc6
   18910:	00000bc7 	.word	0x00000bc7
   18914:	00000bc8 	.word	0x00000bc8
   18918:	00000bc9 	.word	0x00000bc9
   1891c:	00000bca 	.word	0x00000bca
   18920:	00000bcb 	.word	0x00000bcb
   18924:	00000bcc 	.word	0x00000bcc
   18928:	00000bcd 	.word	0x00000bcd
   1892c:	00000bce 	.word	0x00000bce
   18930:	00000bcf 	.word	0x00000bcf
   18934:	000179e9 	.word	0x000179e9
   18938:	20000c94 	.word	0x20000c94
   1893c:	000006b4 	.word	0x000006b4
   18940:	00017c51 	.word	0x00017c51

00018944 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   18944:	b580      	push	{r7, lr}
   18946:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   18948:	4b10      	ldr	r3, [pc, #64]	; (1898c <prvTraceNextFreeEventBufferSlot+0x48>)
   1894a:	681b      	ldr	r3, [r3, #0]
   1894c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1894e:	2b00      	cmp	r3, #0
   18950:	d101      	bne.n	18956 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   18952:	2300      	movs	r3, #0
   18954:	e017      	b.n	18986 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   18956:	4b0d      	ldr	r3, [pc, #52]	; (1898c <prvTraceNextFreeEventBufferSlot+0x48>)
   18958:	681b      	ldr	r3, [r3, #0]
   1895a:	69da      	ldr	r2, [r3, #28]
   1895c:	232c      	movs	r3, #44	; 0x2c
   1895e:	33ff      	adds	r3, #255	; 0xff
   18960:	429a      	cmp	r2, r3
   18962:	d905      	bls.n	18970 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   18964:	4b0a      	ldr	r3, [pc, #40]	; (18990 <prvTraceNextFreeEventBufferSlot+0x4c>)
   18966:	0018      	movs	r0, r3
   18968:	4b0a      	ldr	r3, [pc, #40]	; (18994 <prvTraceNextFreeEventBufferSlot+0x50>)
   1896a:	4798      	blx	r3
		return NULL;
   1896c:	2300      	movs	r3, #0
   1896e:	e00a      	b.n	18986 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   18970:	4b06      	ldr	r3, [pc, #24]	; (1898c <prvTraceNextFreeEventBufferSlot+0x48>)
   18972:	681a      	ldr	r2, [r3, #0]
   18974:	4b05      	ldr	r3, [pc, #20]	; (1898c <prvTraceNextFreeEventBufferSlot+0x48>)
   18976:	681b      	ldr	r3, [r3, #0]
   18978:	69db      	ldr	r3, [r3, #28]
   1897a:	009b      	lsls	r3, r3, #2
   1897c:	21e2      	movs	r1, #226	; 0xe2
   1897e:	00c9      	lsls	r1, r1, #3
   18980:	468c      	mov	ip, r1
   18982:	4463      	add	r3, ip
   18984:	18d3      	adds	r3, r2, r3
}
   18986:	0018      	movs	r0, r3
   18988:	46bd      	mov	sp, r7
   1898a:	bd80      	pop	{r7, pc}
   1898c:	20000d34 	.word	0x20000d34
   18990:	00036b68 	.word	0x00036b68
   18994:	00018d8d 	.word	0x00018d8d

00018998 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   18998:	b580      	push	{r7, lr}
   1899a:	b082      	sub	sp, #8
   1899c:	af00      	add	r7, sp, #0
   1899e:	0002      	movs	r2, r0
   189a0:	1dfb      	adds	r3, r7, #7
   189a2:	701a      	strb	r2, [r3, #0]
   189a4:	1dbb      	adds	r3, r7, #6
   189a6:	1c0a      	adds	r2, r1, #0
   189a8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   189aa:	1dbb      	adds	r3, r7, #6
   189ac:	781b      	ldrb	r3, [r3, #0]
   189ae:	2b08      	cmp	r3, #8
   189b0:	d905      	bls.n	189be <uiIndexOfObject+0x26>
   189b2:	4b2a      	ldr	r3, [pc, #168]	; (18a5c <uiIndexOfObject+0xc4>)
   189b4:	0018      	movs	r0, r3
   189b6:	4b2a      	ldr	r3, [pc, #168]	; (18a60 <uiIndexOfObject+0xc8>)
   189b8:	4798      	blx	r3
   189ba:	2300      	movs	r3, #0
   189bc:	e049      	b.n	18a52 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   189be:	1dfb      	adds	r3, r7, #7
   189c0:	781b      	ldrb	r3, [r3, #0]
   189c2:	2b00      	cmp	r3, #0
   189c4:	d00b      	beq.n	189de <uiIndexOfObject+0x46>
   189c6:	4b27      	ldr	r3, [pc, #156]	; (18a64 <uiIndexOfObject+0xcc>)
   189c8:	681a      	ldr	r2, [r3, #0]
   189ca:	1dbb      	adds	r3, r7, #6
   189cc:	781b      	ldrb	r3, [r3, #0]
   189ce:	2164      	movs	r1, #100	; 0x64
   189d0:	18d3      	adds	r3, r2, r3
   189d2:	185b      	adds	r3, r3, r1
   189d4:	781b      	ldrb	r3, [r3, #0]
   189d6:	1dfa      	adds	r2, r7, #7
   189d8:	7812      	ldrb	r2, [r2, #0]
   189da:	429a      	cmp	r2, r3
   189dc:	d905      	bls.n	189ea <uiIndexOfObject+0x52>
   189de:	4b22      	ldr	r3, [pc, #136]	; (18a68 <uiIndexOfObject+0xd0>)
   189e0:	0018      	movs	r0, r3
   189e2:	4b1f      	ldr	r3, [pc, #124]	; (18a60 <uiIndexOfObject+0xc8>)
   189e4:	4798      	blx	r3
   189e6:	2300      	movs	r3, #0
   189e8:	e033      	b.n	18a52 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   189ea:	1dbb      	adds	r3, r7, #6
   189ec:	781b      	ldrb	r3, [r3, #0]
   189ee:	2b08      	cmp	r3, #8
   189f0:	d82a      	bhi.n	18a48 <uiIndexOfObject+0xb0>
   189f2:	1dfb      	adds	r3, r7, #7
   189f4:	781b      	ldrb	r3, [r3, #0]
   189f6:	2b00      	cmp	r3, #0
   189f8:	d026      	beq.n	18a48 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   189fa:	4b1a      	ldr	r3, [pc, #104]	; (18a64 <uiIndexOfObject+0xcc>)
   189fc:	681a      	ldr	r2, [r3, #0]
   189fe:	1dbb      	adds	r3, r7, #6
   18a00:	781b      	ldrb	r3, [r3, #0]
   18a02:	2164      	movs	r1, #100	; 0x64
   18a04:	18d3      	adds	r3, r2, r3
   18a06:	185b      	adds	r3, r3, r1
   18a08:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   18a0a:	1dfa      	adds	r2, r7, #7
   18a0c:	7812      	ldrb	r2, [r2, #0]
   18a0e:	429a      	cmp	r2, r3
   18a10:	d81a      	bhi.n	18a48 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   18a12:	4b14      	ldr	r3, [pc, #80]	; (18a64 <uiIndexOfObject+0xcc>)
   18a14:	681a      	ldr	r2, [r3, #0]
   18a16:	1dbb      	adds	r3, r7, #6
   18a18:	781b      	ldrb	r3, [r3, #0]
   18a1a:	3340      	adds	r3, #64	; 0x40
   18a1c:	005b      	lsls	r3, r3, #1
   18a1e:	18d3      	adds	r3, r2, r3
   18a20:	3308      	adds	r3, #8
   18a22:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   18a24:	4b0f      	ldr	r3, [pc, #60]	; (18a64 <uiIndexOfObject+0xcc>)
   18a26:	6819      	ldr	r1, [r3, #0]
   18a28:	1dbb      	adds	r3, r7, #6
   18a2a:	781b      	ldrb	r3, [r3, #0]
   18a2c:	207c      	movs	r0, #124	; 0x7c
   18a2e:	18cb      	adds	r3, r1, r3
   18a30:	181b      	adds	r3, r3, r0
   18a32:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   18a34:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   18a36:	1df9      	adds	r1, r7, #7
   18a38:	7809      	ldrb	r1, [r1, #0]
   18a3a:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   18a3c:	b289      	uxth	r1, r1
   18a3e:	434b      	muls	r3, r1
   18a40:	b29b      	uxth	r3, r3
   18a42:	18d3      	adds	r3, r2, r3
   18a44:	b29b      	uxth	r3, r3
   18a46:	e004      	b.n	18a52 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   18a48:	4b08      	ldr	r3, [pc, #32]	; (18a6c <uiIndexOfObject+0xd4>)
   18a4a:	0018      	movs	r0, r3
   18a4c:	4b04      	ldr	r3, [pc, #16]	; (18a60 <uiIndexOfObject+0xc8>)
   18a4e:	4798      	blx	r3
	return 0;
   18a50:	2300      	movs	r3, #0
}
   18a52:	0018      	movs	r0, r3
   18a54:	46bd      	mov	sp, r7
   18a56:	b002      	add	sp, #8
   18a58:	bd80      	pop	{r7, pc}
   18a5a:	46c0      	nop			; (mov r8, r8)
   18a5c:	00036b90 	.word	0x00036b90
   18a60:	00018d8d 	.word	0x00018d8d
   18a64:	20000d34 	.word	0x20000d34
   18a68:	00036bd0 	.word	0x00036bd0
   18a6c:	00036c10 	.word	0x00036c10

00018a70 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   18a70:	b580      	push	{r7, lr}
   18a72:	b088      	sub	sp, #32
   18a74:	af00      	add	r7, sp, #0
   18a76:	0002      	movs	r2, r0
   18a78:	1dfb      	adds	r3, r7, #7
   18a7a:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   18a7c:	4b5a      	ldr	r3, [pc, #360]	; (18be8 <prvTraceGetObjectHandle+0x178>)
   18a7e:	681b      	ldr	r3, [r3, #0]
   18a80:	2b00      	cmp	r3, #0
   18a82:	d105      	bne.n	18a90 <prvTraceGetObjectHandle+0x20>
   18a84:	4b59      	ldr	r3, [pc, #356]	; (18bec <prvTraceGetObjectHandle+0x17c>)
   18a86:	0018      	movs	r0, r3
   18a88:	4b59      	ldr	r3, [pc, #356]	; (18bf0 <prvTraceGetObjectHandle+0x180>)
   18a8a:	4798      	blx	r3
   18a8c:	2300      	movs	r3, #0
   18a8e:	e0a7      	b.n	18be0 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   18a90:	1dfb      	adds	r3, r7, #7
   18a92:	781b      	ldrb	r3, [r3, #0]
   18a94:	2b08      	cmp	r3, #8
   18a96:	d905      	bls.n	18aa4 <prvTraceGetObjectHandle+0x34>
   18a98:	4b56      	ldr	r3, [pc, #344]	; (18bf4 <prvTraceGetObjectHandle+0x184>)
   18a9a:	0018      	movs	r0, r3
   18a9c:	4b54      	ldr	r3, [pc, #336]	; (18bf0 <prvTraceGetObjectHandle+0x180>)
   18a9e:	4798      	blx	r3
   18aa0:	2300      	movs	r3, #0
   18aa2:	e09d      	b.n	18be0 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18aa4:	f3ef 8310 	mrs	r3, PRIMASK
   18aa8:	60fb      	str	r3, [r7, #12]
  return(result);
   18aaa:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   18aac:	61bb      	str	r3, [r7, #24]
   18aae:	2301      	movs	r3, #1
   18ab0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18ab2:	693b      	ldr	r3, [r7, #16]
   18ab4:	f383 8810 	msr	PRIMASK, r3
   18ab8:	4b4f      	ldr	r3, [pc, #316]	; (18bf8 <prvTraceGetObjectHandle+0x188>)
   18aba:	681b      	ldr	r3, [r3, #0]
   18abc:	1c5a      	adds	r2, r3, #1
   18abe:	4b4e      	ldr	r3, [pc, #312]	; (18bf8 <prvTraceGetObjectHandle+0x188>)
   18ac0:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   18ac2:	1dfb      	adds	r3, r7, #7
   18ac4:	781a      	ldrb	r2, [r3, #0]
   18ac6:	4b4d      	ldr	r3, [pc, #308]	; (18bfc <prvTraceGetObjectHandle+0x18c>)
   18ac8:	0052      	lsls	r2, r2, #1
   18aca:	5ad3      	ldrh	r3, [r2, r3]
   18acc:	001a      	movs	r2, r3
   18ace:	4b4c      	ldr	r3, [pc, #304]	; (18c00 <prvTraceGetObjectHandle+0x190>)
   18ad0:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   18ad2:	4b4b      	ldr	r3, [pc, #300]	; (18c00 <prvTraceGetObjectHandle+0x190>)
   18ad4:	681b      	ldr	r3, [r3, #0]
   18ad6:	4a49      	ldr	r2, [pc, #292]	; (18bfc <prvTraceGetObjectHandle+0x18c>)
   18ad8:	2148      	movs	r1, #72	; 0x48
   18ada:	18d3      	adds	r3, r2, r3
   18adc:	185b      	adds	r3, r3, r1
   18ade:	781b      	ldrb	r3, [r3, #0]
   18ae0:	2b00      	cmp	r3, #0
   18ae2:	d117      	bne.n	18b14 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   18ae4:	4b46      	ldr	r3, [pc, #280]	; (18c00 <prvTraceGetObjectHandle+0x190>)
   18ae6:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   18ae8:	4b45      	ldr	r3, [pc, #276]	; (18c00 <prvTraceGetObjectHandle+0x190>)
   18aea:	681b      	ldr	r3, [r3, #0]
   18aec:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   18aee:	1dfb      	adds	r3, r7, #7
   18af0:	781b      	ldrb	r3, [r3, #0]
   18af2:	4842      	ldr	r0, [pc, #264]	; (18bfc <prvTraceGetObjectHandle+0x18c>)
   18af4:	3308      	adds	r3, #8
   18af6:	005b      	lsls	r3, r3, #1
   18af8:	18c3      	adds	r3, r0, r3
   18afa:	3302      	adds	r3, #2
   18afc:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   18afe:	b2db      	uxtb	r3, r3
   18b00:	1acb      	subs	r3, r1, r3
   18b02:	b2db      	uxtb	r3, r3
   18b04:	3301      	adds	r3, #1
   18b06:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   18b08:	4b3c      	ldr	r3, [pc, #240]	; (18bfc <prvTraceGetObjectHandle+0x18c>)
   18b0a:	2148      	movs	r1, #72	; 0x48
   18b0c:	189b      	adds	r3, r3, r2
   18b0e:	185b      	adds	r3, r3, r1
   18b10:	1c02      	adds	r2, r0, #0
   18b12:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   18b14:	4b3a      	ldr	r3, [pc, #232]	; (18c00 <prvTraceGetObjectHandle+0x190>)
   18b16:	681a      	ldr	r2, [r3, #0]
   18b18:	231f      	movs	r3, #31
   18b1a:	18fb      	adds	r3, r7, r3
   18b1c:	4937      	ldr	r1, [pc, #220]	; (18bfc <prvTraceGetObjectHandle+0x18c>)
   18b1e:	2048      	movs	r0, #72	; 0x48
   18b20:	188a      	adds	r2, r1, r2
   18b22:	1812      	adds	r2, r2, r0
   18b24:	7812      	ldrb	r2, [r2, #0]
   18b26:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   18b28:	1dfb      	adds	r3, r7, #7
   18b2a:	781a      	ldrb	r2, [r3, #0]
   18b2c:	4b33      	ldr	r3, [pc, #204]	; (18bfc <prvTraceGetObjectHandle+0x18c>)
   18b2e:	0052      	lsls	r2, r2, #1
   18b30:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   18b32:	1dfb      	adds	r3, r7, #7
   18b34:	781b      	ldrb	r3, [r3, #0]
   18b36:	4931      	ldr	r1, [pc, #196]	; (18bfc <prvTraceGetObjectHandle+0x18c>)
   18b38:	3310      	adds	r3, #16
   18b3a:	005b      	lsls	r3, r3, #1
   18b3c:	18cb      	adds	r3, r1, r3
   18b3e:	3304      	adds	r3, #4
   18b40:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   18b42:	429a      	cmp	r2, r3
   18b44:	d90d      	bls.n	18b62 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   18b46:	1dfb      	adds	r3, r7, #7
   18b48:	781b      	ldrb	r3, [r3, #0]
   18b4a:	0018      	movs	r0, r3
   18b4c:	4b2d      	ldr	r3, [pc, #180]	; (18c04 <prvTraceGetObjectHandle+0x194>)
   18b4e:	4798      	blx	r3
   18b50:	0003      	movs	r3, r0
   18b52:	0018      	movs	r0, r3
   18b54:	4b26      	ldr	r3, [pc, #152]	; (18bf0 <prvTraceGetObjectHandle+0x180>)
   18b56:	4798      	blx	r3
		handle = 0;
   18b58:	231f      	movs	r3, #31
   18b5a:	18fb      	adds	r3, r7, r3
   18b5c:	2200      	movs	r2, #0
   18b5e:	701a      	strb	r2, [r3, #0]
   18b60:	e031      	b.n	18bc6 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   18b62:	1dfb      	adds	r3, r7, #7
   18b64:	781b      	ldrb	r3, [r3, #0]
   18b66:	4a25      	ldr	r2, [pc, #148]	; (18bfc <prvTraceGetObjectHandle+0x18c>)
   18b68:	0059      	lsls	r1, r3, #1
   18b6a:	5a8a      	ldrh	r2, [r1, r2]
   18b6c:	3201      	adds	r2, #1
   18b6e:	b291      	uxth	r1, r2
   18b70:	4a22      	ldr	r2, [pc, #136]	; (18bfc <prvTraceGetObjectHandle+0x18c>)
   18b72:	005b      	lsls	r3, r3, #1
   18b74:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   18b76:	1dfb      	adds	r3, r7, #7
   18b78:	781a      	ldrb	r2, [r3, #0]
   18b7a:	4b20      	ldr	r3, [pc, #128]	; (18bfc <prvTraceGetObjectHandle+0x18c>)
   18b7c:	0052      	lsls	r2, r2, #1
   18b7e:	5ad3      	ldrh	r3, [r2, r3]
   18b80:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   18b82:	1dfb      	adds	r3, r7, #7
   18b84:	781b      	ldrb	r3, [r3, #0]
   18b86:	4a1d      	ldr	r2, [pc, #116]	; (18bfc <prvTraceGetObjectHandle+0x18c>)
   18b88:	3308      	adds	r3, #8
   18b8a:	005b      	lsls	r3, r3, #1
   18b8c:	18d3      	adds	r3, r2, r3
   18b8e:	3302      	adds	r3, #2
   18b90:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   18b92:	1acb      	subs	r3, r1, r3
   18b94:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   18b96:	1dfb      	adds	r3, r7, #7
   18b98:	781b      	ldrb	r3, [r3, #0]
   18b9a:	4a18      	ldr	r2, [pc, #96]	; (18bfc <prvTraceGetObjectHandle+0x18c>)
   18b9c:	3318      	adds	r3, #24
   18b9e:	005b      	lsls	r3, r3, #1
   18ba0:	18d3      	adds	r3, r2, r3
   18ba2:	3306      	adds	r3, #6
   18ba4:	881b      	ldrh	r3, [r3, #0]
   18ba6:	001a      	movs	r2, r3
		if (hndCount >
   18ba8:	697b      	ldr	r3, [r7, #20]
   18baa:	429a      	cmp	r2, r3
   18bac:	da0b      	bge.n	18bc6 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   18bae:	1dfb      	adds	r3, r7, #7
   18bb0:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   18bb2:	697a      	ldr	r2, [r7, #20]
   18bb4:	b2d2      	uxtb	r2, r2
   18bb6:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   18bb8:	4a10      	ldr	r2, [pc, #64]	; (18bfc <prvTraceGetObjectHandle+0x18c>)
   18bba:	3318      	adds	r3, #24
   18bbc:	005b      	lsls	r3, r3, #1
   18bbe:	18d3      	adds	r3, r2, r3
   18bc0:	3306      	adds	r3, #6
   18bc2:	1c0a      	adds	r2, r1, #0
   18bc4:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   18bc6:	4b0c      	ldr	r3, [pc, #48]	; (18bf8 <prvTraceGetObjectHandle+0x188>)
   18bc8:	681b      	ldr	r3, [r3, #0]
   18bca:	1e5a      	subs	r2, r3, #1
   18bcc:	4b0a      	ldr	r3, [pc, #40]	; (18bf8 <prvTraceGetObjectHandle+0x188>)
   18bce:	601a      	str	r2, [r3, #0]
   18bd0:	69bb      	ldr	r3, [r7, #24]
   18bd2:	60bb      	str	r3, [r7, #8]
   18bd4:	68bb      	ldr	r3, [r7, #8]
   18bd6:	f383 8810 	msr	PRIMASK, r3

	return handle;
   18bda:	231f      	movs	r3, #31
   18bdc:	18fb      	adds	r3, r7, r3
   18bde:	781b      	ldrb	r3, [r3, #0]
}
   18be0:	0018      	movs	r0, r3
   18be2:	46bd      	mov	sp, r7
   18be4:	b008      	add	sp, #32
   18be6:	bd80      	pop	{r7, pc}
   18be8:	20000d34 	.word	0x20000d34
   18bec:	00036070 	.word	0x00036070
   18bf0:	00018d8d 	.word	0x00018d8d
   18bf4:	00036c50 	.word	0x00036c50
   18bf8:	20000c8c 	.word	0x20000c8c
   18bfc:	20000ca4 	.word	0x20000ca4
   18c00:	20000d38 	.word	0x20000d38
   18c04:	00017aad 	.word	0x00017aad

00018c08 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   18c08:	b590      	push	{r4, r7, lr}
   18c0a:	b085      	sub	sp, #20
   18c0c:	af00      	add	r7, sp, #0
   18c0e:	0002      	movs	r2, r0
   18c10:	1dfb      	adds	r3, r7, #7
   18c12:	701a      	strb	r2, [r3, #0]
   18c14:	1dbb      	adds	r3, r7, #6
   18c16:	1c0a      	adds	r2, r1, #0
   18c18:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   18c1a:	230e      	movs	r3, #14
   18c1c:	18fc      	adds	r4, r7, r3
   18c1e:	1dfb      	adds	r3, r7, #7
   18c20:	781a      	ldrb	r2, [r3, #0]
   18c22:	1dbb      	adds	r3, r7, #6
   18c24:	781b      	ldrb	r3, [r3, #0]
   18c26:	0011      	movs	r1, r2
   18c28:	0018      	movs	r0, r3
   18c2a:	4b09      	ldr	r3, [pc, #36]	; (18c50 <prvMarkObjectAsUsed+0x48>)
   18c2c:	4798      	blx	r3
   18c2e:	0003      	movs	r3, r0
   18c30:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   18c32:	4b08      	ldr	r3, [pc, #32]	; (18c54 <prvMarkObjectAsUsed+0x4c>)
   18c34:	681a      	ldr	r2, [r3, #0]
   18c36:	230e      	movs	r3, #14
   18c38:	18fb      	adds	r3, r7, r3
   18c3a:	881b      	ldrh	r3, [r3, #0]
   18c3c:	219c      	movs	r1, #156	; 0x9c
   18c3e:	18d3      	adds	r3, r2, r3
   18c40:	185b      	adds	r3, r3, r1
   18c42:	2201      	movs	r2, #1
   18c44:	701a      	strb	r2, [r3, #0]
}
   18c46:	46c0      	nop			; (mov r8, r8)
   18c48:	46bd      	mov	sp, r7
   18c4a:	b005      	add	sp, #20
   18c4c:	bd90      	pop	{r4, r7, pc}
   18c4e:	46c0      	nop			; (mov r8, r8)
   18c50:	00018999 	.word	0x00018999
   18c54:	20000d34 	.word	0x20000d34

00018c58 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   18c58:	b580      	push	{r7, lr}
   18c5a:	b086      	sub	sp, #24
   18c5c:	af00      	add	r7, sp, #0
   18c5e:	60f8      	str	r0, [r7, #12]
   18c60:	60b9      	str	r1, [r7, #8]
   18c62:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   18c64:	2300      	movs	r3, #0
   18c66:	617b      	str	r3, [r7, #20]
   18c68:	e010      	b.n	18c8c <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   18c6a:	68fa      	ldr	r2, [r7, #12]
   18c6c:	697b      	ldr	r3, [r7, #20]
   18c6e:	18d3      	adds	r3, r2, r3
   18c70:	68b9      	ldr	r1, [r7, #8]
   18c72:	697a      	ldr	r2, [r7, #20]
   18c74:	188a      	adds	r2, r1, r2
   18c76:	7812      	ldrb	r2, [r2, #0]
   18c78:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   18c7a:	68ba      	ldr	r2, [r7, #8]
   18c7c:	697b      	ldr	r3, [r7, #20]
   18c7e:	18d3      	adds	r3, r2, r3
   18c80:	781b      	ldrb	r3, [r3, #0]
   18c82:	2b00      	cmp	r3, #0
   18c84:	d007      	beq.n	18c96 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   18c86:	697b      	ldr	r3, [r7, #20]
   18c88:	3301      	adds	r3, #1
   18c8a:	617b      	str	r3, [r7, #20]
   18c8c:	697a      	ldr	r2, [r7, #20]
   18c8e:	687b      	ldr	r3, [r7, #4]
   18c90:	429a      	cmp	r2, r3
   18c92:	d3ea      	bcc.n	18c6a <prvStrncpy+0x12>
			break;
	}
}
   18c94:	e000      	b.n	18c98 <prvStrncpy+0x40>
			break;
   18c96:	46c0      	nop			; (mov r8, r8)
}
   18c98:	46c0      	nop			; (mov r8, r8)
   18c9a:	46bd      	mov	sp, r7
   18c9c:	b006      	add	sp, #24
   18c9e:	bd80      	pop	{r7, pc}

00018ca0 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   18ca0:	b580      	push	{r7, lr}
   18ca2:	b082      	sub	sp, #8
   18ca4:	af00      	add	r7, sp, #0
   18ca6:	603a      	str	r2, [r7, #0]
   18ca8:	1dfb      	adds	r3, r7, #7
   18caa:	1c02      	adds	r2, r0, #0
   18cac:	701a      	strb	r2, [r3, #0]
   18cae:	1dbb      	adds	r3, r7, #6
   18cb0:	1c0a      	adds	r2, r1, #0
   18cb2:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   18cb4:	683b      	ldr	r3, [r7, #0]
   18cb6:	2b00      	cmp	r3, #0
   18cb8:	d104      	bne.n	18cc4 <prvTraceSetObjectName+0x24>
   18cba:	4b2a      	ldr	r3, [pc, #168]	; (18d64 <prvTraceSetObjectName+0xc4>)
   18cbc:	0018      	movs	r0, r3
   18cbe:	4b2a      	ldr	r3, [pc, #168]	; (18d68 <prvTraceSetObjectName+0xc8>)
   18cc0:	4798      	blx	r3
   18cc2:	e04b      	b.n	18d5c <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   18cc4:	1dfb      	adds	r3, r7, #7
   18cc6:	781b      	ldrb	r3, [r3, #0]
   18cc8:	2b08      	cmp	r3, #8
   18cca:	d904      	bls.n	18cd6 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   18ccc:	4b27      	ldr	r3, [pc, #156]	; (18d6c <prvTraceSetObjectName+0xcc>)
   18cce:	0018      	movs	r0, r3
   18cd0:	4b25      	ldr	r3, [pc, #148]	; (18d68 <prvTraceSetObjectName+0xc8>)
   18cd2:	4798      	blx	r3
		return;
   18cd4:	e042      	b.n	18d5c <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   18cd6:	1dbb      	adds	r3, r7, #6
   18cd8:	781b      	ldrb	r3, [r3, #0]
   18cda:	2b00      	cmp	r3, #0
   18cdc:	d104      	bne.n	18ce8 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   18cde:	4b24      	ldr	r3, [pc, #144]	; (18d70 <prvTraceSetObjectName+0xd0>)
   18ce0:	0018      	movs	r0, r3
   18ce2:	4b21      	ldr	r3, [pc, #132]	; (18d68 <prvTraceSetObjectName+0xc8>)
   18ce4:	4798      	blx	r3
		return;
   18ce6:	e039      	b.n	18d5c <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   18ce8:	4b22      	ldr	r3, [pc, #136]	; (18d74 <prvTraceSetObjectName+0xd4>)
   18cea:	681a      	ldr	r2, [r3, #0]
   18cec:	1dfb      	adds	r3, r7, #7
   18cee:	781b      	ldrb	r3, [r3, #0]
   18cf0:	2164      	movs	r1, #100	; 0x64
   18cf2:	18d3      	adds	r3, r2, r3
   18cf4:	185b      	adds	r3, r3, r1
   18cf6:	781b      	ldrb	r3, [r3, #0]
   18cf8:	1dba      	adds	r2, r7, #6
   18cfa:	7812      	ldrb	r2, [r2, #0]
   18cfc:	429a      	cmp	r2, r3
   18cfe:	d909      	bls.n	18d14 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   18d00:	1dfb      	adds	r3, r7, #7
   18d02:	781b      	ldrb	r3, [r3, #0]
   18d04:	0018      	movs	r0, r3
   18d06:	4b1c      	ldr	r3, [pc, #112]	; (18d78 <prvTraceSetObjectName+0xd8>)
   18d08:	4798      	blx	r3
   18d0a:	0003      	movs	r3, r0
   18d0c:	0018      	movs	r0, r3
   18d0e:	4b16      	ldr	r3, [pc, #88]	; (18d68 <prvTraceSetObjectName+0xc8>)
   18d10:	4798      	blx	r3
   18d12:	e023      	b.n	18d5c <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   18d14:	1dfb      	adds	r3, r7, #7
   18d16:	781a      	ldrb	r2, [r3, #0]
   18d18:	1dbb      	adds	r3, r7, #6
   18d1a:	781b      	ldrb	r3, [r3, #0]
   18d1c:	0011      	movs	r1, r2
   18d1e:	0018      	movs	r0, r3
   18d20:	4b16      	ldr	r3, [pc, #88]	; (18d7c <prvTraceSetObjectName+0xdc>)
   18d22:	4798      	blx	r3
   18d24:	0003      	movs	r3, r0
   18d26:	001a      	movs	r2, r3
   18d28:	4b15      	ldr	r3, [pc, #84]	; (18d80 <prvTraceSetObjectName+0xe0>)
   18d2a:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   18d2c:	4b15      	ldr	r3, [pc, #84]	; (18d84 <prvTraceSetObjectName+0xe4>)
   18d2e:	681b      	ldr	r3, [r3, #0]
   18d30:	2b00      	cmp	r3, #0
   18d32:	d113      	bne.n	18d5c <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   18d34:	4b0f      	ldr	r3, [pc, #60]	; (18d74 <prvTraceSetObjectName+0xd4>)
   18d36:	681a      	ldr	r2, [r3, #0]
   18d38:	4b11      	ldr	r3, [pc, #68]	; (18d80 <prvTraceSetObjectName+0xe0>)
   18d3a:	881b      	ldrh	r3, [r3, #0]
   18d3c:	3398      	adds	r3, #152	; 0x98
   18d3e:	18d3      	adds	r3, r2, r3
   18d40:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   18d42:	4b0c      	ldr	r3, [pc, #48]	; (18d74 <prvTraceSetObjectName+0xd4>)
   18d44:	681a      	ldr	r2, [r3, #0]
   18d46:	1dfb      	adds	r3, r7, #7
   18d48:	781b      	ldrb	r3, [r3, #0]
   18d4a:	2170      	movs	r1, #112	; 0x70
   18d4c:	18d3      	adds	r3, r2, r3
   18d4e:	185b      	adds	r3, r3, r1
   18d50:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   18d52:	001a      	movs	r2, r3
   18d54:	683b      	ldr	r3, [r7, #0]
   18d56:	0019      	movs	r1, r3
   18d58:	4b0b      	ldr	r3, [pc, #44]	; (18d88 <prvTraceSetObjectName+0xe8>)
   18d5a:	4798      	blx	r3
		}
	}
}
   18d5c:	46bd      	mov	sp, r7
   18d5e:	b002      	add	sp, #8
   18d60:	bd80      	pop	{r7, pc}
   18d62:	46c0      	nop			; (mov r8, r8)
   18d64:	00036d54 	.word	0x00036d54
   18d68:	00018d8d 	.word	0x00018d8d
   18d6c:	00036d88 	.word	0x00036d88
   18d70:	00036db8 	.word	0x00036db8
   18d74:	20000d34 	.word	0x20000d34
   18d78:	00017aad 	.word	0x00017aad
   18d7c:	00018999 	.word	0x00018999
   18d80:	20000d3c 	.word	0x20000d3c
   18d84:	20000c94 	.word	0x20000c94
   18d88:	00018c59 	.word	0x00018c59

00018d8c <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   18d8c:	b580      	push	{r7, lr}
   18d8e:	b082      	sub	sp, #8
   18d90:	af00      	add	r7, sp, #0
   18d92:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   18d94:	4b11      	ldr	r3, [pc, #68]	; (18ddc <prvTraceError+0x50>)
   18d96:	681b      	ldr	r3, [r3, #0]
   18d98:	2b00      	cmp	r3, #0
   18d9a:	d001      	beq.n	18da0 <prvTraceError+0x14>
	{
		vTraceStop();
   18d9c:	4b10      	ldr	r3, [pc, #64]	; (18de0 <prvTraceError+0x54>)
   18d9e:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   18da0:	4b10      	ldr	r3, [pc, #64]	; (18de4 <prvTraceError+0x58>)
   18da2:	681b      	ldr	r3, [r3, #0]
   18da4:	2b00      	cmp	r3, #0
   18da6:	d115      	bne.n	18dd4 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   18da8:	4b0e      	ldr	r3, [pc, #56]	; (18de4 <prvTraceError+0x58>)
   18daa:	687a      	ldr	r2, [r7, #4]
   18dac:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   18dae:	4b0b      	ldr	r3, [pc, #44]	; (18ddc <prvTraceError+0x50>)
   18db0:	681b      	ldr	r3, [r3, #0]
   18db2:	2b00      	cmp	r3, #0
   18db4:	d00e      	beq.n	18dd4 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   18db6:	4b09      	ldr	r3, [pc, #36]	; (18ddc <prvTraceError+0x50>)
   18db8:	681b      	ldr	r3, [r3, #0]
   18dba:	4a0b      	ldr	r2, [pc, #44]	; (18de8 <prvTraceError+0x5c>)
   18dbc:	1898      	adds	r0, r3, r2
   18dbe:	4b09      	ldr	r3, [pc, #36]	; (18de4 <prvTraceError+0x58>)
   18dc0:	681b      	ldr	r3, [r3, #0]
   18dc2:	2250      	movs	r2, #80	; 0x50
   18dc4:	0019      	movs	r1, r3
   18dc6:	4b09      	ldr	r3, [pc, #36]	; (18dec <prvTraceError+0x60>)
   18dc8:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   18dca:	4b04      	ldr	r3, [pc, #16]	; (18ddc <prvTraceError+0x50>)
   18dcc:	681b      	ldr	r3, [r3, #0]
   18dce:	4a08      	ldr	r2, [pc, #32]	; (18df0 <prvTraceError+0x64>)
   18dd0:	2101      	movs	r1, #1
   18dd2:	5099      	str	r1, [r3, r2]
		}
	}
}
   18dd4:	46c0      	nop			; (mov r8, r8)
   18dd6:	46bd      	mov	sp, r7
   18dd8:	b002      	add	sp, #8
   18dda:	bd80      	pop	{r7, pc}
   18ddc:	20000d34 	.word	0x20000d34
   18de0:	00017c51 	.word	0x00017c51
   18de4:	20000c94 	.word	0x20000c94
   18de8:	000006bc 	.word	0x000006bc
   18dec:	00018c59 	.word	0x00018c59
   18df0:	000006b4 	.word	0x000006b4

00018df4 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   18df4:	b580      	push	{r7, lr}
   18df6:	b086      	sub	sp, #24
   18df8:	af00      	add	r7, sp, #0
   18dfa:	0002      	movs	r2, r0
   18dfc:	1dfb      	adds	r3, r7, #7
   18dfe:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   18e00:	2300      	movs	r3, #0
   18e02:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   18e04:	2300      	movs	r3, #0
   18e06:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   18e08:	1dfb      	adds	r3, r7, #7
   18e0a:	781b      	ldrb	r3, [r3, #0]
   18e0c:	2b00      	cmp	r3, #0
   18e0e:	d000      	beq.n	18e12 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   18e10:	e089      	b.n	18f26 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   18e12:	4b49      	ldr	r3, [pc, #292]	; (18f38 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   18e14:	0018      	movs	r0, r3
   18e16:	4b49      	ldr	r3, [pc, #292]	; (18f3c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   18e18:	4798      	blx	r3
   18e1a:	e08a      	b.n	18f32 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   18e1c:	4b48      	ldr	r3, [pc, #288]	; (18f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18e1e:	681b      	ldr	r3, [r3, #0]
   18e20:	69da      	ldr	r2, [r3, #28]
   18e22:	697b      	ldr	r3, [r7, #20]
   18e24:	18d3      	adds	r3, r2, r3
   18e26:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   18e28:	4b45      	ldr	r3, [pc, #276]	; (18f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18e2a:	6819      	ldr	r1, [r3, #0]
   18e2c:	693b      	ldr	r3, [r7, #16]
   18e2e:	009a      	lsls	r2, r3, #2
   18e30:	23e2      	movs	r3, #226	; 0xe2
   18e32:	00db      	lsls	r3, r3, #3
   18e34:	188a      	adds	r2, r1, r2
   18e36:	18d3      	adds	r3, r2, r3
   18e38:	781b      	ldrb	r3, [r3, #0]
   18e3a:	2b98      	cmp	r3, #152	; 0x98
   18e3c:	d934      	bls.n	18ea8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   18e3e:	4b40      	ldr	r3, [pc, #256]	; (18f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18e40:	6819      	ldr	r1, [r3, #0]
   18e42:	693b      	ldr	r3, [r7, #16]
   18e44:	009a      	lsls	r2, r3, #2
   18e46:	23e2      	movs	r3, #226	; 0xe2
   18e48:	00db      	lsls	r3, r3, #3
   18e4a:	188a      	adds	r2, r1, r2
   18e4c:	18d3      	adds	r3, r2, r3
   18e4e:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   18e50:	2ba7      	cmp	r3, #167	; 0xa7
   18e52:	d829      	bhi.n	18ea8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   18e54:	4b3a      	ldr	r3, [pc, #232]	; (18f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18e56:	6819      	ldr	r1, [r3, #0]
   18e58:	693b      	ldr	r3, [r7, #16]
   18e5a:	009a      	lsls	r2, r3, #2
   18e5c:	23e2      	movs	r3, #226	; 0xe2
   18e5e:	00db      	lsls	r3, r3, #3
   18e60:	188a      	adds	r2, r1, r2
   18e62:	18d3      	adds	r3, r2, r3
   18e64:	781a      	ldrb	r2, [r3, #0]
   18e66:	230f      	movs	r3, #15
   18e68:	18fb      	adds	r3, r7, r3
   18e6a:	3268      	adds	r2, #104	; 0x68
   18e6c:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   18e6e:	230f      	movs	r3, #15
   18e70:	18fb      	adds	r3, r7, r3
   18e72:	781a      	ldrb	r2, [r3, #0]
   18e74:	693b      	ldr	r3, [r7, #16]
   18e76:	18d2      	adds	r2, r2, r3
   18e78:	4b31      	ldr	r3, [pc, #196]	; (18f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18e7a:	681b      	ldr	r3, [r3, #0]
   18e7c:	699b      	ldr	r3, [r3, #24]
   18e7e:	429a      	cmp	r2, r3
   18e80:	d24d      	bcs.n	18f1e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   18e82:	4b2f      	ldr	r3, [pc, #188]	; (18f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18e84:	681a      	ldr	r2, [r3, #0]
   18e86:	693b      	ldr	r3, [r7, #16]
   18e88:	009b      	lsls	r3, r3, #2
   18e8a:	21e2      	movs	r1, #226	; 0xe2
   18e8c:	00c9      	lsls	r1, r1, #3
   18e8e:	468c      	mov	ip, r1
   18e90:	4463      	add	r3, ip
   18e92:	18d0      	adds	r0, r2, r3
   18e94:	230f      	movs	r3, #15
   18e96:	18fb      	adds	r3, r7, r3
   18e98:	781b      	ldrb	r3, [r3, #0]
   18e9a:	3301      	adds	r3, #1
   18e9c:	009b      	lsls	r3, r3, #2
   18e9e:	001a      	movs	r2, r3
   18ea0:	2100      	movs	r1, #0
   18ea2:	4b28      	ldr	r3, [pc, #160]	; (18f44 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18ea4:	4798      	blx	r3
		{
   18ea6:	e03a      	b.n	18f1e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   18ea8:	4b25      	ldr	r3, [pc, #148]	; (18f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18eaa:	6819      	ldr	r1, [r3, #0]
   18eac:	693b      	ldr	r3, [r7, #16]
   18eae:	009a      	lsls	r2, r3, #2
   18eb0:	23e2      	movs	r3, #226	; 0xe2
   18eb2:	00db      	lsls	r3, r3, #3
   18eb4:	188a      	adds	r2, r1, r2
   18eb6:	18d3      	adds	r3, r2, r3
   18eb8:	781b      	ldrb	r3, [r3, #0]
   18eba:	2b01      	cmp	r3, #1
   18ebc:	d130      	bne.n	18f20 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   18ebe:	693b      	ldr	r3, [r7, #16]
   18ec0:	1c5a      	adds	r2, r3, #1
   18ec2:	4b1f      	ldr	r3, [pc, #124]	; (18f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18ec4:	681b      	ldr	r3, [r3, #0]
   18ec6:	699b      	ldr	r3, [r3, #24]
   18ec8:	429a      	cmp	r2, r3
   18eca:	d20e      	bcs.n	18eea <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   18ecc:	4b1c      	ldr	r3, [pc, #112]	; (18f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18ece:	681a      	ldr	r2, [r3, #0]
   18ed0:	693b      	ldr	r3, [r7, #16]
   18ed2:	009b      	lsls	r3, r3, #2
   18ed4:	21e2      	movs	r1, #226	; 0xe2
   18ed6:	00c9      	lsls	r1, r1, #3
   18ed8:	468c      	mov	ip, r1
   18eda:	4463      	add	r3, ip
   18edc:	18d3      	adds	r3, r2, r3
   18ede:	2208      	movs	r2, #8
   18ee0:	2100      	movs	r1, #0
   18ee2:	0018      	movs	r0, r3
   18ee4:	4b17      	ldr	r3, [pc, #92]	; (18f44 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18ee6:	4798      	blx	r3
   18ee8:	e01a      	b.n	18f20 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   18eea:	4b15      	ldr	r3, [pc, #84]	; (18f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18eec:	681b      	ldr	r3, [r3, #0]
   18eee:	22e2      	movs	r2, #226	; 0xe2
   18ef0:	00d2      	lsls	r2, r2, #3
   18ef2:	4694      	mov	ip, r2
   18ef4:	4463      	add	r3, ip
   18ef6:	2204      	movs	r2, #4
   18ef8:	2100      	movs	r1, #0
   18efa:	0018      	movs	r0, r3
   18efc:	4b11      	ldr	r3, [pc, #68]	; (18f44 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18efe:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   18f00:	4b0f      	ldr	r3, [pc, #60]	; (18f40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18f02:	681a      	ldr	r2, [r3, #0]
   18f04:	693b      	ldr	r3, [r7, #16]
   18f06:	009b      	lsls	r3, r3, #2
   18f08:	21e2      	movs	r1, #226	; 0xe2
   18f0a:	00c9      	lsls	r1, r1, #3
   18f0c:	468c      	mov	ip, r1
   18f0e:	4463      	add	r3, ip
   18f10:	18d3      	adds	r3, r2, r3
   18f12:	2204      	movs	r2, #4
   18f14:	2100      	movs	r1, #0
   18f16:	0018      	movs	r0, r3
   18f18:	4b0a      	ldr	r3, [pc, #40]	; (18f44 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18f1a:	4798      	blx	r3
   18f1c:	e000      	b.n	18f20 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   18f1e:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   18f20:	697b      	ldr	r3, [r7, #20]
   18f22:	3301      	adds	r3, #1
   18f24:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   18f26:	1dfb      	adds	r3, r7, #7
   18f28:	781a      	ldrb	r2, [r3, #0]
   18f2a:	697b      	ldr	r3, [r7, #20]
   18f2c:	429a      	cmp	r2, r3
   18f2e:	d900      	bls.n	18f32 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   18f30:	e774      	b.n	18e1c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   18f32:	46bd      	mov	sp, r7
   18f34:	b006      	add	sp, #24
   18f36:	bd80      	pop	{r7, pc}
   18f38:	00036e18 	.word	0x00036e18
   18f3c:	00018d8d 	.word	0x00018d8d
   18f40:	20000d34 	.word	0x20000d34
   18f44:	000339ff 	.word	0x000339ff

00018f48 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   18f48:	b580      	push	{r7, lr}
   18f4a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   18f4c:	4b12      	ldr	r3, [pc, #72]	; (18f98 <prvTraceUpdateCounters+0x50>)
   18f4e:	681b      	ldr	r3, [r3, #0]
   18f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18f52:	2b00      	cmp	r3, #0
   18f54:	d01c      	beq.n	18f90 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   18f56:	4b10      	ldr	r3, [pc, #64]	; (18f98 <prvTraceUpdateCounters+0x50>)
   18f58:	681b      	ldr	r3, [r3, #0]
   18f5a:	695a      	ldr	r2, [r3, #20]
   18f5c:	3201      	adds	r2, #1
   18f5e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   18f60:	4b0d      	ldr	r3, [pc, #52]	; (18f98 <prvTraceUpdateCounters+0x50>)
   18f62:	681b      	ldr	r3, [r3, #0]
   18f64:	69da      	ldr	r2, [r3, #28]
   18f66:	3201      	adds	r2, #1
   18f68:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   18f6a:	4b0b      	ldr	r3, [pc, #44]	; (18f98 <prvTraceUpdateCounters+0x50>)
   18f6c:	681b      	ldr	r3, [r3, #0]
   18f6e:	69da      	ldr	r2, [r3, #28]
   18f70:	232c      	movs	r3, #44	; 0x2c
   18f72:	33ff      	adds	r3, #255	; 0xff
   18f74:	429a      	cmp	r2, r3
   18f76:	d907      	bls.n	18f88 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   18f78:	4b07      	ldr	r3, [pc, #28]	; (18f98 <prvTraceUpdateCounters+0x50>)
   18f7a:	681b      	ldr	r3, [r3, #0]
   18f7c:	2201      	movs	r2, #1
   18f7e:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   18f80:	4b05      	ldr	r3, [pc, #20]	; (18f98 <prvTraceUpdateCounters+0x50>)
   18f82:	681b      	ldr	r3, [r3, #0]
   18f84:	2200      	movs	r2, #0
   18f86:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   18f88:	2001      	movs	r0, #1
   18f8a:	4b04      	ldr	r3, [pc, #16]	; (18f9c <prvTraceUpdateCounters+0x54>)
   18f8c:	4798      	blx	r3
   18f8e:	e000      	b.n	18f92 <prvTraceUpdateCounters+0x4a>
		return;
   18f90:	46c0      	nop			; (mov r8, r8)
#endif
}
   18f92:	46bd      	mov	sp, r7
   18f94:	bd80      	pop	{r7, pc}
   18f96:	46c0      	nop			; (mov r8, r8)
   18f98:	20000d34 	.word	0x20000d34
   18f9c:	00018df5 	.word	0x00018df5

00018fa0 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   18fa0:	b5b0      	push	{r4, r5, r7, lr}
   18fa2:	b086      	sub	sp, #24
   18fa4:	af00      	add	r7, sp, #0
   18fa6:	0002      	movs	r2, r0
   18fa8:	1dbb      	adds	r3, r7, #6
   18faa:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   18fac:	2300      	movs	r3, #0
   18fae:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   18fb0:	2300      	movs	r3, #0
   18fb2:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   18fb4:	2300      	movs	r3, #0
   18fb6:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   18fb8:	1dbb      	adds	r3, r7, #6
   18fba:	881b      	ldrh	r3, [r3, #0]
   18fbc:	2bff      	cmp	r3, #255	; 0xff
   18fbe:	d00a      	beq.n	18fd6 <prvTraceGetDTS+0x36>
   18fc0:	1dbb      	adds	r3, r7, #6
   18fc2:	881b      	ldrh	r3, [r3, #0]
   18fc4:	4a60      	ldr	r2, [pc, #384]	; (19148 <prvTraceGetDTS+0x1a8>)
   18fc6:	4293      	cmp	r3, r2
   18fc8:	d005      	beq.n	18fd6 <prvTraceGetDTS+0x36>
   18fca:	4b60      	ldr	r3, [pc, #384]	; (1914c <prvTraceGetDTS+0x1ac>)
   18fcc:	0018      	movs	r0, r3
   18fce:	4b60      	ldr	r3, [pc, #384]	; (19150 <prvTraceGetDTS+0x1b0>)
   18fd0:	4798      	blx	r3
   18fd2:	2300      	movs	r3, #0
   18fd4:	e0b3      	b.n	1913e <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   18fd6:	4b5f      	ldr	r3, [pc, #380]	; (19154 <prvTraceGetDTS+0x1b4>)
   18fd8:	681b      	ldr	r3, [r3, #0]
   18fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18fdc:	2b00      	cmp	r3, #0
   18fde:	d118      	bne.n	19012 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   18fe0:	4b5d      	ldr	r3, [pc, #372]	; (19158 <prvTraceGetDTS+0x1b8>)
   18fe2:	681b      	ldr	r3, [r3, #0]
   18fe4:	2b00      	cmp	r3, #0
   18fe6:	d006      	beq.n	18ff6 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   18fe8:	4b5a      	ldr	r3, [pc, #360]	; (19154 <prvTraceGetDTS+0x1b4>)
   18fea:	681b      	ldr	r3, [r3, #0]
   18fec:	4a5a      	ldr	r2, [pc, #360]	; (19158 <prvTraceGetDTS+0x1b8>)
   18fee:	6812      	ldr	r2, [r2, #0]
   18ff0:	0892      	lsrs	r2, r2, #2
   18ff2:	625a      	str	r2, [r3, #36]	; 0x24
   18ff4:	e00d      	b.n	19012 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   18ff6:	4b59      	ldr	r3, [pc, #356]	; (1915c <prvTraceGetDTS+0x1bc>)
   18ff8:	681a      	ldr	r2, [r3, #0]
   18ffa:	4b59      	ldr	r3, [pc, #356]	; (19160 <prvTraceGetDTS+0x1c0>)
   18ffc:	681b      	ldr	r3, [r3, #0]
   18ffe:	429a      	cmp	r2, r3
   19000:	d007      	beq.n	19012 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   19002:	4b54      	ldr	r3, [pc, #336]	; (19154 <prvTraceGetDTS+0x1b4>)
   19004:	681c      	ldr	r4, [r3, #0]
   19006:	2000      	movs	r0, #0
   19008:	4b56      	ldr	r3, [pc, #344]	; (19164 <prvTraceGetDTS+0x1c4>)
   1900a:	4798      	blx	r3
   1900c:	0003      	movs	r3, r0
   1900e:	089b      	lsrs	r3, r3, #2
   19010:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   19012:	230c      	movs	r3, #12
   19014:	18fb      	adds	r3, r7, r3
   19016:	0018      	movs	r0, r3
   19018:	4b53      	ldr	r3, [pc, #332]	; (19168 <prvTraceGetDTS+0x1c8>)
   1901a:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1901c:	68fa      	ldr	r2, [r7, #12]
   1901e:	4b53      	ldr	r3, [pc, #332]	; (1916c <prvTraceGetDTS+0x1cc>)
   19020:	681b      	ldr	r3, [r3, #0]
   19022:	1ad3      	subs	r3, r2, r3
   19024:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   19026:	68fa      	ldr	r2, [r7, #12]
   19028:	4b50      	ldr	r3, [pc, #320]	; (1916c <prvTraceGetDTS+0x1cc>)
   1902a:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1902c:	4b49      	ldr	r3, [pc, #292]	; (19154 <prvTraceGetDTS+0x1b4>)
   1902e:	681b      	ldr	r3, [r3, #0]
   19030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19032:	2b00      	cmp	r3, #0
   19034:	d044      	beq.n	190c0 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   19036:	4b47      	ldr	r3, [pc, #284]	; (19154 <prvTraceGetDTS+0x1b4>)
   19038:	681b      	ldr	r3, [r3, #0]
   1903a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1903c:	693b      	ldr	r3, [r7, #16]
   1903e:	429a      	cmp	r2, r3
   19040:	d21e      	bcs.n	19080 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   19042:	4b44      	ldr	r3, [pc, #272]	; (19154 <prvTraceGetDTS+0x1b4>)
   19044:	681c      	ldr	r4, [r3, #0]
   19046:	4b43      	ldr	r3, [pc, #268]	; (19154 <prvTraceGetDTS+0x1b4>)
   19048:	681b      	ldr	r3, [r3, #0]
   1904a:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1904c:	4b41      	ldr	r3, [pc, #260]	; (19154 <prvTraceGetDTS+0x1b4>)
   1904e:	681b      	ldr	r3, [r3, #0]
   19050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19052:	4b47      	ldr	r3, [pc, #284]	; (19170 <prvTraceGetDTS+0x1d0>)
   19054:	0011      	movs	r1, r2
   19056:	6938      	ldr	r0, [r7, #16]
   19058:	4798      	blx	r3
   1905a:	0003      	movs	r3, r0
   1905c:	18eb      	adds	r3, r5, r3
   1905e:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   19060:	4b3c      	ldr	r3, [pc, #240]	; (19154 <prvTraceGetDTS+0x1b4>)
   19062:	681c      	ldr	r4, [r3, #0]
   19064:	4b3b      	ldr	r3, [pc, #236]	; (19154 <prvTraceGetDTS+0x1b4>)
   19066:	681b      	ldr	r3, [r3, #0]
   19068:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1906a:	4b3a      	ldr	r3, [pc, #232]	; (19154 <prvTraceGetDTS+0x1b4>)
   1906c:	681b      	ldr	r3, [r3, #0]
   1906e:	6a59      	ldr	r1, [r3, #36]	; 0x24
   19070:	693a      	ldr	r2, [r7, #16]
   19072:	4b40      	ldr	r3, [pc, #256]	; (19174 <prvTraceGetDTS+0x1d4>)
   19074:	0010      	movs	r0, r2
   19076:	4798      	blx	r3
   19078:	000b      	movs	r3, r1
   1907a:	18eb      	adds	r3, r5, r3
   1907c:	62a3      	str	r3, [r4, #40]	; 0x28
   1907e:	e007      	b.n	19090 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   19080:	4b34      	ldr	r3, [pc, #208]	; (19154 <prvTraceGetDTS+0x1b4>)
   19082:	681b      	ldr	r3, [r3, #0]
   19084:	4a33      	ldr	r2, [pc, #204]	; (19154 <prvTraceGetDTS+0x1b4>)
   19086:	6812      	ldr	r2, [r2, #0]
   19088:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1908a:	693a      	ldr	r2, [r7, #16]
   1908c:	188a      	adds	r2, r1, r2
   1908e:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   19090:	4b30      	ldr	r3, [pc, #192]	; (19154 <prvTraceGetDTS+0x1b4>)
   19092:	681b      	ldr	r3, [r3, #0]
   19094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   19096:	4b2f      	ldr	r3, [pc, #188]	; (19154 <prvTraceGetDTS+0x1b4>)
   19098:	681b      	ldr	r3, [r3, #0]
   1909a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1909c:	429a      	cmp	r2, r3
   1909e:	d313      	bcc.n	190c8 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   190a0:	4b2c      	ldr	r3, [pc, #176]	; (19154 <prvTraceGetDTS+0x1b4>)
   190a2:	681b      	ldr	r3, [r3, #0]
   190a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   190a6:	3201      	adds	r2, #1
   190a8:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   190aa:	4b2a      	ldr	r3, [pc, #168]	; (19154 <prvTraceGetDTS+0x1b4>)
   190ac:	681b      	ldr	r3, [r3, #0]
   190ae:	4a29      	ldr	r2, [pc, #164]	; (19154 <prvTraceGetDTS+0x1b4>)
   190b0:	6812      	ldr	r2, [r2, #0]
   190b2:	6a91      	ldr	r1, [r2, #40]	; 0x28
   190b4:	4a27      	ldr	r2, [pc, #156]	; (19154 <prvTraceGetDTS+0x1b4>)
   190b6:	6812      	ldr	r2, [r2, #0]
   190b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
   190ba:	1a8a      	subs	r2, r1, r2
   190bc:	629a      	str	r2, [r3, #40]	; 0x28
   190be:	e003      	b.n	190c8 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   190c0:	4b24      	ldr	r3, [pc, #144]	; (19154 <prvTraceGetDTS+0x1b4>)
   190c2:	681b      	ldr	r3, [r3, #0]
   190c4:	68fa      	ldr	r2, [r7, #12]
   190c6:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   190c8:	1dbb      	adds	r3, r7, #6
   190ca:	881a      	ldrh	r2, [r3, #0]
   190cc:	693b      	ldr	r3, [r7, #16]
   190ce:	429a      	cmp	r2, r3
   190d0:	d22f      	bcs.n	19132 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   190d2:	4b29      	ldr	r3, [pc, #164]	; (19178 <prvTraceGetDTS+0x1d8>)
   190d4:	4798      	blx	r3
   190d6:	0003      	movs	r3, r0
   190d8:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   190da:	697b      	ldr	r3, [r7, #20]
   190dc:	2b00      	cmp	r3, #0
   190de:	d028      	beq.n	19132 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   190e0:	1dbb      	adds	r3, r7, #6
   190e2:	881b      	ldrh	r3, [r3, #0]
   190e4:	4a18      	ldr	r2, [pc, #96]	; (19148 <prvTraceGetDTS+0x1a8>)
   190e6:	4293      	cmp	r3, r2
   190e8:	d10b      	bne.n	19102 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   190ea:	697b      	ldr	r3, [r7, #20]
   190ec:	22a9      	movs	r2, #169	; 0xa9
   190ee:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   190f0:	693b      	ldr	r3, [r7, #16]
   190f2:	0c1b      	lsrs	r3, r3, #16
   190f4:	b29a      	uxth	r2, r3
   190f6:	697b      	ldr	r3, [r7, #20]
   190f8:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   190fa:	697b      	ldr	r3, [r7, #20]
   190fc:	2200      	movs	r2, #0
   190fe:	705a      	strb	r2, [r3, #1]
   19100:	e015      	b.n	1912e <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   19102:	1dbb      	adds	r3, r7, #6
   19104:	881b      	ldrh	r3, [r3, #0]
   19106:	2bff      	cmp	r3, #255	; 0xff
   19108:	d10d      	bne.n	19126 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1910a:	697b      	ldr	r3, [r7, #20]
   1910c:	22a8      	movs	r2, #168	; 0xa8
   1910e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   19110:	693b      	ldr	r3, [r7, #16]
   19112:	0a1b      	lsrs	r3, r3, #8
   19114:	b29a      	uxth	r2, r3
   19116:	697b      	ldr	r3, [r7, #20]
   19118:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1911a:	693b      	ldr	r3, [r7, #16]
   1911c:	0e1b      	lsrs	r3, r3, #24
   1911e:	b2da      	uxtb	r2, r3
   19120:	697b      	ldr	r3, [r7, #20]
   19122:	705a      	strb	r2, [r3, #1]
   19124:	e003      	b.n	1912e <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   19126:	4b15      	ldr	r3, [pc, #84]	; (1917c <prvTraceGetDTS+0x1dc>)
   19128:	0018      	movs	r0, r3
   1912a:	4b09      	ldr	r3, [pc, #36]	; (19150 <prvTraceGetDTS+0x1b0>)
   1912c:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1912e:	4b14      	ldr	r3, [pc, #80]	; (19180 <prvTraceGetDTS+0x1e0>)
   19130:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   19132:	693b      	ldr	r3, [r7, #16]
   19134:	b29b      	uxth	r3, r3
   19136:	1dba      	adds	r2, r7, #6
   19138:	8812      	ldrh	r2, [r2, #0]
   1913a:	4013      	ands	r3, r2
   1913c:	b29b      	uxth	r3, r3
}
   1913e:	0018      	movs	r0, r3
   19140:	46bd      	mov	sp, r7
   19142:	b006      	add	sp, #24
   19144:	bdb0      	pop	{r4, r5, r7, pc}
   19146:	46c0      	nop			; (mov r8, r8)
   19148:	0000ffff 	.word	0x0000ffff
   1914c:	00036e70 	.word	0x00036e70
   19150:	00018d8d 	.word	0x00018d8d
   19154:	20000d34 	.word	0x20000d34
   19158:	20000c90 	.word	0x20000c90
   1915c:	e000e018 	.word	0xe000e018
   19160:	200050d8 	.word	0x200050d8
   19164:	0002913d 	.word	0x0002913d
   19168:	00019185 	.word	0x00019185
   1916c:	20000d40 	.word	0x20000d40
   19170:	00031d45 	.word	0x00031d45
   19174:	00031e51 	.word	0x00031e51
   19178:	00018945 	.word	0x00018945
   1917c:	00036eb0 	.word	0x00036eb0
   19180:	00018f49 	.word	0x00018f49

00019184 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   19184:	b580      	push	{r7, lr}
   19186:	b084      	sub	sp, #16
   19188:	af00      	add	r7, sp, #0
   1918a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1918c:	2300      	movs	r3, #0
   1918e:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   19190:	2300      	movs	r3, #0
   19192:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   19194:	4b2d      	ldr	r3, [pc, #180]	; (1924c <prvTracePortGetTimeStamp+0xc8>)
   19196:	681b      	ldr	r3, [r3, #0]
   19198:	2b01      	cmp	r3, #1
   1919a:	d107      	bne.n	191ac <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1919c:	687b      	ldr	r3, [r7, #4]
   1919e:	2b00      	cmp	r3, #0
   191a0:	d04f      	beq.n	19242 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   191a2:	4b2b      	ldr	r3, [pc, #172]	; (19250 <prvTracePortGetTimeStamp+0xcc>)
   191a4:	681a      	ldr	r2, [r3, #0]
   191a6:	687b      	ldr	r3, [r7, #4]
   191a8:	601a      	str	r2, [r3, #0]
		return;
   191aa:	e04a      	b.n	19242 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   191ac:	4b29      	ldr	r3, [pc, #164]	; (19254 <prvTracePortGetTimeStamp+0xd0>)
   191ae:	681a      	ldr	r2, [r3, #0]
   191b0:	4b29      	ldr	r3, [pc, #164]	; (19258 <prvTracePortGetTimeStamp+0xd4>)
   191b2:	681b      	ldr	r3, [r3, #0]
   191b4:	1ad3      	subs	r3, r2, r3
   191b6:	3301      	adds	r3, #1
   191b8:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   191ba:	4b28      	ldr	r3, [pc, #160]	; (1925c <prvTracePortGetTimeStamp+0xd8>)
   191bc:	681a      	ldr	r2, [r3, #0]
   191be:	4b28      	ldr	r3, [pc, #160]	; (19260 <prvTracePortGetTimeStamp+0xdc>)
   191c0:	681b      	ldr	r3, [r3, #0]
   191c2:	1ad3      	subs	r3, r2, r3
   191c4:	3b01      	subs	r3, #1
   191c6:	2b00      	cmp	r3, #0
   191c8:	db03      	blt.n	191d2 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   191ca:	4b24      	ldr	r3, [pc, #144]	; (1925c <prvTracePortGetTimeStamp+0xd8>)
   191cc:	681b      	ldr	r3, [r3, #0]
   191ce:	60fb      	str	r3, [r7, #12]
   191d0:	e002      	b.n	191d8 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   191d2:	4b23      	ldr	r3, [pc, #140]	; (19260 <prvTracePortGetTimeStamp+0xdc>)
   191d4:	681b      	ldr	r3, [r3, #0]
   191d6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   191d8:	4b20      	ldr	r3, [pc, #128]	; (1925c <prvTracePortGetTimeStamp+0xd8>)
   191da:	681b      	ldr	r3, [r3, #0]
   191dc:	68fa      	ldr	r2, [r7, #12]
   191de:	429a      	cmp	r2, r3
   191e0:	d107      	bne.n	191f2 <prvTracePortGetTimeStamp+0x6e>
   191e2:	4b20      	ldr	r3, [pc, #128]	; (19264 <prvTracePortGetTimeStamp+0xe0>)
   191e4:	681b      	ldr	r3, [r3, #0]
   191e6:	68ba      	ldr	r2, [r7, #8]
   191e8:	429a      	cmp	r2, r3
   191ea:	d202      	bcs.n	191f2 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   191ec:	68fb      	ldr	r3, [r7, #12]
   191ee:	3301      	adds	r3, #1
   191f0:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   191f2:	687b      	ldr	r3, [r7, #4]
   191f4:	2b00      	cmp	r3, #0
   191f6:	d016      	beq.n	19226 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   191f8:	4b16      	ldr	r3, [pc, #88]	; (19254 <prvTracePortGetTimeStamp+0xd0>)
   191fa:	681b      	ldr	r3, [r3, #0]
   191fc:	3301      	adds	r3, #1
   191fe:	089b      	lsrs	r3, r3, #2
   19200:	68fa      	ldr	r2, [r7, #12]
   19202:	435a      	muls	r2, r3
   19204:	4b12      	ldr	r3, [pc, #72]	; (19250 <prvTracePortGetTimeStamp+0xcc>)
   19206:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   19208:	4b12      	ldr	r3, [pc, #72]	; (19254 <prvTracePortGetTimeStamp+0xd0>)
   1920a:	681b      	ldr	r3, [r3, #0]
   1920c:	3301      	adds	r3, #1
   1920e:	2203      	movs	r2, #3
   19210:	4013      	ands	r3, r2
   19212:	68fa      	ldr	r2, [r7, #12]
   19214:	435a      	muls	r2, r3
   19216:	68bb      	ldr	r3, [r7, #8]
   19218:	18d3      	adds	r3, r2, r3
   1921a:	089a      	lsrs	r2, r3, #2
   1921c:	4b0c      	ldr	r3, [pc, #48]	; (19250 <prvTracePortGetTimeStamp+0xcc>)
   1921e:	681b      	ldr	r3, [r3, #0]
   19220:	18d2      	adds	r2, r2, r3
   19222:	4b0b      	ldr	r3, [pc, #44]	; (19250 <prvTracePortGetTimeStamp+0xcc>)
   19224:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   19226:	4b0d      	ldr	r3, [pc, #52]	; (1925c <prvTracePortGetTimeStamp+0xd8>)
   19228:	68fa      	ldr	r2, [r7, #12]
   1922a:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1922c:	687b      	ldr	r3, [r7, #4]
   1922e:	2b00      	cmp	r3, #0
   19230:	d003      	beq.n	1923a <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   19232:	4b07      	ldr	r3, [pc, #28]	; (19250 <prvTracePortGetTimeStamp+0xcc>)
   19234:	681a      	ldr	r2, [r3, #0]
   19236:	687b      	ldr	r3, [r7, #4]
   19238:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1923a:	4b0a      	ldr	r3, [pc, #40]	; (19264 <prvTracePortGetTimeStamp+0xe0>)
   1923c:	68ba      	ldr	r2, [r7, #8]
   1923e:	601a      	str	r2, [r3, #0]
   19240:	e000      	b.n	19244 <prvTracePortGetTimeStamp+0xc0>
		return;
   19242:	46c0      	nop			; (mov r8, r8)
}
   19244:	46bd      	mov	sp, r7
   19246:	b004      	add	sp, #16
   19248:	bd80      	pop	{r7, pc}
   1924a:	46c0      	nop			; (mov r8, r8)
   1924c:	20000c80 	.word	0x20000c80
   19250:	20000c84 	.word	0x20000c84
   19254:	e000e014 	.word	0xe000e014
   19258:	e000e018 	.word	0xe000e018
   1925c:	20000d44 	.word	0x20000d44
   19260:	20000c7c 	.word	0x20000c7c
   19264:	20000d48 	.word	0x20000d48

00019268 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   19268:	b580      	push	{r7, lr}
   1926a:	b082      	sub	sp, #8
   1926c:	af00      	add	r7, sp, #0
   1926e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19270:	687b      	ldr	r3, [r7, #4]
   19272:	3308      	adds	r3, #8
   19274:	001a      	movs	r2, r3
   19276:	687b      	ldr	r3, [r7, #4]
   19278:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1927a:	687b      	ldr	r3, [r7, #4]
   1927c:	2201      	movs	r2, #1
   1927e:	4252      	negs	r2, r2
   19280:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19282:	687b      	ldr	r3, [r7, #4]
   19284:	3308      	adds	r3, #8
   19286:	001a      	movs	r2, r3
   19288:	687b      	ldr	r3, [r7, #4]
   1928a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1928c:	687b      	ldr	r3, [r7, #4]
   1928e:	3308      	adds	r3, #8
   19290:	001a      	movs	r2, r3
   19292:	687b      	ldr	r3, [r7, #4]
   19294:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   19296:	687b      	ldr	r3, [r7, #4]
   19298:	2200      	movs	r2, #0
   1929a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1929c:	46c0      	nop			; (mov r8, r8)
   1929e:	46bd      	mov	sp, r7
   192a0:	b002      	add	sp, #8
   192a2:	bd80      	pop	{r7, pc}

000192a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   192a4:	b580      	push	{r7, lr}
   192a6:	b082      	sub	sp, #8
   192a8:	af00      	add	r7, sp, #0
   192aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   192ac:	687b      	ldr	r3, [r7, #4]
   192ae:	2200      	movs	r2, #0
   192b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   192b2:	46c0      	nop			; (mov r8, r8)
   192b4:	46bd      	mov	sp, r7
   192b6:	b002      	add	sp, #8
   192b8:	bd80      	pop	{r7, pc}

000192ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   192ba:	b580      	push	{r7, lr}
   192bc:	b084      	sub	sp, #16
   192be:	af00      	add	r7, sp, #0
   192c0:	6078      	str	r0, [r7, #4]
   192c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   192c4:	687b      	ldr	r3, [r7, #4]
   192c6:	685b      	ldr	r3, [r3, #4]
   192c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   192ca:	683b      	ldr	r3, [r7, #0]
   192cc:	68fa      	ldr	r2, [r7, #12]
   192ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   192d0:	68fb      	ldr	r3, [r7, #12]
   192d2:	689a      	ldr	r2, [r3, #8]
   192d4:	683b      	ldr	r3, [r7, #0]
   192d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   192d8:	68fb      	ldr	r3, [r7, #12]
   192da:	689b      	ldr	r3, [r3, #8]
   192dc:	683a      	ldr	r2, [r7, #0]
   192de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   192e0:	68fb      	ldr	r3, [r7, #12]
   192e2:	683a      	ldr	r2, [r7, #0]
   192e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   192e6:	683b      	ldr	r3, [r7, #0]
   192e8:	687a      	ldr	r2, [r7, #4]
   192ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   192ec:	687b      	ldr	r3, [r7, #4]
   192ee:	681b      	ldr	r3, [r3, #0]
   192f0:	1c5a      	adds	r2, r3, #1
   192f2:	687b      	ldr	r3, [r7, #4]
   192f4:	601a      	str	r2, [r3, #0]
}
   192f6:	46c0      	nop			; (mov r8, r8)
   192f8:	46bd      	mov	sp, r7
   192fa:	b004      	add	sp, #16
   192fc:	bd80      	pop	{r7, pc}

000192fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   192fe:	b580      	push	{r7, lr}
   19300:	b084      	sub	sp, #16
   19302:	af00      	add	r7, sp, #0
   19304:	6078      	str	r0, [r7, #4]
   19306:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   19308:	683b      	ldr	r3, [r7, #0]
   1930a:	681b      	ldr	r3, [r3, #0]
   1930c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1930e:	68bb      	ldr	r3, [r7, #8]
   19310:	3301      	adds	r3, #1
   19312:	d103      	bne.n	1931c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   19314:	687b      	ldr	r3, [r7, #4]
   19316:	691b      	ldr	r3, [r3, #16]
   19318:	60fb      	str	r3, [r7, #12]
   1931a:	e00c      	b.n	19336 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1931c:	687b      	ldr	r3, [r7, #4]
   1931e:	3308      	adds	r3, #8
   19320:	60fb      	str	r3, [r7, #12]
   19322:	e002      	b.n	1932a <vListInsert+0x2c>
   19324:	68fb      	ldr	r3, [r7, #12]
   19326:	685b      	ldr	r3, [r3, #4]
   19328:	60fb      	str	r3, [r7, #12]
   1932a:	68fb      	ldr	r3, [r7, #12]
   1932c:	685b      	ldr	r3, [r3, #4]
   1932e:	681a      	ldr	r2, [r3, #0]
   19330:	68bb      	ldr	r3, [r7, #8]
   19332:	429a      	cmp	r2, r3
   19334:	d9f6      	bls.n	19324 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   19336:	68fb      	ldr	r3, [r7, #12]
   19338:	685a      	ldr	r2, [r3, #4]
   1933a:	683b      	ldr	r3, [r7, #0]
   1933c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1933e:	683b      	ldr	r3, [r7, #0]
   19340:	685b      	ldr	r3, [r3, #4]
   19342:	683a      	ldr	r2, [r7, #0]
   19344:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   19346:	683b      	ldr	r3, [r7, #0]
   19348:	68fa      	ldr	r2, [r7, #12]
   1934a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1934c:	68fb      	ldr	r3, [r7, #12]
   1934e:	683a      	ldr	r2, [r7, #0]
   19350:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   19352:	683b      	ldr	r3, [r7, #0]
   19354:	687a      	ldr	r2, [r7, #4]
   19356:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   19358:	687b      	ldr	r3, [r7, #4]
   1935a:	681b      	ldr	r3, [r3, #0]
   1935c:	1c5a      	adds	r2, r3, #1
   1935e:	687b      	ldr	r3, [r7, #4]
   19360:	601a      	str	r2, [r3, #0]
}
   19362:	46c0      	nop			; (mov r8, r8)
   19364:	46bd      	mov	sp, r7
   19366:	b004      	add	sp, #16
   19368:	bd80      	pop	{r7, pc}

0001936a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1936a:	b580      	push	{r7, lr}
   1936c:	b084      	sub	sp, #16
   1936e:	af00      	add	r7, sp, #0
   19370:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   19372:	687b      	ldr	r3, [r7, #4]
   19374:	691b      	ldr	r3, [r3, #16]
   19376:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   19378:	687b      	ldr	r3, [r7, #4]
   1937a:	685b      	ldr	r3, [r3, #4]
   1937c:	687a      	ldr	r2, [r7, #4]
   1937e:	6892      	ldr	r2, [r2, #8]
   19380:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   19382:	687b      	ldr	r3, [r7, #4]
   19384:	689b      	ldr	r3, [r3, #8]
   19386:	687a      	ldr	r2, [r7, #4]
   19388:	6852      	ldr	r2, [r2, #4]
   1938a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1938c:	68fb      	ldr	r3, [r7, #12]
   1938e:	685a      	ldr	r2, [r3, #4]
   19390:	687b      	ldr	r3, [r7, #4]
   19392:	429a      	cmp	r2, r3
   19394:	d103      	bne.n	1939e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   19396:	687b      	ldr	r3, [r7, #4]
   19398:	689a      	ldr	r2, [r3, #8]
   1939a:	68fb      	ldr	r3, [r7, #12]
   1939c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1939e:	687b      	ldr	r3, [r7, #4]
   193a0:	2200      	movs	r2, #0
   193a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   193a4:	68fb      	ldr	r3, [r7, #12]
   193a6:	681b      	ldr	r3, [r3, #0]
   193a8:	1e5a      	subs	r2, r3, #1
   193aa:	68fb      	ldr	r3, [r7, #12]
   193ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   193ae:	68fb      	ldr	r3, [r7, #12]
   193b0:	681b      	ldr	r3, [r3, #0]
}
   193b2:	0018      	movs	r0, r3
   193b4:	46bd      	mov	sp, r7
   193b6:	b004      	add	sp, #16
   193b8:	bd80      	pop	{r7, pc}
	...

000193bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   193bc:	b580      	push	{r7, lr}
   193be:	b084      	sub	sp, #16
   193c0:	af00      	add	r7, sp, #0
   193c2:	60f8      	str	r0, [r7, #12]
   193c4:	60b9      	str	r1, [r7, #8]
   193c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   193c8:	68fb      	ldr	r3, [r7, #12]
   193ca:	3b04      	subs	r3, #4
   193cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   193ce:	68fb      	ldr	r3, [r7, #12]
   193d0:	2280      	movs	r2, #128	; 0x80
   193d2:	0452      	lsls	r2, r2, #17
   193d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   193d6:	68fb      	ldr	r3, [r7, #12]
   193d8:	3b04      	subs	r3, #4
   193da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   193dc:	68ba      	ldr	r2, [r7, #8]
   193de:	68fb      	ldr	r3, [r7, #12]
   193e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   193e2:	68fb      	ldr	r3, [r7, #12]
   193e4:	3b04      	subs	r3, #4
   193e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   193e8:	4a08      	ldr	r2, [pc, #32]	; (1940c <pxPortInitialiseStack+0x50>)
   193ea:	68fb      	ldr	r3, [r7, #12]
   193ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   193ee:	68fb      	ldr	r3, [r7, #12]
   193f0:	3b14      	subs	r3, #20
   193f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   193f4:	687a      	ldr	r2, [r7, #4]
   193f6:	68fb      	ldr	r3, [r7, #12]
   193f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   193fa:	68fb      	ldr	r3, [r7, #12]
   193fc:	3b20      	subs	r3, #32
   193fe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   19400:	68fb      	ldr	r3, [r7, #12]
}
   19402:	0018      	movs	r0, r3
   19404:	46bd      	mov	sp, r7
   19406:	b004      	add	sp, #16
   19408:	bd80      	pop	{r7, pc}
   1940a:	46c0      	nop			; (mov r8, r8)
   1940c:	00019411 	.word	0x00019411

00019410 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   19410:	b580      	push	{r7, lr}
   19412:	b082      	sub	sp, #8
   19414:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   19416:	2300      	movs	r3, #0
   19418:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1941a:	4b07      	ldr	r3, [pc, #28]	; (19438 <prvTaskExitError+0x28>)
   1941c:	681b      	ldr	r3, [r3, #0]
   1941e:	3301      	adds	r3, #1
   19420:	d001      	beq.n	19426 <prvTaskExitError+0x16>
   19422:	b672      	cpsid	i
   19424:	e7fe      	b.n	19424 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   19426:	b672      	cpsid	i
	while( ulDummy == 0 )
   19428:	46c0      	nop			; (mov r8, r8)
   1942a:	687b      	ldr	r3, [r7, #4]
   1942c:	2b00      	cmp	r3, #0
   1942e:	d0fc      	beq.n	1942a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   19430:	46c0      	nop			; (mov r8, r8)
   19432:	46bd      	mov	sp, r7
   19434:	b002      	add	sp, #8
   19436:	bd80      	pop	{r7, pc}
   19438:	200000bc 	.word	0x200000bc

0001943c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1943c:	b580      	push	{r7, lr}
   1943e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   19440:	46c0      	nop			; (mov r8, r8)
   19442:	46bd      	mov	sp, r7
   19444:	bd80      	pop	{r7, pc}
	...

00019450 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   19450:	4a0b      	ldr	r2, [pc, #44]	; (19480 <pxCurrentTCBConst2>)
   19452:	6813      	ldr	r3, [r2, #0]
   19454:	6818      	ldr	r0, [r3, #0]
   19456:	3020      	adds	r0, #32
   19458:	f380 8809 	msr	PSP, r0
   1945c:	2002      	movs	r0, #2
   1945e:	f380 8814 	msr	CONTROL, r0
   19462:	f3bf 8f6f 	isb	sy
   19466:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   19468:	46ae      	mov	lr, r5
   1946a:	bc08      	pop	{r3}
   1946c:	bc04      	pop	{r2}
   1946e:	b662      	cpsie	i
   19470:	4718      	bx	r3
   19472:	46c0      	nop			; (mov r8, r8)
   19474:	46c0      	nop			; (mov r8, r8)
   19476:	46c0      	nop			; (mov r8, r8)
   19478:	46c0      	nop			; (mov r8, r8)
   1947a:	46c0      	nop			; (mov r8, r8)
   1947c:	46c0      	nop			; (mov r8, r8)
   1947e:	46c0      	nop			; (mov r8, r8)

00019480 <pxCurrentTCBConst2>:
   19480:	20003c34 	.word	0x20003c34
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   19484:	46c0      	nop			; (mov r8, r8)
   19486:	46c0      	nop			; (mov r8, r8)

00019488 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   19488:	b580      	push	{r7, lr}
   1948a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1948c:	4b0e      	ldr	r3, [pc, #56]	; (194c8 <xPortStartScheduler+0x40>)
   1948e:	4a0e      	ldr	r2, [pc, #56]	; (194c8 <xPortStartScheduler+0x40>)
   19490:	6812      	ldr	r2, [r2, #0]
   19492:	21ff      	movs	r1, #255	; 0xff
   19494:	0409      	lsls	r1, r1, #16
   19496:	430a      	orrs	r2, r1
   19498:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1949a:	4b0b      	ldr	r3, [pc, #44]	; (194c8 <xPortStartScheduler+0x40>)
   1949c:	4a0a      	ldr	r2, [pc, #40]	; (194c8 <xPortStartScheduler+0x40>)
   1949e:	6812      	ldr	r2, [r2, #0]
   194a0:	21ff      	movs	r1, #255	; 0xff
   194a2:	0609      	lsls	r1, r1, #24
   194a4:	430a      	orrs	r2, r1
   194a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   194a8:	4b08      	ldr	r3, [pc, #32]	; (194cc <xPortStartScheduler+0x44>)
   194aa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   194ac:	4b08      	ldr	r3, [pc, #32]	; (194d0 <xPortStartScheduler+0x48>)
   194ae:	2200      	movs	r2, #0
   194b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   194b2:	4b08      	ldr	r3, [pc, #32]	; (194d4 <xPortStartScheduler+0x4c>)
   194b4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   194b6:	4b08      	ldr	r3, [pc, #32]	; (194d8 <xPortStartScheduler+0x50>)
   194b8:	4798      	blx	r3
	prvTaskExitError();
   194ba:	4b08      	ldr	r3, [pc, #32]	; (194dc <xPortStartScheduler+0x54>)
   194bc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   194be:	2300      	movs	r3, #0
}
   194c0:	0018      	movs	r0, r3
   194c2:	46bd      	mov	sp, r7
   194c4:	bd80      	pop	{r7, pc}
   194c6:	46c0      	nop			; (mov r8, r8)
   194c8:	e000ed20 	.word	0xe000ed20
   194cc:	000195e9 	.word	0x000195e9
   194d0:	200000bc 	.word	0x200000bc
   194d4:	00019451 	.word	0x00019451
   194d8:	0001bb49 	.word	0x0001bb49
   194dc:	00019411 	.word	0x00019411

000194e0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   194e0:	b580      	push	{r7, lr}
   194e2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   194e4:	4b03      	ldr	r3, [pc, #12]	; (194f4 <vPortYield+0x14>)
   194e6:	2280      	movs	r2, #128	; 0x80
   194e8:	0552      	lsls	r2, r2, #21
   194ea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   194ec:	46c0      	nop			; (mov r8, r8)
   194ee:	46bd      	mov	sp, r7
   194f0:	bd80      	pop	{r7, pc}
   194f2:	46c0      	nop			; (mov r8, r8)
   194f4:	e000ed04 	.word	0xe000ed04

000194f8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   194f8:	b580      	push	{r7, lr}
   194fa:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   194fc:	b672      	cpsid	i
    uxCriticalNesting++;
   194fe:	4b06      	ldr	r3, [pc, #24]	; (19518 <vPortEnterCritical+0x20>)
   19500:	681b      	ldr	r3, [r3, #0]
   19502:	1c5a      	adds	r2, r3, #1
   19504:	4b04      	ldr	r3, [pc, #16]	; (19518 <vPortEnterCritical+0x20>)
   19506:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   19508:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1950c:	f3bf 8f6f 	isb	sy
}
   19510:	46c0      	nop			; (mov r8, r8)
   19512:	46bd      	mov	sp, r7
   19514:	bd80      	pop	{r7, pc}
   19516:	46c0      	nop			; (mov r8, r8)
   19518:	200000bc 	.word	0x200000bc

0001951c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1951c:	b580      	push	{r7, lr}
   1951e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   19520:	4b09      	ldr	r3, [pc, #36]	; (19548 <vPortExitCritical+0x2c>)
   19522:	681b      	ldr	r3, [r3, #0]
   19524:	2b00      	cmp	r3, #0
   19526:	d101      	bne.n	1952c <vPortExitCritical+0x10>
   19528:	b672      	cpsid	i
   1952a:	e7fe      	b.n	1952a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1952c:	4b06      	ldr	r3, [pc, #24]	; (19548 <vPortExitCritical+0x2c>)
   1952e:	681b      	ldr	r3, [r3, #0]
   19530:	1e5a      	subs	r2, r3, #1
   19532:	4b05      	ldr	r3, [pc, #20]	; (19548 <vPortExitCritical+0x2c>)
   19534:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   19536:	4b04      	ldr	r3, [pc, #16]	; (19548 <vPortExitCritical+0x2c>)
   19538:	681b      	ldr	r3, [r3, #0]
   1953a:	2b00      	cmp	r3, #0
   1953c:	d100      	bne.n	19540 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1953e:	b662      	cpsie	i
    }
}
   19540:	46c0      	nop			; (mov r8, r8)
   19542:	46bd      	mov	sp, r7
   19544:	bd80      	pop	{r7, pc}
   19546:	46c0      	nop			; (mov r8, r8)
   19548:	200000bc 	.word	0x200000bc

0001954c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1954c:	f3ef 8010 	mrs	r0, PRIMASK
   19550:	b672      	cpsid	i
   19552:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   19554:	46c0      	nop			; (mov r8, r8)
   19556:	0018      	movs	r0, r3

00019558 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   19558:	f380 8810 	msr	PRIMASK, r0
   1955c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1955e:	46c0      	nop			; (mov r8, r8)

00019560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   19560:	f3ef 8009 	mrs	r0, PSP
   19564:	4b0e      	ldr	r3, [pc, #56]	; (195a0 <pxCurrentTCBConst>)
   19566:	681a      	ldr	r2, [r3, #0]
   19568:	3820      	subs	r0, #32
   1956a:	6010      	str	r0, [r2, #0]
   1956c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1956e:	4644      	mov	r4, r8
   19570:	464d      	mov	r5, r9
   19572:	4656      	mov	r6, sl
   19574:	465f      	mov	r7, fp
   19576:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   19578:	b508      	push	{r3, lr}
   1957a:	b672      	cpsid	i
   1957c:	f002 fae4 	bl	1bb48 <vTaskSwitchContext>
   19580:	b662      	cpsie	i
   19582:	bc0c      	pop	{r2, r3}
   19584:	6811      	ldr	r1, [r2, #0]
   19586:	6808      	ldr	r0, [r1, #0]
   19588:	3010      	adds	r0, #16
   1958a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1958c:	46a0      	mov	r8, r4
   1958e:	46a9      	mov	r9, r5
   19590:	46b2      	mov	sl, r6
   19592:	46bb      	mov	fp, r7
   19594:	f380 8809 	msr	PSP, r0
   19598:	3820      	subs	r0, #32
   1959a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1959c:	4718      	bx	r3
   1959e:	46c0      	nop			; (mov r8, r8)

000195a0 <pxCurrentTCBConst>:
   195a0:	20003c34 	.word	0x20003c34
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   195a4:	46c0      	nop			; (mov r8, r8)
   195a6:	46c0      	nop			; (mov r8, r8)

000195a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   195a8:	b580      	push	{r7, lr}
   195aa:	b082      	sub	sp, #8
   195ac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   195ae:	4b0a      	ldr	r3, [pc, #40]	; (195d8 <SysTick_Handler+0x30>)
   195b0:	4798      	blx	r3
   195b2:	0003      	movs	r3, r0
   195b4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   195b6:	4b09      	ldr	r3, [pc, #36]	; (195dc <SysTick_Handler+0x34>)
   195b8:	4798      	blx	r3
   195ba:	1e03      	subs	r3, r0, #0
   195bc:	d003      	beq.n	195c6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   195be:	4b08      	ldr	r3, [pc, #32]	; (195e0 <SysTick_Handler+0x38>)
   195c0:	2280      	movs	r2, #128	; 0x80
   195c2:	0552      	lsls	r2, r2, #21
   195c4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   195c6:	687b      	ldr	r3, [r7, #4]
   195c8:	0018      	movs	r0, r3
   195ca:	4b06      	ldr	r3, [pc, #24]	; (195e4 <SysTick_Handler+0x3c>)
   195cc:	4798      	blx	r3
}
   195ce:	46c0      	nop			; (mov r8, r8)
   195d0:	46bd      	mov	sp, r7
   195d2:	b002      	add	sp, #8
   195d4:	bd80      	pop	{r7, pc}
   195d6:	46c0      	nop			; (mov r8, r8)
   195d8:	0001954d 	.word	0x0001954d
   195dc:	0001b959 	.word	0x0001b959
   195e0:	e000ed04 	.word	0xe000ed04
   195e4:	00019559 	.word	0x00019559

000195e8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   195e8:	b5b0      	push	{r4, r5, r7, lr}
   195ea:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   195ec:	4b0b      	ldr	r3, [pc, #44]	; (1961c <prvSetupTimerInterrupt+0x34>)
   195ee:	2200      	movs	r2, #0
   195f0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   195f2:	4b0b      	ldr	r3, [pc, #44]	; (19620 <prvSetupTimerInterrupt+0x38>)
   195f4:	2200      	movs	r2, #0
   195f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   195f8:	4c0a      	ldr	r4, [pc, #40]	; (19624 <prvSetupTimerInterrupt+0x3c>)
   195fa:	2000      	movs	r0, #0
   195fc:	4b0a      	ldr	r3, [pc, #40]	; (19628 <prvSetupTimerInterrupt+0x40>)
   195fe:	4798      	blx	r3
   19600:	4b0a      	ldr	r3, [pc, #40]	; (1962c <prvSetupTimerInterrupt+0x44>)
   19602:	22fa      	movs	r2, #250	; 0xfa
   19604:	0091      	lsls	r1, r2, #2
   19606:	4798      	blx	r3
   19608:	0003      	movs	r3, r0
   1960a:	3b01      	subs	r3, #1
   1960c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1960e:	4b03      	ldr	r3, [pc, #12]	; (1961c <prvSetupTimerInterrupt+0x34>)
   19610:	2207      	movs	r2, #7
   19612:	601a      	str	r2, [r3, #0]
}
   19614:	46c0      	nop			; (mov r8, r8)
   19616:	46bd      	mov	sp, r7
   19618:	bdb0      	pop	{r4, r5, r7, pc}
   1961a:	46c0      	nop			; (mov r8, r8)
   1961c:	e000e010 	.word	0xe000e010
   19620:	e000e018 	.word	0xe000e018
   19624:	e000e014 	.word	0xe000e014
   19628:	0002913d 	.word	0x0002913d
   1962c:	00031d45 	.word	0x00031d45

00019630 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   19630:	b580      	push	{r7, lr}
   19632:	b084      	sub	sp, #16
   19634:	af00      	add	r7, sp, #0
   19636:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   19638:	2300      	movs	r3, #0
   1963a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1963c:	687b      	ldr	r3, [r7, #4]
   1963e:	2207      	movs	r2, #7
   19640:	4013      	ands	r3, r2
   19642:	d004      	beq.n	1964e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   19644:	687b      	ldr	r3, [r7, #4]
   19646:	2207      	movs	r2, #7
   19648:	4393      	bics	r3, r2
   1964a:	3308      	adds	r3, #8
   1964c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1964e:	4b21      	ldr	r3, [pc, #132]	; (196d4 <pvPortMalloc+0xa4>)
   19650:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   19652:	4b21      	ldr	r3, [pc, #132]	; (196d8 <pvPortMalloc+0xa8>)
   19654:	681b      	ldr	r3, [r3, #0]
   19656:	2b00      	cmp	r3, #0
   19658:	d105      	bne.n	19666 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1965a:	4b20      	ldr	r3, [pc, #128]	; (196dc <pvPortMalloc+0xac>)
   1965c:	2207      	movs	r2, #7
   1965e:	4393      	bics	r3, r2
   19660:	001a      	movs	r2, r3
   19662:	4b1d      	ldr	r3, [pc, #116]	; (196d8 <pvPortMalloc+0xa8>)
   19664:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   19666:	4b1e      	ldr	r3, [pc, #120]	; (196e0 <pvPortMalloc+0xb0>)
   19668:	681a      	ldr	r2, [r3, #0]
   1966a:	687b      	ldr	r3, [r7, #4]
   1966c:	18d3      	adds	r3, r2, r3
   1966e:	4a1d      	ldr	r2, [pc, #116]	; (196e4 <pvPortMalloc+0xb4>)
   19670:	4293      	cmp	r3, r2
   19672:	d813      	bhi.n	1969c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   19674:	4b1a      	ldr	r3, [pc, #104]	; (196e0 <pvPortMalloc+0xb0>)
   19676:	681a      	ldr	r2, [r3, #0]
   19678:	687b      	ldr	r3, [r7, #4]
   1967a:	18d2      	adds	r2, r2, r3
   1967c:	4b18      	ldr	r3, [pc, #96]	; (196e0 <pvPortMalloc+0xb0>)
   1967e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   19680:	429a      	cmp	r2, r3
   19682:	d90b      	bls.n	1969c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   19684:	4b14      	ldr	r3, [pc, #80]	; (196d8 <pvPortMalloc+0xa8>)
   19686:	681a      	ldr	r2, [r3, #0]
   19688:	4b15      	ldr	r3, [pc, #84]	; (196e0 <pvPortMalloc+0xb0>)
   1968a:	681b      	ldr	r3, [r3, #0]
   1968c:	18d3      	adds	r3, r2, r3
   1968e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   19690:	4b13      	ldr	r3, [pc, #76]	; (196e0 <pvPortMalloc+0xb0>)
   19692:	681a      	ldr	r2, [r3, #0]
   19694:	687b      	ldr	r3, [r7, #4]
   19696:	18d2      	adds	r2, r2, r3
   19698:	4b11      	ldr	r3, [pc, #68]	; (196e0 <pvPortMalloc+0xb0>)
   1969a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1969c:	68fb      	ldr	r3, [r7, #12]
   1969e:	2b00      	cmp	r3, #0
   196a0:	d006      	beq.n	196b0 <pvPortMalloc+0x80>
   196a2:	68fb      	ldr	r3, [r7, #12]
   196a4:	687a      	ldr	r2, [r7, #4]
   196a6:	0019      	movs	r1, r3
   196a8:	2094      	movs	r0, #148	; 0x94
   196aa:	4b0f      	ldr	r3, [pc, #60]	; (196e8 <pvPortMalloc+0xb8>)
   196ac:	4798      	blx	r3
   196ae:	e005      	b.n	196bc <pvPortMalloc+0x8c>
   196b0:	68fb      	ldr	r3, [r7, #12]
   196b2:	687a      	ldr	r2, [r7, #4]
   196b4:	0019      	movs	r1, r3
   196b6:	20e8      	movs	r0, #232	; 0xe8
   196b8:	4b0b      	ldr	r3, [pc, #44]	; (196e8 <pvPortMalloc+0xb8>)
   196ba:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   196bc:	4b0b      	ldr	r3, [pc, #44]	; (196ec <pvPortMalloc+0xbc>)
   196be:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   196c0:	68fb      	ldr	r3, [r7, #12]
   196c2:	2b00      	cmp	r3, #0
   196c4:	d101      	bne.n	196ca <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   196c6:	4b0a      	ldr	r3, [pc, #40]	; (196f0 <pvPortMalloc+0xc0>)
   196c8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   196ca:	68fb      	ldr	r3, [r7, #12]
}
   196cc:	0018      	movs	r0, r3
   196ce:	46bd      	mov	sp, r7
   196d0:	b004      	add	sp, #16
   196d2:	bd80      	pop	{r7, pc}
   196d4:	0001b7b5 	.word	0x0001b7b5
   196d8:	20003c30 	.word	0x20003c30
   196dc:	20000d54 	.word	0x20000d54
   196e0:	20003c2c 	.word	0x20003c2c
   196e4:	00002ed7 	.word	0x00002ed7
   196e8:	00017d99 	.word	0x00017d99
   196ec:	0001b7cd 	.word	0x0001b7cd
   196f0:	00031d15 	.word	0x00031d15

000196f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   196f4:	b580      	push	{r7, lr}
   196f6:	b082      	sub	sp, #8
   196f8:	af00      	add	r7, sp, #0
   196fa:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   196fc:	687b      	ldr	r3, [r7, #4]
   196fe:	2b00      	cmp	r3, #0
   19700:	d001      	beq.n	19706 <vPortFree+0x12>
   19702:	b672      	cpsid	i
   19704:	e7fe      	b.n	19704 <vPortFree+0x10>
}
   19706:	46c0      	nop			; (mov r8, r8)
   19708:	46bd      	mov	sp, r7
   1970a:	b002      	add	sp, #8
   1970c:	bd80      	pop	{r7, pc}
	...

00019710 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   19710:	b580      	push	{r7, lr}
   19712:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   19714:	4b03      	ldr	r3, [pc, #12]	; (19724 <xPortGetFreeHeapSize+0x14>)
   19716:	681b      	ldr	r3, [r3, #0]
   19718:	4a03      	ldr	r2, [pc, #12]	; (19728 <xPortGetFreeHeapSize+0x18>)
   1971a:	1ad3      	subs	r3, r2, r3
}
   1971c:	0018      	movs	r0, r3
   1971e:	46bd      	mov	sp, r7
   19720:	bd80      	pop	{r7, pc}
   19722:	46c0      	nop			; (mov r8, r8)
   19724:	20003c2c 	.word	0x20003c2c
   19728:	00002ed8 	.word	0x00002ed8

0001972c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1972c:	b580      	push	{r7, lr}
   1972e:	b084      	sub	sp, #16
   19730:	af00      	add	r7, sp, #0
   19732:	6078      	str	r0, [r7, #4]
   19734:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19736:	687b      	ldr	r3, [r7, #4]
   19738:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1973a:	68fb      	ldr	r3, [r7, #12]
   1973c:	2b00      	cmp	r3, #0
   1973e:	d101      	bne.n	19744 <xQueueGenericReset+0x18>
   19740:	b672      	cpsid	i
   19742:	e7fe      	b.n	19742 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   19744:	4b23      	ldr	r3, [pc, #140]	; (197d4 <xQueueGenericReset+0xa8>)
   19746:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   19748:	68fb      	ldr	r3, [r7, #12]
   1974a:	681a      	ldr	r2, [r3, #0]
   1974c:	68fb      	ldr	r3, [r7, #12]
   1974e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   19750:	68fb      	ldr	r3, [r7, #12]
   19752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19754:	434b      	muls	r3, r1
   19756:	18d2      	adds	r2, r2, r3
   19758:	68fb      	ldr	r3, [r7, #12]
   1975a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1975c:	68fb      	ldr	r3, [r7, #12]
   1975e:	2200      	movs	r2, #0
   19760:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   19762:	68fb      	ldr	r3, [r7, #12]
   19764:	681a      	ldr	r2, [r3, #0]
   19766:	68fb      	ldr	r3, [r7, #12]
   19768:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1976a:	68fb      	ldr	r3, [r7, #12]
   1976c:	681a      	ldr	r2, [r3, #0]
   1976e:	68fb      	ldr	r3, [r7, #12]
   19770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19772:	1e59      	subs	r1, r3, #1
   19774:	68fb      	ldr	r3, [r7, #12]
   19776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19778:	434b      	muls	r3, r1
   1977a:	18d2      	adds	r2, r2, r3
   1977c:	68fb      	ldr	r3, [r7, #12]
   1977e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   19780:	68fb      	ldr	r3, [r7, #12]
   19782:	2244      	movs	r2, #68	; 0x44
   19784:	21ff      	movs	r1, #255	; 0xff
   19786:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   19788:	68fb      	ldr	r3, [r7, #12]
   1978a:	2245      	movs	r2, #69	; 0x45
   1978c:	21ff      	movs	r1, #255	; 0xff
   1978e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   19790:	683b      	ldr	r3, [r7, #0]
   19792:	2b00      	cmp	r3, #0
   19794:	d10d      	bne.n	197b2 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   19796:	68fb      	ldr	r3, [r7, #12]
   19798:	691b      	ldr	r3, [r3, #16]
   1979a:	2b00      	cmp	r3, #0
   1979c:	d013      	beq.n	197c6 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1979e:	68fb      	ldr	r3, [r7, #12]
   197a0:	3310      	adds	r3, #16
   197a2:	0018      	movs	r0, r3
   197a4:	4b0c      	ldr	r3, [pc, #48]	; (197d8 <xQueueGenericReset+0xac>)
   197a6:	4798      	blx	r3
   197a8:	1e03      	subs	r3, r0, #0
   197aa:	d00c      	beq.n	197c6 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   197ac:	4b0b      	ldr	r3, [pc, #44]	; (197dc <xQueueGenericReset+0xb0>)
   197ae:	4798      	blx	r3
   197b0:	e009      	b.n	197c6 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   197b2:	68fb      	ldr	r3, [r7, #12]
   197b4:	3310      	adds	r3, #16
   197b6:	0018      	movs	r0, r3
   197b8:	4b09      	ldr	r3, [pc, #36]	; (197e0 <xQueueGenericReset+0xb4>)
   197ba:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   197bc:	68fb      	ldr	r3, [r7, #12]
   197be:	3324      	adds	r3, #36	; 0x24
   197c0:	0018      	movs	r0, r3
   197c2:	4b07      	ldr	r3, [pc, #28]	; (197e0 <xQueueGenericReset+0xb4>)
   197c4:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   197c6:	4b07      	ldr	r3, [pc, #28]	; (197e4 <xQueueGenericReset+0xb8>)
   197c8:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   197ca:	2301      	movs	r3, #1
}
   197cc:	0018      	movs	r0, r3
   197ce:	46bd      	mov	sp, r7
   197d0:	b004      	add	sp, #16
   197d2:	bd80      	pop	{r7, pc}
   197d4:	000194f9 	.word	0x000194f9
   197d8:	0001bd8d 	.word	0x0001bd8d
   197dc:	000194e1 	.word	0x000194e1
   197e0:	00019269 	.word	0x00019269
   197e4:	0001951d 	.word	0x0001951d

000197e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   197e8:	b590      	push	{r4, r7, lr}
   197ea:	b08b      	sub	sp, #44	; 0x2c
   197ec:	af02      	add	r7, sp, #8
   197ee:	60f8      	str	r0, [r7, #12]
   197f0:	60b9      	str	r1, [r7, #8]
   197f2:	1dfb      	adds	r3, r7, #7
   197f4:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   197f6:	68fb      	ldr	r3, [r7, #12]
   197f8:	2b00      	cmp	r3, #0
   197fa:	d101      	bne.n	19800 <xQueueGenericCreate+0x18>
   197fc:	b672      	cpsid	i
   197fe:	e7fe      	b.n	197fe <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   19800:	68bb      	ldr	r3, [r7, #8]
   19802:	2b00      	cmp	r3, #0
   19804:	d102      	bne.n	1980c <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   19806:	2300      	movs	r3, #0
   19808:	61fb      	str	r3, [r7, #28]
   1980a:	e003      	b.n	19814 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1980c:	68fb      	ldr	r3, [r7, #12]
   1980e:	68ba      	ldr	r2, [r7, #8]
   19810:	4353      	muls	r3, r2
   19812:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   19814:	69fb      	ldr	r3, [r7, #28]
   19816:	3354      	adds	r3, #84	; 0x54
   19818:	0018      	movs	r0, r3
   1981a:	4b19      	ldr	r3, [pc, #100]	; (19880 <xQueueGenericCreate+0x98>)
   1981c:	4798      	blx	r3
   1981e:	0003      	movs	r3, r0
   19820:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   19822:	69bb      	ldr	r3, [r7, #24]
   19824:	2b00      	cmp	r3, #0
   19826:	d00d      	beq.n	19844 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   19828:	69bb      	ldr	r3, [r7, #24]
   1982a:	3354      	adds	r3, #84	; 0x54
   1982c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1982e:	1dfb      	adds	r3, r7, #7
   19830:	781c      	ldrb	r4, [r3, #0]
   19832:	697a      	ldr	r2, [r7, #20]
   19834:	68b9      	ldr	r1, [r7, #8]
   19836:	68f8      	ldr	r0, [r7, #12]
   19838:	69bb      	ldr	r3, [r7, #24]
   1983a:	9300      	str	r3, [sp, #0]
   1983c:	0023      	movs	r3, r4
   1983e:	4c11      	ldr	r4, [pc, #68]	; (19884 <xQueueGenericCreate+0x9c>)
   19840:	47a0      	blx	r4
   19842:	e017      	b.n	19874 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   19844:	4b10      	ldr	r3, [pc, #64]	; (19888 <xQueueGenericCreate+0xa0>)
   19846:	4798      	blx	r3
   19848:	0003      	movs	r3, r0
   1984a:	0018      	movs	r0, r3
   1984c:	4b0f      	ldr	r3, [pc, #60]	; (1988c <xQueueGenericCreate+0xa4>)
   1984e:	4798      	blx	r3
   19850:	0003      	movs	r3, r0
   19852:	001a      	movs	r2, r3
   19854:	4b0e      	ldr	r3, [pc, #56]	; (19890 <xQueueGenericCreate+0xa8>)
   19856:	881b      	ldrh	r3, [r3, #0]
   19858:	4013      	ands	r3, r2
   1985a:	b29b      	uxth	r3, r3
   1985c:	2b00      	cmp	r3, #0
   1985e:	d009      	beq.n	19874 <xQueueGenericCreate+0x8c>
   19860:	1dfb      	adds	r3, r7, #7
   19862:	781b      	ldrb	r3, [r3, #0]
   19864:	4a0b      	ldr	r2, [pc, #44]	; (19894 <xQueueGenericCreate+0xac>)
   19866:	5cd3      	ldrb	r3, [r2, r3]
   19868:	3340      	adds	r3, #64	; 0x40
   1986a:	b2db      	uxtb	r3, r3
   1986c:	2100      	movs	r1, #0
   1986e:	0018      	movs	r0, r3
   19870:	4b09      	ldr	r3, [pc, #36]	; (19898 <xQueueGenericCreate+0xb0>)
   19872:	4798      	blx	r3
		}

		return pxNewQueue;
   19874:	69bb      	ldr	r3, [r7, #24]
	}
   19876:	0018      	movs	r0, r3
   19878:	46bd      	mov	sp, r7
   1987a:	b009      	add	sp, #36	; 0x24
   1987c:	bd90      	pop	{r4, r7, pc}
   1987e:	46c0      	nop			; (mov r8, r8)
   19880:	00019631 	.word	0x00019631
   19884:	0001989d 	.word	0x0001989d
   19888:	0001778d 	.word	0x0001778d
   1988c:	000174f1 	.word	0x000174f1
   19890:	200000b8 	.word	0x200000b8
   19894:	200000ac 	.word	0x200000ac
   19898:	000181f1 	.word	0x000181f1

0001989c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1989c:	b5b0      	push	{r4, r5, r7, lr}
   1989e:	b084      	sub	sp, #16
   198a0:	af00      	add	r7, sp, #0
   198a2:	60f8      	str	r0, [r7, #12]
   198a4:	60b9      	str	r1, [r7, #8]
   198a6:	607a      	str	r2, [r7, #4]
   198a8:	001a      	movs	r2, r3
   198aa:	1cfb      	adds	r3, r7, #3
   198ac:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   198ae:	68bb      	ldr	r3, [r7, #8]
   198b0:	2b00      	cmp	r3, #0
   198b2:	d103      	bne.n	198bc <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   198b4:	6a3b      	ldr	r3, [r7, #32]
   198b6:	6a3a      	ldr	r2, [r7, #32]
   198b8:	601a      	str	r2, [r3, #0]
   198ba:	e002      	b.n	198c2 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   198bc:	6a3b      	ldr	r3, [r7, #32]
   198be:	687a      	ldr	r2, [r7, #4]
   198c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   198c2:	6a3b      	ldr	r3, [r7, #32]
   198c4:	68fa      	ldr	r2, [r7, #12]
   198c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   198c8:	6a3b      	ldr	r3, [r7, #32]
   198ca:	68ba      	ldr	r2, [r7, #8]
   198cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   198ce:	6a3b      	ldr	r3, [r7, #32]
   198d0:	2101      	movs	r1, #1
   198d2:	0018      	movs	r0, r3
   198d4:	4b41      	ldr	r3, [pc, #260]	; (199dc <prvInitialiseNewQueue+0x140>)
   198d6:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   198d8:	6a3b      	ldr	r3, [r7, #32]
   198da:	1cfa      	adds	r2, r7, #3
   198dc:	2150      	movs	r1, #80	; 0x50
   198de:	7812      	ldrb	r2, [r2, #0]
   198e0:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   198e2:	6a3b      	ldr	r3, [r7, #32]
   198e4:	2200      	movs	r2, #0
   198e6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   198e8:	6a3b      	ldr	r3, [r7, #32]
   198ea:	0018      	movs	r0, r3
   198ec:	4b3c      	ldr	r3, [pc, #240]	; (199e0 <prvInitialiseNewQueue+0x144>)
   198ee:	4798      	blx	r3
   198f0:	0003      	movs	r3, r0
   198f2:	001a      	movs	r2, r3
   198f4:	4b3b      	ldr	r3, [pc, #236]	; (199e4 <prvInitialiseNewQueue+0x148>)
   198f6:	5c9b      	ldrb	r3, [r3, r2]
   198f8:	0018      	movs	r0, r3
   198fa:	4b3b      	ldr	r3, [pc, #236]	; (199e8 <prvInitialiseNewQueue+0x14c>)
   198fc:	4798      	blx	r3
   198fe:	0003      	movs	r3, r0
   19900:	b29a      	uxth	r2, r3
   19902:	6a3b      	ldr	r3, [r7, #32]
   19904:	0011      	movs	r1, r2
   19906:	0018      	movs	r0, r3
   19908:	4b38      	ldr	r3, [pc, #224]	; (199ec <prvInitialiseNewQueue+0x150>)
   1990a:	4798      	blx	r3
   1990c:	4b38      	ldr	r3, [pc, #224]	; (199f0 <prvInitialiseNewQueue+0x154>)
   1990e:	881a      	ldrh	r2, [r3, #0]
   19910:	6a3b      	ldr	r3, [r7, #32]
   19912:	0011      	movs	r1, r2
   19914:	0018      	movs	r0, r3
   19916:	4b37      	ldr	r3, [pc, #220]	; (199f4 <prvInitialiseNewQueue+0x158>)
   19918:	4798      	blx	r3
   1991a:	6a3b      	ldr	r3, [r7, #32]
   1991c:	0018      	movs	r0, r3
   1991e:	4b30      	ldr	r3, [pc, #192]	; (199e0 <prvInitialiseNewQueue+0x144>)
   19920:	4798      	blx	r3
   19922:	0003      	movs	r3, r0
   19924:	001a      	movs	r2, r3
   19926:	4b2f      	ldr	r3, [pc, #188]	; (199e4 <prvInitialiseNewQueue+0x148>)
   19928:	5c9c      	ldrb	r4, [r3, r2]
   1992a:	6a3b      	ldr	r3, [r7, #32]
   1992c:	0018      	movs	r0, r3
   1992e:	4b32      	ldr	r3, [pc, #200]	; (199f8 <prvInitialiseNewQueue+0x15c>)
   19930:	4798      	blx	r3
   19932:	0003      	movs	r3, r0
   19934:	b2db      	uxtb	r3, r3
   19936:	0019      	movs	r1, r3
   19938:	0020      	movs	r0, r4
   1993a:	4b30      	ldr	r3, [pc, #192]	; (199fc <prvInitialiseNewQueue+0x160>)
   1993c:	4798      	blx	r3
   1993e:	4b30      	ldr	r3, [pc, #192]	; (19a00 <prvInitialiseNewQueue+0x164>)
   19940:	4798      	blx	r3
   19942:	0003      	movs	r3, r0
   19944:	0018      	movs	r0, r3
   19946:	4b2f      	ldr	r3, [pc, #188]	; (19a04 <prvInitialiseNewQueue+0x168>)
   19948:	4798      	blx	r3
   1994a:	0003      	movs	r3, r0
   1994c:	001a      	movs	r2, r3
   1994e:	4b2e      	ldr	r3, [pc, #184]	; (19a08 <prvInitialiseNewQueue+0x16c>)
   19950:	881b      	ldrh	r3, [r3, #0]
   19952:	4013      	ands	r3, r2
   19954:	b29b      	uxth	r3, r3
   19956:	2b00      	cmp	r3, #0
   19958:	d029      	beq.n	199ae <prvInitialiseNewQueue+0x112>
   1995a:	6a3b      	ldr	r3, [r7, #32]
   1995c:	0018      	movs	r0, r3
   1995e:	4b2b      	ldr	r3, [pc, #172]	; (19a0c <prvInitialiseNewQueue+0x170>)
   19960:	4798      	blx	r3
   19962:	0003      	movs	r3, r0
   19964:	001a      	movs	r2, r3
   19966:	4b28      	ldr	r3, [pc, #160]	; (19a08 <prvInitialiseNewQueue+0x16c>)
   19968:	881b      	ldrh	r3, [r3, #0]
   1996a:	4013      	ands	r3, r2
   1996c:	b29b      	uxth	r3, r3
   1996e:	2b00      	cmp	r3, #0
   19970:	d01d      	beq.n	199ae <prvInitialiseNewQueue+0x112>
   19972:	6a3b      	ldr	r3, [r7, #32]
   19974:	0018      	movs	r0, r3
   19976:	4b1a      	ldr	r3, [pc, #104]	; (199e0 <prvInitialiseNewQueue+0x144>)
   19978:	4798      	blx	r3
   1997a:	0003      	movs	r3, r0
   1997c:	001a      	movs	r2, r3
   1997e:	4b19      	ldr	r3, [pc, #100]	; (199e4 <prvInitialiseNewQueue+0x148>)
   19980:	5c9b      	ldrb	r3, [r3, r2]
   19982:	3318      	adds	r3, #24
   19984:	b2db      	uxtb	r3, r3
   19986:	001d      	movs	r5, r3
   19988:	6a3b      	ldr	r3, [r7, #32]
   1998a:	0018      	movs	r0, r3
   1998c:	4b14      	ldr	r3, [pc, #80]	; (199e0 <prvInitialiseNewQueue+0x144>)
   1998e:	4798      	blx	r3
   19990:	0003      	movs	r3, r0
   19992:	001a      	movs	r2, r3
   19994:	4b13      	ldr	r3, [pc, #76]	; (199e4 <prvInitialiseNewQueue+0x148>)
   19996:	5c9c      	ldrb	r4, [r3, r2]
   19998:	6a3b      	ldr	r3, [r7, #32]
   1999a:	0018      	movs	r0, r3
   1999c:	4b16      	ldr	r3, [pc, #88]	; (199f8 <prvInitialiseNewQueue+0x15c>)
   1999e:	4798      	blx	r3
   199a0:	0003      	movs	r3, r0
   199a2:	b2db      	uxtb	r3, r3
   199a4:	001a      	movs	r2, r3
   199a6:	0021      	movs	r1, r4
   199a8:	0028      	movs	r0, r5
   199aa:	4b19      	ldr	r3, [pc, #100]	; (19a10 <prvInitialiseNewQueue+0x174>)
   199ac:	4798      	blx	r3
   199ae:	6a3b      	ldr	r3, [r7, #32]
   199b0:	0018      	movs	r0, r3
   199b2:	4b0b      	ldr	r3, [pc, #44]	; (199e0 <prvInitialiseNewQueue+0x144>)
   199b4:	4798      	blx	r3
   199b6:	0003      	movs	r3, r0
   199b8:	001a      	movs	r2, r3
   199ba:	4b0a      	ldr	r3, [pc, #40]	; (199e4 <prvInitialiseNewQueue+0x148>)
   199bc:	5c9c      	ldrb	r4, [r3, r2]
   199be:	6a3b      	ldr	r3, [r7, #32]
   199c0:	0018      	movs	r0, r3
   199c2:	4b0d      	ldr	r3, [pc, #52]	; (199f8 <prvInitialiseNewQueue+0x15c>)
   199c4:	4798      	blx	r3
   199c6:	0003      	movs	r3, r0
   199c8:	b2db      	uxtb	r3, r3
   199ca:	2200      	movs	r2, #0
   199cc:	0019      	movs	r1, r3
   199ce:	0020      	movs	r0, r4
   199d0:	4b10      	ldr	r3, [pc, #64]	; (19a14 <prvInitialiseNewQueue+0x178>)
   199d2:	4798      	blx	r3
}
   199d4:	46c0      	nop			; (mov r8, r8)
   199d6:	46bd      	mov	sp, r7
   199d8:	b004      	add	sp, #16
   199da:	bdb0      	pop	{r4, r5, r7, pc}
   199dc:	0001972d 	.word	0x0001972d
   199e0:	000174b1 	.word	0x000174b1
   199e4:	200000ac 	.word	0x200000ac
   199e8:	00018a71 	.word	0x00018a71
   199ec:	000175d5 	.word	0x000175d5
   199f0:	200000ba 	.word	0x200000ba
   199f4:	00017611 	.word	0x00017611
   199f8:	00017591 	.word	0x00017591
   199fc:	00018c09 	.word	0x00018c09
   19a00:	0001778d 	.word	0x0001778d
   19a04:	000174f1 	.word	0x000174f1
   19a08:	200000b8 	.word	0x200000b8
   19a0c:	000175b1 	.word	0x000175b1
   19a10:	00017ee9 	.word	0x00017ee9
   19a14:	00018545 	.word	0x00018545

00019a18 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   19a18:	b590      	push	{r4, r7, lr}
   19a1a:	b083      	sub	sp, #12
   19a1c:	af00      	add	r7, sp, #0
   19a1e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   19a20:	687b      	ldr	r3, [r7, #4]
   19a22:	2b00      	cmp	r3, #0
   19a24:	d00e      	beq.n	19a44 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   19a26:	687b      	ldr	r3, [r7, #4]
   19a28:	2200      	movs	r2, #0
   19a2a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   19a2c:	687b      	ldr	r3, [r7, #4]
   19a2e:	2200      	movs	r2, #0
   19a30:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   19a32:	687b      	ldr	r3, [r7, #4]
   19a34:	2200      	movs	r2, #0
   19a36:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   19a38:	6878      	ldr	r0, [r7, #4]
   19a3a:	2300      	movs	r3, #0
   19a3c:	2200      	movs	r2, #0
   19a3e:	2100      	movs	r1, #0
   19a40:	4c02      	ldr	r4, [pc, #8]	; (19a4c <prvInitialiseMutex+0x34>)
   19a42:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   19a44:	46c0      	nop			; (mov r8, r8)
   19a46:	46bd      	mov	sp, r7
   19a48:	b003      	add	sp, #12
   19a4a:	bd90      	pop	{r4, r7, pc}
   19a4c:	00019a91 	.word	0x00019a91

00019a50 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   19a50:	b580      	push	{r7, lr}
   19a52:	b086      	sub	sp, #24
   19a54:	af00      	add	r7, sp, #0
   19a56:	0002      	movs	r2, r0
   19a58:	1dfb      	adds	r3, r7, #7
   19a5a:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   19a5c:	2301      	movs	r3, #1
   19a5e:	617b      	str	r3, [r7, #20]
   19a60:	2300      	movs	r3, #0
   19a62:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   19a64:	1dfb      	adds	r3, r7, #7
   19a66:	781a      	ldrb	r2, [r3, #0]
   19a68:	6939      	ldr	r1, [r7, #16]
   19a6a:	697b      	ldr	r3, [r7, #20]
   19a6c:	0018      	movs	r0, r3
   19a6e:	4b06      	ldr	r3, [pc, #24]	; (19a88 <xQueueCreateMutex+0x38>)
   19a70:	4798      	blx	r3
   19a72:	0003      	movs	r3, r0
   19a74:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   19a76:	68fb      	ldr	r3, [r7, #12]
   19a78:	0018      	movs	r0, r3
   19a7a:	4b04      	ldr	r3, [pc, #16]	; (19a8c <xQueueCreateMutex+0x3c>)
   19a7c:	4798      	blx	r3

		return pxNewQueue;
   19a7e:	68fb      	ldr	r3, [r7, #12]
	}
   19a80:	0018      	movs	r0, r3
   19a82:	46bd      	mov	sp, r7
   19a84:	b006      	add	sp, #24
   19a86:	bd80      	pop	{r7, pc}
   19a88:	000197e9 	.word	0x000197e9
   19a8c:	00019a19 	.word	0x00019a19

00019a90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   19a90:	b5b0      	push	{r4, r5, r7, lr}
   19a92:	b08a      	sub	sp, #40	; 0x28
   19a94:	af00      	add	r7, sp, #0
   19a96:	60f8      	str	r0, [r7, #12]
   19a98:	60b9      	str	r1, [r7, #8]
   19a9a:	607a      	str	r2, [r7, #4]
   19a9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   19a9e:	2300      	movs	r3, #0
   19aa0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19aa2:	68fb      	ldr	r3, [r7, #12]
   19aa4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   19aa6:	6a3b      	ldr	r3, [r7, #32]
   19aa8:	2b00      	cmp	r3, #0
   19aaa:	d101      	bne.n	19ab0 <xQueueGenericSend+0x20>
   19aac:	b672      	cpsid	i
   19aae:	e7fe      	b.n	19aae <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   19ab0:	68bb      	ldr	r3, [r7, #8]
   19ab2:	2b00      	cmp	r3, #0
   19ab4:	d103      	bne.n	19abe <xQueueGenericSend+0x2e>
   19ab6:	6a3b      	ldr	r3, [r7, #32]
   19ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19aba:	2b00      	cmp	r3, #0
   19abc:	d101      	bne.n	19ac2 <xQueueGenericSend+0x32>
   19abe:	2301      	movs	r3, #1
   19ac0:	e000      	b.n	19ac4 <xQueueGenericSend+0x34>
   19ac2:	2300      	movs	r3, #0
   19ac4:	2b00      	cmp	r3, #0
   19ac6:	d101      	bne.n	19acc <xQueueGenericSend+0x3c>
   19ac8:	b672      	cpsid	i
   19aca:	e7fe      	b.n	19aca <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   19acc:	683b      	ldr	r3, [r7, #0]
   19ace:	2b02      	cmp	r3, #2
   19ad0:	d103      	bne.n	19ada <xQueueGenericSend+0x4a>
   19ad2:	6a3b      	ldr	r3, [r7, #32]
   19ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19ad6:	2b01      	cmp	r3, #1
   19ad8:	d101      	bne.n	19ade <xQueueGenericSend+0x4e>
   19ada:	2301      	movs	r3, #1
   19adc:	e000      	b.n	19ae0 <xQueueGenericSend+0x50>
   19ade:	2300      	movs	r3, #0
   19ae0:	2b00      	cmp	r3, #0
   19ae2:	d101      	bne.n	19ae8 <xQueueGenericSend+0x58>
   19ae4:	b672      	cpsid	i
   19ae6:	e7fe      	b.n	19ae6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   19ae8:	4bbc      	ldr	r3, [pc, #752]	; (19ddc <xQueueGenericSend+0x34c>)
   19aea:	4798      	blx	r3
   19aec:	1e03      	subs	r3, r0, #0
   19aee:	d102      	bne.n	19af6 <xQueueGenericSend+0x66>
   19af0:	687b      	ldr	r3, [r7, #4]
   19af2:	2b00      	cmp	r3, #0
   19af4:	d101      	bne.n	19afa <xQueueGenericSend+0x6a>
   19af6:	2301      	movs	r3, #1
   19af8:	e000      	b.n	19afc <xQueueGenericSend+0x6c>
   19afa:	2300      	movs	r3, #0
   19afc:	2b00      	cmp	r3, #0
   19afe:	d101      	bne.n	19b04 <xQueueGenericSend+0x74>
   19b00:	b672      	cpsid	i
   19b02:	e7fe      	b.n	19b02 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   19b04:	4bb6      	ldr	r3, [pc, #728]	; (19de0 <xQueueGenericSend+0x350>)
   19b06:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   19b08:	6a3b      	ldr	r3, [r7, #32]
   19b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19b0c:	6a3b      	ldr	r3, [r7, #32]
   19b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19b10:	429a      	cmp	r2, r3
   19b12:	d303      	bcc.n	19b1c <xQueueGenericSend+0x8c>
   19b14:	683b      	ldr	r3, [r7, #0]
   19b16:	2b02      	cmp	r3, #2
   19b18:	d000      	beq.n	19b1c <xQueueGenericSend+0x8c>
   19b1a:	e08e      	b.n	19c3a <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   19b1c:	4bb1      	ldr	r3, [pc, #708]	; (19de4 <xQueueGenericSend+0x354>)
   19b1e:	4798      	blx	r3
   19b20:	0003      	movs	r3, r0
   19b22:	0018      	movs	r0, r3
   19b24:	4bb0      	ldr	r3, [pc, #704]	; (19de8 <xQueueGenericSend+0x358>)
   19b26:	4798      	blx	r3
   19b28:	0003      	movs	r3, r0
   19b2a:	001a      	movs	r2, r3
   19b2c:	4baf      	ldr	r3, [pc, #700]	; (19dec <xQueueGenericSend+0x35c>)
   19b2e:	881b      	ldrh	r3, [r3, #0]
   19b30:	4013      	ands	r3, r2
   19b32:	b29b      	uxth	r3, r3
   19b34:	2b00      	cmp	r3, #0
   19b36:	d02e      	beq.n	19b96 <xQueueGenericSend+0x106>
   19b38:	6a3b      	ldr	r3, [r7, #32]
   19b3a:	0018      	movs	r0, r3
   19b3c:	4bac      	ldr	r3, [pc, #688]	; (19df0 <xQueueGenericSend+0x360>)
   19b3e:	4798      	blx	r3
   19b40:	0003      	movs	r3, r0
   19b42:	001a      	movs	r2, r3
   19b44:	4ba9      	ldr	r3, [pc, #676]	; (19dec <xQueueGenericSend+0x35c>)
   19b46:	881b      	ldrh	r3, [r3, #0]
   19b48:	4013      	ands	r3, r2
   19b4a:	b29b      	uxth	r3, r3
   19b4c:	2b00      	cmp	r3, #0
   19b4e:	d022      	beq.n	19b96 <xQueueGenericSend+0x106>
   19b50:	683b      	ldr	r3, [r7, #0]
   19b52:	2b00      	cmp	r3, #0
   19b54:	d10b      	bne.n	19b6e <xQueueGenericSend+0xde>
   19b56:	6a3b      	ldr	r3, [r7, #32]
   19b58:	0018      	movs	r0, r3
   19b5a:	4ba6      	ldr	r3, [pc, #664]	; (19df4 <xQueueGenericSend+0x364>)
   19b5c:	4798      	blx	r3
   19b5e:	0003      	movs	r3, r0
   19b60:	001a      	movs	r2, r3
   19b62:	4ba5      	ldr	r3, [pc, #660]	; (19df8 <xQueueGenericSend+0x368>)
   19b64:	5c9b      	ldrb	r3, [r3, r2]
   19b66:	3320      	adds	r3, #32
   19b68:	b2db      	uxtb	r3, r3
   19b6a:	001d      	movs	r5, r3
   19b6c:	e000      	b.n	19b70 <xQueueGenericSend+0xe0>
   19b6e:	2525      	movs	r5, #37	; 0x25
   19b70:	6a3b      	ldr	r3, [r7, #32]
   19b72:	0018      	movs	r0, r3
   19b74:	4b9f      	ldr	r3, [pc, #636]	; (19df4 <xQueueGenericSend+0x364>)
   19b76:	4798      	blx	r3
   19b78:	0003      	movs	r3, r0
   19b7a:	001a      	movs	r2, r3
   19b7c:	4b9e      	ldr	r3, [pc, #632]	; (19df8 <xQueueGenericSend+0x368>)
   19b7e:	5c9c      	ldrb	r4, [r3, r2]
   19b80:	6a3b      	ldr	r3, [r7, #32]
   19b82:	0018      	movs	r0, r3
   19b84:	4b9d      	ldr	r3, [pc, #628]	; (19dfc <xQueueGenericSend+0x36c>)
   19b86:	4798      	blx	r3
   19b88:	0003      	movs	r3, r0
   19b8a:	b2db      	uxtb	r3, r3
   19b8c:	001a      	movs	r2, r3
   19b8e:	0021      	movs	r1, r4
   19b90:	0028      	movs	r0, r5
   19b92:	4b9b      	ldr	r3, [pc, #620]	; (19e00 <xQueueGenericSend+0x370>)
   19b94:	4798      	blx	r3
   19b96:	6a3b      	ldr	r3, [r7, #32]
   19b98:	0018      	movs	r0, r3
   19b9a:	4b96      	ldr	r3, [pc, #600]	; (19df4 <xQueueGenericSend+0x364>)
   19b9c:	4798      	blx	r3
   19b9e:	0003      	movs	r3, r0
   19ba0:	001a      	movs	r2, r3
   19ba2:	4b95      	ldr	r3, [pc, #596]	; (19df8 <xQueueGenericSend+0x368>)
   19ba4:	5c9c      	ldrb	r4, [r3, r2]
   19ba6:	6a3b      	ldr	r3, [r7, #32]
   19ba8:	0018      	movs	r0, r3
   19baa:	4b94      	ldr	r3, [pc, #592]	; (19dfc <xQueueGenericSend+0x36c>)
   19bac:	4798      	blx	r3
   19bae:	0003      	movs	r3, r0
   19bb0:	b2dd      	uxtb	r5, r3
   19bb2:	6a3b      	ldr	r3, [r7, #32]
   19bb4:	0018      	movs	r0, r3
   19bb6:	4b8f      	ldr	r3, [pc, #572]	; (19df4 <xQueueGenericSend+0x364>)
   19bb8:	4798      	blx	r3
   19bba:	0003      	movs	r3, r0
   19bbc:	001a      	movs	r2, r3
   19bbe:	4b8e      	ldr	r3, [pc, #568]	; (19df8 <xQueueGenericSend+0x368>)
   19bc0:	5c9b      	ldrb	r3, [r3, r2]
   19bc2:	2b02      	cmp	r3, #2
   19bc4:	d005      	beq.n	19bd2 <xQueueGenericSend+0x142>
   19bc6:	6a3b      	ldr	r3, [r7, #32]
   19bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19bca:	b2db      	uxtb	r3, r3
   19bcc:	3301      	adds	r3, #1
   19bce:	b2db      	uxtb	r3, r3
   19bd0:	e000      	b.n	19bd4 <xQueueGenericSend+0x144>
   19bd2:	2300      	movs	r3, #0
   19bd4:	001a      	movs	r2, r3
   19bd6:	0029      	movs	r1, r5
   19bd8:	0020      	movs	r0, r4
   19bda:	4b8a      	ldr	r3, [pc, #552]	; (19e04 <xQueueGenericSend+0x374>)
   19bdc:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   19bde:	683a      	ldr	r2, [r7, #0]
   19be0:	68b9      	ldr	r1, [r7, #8]
   19be2:	6a3b      	ldr	r3, [r7, #32]
   19be4:	0018      	movs	r0, r3
   19be6:	4b88      	ldr	r3, [pc, #544]	; (19e08 <xQueueGenericSend+0x378>)
   19be8:	4798      	blx	r3
   19bea:	0003      	movs	r3, r0
   19bec:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   19bee:	6a3b      	ldr	r3, [r7, #32]
   19bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   19bf2:	2b00      	cmp	r3, #0
   19bf4:	d00a      	beq.n	19c0c <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   19bf6:	683a      	ldr	r2, [r7, #0]
   19bf8:	6a3b      	ldr	r3, [r7, #32]
   19bfa:	0011      	movs	r1, r2
   19bfc:	0018      	movs	r0, r3
   19bfe:	4b83      	ldr	r3, [pc, #524]	; (19e0c <xQueueGenericSend+0x37c>)
   19c00:	4798      	blx	r3
   19c02:	1e03      	subs	r3, r0, #0
   19c04:	d015      	beq.n	19c32 <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   19c06:	4b82      	ldr	r3, [pc, #520]	; (19e10 <xQueueGenericSend+0x380>)
   19c08:	4798      	blx	r3
   19c0a:	e012      	b.n	19c32 <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   19c0c:	6a3b      	ldr	r3, [r7, #32]
   19c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19c10:	2b00      	cmp	r3, #0
   19c12:	d009      	beq.n	19c28 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   19c14:	6a3b      	ldr	r3, [r7, #32]
   19c16:	3324      	adds	r3, #36	; 0x24
   19c18:	0018      	movs	r0, r3
   19c1a:	4b7e      	ldr	r3, [pc, #504]	; (19e14 <xQueueGenericSend+0x384>)
   19c1c:	4798      	blx	r3
   19c1e:	1e03      	subs	r3, r0, #0
   19c20:	d007      	beq.n	19c32 <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   19c22:	4b7b      	ldr	r3, [pc, #492]	; (19e10 <xQueueGenericSend+0x380>)
   19c24:	4798      	blx	r3
   19c26:	e004      	b.n	19c32 <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   19c28:	69fb      	ldr	r3, [r7, #28]
   19c2a:	2b00      	cmp	r3, #0
   19c2c:	d001      	beq.n	19c32 <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   19c2e:	4b78      	ldr	r3, [pc, #480]	; (19e10 <xQueueGenericSend+0x380>)
   19c30:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   19c32:	4b79      	ldr	r3, [pc, #484]	; (19e18 <xQueueGenericSend+0x388>)
   19c34:	4798      	blx	r3
				return pdPASS;
   19c36:	2301      	movs	r3, #1
   19c38:	e142      	b.n	19ec0 <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   19c3a:	687b      	ldr	r3, [r7, #4]
   19c3c:	2b00      	cmp	r3, #0
   19c3e:	d140      	bne.n	19cc2 <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   19c40:	4b75      	ldr	r3, [pc, #468]	; (19e18 <xQueueGenericSend+0x388>)
   19c42:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   19c44:	4b67      	ldr	r3, [pc, #412]	; (19de4 <xQueueGenericSend+0x354>)
   19c46:	4798      	blx	r3
   19c48:	0003      	movs	r3, r0
   19c4a:	0018      	movs	r0, r3
   19c4c:	4b66      	ldr	r3, [pc, #408]	; (19de8 <xQueueGenericSend+0x358>)
   19c4e:	4798      	blx	r3
   19c50:	0003      	movs	r3, r0
   19c52:	001a      	movs	r2, r3
   19c54:	4b65      	ldr	r3, [pc, #404]	; (19dec <xQueueGenericSend+0x35c>)
   19c56:	881b      	ldrh	r3, [r3, #0]
   19c58:	4013      	ands	r3, r2
   19c5a:	b29b      	uxth	r3, r3
   19c5c:	2b00      	cmp	r3, #0
   19c5e:	d02e      	beq.n	19cbe <xQueueGenericSend+0x22e>
   19c60:	6a3b      	ldr	r3, [r7, #32]
   19c62:	0018      	movs	r0, r3
   19c64:	4b62      	ldr	r3, [pc, #392]	; (19df0 <xQueueGenericSend+0x360>)
   19c66:	4798      	blx	r3
   19c68:	0003      	movs	r3, r0
   19c6a:	001a      	movs	r2, r3
   19c6c:	4b5f      	ldr	r3, [pc, #380]	; (19dec <xQueueGenericSend+0x35c>)
   19c6e:	881b      	ldrh	r3, [r3, #0]
   19c70:	4013      	ands	r3, r2
   19c72:	b29b      	uxth	r3, r3
   19c74:	2b00      	cmp	r3, #0
   19c76:	d022      	beq.n	19cbe <xQueueGenericSend+0x22e>
   19c78:	683b      	ldr	r3, [r7, #0]
   19c7a:	2b00      	cmp	r3, #0
   19c7c:	d10b      	bne.n	19c96 <xQueueGenericSend+0x206>
   19c7e:	6a3b      	ldr	r3, [r7, #32]
   19c80:	0018      	movs	r0, r3
   19c82:	4b5c      	ldr	r3, [pc, #368]	; (19df4 <xQueueGenericSend+0x364>)
   19c84:	4798      	blx	r3
   19c86:	0003      	movs	r3, r0
   19c88:	001a      	movs	r2, r3
   19c8a:	4b5b      	ldr	r3, [pc, #364]	; (19df8 <xQueueGenericSend+0x368>)
   19c8c:	5c9b      	ldrb	r3, [r3, r2]
   19c8e:	3348      	adds	r3, #72	; 0x48
   19c90:	b2db      	uxtb	r3, r3
   19c92:	001d      	movs	r5, r3
   19c94:	e000      	b.n	19c98 <xQueueGenericSend+0x208>
   19c96:	254d      	movs	r5, #77	; 0x4d
   19c98:	6a3b      	ldr	r3, [r7, #32]
   19c9a:	0018      	movs	r0, r3
   19c9c:	4b55      	ldr	r3, [pc, #340]	; (19df4 <xQueueGenericSend+0x364>)
   19c9e:	4798      	blx	r3
   19ca0:	0003      	movs	r3, r0
   19ca2:	001a      	movs	r2, r3
   19ca4:	4b54      	ldr	r3, [pc, #336]	; (19df8 <xQueueGenericSend+0x368>)
   19ca6:	5c9c      	ldrb	r4, [r3, r2]
   19ca8:	6a3b      	ldr	r3, [r7, #32]
   19caa:	0018      	movs	r0, r3
   19cac:	4b53      	ldr	r3, [pc, #332]	; (19dfc <xQueueGenericSend+0x36c>)
   19cae:	4798      	blx	r3
   19cb0:	0003      	movs	r3, r0
   19cb2:	b2db      	uxtb	r3, r3
   19cb4:	001a      	movs	r2, r3
   19cb6:	0021      	movs	r1, r4
   19cb8:	0028      	movs	r0, r5
   19cba:	4b51      	ldr	r3, [pc, #324]	; (19e00 <xQueueGenericSend+0x370>)
   19cbc:	4798      	blx	r3
					return errQUEUE_FULL;
   19cbe:	2300      	movs	r3, #0
   19cc0:	e0fe      	b.n	19ec0 <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   19cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19cc4:	2b00      	cmp	r3, #0
   19cc6:	d106      	bne.n	19cd6 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   19cc8:	2314      	movs	r3, #20
   19cca:	18fb      	adds	r3, r7, r3
   19ccc:	0018      	movs	r0, r3
   19cce:	4b53      	ldr	r3, [pc, #332]	; (19e1c <xQueueGenericSend+0x38c>)
   19cd0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   19cd2:	2301      	movs	r3, #1
   19cd4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   19cd6:	4b50      	ldr	r3, [pc, #320]	; (19e18 <xQueueGenericSend+0x388>)
   19cd8:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   19cda:	4b51      	ldr	r3, [pc, #324]	; (19e20 <xQueueGenericSend+0x390>)
   19cdc:	4798      	blx	r3
		prvLockQueue( pxQueue );
   19cde:	4b40      	ldr	r3, [pc, #256]	; (19de0 <xQueueGenericSend+0x350>)
   19ce0:	4798      	blx	r3
   19ce2:	6a3b      	ldr	r3, [r7, #32]
   19ce4:	2244      	movs	r2, #68	; 0x44
   19ce6:	5c9b      	ldrb	r3, [r3, r2]
   19ce8:	b25b      	sxtb	r3, r3
   19cea:	3301      	adds	r3, #1
   19cec:	d103      	bne.n	19cf6 <xQueueGenericSend+0x266>
   19cee:	6a3b      	ldr	r3, [r7, #32]
   19cf0:	2244      	movs	r2, #68	; 0x44
   19cf2:	2100      	movs	r1, #0
   19cf4:	5499      	strb	r1, [r3, r2]
   19cf6:	6a3b      	ldr	r3, [r7, #32]
   19cf8:	2245      	movs	r2, #69	; 0x45
   19cfa:	5c9b      	ldrb	r3, [r3, r2]
   19cfc:	b25b      	sxtb	r3, r3
   19cfe:	3301      	adds	r3, #1
   19d00:	d103      	bne.n	19d0a <xQueueGenericSend+0x27a>
   19d02:	6a3b      	ldr	r3, [r7, #32]
   19d04:	2245      	movs	r2, #69	; 0x45
   19d06:	2100      	movs	r1, #0
   19d08:	5499      	strb	r1, [r3, r2]
   19d0a:	4b43      	ldr	r3, [pc, #268]	; (19e18 <xQueueGenericSend+0x388>)
   19d0c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   19d0e:	1d3a      	adds	r2, r7, #4
   19d10:	2314      	movs	r3, #20
   19d12:	18fb      	adds	r3, r7, r3
   19d14:	0011      	movs	r1, r2
   19d16:	0018      	movs	r0, r3
   19d18:	4b42      	ldr	r3, [pc, #264]	; (19e24 <xQueueGenericSend+0x394>)
   19d1a:	4798      	blx	r3
   19d1c:	1e03      	subs	r3, r0, #0
   19d1e:	d000      	beq.n	19d22 <xQueueGenericSend+0x292>
   19d20:	e08a      	b.n	19e38 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   19d22:	6a3b      	ldr	r3, [r7, #32]
   19d24:	0018      	movs	r0, r3
   19d26:	4b40      	ldr	r3, [pc, #256]	; (19e28 <xQueueGenericSend+0x398>)
   19d28:	4798      	blx	r3
   19d2a:	1e03      	subs	r3, r0, #0
   19d2c:	d04f      	beq.n	19dce <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   19d2e:	4b2d      	ldr	r3, [pc, #180]	; (19de4 <xQueueGenericSend+0x354>)
   19d30:	4798      	blx	r3
   19d32:	0003      	movs	r3, r0
   19d34:	0018      	movs	r0, r3
   19d36:	4b2c      	ldr	r3, [pc, #176]	; (19de8 <xQueueGenericSend+0x358>)
   19d38:	4798      	blx	r3
   19d3a:	0003      	movs	r3, r0
   19d3c:	001a      	movs	r2, r3
   19d3e:	4b2b      	ldr	r3, [pc, #172]	; (19dec <xQueueGenericSend+0x35c>)
   19d40:	881b      	ldrh	r3, [r3, #0]
   19d42:	4013      	ands	r3, r2
   19d44:	b29b      	uxth	r3, r3
   19d46:	2b00      	cmp	r3, #0
   19d48:	d02e      	beq.n	19da8 <xQueueGenericSend+0x318>
   19d4a:	6a3b      	ldr	r3, [r7, #32]
   19d4c:	0018      	movs	r0, r3
   19d4e:	4b28      	ldr	r3, [pc, #160]	; (19df0 <xQueueGenericSend+0x360>)
   19d50:	4798      	blx	r3
   19d52:	0003      	movs	r3, r0
   19d54:	001a      	movs	r2, r3
   19d56:	4b25      	ldr	r3, [pc, #148]	; (19dec <xQueueGenericSend+0x35c>)
   19d58:	881b      	ldrh	r3, [r3, #0]
   19d5a:	4013      	ands	r3, r2
   19d5c:	b29b      	uxth	r3, r3
   19d5e:	2b00      	cmp	r3, #0
   19d60:	d022      	beq.n	19da8 <xQueueGenericSend+0x318>
   19d62:	683b      	ldr	r3, [r7, #0]
   19d64:	2b00      	cmp	r3, #0
   19d66:	d10b      	bne.n	19d80 <xQueueGenericSend+0x2f0>
   19d68:	6a3b      	ldr	r3, [r7, #32]
   19d6a:	0018      	movs	r0, r3
   19d6c:	4b21      	ldr	r3, [pc, #132]	; (19df4 <xQueueGenericSend+0x364>)
   19d6e:	4798      	blx	r3
   19d70:	0003      	movs	r3, r0
   19d72:	001a      	movs	r2, r3
   19d74:	4b20      	ldr	r3, [pc, #128]	; (19df8 <xQueueGenericSend+0x368>)
   19d76:	5c9b      	ldrb	r3, [r3, r2]
   19d78:	3370      	adds	r3, #112	; 0x70
   19d7a:	b2db      	uxtb	r3, r3
   19d7c:	001d      	movs	r5, r3
   19d7e:	e000      	b.n	19d82 <xQueueGenericSend+0x2f2>
   19d80:	2575      	movs	r5, #117	; 0x75
   19d82:	6a3b      	ldr	r3, [r7, #32]
   19d84:	0018      	movs	r0, r3
   19d86:	4b1b      	ldr	r3, [pc, #108]	; (19df4 <xQueueGenericSend+0x364>)
   19d88:	4798      	blx	r3
   19d8a:	0003      	movs	r3, r0
   19d8c:	001a      	movs	r2, r3
   19d8e:	4b1a      	ldr	r3, [pc, #104]	; (19df8 <xQueueGenericSend+0x368>)
   19d90:	5c9c      	ldrb	r4, [r3, r2]
   19d92:	6a3b      	ldr	r3, [r7, #32]
   19d94:	0018      	movs	r0, r3
   19d96:	4b19      	ldr	r3, [pc, #100]	; (19dfc <xQueueGenericSend+0x36c>)
   19d98:	4798      	blx	r3
   19d9a:	0003      	movs	r3, r0
   19d9c:	b2db      	uxtb	r3, r3
   19d9e:	001a      	movs	r2, r3
   19da0:	0021      	movs	r1, r4
   19da2:	0028      	movs	r0, r5
   19da4:	4b16      	ldr	r3, [pc, #88]	; (19e00 <xQueueGenericSend+0x370>)
   19da6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   19da8:	6a3b      	ldr	r3, [r7, #32]
   19daa:	3310      	adds	r3, #16
   19dac:	687a      	ldr	r2, [r7, #4]
   19dae:	0011      	movs	r1, r2
   19db0:	0018      	movs	r0, r3
   19db2:	4b1e      	ldr	r3, [pc, #120]	; (19e2c <xQueueGenericSend+0x39c>)
   19db4:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   19db6:	6a3b      	ldr	r3, [r7, #32]
   19db8:	0018      	movs	r0, r3
   19dba:	4b1d      	ldr	r3, [pc, #116]	; (19e30 <xQueueGenericSend+0x3a0>)
   19dbc:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   19dbe:	4b1d      	ldr	r3, [pc, #116]	; (19e34 <xQueueGenericSend+0x3a4>)
   19dc0:	4798      	blx	r3
   19dc2:	1e03      	subs	r3, r0, #0
   19dc4:	d000      	beq.n	19dc8 <xQueueGenericSend+0x338>
   19dc6:	e69d      	b.n	19b04 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   19dc8:	4b11      	ldr	r3, [pc, #68]	; (19e10 <xQueueGenericSend+0x380>)
   19dca:	4798      	blx	r3
   19dcc:	e69a      	b.n	19b04 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   19dce:	6a3b      	ldr	r3, [r7, #32]
   19dd0:	0018      	movs	r0, r3
   19dd2:	4b17      	ldr	r3, [pc, #92]	; (19e30 <xQueueGenericSend+0x3a0>)
   19dd4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   19dd6:	4b17      	ldr	r3, [pc, #92]	; (19e34 <xQueueGenericSend+0x3a4>)
   19dd8:	4798      	blx	r3
   19dda:	e693      	b.n	19b04 <xQueueGenericSend+0x74>
   19ddc:	0001c21d 	.word	0x0001c21d
   19de0:	000194f9 	.word	0x000194f9
   19de4:	0001778d 	.word	0x0001778d
   19de8:	000174f1 	.word	0x000174f1
   19dec:	200000b8 	.word	0x200000b8
   19df0:	000175b1 	.word	0x000175b1
   19df4:	000174b1 	.word	0x000174b1
   19df8:	200000ac 	.word	0x200000ac
   19dfc:	00017591 	.word	0x00017591
   19e00:	00017ee9 	.word	0x00017ee9
   19e04:	00018545 	.word	0x00018545
   19e08:	0001acc9 	.word	0x0001acc9
   19e0c:	0001afcd 	.word	0x0001afcd
   19e10:	000194e1 	.word	0x000194e1
   19e14:	0001bd8d 	.word	0x0001bd8d
   19e18:	0001951d 	.word	0x0001951d
   19e1c:	0001becd 	.word	0x0001becd
   19e20:	0001b7b5 	.word	0x0001b7b5
   19e24:	0001bef5 	.word	0x0001bef5
   19e28:	0001af1d 	.word	0x0001af1d
   19e2c:	0001bc69 	.word	0x0001bc69
   19e30:	0001adf9 	.word	0x0001adf9
   19e34:	0001b7cd 	.word	0x0001b7cd
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   19e38:	6a3b      	ldr	r3, [r7, #32]
   19e3a:	0018      	movs	r0, r3
   19e3c:	4b22      	ldr	r3, [pc, #136]	; (19ec8 <xQueueGenericSend+0x438>)
   19e3e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   19e40:	4b22      	ldr	r3, [pc, #136]	; (19ecc <xQueueGenericSend+0x43c>)
   19e42:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   19e44:	4b22      	ldr	r3, [pc, #136]	; (19ed0 <xQueueGenericSend+0x440>)
   19e46:	4798      	blx	r3
   19e48:	0003      	movs	r3, r0
   19e4a:	0018      	movs	r0, r3
   19e4c:	4b21      	ldr	r3, [pc, #132]	; (19ed4 <xQueueGenericSend+0x444>)
   19e4e:	4798      	blx	r3
   19e50:	0003      	movs	r3, r0
   19e52:	001a      	movs	r2, r3
   19e54:	4b20      	ldr	r3, [pc, #128]	; (19ed8 <xQueueGenericSend+0x448>)
   19e56:	881b      	ldrh	r3, [r3, #0]
   19e58:	4013      	ands	r3, r2
   19e5a:	b29b      	uxth	r3, r3
   19e5c:	2b00      	cmp	r3, #0
   19e5e:	d02e      	beq.n	19ebe <xQueueGenericSend+0x42e>
   19e60:	6a3b      	ldr	r3, [r7, #32]
   19e62:	0018      	movs	r0, r3
   19e64:	4b1d      	ldr	r3, [pc, #116]	; (19edc <xQueueGenericSend+0x44c>)
   19e66:	4798      	blx	r3
   19e68:	0003      	movs	r3, r0
   19e6a:	001a      	movs	r2, r3
   19e6c:	4b1a      	ldr	r3, [pc, #104]	; (19ed8 <xQueueGenericSend+0x448>)
   19e6e:	881b      	ldrh	r3, [r3, #0]
   19e70:	4013      	ands	r3, r2
   19e72:	b29b      	uxth	r3, r3
   19e74:	2b00      	cmp	r3, #0
   19e76:	d022      	beq.n	19ebe <xQueueGenericSend+0x42e>
   19e78:	683b      	ldr	r3, [r7, #0]
   19e7a:	2b00      	cmp	r3, #0
   19e7c:	d10b      	bne.n	19e96 <xQueueGenericSend+0x406>
   19e7e:	6a3b      	ldr	r3, [r7, #32]
   19e80:	0018      	movs	r0, r3
   19e82:	4b17      	ldr	r3, [pc, #92]	; (19ee0 <xQueueGenericSend+0x450>)
   19e84:	4798      	blx	r3
   19e86:	0003      	movs	r3, r0
   19e88:	001a      	movs	r2, r3
   19e8a:	4b16      	ldr	r3, [pc, #88]	; (19ee4 <xQueueGenericSend+0x454>)
   19e8c:	5c9b      	ldrb	r3, [r3, r2]
   19e8e:	3348      	adds	r3, #72	; 0x48
   19e90:	b2db      	uxtb	r3, r3
   19e92:	001d      	movs	r5, r3
   19e94:	e000      	b.n	19e98 <xQueueGenericSend+0x408>
   19e96:	254d      	movs	r5, #77	; 0x4d
   19e98:	6a3b      	ldr	r3, [r7, #32]
   19e9a:	0018      	movs	r0, r3
   19e9c:	4b10      	ldr	r3, [pc, #64]	; (19ee0 <xQueueGenericSend+0x450>)
   19e9e:	4798      	blx	r3
   19ea0:	0003      	movs	r3, r0
   19ea2:	001a      	movs	r2, r3
   19ea4:	4b0f      	ldr	r3, [pc, #60]	; (19ee4 <xQueueGenericSend+0x454>)
   19ea6:	5c9c      	ldrb	r4, [r3, r2]
   19ea8:	6a3b      	ldr	r3, [r7, #32]
   19eaa:	0018      	movs	r0, r3
   19eac:	4b0e      	ldr	r3, [pc, #56]	; (19ee8 <xQueueGenericSend+0x458>)
   19eae:	4798      	blx	r3
   19eb0:	0003      	movs	r3, r0
   19eb2:	b2db      	uxtb	r3, r3
   19eb4:	001a      	movs	r2, r3
   19eb6:	0021      	movs	r1, r4
   19eb8:	0028      	movs	r0, r5
   19eba:	4b0c      	ldr	r3, [pc, #48]	; (19eec <xQueueGenericSend+0x45c>)
   19ebc:	4798      	blx	r3
			return errQUEUE_FULL;
   19ebe:	2300      	movs	r3, #0
		}
	}
}
   19ec0:	0018      	movs	r0, r3
   19ec2:	46bd      	mov	sp, r7
   19ec4:	b00a      	add	sp, #40	; 0x28
   19ec6:	bdb0      	pop	{r4, r5, r7, pc}
   19ec8:	0001adf9 	.word	0x0001adf9
   19ecc:	0001b7cd 	.word	0x0001b7cd
   19ed0:	0001778d 	.word	0x0001778d
   19ed4:	000174f1 	.word	0x000174f1
   19ed8:	200000b8 	.word	0x200000b8
   19edc:	000175b1 	.word	0x000175b1
   19ee0:	000174b1 	.word	0x000174b1
   19ee4:	200000ac 	.word	0x200000ac
   19ee8:	00017591 	.word	0x00017591
   19eec:	00017ee9 	.word	0x00017ee9

00019ef0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   19ef0:	b5b0      	push	{r4, r5, r7, lr}
   19ef2:	b088      	sub	sp, #32
   19ef4:	af00      	add	r7, sp, #0
   19ef6:	60f8      	str	r0, [r7, #12]
   19ef8:	60b9      	str	r1, [r7, #8]
   19efa:	607a      	str	r2, [r7, #4]
   19efc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19efe:	68fb      	ldr	r3, [r7, #12]
   19f00:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   19f02:	69bb      	ldr	r3, [r7, #24]
   19f04:	2b00      	cmp	r3, #0
   19f06:	d101      	bne.n	19f0c <xQueueGenericSendFromISR+0x1c>
   19f08:	b672      	cpsid	i
   19f0a:	e7fe      	b.n	19f0a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   19f0c:	68bb      	ldr	r3, [r7, #8]
   19f0e:	2b00      	cmp	r3, #0
   19f10:	d103      	bne.n	19f1a <xQueueGenericSendFromISR+0x2a>
   19f12:	69bb      	ldr	r3, [r7, #24]
   19f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19f16:	2b00      	cmp	r3, #0
   19f18:	d101      	bne.n	19f1e <xQueueGenericSendFromISR+0x2e>
   19f1a:	2301      	movs	r3, #1
   19f1c:	e000      	b.n	19f20 <xQueueGenericSendFromISR+0x30>
   19f1e:	2300      	movs	r3, #0
   19f20:	2b00      	cmp	r3, #0
   19f22:	d101      	bne.n	19f28 <xQueueGenericSendFromISR+0x38>
   19f24:	b672      	cpsid	i
   19f26:	e7fe      	b.n	19f26 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   19f28:	683b      	ldr	r3, [r7, #0]
   19f2a:	2b02      	cmp	r3, #2
   19f2c:	d103      	bne.n	19f36 <xQueueGenericSendFromISR+0x46>
   19f2e:	69bb      	ldr	r3, [r7, #24]
   19f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19f32:	2b01      	cmp	r3, #1
   19f34:	d101      	bne.n	19f3a <xQueueGenericSendFromISR+0x4a>
   19f36:	2301      	movs	r3, #1
   19f38:	e000      	b.n	19f3c <xQueueGenericSendFromISR+0x4c>
   19f3a:	2300      	movs	r3, #0
   19f3c:	2b00      	cmp	r3, #0
   19f3e:	d101      	bne.n	19f44 <xQueueGenericSendFromISR+0x54>
   19f40:	b672      	cpsid	i
   19f42:	e7fe      	b.n	19f42 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   19f44:	4b68      	ldr	r3, [pc, #416]	; (1a0e8 <xQueueGenericSendFromISR+0x1f8>)
   19f46:	4798      	blx	r3
   19f48:	0003      	movs	r3, r0
   19f4a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   19f4c:	69bb      	ldr	r3, [r7, #24]
   19f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19f50:	69bb      	ldr	r3, [r7, #24]
   19f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19f54:	429a      	cmp	r2, r3
   19f56:	d303      	bcc.n	19f60 <xQueueGenericSendFromISR+0x70>
   19f58:	683b      	ldr	r3, [r7, #0]
   19f5a:	2b02      	cmp	r3, #2
   19f5c:	d000      	beq.n	19f60 <xQueueGenericSendFromISR+0x70>
   19f5e:	e088      	b.n	1a072 <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   19f60:	2313      	movs	r3, #19
   19f62:	18fb      	adds	r3, r7, r3
   19f64:	69ba      	ldr	r2, [r7, #24]
   19f66:	2145      	movs	r1, #69	; 0x45
   19f68:	5c52      	ldrb	r2, [r2, r1]
   19f6a:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   19f6c:	69bb      	ldr	r3, [r7, #24]
   19f6e:	0018      	movs	r0, r3
   19f70:	4b5e      	ldr	r3, [pc, #376]	; (1a0ec <xQueueGenericSendFromISR+0x1fc>)
   19f72:	4798      	blx	r3
   19f74:	0003      	movs	r3, r0
   19f76:	001a      	movs	r2, r3
   19f78:	4b5d      	ldr	r3, [pc, #372]	; (1a0f0 <xQueueGenericSendFromISR+0x200>)
   19f7a:	881b      	ldrh	r3, [r3, #0]
   19f7c:	4013      	ands	r3, r2
   19f7e:	b29b      	uxth	r3, r3
   19f80:	2b00      	cmp	r3, #0
   19f82:	d022      	beq.n	19fca <xQueueGenericSendFromISR+0xda>
   19f84:	683b      	ldr	r3, [r7, #0]
   19f86:	2b00      	cmp	r3, #0
   19f88:	d10b      	bne.n	19fa2 <xQueueGenericSendFromISR+0xb2>
   19f8a:	69bb      	ldr	r3, [r7, #24]
   19f8c:	0018      	movs	r0, r3
   19f8e:	4b59      	ldr	r3, [pc, #356]	; (1a0f4 <xQueueGenericSendFromISR+0x204>)
   19f90:	4798      	blx	r3
   19f92:	0003      	movs	r3, r0
   19f94:	001a      	movs	r2, r3
   19f96:	4b58      	ldr	r3, [pc, #352]	; (1a0f8 <xQueueGenericSendFromISR+0x208>)
   19f98:	5c9b      	ldrb	r3, [r3, r2]
   19f9a:	3330      	adds	r3, #48	; 0x30
   19f9c:	b2db      	uxtb	r3, r3
   19f9e:	001d      	movs	r5, r3
   19fa0:	e000      	b.n	19fa4 <xQueueGenericSendFromISR+0xb4>
   19fa2:	2535      	movs	r5, #53	; 0x35
   19fa4:	69bb      	ldr	r3, [r7, #24]
   19fa6:	0018      	movs	r0, r3
   19fa8:	4b52      	ldr	r3, [pc, #328]	; (1a0f4 <xQueueGenericSendFromISR+0x204>)
   19faa:	4798      	blx	r3
   19fac:	0003      	movs	r3, r0
   19fae:	001a      	movs	r2, r3
   19fb0:	4b51      	ldr	r3, [pc, #324]	; (1a0f8 <xQueueGenericSendFromISR+0x208>)
   19fb2:	5c9c      	ldrb	r4, [r3, r2]
   19fb4:	69bb      	ldr	r3, [r7, #24]
   19fb6:	0018      	movs	r0, r3
   19fb8:	4b50      	ldr	r3, [pc, #320]	; (1a0fc <xQueueGenericSendFromISR+0x20c>)
   19fba:	4798      	blx	r3
   19fbc:	0003      	movs	r3, r0
   19fbe:	b2db      	uxtb	r3, r3
   19fc0:	001a      	movs	r2, r3
   19fc2:	0021      	movs	r1, r4
   19fc4:	0028      	movs	r0, r5
   19fc6:	4b4e      	ldr	r3, [pc, #312]	; (1a100 <xQueueGenericSendFromISR+0x210>)
   19fc8:	4798      	blx	r3
   19fca:	69bb      	ldr	r3, [r7, #24]
   19fcc:	0018      	movs	r0, r3
   19fce:	4b49      	ldr	r3, [pc, #292]	; (1a0f4 <xQueueGenericSendFromISR+0x204>)
   19fd0:	4798      	blx	r3
   19fd2:	0003      	movs	r3, r0
   19fd4:	001a      	movs	r2, r3
   19fd6:	4b48      	ldr	r3, [pc, #288]	; (1a0f8 <xQueueGenericSendFromISR+0x208>)
   19fd8:	5c9c      	ldrb	r4, [r3, r2]
   19fda:	69bb      	ldr	r3, [r7, #24]
   19fdc:	0018      	movs	r0, r3
   19fde:	4b47      	ldr	r3, [pc, #284]	; (1a0fc <xQueueGenericSendFromISR+0x20c>)
   19fe0:	4798      	blx	r3
   19fe2:	0003      	movs	r3, r0
   19fe4:	b2d9      	uxtb	r1, r3
   19fe6:	69bb      	ldr	r3, [r7, #24]
   19fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19fea:	b2db      	uxtb	r3, r3
   19fec:	3301      	adds	r3, #1
   19fee:	b2db      	uxtb	r3, r3
   19ff0:	001a      	movs	r2, r3
   19ff2:	0020      	movs	r0, r4
   19ff4:	4b43      	ldr	r3, [pc, #268]	; (1a104 <xQueueGenericSendFromISR+0x214>)
   19ff6:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   19ff8:	683a      	ldr	r2, [r7, #0]
   19ffa:	68b9      	ldr	r1, [r7, #8]
   19ffc:	69bb      	ldr	r3, [r7, #24]
   19ffe:	0018      	movs	r0, r3
   1a000:	4b41      	ldr	r3, [pc, #260]	; (1a108 <xQueueGenericSendFromISR+0x218>)
   1a002:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1a004:	2313      	movs	r3, #19
   1a006:	18fb      	adds	r3, r7, r3
   1a008:	781b      	ldrb	r3, [r3, #0]
   1a00a:	b25b      	sxtb	r3, r3
   1a00c:	3301      	adds	r3, #1
   1a00e:	d124      	bne.n	1a05a <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a010:	69bb      	ldr	r3, [r7, #24]
   1a012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a014:	2b00      	cmp	r3, #0
   1a016:	d00e      	beq.n	1a036 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1a018:	683a      	ldr	r2, [r7, #0]
   1a01a:	69bb      	ldr	r3, [r7, #24]
   1a01c:	0011      	movs	r1, r2
   1a01e:	0018      	movs	r0, r3
   1a020:	4b3a      	ldr	r3, [pc, #232]	; (1a10c <xQueueGenericSendFromISR+0x21c>)
   1a022:	4798      	blx	r3
   1a024:	1e03      	subs	r3, r0, #0
   1a026:	d021      	beq.n	1a06c <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1a028:	687b      	ldr	r3, [r7, #4]
   1a02a:	2b00      	cmp	r3, #0
   1a02c:	d01e      	beq.n	1a06c <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1a02e:	687b      	ldr	r3, [r7, #4]
   1a030:	2201      	movs	r2, #1
   1a032:	601a      	str	r2, [r3, #0]
   1a034:	e01a      	b.n	1a06c <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a036:	69bb      	ldr	r3, [r7, #24]
   1a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a03a:	2b00      	cmp	r3, #0
   1a03c:	d016      	beq.n	1a06c <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a03e:	69bb      	ldr	r3, [r7, #24]
   1a040:	3324      	adds	r3, #36	; 0x24
   1a042:	0018      	movs	r0, r3
   1a044:	4b32      	ldr	r3, [pc, #200]	; (1a110 <xQueueGenericSendFromISR+0x220>)
   1a046:	4798      	blx	r3
   1a048:	1e03      	subs	r3, r0, #0
   1a04a:	d00f      	beq.n	1a06c <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1a04c:	687b      	ldr	r3, [r7, #4]
   1a04e:	2b00      	cmp	r3, #0
   1a050:	d00c      	beq.n	1a06c <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1a052:	687b      	ldr	r3, [r7, #4]
   1a054:	2201      	movs	r2, #1
   1a056:	601a      	str	r2, [r3, #0]
   1a058:	e008      	b.n	1a06c <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1a05a:	2313      	movs	r3, #19
   1a05c:	18fb      	adds	r3, r7, r3
   1a05e:	781b      	ldrb	r3, [r3, #0]
   1a060:	3301      	adds	r3, #1
   1a062:	b2db      	uxtb	r3, r3
   1a064:	b259      	sxtb	r1, r3
   1a066:	69bb      	ldr	r3, [r7, #24]
   1a068:	2245      	movs	r2, #69	; 0x45
   1a06a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1a06c:	2301      	movs	r3, #1
   1a06e:	61fb      	str	r3, [r7, #28]
		{
   1a070:	e030      	b.n	1a0d4 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1a072:	69bb      	ldr	r3, [r7, #24]
   1a074:	0018      	movs	r0, r3
   1a076:	4b1d      	ldr	r3, [pc, #116]	; (1a0ec <xQueueGenericSendFromISR+0x1fc>)
   1a078:	4798      	blx	r3
   1a07a:	0003      	movs	r3, r0
   1a07c:	001a      	movs	r2, r3
   1a07e:	4b1c      	ldr	r3, [pc, #112]	; (1a0f0 <xQueueGenericSendFromISR+0x200>)
   1a080:	881b      	ldrh	r3, [r3, #0]
   1a082:	4013      	ands	r3, r2
   1a084:	b29b      	uxth	r3, r3
   1a086:	2b00      	cmp	r3, #0
   1a088:	d022      	beq.n	1a0d0 <xQueueGenericSendFromISR+0x1e0>
   1a08a:	683b      	ldr	r3, [r7, #0]
   1a08c:	2b00      	cmp	r3, #0
   1a08e:	d10b      	bne.n	1a0a8 <xQueueGenericSendFromISR+0x1b8>
   1a090:	69bb      	ldr	r3, [r7, #24]
   1a092:	0018      	movs	r0, r3
   1a094:	4b17      	ldr	r3, [pc, #92]	; (1a0f4 <xQueueGenericSendFromISR+0x204>)
   1a096:	4798      	blx	r3
   1a098:	0003      	movs	r3, r0
   1a09a:	001a      	movs	r2, r3
   1a09c:	4b16      	ldr	r3, [pc, #88]	; (1a0f8 <xQueueGenericSendFromISR+0x208>)
   1a09e:	5c9b      	ldrb	r3, [r3, r2]
   1a0a0:	3358      	adds	r3, #88	; 0x58
   1a0a2:	b2db      	uxtb	r3, r3
   1a0a4:	001d      	movs	r5, r3
   1a0a6:	e000      	b.n	1a0aa <xQueueGenericSendFromISR+0x1ba>
   1a0a8:	255d      	movs	r5, #93	; 0x5d
   1a0aa:	69bb      	ldr	r3, [r7, #24]
   1a0ac:	0018      	movs	r0, r3
   1a0ae:	4b11      	ldr	r3, [pc, #68]	; (1a0f4 <xQueueGenericSendFromISR+0x204>)
   1a0b0:	4798      	blx	r3
   1a0b2:	0003      	movs	r3, r0
   1a0b4:	001a      	movs	r2, r3
   1a0b6:	4b10      	ldr	r3, [pc, #64]	; (1a0f8 <xQueueGenericSendFromISR+0x208>)
   1a0b8:	5c9c      	ldrb	r4, [r3, r2]
   1a0ba:	69bb      	ldr	r3, [r7, #24]
   1a0bc:	0018      	movs	r0, r3
   1a0be:	4b0f      	ldr	r3, [pc, #60]	; (1a0fc <xQueueGenericSendFromISR+0x20c>)
   1a0c0:	4798      	blx	r3
   1a0c2:	0003      	movs	r3, r0
   1a0c4:	b2db      	uxtb	r3, r3
   1a0c6:	001a      	movs	r2, r3
   1a0c8:	0021      	movs	r1, r4
   1a0ca:	0028      	movs	r0, r5
   1a0cc:	4b0c      	ldr	r3, [pc, #48]	; (1a100 <xQueueGenericSendFromISR+0x210>)
   1a0ce:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1a0d0:	2300      	movs	r3, #0
   1a0d2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1a0d4:	697b      	ldr	r3, [r7, #20]
   1a0d6:	0018      	movs	r0, r3
   1a0d8:	4b0e      	ldr	r3, [pc, #56]	; (1a114 <xQueueGenericSendFromISR+0x224>)
   1a0da:	4798      	blx	r3

	return xReturn;
   1a0dc:	69fb      	ldr	r3, [r7, #28]
}
   1a0de:	0018      	movs	r0, r3
   1a0e0:	46bd      	mov	sp, r7
   1a0e2:	b008      	add	sp, #32
   1a0e4:	bdb0      	pop	{r4, r5, r7, pc}
   1a0e6:	46c0      	nop			; (mov r8, r8)
   1a0e8:	0001954d 	.word	0x0001954d
   1a0ec:	000175b1 	.word	0x000175b1
   1a0f0:	200000b8 	.word	0x200000b8
   1a0f4:	000174b1 	.word	0x000174b1
   1a0f8:	200000ac 	.word	0x200000ac
   1a0fc:	00017591 	.word	0x00017591
   1a100:	00017ee9 	.word	0x00017ee9
   1a104:	00018545 	.word	0x00018545
   1a108:	0001acc9 	.word	0x0001acc9
   1a10c:	0001afcd 	.word	0x0001afcd
   1a110:	0001bd8d 	.word	0x0001bd8d
   1a114:	00019559 	.word	0x00019559

0001a118 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1a118:	b580      	push	{r7, lr}
   1a11a:	b082      	sub	sp, #8
   1a11c:	af00      	add	r7, sp, #0
   1a11e:	6078      	str	r0, [r7, #4]
   1a120:	6039      	str	r1, [r7, #0]
   1a122:	6839      	ldr	r1, [r7, #0]
   1a124:	687b      	ldr	r3, [r7, #4]
   1a126:	2200      	movs	r2, #0
   1a128:	0018      	movs	r0, r3
   1a12a:	4b03      	ldr	r3, [pc, #12]	; (1a138 <xQueueGiveFromISR+0x20>)
   1a12c:	4798      	blx	r3
   1a12e:	0003      	movs	r3, r0
   1a130:	0018      	movs	r0, r3
   1a132:	46bd      	mov	sp, r7
   1a134:	b002      	add	sp, #8
   1a136:	bd80      	pop	{r7, pc}
   1a138:	0001a13d 	.word	0x0001a13d

0001a13c <MyWrapper>:
{
   1a13c:	b5b0      	push	{r4, r5, r7, lr}
   1a13e:	b08a      	sub	sp, #40	; 0x28
   1a140:	af00      	add	r7, sp, #0
   1a142:	60f8      	str	r0, [r7, #12]
   1a144:	60b9      	str	r1, [r7, #8]
   1a146:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a148:	68fb      	ldr	r3, [r7, #12]
   1a14a:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1a14c:	6a3b      	ldr	r3, [r7, #32]
   1a14e:	2b00      	cmp	r3, #0
   1a150:	d101      	bne.n	1a156 <MyWrapper+0x1a>
   1a152:	b672      	cpsid	i
   1a154:	e7fe      	b.n	1a154 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1a156:	6a3b      	ldr	r3, [r7, #32]
   1a158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a15a:	2b00      	cmp	r3, #0
   1a15c:	d001      	beq.n	1a162 <MyWrapper+0x26>
   1a15e:	b672      	cpsid	i
   1a160:	e7fe      	b.n	1a160 <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1a162:	6a3b      	ldr	r3, [r7, #32]
   1a164:	681b      	ldr	r3, [r3, #0]
   1a166:	2b00      	cmp	r3, #0
   1a168:	d103      	bne.n	1a172 <MyWrapper+0x36>
   1a16a:	6a3b      	ldr	r3, [r7, #32]
   1a16c:	685b      	ldr	r3, [r3, #4]
   1a16e:	2b00      	cmp	r3, #0
   1a170:	d101      	bne.n	1a176 <MyWrapper+0x3a>
   1a172:	2301      	movs	r3, #1
   1a174:	e000      	b.n	1a178 <MyWrapper+0x3c>
   1a176:	2300      	movs	r3, #0
   1a178:	2b00      	cmp	r3, #0
   1a17a:	d101      	bne.n	1a180 <MyWrapper+0x44>
   1a17c:	b672      	cpsid	i
   1a17e:	e7fe      	b.n	1a17e <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1a180:	4b66      	ldr	r3, [pc, #408]	; (1a31c <MyWrapper+0x1e0>)
   1a182:	4798      	blx	r3
   1a184:	0003      	movs	r3, r0
   1a186:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a188:	6a3b      	ldr	r3, [r7, #32]
   1a18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a18c:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1a18e:	6a3b      	ldr	r3, [r7, #32]
   1a190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1a192:	69bb      	ldr	r3, [r7, #24]
   1a194:	429a      	cmp	r2, r3
   1a196:	d800      	bhi.n	1a19a <MyWrapper+0x5e>
   1a198:	e085      	b.n	1a2a6 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1a19a:	2317      	movs	r3, #23
   1a19c:	18fb      	adds	r3, r7, r3
   1a19e:	6a3a      	ldr	r2, [r7, #32]
   1a1a0:	2145      	movs	r1, #69	; 0x45
   1a1a2:	5c52      	ldrb	r2, [r2, r1]
   1a1a4:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1a1a6:	6a3b      	ldr	r3, [r7, #32]
   1a1a8:	0018      	movs	r0, r3
   1a1aa:	4b5d      	ldr	r3, [pc, #372]	; (1a320 <MyWrapper+0x1e4>)
   1a1ac:	4798      	blx	r3
   1a1ae:	0003      	movs	r3, r0
   1a1b0:	001a      	movs	r2, r3
   1a1b2:	4b5c      	ldr	r3, [pc, #368]	; (1a324 <MyWrapper+0x1e8>)
   1a1b4:	881b      	ldrh	r3, [r3, #0]
   1a1b6:	4013      	ands	r3, r2
   1a1b8:	b29b      	uxth	r3, r3
   1a1ba:	2b00      	cmp	r3, #0
   1a1bc:	d022      	beq.n	1a204 <MyWrapper+0xc8>
   1a1be:	687b      	ldr	r3, [r7, #4]
   1a1c0:	2b00      	cmp	r3, #0
   1a1c2:	d10b      	bne.n	1a1dc <MyWrapper+0xa0>
   1a1c4:	6a3b      	ldr	r3, [r7, #32]
   1a1c6:	0018      	movs	r0, r3
   1a1c8:	4b57      	ldr	r3, [pc, #348]	; (1a328 <MyWrapper+0x1ec>)
   1a1ca:	4798      	blx	r3
   1a1cc:	0003      	movs	r3, r0
   1a1ce:	001a      	movs	r2, r3
   1a1d0:	4b56      	ldr	r3, [pc, #344]	; (1a32c <MyWrapper+0x1f0>)
   1a1d2:	5c9b      	ldrb	r3, [r3, r2]
   1a1d4:	3330      	adds	r3, #48	; 0x30
   1a1d6:	b2db      	uxtb	r3, r3
   1a1d8:	001d      	movs	r5, r3
   1a1da:	e000      	b.n	1a1de <MyWrapper+0xa2>
   1a1dc:	2535      	movs	r5, #53	; 0x35
   1a1de:	6a3b      	ldr	r3, [r7, #32]
   1a1e0:	0018      	movs	r0, r3
   1a1e2:	4b51      	ldr	r3, [pc, #324]	; (1a328 <MyWrapper+0x1ec>)
   1a1e4:	4798      	blx	r3
   1a1e6:	0003      	movs	r3, r0
   1a1e8:	001a      	movs	r2, r3
   1a1ea:	4b50      	ldr	r3, [pc, #320]	; (1a32c <MyWrapper+0x1f0>)
   1a1ec:	5c9c      	ldrb	r4, [r3, r2]
   1a1ee:	6a3b      	ldr	r3, [r7, #32]
   1a1f0:	0018      	movs	r0, r3
   1a1f2:	4b4f      	ldr	r3, [pc, #316]	; (1a330 <MyWrapper+0x1f4>)
   1a1f4:	4798      	blx	r3
   1a1f6:	0003      	movs	r3, r0
   1a1f8:	b2db      	uxtb	r3, r3
   1a1fa:	001a      	movs	r2, r3
   1a1fc:	0021      	movs	r1, r4
   1a1fe:	0028      	movs	r0, r5
   1a200:	4b4c      	ldr	r3, [pc, #304]	; (1a334 <MyWrapper+0x1f8>)
   1a202:	4798      	blx	r3
   1a204:	6a3b      	ldr	r3, [r7, #32]
   1a206:	0018      	movs	r0, r3
   1a208:	4b47      	ldr	r3, [pc, #284]	; (1a328 <MyWrapper+0x1ec>)
   1a20a:	4798      	blx	r3
   1a20c:	0003      	movs	r3, r0
   1a20e:	001a      	movs	r2, r3
   1a210:	4b46      	ldr	r3, [pc, #280]	; (1a32c <MyWrapper+0x1f0>)
   1a212:	5c9c      	ldrb	r4, [r3, r2]
   1a214:	6a3b      	ldr	r3, [r7, #32]
   1a216:	0018      	movs	r0, r3
   1a218:	4b45      	ldr	r3, [pc, #276]	; (1a330 <MyWrapper+0x1f4>)
   1a21a:	4798      	blx	r3
   1a21c:	0003      	movs	r3, r0
   1a21e:	b2d9      	uxtb	r1, r3
   1a220:	6a3b      	ldr	r3, [r7, #32]
   1a222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a224:	b2db      	uxtb	r3, r3
   1a226:	3301      	adds	r3, #1
   1a228:	b2db      	uxtb	r3, r3
   1a22a:	001a      	movs	r2, r3
   1a22c:	0020      	movs	r0, r4
   1a22e:	4b42      	ldr	r3, [pc, #264]	; (1a338 <MyWrapper+0x1fc>)
   1a230:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1a232:	69bb      	ldr	r3, [r7, #24]
   1a234:	1c5a      	adds	r2, r3, #1
   1a236:	6a3b      	ldr	r3, [r7, #32]
   1a238:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1a23a:	2317      	movs	r3, #23
   1a23c:	18fb      	adds	r3, r7, r3
   1a23e:	781b      	ldrb	r3, [r3, #0]
   1a240:	b25b      	sxtb	r3, r3
   1a242:	3301      	adds	r3, #1
   1a244:	d123      	bne.n	1a28e <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a246:	6a3b      	ldr	r3, [r7, #32]
   1a248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a24a:	2b00      	cmp	r3, #0
   1a24c:	d00d      	beq.n	1a26a <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1a24e:	6a3b      	ldr	r3, [r7, #32]
   1a250:	2100      	movs	r1, #0
   1a252:	0018      	movs	r0, r3
   1a254:	4b39      	ldr	r3, [pc, #228]	; (1a33c <MyWrapper+0x200>)
   1a256:	4798      	blx	r3
   1a258:	1e03      	subs	r3, r0, #0
   1a25a:	d021      	beq.n	1a2a0 <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1a25c:	68bb      	ldr	r3, [r7, #8]
   1a25e:	2b00      	cmp	r3, #0
   1a260:	d01e      	beq.n	1a2a0 <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1a262:	68bb      	ldr	r3, [r7, #8]
   1a264:	2201      	movs	r2, #1
   1a266:	601a      	str	r2, [r3, #0]
   1a268:	e01a      	b.n	1a2a0 <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a26a:	6a3b      	ldr	r3, [r7, #32]
   1a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a26e:	2b00      	cmp	r3, #0
   1a270:	d016      	beq.n	1a2a0 <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a272:	6a3b      	ldr	r3, [r7, #32]
   1a274:	3324      	adds	r3, #36	; 0x24
   1a276:	0018      	movs	r0, r3
   1a278:	4b31      	ldr	r3, [pc, #196]	; (1a340 <MyWrapper+0x204>)
   1a27a:	4798      	blx	r3
   1a27c:	1e03      	subs	r3, r0, #0
   1a27e:	d00f      	beq.n	1a2a0 <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1a280:	68bb      	ldr	r3, [r7, #8]
   1a282:	2b00      	cmp	r3, #0
   1a284:	d00c      	beq.n	1a2a0 <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1a286:	68bb      	ldr	r3, [r7, #8]
   1a288:	2201      	movs	r2, #1
   1a28a:	601a      	str	r2, [r3, #0]
   1a28c:	e008      	b.n	1a2a0 <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1a28e:	2317      	movs	r3, #23
   1a290:	18fb      	adds	r3, r7, r3
   1a292:	781b      	ldrb	r3, [r3, #0]
   1a294:	3301      	adds	r3, #1
   1a296:	b2db      	uxtb	r3, r3
   1a298:	b259      	sxtb	r1, r3
   1a29a:	6a3b      	ldr	r3, [r7, #32]
   1a29c:	2245      	movs	r2, #69	; 0x45
   1a29e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1a2a0:	2301      	movs	r3, #1
   1a2a2:	627b      	str	r3, [r7, #36]	; 0x24
   1a2a4:	e030      	b.n	1a308 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1a2a6:	6a3b      	ldr	r3, [r7, #32]
   1a2a8:	0018      	movs	r0, r3
   1a2aa:	4b1d      	ldr	r3, [pc, #116]	; (1a320 <MyWrapper+0x1e4>)
   1a2ac:	4798      	blx	r3
   1a2ae:	0003      	movs	r3, r0
   1a2b0:	001a      	movs	r2, r3
   1a2b2:	4b1c      	ldr	r3, [pc, #112]	; (1a324 <MyWrapper+0x1e8>)
   1a2b4:	881b      	ldrh	r3, [r3, #0]
   1a2b6:	4013      	ands	r3, r2
   1a2b8:	b29b      	uxth	r3, r3
   1a2ba:	2b00      	cmp	r3, #0
   1a2bc:	d022      	beq.n	1a304 <MyWrapper+0x1c8>
   1a2be:	687b      	ldr	r3, [r7, #4]
   1a2c0:	2b00      	cmp	r3, #0
   1a2c2:	d10b      	bne.n	1a2dc <MyWrapper+0x1a0>
   1a2c4:	6a3b      	ldr	r3, [r7, #32]
   1a2c6:	0018      	movs	r0, r3
   1a2c8:	4b17      	ldr	r3, [pc, #92]	; (1a328 <MyWrapper+0x1ec>)
   1a2ca:	4798      	blx	r3
   1a2cc:	0003      	movs	r3, r0
   1a2ce:	001a      	movs	r2, r3
   1a2d0:	4b16      	ldr	r3, [pc, #88]	; (1a32c <MyWrapper+0x1f0>)
   1a2d2:	5c9b      	ldrb	r3, [r3, r2]
   1a2d4:	3358      	adds	r3, #88	; 0x58
   1a2d6:	b2db      	uxtb	r3, r3
   1a2d8:	001d      	movs	r5, r3
   1a2da:	e000      	b.n	1a2de <MyWrapper+0x1a2>
   1a2dc:	255d      	movs	r5, #93	; 0x5d
   1a2de:	6a3b      	ldr	r3, [r7, #32]
   1a2e0:	0018      	movs	r0, r3
   1a2e2:	4b11      	ldr	r3, [pc, #68]	; (1a328 <MyWrapper+0x1ec>)
   1a2e4:	4798      	blx	r3
   1a2e6:	0003      	movs	r3, r0
   1a2e8:	001a      	movs	r2, r3
   1a2ea:	4b10      	ldr	r3, [pc, #64]	; (1a32c <MyWrapper+0x1f0>)
   1a2ec:	5c9c      	ldrb	r4, [r3, r2]
   1a2ee:	6a3b      	ldr	r3, [r7, #32]
   1a2f0:	0018      	movs	r0, r3
   1a2f2:	4b0f      	ldr	r3, [pc, #60]	; (1a330 <MyWrapper+0x1f4>)
   1a2f4:	4798      	blx	r3
   1a2f6:	0003      	movs	r3, r0
   1a2f8:	b2db      	uxtb	r3, r3
   1a2fa:	001a      	movs	r2, r3
   1a2fc:	0021      	movs	r1, r4
   1a2fe:	0028      	movs	r0, r5
   1a300:	4b0c      	ldr	r3, [pc, #48]	; (1a334 <MyWrapper+0x1f8>)
   1a302:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1a304:	2300      	movs	r3, #0
   1a306:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1a308:	69fb      	ldr	r3, [r7, #28]
   1a30a:	0018      	movs	r0, r3
   1a30c:	4b0d      	ldr	r3, [pc, #52]	; (1a344 <MyWrapper+0x208>)
   1a30e:	4798      	blx	r3

	return xReturn;
   1a310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1a312:	0018      	movs	r0, r3
   1a314:	46bd      	mov	sp, r7
   1a316:	b00a      	add	sp, #40	; 0x28
   1a318:	bdb0      	pop	{r4, r5, r7, pc}
   1a31a:	46c0      	nop			; (mov r8, r8)
   1a31c:	0001954d 	.word	0x0001954d
   1a320:	000175b1 	.word	0x000175b1
   1a324:	200000b8 	.word	0x200000b8
   1a328:	000174b1 	.word	0x000174b1
   1a32c:	200000ac 	.word	0x200000ac
   1a330:	00017591 	.word	0x00017591
   1a334:	00017ee9 	.word	0x00017ee9
   1a338:	00018545 	.word	0x00018545
   1a33c:	0001afcd 	.word	0x0001afcd
   1a340:	0001bd8d 	.word	0x0001bd8d
   1a344:	00019559 	.word	0x00019559

0001a348 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1a348:	b5b0      	push	{r4, r5, r7, lr}
   1a34a:	b08a      	sub	sp, #40	; 0x28
   1a34c:	af00      	add	r7, sp, #0
   1a34e:	60f8      	str	r0, [r7, #12]
   1a350:	60b9      	str	r1, [r7, #8]
   1a352:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1a354:	2300      	movs	r3, #0
   1a356:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a358:	68fb      	ldr	r3, [r7, #12]
   1a35a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1a35c:	6a3b      	ldr	r3, [r7, #32]
   1a35e:	2b00      	cmp	r3, #0
   1a360:	d101      	bne.n	1a366 <xQueueReceive+0x1e>
   1a362:	b672      	cpsid	i
   1a364:	e7fe      	b.n	1a364 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a366:	68bb      	ldr	r3, [r7, #8]
   1a368:	2b00      	cmp	r3, #0
   1a36a:	d103      	bne.n	1a374 <xQueueReceive+0x2c>
   1a36c:	6a3b      	ldr	r3, [r7, #32]
   1a36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a370:	2b00      	cmp	r3, #0
   1a372:	d101      	bne.n	1a378 <xQueueReceive+0x30>
   1a374:	2301      	movs	r3, #1
   1a376:	e000      	b.n	1a37a <xQueueReceive+0x32>
   1a378:	2300      	movs	r3, #0
   1a37a:	2b00      	cmp	r3, #0
   1a37c:	d101      	bne.n	1a382 <xQueueReceive+0x3a>
   1a37e:	b672      	cpsid	i
   1a380:	e7fe      	b.n	1a380 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a382:	4bbf      	ldr	r3, [pc, #764]	; (1a680 <xQueueReceive+0x338>)
   1a384:	4798      	blx	r3
   1a386:	1e03      	subs	r3, r0, #0
   1a388:	d102      	bne.n	1a390 <xQueueReceive+0x48>
   1a38a:	687b      	ldr	r3, [r7, #4]
   1a38c:	2b00      	cmp	r3, #0
   1a38e:	d101      	bne.n	1a394 <xQueueReceive+0x4c>
   1a390:	2301      	movs	r3, #1
   1a392:	e000      	b.n	1a396 <xQueueReceive+0x4e>
   1a394:	2300      	movs	r3, #0
   1a396:	2b00      	cmp	r3, #0
   1a398:	d101      	bne.n	1a39e <xQueueReceive+0x56>
   1a39a:	b672      	cpsid	i
   1a39c:	e7fe      	b.n	1a39c <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1a39e:	4bb9      	ldr	r3, [pc, #740]	; (1a684 <xQueueReceive+0x33c>)
   1a3a0:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a3a2:	6a3b      	ldr	r3, [r7, #32]
   1a3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a3a6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1a3a8:	69fb      	ldr	r3, [r7, #28]
   1a3aa:	2b00      	cmp	r3, #0
   1a3ac:	d100      	bne.n	1a3b0 <xQueueReceive+0x68>
   1a3ae:	e07d      	b.n	1a4ac <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1a3b0:	68ba      	ldr	r2, [r7, #8]
   1a3b2:	6a3b      	ldr	r3, [r7, #32]
   1a3b4:	0011      	movs	r1, r2
   1a3b6:	0018      	movs	r0, r3
   1a3b8:	4bb3      	ldr	r3, [pc, #716]	; (1a688 <xQueueReceive+0x340>)
   1a3ba:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1a3bc:	4bb3      	ldr	r3, [pc, #716]	; (1a68c <xQueueReceive+0x344>)
   1a3be:	4798      	blx	r3
   1a3c0:	0003      	movs	r3, r0
   1a3c2:	0018      	movs	r0, r3
   1a3c4:	4bb2      	ldr	r3, [pc, #712]	; (1a690 <xQueueReceive+0x348>)
   1a3c6:	4798      	blx	r3
   1a3c8:	0003      	movs	r3, r0
   1a3ca:	001a      	movs	r2, r3
   1a3cc:	4bb1      	ldr	r3, [pc, #708]	; (1a694 <xQueueReceive+0x34c>)
   1a3ce:	881b      	ldrh	r3, [r3, #0]
   1a3d0:	4013      	ands	r3, r2
   1a3d2:	b29b      	uxth	r3, r3
   1a3d4:	2b00      	cmp	r3, #0
   1a3d6:	d029      	beq.n	1a42c <xQueueReceive+0xe4>
   1a3d8:	6a3b      	ldr	r3, [r7, #32]
   1a3da:	0018      	movs	r0, r3
   1a3dc:	4bae      	ldr	r3, [pc, #696]	; (1a698 <xQueueReceive+0x350>)
   1a3de:	4798      	blx	r3
   1a3e0:	0003      	movs	r3, r0
   1a3e2:	001a      	movs	r2, r3
   1a3e4:	4bab      	ldr	r3, [pc, #684]	; (1a694 <xQueueReceive+0x34c>)
   1a3e6:	881b      	ldrh	r3, [r3, #0]
   1a3e8:	4013      	ands	r3, r2
   1a3ea:	b29b      	uxth	r3, r3
   1a3ec:	2b00      	cmp	r3, #0
   1a3ee:	d01d      	beq.n	1a42c <xQueueReceive+0xe4>
   1a3f0:	6a3b      	ldr	r3, [r7, #32]
   1a3f2:	0018      	movs	r0, r3
   1a3f4:	4ba9      	ldr	r3, [pc, #676]	; (1a69c <xQueueReceive+0x354>)
   1a3f6:	4798      	blx	r3
   1a3f8:	0003      	movs	r3, r0
   1a3fa:	001a      	movs	r2, r3
   1a3fc:	4ba8      	ldr	r3, [pc, #672]	; (1a6a0 <xQueueReceive+0x358>)
   1a3fe:	5c9b      	ldrb	r3, [r3, r2]
   1a400:	3328      	adds	r3, #40	; 0x28
   1a402:	b2db      	uxtb	r3, r3
   1a404:	001d      	movs	r5, r3
   1a406:	6a3b      	ldr	r3, [r7, #32]
   1a408:	0018      	movs	r0, r3
   1a40a:	4ba4      	ldr	r3, [pc, #656]	; (1a69c <xQueueReceive+0x354>)
   1a40c:	4798      	blx	r3
   1a40e:	0003      	movs	r3, r0
   1a410:	001a      	movs	r2, r3
   1a412:	4ba3      	ldr	r3, [pc, #652]	; (1a6a0 <xQueueReceive+0x358>)
   1a414:	5c9c      	ldrb	r4, [r3, r2]
   1a416:	6a3b      	ldr	r3, [r7, #32]
   1a418:	0018      	movs	r0, r3
   1a41a:	4ba2      	ldr	r3, [pc, #648]	; (1a6a4 <xQueueReceive+0x35c>)
   1a41c:	4798      	blx	r3
   1a41e:	0003      	movs	r3, r0
   1a420:	b2db      	uxtb	r3, r3
   1a422:	001a      	movs	r2, r3
   1a424:	0021      	movs	r1, r4
   1a426:	0028      	movs	r0, r5
   1a428:	4b9f      	ldr	r3, [pc, #636]	; (1a6a8 <xQueueReceive+0x360>)
   1a42a:	4798      	blx	r3
   1a42c:	6a3b      	ldr	r3, [r7, #32]
   1a42e:	0018      	movs	r0, r3
   1a430:	4b9a      	ldr	r3, [pc, #616]	; (1a69c <xQueueReceive+0x354>)
   1a432:	4798      	blx	r3
   1a434:	0003      	movs	r3, r0
   1a436:	001a      	movs	r2, r3
   1a438:	4b99      	ldr	r3, [pc, #612]	; (1a6a0 <xQueueReceive+0x358>)
   1a43a:	5c9c      	ldrb	r4, [r3, r2]
   1a43c:	6a3b      	ldr	r3, [r7, #32]
   1a43e:	0018      	movs	r0, r3
   1a440:	4b98      	ldr	r3, [pc, #608]	; (1a6a4 <xQueueReceive+0x35c>)
   1a442:	4798      	blx	r3
   1a444:	0003      	movs	r3, r0
   1a446:	b2dd      	uxtb	r5, r3
   1a448:	6a3b      	ldr	r3, [r7, #32]
   1a44a:	0018      	movs	r0, r3
   1a44c:	4b93      	ldr	r3, [pc, #588]	; (1a69c <xQueueReceive+0x354>)
   1a44e:	4798      	blx	r3
   1a450:	0003      	movs	r3, r0
   1a452:	001a      	movs	r2, r3
   1a454:	4b92      	ldr	r3, [pc, #584]	; (1a6a0 <xQueueReceive+0x358>)
   1a456:	5c9b      	ldrb	r3, [r3, r2]
   1a458:	2b02      	cmp	r3, #2
   1a45a:	d108      	bne.n	1a46e <xQueueReceive+0x126>
   1a45c:	4b8b      	ldr	r3, [pc, #556]	; (1a68c <xQueueReceive+0x344>)
   1a45e:	4798      	blx	r3
   1a460:	0003      	movs	r3, r0
   1a462:	0018      	movs	r0, r3
   1a464:	4b91      	ldr	r3, [pc, #580]	; (1a6ac <xQueueReceive+0x364>)
   1a466:	4798      	blx	r3
   1a468:	0003      	movs	r3, r0
   1a46a:	b2db      	uxtb	r3, r3
   1a46c:	e004      	b.n	1a478 <xQueueReceive+0x130>
   1a46e:	6a3b      	ldr	r3, [r7, #32]
   1a470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a472:	b2db      	uxtb	r3, r3
   1a474:	3b01      	subs	r3, #1
   1a476:	b2db      	uxtb	r3, r3
   1a478:	001a      	movs	r2, r3
   1a47a:	0029      	movs	r1, r5
   1a47c:	0020      	movs	r0, r4
   1a47e:	4b8c      	ldr	r3, [pc, #560]	; (1a6b0 <xQueueReceive+0x368>)
   1a480:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1a482:	69fb      	ldr	r3, [r7, #28]
   1a484:	1e5a      	subs	r2, r3, #1
   1a486:	6a3b      	ldr	r3, [r7, #32]
   1a488:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a48a:	6a3b      	ldr	r3, [r7, #32]
   1a48c:	691b      	ldr	r3, [r3, #16]
   1a48e:	2b00      	cmp	r3, #0
   1a490:	d008      	beq.n	1a4a4 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a492:	6a3b      	ldr	r3, [r7, #32]
   1a494:	3310      	adds	r3, #16
   1a496:	0018      	movs	r0, r3
   1a498:	4b86      	ldr	r3, [pc, #536]	; (1a6b4 <xQueueReceive+0x36c>)
   1a49a:	4798      	blx	r3
   1a49c:	1e03      	subs	r3, r0, #0
   1a49e:	d001      	beq.n	1a4a4 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1a4a0:	4b85      	ldr	r3, [pc, #532]	; (1a6b8 <xQueueReceive+0x370>)
   1a4a2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1a4a4:	4b85      	ldr	r3, [pc, #532]	; (1a6bc <xQueueReceive+0x374>)
   1a4a6:	4798      	blx	r3
				return pdPASS;
   1a4a8:	2301      	movs	r3, #1
   1a4aa:	e15f      	b.n	1a76c <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a4ac:	687b      	ldr	r3, [r7, #4]
   1a4ae:	2b00      	cmp	r3, #0
   1a4b0:	d13b      	bne.n	1a52a <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1a4b2:	4b82      	ldr	r3, [pc, #520]	; (1a6bc <xQueueReceive+0x374>)
   1a4b4:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a4b6:	4b75      	ldr	r3, [pc, #468]	; (1a68c <xQueueReceive+0x344>)
   1a4b8:	4798      	blx	r3
   1a4ba:	0003      	movs	r3, r0
   1a4bc:	0018      	movs	r0, r3
   1a4be:	4b74      	ldr	r3, [pc, #464]	; (1a690 <xQueueReceive+0x348>)
   1a4c0:	4798      	blx	r3
   1a4c2:	0003      	movs	r3, r0
   1a4c4:	001a      	movs	r2, r3
   1a4c6:	4b73      	ldr	r3, [pc, #460]	; (1a694 <xQueueReceive+0x34c>)
   1a4c8:	881b      	ldrh	r3, [r3, #0]
   1a4ca:	4013      	ands	r3, r2
   1a4cc:	b29b      	uxth	r3, r3
   1a4ce:	2b00      	cmp	r3, #0
   1a4d0:	d029      	beq.n	1a526 <xQueueReceive+0x1de>
   1a4d2:	6a3b      	ldr	r3, [r7, #32]
   1a4d4:	0018      	movs	r0, r3
   1a4d6:	4b70      	ldr	r3, [pc, #448]	; (1a698 <xQueueReceive+0x350>)
   1a4d8:	4798      	blx	r3
   1a4da:	0003      	movs	r3, r0
   1a4dc:	001a      	movs	r2, r3
   1a4de:	4b6d      	ldr	r3, [pc, #436]	; (1a694 <xQueueReceive+0x34c>)
   1a4e0:	881b      	ldrh	r3, [r3, #0]
   1a4e2:	4013      	ands	r3, r2
   1a4e4:	b29b      	uxth	r3, r3
   1a4e6:	2b00      	cmp	r3, #0
   1a4e8:	d01d      	beq.n	1a526 <xQueueReceive+0x1de>
   1a4ea:	6a3b      	ldr	r3, [r7, #32]
   1a4ec:	0018      	movs	r0, r3
   1a4ee:	4b6b      	ldr	r3, [pc, #428]	; (1a69c <xQueueReceive+0x354>)
   1a4f0:	4798      	blx	r3
   1a4f2:	0003      	movs	r3, r0
   1a4f4:	001a      	movs	r2, r3
   1a4f6:	4b6a      	ldr	r3, [pc, #424]	; (1a6a0 <xQueueReceive+0x358>)
   1a4f8:	5c9b      	ldrb	r3, [r3, r2]
   1a4fa:	3350      	adds	r3, #80	; 0x50
   1a4fc:	b2db      	uxtb	r3, r3
   1a4fe:	001d      	movs	r5, r3
   1a500:	6a3b      	ldr	r3, [r7, #32]
   1a502:	0018      	movs	r0, r3
   1a504:	4b65      	ldr	r3, [pc, #404]	; (1a69c <xQueueReceive+0x354>)
   1a506:	4798      	blx	r3
   1a508:	0003      	movs	r3, r0
   1a50a:	001a      	movs	r2, r3
   1a50c:	4b64      	ldr	r3, [pc, #400]	; (1a6a0 <xQueueReceive+0x358>)
   1a50e:	5c9c      	ldrb	r4, [r3, r2]
   1a510:	6a3b      	ldr	r3, [r7, #32]
   1a512:	0018      	movs	r0, r3
   1a514:	4b63      	ldr	r3, [pc, #396]	; (1a6a4 <xQueueReceive+0x35c>)
   1a516:	4798      	blx	r3
   1a518:	0003      	movs	r3, r0
   1a51a:	b2db      	uxtb	r3, r3
   1a51c:	001a      	movs	r2, r3
   1a51e:	0021      	movs	r1, r4
   1a520:	0028      	movs	r0, r5
   1a522:	4b61      	ldr	r3, [pc, #388]	; (1a6a8 <xQueueReceive+0x360>)
   1a524:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1a526:	2300      	movs	r3, #0
   1a528:	e120      	b.n	1a76c <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a52c:	2b00      	cmp	r3, #0
   1a52e:	d106      	bne.n	1a53e <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a530:	2314      	movs	r3, #20
   1a532:	18fb      	adds	r3, r7, r3
   1a534:	0018      	movs	r0, r3
   1a536:	4b62      	ldr	r3, [pc, #392]	; (1a6c0 <xQueueReceive+0x378>)
   1a538:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a53a:	2301      	movs	r3, #1
   1a53c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a53e:	4b5f      	ldr	r3, [pc, #380]	; (1a6bc <xQueueReceive+0x374>)
   1a540:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a542:	4b60      	ldr	r3, [pc, #384]	; (1a6c4 <xQueueReceive+0x37c>)
   1a544:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a546:	4b4f      	ldr	r3, [pc, #316]	; (1a684 <xQueueReceive+0x33c>)
   1a548:	4798      	blx	r3
   1a54a:	6a3b      	ldr	r3, [r7, #32]
   1a54c:	2244      	movs	r2, #68	; 0x44
   1a54e:	5c9b      	ldrb	r3, [r3, r2]
   1a550:	b25b      	sxtb	r3, r3
   1a552:	3301      	adds	r3, #1
   1a554:	d103      	bne.n	1a55e <xQueueReceive+0x216>
   1a556:	6a3b      	ldr	r3, [r7, #32]
   1a558:	2244      	movs	r2, #68	; 0x44
   1a55a:	2100      	movs	r1, #0
   1a55c:	5499      	strb	r1, [r3, r2]
   1a55e:	6a3b      	ldr	r3, [r7, #32]
   1a560:	2245      	movs	r2, #69	; 0x45
   1a562:	5c9b      	ldrb	r3, [r3, r2]
   1a564:	b25b      	sxtb	r3, r3
   1a566:	3301      	adds	r3, #1
   1a568:	d103      	bne.n	1a572 <xQueueReceive+0x22a>
   1a56a:	6a3b      	ldr	r3, [r7, #32]
   1a56c:	2245      	movs	r2, #69	; 0x45
   1a56e:	2100      	movs	r1, #0
   1a570:	5499      	strb	r1, [r3, r2]
   1a572:	4b52      	ldr	r3, [pc, #328]	; (1a6bc <xQueueReceive+0x374>)
   1a574:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a576:	1d3a      	adds	r2, r7, #4
   1a578:	2314      	movs	r3, #20
   1a57a:	18fb      	adds	r3, r7, r3
   1a57c:	0011      	movs	r1, r2
   1a57e:	0018      	movs	r0, r3
   1a580:	4b51      	ldr	r3, [pc, #324]	; (1a6c8 <xQueueReceive+0x380>)
   1a582:	4798      	blx	r3
   1a584:	1e03      	subs	r3, r0, #0
   1a586:	d000      	beq.n	1a58a <xQueueReceive+0x242>
   1a588:	e0aa      	b.n	1a6e0 <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a58a:	6a3b      	ldr	r3, [r7, #32]
   1a58c:	0018      	movs	r0, r3
   1a58e:	4b4f      	ldr	r3, [pc, #316]	; (1a6cc <xQueueReceive+0x384>)
   1a590:	4798      	blx	r3
   1a592:	1e03      	subs	r3, r0, #0
   1a594:	d06d      	beq.n	1a672 <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1a596:	4b3d      	ldr	r3, [pc, #244]	; (1a68c <xQueueReceive+0x344>)
   1a598:	4798      	blx	r3
   1a59a:	0003      	movs	r3, r0
   1a59c:	0018      	movs	r0, r3
   1a59e:	4b3c      	ldr	r3, [pc, #240]	; (1a690 <xQueueReceive+0x348>)
   1a5a0:	4798      	blx	r3
   1a5a2:	0003      	movs	r3, r0
   1a5a4:	001a      	movs	r2, r3
   1a5a6:	4b3b      	ldr	r3, [pc, #236]	; (1a694 <xQueueReceive+0x34c>)
   1a5a8:	881b      	ldrh	r3, [r3, #0]
   1a5aa:	4013      	ands	r3, r2
   1a5ac:	b29b      	uxth	r3, r3
   1a5ae:	2b00      	cmp	r3, #0
   1a5b0:	d029      	beq.n	1a606 <xQueueReceive+0x2be>
   1a5b2:	6a3b      	ldr	r3, [r7, #32]
   1a5b4:	0018      	movs	r0, r3
   1a5b6:	4b38      	ldr	r3, [pc, #224]	; (1a698 <xQueueReceive+0x350>)
   1a5b8:	4798      	blx	r3
   1a5ba:	0003      	movs	r3, r0
   1a5bc:	001a      	movs	r2, r3
   1a5be:	4b35      	ldr	r3, [pc, #212]	; (1a694 <xQueueReceive+0x34c>)
   1a5c0:	881b      	ldrh	r3, [r3, #0]
   1a5c2:	4013      	ands	r3, r2
   1a5c4:	b29b      	uxth	r3, r3
   1a5c6:	2b00      	cmp	r3, #0
   1a5c8:	d01d      	beq.n	1a606 <xQueueReceive+0x2be>
   1a5ca:	6a3b      	ldr	r3, [r7, #32]
   1a5cc:	0018      	movs	r0, r3
   1a5ce:	4b33      	ldr	r3, [pc, #204]	; (1a69c <xQueueReceive+0x354>)
   1a5d0:	4798      	blx	r3
   1a5d2:	0003      	movs	r3, r0
   1a5d4:	001a      	movs	r2, r3
   1a5d6:	4b32      	ldr	r3, [pc, #200]	; (1a6a0 <xQueueReceive+0x358>)
   1a5d8:	5c9b      	ldrb	r3, [r3, r2]
   1a5da:	3368      	adds	r3, #104	; 0x68
   1a5dc:	b2db      	uxtb	r3, r3
   1a5de:	001d      	movs	r5, r3
   1a5e0:	6a3b      	ldr	r3, [r7, #32]
   1a5e2:	0018      	movs	r0, r3
   1a5e4:	4b2d      	ldr	r3, [pc, #180]	; (1a69c <xQueueReceive+0x354>)
   1a5e6:	4798      	blx	r3
   1a5e8:	0003      	movs	r3, r0
   1a5ea:	001a      	movs	r2, r3
   1a5ec:	4b2c      	ldr	r3, [pc, #176]	; (1a6a0 <xQueueReceive+0x358>)
   1a5ee:	5c9c      	ldrb	r4, [r3, r2]
   1a5f0:	6a3b      	ldr	r3, [r7, #32]
   1a5f2:	0018      	movs	r0, r3
   1a5f4:	4b2b      	ldr	r3, [pc, #172]	; (1a6a4 <xQueueReceive+0x35c>)
   1a5f6:	4798      	blx	r3
   1a5f8:	0003      	movs	r3, r0
   1a5fa:	b2db      	uxtb	r3, r3
   1a5fc:	001a      	movs	r2, r3
   1a5fe:	0021      	movs	r1, r4
   1a600:	0028      	movs	r0, r5
   1a602:	4b29      	ldr	r3, [pc, #164]	; (1a6a8 <xQueueReceive+0x360>)
   1a604:	4798      	blx	r3
   1a606:	6a3b      	ldr	r3, [r7, #32]
   1a608:	0018      	movs	r0, r3
   1a60a:	4b24      	ldr	r3, [pc, #144]	; (1a69c <xQueueReceive+0x354>)
   1a60c:	4798      	blx	r3
   1a60e:	0003      	movs	r3, r0
   1a610:	001a      	movs	r2, r3
   1a612:	4b23      	ldr	r3, [pc, #140]	; (1a6a0 <xQueueReceive+0x358>)
   1a614:	5c9b      	ldrb	r3, [r3, r2]
   1a616:	2b02      	cmp	r3, #2
   1a618:	d018      	beq.n	1a64c <xQueueReceive+0x304>
   1a61a:	4b1c      	ldr	r3, [pc, #112]	; (1a68c <xQueueReceive+0x344>)
   1a61c:	4798      	blx	r3
   1a61e:	0003      	movs	r3, r0
   1a620:	0018      	movs	r0, r3
   1a622:	4b1b      	ldr	r3, [pc, #108]	; (1a690 <xQueueReceive+0x348>)
   1a624:	4798      	blx	r3
   1a626:	0003      	movs	r3, r0
   1a628:	001a      	movs	r2, r3
   1a62a:	4b1a      	ldr	r3, [pc, #104]	; (1a694 <xQueueReceive+0x34c>)
   1a62c:	881b      	ldrh	r3, [r3, #0]
   1a62e:	4013      	ands	r3, r2
   1a630:	b29b      	uxth	r3, r3
   1a632:	2b00      	cmp	r3, #0
   1a634:	d00a      	beq.n	1a64c <xQueueReceive+0x304>
   1a636:	4b15      	ldr	r3, [pc, #84]	; (1a68c <xQueueReceive+0x344>)
   1a638:	4798      	blx	r3
   1a63a:	0003      	movs	r3, r0
   1a63c:	0018      	movs	r0, r3
   1a63e:	4b1b      	ldr	r3, [pc, #108]	; (1a6ac <xQueueReceive+0x364>)
   1a640:	4798      	blx	r3
   1a642:	0003      	movs	r3, r0
   1a644:	b2db      	uxtb	r3, r3
   1a646:	0018      	movs	r0, r3
   1a648:	4b21      	ldr	r3, [pc, #132]	; (1a6d0 <xQueueReceive+0x388>)
   1a64a:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1a64c:	6a3b      	ldr	r3, [r7, #32]
   1a64e:	3324      	adds	r3, #36	; 0x24
   1a650:	687a      	ldr	r2, [r7, #4]
   1a652:	0011      	movs	r1, r2
   1a654:	0018      	movs	r0, r3
   1a656:	4b1f      	ldr	r3, [pc, #124]	; (1a6d4 <xQueueReceive+0x38c>)
   1a658:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1a65a:	6a3b      	ldr	r3, [r7, #32]
   1a65c:	0018      	movs	r0, r3
   1a65e:	4b1e      	ldr	r3, [pc, #120]	; (1a6d8 <xQueueReceive+0x390>)
   1a660:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1a662:	4b1e      	ldr	r3, [pc, #120]	; (1a6dc <xQueueReceive+0x394>)
   1a664:	4798      	blx	r3
   1a666:	1e03      	subs	r3, r0, #0
   1a668:	d000      	beq.n	1a66c <xQueueReceive+0x324>
   1a66a:	e698      	b.n	1a39e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1a66c:	4b12      	ldr	r3, [pc, #72]	; (1a6b8 <xQueueReceive+0x370>)
   1a66e:	4798      	blx	r3
   1a670:	e695      	b.n	1a39e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1a672:	6a3b      	ldr	r3, [r7, #32]
   1a674:	0018      	movs	r0, r3
   1a676:	4b18      	ldr	r3, [pc, #96]	; (1a6d8 <xQueueReceive+0x390>)
   1a678:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1a67a:	4b18      	ldr	r3, [pc, #96]	; (1a6dc <xQueueReceive+0x394>)
   1a67c:	4798      	blx	r3
   1a67e:	e68e      	b.n	1a39e <xQueueReceive+0x56>
   1a680:	0001c21d 	.word	0x0001c21d
   1a684:	000194f9 	.word	0x000194f9
   1a688:	0001ada9 	.word	0x0001ada9
   1a68c:	0001778d 	.word	0x0001778d
   1a690:	000174f1 	.word	0x000174f1
   1a694:	200000b8 	.word	0x200000b8
   1a698:	000175b1 	.word	0x000175b1
   1a69c:	000174b1 	.word	0x000174b1
   1a6a0:	200000ac 	.word	0x200000ac
   1a6a4:	00017591 	.word	0x00017591
   1a6a8:	00017ee9 	.word	0x00017ee9
   1a6ac:	000174d1 	.word	0x000174d1
   1a6b0:	00018545 	.word	0x00018545
   1a6b4:	0001bd8d 	.word	0x0001bd8d
   1a6b8:	000194e1 	.word	0x000194e1
   1a6bc:	0001951d 	.word	0x0001951d
   1a6c0:	0001becd 	.word	0x0001becd
   1a6c4:	0001b7b5 	.word	0x0001b7b5
   1a6c8:	0001bef5 	.word	0x0001bef5
   1a6cc:	0001aee9 	.word	0x0001aee9
   1a6d0:	00018681 	.word	0x00018681
   1a6d4:	0001bc69 	.word	0x0001bc69
   1a6d8:	0001adf9 	.word	0x0001adf9
   1a6dc:	0001b7cd 	.word	0x0001b7cd
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1a6e0:	6a3b      	ldr	r3, [r7, #32]
   1a6e2:	0018      	movs	r0, r3
   1a6e4:	4b23      	ldr	r3, [pc, #140]	; (1a774 <xQueueReceive+0x42c>)
   1a6e6:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1a6e8:	4b23      	ldr	r3, [pc, #140]	; (1a778 <xQueueReceive+0x430>)
   1a6ea:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a6ec:	6a3b      	ldr	r3, [r7, #32]
   1a6ee:	0018      	movs	r0, r3
   1a6f0:	4b22      	ldr	r3, [pc, #136]	; (1a77c <xQueueReceive+0x434>)
   1a6f2:	4798      	blx	r3
   1a6f4:	1e03      	subs	r3, r0, #0
   1a6f6:	d100      	bne.n	1a6fa <xQueueReceive+0x3b2>
   1a6f8:	e651      	b.n	1a39e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a6fa:	4b21      	ldr	r3, [pc, #132]	; (1a780 <xQueueReceive+0x438>)
   1a6fc:	4798      	blx	r3
   1a6fe:	0003      	movs	r3, r0
   1a700:	0018      	movs	r0, r3
   1a702:	4b20      	ldr	r3, [pc, #128]	; (1a784 <xQueueReceive+0x43c>)
   1a704:	4798      	blx	r3
   1a706:	0003      	movs	r3, r0
   1a708:	001a      	movs	r2, r3
   1a70a:	4b1f      	ldr	r3, [pc, #124]	; (1a788 <xQueueReceive+0x440>)
   1a70c:	881b      	ldrh	r3, [r3, #0]
   1a70e:	4013      	ands	r3, r2
   1a710:	b29b      	uxth	r3, r3
   1a712:	2b00      	cmp	r3, #0
   1a714:	d029      	beq.n	1a76a <xQueueReceive+0x422>
   1a716:	6a3b      	ldr	r3, [r7, #32]
   1a718:	0018      	movs	r0, r3
   1a71a:	4b1c      	ldr	r3, [pc, #112]	; (1a78c <xQueueReceive+0x444>)
   1a71c:	4798      	blx	r3
   1a71e:	0003      	movs	r3, r0
   1a720:	001a      	movs	r2, r3
   1a722:	4b19      	ldr	r3, [pc, #100]	; (1a788 <xQueueReceive+0x440>)
   1a724:	881b      	ldrh	r3, [r3, #0]
   1a726:	4013      	ands	r3, r2
   1a728:	b29b      	uxth	r3, r3
   1a72a:	2b00      	cmp	r3, #0
   1a72c:	d01d      	beq.n	1a76a <xQueueReceive+0x422>
   1a72e:	6a3b      	ldr	r3, [r7, #32]
   1a730:	0018      	movs	r0, r3
   1a732:	4b17      	ldr	r3, [pc, #92]	; (1a790 <xQueueReceive+0x448>)
   1a734:	4798      	blx	r3
   1a736:	0003      	movs	r3, r0
   1a738:	001a      	movs	r2, r3
   1a73a:	4b16      	ldr	r3, [pc, #88]	; (1a794 <xQueueReceive+0x44c>)
   1a73c:	5c9b      	ldrb	r3, [r3, r2]
   1a73e:	3350      	adds	r3, #80	; 0x50
   1a740:	b2db      	uxtb	r3, r3
   1a742:	001d      	movs	r5, r3
   1a744:	6a3b      	ldr	r3, [r7, #32]
   1a746:	0018      	movs	r0, r3
   1a748:	4b11      	ldr	r3, [pc, #68]	; (1a790 <xQueueReceive+0x448>)
   1a74a:	4798      	blx	r3
   1a74c:	0003      	movs	r3, r0
   1a74e:	001a      	movs	r2, r3
   1a750:	4b10      	ldr	r3, [pc, #64]	; (1a794 <xQueueReceive+0x44c>)
   1a752:	5c9c      	ldrb	r4, [r3, r2]
   1a754:	6a3b      	ldr	r3, [r7, #32]
   1a756:	0018      	movs	r0, r3
   1a758:	4b0f      	ldr	r3, [pc, #60]	; (1a798 <xQueueReceive+0x450>)
   1a75a:	4798      	blx	r3
   1a75c:	0003      	movs	r3, r0
   1a75e:	b2db      	uxtb	r3, r3
   1a760:	001a      	movs	r2, r3
   1a762:	0021      	movs	r1, r4
   1a764:	0028      	movs	r0, r5
   1a766:	4b0d      	ldr	r3, [pc, #52]	; (1a79c <xQueueReceive+0x454>)
   1a768:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1a76a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1a76c:	0018      	movs	r0, r3
   1a76e:	46bd      	mov	sp, r7
   1a770:	b00a      	add	sp, #40	; 0x28
   1a772:	bdb0      	pop	{r4, r5, r7, pc}
   1a774:	0001adf9 	.word	0x0001adf9
   1a778:	0001b7cd 	.word	0x0001b7cd
   1a77c:	0001aee9 	.word	0x0001aee9
   1a780:	0001778d 	.word	0x0001778d
   1a784:	000174f1 	.word	0x000174f1
   1a788:	200000b8 	.word	0x200000b8
   1a78c:	000175b1 	.word	0x000175b1
   1a790:	000174b1 	.word	0x000174b1
   1a794:	200000ac 	.word	0x200000ac
   1a798:	00017591 	.word	0x00017591
   1a79c:	00017ee9 	.word	0x00017ee9

0001a7a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1a7a0:	b5b0      	push	{r4, r5, r7, lr}
   1a7a2:	b08a      	sub	sp, #40	; 0x28
   1a7a4:	af00      	add	r7, sp, #0
   1a7a6:	6078      	str	r0, [r7, #4]
   1a7a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1a7aa:	2300      	movs	r3, #0
   1a7ac:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a7ae:	687b      	ldr	r3, [r7, #4]
   1a7b0:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1a7b2:	2300      	movs	r3, #0
   1a7b4:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1a7b6:	69fb      	ldr	r3, [r7, #28]
   1a7b8:	2b00      	cmp	r3, #0
   1a7ba:	d101      	bne.n	1a7c0 <xQueueSemaphoreTake+0x20>
   1a7bc:	b672      	cpsid	i
   1a7be:	e7fe      	b.n	1a7be <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1a7c0:	69fb      	ldr	r3, [r7, #28]
   1a7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a7c4:	2b00      	cmp	r3, #0
   1a7c6:	d001      	beq.n	1a7cc <xQueueSemaphoreTake+0x2c>
   1a7c8:	b672      	cpsid	i
   1a7ca:	e7fe      	b.n	1a7ca <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a7cc:	4bcb      	ldr	r3, [pc, #812]	; (1aafc <xQueueSemaphoreTake+0x35c>)
   1a7ce:	4798      	blx	r3
   1a7d0:	1e03      	subs	r3, r0, #0
   1a7d2:	d102      	bne.n	1a7da <xQueueSemaphoreTake+0x3a>
   1a7d4:	683b      	ldr	r3, [r7, #0]
   1a7d6:	2b00      	cmp	r3, #0
   1a7d8:	d101      	bne.n	1a7de <xQueueSemaphoreTake+0x3e>
   1a7da:	2301      	movs	r3, #1
   1a7dc:	e000      	b.n	1a7e0 <xQueueSemaphoreTake+0x40>
   1a7de:	2300      	movs	r3, #0
   1a7e0:	2b00      	cmp	r3, #0
   1a7e2:	d101      	bne.n	1a7e8 <xQueueSemaphoreTake+0x48>
   1a7e4:	b672      	cpsid	i
   1a7e6:	e7fe      	b.n	1a7e6 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1a7e8:	4bc5      	ldr	r3, [pc, #788]	; (1ab00 <xQueueSemaphoreTake+0x360>)
   1a7ea:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1a7ec:	69fb      	ldr	r3, [r7, #28]
   1a7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a7f0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1a7f2:	69bb      	ldr	r3, [r7, #24]
   1a7f4:	2b00      	cmp	r3, #0
   1a7f6:	d100      	bne.n	1a7fa <xQueueSemaphoreTake+0x5a>
   1a7f8:	e080      	b.n	1a8fc <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1a7fa:	4bc2      	ldr	r3, [pc, #776]	; (1ab04 <xQueueSemaphoreTake+0x364>)
   1a7fc:	4798      	blx	r3
   1a7fe:	0003      	movs	r3, r0
   1a800:	0018      	movs	r0, r3
   1a802:	4bc1      	ldr	r3, [pc, #772]	; (1ab08 <xQueueSemaphoreTake+0x368>)
   1a804:	4798      	blx	r3
   1a806:	0003      	movs	r3, r0
   1a808:	001a      	movs	r2, r3
   1a80a:	4bc0      	ldr	r3, [pc, #768]	; (1ab0c <xQueueSemaphoreTake+0x36c>)
   1a80c:	881b      	ldrh	r3, [r3, #0]
   1a80e:	4013      	ands	r3, r2
   1a810:	b29b      	uxth	r3, r3
   1a812:	2b00      	cmp	r3, #0
   1a814:	d029      	beq.n	1a86a <xQueueSemaphoreTake+0xca>
   1a816:	69fb      	ldr	r3, [r7, #28]
   1a818:	0018      	movs	r0, r3
   1a81a:	4bbd      	ldr	r3, [pc, #756]	; (1ab10 <xQueueSemaphoreTake+0x370>)
   1a81c:	4798      	blx	r3
   1a81e:	0003      	movs	r3, r0
   1a820:	001a      	movs	r2, r3
   1a822:	4bba      	ldr	r3, [pc, #744]	; (1ab0c <xQueueSemaphoreTake+0x36c>)
   1a824:	881b      	ldrh	r3, [r3, #0]
   1a826:	4013      	ands	r3, r2
   1a828:	b29b      	uxth	r3, r3
   1a82a:	2b00      	cmp	r3, #0
   1a82c:	d01d      	beq.n	1a86a <xQueueSemaphoreTake+0xca>
   1a82e:	69fb      	ldr	r3, [r7, #28]
   1a830:	0018      	movs	r0, r3
   1a832:	4bb8      	ldr	r3, [pc, #736]	; (1ab14 <xQueueSemaphoreTake+0x374>)
   1a834:	4798      	blx	r3
   1a836:	0003      	movs	r3, r0
   1a838:	001a      	movs	r2, r3
   1a83a:	4bb7      	ldr	r3, [pc, #732]	; (1ab18 <xQueueSemaphoreTake+0x378>)
   1a83c:	5c9b      	ldrb	r3, [r3, r2]
   1a83e:	3328      	adds	r3, #40	; 0x28
   1a840:	b2db      	uxtb	r3, r3
   1a842:	001d      	movs	r5, r3
   1a844:	69fb      	ldr	r3, [r7, #28]
   1a846:	0018      	movs	r0, r3
   1a848:	4bb2      	ldr	r3, [pc, #712]	; (1ab14 <xQueueSemaphoreTake+0x374>)
   1a84a:	4798      	blx	r3
   1a84c:	0003      	movs	r3, r0
   1a84e:	001a      	movs	r2, r3
   1a850:	4bb1      	ldr	r3, [pc, #708]	; (1ab18 <xQueueSemaphoreTake+0x378>)
   1a852:	5c9c      	ldrb	r4, [r3, r2]
   1a854:	69fb      	ldr	r3, [r7, #28]
   1a856:	0018      	movs	r0, r3
   1a858:	4bb0      	ldr	r3, [pc, #704]	; (1ab1c <xQueueSemaphoreTake+0x37c>)
   1a85a:	4798      	blx	r3
   1a85c:	0003      	movs	r3, r0
   1a85e:	b2db      	uxtb	r3, r3
   1a860:	001a      	movs	r2, r3
   1a862:	0021      	movs	r1, r4
   1a864:	0028      	movs	r0, r5
   1a866:	4bae      	ldr	r3, [pc, #696]	; (1ab20 <xQueueSemaphoreTake+0x380>)
   1a868:	4798      	blx	r3
   1a86a:	69fb      	ldr	r3, [r7, #28]
   1a86c:	0018      	movs	r0, r3
   1a86e:	4ba9      	ldr	r3, [pc, #676]	; (1ab14 <xQueueSemaphoreTake+0x374>)
   1a870:	4798      	blx	r3
   1a872:	0003      	movs	r3, r0
   1a874:	001a      	movs	r2, r3
   1a876:	4ba8      	ldr	r3, [pc, #672]	; (1ab18 <xQueueSemaphoreTake+0x378>)
   1a878:	5c9c      	ldrb	r4, [r3, r2]
   1a87a:	69fb      	ldr	r3, [r7, #28]
   1a87c:	0018      	movs	r0, r3
   1a87e:	4ba7      	ldr	r3, [pc, #668]	; (1ab1c <xQueueSemaphoreTake+0x37c>)
   1a880:	4798      	blx	r3
   1a882:	0003      	movs	r3, r0
   1a884:	b2dd      	uxtb	r5, r3
   1a886:	69fb      	ldr	r3, [r7, #28]
   1a888:	0018      	movs	r0, r3
   1a88a:	4ba2      	ldr	r3, [pc, #648]	; (1ab14 <xQueueSemaphoreTake+0x374>)
   1a88c:	4798      	blx	r3
   1a88e:	0003      	movs	r3, r0
   1a890:	001a      	movs	r2, r3
   1a892:	4ba1      	ldr	r3, [pc, #644]	; (1ab18 <xQueueSemaphoreTake+0x378>)
   1a894:	5c9b      	ldrb	r3, [r3, r2]
   1a896:	2b02      	cmp	r3, #2
   1a898:	d108      	bne.n	1a8ac <xQueueSemaphoreTake+0x10c>
   1a89a:	4b9a      	ldr	r3, [pc, #616]	; (1ab04 <xQueueSemaphoreTake+0x364>)
   1a89c:	4798      	blx	r3
   1a89e:	0003      	movs	r3, r0
   1a8a0:	0018      	movs	r0, r3
   1a8a2:	4ba0      	ldr	r3, [pc, #640]	; (1ab24 <xQueueSemaphoreTake+0x384>)
   1a8a4:	4798      	blx	r3
   1a8a6:	0003      	movs	r3, r0
   1a8a8:	b2db      	uxtb	r3, r3
   1a8aa:	e004      	b.n	1a8b6 <xQueueSemaphoreTake+0x116>
   1a8ac:	69fb      	ldr	r3, [r7, #28]
   1a8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a8b0:	b2db      	uxtb	r3, r3
   1a8b2:	3b01      	subs	r3, #1
   1a8b4:	b2db      	uxtb	r3, r3
   1a8b6:	001a      	movs	r2, r3
   1a8b8:	0029      	movs	r1, r5
   1a8ba:	0020      	movs	r0, r4
   1a8bc:	4b9a      	ldr	r3, [pc, #616]	; (1ab28 <xQueueSemaphoreTake+0x388>)
   1a8be:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1a8c0:	69bb      	ldr	r3, [r7, #24]
   1a8c2:	1e5a      	subs	r2, r3, #1
   1a8c4:	69fb      	ldr	r3, [r7, #28]
   1a8c6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1a8c8:	69fb      	ldr	r3, [r7, #28]
   1a8ca:	681b      	ldr	r3, [r3, #0]
   1a8cc:	2b00      	cmp	r3, #0
   1a8ce:	d104      	bne.n	1a8da <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1a8d0:	4b96      	ldr	r3, [pc, #600]	; (1ab2c <xQueueSemaphoreTake+0x38c>)
   1a8d2:	4798      	blx	r3
   1a8d4:	0002      	movs	r2, r0
   1a8d6:	69fb      	ldr	r3, [r7, #28]
   1a8d8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a8da:	69fb      	ldr	r3, [r7, #28]
   1a8dc:	691b      	ldr	r3, [r3, #16]
   1a8de:	2b00      	cmp	r3, #0
   1a8e0:	d008      	beq.n	1a8f4 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a8e2:	69fb      	ldr	r3, [r7, #28]
   1a8e4:	3310      	adds	r3, #16
   1a8e6:	0018      	movs	r0, r3
   1a8e8:	4b91      	ldr	r3, [pc, #580]	; (1ab30 <xQueueSemaphoreTake+0x390>)
   1a8ea:	4798      	blx	r3
   1a8ec:	1e03      	subs	r3, r0, #0
   1a8ee:	d001      	beq.n	1a8f4 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1a8f0:	4b90      	ldr	r3, [pc, #576]	; (1ab34 <xQueueSemaphoreTake+0x394>)
   1a8f2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1a8f4:	4b90      	ldr	r3, [pc, #576]	; (1ab38 <xQueueSemaphoreTake+0x398>)
   1a8f6:	4798      	blx	r3
				return pdPASS;
   1a8f8:	2301      	movs	r3, #1
   1a8fa:	e18b      	b.n	1ac14 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a8fc:	683b      	ldr	r3, [r7, #0]
   1a8fe:	2b00      	cmp	r3, #0
   1a900:	d140      	bne.n	1a984 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1a902:	6a3b      	ldr	r3, [r7, #32]
   1a904:	2b00      	cmp	r3, #0
   1a906:	d001      	beq.n	1a90c <xQueueSemaphoreTake+0x16c>
   1a908:	b672      	cpsid	i
   1a90a:	e7fe      	b.n	1a90a <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1a90c:	4b8a      	ldr	r3, [pc, #552]	; (1ab38 <xQueueSemaphoreTake+0x398>)
   1a90e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a910:	4b7c      	ldr	r3, [pc, #496]	; (1ab04 <xQueueSemaphoreTake+0x364>)
   1a912:	4798      	blx	r3
   1a914:	0003      	movs	r3, r0
   1a916:	0018      	movs	r0, r3
   1a918:	4b7b      	ldr	r3, [pc, #492]	; (1ab08 <xQueueSemaphoreTake+0x368>)
   1a91a:	4798      	blx	r3
   1a91c:	0003      	movs	r3, r0
   1a91e:	001a      	movs	r2, r3
   1a920:	4b7a      	ldr	r3, [pc, #488]	; (1ab0c <xQueueSemaphoreTake+0x36c>)
   1a922:	881b      	ldrh	r3, [r3, #0]
   1a924:	4013      	ands	r3, r2
   1a926:	b29b      	uxth	r3, r3
   1a928:	2b00      	cmp	r3, #0
   1a92a:	d029      	beq.n	1a980 <xQueueSemaphoreTake+0x1e0>
   1a92c:	69fb      	ldr	r3, [r7, #28]
   1a92e:	0018      	movs	r0, r3
   1a930:	4b77      	ldr	r3, [pc, #476]	; (1ab10 <xQueueSemaphoreTake+0x370>)
   1a932:	4798      	blx	r3
   1a934:	0003      	movs	r3, r0
   1a936:	001a      	movs	r2, r3
   1a938:	4b74      	ldr	r3, [pc, #464]	; (1ab0c <xQueueSemaphoreTake+0x36c>)
   1a93a:	881b      	ldrh	r3, [r3, #0]
   1a93c:	4013      	ands	r3, r2
   1a93e:	b29b      	uxth	r3, r3
   1a940:	2b00      	cmp	r3, #0
   1a942:	d01d      	beq.n	1a980 <xQueueSemaphoreTake+0x1e0>
   1a944:	69fb      	ldr	r3, [r7, #28]
   1a946:	0018      	movs	r0, r3
   1a948:	4b72      	ldr	r3, [pc, #456]	; (1ab14 <xQueueSemaphoreTake+0x374>)
   1a94a:	4798      	blx	r3
   1a94c:	0003      	movs	r3, r0
   1a94e:	001a      	movs	r2, r3
   1a950:	4b71      	ldr	r3, [pc, #452]	; (1ab18 <xQueueSemaphoreTake+0x378>)
   1a952:	5c9b      	ldrb	r3, [r3, r2]
   1a954:	3350      	adds	r3, #80	; 0x50
   1a956:	b2db      	uxtb	r3, r3
   1a958:	001d      	movs	r5, r3
   1a95a:	69fb      	ldr	r3, [r7, #28]
   1a95c:	0018      	movs	r0, r3
   1a95e:	4b6d      	ldr	r3, [pc, #436]	; (1ab14 <xQueueSemaphoreTake+0x374>)
   1a960:	4798      	blx	r3
   1a962:	0003      	movs	r3, r0
   1a964:	001a      	movs	r2, r3
   1a966:	4b6c      	ldr	r3, [pc, #432]	; (1ab18 <xQueueSemaphoreTake+0x378>)
   1a968:	5c9c      	ldrb	r4, [r3, r2]
   1a96a:	69fb      	ldr	r3, [r7, #28]
   1a96c:	0018      	movs	r0, r3
   1a96e:	4b6b      	ldr	r3, [pc, #428]	; (1ab1c <xQueueSemaphoreTake+0x37c>)
   1a970:	4798      	blx	r3
   1a972:	0003      	movs	r3, r0
   1a974:	b2db      	uxtb	r3, r3
   1a976:	001a      	movs	r2, r3
   1a978:	0021      	movs	r1, r4
   1a97a:	0028      	movs	r0, r5
   1a97c:	4b68      	ldr	r3, [pc, #416]	; (1ab20 <xQueueSemaphoreTake+0x380>)
   1a97e:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1a980:	2300      	movs	r3, #0
   1a982:	e147      	b.n	1ac14 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a986:	2b00      	cmp	r3, #0
   1a988:	d106      	bne.n	1a998 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a98a:	230c      	movs	r3, #12
   1a98c:	18fb      	adds	r3, r7, r3
   1a98e:	0018      	movs	r0, r3
   1a990:	4b6a      	ldr	r3, [pc, #424]	; (1ab3c <xQueueSemaphoreTake+0x39c>)
   1a992:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a994:	2301      	movs	r3, #1
   1a996:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a998:	4b67      	ldr	r3, [pc, #412]	; (1ab38 <xQueueSemaphoreTake+0x398>)
   1a99a:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a99c:	4b68      	ldr	r3, [pc, #416]	; (1ab40 <xQueueSemaphoreTake+0x3a0>)
   1a99e:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a9a0:	4b57      	ldr	r3, [pc, #348]	; (1ab00 <xQueueSemaphoreTake+0x360>)
   1a9a2:	4798      	blx	r3
   1a9a4:	69fb      	ldr	r3, [r7, #28]
   1a9a6:	2244      	movs	r2, #68	; 0x44
   1a9a8:	5c9b      	ldrb	r3, [r3, r2]
   1a9aa:	b25b      	sxtb	r3, r3
   1a9ac:	3301      	adds	r3, #1
   1a9ae:	d103      	bne.n	1a9b8 <xQueueSemaphoreTake+0x218>
   1a9b0:	69fb      	ldr	r3, [r7, #28]
   1a9b2:	2244      	movs	r2, #68	; 0x44
   1a9b4:	2100      	movs	r1, #0
   1a9b6:	5499      	strb	r1, [r3, r2]
   1a9b8:	69fb      	ldr	r3, [r7, #28]
   1a9ba:	2245      	movs	r2, #69	; 0x45
   1a9bc:	5c9b      	ldrb	r3, [r3, r2]
   1a9be:	b25b      	sxtb	r3, r3
   1a9c0:	3301      	adds	r3, #1
   1a9c2:	d103      	bne.n	1a9cc <xQueueSemaphoreTake+0x22c>
   1a9c4:	69fb      	ldr	r3, [r7, #28]
   1a9c6:	2245      	movs	r2, #69	; 0x45
   1a9c8:	2100      	movs	r1, #0
   1a9ca:	5499      	strb	r1, [r3, r2]
   1a9cc:	4b5a      	ldr	r3, [pc, #360]	; (1ab38 <xQueueSemaphoreTake+0x398>)
   1a9ce:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a9d0:	003a      	movs	r2, r7
   1a9d2:	230c      	movs	r3, #12
   1a9d4:	18fb      	adds	r3, r7, r3
   1a9d6:	0011      	movs	r1, r2
   1a9d8:	0018      	movs	r0, r3
   1a9da:	4b5a      	ldr	r3, [pc, #360]	; (1ab44 <xQueueSemaphoreTake+0x3a4>)
   1a9dc:	4798      	blx	r3
   1a9de:	1e03      	subs	r3, r0, #0
   1a9e0:	d000      	beq.n	1a9e4 <xQueueSemaphoreTake+0x244>
   1a9e2:	e0bd      	b.n	1ab60 <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a9e4:	69fb      	ldr	r3, [r7, #28]
   1a9e6:	0018      	movs	r0, r3
   1a9e8:	4b57      	ldr	r3, [pc, #348]	; (1ab48 <xQueueSemaphoreTake+0x3a8>)
   1a9ea:	4798      	blx	r3
   1a9ec:	1e03      	subs	r3, r0, #0
   1a9ee:	d100      	bne.n	1a9f2 <xQueueSemaphoreTake+0x252>
   1a9f0:	e07c      	b.n	1aaec <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1a9f2:	4b44      	ldr	r3, [pc, #272]	; (1ab04 <xQueueSemaphoreTake+0x364>)
   1a9f4:	4798      	blx	r3
   1a9f6:	0003      	movs	r3, r0
   1a9f8:	0018      	movs	r0, r3
   1a9fa:	4b43      	ldr	r3, [pc, #268]	; (1ab08 <xQueueSemaphoreTake+0x368>)
   1a9fc:	4798      	blx	r3
   1a9fe:	0003      	movs	r3, r0
   1aa00:	001a      	movs	r2, r3
   1aa02:	4b42      	ldr	r3, [pc, #264]	; (1ab0c <xQueueSemaphoreTake+0x36c>)
   1aa04:	881b      	ldrh	r3, [r3, #0]
   1aa06:	4013      	ands	r3, r2
   1aa08:	b29b      	uxth	r3, r3
   1aa0a:	2b00      	cmp	r3, #0
   1aa0c:	d029      	beq.n	1aa62 <xQueueSemaphoreTake+0x2c2>
   1aa0e:	69fb      	ldr	r3, [r7, #28]
   1aa10:	0018      	movs	r0, r3
   1aa12:	4b3f      	ldr	r3, [pc, #252]	; (1ab10 <xQueueSemaphoreTake+0x370>)
   1aa14:	4798      	blx	r3
   1aa16:	0003      	movs	r3, r0
   1aa18:	001a      	movs	r2, r3
   1aa1a:	4b3c      	ldr	r3, [pc, #240]	; (1ab0c <xQueueSemaphoreTake+0x36c>)
   1aa1c:	881b      	ldrh	r3, [r3, #0]
   1aa1e:	4013      	ands	r3, r2
   1aa20:	b29b      	uxth	r3, r3
   1aa22:	2b00      	cmp	r3, #0
   1aa24:	d01d      	beq.n	1aa62 <xQueueSemaphoreTake+0x2c2>
   1aa26:	69fb      	ldr	r3, [r7, #28]
   1aa28:	0018      	movs	r0, r3
   1aa2a:	4b3a      	ldr	r3, [pc, #232]	; (1ab14 <xQueueSemaphoreTake+0x374>)
   1aa2c:	4798      	blx	r3
   1aa2e:	0003      	movs	r3, r0
   1aa30:	001a      	movs	r2, r3
   1aa32:	4b39      	ldr	r3, [pc, #228]	; (1ab18 <xQueueSemaphoreTake+0x378>)
   1aa34:	5c9b      	ldrb	r3, [r3, r2]
   1aa36:	3368      	adds	r3, #104	; 0x68
   1aa38:	b2db      	uxtb	r3, r3
   1aa3a:	001d      	movs	r5, r3
   1aa3c:	69fb      	ldr	r3, [r7, #28]
   1aa3e:	0018      	movs	r0, r3
   1aa40:	4b34      	ldr	r3, [pc, #208]	; (1ab14 <xQueueSemaphoreTake+0x374>)
   1aa42:	4798      	blx	r3
   1aa44:	0003      	movs	r3, r0
   1aa46:	001a      	movs	r2, r3
   1aa48:	4b33      	ldr	r3, [pc, #204]	; (1ab18 <xQueueSemaphoreTake+0x378>)
   1aa4a:	5c9c      	ldrb	r4, [r3, r2]
   1aa4c:	69fb      	ldr	r3, [r7, #28]
   1aa4e:	0018      	movs	r0, r3
   1aa50:	4b32      	ldr	r3, [pc, #200]	; (1ab1c <xQueueSemaphoreTake+0x37c>)
   1aa52:	4798      	blx	r3
   1aa54:	0003      	movs	r3, r0
   1aa56:	b2db      	uxtb	r3, r3
   1aa58:	001a      	movs	r2, r3
   1aa5a:	0021      	movs	r1, r4
   1aa5c:	0028      	movs	r0, r5
   1aa5e:	4b30      	ldr	r3, [pc, #192]	; (1ab20 <xQueueSemaphoreTake+0x380>)
   1aa60:	4798      	blx	r3
   1aa62:	69fb      	ldr	r3, [r7, #28]
   1aa64:	0018      	movs	r0, r3
   1aa66:	4b2b      	ldr	r3, [pc, #172]	; (1ab14 <xQueueSemaphoreTake+0x374>)
   1aa68:	4798      	blx	r3
   1aa6a:	0003      	movs	r3, r0
   1aa6c:	001a      	movs	r2, r3
   1aa6e:	4b2a      	ldr	r3, [pc, #168]	; (1ab18 <xQueueSemaphoreTake+0x378>)
   1aa70:	5c9b      	ldrb	r3, [r3, r2]
   1aa72:	2b02      	cmp	r3, #2
   1aa74:	d018      	beq.n	1aaa8 <xQueueSemaphoreTake+0x308>
   1aa76:	4b23      	ldr	r3, [pc, #140]	; (1ab04 <xQueueSemaphoreTake+0x364>)
   1aa78:	4798      	blx	r3
   1aa7a:	0003      	movs	r3, r0
   1aa7c:	0018      	movs	r0, r3
   1aa7e:	4b22      	ldr	r3, [pc, #136]	; (1ab08 <xQueueSemaphoreTake+0x368>)
   1aa80:	4798      	blx	r3
   1aa82:	0003      	movs	r3, r0
   1aa84:	001a      	movs	r2, r3
   1aa86:	4b21      	ldr	r3, [pc, #132]	; (1ab0c <xQueueSemaphoreTake+0x36c>)
   1aa88:	881b      	ldrh	r3, [r3, #0]
   1aa8a:	4013      	ands	r3, r2
   1aa8c:	b29b      	uxth	r3, r3
   1aa8e:	2b00      	cmp	r3, #0
   1aa90:	d00a      	beq.n	1aaa8 <xQueueSemaphoreTake+0x308>
   1aa92:	4b1c      	ldr	r3, [pc, #112]	; (1ab04 <xQueueSemaphoreTake+0x364>)
   1aa94:	4798      	blx	r3
   1aa96:	0003      	movs	r3, r0
   1aa98:	0018      	movs	r0, r3
   1aa9a:	4b22      	ldr	r3, [pc, #136]	; (1ab24 <xQueueSemaphoreTake+0x384>)
   1aa9c:	4798      	blx	r3
   1aa9e:	0003      	movs	r3, r0
   1aaa0:	b2db      	uxtb	r3, r3
   1aaa2:	0018      	movs	r0, r3
   1aaa4:	4b29      	ldr	r3, [pc, #164]	; (1ab4c <xQueueSemaphoreTake+0x3ac>)
   1aaa6:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1aaa8:	69fb      	ldr	r3, [r7, #28]
   1aaaa:	681b      	ldr	r3, [r3, #0]
   1aaac:	2b00      	cmp	r3, #0
   1aaae:	d10a      	bne.n	1aac6 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1aab0:	4b13      	ldr	r3, [pc, #76]	; (1ab00 <xQueueSemaphoreTake+0x360>)
   1aab2:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1aab4:	69fb      	ldr	r3, [r7, #28]
   1aab6:	685b      	ldr	r3, [r3, #4]
   1aab8:	0018      	movs	r0, r3
   1aaba:	4b25      	ldr	r3, [pc, #148]	; (1ab50 <xQueueSemaphoreTake+0x3b0>)
   1aabc:	4798      	blx	r3
   1aabe:	0003      	movs	r3, r0
   1aac0:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1aac2:	4b1d      	ldr	r3, [pc, #116]	; (1ab38 <xQueueSemaphoreTake+0x398>)
   1aac4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1aac6:	69fb      	ldr	r3, [r7, #28]
   1aac8:	3324      	adds	r3, #36	; 0x24
   1aaca:	683a      	ldr	r2, [r7, #0]
   1aacc:	0011      	movs	r1, r2
   1aace:	0018      	movs	r0, r3
   1aad0:	4b20      	ldr	r3, [pc, #128]	; (1ab54 <xQueueSemaphoreTake+0x3b4>)
   1aad2:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1aad4:	69fb      	ldr	r3, [r7, #28]
   1aad6:	0018      	movs	r0, r3
   1aad8:	4b1f      	ldr	r3, [pc, #124]	; (1ab58 <xQueueSemaphoreTake+0x3b8>)
   1aada:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1aadc:	4b1f      	ldr	r3, [pc, #124]	; (1ab5c <xQueueSemaphoreTake+0x3bc>)
   1aade:	4798      	blx	r3
   1aae0:	1e03      	subs	r3, r0, #0
   1aae2:	d000      	beq.n	1aae6 <xQueueSemaphoreTake+0x346>
   1aae4:	e680      	b.n	1a7e8 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1aae6:	4b13      	ldr	r3, [pc, #76]	; (1ab34 <xQueueSemaphoreTake+0x394>)
   1aae8:	4798      	blx	r3
   1aaea:	e67d      	b.n	1a7e8 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1aaec:	69fb      	ldr	r3, [r7, #28]
   1aaee:	0018      	movs	r0, r3
   1aaf0:	4b19      	ldr	r3, [pc, #100]	; (1ab58 <xQueueSemaphoreTake+0x3b8>)
   1aaf2:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1aaf4:	4b19      	ldr	r3, [pc, #100]	; (1ab5c <xQueueSemaphoreTake+0x3bc>)
   1aaf6:	4798      	blx	r3
   1aaf8:	e676      	b.n	1a7e8 <xQueueSemaphoreTake+0x48>
   1aafa:	46c0      	nop			; (mov r8, r8)
   1aafc:	0001c21d 	.word	0x0001c21d
   1ab00:	000194f9 	.word	0x000194f9
   1ab04:	0001778d 	.word	0x0001778d
   1ab08:	000174f1 	.word	0x000174f1
   1ab0c:	200000b8 	.word	0x200000b8
   1ab10:	000175b1 	.word	0x000175b1
   1ab14:	000174b1 	.word	0x000174b1
   1ab18:	200000ac 	.word	0x200000ac
   1ab1c:	00017591 	.word	0x00017591
   1ab20:	00017ee9 	.word	0x00017ee9
   1ab24:	000174d1 	.word	0x000174d1
   1ab28:	00018545 	.word	0x00018545
   1ab2c:	0001c6e9 	.word	0x0001c6e9
   1ab30:	0001bd8d 	.word	0x0001bd8d
   1ab34:	000194e1 	.word	0x000194e1
   1ab38:	0001951d 	.word	0x0001951d
   1ab3c:	0001becd 	.word	0x0001becd
   1ab40:	0001b7b5 	.word	0x0001b7b5
   1ab44:	0001bef5 	.word	0x0001bef5
   1ab48:	0001aee9 	.word	0x0001aee9
   1ab4c:	00018681 	.word	0x00018681
   1ab50:	0001c255 	.word	0x0001c255
   1ab54:	0001bc69 	.word	0x0001bc69
   1ab58:	0001adf9 	.word	0x0001adf9
   1ab5c:	0001b7cd 	.word	0x0001b7cd
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1ab60:	69fb      	ldr	r3, [r7, #28]
   1ab62:	0018      	movs	r0, r3
   1ab64:	4b2d      	ldr	r3, [pc, #180]	; (1ac1c <xQueueSemaphoreTake+0x47c>)
   1ab66:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1ab68:	4b2d      	ldr	r3, [pc, #180]	; (1ac20 <xQueueSemaphoreTake+0x480>)
   1ab6a:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1ab6c:	69fb      	ldr	r3, [r7, #28]
   1ab6e:	0018      	movs	r0, r3
   1ab70:	4b2c      	ldr	r3, [pc, #176]	; (1ac24 <xQueueSemaphoreTake+0x484>)
   1ab72:	4798      	blx	r3
   1ab74:	1e03      	subs	r3, r0, #0
   1ab76:	d100      	bne.n	1ab7a <xQueueSemaphoreTake+0x3da>
   1ab78:	e636      	b.n	1a7e8 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1ab7a:	6a3b      	ldr	r3, [r7, #32]
   1ab7c:	2b00      	cmp	r3, #0
   1ab7e:	d010      	beq.n	1aba2 <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1ab80:	4b29      	ldr	r3, [pc, #164]	; (1ac28 <xQueueSemaphoreTake+0x488>)
   1ab82:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1ab84:	69fb      	ldr	r3, [r7, #28]
   1ab86:	0018      	movs	r0, r3
   1ab88:	4b28      	ldr	r3, [pc, #160]	; (1ac2c <xQueueSemaphoreTake+0x48c>)
   1ab8a:	4798      	blx	r3
   1ab8c:	0003      	movs	r3, r0
   1ab8e:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1ab90:	69fb      	ldr	r3, [r7, #28]
   1ab92:	685b      	ldr	r3, [r3, #4]
   1ab94:	697a      	ldr	r2, [r7, #20]
   1ab96:	0011      	movs	r1, r2
   1ab98:	0018      	movs	r0, r3
   1ab9a:	4b25      	ldr	r3, [pc, #148]	; (1ac30 <xQueueSemaphoreTake+0x490>)
   1ab9c:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1ab9e:	4b25      	ldr	r3, [pc, #148]	; (1ac34 <xQueueSemaphoreTake+0x494>)
   1aba0:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1aba2:	4b25      	ldr	r3, [pc, #148]	; (1ac38 <xQueueSemaphoreTake+0x498>)
   1aba4:	4798      	blx	r3
   1aba6:	0003      	movs	r3, r0
   1aba8:	0018      	movs	r0, r3
   1abaa:	4b24      	ldr	r3, [pc, #144]	; (1ac3c <xQueueSemaphoreTake+0x49c>)
   1abac:	4798      	blx	r3
   1abae:	0003      	movs	r3, r0
   1abb0:	001a      	movs	r2, r3
   1abb2:	4b23      	ldr	r3, [pc, #140]	; (1ac40 <xQueueSemaphoreTake+0x4a0>)
   1abb4:	881b      	ldrh	r3, [r3, #0]
   1abb6:	4013      	ands	r3, r2
   1abb8:	b29b      	uxth	r3, r3
   1abba:	2b00      	cmp	r3, #0
   1abbc:	d029      	beq.n	1ac12 <xQueueSemaphoreTake+0x472>
   1abbe:	69fb      	ldr	r3, [r7, #28]
   1abc0:	0018      	movs	r0, r3
   1abc2:	4b20      	ldr	r3, [pc, #128]	; (1ac44 <xQueueSemaphoreTake+0x4a4>)
   1abc4:	4798      	blx	r3
   1abc6:	0003      	movs	r3, r0
   1abc8:	001a      	movs	r2, r3
   1abca:	4b1d      	ldr	r3, [pc, #116]	; (1ac40 <xQueueSemaphoreTake+0x4a0>)
   1abcc:	881b      	ldrh	r3, [r3, #0]
   1abce:	4013      	ands	r3, r2
   1abd0:	b29b      	uxth	r3, r3
   1abd2:	2b00      	cmp	r3, #0
   1abd4:	d01d      	beq.n	1ac12 <xQueueSemaphoreTake+0x472>
   1abd6:	69fb      	ldr	r3, [r7, #28]
   1abd8:	0018      	movs	r0, r3
   1abda:	4b1b      	ldr	r3, [pc, #108]	; (1ac48 <xQueueSemaphoreTake+0x4a8>)
   1abdc:	4798      	blx	r3
   1abde:	0003      	movs	r3, r0
   1abe0:	001a      	movs	r2, r3
   1abe2:	4b1a      	ldr	r3, [pc, #104]	; (1ac4c <xQueueSemaphoreTake+0x4ac>)
   1abe4:	5c9b      	ldrb	r3, [r3, r2]
   1abe6:	3350      	adds	r3, #80	; 0x50
   1abe8:	b2db      	uxtb	r3, r3
   1abea:	001d      	movs	r5, r3
   1abec:	69fb      	ldr	r3, [r7, #28]
   1abee:	0018      	movs	r0, r3
   1abf0:	4b15      	ldr	r3, [pc, #84]	; (1ac48 <xQueueSemaphoreTake+0x4a8>)
   1abf2:	4798      	blx	r3
   1abf4:	0003      	movs	r3, r0
   1abf6:	001a      	movs	r2, r3
   1abf8:	4b14      	ldr	r3, [pc, #80]	; (1ac4c <xQueueSemaphoreTake+0x4ac>)
   1abfa:	5c9c      	ldrb	r4, [r3, r2]
   1abfc:	69fb      	ldr	r3, [r7, #28]
   1abfe:	0018      	movs	r0, r3
   1ac00:	4b13      	ldr	r3, [pc, #76]	; (1ac50 <xQueueSemaphoreTake+0x4b0>)
   1ac02:	4798      	blx	r3
   1ac04:	0003      	movs	r3, r0
   1ac06:	b2db      	uxtb	r3, r3
   1ac08:	001a      	movs	r2, r3
   1ac0a:	0021      	movs	r1, r4
   1ac0c:	0028      	movs	r0, r5
   1ac0e:	4b11      	ldr	r3, [pc, #68]	; (1ac54 <xQueueSemaphoreTake+0x4b4>)
   1ac10:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1ac12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1ac14:	0018      	movs	r0, r3
   1ac16:	46bd      	mov	sp, r7
   1ac18:	b00a      	add	sp, #40	; 0x28
   1ac1a:	bdb0      	pop	{r4, r5, r7, pc}
   1ac1c:	0001adf9 	.word	0x0001adf9
   1ac20:	0001b7cd 	.word	0x0001b7cd
   1ac24:	0001aee9 	.word	0x0001aee9
   1ac28:	000194f9 	.word	0x000194f9
   1ac2c:	0001ac9b 	.word	0x0001ac9b
   1ac30:	0001c54d 	.word	0x0001c54d
   1ac34:	0001951d 	.word	0x0001951d
   1ac38:	0001778d 	.word	0x0001778d
   1ac3c:	000174f1 	.word	0x000174f1
   1ac40:	200000b8 	.word	0x200000b8
   1ac44:	000175b1 	.word	0x000175b1
   1ac48:	000174b1 	.word	0x000174b1
   1ac4c:	200000ac 	.word	0x200000ac
   1ac50:	00017591 	.word	0x00017591
   1ac54:	00017ee9 	.word	0x00017ee9

0001ac58 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1ac58:	b580      	push	{r7, lr}
   1ac5a:	b082      	sub	sp, #8
   1ac5c:	af00      	add	r7, sp, #0
   1ac5e:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1ac60:	687b      	ldr	r3, [r7, #4]
   1ac62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1ac64:	0018      	movs	r0, r3
   1ac66:	46bd      	mov	sp, r7
   1ac68:	b002      	add	sp, #8
   1ac6a:	bd80      	pop	{r7, pc}

0001ac6c <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1ac6c:	b580      	push	{r7, lr}
   1ac6e:	b082      	sub	sp, #8
   1ac70:	af00      	add	r7, sp, #0
   1ac72:	6078      	str	r0, [r7, #4]
   1ac74:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1ac76:	687b      	ldr	r3, [r7, #4]
   1ac78:	683a      	ldr	r2, [r7, #0]
   1ac7a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1ac7c:	46c0      	nop			; (mov r8, r8)
   1ac7e:	46bd      	mov	sp, r7
   1ac80:	b002      	add	sp, #8
   1ac82:	bd80      	pop	{r7, pc}

0001ac84 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1ac84:	b580      	push	{r7, lr}
   1ac86:	b082      	sub	sp, #8
   1ac88:	af00      	add	r7, sp, #0
   1ac8a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1ac8c:	687b      	ldr	r3, [r7, #4]
   1ac8e:	2250      	movs	r2, #80	; 0x50
   1ac90:	5c9b      	ldrb	r3, [r3, r2]
	}
   1ac92:	0018      	movs	r0, r3
   1ac94:	46bd      	mov	sp, r7
   1ac96:	b002      	add	sp, #8
   1ac98:	bd80      	pop	{r7, pc}

0001ac9a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1ac9a:	b580      	push	{r7, lr}
   1ac9c:	b084      	sub	sp, #16
   1ac9e:	af00      	add	r7, sp, #0
   1aca0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1aca2:	687b      	ldr	r3, [r7, #4]
   1aca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1aca6:	2b00      	cmp	r3, #0
   1aca8:	d006      	beq.n	1acb8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1acaa:	687b      	ldr	r3, [r7, #4]
   1acac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1acae:	681b      	ldr	r3, [r3, #0]
   1acb0:	2205      	movs	r2, #5
   1acb2:	1ad3      	subs	r3, r2, r3
   1acb4:	60fb      	str	r3, [r7, #12]
   1acb6:	e001      	b.n	1acbc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1acb8:	2300      	movs	r3, #0
   1acba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1acbc:	68fb      	ldr	r3, [r7, #12]
	}
   1acbe:	0018      	movs	r0, r3
   1acc0:	46bd      	mov	sp, r7
   1acc2:	b004      	add	sp, #16
   1acc4:	bd80      	pop	{r7, pc}
	...

0001acc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1acc8:	b580      	push	{r7, lr}
   1acca:	b086      	sub	sp, #24
   1accc:	af00      	add	r7, sp, #0
   1acce:	60f8      	str	r0, [r7, #12]
   1acd0:	60b9      	str	r1, [r7, #8]
   1acd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1acd4:	2300      	movs	r3, #0
   1acd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1acd8:	68fb      	ldr	r3, [r7, #12]
   1acda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1acdc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1acde:	68fb      	ldr	r3, [r7, #12]
   1ace0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ace2:	2b00      	cmp	r3, #0
   1ace4:	d10e      	bne.n	1ad04 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1ace6:	68fb      	ldr	r3, [r7, #12]
   1ace8:	681b      	ldr	r3, [r3, #0]
   1acea:	2b00      	cmp	r3, #0
   1acec:	d14e      	bne.n	1ad8c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1acee:	68fb      	ldr	r3, [r7, #12]
   1acf0:	685b      	ldr	r3, [r3, #4]
   1acf2:	0018      	movs	r0, r3
   1acf4:	4b2a      	ldr	r3, [pc, #168]	; (1ada0 <prvCopyDataToQueue+0xd8>)
   1acf6:	4798      	blx	r3
   1acf8:	0003      	movs	r3, r0
   1acfa:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1acfc:	68fb      	ldr	r3, [r7, #12]
   1acfe:	2200      	movs	r2, #0
   1ad00:	605a      	str	r2, [r3, #4]
   1ad02:	e043      	b.n	1ad8c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1ad04:	687b      	ldr	r3, [r7, #4]
   1ad06:	2b00      	cmp	r3, #0
   1ad08:	d119      	bne.n	1ad3e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1ad0a:	68fb      	ldr	r3, [r7, #12]
   1ad0c:	6898      	ldr	r0, [r3, #8]
   1ad0e:	68fb      	ldr	r3, [r7, #12]
   1ad10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1ad12:	68bb      	ldr	r3, [r7, #8]
   1ad14:	0019      	movs	r1, r3
   1ad16:	4b23      	ldr	r3, [pc, #140]	; (1ada4 <prvCopyDataToQueue+0xdc>)
   1ad18:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1ad1a:	68fb      	ldr	r3, [r7, #12]
   1ad1c:	689a      	ldr	r2, [r3, #8]
   1ad1e:	68fb      	ldr	r3, [r7, #12]
   1ad20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ad22:	18d2      	adds	r2, r2, r3
   1ad24:	68fb      	ldr	r3, [r7, #12]
   1ad26:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1ad28:	68fb      	ldr	r3, [r7, #12]
   1ad2a:	689a      	ldr	r2, [r3, #8]
   1ad2c:	68fb      	ldr	r3, [r7, #12]
   1ad2e:	685b      	ldr	r3, [r3, #4]
   1ad30:	429a      	cmp	r2, r3
   1ad32:	d32b      	bcc.n	1ad8c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1ad34:	68fb      	ldr	r3, [r7, #12]
   1ad36:	681a      	ldr	r2, [r3, #0]
   1ad38:	68fb      	ldr	r3, [r7, #12]
   1ad3a:	609a      	str	r2, [r3, #8]
   1ad3c:	e026      	b.n	1ad8c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ad3e:	68fb      	ldr	r3, [r7, #12]
   1ad40:	68d8      	ldr	r0, [r3, #12]
   1ad42:	68fb      	ldr	r3, [r7, #12]
   1ad44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1ad46:	68bb      	ldr	r3, [r7, #8]
   1ad48:	0019      	movs	r1, r3
   1ad4a:	4b16      	ldr	r3, [pc, #88]	; (1ada4 <prvCopyDataToQueue+0xdc>)
   1ad4c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1ad4e:	68fb      	ldr	r3, [r7, #12]
   1ad50:	68da      	ldr	r2, [r3, #12]
   1ad52:	68fb      	ldr	r3, [r7, #12]
   1ad54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ad56:	425b      	negs	r3, r3
   1ad58:	18d2      	adds	r2, r2, r3
   1ad5a:	68fb      	ldr	r3, [r7, #12]
   1ad5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1ad5e:	68fb      	ldr	r3, [r7, #12]
   1ad60:	68da      	ldr	r2, [r3, #12]
   1ad62:	68fb      	ldr	r3, [r7, #12]
   1ad64:	681b      	ldr	r3, [r3, #0]
   1ad66:	429a      	cmp	r2, r3
   1ad68:	d207      	bcs.n	1ad7a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1ad6a:	68fb      	ldr	r3, [r7, #12]
   1ad6c:	685a      	ldr	r2, [r3, #4]
   1ad6e:	68fb      	ldr	r3, [r7, #12]
   1ad70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ad72:	425b      	negs	r3, r3
   1ad74:	18d2      	adds	r2, r2, r3
   1ad76:	68fb      	ldr	r3, [r7, #12]
   1ad78:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1ad7a:	687b      	ldr	r3, [r7, #4]
   1ad7c:	2b02      	cmp	r3, #2
   1ad7e:	d105      	bne.n	1ad8c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1ad80:	693b      	ldr	r3, [r7, #16]
   1ad82:	2b00      	cmp	r3, #0
   1ad84:	d002      	beq.n	1ad8c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1ad86:	693b      	ldr	r3, [r7, #16]
   1ad88:	3b01      	subs	r3, #1
   1ad8a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1ad8c:	693b      	ldr	r3, [r7, #16]
   1ad8e:	1c5a      	adds	r2, r3, #1
   1ad90:	68fb      	ldr	r3, [r7, #12]
   1ad92:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1ad94:	697b      	ldr	r3, [r7, #20]
}
   1ad96:	0018      	movs	r0, r3
   1ad98:	46bd      	mov	sp, r7
   1ad9a:	b006      	add	sp, #24
   1ad9c:	bd80      	pop	{r7, pc}
   1ad9e:	46c0      	nop			; (mov r8, r8)
   1ada0:	0001c3e5 	.word	0x0001c3e5
   1ada4:	000339c9 	.word	0x000339c9

0001ada8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1ada8:	b580      	push	{r7, lr}
   1adaa:	b082      	sub	sp, #8
   1adac:	af00      	add	r7, sp, #0
   1adae:	6078      	str	r0, [r7, #4]
   1adb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1adb2:	687b      	ldr	r3, [r7, #4]
   1adb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1adb6:	2b00      	cmp	r3, #0
   1adb8:	d018      	beq.n	1adec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1adba:	687b      	ldr	r3, [r7, #4]
   1adbc:	68da      	ldr	r2, [r3, #12]
   1adbe:	687b      	ldr	r3, [r7, #4]
   1adc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1adc2:	18d2      	adds	r2, r2, r3
   1adc4:	687b      	ldr	r3, [r7, #4]
   1adc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1adc8:	687b      	ldr	r3, [r7, #4]
   1adca:	68da      	ldr	r2, [r3, #12]
   1adcc:	687b      	ldr	r3, [r7, #4]
   1adce:	685b      	ldr	r3, [r3, #4]
   1add0:	429a      	cmp	r2, r3
   1add2:	d303      	bcc.n	1addc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1add4:	687b      	ldr	r3, [r7, #4]
   1add6:	681a      	ldr	r2, [r3, #0]
   1add8:	687b      	ldr	r3, [r7, #4]
   1adda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1addc:	687b      	ldr	r3, [r7, #4]
   1adde:	68d9      	ldr	r1, [r3, #12]
   1ade0:	687b      	ldr	r3, [r7, #4]
   1ade2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1ade4:	683b      	ldr	r3, [r7, #0]
   1ade6:	0018      	movs	r0, r3
   1ade8:	4b02      	ldr	r3, [pc, #8]	; (1adf4 <prvCopyDataFromQueue+0x4c>)
   1adea:	4798      	blx	r3
	}
}
   1adec:	46c0      	nop			; (mov r8, r8)
   1adee:	46bd      	mov	sp, r7
   1adf0:	b002      	add	sp, #8
   1adf2:	bd80      	pop	{r7, pc}
   1adf4:	000339c9 	.word	0x000339c9

0001adf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1adf8:	b580      	push	{r7, lr}
   1adfa:	b084      	sub	sp, #16
   1adfc:	af00      	add	r7, sp, #0
   1adfe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1ae00:	4b34      	ldr	r3, [pc, #208]	; (1aed4 <prvUnlockQueue+0xdc>)
   1ae02:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1ae04:	230f      	movs	r3, #15
   1ae06:	18fb      	adds	r3, r7, r3
   1ae08:	687a      	ldr	r2, [r7, #4]
   1ae0a:	2145      	movs	r1, #69	; 0x45
   1ae0c:	5c52      	ldrb	r2, [r2, r1]
   1ae0e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1ae10:	e022      	b.n	1ae58 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1ae12:	687b      	ldr	r3, [r7, #4]
   1ae14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ae16:	2b00      	cmp	r3, #0
   1ae18:	d009      	beq.n	1ae2e <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1ae1a:	687b      	ldr	r3, [r7, #4]
   1ae1c:	2100      	movs	r1, #0
   1ae1e:	0018      	movs	r0, r3
   1ae20:	4b2d      	ldr	r3, [pc, #180]	; (1aed8 <prvUnlockQueue+0xe0>)
   1ae22:	4798      	blx	r3
   1ae24:	1e03      	subs	r3, r0, #0
   1ae26:	d00f      	beq.n	1ae48 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1ae28:	4b2c      	ldr	r3, [pc, #176]	; (1aedc <prvUnlockQueue+0xe4>)
   1ae2a:	4798      	blx	r3
   1ae2c:	e00c      	b.n	1ae48 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ae2e:	687b      	ldr	r3, [r7, #4]
   1ae30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ae32:	2b00      	cmp	r3, #0
   1ae34:	d017      	beq.n	1ae66 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ae36:	687b      	ldr	r3, [r7, #4]
   1ae38:	3324      	adds	r3, #36	; 0x24
   1ae3a:	0018      	movs	r0, r3
   1ae3c:	4b28      	ldr	r3, [pc, #160]	; (1aee0 <prvUnlockQueue+0xe8>)
   1ae3e:	4798      	blx	r3
   1ae40:	1e03      	subs	r3, r0, #0
   1ae42:	d001      	beq.n	1ae48 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1ae44:	4b25      	ldr	r3, [pc, #148]	; (1aedc <prvUnlockQueue+0xe4>)
   1ae46:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1ae48:	230f      	movs	r3, #15
   1ae4a:	18fb      	adds	r3, r7, r3
   1ae4c:	781b      	ldrb	r3, [r3, #0]
   1ae4e:	3b01      	subs	r3, #1
   1ae50:	b2da      	uxtb	r2, r3
   1ae52:	230f      	movs	r3, #15
   1ae54:	18fb      	adds	r3, r7, r3
   1ae56:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1ae58:	230f      	movs	r3, #15
   1ae5a:	18fb      	adds	r3, r7, r3
   1ae5c:	781b      	ldrb	r3, [r3, #0]
   1ae5e:	b25b      	sxtb	r3, r3
   1ae60:	2b00      	cmp	r3, #0
   1ae62:	dcd6      	bgt.n	1ae12 <prvUnlockQueue+0x1a>
   1ae64:	e000      	b.n	1ae68 <prvUnlockQueue+0x70>
						break;
   1ae66:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1ae68:	687b      	ldr	r3, [r7, #4]
   1ae6a:	2245      	movs	r2, #69	; 0x45
   1ae6c:	21ff      	movs	r1, #255	; 0xff
   1ae6e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1ae70:	4b1c      	ldr	r3, [pc, #112]	; (1aee4 <prvUnlockQueue+0xec>)
   1ae72:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1ae74:	4b17      	ldr	r3, [pc, #92]	; (1aed4 <prvUnlockQueue+0xdc>)
   1ae76:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1ae78:	230e      	movs	r3, #14
   1ae7a:	18fb      	adds	r3, r7, r3
   1ae7c:	687a      	ldr	r2, [r7, #4]
   1ae7e:	2144      	movs	r1, #68	; 0x44
   1ae80:	5c52      	ldrb	r2, [r2, r1]
   1ae82:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1ae84:	e014      	b.n	1aeb0 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ae86:	687b      	ldr	r3, [r7, #4]
   1ae88:	691b      	ldr	r3, [r3, #16]
   1ae8a:	2b00      	cmp	r3, #0
   1ae8c:	d017      	beq.n	1aebe <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ae8e:	687b      	ldr	r3, [r7, #4]
   1ae90:	3310      	adds	r3, #16
   1ae92:	0018      	movs	r0, r3
   1ae94:	4b12      	ldr	r3, [pc, #72]	; (1aee0 <prvUnlockQueue+0xe8>)
   1ae96:	4798      	blx	r3
   1ae98:	1e03      	subs	r3, r0, #0
   1ae9a:	d001      	beq.n	1aea0 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1ae9c:	4b0f      	ldr	r3, [pc, #60]	; (1aedc <prvUnlockQueue+0xe4>)
   1ae9e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1aea0:	230e      	movs	r3, #14
   1aea2:	18fb      	adds	r3, r7, r3
   1aea4:	781b      	ldrb	r3, [r3, #0]
   1aea6:	3b01      	subs	r3, #1
   1aea8:	b2da      	uxtb	r2, r3
   1aeaa:	230e      	movs	r3, #14
   1aeac:	18fb      	adds	r3, r7, r3
   1aeae:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1aeb0:	230e      	movs	r3, #14
   1aeb2:	18fb      	adds	r3, r7, r3
   1aeb4:	781b      	ldrb	r3, [r3, #0]
   1aeb6:	b25b      	sxtb	r3, r3
   1aeb8:	2b00      	cmp	r3, #0
   1aeba:	dce4      	bgt.n	1ae86 <prvUnlockQueue+0x8e>
   1aebc:	e000      	b.n	1aec0 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1aebe:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1aec0:	687b      	ldr	r3, [r7, #4]
   1aec2:	2244      	movs	r2, #68	; 0x44
   1aec4:	21ff      	movs	r1, #255	; 0xff
   1aec6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1aec8:	4b06      	ldr	r3, [pc, #24]	; (1aee4 <prvUnlockQueue+0xec>)
   1aeca:	4798      	blx	r3
}
   1aecc:	46c0      	nop			; (mov r8, r8)
   1aece:	46bd      	mov	sp, r7
   1aed0:	b004      	add	sp, #16
   1aed2:	bd80      	pop	{r7, pc}
   1aed4:	000194f9 	.word	0x000194f9
   1aed8:	0001afcd 	.word	0x0001afcd
   1aedc:	0001bfa1 	.word	0x0001bfa1
   1aee0:	0001bd8d 	.word	0x0001bd8d
   1aee4:	0001951d 	.word	0x0001951d

0001aee8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1aee8:	b580      	push	{r7, lr}
   1aeea:	b084      	sub	sp, #16
   1aeec:	af00      	add	r7, sp, #0
   1aeee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1aef0:	4b08      	ldr	r3, [pc, #32]	; (1af14 <prvIsQueueEmpty+0x2c>)
   1aef2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1aef4:	687b      	ldr	r3, [r7, #4]
   1aef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1aef8:	2b00      	cmp	r3, #0
   1aefa:	d102      	bne.n	1af02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1aefc:	2301      	movs	r3, #1
   1aefe:	60fb      	str	r3, [r7, #12]
   1af00:	e001      	b.n	1af06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1af02:	2300      	movs	r3, #0
   1af04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1af06:	4b04      	ldr	r3, [pc, #16]	; (1af18 <prvIsQueueEmpty+0x30>)
   1af08:	4798      	blx	r3

	return xReturn;
   1af0a:	68fb      	ldr	r3, [r7, #12]
}
   1af0c:	0018      	movs	r0, r3
   1af0e:	46bd      	mov	sp, r7
   1af10:	b004      	add	sp, #16
   1af12:	bd80      	pop	{r7, pc}
   1af14:	000194f9 	.word	0x000194f9
   1af18:	0001951d 	.word	0x0001951d

0001af1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1af1c:	b580      	push	{r7, lr}
   1af1e:	b084      	sub	sp, #16
   1af20:	af00      	add	r7, sp, #0
   1af22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1af24:	4b09      	ldr	r3, [pc, #36]	; (1af4c <prvIsQueueFull+0x30>)
   1af26:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1af28:	687b      	ldr	r3, [r7, #4]
   1af2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1af2c:	687b      	ldr	r3, [r7, #4]
   1af2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1af30:	429a      	cmp	r2, r3
   1af32:	d102      	bne.n	1af3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1af34:	2301      	movs	r3, #1
   1af36:	60fb      	str	r3, [r7, #12]
   1af38:	e001      	b.n	1af3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1af3a:	2300      	movs	r3, #0
   1af3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1af3e:	4b04      	ldr	r3, [pc, #16]	; (1af50 <prvIsQueueFull+0x34>)
   1af40:	4798      	blx	r3

	return xReturn;
   1af42:	68fb      	ldr	r3, [r7, #12]
}
   1af44:	0018      	movs	r0, r3
   1af46:	46bd      	mov	sp, r7
   1af48:	b004      	add	sp, #16
   1af4a:	bd80      	pop	{r7, pc}
   1af4c:	000194f9 	.word	0x000194f9
   1af50:	0001951d 	.word	0x0001951d

0001af54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1af54:	b580      	push	{r7, lr}
   1af56:	b086      	sub	sp, #24
   1af58:	af00      	add	r7, sp, #0
   1af5a:	60f8      	str	r0, [r7, #12]
   1af5c:	60b9      	str	r1, [r7, #8]
   1af5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1af60:	68fb      	ldr	r3, [r7, #12]
   1af62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1af64:	4b15      	ldr	r3, [pc, #84]	; (1afbc <vQueueWaitForMessageRestricted+0x68>)
   1af66:	4798      	blx	r3
   1af68:	697b      	ldr	r3, [r7, #20]
   1af6a:	2244      	movs	r2, #68	; 0x44
   1af6c:	5c9b      	ldrb	r3, [r3, r2]
   1af6e:	b25b      	sxtb	r3, r3
   1af70:	3301      	adds	r3, #1
   1af72:	d103      	bne.n	1af7c <vQueueWaitForMessageRestricted+0x28>
   1af74:	697b      	ldr	r3, [r7, #20]
   1af76:	2244      	movs	r2, #68	; 0x44
   1af78:	2100      	movs	r1, #0
   1af7a:	5499      	strb	r1, [r3, r2]
   1af7c:	697b      	ldr	r3, [r7, #20]
   1af7e:	2245      	movs	r2, #69	; 0x45
   1af80:	5c9b      	ldrb	r3, [r3, r2]
   1af82:	b25b      	sxtb	r3, r3
   1af84:	3301      	adds	r3, #1
   1af86:	d103      	bne.n	1af90 <vQueueWaitForMessageRestricted+0x3c>
   1af88:	697b      	ldr	r3, [r7, #20]
   1af8a:	2245      	movs	r2, #69	; 0x45
   1af8c:	2100      	movs	r1, #0
   1af8e:	5499      	strb	r1, [r3, r2]
   1af90:	4b0b      	ldr	r3, [pc, #44]	; (1afc0 <vQueueWaitForMessageRestricted+0x6c>)
   1af92:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1af94:	697b      	ldr	r3, [r7, #20]
   1af96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1af98:	2b00      	cmp	r3, #0
   1af9a:	d106      	bne.n	1afaa <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1af9c:	697b      	ldr	r3, [r7, #20]
   1af9e:	3324      	adds	r3, #36	; 0x24
   1afa0:	687a      	ldr	r2, [r7, #4]
   1afa2:	68b9      	ldr	r1, [r7, #8]
   1afa4:	0018      	movs	r0, r3
   1afa6:	4b07      	ldr	r3, [pc, #28]	; (1afc4 <vQueueWaitForMessageRestricted+0x70>)
   1afa8:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1afaa:	697b      	ldr	r3, [r7, #20]
   1afac:	0018      	movs	r0, r3
   1afae:	4b06      	ldr	r3, [pc, #24]	; (1afc8 <vQueueWaitForMessageRestricted+0x74>)
   1afb0:	4798      	blx	r3
	}
   1afb2:	46c0      	nop			; (mov r8, r8)
   1afb4:	46bd      	mov	sp, r7
   1afb6:	b006      	add	sp, #24
   1afb8:	bd80      	pop	{r7, pc}
   1afba:	46c0      	nop			; (mov r8, r8)
   1afbc:	000194f9 	.word	0x000194f9
   1afc0:	0001951d 	.word	0x0001951d
   1afc4:	0001bcad 	.word	0x0001bcad
   1afc8:	0001adf9 	.word	0x0001adf9

0001afcc <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1afcc:	b5b0      	push	{r4, r5, r7, lr}
   1afce:	b086      	sub	sp, #24
   1afd0:	af00      	add	r7, sp, #0
   1afd2:	6078      	str	r0, [r7, #4]
   1afd4:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1afd6:	687b      	ldr	r3, [r7, #4]
   1afd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1afda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1afdc:	2300      	movs	r3, #0
   1afde:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1afe0:	693b      	ldr	r3, [r7, #16]
   1afe2:	2b00      	cmp	r3, #0
   1afe4:	d101      	bne.n	1afea <prvNotifyQueueSetContainer+0x1e>
   1afe6:	b672      	cpsid	i
   1afe8:	e7fe      	b.n	1afe8 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1afea:	693b      	ldr	r3, [r7, #16]
   1afec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1afee:	693b      	ldr	r3, [r7, #16]
   1aff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1aff2:	429a      	cmp	r2, r3
   1aff4:	d301      	bcc.n	1affa <prvNotifyQueueSetContainer+0x2e>
   1aff6:	b672      	cpsid	i
   1aff8:	e7fe      	b.n	1aff8 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1affa:	693b      	ldr	r3, [r7, #16]
   1affc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1affe:	693b      	ldr	r3, [r7, #16]
   1b000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b002:	429a      	cmp	r2, r3
   1b004:	d300      	bcc.n	1b008 <prvNotifyQueueSetContainer+0x3c>
   1b006:	e08b      	b.n	1b120 <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1b008:	230f      	movs	r3, #15
   1b00a:	18fb      	adds	r3, r7, r3
   1b00c:	693a      	ldr	r2, [r7, #16]
   1b00e:	2145      	movs	r1, #69	; 0x45
   1b010:	5c52      	ldrb	r2, [r2, r1]
   1b012:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1b014:	4b45      	ldr	r3, [pc, #276]	; (1b12c <prvNotifyQueueSetContainer+0x160>)
   1b016:	4798      	blx	r3
   1b018:	0003      	movs	r3, r0
   1b01a:	0018      	movs	r0, r3
   1b01c:	4b44      	ldr	r3, [pc, #272]	; (1b130 <prvNotifyQueueSetContainer+0x164>)
   1b01e:	4798      	blx	r3
   1b020:	0003      	movs	r3, r0
   1b022:	001a      	movs	r2, r3
   1b024:	4b43      	ldr	r3, [pc, #268]	; (1b134 <prvNotifyQueueSetContainer+0x168>)
   1b026:	881b      	ldrh	r3, [r3, #0]
   1b028:	4013      	ands	r3, r2
   1b02a:	b29b      	uxth	r3, r3
   1b02c:	2b00      	cmp	r3, #0
   1b02e:	d02e      	beq.n	1b08e <prvNotifyQueueSetContainer+0xc2>
   1b030:	693b      	ldr	r3, [r7, #16]
   1b032:	0018      	movs	r0, r3
   1b034:	4b40      	ldr	r3, [pc, #256]	; (1b138 <prvNotifyQueueSetContainer+0x16c>)
   1b036:	4798      	blx	r3
   1b038:	0003      	movs	r3, r0
   1b03a:	001a      	movs	r2, r3
   1b03c:	4b3d      	ldr	r3, [pc, #244]	; (1b134 <prvNotifyQueueSetContainer+0x168>)
   1b03e:	881b      	ldrh	r3, [r3, #0]
   1b040:	4013      	ands	r3, r2
   1b042:	b29b      	uxth	r3, r3
   1b044:	2b00      	cmp	r3, #0
   1b046:	d022      	beq.n	1b08e <prvNotifyQueueSetContainer+0xc2>
   1b048:	683b      	ldr	r3, [r7, #0]
   1b04a:	2b00      	cmp	r3, #0
   1b04c:	d10b      	bne.n	1b066 <prvNotifyQueueSetContainer+0x9a>
   1b04e:	693b      	ldr	r3, [r7, #16]
   1b050:	0018      	movs	r0, r3
   1b052:	4b3a      	ldr	r3, [pc, #232]	; (1b13c <prvNotifyQueueSetContainer+0x170>)
   1b054:	4798      	blx	r3
   1b056:	0003      	movs	r3, r0
   1b058:	001a      	movs	r2, r3
   1b05a:	4b39      	ldr	r3, [pc, #228]	; (1b140 <prvNotifyQueueSetContainer+0x174>)
   1b05c:	5c9b      	ldrb	r3, [r3, r2]
   1b05e:	3320      	adds	r3, #32
   1b060:	b2db      	uxtb	r3, r3
   1b062:	001d      	movs	r5, r3
   1b064:	e000      	b.n	1b068 <prvNotifyQueueSetContainer+0x9c>
   1b066:	2525      	movs	r5, #37	; 0x25
   1b068:	693b      	ldr	r3, [r7, #16]
   1b06a:	0018      	movs	r0, r3
   1b06c:	4b33      	ldr	r3, [pc, #204]	; (1b13c <prvNotifyQueueSetContainer+0x170>)
   1b06e:	4798      	blx	r3
   1b070:	0003      	movs	r3, r0
   1b072:	001a      	movs	r2, r3
   1b074:	4b32      	ldr	r3, [pc, #200]	; (1b140 <prvNotifyQueueSetContainer+0x174>)
   1b076:	5c9c      	ldrb	r4, [r3, r2]
   1b078:	693b      	ldr	r3, [r7, #16]
   1b07a:	0018      	movs	r0, r3
   1b07c:	4b31      	ldr	r3, [pc, #196]	; (1b144 <prvNotifyQueueSetContainer+0x178>)
   1b07e:	4798      	blx	r3
   1b080:	0003      	movs	r3, r0
   1b082:	b2db      	uxtb	r3, r3
   1b084:	001a      	movs	r2, r3
   1b086:	0021      	movs	r1, r4
   1b088:	0028      	movs	r0, r5
   1b08a:	4b2f      	ldr	r3, [pc, #188]	; (1b148 <prvNotifyQueueSetContainer+0x17c>)
   1b08c:	4798      	blx	r3
   1b08e:	693b      	ldr	r3, [r7, #16]
   1b090:	0018      	movs	r0, r3
   1b092:	4b2a      	ldr	r3, [pc, #168]	; (1b13c <prvNotifyQueueSetContainer+0x170>)
   1b094:	4798      	blx	r3
   1b096:	0003      	movs	r3, r0
   1b098:	001a      	movs	r2, r3
   1b09a:	4b29      	ldr	r3, [pc, #164]	; (1b140 <prvNotifyQueueSetContainer+0x174>)
   1b09c:	5c9c      	ldrb	r4, [r3, r2]
   1b09e:	693b      	ldr	r3, [r7, #16]
   1b0a0:	0018      	movs	r0, r3
   1b0a2:	4b28      	ldr	r3, [pc, #160]	; (1b144 <prvNotifyQueueSetContainer+0x178>)
   1b0a4:	4798      	blx	r3
   1b0a6:	0003      	movs	r3, r0
   1b0a8:	b2dd      	uxtb	r5, r3
   1b0aa:	693b      	ldr	r3, [r7, #16]
   1b0ac:	0018      	movs	r0, r3
   1b0ae:	4b23      	ldr	r3, [pc, #140]	; (1b13c <prvNotifyQueueSetContainer+0x170>)
   1b0b0:	4798      	blx	r3
   1b0b2:	0003      	movs	r3, r0
   1b0b4:	001a      	movs	r2, r3
   1b0b6:	4b22      	ldr	r3, [pc, #136]	; (1b140 <prvNotifyQueueSetContainer+0x174>)
   1b0b8:	5c9b      	ldrb	r3, [r3, r2]
   1b0ba:	2b02      	cmp	r3, #2
   1b0bc:	d005      	beq.n	1b0ca <prvNotifyQueueSetContainer+0xfe>
   1b0be:	693b      	ldr	r3, [r7, #16]
   1b0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b0c2:	b2db      	uxtb	r3, r3
   1b0c4:	3301      	adds	r3, #1
   1b0c6:	b2db      	uxtb	r3, r3
   1b0c8:	e000      	b.n	1b0cc <prvNotifyQueueSetContainer+0x100>
   1b0ca:	2300      	movs	r3, #0
   1b0cc:	001a      	movs	r2, r3
   1b0ce:	0029      	movs	r1, r5
   1b0d0:	0020      	movs	r0, r4
   1b0d2:	4b1e      	ldr	r3, [pc, #120]	; (1b14c <prvNotifyQueueSetContainer+0x180>)
   1b0d4:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1b0d6:	683a      	ldr	r2, [r7, #0]
   1b0d8:	1d39      	adds	r1, r7, #4
   1b0da:	693b      	ldr	r3, [r7, #16]
   1b0dc:	0018      	movs	r0, r3
   1b0de:	4b1c      	ldr	r3, [pc, #112]	; (1b150 <prvNotifyQueueSetContainer+0x184>)
   1b0e0:	4798      	blx	r3
   1b0e2:	0003      	movs	r3, r0
   1b0e4:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1b0e6:	230f      	movs	r3, #15
   1b0e8:	18fb      	adds	r3, r7, r3
   1b0ea:	781b      	ldrb	r3, [r3, #0]
   1b0ec:	b25b      	sxtb	r3, r3
   1b0ee:	3301      	adds	r3, #1
   1b0f0:	d10d      	bne.n	1b10e <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1b0f2:	693b      	ldr	r3, [r7, #16]
   1b0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b0f6:	2b00      	cmp	r3, #0
   1b0f8:	d012      	beq.n	1b120 <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1b0fa:	693b      	ldr	r3, [r7, #16]
   1b0fc:	3324      	adds	r3, #36	; 0x24
   1b0fe:	0018      	movs	r0, r3
   1b100:	4b14      	ldr	r3, [pc, #80]	; (1b154 <prvNotifyQueueSetContainer+0x188>)
   1b102:	4798      	blx	r3
   1b104:	1e03      	subs	r3, r0, #0
   1b106:	d00b      	beq.n	1b120 <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1b108:	2301      	movs	r3, #1
   1b10a:	617b      	str	r3, [r7, #20]
   1b10c:	e008      	b.n	1b120 <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b10e:	230f      	movs	r3, #15
   1b110:	18fb      	adds	r3, r7, r3
   1b112:	781b      	ldrb	r3, [r3, #0]
   1b114:	3301      	adds	r3, #1
   1b116:	b2db      	uxtb	r3, r3
   1b118:	b259      	sxtb	r1, r3
   1b11a:	693b      	ldr	r3, [r7, #16]
   1b11c:	2245      	movs	r2, #69	; 0x45
   1b11e:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1b120:	697b      	ldr	r3, [r7, #20]
	}
   1b122:	0018      	movs	r0, r3
   1b124:	46bd      	mov	sp, r7
   1b126:	b006      	add	sp, #24
   1b128:	bdb0      	pop	{r4, r5, r7, pc}
   1b12a:	46c0      	nop			; (mov r8, r8)
   1b12c:	0001778d 	.word	0x0001778d
   1b130:	000174f1 	.word	0x000174f1
   1b134:	200000b8 	.word	0x200000b8
   1b138:	000175b1 	.word	0x000175b1
   1b13c:	000174b1 	.word	0x000174b1
   1b140:	200000ac 	.word	0x200000ac
   1b144:	00017591 	.word	0x00017591
   1b148:	00017ee9 	.word	0x00017ee9
   1b14c:	00018545 	.word	0x00018545
   1b150:	0001acc9 	.word	0x0001acc9
   1b154:	0001bd8d 	.word	0x0001bd8d

0001b158 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1b158:	b590      	push	{r4, r7, lr}
   1b15a:	b08d      	sub	sp, #52	; 0x34
   1b15c:	af04      	add	r7, sp, #16
   1b15e:	60f8      	str	r0, [r7, #12]
   1b160:	60b9      	str	r1, [r7, #8]
   1b162:	603b      	str	r3, [r7, #0]
   1b164:	1dbb      	adds	r3, r7, #6
   1b166:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b168:	1dbb      	adds	r3, r7, #6
   1b16a:	881b      	ldrh	r3, [r3, #0]
   1b16c:	009b      	lsls	r3, r3, #2
   1b16e:	0018      	movs	r0, r3
   1b170:	4b1d      	ldr	r3, [pc, #116]	; (1b1e8 <xTaskCreate+0x90>)
   1b172:	4798      	blx	r3
   1b174:	0003      	movs	r3, r0
   1b176:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1b178:	697b      	ldr	r3, [r7, #20]
   1b17a:	2b00      	cmp	r3, #0
   1b17c:	d010      	beq.n	1b1a0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1b17e:	2054      	movs	r0, #84	; 0x54
   1b180:	4b19      	ldr	r3, [pc, #100]	; (1b1e8 <xTaskCreate+0x90>)
   1b182:	4798      	blx	r3
   1b184:	0003      	movs	r3, r0
   1b186:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1b188:	69fb      	ldr	r3, [r7, #28]
   1b18a:	2b00      	cmp	r3, #0
   1b18c:	d003      	beq.n	1b196 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1b18e:	69fb      	ldr	r3, [r7, #28]
   1b190:	697a      	ldr	r2, [r7, #20]
   1b192:	631a      	str	r2, [r3, #48]	; 0x30
   1b194:	e006      	b.n	1b1a4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1b196:	697b      	ldr	r3, [r7, #20]
   1b198:	0018      	movs	r0, r3
   1b19a:	4b14      	ldr	r3, [pc, #80]	; (1b1ec <xTaskCreate+0x94>)
   1b19c:	4798      	blx	r3
   1b19e:	e001      	b.n	1b1a4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1b1a0:	2300      	movs	r3, #0
   1b1a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1b1a4:	69fb      	ldr	r3, [r7, #28]
   1b1a6:	2b00      	cmp	r3, #0
   1b1a8:	d016      	beq.n	1b1d8 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1b1aa:	1dbb      	adds	r3, r7, #6
   1b1ac:	881a      	ldrh	r2, [r3, #0]
   1b1ae:	683c      	ldr	r4, [r7, #0]
   1b1b0:	68b9      	ldr	r1, [r7, #8]
   1b1b2:	68f8      	ldr	r0, [r7, #12]
   1b1b4:	2300      	movs	r3, #0
   1b1b6:	9303      	str	r3, [sp, #12]
   1b1b8:	69fb      	ldr	r3, [r7, #28]
   1b1ba:	9302      	str	r3, [sp, #8]
   1b1bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b1be:	9301      	str	r3, [sp, #4]
   1b1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b1c2:	9300      	str	r3, [sp, #0]
   1b1c4:	0023      	movs	r3, r4
   1b1c6:	4c0a      	ldr	r4, [pc, #40]	; (1b1f0 <xTaskCreate+0x98>)
   1b1c8:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1b1ca:	69fb      	ldr	r3, [r7, #28]
   1b1cc:	0018      	movs	r0, r3
   1b1ce:	4b09      	ldr	r3, [pc, #36]	; (1b1f4 <xTaskCreate+0x9c>)
   1b1d0:	4798      	blx	r3
			xReturn = pdPASS;
   1b1d2:	2301      	movs	r3, #1
   1b1d4:	61bb      	str	r3, [r7, #24]
   1b1d6:	e002      	b.n	1b1de <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1b1d8:	2301      	movs	r3, #1
   1b1da:	425b      	negs	r3, r3
   1b1dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1b1de:	69bb      	ldr	r3, [r7, #24]
	}
   1b1e0:	0018      	movs	r0, r3
   1b1e2:	46bd      	mov	sp, r7
   1b1e4:	b009      	add	sp, #36	; 0x24
   1b1e6:	bd90      	pop	{r4, r7, pc}
   1b1e8:	00019631 	.word	0x00019631
   1b1ec:	000196f5 	.word	0x000196f5
   1b1f0:	0001b1f9 	.word	0x0001b1f9
   1b1f4:	0001b309 	.word	0x0001b309

0001b1f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1b1f8:	b580      	push	{r7, lr}
   1b1fa:	b086      	sub	sp, #24
   1b1fc:	af00      	add	r7, sp, #0
   1b1fe:	60f8      	str	r0, [r7, #12]
   1b200:	60b9      	str	r1, [r7, #8]
   1b202:	607a      	str	r2, [r7, #4]
   1b204:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1b206:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b208:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1b20a:	687b      	ldr	r3, [r7, #4]
   1b20c:	009b      	lsls	r3, r3, #2
   1b20e:	001a      	movs	r2, r3
   1b210:	21a5      	movs	r1, #165	; 0xa5
   1b212:	4b39      	ldr	r3, [pc, #228]	; (1b2f8 <prvInitialiseNewTask+0x100>)
   1b214:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1b216:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1b21a:	687b      	ldr	r3, [r7, #4]
   1b21c:	4937      	ldr	r1, [pc, #220]	; (1b2fc <prvInitialiseNewTask+0x104>)
   1b21e:	468c      	mov	ip, r1
   1b220:	4463      	add	r3, ip
   1b222:	009b      	lsls	r3, r3, #2
   1b224:	18d3      	adds	r3, r2, r3
   1b226:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1b228:	693b      	ldr	r3, [r7, #16]
   1b22a:	2207      	movs	r2, #7
   1b22c:	4393      	bics	r3, r2
   1b22e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1b230:	693b      	ldr	r3, [r7, #16]
   1b232:	2207      	movs	r2, #7
   1b234:	4013      	ands	r3, r2
   1b236:	d001      	beq.n	1b23c <prvInitialiseNewTask+0x44>
   1b238:	b672      	cpsid	i
   1b23a:	e7fe      	b.n	1b23a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1b23c:	2300      	movs	r3, #0
   1b23e:	617b      	str	r3, [r7, #20]
   1b240:	e013      	b.n	1b26a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1b242:	68ba      	ldr	r2, [r7, #8]
   1b244:	697b      	ldr	r3, [r7, #20]
   1b246:	18d3      	adds	r3, r2, r3
   1b248:	7818      	ldrb	r0, [r3, #0]
   1b24a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b24c:	2134      	movs	r1, #52	; 0x34
   1b24e:	697b      	ldr	r3, [r7, #20]
   1b250:	18d3      	adds	r3, r2, r3
   1b252:	185b      	adds	r3, r3, r1
   1b254:	1c02      	adds	r2, r0, #0
   1b256:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1b258:	68ba      	ldr	r2, [r7, #8]
   1b25a:	697b      	ldr	r3, [r7, #20]
   1b25c:	18d3      	adds	r3, r2, r3
   1b25e:	781b      	ldrb	r3, [r3, #0]
   1b260:	2b00      	cmp	r3, #0
   1b262:	d006      	beq.n	1b272 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1b264:	697b      	ldr	r3, [r7, #20]
   1b266:	3301      	adds	r3, #1
   1b268:	617b      	str	r3, [r7, #20]
   1b26a:	697b      	ldr	r3, [r7, #20]
   1b26c:	2b07      	cmp	r3, #7
   1b26e:	d9e8      	bls.n	1b242 <prvInitialiseNewTask+0x4a>
   1b270:	e000      	b.n	1b274 <prvInitialiseNewTask+0x7c>
		{
			break;
   1b272:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1b274:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b276:	223b      	movs	r2, #59	; 0x3b
   1b278:	2100      	movs	r1, #0
   1b27a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1b27c:	6a3b      	ldr	r3, [r7, #32]
   1b27e:	2b04      	cmp	r3, #4
   1b280:	d901      	bls.n	1b286 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1b282:	2304      	movs	r3, #4
   1b284:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1b286:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b288:	6a3a      	ldr	r2, [r7, #32]
   1b28a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1b28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b28e:	6a3a      	ldr	r2, [r7, #32]
   1b290:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1b292:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b294:	2200      	movs	r2, #0
   1b296:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1b298:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b29a:	3304      	adds	r3, #4
   1b29c:	0018      	movs	r0, r3
   1b29e:	4b18      	ldr	r3, [pc, #96]	; (1b300 <prvInitialiseNewTask+0x108>)
   1b2a0:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1b2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2a4:	3318      	adds	r3, #24
   1b2a6:	0018      	movs	r0, r3
   1b2a8:	4b15      	ldr	r3, [pc, #84]	; (1b300 <prvInitialiseNewTask+0x108>)
   1b2aa:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1b2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b2b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b2b2:	6a3b      	ldr	r3, [r7, #32]
   1b2b4:	2205      	movs	r2, #5
   1b2b6:	1ad2      	subs	r2, r2, r3
   1b2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1b2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2be:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b2c0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1b2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2c4:	2200      	movs	r2, #0
   1b2c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1b2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2ca:	2250      	movs	r2, #80	; 0x50
   1b2cc:	2100      	movs	r1, #0
   1b2ce:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1b2d0:	683a      	ldr	r2, [r7, #0]
   1b2d2:	68f9      	ldr	r1, [r7, #12]
   1b2d4:	693b      	ldr	r3, [r7, #16]
   1b2d6:	0018      	movs	r0, r3
   1b2d8:	4b0a      	ldr	r3, [pc, #40]	; (1b304 <prvInitialiseNewTask+0x10c>)
   1b2da:	4798      	blx	r3
   1b2dc:	0002      	movs	r2, r0
   1b2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b2e0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1b2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b2e4:	2b00      	cmp	r3, #0
   1b2e6:	d002      	beq.n	1b2ee <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1b2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b2ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1b2ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1b2ee:	46c0      	nop			; (mov r8, r8)
   1b2f0:	46bd      	mov	sp, r7
   1b2f2:	b006      	add	sp, #24
   1b2f4:	bd80      	pop	{r7, pc}
   1b2f6:	46c0      	nop			; (mov r8, r8)
   1b2f8:	000339ff 	.word	0x000339ff
   1b2fc:	3fffffff 	.word	0x3fffffff
   1b300:	000192a5 	.word	0x000192a5
   1b304:	000193bd 	.word	0x000193bd

0001b308 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1b308:	b580      	push	{r7, lr}
   1b30a:	b082      	sub	sp, #8
   1b30c:	af00      	add	r7, sp, #0
   1b30e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1b310:	4b60      	ldr	r3, [pc, #384]	; (1b494 <prvAddNewTaskToReadyList+0x18c>)
   1b312:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1b314:	4b60      	ldr	r3, [pc, #384]	; (1b498 <prvAddNewTaskToReadyList+0x190>)
   1b316:	681b      	ldr	r3, [r3, #0]
   1b318:	1c5a      	adds	r2, r3, #1
   1b31a:	4b5f      	ldr	r3, [pc, #380]	; (1b498 <prvAddNewTaskToReadyList+0x190>)
   1b31c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1b31e:	4b5f      	ldr	r3, [pc, #380]	; (1b49c <prvAddNewTaskToReadyList+0x194>)
   1b320:	681b      	ldr	r3, [r3, #0]
   1b322:	2b00      	cmp	r3, #0
   1b324:	d109      	bne.n	1b33a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1b326:	4b5d      	ldr	r3, [pc, #372]	; (1b49c <prvAddNewTaskToReadyList+0x194>)
   1b328:	687a      	ldr	r2, [r7, #4]
   1b32a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1b32c:	4b5a      	ldr	r3, [pc, #360]	; (1b498 <prvAddNewTaskToReadyList+0x190>)
   1b32e:	681b      	ldr	r3, [r3, #0]
   1b330:	2b01      	cmp	r3, #1
   1b332:	d110      	bne.n	1b356 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1b334:	4b5a      	ldr	r3, [pc, #360]	; (1b4a0 <prvAddNewTaskToReadyList+0x198>)
   1b336:	4798      	blx	r3
   1b338:	e00d      	b.n	1b356 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1b33a:	4b5a      	ldr	r3, [pc, #360]	; (1b4a4 <prvAddNewTaskToReadyList+0x19c>)
   1b33c:	681b      	ldr	r3, [r3, #0]
   1b33e:	2b00      	cmp	r3, #0
   1b340:	d109      	bne.n	1b356 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1b342:	4b56      	ldr	r3, [pc, #344]	; (1b49c <prvAddNewTaskToReadyList+0x194>)
   1b344:	681b      	ldr	r3, [r3, #0]
   1b346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b348:	687b      	ldr	r3, [r7, #4]
   1b34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b34c:	429a      	cmp	r2, r3
   1b34e:	d802      	bhi.n	1b356 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1b350:	4b52      	ldr	r3, [pc, #328]	; (1b49c <prvAddNewTaskToReadyList+0x194>)
   1b352:	687a      	ldr	r2, [r7, #4]
   1b354:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1b356:	4b54      	ldr	r3, [pc, #336]	; (1b4a8 <prvAddNewTaskToReadyList+0x1a0>)
   1b358:	681b      	ldr	r3, [r3, #0]
   1b35a:	1c5a      	adds	r2, r3, #1
   1b35c:	4b52      	ldr	r3, [pc, #328]	; (1b4a8 <prvAddNewTaskToReadyList+0x1a0>)
   1b35e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1b360:	4b51      	ldr	r3, [pc, #324]	; (1b4a8 <prvAddNewTaskToReadyList+0x1a0>)
   1b362:	681a      	ldr	r2, [r3, #0]
   1b364:	687b      	ldr	r3, [r7, #4]
   1b366:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1b368:	687b      	ldr	r3, [r7, #4]
   1b36a:	2b00      	cmp	r3, #0
   1b36c:	d052      	beq.n	1b414 <prvAddNewTaskToReadyList+0x10c>
   1b36e:	2003      	movs	r0, #3
   1b370:	4b4e      	ldr	r3, [pc, #312]	; (1b4ac <prvAddNewTaskToReadyList+0x1a4>)
   1b372:	4798      	blx	r3
   1b374:	0003      	movs	r3, r0
   1b376:	b29a      	uxth	r2, r3
   1b378:	687b      	ldr	r3, [r7, #4]
   1b37a:	0011      	movs	r1, r2
   1b37c:	0018      	movs	r0, r3
   1b37e:	4b4c      	ldr	r3, [pc, #304]	; (1b4b0 <prvAddNewTaskToReadyList+0x1a8>)
   1b380:	4798      	blx	r3
   1b382:	4b4c      	ldr	r3, [pc, #304]	; (1b4b4 <prvAddNewTaskToReadyList+0x1ac>)
   1b384:	881a      	ldrh	r2, [r3, #0]
   1b386:	687b      	ldr	r3, [r7, #4]
   1b388:	0011      	movs	r1, r2
   1b38a:	0018      	movs	r0, r3
   1b38c:	4b4a      	ldr	r3, [pc, #296]	; (1b4b8 <prvAddNewTaskToReadyList+0x1b0>)
   1b38e:	4798      	blx	r3
   1b390:	687b      	ldr	r3, [r7, #4]
   1b392:	0018      	movs	r0, r3
   1b394:	4b49      	ldr	r3, [pc, #292]	; (1b4bc <prvAddNewTaskToReadyList+0x1b4>)
   1b396:	4798      	blx	r3
   1b398:	0003      	movs	r3, r0
   1b39a:	b2d9      	uxtb	r1, r3
   1b39c:	687b      	ldr	r3, [r7, #4]
   1b39e:	3334      	adds	r3, #52	; 0x34
   1b3a0:	001a      	movs	r2, r3
   1b3a2:	2003      	movs	r0, #3
   1b3a4:	4b46      	ldr	r3, [pc, #280]	; (1b4c0 <prvAddNewTaskToReadyList+0x1b8>)
   1b3a6:	4798      	blx	r3
   1b3a8:	687b      	ldr	r3, [r7, #4]
   1b3aa:	0018      	movs	r0, r3
   1b3ac:	4b43      	ldr	r3, [pc, #268]	; (1b4bc <prvAddNewTaskToReadyList+0x1b4>)
   1b3ae:	4798      	blx	r3
   1b3b0:	0003      	movs	r3, r0
   1b3b2:	b2d9      	uxtb	r1, r3
   1b3b4:	687b      	ldr	r3, [r7, #4]
   1b3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b3b8:	b2db      	uxtb	r3, r3
   1b3ba:	001a      	movs	r2, r3
   1b3bc:	2003      	movs	r0, #3
   1b3be:	4b41      	ldr	r3, [pc, #260]	; (1b4c4 <prvAddNewTaskToReadyList+0x1bc>)
   1b3c0:	4798      	blx	r3
   1b3c2:	4b41      	ldr	r3, [pc, #260]	; (1b4c8 <prvAddNewTaskToReadyList+0x1c0>)
   1b3c4:	4798      	blx	r3
   1b3c6:	0003      	movs	r3, r0
   1b3c8:	0018      	movs	r0, r3
   1b3ca:	4b40      	ldr	r3, [pc, #256]	; (1b4cc <prvAddNewTaskToReadyList+0x1c4>)
   1b3cc:	4798      	blx	r3
   1b3ce:	0003      	movs	r3, r0
   1b3d0:	001a      	movs	r2, r3
   1b3d2:	4b3f      	ldr	r3, [pc, #252]	; (1b4d0 <prvAddNewTaskToReadyList+0x1c8>)
   1b3d4:	881b      	ldrh	r3, [r3, #0]
   1b3d6:	4013      	ands	r3, r2
   1b3d8:	b29b      	uxth	r3, r3
   1b3da:	2b00      	cmp	r3, #0
   1b3dc:	d016      	beq.n	1b40c <prvAddNewTaskToReadyList+0x104>
   1b3de:	687b      	ldr	r3, [r7, #4]
   1b3e0:	0018      	movs	r0, r3
   1b3e2:	4b3a      	ldr	r3, [pc, #232]	; (1b4cc <prvAddNewTaskToReadyList+0x1c4>)
   1b3e4:	4798      	blx	r3
   1b3e6:	0003      	movs	r3, r0
   1b3e8:	001a      	movs	r2, r3
   1b3ea:	4b39      	ldr	r3, [pc, #228]	; (1b4d0 <prvAddNewTaskToReadyList+0x1c8>)
   1b3ec:	881b      	ldrh	r3, [r3, #0]
   1b3ee:	4013      	ands	r3, r2
   1b3f0:	b29b      	uxth	r3, r3
   1b3f2:	2b00      	cmp	r3, #0
   1b3f4:	d00a      	beq.n	1b40c <prvAddNewTaskToReadyList+0x104>
   1b3f6:	687b      	ldr	r3, [r7, #4]
   1b3f8:	0018      	movs	r0, r3
   1b3fa:	4b30      	ldr	r3, [pc, #192]	; (1b4bc <prvAddNewTaskToReadyList+0x1b4>)
   1b3fc:	4798      	blx	r3
   1b3fe:	0003      	movs	r3, r0
   1b400:	b2db      	uxtb	r3, r3
   1b402:	001a      	movs	r2, r3
   1b404:	2103      	movs	r1, #3
   1b406:	201b      	movs	r0, #27
   1b408:	4b32      	ldr	r3, [pc, #200]	; (1b4d4 <prvAddNewTaskToReadyList+0x1cc>)
   1b40a:	4798      	blx	r3
   1b40c:	687b      	ldr	r3, [r7, #4]
   1b40e:	0018      	movs	r0, r3
   1b410:	4b31      	ldr	r3, [pc, #196]	; (1b4d8 <prvAddNewTaskToReadyList+0x1d0>)
   1b412:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1b414:	687b      	ldr	r3, [r7, #4]
   1b416:	0018      	movs	r0, r3
   1b418:	4b2c      	ldr	r3, [pc, #176]	; (1b4cc <prvAddNewTaskToReadyList+0x1c4>)
   1b41a:	4798      	blx	r3
   1b41c:	0003      	movs	r3, r0
   1b41e:	001a      	movs	r2, r3
   1b420:	4b2b      	ldr	r3, [pc, #172]	; (1b4d0 <prvAddNewTaskToReadyList+0x1c8>)
   1b422:	881b      	ldrh	r3, [r3, #0]
   1b424:	4013      	ands	r3, r2
   1b426:	b29b      	uxth	r3, r3
   1b428:	2b00      	cmp	r3, #0
   1b42a:	d008      	beq.n	1b43e <prvAddNewTaskToReadyList+0x136>
   1b42c:	687b      	ldr	r3, [r7, #4]
   1b42e:	0018      	movs	r0, r3
   1b430:	4b22      	ldr	r3, [pc, #136]	; (1b4bc <prvAddNewTaskToReadyList+0x1b4>)
   1b432:	4798      	blx	r3
   1b434:	0003      	movs	r3, r0
   1b436:	b2db      	uxtb	r3, r3
   1b438:	0018      	movs	r0, r3
   1b43a:	4b28      	ldr	r3, [pc, #160]	; (1b4dc <prvAddNewTaskToReadyList+0x1d4>)
   1b43c:	4798      	blx	r3
   1b43e:	687b      	ldr	r3, [r7, #4]
   1b440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b442:	4b27      	ldr	r3, [pc, #156]	; (1b4e0 <prvAddNewTaskToReadyList+0x1d8>)
   1b444:	681b      	ldr	r3, [r3, #0]
   1b446:	429a      	cmp	r2, r3
   1b448:	d903      	bls.n	1b452 <prvAddNewTaskToReadyList+0x14a>
   1b44a:	687b      	ldr	r3, [r7, #4]
   1b44c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b44e:	4b24      	ldr	r3, [pc, #144]	; (1b4e0 <prvAddNewTaskToReadyList+0x1d8>)
   1b450:	601a      	str	r2, [r3, #0]
   1b452:	687b      	ldr	r3, [r7, #4]
   1b454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b456:	0013      	movs	r3, r2
   1b458:	009b      	lsls	r3, r3, #2
   1b45a:	189b      	adds	r3, r3, r2
   1b45c:	009b      	lsls	r3, r3, #2
   1b45e:	4a21      	ldr	r2, [pc, #132]	; (1b4e4 <prvAddNewTaskToReadyList+0x1dc>)
   1b460:	189a      	adds	r2, r3, r2
   1b462:	687b      	ldr	r3, [r7, #4]
   1b464:	3304      	adds	r3, #4
   1b466:	0019      	movs	r1, r3
   1b468:	0010      	movs	r0, r2
   1b46a:	4b1f      	ldr	r3, [pc, #124]	; (1b4e8 <prvAddNewTaskToReadyList+0x1e0>)
   1b46c:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1b46e:	4b1f      	ldr	r3, [pc, #124]	; (1b4ec <prvAddNewTaskToReadyList+0x1e4>)
   1b470:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1b472:	4b0c      	ldr	r3, [pc, #48]	; (1b4a4 <prvAddNewTaskToReadyList+0x19c>)
   1b474:	681b      	ldr	r3, [r3, #0]
   1b476:	2b00      	cmp	r3, #0
   1b478:	d008      	beq.n	1b48c <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1b47a:	4b08      	ldr	r3, [pc, #32]	; (1b49c <prvAddNewTaskToReadyList+0x194>)
   1b47c:	681b      	ldr	r3, [r3, #0]
   1b47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b480:	687b      	ldr	r3, [r7, #4]
   1b482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b484:	429a      	cmp	r2, r3
   1b486:	d201      	bcs.n	1b48c <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1b488:	4b19      	ldr	r3, [pc, #100]	; (1b4f0 <prvAddNewTaskToReadyList+0x1e8>)
   1b48a:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1b48c:	46c0      	nop			; (mov r8, r8)
   1b48e:	46bd      	mov	sp, r7
   1b490:	b002      	add	sp, #8
   1b492:	bd80      	pop	{r7, pc}
   1b494:	000194f9 	.word	0x000194f9
   1b498:	20003d0c 	.word	0x20003d0c
   1b49c:	20003c34 	.word	0x20003c34
   1b4a0:	0001c029 	.word	0x0001c029
   1b4a4:	20003d18 	.word	0x20003d18
   1b4a8:	20003d28 	.word	0x20003d28
   1b4ac:	00018a71 	.word	0x00018a71
   1b4b0:	00017515 	.word	0x00017515
   1b4b4:	200000ba 	.word	0x200000ba
   1b4b8:	00017551 	.word	0x00017551
   1b4bc:	000174d1 	.word	0x000174d1
   1b4c0:	00018ca1 	.word	0x00018ca1
   1b4c4:	00018405 	.word	0x00018405
   1b4c8:	0001778d 	.word	0x0001778d
   1b4cc:	000174f1 	.word	0x000174f1
   1b4d0:	200000b8 	.word	0x200000b8
   1b4d4:	00017ee9 	.word	0x00017ee9
   1b4d8:	00017651 	.word	0x00017651
   1b4dc:	00017ca1 	.word	0x00017ca1
   1b4e0:	20003d14 	.word	0x20003d14
   1b4e4:	20003c38 	.word	0x20003c38
   1b4e8:	000192bb 	.word	0x000192bb
   1b4ec:	0001951d 	.word	0x0001951d
   1b4f0:	000194e1 	.word	0x000194e1

0001b4f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1b4f4:	b580      	push	{r7, lr}
   1b4f6:	b084      	sub	sp, #16
   1b4f8:	af00      	add	r7, sp, #0
   1b4fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1b4fc:	2300      	movs	r3, #0
   1b4fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1b500:	687b      	ldr	r3, [r7, #4]
   1b502:	2b00      	cmp	r3, #0
   1b504:	d045      	beq.n	1b592 <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1b506:	4b27      	ldr	r3, [pc, #156]	; (1b5a4 <vTaskDelay+0xb0>)
   1b508:	681b      	ldr	r3, [r3, #0]
   1b50a:	2b00      	cmp	r3, #0
   1b50c:	d001      	beq.n	1b512 <vTaskDelay+0x1e>
   1b50e:	b672      	cpsid	i
   1b510:	e7fe      	b.n	1b510 <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1b512:	4b25      	ldr	r3, [pc, #148]	; (1b5a8 <vTaskDelay+0xb4>)
   1b514:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1b516:	4b25      	ldr	r3, [pc, #148]	; (1b5ac <vTaskDelay+0xb8>)
   1b518:	681b      	ldr	r3, [r3, #0]
   1b51a:	0018      	movs	r0, r3
   1b51c:	4b24      	ldr	r3, [pc, #144]	; (1b5b0 <vTaskDelay+0xbc>)
   1b51e:	4798      	blx	r3
   1b520:	0003      	movs	r3, r0
   1b522:	001a      	movs	r2, r3
   1b524:	4b23      	ldr	r3, [pc, #140]	; (1b5b4 <vTaskDelay+0xc0>)
   1b526:	881b      	ldrh	r3, [r3, #0]
   1b528:	4013      	ands	r3, r2
   1b52a:	b29b      	uxth	r3, r3
   1b52c:	2b00      	cmp	r3, #0
   1b52e:	d00e      	beq.n	1b54e <vTaskDelay+0x5a>
   1b530:	687b      	ldr	r3, [r7, #4]
   1b532:	0019      	movs	r1, r3
   1b534:	2089      	movs	r0, #137	; 0x89
   1b536:	4b20      	ldr	r3, [pc, #128]	; (1b5b8 <vTaskDelay+0xc4>)
   1b538:	4798      	blx	r3
   1b53a:	4b1c      	ldr	r3, [pc, #112]	; (1b5ac <vTaskDelay+0xb8>)
   1b53c:	681b      	ldr	r3, [r3, #0]
   1b53e:	0018      	movs	r0, r3
   1b540:	4b1e      	ldr	r3, [pc, #120]	; (1b5bc <vTaskDelay+0xc8>)
   1b542:	4798      	blx	r3
   1b544:	0003      	movs	r3, r0
   1b546:	b2db      	uxtb	r3, r3
   1b548:	0018      	movs	r0, r3
   1b54a:	4b1d      	ldr	r3, [pc, #116]	; (1b5c0 <vTaskDelay+0xcc>)
   1b54c:	4798      	blx	r3
   1b54e:	4b1d      	ldr	r3, [pc, #116]	; (1b5c4 <vTaskDelay+0xd0>)
   1b550:	4798      	blx	r3
   1b552:	0003      	movs	r3, r0
   1b554:	0018      	movs	r0, r3
   1b556:	4b16      	ldr	r3, [pc, #88]	; (1b5b0 <vTaskDelay+0xbc>)
   1b558:	4798      	blx	r3
   1b55a:	0003      	movs	r3, r0
   1b55c:	001a      	movs	r2, r3
   1b55e:	4b15      	ldr	r3, [pc, #84]	; (1b5b4 <vTaskDelay+0xc0>)
   1b560:	881b      	ldrh	r3, [r3, #0]
   1b562:	4013      	ands	r3, r2
   1b564:	b29b      	uxth	r3, r3
   1b566:	2b00      	cmp	r3, #0
   1b568:	d00a      	beq.n	1b580 <vTaskDelay+0x8c>
   1b56a:	4b16      	ldr	r3, [pc, #88]	; (1b5c4 <vTaskDelay+0xd0>)
   1b56c:	4798      	blx	r3
   1b56e:	0003      	movs	r3, r0
   1b570:	0018      	movs	r0, r3
   1b572:	4b12      	ldr	r3, [pc, #72]	; (1b5bc <vTaskDelay+0xc8>)
   1b574:	4798      	blx	r3
   1b576:	0003      	movs	r3, r0
   1b578:	b2db      	uxtb	r3, r3
   1b57a:	0018      	movs	r0, r3
   1b57c:	4b10      	ldr	r3, [pc, #64]	; (1b5c0 <vTaskDelay+0xcc>)
   1b57e:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1b580:	687b      	ldr	r3, [r7, #4]
   1b582:	2100      	movs	r1, #0
   1b584:	0018      	movs	r0, r3
   1b586:	4b10      	ldr	r3, [pc, #64]	; (1b5c8 <vTaskDelay+0xd4>)
   1b588:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1b58a:	4b10      	ldr	r3, [pc, #64]	; (1b5cc <vTaskDelay+0xd8>)
   1b58c:	4798      	blx	r3
   1b58e:	0003      	movs	r3, r0
   1b590:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1b592:	68fb      	ldr	r3, [r7, #12]
   1b594:	2b00      	cmp	r3, #0
   1b596:	d101      	bne.n	1b59c <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1b598:	4b0d      	ldr	r3, [pc, #52]	; (1b5d0 <vTaskDelay+0xdc>)
   1b59a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1b59c:	46c0      	nop			; (mov r8, r8)
   1b59e:	46bd      	mov	sp, r7
   1b5a0:	b004      	add	sp, #16
   1b5a2:	bd80      	pop	{r7, pc}
   1b5a4:	20003d34 	.word	0x20003d34
   1b5a8:	0001b7b5 	.word	0x0001b7b5
   1b5ac:	20003c34 	.word	0x20003c34
   1b5b0:	000174f1 	.word	0x000174f1
   1b5b4:	200000b8 	.word	0x200000b8
   1b5b8:	000181f1 	.word	0x000181f1
   1b5bc:	000174d1 	.word	0x000174d1
   1b5c0:	00018681 	.word	0x00018681
   1b5c4:	0001778d 	.word	0x0001778d
   1b5c8:	0001c70d 	.word	0x0001c70d
   1b5cc:	0001b7cd 	.word	0x0001b7cd
   1b5d0:	000194e1 	.word	0x000194e1

0001b5d4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1b5d4:	b580      	push	{r7, lr}
   1b5d6:	b084      	sub	sp, #16
   1b5d8:	af00      	add	r7, sp, #0
   1b5da:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1b5dc:	4b42      	ldr	r3, [pc, #264]	; (1b6e8 <vTaskSuspend+0x114>)
   1b5de:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1b5e0:	687b      	ldr	r3, [r7, #4]
   1b5e2:	2b00      	cmp	r3, #0
   1b5e4:	d102      	bne.n	1b5ec <vTaskSuspend+0x18>
   1b5e6:	4b41      	ldr	r3, [pc, #260]	; (1b6ec <vTaskSuspend+0x118>)
   1b5e8:	681b      	ldr	r3, [r3, #0]
   1b5ea:	e000      	b.n	1b5ee <vTaskSuspend+0x1a>
   1b5ec:	687b      	ldr	r3, [r7, #4]
   1b5ee:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1b5f0:	4b3f      	ldr	r3, [pc, #252]	; (1b6f0 <vTaskSuspend+0x11c>)
   1b5f2:	4798      	blx	r3
   1b5f4:	0003      	movs	r3, r0
   1b5f6:	0018      	movs	r0, r3
   1b5f8:	4b3e      	ldr	r3, [pc, #248]	; (1b6f4 <vTaskSuspend+0x120>)
   1b5fa:	4798      	blx	r3
   1b5fc:	0003      	movs	r3, r0
   1b5fe:	001a      	movs	r2, r3
   1b600:	4b3d      	ldr	r3, [pc, #244]	; (1b6f8 <vTaskSuspend+0x124>)
   1b602:	881b      	ldrh	r3, [r3, #0]
   1b604:	4013      	ands	r3, r2
   1b606:	b29b      	uxth	r3, r3
   1b608:	2b00      	cmp	r3, #0
   1b60a:	d016      	beq.n	1b63a <vTaskSuspend+0x66>
   1b60c:	68fb      	ldr	r3, [r7, #12]
   1b60e:	0018      	movs	r0, r3
   1b610:	4b38      	ldr	r3, [pc, #224]	; (1b6f4 <vTaskSuspend+0x120>)
   1b612:	4798      	blx	r3
   1b614:	0003      	movs	r3, r0
   1b616:	001a      	movs	r2, r3
   1b618:	4b37      	ldr	r3, [pc, #220]	; (1b6f8 <vTaskSuspend+0x124>)
   1b61a:	881b      	ldrh	r3, [r3, #0]
   1b61c:	4013      	ands	r3, r2
   1b61e:	b29b      	uxth	r3, r3
   1b620:	2b00      	cmp	r3, #0
   1b622:	d00a      	beq.n	1b63a <vTaskSuspend+0x66>
   1b624:	68fb      	ldr	r3, [r7, #12]
   1b626:	0018      	movs	r0, r3
   1b628:	4b34      	ldr	r3, [pc, #208]	; (1b6fc <vTaskSuspend+0x128>)
   1b62a:	4798      	blx	r3
   1b62c:	0003      	movs	r3, r0
   1b62e:	b2db      	uxtb	r3, r3
   1b630:	001a      	movs	r2, r3
   1b632:	2103      	movs	r1, #3
   1b634:	208a      	movs	r0, #138	; 0x8a
   1b636:	4b32      	ldr	r3, [pc, #200]	; (1b700 <vTaskSuspend+0x12c>)
   1b638:	4798      	blx	r3
   1b63a:	68fb      	ldr	r3, [r7, #12]
   1b63c:	0018      	movs	r0, r3
   1b63e:	4b2f      	ldr	r3, [pc, #188]	; (1b6fc <vTaskSuspend+0x128>)
   1b640:	4798      	blx	r3
   1b642:	0003      	movs	r3, r0
   1b644:	b2db      	uxtb	r3, r3
   1b646:	0018      	movs	r0, r3
   1b648:	4b2e      	ldr	r3, [pc, #184]	; (1b704 <vTaskSuspend+0x130>)
   1b64a:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1b64c:	68fb      	ldr	r3, [r7, #12]
   1b64e:	3304      	adds	r3, #4
   1b650:	0018      	movs	r0, r3
   1b652:	4b2d      	ldr	r3, [pc, #180]	; (1b708 <vTaskSuspend+0x134>)
   1b654:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1b656:	68fb      	ldr	r3, [r7, #12]
   1b658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b65a:	2b00      	cmp	r3, #0
   1b65c:	d004      	beq.n	1b668 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1b65e:	68fb      	ldr	r3, [r7, #12]
   1b660:	3318      	adds	r3, #24
   1b662:	0018      	movs	r0, r3
   1b664:	4b28      	ldr	r3, [pc, #160]	; (1b708 <vTaskSuspend+0x134>)
   1b666:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1b668:	68fb      	ldr	r3, [r7, #12]
   1b66a:	1d1a      	adds	r2, r3, #4
   1b66c:	4b27      	ldr	r3, [pc, #156]	; (1b70c <vTaskSuspend+0x138>)
   1b66e:	0011      	movs	r1, r2
   1b670:	0018      	movs	r0, r3
   1b672:	4b27      	ldr	r3, [pc, #156]	; (1b710 <vTaskSuspend+0x13c>)
   1b674:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1b676:	68fb      	ldr	r3, [r7, #12]
   1b678:	2250      	movs	r2, #80	; 0x50
   1b67a:	5c9b      	ldrb	r3, [r3, r2]
   1b67c:	b2db      	uxtb	r3, r3
   1b67e:	2b01      	cmp	r3, #1
   1b680:	d103      	bne.n	1b68a <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1b682:	68fb      	ldr	r3, [r7, #12]
   1b684:	2250      	movs	r2, #80	; 0x50
   1b686:	2100      	movs	r1, #0
   1b688:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1b68a:	4b22      	ldr	r3, [pc, #136]	; (1b714 <vTaskSuspend+0x140>)
   1b68c:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1b68e:	4b22      	ldr	r3, [pc, #136]	; (1b718 <vTaskSuspend+0x144>)
   1b690:	681b      	ldr	r3, [r3, #0]
   1b692:	2b00      	cmp	r3, #0
   1b694:	d005      	beq.n	1b6a2 <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1b696:	4b14      	ldr	r3, [pc, #80]	; (1b6e8 <vTaskSuspend+0x114>)
   1b698:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1b69a:	4b20      	ldr	r3, [pc, #128]	; (1b71c <vTaskSuspend+0x148>)
   1b69c:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1b69e:	4b1d      	ldr	r3, [pc, #116]	; (1b714 <vTaskSuspend+0x140>)
   1b6a0:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1b6a2:	4b12      	ldr	r3, [pc, #72]	; (1b6ec <vTaskSuspend+0x118>)
   1b6a4:	681b      	ldr	r3, [r3, #0]
   1b6a6:	68fa      	ldr	r2, [r7, #12]
   1b6a8:	429a      	cmp	r2, r3
   1b6aa:	d118      	bne.n	1b6de <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1b6ac:	4b1a      	ldr	r3, [pc, #104]	; (1b718 <vTaskSuspend+0x144>)
   1b6ae:	681b      	ldr	r3, [r3, #0]
   1b6b0:	2b00      	cmp	r3, #0
   1b6b2:	d008      	beq.n	1b6c6 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1b6b4:	4b1a      	ldr	r3, [pc, #104]	; (1b720 <vTaskSuspend+0x14c>)
   1b6b6:	681b      	ldr	r3, [r3, #0]
   1b6b8:	2b00      	cmp	r3, #0
   1b6ba:	d001      	beq.n	1b6c0 <vTaskSuspend+0xec>
   1b6bc:	b672      	cpsid	i
   1b6be:	e7fe      	b.n	1b6be <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1b6c0:	4b18      	ldr	r3, [pc, #96]	; (1b724 <vTaskSuspend+0x150>)
   1b6c2:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1b6c4:	e00b      	b.n	1b6de <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1b6c6:	4b11      	ldr	r3, [pc, #68]	; (1b70c <vTaskSuspend+0x138>)
   1b6c8:	681a      	ldr	r2, [r3, #0]
   1b6ca:	4b17      	ldr	r3, [pc, #92]	; (1b728 <vTaskSuspend+0x154>)
   1b6cc:	681b      	ldr	r3, [r3, #0]
   1b6ce:	429a      	cmp	r2, r3
   1b6d0:	d103      	bne.n	1b6da <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1b6d2:	4b06      	ldr	r3, [pc, #24]	; (1b6ec <vTaskSuspend+0x118>)
   1b6d4:	2200      	movs	r2, #0
   1b6d6:	601a      	str	r2, [r3, #0]
	}
   1b6d8:	e001      	b.n	1b6de <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1b6da:	4b14      	ldr	r3, [pc, #80]	; (1b72c <vTaskSuspend+0x158>)
   1b6dc:	4798      	blx	r3
	}
   1b6de:	46c0      	nop			; (mov r8, r8)
   1b6e0:	46bd      	mov	sp, r7
   1b6e2:	b004      	add	sp, #16
   1b6e4:	bd80      	pop	{r7, pc}
   1b6e6:	46c0      	nop			; (mov r8, r8)
   1b6e8:	000194f9 	.word	0x000194f9
   1b6ec:	20003c34 	.word	0x20003c34
   1b6f0:	0001778d 	.word	0x0001778d
   1b6f4:	000174f1 	.word	0x000174f1
   1b6f8:	200000b8 	.word	0x200000b8
   1b6fc:	000174d1 	.word	0x000174d1
   1b700:	00017ee9 	.word	0x00017ee9
   1b704:	00018681 	.word	0x00018681
   1b708:	0001936b 	.word	0x0001936b
   1b70c:	20003cf8 	.word	0x20003cf8
   1b710:	000192bb 	.word	0x000192bb
   1b714:	0001951d 	.word	0x0001951d
   1b718:	20003d18 	.word	0x20003d18
   1b71c:	0001c1b9 	.word	0x0001c1b9
   1b720:	20003d34 	.word	0x20003d34
   1b724:	000194e1 	.word	0x000194e1
   1b728:	20003d0c 	.word	0x20003d0c
   1b72c:	0001bb49 	.word	0x0001bb49

0001b730 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1b730:	b590      	push	{r4, r7, lr}
   1b732:	b085      	sub	sp, #20
   1b734:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1b736:	4916      	ldr	r1, [pc, #88]	; (1b790 <vTaskStartScheduler+0x60>)
   1b738:	4816      	ldr	r0, [pc, #88]	; (1b794 <vTaskStartScheduler+0x64>)
   1b73a:	4b17      	ldr	r3, [pc, #92]	; (1b798 <vTaskStartScheduler+0x68>)
   1b73c:	9301      	str	r3, [sp, #4]
   1b73e:	2300      	movs	r3, #0
   1b740:	9300      	str	r3, [sp, #0]
   1b742:	2300      	movs	r3, #0
   1b744:	2264      	movs	r2, #100	; 0x64
   1b746:	4c15      	ldr	r4, [pc, #84]	; (1b79c <vTaskStartScheduler+0x6c>)
   1b748:	47a0      	blx	r4
   1b74a:	0003      	movs	r3, r0
   1b74c:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1b74e:	687b      	ldr	r3, [r7, #4]
   1b750:	2b01      	cmp	r3, #1
   1b752:	d103      	bne.n	1b75c <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1b754:	4b12      	ldr	r3, [pc, #72]	; (1b7a0 <vTaskStartScheduler+0x70>)
   1b756:	4798      	blx	r3
   1b758:	0003      	movs	r3, r0
   1b75a:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1b75c:	687b      	ldr	r3, [r7, #4]
   1b75e:	2b01      	cmp	r3, #1
   1b760:	d10d      	bne.n	1b77e <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1b762:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1b764:	4b0f      	ldr	r3, [pc, #60]	; (1b7a4 <vTaskStartScheduler+0x74>)
   1b766:	2201      	movs	r2, #1
   1b768:	4252      	negs	r2, r2
   1b76a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1b76c:	4b0e      	ldr	r3, [pc, #56]	; (1b7a8 <vTaskStartScheduler+0x78>)
   1b76e:	2201      	movs	r2, #1
   1b770:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1b772:	4b0e      	ldr	r3, [pc, #56]	; (1b7ac <vTaskStartScheduler+0x7c>)
   1b774:	2200      	movs	r2, #0
   1b776:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1b778:	4b0d      	ldr	r3, [pc, #52]	; (1b7b0 <vTaskStartScheduler+0x80>)
   1b77a:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1b77c:	e004      	b.n	1b788 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1b77e:	687b      	ldr	r3, [r7, #4]
   1b780:	3301      	adds	r3, #1
   1b782:	d101      	bne.n	1b788 <vTaskStartScheduler+0x58>
   1b784:	b672      	cpsid	i
   1b786:	e7fe      	b.n	1b786 <vTaskStartScheduler+0x56>
}
   1b788:	46c0      	nop			; (mov r8, r8)
   1b78a:	46bd      	mov	sp, r7
   1b78c:	b003      	add	sp, #12
   1b78e:	bd90      	pop	{r4, r7, pc}
   1b790:	0003709c 	.word	0x0003709c
   1b794:	0001c001 	.word	0x0001c001
   1b798:	20003d30 	.word	0x20003d30
   1b79c:	0001b159 	.word	0x0001b159
   1b7a0:	0001c7c1 	.word	0x0001c7c1
   1b7a4:	20003d2c 	.word	0x20003d2c
   1b7a8:	20003d18 	.word	0x20003d18
   1b7ac:	20003d10 	.word	0x20003d10
   1b7b0:	00019489 	.word	0x00019489

0001b7b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1b7b4:	b580      	push	{r7, lr}
   1b7b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1b7b8:	4b03      	ldr	r3, [pc, #12]	; (1b7c8 <vTaskSuspendAll+0x14>)
   1b7ba:	681b      	ldr	r3, [r3, #0]
   1b7bc:	1c5a      	adds	r2, r3, #1
   1b7be:	4b02      	ldr	r3, [pc, #8]	; (1b7c8 <vTaskSuspendAll+0x14>)
   1b7c0:	601a      	str	r2, [r3, #0]
}
   1b7c2:	46c0      	nop			; (mov r8, r8)
   1b7c4:	46bd      	mov	sp, r7
   1b7c6:	bd80      	pop	{r7, pc}
   1b7c8:	20003d34 	.word	0x20003d34

0001b7cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1b7cc:	b580      	push	{r7, lr}
   1b7ce:	b084      	sub	sp, #16
   1b7d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1b7d2:	2300      	movs	r3, #0
   1b7d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1b7d6:	2300      	movs	r3, #0
   1b7d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1b7da:	4b45      	ldr	r3, [pc, #276]	; (1b8f0 <xTaskResumeAll+0x124>)
   1b7dc:	681b      	ldr	r3, [r3, #0]
   1b7de:	2b00      	cmp	r3, #0
   1b7e0:	d101      	bne.n	1b7e6 <xTaskResumeAll+0x1a>
   1b7e2:	b672      	cpsid	i
   1b7e4:	e7fe      	b.n	1b7e4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1b7e6:	4b43      	ldr	r3, [pc, #268]	; (1b8f4 <xTaskResumeAll+0x128>)
   1b7e8:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1b7ea:	4b41      	ldr	r3, [pc, #260]	; (1b8f0 <xTaskResumeAll+0x124>)
   1b7ec:	681b      	ldr	r3, [r3, #0]
   1b7ee:	1e5a      	subs	r2, r3, #1
   1b7f0:	4b3f      	ldr	r3, [pc, #252]	; (1b8f0 <xTaskResumeAll+0x124>)
   1b7f2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b7f4:	4b3e      	ldr	r3, [pc, #248]	; (1b8f0 <xTaskResumeAll+0x124>)
   1b7f6:	681b      	ldr	r3, [r3, #0]
   1b7f8:	2b00      	cmp	r3, #0
   1b7fa:	d000      	beq.n	1b7fe <xTaskResumeAll+0x32>
   1b7fc:	e071      	b.n	1b8e2 <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1b7fe:	4b3e      	ldr	r3, [pc, #248]	; (1b8f8 <xTaskResumeAll+0x12c>)
   1b800:	681b      	ldr	r3, [r3, #0]
   1b802:	2b00      	cmp	r3, #0
   1b804:	d100      	bne.n	1b808 <xTaskResumeAll+0x3c>
   1b806:	e06c      	b.n	1b8e2 <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1b808:	e044      	b.n	1b894 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1b80a:	4b3c      	ldr	r3, [pc, #240]	; (1b8fc <xTaskResumeAll+0x130>)
   1b80c:	68db      	ldr	r3, [r3, #12]
   1b80e:	68db      	ldr	r3, [r3, #12]
   1b810:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1b812:	68fb      	ldr	r3, [r7, #12]
   1b814:	3318      	adds	r3, #24
   1b816:	0018      	movs	r0, r3
   1b818:	4b39      	ldr	r3, [pc, #228]	; (1b900 <xTaskResumeAll+0x134>)
   1b81a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1b81c:	68fb      	ldr	r3, [r7, #12]
   1b81e:	3304      	adds	r3, #4
   1b820:	0018      	movs	r0, r3
   1b822:	4b37      	ldr	r3, [pc, #220]	; (1b900 <xTaskResumeAll+0x134>)
   1b824:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1b826:	68fb      	ldr	r3, [r7, #12]
   1b828:	0018      	movs	r0, r3
   1b82a:	4b36      	ldr	r3, [pc, #216]	; (1b904 <xTaskResumeAll+0x138>)
   1b82c:	4798      	blx	r3
   1b82e:	0003      	movs	r3, r0
   1b830:	001a      	movs	r2, r3
   1b832:	4b35      	ldr	r3, [pc, #212]	; (1b908 <xTaskResumeAll+0x13c>)
   1b834:	881b      	ldrh	r3, [r3, #0]
   1b836:	4013      	ands	r3, r2
   1b838:	b29b      	uxth	r3, r3
   1b83a:	2b00      	cmp	r3, #0
   1b83c:	d008      	beq.n	1b850 <xTaskResumeAll+0x84>
   1b83e:	68fb      	ldr	r3, [r7, #12]
   1b840:	0018      	movs	r0, r3
   1b842:	4b32      	ldr	r3, [pc, #200]	; (1b90c <xTaskResumeAll+0x140>)
   1b844:	4798      	blx	r3
   1b846:	0003      	movs	r3, r0
   1b848:	b2db      	uxtb	r3, r3
   1b84a:	0018      	movs	r0, r3
   1b84c:	4b30      	ldr	r3, [pc, #192]	; (1b910 <xTaskResumeAll+0x144>)
   1b84e:	4798      	blx	r3
   1b850:	68fb      	ldr	r3, [r7, #12]
   1b852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b854:	4b2f      	ldr	r3, [pc, #188]	; (1b914 <xTaskResumeAll+0x148>)
   1b856:	681b      	ldr	r3, [r3, #0]
   1b858:	429a      	cmp	r2, r3
   1b85a:	d903      	bls.n	1b864 <xTaskResumeAll+0x98>
   1b85c:	68fb      	ldr	r3, [r7, #12]
   1b85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b860:	4b2c      	ldr	r3, [pc, #176]	; (1b914 <xTaskResumeAll+0x148>)
   1b862:	601a      	str	r2, [r3, #0]
   1b864:	68fb      	ldr	r3, [r7, #12]
   1b866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b868:	0013      	movs	r3, r2
   1b86a:	009b      	lsls	r3, r3, #2
   1b86c:	189b      	adds	r3, r3, r2
   1b86e:	009b      	lsls	r3, r3, #2
   1b870:	4a29      	ldr	r2, [pc, #164]	; (1b918 <xTaskResumeAll+0x14c>)
   1b872:	189a      	adds	r2, r3, r2
   1b874:	68fb      	ldr	r3, [r7, #12]
   1b876:	3304      	adds	r3, #4
   1b878:	0019      	movs	r1, r3
   1b87a:	0010      	movs	r0, r2
   1b87c:	4b27      	ldr	r3, [pc, #156]	; (1b91c <xTaskResumeAll+0x150>)
   1b87e:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1b880:	68fb      	ldr	r3, [r7, #12]
   1b882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b884:	4b26      	ldr	r3, [pc, #152]	; (1b920 <xTaskResumeAll+0x154>)
   1b886:	681b      	ldr	r3, [r3, #0]
   1b888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b88a:	429a      	cmp	r2, r3
   1b88c:	d302      	bcc.n	1b894 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1b88e:	4b25      	ldr	r3, [pc, #148]	; (1b924 <xTaskResumeAll+0x158>)
   1b890:	2201      	movs	r2, #1
   1b892:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1b894:	4b19      	ldr	r3, [pc, #100]	; (1b8fc <xTaskResumeAll+0x130>)
   1b896:	681b      	ldr	r3, [r3, #0]
   1b898:	2b00      	cmp	r3, #0
   1b89a:	d1b6      	bne.n	1b80a <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1b89c:	68fb      	ldr	r3, [r7, #12]
   1b89e:	2b00      	cmp	r3, #0
   1b8a0:	d001      	beq.n	1b8a6 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1b8a2:	4b21      	ldr	r3, [pc, #132]	; (1b928 <xTaskResumeAll+0x15c>)
   1b8a4:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1b8a6:	4b21      	ldr	r3, [pc, #132]	; (1b92c <xTaskResumeAll+0x160>)
   1b8a8:	681b      	ldr	r3, [r3, #0]
   1b8aa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1b8ac:	687b      	ldr	r3, [r7, #4]
   1b8ae:	2b00      	cmp	r3, #0
   1b8b0:	d00f      	beq.n	1b8d2 <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1b8b2:	4b1f      	ldr	r3, [pc, #124]	; (1b930 <xTaskResumeAll+0x164>)
   1b8b4:	4798      	blx	r3
   1b8b6:	1e03      	subs	r3, r0, #0
   1b8b8:	d002      	beq.n	1b8c0 <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1b8ba:	4b1a      	ldr	r3, [pc, #104]	; (1b924 <xTaskResumeAll+0x158>)
   1b8bc:	2201      	movs	r2, #1
   1b8be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1b8c0:	687b      	ldr	r3, [r7, #4]
   1b8c2:	3b01      	subs	r3, #1
   1b8c4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1b8c6:	687b      	ldr	r3, [r7, #4]
   1b8c8:	2b00      	cmp	r3, #0
   1b8ca:	d1f2      	bne.n	1b8b2 <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1b8cc:	4b17      	ldr	r3, [pc, #92]	; (1b92c <xTaskResumeAll+0x160>)
   1b8ce:	2200      	movs	r2, #0
   1b8d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1b8d2:	4b14      	ldr	r3, [pc, #80]	; (1b924 <xTaskResumeAll+0x158>)
   1b8d4:	681b      	ldr	r3, [r3, #0]
   1b8d6:	2b00      	cmp	r3, #0
   1b8d8:	d003      	beq.n	1b8e2 <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1b8da:	2301      	movs	r3, #1
   1b8dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1b8de:	4b15      	ldr	r3, [pc, #84]	; (1b934 <xTaskResumeAll+0x168>)
   1b8e0:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1b8e2:	4b15      	ldr	r3, [pc, #84]	; (1b938 <xTaskResumeAll+0x16c>)
   1b8e4:	4798      	blx	r3

	return xAlreadyYielded;
   1b8e6:	68bb      	ldr	r3, [r7, #8]
}
   1b8e8:	0018      	movs	r0, r3
   1b8ea:	46bd      	mov	sp, r7
   1b8ec:	b004      	add	sp, #16
   1b8ee:	bd80      	pop	{r7, pc}
   1b8f0:	20003d34 	.word	0x20003d34
   1b8f4:	000194f9 	.word	0x000194f9
   1b8f8:	20003d0c 	.word	0x20003d0c
   1b8fc:	20003ccc 	.word	0x20003ccc
   1b900:	0001936b 	.word	0x0001936b
   1b904:	000174f1 	.word	0x000174f1
   1b908:	200000b8 	.word	0x200000b8
   1b90c:	000174d1 	.word	0x000174d1
   1b910:	00017ca1 	.word	0x00017ca1
   1b914:	20003d14 	.word	0x20003d14
   1b918:	20003c38 	.word	0x20003c38
   1b91c:	000192bb 	.word	0x000192bb
   1b920:	20003c34 	.word	0x20003c34
   1b924:	20003d20 	.word	0x20003d20
   1b928:	0001c1b9 	.word	0x0001c1b9
   1b92c:	20003d1c 	.word	0x20003d1c
   1b930:	0001b959 	.word	0x0001b959
   1b934:	000194e1 	.word	0x000194e1
   1b938:	0001951d 	.word	0x0001951d

0001b93c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1b93c:	b580      	push	{r7, lr}
   1b93e:	b082      	sub	sp, #8
   1b940:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1b942:	4b04      	ldr	r3, [pc, #16]	; (1b954 <xTaskGetTickCount+0x18>)
   1b944:	681b      	ldr	r3, [r3, #0]
   1b946:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1b948:	687b      	ldr	r3, [r7, #4]
}
   1b94a:	0018      	movs	r0, r3
   1b94c:	46bd      	mov	sp, r7
   1b94e:	b002      	add	sp, #8
   1b950:	bd80      	pop	{r7, pc}
   1b952:	46c0      	nop			; (mov r8, r8)
   1b954:	20003d10 	.word	0x20003d10

0001b958 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1b958:	b580      	push	{r7, lr}
   1b95a:	b086      	sub	sp, #24
   1b95c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1b95e:	2300      	movs	r3, #0
   1b960:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1b962:	4b64      	ldr	r3, [pc, #400]	; (1baf4 <xTaskIncrementTick+0x19c>)
   1b964:	681b      	ldr	r3, [r3, #0]
   1b966:	2b01      	cmp	r3, #1
   1b968:	d003      	beq.n	1b972 <xTaskIncrementTick+0x1a>
   1b96a:	4b63      	ldr	r3, [pc, #396]	; (1baf8 <xTaskIncrementTick+0x1a0>)
   1b96c:	681b      	ldr	r3, [r3, #0]
   1b96e:	2b00      	cmp	r3, #0
   1b970:	d107      	bne.n	1b982 <xTaskIncrementTick+0x2a>
   1b972:	4b62      	ldr	r3, [pc, #392]	; (1bafc <xTaskIncrementTick+0x1a4>)
   1b974:	681b      	ldr	r3, [r3, #0]
   1b976:	1c5a      	adds	r2, r3, #1
   1b978:	4b60      	ldr	r3, [pc, #384]	; (1bafc <xTaskIncrementTick+0x1a4>)
   1b97a:	601a      	str	r2, [r3, #0]
   1b97c:	2000      	movs	r0, #0
   1b97e:	4b60      	ldr	r3, [pc, #384]	; (1bb00 <xTaskIncrementTick+0x1a8>)
   1b980:	4798      	blx	r3
   1b982:	4b5c      	ldr	r3, [pc, #368]	; (1baf4 <xTaskIncrementTick+0x19c>)
   1b984:	681b      	ldr	r3, [r3, #0]
   1b986:	2b00      	cmp	r3, #0
   1b988:	d106      	bne.n	1b998 <xTaskIncrementTick+0x40>
   1b98a:	4b5e      	ldr	r3, [pc, #376]	; (1bb04 <xTaskIncrementTick+0x1ac>)
   1b98c:	681b      	ldr	r3, [r3, #0]
   1b98e:	3301      	adds	r3, #1
   1b990:	0019      	movs	r1, r3
   1b992:	2003      	movs	r0, #3
   1b994:	4b5c      	ldr	r3, [pc, #368]	; (1bb08 <xTaskIncrementTick+0x1b0>)
   1b996:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b998:	4b56      	ldr	r3, [pc, #344]	; (1baf4 <xTaskIncrementTick+0x19c>)
   1b99a:	681b      	ldr	r3, [r3, #0]
   1b99c:	2b00      	cmp	r3, #0
   1b99e:	d000      	beq.n	1b9a2 <xTaskIncrementTick+0x4a>
   1b9a0:	e098      	b.n	1bad4 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1b9a2:	4b58      	ldr	r3, [pc, #352]	; (1bb04 <xTaskIncrementTick+0x1ac>)
   1b9a4:	681b      	ldr	r3, [r3, #0]
   1b9a6:	3301      	adds	r3, #1
   1b9a8:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1b9aa:	4b56      	ldr	r3, [pc, #344]	; (1bb04 <xTaskIncrementTick+0x1ac>)
   1b9ac:	693a      	ldr	r2, [r7, #16]
   1b9ae:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1b9b0:	693b      	ldr	r3, [r7, #16]
   1b9b2:	2b00      	cmp	r3, #0
   1b9b4:	d117      	bne.n	1b9e6 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1b9b6:	4b55      	ldr	r3, [pc, #340]	; (1bb0c <xTaskIncrementTick+0x1b4>)
   1b9b8:	681b      	ldr	r3, [r3, #0]
   1b9ba:	681b      	ldr	r3, [r3, #0]
   1b9bc:	2b00      	cmp	r3, #0
   1b9be:	d001      	beq.n	1b9c4 <xTaskIncrementTick+0x6c>
   1b9c0:	b672      	cpsid	i
   1b9c2:	e7fe      	b.n	1b9c2 <xTaskIncrementTick+0x6a>
   1b9c4:	4b51      	ldr	r3, [pc, #324]	; (1bb0c <xTaskIncrementTick+0x1b4>)
   1b9c6:	681b      	ldr	r3, [r3, #0]
   1b9c8:	60fb      	str	r3, [r7, #12]
   1b9ca:	4b51      	ldr	r3, [pc, #324]	; (1bb10 <xTaskIncrementTick+0x1b8>)
   1b9cc:	681a      	ldr	r2, [r3, #0]
   1b9ce:	4b4f      	ldr	r3, [pc, #316]	; (1bb0c <xTaskIncrementTick+0x1b4>)
   1b9d0:	601a      	str	r2, [r3, #0]
   1b9d2:	4b4f      	ldr	r3, [pc, #316]	; (1bb10 <xTaskIncrementTick+0x1b8>)
   1b9d4:	68fa      	ldr	r2, [r7, #12]
   1b9d6:	601a      	str	r2, [r3, #0]
   1b9d8:	4b4e      	ldr	r3, [pc, #312]	; (1bb14 <xTaskIncrementTick+0x1bc>)
   1b9da:	681b      	ldr	r3, [r3, #0]
   1b9dc:	1c5a      	adds	r2, r3, #1
   1b9de:	4b4d      	ldr	r3, [pc, #308]	; (1bb14 <xTaskIncrementTick+0x1bc>)
   1b9e0:	601a      	str	r2, [r3, #0]
   1b9e2:	4b4d      	ldr	r3, [pc, #308]	; (1bb18 <xTaskIncrementTick+0x1c0>)
   1b9e4:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1b9e6:	4b4d      	ldr	r3, [pc, #308]	; (1bb1c <xTaskIncrementTick+0x1c4>)
   1b9e8:	681b      	ldr	r3, [r3, #0]
   1b9ea:	693a      	ldr	r2, [r7, #16]
   1b9ec:	429a      	cmp	r2, r3
   1b9ee:	d363      	bcc.n	1bab8 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1b9f0:	4b46      	ldr	r3, [pc, #280]	; (1bb0c <xTaskIncrementTick+0x1b4>)
   1b9f2:	681b      	ldr	r3, [r3, #0]
   1b9f4:	681b      	ldr	r3, [r3, #0]
   1b9f6:	2b00      	cmp	r3, #0
   1b9f8:	d101      	bne.n	1b9fe <xTaskIncrementTick+0xa6>
   1b9fa:	2301      	movs	r3, #1
   1b9fc:	e000      	b.n	1ba00 <xTaskIncrementTick+0xa8>
   1b9fe:	2300      	movs	r3, #0
   1ba00:	2b00      	cmp	r3, #0
   1ba02:	d004      	beq.n	1ba0e <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ba04:	4b45      	ldr	r3, [pc, #276]	; (1bb1c <xTaskIncrementTick+0x1c4>)
   1ba06:	2201      	movs	r2, #1
   1ba08:	4252      	negs	r2, r2
   1ba0a:	601a      	str	r2, [r3, #0]
					break;
   1ba0c:	e054      	b.n	1bab8 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1ba0e:	4b3f      	ldr	r3, [pc, #252]	; (1bb0c <xTaskIncrementTick+0x1b4>)
   1ba10:	681b      	ldr	r3, [r3, #0]
   1ba12:	68db      	ldr	r3, [r3, #12]
   1ba14:	68db      	ldr	r3, [r3, #12]
   1ba16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1ba18:	68bb      	ldr	r3, [r7, #8]
   1ba1a:	685b      	ldr	r3, [r3, #4]
   1ba1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1ba1e:	693a      	ldr	r2, [r7, #16]
   1ba20:	687b      	ldr	r3, [r7, #4]
   1ba22:	429a      	cmp	r2, r3
   1ba24:	d203      	bcs.n	1ba2e <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1ba26:	4b3d      	ldr	r3, [pc, #244]	; (1bb1c <xTaskIncrementTick+0x1c4>)
   1ba28:	687a      	ldr	r2, [r7, #4]
   1ba2a:	601a      	str	r2, [r3, #0]
						break;
   1ba2c:	e044      	b.n	1bab8 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1ba2e:	68bb      	ldr	r3, [r7, #8]
   1ba30:	3304      	adds	r3, #4
   1ba32:	0018      	movs	r0, r3
   1ba34:	4b3a      	ldr	r3, [pc, #232]	; (1bb20 <xTaskIncrementTick+0x1c8>)
   1ba36:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1ba38:	68bb      	ldr	r3, [r7, #8]
   1ba3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ba3c:	2b00      	cmp	r3, #0
   1ba3e:	d004      	beq.n	1ba4a <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1ba40:	68bb      	ldr	r3, [r7, #8]
   1ba42:	3318      	adds	r3, #24
   1ba44:	0018      	movs	r0, r3
   1ba46:	4b36      	ldr	r3, [pc, #216]	; (1bb20 <xTaskIncrementTick+0x1c8>)
   1ba48:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1ba4a:	68bb      	ldr	r3, [r7, #8]
   1ba4c:	0018      	movs	r0, r3
   1ba4e:	4b35      	ldr	r3, [pc, #212]	; (1bb24 <xTaskIncrementTick+0x1cc>)
   1ba50:	4798      	blx	r3
   1ba52:	0003      	movs	r3, r0
   1ba54:	001a      	movs	r2, r3
   1ba56:	4b34      	ldr	r3, [pc, #208]	; (1bb28 <xTaskIncrementTick+0x1d0>)
   1ba58:	881b      	ldrh	r3, [r3, #0]
   1ba5a:	4013      	ands	r3, r2
   1ba5c:	b29b      	uxth	r3, r3
   1ba5e:	2b00      	cmp	r3, #0
   1ba60:	d008      	beq.n	1ba74 <xTaskIncrementTick+0x11c>
   1ba62:	68bb      	ldr	r3, [r7, #8]
   1ba64:	0018      	movs	r0, r3
   1ba66:	4b31      	ldr	r3, [pc, #196]	; (1bb2c <xTaskIncrementTick+0x1d4>)
   1ba68:	4798      	blx	r3
   1ba6a:	0003      	movs	r3, r0
   1ba6c:	b2db      	uxtb	r3, r3
   1ba6e:	0018      	movs	r0, r3
   1ba70:	4b2f      	ldr	r3, [pc, #188]	; (1bb30 <xTaskIncrementTick+0x1d8>)
   1ba72:	4798      	blx	r3
   1ba74:	68bb      	ldr	r3, [r7, #8]
   1ba76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba78:	4b2e      	ldr	r3, [pc, #184]	; (1bb34 <xTaskIncrementTick+0x1dc>)
   1ba7a:	681b      	ldr	r3, [r3, #0]
   1ba7c:	429a      	cmp	r2, r3
   1ba7e:	d903      	bls.n	1ba88 <xTaskIncrementTick+0x130>
   1ba80:	68bb      	ldr	r3, [r7, #8]
   1ba82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba84:	4b2b      	ldr	r3, [pc, #172]	; (1bb34 <xTaskIncrementTick+0x1dc>)
   1ba86:	601a      	str	r2, [r3, #0]
   1ba88:	68bb      	ldr	r3, [r7, #8]
   1ba8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba8c:	0013      	movs	r3, r2
   1ba8e:	009b      	lsls	r3, r3, #2
   1ba90:	189b      	adds	r3, r3, r2
   1ba92:	009b      	lsls	r3, r3, #2
   1ba94:	4a28      	ldr	r2, [pc, #160]	; (1bb38 <xTaskIncrementTick+0x1e0>)
   1ba96:	189a      	adds	r2, r3, r2
   1ba98:	68bb      	ldr	r3, [r7, #8]
   1ba9a:	3304      	adds	r3, #4
   1ba9c:	0019      	movs	r1, r3
   1ba9e:	0010      	movs	r0, r2
   1baa0:	4b26      	ldr	r3, [pc, #152]	; (1bb3c <xTaskIncrementTick+0x1e4>)
   1baa2:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1baa4:	68bb      	ldr	r3, [r7, #8]
   1baa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1baa8:	4b25      	ldr	r3, [pc, #148]	; (1bb40 <xTaskIncrementTick+0x1e8>)
   1baaa:	681b      	ldr	r3, [r3, #0]
   1baac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1baae:	429a      	cmp	r2, r3
   1bab0:	d39e      	bcc.n	1b9f0 <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1bab2:	2301      	movs	r3, #1
   1bab4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1bab6:	e79b      	b.n	1b9f0 <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1bab8:	4b21      	ldr	r3, [pc, #132]	; (1bb40 <xTaskIncrementTick+0x1e8>)
   1baba:	681b      	ldr	r3, [r3, #0]
   1babc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1babe:	491e      	ldr	r1, [pc, #120]	; (1bb38 <xTaskIncrementTick+0x1e0>)
   1bac0:	0013      	movs	r3, r2
   1bac2:	009b      	lsls	r3, r3, #2
   1bac4:	189b      	adds	r3, r3, r2
   1bac6:	009b      	lsls	r3, r3, #2
   1bac8:	585b      	ldr	r3, [r3, r1]
   1baca:	2b01      	cmp	r3, #1
   1bacc:	d907      	bls.n	1bade <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1bace:	2301      	movs	r3, #1
   1bad0:	617b      	str	r3, [r7, #20]
   1bad2:	e004      	b.n	1bade <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1bad4:	4b08      	ldr	r3, [pc, #32]	; (1baf8 <xTaskIncrementTick+0x1a0>)
   1bad6:	681b      	ldr	r3, [r3, #0]
   1bad8:	1c5a      	adds	r2, r3, #1
   1bada:	4b07      	ldr	r3, [pc, #28]	; (1baf8 <xTaskIncrementTick+0x1a0>)
   1badc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1bade:	4b19      	ldr	r3, [pc, #100]	; (1bb44 <xTaskIncrementTick+0x1ec>)
   1bae0:	681b      	ldr	r3, [r3, #0]
   1bae2:	2b00      	cmp	r3, #0
   1bae4:	d001      	beq.n	1baea <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1bae6:	2301      	movs	r3, #1
   1bae8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1baea:	697b      	ldr	r3, [r7, #20]
}
   1baec:	0018      	movs	r0, r3
   1baee:	46bd      	mov	sp, r7
   1baf0:	b006      	add	sp, #24
   1baf2:	bd80      	pop	{r7, pc}
   1baf4:	20003d34 	.word	0x20003d34
   1baf8:	20003d1c 	.word	0x20003d1c
   1bafc:	20000c7c 	.word	0x20000c7c
   1bb00:	00019185 	.word	0x00019185
   1bb04:	20003d10 	.word	0x20003d10
   1bb08:	000181f1 	.word	0x000181f1
   1bb0c:	20003cc4 	.word	0x20003cc4
   1bb10:	20003cc8 	.word	0x20003cc8
   1bb14:	20003d24 	.word	0x20003d24
   1bb18:	0001c1b9 	.word	0x0001c1b9
   1bb1c:	20003d2c 	.word	0x20003d2c
   1bb20:	0001936b 	.word	0x0001936b
   1bb24:	000174f1 	.word	0x000174f1
   1bb28:	200000b8 	.word	0x200000b8
   1bb2c:	000174d1 	.word	0x000174d1
   1bb30:	00017ca1 	.word	0x00017ca1
   1bb34:	20003d14 	.word	0x20003d14
   1bb38:	20003c38 	.word	0x20003c38
   1bb3c:	000192bb 	.word	0x000192bb
   1bb40:	20003c34 	.word	0x20003c34
   1bb44:	20003d20 	.word	0x20003d20

0001bb48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1bb48:	b580      	push	{r7, lr}
   1bb4a:	b082      	sub	sp, #8
   1bb4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1bb4e:	4b3a      	ldr	r3, [pc, #232]	; (1bc38 <vTaskSwitchContext+0xf0>)
   1bb50:	681b      	ldr	r3, [r3, #0]
   1bb52:	2b00      	cmp	r3, #0
   1bb54:	d003      	beq.n	1bb5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1bb56:	4b39      	ldr	r3, [pc, #228]	; (1bc3c <vTaskSwitchContext+0xf4>)
   1bb58:	2201      	movs	r2, #1
   1bb5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1bb5c:	e067      	b.n	1bc2e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1bb5e:	4b37      	ldr	r3, [pc, #220]	; (1bc3c <vTaskSwitchContext+0xf4>)
   1bb60:	2200      	movs	r2, #0
   1bb62:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1bb64:	4b36      	ldr	r3, [pc, #216]	; (1bc40 <vTaskSwitchContext+0xf8>)
   1bb66:	681b      	ldr	r3, [r3, #0]
   1bb68:	681a      	ldr	r2, [r3, #0]
   1bb6a:	4b35      	ldr	r3, [pc, #212]	; (1bc40 <vTaskSwitchContext+0xf8>)
   1bb6c:	681b      	ldr	r3, [r3, #0]
   1bb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1bb70:	429a      	cmp	r2, r3
   1bb72:	d808      	bhi.n	1bb86 <vTaskSwitchContext+0x3e>
   1bb74:	4b32      	ldr	r3, [pc, #200]	; (1bc40 <vTaskSwitchContext+0xf8>)
   1bb76:	681a      	ldr	r2, [r3, #0]
   1bb78:	4b31      	ldr	r3, [pc, #196]	; (1bc40 <vTaskSwitchContext+0xf8>)
   1bb7a:	681b      	ldr	r3, [r3, #0]
   1bb7c:	3334      	adds	r3, #52	; 0x34
   1bb7e:	0019      	movs	r1, r3
   1bb80:	0010      	movs	r0, r2
   1bb82:	4b30      	ldr	r3, [pc, #192]	; (1bc44 <vTaskSwitchContext+0xfc>)
   1bb84:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1bb86:	4b30      	ldr	r3, [pc, #192]	; (1bc48 <vTaskSwitchContext+0x100>)
   1bb88:	681b      	ldr	r3, [r3, #0]
   1bb8a:	607b      	str	r3, [r7, #4]
   1bb8c:	e007      	b.n	1bb9e <vTaskSwitchContext+0x56>
   1bb8e:	687b      	ldr	r3, [r7, #4]
   1bb90:	2b00      	cmp	r3, #0
   1bb92:	d101      	bne.n	1bb98 <vTaskSwitchContext+0x50>
   1bb94:	b672      	cpsid	i
   1bb96:	e7fe      	b.n	1bb96 <vTaskSwitchContext+0x4e>
   1bb98:	687b      	ldr	r3, [r7, #4]
   1bb9a:	3b01      	subs	r3, #1
   1bb9c:	607b      	str	r3, [r7, #4]
   1bb9e:	492b      	ldr	r1, [pc, #172]	; (1bc4c <vTaskSwitchContext+0x104>)
   1bba0:	687a      	ldr	r2, [r7, #4]
   1bba2:	0013      	movs	r3, r2
   1bba4:	009b      	lsls	r3, r3, #2
   1bba6:	189b      	adds	r3, r3, r2
   1bba8:	009b      	lsls	r3, r3, #2
   1bbaa:	585b      	ldr	r3, [r3, r1]
   1bbac:	2b00      	cmp	r3, #0
   1bbae:	d0ee      	beq.n	1bb8e <vTaskSwitchContext+0x46>
   1bbb0:	687a      	ldr	r2, [r7, #4]
   1bbb2:	0013      	movs	r3, r2
   1bbb4:	009b      	lsls	r3, r3, #2
   1bbb6:	189b      	adds	r3, r3, r2
   1bbb8:	009b      	lsls	r3, r3, #2
   1bbba:	4a24      	ldr	r2, [pc, #144]	; (1bc4c <vTaskSwitchContext+0x104>)
   1bbbc:	189b      	adds	r3, r3, r2
   1bbbe:	603b      	str	r3, [r7, #0]
   1bbc0:	683b      	ldr	r3, [r7, #0]
   1bbc2:	685b      	ldr	r3, [r3, #4]
   1bbc4:	685a      	ldr	r2, [r3, #4]
   1bbc6:	683b      	ldr	r3, [r7, #0]
   1bbc8:	605a      	str	r2, [r3, #4]
   1bbca:	683b      	ldr	r3, [r7, #0]
   1bbcc:	685a      	ldr	r2, [r3, #4]
   1bbce:	683b      	ldr	r3, [r7, #0]
   1bbd0:	3308      	adds	r3, #8
   1bbd2:	429a      	cmp	r2, r3
   1bbd4:	d104      	bne.n	1bbe0 <vTaskSwitchContext+0x98>
   1bbd6:	683b      	ldr	r3, [r7, #0]
   1bbd8:	685b      	ldr	r3, [r3, #4]
   1bbda:	685a      	ldr	r2, [r3, #4]
   1bbdc:	683b      	ldr	r3, [r7, #0]
   1bbde:	605a      	str	r2, [r3, #4]
   1bbe0:	683b      	ldr	r3, [r7, #0]
   1bbe2:	685b      	ldr	r3, [r3, #4]
   1bbe4:	68da      	ldr	r2, [r3, #12]
   1bbe6:	4b16      	ldr	r3, [pc, #88]	; (1bc40 <vTaskSwitchContext+0xf8>)
   1bbe8:	601a      	str	r2, [r3, #0]
   1bbea:	4b17      	ldr	r3, [pc, #92]	; (1bc48 <vTaskSwitchContext+0x100>)
   1bbec:	687a      	ldr	r2, [r7, #4]
   1bbee:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1bbf0:	4b17      	ldr	r3, [pc, #92]	; (1bc50 <vTaskSwitchContext+0x108>)
   1bbf2:	2201      	movs	r2, #1
   1bbf4:	601a      	str	r2, [r3, #0]
   1bbf6:	4b17      	ldr	r3, [pc, #92]	; (1bc54 <vTaskSwitchContext+0x10c>)
   1bbf8:	4798      	blx	r3
   1bbfa:	0003      	movs	r3, r0
   1bbfc:	0018      	movs	r0, r3
   1bbfe:	4b16      	ldr	r3, [pc, #88]	; (1bc58 <vTaskSwitchContext+0x110>)
   1bc00:	4798      	blx	r3
   1bc02:	0003      	movs	r3, r0
   1bc04:	001a      	movs	r2, r3
   1bc06:	4b15      	ldr	r3, [pc, #84]	; (1bc5c <vTaskSwitchContext+0x114>)
   1bc08:	881b      	ldrh	r3, [r3, #0]
   1bc0a:	4013      	ands	r3, r2
   1bc0c:	b29b      	uxth	r3, r3
   1bc0e:	2b00      	cmp	r3, #0
   1bc10:	d00a      	beq.n	1bc28 <vTaskSwitchContext+0xe0>
   1bc12:	4b10      	ldr	r3, [pc, #64]	; (1bc54 <vTaskSwitchContext+0x10c>)
   1bc14:	4798      	blx	r3
   1bc16:	0003      	movs	r3, r0
   1bc18:	0018      	movs	r0, r3
   1bc1a:	4b11      	ldr	r3, [pc, #68]	; (1bc60 <vTaskSwitchContext+0x118>)
   1bc1c:	4798      	blx	r3
   1bc1e:	0003      	movs	r3, r0
   1bc20:	b2db      	uxtb	r3, r3
   1bc22:	0018      	movs	r0, r3
   1bc24:	4b0f      	ldr	r3, [pc, #60]	; (1bc64 <vTaskSwitchContext+0x11c>)
   1bc26:	4798      	blx	r3
   1bc28:	4b09      	ldr	r3, [pc, #36]	; (1bc50 <vTaskSwitchContext+0x108>)
   1bc2a:	2202      	movs	r2, #2
   1bc2c:	601a      	str	r2, [r3, #0]
}
   1bc2e:	46c0      	nop			; (mov r8, r8)
   1bc30:	46bd      	mov	sp, r7
   1bc32:	b002      	add	sp, #8
   1bc34:	bd80      	pop	{r7, pc}
   1bc36:	46c0      	nop			; (mov r8, r8)
   1bc38:	20003d34 	.word	0x20003d34
   1bc3c:	20003d20 	.word	0x20003d20
   1bc40:	20003c34 	.word	0x20003c34
   1bc44:	00031d2d 	.word	0x00031d2d
   1bc48:	20003d14 	.word	0x20003d14
   1bc4c:	20003c38 	.word	0x20003c38
   1bc50:	20000c88 	.word	0x20000c88
   1bc54:	0001778d 	.word	0x0001778d
   1bc58:	000174f1 	.word	0x000174f1
   1bc5c:	200000b8 	.word	0x200000b8
   1bc60:	000174d1 	.word	0x000174d1
   1bc64:	000182ed 	.word	0x000182ed

0001bc68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1bc68:	b580      	push	{r7, lr}
   1bc6a:	b082      	sub	sp, #8
   1bc6c:	af00      	add	r7, sp, #0
   1bc6e:	6078      	str	r0, [r7, #4]
   1bc70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1bc72:	687b      	ldr	r3, [r7, #4]
   1bc74:	2b00      	cmp	r3, #0
   1bc76:	d101      	bne.n	1bc7c <vTaskPlaceOnEventList+0x14>
   1bc78:	b672      	cpsid	i
   1bc7a:	e7fe      	b.n	1bc7a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1bc7c:	4b08      	ldr	r3, [pc, #32]	; (1bca0 <vTaskPlaceOnEventList+0x38>)
   1bc7e:	681b      	ldr	r3, [r3, #0]
   1bc80:	3318      	adds	r3, #24
   1bc82:	001a      	movs	r2, r3
   1bc84:	687b      	ldr	r3, [r7, #4]
   1bc86:	0011      	movs	r1, r2
   1bc88:	0018      	movs	r0, r3
   1bc8a:	4b06      	ldr	r3, [pc, #24]	; (1bca4 <vTaskPlaceOnEventList+0x3c>)
   1bc8c:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1bc8e:	683b      	ldr	r3, [r7, #0]
   1bc90:	2101      	movs	r1, #1
   1bc92:	0018      	movs	r0, r3
   1bc94:	4b04      	ldr	r3, [pc, #16]	; (1bca8 <vTaskPlaceOnEventList+0x40>)
   1bc96:	4798      	blx	r3
}
   1bc98:	46c0      	nop			; (mov r8, r8)
   1bc9a:	46bd      	mov	sp, r7
   1bc9c:	b002      	add	sp, #8
   1bc9e:	bd80      	pop	{r7, pc}
   1bca0:	20003c34 	.word	0x20003c34
   1bca4:	000192ff 	.word	0x000192ff
   1bca8:	0001c70d 	.word	0x0001c70d

0001bcac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1bcac:	b580      	push	{r7, lr}
   1bcae:	b084      	sub	sp, #16
   1bcb0:	af00      	add	r7, sp, #0
   1bcb2:	60f8      	str	r0, [r7, #12]
   1bcb4:	60b9      	str	r1, [r7, #8]
   1bcb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1bcb8:	68fb      	ldr	r3, [r7, #12]
   1bcba:	2b00      	cmp	r3, #0
   1bcbc:	d101      	bne.n	1bcc2 <vTaskPlaceOnEventListRestricted+0x16>
   1bcbe:	b672      	cpsid	i
   1bcc0:	e7fe      	b.n	1bcc0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1bcc2:	4b28      	ldr	r3, [pc, #160]	; (1bd64 <vTaskPlaceOnEventListRestricted+0xb8>)
   1bcc4:	681b      	ldr	r3, [r3, #0]
   1bcc6:	3318      	adds	r3, #24
   1bcc8:	001a      	movs	r2, r3
   1bcca:	68fb      	ldr	r3, [r7, #12]
   1bccc:	0011      	movs	r1, r2
   1bcce:	0018      	movs	r0, r3
   1bcd0:	4b25      	ldr	r3, [pc, #148]	; (1bd68 <vTaskPlaceOnEventListRestricted+0xbc>)
   1bcd2:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1bcd4:	687b      	ldr	r3, [r7, #4]
   1bcd6:	2b00      	cmp	r3, #0
   1bcd8:	d002      	beq.n	1bce0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1bcda:	2301      	movs	r3, #1
   1bcdc:	425b      	negs	r3, r3
   1bcde:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1bce0:	4b20      	ldr	r3, [pc, #128]	; (1bd64 <vTaskPlaceOnEventListRestricted+0xb8>)
   1bce2:	681b      	ldr	r3, [r3, #0]
   1bce4:	0018      	movs	r0, r3
   1bce6:	4b21      	ldr	r3, [pc, #132]	; (1bd6c <vTaskPlaceOnEventListRestricted+0xc0>)
   1bce8:	4798      	blx	r3
   1bcea:	0003      	movs	r3, r0
   1bcec:	001a      	movs	r2, r3
   1bcee:	4b20      	ldr	r3, [pc, #128]	; (1bd70 <vTaskPlaceOnEventListRestricted+0xc4>)
   1bcf0:	881b      	ldrh	r3, [r3, #0]
   1bcf2:	4013      	ands	r3, r2
   1bcf4:	b29b      	uxth	r3, r3
   1bcf6:	2b00      	cmp	r3, #0
   1bcf8:	d011      	beq.n	1bd1e <vTaskPlaceOnEventListRestricted+0x72>
   1bcfa:	4b1e      	ldr	r3, [pc, #120]	; (1bd74 <vTaskPlaceOnEventListRestricted+0xc8>)
   1bcfc:	681a      	ldr	r2, [r3, #0]
   1bcfe:	68bb      	ldr	r3, [r7, #8]
   1bd00:	18d3      	adds	r3, r2, r3
   1bd02:	0019      	movs	r1, r3
   1bd04:	2088      	movs	r0, #136	; 0x88
   1bd06:	4b1c      	ldr	r3, [pc, #112]	; (1bd78 <vTaskPlaceOnEventListRestricted+0xcc>)
   1bd08:	4798      	blx	r3
   1bd0a:	4b16      	ldr	r3, [pc, #88]	; (1bd64 <vTaskPlaceOnEventListRestricted+0xb8>)
   1bd0c:	681b      	ldr	r3, [r3, #0]
   1bd0e:	0018      	movs	r0, r3
   1bd10:	4b1a      	ldr	r3, [pc, #104]	; (1bd7c <vTaskPlaceOnEventListRestricted+0xd0>)
   1bd12:	4798      	blx	r3
   1bd14:	0003      	movs	r3, r0
   1bd16:	b2db      	uxtb	r3, r3
   1bd18:	0018      	movs	r0, r3
   1bd1a:	4b19      	ldr	r3, [pc, #100]	; (1bd80 <vTaskPlaceOnEventListRestricted+0xd4>)
   1bd1c:	4798      	blx	r3
   1bd1e:	4b19      	ldr	r3, [pc, #100]	; (1bd84 <vTaskPlaceOnEventListRestricted+0xd8>)
   1bd20:	4798      	blx	r3
   1bd22:	0003      	movs	r3, r0
   1bd24:	0018      	movs	r0, r3
   1bd26:	4b11      	ldr	r3, [pc, #68]	; (1bd6c <vTaskPlaceOnEventListRestricted+0xc0>)
   1bd28:	4798      	blx	r3
   1bd2a:	0003      	movs	r3, r0
   1bd2c:	001a      	movs	r2, r3
   1bd2e:	4b10      	ldr	r3, [pc, #64]	; (1bd70 <vTaskPlaceOnEventListRestricted+0xc4>)
   1bd30:	881b      	ldrh	r3, [r3, #0]
   1bd32:	4013      	ands	r3, r2
   1bd34:	b29b      	uxth	r3, r3
   1bd36:	2b00      	cmp	r3, #0
   1bd38:	d00a      	beq.n	1bd50 <vTaskPlaceOnEventListRestricted+0xa4>
   1bd3a:	4b12      	ldr	r3, [pc, #72]	; (1bd84 <vTaskPlaceOnEventListRestricted+0xd8>)
   1bd3c:	4798      	blx	r3
   1bd3e:	0003      	movs	r3, r0
   1bd40:	0018      	movs	r0, r3
   1bd42:	4b0e      	ldr	r3, [pc, #56]	; (1bd7c <vTaskPlaceOnEventListRestricted+0xd0>)
   1bd44:	4798      	blx	r3
   1bd46:	0003      	movs	r3, r0
   1bd48:	b2db      	uxtb	r3, r3
   1bd4a:	0018      	movs	r0, r3
   1bd4c:	4b0c      	ldr	r3, [pc, #48]	; (1bd80 <vTaskPlaceOnEventListRestricted+0xd4>)
   1bd4e:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1bd50:	687a      	ldr	r2, [r7, #4]
   1bd52:	68bb      	ldr	r3, [r7, #8]
   1bd54:	0011      	movs	r1, r2
   1bd56:	0018      	movs	r0, r3
   1bd58:	4b0b      	ldr	r3, [pc, #44]	; (1bd88 <vTaskPlaceOnEventListRestricted+0xdc>)
   1bd5a:	4798      	blx	r3
	}
   1bd5c:	46c0      	nop			; (mov r8, r8)
   1bd5e:	46bd      	mov	sp, r7
   1bd60:	b004      	add	sp, #16
   1bd62:	bd80      	pop	{r7, pc}
   1bd64:	20003c34 	.word	0x20003c34
   1bd68:	000192bb 	.word	0x000192bb
   1bd6c:	000174f1 	.word	0x000174f1
   1bd70:	200000b8 	.word	0x200000b8
   1bd74:	20003d10 	.word	0x20003d10
   1bd78:	000181f1 	.word	0x000181f1
   1bd7c:	000174d1 	.word	0x000174d1
   1bd80:	00018681 	.word	0x00018681
   1bd84:	0001778d 	.word	0x0001778d
   1bd88:	0001c70d 	.word	0x0001c70d

0001bd8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1bd8c:	b580      	push	{r7, lr}
   1bd8e:	b084      	sub	sp, #16
   1bd90:	af00      	add	r7, sp, #0
   1bd92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1bd94:	687b      	ldr	r3, [r7, #4]
   1bd96:	68db      	ldr	r3, [r3, #12]
   1bd98:	68db      	ldr	r3, [r3, #12]
   1bd9a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1bd9c:	68bb      	ldr	r3, [r7, #8]
   1bd9e:	2b00      	cmp	r3, #0
   1bda0:	d101      	bne.n	1bda6 <xTaskRemoveFromEventList+0x1a>
   1bda2:	b672      	cpsid	i
   1bda4:	e7fe      	b.n	1bda4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1bda6:	68bb      	ldr	r3, [r7, #8]
   1bda8:	3318      	adds	r3, #24
   1bdaa:	0018      	movs	r0, r3
   1bdac:	4b2a      	ldr	r3, [pc, #168]	; (1be58 <xTaskRemoveFromEventList+0xcc>)
   1bdae:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1bdb0:	4b2a      	ldr	r3, [pc, #168]	; (1be5c <xTaskRemoveFromEventList+0xd0>)
   1bdb2:	681b      	ldr	r3, [r3, #0]
   1bdb4:	2b00      	cmp	r3, #0
   1bdb6:	d132      	bne.n	1be1e <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1bdb8:	68bb      	ldr	r3, [r7, #8]
   1bdba:	3304      	adds	r3, #4
   1bdbc:	0018      	movs	r0, r3
   1bdbe:	4b26      	ldr	r3, [pc, #152]	; (1be58 <xTaskRemoveFromEventList+0xcc>)
   1bdc0:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1bdc2:	68bb      	ldr	r3, [r7, #8]
   1bdc4:	0018      	movs	r0, r3
   1bdc6:	4b26      	ldr	r3, [pc, #152]	; (1be60 <xTaskRemoveFromEventList+0xd4>)
   1bdc8:	4798      	blx	r3
   1bdca:	0003      	movs	r3, r0
   1bdcc:	001a      	movs	r2, r3
   1bdce:	4b25      	ldr	r3, [pc, #148]	; (1be64 <xTaskRemoveFromEventList+0xd8>)
   1bdd0:	881b      	ldrh	r3, [r3, #0]
   1bdd2:	4013      	ands	r3, r2
   1bdd4:	b29b      	uxth	r3, r3
   1bdd6:	2b00      	cmp	r3, #0
   1bdd8:	d008      	beq.n	1bdec <xTaskRemoveFromEventList+0x60>
   1bdda:	68bb      	ldr	r3, [r7, #8]
   1bddc:	0018      	movs	r0, r3
   1bdde:	4b22      	ldr	r3, [pc, #136]	; (1be68 <xTaskRemoveFromEventList+0xdc>)
   1bde0:	4798      	blx	r3
   1bde2:	0003      	movs	r3, r0
   1bde4:	b2db      	uxtb	r3, r3
   1bde6:	0018      	movs	r0, r3
   1bde8:	4b20      	ldr	r3, [pc, #128]	; (1be6c <xTaskRemoveFromEventList+0xe0>)
   1bdea:	4798      	blx	r3
   1bdec:	68bb      	ldr	r3, [r7, #8]
   1bdee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bdf0:	4b1f      	ldr	r3, [pc, #124]	; (1be70 <xTaskRemoveFromEventList+0xe4>)
   1bdf2:	681b      	ldr	r3, [r3, #0]
   1bdf4:	429a      	cmp	r2, r3
   1bdf6:	d903      	bls.n	1be00 <xTaskRemoveFromEventList+0x74>
   1bdf8:	68bb      	ldr	r3, [r7, #8]
   1bdfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bdfc:	4b1c      	ldr	r3, [pc, #112]	; (1be70 <xTaskRemoveFromEventList+0xe4>)
   1bdfe:	601a      	str	r2, [r3, #0]
   1be00:	68bb      	ldr	r3, [r7, #8]
   1be02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be04:	0013      	movs	r3, r2
   1be06:	009b      	lsls	r3, r3, #2
   1be08:	189b      	adds	r3, r3, r2
   1be0a:	009b      	lsls	r3, r3, #2
   1be0c:	4a19      	ldr	r2, [pc, #100]	; (1be74 <xTaskRemoveFromEventList+0xe8>)
   1be0e:	189a      	adds	r2, r3, r2
   1be10:	68bb      	ldr	r3, [r7, #8]
   1be12:	3304      	adds	r3, #4
   1be14:	0019      	movs	r1, r3
   1be16:	0010      	movs	r0, r2
   1be18:	4b17      	ldr	r3, [pc, #92]	; (1be78 <xTaskRemoveFromEventList+0xec>)
   1be1a:	4798      	blx	r3
   1be1c:	e007      	b.n	1be2e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1be1e:	68bb      	ldr	r3, [r7, #8]
   1be20:	3318      	adds	r3, #24
   1be22:	001a      	movs	r2, r3
   1be24:	4b15      	ldr	r3, [pc, #84]	; (1be7c <xTaskRemoveFromEventList+0xf0>)
   1be26:	0011      	movs	r1, r2
   1be28:	0018      	movs	r0, r3
   1be2a:	4b13      	ldr	r3, [pc, #76]	; (1be78 <xTaskRemoveFromEventList+0xec>)
   1be2c:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1be2e:	68bb      	ldr	r3, [r7, #8]
   1be30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be32:	4b13      	ldr	r3, [pc, #76]	; (1be80 <xTaskRemoveFromEventList+0xf4>)
   1be34:	681b      	ldr	r3, [r3, #0]
   1be36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1be38:	429a      	cmp	r2, r3
   1be3a:	d905      	bls.n	1be48 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1be3c:	2301      	movs	r3, #1
   1be3e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1be40:	4b10      	ldr	r3, [pc, #64]	; (1be84 <xTaskRemoveFromEventList+0xf8>)
   1be42:	2201      	movs	r2, #1
   1be44:	601a      	str	r2, [r3, #0]
   1be46:	e001      	b.n	1be4c <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1be48:	2300      	movs	r3, #0
   1be4a:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1be4c:	68fb      	ldr	r3, [r7, #12]
}
   1be4e:	0018      	movs	r0, r3
   1be50:	46bd      	mov	sp, r7
   1be52:	b004      	add	sp, #16
   1be54:	bd80      	pop	{r7, pc}
   1be56:	46c0      	nop			; (mov r8, r8)
   1be58:	0001936b 	.word	0x0001936b
   1be5c:	20003d34 	.word	0x20003d34
   1be60:	000174f1 	.word	0x000174f1
   1be64:	200000b8 	.word	0x200000b8
   1be68:	000174d1 	.word	0x000174d1
   1be6c:	00017ca1 	.word	0x00017ca1
   1be70:	20003d14 	.word	0x20003d14
   1be74:	20003c38 	.word	0x20003c38
   1be78:	000192bb 	.word	0x000192bb
   1be7c:	20003ccc 	.word	0x20003ccc
   1be80:	20003c34 	.word	0x20003c34
   1be84:	20003d20 	.word	0x20003d20

0001be88 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1be88:	b580      	push	{r7, lr}
   1be8a:	b082      	sub	sp, #8
   1be8c:	af00      	add	r7, sp, #0
   1be8e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1be90:	687b      	ldr	r3, [r7, #4]
   1be92:	2b00      	cmp	r3, #0
   1be94:	d101      	bne.n	1be9a <vTaskSetTimeOutState+0x12>
   1be96:	b672      	cpsid	i
   1be98:	e7fe      	b.n	1be98 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1be9a:	4b08      	ldr	r3, [pc, #32]	; (1bebc <vTaskSetTimeOutState+0x34>)
   1be9c:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1be9e:	4b08      	ldr	r3, [pc, #32]	; (1bec0 <vTaskSetTimeOutState+0x38>)
   1bea0:	681a      	ldr	r2, [r3, #0]
   1bea2:	687b      	ldr	r3, [r7, #4]
   1bea4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1bea6:	4b07      	ldr	r3, [pc, #28]	; (1bec4 <vTaskSetTimeOutState+0x3c>)
   1bea8:	681a      	ldr	r2, [r3, #0]
   1beaa:	687b      	ldr	r3, [r7, #4]
   1beac:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1beae:	4b06      	ldr	r3, [pc, #24]	; (1bec8 <vTaskSetTimeOutState+0x40>)
   1beb0:	4798      	blx	r3
}
   1beb2:	46c0      	nop			; (mov r8, r8)
   1beb4:	46bd      	mov	sp, r7
   1beb6:	b002      	add	sp, #8
   1beb8:	bd80      	pop	{r7, pc}
   1beba:	46c0      	nop			; (mov r8, r8)
   1bebc:	000194f9 	.word	0x000194f9
   1bec0:	20003d24 	.word	0x20003d24
   1bec4:	20003d10 	.word	0x20003d10
   1bec8:	0001951d 	.word	0x0001951d

0001becc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1becc:	b580      	push	{r7, lr}
   1bece:	b082      	sub	sp, #8
   1bed0:	af00      	add	r7, sp, #0
   1bed2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1bed4:	4b05      	ldr	r3, [pc, #20]	; (1beec <vTaskInternalSetTimeOutState+0x20>)
   1bed6:	681a      	ldr	r2, [r3, #0]
   1bed8:	687b      	ldr	r3, [r7, #4]
   1beda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1bedc:	4b04      	ldr	r3, [pc, #16]	; (1bef0 <vTaskInternalSetTimeOutState+0x24>)
   1bede:	681a      	ldr	r2, [r3, #0]
   1bee0:	687b      	ldr	r3, [r7, #4]
   1bee2:	605a      	str	r2, [r3, #4]
}
   1bee4:	46c0      	nop			; (mov r8, r8)
   1bee6:	46bd      	mov	sp, r7
   1bee8:	b002      	add	sp, #8
   1beea:	bd80      	pop	{r7, pc}
   1beec:	20003d24 	.word	0x20003d24
   1bef0:	20003d10 	.word	0x20003d10

0001bef4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1bef4:	b580      	push	{r7, lr}
   1bef6:	b086      	sub	sp, #24
   1bef8:	af00      	add	r7, sp, #0
   1befa:	6078      	str	r0, [r7, #4]
   1befc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1befe:	687b      	ldr	r3, [r7, #4]
   1bf00:	2b00      	cmp	r3, #0
   1bf02:	d101      	bne.n	1bf08 <xTaskCheckForTimeOut+0x14>
   1bf04:	b672      	cpsid	i
   1bf06:	e7fe      	b.n	1bf06 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1bf08:	683b      	ldr	r3, [r7, #0]
   1bf0a:	2b00      	cmp	r3, #0
   1bf0c:	d101      	bne.n	1bf12 <xTaskCheckForTimeOut+0x1e>
   1bf0e:	b672      	cpsid	i
   1bf10:	e7fe      	b.n	1bf10 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1bf12:	4b1e      	ldr	r3, [pc, #120]	; (1bf8c <xTaskCheckForTimeOut+0x98>)
   1bf14:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1bf16:	4b1e      	ldr	r3, [pc, #120]	; (1bf90 <xTaskCheckForTimeOut+0x9c>)
   1bf18:	681b      	ldr	r3, [r3, #0]
   1bf1a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1bf1c:	687b      	ldr	r3, [r7, #4]
   1bf1e:	685b      	ldr	r3, [r3, #4]
   1bf20:	693a      	ldr	r2, [r7, #16]
   1bf22:	1ad3      	subs	r3, r2, r3
   1bf24:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1bf26:	683b      	ldr	r3, [r7, #0]
   1bf28:	681b      	ldr	r3, [r3, #0]
   1bf2a:	3301      	adds	r3, #1
   1bf2c:	d102      	bne.n	1bf34 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1bf2e:	2300      	movs	r3, #0
   1bf30:	617b      	str	r3, [r7, #20]
   1bf32:	e024      	b.n	1bf7e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1bf34:	687b      	ldr	r3, [r7, #4]
   1bf36:	681a      	ldr	r2, [r3, #0]
   1bf38:	4b16      	ldr	r3, [pc, #88]	; (1bf94 <xTaskCheckForTimeOut+0xa0>)
   1bf3a:	681b      	ldr	r3, [r3, #0]
   1bf3c:	429a      	cmp	r2, r3
   1bf3e:	d007      	beq.n	1bf50 <xTaskCheckForTimeOut+0x5c>
   1bf40:	687b      	ldr	r3, [r7, #4]
   1bf42:	685a      	ldr	r2, [r3, #4]
   1bf44:	693b      	ldr	r3, [r7, #16]
   1bf46:	429a      	cmp	r2, r3
   1bf48:	d802      	bhi.n	1bf50 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1bf4a:	2301      	movs	r3, #1
   1bf4c:	617b      	str	r3, [r7, #20]
   1bf4e:	e016      	b.n	1bf7e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1bf50:	683b      	ldr	r3, [r7, #0]
   1bf52:	681a      	ldr	r2, [r3, #0]
   1bf54:	68fb      	ldr	r3, [r7, #12]
   1bf56:	429a      	cmp	r2, r3
   1bf58:	d90c      	bls.n	1bf74 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1bf5a:	683b      	ldr	r3, [r7, #0]
   1bf5c:	681a      	ldr	r2, [r3, #0]
   1bf5e:	68fb      	ldr	r3, [r7, #12]
   1bf60:	1ad2      	subs	r2, r2, r3
   1bf62:	683b      	ldr	r3, [r7, #0]
   1bf64:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1bf66:	687b      	ldr	r3, [r7, #4]
   1bf68:	0018      	movs	r0, r3
   1bf6a:	4b0b      	ldr	r3, [pc, #44]	; (1bf98 <xTaskCheckForTimeOut+0xa4>)
   1bf6c:	4798      	blx	r3
			xReturn = pdFALSE;
   1bf6e:	2300      	movs	r3, #0
   1bf70:	617b      	str	r3, [r7, #20]
   1bf72:	e004      	b.n	1bf7e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1bf74:	683b      	ldr	r3, [r7, #0]
   1bf76:	2200      	movs	r2, #0
   1bf78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1bf7a:	2301      	movs	r3, #1
   1bf7c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1bf7e:	4b07      	ldr	r3, [pc, #28]	; (1bf9c <xTaskCheckForTimeOut+0xa8>)
   1bf80:	4798      	blx	r3

	return xReturn;
   1bf82:	697b      	ldr	r3, [r7, #20]
}
   1bf84:	0018      	movs	r0, r3
   1bf86:	46bd      	mov	sp, r7
   1bf88:	b006      	add	sp, #24
   1bf8a:	bd80      	pop	{r7, pc}
   1bf8c:	000194f9 	.word	0x000194f9
   1bf90:	20003d10 	.word	0x20003d10
   1bf94:	20003d24 	.word	0x20003d24
   1bf98:	0001becd 	.word	0x0001becd
   1bf9c:	0001951d 	.word	0x0001951d

0001bfa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1bfa0:	b580      	push	{r7, lr}
   1bfa2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1bfa4:	4b02      	ldr	r3, [pc, #8]	; (1bfb0 <vTaskMissedYield+0x10>)
   1bfa6:	2201      	movs	r2, #1
   1bfa8:	601a      	str	r2, [r3, #0]
}
   1bfaa:	46c0      	nop			; (mov r8, r8)
   1bfac:	46bd      	mov	sp, r7
   1bfae:	bd80      	pop	{r7, pc}
   1bfb0:	20003d20 	.word	0x20003d20

0001bfb4 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1bfb4:	b580      	push	{r7, lr}
   1bfb6:	b084      	sub	sp, #16
   1bfb8:	af00      	add	r7, sp, #0
   1bfba:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1bfbc:	687b      	ldr	r3, [r7, #4]
   1bfbe:	2b00      	cmp	r3, #0
   1bfc0:	d005      	beq.n	1bfce <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1bfc2:	687b      	ldr	r3, [r7, #4]
   1bfc4:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1bfc6:	68bb      	ldr	r3, [r7, #8]
   1bfc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bfca:	60fb      	str	r3, [r7, #12]
   1bfcc:	e001      	b.n	1bfd2 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1bfce:	2300      	movs	r3, #0
   1bfd0:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1bfd2:	68fb      	ldr	r3, [r7, #12]
	}
   1bfd4:	0018      	movs	r0, r3
   1bfd6:	46bd      	mov	sp, r7
   1bfd8:	b004      	add	sp, #16
   1bfda:	bd80      	pop	{r7, pc}

0001bfdc <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1bfdc:	b580      	push	{r7, lr}
   1bfde:	b084      	sub	sp, #16
   1bfe0:	af00      	add	r7, sp, #0
   1bfe2:	6078      	str	r0, [r7, #4]
   1bfe4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1bfe6:	687b      	ldr	r3, [r7, #4]
   1bfe8:	2b00      	cmp	r3, #0
   1bfea:	d004      	beq.n	1bff6 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1bfec:	687b      	ldr	r3, [r7, #4]
   1bfee:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1bff0:	68fb      	ldr	r3, [r7, #12]
   1bff2:	683a      	ldr	r2, [r7, #0]
   1bff4:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1bff6:	46c0      	nop			; (mov r8, r8)
   1bff8:	46bd      	mov	sp, r7
   1bffa:	b004      	add	sp, #16
   1bffc:	bd80      	pop	{r7, pc}
	...

0001c000 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1c000:	b580      	push	{r7, lr}
   1c002:	b082      	sub	sp, #8
   1c004:	af00      	add	r7, sp, #0
   1c006:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1c008:	4b04      	ldr	r3, [pc, #16]	; (1c01c <prvIdleTask+0x1c>)
   1c00a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1c00c:	4b04      	ldr	r3, [pc, #16]	; (1c020 <prvIdleTask+0x20>)
   1c00e:	681b      	ldr	r3, [r3, #0]
   1c010:	2b01      	cmp	r3, #1
   1c012:	d9f9      	bls.n	1c008 <prvIdleTask+0x8>
			{
				taskYIELD();
   1c014:	4b03      	ldr	r3, [pc, #12]	; (1c024 <prvIdleTask+0x24>)
   1c016:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1c018:	e7f6      	b.n	1c008 <prvIdleTask+0x8>
   1c01a:	46c0      	nop			; (mov r8, r8)
   1c01c:	0001c0b5 	.word	0x0001c0b5
   1c020:	20003c38 	.word	0x20003c38
   1c024:	000194e1 	.word	0x000194e1

0001c028 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1c028:	b580      	push	{r7, lr}
   1c02a:	b082      	sub	sp, #8
   1c02c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1c02e:	2300      	movs	r3, #0
   1c030:	607b      	str	r3, [r7, #4]
   1c032:	e00c      	b.n	1c04e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1c034:	687a      	ldr	r2, [r7, #4]
   1c036:	0013      	movs	r3, r2
   1c038:	009b      	lsls	r3, r3, #2
   1c03a:	189b      	adds	r3, r3, r2
   1c03c:	009b      	lsls	r3, r3, #2
   1c03e:	4a14      	ldr	r2, [pc, #80]	; (1c090 <prvInitialiseTaskLists+0x68>)
   1c040:	189b      	adds	r3, r3, r2
   1c042:	0018      	movs	r0, r3
   1c044:	4b13      	ldr	r3, [pc, #76]	; (1c094 <prvInitialiseTaskLists+0x6c>)
   1c046:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1c048:	687b      	ldr	r3, [r7, #4]
   1c04a:	3301      	adds	r3, #1
   1c04c:	607b      	str	r3, [r7, #4]
   1c04e:	687b      	ldr	r3, [r7, #4]
   1c050:	2b04      	cmp	r3, #4
   1c052:	d9ef      	bls.n	1c034 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1c054:	4b10      	ldr	r3, [pc, #64]	; (1c098 <prvInitialiseTaskLists+0x70>)
   1c056:	0018      	movs	r0, r3
   1c058:	4b0e      	ldr	r3, [pc, #56]	; (1c094 <prvInitialiseTaskLists+0x6c>)
   1c05a:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1c05c:	4b0f      	ldr	r3, [pc, #60]	; (1c09c <prvInitialiseTaskLists+0x74>)
   1c05e:	0018      	movs	r0, r3
   1c060:	4b0c      	ldr	r3, [pc, #48]	; (1c094 <prvInitialiseTaskLists+0x6c>)
   1c062:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1c064:	4b0e      	ldr	r3, [pc, #56]	; (1c0a0 <prvInitialiseTaskLists+0x78>)
   1c066:	0018      	movs	r0, r3
   1c068:	4b0a      	ldr	r3, [pc, #40]	; (1c094 <prvInitialiseTaskLists+0x6c>)
   1c06a:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1c06c:	4b0d      	ldr	r3, [pc, #52]	; (1c0a4 <prvInitialiseTaskLists+0x7c>)
   1c06e:	0018      	movs	r0, r3
   1c070:	4b08      	ldr	r3, [pc, #32]	; (1c094 <prvInitialiseTaskLists+0x6c>)
   1c072:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1c074:	4b0c      	ldr	r3, [pc, #48]	; (1c0a8 <prvInitialiseTaskLists+0x80>)
   1c076:	0018      	movs	r0, r3
   1c078:	4b06      	ldr	r3, [pc, #24]	; (1c094 <prvInitialiseTaskLists+0x6c>)
   1c07a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1c07c:	4b0b      	ldr	r3, [pc, #44]	; (1c0ac <prvInitialiseTaskLists+0x84>)
   1c07e:	4a06      	ldr	r2, [pc, #24]	; (1c098 <prvInitialiseTaskLists+0x70>)
   1c080:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1c082:	4b0b      	ldr	r3, [pc, #44]	; (1c0b0 <prvInitialiseTaskLists+0x88>)
   1c084:	4a05      	ldr	r2, [pc, #20]	; (1c09c <prvInitialiseTaskLists+0x74>)
   1c086:	601a      	str	r2, [r3, #0]
}
   1c088:	46c0      	nop			; (mov r8, r8)
   1c08a:	46bd      	mov	sp, r7
   1c08c:	b002      	add	sp, #8
   1c08e:	bd80      	pop	{r7, pc}
   1c090:	20003c38 	.word	0x20003c38
   1c094:	00019269 	.word	0x00019269
   1c098:	20003c9c 	.word	0x20003c9c
   1c09c:	20003cb0 	.word	0x20003cb0
   1c0a0:	20003ccc 	.word	0x20003ccc
   1c0a4:	20003ce0 	.word	0x20003ce0
   1c0a8:	20003cf8 	.word	0x20003cf8
   1c0ac:	20003cc4 	.word	0x20003cc4
   1c0b0:	20003cc8 	.word	0x20003cc8

0001c0b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1c0b4:	b580      	push	{r7, lr}
   1c0b6:	b082      	sub	sp, #8
   1c0b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1c0ba:	e01a      	b.n	1c0f2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1c0bc:	4b11      	ldr	r3, [pc, #68]	; (1c104 <prvCheckTasksWaitingTermination+0x50>)
   1c0be:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1c0c0:	4b11      	ldr	r3, [pc, #68]	; (1c108 <prvCheckTasksWaitingTermination+0x54>)
   1c0c2:	68db      	ldr	r3, [r3, #12]
   1c0c4:	68db      	ldr	r3, [r3, #12]
   1c0c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c0c8:	687b      	ldr	r3, [r7, #4]
   1c0ca:	3304      	adds	r3, #4
   1c0cc:	0018      	movs	r0, r3
   1c0ce:	4b0f      	ldr	r3, [pc, #60]	; (1c10c <prvCheckTasksWaitingTermination+0x58>)
   1c0d0:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1c0d2:	4b0f      	ldr	r3, [pc, #60]	; (1c110 <prvCheckTasksWaitingTermination+0x5c>)
   1c0d4:	681b      	ldr	r3, [r3, #0]
   1c0d6:	1e5a      	subs	r2, r3, #1
   1c0d8:	4b0d      	ldr	r3, [pc, #52]	; (1c110 <prvCheckTasksWaitingTermination+0x5c>)
   1c0da:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1c0dc:	4b0d      	ldr	r3, [pc, #52]	; (1c114 <prvCheckTasksWaitingTermination+0x60>)
   1c0de:	681b      	ldr	r3, [r3, #0]
   1c0e0:	1e5a      	subs	r2, r3, #1
   1c0e2:	4b0c      	ldr	r3, [pc, #48]	; (1c114 <prvCheckTasksWaitingTermination+0x60>)
   1c0e4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1c0e6:	4b0c      	ldr	r3, [pc, #48]	; (1c118 <prvCheckTasksWaitingTermination+0x64>)
   1c0e8:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1c0ea:	687b      	ldr	r3, [r7, #4]
   1c0ec:	0018      	movs	r0, r3
   1c0ee:	4b0b      	ldr	r3, [pc, #44]	; (1c11c <prvCheckTasksWaitingTermination+0x68>)
   1c0f0:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1c0f2:	4b08      	ldr	r3, [pc, #32]	; (1c114 <prvCheckTasksWaitingTermination+0x60>)
   1c0f4:	681b      	ldr	r3, [r3, #0]
   1c0f6:	2b00      	cmp	r3, #0
   1c0f8:	d1e0      	bne.n	1c0bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1c0fa:	46c0      	nop			; (mov r8, r8)
   1c0fc:	46bd      	mov	sp, r7
   1c0fe:	b002      	add	sp, #8
   1c100:	bd80      	pop	{r7, pc}
   1c102:	46c0      	nop			; (mov r8, r8)
   1c104:	000194f9 	.word	0x000194f9
   1c108:	20003ce0 	.word	0x20003ce0
   1c10c:	0001936b 	.word	0x0001936b
   1c110:	20003d0c 	.word	0x20003d0c
   1c114:	20003cf4 	.word	0x20003cf4
   1c118:	0001951d 	.word	0x0001951d
   1c11c:	0001c191 	.word	0x0001c191

0001c120 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1c120:	b580      	push	{r7, lr}
   1c122:	b084      	sub	sp, #16
   1c124:	af00      	add	r7, sp, #0
   1c126:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1c128:	2300      	movs	r3, #0
   1c12a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1c12c:	e005      	b.n	1c13a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1c12e:	687b      	ldr	r3, [r7, #4]
   1c130:	3301      	adds	r3, #1
   1c132:	607b      	str	r3, [r7, #4]
			ulCount++;
   1c134:	68fb      	ldr	r3, [r7, #12]
   1c136:	3301      	adds	r3, #1
   1c138:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1c13a:	687b      	ldr	r3, [r7, #4]
   1c13c:	781b      	ldrb	r3, [r3, #0]
   1c13e:	2ba5      	cmp	r3, #165	; 0xa5
   1c140:	d0f5      	beq.n	1c12e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1c142:	68fb      	ldr	r3, [r7, #12]
   1c144:	089b      	lsrs	r3, r3, #2
   1c146:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1c148:	68fb      	ldr	r3, [r7, #12]
   1c14a:	b29b      	uxth	r3, r3
	}
   1c14c:	0018      	movs	r0, r3
   1c14e:	46bd      	mov	sp, r7
   1c150:	b004      	add	sp, #16
   1c152:	bd80      	pop	{r7, pc}

0001c154 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1c154:	b580      	push	{r7, lr}
   1c156:	b086      	sub	sp, #24
   1c158:	af00      	add	r7, sp, #0
   1c15a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1c15c:	687b      	ldr	r3, [r7, #4]
   1c15e:	2b00      	cmp	r3, #0
   1c160:	d102      	bne.n	1c168 <uxTaskGetStackHighWaterMark+0x14>
   1c162:	4b09      	ldr	r3, [pc, #36]	; (1c188 <uxTaskGetStackHighWaterMark+0x34>)
   1c164:	681b      	ldr	r3, [r3, #0]
   1c166:	e000      	b.n	1c16a <uxTaskGetStackHighWaterMark+0x16>
   1c168:	687b      	ldr	r3, [r7, #4]
   1c16a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1c16c:	697b      	ldr	r3, [r7, #20]
   1c16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c170:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1c172:	693b      	ldr	r3, [r7, #16]
   1c174:	0018      	movs	r0, r3
   1c176:	4b05      	ldr	r3, [pc, #20]	; (1c18c <uxTaskGetStackHighWaterMark+0x38>)
   1c178:	4798      	blx	r3
   1c17a:	0003      	movs	r3, r0
   1c17c:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1c17e:	68fb      	ldr	r3, [r7, #12]
	}
   1c180:	0018      	movs	r0, r3
   1c182:	46bd      	mov	sp, r7
   1c184:	b006      	add	sp, #24
   1c186:	bd80      	pop	{r7, pc}
   1c188:	20003c34 	.word	0x20003c34
   1c18c:	0001c121 	.word	0x0001c121

0001c190 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1c190:	b580      	push	{r7, lr}
   1c192:	b082      	sub	sp, #8
   1c194:	af00      	add	r7, sp, #0
   1c196:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1c198:	687b      	ldr	r3, [r7, #4]
   1c19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c19c:	0018      	movs	r0, r3
   1c19e:	4b05      	ldr	r3, [pc, #20]	; (1c1b4 <prvDeleteTCB+0x24>)
   1c1a0:	4798      	blx	r3
			vPortFree( pxTCB );
   1c1a2:	687b      	ldr	r3, [r7, #4]
   1c1a4:	0018      	movs	r0, r3
   1c1a6:	4b03      	ldr	r3, [pc, #12]	; (1c1b4 <prvDeleteTCB+0x24>)
   1c1a8:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1c1aa:	46c0      	nop			; (mov r8, r8)
   1c1ac:	46bd      	mov	sp, r7
   1c1ae:	b002      	add	sp, #8
   1c1b0:	bd80      	pop	{r7, pc}
   1c1b2:	46c0      	nop			; (mov r8, r8)
   1c1b4:	000196f5 	.word	0x000196f5

0001c1b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1c1b8:	b580      	push	{r7, lr}
   1c1ba:	b082      	sub	sp, #8
   1c1bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c1be:	4b0e      	ldr	r3, [pc, #56]	; (1c1f8 <prvResetNextTaskUnblockTime+0x40>)
   1c1c0:	681b      	ldr	r3, [r3, #0]
   1c1c2:	681b      	ldr	r3, [r3, #0]
   1c1c4:	2b00      	cmp	r3, #0
   1c1c6:	d101      	bne.n	1c1cc <prvResetNextTaskUnblockTime+0x14>
   1c1c8:	2301      	movs	r3, #1
   1c1ca:	e000      	b.n	1c1ce <prvResetNextTaskUnblockTime+0x16>
   1c1cc:	2300      	movs	r3, #0
   1c1ce:	2b00      	cmp	r3, #0
   1c1d0:	d004      	beq.n	1c1dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1c1d2:	4b0a      	ldr	r3, [pc, #40]	; (1c1fc <prvResetNextTaskUnblockTime+0x44>)
   1c1d4:	2201      	movs	r2, #1
   1c1d6:	4252      	negs	r2, r2
   1c1d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1c1da:	e008      	b.n	1c1ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1c1dc:	4b06      	ldr	r3, [pc, #24]	; (1c1f8 <prvResetNextTaskUnblockTime+0x40>)
   1c1de:	681b      	ldr	r3, [r3, #0]
   1c1e0:	68db      	ldr	r3, [r3, #12]
   1c1e2:	68db      	ldr	r3, [r3, #12]
   1c1e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1c1e6:	687b      	ldr	r3, [r7, #4]
   1c1e8:	685a      	ldr	r2, [r3, #4]
   1c1ea:	4b04      	ldr	r3, [pc, #16]	; (1c1fc <prvResetNextTaskUnblockTime+0x44>)
   1c1ec:	601a      	str	r2, [r3, #0]
}
   1c1ee:	46c0      	nop			; (mov r8, r8)
   1c1f0:	46bd      	mov	sp, r7
   1c1f2:	b002      	add	sp, #8
   1c1f4:	bd80      	pop	{r7, pc}
   1c1f6:	46c0      	nop			; (mov r8, r8)
   1c1f8:	20003cc4 	.word	0x20003cc4
   1c1fc:	20003d2c 	.word	0x20003d2c

0001c200 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1c200:	b580      	push	{r7, lr}
   1c202:	b082      	sub	sp, #8
   1c204:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1c206:	4b04      	ldr	r3, [pc, #16]	; (1c218 <xTaskGetCurrentTaskHandle+0x18>)
   1c208:	681b      	ldr	r3, [r3, #0]
   1c20a:	607b      	str	r3, [r7, #4]

		return xReturn;
   1c20c:	687b      	ldr	r3, [r7, #4]
	}
   1c20e:	0018      	movs	r0, r3
   1c210:	46bd      	mov	sp, r7
   1c212:	b002      	add	sp, #8
   1c214:	bd80      	pop	{r7, pc}
   1c216:	46c0      	nop			; (mov r8, r8)
   1c218:	20003c34 	.word	0x20003c34

0001c21c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1c21c:	b580      	push	{r7, lr}
   1c21e:	b082      	sub	sp, #8
   1c220:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1c222:	4b0a      	ldr	r3, [pc, #40]	; (1c24c <xTaskGetSchedulerState+0x30>)
   1c224:	681b      	ldr	r3, [r3, #0]
   1c226:	2b00      	cmp	r3, #0
   1c228:	d102      	bne.n	1c230 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1c22a:	2301      	movs	r3, #1
   1c22c:	607b      	str	r3, [r7, #4]
   1c22e:	e008      	b.n	1c242 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c230:	4b07      	ldr	r3, [pc, #28]	; (1c250 <xTaskGetSchedulerState+0x34>)
   1c232:	681b      	ldr	r3, [r3, #0]
   1c234:	2b00      	cmp	r3, #0
   1c236:	d102      	bne.n	1c23e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1c238:	2302      	movs	r3, #2
   1c23a:	607b      	str	r3, [r7, #4]
   1c23c:	e001      	b.n	1c242 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1c23e:	2300      	movs	r3, #0
   1c240:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1c242:	687b      	ldr	r3, [r7, #4]
	}
   1c244:	0018      	movs	r0, r3
   1c246:	46bd      	mov	sp, r7
   1c248:	b002      	add	sp, #8
   1c24a:	bd80      	pop	{r7, pc}
   1c24c:	20003d18 	.word	0x20003d18
   1c250:	20003d34 	.word	0x20003d34

0001c254 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1c254:	b590      	push	{r4, r7, lr}
   1c256:	b085      	sub	sp, #20
   1c258:	af00      	add	r7, sp, #0
   1c25a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1c25c:	687b      	ldr	r3, [r7, #4]
   1c25e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1c260:	2300      	movs	r3, #0
   1c262:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1c264:	687b      	ldr	r3, [r7, #4]
   1c266:	2b00      	cmp	r3, #0
   1c268:	d100      	bne.n	1c26c <xTaskPriorityInherit+0x18>
   1c26a:	e09d      	b.n	1c3a8 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1c26c:	68bb      	ldr	r3, [r7, #8]
   1c26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c270:	4b50      	ldr	r3, [pc, #320]	; (1c3b4 <xTaskPriorityInherit+0x160>)
   1c272:	681b      	ldr	r3, [r3, #0]
   1c274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c276:	429a      	cmp	r2, r3
   1c278:	d300      	bcc.n	1c27c <xTaskPriorityInherit+0x28>
   1c27a:	e08c      	b.n	1c396 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1c27c:	68bb      	ldr	r3, [r7, #8]
   1c27e:	699b      	ldr	r3, [r3, #24]
   1c280:	2b00      	cmp	r3, #0
   1c282:	db06      	blt.n	1c292 <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c284:	4b4b      	ldr	r3, [pc, #300]	; (1c3b4 <xTaskPriorityInherit+0x160>)
   1c286:	681b      	ldr	r3, [r3, #0]
   1c288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c28a:	2205      	movs	r2, #5
   1c28c:	1ad2      	subs	r2, r2, r3
   1c28e:	68bb      	ldr	r3, [r7, #8]
   1c290:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1c292:	68bb      	ldr	r3, [r7, #8]
   1c294:	6959      	ldr	r1, [r3, #20]
   1c296:	68bb      	ldr	r3, [r7, #8]
   1c298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c29a:	0013      	movs	r3, r2
   1c29c:	009b      	lsls	r3, r3, #2
   1c29e:	189b      	adds	r3, r3, r2
   1c2a0:	009b      	lsls	r3, r3, #2
   1c2a2:	4a45      	ldr	r2, [pc, #276]	; (1c3b8 <xTaskPriorityInherit+0x164>)
   1c2a4:	189b      	adds	r3, r3, r2
   1c2a6:	4299      	cmp	r1, r3
   1c2a8:	d101      	bne.n	1c2ae <xTaskPriorityInherit+0x5a>
   1c2aa:	2301      	movs	r3, #1
   1c2ac:	e000      	b.n	1c2b0 <xTaskPriorityInherit+0x5c>
   1c2ae:	2300      	movs	r3, #0
   1c2b0:	2b00      	cmp	r3, #0
   1c2b2:	d037      	beq.n	1c324 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c2b4:	68bb      	ldr	r3, [r7, #8]
   1c2b6:	3304      	adds	r3, #4
   1c2b8:	0018      	movs	r0, r3
   1c2ba:	4b40      	ldr	r3, [pc, #256]	; (1c3bc <xTaskPriorityInherit+0x168>)
   1c2bc:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1c2be:	4b3d      	ldr	r3, [pc, #244]	; (1c3b4 <xTaskPriorityInherit+0x160>)
   1c2c0:	681b      	ldr	r3, [r3, #0]
   1c2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c2c4:	68bb      	ldr	r3, [r7, #8]
   1c2c6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1c2c8:	68bb      	ldr	r3, [r7, #8]
   1c2ca:	0018      	movs	r0, r3
   1c2cc:	4b3c      	ldr	r3, [pc, #240]	; (1c3c0 <xTaskPriorityInherit+0x16c>)
   1c2ce:	4798      	blx	r3
   1c2d0:	0003      	movs	r3, r0
   1c2d2:	001a      	movs	r2, r3
   1c2d4:	4b3b      	ldr	r3, [pc, #236]	; (1c3c4 <xTaskPriorityInherit+0x170>)
   1c2d6:	881b      	ldrh	r3, [r3, #0]
   1c2d8:	4013      	ands	r3, r2
   1c2da:	b29b      	uxth	r3, r3
   1c2dc:	2b00      	cmp	r3, #0
   1c2de:	d008      	beq.n	1c2f2 <xTaskPriorityInherit+0x9e>
   1c2e0:	68bb      	ldr	r3, [r7, #8]
   1c2e2:	0018      	movs	r0, r3
   1c2e4:	4b38      	ldr	r3, [pc, #224]	; (1c3c8 <xTaskPriorityInherit+0x174>)
   1c2e6:	4798      	blx	r3
   1c2e8:	0003      	movs	r3, r0
   1c2ea:	b2db      	uxtb	r3, r3
   1c2ec:	0018      	movs	r0, r3
   1c2ee:	4b37      	ldr	r3, [pc, #220]	; (1c3cc <xTaskPriorityInherit+0x178>)
   1c2f0:	4798      	blx	r3
   1c2f2:	68bb      	ldr	r3, [r7, #8]
   1c2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c2f6:	4b36      	ldr	r3, [pc, #216]	; (1c3d0 <xTaskPriorityInherit+0x17c>)
   1c2f8:	681b      	ldr	r3, [r3, #0]
   1c2fa:	429a      	cmp	r2, r3
   1c2fc:	d903      	bls.n	1c306 <xTaskPriorityInherit+0xb2>
   1c2fe:	68bb      	ldr	r3, [r7, #8]
   1c300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c302:	4b33      	ldr	r3, [pc, #204]	; (1c3d0 <xTaskPriorityInherit+0x17c>)
   1c304:	601a      	str	r2, [r3, #0]
   1c306:	68bb      	ldr	r3, [r7, #8]
   1c308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c30a:	0013      	movs	r3, r2
   1c30c:	009b      	lsls	r3, r3, #2
   1c30e:	189b      	adds	r3, r3, r2
   1c310:	009b      	lsls	r3, r3, #2
   1c312:	4a29      	ldr	r2, [pc, #164]	; (1c3b8 <xTaskPriorityInherit+0x164>)
   1c314:	189a      	adds	r2, r3, r2
   1c316:	68bb      	ldr	r3, [r7, #8]
   1c318:	3304      	adds	r3, #4
   1c31a:	0019      	movs	r1, r3
   1c31c:	0010      	movs	r0, r2
   1c31e:	4b2d      	ldr	r3, [pc, #180]	; (1c3d4 <xTaskPriorityInherit+0x180>)
   1c320:	4798      	blx	r3
   1c322:	e004      	b.n	1c32e <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1c324:	4b23      	ldr	r3, [pc, #140]	; (1c3b4 <xTaskPriorityInherit+0x160>)
   1c326:	681b      	ldr	r3, [r3, #0]
   1c328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c32a:	68bb      	ldr	r3, [r7, #8]
   1c32c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1c32e:	68bb      	ldr	r3, [r7, #8]
   1c330:	0018      	movs	r0, r3
   1c332:	4b23      	ldr	r3, [pc, #140]	; (1c3c0 <xTaskPriorityInherit+0x16c>)
   1c334:	4798      	blx	r3
   1c336:	0003      	movs	r3, r0
   1c338:	001a      	movs	r2, r3
   1c33a:	4b22      	ldr	r3, [pc, #136]	; (1c3c4 <xTaskPriorityInherit+0x170>)
   1c33c:	881b      	ldrh	r3, [r3, #0]
   1c33e:	4013      	ands	r3, r2
   1c340:	b29b      	uxth	r3, r3
   1c342:	2b00      	cmp	r3, #0
   1c344:	d024      	beq.n	1c390 <xTaskPriorityInherit+0x13c>
   1c346:	68bb      	ldr	r3, [r7, #8]
   1c348:	0018      	movs	r0, r3
   1c34a:	4b1f      	ldr	r3, [pc, #124]	; (1c3c8 <xTaskPriorityInherit+0x174>)
   1c34c:	4798      	blx	r3
   1c34e:	0003      	movs	r3, r0
   1c350:	b2db      	uxtb	r3, r3
   1c352:	001c      	movs	r4, r3
   1c354:	68bb      	ldr	r3, [r7, #8]
   1c356:	0018      	movs	r0, r3
   1c358:	4b1b      	ldr	r3, [pc, #108]	; (1c3c8 <xTaskPriorityInherit+0x174>)
   1c35a:	4798      	blx	r3
   1c35c:	0003      	movs	r3, r0
   1c35e:	b2db      	uxtb	r3, r3
   1c360:	0019      	movs	r1, r3
   1c362:	2003      	movs	r0, #3
   1c364:	4b1c      	ldr	r3, [pc, #112]	; (1c3d8 <xTaskPriorityInherit+0x184>)
   1c366:	4798      	blx	r3
   1c368:	0003      	movs	r3, r0
   1c36a:	0022      	movs	r2, r4
   1c36c:	2103      	movs	r1, #3
   1c36e:	208e      	movs	r0, #142	; 0x8e
   1c370:	4c1a      	ldr	r4, [pc, #104]	; (1c3dc <xTaskPriorityInherit+0x188>)
   1c372:	47a0      	blx	r4
   1c374:	68bb      	ldr	r3, [r7, #8]
   1c376:	0018      	movs	r0, r3
   1c378:	4b13      	ldr	r3, [pc, #76]	; (1c3c8 <xTaskPriorityInherit+0x174>)
   1c37a:	4798      	blx	r3
   1c37c:	0003      	movs	r3, r0
   1c37e:	b2d9      	uxtb	r1, r3
   1c380:	4b0c      	ldr	r3, [pc, #48]	; (1c3b4 <xTaskPriorityInherit+0x160>)
   1c382:	681b      	ldr	r3, [r3, #0]
   1c384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c386:	b2db      	uxtb	r3, r3
   1c388:	001a      	movs	r2, r3
   1c38a:	2003      	movs	r0, #3
   1c38c:	4b14      	ldr	r3, [pc, #80]	; (1c3e0 <xTaskPriorityInherit+0x18c>)
   1c38e:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1c390:	2301      	movs	r3, #1
   1c392:	60fb      	str	r3, [r7, #12]
   1c394:	e008      	b.n	1c3a8 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1c396:	68bb      	ldr	r3, [r7, #8]
   1c398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c39a:	4b06      	ldr	r3, [pc, #24]	; (1c3b4 <xTaskPriorityInherit+0x160>)
   1c39c:	681b      	ldr	r3, [r3, #0]
   1c39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c3a0:	429a      	cmp	r2, r3
   1c3a2:	d201      	bcs.n	1c3a8 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1c3a4:	2301      	movs	r3, #1
   1c3a6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c3a8:	68fb      	ldr	r3, [r7, #12]
	}
   1c3aa:	0018      	movs	r0, r3
   1c3ac:	46bd      	mov	sp, r7
   1c3ae:	b005      	add	sp, #20
   1c3b0:	bd90      	pop	{r4, r7, pc}
   1c3b2:	46c0      	nop			; (mov r8, r8)
   1c3b4:	20003c34 	.word	0x20003c34
   1c3b8:	20003c38 	.word	0x20003c38
   1c3bc:	0001936b 	.word	0x0001936b
   1c3c0:	000174f1 	.word	0x000174f1
   1c3c4:	200000b8 	.word	0x200000b8
   1c3c8:	000174d1 	.word	0x000174d1
   1c3cc:	00017ca1 	.word	0x00017ca1
   1c3d0:	20003d14 	.word	0x20003d14
   1c3d4:	000192bb 	.word	0x000192bb
   1c3d8:	000184a9 	.word	0x000184a9
   1c3dc:	00018019 	.word	0x00018019
   1c3e0:	00018405 	.word	0x00018405

0001c3e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1c3e4:	b590      	push	{r4, r7, lr}
   1c3e6:	b085      	sub	sp, #20
   1c3e8:	af00      	add	r7, sp, #0
   1c3ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1c3ec:	687b      	ldr	r3, [r7, #4]
   1c3ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1c3f0:	2300      	movs	r3, #0
   1c3f2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1c3f4:	687b      	ldr	r3, [r7, #4]
   1c3f6:	2b00      	cmp	r3, #0
   1c3f8:	d100      	bne.n	1c3fc <xTaskPriorityDisinherit+0x18>
   1c3fa:	e089      	b.n	1c510 <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1c3fc:	4b47      	ldr	r3, [pc, #284]	; (1c51c <xTaskPriorityDisinherit+0x138>)
   1c3fe:	681b      	ldr	r3, [r3, #0]
   1c400:	68ba      	ldr	r2, [r7, #8]
   1c402:	429a      	cmp	r2, r3
   1c404:	d001      	beq.n	1c40a <xTaskPriorityDisinherit+0x26>
   1c406:	b672      	cpsid	i
   1c408:	e7fe      	b.n	1c408 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1c40a:	68bb      	ldr	r3, [r7, #8]
   1c40c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c40e:	2b00      	cmp	r3, #0
   1c410:	d101      	bne.n	1c416 <xTaskPriorityDisinherit+0x32>
   1c412:	b672      	cpsid	i
   1c414:	e7fe      	b.n	1c414 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1c416:	68bb      	ldr	r3, [r7, #8]
   1c418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c41a:	1e5a      	subs	r2, r3, #1
   1c41c:	68bb      	ldr	r3, [r7, #8]
   1c41e:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1c420:	68bb      	ldr	r3, [r7, #8]
   1c422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c424:	68bb      	ldr	r3, [r7, #8]
   1c426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c428:	429a      	cmp	r2, r3
   1c42a:	d071      	beq.n	1c510 <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1c42c:	68bb      	ldr	r3, [r7, #8]
   1c42e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c430:	2b00      	cmp	r3, #0
   1c432:	d16d      	bne.n	1c510 <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c434:	68bb      	ldr	r3, [r7, #8]
   1c436:	3304      	adds	r3, #4
   1c438:	0018      	movs	r0, r3
   1c43a:	4b39      	ldr	r3, [pc, #228]	; (1c520 <xTaskPriorityDisinherit+0x13c>)
   1c43c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1c43e:	68bb      	ldr	r3, [r7, #8]
   1c440:	0018      	movs	r0, r3
   1c442:	4b38      	ldr	r3, [pc, #224]	; (1c524 <xTaskPriorityDisinherit+0x140>)
   1c444:	4798      	blx	r3
   1c446:	0003      	movs	r3, r0
   1c448:	001a      	movs	r2, r3
   1c44a:	4b37      	ldr	r3, [pc, #220]	; (1c528 <xTaskPriorityDisinherit+0x144>)
   1c44c:	881b      	ldrh	r3, [r3, #0]
   1c44e:	4013      	ands	r3, r2
   1c450:	b29b      	uxth	r3, r3
   1c452:	2b00      	cmp	r3, #0
   1c454:	d023      	beq.n	1c49e <xTaskPriorityDisinherit+0xba>
   1c456:	68bb      	ldr	r3, [r7, #8]
   1c458:	0018      	movs	r0, r3
   1c45a:	4b34      	ldr	r3, [pc, #208]	; (1c52c <xTaskPriorityDisinherit+0x148>)
   1c45c:	4798      	blx	r3
   1c45e:	0003      	movs	r3, r0
   1c460:	b2db      	uxtb	r3, r3
   1c462:	001c      	movs	r4, r3
   1c464:	68bb      	ldr	r3, [r7, #8]
   1c466:	0018      	movs	r0, r3
   1c468:	4b30      	ldr	r3, [pc, #192]	; (1c52c <xTaskPriorityDisinherit+0x148>)
   1c46a:	4798      	blx	r3
   1c46c:	0003      	movs	r3, r0
   1c46e:	b2db      	uxtb	r3, r3
   1c470:	0019      	movs	r1, r3
   1c472:	2003      	movs	r0, #3
   1c474:	4b2e      	ldr	r3, [pc, #184]	; (1c530 <xTaskPriorityDisinherit+0x14c>)
   1c476:	4798      	blx	r3
   1c478:	0003      	movs	r3, r0
   1c47a:	0022      	movs	r2, r4
   1c47c:	2103      	movs	r1, #3
   1c47e:	208f      	movs	r0, #143	; 0x8f
   1c480:	4c2c      	ldr	r4, [pc, #176]	; (1c534 <xTaskPriorityDisinherit+0x150>)
   1c482:	47a0      	blx	r4
   1c484:	68bb      	ldr	r3, [r7, #8]
   1c486:	0018      	movs	r0, r3
   1c488:	4b28      	ldr	r3, [pc, #160]	; (1c52c <xTaskPriorityDisinherit+0x148>)
   1c48a:	4798      	blx	r3
   1c48c:	0003      	movs	r3, r0
   1c48e:	b2d9      	uxtb	r1, r3
   1c490:	68bb      	ldr	r3, [r7, #8]
   1c492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c494:	b2db      	uxtb	r3, r3
   1c496:	001a      	movs	r2, r3
   1c498:	2003      	movs	r0, #3
   1c49a:	4b27      	ldr	r3, [pc, #156]	; (1c538 <xTaskPriorityDisinherit+0x154>)
   1c49c:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1c49e:	68bb      	ldr	r3, [r7, #8]
   1c4a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c4a2:	68bb      	ldr	r3, [r7, #8]
   1c4a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c4a6:	68bb      	ldr	r3, [r7, #8]
   1c4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c4aa:	2205      	movs	r2, #5
   1c4ac:	1ad2      	subs	r2, r2, r3
   1c4ae:	68bb      	ldr	r3, [r7, #8]
   1c4b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1c4b2:	68bb      	ldr	r3, [r7, #8]
   1c4b4:	0018      	movs	r0, r3
   1c4b6:	4b1b      	ldr	r3, [pc, #108]	; (1c524 <xTaskPriorityDisinherit+0x140>)
   1c4b8:	4798      	blx	r3
   1c4ba:	0003      	movs	r3, r0
   1c4bc:	001a      	movs	r2, r3
   1c4be:	4b1a      	ldr	r3, [pc, #104]	; (1c528 <xTaskPriorityDisinherit+0x144>)
   1c4c0:	881b      	ldrh	r3, [r3, #0]
   1c4c2:	4013      	ands	r3, r2
   1c4c4:	b29b      	uxth	r3, r3
   1c4c6:	2b00      	cmp	r3, #0
   1c4c8:	d008      	beq.n	1c4dc <xTaskPriorityDisinherit+0xf8>
   1c4ca:	68bb      	ldr	r3, [r7, #8]
   1c4cc:	0018      	movs	r0, r3
   1c4ce:	4b17      	ldr	r3, [pc, #92]	; (1c52c <xTaskPriorityDisinherit+0x148>)
   1c4d0:	4798      	blx	r3
   1c4d2:	0003      	movs	r3, r0
   1c4d4:	b2db      	uxtb	r3, r3
   1c4d6:	0018      	movs	r0, r3
   1c4d8:	4b18      	ldr	r3, [pc, #96]	; (1c53c <xTaskPriorityDisinherit+0x158>)
   1c4da:	4798      	blx	r3
   1c4dc:	68bb      	ldr	r3, [r7, #8]
   1c4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c4e0:	4b17      	ldr	r3, [pc, #92]	; (1c540 <xTaskPriorityDisinherit+0x15c>)
   1c4e2:	681b      	ldr	r3, [r3, #0]
   1c4e4:	429a      	cmp	r2, r3
   1c4e6:	d903      	bls.n	1c4f0 <xTaskPriorityDisinherit+0x10c>
   1c4e8:	68bb      	ldr	r3, [r7, #8]
   1c4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c4ec:	4b14      	ldr	r3, [pc, #80]	; (1c540 <xTaskPriorityDisinherit+0x15c>)
   1c4ee:	601a      	str	r2, [r3, #0]
   1c4f0:	68bb      	ldr	r3, [r7, #8]
   1c4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c4f4:	0013      	movs	r3, r2
   1c4f6:	009b      	lsls	r3, r3, #2
   1c4f8:	189b      	adds	r3, r3, r2
   1c4fa:	009b      	lsls	r3, r3, #2
   1c4fc:	4a11      	ldr	r2, [pc, #68]	; (1c544 <xTaskPriorityDisinherit+0x160>)
   1c4fe:	189a      	adds	r2, r3, r2
   1c500:	68bb      	ldr	r3, [r7, #8]
   1c502:	3304      	adds	r3, #4
   1c504:	0019      	movs	r1, r3
   1c506:	0010      	movs	r0, r2
   1c508:	4b0f      	ldr	r3, [pc, #60]	; (1c548 <xTaskPriorityDisinherit+0x164>)
   1c50a:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1c50c:	2301      	movs	r3, #1
   1c50e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c510:	68fb      	ldr	r3, [r7, #12]
	}
   1c512:	0018      	movs	r0, r3
   1c514:	46bd      	mov	sp, r7
   1c516:	b005      	add	sp, #20
   1c518:	bd90      	pop	{r4, r7, pc}
   1c51a:	46c0      	nop			; (mov r8, r8)
   1c51c:	20003c34 	.word	0x20003c34
   1c520:	0001936b 	.word	0x0001936b
   1c524:	000174f1 	.word	0x000174f1
   1c528:	200000b8 	.word	0x200000b8
   1c52c:	000174d1 	.word	0x000174d1
   1c530:	000184a9 	.word	0x000184a9
   1c534:	00018019 	.word	0x00018019
   1c538:	00018405 	.word	0x00018405
   1c53c:	00017ca1 	.word	0x00017ca1
   1c540:	20003d14 	.word	0x20003d14
   1c544:	20003c38 	.word	0x20003c38
   1c548:	000192bb 	.word	0x000192bb

0001c54c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1c54c:	b590      	push	{r4, r7, lr}
   1c54e:	b087      	sub	sp, #28
   1c550:	af00      	add	r7, sp, #0
   1c552:	6078      	str	r0, [r7, #4]
   1c554:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1c556:	687b      	ldr	r3, [r7, #4]
   1c558:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1c55a:	2301      	movs	r3, #1
   1c55c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1c55e:	687b      	ldr	r3, [r7, #4]
   1c560:	2b00      	cmp	r3, #0
   1c562:	d100      	bne.n	1c566 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1c564:	e0a4      	b.n	1c6b0 <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1c566:	693b      	ldr	r3, [r7, #16]
   1c568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c56a:	2b00      	cmp	r3, #0
   1c56c:	d101      	bne.n	1c572 <vTaskPriorityDisinheritAfterTimeout+0x26>
   1c56e:	b672      	cpsid	i
   1c570:	e7fe      	b.n	1c570 <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1c572:	693b      	ldr	r3, [r7, #16]
   1c574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1c576:	683b      	ldr	r3, [r7, #0]
   1c578:	429a      	cmp	r2, r3
   1c57a:	d202      	bcs.n	1c582 <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1c57c:	683b      	ldr	r3, [r7, #0]
   1c57e:	617b      	str	r3, [r7, #20]
   1c580:	e002      	b.n	1c588 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1c582:	693b      	ldr	r3, [r7, #16]
   1c584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c586:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1c588:	693b      	ldr	r3, [r7, #16]
   1c58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c58c:	697b      	ldr	r3, [r7, #20]
   1c58e:	429a      	cmp	r2, r3
   1c590:	d100      	bne.n	1c594 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1c592:	e08d      	b.n	1c6b0 <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1c594:	693b      	ldr	r3, [r7, #16]
   1c596:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c598:	68fb      	ldr	r3, [r7, #12]
   1c59a:	429a      	cmp	r2, r3
   1c59c:	d000      	beq.n	1c5a0 <vTaskPriorityDisinheritAfterTimeout+0x54>
   1c59e:	e087      	b.n	1c6b0 <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1c5a0:	4b45      	ldr	r3, [pc, #276]	; (1c6b8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1c5a2:	681b      	ldr	r3, [r3, #0]
   1c5a4:	693a      	ldr	r2, [r7, #16]
   1c5a6:	429a      	cmp	r2, r3
   1c5a8:	d101      	bne.n	1c5ae <vTaskPriorityDisinheritAfterTimeout+0x62>
   1c5aa:	b672      	cpsid	i
   1c5ac:	e7fe      	b.n	1c5ac <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1c5ae:	693b      	ldr	r3, [r7, #16]
   1c5b0:	0018      	movs	r0, r3
   1c5b2:	4b42      	ldr	r3, [pc, #264]	; (1c6bc <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1c5b4:	4798      	blx	r3
   1c5b6:	0003      	movs	r3, r0
   1c5b8:	001a      	movs	r2, r3
   1c5ba:	4b41      	ldr	r3, [pc, #260]	; (1c6c0 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1c5bc:	881b      	ldrh	r3, [r3, #0]
   1c5be:	4013      	ands	r3, r2
   1c5c0:	b29b      	uxth	r3, r3
   1c5c2:	2b00      	cmp	r3, #0
   1c5c4:	d023      	beq.n	1c60e <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1c5c6:	693b      	ldr	r3, [r7, #16]
   1c5c8:	0018      	movs	r0, r3
   1c5ca:	4b3e      	ldr	r3, [pc, #248]	; (1c6c4 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c5cc:	4798      	blx	r3
   1c5ce:	0003      	movs	r3, r0
   1c5d0:	b2db      	uxtb	r3, r3
   1c5d2:	001c      	movs	r4, r3
   1c5d4:	693b      	ldr	r3, [r7, #16]
   1c5d6:	0018      	movs	r0, r3
   1c5d8:	4b3a      	ldr	r3, [pc, #232]	; (1c6c4 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c5da:	4798      	blx	r3
   1c5dc:	0003      	movs	r3, r0
   1c5de:	b2db      	uxtb	r3, r3
   1c5e0:	0019      	movs	r1, r3
   1c5e2:	2003      	movs	r0, #3
   1c5e4:	4b38      	ldr	r3, [pc, #224]	; (1c6c8 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1c5e6:	4798      	blx	r3
   1c5e8:	0003      	movs	r3, r0
   1c5ea:	0022      	movs	r2, r4
   1c5ec:	2103      	movs	r1, #3
   1c5ee:	208f      	movs	r0, #143	; 0x8f
   1c5f0:	4c36      	ldr	r4, [pc, #216]	; (1c6cc <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1c5f2:	47a0      	blx	r4
   1c5f4:	693b      	ldr	r3, [r7, #16]
   1c5f6:	0018      	movs	r0, r3
   1c5f8:	4b32      	ldr	r3, [pc, #200]	; (1c6c4 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c5fa:	4798      	blx	r3
   1c5fc:	0003      	movs	r3, r0
   1c5fe:	b2d9      	uxtb	r1, r3
   1c600:	693b      	ldr	r3, [r7, #16]
   1c602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c604:	b2db      	uxtb	r3, r3
   1c606:	001a      	movs	r2, r3
   1c608:	2003      	movs	r0, #3
   1c60a:	4b31      	ldr	r3, [pc, #196]	; (1c6d0 <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1c60c:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1c60e:	693b      	ldr	r3, [r7, #16]
   1c610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c612:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1c614:	693b      	ldr	r3, [r7, #16]
   1c616:	697a      	ldr	r2, [r7, #20]
   1c618:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1c61a:	693b      	ldr	r3, [r7, #16]
   1c61c:	699b      	ldr	r3, [r3, #24]
   1c61e:	2b00      	cmp	r3, #0
   1c620:	db04      	blt.n	1c62c <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c622:	697b      	ldr	r3, [r7, #20]
   1c624:	2205      	movs	r2, #5
   1c626:	1ad2      	subs	r2, r2, r3
   1c628:	693b      	ldr	r3, [r7, #16]
   1c62a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1c62c:	693b      	ldr	r3, [r7, #16]
   1c62e:	6959      	ldr	r1, [r3, #20]
   1c630:	68ba      	ldr	r2, [r7, #8]
   1c632:	0013      	movs	r3, r2
   1c634:	009b      	lsls	r3, r3, #2
   1c636:	189b      	adds	r3, r3, r2
   1c638:	009b      	lsls	r3, r3, #2
   1c63a:	4a26      	ldr	r2, [pc, #152]	; (1c6d4 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1c63c:	189b      	adds	r3, r3, r2
   1c63e:	4299      	cmp	r1, r3
   1c640:	d101      	bne.n	1c646 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1c642:	2301      	movs	r3, #1
   1c644:	e000      	b.n	1c648 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1c646:	2300      	movs	r3, #0
   1c648:	2b00      	cmp	r3, #0
   1c64a:	d031      	beq.n	1c6b0 <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c64c:	693b      	ldr	r3, [r7, #16]
   1c64e:	3304      	adds	r3, #4
   1c650:	0018      	movs	r0, r3
   1c652:	4b21      	ldr	r3, [pc, #132]	; (1c6d8 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1c654:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1c656:	693b      	ldr	r3, [r7, #16]
   1c658:	0018      	movs	r0, r3
   1c65a:	4b18      	ldr	r3, [pc, #96]	; (1c6bc <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1c65c:	4798      	blx	r3
   1c65e:	0003      	movs	r3, r0
   1c660:	001a      	movs	r2, r3
   1c662:	4b17      	ldr	r3, [pc, #92]	; (1c6c0 <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1c664:	881b      	ldrh	r3, [r3, #0]
   1c666:	4013      	ands	r3, r2
   1c668:	b29b      	uxth	r3, r3
   1c66a:	2b00      	cmp	r3, #0
   1c66c:	d008      	beq.n	1c680 <vTaskPriorityDisinheritAfterTimeout+0x134>
   1c66e:	693b      	ldr	r3, [r7, #16]
   1c670:	0018      	movs	r0, r3
   1c672:	4b14      	ldr	r3, [pc, #80]	; (1c6c4 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1c674:	4798      	blx	r3
   1c676:	0003      	movs	r3, r0
   1c678:	b2db      	uxtb	r3, r3
   1c67a:	0018      	movs	r0, r3
   1c67c:	4b17      	ldr	r3, [pc, #92]	; (1c6dc <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1c67e:	4798      	blx	r3
   1c680:	693b      	ldr	r3, [r7, #16]
   1c682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c684:	4b16      	ldr	r3, [pc, #88]	; (1c6e0 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1c686:	681b      	ldr	r3, [r3, #0]
   1c688:	429a      	cmp	r2, r3
   1c68a:	d903      	bls.n	1c694 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1c68c:	693b      	ldr	r3, [r7, #16]
   1c68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c690:	4b13      	ldr	r3, [pc, #76]	; (1c6e0 <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1c692:	601a      	str	r2, [r3, #0]
   1c694:	693b      	ldr	r3, [r7, #16]
   1c696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c698:	0013      	movs	r3, r2
   1c69a:	009b      	lsls	r3, r3, #2
   1c69c:	189b      	adds	r3, r3, r2
   1c69e:	009b      	lsls	r3, r3, #2
   1c6a0:	4a0c      	ldr	r2, [pc, #48]	; (1c6d4 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1c6a2:	189a      	adds	r2, r3, r2
   1c6a4:	693b      	ldr	r3, [r7, #16]
   1c6a6:	3304      	adds	r3, #4
   1c6a8:	0019      	movs	r1, r3
   1c6aa:	0010      	movs	r0, r2
   1c6ac:	4b0d      	ldr	r3, [pc, #52]	; (1c6e4 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1c6ae:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c6b0:	46c0      	nop			; (mov r8, r8)
   1c6b2:	46bd      	mov	sp, r7
   1c6b4:	b007      	add	sp, #28
   1c6b6:	bd90      	pop	{r4, r7, pc}
   1c6b8:	20003c34 	.word	0x20003c34
   1c6bc:	000174f1 	.word	0x000174f1
   1c6c0:	200000b8 	.word	0x200000b8
   1c6c4:	000174d1 	.word	0x000174d1
   1c6c8:	000184a9 	.word	0x000184a9
   1c6cc:	00018019 	.word	0x00018019
   1c6d0:	00018405 	.word	0x00018405
   1c6d4:	20003c38 	.word	0x20003c38
   1c6d8:	0001936b 	.word	0x0001936b
   1c6dc:	00017ca1 	.word	0x00017ca1
   1c6e0:	20003d14 	.word	0x20003d14
   1c6e4:	000192bb 	.word	0x000192bb

0001c6e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1c6e8:	b580      	push	{r7, lr}
   1c6ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1c6ec:	4b06      	ldr	r3, [pc, #24]	; (1c708 <pvTaskIncrementMutexHeldCount+0x20>)
   1c6ee:	681b      	ldr	r3, [r3, #0]
   1c6f0:	2b00      	cmp	r3, #0
   1c6f2:	d004      	beq.n	1c6fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1c6f4:	4b04      	ldr	r3, [pc, #16]	; (1c708 <pvTaskIncrementMutexHeldCount+0x20>)
   1c6f6:	681b      	ldr	r3, [r3, #0]
   1c6f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c6fa:	3201      	adds	r2, #1
   1c6fc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1c6fe:	4b02      	ldr	r3, [pc, #8]	; (1c708 <pvTaskIncrementMutexHeldCount+0x20>)
   1c700:	681b      	ldr	r3, [r3, #0]
	}
   1c702:	0018      	movs	r0, r3
   1c704:	46bd      	mov	sp, r7
   1c706:	bd80      	pop	{r7, pc}
   1c708:	20003c34 	.word	0x20003c34

0001c70c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1c70c:	b580      	push	{r7, lr}
   1c70e:	b084      	sub	sp, #16
   1c710:	af00      	add	r7, sp, #0
   1c712:	6078      	str	r0, [r7, #4]
   1c714:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1c716:	4b21      	ldr	r3, [pc, #132]	; (1c79c <prvAddCurrentTaskToDelayedList+0x90>)
   1c718:	681b      	ldr	r3, [r3, #0]
   1c71a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c71c:	4b20      	ldr	r3, [pc, #128]	; (1c7a0 <prvAddCurrentTaskToDelayedList+0x94>)
   1c71e:	681b      	ldr	r3, [r3, #0]
   1c720:	3304      	adds	r3, #4
   1c722:	0018      	movs	r0, r3
   1c724:	4b1f      	ldr	r3, [pc, #124]	; (1c7a4 <prvAddCurrentTaskToDelayedList+0x98>)
   1c726:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1c728:	687b      	ldr	r3, [r7, #4]
   1c72a:	3301      	adds	r3, #1
   1c72c:	d10b      	bne.n	1c746 <prvAddCurrentTaskToDelayedList+0x3a>
   1c72e:	683b      	ldr	r3, [r7, #0]
   1c730:	2b00      	cmp	r3, #0
   1c732:	d008      	beq.n	1c746 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c734:	4b1a      	ldr	r3, [pc, #104]	; (1c7a0 <prvAddCurrentTaskToDelayedList+0x94>)
   1c736:	681b      	ldr	r3, [r3, #0]
   1c738:	1d1a      	adds	r2, r3, #4
   1c73a:	4b1b      	ldr	r3, [pc, #108]	; (1c7a8 <prvAddCurrentTaskToDelayedList+0x9c>)
   1c73c:	0011      	movs	r1, r2
   1c73e:	0018      	movs	r0, r3
   1c740:	4b1a      	ldr	r3, [pc, #104]	; (1c7ac <prvAddCurrentTaskToDelayedList+0xa0>)
   1c742:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1c744:	e026      	b.n	1c794 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1c746:	68fa      	ldr	r2, [r7, #12]
   1c748:	687b      	ldr	r3, [r7, #4]
   1c74a:	18d3      	adds	r3, r2, r3
   1c74c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1c74e:	4b14      	ldr	r3, [pc, #80]	; (1c7a0 <prvAddCurrentTaskToDelayedList+0x94>)
   1c750:	681b      	ldr	r3, [r3, #0]
   1c752:	68ba      	ldr	r2, [r7, #8]
   1c754:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1c756:	68ba      	ldr	r2, [r7, #8]
   1c758:	68fb      	ldr	r3, [r7, #12]
   1c75a:	429a      	cmp	r2, r3
   1c75c:	d209      	bcs.n	1c772 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c75e:	4b14      	ldr	r3, [pc, #80]	; (1c7b0 <prvAddCurrentTaskToDelayedList+0xa4>)
   1c760:	681a      	ldr	r2, [r3, #0]
   1c762:	4b0f      	ldr	r3, [pc, #60]	; (1c7a0 <prvAddCurrentTaskToDelayedList+0x94>)
   1c764:	681b      	ldr	r3, [r3, #0]
   1c766:	3304      	adds	r3, #4
   1c768:	0019      	movs	r1, r3
   1c76a:	0010      	movs	r0, r2
   1c76c:	4b11      	ldr	r3, [pc, #68]	; (1c7b4 <prvAddCurrentTaskToDelayedList+0xa8>)
   1c76e:	4798      	blx	r3
}
   1c770:	e010      	b.n	1c794 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1c772:	4b11      	ldr	r3, [pc, #68]	; (1c7b8 <prvAddCurrentTaskToDelayedList+0xac>)
   1c774:	681a      	ldr	r2, [r3, #0]
   1c776:	4b0a      	ldr	r3, [pc, #40]	; (1c7a0 <prvAddCurrentTaskToDelayedList+0x94>)
   1c778:	681b      	ldr	r3, [r3, #0]
   1c77a:	3304      	adds	r3, #4
   1c77c:	0019      	movs	r1, r3
   1c77e:	0010      	movs	r0, r2
   1c780:	4b0c      	ldr	r3, [pc, #48]	; (1c7b4 <prvAddCurrentTaskToDelayedList+0xa8>)
   1c782:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1c784:	4b0d      	ldr	r3, [pc, #52]	; (1c7bc <prvAddCurrentTaskToDelayedList+0xb0>)
   1c786:	681b      	ldr	r3, [r3, #0]
   1c788:	68ba      	ldr	r2, [r7, #8]
   1c78a:	429a      	cmp	r2, r3
   1c78c:	d202      	bcs.n	1c794 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1c78e:	4b0b      	ldr	r3, [pc, #44]	; (1c7bc <prvAddCurrentTaskToDelayedList+0xb0>)
   1c790:	68ba      	ldr	r2, [r7, #8]
   1c792:	601a      	str	r2, [r3, #0]
}
   1c794:	46c0      	nop			; (mov r8, r8)
   1c796:	46bd      	mov	sp, r7
   1c798:	b004      	add	sp, #16
   1c79a:	bd80      	pop	{r7, pc}
   1c79c:	20003d10 	.word	0x20003d10
   1c7a0:	20003c34 	.word	0x20003c34
   1c7a4:	0001936b 	.word	0x0001936b
   1c7a8:	20003cf8 	.word	0x20003cf8
   1c7ac:	000192bb 	.word	0x000192bb
   1c7b0:	20003cc8 	.word	0x20003cc8
   1c7b4:	000192ff 	.word	0x000192ff
   1c7b8:	20003cc4 	.word	0x20003cc4
   1c7bc:	20003d2c 	.word	0x20003d2c

0001c7c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1c7c0:	b590      	push	{r4, r7, lr}
   1c7c2:	b085      	sub	sp, #20
   1c7c4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1c7c6:	2300      	movs	r3, #0
   1c7c8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1c7ca:	4b0e      	ldr	r3, [pc, #56]	; (1c804 <xTimerCreateTimerTask+0x44>)
   1c7cc:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1c7ce:	4b0e      	ldr	r3, [pc, #56]	; (1c808 <xTimerCreateTimerTask+0x48>)
   1c7d0:	681b      	ldr	r3, [r3, #0]
   1c7d2:	2b00      	cmp	r3, #0
   1c7d4:	d00b      	beq.n	1c7ee <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1c7d6:	490d      	ldr	r1, [pc, #52]	; (1c80c <xTimerCreateTimerTask+0x4c>)
   1c7d8:	480d      	ldr	r0, [pc, #52]	; (1c810 <xTimerCreateTimerTask+0x50>)
   1c7da:	4b0e      	ldr	r3, [pc, #56]	; (1c814 <xTimerCreateTimerTask+0x54>)
   1c7dc:	9301      	str	r3, [sp, #4]
   1c7de:	2302      	movs	r3, #2
   1c7e0:	9300      	str	r3, [sp, #0]
   1c7e2:	2300      	movs	r3, #0
   1c7e4:	2280      	movs	r2, #128	; 0x80
   1c7e6:	4c0c      	ldr	r4, [pc, #48]	; (1c818 <xTimerCreateTimerTask+0x58>)
   1c7e8:	47a0      	blx	r4
   1c7ea:	0003      	movs	r3, r0
   1c7ec:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1c7ee:	687b      	ldr	r3, [r7, #4]
   1c7f0:	2b00      	cmp	r3, #0
   1c7f2:	d101      	bne.n	1c7f8 <xTimerCreateTimerTask+0x38>
   1c7f4:	b672      	cpsid	i
   1c7f6:	e7fe      	b.n	1c7f6 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1c7f8:	687b      	ldr	r3, [r7, #4]
}
   1c7fa:	0018      	movs	r0, r3
   1c7fc:	46bd      	mov	sp, r7
   1c7fe:	b003      	add	sp, #12
   1c800:	bd90      	pop	{r4, r7, pc}
   1c802:	46c0      	nop			; (mov r8, r8)
   1c804:	0001cd09 	.word	0x0001cd09
   1c808:	20003d68 	.word	0x20003d68
   1c80c:	000370a4 	.word	0x000370a4
   1c810:	0001c941 	.word	0x0001c941
   1c814:	20003d6c 	.word	0x20003d6c
   1c818:	0001b159 	.word	0x0001b159

0001c81c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1c81c:	b590      	push	{r4, r7, lr}
   1c81e:	b089      	sub	sp, #36	; 0x24
   1c820:	af00      	add	r7, sp, #0
   1c822:	60f8      	str	r0, [r7, #12]
   1c824:	60b9      	str	r1, [r7, #8]
   1c826:	607a      	str	r2, [r7, #4]
   1c828:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1c82a:	2300      	movs	r3, #0
   1c82c:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1c82e:	68fb      	ldr	r3, [r7, #12]
   1c830:	2b00      	cmp	r3, #0
   1c832:	d101      	bne.n	1c838 <xTimerGenericCommand+0x1c>
   1c834:	b672      	cpsid	i
   1c836:	e7fe      	b.n	1c836 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1c838:	4b1e      	ldr	r3, [pc, #120]	; (1c8b4 <xTimerGenericCommand+0x98>)
   1c83a:	681b      	ldr	r3, [r3, #0]
   1c83c:	2b00      	cmp	r3, #0
   1c83e:	d033      	beq.n	1c8a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1c840:	2310      	movs	r3, #16
   1c842:	18fb      	adds	r3, r7, r3
   1c844:	68ba      	ldr	r2, [r7, #8]
   1c846:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1c848:	2310      	movs	r3, #16
   1c84a:	18fb      	adds	r3, r7, r3
   1c84c:	687a      	ldr	r2, [r7, #4]
   1c84e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1c850:	2310      	movs	r3, #16
   1c852:	18fb      	adds	r3, r7, r3
   1c854:	68fa      	ldr	r2, [r7, #12]
   1c856:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1c858:	68bb      	ldr	r3, [r7, #8]
   1c85a:	2b05      	cmp	r3, #5
   1c85c:	dc1a      	bgt.n	1c894 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1c85e:	4b16      	ldr	r3, [pc, #88]	; (1c8b8 <xTimerGenericCommand+0x9c>)
   1c860:	4798      	blx	r3
   1c862:	0003      	movs	r3, r0
   1c864:	2b02      	cmp	r3, #2
   1c866:	d10a      	bne.n	1c87e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1c868:	4b12      	ldr	r3, [pc, #72]	; (1c8b4 <xTimerGenericCommand+0x98>)
   1c86a:	6818      	ldr	r0, [r3, #0]
   1c86c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1c86e:	2310      	movs	r3, #16
   1c870:	18f9      	adds	r1, r7, r3
   1c872:	2300      	movs	r3, #0
   1c874:	4c11      	ldr	r4, [pc, #68]	; (1c8bc <xTimerGenericCommand+0xa0>)
   1c876:	47a0      	blx	r4
   1c878:	0003      	movs	r3, r0
   1c87a:	61fb      	str	r3, [r7, #28]
   1c87c:	e014      	b.n	1c8a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1c87e:	4b0d      	ldr	r3, [pc, #52]	; (1c8b4 <xTimerGenericCommand+0x98>)
   1c880:	6818      	ldr	r0, [r3, #0]
   1c882:	2310      	movs	r3, #16
   1c884:	18f9      	adds	r1, r7, r3
   1c886:	2300      	movs	r3, #0
   1c888:	2200      	movs	r2, #0
   1c88a:	4c0c      	ldr	r4, [pc, #48]	; (1c8bc <xTimerGenericCommand+0xa0>)
   1c88c:	47a0      	blx	r4
   1c88e:	0003      	movs	r3, r0
   1c890:	61fb      	str	r3, [r7, #28]
   1c892:	e009      	b.n	1c8a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1c894:	4b07      	ldr	r3, [pc, #28]	; (1c8b4 <xTimerGenericCommand+0x98>)
   1c896:	6818      	ldr	r0, [r3, #0]
   1c898:	683a      	ldr	r2, [r7, #0]
   1c89a:	2310      	movs	r3, #16
   1c89c:	18f9      	adds	r1, r7, r3
   1c89e:	2300      	movs	r3, #0
   1c8a0:	4c07      	ldr	r4, [pc, #28]	; (1c8c0 <xTimerGenericCommand+0xa4>)
   1c8a2:	47a0      	blx	r4
   1c8a4:	0003      	movs	r3, r0
   1c8a6:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1c8a8:	69fb      	ldr	r3, [r7, #28]
}
   1c8aa:	0018      	movs	r0, r3
   1c8ac:	46bd      	mov	sp, r7
   1c8ae:	b009      	add	sp, #36	; 0x24
   1c8b0:	bd90      	pop	{r4, r7, pc}
   1c8b2:	46c0      	nop			; (mov r8, r8)
   1c8b4:	20003d68 	.word	0x20003d68
   1c8b8:	0001c21d 	.word	0x0001c21d
   1c8bc:	00019a91 	.word	0x00019a91
   1c8c0:	00019ef1 	.word	0x00019ef1

0001c8c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1c8c4:	b590      	push	{r4, r7, lr}
   1c8c6:	b087      	sub	sp, #28
   1c8c8:	af02      	add	r7, sp, #8
   1c8ca:	6078      	str	r0, [r7, #4]
   1c8cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c8ce:	4b18      	ldr	r3, [pc, #96]	; (1c930 <prvProcessExpiredTimer+0x6c>)
   1c8d0:	681b      	ldr	r3, [r3, #0]
   1c8d2:	68db      	ldr	r3, [r3, #12]
   1c8d4:	68db      	ldr	r3, [r3, #12]
   1c8d6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1c8d8:	68fb      	ldr	r3, [r7, #12]
   1c8da:	3304      	adds	r3, #4
   1c8dc:	0018      	movs	r0, r3
   1c8de:	4b15      	ldr	r3, [pc, #84]	; (1c934 <prvProcessExpiredTimer+0x70>)
   1c8e0:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1c8e2:	68fb      	ldr	r3, [r7, #12]
   1c8e4:	69db      	ldr	r3, [r3, #28]
   1c8e6:	2b01      	cmp	r3, #1
   1c8e8:	d119      	bne.n	1c91e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1c8ea:	68fb      	ldr	r3, [r7, #12]
   1c8ec:	699a      	ldr	r2, [r3, #24]
   1c8ee:	687b      	ldr	r3, [r7, #4]
   1c8f0:	18d1      	adds	r1, r2, r3
   1c8f2:	687b      	ldr	r3, [r7, #4]
   1c8f4:	683a      	ldr	r2, [r7, #0]
   1c8f6:	68f8      	ldr	r0, [r7, #12]
   1c8f8:	4c0f      	ldr	r4, [pc, #60]	; (1c938 <prvProcessExpiredTimer+0x74>)
   1c8fa:	47a0      	blx	r4
   1c8fc:	1e03      	subs	r3, r0, #0
   1c8fe:	d00e      	beq.n	1c91e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1c900:	687a      	ldr	r2, [r7, #4]
   1c902:	68f8      	ldr	r0, [r7, #12]
   1c904:	2300      	movs	r3, #0
   1c906:	9300      	str	r3, [sp, #0]
   1c908:	2300      	movs	r3, #0
   1c90a:	2100      	movs	r1, #0
   1c90c:	4c0b      	ldr	r4, [pc, #44]	; (1c93c <prvProcessExpiredTimer+0x78>)
   1c90e:	47a0      	blx	r4
   1c910:	0003      	movs	r3, r0
   1c912:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1c914:	68bb      	ldr	r3, [r7, #8]
   1c916:	2b00      	cmp	r3, #0
   1c918:	d101      	bne.n	1c91e <prvProcessExpiredTimer+0x5a>
   1c91a:	b672      	cpsid	i
   1c91c:	e7fe      	b.n	1c91c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1c91e:	68fb      	ldr	r3, [r7, #12]
   1c920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c922:	68fa      	ldr	r2, [r7, #12]
   1c924:	0010      	movs	r0, r2
   1c926:	4798      	blx	r3
}
   1c928:	46c0      	nop			; (mov r8, r8)
   1c92a:	46bd      	mov	sp, r7
   1c92c:	b005      	add	sp, #20
   1c92e:	bd90      	pop	{r4, r7, pc}
   1c930:	20003d60 	.word	0x20003d60
   1c934:	0001936b 	.word	0x0001936b
   1c938:	0001caa9 	.word	0x0001caa9
   1c93c:	0001c81d 	.word	0x0001c81d

0001c940 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1c940:	b580      	push	{r7, lr}
   1c942:	b084      	sub	sp, #16
   1c944:	af00      	add	r7, sp, #0
   1c946:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1c948:	4b08      	ldr	r3, [pc, #32]	; (1c96c <prvTimerTask+0x2c>)
   1c94a:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1c94c:	2308      	movs	r3, #8
   1c94e:	18fb      	adds	r3, r7, r3
   1c950:	0018      	movs	r0, r3
   1c952:	4b07      	ldr	r3, [pc, #28]	; (1c970 <prvTimerTask+0x30>)
   1c954:	4798      	blx	r3
   1c956:	0003      	movs	r3, r0
   1c958:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1c95a:	68ba      	ldr	r2, [r7, #8]
   1c95c:	68fb      	ldr	r3, [r7, #12]
   1c95e:	0011      	movs	r1, r2
   1c960:	0018      	movs	r0, r3
   1c962:	4b04      	ldr	r3, [pc, #16]	; (1c974 <prvTimerTask+0x34>)
   1c964:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1c966:	4b04      	ldr	r3, [pc, #16]	; (1c978 <prvTimerTask+0x38>)
   1c968:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1c96a:	e7ef      	b.n	1c94c <prvTimerTask+0xc>
   1c96c:	00031b09 	.word	0x00031b09
   1c970:	0001ca21 	.word	0x0001ca21
   1c974:	0001c97d 	.word	0x0001c97d
   1c978:	0001cb31 	.word	0x0001cb31

0001c97c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1c97c:	b580      	push	{r7, lr}
   1c97e:	b084      	sub	sp, #16
   1c980:	af00      	add	r7, sp, #0
   1c982:	6078      	str	r0, [r7, #4]
   1c984:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1c986:	4b1e      	ldr	r3, [pc, #120]	; (1ca00 <prvProcessTimerOrBlockTask+0x84>)
   1c988:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1c98a:	2308      	movs	r3, #8
   1c98c:	18fb      	adds	r3, r7, r3
   1c98e:	0018      	movs	r0, r3
   1c990:	4b1c      	ldr	r3, [pc, #112]	; (1ca04 <prvProcessTimerOrBlockTask+0x88>)
   1c992:	4798      	blx	r3
   1c994:	0003      	movs	r3, r0
   1c996:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1c998:	68bb      	ldr	r3, [r7, #8]
   1c99a:	2b00      	cmp	r3, #0
   1c99c:	d129      	bne.n	1c9f2 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1c99e:	683b      	ldr	r3, [r7, #0]
   1c9a0:	2b00      	cmp	r3, #0
   1c9a2:	d10c      	bne.n	1c9be <prvProcessTimerOrBlockTask+0x42>
   1c9a4:	687a      	ldr	r2, [r7, #4]
   1c9a6:	68fb      	ldr	r3, [r7, #12]
   1c9a8:	429a      	cmp	r2, r3
   1c9aa:	d808      	bhi.n	1c9be <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1c9ac:	4b16      	ldr	r3, [pc, #88]	; (1ca08 <prvProcessTimerOrBlockTask+0x8c>)
   1c9ae:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1c9b0:	68fa      	ldr	r2, [r7, #12]
   1c9b2:	687b      	ldr	r3, [r7, #4]
   1c9b4:	0011      	movs	r1, r2
   1c9b6:	0018      	movs	r0, r3
   1c9b8:	4b14      	ldr	r3, [pc, #80]	; (1ca0c <prvProcessTimerOrBlockTask+0x90>)
   1c9ba:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1c9bc:	e01b      	b.n	1c9f6 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1c9be:	683b      	ldr	r3, [r7, #0]
   1c9c0:	2b00      	cmp	r3, #0
   1c9c2:	d006      	beq.n	1c9d2 <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1c9c4:	4b12      	ldr	r3, [pc, #72]	; (1ca10 <prvProcessTimerOrBlockTask+0x94>)
   1c9c6:	681b      	ldr	r3, [r3, #0]
   1c9c8:	681b      	ldr	r3, [r3, #0]
   1c9ca:	425a      	negs	r2, r3
   1c9cc:	4153      	adcs	r3, r2
   1c9ce:	b2db      	uxtb	r3, r3
   1c9d0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1c9d2:	4b10      	ldr	r3, [pc, #64]	; (1ca14 <prvProcessTimerOrBlockTask+0x98>)
   1c9d4:	6818      	ldr	r0, [r3, #0]
   1c9d6:	687a      	ldr	r2, [r7, #4]
   1c9d8:	68fb      	ldr	r3, [r7, #12]
   1c9da:	1ad3      	subs	r3, r2, r3
   1c9dc:	683a      	ldr	r2, [r7, #0]
   1c9de:	0019      	movs	r1, r3
   1c9e0:	4b0d      	ldr	r3, [pc, #52]	; (1ca18 <prvProcessTimerOrBlockTask+0x9c>)
   1c9e2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1c9e4:	4b08      	ldr	r3, [pc, #32]	; (1ca08 <prvProcessTimerOrBlockTask+0x8c>)
   1c9e6:	4798      	blx	r3
   1c9e8:	1e03      	subs	r3, r0, #0
   1c9ea:	d104      	bne.n	1c9f6 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1c9ec:	4b0b      	ldr	r3, [pc, #44]	; (1ca1c <prvProcessTimerOrBlockTask+0xa0>)
   1c9ee:	4798      	blx	r3
}
   1c9f0:	e001      	b.n	1c9f6 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1c9f2:	4b05      	ldr	r3, [pc, #20]	; (1ca08 <prvProcessTimerOrBlockTask+0x8c>)
   1c9f4:	4798      	blx	r3
}
   1c9f6:	46c0      	nop			; (mov r8, r8)
   1c9f8:	46bd      	mov	sp, r7
   1c9fa:	b004      	add	sp, #16
   1c9fc:	bd80      	pop	{r7, pc}
   1c9fe:	46c0      	nop			; (mov r8, r8)
   1ca00:	0001b7b5 	.word	0x0001b7b5
   1ca04:	0001ca61 	.word	0x0001ca61
   1ca08:	0001b7cd 	.word	0x0001b7cd
   1ca0c:	0001c8c5 	.word	0x0001c8c5
   1ca10:	20003d64 	.word	0x20003d64
   1ca14:	20003d68 	.word	0x20003d68
   1ca18:	0001af55 	.word	0x0001af55
   1ca1c:	000194e1 	.word	0x000194e1

0001ca20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1ca20:	b580      	push	{r7, lr}
   1ca22:	b084      	sub	sp, #16
   1ca24:	af00      	add	r7, sp, #0
   1ca26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1ca28:	4b0c      	ldr	r3, [pc, #48]	; (1ca5c <prvGetNextExpireTime+0x3c>)
   1ca2a:	681b      	ldr	r3, [r3, #0]
   1ca2c:	681b      	ldr	r3, [r3, #0]
   1ca2e:	425a      	negs	r2, r3
   1ca30:	4153      	adcs	r3, r2
   1ca32:	b2db      	uxtb	r3, r3
   1ca34:	001a      	movs	r2, r3
   1ca36:	687b      	ldr	r3, [r7, #4]
   1ca38:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1ca3a:	687b      	ldr	r3, [r7, #4]
   1ca3c:	681b      	ldr	r3, [r3, #0]
   1ca3e:	2b00      	cmp	r3, #0
   1ca40:	d105      	bne.n	1ca4e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1ca42:	4b06      	ldr	r3, [pc, #24]	; (1ca5c <prvGetNextExpireTime+0x3c>)
   1ca44:	681b      	ldr	r3, [r3, #0]
   1ca46:	68db      	ldr	r3, [r3, #12]
   1ca48:	681b      	ldr	r3, [r3, #0]
   1ca4a:	60fb      	str	r3, [r7, #12]
   1ca4c:	e001      	b.n	1ca52 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1ca4e:	2300      	movs	r3, #0
   1ca50:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1ca52:	68fb      	ldr	r3, [r7, #12]
}
   1ca54:	0018      	movs	r0, r3
   1ca56:	46bd      	mov	sp, r7
   1ca58:	b004      	add	sp, #16
   1ca5a:	bd80      	pop	{r7, pc}
   1ca5c:	20003d60 	.word	0x20003d60

0001ca60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1ca60:	b580      	push	{r7, lr}
   1ca62:	b084      	sub	sp, #16
   1ca64:	af00      	add	r7, sp, #0
   1ca66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1ca68:	4b0c      	ldr	r3, [pc, #48]	; (1ca9c <prvSampleTimeNow+0x3c>)
   1ca6a:	4798      	blx	r3
   1ca6c:	0003      	movs	r3, r0
   1ca6e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1ca70:	4b0b      	ldr	r3, [pc, #44]	; (1caa0 <prvSampleTimeNow+0x40>)
   1ca72:	681b      	ldr	r3, [r3, #0]
   1ca74:	68fa      	ldr	r2, [r7, #12]
   1ca76:	429a      	cmp	r2, r3
   1ca78:	d205      	bcs.n	1ca86 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1ca7a:	4b0a      	ldr	r3, [pc, #40]	; (1caa4 <prvSampleTimeNow+0x44>)
   1ca7c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1ca7e:	687b      	ldr	r3, [r7, #4]
   1ca80:	2201      	movs	r2, #1
   1ca82:	601a      	str	r2, [r3, #0]
   1ca84:	e002      	b.n	1ca8c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1ca86:	687b      	ldr	r3, [r7, #4]
   1ca88:	2200      	movs	r2, #0
   1ca8a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1ca8c:	4b04      	ldr	r3, [pc, #16]	; (1caa0 <prvSampleTimeNow+0x40>)
   1ca8e:	68fa      	ldr	r2, [r7, #12]
   1ca90:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1ca92:	68fb      	ldr	r3, [r7, #12]
}
   1ca94:	0018      	movs	r0, r3
   1ca96:	46bd      	mov	sp, r7
   1ca98:	b004      	add	sp, #16
   1ca9a:	bd80      	pop	{r7, pc}
   1ca9c:	0001b93d 	.word	0x0001b93d
   1caa0:	20003d70 	.word	0x20003d70
   1caa4:	0001cc49 	.word	0x0001cc49

0001caa8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1caa8:	b580      	push	{r7, lr}
   1caaa:	b086      	sub	sp, #24
   1caac:	af00      	add	r7, sp, #0
   1caae:	60f8      	str	r0, [r7, #12]
   1cab0:	60b9      	str	r1, [r7, #8]
   1cab2:	607a      	str	r2, [r7, #4]
   1cab4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1cab6:	2300      	movs	r3, #0
   1cab8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1caba:	68fb      	ldr	r3, [r7, #12]
   1cabc:	68ba      	ldr	r2, [r7, #8]
   1cabe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1cac0:	68fb      	ldr	r3, [r7, #12]
   1cac2:	68fa      	ldr	r2, [r7, #12]
   1cac4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1cac6:	68ba      	ldr	r2, [r7, #8]
   1cac8:	687b      	ldr	r3, [r7, #4]
   1caca:	429a      	cmp	r2, r3
   1cacc:	d812      	bhi.n	1caf4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cace:	687a      	ldr	r2, [r7, #4]
   1cad0:	683b      	ldr	r3, [r7, #0]
   1cad2:	1ad2      	subs	r2, r2, r3
   1cad4:	68fb      	ldr	r3, [r7, #12]
   1cad6:	699b      	ldr	r3, [r3, #24]
   1cad8:	429a      	cmp	r2, r3
   1cada:	d302      	bcc.n	1cae2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1cadc:	2301      	movs	r3, #1
   1cade:	617b      	str	r3, [r7, #20]
   1cae0:	e01b      	b.n	1cb1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1cae2:	4b10      	ldr	r3, [pc, #64]	; (1cb24 <prvInsertTimerInActiveList+0x7c>)
   1cae4:	681a      	ldr	r2, [r3, #0]
   1cae6:	68fb      	ldr	r3, [r7, #12]
   1cae8:	3304      	adds	r3, #4
   1caea:	0019      	movs	r1, r3
   1caec:	0010      	movs	r0, r2
   1caee:	4b0e      	ldr	r3, [pc, #56]	; (1cb28 <prvInsertTimerInActiveList+0x80>)
   1caf0:	4798      	blx	r3
   1caf2:	e012      	b.n	1cb1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1caf4:	687a      	ldr	r2, [r7, #4]
   1caf6:	683b      	ldr	r3, [r7, #0]
   1caf8:	429a      	cmp	r2, r3
   1cafa:	d206      	bcs.n	1cb0a <prvInsertTimerInActiveList+0x62>
   1cafc:	68ba      	ldr	r2, [r7, #8]
   1cafe:	683b      	ldr	r3, [r7, #0]
   1cb00:	429a      	cmp	r2, r3
   1cb02:	d302      	bcc.n	1cb0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1cb04:	2301      	movs	r3, #1
   1cb06:	617b      	str	r3, [r7, #20]
   1cb08:	e007      	b.n	1cb1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1cb0a:	4b08      	ldr	r3, [pc, #32]	; (1cb2c <prvInsertTimerInActiveList+0x84>)
   1cb0c:	681a      	ldr	r2, [r3, #0]
   1cb0e:	68fb      	ldr	r3, [r7, #12]
   1cb10:	3304      	adds	r3, #4
   1cb12:	0019      	movs	r1, r3
   1cb14:	0010      	movs	r0, r2
   1cb16:	4b04      	ldr	r3, [pc, #16]	; (1cb28 <prvInsertTimerInActiveList+0x80>)
   1cb18:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1cb1a:	697b      	ldr	r3, [r7, #20]
}
   1cb1c:	0018      	movs	r0, r3
   1cb1e:	46bd      	mov	sp, r7
   1cb20:	b006      	add	sp, #24
   1cb22:	bd80      	pop	{r7, pc}
   1cb24:	20003d64 	.word	0x20003d64
   1cb28:	000192ff 	.word	0x000192ff
   1cb2c:	20003d60 	.word	0x20003d60

0001cb30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1cb30:	b590      	push	{r4, r7, lr}
   1cb32:	b08b      	sub	sp, #44	; 0x2c
   1cb34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1cb36:	e068      	b.n	1cc0a <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1cb38:	2308      	movs	r3, #8
   1cb3a:	18fb      	adds	r3, r7, r3
   1cb3c:	681b      	ldr	r3, [r3, #0]
   1cb3e:	2b00      	cmp	r3, #0
   1cb40:	db63      	blt.n	1cc0a <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1cb42:	2308      	movs	r3, #8
   1cb44:	18fb      	adds	r3, r7, r3
   1cb46:	689b      	ldr	r3, [r3, #8]
   1cb48:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1cb4a:	69fb      	ldr	r3, [r7, #28]
   1cb4c:	695b      	ldr	r3, [r3, #20]
   1cb4e:	2b00      	cmp	r3, #0
   1cb50:	d004      	beq.n	1cb5c <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1cb52:	69fb      	ldr	r3, [r7, #28]
   1cb54:	3304      	adds	r3, #4
   1cb56:	0018      	movs	r0, r3
   1cb58:	4b33      	ldr	r3, [pc, #204]	; (1cc28 <prvProcessReceivedCommands+0xf8>)
   1cb5a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1cb5c:	1d3b      	adds	r3, r7, #4
   1cb5e:	0018      	movs	r0, r3
   1cb60:	4b32      	ldr	r3, [pc, #200]	; (1cc2c <prvProcessReceivedCommands+0xfc>)
   1cb62:	4798      	blx	r3
   1cb64:	0003      	movs	r3, r0
   1cb66:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1cb68:	2308      	movs	r3, #8
   1cb6a:	18fb      	adds	r3, r7, r3
   1cb6c:	681b      	ldr	r3, [r3, #0]
   1cb6e:	2b09      	cmp	r3, #9
   1cb70:	d84a      	bhi.n	1cc08 <prvProcessReceivedCommands+0xd8>
   1cb72:	009a      	lsls	r2, r3, #2
   1cb74:	4b2e      	ldr	r3, [pc, #184]	; (1cc30 <prvProcessReceivedCommands+0x100>)
   1cb76:	18d3      	adds	r3, r2, r3
   1cb78:	681b      	ldr	r3, [r3, #0]
   1cb7a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1cb7c:	2308      	movs	r3, #8
   1cb7e:	18fb      	adds	r3, r7, r3
   1cb80:	685a      	ldr	r2, [r3, #4]
   1cb82:	69fb      	ldr	r3, [r7, #28]
   1cb84:	699b      	ldr	r3, [r3, #24]
   1cb86:	18d1      	adds	r1, r2, r3
   1cb88:	2308      	movs	r3, #8
   1cb8a:	18fb      	adds	r3, r7, r3
   1cb8c:	685b      	ldr	r3, [r3, #4]
   1cb8e:	69ba      	ldr	r2, [r7, #24]
   1cb90:	69f8      	ldr	r0, [r7, #28]
   1cb92:	4c28      	ldr	r4, [pc, #160]	; (1cc34 <prvProcessReceivedCommands+0x104>)
   1cb94:	47a0      	blx	r4
   1cb96:	1e03      	subs	r3, r0, #0
   1cb98:	d037      	beq.n	1cc0a <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1cb9a:	69fb      	ldr	r3, [r7, #28]
   1cb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cb9e:	69fa      	ldr	r2, [r7, #28]
   1cba0:	0010      	movs	r0, r2
   1cba2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1cba4:	69fb      	ldr	r3, [r7, #28]
   1cba6:	69db      	ldr	r3, [r3, #28]
   1cba8:	2b01      	cmp	r3, #1
   1cbaa:	d12e      	bne.n	1cc0a <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1cbac:	2308      	movs	r3, #8
   1cbae:	18fb      	adds	r3, r7, r3
   1cbb0:	685a      	ldr	r2, [r3, #4]
   1cbb2:	69fb      	ldr	r3, [r7, #28]
   1cbb4:	699b      	ldr	r3, [r3, #24]
   1cbb6:	18d2      	adds	r2, r2, r3
   1cbb8:	69f8      	ldr	r0, [r7, #28]
   1cbba:	2300      	movs	r3, #0
   1cbbc:	9300      	str	r3, [sp, #0]
   1cbbe:	2300      	movs	r3, #0
   1cbc0:	2100      	movs	r1, #0
   1cbc2:	4c1d      	ldr	r4, [pc, #116]	; (1cc38 <prvProcessReceivedCommands+0x108>)
   1cbc4:	47a0      	blx	r4
   1cbc6:	0003      	movs	r3, r0
   1cbc8:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1cbca:	697b      	ldr	r3, [r7, #20]
   1cbcc:	2b00      	cmp	r3, #0
   1cbce:	d11c      	bne.n	1cc0a <prvProcessReceivedCommands+0xda>
   1cbd0:	b672      	cpsid	i
   1cbd2:	e7fe      	b.n	1cbd2 <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1cbd4:	2308      	movs	r3, #8
   1cbd6:	18fb      	adds	r3, r7, r3
   1cbd8:	685a      	ldr	r2, [r3, #4]
   1cbda:	69fb      	ldr	r3, [r7, #28]
   1cbdc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1cbde:	69fb      	ldr	r3, [r7, #28]
   1cbe0:	699b      	ldr	r3, [r3, #24]
   1cbe2:	2b00      	cmp	r3, #0
   1cbe4:	d101      	bne.n	1cbea <prvProcessReceivedCommands+0xba>
   1cbe6:	b672      	cpsid	i
   1cbe8:	e7fe      	b.n	1cbe8 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1cbea:	69fb      	ldr	r3, [r7, #28]
   1cbec:	699a      	ldr	r2, [r3, #24]
   1cbee:	69bb      	ldr	r3, [r7, #24]
   1cbf0:	18d1      	adds	r1, r2, r3
   1cbf2:	69bb      	ldr	r3, [r7, #24]
   1cbf4:	69ba      	ldr	r2, [r7, #24]
   1cbf6:	69f8      	ldr	r0, [r7, #28]
   1cbf8:	4c0e      	ldr	r4, [pc, #56]	; (1cc34 <prvProcessReceivedCommands+0x104>)
   1cbfa:	47a0      	blx	r4
					break;
   1cbfc:	e005      	b.n	1cc0a <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1cbfe:	69fb      	ldr	r3, [r7, #28]
   1cc00:	0018      	movs	r0, r3
   1cc02:	4b0e      	ldr	r3, [pc, #56]	; (1cc3c <prvProcessReceivedCommands+0x10c>)
   1cc04:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1cc06:	e000      	b.n	1cc0a <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1cc08:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1cc0a:	4b0d      	ldr	r3, [pc, #52]	; (1cc40 <prvProcessReceivedCommands+0x110>)
   1cc0c:	681b      	ldr	r3, [r3, #0]
   1cc0e:	2208      	movs	r2, #8
   1cc10:	18b9      	adds	r1, r7, r2
   1cc12:	2200      	movs	r2, #0
   1cc14:	0018      	movs	r0, r3
   1cc16:	4b0b      	ldr	r3, [pc, #44]	; (1cc44 <prvProcessReceivedCommands+0x114>)
   1cc18:	4798      	blx	r3
   1cc1a:	1e03      	subs	r3, r0, #0
   1cc1c:	d18c      	bne.n	1cb38 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1cc1e:	46c0      	nop			; (mov r8, r8)
   1cc20:	46bd      	mov	sp, r7
   1cc22:	b009      	add	sp, #36	; 0x24
   1cc24:	bd90      	pop	{r4, r7, pc}
   1cc26:	46c0      	nop			; (mov r8, r8)
   1cc28:	0001936b 	.word	0x0001936b
   1cc2c:	0001ca61 	.word	0x0001ca61
   1cc30:	000370ac 	.word	0x000370ac
   1cc34:	0001caa9 	.word	0x0001caa9
   1cc38:	0001c81d 	.word	0x0001c81d
   1cc3c:	000196f5 	.word	0x000196f5
   1cc40:	20003d68 	.word	0x20003d68
   1cc44:	0001a349 	.word	0x0001a349

0001cc48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1cc48:	b590      	push	{r4, r7, lr}
   1cc4a:	b089      	sub	sp, #36	; 0x24
   1cc4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1cc4e:	e03e      	b.n	1ccce <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1cc50:	4b28      	ldr	r3, [pc, #160]	; (1ccf4 <prvSwitchTimerLists+0xac>)
   1cc52:	681b      	ldr	r3, [r3, #0]
   1cc54:	68db      	ldr	r3, [r3, #12]
   1cc56:	681b      	ldr	r3, [r3, #0]
   1cc58:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1cc5a:	4b26      	ldr	r3, [pc, #152]	; (1ccf4 <prvSwitchTimerLists+0xac>)
   1cc5c:	681b      	ldr	r3, [r3, #0]
   1cc5e:	68db      	ldr	r3, [r3, #12]
   1cc60:	68db      	ldr	r3, [r3, #12]
   1cc62:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1cc64:	693b      	ldr	r3, [r7, #16]
   1cc66:	3304      	adds	r3, #4
   1cc68:	0018      	movs	r0, r3
   1cc6a:	4b23      	ldr	r3, [pc, #140]	; (1ccf8 <prvSwitchTimerLists+0xb0>)
   1cc6c:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1cc6e:	693b      	ldr	r3, [r7, #16]
   1cc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cc72:	693a      	ldr	r2, [r7, #16]
   1cc74:	0010      	movs	r0, r2
   1cc76:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1cc78:	693b      	ldr	r3, [r7, #16]
   1cc7a:	69db      	ldr	r3, [r3, #28]
   1cc7c:	2b01      	cmp	r3, #1
   1cc7e:	d126      	bne.n	1ccce <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1cc80:	693b      	ldr	r3, [r7, #16]
   1cc82:	699a      	ldr	r2, [r3, #24]
   1cc84:	697b      	ldr	r3, [r7, #20]
   1cc86:	18d3      	adds	r3, r2, r3
   1cc88:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1cc8a:	68fa      	ldr	r2, [r7, #12]
   1cc8c:	697b      	ldr	r3, [r7, #20]
   1cc8e:	429a      	cmp	r2, r3
   1cc90:	d90e      	bls.n	1ccb0 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1cc92:	693b      	ldr	r3, [r7, #16]
   1cc94:	68fa      	ldr	r2, [r7, #12]
   1cc96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1cc98:	693b      	ldr	r3, [r7, #16]
   1cc9a:	693a      	ldr	r2, [r7, #16]
   1cc9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1cc9e:	4b15      	ldr	r3, [pc, #84]	; (1ccf4 <prvSwitchTimerLists+0xac>)
   1cca0:	681a      	ldr	r2, [r3, #0]
   1cca2:	693b      	ldr	r3, [r7, #16]
   1cca4:	3304      	adds	r3, #4
   1cca6:	0019      	movs	r1, r3
   1cca8:	0010      	movs	r0, r2
   1ccaa:	4b14      	ldr	r3, [pc, #80]	; (1ccfc <prvSwitchTimerLists+0xb4>)
   1ccac:	4798      	blx	r3
   1ccae:	e00e      	b.n	1ccce <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1ccb0:	697a      	ldr	r2, [r7, #20]
   1ccb2:	6938      	ldr	r0, [r7, #16]
   1ccb4:	2300      	movs	r3, #0
   1ccb6:	9300      	str	r3, [sp, #0]
   1ccb8:	2300      	movs	r3, #0
   1ccba:	2100      	movs	r1, #0
   1ccbc:	4c10      	ldr	r4, [pc, #64]	; (1cd00 <prvSwitchTimerLists+0xb8>)
   1ccbe:	47a0      	blx	r4
   1ccc0:	0003      	movs	r3, r0
   1ccc2:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1ccc4:	68bb      	ldr	r3, [r7, #8]
   1ccc6:	2b00      	cmp	r3, #0
   1ccc8:	d101      	bne.n	1ccce <prvSwitchTimerLists+0x86>
   1ccca:	b672      	cpsid	i
   1cccc:	e7fe      	b.n	1cccc <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1ccce:	4b09      	ldr	r3, [pc, #36]	; (1ccf4 <prvSwitchTimerLists+0xac>)
   1ccd0:	681b      	ldr	r3, [r3, #0]
   1ccd2:	681b      	ldr	r3, [r3, #0]
   1ccd4:	2b00      	cmp	r3, #0
   1ccd6:	d1bb      	bne.n	1cc50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1ccd8:	4b06      	ldr	r3, [pc, #24]	; (1ccf4 <prvSwitchTimerLists+0xac>)
   1ccda:	681b      	ldr	r3, [r3, #0]
   1ccdc:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1ccde:	4b09      	ldr	r3, [pc, #36]	; (1cd04 <prvSwitchTimerLists+0xbc>)
   1cce0:	681a      	ldr	r2, [r3, #0]
   1cce2:	4b04      	ldr	r3, [pc, #16]	; (1ccf4 <prvSwitchTimerLists+0xac>)
   1cce4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1cce6:	4b07      	ldr	r3, [pc, #28]	; (1cd04 <prvSwitchTimerLists+0xbc>)
   1cce8:	687a      	ldr	r2, [r7, #4]
   1ccea:	601a      	str	r2, [r3, #0]
}
   1ccec:	46c0      	nop			; (mov r8, r8)
   1ccee:	46bd      	mov	sp, r7
   1ccf0:	b007      	add	sp, #28
   1ccf2:	bd90      	pop	{r4, r7, pc}
   1ccf4:	20003d60 	.word	0x20003d60
   1ccf8:	0001936b 	.word	0x0001936b
   1ccfc:	000192ff 	.word	0x000192ff
   1cd00:	0001c81d 	.word	0x0001c81d
   1cd04:	20003d64 	.word	0x20003d64

0001cd08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1cd08:	b580      	push	{r7, lr}
   1cd0a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1cd0c:	4b10      	ldr	r3, [pc, #64]	; (1cd50 <prvCheckForValidListAndQueue+0x48>)
   1cd0e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1cd10:	4b10      	ldr	r3, [pc, #64]	; (1cd54 <prvCheckForValidListAndQueue+0x4c>)
   1cd12:	681b      	ldr	r3, [r3, #0]
   1cd14:	2b00      	cmp	r3, #0
   1cd16:	d115      	bne.n	1cd44 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1cd18:	4b0f      	ldr	r3, [pc, #60]	; (1cd58 <prvCheckForValidListAndQueue+0x50>)
   1cd1a:	0018      	movs	r0, r3
   1cd1c:	4b0f      	ldr	r3, [pc, #60]	; (1cd5c <prvCheckForValidListAndQueue+0x54>)
   1cd1e:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1cd20:	4b0f      	ldr	r3, [pc, #60]	; (1cd60 <prvCheckForValidListAndQueue+0x58>)
   1cd22:	0018      	movs	r0, r3
   1cd24:	4b0d      	ldr	r3, [pc, #52]	; (1cd5c <prvCheckForValidListAndQueue+0x54>)
   1cd26:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1cd28:	4b0e      	ldr	r3, [pc, #56]	; (1cd64 <prvCheckForValidListAndQueue+0x5c>)
   1cd2a:	4a0b      	ldr	r2, [pc, #44]	; (1cd58 <prvCheckForValidListAndQueue+0x50>)
   1cd2c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1cd2e:	4b0e      	ldr	r3, [pc, #56]	; (1cd68 <prvCheckForValidListAndQueue+0x60>)
   1cd30:	4a0b      	ldr	r2, [pc, #44]	; (1cd60 <prvCheckForValidListAndQueue+0x58>)
   1cd32:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1cd34:	2200      	movs	r2, #0
   1cd36:	210c      	movs	r1, #12
   1cd38:	2005      	movs	r0, #5
   1cd3a:	4b0c      	ldr	r3, [pc, #48]	; (1cd6c <prvCheckForValidListAndQueue+0x64>)
   1cd3c:	4798      	blx	r3
   1cd3e:	0002      	movs	r2, r0
   1cd40:	4b04      	ldr	r3, [pc, #16]	; (1cd54 <prvCheckForValidListAndQueue+0x4c>)
   1cd42:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1cd44:	4b0a      	ldr	r3, [pc, #40]	; (1cd70 <prvCheckForValidListAndQueue+0x68>)
   1cd46:	4798      	blx	r3
}
   1cd48:	46c0      	nop			; (mov r8, r8)
   1cd4a:	46bd      	mov	sp, r7
   1cd4c:	bd80      	pop	{r7, pc}
   1cd4e:	46c0      	nop			; (mov r8, r8)
   1cd50:	000194f9 	.word	0x000194f9
   1cd54:	20003d68 	.word	0x20003d68
   1cd58:	20003d38 	.word	0x20003d38
   1cd5c:	00019269 	.word	0x00019269
   1cd60:	20003d4c 	.word	0x20003d4c
   1cd64:	20003d60 	.word	0x20003d60
   1cd68:	20003d64 	.word	0x20003d64
   1cd6c:	000197e9 	.word	0x000197e9
   1cd70:	0001951d 	.word	0x0001951d

0001cd74 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1cd74:	b580      	push	{r7, lr}
   1cd76:	b082      	sub	sp, #8
   1cd78:	af00      	add	r7, sp, #0
   1cd7a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1cd7c:	687b      	ldr	r3, [r7, #4]
   1cd7e:	7c1b      	ldrb	r3, [r3, #16]
   1cd80:	2b00      	cmp	r3, #0
   1cd82:	d00b      	beq.n	1cd9c <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1cd84:	687b      	ldr	r3, [r7, #4]
   1cd86:	689b      	ldr	r3, [r3, #8]
   1cd88:	1c5a      	adds	r2, r3, #1
   1cd8a:	687b      	ldr	r3, [r7, #4]
   1cd8c:	68d9      	ldr	r1, [r3, #12]
   1cd8e:	4b10      	ldr	r3, [pc, #64]	; (1cdd0 <advance_pointer+0x5c>)
   1cd90:	0010      	movs	r0, r2
   1cd92:	4798      	blx	r3
   1cd94:	000b      	movs	r3, r1
   1cd96:	001a      	movs	r2, r3
   1cd98:	687b      	ldr	r3, [r7, #4]
   1cd9a:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1cd9c:	687b      	ldr	r3, [r7, #4]
   1cd9e:	685b      	ldr	r3, [r3, #4]
   1cda0:	1c5a      	adds	r2, r3, #1
   1cda2:	687b      	ldr	r3, [r7, #4]
   1cda4:	68d9      	ldr	r1, [r3, #12]
   1cda6:	4b0a      	ldr	r3, [pc, #40]	; (1cdd0 <advance_pointer+0x5c>)
   1cda8:	0010      	movs	r0, r2
   1cdaa:	4798      	blx	r3
   1cdac:	000b      	movs	r3, r1
   1cdae:	001a      	movs	r2, r3
   1cdb0:	687b      	ldr	r3, [r7, #4]
   1cdb2:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1cdb4:	687b      	ldr	r3, [r7, #4]
   1cdb6:	685a      	ldr	r2, [r3, #4]
   1cdb8:	687b      	ldr	r3, [r7, #4]
   1cdba:	689b      	ldr	r3, [r3, #8]
   1cdbc:	1ad3      	subs	r3, r2, r3
   1cdbe:	425a      	negs	r2, r3
   1cdc0:	4153      	adcs	r3, r2
   1cdc2:	b2da      	uxtb	r2, r3
   1cdc4:	687b      	ldr	r3, [r7, #4]
   1cdc6:	741a      	strb	r2, [r3, #16]
 }
   1cdc8:	46c0      	nop			; (mov r8, r8)
   1cdca:	46bd      	mov	sp, r7
   1cdcc:	b002      	add	sp, #8
   1cdce:	bd80      	pop	{r7, pc}
   1cdd0:	00031e51 	.word	0x00031e51

0001cdd4 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1cdd4:	b580      	push	{r7, lr}
   1cdd6:	b082      	sub	sp, #8
   1cdd8:	af00      	add	r7, sp, #0
   1cdda:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1cddc:	687b      	ldr	r3, [r7, #4]
   1cdde:	2200      	movs	r2, #0
   1cde0:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1cde2:	687b      	ldr	r3, [r7, #4]
   1cde4:	689b      	ldr	r3, [r3, #8]
   1cde6:	1c5a      	adds	r2, r3, #1
   1cde8:	687b      	ldr	r3, [r7, #4]
   1cdea:	68d9      	ldr	r1, [r3, #12]
   1cdec:	4b05      	ldr	r3, [pc, #20]	; (1ce04 <retreat_pointer+0x30>)
   1cdee:	0010      	movs	r0, r2
   1cdf0:	4798      	blx	r3
   1cdf2:	000b      	movs	r3, r1
   1cdf4:	001a      	movs	r2, r3
   1cdf6:	687b      	ldr	r3, [r7, #4]
   1cdf8:	609a      	str	r2, [r3, #8]
 }
   1cdfa:	46c0      	nop			; (mov r8, r8)
   1cdfc:	46bd      	mov	sp, r7
   1cdfe:	b002      	add	sp, #8
   1ce00:	bd80      	pop	{r7, pc}
   1ce02:	46c0      	nop			; (mov r8, r8)
   1ce04:	00031e51 	.word	0x00031e51

0001ce08 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1ce08:	b580      	push	{r7, lr}
   1ce0a:	b084      	sub	sp, #16
   1ce0c:	af00      	add	r7, sp, #0
   1ce0e:	6078      	str	r0, [r7, #4]
   1ce10:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1ce12:	2014      	movs	r0, #20
   1ce14:	4b09      	ldr	r3, [pc, #36]	; (1ce3c <circular_buf_init+0x34>)
   1ce16:	4798      	blx	r3
   1ce18:	0003      	movs	r3, r0
   1ce1a:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1ce1c:	68fb      	ldr	r3, [r7, #12]
   1ce1e:	687a      	ldr	r2, [r7, #4]
   1ce20:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1ce22:	68fb      	ldr	r3, [r7, #12]
   1ce24:	683a      	ldr	r2, [r7, #0]
   1ce26:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1ce28:	68fb      	ldr	r3, [r7, #12]
   1ce2a:	0018      	movs	r0, r3
   1ce2c:	4b04      	ldr	r3, [pc, #16]	; (1ce40 <circular_buf_init+0x38>)
   1ce2e:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1ce30:	68fb      	ldr	r3, [r7, #12]
 }
   1ce32:	0018      	movs	r0, r3
   1ce34:	46bd      	mov	sp, r7
   1ce36:	b004      	add	sp, #16
   1ce38:	bd80      	pop	{r7, pc}
   1ce3a:	46c0      	nop			; (mov r8, r8)
   1ce3c:	000339a1 	.word	0x000339a1
   1ce40:	0001ce45 	.word	0x0001ce45

0001ce44 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1ce44:	b580      	push	{r7, lr}
   1ce46:	b082      	sub	sp, #8
   1ce48:	af00      	add	r7, sp, #0
   1ce4a:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1ce4c:	687b      	ldr	r3, [r7, #4]
   1ce4e:	2200      	movs	r2, #0
   1ce50:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1ce52:	687b      	ldr	r3, [r7, #4]
   1ce54:	2200      	movs	r2, #0
   1ce56:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1ce58:	687b      	ldr	r3, [r7, #4]
   1ce5a:	2200      	movs	r2, #0
   1ce5c:	741a      	strb	r2, [r3, #16]
 }
   1ce5e:	46c0      	nop			; (mov r8, r8)
   1ce60:	46bd      	mov	sp, r7
   1ce62:	b002      	add	sp, #8
   1ce64:	bd80      	pop	{r7, pc}
	...

0001ce68 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1ce68:	b580      	push	{r7, lr}
   1ce6a:	b082      	sub	sp, #8
   1ce6c:	af00      	add	r7, sp, #0
   1ce6e:	6078      	str	r0, [r7, #4]
   1ce70:	000a      	movs	r2, r1
   1ce72:	1cfb      	adds	r3, r7, #3
   1ce74:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1ce76:	687b      	ldr	r3, [r7, #4]
   1ce78:	681a      	ldr	r2, [r3, #0]
   1ce7a:	687b      	ldr	r3, [r7, #4]
   1ce7c:	685b      	ldr	r3, [r3, #4]
   1ce7e:	18d3      	adds	r3, r2, r3
   1ce80:	1cfa      	adds	r2, r7, #3
   1ce82:	7812      	ldrb	r2, [r2, #0]
   1ce84:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1ce86:	687b      	ldr	r3, [r7, #4]
   1ce88:	0018      	movs	r0, r3
   1ce8a:	4b03      	ldr	r3, [pc, #12]	; (1ce98 <circular_buf_put+0x30>)
   1ce8c:	4798      	blx	r3
 }
   1ce8e:	46c0      	nop			; (mov r8, r8)
   1ce90:	46bd      	mov	sp, r7
   1ce92:	b002      	add	sp, #8
   1ce94:	bd80      	pop	{r7, pc}
   1ce96:	46c0      	nop			; (mov r8, r8)
   1ce98:	0001cd75 	.word	0x0001cd75

0001ce9c <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1ce9c:	b580      	push	{r7, lr}
   1ce9e:	b084      	sub	sp, #16
   1cea0:	af00      	add	r7, sp, #0
   1cea2:	6078      	str	r0, [r7, #4]
   1cea4:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1cea6:	2301      	movs	r3, #1
   1cea8:	425b      	negs	r3, r3
   1ceaa:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1ceac:	687b      	ldr	r3, [r7, #4]
   1ceae:	0018      	movs	r0, r3
   1ceb0:	4b0d      	ldr	r3, [pc, #52]	; (1cee8 <circular_buf_get+0x4c>)
   1ceb2:	4798      	blx	r3
   1ceb4:	0003      	movs	r3, r0
   1ceb6:	001a      	movs	r2, r3
   1ceb8:	2301      	movs	r3, #1
   1ceba:	4053      	eors	r3, r2
   1cebc:	b2db      	uxtb	r3, r3
   1cebe:	2b00      	cmp	r3, #0
   1cec0:	d00d      	beq.n	1cede <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1cec2:	687b      	ldr	r3, [r7, #4]
   1cec4:	681a      	ldr	r2, [r3, #0]
   1cec6:	687b      	ldr	r3, [r7, #4]
   1cec8:	689b      	ldr	r3, [r3, #8]
   1ceca:	18d3      	adds	r3, r2, r3
   1cecc:	781a      	ldrb	r2, [r3, #0]
   1cece:	683b      	ldr	r3, [r7, #0]
   1ced0:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1ced2:	687b      	ldr	r3, [r7, #4]
   1ced4:	0018      	movs	r0, r3
   1ced6:	4b05      	ldr	r3, [pc, #20]	; (1ceec <circular_buf_get+0x50>)
   1ced8:	4798      	blx	r3

		 r = 0;
   1ceda:	2300      	movs	r3, #0
   1cedc:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1cede:	68fb      	ldr	r3, [r7, #12]
 }
   1cee0:	0018      	movs	r0, r3
   1cee2:	46bd      	mov	sp, r7
   1cee4:	b004      	add	sp, #16
   1cee6:	bd80      	pop	{r7, pc}
   1cee8:	0001cef1 	.word	0x0001cef1
   1ceec:	0001cdd5 	.word	0x0001cdd5

0001cef0 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1cef0:	b580      	push	{r7, lr}
   1cef2:	b082      	sub	sp, #8
   1cef4:	af00      	add	r7, sp, #0
   1cef6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1cef8:	687b      	ldr	r3, [r7, #4]
   1cefa:	7c1b      	ldrb	r3, [r3, #16]
   1cefc:	2201      	movs	r2, #1
   1cefe:	4053      	eors	r3, r2
   1cf00:	b2db      	uxtb	r3, r3
   1cf02:	2b00      	cmp	r3, #0
   1cf04:	d007      	beq.n	1cf16 <circular_buf_empty+0x26>
   1cf06:	687b      	ldr	r3, [r7, #4]
   1cf08:	685a      	ldr	r2, [r3, #4]
   1cf0a:	687b      	ldr	r3, [r7, #4]
   1cf0c:	689b      	ldr	r3, [r3, #8]
   1cf0e:	429a      	cmp	r2, r3
   1cf10:	d101      	bne.n	1cf16 <circular_buf_empty+0x26>
   1cf12:	2301      	movs	r3, #1
   1cf14:	e000      	b.n	1cf18 <circular_buf_empty+0x28>
   1cf16:	2300      	movs	r3, #0
   1cf18:	1c1a      	adds	r2, r3, #0
   1cf1a:	2301      	movs	r3, #1
   1cf1c:	4013      	ands	r3, r2
   1cf1e:	b2db      	uxtb	r3, r3
 }
   1cf20:	0018      	movs	r0, r3
   1cf22:	46bd      	mov	sp, r7
   1cf24:	b002      	add	sp, #8
   1cf26:	bd80      	pop	{r7, pc}

0001cf28 <system_interrupt_enable>:
{
   1cf28:	b580      	push	{r7, lr}
   1cf2a:	b082      	sub	sp, #8
   1cf2c:	af00      	add	r7, sp, #0
   1cf2e:	0002      	movs	r2, r0
   1cf30:	1dfb      	adds	r3, r7, #7
   1cf32:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1cf34:	4b06      	ldr	r3, [pc, #24]	; (1cf50 <system_interrupt_enable+0x28>)
   1cf36:	1dfa      	adds	r2, r7, #7
   1cf38:	7812      	ldrb	r2, [r2, #0]
   1cf3a:	0011      	movs	r1, r2
   1cf3c:	221f      	movs	r2, #31
   1cf3e:	400a      	ands	r2, r1
   1cf40:	2101      	movs	r1, #1
   1cf42:	4091      	lsls	r1, r2
   1cf44:	000a      	movs	r2, r1
   1cf46:	601a      	str	r2, [r3, #0]
}
   1cf48:	46c0      	nop			; (mov r8, r8)
   1cf4a:	46bd      	mov	sp, r7
   1cf4c:	b002      	add	sp, #8
   1cf4e:	bd80      	pop	{r7, pc}
   1cf50:	e000e100 	.word	0xe000e100

0001cf54 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1cf54:	b580      	push	{r7, lr}
   1cf56:	b084      	sub	sp, #16
   1cf58:	af00      	add	r7, sp, #0
   1cf5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1cf5c:	687b      	ldr	r3, [r7, #4]
   1cf5e:	681b      	ldr	r3, [r3, #0]
   1cf60:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1cf62:	68fb      	ldr	r3, [r7, #12]
   1cf64:	69db      	ldr	r3, [r3, #28]
   1cf66:	1e5a      	subs	r2, r3, #1
   1cf68:	4193      	sbcs	r3, r2
   1cf6a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1cf6c:	0018      	movs	r0, r3
   1cf6e:	46bd      	mov	sp, r7
   1cf70:	b004      	add	sp, #16
   1cf72:	bd80      	pop	{r7, pc}

0001cf74 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1cf74:	b580      	push	{r7, lr}
   1cf76:	b082      	sub	sp, #8
   1cf78:	af00      	add	r7, sp, #0
   1cf7a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1cf7c:	46c0      	nop			; (mov r8, r8)
   1cf7e:	687b      	ldr	r3, [r7, #4]
   1cf80:	0018      	movs	r0, r3
   1cf82:	4b04      	ldr	r3, [pc, #16]	; (1cf94 <_usart_wait_for_sync+0x20>)
   1cf84:	4798      	blx	r3
   1cf86:	1e03      	subs	r3, r0, #0
   1cf88:	d1f9      	bne.n	1cf7e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1cf8a:	46c0      	nop			; (mov r8, r8)
   1cf8c:	46bd      	mov	sp, r7
   1cf8e:	b002      	add	sp, #8
   1cf90:	bd80      	pop	{r7, pc}
   1cf92:	46c0      	nop			; (mov r8, r8)
   1cf94:	0001cf55 	.word	0x0001cf55

0001cf98 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1cf98:	b580      	push	{r7, lr}
   1cf9a:	b082      	sub	sp, #8
   1cf9c:	af00      	add	r7, sp, #0
   1cf9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1cfa0:	687b      	ldr	r3, [r7, #4]
   1cfa2:	2280      	movs	r2, #128	; 0x80
   1cfa4:	05d2      	lsls	r2, r2, #23
   1cfa6:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1cfa8:	687b      	ldr	r3, [r7, #4]
   1cfaa:	2200      	movs	r2, #0
   1cfac:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1cfae:	687b      	ldr	r3, [r7, #4]
   1cfb0:	22ff      	movs	r2, #255	; 0xff
   1cfb2:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1cfb4:	687b      	ldr	r3, [r7, #4]
   1cfb6:	2200      	movs	r2, #0
   1cfb8:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1cfba:	687b      	ldr	r3, [r7, #4]
   1cfbc:	2200      	movs	r2, #0
   1cfbe:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1cfc0:	687b      	ldr	r3, [r7, #4]
   1cfc2:	2296      	movs	r2, #150	; 0x96
   1cfc4:	0192      	lsls	r2, r2, #6
   1cfc6:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1cfc8:	687b      	ldr	r3, [r7, #4]
   1cfca:	2224      	movs	r2, #36	; 0x24
   1cfcc:	2101      	movs	r1, #1
   1cfce:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1cfd0:	687b      	ldr	r3, [r7, #4]
   1cfd2:	2225      	movs	r2, #37	; 0x25
   1cfd4:	2101      	movs	r1, #1
   1cfd6:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1cfd8:	687b      	ldr	r3, [r7, #4]
   1cfda:	2226      	movs	r2, #38	; 0x26
   1cfdc:	2100      	movs	r1, #0
   1cfde:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1cfe0:	687b      	ldr	r3, [r7, #4]
   1cfe2:	2227      	movs	r2, #39	; 0x27
   1cfe4:	2100      	movs	r1, #0
   1cfe6:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1cfe8:	687b      	ldr	r3, [r7, #4]
   1cfea:	2200      	movs	r2, #0
   1cfec:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1cfee:	687b      	ldr	r3, [r7, #4]
   1cff0:	2288      	movs	r2, #136	; 0x88
   1cff2:	0352      	lsls	r2, r2, #13
   1cff4:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1cff6:	687b      	ldr	r3, [r7, #4]
   1cff8:	222c      	movs	r2, #44	; 0x2c
   1cffa:	2100      	movs	r1, #0
   1cffc:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1cffe:	687b      	ldr	r3, [r7, #4]
   1d000:	222d      	movs	r2, #45	; 0x2d
   1d002:	2100      	movs	r1, #0
   1d004:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1d006:	687b      	ldr	r3, [r7, #4]
   1d008:	2200      	movs	r2, #0
   1d00a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1d00c:	687b      	ldr	r3, [r7, #4]
   1d00e:	2200      	movs	r2, #0
   1d010:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1d012:	687b      	ldr	r3, [r7, #4]
   1d014:	2200      	movs	r2, #0
   1d016:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1d018:	687b      	ldr	r3, [r7, #4]
   1d01a:	2200      	movs	r2, #0
   1d01c:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1d01e:	687b      	ldr	r3, [r7, #4]
   1d020:	2200      	movs	r2, #0
   1d022:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1d024:	687b      	ldr	r3, [r7, #4]
   1d026:	2200      	movs	r2, #0
   1d028:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1d02a:	687b      	ldr	r3, [r7, #4]
   1d02c:	2200      	movs	r2, #0
   1d02e:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1d030:	687b      	ldr	r3, [r7, #4]
   1d032:	2200      	movs	r2, #0
   1d034:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1d036:	687b      	ldr	r3, [r7, #4]
   1d038:	2200      	movs	r2, #0
   1d03a:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1d03c:	687b      	ldr	r3, [r7, #4]
   1d03e:	2200      	movs	r2, #0
   1d040:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1d042:	687b      	ldr	r3, [r7, #4]
   1d044:	2213      	movs	r2, #19
   1d046:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1d048:	687b      	ldr	r3, [r7, #4]
   1d04a:	2200      	movs	r2, #0
   1d04c:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1d04e:	46c0      	nop			; (mov r8, r8)
   1d050:	46bd      	mov	sp, r7
   1d052:	b002      	add	sp, #8
   1d054:	bd80      	pop	{r7, pc}
	...

0001d058 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1d058:	b580      	push	{r7, lr}
   1d05a:	b084      	sub	sp, #16
   1d05c:	af00      	add	r7, sp, #0
   1d05e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1d060:	687b      	ldr	r3, [r7, #4]
   1d062:	681b      	ldr	r3, [r3, #0]
   1d064:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1d066:	687b      	ldr	r3, [r7, #4]
   1d068:	681b      	ldr	r3, [r3, #0]
   1d06a:	0018      	movs	r0, r3
   1d06c:	4b09      	ldr	r3, [pc, #36]	; (1d094 <usart_enable+0x3c>)
   1d06e:	4798      	blx	r3
   1d070:	0003      	movs	r3, r0
   1d072:	0018      	movs	r0, r3
   1d074:	4b08      	ldr	r3, [pc, #32]	; (1d098 <usart_enable+0x40>)
   1d076:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1d078:	687b      	ldr	r3, [r7, #4]
   1d07a:	0018      	movs	r0, r3
   1d07c:	4b07      	ldr	r3, [pc, #28]	; (1d09c <usart_enable+0x44>)
   1d07e:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1d080:	68fb      	ldr	r3, [r7, #12]
   1d082:	681b      	ldr	r3, [r3, #0]
   1d084:	2202      	movs	r2, #2
   1d086:	431a      	orrs	r2, r3
   1d088:	68fb      	ldr	r3, [r7, #12]
   1d08a:	601a      	str	r2, [r3, #0]
}
   1d08c:	46c0      	nop			; (mov r8, r8)
   1d08e:	46bd      	mov	sp, r7
   1d090:	b004      	add	sp, #16
   1d092:	bd80      	pop	{r7, pc}
   1d094:	00026a55 	.word	0x00026a55
   1d098:	0001cf29 	.word	0x0001cf29
   1d09c:	0001cf75 	.word	0x0001cf75

0001d0a0 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1d0a0:	b580      	push	{r7, lr}
   1d0a2:	b082      	sub	sp, #8
   1d0a4:	af00      	add	r7, sp, #0
   1d0a6:	6078      	str	r0, [r7, #4]
   1d0a8:	000a      	movs	r2, r1
   1d0aa:	1cfb      	adds	r3, r7, #3
   1d0ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1d0ae:	687b      	ldr	r3, [r7, #4]
   1d0b0:	2231      	movs	r2, #49	; 0x31
   1d0b2:	5c9b      	ldrb	r3, [r3, r2]
   1d0b4:	b25a      	sxtb	r2, r3
   1d0b6:	1cfb      	adds	r3, r7, #3
   1d0b8:	781b      	ldrb	r3, [r3, #0]
   1d0ba:	2101      	movs	r1, #1
   1d0bc:	4099      	lsls	r1, r3
   1d0be:	000b      	movs	r3, r1
   1d0c0:	b25b      	sxtb	r3, r3
   1d0c2:	4313      	orrs	r3, r2
   1d0c4:	b25b      	sxtb	r3, r3
   1d0c6:	b2d9      	uxtb	r1, r3
   1d0c8:	687b      	ldr	r3, [r7, #4]
   1d0ca:	2231      	movs	r2, #49	; 0x31
   1d0cc:	5499      	strb	r1, [r3, r2]

}
   1d0ce:	46c0      	nop			; (mov r8, r8)
   1d0d0:	46bd      	mov	sp, r7
   1d0d2:	b002      	add	sp, #8
   1d0d4:	bd80      	pop	{r7, pc}
	...

0001d0d8 <InitializeSerialConsole>:
*				asynchronous reads and writes. 
* @note			Call from main once to initialize Hardware.
*****************************************************************************/

void InitializeSerialConsole(void)
{
   1d0d8:	b580      	push	{r7, lr}
   1d0da:	af00      	add	r7, sp, #0

	//Initialize circular buffers for RX and TX
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
   1d0dc:	2380      	movs	r3, #128	; 0x80
   1d0de:	005a      	lsls	r2, r3, #1
   1d0e0:	4b0f      	ldr	r3, [pc, #60]	; (1d120 <InitializeSerialConsole+0x48>)
   1d0e2:	0011      	movs	r1, r2
   1d0e4:	0018      	movs	r0, r3
   1d0e6:	4b0f      	ldr	r3, [pc, #60]	; (1d124 <InitializeSerialConsole+0x4c>)
   1d0e8:	4798      	blx	r3
   1d0ea:	0002      	movs	r2, r0
   1d0ec:	4b0e      	ldr	r3, [pc, #56]	; (1d128 <InitializeSerialConsole+0x50>)
   1d0ee:	601a      	str	r2, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, TX_BUFFER_SIZE);
   1d0f0:	2380      	movs	r3, #128	; 0x80
   1d0f2:	009a      	lsls	r2, r3, #2
   1d0f4:	4b0d      	ldr	r3, [pc, #52]	; (1d12c <InitializeSerialConsole+0x54>)
   1d0f6:	0011      	movs	r1, r2
   1d0f8:	0018      	movs	r0, r3
   1d0fa:	4b0a      	ldr	r3, [pc, #40]	; (1d124 <InitializeSerialConsole+0x4c>)
   1d0fc:	4798      	blx	r3
   1d0fe:	0002      	movs	r2, r0
   1d100:	4b0b      	ldr	r3, [pc, #44]	; (1d130 <InitializeSerialConsole+0x58>)
   1d102:	601a      	str	r2, [r3, #0]

	//Configure USART and Callbacks
	configure_usart();
   1d104:	4b0b      	ldr	r3, [pc, #44]	; (1d134 <InitializeSerialConsole+0x5c>)
   1d106:	4798      	blx	r3
	configure_usart_callbacks();
   1d108:	4b0b      	ldr	r3, [pc, #44]	; (1d138 <InitializeSerialConsole+0x60>)
   1d10a:	4798      	blx	r3
	
	
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
   1d10c:	490b      	ldr	r1, [pc, #44]	; (1d13c <InitializeSerialConsole+0x64>)
   1d10e:	4b0c      	ldr	r3, [pc, #48]	; (1d140 <InitializeSerialConsole+0x68>)
   1d110:	2201      	movs	r2, #1
   1d112:	0018      	movs	r0, r3
   1d114:	4b0b      	ldr	r3, [pc, #44]	; (1d144 <InitializeSerialConsole+0x6c>)
   1d116:	4798      	blx	r3

	//Add any other calls you need to do to initialize your Serial Console
}
   1d118:	46c0      	nop			; (mov r8, r8)
   1d11a:	46bd      	mov	sp, r7
   1d11c:	bd80      	pop	{r7, pc}
   1d11e:	46c0      	nop			; (mov r8, r8)
   1d120:	20005398 	.word	0x20005398
   1d124:	0001ce09 	.word	0x0001ce09
   1d128:	20005190 	.word	0x20005190
   1d12c:	20005198 	.word	0x20005198
   1d130:	2000549c 	.word	0x2000549c
   1d134:	0001d2ad 	.word	0x0001d2ad
   1d138:	0001d325 	.word	0x0001d325
   1d13c:	20005194 	.word	0x20005194
   1d140:	2000515c 	.word	0x2000515c
   1d144:	000282fd 	.word	0x000282fd

0001d148 <SerialConsoleWriteString>:
* @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the text send to the uart
* @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be thread safe.
* @note			Use to send a string of characters to the user via UART
*****************************************************************************/
void SerialConsoleWriteString(const char * string)
{
   1d148:	b580      	push	{r7, lr}
   1d14a:	b084      	sub	sp, #16
   1d14c:	af00      	add	r7, sp, #0
   1d14e:	6078      	str	r0, [r7, #4]
vTaskSuspendAll();
   1d150:	4b1a      	ldr	r3, [pc, #104]	; (1d1bc <SerialConsoleWriteString+0x74>)
   1d152:	4798      	blx	r3
 	if(string != NULL)
   1d154:	687b      	ldr	r3, [r7, #4]
   1d156:	2b00      	cmp	r3, #0
   1d158:	d02a      	beq.n	1d1b0 <SerialConsoleWriteString+0x68>
	{
		for (size_t iter = 0; iter < strlen(string); iter++)
   1d15a:	2300      	movs	r3, #0
   1d15c:	60fb      	str	r3, [r7, #12]
   1d15e:	e00b      	b.n	1d178 <SerialConsoleWriteString+0x30>
		{
			circular_buf_put(cbufTx, string[iter]);
   1d160:	4b17      	ldr	r3, [pc, #92]	; (1d1c0 <SerialConsoleWriteString+0x78>)
   1d162:	6818      	ldr	r0, [r3, #0]
   1d164:	687a      	ldr	r2, [r7, #4]
   1d166:	68fb      	ldr	r3, [r7, #12]
   1d168:	18d3      	adds	r3, r2, r3
   1d16a:	781b      	ldrb	r3, [r3, #0]
   1d16c:	0019      	movs	r1, r3
   1d16e:	4b15      	ldr	r3, [pc, #84]	; (1d1c4 <SerialConsoleWriteString+0x7c>)
   1d170:	4798      	blx	r3
		for (size_t iter = 0; iter < strlen(string); iter++)
   1d172:	68fb      	ldr	r3, [r7, #12]
   1d174:	3301      	adds	r3, #1
   1d176:	60fb      	str	r3, [r7, #12]
   1d178:	687b      	ldr	r3, [r7, #4]
   1d17a:	0018      	movs	r0, r3
   1d17c:	4b12      	ldr	r3, [pc, #72]	; (1d1c8 <SerialConsoleWriteString+0x80>)
   1d17e:	4798      	blx	r3
   1d180:	0002      	movs	r2, r0
   1d182:	68fb      	ldr	r3, [r7, #12]
   1d184:	429a      	cmp	r2, r3
   1d186:	d8eb      	bhi.n	1d160 <SerialConsoleWriteString+0x18>
		}

		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
   1d188:	4b10      	ldr	r3, [pc, #64]	; (1d1cc <SerialConsoleWriteString+0x84>)
   1d18a:	2101      	movs	r1, #1
   1d18c:	0018      	movs	r0, r3
   1d18e:	4b10      	ldr	r3, [pc, #64]	; (1d1d0 <SerialConsoleWriteString+0x88>)
   1d190:	4798      	blx	r3
   1d192:	1e03      	subs	r3, r0, #0
   1d194:	d10c      	bne.n	1d1b0 <SerialConsoleWriteString+0x68>
		{
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
   1d196:	4b0a      	ldr	r3, [pc, #40]	; (1d1c0 <SerialConsoleWriteString+0x78>)
   1d198:	681b      	ldr	r3, [r3, #0]
   1d19a:	4a0e      	ldr	r2, [pc, #56]	; (1d1d4 <SerialConsoleWriteString+0x8c>)
   1d19c:	0011      	movs	r1, r2
   1d19e:	0018      	movs	r0, r3
   1d1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d1d8 <SerialConsoleWriteString+0x90>)
   1d1a2:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   1d1a4:	490b      	ldr	r1, [pc, #44]	; (1d1d4 <SerialConsoleWriteString+0x8c>)
   1d1a6:	4b09      	ldr	r3, [pc, #36]	; (1d1cc <SerialConsoleWriteString+0x84>)
   1d1a8:	2201      	movs	r2, #1
   1d1aa:	0018      	movs	r0, r3
   1d1ac:	4b0b      	ldr	r3, [pc, #44]	; (1d1dc <SerialConsoleWriteString+0x94>)
   1d1ae:	4798      	blx	r3
		}
	}
xTaskResumeAll();
   1d1b0:	4b0b      	ldr	r3, [pc, #44]	; (1d1e0 <SerialConsoleWriteString+0x98>)
   1d1b2:	4798      	blx	r3
}
   1d1b4:	46c0      	nop			; (mov r8, r8)
   1d1b6:	46bd      	mov	sp, r7
   1d1b8:	b004      	add	sp, #16
   1d1ba:	bd80      	pop	{r7, pc}
   1d1bc:	0001b7b5 	.word	0x0001b7b5
   1d1c0:	2000549c 	.word	0x2000549c
   1d1c4:	0001ce69 	.word	0x0001ce69
   1d1c8:	00033db7 	.word	0x00033db7
   1d1cc:	2000515c 	.word	0x2000515c
   1d1d0:	00028345 	.word	0x00028345
   1d1d4:	20005498 	.word	0x20005498
   1d1d8:	0001ce9d 	.word	0x0001ce9d
   1d1dc:	000282b5 	.word	0x000282b5
   1d1e0:	0001b7cd 	.word	0x0001b7cd

0001d1e4 <SerialConsoleReadCharacter>:
* @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
* @return		Returns -1 if there are no characters in the buffer
* @note			Use to receive characters from the RX buffer (FIFO)
*****************************************************************************/
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1d1e4:	b580      	push	{r7, lr}
   1d1e6:	b084      	sub	sp, #16
   1d1e8:	af00      	add	r7, sp, #0
   1d1ea:	6078      	str	r0, [r7, #4]
	vTaskSuspendAll();
   1d1ec:	4b08      	ldr	r3, [pc, #32]	; (1d210 <SerialConsoleReadCharacter+0x2c>)
   1d1ee:	4798      	blx	r3
	int a = circular_buf_get(cbufRx, (uint8_t*) rxChar);
   1d1f0:	4b08      	ldr	r3, [pc, #32]	; (1d214 <SerialConsoleReadCharacter+0x30>)
   1d1f2:	681b      	ldr	r3, [r3, #0]
   1d1f4:	687a      	ldr	r2, [r7, #4]
   1d1f6:	0011      	movs	r1, r2
   1d1f8:	0018      	movs	r0, r3
   1d1fa:	4b07      	ldr	r3, [pc, #28]	; (1d218 <SerialConsoleReadCharacter+0x34>)
   1d1fc:	4798      	blx	r3
   1d1fe:	0003      	movs	r3, r0
   1d200:	60fb      	str	r3, [r7, #12]
	xTaskResumeAll();
   1d202:	4b06      	ldr	r3, [pc, #24]	; (1d21c <SerialConsoleReadCharacter+0x38>)
   1d204:	4798      	blx	r3
	return a;
   1d206:	68fb      	ldr	r3, [r7, #12]

}
   1d208:	0018      	movs	r0, r3
   1d20a:	46bd      	mov	sp, r7
   1d20c:	b004      	add	sp, #16
   1d20e:	bd80      	pop	{r7, pc}
   1d210:	0001b7b5 	.word	0x0001b7b5
   1d214:	20005190 	.word	0x20005190
   1d218:	0001ce9d 	.word	0x0001ce9d
   1d21c:	0001b7cd 	.word	0x0001b7cd

0001d220 <getLogLevel>:
* @return		Returns the current debug level of the system.
* @note
*****************************************************************************/

enum eDebugLogLevels getLogLevel(void)
{
   1d220:	b580      	push	{r7, lr}
   1d222:	af00      	add	r7, sp, #0
return currentDebugLevel;
   1d224:	4b02      	ldr	r3, [pc, #8]	; (1d230 <getLogLevel+0x10>)
   1d226:	781b      	ldrb	r3, [r3, #0]
}
   1d228:	0018      	movs	r0, r3
   1d22a:	46bd      	mov	sp, r7
   1d22c:	bd80      	pop	{r7, pc}
   1d22e:	46c0      	nop			; (mov r8, r8)
   1d230:	20003d74 	.word	0x20003d74

0001d234 <LogMessage>:
* @fn			LogMessage (Students to fill out this)
* @brief
* @note
*****************************************************************************/
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1d234:	b40e      	push	{r1, r2, r3}
   1d236:	b590      	push	{r4, r7, lr}
   1d238:	b084      	sub	sp, #16
   1d23a:	af00      	add	r7, sp, #0
   1d23c:	0002      	movs	r2, r0
   1d23e:	1dfb      	adds	r3, r7, #7
   1d240:	701a      	strb	r2, [r3, #0]

if(getLogLevel() <= level){
   1d242:	4b0e      	ldr	r3, [pc, #56]	; (1d27c <LogMessage+0x48>)
   1d244:	4798      	blx	r3
   1d246:	0003      	movs	r3, r0
   1d248:	001a      	movs	r2, r3
   1d24a:	1dfb      	adds	r3, r7, #7
   1d24c:	781b      	ldrb	r3, [r3, #0]
   1d24e:	4293      	cmp	r3, r2
   1d250:	d30c      	bcc.n	1d26c <LogMessage+0x38>
	va_list ap;
	va_start(ap, format);
   1d252:	2320      	movs	r3, #32
   1d254:	18fb      	adds	r3, r7, r3
   1d256:	60fb      	str	r3, [r7, #12]
	vsnprintf(debugBuffer, 127, format, ap);
   1d258:	68fb      	ldr	r3, [r7, #12]
   1d25a:	69fa      	ldr	r2, [r7, #28]
   1d25c:	4808      	ldr	r0, [pc, #32]	; (1d280 <LogMessage+0x4c>)
   1d25e:	217f      	movs	r1, #127	; 0x7f
   1d260:	4c08      	ldr	r4, [pc, #32]	; (1d284 <LogMessage+0x50>)
   1d262:	47a0      	blx	r4
	SerialConsoleWriteString(debugBuffer);
   1d264:	4b06      	ldr	r3, [pc, #24]	; (1d280 <LogMessage+0x4c>)
   1d266:	0018      	movs	r0, r3
   1d268:	4b07      	ldr	r3, [pc, #28]	; (1d288 <LogMessage+0x54>)
   1d26a:	4798      	blx	r3
	va_end(ap);
}
};
   1d26c:	46c0      	nop			; (mov r8, r8)
   1d26e:	46bd      	mov	sp, r7
   1d270:	b004      	add	sp, #16
   1d272:	bc90      	pop	{r4, r7}
   1d274:	bc08      	pop	{r3}
   1d276:	b003      	add	sp, #12
   1d278:	4718      	bx	r3
   1d27a:	46c0      	nop			; (mov r8, r8)
   1d27c:	0001d221 	.word	0x0001d221
   1d280:	200050dc 	.word	0x200050dc
   1d284:	00033ff1 	.word	0x00033ff1
   1d288:	0001d149 	.word	0x0001d149

0001d28c <LogMessageDebug>:
* @fn			LogMessage Debug(Students to fill out this)
* @brief
* @note
*****************************************************************************/
void LogMessageDebug(const char *format, ...)
{
   1d28c:	b40f      	push	{r0, r1, r2, r3}
   1d28e:	b580      	push	{r7, lr}
   1d290:	af00      	add	r7, sp, #0

LogMessage(LOG_DEBUG_LVL, format);
   1d292:	68bb      	ldr	r3, [r7, #8]
   1d294:	0019      	movs	r1, r3
   1d296:	2001      	movs	r0, #1
   1d298:	4b03      	ldr	r3, [pc, #12]	; (1d2a8 <LogMessageDebug+0x1c>)
   1d29a:	4798      	blx	r3

};
   1d29c:	46c0      	nop			; (mov r8, r8)
   1d29e:	46bd      	mov	sp, r7
   1d2a0:	bc80      	pop	{r7}
   1d2a2:	bc08      	pop	{r3}
   1d2a4:	b004      	add	sp, #16
   1d2a6:	4718      	bx	r3
   1d2a8:	0001d235 	.word	0x0001d235

0001d2ac <configure_usart>:
* @fn			static void configure_usart(void)
* @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
* @note			
*****************************************************************************/
static void configure_usart(void)
{
   1d2ac:	b580      	push	{r7, lr}
   1d2ae:	b090      	sub	sp, #64	; 0x40
   1d2b0:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
   1d2b2:	003b      	movs	r3, r7
   1d2b4:	0018      	movs	r0, r3
   1d2b6:	4b14      	ldr	r3, [pc, #80]	; (1d308 <configure_usart+0x5c>)
   1d2b8:	4798      	blx	r3

	config_usart.baudrate    = 115200;
   1d2ba:	003b      	movs	r3, r7
   1d2bc:	22e1      	movs	r2, #225	; 0xe1
   1d2be:	0252      	lsls	r2, r2, #9
   1d2c0:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1d2c2:	003b      	movs	r3, r7
   1d2c4:	22c4      	movs	r2, #196	; 0xc4
   1d2c6:	0392      	lsls	r2, r2, #14
   1d2c8:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1d2ca:	003b      	movs	r3, r7
   1d2cc:	2201      	movs	r2, #1
   1d2ce:	4252      	negs	r2, r2
   1d2d0:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1d2d2:	003b      	movs	r3, r7
   1d2d4:	2201      	movs	r2, #1
   1d2d6:	4252      	negs	r2, r2
   1d2d8:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1d2da:	003b      	movs	r3, r7
   1d2dc:	4a0b      	ldr	r2, [pc, #44]	; (1d30c <configure_usart+0x60>)
   1d2de:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1d2e0:	003b      	movs	r3, r7
   1d2e2:	4a0b      	ldr	r2, [pc, #44]	; (1d310 <configure_usart+0x64>)
   1d2e4:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_instance,
   1d2e6:	46c0      	nop			; (mov r8, r8)
   1d2e8:	003a      	movs	r2, r7
   1d2ea:	490a      	ldr	r1, [pc, #40]	; (1d314 <configure_usart+0x68>)
   1d2ec:	4b0a      	ldr	r3, [pc, #40]	; (1d318 <configure_usart+0x6c>)
   1d2ee:	0018      	movs	r0, r3
   1d2f0:	4b0a      	ldr	r3, [pc, #40]	; (1d31c <configure_usart+0x70>)
   1d2f2:	4798      	blx	r3
   1d2f4:	1e03      	subs	r3, r0, #0
   1d2f6:	d1f7      	bne.n	1d2e8 <configure_usart+0x3c>
					  &config_usart) != STATUS_OK) 
	{

	}
	
	usart_enable(&usart_instance);
   1d2f8:	4b07      	ldr	r3, [pc, #28]	; (1d318 <configure_usart+0x6c>)
   1d2fa:	0018      	movs	r0, r3
   1d2fc:	4b08      	ldr	r3, [pc, #32]	; (1d320 <configure_usart+0x74>)
   1d2fe:	4798      	blx	r3
}
   1d300:	46c0      	nop			; (mov r8, r8)
   1d302:	46bd      	mov	sp, r7
   1d304:	b010      	add	sp, #64	; 0x40
   1d306:	bd80      	pop	{r7, pc}
   1d308:	0001cf99 	.word	0x0001cf99
   1d30c:	002a0003 	.word	0x002a0003
   1d310:	002b0003 	.word	0x002b0003
   1d314:	42001800 	.word	0x42001800
   1d318:	2000515c 	.word	0x2000515c
   1d31c:	00027eb9 	.word	0x00027eb9
   1d320:	0001d059 	.word	0x0001d059

0001d324 <configure_usart_callbacks>:
* @fn			static void configure_usart_callbacks(void)
* @brief		Code to register callbacks
* @note
*****************************************************************************/
static void configure_usart_callbacks(void)
{
   1d324:	b580      	push	{r7, lr}
   1d326:	af00      	add	r7, sp, #0
	usart_register_callback(&usart_instance,
   1d328:	490c      	ldr	r1, [pc, #48]	; (1d35c <configure_usart_callbacks+0x38>)
   1d32a:	4b0d      	ldr	r3, [pc, #52]	; (1d360 <configure_usart_callbacks+0x3c>)
   1d32c:	2200      	movs	r2, #0
   1d32e:	0018      	movs	r0, r3
   1d330:	4b0c      	ldr	r3, [pc, #48]	; (1d364 <configure_usart_callbacks+0x40>)
   1d332:	4798      	blx	r3
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
   1d334:	490c      	ldr	r1, [pc, #48]	; (1d368 <configure_usart_callbacks+0x44>)
   1d336:	4b0a      	ldr	r3, [pc, #40]	; (1d360 <configure_usart_callbacks+0x3c>)
   1d338:	2201      	movs	r2, #1
   1d33a:	0018      	movs	r0, r3
   1d33c:	4b09      	ldr	r3, [pc, #36]	; (1d364 <configure_usart_callbacks+0x40>)
   1d33e:	4798      	blx	r3
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1d340:	4b07      	ldr	r3, [pc, #28]	; (1d360 <configure_usart_callbacks+0x3c>)
   1d342:	2100      	movs	r1, #0
   1d344:	0018      	movs	r0, r3
   1d346:	4b09      	ldr	r3, [pc, #36]	; (1d36c <configure_usart_callbacks+0x48>)
   1d348:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1d34a:	4b05      	ldr	r3, [pc, #20]	; (1d360 <configure_usart_callbacks+0x3c>)
   1d34c:	2101      	movs	r1, #1
   1d34e:	0018      	movs	r0, r3
   1d350:	4b06      	ldr	r3, [pc, #24]	; (1d36c <configure_usart_callbacks+0x48>)
   1d352:	4798      	blx	r3
}
   1d354:	46c0      	nop			; (mov r8, r8)
   1d356:	46bd      	mov	sp, r7
   1d358:	bd80      	pop	{r7, pc}
   1d35a:	46c0      	nop			; (mov r8, r8)
   1d35c:	0001d3b1 	.word	0x0001d3b1
   1d360:	2000515c 	.word	0x2000515c
   1d364:	0002826d 	.word	0x0002826d
   1d368:	0001d371 	.word	0x0001d371
   1d36c:	0001d0a1 	.word	0x0001d0a1

0001d370 <usart_read_callback>:
* @fn			void usart_read_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
   1d370:	b580      	push	{r7, lr}
   1d372:	b082      	sub	sp, #8
   1d374:	af00      	add	r7, sp, #0
   1d376:	6078      	str	r0, [r7, #4]

	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
   1d378:	4b08      	ldr	r3, [pc, #32]	; (1d39c <usart_read_callback+0x2c>)
   1d37a:	681a      	ldr	r2, [r3, #0]
   1d37c:	4b08      	ldr	r3, [pc, #32]	; (1d3a0 <usart_read_callback+0x30>)
   1d37e:	781b      	ldrb	r3, [r3, #0]
   1d380:	0019      	movs	r1, r3
   1d382:	0010      	movs	r0, r2
   1d384:	4b07      	ldr	r3, [pc, #28]	; (1d3a4 <usart_read_callback+0x34>)
   1d386:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
   1d388:	4905      	ldr	r1, [pc, #20]	; (1d3a0 <usart_read_callback+0x30>)
   1d38a:	4b07      	ldr	r3, [pc, #28]	; (1d3a8 <usart_read_callback+0x38>)
   1d38c:	2201      	movs	r2, #1
   1d38e:	0018      	movs	r0, r3
   1d390:	4b06      	ldr	r3, [pc, #24]	; (1d3ac <usart_read_callback+0x3c>)
   1d392:	4798      	blx	r3
	
}
   1d394:	46c0      	nop			; (mov r8, r8)
   1d396:	46bd      	mov	sp, r7
   1d398:	b002      	add	sp, #8
   1d39a:	bd80      	pop	{r7, pc}
   1d39c:	20005190 	.word	0x20005190
   1d3a0:	20005194 	.word	0x20005194
   1d3a4:	0001ce69 	.word	0x0001ce69
   1d3a8:	2000515c 	.word	0x2000515c
   1d3ac:	000282fd 	.word	0x000282fd

0001d3b0 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
   1d3b0:	b580      	push	{r7, lr}
   1d3b2:	b082      	sub	sp, #8
   1d3b4:	af00      	add	r7, sp, #0
   1d3b6:	6078      	str	r0, [r7, #4]
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
   1d3b8:	4b09      	ldr	r3, [pc, #36]	; (1d3e0 <usart_write_callback+0x30>)
   1d3ba:	681b      	ldr	r3, [r3, #0]
   1d3bc:	4a09      	ldr	r2, [pc, #36]	; (1d3e4 <usart_write_callback+0x34>)
   1d3be:	0011      	movs	r1, r2
   1d3c0:	0018      	movs	r0, r3
   1d3c2:	4b09      	ldr	r3, [pc, #36]	; (1d3e8 <usart_write_callback+0x38>)
   1d3c4:	4798      	blx	r3
   1d3c6:	0003      	movs	r3, r0
   1d3c8:	3301      	adds	r3, #1
   1d3ca:	d005      	beq.n	1d3d8 <usart_write_callback+0x28>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   1d3cc:	4905      	ldr	r1, [pc, #20]	; (1d3e4 <usart_write_callback+0x34>)
   1d3ce:	4b07      	ldr	r3, [pc, #28]	; (1d3ec <usart_write_callback+0x3c>)
   1d3d0:	2201      	movs	r2, #1
   1d3d2:	0018      	movs	r0, r3
   1d3d4:	4b06      	ldr	r3, [pc, #24]	; (1d3f0 <usart_write_callback+0x40>)
   1d3d6:	4798      	blx	r3
	}
	
}
   1d3d8:	46c0      	nop			; (mov r8, r8)
   1d3da:	46bd      	mov	sp, r7
   1d3dc:	b002      	add	sp, #8
   1d3de:	bd80      	pop	{r7, pc}
   1d3e0:	2000549c 	.word	0x2000549c
   1d3e4:	20005498 	.word	0x20005498
   1d3e8:	0001ce9d 	.word	0x0001ce9d
   1d3ec:	2000515c 	.word	0x2000515c
   1d3f0:	000282b5 	.word	0x000282b5

0001d3f4 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1d3f4:	b590      	push	{r4, r7, lr}
   1d3f6:	b087      	sub	sp, #28
   1d3f8:	af00      	add	r7, sp, #0
   1d3fa:	60f8      	str	r0, [r7, #12]
   1d3fc:	000c      	movs	r4, r1
   1d3fe:	0010      	movs	r0, r2
   1d400:	0019      	movs	r1, r3
   1d402:	230a      	movs	r3, #10
   1d404:	18fb      	adds	r3, r7, r3
   1d406:	1c22      	adds	r2, r4, #0
   1d408:	801a      	strh	r2, [r3, #0]
   1d40a:	2308      	movs	r3, #8
   1d40c:	18fb      	adds	r3, r7, r3
   1d40e:	1c02      	adds	r2, r0, #0
   1d410:	801a      	strh	r2, [r3, #0]
   1d412:	1dfb      	adds	r3, r7, #7
   1d414:	1c0a      	adds	r2, r1, #0
   1d416:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1d418:	230a      	movs	r3, #10
   1d41a:	18fb      	adds	r3, r7, r3
   1d41c:	881a      	ldrh	r2, [r3, #0]
   1d41e:	2308      	movs	r3, #8
   1d420:	18fb      	adds	r3, r7, r3
   1d422:	881b      	ldrh	r3, [r3, #0]
   1d424:	1ad3      	subs	r3, r2, r3
   1d426:	3307      	adds	r3, #7
   1d428:	2b00      	cmp	r3, #0
   1d42a:	da00      	bge.n	1d42e <SDMMC_UNSTUFF_BITS+0x3a>
   1d42c:	3307      	adds	r3, #7
   1d42e:	10db      	asrs	r3, r3, #3
   1d430:	3b01      	subs	r3, #1
   1d432:	68fa      	ldr	r2, [r7, #12]
   1d434:	18d3      	adds	r3, r2, r3
   1d436:	781b      	ldrb	r3, [r3, #0]
   1d438:	0019      	movs	r1, r3
   1d43a:	2308      	movs	r3, #8
   1d43c:	18fb      	adds	r3, r7, r3
   1d43e:	881b      	ldrh	r3, [r3, #0]
   1d440:	2207      	movs	r2, #7
   1d442:	4013      	ands	r3, r2
   1d444:	4119      	asrs	r1, r3
   1d446:	000b      	movs	r3, r1
   1d448:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1d44a:	2308      	movs	r3, #8
   1d44c:	18fb      	adds	r3, r7, r3
   1d44e:	881b      	ldrh	r3, [r3, #0]
   1d450:	2207      	movs	r2, #7
   1d452:	401a      	ands	r2, r3
   1d454:	1dfb      	adds	r3, r7, #7
   1d456:	781b      	ldrb	r3, [r3, #0]
   1d458:	18d3      	adds	r3, r2, r3
   1d45a:	2b08      	cmp	r3, #8
   1d45c:	dd1c      	ble.n	1d498 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1d45e:	230a      	movs	r3, #10
   1d460:	18fb      	adds	r3, r7, r3
   1d462:	881a      	ldrh	r2, [r3, #0]
   1d464:	2308      	movs	r3, #8
   1d466:	18fb      	adds	r3, r7, r3
   1d468:	881b      	ldrh	r3, [r3, #0]
   1d46a:	1ad3      	subs	r3, r2, r3
   1d46c:	3307      	adds	r3, #7
   1d46e:	2b00      	cmp	r3, #0
   1d470:	da00      	bge.n	1d474 <SDMMC_UNSTUFF_BITS+0x80>
   1d472:	3307      	adds	r3, #7
   1d474:	10db      	asrs	r3, r3, #3
   1d476:	3b02      	subs	r3, #2
   1d478:	68fa      	ldr	r2, [r7, #12]
   1d47a:	18d3      	adds	r3, r2, r3
   1d47c:	781b      	ldrb	r3, [r3, #0]
   1d47e:	0019      	movs	r1, r3
   1d480:	2308      	movs	r3, #8
   1d482:	18fb      	adds	r3, r7, r3
   1d484:	881b      	ldrh	r3, [r3, #0]
   1d486:	2207      	movs	r2, #7
   1d488:	4013      	ands	r3, r2
   1d48a:	2208      	movs	r2, #8
   1d48c:	1ad3      	subs	r3, r2, r3
   1d48e:	4099      	lsls	r1, r3
   1d490:	000b      	movs	r3, r1
   1d492:	697a      	ldr	r2, [r7, #20]
   1d494:	4313      	orrs	r3, r2
   1d496:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1d498:	2308      	movs	r3, #8
   1d49a:	18fb      	adds	r3, r7, r3
   1d49c:	881b      	ldrh	r3, [r3, #0]
   1d49e:	2207      	movs	r2, #7
   1d4a0:	401a      	ands	r2, r3
   1d4a2:	1dfb      	adds	r3, r7, #7
   1d4a4:	781b      	ldrb	r3, [r3, #0]
   1d4a6:	18d3      	adds	r3, r2, r3
   1d4a8:	2b10      	cmp	r3, #16
   1d4aa:	dd1c      	ble.n	1d4e6 <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1d4ac:	230a      	movs	r3, #10
   1d4ae:	18fb      	adds	r3, r7, r3
   1d4b0:	881a      	ldrh	r2, [r3, #0]
   1d4b2:	2308      	movs	r3, #8
   1d4b4:	18fb      	adds	r3, r7, r3
   1d4b6:	881b      	ldrh	r3, [r3, #0]
   1d4b8:	1ad3      	subs	r3, r2, r3
   1d4ba:	3307      	adds	r3, #7
   1d4bc:	2b00      	cmp	r3, #0
   1d4be:	da00      	bge.n	1d4c2 <SDMMC_UNSTUFF_BITS+0xce>
   1d4c0:	3307      	adds	r3, #7
   1d4c2:	10db      	asrs	r3, r3, #3
   1d4c4:	3b03      	subs	r3, #3
   1d4c6:	68fa      	ldr	r2, [r7, #12]
   1d4c8:	18d3      	adds	r3, r2, r3
   1d4ca:	781b      	ldrb	r3, [r3, #0]
   1d4cc:	0019      	movs	r1, r3
   1d4ce:	2308      	movs	r3, #8
   1d4d0:	18fb      	adds	r3, r7, r3
   1d4d2:	881b      	ldrh	r3, [r3, #0]
   1d4d4:	2207      	movs	r2, #7
   1d4d6:	4013      	ands	r3, r2
   1d4d8:	2210      	movs	r2, #16
   1d4da:	1ad3      	subs	r3, r2, r3
   1d4dc:	4099      	lsls	r1, r3
   1d4de:	000b      	movs	r3, r1
   1d4e0:	697a      	ldr	r2, [r7, #20]
   1d4e2:	4313      	orrs	r3, r2
   1d4e4:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1d4e6:	2308      	movs	r3, #8
   1d4e8:	18fb      	adds	r3, r7, r3
   1d4ea:	881b      	ldrh	r3, [r3, #0]
   1d4ec:	2207      	movs	r2, #7
   1d4ee:	401a      	ands	r2, r3
   1d4f0:	1dfb      	adds	r3, r7, #7
   1d4f2:	781b      	ldrb	r3, [r3, #0]
   1d4f4:	18d3      	adds	r3, r2, r3
   1d4f6:	2b10      	cmp	r3, #16
   1d4f8:	dd1c      	ble.n	1d534 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1d4fa:	230a      	movs	r3, #10
   1d4fc:	18fb      	adds	r3, r7, r3
   1d4fe:	881a      	ldrh	r2, [r3, #0]
   1d500:	2308      	movs	r3, #8
   1d502:	18fb      	adds	r3, r7, r3
   1d504:	881b      	ldrh	r3, [r3, #0]
   1d506:	1ad3      	subs	r3, r2, r3
   1d508:	3307      	adds	r3, #7
   1d50a:	2b00      	cmp	r3, #0
   1d50c:	da00      	bge.n	1d510 <SDMMC_UNSTUFF_BITS+0x11c>
   1d50e:	3307      	adds	r3, #7
   1d510:	10db      	asrs	r3, r3, #3
   1d512:	3b03      	subs	r3, #3
   1d514:	68fa      	ldr	r2, [r7, #12]
   1d516:	18d3      	adds	r3, r2, r3
   1d518:	781b      	ldrb	r3, [r3, #0]
   1d51a:	0019      	movs	r1, r3
   1d51c:	2308      	movs	r3, #8
   1d51e:	18fb      	adds	r3, r7, r3
   1d520:	881b      	ldrh	r3, [r3, #0]
   1d522:	2207      	movs	r2, #7
   1d524:	4013      	ands	r3, r2
   1d526:	2210      	movs	r2, #16
   1d528:	1ad3      	subs	r3, r2, r3
   1d52a:	4099      	lsls	r1, r3
   1d52c:	000b      	movs	r3, r1
   1d52e:	697a      	ldr	r2, [r7, #20]
   1d530:	4313      	orrs	r3, r2
   1d532:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1d534:	1dfb      	adds	r3, r7, #7
   1d536:	781b      	ldrb	r3, [r3, #0]
   1d538:	2201      	movs	r2, #1
   1d53a:	409a      	lsls	r2, r3
   1d53c:	0013      	movs	r3, r2
   1d53e:	1e5a      	subs	r2, r3, #1
   1d540:	697b      	ldr	r3, [r7, #20]
   1d542:	4013      	ands	r3, r2
   1d544:	617b      	str	r3, [r7, #20]
	return value;
   1d546:	697b      	ldr	r3, [r7, #20]
}
   1d548:	0018      	movs	r0, r3
   1d54a:	46bd      	mov	sp, r7
   1d54c:	b007      	add	sp, #28
   1d54e:	bd90      	pop	{r4, r7, pc}

0001d550 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1d550:	b580      	push	{r7, lr}
   1d552:	b082      	sub	sp, #8
   1d554:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1d556:	4b23      	ldr	r3, [pc, #140]	; (1d5e4 <mmc_spi_op_cond+0x94>)
   1d558:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1d55a:	4b23      	ldr	r3, [pc, #140]	; (1d5e8 <mmc_spi_op_cond+0x98>)
   1d55c:	2100      	movs	r1, #0
   1d55e:	0018      	movs	r0, r3
   1d560:	4b22      	ldr	r3, [pc, #136]	; (1d5ec <mmc_spi_op_cond+0x9c>)
   1d562:	4798      	blx	r3
   1d564:	0003      	movs	r3, r0
   1d566:	001a      	movs	r2, r3
   1d568:	2301      	movs	r3, #1
   1d56a:	4053      	eors	r3, r2
   1d56c:	b2db      	uxtb	r3, r3
   1d56e:	2b00      	cmp	r3, #0
   1d570:	d001      	beq.n	1d576 <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1d572:	2300      	movs	r3, #0
   1d574:	e031      	b.n	1d5da <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1d576:	4b1e      	ldr	r3, [pc, #120]	; (1d5f0 <mmc_spi_op_cond+0xa0>)
   1d578:	4798      	blx	r3
   1d57a:	0003      	movs	r3, r0
   1d57c:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1d57e:	683b      	ldr	r3, [r7, #0]
   1d580:	2201      	movs	r2, #1
   1d582:	4013      	ands	r3, r2
   1d584:	d006      	beq.n	1d594 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1d586:	687b      	ldr	r3, [r7, #4]
   1d588:	1e5a      	subs	r2, r3, #1
   1d58a:	607a      	str	r2, [r7, #4]
   1d58c:	2b00      	cmp	r3, #0
   1d58e:	d1e4      	bne.n	1d55a <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1d590:	2300      	movs	r3, #0
   1d592:	e022      	b.n	1d5da <mmc_spi_op_cond+0x8a>
			break;
   1d594:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1d596:	4b17      	ldr	r3, [pc, #92]	; (1d5f4 <mmc_spi_op_cond+0xa4>)
   1d598:	2100      	movs	r1, #0
   1d59a:	0018      	movs	r0, r3
   1d59c:	4b13      	ldr	r3, [pc, #76]	; (1d5ec <mmc_spi_op_cond+0x9c>)
   1d59e:	4798      	blx	r3
   1d5a0:	0003      	movs	r3, r0
   1d5a2:	001a      	movs	r2, r3
   1d5a4:	2301      	movs	r3, #1
   1d5a6:	4053      	eors	r3, r2
   1d5a8:	b2db      	uxtb	r3, r3
   1d5aa:	2b00      	cmp	r3, #0
   1d5ac:	d001      	beq.n	1d5b2 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1d5ae:	2300      	movs	r3, #0
   1d5b0:	e013      	b.n	1d5da <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1d5b2:	4b0f      	ldr	r3, [pc, #60]	; (1d5f0 <mmc_spi_op_cond+0xa0>)
   1d5b4:	4798      	blx	r3
   1d5b6:	0002      	movs	r2, r0
   1d5b8:	23c0      	movs	r3, #192	; 0xc0
   1d5ba:	05db      	lsls	r3, r3, #23
   1d5bc:	401a      	ands	r2, r3
   1d5be:	2380      	movs	r3, #128	; 0x80
   1d5c0:	05db      	lsls	r3, r3, #23
   1d5c2:	429a      	cmp	r2, r3
   1d5c4:	d108      	bne.n	1d5d8 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1d5c6:	4b0c      	ldr	r3, [pc, #48]	; (1d5f8 <mmc_spi_op_cond+0xa8>)
   1d5c8:	681a      	ldr	r2, [r3, #0]
   1d5ca:	4b0b      	ldr	r3, [pc, #44]	; (1d5f8 <mmc_spi_op_cond+0xa8>)
   1d5cc:	681b      	ldr	r3, [r3, #0]
   1d5ce:	7adb      	ldrb	r3, [r3, #11]
   1d5d0:	2108      	movs	r1, #8
   1d5d2:	430b      	orrs	r3, r1
   1d5d4:	b2db      	uxtb	r3, r3
   1d5d6:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1d5d8:	2301      	movs	r3, #1
}
   1d5da:	0018      	movs	r0, r3
   1d5dc:	46bd      	mov	sp, r7
   1d5de:	b002      	add	sp, #8
   1d5e0:	bd80      	pop	{r7, pc}
   1d5e2:	46c0      	nop			; (mov r8, r8)
   1d5e4:	00001bee 	.word	0x00001bee
   1d5e8:	00001101 	.word	0x00001101
   1d5ec:	0001efcd 	.word	0x0001efcd
   1d5f0:	0001f20d 	.word	0x0001f20d
   1d5f4:	0000053a 	.word	0x0000053a
   1d5f8:	20003d9c 	.word	0x20003d9c

0001d5fc <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1d5fc:	b580      	push	{r7, lr}
   1d5fe:	b086      	sub	sp, #24
   1d600:	af00      	add	r7, sp, #0
   1d602:	0002      	movs	r2, r0
   1d604:	1dfb      	adds	r3, r7, #7
   1d606:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1d608:	4b2e      	ldr	r3, [pc, #184]	; (1d6c4 <sd_spi_op_cond+0xc8>)
   1d60a:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1d60c:	4b2e      	ldr	r3, [pc, #184]	; (1d6c8 <sd_spi_op_cond+0xcc>)
   1d60e:	2100      	movs	r1, #0
   1d610:	0018      	movs	r0, r3
   1d612:	4b2e      	ldr	r3, [pc, #184]	; (1d6cc <sd_spi_op_cond+0xd0>)
   1d614:	4798      	blx	r3
   1d616:	0003      	movs	r3, r0
   1d618:	001a      	movs	r2, r3
   1d61a:	2301      	movs	r3, #1
   1d61c:	4053      	eors	r3, r2
   1d61e:	b2db      	uxtb	r3, r3
   1d620:	2b00      	cmp	r3, #0
   1d622:	d001      	beq.n	1d628 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1d624:	2300      	movs	r3, #0
   1d626:	e048      	b.n	1d6ba <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1d628:	2300      	movs	r3, #0
   1d62a:	617b      	str	r3, [r7, #20]
		if (v2) {
   1d62c:	1dfb      	adds	r3, r7, #7
   1d62e:	781b      	ldrb	r3, [r3, #0]
   1d630:	2b00      	cmp	r3, #0
   1d632:	d004      	beq.n	1d63e <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1d634:	697b      	ldr	r3, [r7, #20]
   1d636:	2280      	movs	r2, #128	; 0x80
   1d638:	05d2      	lsls	r2, r2, #23
   1d63a:	4313      	orrs	r3, r2
   1d63c:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1d63e:	697b      	ldr	r3, [r7, #20]
   1d640:	4a23      	ldr	r2, [pc, #140]	; (1d6d0 <sd_spi_op_cond+0xd4>)
   1d642:	0019      	movs	r1, r3
   1d644:	0010      	movs	r0, r2
   1d646:	4b21      	ldr	r3, [pc, #132]	; (1d6cc <sd_spi_op_cond+0xd0>)
   1d648:	4798      	blx	r3
   1d64a:	0003      	movs	r3, r0
   1d64c:	001a      	movs	r2, r3
   1d64e:	2301      	movs	r3, #1
   1d650:	4053      	eors	r3, r2
   1d652:	b2db      	uxtb	r3, r3
   1d654:	2b00      	cmp	r3, #0
   1d656:	d001      	beq.n	1d65c <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1d658:	2300      	movs	r3, #0
   1d65a:	e02e      	b.n	1d6ba <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1d65c:	4b1d      	ldr	r3, [pc, #116]	; (1d6d4 <sd_spi_op_cond+0xd8>)
   1d65e:	4798      	blx	r3
   1d660:	0003      	movs	r3, r0
   1d662:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1d664:	68fb      	ldr	r3, [r7, #12]
   1d666:	2201      	movs	r2, #1
   1d668:	4013      	ands	r3, r2
   1d66a:	d006      	beq.n	1d67a <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1d66c:	693b      	ldr	r3, [r7, #16]
   1d66e:	1e5a      	subs	r2, r3, #1
   1d670:	613a      	str	r2, [r7, #16]
   1d672:	2b00      	cmp	r3, #0
   1d674:	d1ca      	bne.n	1d60c <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1d676:	2300      	movs	r3, #0
   1d678:	e01f      	b.n	1d6ba <sd_spi_op_cond+0xbe>
			break;
   1d67a:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1d67c:	4b16      	ldr	r3, [pc, #88]	; (1d6d8 <sd_spi_op_cond+0xdc>)
   1d67e:	2100      	movs	r1, #0
   1d680:	0018      	movs	r0, r3
   1d682:	4b12      	ldr	r3, [pc, #72]	; (1d6cc <sd_spi_op_cond+0xd0>)
   1d684:	4798      	blx	r3
   1d686:	0003      	movs	r3, r0
   1d688:	001a      	movs	r2, r3
   1d68a:	2301      	movs	r3, #1
   1d68c:	4053      	eors	r3, r2
   1d68e:	b2db      	uxtb	r3, r3
   1d690:	2b00      	cmp	r3, #0
   1d692:	d001      	beq.n	1d698 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1d694:	2300      	movs	r3, #0
   1d696:	e010      	b.n	1d6ba <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1d698:	4b0e      	ldr	r3, [pc, #56]	; (1d6d4 <sd_spi_op_cond+0xd8>)
   1d69a:	4798      	blx	r3
   1d69c:	0002      	movs	r2, r0
   1d69e:	2380      	movs	r3, #128	; 0x80
   1d6a0:	05db      	lsls	r3, r3, #23
   1d6a2:	4013      	ands	r3, r2
   1d6a4:	d008      	beq.n	1d6b8 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1d6a6:	4b0d      	ldr	r3, [pc, #52]	; (1d6dc <sd_spi_op_cond+0xe0>)
   1d6a8:	681a      	ldr	r2, [r3, #0]
   1d6aa:	4b0c      	ldr	r3, [pc, #48]	; (1d6dc <sd_spi_op_cond+0xe0>)
   1d6ac:	681b      	ldr	r3, [r3, #0]
   1d6ae:	7adb      	ldrb	r3, [r3, #11]
   1d6b0:	2108      	movs	r1, #8
   1d6b2:	430b      	orrs	r3, r1
   1d6b4:	b2db      	uxtb	r3, r3
   1d6b6:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1d6b8:	2301      	movs	r3, #1
}
   1d6ba:	0018      	movs	r0, r3
   1d6bc:	46bd      	mov	sp, r7
   1d6be:	b006      	add	sp, #24
   1d6c0:	bd80      	pop	{r7, pc}
   1d6c2:	46c0      	nop			; (mov r8, r8)
   1d6c4:	00001bee 	.word	0x00001bee
   1d6c8:	00001137 	.word	0x00001137
   1d6cc:	0001efcd 	.word	0x0001efcd
   1d6d0:	00001129 	.word	0x00001129
   1d6d4:	0001f20d 	.word	0x0001f20d
   1d6d8:	0000053a 	.word	0x0000053a
   1d6dc:	20003d9c 	.word	0x20003d9c

0001d6e0 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1d6e0:	b580      	push	{r7, lr}
   1d6e2:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1d6e4:	2301      	movs	r3, #1
}
   1d6e6:	0018      	movs	r0, r3
   1d6e8:	46bd      	mov	sp, r7
   1d6ea:	bd80      	pop	{r7, pc}

0001d6ec <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1d6ec:	b580      	push	{r7, lr}
   1d6ee:	b084      	sub	sp, #16
   1d6f0:	af00      	add	r7, sp, #0
   1d6f2:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1d6f4:	687b      	ldr	r3, [r7, #4]
   1d6f6:	2200      	movs	r2, #0
   1d6f8:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1d6fa:	23d5      	movs	r3, #213	; 0xd5
   1d6fc:	005b      	lsls	r3, r3, #1
   1d6fe:	4a14      	ldr	r2, [pc, #80]	; (1d750 <sd_cmd8+0x64>)
   1d700:	0019      	movs	r1, r3
   1d702:	0010      	movs	r0, r2
   1d704:	4b13      	ldr	r3, [pc, #76]	; (1d754 <sd_cmd8+0x68>)
   1d706:	4798      	blx	r3
   1d708:	0003      	movs	r3, r0
   1d70a:	001a      	movs	r2, r3
   1d70c:	2301      	movs	r3, #1
   1d70e:	4053      	eors	r3, r2
   1d710:	b2db      	uxtb	r3, r3
   1d712:	2b00      	cmp	r3, #0
   1d714:	d001      	beq.n	1d71a <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1d716:	2301      	movs	r3, #1
   1d718:	e015      	b.n	1d746 <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1d71a:	4b0f      	ldr	r3, [pc, #60]	; (1d758 <sd_cmd8+0x6c>)
   1d71c:	4798      	blx	r3
   1d71e:	0003      	movs	r3, r0
   1d720:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1d722:	68fb      	ldr	r3, [r7, #12]
   1d724:	3301      	adds	r3, #1
   1d726:	d101      	bne.n	1d72c <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1d728:	2301      	movs	r3, #1
   1d72a:	e00c      	b.n	1d746 <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1d72c:	68fb      	ldr	r3, [r7, #12]
   1d72e:	051b      	lsls	r3, r3, #20
   1d730:	0d1a      	lsrs	r2, r3, #20
   1d732:	23d5      	movs	r3, #213	; 0xd5
   1d734:	005b      	lsls	r3, r3, #1
   1d736:	429a      	cmp	r2, r3
   1d738:	d001      	beq.n	1d73e <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1d73a:	2300      	movs	r3, #0
   1d73c:	e003      	b.n	1d746 <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1d73e:	687b      	ldr	r3, [r7, #4]
   1d740:	2201      	movs	r2, #1
   1d742:	701a      	strb	r2, [r3, #0]
	return true;
   1d744:	2301      	movs	r3, #1
}
   1d746:	0018      	movs	r0, r3
   1d748:	46bd      	mov	sp, r7
   1d74a:	b004      	add	sp, #16
   1d74c:	bd80      	pop	{r7, pc}
   1d74e:	46c0      	nop			; (mov r8, r8)
   1d750:	00005508 	.word	0x00005508
   1d754:	0001efcd 	.word	0x0001efcd
   1d758:	0001f20d 	.word	0x0001f20d

0001d75c <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1d75c:	b590      	push	{r4, r7, lr}
   1d75e:	b089      	sub	sp, #36	; 0x24
   1d760:	af02      	add	r7, sp, #8
   1d762:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1d764:	2380      	movs	r3, #128	; 0x80
   1d766:	009a      	lsls	r2, r3, #2
   1d768:	4841      	ldr	r0, [pc, #260]	; (1d870 <mmc_cmd8+0x114>)
   1d76a:	2300      	movs	r3, #0
   1d76c:	9300      	str	r3, [sp, #0]
   1d76e:	2301      	movs	r3, #1
   1d770:	2100      	movs	r1, #0
   1d772:	4c40      	ldr	r4, [pc, #256]	; (1d874 <mmc_cmd8+0x118>)
   1d774:	47a0      	blx	r4
   1d776:	0003      	movs	r3, r0
   1d778:	001a      	movs	r2, r3
   1d77a:	2301      	movs	r3, #1
   1d77c:	4053      	eors	r3, r2
   1d77e:	b2db      	uxtb	r3, r3
   1d780:	2b00      	cmp	r3, #0
   1d782:	d001      	beq.n	1d788 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1d784:	2300      	movs	r3, #0
   1d786:	e06e      	b.n	1d866 <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1d788:	2316      	movs	r3, #22
   1d78a:	18fb      	adds	r3, r7, r3
   1d78c:	2200      	movs	r2, #0
   1d78e:	801a      	strh	r2, [r3, #0]
   1d790:	e014      	b.n	1d7bc <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1d792:	2310      	movs	r3, #16
   1d794:	18fb      	adds	r3, r7, r3
   1d796:	0018      	movs	r0, r3
   1d798:	4b37      	ldr	r3, [pc, #220]	; (1d878 <mmc_cmd8+0x11c>)
   1d79a:	4798      	blx	r3
   1d79c:	0003      	movs	r3, r0
   1d79e:	001a      	movs	r2, r3
   1d7a0:	2301      	movs	r3, #1
   1d7a2:	4053      	eors	r3, r2
   1d7a4:	b2db      	uxtb	r3, r3
   1d7a6:	2b00      	cmp	r3, #0
   1d7a8:	d001      	beq.n	1d7ae <mmc_cmd8+0x52>
			return false;
   1d7aa:	2300      	movs	r3, #0
   1d7ac:	e05b      	b.n	1d866 <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1d7ae:	2316      	movs	r3, #22
   1d7b0:	18fb      	adds	r3, r7, r3
   1d7b2:	881a      	ldrh	r2, [r3, #0]
   1d7b4:	2316      	movs	r3, #22
   1d7b6:	18fb      	adds	r3, r7, r3
   1d7b8:	3201      	adds	r2, #1
   1d7ba:	801a      	strh	r2, [r3, #0]
   1d7bc:	2316      	movs	r3, #22
   1d7be:	18fb      	adds	r3, r7, r3
   1d7c0:	881b      	ldrh	r3, [r3, #0]
   1d7c2:	2b31      	cmp	r3, #49	; 0x31
   1d7c4:	d9e5      	bls.n	1d792 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1d7c6:	693b      	ldr	r3, [r7, #16]
   1d7c8:	b2db      	uxtb	r3, r3
   1d7ca:	2202      	movs	r2, #2
   1d7cc:	4013      	ands	r3, r2
   1d7ce:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1d7d0:	687b      	ldr	r3, [r7, #4]
   1d7d2:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1d7d4:	4b29      	ldr	r3, [pc, #164]	; (1d87c <mmc_cmd8+0x120>)
   1d7d6:	681b      	ldr	r3, [r3, #0]
   1d7d8:	330e      	adds	r3, #14
   1d7da:	0018      	movs	r0, r3
   1d7dc:	230c      	movs	r3, #12
   1d7de:	223e      	movs	r2, #62	; 0x3e
   1d7e0:	2180      	movs	r1, #128	; 0x80
   1d7e2:	4c27      	ldr	r4, [pc, #156]	; (1d880 <mmc_cmd8+0x124>)
   1d7e4:	47a0      	blx	r4
   1d7e6:	0002      	movs	r2, r0
   1d7e8:	4b26      	ldr	r3, [pc, #152]	; (1d884 <mmc_cmd8+0x128>)
   1d7ea:	429a      	cmp	r2, r3
   1d7ec:	d135      	bne.n	1d85a <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1d7ee:	e014      	b.n	1d81a <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1d7f0:	230c      	movs	r3, #12
   1d7f2:	18fb      	adds	r3, r7, r3
   1d7f4:	0018      	movs	r0, r3
   1d7f6:	4b20      	ldr	r3, [pc, #128]	; (1d878 <mmc_cmd8+0x11c>)
   1d7f8:	4798      	blx	r3
   1d7fa:	0003      	movs	r3, r0
   1d7fc:	001a      	movs	r2, r3
   1d7fe:	2301      	movs	r3, #1
   1d800:	4053      	eors	r3, r2
   1d802:	b2db      	uxtb	r3, r3
   1d804:	2b00      	cmp	r3, #0
   1d806:	d001      	beq.n	1d80c <mmc_cmd8+0xb0>
				return false;
   1d808:	2300      	movs	r3, #0
   1d80a:	e02c      	b.n	1d866 <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1d80c:	2316      	movs	r3, #22
   1d80e:	18fb      	adds	r3, r7, r3
   1d810:	881a      	ldrh	r2, [r3, #0]
   1d812:	2316      	movs	r3, #22
   1d814:	18fb      	adds	r3, r7, r3
   1d816:	3201      	adds	r2, #1
   1d818:	801a      	strh	r2, [r3, #0]
   1d81a:	2316      	movs	r3, #22
   1d81c:	18fb      	adds	r3, r7, r3
   1d81e:	881b      	ldrh	r3, [r3, #0]
   1d820:	2b35      	cmp	r3, #53	; 0x35
   1d822:	d9e5      	bls.n	1d7f0 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1d824:	4b15      	ldr	r3, [pc, #84]	; (1d87c <mmc_cmd8+0x120>)
   1d826:	681b      	ldr	r3, [r3, #0]
   1d828:	68fa      	ldr	r2, [r7, #12]
   1d82a:	0852      	lsrs	r2, r2, #1
   1d82c:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1d82e:	e014      	b.n	1d85a <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1d830:	230c      	movs	r3, #12
   1d832:	18fb      	adds	r3, r7, r3
   1d834:	0018      	movs	r0, r3
   1d836:	4b10      	ldr	r3, [pc, #64]	; (1d878 <mmc_cmd8+0x11c>)
   1d838:	4798      	blx	r3
   1d83a:	0003      	movs	r3, r0
   1d83c:	001a      	movs	r2, r3
   1d83e:	2301      	movs	r3, #1
   1d840:	4053      	eors	r3, r2
   1d842:	b2db      	uxtb	r3, r3
   1d844:	2b00      	cmp	r3, #0
   1d846:	d001      	beq.n	1d84c <mmc_cmd8+0xf0>
			return false;
   1d848:	2300      	movs	r3, #0
   1d84a:	e00c      	b.n	1d866 <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1d84c:	2316      	movs	r3, #22
   1d84e:	18fb      	adds	r3, r7, r3
   1d850:	881a      	ldrh	r2, [r3, #0]
   1d852:	2316      	movs	r3, #22
   1d854:	18fb      	adds	r3, r7, r3
   1d856:	3201      	adds	r2, #1
   1d858:	801a      	strh	r2, [r3, #0]
   1d85a:	2316      	movs	r3, #22
   1d85c:	18fb      	adds	r3, r7, r3
   1d85e:	881b      	ldrh	r3, [r3, #0]
   1d860:	2b7f      	cmp	r3, #127	; 0x7f
   1d862:	d9e5      	bls.n	1d830 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1d864:	2301      	movs	r3, #1
}
   1d866:	0018      	movs	r0, r3
   1d868:	46bd      	mov	sp, r7
   1d86a:	b007      	add	sp, #28
   1d86c:	bd90      	pop	{r4, r7, pc}
   1d86e:	46c0      	nop			; (mov r8, r8)
   1d870:	00081108 	.word	0x00081108
   1d874:	0001eff5 	.word	0x0001eff5
   1d878:	0001f221 	.word	0x0001f221
   1d87c:	20003d9c 	.word	0x20003d9c
   1d880:	0001d3f5 	.word	0x0001d3f5
   1d884:	00000fff 	.word	0x00000fff

0001d888 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1d888:	b590      	push	{r4, r7, lr}
   1d88a:	b083      	sub	sp, #12
   1d88c:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1d88e:	4b15      	ldr	r3, [pc, #84]	; (1d8e4 <sd_mmc_cmd9_spi+0x5c>)
   1d890:	681b      	ldr	r3, [r3, #0]
   1d892:	891b      	ldrh	r3, [r3, #8]
   1d894:	0419      	lsls	r1, r3, #16
   1d896:	4814      	ldr	r0, [pc, #80]	; (1d8e8 <sd_mmc_cmd9_spi+0x60>)
   1d898:	2301      	movs	r3, #1
   1d89a:	9300      	str	r3, [sp, #0]
   1d89c:	2301      	movs	r3, #1
   1d89e:	2210      	movs	r2, #16
   1d8a0:	4c12      	ldr	r4, [pc, #72]	; (1d8ec <sd_mmc_cmd9_spi+0x64>)
   1d8a2:	47a0      	blx	r4
   1d8a4:	0003      	movs	r3, r0
   1d8a6:	001a      	movs	r2, r3
   1d8a8:	2301      	movs	r3, #1
   1d8aa:	4053      	eors	r3, r2
   1d8ac:	b2db      	uxtb	r3, r3
   1d8ae:	2b00      	cmp	r3, #0
   1d8b0:	d001      	beq.n	1d8b6 <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1d8b2:	2300      	movs	r3, #0
   1d8b4:	e012      	b.n	1d8dc <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1d8b6:	4b0b      	ldr	r3, [pc, #44]	; (1d8e4 <sd_mmc_cmd9_spi+0x5c>)
   1d8b8:	681b      	ldr	r3, [r3, #0]
   1d8ba:	330e      	adds	r3, #14
   1d8bc:	2101      	movs	r1, #1
   1d8be:	0018      	movs	r0, r3
   1d8c0:	4b0b      	ldr	r3, [pc, #44]	; (1d8f0 <sd_mmc_cmd9_spi+0x68>)
   1d8c2:	4798      	blx	r3
   1d8c4:	0003      	movs	r3, r0
   1d8c6:	001a      	movs	r2, r3
   1d8c8:	2301      	movs	r3, #1
   1d8ca:	4053      	eors	r3, r2
   1d8cc:	b2db      	uxtb	r3, r3
   1d8ce:	2b00      	cmp	r3, #0
   1d8d0:	d001      	beq.n	1d8d6 <sd_mmc_cmd9_spi+0x4e>
		return false;
   1d8d2:	2300      	movs	r3, #0
   1d8d4:	e002      	b.n	1d8dc <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1d8d6:	4b07      	ldr	r3, [pc, #28]	; (1d8f4 <sd_mmc_cmd9_spi+0x6c>)
   1d8d8:	4798      	blx	r3
   1d8da:	0003      	movs	r3, r0
}
   1d8dc:	0018      	movs	r0, r3
   1d8de:	46bd      	mov	sp, r7
   1d8e0:	b001      	add	sp, #4
   1d8e2:	bd90      	pop	{r4, r7, pc}
   1d8e4:	20003d9c 	.word	0x20003d9c
   1d8e8:	00081109 	.word	0x00081109
   1d8ec:	0001eff5 	.word	0x0001eff5
   1d8f0:	0001f2c5 	.word	0x0001f2c5
   1d8f4:	0001f369 	.word	0x0001f369

0001d8f8 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1d8f8:	b5b0      	push	{r4, r5, r7, lr}
   1d8fa:	b084      	sub	sp, #16
   1d8fc:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1d8fe:	4b45      	ldr	r3, [pc, #276]	; (1da14 <mmc_decode_csd+0x11c>)
   1d900:	681b      	ldr	r3, [r3, #0]
   1d902:	330e      	adds	r3, #14
   1d904:	0018      	movs	r0, r3
   1d906:	2304      	movs	r3, #4
   1d908:	227a      	movs	r2, #122	; 0x7a
   1d90a:	2180      	movs	r1, #128	; 0x80
   1d90c:	4c42      	ldr	r4, [pc, #264]	; (1da18 <mmc_decode_csd+0x120>)
   1d90e:	47a0      	blx	r4
   1d910:	0003      	movs	r3, r0
   1d912:	2b02      	cmp	r3, #2
   1d914:	d011      	beq.n	1d93a <mmc_decode_csd+0x42>
   1d916:	d802      	bhi.n	1d91e <mmc_decode_csd+0x26>
   1d918:	2b01      	cmp	r3, #1
   1d91a:	d009      	beq.n	1d930 <mmc_decode_csd+0x38>
   1d91c:	e003      	b.n	1d926 <mmc_decode_csd+0x2e>
   1d91e:	2b03      	cmp	r3, #3
   1d920:	d010      	beq.n	1d944 <mmc_decode_csd+0x4c>
   1d922:	2b04      	cmp	r3, #4
   1d924:	d013      	beq.n	1d94e <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1d926:	4b3b      	ldr	r3, [pc, #236]	; (1da14 <mmc_decode_csd+0x11c>)
   1d928:	681b      	ldr	r3, [r3, #0]
   1d92a:	2212      	movs	r2, #18
   1d92c:	731a      	strb	r2, [r3, #12]
		break;
   1d92e:	e013      	b.n	1d958 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1d930:	4b38      	ldr	r3, [pc, #224]	; (1da14 <mmc_decode_csd+0x11c>)
   1d932:	681b      	ldr	r3, [r3, #0]
   1d934:	2214      	movs	r2, #20
   1d936:	731a      	strb	r2, [r3, #12]
		break;
   1d938:	e00e      	b.n	1d958 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1d93a:	4b36      	ldr	r3, [pc, #216]	; (1da14 <mmc_decode_csd+0x11c>)
   1d93c:	681b      	ldr	r3, [r3, #0]
   1d93e:	2222      	movs	r2, #34	; 0x22
   1d940:	731a      	strb	r2, [r3, #12]
		break;
   1d942:	e009      	b.n	1d958 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1d944:	4b33      	ldr	r3, [pc, #204]	; (1da14 <mmc_decode_csd+0x11c>)
   1d946:	681b      	ldr	r3, [r3, #0]
   1d948:	2230      	movs	r2, #48	; 0x30
   1d94a:	731a      	strb	r2, [r3, #12]
		break;
   1d94c:	e004      	b.n	1d958 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1d94e:	4b31      	ldr	r3, [pc, #196]	; (1da14 <mmc_decode_csd+0x11c>)
   1d950:	681b      	ldr	r3, [r3, #0]
   1d952:	2240      	movs	r2, #64	; 0x40
   1d954:	731a      	strb	r2, [r3, #12]
		break;
   1d956:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1d958:	4b2e      	ldr	r3, [pc, #184]	; (1da14 <mmc_decode_csd+0x11c>)
   1d95a:	681b      	ldr	r3, [r3, #0]
   1d95c:	330e      	adds	r3, #14
   1d95e:	0018      	movs	r0, r3
   1d960:	2308      	movs	r3, #8
   1d962:	2260      	movs	r2, #96	; 0x60
   1d964:	2180      	movs	r1, #128	; 0x80
   1d966:	4c2c      	ldr	r4, [pc, #176]	; (1da18 <mmc_decode_csd+0x120>)
   1d968:	47a0      	blx	r4
   1d96a:	0003      	movs	r3, r0
   1d96c:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1d96e:	68fb      	ldr	r3, [r7, #12]
   1d970:	2207      	movs	r2, #7
   1d972:	401a      	ands	r2, r3
   1d974:	4b29      	ldr	r3, [pc, #164]	; (1da1c <mmc_decode_csd+0x124>)
   1d976:	0092      	lsls	r2, r2, #2
   1d978:	58d3      	ldr	r3, [r2, r3]
   1d97a:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1d97c:	68fb      	ldr	r3, [r7, #12]
   1d97e:	08db      	lsrs	r3, r3, #3
   1d980:	220f      	movs	r2, #15
   1d982:	401a      	ands	r2, r3
   1d984:	4b26      	ldr	r3, [pc, #152]	; (1da20 <mmc_decode_csd+0x128>)
   1d986:	0092      	lsls	r2, r2, #2
   1d988:	58d3      	ldr	r3, [r2, r3]
   1d98a:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1d98c:	4b21      	ldr	r3, [pc, #132]	; (1da14 <mmc_decode_csd+0x11c>)
   1d98e:	681b      	ldr	r3, [r3, #0]
   1d990:	68ba      	ldr	r2, [r7, #8]
   1d992:	6879      	ldr	r1, [r7, #4]
   1d994:	434a      	muls	r2, r1
   1d996:	21fa      	movs	r1, #250	; 0xfa
   1d998:	0089      	lsls	r1, r1, #2
   1d99a:	434a      	muls	r2, r1
   1d99c:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1d99e:	4b1d      	ldr	r3, [pc, #116]	; (1da14 <mmc_decode_csd+0x11c>)
   1d9a0:	681b      	ldr	r3, [r3, #0]
   1d9a2:	330e      	adds	r3, #14
   1d9a4:	0018      	movs	r0, r3
   1d9a6:	230c      	movs	r3, #12
   1d9a8:	223e      	movs	r2, #62	; 0x3e
   1d9aa:	2180      	movs	r1, #128	; 0x80
   1d9ac:	4c1a      	ldr	r4, [pc, #104]	; (1da18 <mmc_decode_csd+0x120>)
   1d9ae:	47a0      	blx	r4
   1d9b0:	0002      	movs	r2, r0
   1d9b2:	4b1c      	ldr	r3, [pc, #112]	; (1da24 <mmc_decode_csd+0x12c>)
   1d9b4:	429a      	cmp	r2, r3
   1d9b6:	d028      	beq.n	1da0a <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1d9b8:	4b16      	ldr	r3, [pc, #88]	; (1da14 <mmc_decode_csd+0x11c>)
   1d9ba:	681b      	ldr	r3, [r3, #0]
   1d9bc:	330e      	adds	r3, #14
   1d9be:	0018      	movs	r0, r3
   1d9c0:	230c      	movs	r3, #12
   1d9c2:	223e      	movs	r2, #62	; 0x3e
   1d9c4:	2180      	movs	r1, #128	; 0x80
   1d9c6:	4c14      	ldr	r4, [pc, #80]	; (1da18 <mmc_decode_csd+0x120>)
   1d9c8:	47a0      	blx	r4
   1d9ca:	0003      	movs	r3, r0
   1d9cc:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1d9ce:	4b11      	ldr	r3, [pc, #68]	; (1da14 <mmc_decode_csd+0x11c>)
   1d9d0:	681b      	ldr	r3, [r3, #0]
   1d9d2:	330e      	adds	r3, #14
   1d9d4:	0018      	movs	r0, r3
   1d9d6:	2303      	movs	r3, #3
   1d9d8:	222f      	movs	r2, #47	; 0x2f
   1d9da:	2180      	movs	r1, #128	; 0x80
   1d9dc:	4d0e      	ldr	r5, [pc, #56]	; (1da18 <mmc_decode_csd+0x120>)
   1d9de:	47a8      	blx	r5
   1d9e0:	0003      	movs	r3, r0
   1d9e2:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1d9e4:	409c      	lsls	r4, r3
   1d9e6:	0023      	movs	r3, r4
   1d9e8:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1d9ea:	4b0a      	ldr	r3, [pc, #40]	; (1da14 <mmc_decode_csd+0x11c>)
   1d9ec:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1d9ee:	4b09      	ldr	r3, [pc, #36]	; (1da14 <mmc_decode_csd+0x11c>)
   1d9f0:	681b      	ldr	r3, [r3, #0]
   1d9f2:	330e      	adds	r3, #14
   1d9f4:	0018      	movs	r0, r3
   1d9f6:	2304      	movs	r3, #4
   1d9f8:	2250      	movs	r2, #80	; 0x50
   1d9fa:	2180      	movs	r1, #128	; 0x80
   1d9fc:	4d06      	ldr	r5, [pc, #24]	; (1da18 <mmc_decode_csd+0x120>)
   1d9fe:	47a8      	blx	r5
   1da00:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1da02:	683b      	ldr	r3, [r7, #0]
   1da04:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1da06:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1da08:	6063      	str	r3, [r4, #4]
	}
}
   1da0a:	46c0      	nop			; (mov r8, r8)
   1da0c:	46bd      	mov	sp, r7
   1da0e:	b004      	add	sp, #16
   1da10:	bdb0      	pop	{r4, r5, r7, pc}
   1da12:	46c0      	nop			; (mov r8, r8)
   1da14:	20003d9c 	.word	0x20003d9c
   1da18:	0001d3f5 	.word	0x0001d3f5
   1da1c:	000370d4 	.word	0x000370d4
   1da20:	00037130 	.word	0x00037130
   1da24:	00000fff 	.word	0x00000fff

0001da28 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1da28:	b5b0      	push	{r4, r5, r7, lr}
   1da2a:	b084      	sub	sp, #16
   1da2c:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1da2e:	4b35      	ldr	r3, [pc, #212]	; (1db04 <sd_decode_csd+0xdc>)
   1da30:	681b      	ldr	r3, [r3, #0]
   1da32:	330e      	adds	r3, #14
   1da34:	0018      	movs	r0, r3
   1da36:	2308      	movs	r3, #8
   1da38:	2260      	movs	r2, #96	; 0x60
   1da3a:	2180      	movs	r1, #128	; 0x80
   1da3c:	4c32      	ldr	r4, [pc, #200]	; (1db08 <sd_decode_csd+0xe0>)
   1da3e:	47a0      	blx	r4
   1da40:	0003      	movs	r3, r0
   1da42:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1da44:	68fb      	ldr	r3, [r7, #12]
   1da46:	2207      	movs	r2, #7
   1da48:	401a      	ands	r2, r3
   1da4a:	4b30      	ldr	r3, [pc, #192]	; (1db0c <sd_decode_csd+0xe4>)
   1da4c:	0092      	lsls	r2, r2, #2
   1da4e:	58d3      	ldr	r3, [r2, r3]
   1da50:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1da52:	68fb      	ldr	r3, [r7, #12]
   1da54:	08db      	lsrs	r3, r3, #3
   1da56:	220f      	movs	r2, #15
   1da58:	401a      	ands	r2, r3
   1da5a:	4b2d      	ldr	r3, [pc, #180]	; (1db10 <sd_decode_csd+0xe8>)
   1da5c:	0092      	lsls	r2, r2, #2
   1da5e:	58d3      	ldr	r3, [r2, r3]
   1da60:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1da62:	4b28      	ldr	r3, [pc, #160]	; (1db04 <sd_decode_csd+0xdc>)
   1da64:	681b      	ldr	r3, [r3, #0]
   1da66:	68ba      	ldr	r2, [r7, #8]
   1da68:	6879      	ldr	r1, [r7, #4]
   1da6a:	434a      	muls	r2, r1
   1da6c:	21fa      	movs	r1, #250	; 0xfa
   1da6e:	0089      	lsls	r1, r1, #2
   1da70:	434a      	muls	r2, r1
   1da72:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1da74:	4b23      	ldr	r3, [pc, #140]	; (1db04 <sd_decode_csd+0xdc>)
   1da76:	681b      	ldr	r3, [r3, #0]
   1da78:	330e      	adds	r3, #14
   1da7a:	0018      	movs	r0, r3
   1da7c:	2302      	movs	r3, #2
   1da7e:	227e      	movs	r2, #126	; 0x7e
   1da80:	2180      	movs	r1, #128	; 0x80
   1da82:	4c21      	ldr	r4, [pc, #132]	; (1db08 <sd_decode_csd+0xe0>)
   1da84:	47a0      	blx	r4
   1da86:	1e03      	subs	r3, r0, #0
   1da88:	d00f      	beq.n	1daaa <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1da8a:	4b1e      	ldr	r3, [pc, #120]	; (1db04 <sd_decode_csd+0xdc>)
   1da8c:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1da8e:	4b1d      	ldr	r3, [pc, #116]	; (1db04 <sd_decode_csd+0xdc>)
   1da90:	681b      	ldr	r3, [r3, #0]
   1da92:	330e      	adds	r3, #14
   1da94:	0018      	movs	r0, r3
   1da96:	2316      	movs	r3, #22
   1da98:	2230      	movs	r2, #48	; 0x30
   1da9a:	2180      	movs	r1, #128	; 0x80
   1da9c:	4d1a      	ldr	r5, [pc, #104]	; (1db08 <sd_decode_csd+0xe0>)
   1da9e:	47a8      	blx	r5
   1daa0:	0003      	movs	r3, r0
				* 512;
   1daa2:	3301      	adds	r3, #1
   1daa4:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1daa6:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1daa8:	e028      	b.n	1dafc <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1daaa:	4b16      	ldr	r3, [pc, #88]	; (1db04 <sd_decode_csd+0xdc>)
   1daac:	681b      	ldr	r3, [r3, #0]
   1daae:	330e      	adds	r3, #14
   1dab0:	0018      	movs	r0, r3
   1dab2:	230c      	movs	r3, #12
   1dab4:	223e      	movs	r2, #62	; 0x3e
   1dab6:	2180      	movs	r1, #128	; 0x80
   1dab8:	4c13      	ldr	r4, [pc, #76]	; (1db08 <sd_decode_csd+0xe0>)
   1daba:	47a0      	blx	r4
   1dabc:	0003      	movs	r3, r0
   1dabe:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1dac0:	4b10      	ldr	r3, [pc, #64]	; (1db04 <sd_decode_csd+0xdc>)
   1dac2:	681b      	ldr	r3, [r3, #0]
   1dac4:	330e      	adds	r3, #14
   1dac6:	0018      	movs	r0, r3
   1dac8:	2303      	movs	r3, #3
   1daca:	222f      	movs	r2, #47	; 0x2f
   1dacc:	2180      	movs	r1, #128	; 0x80
   1dace:	4d0e      	ldr	r5, [pc, #56]	; (1db08 <sd_decode_csd+0xe0>)
   1dad0:	47a8      	blx	r5
   1dad2:	0003      	movs	r3, r0
   1dad4:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1dad6:	409c      	lsls	r4, r3
   1dad8:	0023      	movs	r3, r4
   1dada:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1dadc:	4b09      	ldr	r3, [pc, #36]	; (1db04 <sd_decode_csd+0xdc>)
   1dade:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1dae0:	4b08      	ldr	r3, [pc, #32]	; (1db04 <sd_decode_csd+0xdc>)
   1dae2:	681b      	ldr	r3, [r3, #0]
   1dae4:	330e      	adds	r3, #14
   1dae6:	0018      	movs	r0, r3
   1dae8:	2304      	movs	r3, #4
   1daea:	2250      	movs	r2, #80	; 0x50
   1daec:	2180      	movs	r1, #128	; 0x80
   1daee:	4d06      	ldr	r5, [pc, #24]	; (1db08 <sd_decode_csd+0xe0>)
   1daf0:	47a8      	blx	r5
   1daf2:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1daf4:	683b      	ldr	r3, [r7, #0]
   1daf6:	4093      	lsls	r3, r2
				/ 1024;
   1daf8:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1dafa:	6063      	str	r3, [r4, #4]
}
   1dafc:	46c0      	nop			; (mov r8, r8)
   1dafe:	46bd      	mov	sp, r7
   1db00:	b004      	add	sp, #16
   1db02:	bdb0      	pop	{r4, r5, r7, pc}
   1db04:	20003d9c 	.word	0x20003d9c
   1db08:	0001d3f5 	.word	0x0001d3f5
   1db0c:	000370d4 	.word	0x000370d4
   1db10:	000370f0 	.word	0x000370f0

0001db14 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1db14:	b580      	push	{r7, lr}
   1db16:	b082      	sub	sp, #8
   1db18:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1db1a:	4b11      	ldr	r3, [pc, #68]	; (1db60 <sd_mmc_cmd13+0x4c>)
   1db1c:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1db1e:	4b11      	ldr	r3, [pc, #68]	; (1db64 <sd_mmc_cmd13+0x50>)
   1db20:	2100      	movs	r1, #0
   1db22:	0018      	movs	r0, r3
   1db24:	4b10      	ldr	r3, [pc, #64]	; (1db68 <sd_mmc_cmd13+0x54>)
   1db26:	4798      	blx	r3
   1db28:	0003      	movs	r3, r0
   1db2a:	001a      	movs	r2, r3
   1db2c:	2301      	movs	r3, #1
   1db2e:	4053      	eors	r3, r2
   1db30:	b2db      	uxtb	r3, r3
   1db32:	2b00      	cmp	r3, #0
   1db34:	d001      	beq.n	1db3a <sd_mmc_cmd13+0x26>
				return false;
   1db36:	2300      	movs	r3, #0
   1db38:	e00e      	b.n	1db58 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1db3a:	4b0c      	ldr	r3, [pc, #48]	; (1db6c <sd_mmc_cmd13+0x58>)
   1db3c:	4798      	blx	r3
   1db3e:	0002      	movs	r2, r0
   1db40:	23ff      	movs	r3, #255	; 0xff
   1db42:	4013      	ands	r3, r2
   1db44:	d006      	beq.n	1db54 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1db46:	687b      	ldr	r3, [r7, #4]
   1db48:	1e5a      	subs	r2, r3, #1
   1db4a:	607a      	str	r2, [r7, #4]
   1db4c:	2b00      	cmp	r3, #0
   1db4e:	d1e6      	bne.n	1db1e <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1db50:	2300      	movs	r3, #0
   1db52:	e001      	b.n	1db58 <sd_mmc_cmd13+0x44>
				break;
   1db54:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1db56:	2301      	movs	r3, #1
}
   1db58:	0018      	movs	r0, r3
   1db5a:	46bd      	mov	sp, r7
   1db5c:	b002      	add	sp, #8
   1db5e:	bd80      	pop	{r7, pc}
   1db60:	00030d40 	.word	0x00030d40
   1db64:	00001b0d 	.word	0x00001b0d
   1db68:	0001efcd 	.word	0x0001efcd
   1db6c:	0001f20d 	.word	0x0001f20d

0001db70 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1db70:	b590      	push	{r4, r7, lr}
   1db72:	b085      	sub	sp, #20
   1db74:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1db76:	4b38      	ldr	r3, [pc, #224]	; (1dc58 <sd_acmd51+0xe8>)
   1db78:	681b      	ldr	r3, [r3, #0]
   1db7a:	891b      	ldrh	r3, [r3, #8]
   1db7c:	041b      	lsls	r3, r3, #16
   1db7e:	4a37      	ldr	r2, [pc, #220]	; (1dc5c <sd_acmd51+0xec>)
   1db80:	0019      	movs	r1, r3
   1db82:	0010      	movs	r0, r2
   1db84:	4b36      	ldr	r3, [pc, #216]	; (1dc60 <sd_acmd51+0xf0>)
   1db86:	4798      	blx	r3
   1db88:	0003      	movs	r3, r0
   1db8a:	001a      	movs	r2, r3
   1db8c:	2301      	movs	r3, #1
   1db8e:	4053      	eors	r3, r2
   1db90:	b2db      	uxtb	r3, r3
   1db92:	2b00      	cmp	r3, #0
   1db94:	d001      	beq.n	1db9a <sd_acmd51+0x2a>
		return false;
   1db96:	2300      	movs	r3, #0
   1db98:	e059      	b.n	1dc4e <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1db9a:	4832      	ldr	r0, [pc, #200]	; (1dc64 <sd_acmd51+0xf4>)
   1db9c:	2301      	movs	r3, #1
   1db9e:	9300      	str	r3, [sp, #0]
   1dba0:	2301      	movs	r3, #1
   1dba2:	2208      	movs	r2, #8
   1dba4:	2100      	movs	r1, #0
   1dba6:	4c30      	ldr	r4, [pc, #192]	; (1dc68 <sd_acmd51+0xf8>)
   1dba8:	47a0      	blx	r4
   1dbaa:	0003      	movs	r3, r0
   1dbac:	001a      	movs	r2, r3
   1dbae:	2301      	movs	r3, #1
   1dbb0:	4053      	eors	r3, r2
   1dbb2:	b2db      	uxtb	r3, r3
   1dbb4:	2b00      	cmp	r3, #0
   1dbb6:	d001      	beq.n	1dbbc <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1dbb8:	2300      	movs	r3, #0
   1dbba:	e048      	b.n	1dc4e <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1dbbc:	003b      	movs	r3, r7
   1dbbe:	2101      	movs	r1, #1
   1dbc0:	0018      	movs	r0, r3
   1dbc2:	4b2a      	ldr	r3, [pc, #168]	; (1dc6c <sd_acmd51+0xfc>)
   1dbc4:	4798      	blx	r3
   1dbc6:	0003      	movs	r3, r0
   1dbc8:	001a      	movs	r2, r3
   1dbca:	2301      	movs	r3, #1
   1dbcc:	4053      	eors	r3, r2
   1dbce:	b2db      	uxtb	r3, r3
   1dbd0:	2b00      	cmp	r3, #0
   1dbd2:	d001      	beq.n	1dbd8 <sd_acmd51+0x68>
		return false;
   1dbd4:	2300      	movs	r3, #0
   1dbd6:	e03a      	b.n	1dc4e <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1dbd8:	4b25      	ldr	r3, [pc, #148]	; (1dc70 <sd_acmd51+0x100>)
   1dbda:	4798      	blx	r3
   1dbdc:	0003      	movs	r3, r0
   1dbde:	001a      	movs	r2, r3
   1dbe0:	2301      	movs	r3, #1
   1dbe2:	4053      	eors	r3, r2
   1dbe4:	b2db      	uxtb	r3, r3
   1dbe6:	2b00      	cmp	r3, #0
   1dbe8:	d001      	beq.n	1dbee <sd_acmd51+0x7e>
		return false;
   1dbea:	2300      	movs	r3, #0
   1dbec:	e02f      	b.n	1dc4e <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1dbee:	0038      	movs	r0, r7
   1dbf0:	2304      	movs	r3, #4
   1dbf2:	2238      	movs	r2, #56	; 0x38
   1dbf4:	2140      	movs	r1, #64	; 0x40
   1dbf6:	4c1f      	ldr	r4, [pc, #124]	; (1dc74 <sd_acmd51+0x104>)
   1dbf8:	47a0      	blx	r4
   1dbfa:	0003      	movs	r3, r0
   1dbfc:	2b01      	cmp	r3, #1
   1dbfe:	d008      	beq.n	1dc12 <sd_acmd51+0xa2>
   1dc00:	d302      	bcc.n	1dc08 <sd_acmd51+0x98>
   1dc02:	2b02      	cmp	r3, #2
   1dc04:	d00a      	beq.n	1dc1c <sd_acmd51+0xac>
   1dc06:	e01c      	b.n	1dc42 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1dc08:	4b13      	ldr	r3, [pc, #76]	; (1dc58 <sd_acmd51+0xe8>)
   1dc0a:	681b      	ldr	r3, [r3, #0]
   1dc0c:	2210      	movs	r2, #16
   1dc0e:	731a      	strb	r2, [r3, #12]
		break;
   1dc10:	e01c      	b.n	1dc4c <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1dc12:	4b11      	ldr	r3, [pc, #68]	; (1dc58 <sd_acmd51+0xe8>)
   1dc14:	681b      	ldr	r3, [r3, #0]
   1dc16:	221a      	movs	r2, #26
   1dc18:	731a      	strb	r2, [r3, #12]
		break;
   1dc1a:	e017      	b.n	1dc4c <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1dc1c:	0038      	movs	r0, r7
   1dc1e:	2301      	movs	r3, #1
   1dc20:	222f      	movs	r2, #47	; 0x2f
   1dc22:	2140      	movs	r1, #64	; 0x40
   1dc24:	4c13      	ldr	r4, [pc, #76]	; (1dc74 <sd_acmd51+0x104>)
   1dc26:	47a0      	blx	r4
   1dc28:	0003      	movs	r3, r0
   1dc2a:	2b01      	cmp	r3, #1
   1dc2c:	d104      	bne.n	1dc38 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1dc2e:	4b0a      	ldr	r3, [pc, #40]	; (1dc58 <sd_acmd51+0xe8>)
   1dc30:	681b      	ldr	r3, [r3, #0]
   1dc32:	2230      	movs	r2, #48	; 0x30
   1dc34:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1dc36:	e009      	b.n	1dc4c <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1dc38:	4b07      	ldr	r3, [pc, #28]	; (1dc58 <sd_acmd51+0xe8>)
   1dc3a:	681b      	ldr	r3, [r3, #0]
   1dc3c:	2220      	movs	r2, #32
   1dc3e:	731a      	strb	r2, [r3, #12]
		break;
   1dc40:	e004      	b.n	1dc4c <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1dc42:	4b05      	ldr	r3, [pc, #20]	; (1dc58 <sd_acmd51+0xe8>)
   1dc44:	681b      	ldr	r3, [r3, #0]
   1dc46:	2210      	movs	r2, #16
   1dc48:	731a      	strb	r2, [r3, #12]
		break;
   1dc4a:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1dc4c:	2301      	movs	r3, #1
}
   1dc4e:	0018      	movs	r0, r3
   1dc50:	46bd      	mov	sp, r7
   1dc52:	b003      	add	sp, #12
   1dc54:	bd90      	pop	{r4, r7, pc}
   1dc56:	46c0      	nop			; (mov r8, r8)
   1dc58:	20003d9c 	.word	0x20003d9c
   1dc5c:	00001137 	.word	0x00001137
   1dc60:	0001efcd 	.word	0x0001efcd
   1dc64:	00081133 	.word	0x00081133
   1dc68:	0001eff5 	.word	0x0001eff5
   1dc6c:	0001f2c5 	.word	0x0001f2c5
   1dc70:	0001f369 	.word	0x0001f369
   1dc74:	0001d3f5 	.word	0x0001d3f5

0001dc78 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1dc78:	b580      	push	{r7, lr}
   1dc7a:	b082      	sub	sp, #8
   1dc7c:	af00      	add	r7, sp, #0
   1dc7e:	0002      	movs	r2, r0
   1dc80:	1dfb      	adds	r3, r7, #7
   1dc82:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1dc84:	1dfb      	adds	r3, r7, #7
   1dc86:	781b      	ldrb	r3, [r3, #0]
   1dc88:	2b00      	cmp	r3, #0
   1dc8a:	d001      	beq.n	1dc90 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1dc8c:	2304      	movs	r3, #4
   1dc8e:	e047      	b.n	1dd20 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1dc90:	1dfb      	adds	r3, r7, #7
   1dc92:	781b      	ldrb	r3, [r3, #0]
   1dc94:	4a24      	ldr	r2, [pc, #144]	; (1dd28 <sd_mmc_select_slot+0xb0>)
   1dc96:	015b      	lsls	r3, r3, #5
   1dc98:	18d3      	adds	r3, r2, r3
   1dc9a:	330a      	adds	r3, #10
   1dc9c:	781b      	ldrb	r3, [r3, #0]
   1dc9e:	2b04      	cmp	r3, #4
   1dca0:	d008      	beq.n	1dcb4 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1dca2:	1dfb      	adds	r3, r7, #7
   1dca4:	781b      	ldrb	r3, [r3, #0]
   1dca6:	4a20      	ldr	r2, [pc, #128]	; (1dd28 <sd_mmc_select_slot+0xb0>)
   1dca8:	015b      	lsls	r3, r3, #5
   1dcaa:	18d3      	adds	r3, r2, r3
   1dcac:	330a      	adds	r3, #10
   1dcae:	781b      	ldrb	r3, [r3, #0]
   1dcb0:	2b03      	cmp	r3, #3
   1dcb2:	d11d      	bne.n	1dcf0 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1dcb4:	1dfb      	adds	r3, r7, #7
   1dcb6:	781b      	ldrb	r3, [r3, #0]
   1dcb8:	4a1b      	ldr	r2, [pc, #108]	; (1dd28 <sd_mmc_select_slot+0xb0>)
   1dcba:	015b      	lsls	r3, r3, #5
   1dcbc:	18d3      	adds	r3, r2, r3
   1dcbe:	330a      	adds	r3, #10
   1dcc0:	2202      	movs	r2, #2
   1dcc2:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1dcc4:	1dfb      	adds	r3, r7, #7
   1dcc6:	781a      	ldrb	r2, [r3, #0]
   1dcc8:	4b17      	ldr	r3, [pc, #92]	; (1dd28 <sd_mmc_select_slot+0xb0>)
   1dcca:	0152      	lsls	r2, r2, #5
   1dccc:	4917      	ldr	r1, [pc, #92]	; (1dd2c <sd_mmc_select_slot+0xb4>)
   1dcce:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1dcd0:	1dfb      	adds	r3, r7, #7
   1dcd2:	781b      	ldrb	r3, [r3, #0]
   1dcd4:	4a14      	ldr	r2, [pc, #80]	; (1dd28 <sd_mmc_select_slot+0xb0>)
   1dcd6:	015b      	lsls	r3, r3, #5
   1dcd8:	18d3      	adds	r3, r2, r3
   1dcda:	330d      	adds	r3, #13
   1dcdc:	2201      	movs	r2, #1
   1dcde:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1dce0:	1dfb      	adds	r3, r7, #7
   1dce2:	781b      	ldrb	r3, [r3, #0]
   1dce4:	4a10      	ldr	r2, [pc, #64]	; (1dd28 <sd_mmc_select_slot+0xb0>)
   1dce6:	015b      	lsls	r3, r3, #5
   1dce8:	18d3      	adds	r3, r2, r3
   1dcea:	331e      	adds	r3, #30
   1dcec:	2200      	movs	r2, #0
   1dcee:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1dcf0:	4b0f      	ldr	r3, [pc, #60]	; (1dd30 <sd_mmc_select_slot+0xb8>)
   1dcf2:	1dfa      	adds	r2, r7, #7
   1dcf4:	7812      	ldrb	r2, [r2, #0]
   1dcf6:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1dcf8:	1dfb      	adds	r3, r7, #7
   1dcfa:	781b      	ldrb	r3, [r3, #0]
   1dcfc:	015a      	lsls	r2, r3, #5
   1dcfe:	4b0a      	ldr	r3, [pc, #40]	; (1dd28 <sd_mmc_select_slot+0xb0>)
   1dd00:	18d2      	adds	r2, r2, r3
   1dd02:	4b0c      	ldr	r3, [pc, #48]	; (1dd34 <sd_mmc_select_slot+0xbc>)
   1dd04:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1dd06:	4b0c      	ldr	r3, [pc, #48]	; (1dd38 <sd_mmc_select_slot+0xc0>)
   1dd08:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1dd0a:	1dfb      	adds	r3, r7, #7
   1dd0c:	781b      	ldrb	r3, [r3, #0]
   1dd0e:	4a06      	ldr	r2, [pc, #24]	; (1dd28 <sd_mmc_select_slot+0xb0>)
   1dd10:	015b      	lsls	r3, r3, #5
   1dd12:	18d3      	adds	r3, r2, r3
   1dd14:	330a      	adds	r3, #10
   1dd16:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1dd18:	3b02      	subs	r3, #2
   1dd1a:	425a      	negs	r2, r3
   1dd1c:	4153      	adcs	r3, r2
   1dd1e:	b2db      	uxtb	r3, r3
}
   1dd20:	0018      	movs	r0, r3
   1dd22:	46bd      	mov	sp, r7
   1dd24:	b002      	add	sp, #8
   1dd26:	bd80      	pop	{r7, pc}
   1dd28:	20003d78 	.word	0x20003d78
   1dd2c:	00061a80 	.word	0x00061a80
   1dd30:	20003d98 	.word	0x20003d98
   1dd34:	20003d9c 	.word	0x20003d9c
   1dd38:	0001dd3d 	.word	0x0001dd3d

0001dd3c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1dd3c:	b5b0      	push	{r4, r5, r7, lr}
   1dd3e:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1dd40:	4b09      	ldr	r3, [pc, #36]	; (1dd68 <sd_mmc_configure_slot+0x2c>)
   1dd42:	7818      	ldrb	r0, [r3, #0]
   1dd44:	4b09      	ldr	r3, [pc, #36]	; (1dd6c <sd_mmc_configure_slot+0x30>)
   1dd46:	681b      	ldr	r3, [r3, #0]
   1dd48:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1dd4a:	4b08      	ldr	r3, [pc, #32]	; (1dd6c <sd_mmc_configure_slot+0x30>)
   1dd4c:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1dd4e:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1dd50:	4b06      	ldr	r3, [pc, #24]	; (1dd6c <sd_mmc_configure_slot+0x30>)
   1dd52:	681b      	ldr	r3, [r3, #0]
   1dd54:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1dd56:	1e5c      	subs	r4, r3, #1
   1dd58:	41a3      	sbcs	r3, r4
   1dd5a:	b2db      	uxtb	r3, r3
   1dd5c:	4c04      	ldr	r4, [pc, #16]	; (1dd70 <sd_mmc_configure_slot+0x34>)
   1dd5e:	47a0      	blx	r4
}
   1dd60:	46c0      	nop			; (mov r8, r8)
   1dd62:	46bd      	mov	sp, r7
   1dd64:	bdb0      	pop	{r4, r5, r7, pc}
   1dd66:	46c0      	nop			; (mov r8, r8)
   1dd68:	20003d98 	.word	0x20003d98
   1dd6c:	20003d9c 	.word	0x20003d9c
   1dd70:	0001eeb5 	.word	0x0001eeb5

0001dd74 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1dd74:	b580      	push	{r7, lr}
   1dd76:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1dd78:	4b05      	ldr	r3, [pc, #20]	; (1dd90 <sd_mmc_deselect_slot+0x1c>)
   1dd7a:	781b      	ldrb	r3, [r3, #0]
   1dd7c:	2b00      	cmp	r3, #0
   1dd7e:	d104      	bne.n	1dd8a <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1dd80:	4b03      	ldr	r3, [pc, #12]	; (1dd90 <sd_mmc_deselect_slot+0x1c>)
   1dd82:	781b      	ldrb	r3, [r3, #0]
   1dd84:	0018      	movs	r0, r3
   1dd86:	4b03      	ldr	r3, [pc, #12]	; (1dd94 <sd_mmc_deselect_slot+0x20>)
   1dd88:	4798      	blx	r3
	}
}
   1dd8a:	46c0      	nop			; (mov r8, r8)
   1dd8c:	46bd      	mov	sp, r7
   1dd8e:	bd80      	pop	{r7, pc}
   1dd90:	20003d98 	.word	0x20003d98
   1dd94:	0001ef3d 	.word	0x0001ef3d

0001dd98 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1dd98:	b580      	push	{r7, lr}
   1dd9a:	b082      	sub	sp, #8
   1dd9c:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1dd9e:	1dfb      	adds	r3, r7, #7
   1dda0:	2200      	movs	r2, #0
   1dda2:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1dda4:	4b59      	ldr	r3, [pc, #356]	; (1df0c <sd_mmc_spi_card_init+0x174>)
   1dda6:	681b      	ldr	r3, [r3, #0]
   1dda8:	2201      	movs	r2, #1
   1ddaa:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1ddac:	4b57      	ldr	r3, [pc, #348]	; (1df0c <sd_mmc_spi_card_init+0x174>)
   1ddae:	681b      	ldr	r3, [r3, #0]
   1ddb0:	2200      	movs	r2, #0
   1ddb2:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1ddb4:	4b55      	ldr	r3, [pc, #340]	; (1df0c <sd_mmc_spi_card_init+0x174>)
   1ddb6:	681b      	ldr	r3, [r3, #0]
   1ddb8:	2200      	movs	r2, #0
   1ddba:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1ddbc:	4b54      	ldr	r3, [pc, #336]	; (1df10 <sd_mmc_spi_card_init+0x178>)
   1ddbe:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1ddc0:	2388      	movs	r3, #136	; 0x88
   1ddc2:	015b      	lsls	r3, r3, #5
   1ddc4:	2100      	movs	r1, #0
   1ddc6:	0018      	movs	r0, r3
   1ddc8:	4b52      	ldr	r3, [pc, #328]	; (1df14 <sd_mmc_spi_card_init+0x17c>)
   1ddca:	4798      	blx	r3
   1ddcc:	0003      	movs	r3, r0
   1ddce:	001a      	movs	r2, r3
   1ddd0:	2301      	movs	r3, #1
   1ddd2:	4053      	eors	r3, r2
   1ddd4:	b2db      	uxtb	r3, r3
   1ddd6:	2b00      	cmp	r3, #0
   1ddd8:	d001      	beq.n	1ddde <sd_mmc_spi_card_init+0x46>
		return false;
   1ddda:	2300      	movs	r3, #0
   1dddc:	e092      	b.n	1df04 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1ddde:	1dfb      	adds	r3, r7, #7
   1dde0:	0018      	movs	r0, r3
   1dde2:	4b4d      	ldr	r3, [pc, #308]	; (1df18 <sd_mmc_spi_card_init+0x180>)
   1dde4:	4798      	blx	r3
   1dde6:	0003      	movs	r3, r0
   1dde8:	001a      	movs	r2, r3
   1ddea:	2301      	movs	r3, #1
   1ddec:	4053      	eors	r3, r2
   1ddee:	b2db      	uxtb	r3, r3
   1ddf0:	2b00      	cmp	r3, #0
   1ddf2:	d001      	beq.n	1ddf8 <sd_mmc_spi_card_init+0x60>
		return false;
   1ddf4:	2300      	movs	r3, #0
   1ddf6:	e085      	b.n	1df04 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1ddf8:	4b48      	ldr	r3, [pc, #288]	; (1df1c <sd_mmc_spi_card_init+0x184>)
   1ddfa:	4798      	blx	r3
   1ddfc:	0003      	movs	r3, r0
   1ddfe:	001a      	movs	r2, r3
   1de00:	2301      	movs	r3, #1
   1de02:	4053      	eors	r3, r2
   1de04:	b2db      	uxtb	r3, r3
   1de06:	2b00      	cmp	r3, #0
   1de08:	d001      	beq.n	1de0e <sd_mmc_spi_card_init+0x76>
		return false;
   1de0a:	2300      	movs	r3, #0
   1de0c:	e07a      	b.n	1df04 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1de0e:	4b3f      	ldr	r3, [pc, #252]	; (1df0c <sd_mmc_spi_card_init+0x174>)
   1de10:	681b      	ldr	r3, [r3, #0]
   1de12:	7adb      	ldrb	r3, [r3, #11]
   1de14:	001a      	movs	r2, r3
   1de16:	2301      	movs	r3, #1
   1de18:	4013      	ands	r3, r2
   1de1a:	d021      	beq.n	1de60 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1de1c:	1dfb      	adds	r3, r7, #7
   1de1e:	781b      	ldrb	r3, [r3, #0]
   1de20:	0018      	movs	r0, r3
   1de22:	4b3f      	ldr	r3, [pc, #252]	; (1df20 <sd_mmc_spi_card_init+0x188>)
   1de24:	4798      	blx	r3
   1de26:	0003      	movs	r3, r0
   1de28:	001a      	movs	r2, r3
   1de2a:	2301      	movs	r3, #1
   1de2c:	4053      	eors	r3, r2
   1de2e:	b2db      	uxtb	r3, r3
   1de30:	2b00      	cmp	r3, #0
   1de32:	d007      	beq.n	1de44 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1de34:	4b35      	ldr	r3, [pc, #212]	; (1df0c <sd_mmc_spi_card_init+0x174>)
   1de36:	681b      	ldr	r3, [r3, #0]
   1de38:	2202      	movs	r2, #2
   1de3a:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1de3c:	4b39      	ldr	r3, [pc, #228]	; (1df24 <sd_mmc_spi_card_init+0x18c>)
   1de3e:	4798      	blx	r3
   1de40:	0003      	movs	r3, r0
   1de42:	e05f      	b.n	1df04 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1de44:	4b38      	ldr	r3, [pc, #224]	; (1df28 <sd_mmc_spi_card_init+0x190>)
   1de46:	2100      	movs	r1, #0
   1de48:	0018      	movs	r0, r3
   1de4a:	4b32      	ldr	r3, [pc, #200]	; (1df14 <sd_mmc_spi_card_init+0x17c>)
   1de4c:	4798      	blx	r3
   1de4e:	0003      	movs	r3, r0
   1de50:	001a      	movs	r2, r3
   1de52:	2301      	movs	r3, #1
   1de54:	4053      	eors	r3, r2
   1de56:	b2db      	uxtb	r3, r3
   1de58:	2b00      	cmp	r3, #0
   1de5a:	d001      	beq.n	1de60 <sd_mmc_spi_card_init+0xc8>
			return false;
   1de5c:	2300      	movs	r3, #0
   1de5e:	e051      	b.n	1df04 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1de60:	4b2a      	ldr	r3, [pc, #168]	; (1df0c <sd_mmc_spi_card_init+0x174>)
   1de62:	681b      	ldr	r3, [r3, #0]
   1de64:	7adb      	ldrb	r3, [r3, #11]
   1de66:	001a      	movs	r2, r3
   1de68:	2301      	movs	r3, #1
   1de6a:	4013      	ands	r3, r2
   1de6c:	d017      	beq.n	1de9e <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1de6e:	4b2f      	ldr	r3, [pc, #188]	; (1df2c <sd_mmc_spi_card_init+0x194>)
   1de70:	4798      	blx	r3
   1de72:	0003      	movs	r3, r0
   1de74:	001a      	movs	r2, r3
   1de76:	2301      	movs	r3, #1
   1de78:	4053      	eors	r3, r2
   1de7a:	b2db      	uxtb	r3, r3
   1de7c:	2b00      	cmp	r3, #0
   1de7e:	d001      	beq.n	1de84 <sd_mmc_spi_card_init+0xec>
			return false;
   1de80:	2300      	movs	r3, #0
   1de82:	e03f      	b.n	1df04 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1de84:	4b2a      	ldr	r3, [pc, #168]	; (1df30 <sd_mmc_spi_card_init+0x198>)
   1de86:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1de88:	4b2a      	ldr	r3, [pc, #168]	; (1df34 <sd_mmc_spi_card_init+0x19c>)
   1de8a:	4798      	blx	r3
   1de8c:	0003      	movs	r3, r0
   1de8e:	001a      	movs	r2, r3
   1de90:	2301      	movs	r3, #1
   1de92:	4053      	eors	r3, r2
   1de94:	b2db      	uxtb	r3, r3
   1de96:	2b00      	cmp	r3, #0
   1de98:	d001      	beq.n	1de9e <sd_mmc_spi_card_init+0x106>
			return false;
   1de9a:	2300      	movs	r3, #0
   1de9c:	e032      	b.n	1df04 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1de9e:	4b1b      	ldr	r3, [pc, #108]	; (1df0c <sd_mmc_spi_card_init+0x174>)
   1dea0:	681b      	ldr	r3, [r3, #0]
   1dea2:	7adb      	ldrb	r3, [r3, #11]
   1dea4:	001a      	movs	r2, r3
   1dea6:	2301      	movs	r3, #1
   1dea8:	4013      	ands	r3, r2
   1deaa:	d016      	beq.n	1deda <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1deac:	4b17      	ldr	r3, [pc, #92]	; (1df0c <sd_mmc_spi_card_init+0x174>)
   1deae:	681b      	ldr	r3, [r3, #0]
   1deb0:	7adb      	ldrb	r3, [r3, #11]
   1deb2:	001a      	movs	r2, r3
   1deb4:	2308      	movs	r3, #8
   1deb6:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1deb8:	d10f      	bne.n	1deda <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1deba:	2380      	movs	r3, #128	; 0x80
   1debc:	009b      	lsls	r3, r3, #2
   1debe:	4a1e      	ldr	r2, [pc, #120]	; (1df38 <sd_mmc_spi_card_init+0x1a0>)
   1dec0:	0019      	movs	r1, r3
   1dec2:	0010      	movs	r0, r2
   1dec4:	4b13      	ldr	r3, [pc, #76]	; (1df14 <sd_mmc_spi_card_init+0x17c>)
   1dec6:	4798      	blx	r3
   1dec8:	0003      	movs	r3, r0
   1deca:	001a      	movs	r2, r3
   1decc:	2301      	movs	r3, #1
   1dece:	4053      	eors	r3, r2
   1ded0:	b2db      	uxtb	r3, r3
   1ded2:	2b00      	cmp	r3, #0
   1ded4:	d001      	beq.n	1deda <sd_mmc_spi_card_init+0x142>
			return false;
   1ded6:	2300      	movs	r3, #0
   1ded8:	e014      	b.n	1df04 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1deda:	4b0c      	ldr	r3, [pc, #48]	; (1df0c <sd_mmc_spi_card_init+0x174>)
   1dedc:	681b      	ldr	r3, [r3, #0]
   1dede:	7adb      	ldrb	r3, [r3, #11]
   1dee0:	001a      	movs	r2, r3
   1dee2:	2301      	movs	r3, #1
   1dee4:	4013      	ands	r3, r2
   1dee6:	d00a      	beq.n	1defe <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1dee8:	4b14      	ldr	r3, [pc, #80]	; (1df3c <sd_mmc_spi_card_init+0x1a4>)
   1deea:	4798      	blx	r3
   1deec:	0003      	movs	r3, r0
   1deee:	001a      	movs	r2, r3
   1def0:	2301      	movs	r3, #1
   1def2:	4053      	eors	r3, r2
   1def4:	b2db      	uxtb	r3, r3
   1def6:	2b00      	cmp	r3, #0
   1def8:	d001      	beq.n	1defe <sd_mmc_spi_card_init+0x166>
			return false;
   1defa:	2300      	movs	r3, #0
   1defc:	e002      	b.n	1df04 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1defe:	4b10      	ldr	r3, [pc, #64]	; (1df40 <sd_mmc_spi_card_init+0x1a8>)
   1df00:	4798      	blx	r3
	return true;
   1df02:	2301      	movs	r3, #1
}
   1df04:	0018      	movs	r0, r3
   1df06:	46bd      	mov	sp, r7
   1df08:	b002      	add	sp, #8
   1df0a:	bd80      	pop	{r7, pc}
   1df0c:	20003d9c 	.word	0x20003d9c
   1df10:	0001ef81 	.word	0x0001ef81
   1df14:	0001efcd 	.word	0x0001efcd
   1df18:	0001d6ed 	.word	0x0001d6ed
   1df1c:	0001d6e1 	.word	0x0001d6e1
   1df20:	0001d5fd 	.word	0x0001d5fd
   1df24:	0001df45 	.word	0x0001df45
   1df28:	0000113b 	.word	0x0000113b
   1df2c:	0001d889 	.word	0x0001d889
   1df30:	0001da29 	.word	0x0001da29
   1df34:	0001db71 	.word	0x0001db71
   1df38:	00001110 	.word	0x00001110
   1df3c:	0001db15 	.word	0x0001db15
   1df40:	0001dd3d 	.word	0x0001dd3d

0001df44 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1df44:	b580      	push	{r7, lr}
   1df46:	b082      	sub	sp, #8
   1df48:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1df4a:	2388      	movs	r3, #136	; 0x88
   1df4c:	015b      	lsls	r3, r3, #5
   1df4e:	2100      	movs	r1, #0
   1df50:	0018      	movs	r0, r3
   1df52:	4b32      	ldr	r3, [pc, #200]	; (1e01c <sd_mmc_spi_install_mmc+0xd8>)
   1df54:	4798      	blx	r3
   1df56:	0003      	movs	r3, r0
   1df58:	001a      	movs	r2, r3
   1df5a:	2301      	movs	r3, #1
   1df5c:	4053      	eors	r3, r2
   1df5e:	b2db      	uxtb	r3, r3
   1df60:	2b00      	cmp	r3, #0
   1df62:	d001      	beq.n	1df68 <sd_mmc_spi_install_mmc+0x24>
		return false;
   1df64:	2300      	movs	r3, #0
   1df66:	e055      	b.n	1e014 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1df68:	4b2d      	ldr	r3, [pc, #180]	; (1e020 <sd_mmc_spi_install_mmc+0xdc>)
   1df6a:	4798      	blx	r3
   1df6c:	0003      	movs	r3, r0
   1df6e:	001a      	movs	r2, r3
   1df70:	2301      	movs	r3, #1
   1df72:	4053      	eors	r3, r2
   1df74:	b2db      	uxtb	r3, r3
   1df76:	2b00      	cmp	r3, #0
   1df78:	d001      	beq.n	1df7e <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1df7a:	2300      	movs	r3, #0
   1df7c:	e04a      	b.n	1e014 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1df7e:	4b29      	ldr	r3, [pc, #164]	; (1e024 <sd_mmc_spi_install_mmc+0xe0>)
   1df80:	2100      	movs	r1, #0
   1df82:	0018      	movs	r0, r3
   1df84:	4b25      	ldr	r3, [pc, #148]	; (1e01c <sd_mmc_spi_install_mmc+0xd8>)
   1df86:	4798      	blx	r3
   1df88:	0003      	movs	r3, r0
   1df8a:	001a      	movs	r2, r3
   1df8c:	2301      	movs	r3, #1
   1df8e:	4053      	eors	r3, r2
   1df90:	b2db      	uxtb	r3, r3
   1df92:	2b00      	cmp	r3, #0
   1df94:	d001      	beq.n	1df9a <sd_mmc_spi_install_mmc+0x56>
		return false;
   1df96:	2300      	movs	r3, #0
   1df98:	e03c      	b.n	1e014 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1df9a:	4b23      	ldr	r3, [pc, #140]	; (1e028 <sd_mmc_spi_install_mmc+0xe4>)
   1df9c:	4798      	blx	r3
   1df9e:	0003      	movs	r3, r0
   1dfa0:	001a      	movs	r2, r3
   1dfa2:	2301      	movs	r3, #1
   1dfa4:	4053      	eors	r3, r2
   1dfa6:	b2db      	uxtb	r3, r3
   1dfa8:	2b00      	cmp	r3, #0
   1dfaa:	d001      	beq.n	1dfb0 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1dfac:	2300      	movs	r3, #0
   1dfae:	e031      	b.n	1e014 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1dfb0:	4b1e      	ldr	r3, [pc, #120]	; (1e02c <sd_mmc_spi_install_mmc+0xe8>)
   1dfb2:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1dfb4:	4b1e      	ldr	r3, [pc, #120]	; (1e030 <sd_mmc_spi_install_mmc+0xec>)
   1dfb6:	681b      	ldr	r3, [r3, #0]
   1dfb8:	7b1b      	ldrb	r3, [r3, #12]
   1dfba:	2b3f      	cmp	r3, #63	; 0x3f
   1dfbc:	d90c      	bls.n	1dfd8 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1dfbe:	1dfb      	adds	r3, r7, #7
   1dfc0:	0018      	movs	r0, r3
   1dfc2:	4b1c      	ldr	r3, [pc, #112]	; (1e034 <sd_mmc_spi_install_mmc+0xf0>)
   1dfc4:	4798      	blx	r3
   1dfc6:	0003      	movs	r3, r0
   1dfc8:	001a      	movs	r2, r3
   1dfca:	2301      	movs	r3, #1
   1dfcc:	4053      	eors	r3, r2
   1dfce:	b2db      	uxtb	r3, r3
   1dfd0:	2b00      	cmp	r3, #0
   1dfd2:	d001      	beq.n	1dfd8 <sd_mmc_spi_install_mmc+0x94>
			return false;
   1dfd4:	2300      	movs	r3, #0
   1dfd6:	e01d      	b.n	1e014 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1dfd8:	2380      	movs	r3, #128	; 0x80
   1dfda:	009b      	lsls	r3, r3, #2
   1dfdc:	4a16      	ldr	r2, [pc, #88]	; (1e038 <sd_mmc_spi_install_mmc+0xf4>)
   1dfde:	0019      	movs	r1, r3
   1dfe0:	0010      	movs	r0, r2
   1dfe2:	4b0e      	ldr	r3, [pc, #56]	; (1e01c <sd_mmc_spi_install_mmc+0xd8>)
   1dfe4:	4798      	blx	r3
   1dfe6:	0003      	movs	r3, r0
   1dfe8:	001a      	movs	r2, r3
   1dfea:	2301      	movs	r3, #1
   1dfec:	4053      	eors	r3, r2
   1dfee:	b2db      	uxtb	r3, r3
   1dff0:	2b00      	cmp	r3, #0
   1dff2:	d001      	beq.n	1dff8 <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1dff4:	2300      	movs	r3, #0
   1dff6:	e00d      	b.n	1e014 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1dff8:	4b10      	ldr	r3, [pc, #64]	; (1e03c <sd_mmc_spi_install_mmc+0xf8>)
   1dffa:	4798      	blx	r3
   1dffc:	0003      	movs	r3, r0
   1dffe:	001a      	movs	r2, r3
   1e000:	2301      	movs	r3, #1
   1e002:	4053      	eors	r3, r2
   1e004:	b2db      	uxtb	r3, r3
   1e006:	2b00      	cmp	r3, #0
   1e008:	d001      	beq.n	1e00e <sd_mmc_spi_install_mmc+0xca>
		return false;
   1e00a:	2300      	movs	r3, #0
   1e00c:	e002      	b.n	1e014 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1e00e:	4b0c      	ldr	r3, [pc, #48]	; (1e040 <sd_mmc_spi_install_mmc+0xfc>)
   1e010:	4798      	blx	r3
	return true;
   1e012:	2301      	movs	r3, #1
}
   1e014:	0018      	movs	r0, r3
   1e016:	46bd      	mov	sp, r7
   1e018:	b002      	add	sp, #8
   1e01a:	bd80      	pop	{r7, pc}
   1e01c:	0001efcd 	.word	0x0001efcd
   1e020:	0001d551 	.word	0x0001d551
   1e024:	0000113b 	.word	0x0000113b
   1e028:	0001d889 	.word	0x0001d889
   1e02c:	0001d8f9 	.word	0x0001d8f9
   1e030:	20003d9c 	.word	0x20003d9c
   1e034:	0001d75d 	.word	0x0001d75d
   1e038:	00001110 	.word	0x00001110
   1e03c:	0001db15 	.word	0x0001db15
   1e040:	0001dd3d 	.word	0x0001dd3d

0001e044 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1e044:	b580      	push	{r7, lr}
   1e046:	b082      	sub	sp, #8
   1e048:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1e04a:	1dfb      	adds	r3, r7, #7
   1e04c:	2200      	movs	r2, #0
   1e04e:	701a      	strb	r2, [r3, #0]
   1e050:	e00c      	b.n	1e06c <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1e052:	1dfb      	adds	r3, r7, #7
   1e054:	781b      	ldrb	r3, [r3, #0]
   1e056:	4a0c      	ldr	r2, [pc, #48]	; (1e088 <sd_mmc_init+0x44>)
   1e058:	015b      	lsls	r3, r3, #5
   1e05a:	18d3      	adds	r3, r2, r3
   1e05c:	330a      	adds	r3, #10
   1e05e:	2204      	movs	r2, #4
   1e060:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1e062:	1dfb      	adds	r3, r7, #7
   1e064:	781a      	ldrb	r2, [r3, #0]
   1e066:	1dfb      	adds	r3, r7, #7
   1e068:	3201      	adds	r2, #1
   1e06a:	701a      	strb	r2, [r3, #0]
   1e06c:	1dfb      	adds	r3, r7, #7
   1e06e:	781b      	ldrb	r3, [r3, #0]
   1e070:	2b00      	cmp	r3, #0
   1e072:	d0ee      	beq.n	1e052 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1e074:	4b05      	ldr	r3, [pc, #20]	; (1e08c <sd_mmc_init+0x48>)
   1e076:	22ff      	movs	r2, #255	; 0xff
   1e078:	701a      	strb	r2, [r3, #0]
	driver_init();
   1e07a:	4b05      	ldr	r3, [pc, #20]	; (1e090 <sd_mmc_init+0x4c>)
   1e07c:	4798      	blx	r3
}
   1e07e:	46c0      	nop			; (mov r8, r8)
   1e080:	46bd      	mov	sp, r7
   1e082:	b002      	add	sp, #8
   1e084:	bd80      	pop	{r7, pc}
   1e086:	46c0      	nop			; (mov r8, r8)
   1e088:	20003d78 	.word	0x20003d78
   1e08c:	20003d98 	.word	0x20003d98
   1e090:	0001eded 	.word	0x0001eded

0001e094 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1e094:	b590      	push	{r4, r7, lr}
   1e096:	b085      	sub	sp, #20
   1e098:	af00      	add	r7, sp, #0
   1e09a:	0002      	movs	r2, r0
   1e09c:	1dfb      	adds	r3, r7, #7
   1e09e:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1e0a0:	230f      	movs	r3, #15
   1e0a2:	18fc      	adds	r4, r7, r3
   1e0a4:	1dfb      	adds	r3, r7, #7
   1e0a6:	781b      	ldrb	r3, [r3, #0]
   1e0a8:	0018      	movs	r0, r3
   1e0aa:	4b13      	ldr	r3, [pc, #76]	; (1e0f8 <sd_mmc_check+0x64>)
   1e0ac:	4798      	blx	r3
   1e0ae:	0003      	movs	r3, r0
   1e0b0:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1e0b2:	230f      	movs	r3, #15
   1e0b4:	18fb      	adds	r3, r7, r3
   1e0b6:	781b      	ldrb	r3, [r3, #0]
   1e0b8:	2b01      	cmp	r3, #1
   1e0ba:	d005      	beq.n	1e0c8 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1e0bc:	4b0f      	ldr	r3, [pc, #60]	; (1e0fc <sd_mmc_check+0x68>)
   1e0be:	4798      	blx	r3
		return sd_mmc_err;
   1e0c0:	230f      	movs	r3, #15
   1e0c2:	18fb      	adds	r3, r7, r3
   1e0c4:	781b      	ldrb	r3, [r3, #0]
   1e0c6:	e012      	b.n	1e0ee <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1e0c8:	4b0d      	ldr	r3, [pc, #52]	; (1e100 <sd_mmc_check+0x6c>)
   1e0ca:	4798      	blx	r3
   1e0cc:	1e03      	subs	r3, r0, #0
   1e0ce:	d007      	beq.n	1e0e0 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1e0d0:	4b0c      	ldr	r3, [pc, #48]	; (1e104 <sd_mmc_check+0x70>)
   1e0d2:	681b      	ldr	r3, [r3, #0]
   1e0d4:	2200      	movs	r2, #0
   1e0d6:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1e0d8:	4b08      	ldr	r3, [pc, #32]	; (1e0fc <sd_mmc_check+0x68>)
   1e0da:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1e0dc:	2301      	movs	r3, #1
   1e0de:	e006      	b.n	1e0ee <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1e0e0:	4b08      	ldr	r3, [pc, #32]	; (1e104 <sd_mmc_check+0x70>)
   1e0e2:	681b      	ldr	r3, [r3, #0]
   1e0e4:	2203      	movs	r2, #3
   1e0e6:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1e0e8:	4b04      	ldr	r3, [pc, #16]	; (1e0fc <sd_mmc_check+0x68>)
   1e0ea:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1e0ec:	2303      	movs	r3, #3
}
   1e0ee:	0018      	movs	r0, r3
   1e0f0:	46bd      	mov	sp, r7
   1e0f2:	b005      	add	sp, #20
   1e0f4:	bd90      	pop	{r4, r7, pc}
   1e0f6:	46c0      	nop			; (mov r8, r8)
   1e0f8:	0001dc79 	.word	0x0001dc79
   1e0fc:	0001dd75 	.word	0x0001dd75
   1e100:	0001dd99 	.word	0x0001dd99
   1e104:	20003d9c 	.word	0x20003d9c

0001e108 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1e108:	b580      	push	{r7, lr}
   1e10a:	b082      	sub	sp, #8
   1e10c:	af00      	add	r7, sp, #0
   1e10e:	0002      	movs	r2, r0
   1e110:	1dfb      	adds	r3, r7, #7
   1e112:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1e114:	1dfb      	adds	r3, r7, #7
   1e116:	781b      	ldrb	r3, [r3, #0]
   1e118:	0018      	movs	r0, r3
   1e11a:	4b07      	ldr	r3, [pc, #28]	; (1e138 <sd_mmc_get_type+0x30>)
   1e11c:	4798      	blx	r3
   1e11e:	1e03      	subs	r3, r0, #0
   1e120:	d001      	beq.n	1e126 <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1e122:	2300      	movs	r3, #0
   1e124:	e004      	b.n	1e130 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1e126:	4b05      	ldr	r3, [pc, #20]	; (1e13c <sd_mmc_get_type+0x34>)
   1e128:	4798      	blx	r3
	return sd_mmc_card->type;
   1e12a:	4b05      	ldr	r3, [pc, #20]	; (1e140 <sd_mmc_get_type+0x38>)
   1e12c:	681b      	ldr	r3, [r3, #0]
   1e12e:	7adb      	ldrb	r3, [r3, #11]
}
   1e130:	0018      	movs	r0, r3
   1e132:	46bd      	mov	sp, r7
   1e134:	b002      	add	sp, #8
   1e136:	bd80      	pop	{r7, pc}
   1e138:	0001dc79 	.word	0x0001dc79
   1e13c:	0001dd75 	.word	0x0001dd75
   1e140:	20003d9c 	.word	0x20003d9c

0001e144 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1e144:	b580      	push	{r7, lr}
   1e146:	b082      	sub	sp, #8
   1e148:	af00      	add	r7, sp, #0
   1e14a:	0002      	movs	r2, r0
   1e14c:	1dfb      	adds	r3, r7, #7
   1e14e:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1e150:	1dfb      	adds	r3, r7, #7
   1e152:	781b      	ldrb	r3, [r3, #0]
   1e154:	0018      	movs	r0, r3
   1e156:	4b07      	ldr	r3, [pc, #28]	; (1e174 <sd_mmc_get_capacity+0x30>)
   1e158:	4798      	blx	r3
   1e15a:	1e03      	subs	r3, r0, #0
   1e15c:	d001      	beq.n	1e162 <sd_mmc_get_capacity+0x1e>
		return 0;
   1e15e:	2300      	movs	r3, #0
   1e160:	e004      	b.n	1e16c <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1e162:	4b05      	ldr	r3, [pc, #20]	; (1e178 <sd_mmc_get_capacity+0x34>)
   1e164:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1e166:	4b05      	ldr	r3, [pc, #20]	; (1e17c <sd_mmc_get_capacity+0x38>)
   1e168:	681b      	ldr	r3, [r3, #0]
   1e16a:	685b      	ldr	r3, [r3, #4]
}
   1e16c:	0018      	movs	r0, r3
   1e16e:	46bd      	mov	sp, r7
   1e170:	b002      	add	sp, #8
   1e172:	bd80      	pop	{r7, pc}
   1e174:	0001dc79 	.word	0x0001dc79
   1e178:	0001dd75 	.word	0x0001dd75
   1e17c:	20003d9c 	.word	0x20003d9c

0001e180 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1e180:	b580      	push	{r7, lr}
   1e182:	b082      	sub	sp, #8
   1e184:	af00      	add	r7, sp, #0
   1e186:	0002      	movs	r2, r0
   1e188:	1dfb      	adds	r3, r7, #7
   1e18a:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1e18c:	2300      	movs	r3, #0
}
   1e18e:	0018      	movs	r0, r3
   1e190:	46bd      	mov	sp, r7
   1e192:	b002      	add	sp, #8
   1e194:	bd80      	pop	{r7, pc}
	...

0001e198 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1e198:	b590      	push	{r4, r7, lr}
   1e19a:	b089      	sub	sp, #36	; 0x24
   1e19c:	af02      	add	r7, sp, #8
   1e19e:	6039      	str	r1, [r7, #0]
   1e1a0:	0011      	movs	r1, r2
   1e1a2:	1dfb      	adds	r3, r7, #7
   1e1a4:	1c02      	adds	r2, r0, #0
   1e1a6:	701a      	strb	r2, [r3, #0]
   1e1a8:	1d3b      	adds	r3, r7, #4
   1e1aa:	1c0a      	adds	r2, r1, #0
   1e1ac:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1e1ae:	230f      	movs	r3, #15
   1e1b0:	18fc      	adds	r4, r7, r3
   1e1b2:	1dfb      	adds	r3, r7, #7
   1e1b4:	781b      	ldrb	r3, [r3, #0]
   1e1b6:	0018      	movs	r0, r3
   1e1b8:	4b29      	ldr	r3, [pc, #164]	; (1e260 <sd_mmc_init_read_blocks+0xc8>)
   1e1ba:	4798      	blx	r3
   1e1bc:	0003      	movs	r3, r0
   1e1be:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1e1c0:	230f      	movs	r3, #15
   1e1c2:	18fb      	adds	r3, r7, r3
   1e1c4:	781b      	ldrb	r3, [r3, #0]
   1e1c6:	2b00      	cmp	r3, #0
   1e1c8:	d003      	beq.n	1e1d2 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1e1ca:	230f      	movs	r3, #15
   1e1cc:	18fb      	adds	r3, r7, r3
   1e1ce:	781b      	ldrb	r3, [r3, #0]
   1e1d0:	e041      	b.n	1e256 <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1e1d2:	4b24      	ldr	r3, [pc, #144]	; (1e264 <sd_mmc_init_read_blocks+0xcc>)
   1e1d4:	4798      	blx	r3
   1e1d6:	0003      	movs	r3, r0
   1e1d8:	001a      	movs	r2, r3
   1e1da:	2301      	movs	r3, #1
   1e1dc:	4053      	eors	r3, r2
   1e1de:	b2db      	uxtb	r3, r3
   1e1e0:	2b00      	cmp	r3, #0
   1e1e2:	d003      	beq.n	1e1ec <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1e1e4:	4b20      	ldr	r3, [pc, #128]	; (1e268 <sd_mmc_init_read_blocks+0xd0>)
   1e1e6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1e1e8:	2305      	movs	r3, #5
   1e1ea:	e034      	b.n	1e256 <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1e1ec:	1d3b      	adds	r3, r7, #4
   1e1ee:	881b      	ldrh	r3, [r3, #0]
   1e1f0:	2b01      	cmp	r3, #1
   1e1f2:	d902      	bls.n	1e1fa <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1e1f4:	4b1d      	ldr	r3, [pc, #116]	; (1e26c <sd_mmc_init_read_blocks+0xd4>)
   1e1f6:	617b      	str	r3, [r7, #20]
   1e1f8:	e001      	b.n	1e1fe <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1e1fa:	4b1d      	ldr	r3, [pc, #116]	; (1e270 <sd_mmc_init_read_blocks+0xd8>)
   1e1fc:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1e1fe:	4b1d      	ldr	r3, [pc, #116]	; (1e274 <sd_mmc_init_read_blocks+0xdc>)
   1e200:	681b      	ldr	r3, [r3, #0]
   1e202:	7adb      	ldrb	r3, [r3, #11]
   1e204:	001a      	movs	r2, r3
   1e206:	2308      	movs	r3, #8
   1e208:	4013      	ands	r3, r2
   1e20a:	d002      	beq.n	1e212 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1e20c:	683b      	ldr	r3, [r7, #0]
   1e20e:	613b      	str	r3, [r7, #16]
   1e210:	e002      	b.n	1e218 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1e212:	683b      	ldr	r3, [r7, #0]
   1e214:	025b      	lsls	r3, r3, #9
   1e216:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1e218:	1d3b      	adds	r3, r7, #4
   1e21a:	881c      	ldrh	r4, [r3, #0]
   1e21c:	2380      	movs	r3, #128	; 0x80
   1e21e:	009a      	lsls	r2, r3, #2
   1e220:	6939      	ldr	r1, [r7, #16]
   1e222:	6978      	ldr	r0, [r7, #20]
   1e224:	2301      	movs	r3, #1
   1e226:	9300      	str	r3, [sp, #0]
   1e228:	0023      	movs	r3, r4
   1e22a:	4c13      	ldr	r4, [pc, #76]	; (1e278 <sd_mmc_init_read_blocks+0xe0>)
   1e22c:	47a0      	blx	r4
   1e22e:	0003      	movs	r3, r0
   1e230:	001a      	movs	r2, r3
   1e232:	2301      	movs	r3, #1
   1e234:	4053      	eors	r3, r2
   1e236:	b2db      	uxtb	r3, r3
   1e238:	2b00      	cmp	r3, #0
   1e23a:	d003      	beq.n	1e244 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1e23c:	4b0a      	ldr	r3, [pc, #40]	; (1e268 <sd_mmc_init_read_blocks+0xd0>)
   1e23e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1e240:	2305      	movs	r3, #5
   1e242:	e008      	b.n	1e256 <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1e244:	4b0d      	ldr	r3, [pc, #52]	; (1e27c <sd_mmc_init_read_blocks+0xe4>)
   1e246:	1d3a      	adds	r2, r7, #4
   1e248:	8812      	ldrh	r2, [r2, #0]
   1e24a:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1e24c:	4b0c      	ldr	r3, [pc, #48]	; (1e280 <sd_mmc_init_read_blocks+0xe8>)
   1e24e:	1d3a      	adds	r2, r7, #4
   1e250:	8812      	ldrh	r2, [r2, #0]
   1e252:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e254:	2300      	movs	r3, #0
}
   1e256:	0018      	movs	r0, r3
   1e258:	46bd      	mov	sp, r7
   1e25a:	b007      	add	sp, #28
   1e25c:	bd90      	pop	{r4, r7, pc}
   1e25e:	46c0      	nop			; (mov r8, r8)
   1e260:	0001dc79 	.word	0x0001dc79
   1e264:	0001db15 	.word	0x0001db15
   1e268:	0001dd75 	.word	0x0001dd75
   1e26c:	00101112 	.word	0x00101112
   1e270:	00081111 	.word	0x00081111
   1e274:	20003d9c 	.word	0x20003d9c
   1e278:	0001eff5 	.word	0x0001eff5
   1e27c:	20003da2 	.word	0x20003da2
   1e280:	20003da0 	.word	0x20003da0

0001e284 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1e284:	b580      	push	{r7, lr}
   1e286:	b082      	sub	sp, #8
   1e288:	af00      	add	r7, sp, #0
   1e28a:	6078      	str	r0, [r7, #4]
   1e28c:	000a      	movs	r2, r1
   1e28e:	1cbb      	adds	r3, r7, #2
   1e290:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1e292:	1cbb      	adds	r3, r7, #2
   1e294:	881a      	ldrh	r2, [r3, #0]
   1e296:	687b      	ldr	r3, [r7, #4]
   1e298:	0011      	movs	r1, r2
   1e29a:	0018      	movs	r0, r3
   1e29c:	4b0d      	ldr	r3, [pc, #52]	; (1e2d4 <sd_mmc_start_read_blocks+0x50>)
   1e29e:	4798      	blx	r3
   1e2a0:	0003      	movs	r3, r0
   1e2a2:	001a      	movs	r2, r3
   1e2a4:	2301      	movs	r3, #1
   1e2a6:	4053      	eors	r3, r2
   1e2a8:	b2db      	uxtb	r3, r3
   1e2aa:	2b00      	cmp	r3, #0
   1e2ac:	d004      	beq.n	1e2b8 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1e2ae:	4b0a      	ldr	r3, [pc, #40]	; (1e2d8 <sd_mmc_start_read_blocks+0x54>)
   1e2b0:	2200      	movs	r2, #0
   1e2b2:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1e2b4:	2305      	movs	r3, #5
   1e2b6:	e008      	b.n	1e2ca <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1e2b8:	4b07      	ldr	r3, [pc, #28]	; (1e2d8 <sd_mmc_start_read_blocks+0x54>)
   1e2ba:	881a      	ldrh	r2, [r3, #0]
   1e2bc:	1cbb      	adds	r3, r7, #2
   1e2be:	881b      	ldrh	r3, [r3, #0]
   1e2c0:	1ad3      	subs	r3, r2, r3
   1e2c2:	b29a      	uxth	r2, r3
   1e2c4:	4b04      	ldr	r3, [pc, #16]	; (1e2d8 <sd_mmc_start_read_blocks+0x54>)
   1e2c6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e2c8:	2300      	movs	r3, #0
}
   1e2ca:	0018      	movs	r0, r3
   1e2cc:	46bd      	mov	sp, r7
   1e2ce:	b002      	add	sp, #8
   1e2d0:	bd80      	pop	{r7, pc}
   1e2d2:	46c0      	nop			; (mov r8, r8)
   1e2d4:	0001f2c5 	.word	0x0001f2c5
   1e2d8:	20003da2 	.word	0x20003da2

0001e2dc <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1e2dc:	b580      	push	{r7, lr}
   1e2de:	b082      	sub	sp, #8
   1e2e0:	af00      	add	r7, sp, #0
   1e2e2:	0002      	movs	r2, r0
   1e2e4:	1dfb      	adds	r3, r7, #7
   1e2e6:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1e2e8:	4b1c      	ldr	r3, [pc, #112]	; (1e35c <sd_mmc_wait_end_of_read_blocks+0x80>)
   1e2ea:	4798      	blx	r3
   1e2ec:	0003      	movs	r3, r0
   1e2ee:	001a      	movs	r2, r3
   1e2f0:	2301      	movs	r3, #1
   1e2f2:	4053      	eors	r3, r2
   1e2f4:	b2db      	uxtb	r3, r3
   1e2f6:	2b00      	cmp	r3, #0
   1e2f8:	d001      	beq.n	1e2fe <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1e2fa:	2305      	movs	r3, #5
   1e2fc:	e029      	b.n	1e352 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1e2fe:	1dfb      	adds	r3, r7, #7
   1e300:	781b      	ldrb	r3, [r3, #0]
   1e302:	2b00      	cmp	r3, #0
   1e304:	d003      	beq.n	1e30e <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1e306:	4b16      	ldr	r3, [pc, #88]	; (1e360 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1e308:	2200      	movs	r2, #0
   1e30a:	801a      	strh	r2, [r3, #0]
   1e30c:	e005      	b.n	1e31a <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1e30e:	4b14      	ldr	r3, [pc, #80]	; (1e360 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1e310:	881b      	ldrh	r3, [r3, #0]
   1e312:	2b00      	cmp	r3, #0
   1e314:	d001      	beq.n	1e31a <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1e316:	2300      	movs	r3, #0
   1e318:	e01b      	b.n	1e352 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1e31a:	4b12      	ldr	r3, [pc, #72]	; (1e364 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1e31c:	881b      	ldrh	r3, [r3, #0]
   1e31e:	2b01      	cmp	r3, #1
   1e320:	d103      	bne.n	1e32a <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1e322:	4b11      	ldr	r3, [pc, #68]	; (1e368 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1e324:	4798      	blx	r3
		return SD_MMC_OK;
   1e326:	2300      	movs	r3, #0
   1e328:	e013      	b.n	1e352 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1e32a:	4b10      	ldr	r3, [pc, #64]	; (1e36c <sd_mmc_wait_end_of_read_blocks+0x90>)
   1e32c:	2100      	movs	r1, #0
   1e32e:	0018      	movs	r0, r3
   1e330:	4b0f      	ldr	r3, [pc, #60]	; (1e370 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1e332:	4798      	blx	r3
   1e334:	0003      	movs	r3, r0
   1e336:	001a      	movs	r2, r3
   1e338:	2301      	movs	r3, #1
   1e33a:	4053      	eors	r3, r2
   1e33c:	b2db      	uxtb	r3, r3
   1e33e:	2b00      	cmp	r3, #0
   1e340:	d004      	beq.n	1e34c <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1e342:	4b0a      	ldr	r3, [pc, #40]	; (1e36c <sd_mmc_wait_end_of_read_blocks+0x90>)
   1e344:	2100      	movs	r1, #0
   1e346:	0018      	movs	r0, r3
   1e348:	4b09      	ldr	r3, [pc, #36]	; (1e370 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1e34a:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1e34c:	4b06      	ldr	r3, [pc, #24]	; (1e368 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1e34e:	4798      	blx	r3
	return SD_MMC_OK;
   1e350:	2300      	movs	r3, #0
}
   1e352:	0018      	movs	r0, r3
   1e354:	46bd      	mov	sp, r7
   1e356:	b002      	add	sp, #8
   1e358:	bd80      	pop	{r7, pc}
   1e35a:	46c0      	nop			; (mov r8, r8)
   1e35c:	0001f369 	.word	0x0001f369
   1e360:	20003da2 	.word	0x20003da2
   1e364:	20003da0 	.word	0x20003da0
   1e368:	0001dd75 	.word	0x0001dd75
   1e36c:	0000310c 	.word	0x0000310c
   1e370:	0001efcd 	.word	0x0001efcd

0001e374 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1e374:	b590      	push	{r4, r7, lr}
   1e376:	b089      	sub	sp, #36	; 0x24
   1e378:	af02      	add	r7, sp, #8
   1e37a:	6039      	str	r1, [r7, #0]
   1e37c:	0011      	movs	r1, r2
   1e37e:	1dfb      	adds	r3, r7, #7
   1e380:	1c02      	adds	r2, r0, #0
   1e382:	701a      	strb	r2, [r3, #0]
   1e384:	1d3b      	adds	r3, r7, #4
   1e386:	1c0a      	adds	r2, r1, #0
   1e388:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1e38a:	230f      	movs	r3, #15
   1e38c:	18fc      	adds	r4, r7, r3
   1e38e:	1dfb      	adds	r3, r7, #7
   1e390:	781b      	ldrb	r3, [r3, #0]
   1e392:	0018      	movs	r0, r3
   1e394:	4b28      	ldr	r3, [pc, #160]	; (1e438 <sd_mmc_init_write_blocks+0xc4>)
   1e396:	4798      	blx	r3
   1e398:	0003      	movs	r3, r0
   1e39a:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1e39c:	230f      	movs	r3, #15
   1e39e:	18fb      	adds	r3, r7, r3
   1e3a0:	781b      	ldrb	r3, [r3, #0]
   1e3a2:	2b00      	cmp	r3, #0
   1e3a4:	d003      	beq.n	1e3ae <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1e3a6:	230f      	movs	r3, #15
   1e3a8:	18fb      	adds	r3, r7, r3
   1e3aa:	781b      	ldrb	r3, [r3, #0]
   1e3ac:	e03f      	b.n	1e42e <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1e3ae:	1dfb      	adds	r3, r7, #7
   1e3b0:	781b      	ldrb	r3, [r3, #0]
   1e3b2:	0018      	movs	r0, r3
   1e3b4:	4b21      	ldr	r3, [pc, #132]	; (1e43c <sd_mmc_init_write_blocks+0xc8>)
   1e3b6:	4798      	blx	r3
   1e3b8:	1e03      	subs	r3, r0, #0
   1e3ba:	d003      	beq.n	1e3c4 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1e3bc:	4b20      	ldr	r3, [pc, #128]	; (1e440 <sd_mmc_init_write_blocks+0xcc>)
   1e3be:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1e3c0:	2307      	movs	r3, #7
   1e3c2:	e034      	b.n	1e42e <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1e3c4:	1d3b      	adds	r3, r7, #4
   1e3c6:	881b      	ldrh	r3, [r3, #0]
   1e3c8:	2b01      	cmp	r3, #1
   1e3ca:	d902      	bls.n	1e3d2 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1e3cc:	4b1d      	ldr	r3, [pc, #116]	; (1e444 <sd_mmc_init_write_blocks+0xd0>)
   1e3ce:	617b      	str	r3, [r7, #20]
   1e3d0:	e001      	b.n	1e3d6 <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1e3d2:	4b1d      	ldr	r3, [pc, #116]	; (1e448 <sd_mmc_init_write_blocks+0xd4>)
   1e3d4:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1e3d6:	4b1d      	ldr	r3, [pc, #116]	; (1e44c <sd_mmc_init_write_blocks+0xd8>)
   1e3d8:	681b      	ldr	r3, [r3, #0]
   1e3da:	7adb      	ldrb	r3, [r3, #11]
   1e3dc:	001a      	movs	r2, r3
   1e3de:	2308      	movs	r3, #8
   1e3e0:	4013      	ands	r3, r2
   1e3e2:	d002      	beq.n	1e3ea <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1e3e4:	683b      	ldr	r3, [r7, #0]
   1e3e6:	613b      	str	r3, [r7, #16]
   1e3e8:	e002      	b.n	1e3f0 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1e3ea:	683b      	ldr	r3, [r7, #0]
   1e3ec:	025b      	lsls	r3, r3, #9
   1e3ee:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1e3f0:	1d3b      	adds	r3, r7, #4
   1e3f2:	881c      	ldrh	r4, [r3, #0]
   1e3f4:	2380      	movs	r3, #128	; 0x80
   1e3f6:	009a      	lsls	r2, r3, #2
   1e3f8:	6939      	ldr	r1, [r7, #16]
   1e3fa:	6978      	ldr	r0, [r7, #20]
   1e3fc:	2301      	movs	r3, #1
   1e3fe:	9300      	str	r3, [sp, #0]
   1e400:	0023      	movs	r3, r4
   1e402:	4c13      	ldr	r4, [pc, #76]	; (1e450 <sd_mmc_init_write_blocks+0xdc>)
   1e404:	47a0      	blx	r4
   1e406:	0003      	movs	r3, r0
   1e408:	001a      	movs	r2, r3
   1e40a:	2301      	movs	r3, #1
   1e40c:	4053      	eors	r3, r2
   1e40e:	b2db      	uxtb	r3, r3
   1e410:	2b00      	cmp	r3, #0
   1e412:	d003      	beq.n	1e41c <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1e414:	4b0a      	ldr	r3, [pc, #40]	; (1e440 <sd_mmc_init_write_blocks+0xcc>)
   1e416:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1e418:	2305      	movs	r3, #5
   1e41a:	e008      	b.n	1e42e <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1e41c:	4b0d      	ldr	r3, [pc, #52]	; (1e454 <sd_mmc_init_write_blocks+0xe0>)
   1e41e:	1d3a      	adds	r2, r7, #4
   1e420:	8812      	ldrh	r2, [r2, #0]
   1e422:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1e424:	4b0c      	ldr	r3, [pc, #48]	; (1e458 <sd_mmc_init_write_blocks+0xe4>)
   1e426:	1d3a      	adds	r2, r7, #4
   1e428:	8812      	ldrh	r2, [r2, #0]
   1e42a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e42c:	2300      	movs	r3, #0
}
   1e42e:	0018      	movs	r0, r3
   1e430:	46bd      	mov	sp, r7
   1e432:	b007      	add	sp, #28
   1e434:	bd90      	pop	{r4, r7, pc}
   1e436:	46c0      	nop			; (mov r8, r8)
   1e438:	0001dc79 	.word	0x0001dc79
   1e43c:	0001e181 	.word	0x0001e181
   1e440:	0001dd75 	.word	0x0001dd75
   1e444:	00109119 	.word	0x00109119
   1e448:	00089118 	.word	0x00089118
   1e44c:	20003d9c 	.word	0x20003d9c
   1e450:	0001eff5 	.word	0x0001eff5
   1e454:	20003da2 	.word	0x20003da2
   1e458:	20003da0 	.word	0x20003da0

0001e45c <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1e45c:	b580      	push	{r7, lr}
   1e45e:	b082      	sub	sp, #8
   1e460:	af00      	add	r7, sp, #0
   1e462:	6078      	str	r0, [r7, #4]
   1e464:	000a      	movs	r2, r1
   1e466:	1cbb      	adds	r3, r7, #2
   1e468:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1e46a:	1cbb      	adds	r3, r7, #2
   1e46c:	881a      	ldrh	r2, [r3, #0]
   1e46e:	687b      	ldr	r3, [r7, #4]
   1e470:	0011      	movs	r1, r2
   1e472:	0018      	movs	r0, r3
   1e474:	4b0d      	ldr	r3, [pc, #52]	; (1e4ac <sd_mmc_start_write_blocks+0x50>)
   1e476:	4798      	blx	r3
   1e478:	0003      	movs	r3, r0
   1e47a:	001a      	movs	r2, r3
   1e47c:	2301      	movs	r3, #1
   1e47e:	4053      	eors	r3, r2
   1e480:	b2db      	uxtb	r3, r3
   1e482:	2b00      	cmp	r3, #0
   1e484:	d004      	beq.n	1e490 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1e486:	4b0a      	ldr	r3, [pc, #40]	; (1e4b0 <sd_mmc_start_write_blocks+0x54>)
   1e488:	2200      	movs	r2, #0
   1e48a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1e48c:	2305      	movs	r3, #5
   1e48e:	e008      	b.n	1e4a2 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1e490:	4b07      	ldr	r3, [pc, #28]	; (1e4b0 <sd_mmc_start_write_blocks+0x54>)
   1e492:	881a      	ldrh	r2, [r3, #0]
   1e494:	1cbb      	adds	r3, r7, #2
   1e496:	881b      	ldrh	r3, [r3, #0]
   1e498:	1ad3      	subs	r3, r2, r3
   1e49a:	b29a      	uxth	r2, r3
   1e49c:	4b04      	ldr	r3, [pc, #16]	; (1e4b0 <sd_mmc_start_write_blocks+0x54>)
   1e49e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1e4a0:	2300      	movs	r3, #0
}
   1e4a2:	0018      	movs	r0, r3
   1e4a4:	46bd      	mov	sp, r7
   1e4a6:	b002      	add	sp, #8
   1e4a8:	bd80      	pop	{r7, pc}
   1e4aa:	46c0      	nop			; (mov r8, r8)
   1e4ac:	0001f375 	.word	0x0001f375
   1e4b0:	20003da2 	.word	0x20003da2

0001e4b4 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1e4b4:	b580      	push	{r7, lr}
   1e4b6:	b082      	sub	sp, #8
   1e4b8:	af00      	add	r7, sp, #0
   1e4ba:	0002      	movs	r2, r0
   1e4bc:	1dfb      	adds	r3, r7, #7
   1e4be:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1e4c0:	4b13      	ldr	r3, [pc, #76]	; (1e510 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1e4c2:	4798      	blx	r3
   1e4c4:	0003      	movs	r3, r0
   1e4c6:	001a      	movs	r2, r3
   1e4c8:	2301      	movs	r3, #1
   1e4ca:	4053      	eors	r3, r2
   1e4cc:	b2db      	uxtb	r3, r3
   1e4ce:	2b00      	cmp	r3, #0
   1e4d0:	d001      	beq.n	1e4d6 <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1e4d2:	2305      	movs	r3, #5
   1e4d4:	e018      	b.n	1e508 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1e4d6:	1dfb      	adds	r3, r7, #7
   1e4d8:	781b      	ldrb	r3, [r3, #0]
   1e4da:	2b00      	cmp	r3, #0
   1e4dc:	d003      	beq.n	1e4e6 <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1e4de:	4b0d      	ldr	r3, [pc, #52]	; (1e514 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1e4e0:	2200      	movs	r2, #0
   1e4e2:	801a      	strh	r2, [r3, #0]
   1e4e4:	e005      	b.n	1e4f2 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1e4e6:	4b0b      	ldr	r3, [pc, #44]	; (1e514 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1e4e8:	881b      	ldrh	r3, [r3, #0]
   1e4ea:	2b00      	cmp	r3, #0
   1e4ec:	d001      	beq.n	1e4f2 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1e4ee:	2300      	movs	r3, #0
   1e4f0:	e00a      	b.n	1e508 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1e4f2:	4b09      	ldr	r3, [pc, #36]	; (1e518 <sd_mmc_wait_end_of_write_blocks+0x64>)
   1e4f4:	881b      	ldrh	r3, [r3, #0]
   1e4f6:	2b01      	cmp	r3, #1
   1e4f8:	d103      	bne.n	1e502 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1e4fa:	4b08      	ldr	r3, [pc, #32]	; (1e51c <sd_mmc_wait_end_of_write_blocks+0x68>)
   1e4fc:	4798      	blx	r3
		return SD_MMC_OK;
   1e4fe:	2300      	movs	r3, #0
   1e500:	e002      	b.n	1e508 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1e502:	4b06      	ldr	r3, [pc, #24]	; (1e51c <sd_mmc_wait_end_of_write_blocks+0x68>)
   1e504:	4798      	blx	r3
	return SD_MMC_OK;
   1e506:	2300      	movs	r3, #0
}
   1e508:	0018      	movs	r0, r3
   1e50a:	46bd      	mov	sp, r7
   1e50c:	b002      	add	sp, #8
   1e50e:	bd80      	pop	{r7, pc}
   1e510:	0001f435 	.word	0x0001f435
   1e514:	20003da2 	.word	0x20003da2
   1e518:	20003da0 	.word	0x20003da0
   1e51c:	0001dd75 	.word	0x0001dd75

0001e520 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1e520:	b580      	push	{r7, lr}
   1e522:	b082      	sub	sp, #8
   1e524:	af00      	add	r7, sp, #0
   1e526:	0002      	movs	r2, r0
   1e528:	1dfb      	adds	r3, r7, #7
   1e52a:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1e52c:	1dfb      	adds	r3, r7, #7
   1e52e:	781b      	ldrb	r3, [r3, #0]
   1e530:	0018      	movs	r0, r3
   1e532:	4b16      	ldr	r3, [pc, #88]	; (1e58c <sd_mmc_test_unit_ready+0x6c>)
   1e534:	4798      	blx	r3
   1e536:	0003      	movs	r3, r0
   1e538:	2b01      	cmp	r3, #1
   1e53a:	d019      	beq.n	1e570 <sd_mmc_test_unit_ready+0x50>
   1e53c:	2b02      	cmp	r3, #2
   1e53e:	d019      	beq.n	1e574 <sd_mmc_test_unit_ready+0x54>
   1e540:	2b00      	cmp	r3, #0
   1e542:	d11e      	bne.n	1e582 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1e544:	1dfb      	adds	r3, r7, #7
   1e546:	781b      	ldrb	r3, [r3, #0]
   1e548:	4a11      	ldr	r2, [pc, #68]	; (1e590 <sd_mmc_test_unit_ready+0x70>)
   1e54a:	5cd3      	ldrb	r3, [r2, r3]
   1e54c:	2b00      	cmp	r3, #0
   1e54e:	d001      	beq.n	1e554 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1e550:	2302      	movs	r3, #2
   1e552:	e017      	b.n	1e584 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1e554:	1dfb      	adds	r3, r7, #7
   1e556:	781b      	ldrb	r3, [r3, #0]
   1e558:	0018      	movs	r0, r3
   1e55a:	4b0e      	ldr	r3, [pc, #56]	; (1e594 <sd_mmc_test_unit_ready+0x74>)
   1e55c:	4798      	blx	r3
   1e55e:	0003      	movs	r3, r0
   1e560:	001a      	movs	r2, r3
   1e562:	2303      	movs	r3, #3
   1e564:	4013      	ands	r3, r2
   1e566:	d001      	beq.n	1e56c <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1e568:	2300      	movs	r3, #0
   1e56a:	e00b      	b.n	1e584 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1e56c:	2302      	movs	r3, #2
   1e56e:	e009      	b.n	1e584 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1e570:	2303      	movs	r3, #3
   1e572:	e007      	b.n	1e584 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1e574:	1dfb      	adds	r3, r7, #7
   1e576:	781b      	ldrb	r3, [r3, #0]
   1e578:	4a05      	ldr	r2, [pc, #20]	; (1e590 <sd_mmc_test_unit_ready+0x70>)
   1e57a:	2100      	movs	r1, #0
   1e57c:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1e57e:	2302      	movs	r3, #2
   1e580:	e000      	b.n	1e584 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1e582:	2301      	movs	r3, #1
	}
}
   1e584:	0018      	movs	r0, r3
   1e586:	46bd      	mov	sp, r7
   1e588:	b002      	add	sp, #8
   1e58a:	bd80      	pop	{r7, pc}
   1e58c:	0001e095 	.word	0x0001e095
   1e590:	20003da4 	.word	0x20003da4
   1e594:	0001e109 	.word	0x0001e109

0001e598 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1e598:	b580      	push	{r7, lr}
   1e59a:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1e59c:	2000      	movs	r0, #0
   1e59e:	4b03      	ldr	r3, [pc, #12]	; (1e5ac <sd_mmc_test_unit_ready_0+0x14>)
   1e5a0:	4798      	blx	r3
   1e5a2:	0003      	movs	r3, r0
}
   1e5a4:	0018      	movs	r0, r3
   1e5a6:	46bd      	mov	sp, r7
   1e5a8:	bd80      	pop	{r7, pc}
   1e5aa:	46c0      	nop			; (mov r8, r8)
   1e5ac:	0001e521 	.word	0x0001e521

0001e5b0 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1e5b0:	b580      	push	{r7, lr}
   1e5b2:	b082      	sub	sp, #8
   1e5b4:	af00      	add	r7, sp, #0
   1e5b6:	0002      	movs	r2, r0
   1e5b8:	6039      	str	r1, [r7, #0]
   1e5ba:	1dfb      	adds	r3, r7, #7
   1e5bc:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1e5be:	1dfb      	adds	r3, r7, #7
   1e5c0:	781b      	ldrb	r3, [r3, #0]
   1e5c2:	0018      	movs	r0, r3
   1e5c4:	4b08      	ldr	r3, [pc, #32]	; (1e5e8 <sd_mmc_read_capacity+0x38>)
   1e5c6:	4798      	blx	r3
   1e5c8:	0003      	movs	r3, r0
   1e5ca:	005b      	lsls	r3, r3, #1
   1e5cc:	1e5a      	subs	r2, r3, #1
   1e5ce:	683b      	ldr	r3, [r7, #0]
   1e5d0:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1e5d2:	1dfb      	adds	r3, r7, #7
   1e5d4:	781b      	ldrb	r3, [r3, #0]
   1e5d6:	0018      	movs	r0, r3
   1e5d8:	4b04      	ldr	r3, [pc, #16]	; (1e5ec <sd_mmc_read_capacity+0x3c>)
   1e5da:	4798      	blx	r3
   1e5dc:	0003      	movs	r3, r0
}
   1e5de:	0018      	movs	r0, r3
   1e5e0:	46bd      	mov	sp, r7
   1e5e2:	b002      	add	sp, #8
   1e5e4:	bd80      	pop	{r7, pc}
   1e5e6:	46c0      	nop			; (mov r8, r8)
   1e5e8:	0001e145 	.word	0x0001e145
   1e5ec:	0001e521 	.word	0x0001e521

0001e5f0 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1e5f0:	b580      	push	{r7, lr}
   1e5f2:	b082      	sub	sp, #8
   1e5f4:	af00      	add	r7, sp, #0
   1e5f6:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1e5f8:	687b      	ldr	r3, [r7, #4]
   1e5fa:	0019      	movs	r1, r3
   1e5fc:	2000      	movs	r0, #0
   1e5fe:	4b03      	ldr	r3, [pc, #12]	; (1e60c <sd_mmc_read_capacity_0+0x1c>)
   1e600:	4798      	blx	r3
   1e602:	0003      	movs	r3, r0
}
   1e604:	0018      	movs	r0, r3
   1e606:	46bd      	mov	sp, r7
   1e608:	b002      	add	sp, #8
   1e60a:	bd80      	pop	{r7, pc}
   1e60c:	0001e5b1 	.word	0x0001e5b1

0001e610 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1e610:	b580      	push	{r7, lr}
   1e612:	b082      	sub	sp, #8
   1e614:	af00      	add	r7, sp, #0
   1e616:	0002      	movs	r2, r0
   1e618:	1dfb      	adds	r3, r7, #7
   1e61a:	701a      	strb	r2, [r3, #0]
   1e61c:	1dbb      	adds	r3, r7, #6
   1e61e:	1c0a      	adds	r2, r1, #0
   1e620:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1e622:	1dfb      	adds	r3, r7, #7
   1e624:	781b      	ldrb	r3, [r3, #0]
   1e626:	4a04      	ldr	r2, [pc, #16]	; (1e638 <sd_mmc_unload+0x28>)
   1e628:	1db9      	adds	r1, r7, #6
   1e62a:	7809      	ldrb	r1, [r1, #0]
   1e62c:	54d1      	strb	r1, [r2, r3]
	return true;
   1e62e:	2301      	movs	r3, #1
}
   1e630:	0018      	movs	r0, r3
   1e632:	46bd      	mov	sp, r7
   1e634:	b002      	add	sp, #8
   1e636:	bd80      	pop	{r7, pc}
   1e638:	20003da4 	.word	0x20003da4

0001e63c <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1e63c:	b580      	push	{r7, lr}
   1e63e:	b082      	sub	sp, #8
   1e640:	af00      	add	r7, sp, #0
   1e642:	0002      	movs	r2, r0
   1e644:	1dfb      	adds	r3, r7, #7
   1e646:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1e648:	1dfb      	adds	r3, r7, #7
   1e64a:	781b      	ldrb	r3, [r3, #0]
   1e64c:	0019      	movs	r1, r3
   1e64e:	2000      	movs	r0, #0
   1e650:	4b03      	ldr	r3, [pc, #12]	; (1e660 <sd_mmc_unload_0+0x24>)
   1e652:	4798      	blx	r3
   1e654:	0003      	movs	r3, r0
}
   1e656:	0018      	movs	r0, r3
   1e658:	46bd      	mov	sp, r7
   1e65a:	b002      	add	sp, #8
   1e65c:	bd80      	pop	{r7, pc}
   1e65e:	46c0      	nop			; (mov r8, r8)
   1e660:	0001e611 	.word	0x0001e611

0001e664 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1e664:	b580      	push	{r7, lr}
   1e666:	b082      	sub	sp, #8
   1e668:	af00      	add	r7, sp, #0
   1e66a:	0002      	movs	r2, r0
   1e66c:	1dfb      	adds	r3, r7, #7
   1e66e:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1e670:	1dfb      	adds	r3, r7, #7
   1e672:	781b      	ldrb	r3, [r3, #0]
   1e674:	0018      	movs	r0, r3
   1e676:	4b03      	ldr	r3, [pc, #12]	; (1e684 <sd_mmc_wr_protect+0x20>)
   1e678:	4798      	blx	r3
   1e67a:	0003      	movs	r3, r0
}
   1e67c:	0018      	movs	r0, r3
   1e67e:	46bd      	mov	sp, r7
   1e680:	b002      	add	sp, #8
   1e682:	bd80      	pop	{r7, pc}
   1e684:	0001e181 	.word	0x0001e181

0001e688 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1e688:	b580      	push	{r7, lr}
   1e68a:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1e68c:	2000      	movs	r0, #0
   1e68e:	4b03      	ldr	r3, [pc, #12]	; (1e69c <sd_mmc_wr_protect_0+0x14>)
   1e690:	4798      	blx	r3
   1e692:	0003      	movs	r3, r0
}
   1e694:	0018      	movs	r0, r3
   1e696:	46bd      	mov	sp, r7
   1e698:	bd80      	pop	{r7, pc}
   1e69a:	46c0      	nop			; (mov r8, r8)
   1e69c:	0001e665 	.word	0x0001e665

0001e6a0 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1e6a0:	b580      	push	{r7, lr}
   1e6a2:	b082      	sub	sp, #8
   1e6a4:	af00      	add	r7, sp, #0
   1e6a6:	0002      	movs	r2, r0
   1e6a8:	1dfb      	adds	r3, r7, #7
   1e6aa:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1e6ac:	2301      	movs	r3, #1
}
   1e6ae:	0018      	movs	r0, r3
   1e6b0:	46bd      	mov	sp, r7
   1e6b2:	b002      	add	sp, #8
   1e6b4:	bd80      	pop	{r7, pc}
	...

0001e6b8 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1e6b8:	b580      	push	{r7, lr}
   1e6ba:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1e6bc:	2000      	movs	r0, #0
   1e6be:	4b03      	ldr	r3, [pc, #12]	; (1e6cc <sd_mmc_removal_0+0x14>)
   1e6c0:	4798      	blx	r3
   1e6c2:	0003      	movs	r3, r0
}
   1e6c4:	0018      	movs	r0, r3
   1e6c6:	46bd      	mov	sp, r7
   1e6c8:	bd80      	pop	{r7, pc}
   1e6ca:	46c0      	nop			; (mov r8, r8)
   1e6cc:	0001e6a1 	.word	0x0001e6a1

0001e6d0 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1e6d0:	b580      	push	{r7, lr}
   1e6d2:	b084      	sub	sp, #16
   1e6d4:	af00      	add	r7, sp, #0
   1e6d6:	60b9      	str	r1, [r7, #8]
   1e6d8:	607a      	str	r2, [r7, #4]
   1e6da:	230f      	movs	r3, #15
   1e6dc:	18fb      	adds	r3, r7, r3
   1e6de:	1c02      	adds	r2, r0, #0
   1e6e0:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1e6e2:	68b9      	ldr	r1, [r7, #8]
   1e6e4:	230f      	movs	r3, #15
   1e6e6:	18fb      	adds	r3, r7, r3
   1e6e8:	781b      	ldrb	r3, [r3, #0]
   1e6ea:	2201      	movs	r2, #1
   1e6ec:	0018      	movs	r0, r3
   1e6ee:	4b10      	ldr	r3, [pc, #64]	; (1e730 <sd_mmc_mem_2_ram+0x60>)
   1e6f0:	4798      	blx	r3
   1e6f2:	1e03      	subs	r3, r0, #0
   1e6f4:	d005      	beq.n	1e702 <sd_mmc_mem_2_ram+0x32>
   1e6f6:	2b02      	cmp	r3, #2
   1e6f8:	d101      	bne.n	1e6fe <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1e6fa:	2302      	movs	r3, #2
   1e6fc:	e013      	b.n	1e726 <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1e6fe:	2301      	movs	r3, #1
   1e700:	e011      	b.n	1e726 <sd_mmc_mem_2_ram+0x56>
		break;
   1e702:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1e704:	687b      	ldr	r3, [r7, #4]
   1e706:	2101      	movs	r1, #1
   1e708:	0018      	movs	r0, r3
   1e70a:	4b0a      	ldr	r3, [pc, #40]	; (1e734 <sd_mmc_mem_2_ram+0x64>)
   1e70c:	4798      	blx	r3
   1e70e:	1e03      	subs	r3, r0, #0
   1e710:	d001      	beq.n	1e716 <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1e712:	2301      	movs	r3, #1
   1e714:	e007      	b.n	1e726 <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1e716:	2000      	movs	r0, #0
   1e718:	4b07      	ldr	r3, [pc, #28]	; (1e738 <sd_mmc_mem_2_ram+0x68>)
   1e71a:	4798      	blx	r3
   1e71c:	1e03      	subs	r3, r0, #0
   1e71e:	d001      	beq.n	1e724 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1e720:	2301      	movs	r3, #1
   1e722:	e000      	b.n	1e726 <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1e724:	2300      	movs	r3, #0
}
   1e726:	0018      	movs	r0, r3
   1e728:	46bd      	mov	sp, r7
   1e72a:	b004      	add	sp, #16
   1e72c:	bd80      	pop	{r7, pc}
   1e72e:	46c0      	nop			; (mov r8, r8)
   1e730:	0001e199 	.word	0x0001e199
   1e734:	0001e285 	.word	0x0001e285
   1e738:	0001e2dd 	.word	0x0001e2dd

0001e73c <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1e73c:	b580      	push	{r7, lr}
   1e73e:	b082      	sub	sp, #8
   1e740:	af00      	add	r7, sp, #0
   1e742:	6078      	str	r0, [r7, #4]
   1e744:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1e746:	683a      	ldr	r2, [r7, #0]
   1e748:	687b      	ldr	r3, [r7, #4]
   1e74a:	0019      	movs	r1, r3
   1e74c:	2000      	movs	r0, #0
   1e74e:	4b03      	ldr	r3, [pc, #12]	; (1e75c <sd_mmc_mem_2_ram_0+0x20>)
   1e750:	4798      	blx	r3
   1e752:	0003      	movs	r3, r0
}
   1e754:	0018      	movs	r0, r3
   1e756:	46bd      	mov	sp, r7
   1e758:	b002      	add	sp, #8
   1e75a:	bd80      	pop	{r7, pc}
   1e75c:	0001e6d1 	.word	0x0001e6d1

0001e760 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1e760:	b580      	push	{r7, lr}
   1e762:	b084      	sub	sp, #16
   1e764:	af00      	add	r7, sp, #0
   1e766:	60b9      	str	r1, [r7, #8]
   1e768:	607a      	str	r2, [r7, #4]
   1e76a:	230f      	movs	r3, #15
   1e76c:	18fb      	adds	r3, r7, r3
   1e76e:	1c02      	adds	r2, r0, #0
   1e770:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1e772:	68b9      	ldr	r1, [r7, #8]
   1e774:	230f      	movs	r3, #15
   1e776:	18fb      	adds	r3, r7, r3
   1e778:	781b      	ldrb	r3, [r3, #0]
   1e77a:	2201      	movs	r2, #1
   1e77c:	0018      	movs	r0, r3
   1e77e:	4b10      	ldr	r3, [pc, #64]	; (1e7c0 <sd_mmc_ram_2_mem+0x60>)
   1e780:	4798      	blx	r3
   1e782:	1e03      	subs	r3, r0, #0
   1e784:	d005      	beq.n	1e792 <sd_mmc_ram_2_mem+0x32>
   1e786:	2b02      	cmp	r3, #2
   1e788:	d101      	bne.n	1e78e <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1e78a:	2302      	movs	r3, #2
   1e78c:	e013      	b.n	1e7b6 <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1e78e:	2301      	movs	r3, #1
   1e790:	e011      	b.n	1e7b6 <sd_mmc_ram_2_mem+0x56>
		break;
   1e792:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1e794:	687b      	ldr	r3, [r7, #4]
   1e796:	2101      	movs	r1, #1
   1e798:	0018      	movs	r0, r3
   1e79a:	4b0a      	ldr	r3, [pc, #40]	; (1e7c4 <sd_mmc_ram_2_mem+0x64>)
   1e79c:	4798      	blx	r3
   1e79e:	1e03      	subs	r3, r0, #0
   1e7a0:	d001      	beq.n	1e7a6 <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1e7a2:	2301      	movs	r3, #1
   1e7a4:	e007      	b.n	1e7b6 <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1e7a6:	2000      	movs	r0, #0
   1e7a8:	4b07      	ldr	r3, [pc, #28]	; (1e7c8 <sd_mmc_ram_2_mem+0x68>)
   1e7aa:	4798      	blx	r3
   1e7ac:	1e03      	subs	r3, r0, #0
   1e7ae:	d001      	beq.n	1e7b4 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1e7b0:	2301      	movs	r3, #1
   1e7b2:	e000      	b.n	1e7b6 <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1e7b4:	2300      	movs	r3, #0
}
   1e7b6:	0018      	movs	r0, r3
   1e7b8:	46bd      	mov	sp, r7
   1e7ba:	b004      	add	sp, #16
   1e7bc:	bd80      	pop	{r7, pc}
   1e7be:	46c0      	nop			; (mov r8, r8)
   1e7c0:	0001e375 	.word	0x0001e375
   1e7c4:	0001e45d 	.word	0x0001e45d
   1e7c8:	0001e4b5 	.word	0x0001e4b5

0001e7cc <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1e7cc:	b580      	push	{r7, lr}
   1e7ce:	b082      	sub	sp, #8
   1e7d0:	af00      	add	r7, sp, #0
   1e7d2:	6078      	str	r0, [r7, #4]
   1e7d4:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1e7d6:	683a      	ldr	r2, [r7, #0]
   1e7d8:	687b      	ldr	r3, [r7, #4]
   1e7da:	0019      	movs	r1, r3
   1e7dc:	2000      	movs	r0, #0
   1e7de:	4b03      	ldr	r3, [pc, #12]	; (1e7ec <sd_mmc_ram_2_mem_0+0x20>)
   1e7e0:	4798      	blx	r3
   1e7e2:	0003      	movs	r3, r0
}
   1e7e4:	0018      	movs	r0, r3
   1e7e6:	46bd      	mov	sp, r7
   1e7e8:	b002      	add	sp, #8
   1e7ea:	bd80      	pop	{r7, pc}
   1e7ec:	0001e761 	.word	0x0001e761

0001e7f0 <system_pinmux_get_group_from_gpio_pin>:
{
   1e7f0:	b580      	push	{r7, lr}
   1e7f2:	b084      	sub	sp, #16
   1e7f4:	af00      	add	r7, sp, #0
   1e7f6:	0002      	movs	r2, r0
   1e7f8:	1dfb      	adds	r3, r7, #7
   1e7fa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1e7fc:	230f      	movs	r3, #15
   1e7fe:	18fb      	adds	r3, r7, r3
   1e800:	1dfa      	adds	r2, r7, #7
   1e802:	7812      	ldrb	r2, [r2, #0]
   1e804:	09d2      	lsrs	r2, r2, #7
   1e806:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1e808:	230e      	movs	r3, #14
   1e80a:	18fb      	adds	r3, r7, r3
   1e80c:	1dfa      	adds	r2, r7, #7
   1e80e:	7812      	ldrb	r2, [r2, #0]
   1e810:	0952      	lsrs	r2, r2, #5
   1e812:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1e814:	4b0d      	ldr	r3, [pc, #52]	; (1e84c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1e816:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1e818:	230f      	movs	r3, #15
   1e81a:	18fb      	adds	r3, r7, r3
   1e81c:	781b      	ldrb	r3, [r3, #0]
   1e81e:	2b00      	cmp	r3, #0
   1e820:	d10f      	bne.n	1e842 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1e822:	230f      	movs	r3, #15
   1e824:	18fb      	adds	r3, r7, r3
   1e826:	781b      	ldrb	r3, [r3, #0]
   1e828:	009b      	lsls	r3, r3, #2
   1e82a:	2210      	movs	r2, #16
   1e82c:	4694      	mov	ip, r2
   1e82e:	44bc      	add	ip, r7
   1e830:	4463      	add	r3, ip
   1e832:	3b08      	subs	r3, #8
   1e834:	681a      	ldr	r2, [r3, #0]
   1e836:	230e      	movs	r3, #14
   1e838:	18fb      	adds	r3, r7, r3
   1e83a:	781b      	ldrb	r3, [r3, #0]
   1e83c:	01db      	lsls	r3, r3, #7
   1e83e:	18d3      	adds	r3, r2, r3
   1e840:	e000      	b.n	1e844 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1e842:	2300      	movs	r3, #0
}
   1e844:	0018      	movs	r0, r3
   1e846:	46bd      	mov	sp, r7
   1e848:	b004      	add	sp, #16
   1e84a:	bd80      	pop	{r7, pc}
   1e84c:	41004400 	.word	0x41004400

0001e850 <system_interrupt_enable>:
{
   1e850:	b580      	push	{r7, lr}
   1e852:	b082      	sub	sp, #8
   1e854:	af00      	add	r7, sp, #0
   1e856:	0002      	movs	r2, r0
   1e858:	1dfb      	adds	r3, r7, #7
   1e85a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e85c:	4b06      	ldr	r3, [pc, #24]	; (1e878 <system_interrupt_enable+0x28>)
   1e85e:	1dfa      	adds	r2, r7, #7
   1e860:	7812      	ldrb	r2, [r2, #0]
   1e862:	0011      	movs	r1, r2
   1e864:	221f      	movs	r2, #31
   1e866:	400a      	ands	r2, r1
   1e868:	2101      	movs	r1, #1
   1e86a:	4091      	lsls	r1, r2
   1e86c:	000a      	movs	r2, r1
   1e86e:	601a      	str	r2, [r3, #0]
}
   1e870:	46c0      	nop			; (mov r8, r8)
   1e872:	46bd      	mov	sp, r7
   1e874:	b002      	add	sp, #8
   1e876:	bd80      	pop	{r7, pc}
   1e878:	e000e100 	.word	0xe000e100

0001e87c <port_get_group_from_gpio_pin>:
{
   1e87c:	b580      	push	{r7, lr}
   1e87e:	b082      	sub	sp, #8
   1e880:	af00      	add	r7, sp, #0
   1e882:	0002      	movs	r2, r0
   1e884:	1dfb      	adds	r3, r7, #7
   1e886:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1e888:	1dfb      	adds	r3, r7, #7
   1e88a:	781b      	ldrb	r3, [r3, #0]
   1e88c:	0018      	movs	r0, r3
   1e88e:	4b03      	ldr	r3, [pc, #12]	; (1e89c <port_get_group_from_gpio_pin+0x20>)
   1e890:	4798      	blx	r3
   1e892:	0003      	movs	r3, r0
}
   1e894:	0018      	movs	r0, r3
   1e896:	46bd      	mov	sp, r7
   1e898:	b002      	add	sp, #8
   1e89a:	bd80      	pop	{r7, pc}
   1e89c:	0001e7f1 	.word	0x0001e7f1

0001e8a0 <port_get_config_defaults>:
{
   1e8a0:	b580      	push	{r7, lr}
   1e8a2:	b082      	sub	sp, #8
   1e8a4:	af00      	add	r7, sp, #0
   1e8a6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1e8a8:	687b      	ldr	r3, [r7, #4]
   1e8aa:	2200      	movs	r2, #0
   1e8ac:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1e8ae:	687b      	ldr	r3, [r7, #4]
   1e8b0:	2201      	movs	r2, #1
   1e8b2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1e8b4:	687b      	ldr	r3, [r7, #4]
   1e8b6:	2200      	movs	r2, #0
   1e8b8:	709a      	strb	r2, [r3, #2]
}
   1e8ba:	46c0      	nop			; (mov r8, r8)
   1e8bc:	46bd      	mov	sp, r7
   1e8be:	b002      	add	sp, #8
   1e8c0:	bd80      	pop	{r7, pc}
	...

0001e8c4 <port_pin_set_output_level>:
{
   1e8c4:	b580      	push	{r7, lr}
   1e8c6:	b084      	sub	sp, #16
   1e8c8:	af00      	add	r7, sp, #0
   1e8ca:	0002      	movs	r2, r0
   1e8cc:	1dfb      	adds	r3, r7, #7
   1e8ce:	701a      	strb	r2, [r3, #0]
   1e8d0:	1dbb      	adds	r3, r7, #6
   1e8d2:	1c0a      	adds	r2, r1, #0
   1e8d4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1e8d6:	1dfb      	adds	r3, r7, #7
   1e8d8:	781b      	ldrb	r3, [r3, #0]
   1e8da:	0018      	movs	r0, r3
   1e8dc:	4b0d      	ldr	r3, [pc, #52]	; (1e914 <port_pin_set_output_level+0x50>)
   1e8de:	4798      	blx	r3
   1e8e0:	0003      	movs	r3, r0
   1e8e2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1e8e4:	1dfb      	adds	r3, r7, #7
   1e8e6:	781b      	ldrb	r3, [r3, #0]
   1e8e8:	221f      	movs	r2, #31
   1e8ea:	4013      	ands	r3, r2
   1e8ec:	2201      	movs	r2, #1
   1e8ee:	409a      	lsls	r2, r3
   1e8f0:	0013      	movs	r3, r2
   1e8f2:	60bb      	str	r3, [r7, #8]
	if (level) {
   1e8f4:	1dbb      	adds	r3, r7, #6
   1e8f6:	781b      	ldrb	r3, [r3, #0]
   1e8f8:	2b00      	cmp	r3, #0
   1e8fa:	d003      	beq.n	1e904 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1e8fc:	68fb      	ldr	r3, [r7, #12]
   1e8fe:	68ba      	ldr	r2, [r7, #8]
   1e900:	619a      	str	r2, [r3, #24]
}
   1e902:	e002      	b.n	1e90a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1e904:	68fb      	ldr	r3, [r7, #12]
   1e906:	68ba      	ldr	r2, [r7, #8]
   1e908:	615a      	str	r2, [r3, #20]
}
   1e90a:	46c0      	nop			; (mov r8, r8)
   1e90c:	46bd      	mov	sp, r7
   1e90e:	b004      	add	sp, #16
   1e910:	bd80      	pop	{r7, pc}
   1e912:	46c0      	nop			; (mov r8, r8)
   1e914:	0001e87d 	.word	0x0001e87d

0001e918 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1e918:	b580      	push	{r7, lr}
   1e91a:	b084      	sub	sp, #16
   1e91c:	af00      	add	r7, sp, #0
   1e91e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1e920:	687b      	ldr	r3, [r7, #4]
   1e922:	681b      	ldr	r3, [r3, #0]
   1e924:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1e926:	68fb      	ldr	r3, [r7, #12]
   1e928:	69db      	ldr	r3, [r3, #28]
   1e92a:	1e5a      	subs	r2, r3, #1
   1e92c:	4193      	sbcs	r3, r2
   1e92e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1e930:	0018      	movs	r0, r3
   1e932:	46bd      	mov	sp, r7
   1e934:	b004      	add	sp, #16
   1e936:	bd80      	pop	{r7, pc}

0001e938 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1e938:	b580      	push	{r7, lr}
   1e93a:	b082      	sub	sp, #8
   1e93c:	af00      	add	r7, sp, #0
   1e93e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1e940:	687b      	ldr	r3, [r7, #4]
   1e942:	2201      	movs	r2, #1
   1e944:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1e946:	687b      	ldr	r3, [r7, #4]
   1e948:	2200      	movs	r2, #0
   1e94a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1e94c:	687b      	ldr	r3, [r7, #4]
   1e94e:	2200      	movs	r2, #0
   1e950:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1e952:	687b      	ldr	r3, [r7, #4]
   1e954:	22c0      	movs	r2, #192	; 0xc0
   1e956:	0392      	lsls	r2, r2, #14
   1e958:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1e95a:	687b      	ldr	r3, [r7, #4]
   1e95c:	2200      	movs	r2, #0
   1e95e:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1e960:	687b      	ldr	r3, [r7, #4]
   1e962:	2200      	movs	r2, #0
   1e964:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1e966:	687b      	ldr	r3, [r7, #4]
   1e968:	2201      	movs	r2, #1
   1e96a:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1e96c:	687b      	ldr	r3, [r7, #4]
   1e96e:	2201      	movs	r2, #1
   1e970:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1e972:	687b      	ldr	r3, [r7, #4]
   1e974:	2200      	movs	r2, #0
   1e976:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1e978:	687b      	ldr	r3, [r7, #4]
   1e97a:	2224      	movs	r2, #36	; 0x24
   1e97c:	2100      	movs	r1, #0
   1e97e:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1e980:	687b      	ldr	r3, [r7, #4]
   1e982:	3318      	adds	r3, #24
   1e984:	220c      	movs	r2, #12
   1e986:	2100      	movs	r1, #0
   1e988:	0018      	movs	r0, r3
   1e98a:	4b0a      	ldr	r3, [pc, #40]	; (1e9b4 <spi_get_config_defaults+0x7c>)
   1e98c:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1e98e:	687b      	ldr	r3, [r7, #4]
   1e990:	4a09      	ldr	r2, [pc, #36]	; (1e9b8 <spi_get_config_defaults+0x80>)
   1e992:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1e994:	687b      	ldr	r3, [r7, #4]
   1e996:	2200      	movs	r2, #0
   1e998:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1e99a:	687b      	ldr	r3, [r7, #4]
   1e99c:	2200      	movs	r2, #0
   1e99e:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1e9a0:	687b      	ldr	r3, [r7, #4]
   1e9a2:	2200      	movs	r2, #0
   1e9a4:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1e9a6:	687b      	ldr	r3, [r7, #4]
   1e9a8:	2200      	movs	r2, #0
   1e9aa:	635a      	str	r2, [r3, #52]	; 0x34

};
   1e9ac:	46c0      	nop			; (mov r8, r8)
   1e9ae:	46bd      	mov	sp, r7
   1e9b0:	b002      	add	sp, #8
   1e9b2:	bd80      	pop	{r7, pc}
   1e9b4:	000339ff 	.word	0x000339ff
   1e9b8:	000186a0 	.word	0x000186a0

0001e9bc <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1e9bc:	b580      	push	{r7, lr}
   1e9be:	b082      	sub	sp, #8
   1e9c0:	af00      	add	r7, sp, #0
   1e9c2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1e9c4:	687b      	ldr	r3, [r7, #4]
   1e9c6:	220a      	movs	r2, #10
   1e9c8:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1e9ca:	687b      	ldr	r3, [r7, #4]
   1e9cc:	2200      	movs	r2, #0
   1e9ce:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1e9d0:	687b      	ldr	r3, [r7, #4]
   1e9d2:	2200      	movs	r2, #0
   1e9d4:	709a      	strb	r2, [r3, #2]
}
   1e9d6:	46c0      	nop			; (mov r8, r8)
   1e9d8:	46bd      	mov	sp, r7
   1e9da:	b002      	add	sp, #8
   1e9dc:	bd80      	pop	{r7, pc}
	...

0001e9e0 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1e9e0:	b580      	push	{r7, lr}
   1e9e2:	b084      	sub	sp, #16
   1e9e4:	af00      	add	r7, sp, #0
   1e9e6:	6078      	str	r0, [r7, #4]
   1e9e8:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1e9ea:	683b      	ldr	r3, [r7, #0]
   1e9ec:	781a      	ldrb	r2, [r3, #0]
   1e9ee:	687b      	ldr	r3, [r7, #4]
   1e9f0:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1e9f2:	683b      	ldr	r3, [r7, #0]
   1e9f4:	785a      	ldrb	r2, [r3, #1]
   1e9f6:	687b      	ldr	r3, [r7, #4]
   1e9f8:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1e9fa:	683b      	ldr	r3, [r7, #0]
   1e9fc:	789a      	ldrb	r2, [r3, #2]
   1e9fe:	687b      	ldr	r3, [r7, #4]
   1ea00:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1ea02:	230c      	movs	r3, #12
   1ea04:	18fb      	adds	r3, r7, r3
   1ea06:	0018      	movs	r0, r3
   1ea08:	4b0b      	ldr	r3, [pc, #44]	; (1ea38 <spi_attach_slave+0x58>)
   1ea0a:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1ea0c:	230c      	movs	r3, #12
   1ea0e:	18fb      	adds	r3, r7, r3
   1ea10:	2201      	movs	r2, #1
   1ea12:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1ea14:	687b      	ldr	r3, [r7, #4]
   1ea16:	781b      	ldrb	r3, [r3, #0]
   1ea18:	220c      	movs	r2, #12
   1ea1a:	18ba      	adds	r2, r7, r2
   1ea1c:	0011      	movs	r1, r2
   1ea1e:	0018      	movs	r0, r3
   1ea20:	4b06      	ldr	r3, [pc, #24]	; (1ea3c <spi_attach_slave+0x5c>)
   1ea22:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1ea24:	687b      	ldr	r3, [r7, #4]
   1ea26:	781b      	ldrb	r3, [r3, #0]
   1ea28:	2101      	movs	r1, #1
   1ea2a:	0018      	movs	r0, r3
   1ea2c:	4b04      	ldr	r3, [pc, #16]	; (1ea40 <spi_attach_slave+0x60>)
   1ea2e:	4798      	blx	r3
}
   1ea30:	46c0      	nop			; (mov r8, r8)
   1ea32:	46bd      	mov	sp, r7
   1ea34:	b004      	add	sp, #16
   1ea36:	bd80      	pop	{r7, pc}
   1ea38:	0001e8a1 	.word	0x0001e8a1
   1ea3c:	00025d85 	.word	0x00025d85
   1ea40:	0001e8c5 	.word	0x0001e8c5

0001ea44 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1ea44:	b580      	push	{r7, lr}
   1ea46:	b084      	sub	sp, #16
   1ea48:	af00      	add	r7, sp, #0
   1ea4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1ea4c:	687b      	ldr	r3, [r7, #4]
   1ea4e:	681b      	ldr	r3, [r3, #0]
   1ea50:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1ea52:	687b      	ldr	r3, [r7, #4]
   1ea54:	681b      	ldr	r3, [r3, #0]
   1ea56:	0018      	movs	r0, r3
   1ea58:	4b0b      	ldr	r3, [pc, #44]	; (1ea88 <spi_enable+0x44>)
   1ea5a:	4798      	blx	r3
   1ea5c:	0003      	movs	r3, r0
   1ea5e:	0018      	movs	r0, r3
   1ea60:	4b0a      	ldr	r3, [pc, #40]	; (1ea8c <spi_enable+0x48>)
   1ea62:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1ea64:	46c0      	nop			; (mov r8, r8)
   1ea66:	687b      	ldr	r3, [r7, #4]
   1ea68:	0018      	movs	r0, r3
   1ea6a:	4b09      	ldr	r3, [pc, #36]	; (1ea90 <spi_enable+0x4c>)
   1ea6c:	4798      	blx	r3
   1ea6e:	1e03      	subs	r3, r0, #0
   1ea70:	d1f9      	bne.n	1ea66 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1ea72:	68fb      	ldr	r3, [r7, #12]
   1ea74:	681b      	ldr	r3, [r3, #0]
   1ea76:	2202      	movs	r2, #2
   1ea78:	431a      	orrs	r2, r3
   1ea7a:	68fb      	ldr	r3, [r7, #12]
   1ea7c:	601a      	str	r2, [r3, #0]
}
   1ea7e:	46c0      	nop			; (mov r8, r8)
   1ea80:	46bd      	mov	sp, r7
   1ea82:	b004      	add	sp, #16
   1ea84:	bd80      	pop	{r7, pc}
   1ea86:	46c0      	nop			; (mov r8, r8)
   1ea88:	00026a55 	.word	0x00026a55
   1ea8c:	0001e851 	.word	0x0001e851
   1ea90:	0001e919 	.word	0x0001e919

0001ea94 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1ea94:	b580      	push	{r7, lr}
   1ea96:	b084      	sub	sp, #16
   1ea98:	af00      	add	r7, sp, #0
   1ea9a:	6078      	str	r0, [r7, #4]
   1ea9c:	000a      	movs	r2, r1
   1ea9e:	1cfb      	adds	r3, r7, #3
   1eaa0:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1eaa2:	230f      	movs	r3, #15
   1eaa4:	18fb      	adds	r3, r7, r3
   1eaa6:	2200      	movs	r2, #0
   1eaa8:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1eaaa:	e038      	b.n	1eb1e <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1eaac:	687b      	ldr	r3, [r7, #4]
   1eaae:	1c5a      	adds	r2, r3, #1
   1eab0:	607a      	str	r2, [r7, #4]
   1eab2:	220e      	movs	r2, #14
   1eab4:	18ba      	adds	r2, r7, r2
   1eab6:	781b      	ldrb	r3, [r3, #0]
   1eab8:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1eaba:	230d      	movs	r3, #13
   1eabc:	18fb      	adds	r3, r7, r3
   1eabe:	2200      	movs	r2, #0
   1eac0:	701a      	strb	r2, [r3, #0]
   1eac2:	e027      	b.n	1eb14 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1eac4:	230f      	movs	r3, #15
   1eac6:	18fa      	adds	r2, r7, r3
   1eac8:	230f      	movs	r3, #15
   1eaca:	18fb      	adds	r3, r7, r3
   1eacc:	781b      	ldrb	r3, [r3, #0]
   1eace:	18db      	adds	r3, r3, r3
   1ead0:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1ead2:	230e      	movs	r3, #14
   1ead4:	18fa      	adds	r2, r7, r3
   1ead6:	230f      	movs	r3, #15
   1ead8:	18fb      	adds	r3, r7, r3
   1eada:	7812      	ldrb	r2, [r2, #0]
   1eadc:	781b      	ldrb	r3, [r3, #0]
   1eade:	4053      	eors	r3, r2
   1eae0:	b2db      	uxtb	r3, r3
   1eae2:	b25b      	sxtb	r3, r3
   1eae4:	2b00      	cmp	r3, #0
   1eae6:	da07      	bge.n	1eaf8 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1eae8:	230f      	movs	r3, #15
   1eaea:	18fb      	adds	r3, r7, r3
   1eaec:	220f      	movs	r2, #15
   1eaee:	18ba      	adds	r2, r7, r2
   1eaf0:	7812      	ldrb	r2, [r2, #0]
   1eaf2:	2109      	movs	r1, #9
   1eaf4:	404a      	eors	r2, r1
   1eaf6:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1eaf8:	230e      	movs	r3, #14
   1eafa:	18fa      	adds	r2, r7, r3
   1eafc:	230e      	movs	r3, #14
   1eafe:	18fb      	adds	r3, r7, r3
   1eb00:	781b      	ldrb	r3, [r3, #0]
   1eb02:	18db      	adds	r3, r3, r3
   1eb04:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1eb06:	230d      	movs	r3, #13
   1eb08:	18fb      	adds	r3, r7, r3
   1eb0a:	781a      	ldrb	r2, [r3, #0]
   1eb0c:	230d      	movs	r3, #13
   1eb0e:	18fb      	adds	r3, r7, r3
   1eb10:	3201      	adds	r2, #1
   1eb12:	701a      	strb	r2, [r3, #0]
   1eb14:	230d      	movs	r3, #13
   1eb16:	18fb      	adds	r3, r7, r3
   1eb18:	781b      	ldrb	r3, [r3, #0]
   1eb1a:	2b07      	cmp	r3, #7
   1eb1c:	d9d2      	bls.n	1eac4 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1eb1e:	1cfb      	adds	r3, r7, #3
   1eb20:	781b      	ldrb	r3, [r3, #0]
   1eb22:	1cfa      	adds	r2, r7, #3
   1eb24:	1e59      	subs	r1, r3, #1
   1eb26:	7011      	strb	r1, [r2, #0]
   1eb28:	2b00      	cmp	r3, #0
   1eb2a:	d1bf      	bne.n	1eaac <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1eb2c:	230f      	movs	r3, #15
   1eb2e:	18fb      	adds	r3, r7, r3
   1eb30:	781b      	ldrb	r3, [r3, #0]
   1eb32:	005b      	lsls	r3, r3, #1
   1eb34:	b25b      	sxtb	r3, r3
   1eb36:	2201      	movs	r2, #1
   1eb38:	4313      	orrs	r3, r2
   1eb3a:	b25a      	sxtb	r2, r3
   1eb3c:	230f      	movs	r3, #15
   1eb3e:	18fb      	adds	r3, r7, r3
   1eb40:	701a      	strb	r2, [r3, #0]
	return crc;
   1eb42:	230f      	movs	r3, #15
   1eb44:	18fb      	adds	r3, r7, r3
   1eb46:	781b      	ldrb	r3, [r3, #0]
}
   1eb48:	0018      	movs	r0, r3
   1eb4a:	46bd      	mov	sp, r7
   1eb4c:	b004      	add	sp, #16
   1eb4e:	bd80      	pop	{r7, pc}

0001eb50 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1eb50:	b590      	push	{r4, r7, lr}
   1eb52:	b083      	sub	sp, #12
   1eb54:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1eb56:	1c7b      	adds	r3, r7, #1
   1eb58:	22ff      	movs	r2, #255	; 0xff
   1eb5a:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1eb5c:	1cbb      	adds	r3, r7, #2
   1eb5e:	22ff      	movs	r2, #255	; 0xff
   1eb60:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1eb62:	1cbb      	adds	r3, r7, #2
   1eb64:	881b      	ldrh	r3, [r3, #0]
   1eb66:	1c79      	adds	r1, r7, #1
   1eb68:	4811      	ldr	r0, [pc, #68]	; (1ebb0 <sd_mmc_spi_wait_busy+0x60>)
   1eb6a:	2201      	movs	r2, #1
   1eb6c:	4c11      	ldr	r4, [pc, #68]	; (1ebb4 <sd_mmc_spi_wait_busy+0x64>)
   1eb6e:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1eb70:	4b11      	ldr	r3, [pc, #68]	; (1ebb8 <sd_mmc_spi_wait_busy+0x68>)
   1eb72:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1eb74:	1cbb      	adds	r3, r7, #2
   1eb76:	881b      	ldrh	r3, [r3, #0]
   1eb78:	1c79      	adds	r1, r7, #1
   1eb7a:	480d      	ldr	r0, [pc, #52]	; (1ebb0 <sd_mmc_spi_wait_busy+0x60>)
   1eb7c:	2201      	movs	r2, #1
   1eb7e:	4c0d      	ldr	r4, [pc, #52]	; (1ebb4 <sd_mmc_spi_wait_busy+0x64>)
   1eb80:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1eb82:	1cbb      	adds	r3, r7, #2
   1eb84:	881b      	ldrh	r3, [r3, #0]
   1eb86:	1c79      	adds	r1, r7, #1
   1eb88:	4809      	ldr	r0, [pc, #36]	; (1ebb0 <sd_mmc_spi_wait_busy+0x60>)
   1eb8a:	2201      	movs	r2, #1
   1eb8c:	4c09      	ldr	r4, [pc, #36]	; (1ebb4 <sd_mmc_spi_wait_busy+0x64>)
   1eb8e:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1eb90:	687b      	ldr	r3, [r7, #4]
   1eb92:	1e5a      	subs	r2, r3, #1
   1eb94:	607a      	str	r2, [r7, #4]
   1eb96:	2b00      	cmp	r3, #0
   1eb98:	d101      	bne.n	1eb9e <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1eb9a:	2300      	movs	r3, #0
   1eb9c:	e004      	b.n	1eba8 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1eb9e:	1c7b      	adds	r3, r7, #1
   1eba0:	781b      	ldrb	r3, [r3, #0]
   1eba2:	2bff      	cmp	r3, #255	; 0xff
   1eba4:	d1ed      	bne.n	1eb82 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1eba6:	2301      	movs	r3, #1
}
   1eba8:	0018      	movs	r0, r3
   1ebaa:	46bd      	mov	sp, r7
   1ebac:	b003      	add	sp, #12
   1ebae:	bd90      	pop	{r4, r7, pc}
   1ebb0:	20003da8 	.word	0x20003da8
   1ebb4:	00027395 	.word	0x00027395
   1ebb8:	00030d40 	.word	0x00030d40

0001ebbc <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1ebbc:	b590      	push	{r4, r7, lr}
   1ebbe:	b083      	sub	sp, #12
   1ebc0:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1ebc2:	1cbb      	adds	r3, r7, #2
   1ebc4:	22ff      	movs	r2, #255	; 0xff
   1ebc6:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1ebc8:	1c7b      	adds	r3, r7, #1
   1ebca:	2200      	movs	r2, #0
   1ebcc:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1ebce:	4b18      	ldr	r3, [pc, #96]	; (1ec30 <sd_mmc_spi_start_read_block+0x74>)
   1ebd0:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1ebd2:	687b      	ldr	r3, [r7, #4]
   1ebd4:	1e5a      	subs	r2, r3, #1
   1ebd6:	607a      	str	r2, [r7, #4]
   1ebd8:	2b00      	cmp	r3, #0
   1ebda:	d104      	bne.n	1ebe6 <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1ebdc:	4b15      	ldr	r3, [pc, #84]	; (1ec34 <sd_mmc_spi_start_read_block+0x78>)
   1ebde:	2204      	movs	r2, #4
   1ebe0:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1ebe2:	2300      	movs	r3, #0
   1ebe4:	e020      	b.n	1ec28 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1ebe6:	1cbb      	adds	r3, r7, #2
   1ebe8:	881b      	ldrh	r3, [r3, #0]
   1ebea:	1c79      	adds	r1, r7, #1
   1ebec:	4812      	ldr	r0, [pc, #72]	; (1ec38 <sd_mmc_spi_start_read_block+0x7c>)
   1ebee:	2201      	movs	r2, #1
   1ebf0:	4c12      	ldr	r4, [pc, #72]	; (1ec3c <sd_mmc_spi_start_read_block+0x80>)
   1ebf2:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1ebf4:	1c7b      	adds	r3, r7, #1
   1ebf6:	781b      	ldrb	r3, [r3, #0]
   1ebf8:	001a      	movs	r2, r3
   1ebfa:	23f0      	movs	r3, #240	; 0xf0
   1ebfc:	4013      	ands	r3, r2
   1ebfe:	d10e      	bne.n	1ec1e <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1ec00:	1c7b      	adds	r3, r7, #1
   1ec02:	781b      	ldrb	r3, [r3, #0]
   1ec04:	001a      	movs	r2, r3
   1ec06:	2307      	movs	r3, #7
   1ec08:	4013      	ands	r3, r2
   1ec0a:	d003      	beq.n	1ec14 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1ec0c:	4b09      	ldr	r3, [pc, #36]	; (1ec34 <sd_mmc_spi_start_read_block+0x78>)
   1ec0e:	2207      	movs	r2, #7
   1ec10:	701a      	strb	r2, [r3, #0]
   1ec12:	e002      	b.n	1ec1a <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1ec14:	4b07      	ldr	r3, [pc, #28]	; (1ec34 <sd_mmc_spi_start_read_block+0x78>)
   1ec16:	220b      	movs	r2, #11
   1ec18:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1ec1a:	2300      	movs	r3, #0
   1ec1c:	e004      	b.n	1ec28 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1ec1e:	1c7b      	adds	r3, r7, #1
   1ec20:	781b      	ldrb	r3, [r3, #0]
   1ec22:	2bfe      	cmp	r3, #254	; 0xfe
   1ec24:	d1d5      	bne.n	1ebd2 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1ec26:	2301      	movs	r3, #1
}
   1ec28:	0018      	movs	r0, r3
   1ec2a:	46bd      	mov	sp, r7
   1ec2c:	b003      	add	sp, #12
   1ec2e:	bd90      	pop	{r4, r7, pc}
   1ec30:	0007a120 	.word	0x0007a120
   1ec34:	20003deb 	.word	0x20003deb
   1ec38:	20003da8 	.word	0x20003da8
   1ec3c:	00027395 	.word	0x00027395

0001ec40 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1ec40:	b590      	push	{r4, r7, lr}
   1ec42:	b083      	sub	sp, #12
   1ec44:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1ec46:	1dbb      	adds	r3, r7, #6
   1ec48:	22ff      	movs	r2, #255	; 0xff
   1ec4a:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1ec4c:	1dbb      	adds	r3, r7, #6
   1ec4e:	881b      	ldrh	r3, [r3, #0]
   1ec50:	1d39      	adds	r1, r7, #4
   1ec52:	4804      	ldr	r0, [pc, #16]	; (1ec64 <sd_mmc_spi_stop_read_block+0x24>)
   1ec54:	2202      	movs	r2, #2
   1ec56:	4c04      	ldr	r4, [pc, #16]	; (1ec68 <sd_mmc_spi_stop_read_block+0x28>)
   1ec58:	47a0      	blx	r4
			dummy);
}
   1ec5a:	46c0      	nop			; (mov r8, r8)
   1ec5c:	46bd      	mov	sp, r7
   1ec5e:	b003      	add	sp, #12
   1ec60:	bd90      	pop	{r4, r7, pc}
   1ec62:	46c0      	nop			; (mov r8, r8)
   1ec64:	20003da8 	.word	0x20003da8
   1ec68:	00027395 	.word	0x00027395

0001ec6c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1ec6c:	b580      	push	{r7, lr}
   1ec6e:	b082      	sub	sp, #8
   1ec70:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1ec72:	1dfb      	adds	r3, r7, #7
   1ec74:	22ff      	movs	r2, #255	; 0xff
   1ec76:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1ec78:	1df9      	adds	r1, r7, #7
   1ec7a:	4b0d      	ldr	r3, [pc, #52]	; (1ecb0 <sd_mmc_spi_start_write_block+0x44>)
   1ec7c:	2201      	movs	r2, #1
   1ec7e:	0018      	movs	r0, r3
   1ec80:	4b0c      	ldr	r3, [pc, #48]	; (1ecb4 <sd_mmc_spi_start_write_block+0x48>)
   1ec82:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1ec84:	4b0c      	ldr	r3, [pc, #48]	; (1ecb8 <sd_mmc_spi_start_write_block+0x4c>)
   1ec86:	881b      	ldrh	r3, [r3, #0]
   1ec88:	2b01      	cmp	r3, #1
   1ec8a:	d103      	bne.n	1ec94 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1ec8c:	1dbb      	adds	r3, r7, #6
   1ec8e:	22fe      	movs	r2, #254	; 0xfe
   1ec90:	701a      	strb	r2, [r3, #0]
   1ec92:	e002      	b.n	1ec9a <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1ec94:	1dbb      	adds	r3, r7, #6
   1ec96:	22fc      	movs	r2, #252	; 0xfc
   1ec98:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1ec9a:	1db9      	adds	r1, r7, #6
   1ec9c:	4b04      	ldr	r3, [pc, #16]	; (1ecb0 <sd_mmc_spi_start_write_block+0x44>)
   1ec9e:	2201      	movs	r2, #1
   1eca0:	0018      	movs	r0, r3
   1eca2:	4b04      	ldr	r3, [pc, #16]	; (1ecb4 <sd_mmc_spi_start_write_block+0x48>)
   1eca4:	4798      	blx	r3
}
   1eca6:	46c0      	nop			; (mov r8, r8)
   1eca8:	46bd      	mov	sp, r7
   1ecaa:	b002      	add	sp, #8
   1ecac:	bd80      	pop	{r7, pc}
   1ecae:	46c0      	nop			; (mov r8, r8)
   1ecb0:	20003da8 	.word	0x20003da8
   1ecb4:	000275b9 	.word	0x000275b9
   1ecb8:	20003df6 	.word	0x20003df6

0001ecbc <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1ecbc:	b590      	push	{r4, r7, lr}
   1ecbe:	b083      	sub	sp, #12
   1ecc0:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1ecc2:	1dbb      	adds	r3, r7, #6
   1ecc4:	22ff      	movs	r2, #255	; 0xff
   1ecc6:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1ecc8:	1cbb      	adds	r3, r7, #2
   1ecca:	2201      	movs	r2, #1
   1eccc:	4252      	negs	r2, r2
   1ecce:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1ecd0:	1cb9      	adds	r1, r7, #2
   1ecd2:	4b1b      	ldr	r3, [pc, #108]	; (1ed40 <sd_mmc_spi_stop_write_block+0x84>)
   1ecd4:	2202      	movs	r2, #2
   1ecd6:	0018      	movs	r0, r3
   1ecd8:	4b1a      	ldr	r3, [pc, #104]	; (1ed44 <sd_mmc_spi_stop_write_block+0x88>)
   1ecda:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1ecdc:	1dbb      	adds	r3, r7, #6
   1ecde:	881b      	ldrh	r3, [r3, #0]
   1ece0:	1d79      	adds	r1, r7, #5
   1ece2:	4817      	ldr	r0, [pc, #92]	; (1ed40 <sd_mmc_spi_stop_write_block+0x84>)
   1ece4:	2201      	movs	r2, #1
   1ece6:	4c18      	ldr	r4, [pc, #96]	; (1ed48 <sd_mmc_spi_stop_write_block+0x8c>)
   1ece8:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1ecea:	1d7b      	adds	r3, r7, #5
   1ecec:	781b      	ldrb	r3, [r3, #0]
   1ecee:	001a      	movs	r2, r3
   1ecf0:	2310      	movs	r3, #16
   1ecf2:	4013      	ands	r3, r2
   1ecf4:	d105      	bne.n	1ed02 <sd_mmc_spi_stop_write_block+0x46>
   1ecf6:	1d7b      	adds	r3, r7, #5
   1ecf8:	781b      	ldrb	r3, [r3, #0]
   1ecfa:	001a      	movs	r2, r3
   1ecfc:	2301      	movs	r3, #1
   1ecfe:	4013      	ands	r3, r2
   1ed00:	d104      	bne.n	1ed0c <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1ed02:	4b12      	ldr	r3, [pc, #72]	; (1ed4c <sd_mmc_spi_stop_write_block+0x90>)
   1ed04:	2201      	movs	r2, #1
   1ed06:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1ed08:	2300      	movs	r3, #0
   1ed0a:	e014      	b.n	1ed36 <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1ed0c:	1d7b      	adds	r3, r7, #5
   1ed0e:	781b      	ldrb	r3, [r3, #0]
   1ed10:	001a      	movs	r2, r3
   1ed12:	231e      	movs	r3, #30
   1ed14:	4013      	ands	r3, r2
   1ed16:	2b04      	cmp	r3, #4
   1ed18:	d00b      	beq.n	1ed32 <sd_mmc_spi_stop_write_block+0x76>
   1ed1a:	2b0a      	cmp	r3, #10
   1ed1c:	d104      	bne.n	1ed28 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1ed1e:	4b0b      	ldr	r3, [pc, #44]	; (1ed4c <sd_mmc_spi_stop_write_block+0x90>)
   1ed20:	2208      	movs	r2, #8
   1ed22:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1ed24:	2300      	movs	r3, #0
   1ed26:	e006      	b.n	1ed36 <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1ed28:	4b08      	ldr	r3, [pc, #32]	; (1ed4c <sd_mmc_spi_stop_write_block+0x90>)
   1ed2a:	220a      	movs	r2, #10
   1ed2c:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1ed2e:	2300      	movs	r3, #0
   1ed30:	e001      	b.n	1ed36 <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1ed32:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1ed34:	2301      	movs	r3, #1
}
   1ed36:	0018      	movs	r0, r3
   1ed38:	46bd      	mov	sp, r7
   1ed3a:	b003      	add	sp, #12
   1ed3c:	bd90      	pop	{r4, r7, pc}
   1ed3e:	46c0      	nop			; (mov r8, r8)
   1ed40:	20003da8 	.word	0x20003da8
   1ed44:	000275b9 	.word	0x000275b9
   1ed48:	00027395 	.word	0x00027395
   1ed4c:	20003deb 	.word	0x20003deb

0001ed50 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1ed50:	b590      	push	{r4, r7, lr}
   1ed52:	b083      	sub	sp, #12
   1ed54:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1ed56:	4b1d      	ldr	r3, [pc, #116]	; (1edcc <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1ed58:	881b      	ldrh	r3, [r3, #0]
   1ed5a:	2b01      	cmp	r3, #1
   1ed5c:	d101      	bne.n	1ed62 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1ed5e:	2301      	movs	r3, #1
   1ed60:	e030      	b.n	1edc4 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1ed62:	4b1a      	ldr	r3, [pc, #104]	; (1edcc <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1ed64:	881b      	ldrh	r3, [r3, #0]
   1ed66:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1ed68:	4b19      	ldr	r3, [pc, #100]	; (1edd0 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1ed6a:	681a      	ldr	r2, [r3, #0]
   1ed6c:	4b19      	ldr	r3, [pc, #100]	; (1edd4 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1ed6e:	881b      	ldrh	r3, [r3, #0]
   1ed70:	0019      	movs	r1, r3
   1ed72:	4b19      	ldr	r3, [pc, #100]	; (1edd8 <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1ed74:	0010      	movs	r0, r2
   1ed76:	4798      	blx	r3
   1ed78:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1ed7a:	429c      	cmp	r4, r3
   1ed7c:	d901      	bls.n	1ed82 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1ed7e:	2301      	movs	r3, #1
   1ed80:	e020      	b.n	1edc4 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1ed82:	1dfb      	adds	r3, r7, #7
   1ed84:	22ff      	movs	r2, #255	; 0xff
   1ed86:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1ed88:	1df9      	adds	r1, r7, #7
   1ed8a:	4b14      	ldr	r3, [pc, #80]	; (1eddc <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1ed8c:	2201      	movs	r2, #1
   1ed8e:	0018      	movs	r0, r3
   1ed90:	4b13      	ldr	r3, [pc, #76]	; (1ede0 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1ed92:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1ed94:	1dfb      	adds	r3, r7, #7
   1ed96:	22fd      	movs	r2, #253	; 0xfd
   1ed98:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1ed9a:	1df9      	adds	r1, r7, #7
   1ed9c:	4b0f      	ldr	r3, [pc, #60]	; (1eddc <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1ed9e:	2201      	movs	r2, #1
   1eda0:	0018      	movs	r0, r3
   1eda2:	4b0f      	ldr	r3, [pc, #60]	; (1ede0 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1eda4:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1eda6:	4b0f      	ldr	r3, [pc, #60]	; (1ede4 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1eda8:	4798      	blx	r3
   1edaa:	0003      	movs	r3, r0
   1edac:	001a      	movs	r2, r3
   1edae:	2301      	movs	r3, #1
   1edb0:	4053      	eors	r3, r2
   1edb2:	b2db      	uxtb	r3, r3
   1edb4:	2b00      	cmp	r3, #0
   1edb6:	d004      	beq.n	1edc2 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1edb8:	4b0b      	ldr	r3, [pc, #44]	; (1ede8 <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1edba:	2205      	movs	r2, #5
   1edbc:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1edbe:	2300      	movs	r3, #0
   1edc0:	e000      	b.n	1edc4 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1edc2:	2301      	movs	r3, #1
}
   1edc4:	0018      	movs	r0, r3
   1edc6:	46bd      	mov	sp, r7
   1edc8:	b003      	add	sp, #12
   1edca:	bd90      	pop	{r4, r7, pc}
   1edcc:	20003df6 	.word	0x20003df6
   1edd0:	20003df0 	.word	0x20003df0
   1edd4:	20003df4 	.word	0x20003df4
   1edd8:	00031d45 	.word	0x00031d45
   1eddc:	20003da8 	.word	0x20003da8
   1ede0:	000275b9 	.word	0x000275b9
   1ede4:	0001eb51 	.word	0x0001eb51
   1ede8:	20003deb 	.word	0x20003deb

0001edec <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1edec:	b580      	push	{r7, lr}
   1edee:	b090      	sub	sp, #64	; 0x40
   1edf0:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1edf2:	4b1f      	ldr	r3, [pc, #124]	; (1ee70 <sd_mmc_spi_init+0x84>)
   1edf4:	2200      	movs	r2, #0
   1edf6:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1edf8:	233c      	movs	r3, #60	; 0x3c
   1edfa:	18fb      	adds	r3, r7, r3
   1edfc:	0018      	movs	r0, r3
   1edfe:	4b1d      	ldr	r3, [pc, #116]	; (1ee74 <sd_mmc_spi_init+0x88>)
   1ee00:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1ee02:	1d3b      	adds	r3, r7, #4
   1ee04:	0018      	movs	r0, r3
   1ee06:	4b1c      	ldr	r3, [pc, #112]	; (1ee78 <sd_mmc_spi_init+0x8c>)
   1ee08:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1ee0a:	1d3b      	adds	r3, r7, #4
   1ee0c:	2280      	movs	r2, #128	; 0x80
   1ee0e:	0252      	lsls	r2, r2, #9
   1ee10:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1ee12:	1d3b      	adds	r3, r7, #4
   1ee14:	4a19      	ldr	r2, [pc, #100]	; (1ee7c <sd_mmc_spi_init+0x90>)
   1ee16:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1ee18:	1d3b      	adds	r3, r7, #4
   1ee1a:	4a19      	ldr	r2, [pc, #100]	; (1ee80 <sd_mmc_spi_init+0x94>)
   1ee1c:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1ee1e:	1d3b      	adds	r3, r7, #4
   1ee20:	4a18      	ldr	r2, [pc, #96]	; (1ee84 <sd_mmc_spi_init+0x98>)
   1ee22:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1ee24:	1d3b      	adds	r3, r7, #4
   1ee26:	4a18      	ldr	r2, [pc, #96]	; (1ee88 <sd_mmc_spi_init+0x9c>)
   1ee28:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1ee2a:	1d3b      	adds	r3, r7, #4
   1ee2c:	2224      	movs	r2, #36	; 0x24
   1ee2e:	2100      	movs	r1, #0
   1ee30:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1ee32:	1d3b      	adds	r3, r7, #4
   1ee34:	4a15      	ldr	r2, [pc, #84]	; (1ee8c <sd_mmc_spi_init+0xa0>)
   1ee36:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1ee38:	1d3a      	adds	r2, r7, #4
   1ee3a:	4915      	ldr	r1, [pc, #84]	; (1ee90 <sd_mmc_spi_init+0xa4>)
   1ee3c:	4b15      	ldr	r3, [pc, #84]	; (1ee94 <sd_mmc_spi_init+0xa8>)
   1ee3e:	0018      	movs	r0, r3
   1ee40:	4b15      	ldr	r3, [pc, #84]	; (1ee98 <sd_mmc_spi_init+0xac>)
   1ee42:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1ee44:	4b13      	ldr	r3, [pc, #76]	; (1ee94 <sd_mmc_spi_init+0xa8>)
   1ee46:	0018      	movs	r0, r3
   1ee48:	4b14      	ldr	r3, [pc, #80]	; (1ee9c <sd_mmc_spi_init+0xb0>)
   1ee4a:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1ee4c:	4b14      	ldr	r3, [pc, #80]	; (1eea0 <sd_mmc_spi_init+0xb4>)
   1ee4e:	0018      	movs	r0, r3
   1ee50:	4b14      	ldr	r3, [pc, #80]	; (1eea4 <sd_mmc_spi_init+0xb8>)
   1ee52:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1ee54:	4b14      	ldr	r3, [pc, #80]	; (1eea8 <sd_mmc_spi_init+0xbc>)
   1ee56:	781a      	ldrb	r2, [r3, #0]
   1ee58:	4b11      	ldr	r3, [pc, #68]	; (1eea0 <sd_mmc_spi_init+0xb4>)
   1ee5a:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1ee5c:	4a10      	ldr	r2, [pc, #64]	; (1eea0 <sd_mmc_spi_init+0xb4>)
   1ee5e:	4b13      	ldr	r3, [pc, #76]	; (1eeac <sd_mmc_spi_init+0xc0>)
   1ee60:	0011      	movs	r1, r2
   1ee62:	0018      	movs	r0, r3
   1ee64:	4b12      	ldr	r3, [pc, #72]	; (1eeb0 <sd_mmc_spi_init+0xc4>)
   1ee66:	4798      	blx	r3
}
   1ee68:	46c0      	nop			; (mov r8, r8)
   1ee6a:	46bd      	mov	sp, r7
   1ee6c:	b010      	add	sp, #64	; 0x40
   1ee6e:	bd80      	pop	{r7, pc}
   1ee70:	20003deb 	.word	0x20003deb
   1ee74:	0001e8a1 	.word	0x0001e8a1
   1ee78:	0001e939 	.word	0x0001e939
   1ee7c:	00100002 	.word	0x00100002
   1ee80:	00110002 	.word	0x00110002
   1ee84:	00120002 	.word	0x00120002
   1ee88:	00130002 	.word	0x00130002
   1ee8c:	00061a80 	.word	0x00061a80
   1ee90:	42000c00 	.word	0x42000c00
   1ee94:	20003da8 	.word	0x20003da8
   1ee98:	00027205 	.word	0x00027205
   1ee9c:	0001ea45 	.word	0x0001ea45
   1eea0:	20003de8 	.word	0x20003de8
   1eea4:	0001e9bd 	.word	0x0001e9bd
   1eea8:	200000c0 	.word	0x200000c0
   1eeac:	20003de4 	.word	0x20003de4
   1eeb0:	0001e9e1 	.word	0x0001e9e1

0001eeb4 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1eeb4:	b590      	push	{r4, r7, lr}
   1eeb6:	b083      	sub	sp, #12
   1eeb8:	af00      	add	r7, sp, #0
   1eeba:	0004      	movs	r4, r0
   1eebc:	6039      	str	r1, [r7, #0]
   1eebe:	0010      	movs	r0, r2
   1eec0:	0019      	movs	r1, r3
   1eec2:	1dfb      	adds	r3, r7, #7
   1eec4:	1c22      	adds	r2, r4, #0
   1eec6:	701a      	strb	r2, [r3, #0]
   1eec8:	1dbb      	adds	r3, r7, #6
   1eeca:	1c02      	adds	r2, r0, #0
   1eecc:	701a      	strb	r2, [r3, #0]
   1eece:	1d7b      	adds	r3, r7, #5
   1eed0:	1c0a      	adds	r2, r1, #0
   1eed2:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1eed4:	4b13      	ldr	r3, [pc, #76]	; (1ef24 <sd_mmc_spi_select_device+0x70>)
   1eed6:	2200      	movs	r2, #0
   1eed8:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1eeda:	683b      	ldr	r3, [r7, #0]
   1eedc:	4a12      	ldr	r2, [pc, #72]	; (1ef28 <sd_mmc_spi_select_device+0x74>)
   1eede:	4293      	cmp	r3, r2
   1eee0:	d907      	bls.n	1eef2 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1eee2:	4b11      	ldr	r3, [pc, #68]	; (1ef28 <sd_mmc_spi_select_device+0x74>)
   1eee4:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1eee6:	e004      	b.n	1eef2 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1eee8:	683b      	ldr	r3, [r7, #0]
   1eeea:	08db      	lsrs	r3, r3, #3
   1eeec:	683a      	ldr	r2, [r7, #0]
   1eeee:	1ad3      	subs	r3, r2, r3
   1eef0:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1eef2:	683a      	ldr	r2, [r7, #0]
   1eef4:	4b0d      	ldr	r3, [pc, #52]	; (1ef2c <sd_mmc_spi_select_device+0x78>)
   1eef6:	0011      	movs	r1, r2
   1eef8:	0018      	movs	r0, r3
   1eefa:	4b0d      	ldr	r3, [pc, #52]	; (1ef30 <sd_mmc_spi_select_device+0x7c>)
   1eefc:	4798      	blx	r3
   1eefe:	0003      	movs	r3, r0
   1ef00:	2b17      	cmp	r3, #23
   1ef02:	d0f1      	beq.n	1eee8 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1ef04:	1dfb      	adds	r3, r7, #7
   1ef06:	781a      	ldrb	r2, [r3, #0]
   1ef08:	0013      	movs	r3, r2
   1ef0a:	005b      	lsls	r3, r3, #1
   1ef0c:	189b      	adds	r3, r3, r2
   1ef0e:	4a09      	ldr	r2, [pc, #36]	; (1ef34 <sd_mmc_spi_select_device+0x80>)
   1ef10:	1899      	adds	r1, r3, r2
   1ef12:	4b06      	ldr	r3, [pc, #24]	; (1ef2c <sd_mmc_spi_select_device+0x78>)
   1ef14:	2201      	movs	r2, #1
   1ef16:	0018      	movs	r0, r3
   1ef18:	4b07      	ldr	r3, [pc, #28]	; (1ef38 <sd_mmc_spi_select_device+0x84>)
   1ef1a:	4798      	blx	r3
}
   1ef1c:	46c0      	nop			; (mov r8, r8)
   1ef1e:	46bd      	mov	sp, r7
   1ef20:	b003      	add	sp, #12
   1ef22:	bd90      	pop	{r4, r7, pc}
   1ef24:	20003deb 	.word	0x20003deb
   1ef28:	00989680 	.word	0x00989680
   1ef2c:	20003da8 	.word	0x20003da8
   1ef30:	00026f2d 	.word	0x00026f2d
   1ef34:	20003de4 	.word	0x20003de4
   1ef38:	000274c9 	.word	0x000274c9

0001ef3c <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1ef3c:	b580      	push	{r7, lr}
   1ef3e:	b082      	sub	sp, #8
   1ef40:	af00      	add	r7, sp, #0
   1ef42:	0002      	movs	r2, r0
   1ef44:	1dfb      	adds	r3, r7, #7
   1ef46:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ef48:	4b09      	ldr	r3, [pc, #36]	; (1ef70 <sd_mmc_spi_deselect_device+0x34>)
   1ef4a:	2200      	movs	r2, #0
   1ef4c:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1ef4e:	1dfb      	adds	r3, r7, #7
   1ef50:	781a      	ldrb	r2, [r3, #0]
   1ef52:	0013      	movs	r3, r2
   1ef54:	005b      	lsls	r3, r3, #1
   1ef56:	189b      	adds	r3, r3, r2
   1ef58:	4a06      	ldr	r2, [pc, #24]	; (1ef74 <sd_mmc_spi_deselect_device+0x38>)
   1ef5a:	1899      	adds	r1, r3, r2
   1ef5c:	4b06      	ldr	r3, [pc, #24]	; (1ef78 <sd_mmc_spi_deselect_device+0x3c>)
   1ef5e:	2200      	movs	r2, #0
   1ef60:	0018      	movs	r0, r3
   1ef62:	4b06      	ldr	r3, [pc, #24]	; (1ef7c <sd_mmc_spi_deselect_device+0x40>)
   1ef64:	4798      	blx	r3
}
   1ef66:	46c0      	nop			; (mov r8, r8)
   1ef68:	46bd      	mov	sp, r7
   1ef6a:	b002      	add	sp, #8
   1ef6c:	bd80      	pop	{r7, pc}
   1ef6e:	46c0      	nop			; (mov r8, r8)
   1ef70:	20003deb 	.word	0x20003deb
   1ef74:	20003de4 	.word	0x20003de4
   1ef78:	20003da8 	.word	0x20003da8
   1ef7c:	000274c9 	.word	0x000274c9

0001ef80 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1ef80:	b580      	push	{r7, lr}
   1ef82:	b082      	sub	sp, #8
   1ef84:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1ef86:	1dbb      	adds	r3, r7, #6
   1ef88:	22ff      	movs	r2, #255	; 0xff
   1ef8a:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ef8c:	4b0c      	ldr	r3, [pc, #48]	; (1efc0 <sd_mmc_spi_send_clock+0x40>)
   1ef8e:	2200      	movs	r2, #0
   1ef90:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1ef92:	1dfb      	adds	r3, r7, #7
   1ef94:	2200      	movs	r2, #0
   1ef96:	701a      	strb	r2, [r3, #0]
   1ef98:	e00a      	b.n	1efb0 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1ef9a:	1db9      	adds	r1, r7, #6
   1ef9c:	4b09      	ldr	r3, [pc, #36]	; (1efc4 <sd_mmc_spi_send_clock+0x44>)
   1ef9e:	2201      	movs	r2, #1
   1efa0:	0018      	movs	r0, r3
   1efa2:	4b09      	ldr	r3, [pc, #36]	; (1efc8 <sd_mmc_spi_send_clock+0x48>)
   1efa4:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1efa6:	1dfb      	adds	r3, r7, #7
   1efa8:	781a      	ldrb	r2, [r3, #0]
   1efaa:	1dfb      	adds	r3, r7, #7
   1efac:	3201      	adds	r2, #1
   1efae:	701a      	strb	r2, [r3, #0]
   1efb0:	1dfb      	adds	r3, r7, #7
   1efb2:	781b      	ldrb	r3, [r3, #0]
   1efb4:	2b09      	cmp	r3, #9
   1efb6:	d9f0      	bls.n	1ef9a <sd_mmc_spi_send_clock+0x1a>
	}
}
   1efb8:	46c0      	nop			; (mov r8, r8)
   1efba:	46bd      	mov	sp, r7
   1efbc:	b002      	add	sp, #8
   1efbe:	bd80      	pop	{r7, pc}
   1efc0:	20003deb 	.word	0x20003deb
   1efc4:	20003da8 	.word	0x20003da8
   1efc8:	000275b9 	.word	0x000275b9

0001efcc <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1efcc:	b590      	push	{r4, r7, lr}
   1efce:	b085      	sub	sp, #20
   1efd0:	af02      	add	r7, sp, #8
   1efd2:	6078      	str	r0, [r7, #4]
   1efd4:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1efd6:	6839      	ldr	r1, [r7, #0]
   1efd8:	6878      	ldr	r0, [r7, #4]
   1efda:	2300      	movs	r3, #0
   1efdc:	9300      	str	r3, [sp, #0]
   1efde:	2300      	movs	r3, #0
   1efe0:	2200      	movs	r2, #0
   1efe2:	4c03      	ldr	r4, [pc, #12]	; (1eff0 <sd_mmc_spi_send_cmd+0x24>)
   1efe4:	47a0      	blx	r4
   1efe6:	0003      	movs	r3, r0
}
   1efe8:	0018      	movs	r0, r3
   1efea:	46bd      	mov	sp, r7
   1efec:	b003      	add	sp, #12
   1efee:	bd90      	pop	{r4, r7, pc}
   1eff0:	0001eff5 	.word	0x0001eff5

0001eff4 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1eff4:	b590      	push	{r4, r7, lr}
   1eff6:	b089      	sub	sp, #36	; 0x24
   1eff8:	af00      	add	r7, sp, #0
   1effa:	60f8      	str	r0, [r7, #12]
   1effc:	60b9      	str	r1, [r7, #8]
   1effe:	0019      	movs	r1, r3
   1f000:	1dbb      	adds	r3, r7, #6
   1f002:	801a      	strh	r2, [r3, #0]
   1f004:	1d3b      	adds	r3, r7, #4
   1f006:	1c0a      	adds	r2, r1, #0
   1f008:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1f00a:	231b      	movs	r3, #27
   1f00c:	18fb      	adds	r3, r7, r3
   1f00e:	22ff      	movs	r2, #255	; 0xff
   1f010:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1f012:	231c      	movs	r3, #28
   1f014:	18fb      	adds	r3, r7, r3
   1f016:	22ff      	movs	r2, #255	; 0xff
   1f018:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f01a:	4b72      	ldr	r3, [pc, #456]	; (1f1e4 <sd_mmc_spi_adtc_start+0x1f0>)
   1f01c:	2200      	movs	r2, #0
   1f01e:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1f020:	68fb      	ldr	r3, [r7, #12]
   1f022:	b2db      	uxtb	r3, r3
   1f024:	223f      	movs	r2, #63	; 0x3f
   1f026:	4013      	ands	r3, r2
   1f028:	b2db      	uxtb	r3, r3
   1f02a:	2240      	movs	r2, #64	; 0x40
   1f02c:	4313      	orrs	r3, r2
   1f02e:	b2da      	uxtb	r2, r3
   1f030:	2314      	movs	r3, #20
   1f032:	18fb      	adds	r3, r7, r3
   1f034:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1f036:	68bb      	ldr	r3, [r7, #8]
   1f038:	0e1b      	lsrs	r3, r3, #24
   1f03a:	b2da      	uxtb	r2, r3
   1f03c:	2314      	movs	r3, #20
   1f03e:	18fb      	adds	r3, r7, r3
   1f040:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1f042:	68bb      	ldr	r3, [r7, #8]
   1f044:	0c1b      	lsrs	r3, r3, #16
   1f046:	b2da      	uxtb	r2, r3
   1f048:	2314      	movs	r3, #20
   1f04a:	18fb      	adds	r3, r7, r3
   1f04c:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1f04e:	68bb      	ldr	r3, [r7, #8]
   1f050:	0a1b      	lsrs	r3, r3, #8
   1f052:	b2da      	uxtb	r2, r3
   1f054:	2314      	movs	r3, #20
   1f056:	18fb      	adds	r3, r7, r3
   1f058:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1f05a:	68bb      	ldr	r3, [r7, #8]
   1f05c:	b2da      	uxtb	r2, r3
   1f05e:	2314      	movs	r3, #20
   1f060:	18fb      	adds	r3, r7, r3
   1f062:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1f064:	2314      	movs	r3, #20
   1f066:	18fb      	adds	r3, r7, r3
   1f068:	2105      	movs	r1, #5
   1f06a:	0018      	movs	r0, r3
   1f06c:	4b5e      	ldr	r3, [pc, #376]	; (1f1e8 <sd_mmc_spi_adtc_start+0x1f4>)
   1f06e:	4798      	blx	r3
   1f070:	0003      	movs	r3, r0
   1f072:	001a      	movs	r2, r3
   1f074:	2314      	movs	r3, #20
   1f076:	18fb      	adds	r3, r7, r3
   1f078:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1f07a:	231b      	movs	r3, #27
   1f07c:	18f9      	adds	r1, r7, r3
   1f07e:	4b5b      	ldr	r3, [pc, #364]	; (1f1ec <sd_mmc_spi_adtc_start+0x1f8>)
   1f080:	2201      	movs	r2, #1
   1f082:	0018      	movs	r0, r3
   1f084:	4b5a      	ldr	r3, [pc, #360]	; (1f1f0 <sd_mmc_spi_adtc_start+0x1fc>)
   1f086:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1f088:	2314      	movs	r3, #20
   1f08a:	18f9      	adds	r1, r7, r3
   1f08c:	4b57      	ldr	r3, [pc, #348]	; (1f1ec <sd_mmc_spi_adtc_start+0x1f8>)
   1f08e:	2206      	movs	r2, #6
   1f090:	0018      	movs	r0, r3
   1f092:	4b57      	ldr	r3, [pc, #348]	; (1f1f0 <sd_mmc_spi_adtc_start+0x1fc>)
   1f094:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1f096:	2313      	movs	r3, #19
   1f098:	18fb      	adds	r3, r7, r3
   1f09a:	22ff      	movs	r2, #255	; 0xff
   1f09c:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1f09e:	231c      	movs	r3, #28
   1f0a0:	18fb      	adds	r3, r7, r3
   1f0a2:	881b      	ldrh	r3, [r3, #0]
   1f0a4:	2213      	movs	r2, #19
   1f0a6:	18b9      	adds	r1, r7, r2
   1f0a8:	4850      	ldr	r0, [pc, #320]	; (1f1ec <sd_mmc_spi_adtc_start+0x1f8>)
   1f0aa:	2201      	movs	r2, #1
   1f0ac:	4c51      	ldr	r4, [pc, #324]	; (1f1f4 <sd_mmc_spi_adtc_start+0x200>)
   1f0ae:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1f0b0:	231f      	movs	r3, #31
   1f0b2:	18fb      	adds	r3, r7, r3
   1f0b4:	2207      	movs	r2, #7
   1f0b6:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1f0b8:	231c      	movs	r3, #28
   1f0ba:	18fb      	adds	r3, r7, r3
   1f0bc:	881b      	ldrh	r3, [r3, #0]
   1f0be:	2213      	movs	r2, #19
   1f0c0:	18b9      	adds	r1, r7, r2
   1f0c2:	484a      	ldr	r0, [pc, #296]	; (1f1ec <sd_mmc_spi_adtc_start+0x1f8>)
   1f0c4:	2201      	movs	r2, #1
   1f0c6:	4c4b      	ldr	r4, [pc, #300]	; (1f1f4 <sd_mmc_spi_adtc_start+0x200>)
   1f0c8:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1f0ca:	2313      	movs	r3, #19
   1f0cc:	18fb      	adds	r3, r7, r3
   1f0ce:	781b      	ldrb	r3, [r3, #0]
   1f0d0:	b25b      	sxtb	r3, r3
   1f0d2:	2b00      	cmp	r3, #0
   1f0d4:	da10      	bge.n	1f0f8 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1f0d6:	231f      	movs	r3, #31
   1f0d8:	18fb      	adds	r3, r7, r3
   1f0da:	221f      	movs	r2, #31
   1f0dc:	18ba      	adds	r2, r7, r2
   1f0de:	7812      	ldrb	r2, [r2, #0]
   1f0e0:	3a01      	subs	r2, #1
   1f0e2:	701a      	strb	r2, [r3, #0]
   1f0e4:	231f      	movs	r3, #31
   1f0e6:	18fb      	adds	r3, r7, r3
   1f0e8:	781b      	ldrb	r3, [r3, #0]
   1f0ea:	2b00      	cmp	r3, #0
   1f0ec:	d1e4      	bne.n	1f0b8 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1f0ee:	4b3d      	ldr	r3, [pc, #244]	; (1f1e4 <sd_mmc_spi_adtc_start+0x1f0>)
   1f0f0:	2202      	movs	r2, #2
   1f0f2:	701a      	strb	r2, [r3, #0]
			return false;
   1f0f4:	2300      	movs	r3, #0
   1f0f6:	e070      	b.n	1f1da <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1f0f8:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1f0fa:	2313      	movs	r3, #19
   1f0fc:	18fb      	adds	r3, r7, r3
   1f0fe:	781b      	ldrb	r3, [r3, #0]
   1f100:	001a      	movs	r2, r3
   1f102:	4b3d      	ldr	r3, [pc, #244]	; (1f1f8 <sd_mmc_spi_adtc_start+0x204>)
   1f104:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1f106:	2313      	movs	r3, #19
   1f108:	18fb      	adds	r3, r7, r3
   1f10a:	781b      	ldrb	r3, [r3, #0]
   1f10c:	001a      	movs	r2, r3
   1f10e:	2308      	movs	r3, #8
   1f110:	4013      	ands	r3, r2
   1f112:	d004      	beq.n	1f11e <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1f114:	4b33      	ldr	r3, [pc, #204]	; (1f1e4 <sd_mmc_spi_adtc_start+0x1f0>)
   1f116:	2206      	movs	r2, #6
   1f118:	701a      	strb	r2, [r3, #0]
		return false;
   1f11a:	2300      	movs	r3, #0
   1f11c:	e05d      	b.n	1f1da <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1f11e:	2313      	movs	r3, #19
   1f120:	18fb      	adds	r3, r7, r3
   1f122:	781b      	ldrb	r3, [r3, #0]
   1f124:	001a      	movs	r2, r3
   1f126:	2304      	movs	r3, #4
   1f128:	4013      	ands	r3, r2
   1f12a:	d004      	beq.n	1f136 <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1f12c:	4b2d      	ldr	r3, [pc, #180]	; (1f1e4 <sd_mmc_spi_adtc_start+0x1f0>)
   1f12e:	2209      	movs	r2, #9
   1f130:	701a      	strb	r2, [r3, #0]
		return false;
   1f132:	2300      	movs	r3, #0
   1f134:	e051      	b.n	1f1da <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1f136:	2313      	movs	r3, #19
   1f138:	18fb      	adds	r3, r7, r3
   1f13a:	781b      	ldrb	r3, [r3, #0]
   1f13c:	001a      	movs	r2, r3
   1f13e:	2301      	movs	r3, #1
   1f140:	439a      	bics	r2, r3
   1f142:	1e13      	subs	r3, r2, #0
   1f144:	d004      	beq.n	1f150 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1f146:	4b27      	ldr	r3, [pc, #156]	; (1f1e4 <sd_mmc_spi_adtc_start+0x1f0>)
   1f148:	2201      	movs	r2, #1
   1f14a:	701a      	strb	r2, [r3, #0]
		return false;
   1f14c:	2300      	movs	r3, #0
   1f14e:	e044      	b.n	1f1da <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1f150:	68fa      	ldr	r2, [r7, #12]
   1f152:	2380      	movs	r3, #128	; 0x80
   1f154:	019b      	lsls	r3, r3, #6
   1f156:	4013      	ands	r3, r2
   1f158:	d00d      	beq.n	1f176 <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1f15a:	4b28      	ldr	r3, [pc, #160]	; (1f1fc <sd_mmc_spi_adtc_start+0x208>)
   1f15c:	4798      	blx	r3
   1f15e:	0003      	movs	r3, r0
   1f160:	001a      	movs	r2, r3
   1f162:	2301      	movs	r3, #1
   1f164:	4053      	eors	r3, r2
   1f166:	b2db      	uxtb	r3, r3
   1f168:	2b00      	cmp	r3, #0
   1f16a:	d004      	beq.n	1f176 <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1f16c:	4b1d      	ldr	r3, [pc, #116]	; (1f1e4 <sd_mmc_spi_adtc_start+0x1f0>)
   1f16e:	2203      	movs	r2, #3
   1f170:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1f172:	2300      	movs	r3, #0
   1f174:	e031      	b.n	1f1da <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1f176:	68fa      	ldr	r2, [r7, #12]
   1f178:	2380      	movs	r3, #128	; 0x80
   1f17a:	009b      	lsls	r3, r3, #2
   1f17c:	4013      	ands	r3, r2
   1f17e:	d00e      	beq.n	1f19e <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1f180:	4b1d      	ldr	r3, [pc, #116]	; (1f1f8 <sd_mmc_spi_adtc_start+0x204>)
   1f182:	2200      	movs	r2, #0
   1f184:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1f186:	231c      	movs	r3, #28
   1f188:	18fb      	adds	r3, r7, r3
   1f18a:	881b      	ldrh	r3, [r3, #0]
   1f18c:	491a      	ldr	r1, [pc, #104]	; (1f1f8 <sd_mmc_spi_adtc_start+0x204>)
   1f18e:	4817      	ldr	r0, [pc, #92]	; (1f1ec <sd_mmc_spi_adtc_start+0x1f8>)
   1f190:	2201      	movs	r2, #1
   1f192:	4c18      	ldr	r4, [pc, #96]	; (1f1f4 <sd_mmc_spi_adtc_start+0x200>)
   1f194:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1f196:	4b18      	ldr	r3, [pc, #96]	; (1f1f8 <sd_mmc_spi_adtc_start+0x204>)
   1f198:	681a      	ldr	r2, [r3, #0]
   1f19a:	4b17      	ldr	r3, [pc, #92]	; (1f1f8 <sd_mmc_spi_adtc_start+0x204>)
   1f19c:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1f19e:	68fa      	ldr	r2, [r7, #12]
   1f1a0:	2380      	movs	r3, #128	; 0x80
   1f1a2:	00db      	lsls	r3, r3, #3
   1f1a4:	4013      	ands	r3, r2
   1f1a6:	d00c      	beq.n	1f1c2 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1f1a8:	231c      	movs	r3, #28
   1f1aa:	18fb      	adds	r3, r7, r3
   1f1ac:	881b      	ldrh	r3, [r3, #0]
   1f1ae:	4912      	ldr	r1, [pc, #72]	; (1f1f8 <sd_mmc_spi_adtc_start+0x204>)
   1f1b0:	480e      	ldr	r0, [pc, #56]	; (1f1ec <sd_mmc_spi_adtc_start+0x1f8>)
   1f1b2:	2204      	movs	r2, #4
   1f1b4:	4c0f      	ldr	r4, [pc, #60]	; (1f1f4 <sd_mmc_spi_adtc_start+0x200>)
   1f1b6:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1f1b8:	4b0f      	ldr	r3, [pc, #60]	; (1f1f8 <sd_mmc_spi_adtc_start+0x204>)
   1f1ba:	681b      	ldr	r3, [r3, #0]
   1f1bc:	ba1a      	rev	r2, r3
   1f1be:	4b0e      	ldr	r3, [pc, #56]	; (1f1f8 <sd_mmc_spi_adtc_start+0x204>)
   1f1c0:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1f1c2:	4b0f      	ldr	r3, [pc, #60]	; (1f200 <sd_mmc_spi_adtc_start+0x20c>)
   1f1c4:	1dba      	adds	r2, r7, #6
   1f1c6:	8812      	ldrh	r2, [r2, #0]
   1f1c8:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1f1ca:	4b0e      	ldr	r3, [pc, #56]	; (1f204 <sd_mmc_spi_adtc_start+0x210>)
   1f1cc:	1d3a      	adds	r2, r7, #4
   1f1ce:	8812      	ldrh	r2, [r2, #0]
   1f1d0:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1f1d2:	4b0d      	ldr	r3, [pc, #52]	; (1f208 <sd_mmc_spi_adtc_start+0x214>)
   1f1d4:	2200      	movs	r2, #0
   1f1d6:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1f1d8:	2301      	movs	r3, #1
}
   1f1da:	0018      	movs	r0, r3
   1f1dc:	46bd      	mov	sp, r7
   1f1de:	b009      	add	sp, #36	; 0x24
   1f1e0:	bd90      	pop	{r4, r7, pc}
   1f1e2:	46c0      	nop			; (mov r8, r8)
   1f1e4:	20003deb 	.word	0x20003deb
   1f1e8:	0001ea95 	.word	0x0001ea95
   1f1ec:	20003da8 	.word	0x20003da8
   1f1f0:	000275b9 	.word	0x000275b9
   1f1f4:	00027395 	.word	0x00027395
   1f1f8:	20003dec 	.word	0x20003dec
   1f1fc:	0001eb51 	.word	0x0001eb51
   1f200:	20003df4 	.word	0x20003df4
   1f204:	20003df6 	.word	0x20003df6
   1f208:	20003df0 	.word	0x20003df0

0001f20c <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1f20c:	b580      	push	{r7, lr}
   1f20e:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1f210:	4b02      	ldr	r3, [pc, #8]	; (1f21c <sd_mmc_spi_get_response+0x10>)
   1f212:	681b      	ldr	r3, [r3, #0]
}
   1f214:	0018      	movs	r0, r3
   1f216:	46bd      	mov	sp, r7
   1f218:	bd80      	pop	{r7, pc}
   1f21a:	46c0      	nop			; (mov r8, r8)
   1f21c:	20003dec 	.word	0x20003dec

0001f220 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1f220:	b590      	push	{r4, r7, lr}
   1f222:	b085      	sub	sp, #20
   1f224:	af00      	add	r7, sp, #0
   1f226:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1f228:	230e      	movs	r3, #14
   1f22a:	18fb      	adds	r3, r7, r3
   1f22c:	22ff      	movs	r2, #255	; 0xff
   1f22e:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f230:	4b1c      	ldr	r3, [pc, #112]	; (1f2a4 <sd_mmc_spi_read_word+0x84>)
   1f232:	2200      	movs	r2, #0
   1f234:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1f236:	4b1c      	ldr	r3, [pc, #112]	; (1f2a8 <sd_mmc_spi_read_word+0x88>)
   1f238:	681a      	ldr	r2, [r3, #0]
   1f23a:	4b1c      	ldr	r3, [pc, #112]	; (1f2ac <sd_mmc_spi_read_word+0x8c>)
   1f23c:	881b      	ldrh	r3, [r3, #0]
   1f23e:	0019      	movs	r1, r3
   1f240:	4b1b      	ldr	r3, [pc, #108]	; (1f2b0 <sd_mmc_spi_read_word+0x90>)
   1f242:	0010      	movs	r0, r2
   1f244:	4798      	blx	r3
   1f246:	1e0b      	subs	r3, r1, #0
   1f248:	d10a      	bne.n	1f260 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1f24a:	4b1a      	ldr	r3, [pc, #104]	; (1f2b4 <sd_mmc_spi_read_word+0x94>)
   1f24c:	4798      	blx	r3
   1f24e:	0003      	movs	r3, r0
   1f250:	001a      	movs	r2, r3
   1f252:	2301      	movs	r3, #1
   1f254:	4053      	eors	r3, r2
   1f256:	b2db      	uxtb	r3, r3
   1f258:	2b00      	cmp	r3, #0
   1f25a:	d001      	beq.n	1f260 <sd_mmc_spi_read_word+0x40>
			return false;
   1f25c:	2300      	movs	r3, #0
   1f25e:	e01d      	b.n	1f29c <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1f260:	230e      	movs	r3, #14
   1f262:	18fb      	adds	r3, r7, r3
   1f264:	881b      	ldrh	r3, [r3, #0]
   1f266:	1d39      	adds	r1, r7, #4
   1f268:	4813      	ldr	r0, [pc, #76]	; (1f2b8 <sd_mmc_spi_read_word+0x98>)
   1f26a:	2204      	movs	r2, #4
   1f26c:	4c13      	ldr	r4, [pc, #76]	; (1f2bc <sd_mmc_spi_read_word+0x9c>)
   1f26e:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1f270:	687b      	ldr	r3, [r7, #4]
   1f272:	687a      	ldr	r2, [r7, #4]
   1f274:	6812      	ldr	r2, [r2, #0]
   1f276:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1f278:	4b0b      	ldr	r3, [pc, #44]	; (1f2a8 <sd_mmc_spi_read_word+0x88>)
   1f27a:	681b      	ldr	r3, [r3, #0]
   1f27c:	1d1a      	adds	r2, r3, #4
   1f27e:	4b0a      	ldr	r3, [pc, #40]	; (1f2a8 <sd_mmc_spi_read_word+0x88>)
   1f280:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1f282:	4b09      	ldr	r3, [pc, #36]	; (1f2a8 <sd_mmc_spi_read_word+0x88>)
   1f284:	681a      	ldr	r2, [r3, #0]
   1f286:	4b09      	ldr	r3, [pc, #36]	; (1f2ac <sd_mmc_spi_read_word+0x8c>)
   1f288:	881b      	ldrh	r3, [r3, #0]
   1f28a:	0019      	movs	r1, r3
   1f28c:	4b08      	ldr	r3, [pc, #32]	; (1f2b0 <sd_mmc_spi_read_word+0x90>)
   1f28e:	0010      	movs	r0, r2
   1f290:	4798      	blx	r3
   1f292:	1e0b      	subs	r3, r1, #0
   1f294:	d101      	bne.n	1f29a <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1f296:	4b0a      	ldr	r3, [pc, #40]	; (1f2c0 <sd_mmc_spi_read_word+0xa0>)
   1f298:	4798      	blx	r3
	}
	return true;
   1f29a:	2301      	movs	r3, #1
}
   1f29c:	0018      	movs	r0, r3
   1f29e:	46bd      	mov	sp, r7
   1f2a0:	b005      	add	sp, #20
   1f2a2:	bd90      	pop	{r4, r7, pc}
   1f2a4:	20003deb 	.word	0x20003deb
   1f2a8:	20003df0 	.word	0x20003df0
   1f2ac:	20003df4 	.word	0x20003df4
   1f2b0:	00031e51 	.word	0x00031e51
   1f2b4:	0001ebbd 	.word	0x0001ebbd
   1f2b8:	20003da8 	.word	0x20003da8
   1f2bc:	00027395 	.word	0x00027395
   1f2c0:	0001ec41 	.word	0x0001ec41

0001f2c4 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1f2c4:	b590      	push	{r4, r7, lr}
   1f2c6:	b085      	sub	sp, #20
   1f2c8:	af00      	add	r7, sp, #0
   1f2ca:	6078      	str	r0, [r7, #4]
   1f2cc:	000a      	movs	r2, r1
   1f2ce:	1cbb      	adds	r3, r7, #2
   1f2d0:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1f2d2:	230a      	movs	r3, #10
   1f2d4:	18fb      	adds	r3, r7, r3
   1f2d6:	22ff      	movs	r2, #255	; 0xff
   1f2d8:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f2da:	4b1c      	ldr	r3, [pc, #112]	; (1f34c <sd_mmc_spi_start_read_blocks+0x88>)
   1f2dc:	2200      	movs	r2, #0
   1f2de:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1f2e0:	2300      	movs	r3, #0
   1f2e2:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1f2e4:	e025      	b.n	1f332 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1f2e6:	4b1a      	ldr	r3, [pc, #104]	; (1f350 <sd_mmc_spi_start_read_blocks+0x8c>)
   1f2e8:	4798      	blx	r3
   1f2ea:	0003      	movs	r3, r0
   1f2ec:	001a      	movs	r2, r3
   1f2ee:	2301      	movs	r3, #1
   1f2f0:	4053      	eors	r3, r2
   1f2f2:	b2db      	uxtb	r3, r3
   1f2f4:	2b00      	cmp	r3, #0
   1f2f6:	d001      	beq.n	1f2fc <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1f2f8:	2300      	movs	r3, #0
   1f2fa:	e022      	b.n	1f342 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1f2fc:	687a      	ldr	r2, [r7, #4]
   1f2fe:	68fb      	ldr	r3, [r7, #12]
   1f300:	18d1      	adds	r1, r2, r3
   1f302:	4b14      	ldr	r3, [pc, #80]	; (1f354 <sd_mmc_spi_start_read_blocks+0x90>)
   1f304:	881a      	ldrh	r2, [r3, #0]
   1f306:	230a      	movs	r3, #10
   1f308:	18fb      	adds	r3, r7, r3
   1f30a:	881b      	ldrh	r3, [r3, #0]
   1f30c:	4812      	ldr	r0, [pc, #72]	; (1f358 <sd_mmc_spi_start_read_blocks+0x94>)
   1f30e:	4c13      	ldr	r4, [pc, #76]	; (1f35c <sd_mmc_spi_start_read_blocks+0x98>)
   1f310:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1f312:	4b10      	ldr	r3, [pc, #64]	; (1f354 <sd_mmc_spi_start_read_blocks+0x90>)
   1f314:	881b      	ldrh	r3, [r3, #0]
   1f316:	001a      	movs	r2, r3
   1f318:	68fb      	ldr	r3, [r7, #12]
   1f31a:	189b      	adds	r3, r3, r2
   1f31c:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1f31e:	4b0d      	ldr	r3, [pc, #52]	; (1f354 <sd_mmc_spi_start_read_blocks+0x90>)
   1f320:	881b      	ldrh	r3, [r3, #0]
   1f322:	001a      	movs	r2, r3
   1f324:	4b0e      	ldr	r3, [pc, #56]	; (1f360 <sd_mmc_spi_start_read_blocks+0x9c>)
   1f326:	681b      	ldr	r3, [r3, #0]
   1f328:	18d2      	adds	r2, r2, r3
   1f32a:	4b0d      	ldr	r3, [pc, #52]	; (1f360 <sd_mmc_spi_start_read_blocks+0x9c>)
   1f32c:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1f32e:	4b0d      	ldr	r3, [pc, #52]	; (1f364 <sd_mmc_spi_start_read_blocks+0xa0>)
   1f330:	4798      	blx	r3
	while (nb_block--) {
   1f332:	1cbb      	adds	r3, r7, #2
   1f334:	881b      	ldrh	r3, [r3, #0]
   1f336:	1cba      	adds	r2, r7, #2
   1f338:	1e59      	subs	r1, r3, #1
   1f33a:	8011      	strh	r1, [r2, #0]
   1f33c:	2b00      	cmp	r3, #0
   1f33e:	d1d2      	bne.n	1f2e6 <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1f340:	2301      	movs	r3, #1
}
   1f342:	0018      	movs	r0, r3
   1f344:	46bd      	mov	sp, r7
   1f346:	b005      	add	sp, #20
   1f348:	bd90      	pop	{r4, r7, pc}
   1f34a:	46c0      	nop			; (mov r8, r8)
   1f34c:	20003deb 	.word	0x20003deb
   1f350:	0001ebbd 	.word	0x0001ebbd
   1f354:	20003df4 	.word	0x20003df4
   1f358:	20003da8 	.word	0x20003da8
   1f35c:	00027395 	.word	0x00027395
   1f360:	20003df0 	.word	0x20003df0
   1f364:	0001ec41 	.word	0x0001ec41

0001f368 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1f368:	b580      	push	{r7, lr}
   1f36a:	af00      	add	r7, sp, #0
	return true;
   1f36c:	2301      	movs	r3, #1
}
   1f36e:	0018      	movs	r0, r3
   1f370:	46bd      	mov	sp, r7
   1f372:	bd80      	pop	{r7, pc}

0001f374 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1f374:	b580      	push	{r7, lr}
   1f376:	b084      	sub	sp, #16
   1f378:	af00      	add	r7, sp, #0
   1f37a:	6078      	str	r0, [r7, #4]
   1f37c:	000a      	movs	r2, r1
   1f37e:	1cbb      	adds	r3, r7, #2
   1f380:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f382:	4b24      	ldr	r3, [pc, #144]	; (1f414 <sd_mmc_spi_start_write_blocks+0xa0>)
   1f384:	2200      	movs	r2, #0
   1f386:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1f388:	2300      	movs	r3, #0
   1f38a:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1f38c:	e035      	b.n	1f3fa <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1f38e:	4b22      	ldr	r3, [pc, #136]	; (1f418 <sd_mmc_spi_start_write_blocks+0xa4>)
   1f390:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1f392:	687a      	ldr	r2, [r7, #4]
   1f394:	68fb      	ldr	r3, [r7, #12]
   1f396:	18d1      	adds	r1, r2, r3
   1f398:	4b20      	ldr	r3, [pc, #128]	; (1f41c <sd_mmc_spi_start_write_blocks+0xa8>)
   1f39a:	881a      	ldrh	r2, [r3, #0]
   1f39c:	4b20      	ldr	r3, [pc, #128]	; (1f420 <sd_mmc_spi_start_write_blocks+0xac>)
   1f39e:	0018      	movs	r0, r3
   1f3a0:	4b20      	ldr	r3, [pc, #128]	; (1f424 <sd_mmc_spi_start_write_blocks+0xb0>)
   1f3a2:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1f3a4:	4b1d      	ldr	r3, [pc, #116]	; (1f41c <sd_mmc_spi_start_write_blocks+0xa8>)
   1f3a6:	881b      	ldrh	r3, [r3, #0]
   1f3a8:	001a      	movs	r2, r3
   1f3aa:	68fb      	ldr	r3, [r7, #12]
   1f3ac:	189b      	adds	r3, r3, r2
   1f3ae:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1f3b0:	4b1a      	ldr	r3, [pc, #104]	; (1f41c <sd_mmc_spi_start_write_blocks+0xa8>)
   1f3b2:	881b      	ldrh	r3, [r3, #0]
   1f3b4:	001a      	movs	r2, r3
   1f3b6:	4b1c      	ldr	r3, [pc, #112]	; (1f428 <sd_mmc_spi_start_write_blocks+0xb4>)
   1f3b8:	681b      	ldr	r3, [r3, #0]
   1f3ba:	18d2      	adds	r2, r2, r3
   1f3bc:	4b1a      	ldr	r3, [pc, #104]	; (1f428 <sd_mmc_spi_start_write_blocks+0xb4>)
   1f3be:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1f3c0:	4b1a      	ldr	r3, [pc, #104]	; (1f42c <sd_mmc_spi_start_write_blocks+0xb8>)
   1f3c2:	4798      	blx	r3
   1f3c4:	0003      	movs	r3, r0
   1f3c6:	001a      	movs	r2, r3
   1f3c8:	2301      	movs	r3, #1
   1f3ca:	4053      	eors	r3, r2
   1f3cc:	b2db      	uxtb	r3, r3
   1f3ce:	2b00      	cmp	r3, #0
   1f3d0:	d001      	beq.n	1f3d6 <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1f3d2:	2300      	movs	r3, #0
   1f3d4:	e019      	b.n	1f40a <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1f3d6:	1cbb      	adds	r3, r7, #2
   1f3d8:	881b      	ldrh	r3, [r3, #0]
   1f3da:	2b00      	cmp	r3, #0
   1f3dc:	d00d      	beq.n	1f3fa <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1f3de:	4b14      	ldr	r3, [pc, #80]	; (1f430 <sd_mmc_spi_start_write_blocks+0xbc>)
   1f3e0:	4798      	blx	r3
   1f3e2:	0003      	movs	r3, r0
   1f3e4:	001a      	movs	r2, r3
   1f3e6:	2301      	movs	r3, #1
   1f3e8:	4053      	eors	r3, r2
   1f3ea:	b2db      	uxtb	r3, r3
   1f3ec:	2b00      	cmp	r3, #0
   1f3ee:	d004      	beq.n	1f3fa <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f3f0:	4b08      	ldr	r3, [pc, #32]	; (1f414 <sd_mmc_spi_start_write_blocks+0xa0>)
   1f3f2:	2205      	movs	r2, #5
   1f3f4:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1f3f6:	2300      	movs	r3, #0
   1f3f8:	e007      	b.n	1f40a <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1f3fa:	1cbb      	adds	r3, r7, #2
   1f3fc:	881b      	ldrh	r3, [r3, #0]
   1f3fe:	1cba      	adds	r2, r7, #2
   1f400:	1e59      	subs	r1, r3, #1
   1f402:	8011      	strh	r1, [r2, #0]
   1f404:	2b00      	cmp	r3, #0
   1f406:	d1c2      	bne.n	1f38e <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1f408:	2301      	movs	r3, #1
}
   1f40a:	0018      	movs	r0, r3
   1f40c:	46bd      	mov	sp, r7
   1f40e:	b004      	add	sp, #16
   1f410:	bd80      	pop	{r7, pc}
   1f412:	46c0      	nop			; (mov r8, r8)
   1f414:	20003deb 	.word	0x20003deb
   1f418:	0001ec6d 	.word	0x0001ec6d
   1f41c:	20003df4 	.word	0x20003df4
   1f420:	20003da8 	.word	0x20003da8
   1f424:	000275b9 	.word	0x000275b9
   1f428:	20003df0 	.word	0x20003df0
   1f42c:	0001ecbd 	.word	0x0001ecbd
   1f430:	0001eb51 	.word	0x0001eb51

0001f434 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1f434:	b580      	push	{r7, lr}
   1f436:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1f438:	4b09      	ldr	r3, [pc, #36]	; (1f460 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1f43a:	4798      	blx	r3
   1f43c:	0003      	movs	r3, r0
   1f43e:	001a      	movs	r2, r3
   1f440:	2301      	movs	r3, #1
   1f442:	4053      	eors	r3, r2
   1f444:	b2db      	uxtb	r3, r3
   1f446:	2b00      	cmp	r3, #0
   1f448:	d004      	beq.n	1f454 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f44a:	4b06      	ldr	r3, [pc, #24]	; (1f464 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1f44c:	2205      	movs	r2, #5
   1f44e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1f450:	2300      	movs	r3, #0
   1f452:	e002      	b.n	1f45a <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1f454:	4b04      	ldr	r3, [pc, #16]	; (1f468 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1f456:	4798      	blx	r3
   1f458:	0003      	movs	r3, r0
}
   1f45a:	0018      	movs	r0, r3
   1f45c:	46bd      	mov	sp, r7
   1f45e:	bd80      	pop	{r7, pc}
   1f460:	0001eb51 	.word	0x0001eb51
   1f464:	20003deb 	.word	0x20003deb
   1f468:	0001ed51 	.word	0x0001ed51

0001f46c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1f46c:	b580      	push	{r7, lr}
   1f46e:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1f470:	2000      	movs	r0, #0
   1f472:	4b0f      	ldr	r3, [pc, #60]	; (1f4b0 <delay_init+0x44>)
   1f474:	4798      	blx	r3
   1f476:	0002      	movs	r2, r0
   1f478:	4b0e      	ldr	r3, [pc, #56]	; (1f4b4 <delay_init+0x48>)
   1f47a:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   1f47c:	4b0d      	ldr	r3, [pc, #52]	; (1f4b4 <delay_init+0x48>)
   1f47e:	6818      	ldr	r0, [r3, #0]
   1f480:	4b0d      	ldr	r3, [pc, #52]	; (1f4b8 <delay_init+0x4c>)
   1f482:	22fa      	movs	r2, #250	; 0xfa
   1f484:	0091      	lsls	r1, r2, #2
   1f486:	4798      	blx	r3
   1f488:	0003      	movs	r3, r0
   1f48a:	001a      	movs	r2, r3
   1f48c:	4b09      	ldr	r3, [pc, #36]	; (1f4b4 <delay_init+0x48>)
   1f48e:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1f490:	4b08      	ldr	r3, [pc, #32]	; (1f4b4 <delay_init+0x48>)
   1f492:	6818      	ldr	r0, [r3, #0]
   1f494:	4b08      	ldr	r3, [pc, #32]	; (1f4b8 <delay_init+0x4c>)
   1f496:	22fa      	movs	r2, #250	; 0xfa
   1f498:	0091      	lsls	r1, r2, #2
   1f49a:	4798      	blx	r3
   1f49c:	0003      	movs	r3, r0
   1f49e:	001a      	movs	r2, r3
   1f4a0:	4b06      	ldr	r3, [pc, #24]	; (1f4bc <delay_init+0x50>)
   1f4a2:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1f4a4:	4b06      	ldr	r3, [pc, #24]	; (1f4c0 <delay_init+0x54>)
   1f4a6:	2205      	movs	r2, #5
   1f4a8:	601a      	str	r2, [r3, #0]
}
   1f4aa:	46c0      	nop			; (mov r8, r8)
   1f4ac:	46bd      	mov	sp, r7
   1f4ae:	bd80      	pop	{r7, pc}
   1f4b0:	0002913d 	.word	0x0002913d
   1f4b4:	200000c4 	.word	0x200000c4
   1f4b8:	00031d45 	.word	0x00031d45
   1f4bc:	200000c8 	.word	0x200000c8
   1f4c0:	e000e010 	.word	0xe000e010

0001f4c4 <system_pinmux_get_group_from_gpio_pin>:
{
   1f4c4:	b580      	push	{r7, lr}
   1f4c6:	b084      	sub	sp, #16
   1f4c8:	af00      	add	r7, sp, #0
   1f4ca:	0002      	movs	r2, r0
   1f4cc:	1dfb      	adds	r3, r7, #7
   1f4ce:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1f4d0:	230f      	movs	r3, #15
   1f4d2:	18fb      	adds	r3, r7, r3
   1f4d4:	1dfa      	adds	r2, r7, #7
   1f4d6:	7812      	ldrb	r2, [r2, #0]
   1f4d8:	09d2      	lsrs	r2, r2, #7
   1f4da:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1f4dc:	230e      	movs	r3, #14
   1f4de:	18fb      	adds	r3, r7, r3
   1f4e0:	1dfa      	adds	r2, r7, #7
   1f4e2:	7812      	ldrb	r2, [r2, #0]
   1f4e4:	0952      	lsrs	r2, r2, #5
   1f4e6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1f4e8:	4b0d      	ldr	r3, [pc, #52]	; (1f520 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1f4ea:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1f4ec:	230f      	movs	r3, #15
   1f4ee:	18fb      	adds	r3, r7, r3
   1f4f0:	781b      	ldrb	r3, [r3, #0]
   1f4f2:	2b00      	cmp	r3, #0
   1f4f4:	d10f      	bne.n	1f516 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1f4f6:	230f      	movs	r3, #15
   1f4f8:	18fb      	adds	r3, r7, r3
   1f4fa:	781b      	ldrb	r3, [r3, #0]
   1f4fc:	009b      	lsls	r3, r3, #2
   1f4fe:	2210      	movs	r2, #16
   1f500:	4694      	mov	ip, r2
   1f502:	44bc      	add	ip, r7
   1f504:	4463      	add	r3, ip
   1f506:	3b08      	subs	r3, #8
   1f508:	681a      	ldr	r2, [r3, #0]
   1f50a:	230e      	movs	r3, #14
   1f50c:	18fb      	adds	r3, r7, r3
   1f50e:	781b      	ldrb	r3, [r3, #0]
   1f510:	01db      	lsls	r3, r3, #7
   1f512:	18d3      	adds	r3, r2, r3
   1f514:	e000      	b.n	1f518 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1f516:	2300      	movs	r3, #0
}
   1f518:	0018      	movs	r0, r3
   1f51a:	46bd      	mov	sp, r7
   1f51c:	b004      	add	sp, #16
   1f51e:	bd80      	pop	{r7, pc}
   1f520:	41004400 	.word	0x41004400

0001f524 <system_interrupt_enable_global>:
{
   1f524:	b580      	push	{r7, lr}
   1f526:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   1f528:	4b04      	ldr	r3, [pc, #16]	; (1f53c <system_interrupt_enable_global+0x18>)
   1f52a:	2201      	movs	r2, #1
   1f52c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1f52e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1f532:	b662      	cpsie	i
}
   1f534:	46c0      	nop			; (mov r8, r8)
   1f536:	46bd      	mov	sp, r7
   1f538:	bd80      	pop	{r7, pc}
   1f53a:	46c0      	nop			; (mov r8, r8)
   1f53c:	200000ce 	.word	0x200000ce

0001f540 <port_get_group_from_gpio_pin>:
{
   1f540:	b580      	push	{r7, lr}
   1f542:	b082      	sub	sp, #8
   1f544:	af00      	add	r7, sp, #0
   1f546:	0002      	movs	r2, r0
   1f548:	1dfb      	adds	r3, r7, #7
   1f54a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1f54c:	1dfb      	adds	r3, r7, #7
   1f54e:	781b      	ldrb	r3, [r3, #0]
   1f550:	0018      	movs	r0, r3
   1f552:	4b03      	ldr	r3, [pc, #12]	; (1f560 <port_get_group_from_gpio_pin+0x20>)
   1f554:	4798      	blx	r3
   1f556:	0003      	movs	r3, r0
}
   1f558:	0018      	movs	r0, r3
   1f55a:	46bd      	mov	sp, r7
   1f55c:	b002      	add	sp, #8
   1f55e:	bd80      	pop	{r7, pc}
   1f560:	0001f4c5 	.word	0x0001f4c5

0001f564 <port_get_config_defaults>:
{
   1f564:	b580      	push	{r7, lr}
   1f566:	b082      	sub	sp, #8
   1f568:	af00      	add	r7, sp, #0
   1f56a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1f56c:	687b      	ldr	r3, [r7, #4]
   1f56e:	2200      	movs	r2, #0
   1f570:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1f572:	687b      	ldr	r3, [r7, #4]
   1f574:	2201      	movs	r2, #1
   1f576:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1f578:	687b      	ldr	r3, [r7, #4]
   1f57a:	2200      	movs	r2, #0
   1f57c:	709a      	strb	r2, [r3, #2]
}
   1f57e:	46c0      	nop			; (mov r8, r8)
   1f580:	46bd      	mov	sp, r7
   1f582:	b002      	add	sp, #8
   1f584:	bd80      	pop	{r7, pc}
	...

0001f588 <port_pin_set_output_level>:
{
   1f588:	b580      	push	{r7, lr}
   1f58a:	b084      	sub	sp, #16
   1f58c:	af00      	add	r7, sp, #0
   1f58e:	0002      	movs	r2, r0
   1f590:	1dfb      	adds	r3, r7, #7
   1f592:	701a      	strb	r2, [r3, #0]
   1f594:	1dbb      	adds	r3, r7, #6
   1f596:	1c0a      	adds	r2, r1, #0
   1f598:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1f59a:	1dfb      	adds	r3, r7, #7
   1f59c:	781b      	ldrb	r3, [r3, #0]
   1f59e:	0018      	movs	r0, r3
   1f5a0:	4b0d      	ldr	r3, [pc, #52]	; (1f5d8 <port_pin_set_output_level+0x50>)
   1f5a2:	4798      	blx	r3
   1f5a4:	0003      	movs	r3, r0
   1f5a6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1f5a8:	1dfb      	adds	r3, r7, #7
   1f5aa:	781b      	ldrb	r3, [r3, #0]
   1f5ac:	221f      	movs	r2, #31
   1f5ae:	4013      	ands	r3, r2
   1f5b0:	2201      	movs	r2, #1
   1f5b2:	409a      	lsls	r2, r3
   1f5b4:	0013      	movs	r3, r2
   1f5b6:	60bb      	str	r3, [r7, #8]
	if (level) {
   1f5b8:	1dbb      	adds	r3, r7, #6
   1f5ba:	781b      	ldrb	r3, [r3, #0]
   1f5bc:	2b00      	cmp	r3, #0
   1f5be:	d003      	beq.n	1f5c8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1f5c0:	68fb      	ldr	r3, [r7, #12]
   1f5c2:	68ba      	ldr	r2, [r7, #8]
   1f5c4:	619a      	str	r2, [r3, #24]
}
   1f5c6:	e002      	b.n	1f5ce <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1f5c8:	68fb      	ldr	r3, [r7, #12]
   1f5ca:	68ba      	ldr	r2, [r7, #8]
   1f5cc:	615a      	str	r2, [r3, #20]
}
   1f5ce:	46c0      	nop			; (mov r8, r8)
   1f5d0:	46bd      	mov	sp, r7
   1f5d2:	b004      	add	sp, #16
   1f5d4:	bd80      	pop	{r7, pc}
   1f5d6:	46c0      	nop			; (mov r8, r8)
   1f5d8:	0001f541 	.word	0x0001f541

0001f5dc <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1f5dc:	b580      	push	{r7, lr}
   1f5de:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   1f5e0:	4b04      	ldr	r3, [pc, #16]	; (1f5f4 <chip_isr+0x18>)
   1f5e2:	681b      	ldr	r3, [r3, #0]
   1f5e4:	2b00      	cmp	r3, #0
   1f5e6:	d002      	beq.n	1f5ee <chip_isr+0x12>
		gpfIsr();
   1f5e8:	4b02      	ldr	r3, [pc, #8]	; (1f5f4 <chip_isr+0x18>)
   1f5ea:	681b      	ldr	r3, [r3, #0]
   1f5ec:	4798      	blx	r3
	}
}
   1f5ee:	46c0      	nop			; (mov r8, r8)
   1f5f0:	46bd      	mov	sp, r7
   1f5f2:	bd80      	pop	{r7, pc}
   1f5f4:	20003df8 	.word	0x20003df8

0001f5f8 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   1f5f8:	b580      	push	{r7, lr}
   1f5fa:	b082      	sub	sp, #8
   1f5fc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   1f5fe:	1d3b      	adds	r3, r7, #4
   1f600:	0018      	movs	r0, r3
   1f602:	4b10      	ldr	r3, [pc, #64]	; (1f644 <init_chip_pins+0x4c>)
   1f604:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1f606:	1d3b      	adds	r3, r7, #4
   1f608:	2201      	movs	r2, #1
   1f60a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1f60c:	1d3b      	adds	r3, r7, #4
   1f60e:	0019      	movs	r1, r3
   1f610:	201b      	movs	r0, #27
   1f612:	4b0d      	ldr	r3, [pc, #52]	; (1f648 <init_chip_pins+0x50>)
   1f614:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1f616:	1d3b      	adds	r3, r7, #4
   1f618:	0019      	movs	r1, r3
   1f61a:	201c      	movs	r0, #28
   1f61c:	4b0a      	ldr	r3, [pc, #40]	; (1f648 <init_chip_pins+0x50>)
   1f61e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1f620:	1d3b      	adds	r3, r7, #4
   1f622:	0019      	movs	r1, r3
   1f624:	2028      	movs	r0, #40	; 0x28
   1f626:	4b08      	ldr	r3, [pc, #32]	; (1f648 <init_chip_pins+0x50>)
   1f628:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1f62a:	2100      	movs	r1, #0
   1f62c:	201c      	movs	r0, #28
   1f62e:	4b07      	ldr	r3, [pc, #28]	; (1f64c <init_chip_pins+0x54>)
   1f630:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1f632:	2100      	movs	r1, #0
   1f634:	201b      	movs	r0, #27
   1f636:	4b05      	ldr	r3, [pc, #20]	; (1f64c <init_chip_pins+0x54>)
   1f638:	4798      	blx	r3
}
   1f63a:	46c0      	nop			; (mov r8, r8)
   1f63c:	46bd      	mov	sp, r7
   1f63e:	b002      	add	sp, #8
   1f640:	bd80      	pop	{r7, pc}
   1f642:	46c0      	nop			; (mov r8, r8)
   1f644:	0001f565 	.word	0x0001f565
   1f648:	00025d85 	.word	0x00025d85
   1f64c:	0001f589 	.word	0x0001f589

0001f650 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1f650:	b580      	push	{r7, lr}
   1f652:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   1f654:	4b0b      	ldr	r3, [pc, #44]	; (1f684 <nm_bsp_init+0x34>)
   1f656:	2200      	movs	r2, #0
   1f658:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   1f65a:	4b0b      	ldr	r3, [pc, #44]	; (1f688 <nm_bsp_init+0x38>)
   1f65c:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1f65e:	4b0b      	ldr	r3, [pc, #44]	; (1f68c <nm_bsp_init+0x3c>)
   1f660:	681b      	ldr	r3, [r3, #0]
   1f662:	2201      	movs	r2, #1
   1f664:	4013      	ands	r3, r2
   1f666:	d004      	beq.n	1f672 <nm_bsp_init+0x22>
   1f668:	4b08      	ldr	r3, [pc, #32]	; (1f68c <nm_bsp_init+0x3c>)
   1f66a:	681b      	ldr	r3, [r3, #0]
   1f66c:	2202      	movs	r2, #2
   1f66e:	4013      	ands	r3, r2
   1f670:	d101      	bne.n	1f676 <nm_bsp_init+0x26>
	    delay_init();
   1f672:	4b07      	ldr	r3, [pc, #28]	; (1f690 <nm_bsp_init+0x40>)
   1f674:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   1f676:	4b07      	ldr	r3, [pc, #28]	; (1f694 <nm_bsp_init+0x44>)
   1f678:	4798      	blx	r3

	return M2M_SUCCESS;
   1f67a:	2300      	movs	r3, #0
}
   1f67c:	0018      	movs	r0, r3
   1f67e:	46bd      	mov	sp, r7
   1f680:	bd80      	pop	{r7, pc}
   1f682:	46c0      	nop			; (mov r8, r8)
   1f684:	20003df8 	.word	0x20003df8
   1f688:	0001f5f9 	.word	0x0001f5f9
   1f68c:	e000e010 	.word	0xe000e010
   1f690:	0001f46d 	.word	0x0001f46d
   1f694:	0001f525 	.word	0x0001f525

0001f698 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1f698:	b580      	push	{r7, lr}
   1f69a:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1f69c:	2100      	movs	r1, #0
   1f69e:	201c      	movs	r0, #28
   1f6a0:	4b0b      	ldr	r3, [pc, #44]	; (1f6d0 <nm_bsp_reset+0x38>)
   1f6a2:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1f6a4:	2100      	movs	r1, #0
   1f6a6:	201b      	movs	r0, #27
   1f6a8:	4b09      	ldr	r3, [pc, #36]	; (1f6d0 <nm_bsp_reset+0x38>)
   1f6aa:	4798      	blx	r3
	nm_bsp_sleep(1);
   1f6ac:	2001      	movs	r0, #1
   1f6ae:	4b09      	ldr	r3, [pc, #36]	; (1f6d4 <nm_bsp_reset+0x3c>)
   1f6b0:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   1f6b2:	2101      	movs	r1, #1
   1f6b4:	201c      	movs	r0, #28
   1f6b6:	4b06      	ldr	r3, [pc, #24]	; (1f6d0 <nm_bsp_reset+0x38>)
   1f6b8:	4798      	blx	r3
	nm_bsp_sleep(10);
   1f6ba:	200a      	movs	r0, #10
   1f6bc:	4b05      	ldr	r3, [pc, #20]	; (1f6d4 <nm_bsp_reset+0x3c>)
   1f6be:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   1f6c0:	2101      	movs	r1, #1
   1f6c2:	201b      	movs	r0, #27
   1f6c4:	4b02      	ldr	r3, [pc, #8]	; (1f6d0 <nm_bsp_reset+0x38>)
   1f6c6:	4798      	blx	r3
}
   1f6c8:	46c0      	nop			; (mov r8, r8)
   1f6ca:	46bd      	mov	sp, r7
   1f6cc:	bd80      	pop	{r7, pc}
   1f6ce:	46c0      	nop			; (mov r8, r8)
   1f6d0:	0001f589 	.word	0x0001f589
   1f6d4:	0001f6d9 	.word	0x0001f6d9

0001f6d8 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   1f6d8:	b580      	push	{r7, lr}
   1f6da:	b082      	sub	sp, #8
   1f6dc:	af00      	add	r7, sp, #0
   1f6de:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1f6e0:	687b      	ldr	r3, [r7, #4]
   1f6e2:	0018      	movs	r0, r3
   1f6e4:	4b02      	ldr	r3, [pc, #8]	; (1f6f0 <nm_bsp_sleep+0x18>)
   1f6e6:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1f6e8:	46c0      	nop			; (mov r8, r8)
   1f6ea:	46bd      	mov	sp, r7
   1f6ec:	b002      	add	sp, #8
   1f6ee:	bd80      	pop	{r7, pc}
   1f6f0:	0001b4f5 	.word	0x0001b4f5

0001f6f4 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1f6f4:	b580      	push	{r7, lr}
   1f6f6:	b086      	sub	sp, #24
   1f6f8:	af00      	add	r7, sp, #0
   1f6fa:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1f6fc:	4b15      	ldr	r3, [pc, #84]	; (1f754 <nm_bsp_register_isr+0x60>)
   1f6fe:	687a      	ldr	r2, [r7, #4]
   1f700:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1f702:	230c      	movs	r3, #12
   1f704:	18fb      	adds	r3, r7, r3
   1f706:	0018      	movs	r0, r3
   1f708:	4b13      	ldr	r3, [pc, #76]	; (1f758 <nm_bsp_register_isr+0x64>)
   1f70a:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1f70c:	230c      	movs	r3, #12
   1f70e:	18fb      	adds	r3, r7, r3
   1f710:	2229      	movs	r2, #41	; 0x29
   1f712:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1f714:	230c      	movs	r3, #12
   1f716:	18fb      	adds	r3, r7, r3
   1f718:	2200      	movs	r2, #0
   1f71a:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1f71c:	230c      	movs	r3, #12
   1f71e:	18fb      	adds	r3, r7, r3
   1f720:	2201      	movs	r2, #1
   1f722:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1f724:	230c      	movs	r3, #12
   1f726:	18fb      	adds	r3, r7, r3
   1f728:	2202      	movs	r2, #2
   1f72a:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1f72c:	230c      	movs	r3, #12
   1f72e:	18fb      	adds	r3, r7, r3
   1f730:	0019      	movs	r1, r3
   1f732:	2009      	movs	r0, #9
   1f734:	4b09      	ldr	r3, [pc, #36]	; (1f75c <nm_bsp_register_isr+0x68>)
   1f736:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1f738:	4b09      	ldr	r3, [pc, #36]	; (1f760 <nm_bsp_register_isr+0x6c>)
   1f73a:	2200      	movs	r2, #0
   1f73c:	2109      	movs	r1, #9
   1f73e:	0018      	movs	r0, r3
   1f740:	4b08      	ldr	r3, [pc, #32]	; (1f764 <nm_bsp_register_isr+0x70>)
   1f742:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1f744:	2100      	movs	r1, #0
   1f746:	2009      	movs	r0, #9
   1f748:	4b07      	ldr	r3, [pc, #28]	; (1f768 <nm_bsp_register_isr+0x74>)
   1f74a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1f74c:	46c0      	nop			; (mov r8, r8)
   1f74e:	46bd      	mov	sp, r7
   1f750:	b006      	add	sp, #24
   1f752:	bd80      	pop	{r7, pc}
   1f754:	20003df8 	.word	0x20003df8
   1f758:	00025c2d 	.word	0x00025c2d
   1f75c:	00025c61 	.word	0x00025c61
   1f760:	0001f5dd 	.word	0x0001f5dd
   1f764:	0002582d 	.word	0x0002582d
   1f768:	00025891 	.word	0x00025891

0001f76c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1f76c:	b580      	push	{r7, lr}
   1f76e:	b082      	sub	sp, #8
   1f770:	af00      	add	r7, sp, #0
   1f772:	0002      	movs	r2, r0
   1f774:	1dfb      	adds	r3, r7, #7
   1f776:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   1f778:	1dfb      	adds	r3, r7, #7
   1f77a:	781b      	ldrb	r3, [r3, #0]
   1f77c:	2b00      	cmp	r3, #0
   1f77e:	d004      	beq.n	1f78a <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1f780:	2100      	movs	r1, #0
   1f782:	2009      	movs	r0, #9
   1f784:	4b05      	ldr	r3, [pc, #20]	; (1f79c <nm_bsp_interrupt_ctrl+0x30>)
   1f786:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1f788:	e003      	b.n	1f792 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1f78a:	2100      	movs	r1, #0
   1f78c:	2009      	movs	r0, #9
   1f78e:	4b04      	ldr	r3, [pc, #16]	; (1f7a0 <nm_bsp_interrupt_ctrl+0x34>)
   1f790:	4798      	blx	r3
}
   1f792:	46c0      	nop			; (mov r8, r8)
   1f794:	46bd      	mov	sp, r7
   1f796:	b002      	add	sp, #8
   1f798:	bd80      	pop	{r7, pc}
   1f79a:	46c0      	nop			; (mov r8, r8)
   1f79c:	00025891 	.word	0x00025891
   1f7a0:	000258d9 	.word	0x000258d9

0001f7a4 <system_pinmux_get_group_from_gpio_pin>:
{
   1f7a4:	b580      	push	{r7, lr}
   1f7a6:	b084      	sub	sp, #16
   1f7a8:	af00      	add	r7, sp, #0
   1f7aa:	0002      	movs	r2, r0
   1f7ac:	1dfb      	adds	r3, r7, #7
   1f7ae:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1f7b0:	230f      	movs	r3, #15
   1f7b2:	18fb      	adds	r3, r7, r3
   1f7b4:	1dfa      	adds	r2, r7, #7
   1f7b6:	7812      	ldrb	r2, [r2, #0]
   1f7b8:	09d2      	lsrs	r2, r2, #7
   1f7ba:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1f7bc:	230e      	movs	r3, #14
   1f7be:	18fb      	adds	r3, r7, r3
   1f7c0:	1dfa      	adds	r2, r7, #7
   1f7c2:	7812      	ldrb	r2, [r2, #0]
   1f7c4:	0952      	lsrs	r2, r2, #5
   1f7c6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1f7c8:	4b0d      	ldr	r3, [pc, #52]	; (1f800 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1f7ca:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1f7cc:	230f      	movs	r3, #15
   1f7ce:	18fb      	adds	r3, r7, r3
   1f7d0:	781b      	ldrb	r3, [r3, #0]
   1f7d2:	2b00      	cmp	r3, #0
   1f7d4:	d10f      	bne.n	1f7f6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1f7d6:	230f      	movs	r3, #15
   1f7d8:	18fb      	adds	r3, r7, r3
   1f7da:	781b      	ldrb	r3, [r3, #0]
   1f7dc:	009b      	lsls	r3, r3, #2
   1f7de:	2210      	movs	r2, #16
   1f7e0:	4694      	mov	ip, r2
   1f7e2:	44bc      	add	ip, r7
   1f7e4:	4463      	add	r3, ip
   1f7e6:	3b08      	subs	r3, #8
   1f7e8:	681a      	ldr	r2, [r3, #0]
   1f7ea:	230e      	movs	r3, #14
   1f7ec:	18fb      	adds	r3, r7, r3
   1f7ee:	781b      	ldrb	r3, [r3, #0]
   1f7f0:	01db      	lsls	r3, r3, #7
   1f7f2:	18d3      	adds	r3, r2, r3
   1f7f4:	e000      	b.n	1f7f8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1f7f6:	2300      	movs	r3, #0
}
   1f7f8:	0018      	movs	r0, r3
   1f7fa:	46bd      	mov	sp, r7
   1f7fc:	b004      	add	sp, #16
   1f7fe:	bd80      	pop	{r7, pc}
   1f800:	41004400 	.word	0x41004400

0001f804 <system_interrupt_enable>:
{
   1f804:	b580      	push	{r7, lr}
   1f806:	b082      	sub	sp, #8
   1f808:	af00      	add	r7, sp, #0
   1f80a:	0002      	movs	r2, r0
   1f80c:	1dfb      	adds	r3, r7, #7
   1f80e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f810:	4b06      	ldr	r3, [pc, #24]	; (1f82c <system_interrupt_enable+0x28>)
   1f812:	1dfa      	adds	r2, r7, #7
   1f814:	7812      	ldrb	r2, [r2, #0]
   1f816:	0011      	movs	r1, r2
   1f818:	221f      	movs	r2, #31
   1f81a:	400a      	ands	r2, r1
   1f81c:	2101      	movs	r1, #1
   1f81e:	4091      	lsls	r1, r2
   1f820:	000a      	movs	r2, r1
   1f822:	601a      	str	r2, [r3, #0]
}
   1f824:	46c0      	nop			; (mov r8, r8)
   1f826:	46bd      	mov	sp, r7
   1f828:	b002      	add	sp, #8
   1f82a:	bd80      	pop	{r7, pc}
   1f82c:	e000e100 	.word	0xe000e100

0001f830 <system_interrupt_disable>:
{
   1f830:	b580      	push	{r7, lr}
   1f832:	b082      	sub	sp, #8
   1f834:	af00      	add	r7, sp, #0
   1f836:	0002      	movs	r2, r0
   1f838:	1dfb      	adds	r3, r7, #7
   1f83a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1f83c:	4a07      	ldr	r2, [pc, #28]	; (1f85c <system_interrupt_disable+0x2c>)
   1f83e:	1dfb      	adds	r3, r7, #7
   1f840:	781b      	ldrb	r3, [r3, #0]
   1f842:	0019      	movs	r1, r3
   1f844:	231f      	movs	r3, #31
   1f846:	400b      	ands	r3, r1
   1f848:	2101      	movs	r1, #1
   1f84a:	4099      	lsls	r1, r3
   1f84c:	000b      	movs	r3, r1
   1f84e:	0019      	movs	r1, r3
   1f850:	2380      	movs	r3, #128	; 0x80
   1f852:	50d1      	str	r1, [r2, r3]
}
   1f854:	46c0      	nop			; (mov r8, r8)
   1f856:	46bd      	mov	sp, r7
   1f858:	b002      	add	sp, #8
   1f85a:	bd80      	pop	{r7, pc}
   1f85c:	e000e100 	.word	0xe000e100

0001f860 <port_get_group_from_gpio_pin>:
{
   1f860:	b580      	push	{r7, lr}
   1f862:	b082      	sub	sp, #8
   1f864:	af00      	add	r7, sp, #0
   1f866:	0002      	movs	r2, r0
   1f868:	1dfb      	adds	r3, r7, #7
   1f86a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1f86c:	1dfb      	adds	r3, r7, #7
   1f86e:	781b      	ldrb	r3, [r3, #0]
   1f870:	0018      	movs	r0, r3
   1f872:	4b03      	ldr	r3, [pc, #12]	; (1f880 <port_get_group_from_gpio_pin+0x20>)
   1f874:	4798      	blx	r3
   1f876:	0003      	movs	r3, r0
}
   1f878:	0018      	movs	r0, r3
   1f87a:	46bd      	mov	sp, r7
   1f87c:	b002      	add	sp, #8
   1f87e:	bd80      	pop	{r7, pc}
   1f880:	0001f7a5 	.word	0x0001f7a5

0001f884 <port_get_config_defaults>:
{
   1f884:	b580      	push	{r7, lr}
   1f886:	b082      	sub	sp, #8
   1f888:	af00      	add	r7, sp, #0
   1f88a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1f88c:	687b      	ldr	r3, [r7, #4]
   1f88e:	2200      	movs	r2, #0
   1f890:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1f892:	687b      	ldr	r3, [r7, #4]
   1f894:	2201      	movs	r2, #1
   1f896:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1f898:	687b      	ldr	r3, [r7, #4]
   1f89a:	2200      	movs	r2, #0
   1f89c:	709a      	strb	r2, [r3, #2]
}
   1f89e:	46c0      	nop			; (mov r8, r8)
   1f8a0:	46bd      	mov	sp, r7
   1f8a2:	b002      	add	sp, #8
   1f8a4:	bd80      	pop	{r7, pc}
	...

0001f8a8 <port_pin_set_output_level>:
{
   1f8a8:	b580      	push	{r7, lr}
   1f8aa:	b084      	sub	sp, #16
   1f8ac:	af00      	add	r7, sp, #0
   1f8ae:	0002      	movs	r2, r0
   1f8b0:	1dfb      	adds	r3, r7, #7
   1f8b2:	701a      	strb	r2, [r3, #0]
   1f8b4:	1dbb      	adds	r3, r7, #6
   1f8b6:	1c0a      	adds	r2, r1, #0
   1f8b8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1f8ba:	1dfb      	adds	r3, r7, #7
   1f8bc:	781b      	ldrb	r3, [r3, #0]
   1f8be:	0018      	movs	r0, r3
   1f8c0:	4b0d      	ldr	r3, [pc, #52]	; (1f8f8 <port_pin_set_output_level+0x50>)
   1f8c2:	4798      	blx	r3
   1f8c4:	0003      	movs	r3, r0
   1f8c6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1f8c8:	1dfb      	adds	r3, r7, #7
   1f8ca:	781b      	ldrb	r3, [r3, #0]
   1f8cc:	221f      	movs	r2, #31
   1f8ce:	4013      	ands	r3, r2
   1f8d0:	2201      	movs	r2, #1
   1f8d2:	409a      	lsls	r2, r3
   1f8d4:	0013      	movs	r3, r2
   1f8d6:	60bb      	str	r3, [r7, #8]
	if (level) {
   1f8d8:	1dbb      	adds	r3, r7, #6
   1f8da:	781b      	ldrb	r3, [r3, #0]
   1f8dc:	2b00      	cmp	r3, #0
   1f8de:	d003      	beq.n	1f8e8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1f8e0:	68fb      	ldr	r3, [r7, #12]
   1f8e2:	68ba      	ldr	r2, [r7, #8]
   1f8e4:	619a      	str	r2, [r3, #24]
}
   1f8e6:	e002      	b.n	1f8ee <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1f8e8:	68fb      	ldr	r3, [r7, #12]
   1f8ea:	68ba      	ldr	r2, [r7, #8]
   1f8ec:	615a      	str	r2, [r3, #20]
}
   1f8ee:	46c0      	nop			; (mov r8, r8)
   1f8f0:	46bd      	mov	sp, r7
   1f8f2:	b004      	add	sp, #16
   1f8f4:	bd80      	pop	{r7, pc}
   1f8f6:	46c0      	nop			; (mov r8, r8)
   1f8f8:	0001f861 	.word	0x0001f861

0001f8fc <spi_is_syncing>:
{
   1f8fc:	b580      	push	{r7, lr}
   1f8fe:	b084      	sub	sp, #16
   1f900:	af00      	add	r7, sp, #0
   1f902:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1f904:	687b      	ldr	r3, [r7, #4]
   1f906:	681b      	ldr	r3, [r3, #0]
   1f908:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   1f90a:	68fb      	ldr	r3, [r7, #12]
   1f90c:	69db      	ldr	r3, [r3, #28]
   1f90e:	1e5a      	subs	r2, r3, #1
   1f910:	4193      	sbcs	r3, r2
   1f912:	b2db      	uxtb	r3, r3
}
   1f914:	0018      	movs	r0, r3
   1f916:	46bd      	mov	sp, r7
   1f918:	b004      	add	sp, #16
   1f91a:	bd80      	pop	{r7, pc}

0001f91c <spi_get_config_defaults>:
{
   1f91c:	b580      	push	{r7, lr}
   1f91e:	b082      	sub	sp, #8
   1f920:	af00      	add	r7, sp, #0
   1f922:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   1f924:	687b      	ldr	r3, [r7, #4]
   1f926:	2201      	movs	r2, #1
   1f928:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1f92a:	687b      	ldr	r3, [r7, #4]
   1f92c:	2200      	movs	r2, #0
   1f92e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1f930:	687b      	ldr	r3, [r7, #4]
   1f932:	2200      	movs	r2, #0
   1f934:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1f936:	687b      	ldr	r3, [r7, #4]
   1f938:	22c0      	movs	r2, #192	; 0xc0
   1f93a:	0392      	lsls	r2, r2, #14
   1f93c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1f93e:	687b      	ldr	r3, [r7, #4]
   1f940:	2200      	movs	r2, #0
   1f942:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1f944:	687b      	ldr	r3, [r7, #4]
   1f946:	2200      	movs	r2, #0
   1f948:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1f94a:	687b      	ldr	r3, [r7, #4]
   1f94c:	2201      	movs	r2, #1
   1f94e:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   1f950:	687b      	ldr	r3, [r7, #4]
   1f952:	2201      	movs	r2, #1
   1f954:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   1f956:	687b      	ldr	r3, [r7, #4]
   1f958:	2200      	movs	r2, #0
   1f95a:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   1f95c:	687b      	ldr	r3, [r7, #4]
   1f95e:	2224      	movs	r2, #36	; 0x24
   1f960:	2100      	movs	r1, #0
   1f962:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1f964:	687b      	ldr	r3, [r7, #4]
   1f966:	3318      	adds	r3, #24
   1f968:	220c      	movs	r2, #12
   1f96a:	2100      	movs	r1, #0
   1f96c:	0018      	movs	r0, r3
   1f96e:	4b0a      	ldr	r3, [pc, #40]	; (1f998 <spi_get_config_defaults+0x7c>)
   1f970:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   1f972:	687b      	ldr	r3, [r7, #4]
   1f974:	4a09      	ldr	r2, [pc, #36]	; (1f99c <spi_get_config_defaults+0x80>)
   1f976:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1f978:	687b      	ldr	r3, [r7, #4]
   1f97a:	2200      	movs	r2, #0
   1f97c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1f97e:	687b      	ldr	r3, [r7, #4]
   1f980:	2200      	movs	r2, #0
   1f982:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1f984:	687b      	ldr	r3, [r7, #4]
   1f986:	2200      	movs	r2, #0
   1f988:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1f98a:	687b      	ldr	r3, [r7, #4]
   1f98c:	2200      	movs	r2, #0
   1f98e:	635a      	str	r2, [r3, #52]	; 0x34
};
   1f990:	46c0      	nop			; (mov r8, r8)
   1f992:	46bd      	mov	sp, r7
   1f994:	b002      	add	sp, #8
   1f996:	bd80      	pop	{r7, pc}
   1f998:	000339ff 	.word	0x000339ff
   1f99c:	000186a0 	.word	0x000186a0

0001f9a0 <spi_slave_inst_get_config_defaults>:
{
   1f9a0:	b580      	push	{r7, lr}
   1f9a2:	b082      	sub	sp, #8
   1f9a4:	af00      	add	r7, sp, #0
   1f9a6:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   1f9a8:	687b      	ldr	r3, [r7, #4]
   1f9aa:	220a      	movs	r2, #10
   1f9ac:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1f9ae:	687b      	ldr	r3, [r7, #4]
   1f9b0:	2200      	movs	r2, #0
   1f9b2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1f9b4:	687b      	ldr	r3, [r7, #4]
   1f9b6:	2200      	movs	r2, #0
   1f9b8:	709a      	strb	r2, [r3, #2]
}
   1f9ba:	46c0      	nop			; (mov r8, r8)
   1f9bc:	46bd      	mov	sp, r7
   1f9be:	b002      	add	sp, #8
   1f9c0:	bd80      	pop	{r7, pc}
	...

0001f9c4 <spi_attach_slave>:
{
   1f9c4:	b580      	push	{r7, lr}
   1f9c6:	b084      	sub	sp, #16
   1f9c8:	af00      	add	r7, sp, #0
   1f9ca:	6078      	str	r0, [r7, #4]
   1f9cc:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   1f9ce:	683b      	ldr	r3, [r7, #0]
   1f9d0:	781a      	ldrb	r2, [r3, #0]
   1f9d2:	687b      	ldr	r3, [r7, #4]
   1f9d4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1f9d6:	683b      	ldr	r3, [r7, #0]
   1f9d8:	785a      	ldrb	r2, [r3, #1]
   1f9da:	687b      	ldr	r3, [r7, #4]
   1f9dc:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1f9de:	683b      	ldr	r3, [r7, #0]
   1f9e0:	789a      	ldrb	r2, [r3, #2]
   1f9e2:	687b      	ldr	r3, [r7, #4]
   1f9e4:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   1f9e6:	230c      	movs	r3, #12
   1f9e8:	18fb      	adds	r3, r7, r3
   1f9ea:	0018      	movs	r0, r3
   1f9ec:	4b0b      	ldr	r3, [pc, #44]	; (1fa1c <spi_attach_slave+0x58>)
   1f9ee:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1f9f0:	230c      	movs	r3, #12
   1f9f2:	18fb      	adds	r3, r7, r3
   1f9f4:	2201      	movs	r2, #1
   1f9f6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1f9f8:	687b      	ldr	r3, [r7, #4]
   1f9fa:	781b      	ldrb	r3, [r3, #0]
   1f9fc:	220c      	movs	r2, #12
   1f9fe:	18ba      	adds	r2, r7, r2
   1fa00:	0011      	movs	r1, r2
   1fa02:	0018      	movs	r0, r3
   1fa04:	4b06      	ldr	r3, [pc, #24]	; (1fa20 <spi_attach_slave+0x5c>)
   1fa06:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1fa08:	687b      	ldr	r3, [r7, #4]
   1fa0a:	781b      	ldrb	r3, [r3, #0]
   1fa0c:	2101      	movs	r1, #1
   1fa0e:	0018      	movs	r0, r3
   1fa10:	4b04      	ldr	r3, [pc, #16]	; (1fa24 <spi_attach_slave+0x60>)
   1fa12:	4798      	blx	r3
}
   1fa14:	46c0      	nop			; (mov r8, r8)
   1fa16:	46bd      	mov	sp, r7
   1fa18:	b004      	add	sp, #16
   1fa1a:	bd80      	pop	{r7, pc}
   1fa1c:	0001f885 	.word	0x0001f885
   1fa20:	00025d85 	.word	0x00025d85
   1fa24:	0001f8a9 	.word	0x0001f8a9

0001fa28 <spi_enable>:
{
   1fa28:	b580      	push	{r7, lr}
   1fa2a:	b084      	sub	sp, #16
   1fa2c:	af00      	add	r7, sp, #0
   1fa2e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1fa30:	687b      	ldr	r3, [r7, #4]
   1fa32:	681b      	ldr	r3, [r3, #0]
   1fa34:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1fa36:	687b      	ldr	r3, [r7, #4]
   1fa38:	681b      	ldr	r3, [r3, #0]
   1fa3a:	0018      	movs	r0, r3
   1fa3c:	4b0b      	ldr	r3, [pc, #44]	; (1fa6c <spi_enable+0x44>)
   1fa3e:	4798      	blx	r3
   1fa40:	0003      	movs	r3, r0
   1fa42:	0018      	movs	r0, r3
   1fa44:	4b0a      	ldr	r3, [pc, #40]	; (1fa70 <spi_enable+0x48>)
   1fa46:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   1fa48:	46c0      	nop			; (mov r8, r8)
   1fa4a:	687b      	ldr	r3, [r7, #4]
   1fa4c:	0018      	movs	r0, r3
   1fa4e:	4b09      	ldr	r3, [pc, #36]	; (1fa74 <spi_enable+0x4c>)
   1fa50:	4798      	blx	r3
   1fa52:	1e03      	subs	r3, r0, #0
   1fa54:	d1f9      	bne.n	1fa4a <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1fa56:	68fb      	ldr	r3, [r7, #12]
   1fa58:	681b      	ldr	r3, [r3, #0]
   1fa5a:	2202      	movs	r2, #2
   1fa5c:	431a      	orrs	r2, r3
   1fa5e:	68fb      	ldr	r3, [r7, #12]
   1fa60:	601a      	str	r2, [r3, #0]
}
   1fa62:	46c0      	nop			; (mov r8, r8)
   1fa64:	46bd      	mov	sp, r7
   1fa66:	b004      	add	sp, #16
   1fa68:	bd80      	pop	{r7, pc}
   1fa6a:	46c0      	nop			; (mov r8, r8)
   1fa6c:	00026a55 	.word	0x00026a55
   1fa70:	0001f805 	.word	0x0001f805
   1fa74:	0001f8fd 	.word	0x0001f8fd

0001fa78 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   1fa78:	b580      	push	{r7, lr}
   1fa7a:	b084      	sub	sp, #16
   1fa7c:	af00      	add	r7, sp, #0
   1fa7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fa80:	687b      	ldr	r3, [r7, #4]
   1fa82:	681b      	ldr	r3, [r3, #0]
   1fa84:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1fa86:	687b      	ldr	r3, [r7, #4]
   1fa88:	681b      	ldr	r3, [r3, #0]
   1fa8a:	0018      	movs	r0, r3
   1fa8c:	4b0e      	ldr	r3, [pc, #56]	; (1fac8 <spi_disable+0x50>)
   1fa8e:	4798      	blx	r3
   1fa90:	0003      	movs	r3, r0
   1fa92:	0018      	movs	r0, r3
   1fa94:	4b0d      	ldr	r3, [pc, #52]	; (1facc <spi_disable+0x54>)
   1fa96:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1fa98:	46c0      	nop			; (mov r8, r8)
   1fa9a:	687b      	ldr	r3, [r7, #4]
   1fa9c:	0018      	movs	r0, r3
   1fa9e:	4b0c      	ldr	r3, [pc, #48]	; (1fad0 <spi_disable+0x58>)
   1faa0:	4798      	blx	r3
   1faa2:	1e03      	subs	r3, r0, #0
   1faa4:	d1f9      	bne.n	1fa9a <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1faa6:	68fb      	ldr	r3, [r7, #12]
   1faa8:	228f      	movs	r2, #143	; 0x8f
   1faaa:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1faac:	68fb      	ldr	r3, [r7, #12]
   1faae:	228f      	movs	r2, #143	; 0x8f
   1fab0:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1fab2:	68fb      	ldr	r3, [r7, #12]
   1fab4:	681b      	ldr	r3, [r3, #0]
   1fab6:	2202      	movs	r2, #2
   1fab8:	4393      	bics	r3, r2
   1faba:	001a      	movs	r2, r3
   1fabc:	68fb      	ldr	r3, [r7, #12]
   1fabe:	601a      	str	r2, [r3, #0]
}
   1fac0:	46c0      	nop			; (mov r8, r8)
   1fac2:	46bd      	mov	sp, r7
   1fac4:	b004      	add	sp, #16
   1fac6:	bd80      	pop	{r7, pc}
   1fac8:	00026a55 	.word	0x00026a55
   1facc:	0001f831 	.word	0x0001f831
   1fad0:	0001f8fd 	.word	0x0001f8fd

0001fad4 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   1fad4:	b580      	push	{r7, lr}
   1fad6:	b084      	sub	sp, #16
   1fad8:	af00      	add	r7, sp, #0
   1fada:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fadc:	687b      	ldr	r3, [r7, #4]
   1fade:	681b      	ldr	r3, [r3, #0]
   1fae0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1fae2:	68fb      	ldr	r3, [r7, #12]
   1fae4:	7e1b      	ldrb	r3, [r3, #24]
   1fae6:	b2db      	uxtb	r3, r3
   1fae8:	001a      	movs	r2, r3
   1faea:	2302      	movs	r3, #2
   1faec:	4013      	ands	r3, r2
   1faee:	1e5a      	subs	r2, r3, #1
   1faf0:	4193      	sbcs	r3, r2
   1faf2:	b2db      	uxtb	r3, r3
}
   1faf4:	0018      	movs	r0, r3
   1faf6:	46bd      	mov	sp, r7
   1faf8:	b004      	add	sp, #16
   1fafa:	bd80      	pop	{r7, pc}

0001fafc <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   1fafc:	b580      	push	{r7, lr}
   1fafe:	b084      	sub	sp, #16
   1fb00:	af00      	add	r7, sp, #0
   1fb02:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fb04:	687b      	ldr	r3, [r7, #4]
   1fb06:	681b      	ldr	r3, [r3, #0]
   1fb08:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1fb0a:	68fb      	ldr	r3, [r7, #12]
   1fb0c:	7e1b      	ldrb	r3, [r3, #24]
   1fb0e:	b2db      	uxtb	r3, r3
   1fb10:	001a      	movs	r2, r3
   1fb12:	2301      	movs	r3, #1
   1fb14:	4013      	ands	r3, r2
   1fb16:	1e5a      	subs	r2, r3, #1
   1fb18:	4193      	sbcs	r3, r2
   1fb1a:	b2db      	uxtb	r3, r3
}
   1fb1c:	0018      	movs	r0, r3
   1fb1e:	46bd      	mov	sp, r7
   1fb20:	b004      	add	sp, #16
   1fb22:	bd80      	pop	{r7, pc}

0001fb24 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   1fb24:	b580      	push	{r7, lr}
   1fb26:	b084      	sub	sp, #16
   1fb28:	af00      	add	r7, sp, #0
   1fb2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fb2c:	687b      	ldr	r3, [r7, #4]
   1fb2e:	681b      	ldr	r3, [r3, #0]
   1fb30:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1fb32:	68fb      	ldr	r3, [r7, #12]
   1fb34:	7e1b      	ldrb	r3, [r3, #24]
   1fb36:	b2db      	uxtb	r3, r3
   1fb38:	001a      	movs	r2, r3
   1fb3a:	2304      	movs	r3, #4
   1fb3c:	4013      	ands	r3, r2
   1fb3e:	1e5a      	subs	r2, r3, #1
   1fb40:	4193      	sbcs	r3, r2
   1fb42:	b2db      	uxtb	r3, r3
}
   1fb44:	0018      	movs	r0, r3
   1fb46:	46bd      	mov	sp, r7
   1fb48:	b004      	add	sp, #16
   1fb4a:	bd80      	pop	{r7, pc}

0001fb4c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   1fb4c:	b580      	push	{r7, lr}
   1fb4e:	b084      	sub	sp, #16
   1fb50:	af00      	add	r7, sp, #0
   1fb52:	6078      	str	r0, [r7, #4]
   1fb54:	000a      	movs	r2, r1
   1fb56:	1cbb      	adds	r3, r7, #2
   1fb58:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fb5a:	687b      	ldr	r3, [r7, #4]
   1fb5c:	681b      	ldr	r3, [r3, #0]
   1fb5e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   1fb60:	687b      	ldr	r3, [r7, #4]
   1fb62:	0018      	movs	r0, r3
   1fb64:	4b0a      	ldr	r3, [pc, #40]	; (1fb90 <spi_write+0x44>)
   1fb66:	4798      	blx	r3
   1fb68:	0003      	movs	r3, r0
   1fb6a:	001a      	movs	r2, r3
   1fb6c:	2301      	movs	r3, #1
   1fb6e:	4053      	eors	r3, r2
   1fb70:	b2db      	uxtb	r3, r3
   1fb72:	2b00      	cmp	r3, #0
   1fb74:	d001      	beq.n	1fb7a <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   1fb76:	2305      	movs	r3, #5
   1fb78:	e006      	b.n	1fb88 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1fb7a:	1cbb      	adds	r3, r7, #2
   1fb7c:	881b      	ldrh	r3, [r3, #0]
   1fb7e:	05db      	lsls	r3, r3, #23
   1fb80:	0dda      	lsrs	r2, r3, #23
   1fb82:	68fb      	ldr	r3, [r7, #12]
   1fb84:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   1fb86:	2300      	movs	r3, #0
}
   1fb88:	0018      	movs	r0, r3
   1fb8a:	46bd      	mov	sp, r7
   1fb8c:	b004      	add	sp, #16
   1fb8e:	bd80      	pop	{r7, pc}
   1fb90:	0001fafd 	.word	0x0001fafd

0001fb94 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   1fb94:	b580      	push	{r7, lr}
   1fb96:	b084      	sub	sp, #16
   1fb98:	af00      	add	r7, sp, #0
   1fb9a:	6078      	str	r0, [r7, #4]
   1fb9c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1fb9e:	687b      	ldr	r3, [r7, #4]
   1fba0:	681b      	ldr	r3, [r3, #0]
   1fba2:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   1fba4:	687b      	ldr	r3, [r7, #4]
   1fba6:	0018      	movs	r0, r3
   1fba8:	4b1b      	ldr	r3, [pc, #108]	; (1fc18 <spi_read+0x84>)
   1fbaa:	4798      	blx	r3
   1fbac:	0003      	movs	r3, r0
   1fbae:	001a      	movs	r2, r3
   1fbb0:	2301      	movs	r3, #1
   1fbb2:	4053      	eors	r3, r2
   1fbb4:	b2db      	uxtb	r3, r3
   1fbb6:	2b00      	cmp	r3, #0
   1fbb8:	d001      	beq.n	1fbbe <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   1fbba:	2310      	movs	r3, #16
   1fbbc:	e027      	b.n	1fc0e <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   1fbbe:	230f      	movs	r3, #15
   1fbc0:	18fb      	adds	r3, r7, r3
   1fbc2:	2200      	movs	r2, #0
   1fbc4:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1fbc6:	68bb      	ldr	r3, [r7, #8]
   1fbc8:	8b5b      	ldrh	r3, [r3, #26]
   1fbca:	b29b      	uxth	r3, r3
   1fbcc:	001a      	movs	r2, r3
   1fbce:	2304      	movs	r3, #4
   1fbd0:	4013      	ands	r3, r2
   1fbd2:	d006      	beq.n	1fbe2 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   1fbd4:	230f      	movs	r3, #15
   1fbd6:	18fb      	adds	r3, r7, r3
   1fbd8:	221e      	movs	r2, #30
   1fbda:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1fbdc:	68bb      	ldr	r3, [r7, #8]
   1fbde:	2204      	movs	r2, #4
   1fbe0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1fbe2:	687b      	ldr	r3, [r7, #4]
   1fbe4:	799b      	ldrb	r3, [r3, #6]
   1fbe6:	2b01      	cmp	r3, #1
   1fbe8:	d108      	bne.n	1fbfc <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1fbea:	68bb      	ldr	r3, [r7, #8]
   1fbec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1fbee:	b29b      	uxth	r3, r3
   1fbf0:	05db      	lsls	r3, r3, #23
   1fbf2:	0ddb      	lsrs	r3, r3, #23
   1fbf4:	b29a      	uxth	r2, r3
   1fbf6:	683b      	ldr	r3, [r7, #0]
   1fbf8:	801a      	strh	r2, [r3, #0]
   1fbfa:	e005      	b.n	1fc08 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1fbfc:	68bb      	ldr	r3, [r7, #8]
   1fbfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1fc00:	b2db      	uxtb	r3, r3
   1fc02:	b29a      	uxth	r2, r3
   1fc04:	683b      	ldr	r3, [r7, #0]
   1fc06:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   1fc08:	230f      	movs	r3, #15
   1fc0a:	18fb      	adds	r3, r7, r3
   1fc0c:	781b      	ldrb	r3, [r3, #0]
}
   1fc0e:	0018      	movs	r0, r3
   1fc10:	46bd      	mov	sp, r7
   1fc12:	b004      	add	sp, #16
   1fc14:	bd80      	pop	{r7, pc}
   1fc16:	46c0      	nop			; (mov r8, r8)
   1fc18:	0001fb25 	.word	0x0001fb25

0001fc1c <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   1fc1c:	b580      	push	{r7, lr}
   1fc1e:	b086      	sub	sp, #24
   1fc20:	af00      	add	r7, sp, #0
   1fc22:	60f8      	str	r0, [r7, #12]
   1fc24:	60b9      	str	r1, [r7, #8]
   1fc26:	1dbb      	adds	r3, r7, #6
   1fc28:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   1fc2a:	2313      	movs	r3, #19
   1fc2c:	18fb      	adds	r3, r7, r3
   1fc2e:	22ff      	movs	r2, #255	; 0xff
   1fc30:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1fc32:	2317      	movs	r3, #23
   1fc34:	18fb      	adds	r3, r7, r3
   1fc36:	2200      	movs	r2, #0
   1fc38:	701a      	strb	r2, [r3, #0]
   1fc3a:	2316      	movs	r3, #22
   1fc3c:	18fb      	adds	r3, r7, r3
   1fc3e:	2200      	movs	r2, #0
   1fc40:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   1fc42:	2314      	movs	r3, #20
   1fc44:	18fb      	adds	r3, r7, r3
   1fc46:	2200      	movs	r2, #0
   1fc48:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   1fc4a:	2310      	movs	r3, #16
   1fc4c:	18fb      	adds	r3, r7, r3
   1fc4e:	2200      	movs	r2, #0
   1fc50:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1fc52:	68bb      	ldr	r3, [r7, #8]
   1fc54:	2b00      	cmp	r3, #0
   1fc56:	d102      	bne.n	1fc5e <spi_rw+0x42>
   1fc58:	68fb      	ldr	r3, [r7, #12]
   1fc5a:	2b00      	cmp	r3, #0
   1fc5c:	d003      	beq.n	1fc66 <spi_rw+0x4a>
   1fc5e:	1dbb      	adds	r3, r7, #6
   1fc60:	881b      	ldrh	r3, [r3, #0]
   1fc62:	2b00      	cmp	r3, #0
   1fc64:	d102      	bne.n	1fc6c <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   1fc66:	230f      	movs	r3, #15
   1fc68:	425b      	negs	r3, r3
   1fc6a:	e07e      	b.n	1fd6a <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   1fc6c:	68fb      	ldr	r3, [r7, #12]
   1fc6e:	2b00      	cmp	r3, #0
   1fc70:	d106      	bne.n	1fc80 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   1fc72:	2313      	movs	r3, #19
   1fc74:	18fb      	adds	r3, r7, r3
   1fc76:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   1fc78:	2317      	movs	r3, #23
   1fc7a:	18fb      	adds	r3, r7, r3
   1fc7c:	2201      	movs	r2, #1
   1fc7e:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   1fc80:	68bb      	ldr	r3, [r7, #8]
   1fc82:	2b00      	cmp	r3, #0
   1fc84:	d106      	bne.n	1fc94 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   1fc86:	2313      	movs	r3, #19
   1fc88:	18fb      	adds	r3, r7, r3
   1fc8a:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   1fc8c:	2316      	movs	r3, #22
   1fc8e:	18fb      	adds	r3, r7, r3
   1fc90:	2201      	movs	r2, #1
   1fc92:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   1fc94:	4937      	ldr	r1, [pc, #220]	; (1fd74 <spi_rw+0x158>)
   1fc96:	4b38      	ldr	r3, [pc, #224]	; (1fd78 <spi_rw+0x15c>)
   1fc98:	2201      	movs	r2, #1
   1fc9a:	0018      	movs	r0, r3
   1fc9c:	4b37      	ldr	r3, [pc, #220]	; (1fd7c <spi_rw+0x160>)
   1fc9e:	4798      	blx	r3

	while (u16Sz) {
   1fca0:	e04c      	b.n	1fd3c <spi_rw+0x120>
		txd_data = *pu8Mosi;
   1fca2:	68fb      	ldr	r3, [r7, #12]
   1fca4:	781a      	ldrb	r2, [r3, #0]
   1fca6:	2314      	movs	r3, #20
   1fca8:	18fb      	adds	r3, r7, r3
   1fcaa:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   1fcac:	46c0      	nop			; (mov r8, r8)
   1fcae:	4b32      	ldr	r3, [pc, #200]	; (1fd78 <spi_rw+0x15c>)
   1fcb0:	0018      	movs	r0, r3
   1fcb2:	4b33      	ldr	r3, [pc, #204]	; (1fd80 <spi_rw+0x164>)
   1fcb4:	4798      	blx	r3
   1fcb6:	0003      	movs	r3, r0
   1fcb8:	001a      	movs	r2, r3
   1fcba:	2301      	movs	r3, #1
   1fcbc:	4053      	eors	r3, r2
   1fcbe:	b2db      	uxtb	r3, r3
   1fcc0:	2b00      	cmp	r3, #0
   1fcc2:	d1f4      	bne.n	1fcae <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   1fcc4:	46c0      	nop			; (mov r8, r8)
   1fcc6:	2314      	movs	r3, #20
   1fcc8:	18fb      	adds	r3, r7, r3
   1fcca:	881a      	ldrh	r2, [r3, #0]
   1fccc:	4b2a      	ldr	r3, [pc, #168]	; (1fd78 <spi_rw+0x15c>)
   1fcce:	0011      	movs	r1, r2
   1fcd0:	0018      	movs	r0, r3
   1fcd2:	4b2c      	ldr	r3, [pc, #176]	; (1fd84 <spi_rw+0x168>)
   1fcd4:	4798      	blx	r3
   1fcd6:	1e03      	subs	r3, r0, #0
   1fcd8:	d1f5      	bne.n	1fcc6 <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   1fcda:	46c0      	nop			; (mov r8, r8)
   1fcdc:	4b26      	ldr	r3, [pc, #152]	; (1fd78 <spi_rw+0x15c>)
   1fcde:	0018      	movs	r0, r3
   1fce0:	4b29      	ldr	r3, [pc, #164]	; (1fd88 <spi_rw+0x16c>)
   1fce2:	4798      	blx	r3
   1fce4:	0003      	movs	r3, r0
   1fce6:	001a      	movs	r2, r3
   1fce8:	2301      	movs	r3, #1
   1fcea:	4053      	eors	r3, r2
   1fcec:	b2db      	uxtb	r3, r3
   1fcee:	2b00      	cmp	r3, #0
   1fcf0:	d1f4      	bne.n	1fcdc <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   1fcf2:	46c0      	nop			; (mov r8, r8)
   1fcf4:	2310      	movs	r3, #16
   1fcf6:	18fa      	adds	r2, r7, r3
   1fcf8:	4b1f      	ldr	r3, [pc, #124]	; (1fd78 <spi_rw+0x15c>)
   1fcfa:	0011      	movs	r1, r2
   1fcfc:	0018      	movs	r0, r3
   1fcfe:	4b23      	ldr	r3, [pc, #140]	; (1fd8c <spi_rw+0x170>)
   1fd00:	4798      	blx	r3
   1fd02:	1e03      	subs	r3, r0, #0
   1fd04:	d1f6      	bne.n	1fcf4 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   1fd06:	2310      	movs	r3, #16
   1fd08:	18fb      	adds	r3, r7, r3
   1fd0a:	881b      	ldrh	r3, [r3, #0]
   1fd0c:	b2da      	uxtb	r2, r3
   1fd0e:	68bb      	ldr	r3, [r7, #8]
   1fd10:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   1fd12:	1dbb      	adds	r3, r7, #6
   1fd14:	881a      	ldrh	r2, [r3, #0]
   1fd16:	1dbb      	adds	r3, r7, #6
   1fd18:	3a01      	subs	r2, #1
   1fd1a:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   1fd1c:	2316      	movs	r3, #22
   1fd1e:	18fb      	adds	r3, r7, r3
   1fd20:	781b      	ldrb	r3, [r3, #0]
   1fd22:	2b00      	cmp	r3, #0
   1fd24:	d102      	bne.n	1fd2c <spi_rw+0x110>
			pu8Miso++;
   1fd26:	68bb      	ldr	r3, [r7, #8]
   1fd28:	3301      	adds	r3, #1
   1fd2a:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   1fd2c:	2317      	movs	r3, #23
   1fd2e:	18fb      	adds	r3, r7, r3
   1fd30:	781b      	ldrb	r3, [r3, #0]
   1fd32:	2b00      	cmp	r3, #0
   1fd34:	d102      	bne.n	1fd3c <spi_rw+0x120>
			pu8Mosi++;
   1fd36:	68fb      	ldr	r3, [r7, #12]
   1fd38:	3301      	adds	r3, #1
   1fd3a:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   1fd3c:	1dbb      	adds	r3, r7, #6
   1fd3e:	881b      	ldrh	r3, [r3, #0]
   1fd40:	2b00      	cmp	r3, #0
   1fd42:	d1ae      	bne.n	1fca2 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   1fd44:	46c0      	nop			; (mov r8, r8)
   1fd46:	4b0c      	ldr	r3, [pc, #48]	; (1fd78 <spi_rw+0x15c>)
   1fd48:	0018      	movs	r0, r3
   1fd4a:	4b11      	ldr	r3, [pc, #68]	; (1fd90 <spi_rw+0x174>)
   1fd4c:	4798      	blx	r3
   1fd4e:	0003      	movs	r3, r0
   1fd50:	001a      	movs	r2, r3
   1fd52:	2301      	movs	r3, #1
   1fd54:	4053      	eors	r3, r2
   1fd56:	b2db      	uxtb	r3, r3
   1fd58:	2b00      	cmp	r3, #0
   1fd5a:	d1f4      	bne.n	1fd46 <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   1fd5c:	4905      	ldr	r1, [pc, #20]	; (1fd74 <spi_rw+0x158>)
   1fd5e:	4b06      	ldr	r3, [pc, #24]	; (1fd78 <spi_rw+0x15c>)
   1fd60:	2200      	movs	r2, #0
   1fd62:	0018      	movs	r0, r3
   1fd64:	4b05      	ldr	r3, [pc, #20]	; (1fd7c <spi_rw+0x160>)
   1fd66:	4798      	blx	r3

	return M2M_SUCCESS;
   1fd68:	2300      	movs	r3, #0
}
   1fd6a:	0018      	movs	r0, r3
   1fd6c:	46bd      	mov	sp, r7
   1fd6e:	b006      	add	sp, #24
   1fd70:	bd80      	pop	{r7, pc}
   1fd72:	46c0      	nop			; (mov r8, r8)
   1fd74:	200054a0 	.word	0x200054a0
   1fd78:	200054a4 	.word	0x200054a4
   1fd7c:	000274c9 	.word	0x000274c9
   1fd80:	0001fafd 	.word	0x0001fafd
   1fd84:	0001fb4d 	.word	0x0001fb4d
   1fd88:	0001fb25 	.word	0x0001fb25
   1fd8c:	0001fb95 	.word	0x0001fb95
   1fd90:	0001fad5 	.word	0x0001fad5

0001fd94 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   1fd94:	b580      	push	{r7, lr}
   1fd96:	b092      	sub	sp, #72	; 0x48
   1fd98:	af00      	add	r7, sp, #0
   1fd9a:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   1fd9c:	2347      	movs	r3, #71	; 0x47
   1fd9e:	18fb      	adds	r3, r7, r3
   1fda0:	2200      	movs	r2, #0
   1fda2:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   1fda4:	2308      	movs	r3, #8
   1fda6:	18fb      	adds	r3, r7, r3
   1fda8:	0018      	movs	r0, r3
   1fdaa:	4b26      	ldr	r3, [pc, #152]	; (1fe44 <nm_bus_init+0xb0>)
   1fdac:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   1fdae:	2308      	movs	r3, #8
   1fdb0:	18fb      	adds	r3, r7, r3
   1fdb2:	220e      	movs	r2, #14
   1fdb4:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   1fdb6:	2308      	movs	r3, #8
   1fdb8:	18fa      	adds	r2, r7, r3
   1fdba:	4b23      	ldr	r3, [pc, #140]	; (1fe48 <nm_bus_init+0xb4>)
   1fdbc:	0011      	movs	r1, r2
   1fdbe:	0018      	movs	r0, r3
   1fdc0:	4b22      	ldr	r3, [pc, #136]	; (1fe4c <nm_bus_init+0xb8>)
   1fdc2:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   1fdc4:	230c      	movs	r3, #12
   1fdc6:	18fb      	adds	r3, r7, r3
   1fdc8:	0018      	movs	r0, r3
   1fdca:	4b21      	ldr	r3, [pc, #132]	; (1fe50 <nm_bus_init+0xbc>)
   1fdcc:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   1fdce:	230c      	movs	r3, #12
   1fdd0:	18fb      	adds	r3, r7, r3
   1fdd2:	22c0      	movs	r2, #192	; 0xc0
   1fdd4:	0392      	lsls	r2, r2, #14
   1fdd6:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   1fdd8:	230c      	movs	r3, #12
   1fdda:	18fb      	adds	r3, r7, r3
   1fddc:	4a1d      	ldr	r2, [pc, #116]	; (1fe54 <nm_bus_init+0xc0>)
   1fdde:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   1fde0:	230c      	movs	r3, #12
   1fde2:	18fb      	adds	r3, r7, r3
   1fde4:	4a1c      	ldr	r2, [pc, #112]	; (1fe58 <nm_bus_init+0xc4>)
   1fde6:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   1fde8:	230c      	movs	r3, #12
   1fdea:	18fb      	adds	r3, r7, r3
   1fdec:	2201      	movs	r2, #1
   1fdee:	4252      	negs	r2, r2
   1fdf0:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   1fdf2:	230c      	movs	r3, #12
   1fdf4:	18fb      	adds	r3, r7, r3
   1fdf6:	4a19      	ldr	r2, [pc, #100]	; (1fe5c <nm_bus_init+0xc8>)
   1fdf8:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   1fdfa:	230c      	movs	r3, #12
   1fdfc:	18fb      	adds	r3, r7, r3
   1fdfe:	2200      	movs	r2, #0
   1fe00:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   1fe02:	230c      	movs	r3, #12
   1fe04:	18fb      	adds	r3, r7, r3
   1fe06:	4a16      	ldr	r2, [pc, #88]	; (1fe60 <nm_bus_init+0xcc>)
   1fe08:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   1fe0a:	230c      	movs	r3, #12
   1fe0c:	18fa      	adds	r2, r7, r3
   1fe0e:	4915      	ldr	r1, [pc, #84]	; (1fe64 <nm_bus_init+0xd0>)
   1fe10:	4b15      	ldr	r3, [pc, #84]	; (1fe68 <nm_bus_init+0xd4>)
   1fe12:	0018      	movs	r0, r3
   1fe14:	4b15      	ldr	r3, [pc, #84]	; (1fe6c <nm_bus_init+0xd8>)
   1fe16:	4798      	blx	r3
   1fe18:	1e03      	subs	r3, r0, #0
   1fe1a:	d002      	beq.n	1fe22 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   1fe1c:	2306      	movs	r3, #6
   1fe1e:	425b      	negs	r3, r3
   1fe20:	e00c      	b.n	1fe3c <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   1fe22:	4b11      	ldr	r3, [pc, #68]	; (1fe68 <nm_bus_init+0xd4>)
   1fe24:	0018      	movs	r0, r3
   1fe26:	4b12      	ldr	r3, [pc, #72]	; (1fe70 <nm_bus_init+0xdc>)
   1fe28:	4798      	blx	r3

	nm_bsp_reset();
   1fe2a:	4b12      	ldr	r3, [pc, #72]	; (1fe74 <nm_bus_init+0xe0>)
   1fe2c:	4798      	blx	r3
	nm_bsp_sleep(1);
   1fe2e:	2001      	movs	r0, #1
   1fe30:	4b11      	ldr	r3, [pc, #68]	; (1fe78 <nm_bus_init+0xe4>)
   1fe32:	4798      	blx	r3
#endif
	return result;
   1fe34:	2347      	movs	r3, #71	; 0x47
   1fe36:	18fb      	adds	r3, r7, r3
   1fe38:	781b      	ldrb	r3, [r3, #0]
   1fe3a:	b25b      	sxtb	r3, r3
}
   1fe3c:	0018      	movs	r0, r3
   1fe3e:	46bd      	mov	sp, r7
   1fe40:	b012      	add	sp, #72	; 0x48
   1fe42:	bd80      	pop	{r7, pc}
   1fe44:	0001f9a1 	.word	0x0001f9a1
   1fe48:	200054a0 	.word	0x200054a0
   1fe4c:	0001f9c5 	.word	0x0001f9c5
   1fe50:	0001f91d 	.word	0x0001f91d
   1fe54:	000c0002 	.word	0x000c0002
   1fe58:	000d0002 	.word	0x000d0002
   1fe5c:	000f0002 	.word	0x000f0002
   1fe60:	00124f80 	.word	0x00124f80
   1fe64:	42001000 	.word	0x42001000
   1fe68:	200054a4 	.word	0x200054a4
   1fe6c:	00027205 	.word	0x00027205
   1fe70:	0001fa29 	.word	0x0001fa29
   1fe74:	0001f699 	.word	0x0001f699
   1fe78:	0001f6d9 	.word	0x0001f6d9

0001fe7c <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   1fe7c:	b590      	push	{r4, r7, lr}
   1fe7e:	b085      	sub	sp, #20
   1fe80:	af00      	add	r7, sp, #0
   1fe82:	0002      	movs	r2, r0
   1fe84:	6039      	str	r1, [r7, #0]
   1fe86:	1dfb      	adds	r3, r7, #7
   1fe88:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   1fe8a:	230f      	movs	r3, #15
   1fe8c:	18fb      	adds	r3, r7, r3
   1fe8e:	2200      	movs	r2, #0
   1fe90:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   1fe92:	1dfb      	adds	r3, r7, #7
   1fe94:	781b      	ldrb	r3, [r3, #0]
   1fe96:	2b03      	cmp	r3, #3
   1fe98:	d10f      	bne.n	1feba <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   1fe9a:	683b      	ldr	r3, [r7, #0]
   1fe9c:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   1fe9e:	68bb      	ldr	r3, [r7, #8]
   1fea0:	6818      	ldr	r0, [r3, #0]
   1fea2:	68bb      	ldr	r3, [r7, #8]
   1fea4:	6859      	ldr	r1, [r3, #4]
   1fea6:	68bb      	ldr	r3, [r7, #8]
   1fea8:	891b      	ldrh	r3, [r3, #8]
   1feaa:	220f      	movs	r2, #15
   1feac:	18bc      	adds	r4, r7, r2
   1feae:	001a      	movs	r2, r3
   1feb0:	4b10      	ldr	r3, [pc, #64]	; (1fef4 <nm_bus_ioctl+0x78>)
   1feb2:	4798      	blx	r3
   1feb4:	0003      	movs	r3, r0
   1feb6:	7023      	strb	r3, [r4, #0]
		}
		break;
   1feb8:	e013      	b.n	1fee2 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   1feba:	230f      	movs	r3, #15
   1febc:	18fb      	adds	r3, r7, r3
   1febe:	22ff      	movs	r2, #255	; 0xff
   1fec0:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   1fec2:	2383      	movs	r3, #131	; 0x83
   1fec4:	005a      	lsls	r2, r3, #1
   1fec6:	490c      	ldr	r1, [pc, #48]	; (1fef8 <nm_bus_ioctl+0x7c>)
   1fec8:	4b0c      	ldr	r3, [pc, #48]	; (1fefc <nm_bus_ioctl+0x80>)
   1feca:	0018      	movs	r0, r3
   1fecc:	4b0c      	ldr	r3, [pc, #48]	; (1ff00 <nm_bus_ioctl+0x84>)
   1fece:	4798      	blx	r3
   1fed0:	4b0c      	ldr	r3, [pc, #48]	; (1ff04 <nm_bus_ioctl+0x88>)
   1fed2:	0018      	movs	r0, r3
   1fed4:	4b0a      	ldr	r3, [pc, #40]	; (1ff00 <nm_bus_ioctl+0x84>)
   1fed6:	4798      	blx	r3
   1fed8:	4b0b      	ldr	r3, [pc, #44]	; (1ff08 <nm_bus_ioctl+0x8c>)
   1feda:	0018      	movs	r0, r3
   1fedc:	4b08      	ldr	r3, [pc, #32]	; (1ff00 <nm_bus_ioctl+0x84>)
   1fede:	4798      	blx	r3
			break;
   1fee0:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   1fee2:	230f      	movs	r3, #15
   1fee4:	18fb      	adds	r3, r7, r3
   1fee6:	781b      	ldrb	r3, [r3, #0]
   1fee8:	b25b      	sxtb	r3, r3
}
   1feea:	0018      	movs	r0, r3
   1feec:	46bd      	mov	sp, r7
   1feee:	b005      	add	sp, #20
   1fef0:	bd90      	pop	{r4, r7, pc}
   1fef2:	46c0      	nop			; (mov r8, r8)
   1fef4:	0001fc1d 	.word	0x0001fc1d
   1fef8:	0003719c 	.word	0x0003719c
   1fefc:	00037170 	.word	0x00037170
   1ff00:	0001d28d 	.word	0x0001d28d
   1ff04:	00037184 	.word	0x00037184
   1ff08:	00037198 	.word	0x00037198

0001ff0c <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   1ff0c:	b580      	push	{r7, lr}
   1ff0e:	b082      	sub	sp, #8
   1ff10:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   1ff12:	1dfb      	adds	r3, r7, #7
   1ff14:	2200      	movs	r2, #0
   1ff16:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   1ff18:	1d3b      	adds	r3, r7, #4
   1ff1a:	0018      	movs	r0, r3
   1ff1c:	4b13      	ldr	r3, [pc, #76]	; (1ff6c <nm_bus_deinit+0x60>)
   1ff1e:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1ff20:	1d3b      	adds	r3, r7, #4
   1ff22:	2200      	movs	r2, #0
   1ff24:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   1ff26:	1d3b      	adds	r3, r7, #4
   1ff28:	2200      	movs	r2, #0
   1ff2a:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   1ff2c:	4b10      	ldr	r3, [pc, #64]	; (1ff70 <nm_bus_deinit+0x64>)
   1ff2e:	0018      	movs	r0, r3
   1ff30:	4b10      	ldr	r3, [pc, #64]	; (1ff74 <nm_bus_deinit+0x68>)
   1ff32:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   1ff34:	1d3b      	adds	r3, r7, #4
   1ff36:	0019      	movs	r1, r3
   1ff38:	200c      	movs	r0, #12
   1ff3a:	4b0f      	ldr	r3, [pc, #60]	; (1ff78 <nm_bus_deinit+0x6c>)
   1ff3c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   1ff3e:	1d3b      	adds	r3, r7, #4
   1ff40:	0019      	movs	r1, r3
   1ff42:	200f      	movs	r0, #15
   1ff44:	4b0c      	ldr	r3, [pc, #48]	; (1ff78 <nm_bus_deinit+0x6c>)
   1ff46:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   1ff48:	1d3b      	adds	r3, r7, #4
   1ff4a:	0019      	movs	r1, r3
   1ff4c:	200d      	movs	r0, #13
   1ff4e:	4b0a      	ldr	r3, [pc, #40]	; (1ff78 <nm_bus_deinit+0x6c>)
   1ff50:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   1ff52:	1d3b      	adds	r3, r7, #4
   1ff54:	0019      	movs	r1, r3
   1ff56:	200e      	movs	r0, #14
   1ff58:	4b07      	ldr	r3, [pc, #28]	; (1ff78 <nm_bus_deinit+0x6c>)
   1ff5a:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   1ff5c:	1dfb      	adds	r3, r7, #7
   1ff5e:	781b      	ldrb	r3, [r3, #0]
   1ff60:	b25b      	sxtb	r3, r3
}
   1ff62:	0018      	movs	r0, r3
   1ff64:	46bd      	mov	sp, r7
   1ff66:	b002      	add	sp, #8
   1ff68:	bd80      	pop	{r7, pc}
   1ff6a:	46c0      	nop			; (mov r8, r8)
   1ff6c:	0001f885 	.word	0x0001f885
   1ff70:	200054a4 	.word	0x200054a4
   1ff74:	0001fa79 	.word	0x0001fa79
   1ff78:	00025d85 	.word	0x00025d85

0001ff7c <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   1ff7c:	b580      	push	{r7, lr}
   1ff7e:	b084      	sub	sp, #16
   1ff80:	af00      	add	r7, sp, #0
   1ff82:	60f8      	str	r0, [r7, #12]
   1ff84:	60b9      	str	r1, [r7, #8]
   1ff86:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   1ff88:	687b      	ldr	r3, [r7, #4]
   1ff8a:	2b00      	cmp	r3, #0
   1ff8c:	d010      	beq.n	1ffb0 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   1ff8e:	68bb      	ldr	r3, [r7, #8]
   1ff90:	781a      	ldrb	r2, [r3, #0]
   1ff92:	68fb      	ldr	r3, [r7, #12]
   1ff94:	701a      	strb	r2, [r3, #0]
		pDst++;
   1ff96:	68fb      	ldr	r3, [r7, #12]
   1ff98:	3301      	adds	r3, #1
   1ff9a:	60fb      	str	r3, [r7, #12]
		pSrc++;
   1ff9c:	68bb      	ldr	r3, [r7, #8]
   1ff9e:	3301      	adds	r3, #1
   1ffa0:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   1ffa2:	687b      	ldr	r3, [r7, #4]
   1ffa4:	3b01      	subs	r3, #1
   1ffa6:	607b      	str	r3, [r7, #4]
   1ffa8:	687b      	ldr	r3, [r7, #4]
   1ffaa:	2b00      	cmp	r3, #0
   1ffac:	d1ef      	bne.n	1ff8e <m2m_memcpy+0x12>
   1ffae:	e000      	b.n	1ffb2 <m2m_memcpy+0x36>
	if(sz == 0) return;
   1ffb0:	46c0      	nop			; (mov r8, r8)
}
   1ffb2:	46bd      	mov	sp, r7
   1ffb4:	b004      	add	sp, #16
   1ffb6:	bd80      	pop	{r7, pc}

0001ffb8 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   1ffb8:	b580      	push	{r7, lr}
   1ffba:	b084      	sub	sp, #16
   1ffbc:	af00      	add	r7, sp, #0
   1ffbe:	60f8      	str	r0, [r7, #12]
   1ffc0:	607a      	str	r2, [r7, #4]
   1ffc2:	230b      	movs	r3, #11
   1ffc4:	18fb      	adds	r3, r7, r3
   1ffc6:	1c0a      	adds	r2, r1, #0
   1ffc8:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   1ffca:	687b      	ldr	r3, [r7, #4]
   1ffcc:	2b00      	cmp	r3, #0
   1ffce:	d00e      	beq.n	1ffee <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   1ffd0:	68fb      	ldr	r3, [r7, #12]
   1ffd2:	220b      	movs	r2, #11
   1ffd4:	18ba      	adds	r2, r7, r2
   1ffd6:	7812      	ldrb	r2, [r2, #0]
   1ffd8:	701a      	strb	r2, [r3, #0]
		pBuf++;
   1ffda:	68fb      	ldr	r3, [r7, #12]
   1ffdc:	3301      	adds	r3, #1
   1ffde:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   1ffe0:	687b      	ldr	r3, [r7, #4]
   1ffe2:	3b01      	subs	r3, #1
   1ffe4:	607b      	str	r3, [r7, #4]
   1ffe6:	687b      	ldr	r3, [r7, #4]
   1ffe8:	2b00      	cmp	r3, #0
   1ffea:	d1f1      	bne.n	1ffd0 <m2m_memset+0x18>
   1ffec:	e000      	b.n	1fff0 <m2m_memset+0x38>
	if(sz == 0) return;
   1ffee:	46c0      	nop			; (mov r8, r8)
}
   1fff0:	46bd      	mov	sp, r7
   1fff2:	b004      	add	sp, #16
   1fff4:	bd80      	pop	{r7, pc}

0001fff6 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   1fff6:	b580      	push	{r7, lr}
   1fff8:	b084      	sub	sp, #16
   1fffa:	af00      	add	r7, sp, #0
   1fffc:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   1fffe:	230e      	movs	r3, #14
   20000:	18fb      	adds	r3, r7, r3
   20002:	2200      	movs	r2, #0
   20004:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   20006:	e009      	b.n	2001c <m2m_strlen+0x26>
	{
		u16StrLen ++;
   20008:	230e      	movs	r3, #14
   2000a:	18fb      	adds	r3, r7, r3
   2000c:	881a      	ldrh	r2, [r3, #0]
   2000e:	230e      	movs	r3, #14
   20010:	18fb      	adds	r3, r7, r3
   20012:	3201      	adds	r2, #1
   20014:	801a      	strh	r2, [r3, #0]
		pcStr++;
   20016:	687b      	ldr	r3, [r7, #4]
   20018:	3301      	adds	r3, #1
   2001a:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   2001c:	687b      	ldr	r3, [r7, #4]
   2001e:	781b      	ldrb	r3, [r3, #0]
   20020:	2b00      	cmp	r3, #0
   20022:	d1f1      	bne.n	20008 <m2m_strlen+0x12>
	}
	return u16StrLen;
   20024:	230e      	movs	r3, #14
   20026:	18fb      	adds	r3, r7, r3
   20028:	881b      	ldrh	r3, [r3, #0]
}
   2002a:	0018      	movs	r0, r3
   2002c:	46bd      	mov	sp, r7
   2002e:	b004      	add	sp, #16
   20030:	bd80      	pop	{r7, pc}
	...

00020034 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   20034:	b580      	push	{r7, lr}
   20036:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   20038:	4b04      	ldr	r3, [pc, #16]	; (2004c <isr+0x18>)
   2003a:	78db      	ldrb	r3, [r3, #3]
   2003c:	b2db      	uxtb	r3, r3
   2003e:	3301      	adds	r3, #1
   20040:	b2da      	uxtb	r2, r3
   20042:	4b02      	ldr	r3, [pc, #8]	; (2004c <isr+0x18>)
   20044:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   20046:	46c0      	nop			; (mov r8, r8)
   20048:	46bd      	mov	sp, r7
   2004a:	bd80      	pop	{r7, pc}
   2004c:	200054e0 	.word	0x200054e0

00020050 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   20050:	b590      	push	{r4, r7, lr}
   20052:	b083      	sub	sp, #12
   20054:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   20056:	1dfb      	adds	r3, r7, #7
   20058:	2200      	movs	r2, #0
   2005a:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   2005c:	4b14      	ldr	r3, [pc, #80]	; (200b0 <hif_set_rx_done+0x60>)
   2005e:	2200      	movs	r2, #0
   20060:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   20062:	2001      	movs	r0, #1
   20064:	4b13      	ldr	r3, [pc, #76]	; (200b4 <hif_set_rx_done+0x64>)
   20066:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   20068:	1dfc      	adds	r4, r7, #7
   2006a:	003b      	movs	r3, r7
   2006c:	4a12      	ldr	r2, [pc, #72]	; (200b8 <hif_set_rx_done+0x68>)
   2006e:	0019      	movs	r1, r3
   20070:	0010      	movs	r0, r2
   20072:	4b12      	ldr	r3, [pc, #72]	; (200bc <hif_set_rx_done+0x6c>)
   20074:	4798      	blx	r3
   20076:	0003      	movs	r3, r0
   20078:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2007a:	1dfb      	adds	r3, r7, #7
   2007c:	781b      	ldrb	r3, [r3, #0]
   2007e:	b25b      	sxtb	r3, r3
   20080:	2b00      	cmp	r3, #0
   20082:	d10d      	bne.n	200a0 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   20084:	683b      	ldr	r3, [r7, #0]
   20086:	2202      	movs	r2, #2
   20088:	4313      	orrs	r3, r2
   2008a:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   2008c:	683b      	ldr	r3, [r7, #0]
   2008e:	1dfc      	adds	r4, r7, #7
   20090:	4a09      	ldr	r2, [pc, #36]	; (200b8 <hif_set_rx_done+0x68>)
   20092:	0019      	movs	r1, r3
   20094:	0010      	movs	r0, r2
   20096:	4b0a      	ldr	r3, [pc, #40]	; (200c0 <hif_set_rx_done+0x70>)
   20098:	4798      	blx	r3
   2009a:	0003      	movs	r3, r0
   2009c:	7023      	strb	r3, [r4, #0]
   2009e:	e000      	b.n	200a2 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   200a0:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   200a2:	1dfb      	adds	r3, r7, #7
   200a4:	781b      	ldrb	r3, [r3, #0]
   200a6:	b25b      	sxtb	r3, r3

}
   200a8:	0018      	movs	r0, r3
   200aa:	46bd      	mov	sp, r7
   200ac:	b003      	add	sp, #12
   200ae:	bd90      	pop	{r4, r7, pc}
   200b0:	200054e0 	.word	0x200054e0
   200b4:	0001f76d 	.word	0x0001f76d
   200b8:	00001070 	.word	0x00001070
   200bc:	00022049 	.word	0x00022049
   200c0:	0002206d 	.word	0x0002206d

000200c4 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   200c4:	b580      	push	{r7, lr}
   200c6:	b082      	sub	sp, #8
   200c8:	af00      	add	r7, sp, #0
   200ca:	603a      	str	r2, [r7, #0]
   200cc:	1dfb      	adds	r3, r7, #7
   200ce:	1c02      	adds	r2, r0, #0
   200d0:	701a      	strb	r2, [r3, #0]
   200d2:	1d3b      	adds	r3, r7, #4
   200d4:	1c0a      	adds	r2, r1, #0
   200d6:	801a      	strh	r2, [r3, #0]


}
   200d8:	46c0      	nop			; (mov r8, r8)
   200da:	46bd      	mov	sp, r7
   200dc:	b002      	add	sp, #8
   200de:	bd80      	pop	{r7, pc}

000200e0 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   200e0:	b590      	push	{r4, r7, lr}
   200e2:	b083      	sub	sp, #12
   200e4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   200e6:	1dfb      	adds	r3, r7, #7
   200e8:	2200      	movs	r2, #0
   200ea:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   200ec:	4b16      	ldr	r3, [pc, #88]	; (20148 <hif_chip_wake+0x68>)
   200ee:	789b      	ldrb	r3, [r3, #2]
   200f0:	b2db      	uxtb	r3, r3
   200f2:	2b00      	cmp	r3, #0
   200f4:	d003      	beq.n	200fe <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   200f6:	1dfb      	adds	r3, r7, #7
   200f8:	781b      	ldrb	r3, [r3, #0]
   200fa:	b25b      	sxtb	r3, r3
   200fc:	e01f      	b.n	2013e <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   200fe:	4b12      	ldr	r3, [pc, #72]	; (20148 <hif_chip_wake+0x68>)
   20100:	785b      	ldrb	r3, [r3, #1]
   20102:	b2db      	uxtb	r3, r3
   20104:	2b00      	cmp	r3, #0
   20106:	d10e      	bne.n	20126 <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   20108:	4b0f      	ldr	r3, [pc, #60]	; (20148 <hif_chip_wake+0x68>)
   2010a:	781b      	ldrb	r3, [r3, #0]
   2010c:	b2db      	uxtb	r3, r3
   2010e:	2b00      	cmp	r3, #0
   20110:	d009      	beq.n	20126 <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   20112:	1dfc      	adds	r4, r7, #7
   20114:	4b0d      	ldr	r3, [pc, #52]	; (2014c <hif_chip_wake+0x6c>)
   20116:	4798      	blx	r3
   20118:	0003      	movs	r3, r0
   2011a:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   2011c:	1dfb      	adds	r3, r7, #7
   2011e:	781b      	ldrb	r3, [r3, #0]
   20120:	b25b      	sxtb	r3, r3
   20122:	2b00      	cmp	r3, #0
   20124:	d107      	bne.n	20136 <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   20126:	4b08      	ldr	r3, [pc, #32]	; (20148 <hif_chip_wake+0x68>)
   20128:	785b      	ldrb	r3, [r3, #1]
   2012a:	b2db      	uxtb	r3, r3
   2012c:	3301      	adds	r3, #1
   2012e:	b2da      	uxtb	r2, r3
   20130:	4b05      	ldr	r3, [pc, #20]	; (20148 <hif_chip_wake+0x68>)
   20132:	705a      	strb	r2, [r3, #1]
   20134:	e000      	b.n	20138 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   20136:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   20138:	1dfb      	adds	r3, r7, #7
   2013a:	781b      	ldrb	r3, [r3, #0]
   2013c:	b25b      	sxtb	r3, r3
}
   2013e:	0018      	movs	r0, r3
   20140:	46bd      	mov	sp, r7
   20142:	b003      	add	sp, #12
   20144:	bd90      	pop	{r4, r7, pc}
   20146:	46c0      	nop			; (mov r8, r8)
   20148:	200054e0 	.word	0x200054e0
   2014c:	00021b19 	.word	0x00021b19

00020150 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   20150:	b580      	push	{r7, lr}
   20152:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   20154:	4b07      	ldr	r3, [pc, #28]	; (20174 <hif_chip_sleep_sc+0x24>)
   20156:	785b      	ldrb	r3, [r3, #1]
   20158:	b2db      	uxtb	r3, r3
   2015a:	2b00      	cmp	r3, #0
   2015c:	d006      	beq.n	2016c <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   2015e:	4b05      	ldr	r3, [pc, #20]	; (20174 <hif_chip_sleep_sc+0x24>)
   20160:	785b      	ldrb	r3, [r3, #1]
   20162:	b2db      	uxtb	r3, r3
   20164:	3b01      	subs	r3, #1
   20166:	b2da      	uxtb	r2, r3
   20168:	4b02      	ldr	r3, [pc, #8]	; (20174 <hif_chip_sleep_sc+0x24>)
   2016a:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   2016c:	2300      	movs	r3, #0
}
   2016e:	0018      	movs	r0, r3
   20170:	46bd      	mov	sp, r7
   20172:	bd80      	pop	{r7, pc}
   20174:	200054e0 	.word	0x200054e0

00020178 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   20178:	b590      	push	{r4, r7, lr}
   2017a:	b083      	sub	sp, #12
   2017c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2017e:	1dfb      	adds	r3, r7, #7
   20180:	2200      	movs	r2, #0
   20182:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   20184:	4b10      	ldr	r3, [pc, #64]	; (201c8 <hif_chip_sleep+0x50>)
   20186:	785b      	ldrb	r3, [r3, #1]
   20188:	b2db      	uxtb	r3, r3
   2018a:	2b00      	cmp	r3, #0
   2018c:	d006      	beq.n	2019c <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   2018e:	4b0e      	ldr	r3, [pc, #56]	; (201c8 <hif_chip_sleep+0x50>)
   20190:	785b      	ldrb	r3, [r3, #1]
   20192:	b2db      	uxtb	r3, r3
   20194:	3b01      	subs	r3, #1
   20196:	b2da      	uxtb	r2, r3
   20198:	4b0b      	ldr	r3, [pc, #44]	; (201c8 <hif_chip_sleep+0x50>)
   2019a:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   2019c:	4b0a      	ldr	r3, [pc, #40]	; (201c8 <hif_chip_sleep+0x50>)
   2019e:	785b      	ldrb	r3, [r3, #1]
   201a0:	b2db      	uxtb	r3, r3
   201a2:	2b00      	cmp	r3, #0
   201a4:	d109      	bne.n	201ba <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   201a6:	4b08      	ldr	r3, [pc, #32]	; (201c8 <hif_chip_sleep+0x50>)
   201a8:	781b      	ldrb	r3, [r3, #0]
   201aa:	b2db      	uxtb	r3, r3
   201ac:	2b00      	cmp	r3, #0
   201ae:	d004      	beq.n	201ba <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   201b0:	1dfc      	adds	r4, r7, #7
   201b2:	4b06      	ldr	r3, [pc, #24]	; (201cc <hif_chip_sleep+0x54>)
   201b4:	4798      	blx	r3
   201b6:	0003      	movs	r3, r0
   201b8:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   201ba:	1dfb      	adds	r3, r7, #7
   201bc:	781b      	ldrb	r3, [r3, #0]
   201be:	b25b      	sxtb	r3, r3
}
   201c0:	0018      	movs	r0, r3
   201c2:	46bd      	mov	sp, r7
   201c4:	b003      	add	sp, #12
   201c6:	bd90      	pop	{r4, r7, pc}
   201c8:	200054e0 	.word	0x200054e0
   201cc:	00021a41 	.word	0x00021a41

000201d0 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   201d0:	b580      	push	{r7, lr}
   201d2:	b082      	sub	sp, #8
   201d4:	af00      	add	r7, sp, #0
   201d6:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   201d8:	4b09      	ldr	r3, [pc, #36]	; (20200 <hif_init+0x30>)
   201da:	222c      	movs	r2, #44	; 0x2c
   201dc:	2100      	movs	r1, #0
   201de:	0018      	movs	r0, r3
   201e0:	4b08      	ldr	r3, [pc, #32]	; (20204 <hif_init+0x34>)
   201e2:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   201e4:	4b08      	ldr	r3, [pc, #32]	; (20208 <hif_init+0x38>)
   201e6:	0018      	movs	r0, r3
   201e8:	4b08      	ldr	r3, [pc, #32]	; (2020c <hif_init+0x3c>)
   201ea:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   201ec:	4b08      	ldr	r3, [pc, #32]	; (20210 <hif_init+0x40>)
   201ee:	0019      	movs	r1, r3
   201f0:	2003      	movs	r0, #3
   201f2:	4b08      	ldr	r3, [pc, #32]	; (20214 <hif_init+0x44>)
   201f4:	4798      	blx	r3
	return M2M_SUCCESS;
   201f6:	2300      	movs	r3, #0
}
   201f8:	0018      	movs	r0, r3
   201fa:	46bd      	mov	sp, r7
   201fc:	b002      	add	sp, #8
   201fe:	bd80      	pop	{r7, pc}
   20200:	200054e0 	.word	0x200054e0
   20204:	0001ffb9 	.word	0x0001ffb9
   20208:	00020035 	.word	0x00020035
   2020c:	0001f6f5 	.word	0x0001f6f5
   20210:	000200c5 	.word	0x000200c5
   20214:	00020cb5 	.word	0x00020cb5

00020218 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   20218:	b590      	push	{r4, r7, lr}
   2021a:	b089      	sub	sp, #36	; 0x24
   2021c:	af00      	add	r7, sp, #0
   2021e:	0004      	movs	r4, r0
   20220:	0008      	movs	r0, r1
   20222:	603a      	str	r2, [r7, #0]
   20224:	0019      	movs	r1, r3
   20226:	1dfb      	adds	r3, r7, #7
   20228:	1c22      	adds	r2, r4, #0
   2022a:	701a      	strb	r2, [r3, #0]
   2022c:	1dbb      	adds	r3, r7, #6
   2022e:	1c02      	adds	r2, r0, #0
   20230:	701a      	strb	r2, [r3, #0]
   20232:	1d3b      	adds	r3, r7, #4
   20234:	1c0a      	adds	r2, r1, #0
   20236:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   20238:	231f      	movs	r3, #31
   2023a:	18fb      	adds	r3, r7, r3
   2023c:	22ff      	movs	r2, #255	; 0xff
   2023e:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   20240:	1dbb      	adds	r3, r7, #6
   20242:	781b      	ldrb	r3, [r3, #0]
   20244:	227f      	movs	r2, #127	; 0x7f
   20246:	4013      	ands	r3, r2
   20248:	b2da      	uxtb	r2, r3
   2024a:	2318      	movs	r3, #24
   2024c:	18fb      	adds	r3, r7, r3
   2024e:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   20250:	2318      	movs	r3, #24
   20252:	18fb      	adds	r3, r7, r3
   20254:	1dfa      	adds	r2, r7, #7
   20256:	7812      	ldrb	r2, [r2, #0]
   20258:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   2025a:	2318      	movs	r3, #24
   2025c:	18fb      	adds	r3, r7, r3
   2025e:	2208      	movs	r2, #8
   20260:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   20262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20264:	2b00      	cmp	r3, #0
   20266:	d011      	beq.n	2028c <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   20268:	2318      	movs	r3, #24
   2026a:	18fb      	adds	r3, r7, r3
   2026c:	885b      	ldrh	r3, [r3, #2]
   2026e:	b29a      	uxth	r2, r3
   20270:	2338      	movs	r3, #56	; 0x38
   20272:	18f9      	adds	r1, r7, r3
   20274:	2334      	movs	r3, #52	; 0x34
   20276:	18fb      	adds	r3, r7, r3
   20278:	8809      	ldrh	r1, [r1, #0]
   2027a:	881b      	ldrh	r3, [r3, #0]
   2027c:	18cb      	adds	r3, r1, r3
   2027e:	b29b      	uxth	r3, r3
   20280:	18d3      	adds	r3, r2, r3
   20282:	b29a      	uxth	r2, r3
   20284:	2318      	movs	r3, #24
   20286:	18fb      	adds	r3, r7, r3
   20288:	805a      	strh	r2, [r3, #2]
   2028a:	e00a      	b.n	202a2 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   2028c:	2318      	movs	r3, #24
   2028e:	18fb      	adds	r3, r7, r3
   20290:	885b      	ldrh	r3, [r3, #2]
   20292:	b29a      	uxth	r2, r3
   20294:	1d3b      	adds	r3, r7, #4
   20296:	881b      	ldrh	r3, [r3, #0]
   20298:	18d3      	adds	r3, r2, r3
   2029a:	b29a      	uxth	r2, r3
   2029c:	2318      	movs	r3, #24
   2029e:	18fb      	adds	r3, r7, r3
   202a0:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   202a2:	231f      	movs	r3, #31
   202a4:	18fc      	adds	r4, r7, r3
   202a6:	4bb2      	ldr	r3, [pc, #712]	; (20570 <hif_send+0x358>)
   202a8:	4798      	blx	r3
   202aa:	0003      	movs	r3, r0
   202ac:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   202ae:	231f      	movs	r3, #31
   202b0:	18fb      	adds	r3, r7, r3
   202b2:	781b      	ldrb	r3, [r3, #0]
   202b4:	b25b      	sxtb	r3, r3
   202b6:	2b00      	cmp	r3, #0
   202b8:	d000      	beq.n	202bc <hif_send+0xa4>
   202ba:	e129      	b.n	20510 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   202bc:	2300      	movs	r3, #0
   202be:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   202c0:	230e      	movs	r3, #14
   202c2:	18fb      	adds	r3, r7, r3
   202c4:	2200      	movs	r2, #0
   202c6:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   202c8:	2300      	movs	r3, #0
   202ca:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   202cc:	1dfb      	adds	r3, r7, #7
   202ce:	781a      	ldrb	r2, [r3, #0]
   202d0:	697b      	ldr	r3, [r7, #20]
   202d2:	4313      	orrs	r3, r2
   202d4:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   202d6:	1dbb      	adds	r3, r7, #6
   202d8:	781b      	ldrb	r3, [r3, #0]
   202da:	021a      	lsls	r2, r3, #8
   202dc:	697b      	ldr	r3, [r7, #20]
   202de:	4313      	orrs	r3, r2
   202e0:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   202e2:	2318      	movs	r3, #24
   202e4:	18fb      	adds	r3, r7, r3
   202e6:	885b      	ldrh	r3, [r3, #2]
   202e8:	b29b      	uxth	r3, r3
   202ea:	041a      	lsls	r2, r3, #16
   202ec:	697b      	ldr	r3, [r7, #20]
   202ee:	4313      	orrs	r3, r2
   202f0:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   202f2:	697b      	ldr	r3, [r7, #20]
   202f4:	221f      	movs	r2, #31
   202f6:	18bc      	adds	r4, r7, r2
   202f8:	4a9e      	ldr	r2, [pc, #632]	; (20574 <hif_send+0x35c>)
   202fa:	0019      	movs	r1, r3
   202fc:	0010      	movs	r0, r2
   202fe:	4b9e      	ldr	r3, [pc, #632]	; (20578 <hif_send+0x360>)
   20300:	4798      	blx	r3
   20302:	0003      	movs	r3, r0
   20304:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   20306:	231f      	movs	r3, #31
   20308:	18fb      	adds	r3, r7, r3
   2030a:	781b      	ldrb	r3, [r3, #0]
   2030c:	b25b      	sxtb	r3, r3
   2030e:	2b00      	cmp	r3, #0
   20310:	d000      	beq.n	20314 <hif_send+0xfc>
   20312:	e119      	b.n	20548 <hif_send+0x330>

		reg = 0UL;
   20314:	2300      	movs	r3, #0
   20316:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   20318:	697b      	ldr	r3, [r7, #20]
   2031a:	2202      	movs	r2, #2
   2031c:	4313      	orrs	r3, r2
   2031e:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   20320:	697b      	ldr	r3, [r7, #20]
   20322:	221f      	movs	r2, #31
   20324:	18bc      	adds	r4, r7, r2
   20326:	4a95      	ldr	r2, [pc, #596]	; (2057c <hif_send+0x364>)
   20328:	0019      	movs	r1, r3
   2032a:	0010      	movs	r0, r2
   2032c:	4b92      	ldr	r3, [pc, #584]	; (20578 <hif_send+0x360>)
   2032e:	4798      	blx	r3
   20330:	0003      	movs	r3, r0
   20332:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   20334:	231f      	movs	r3, #31
   20336:	18fb      	adds	r3, r7, r3
   20338:	781b      	ldrb	r3, [r3, #0]
   2033a:	b25b      	sxtb	r3, r3
   2033c:	2b00      	cmp	r3, #0
   2033e:	d000      	beq.n	20342 <hif_send+0x12a>
   20340:	e104      	b.n	2054c <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   20342:	2300      	movs	r3, #0
   20344:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   20346:	230e      	movs	r3, #14
   20348:	18fb      	adds	r3, r7, r3
   2034a:	2200      	movs	r2, #0
   2034c:	801a      	strh	r2, [r3, #0]
   2034e:	e050      	b.n	203f2 <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   20350:	231f      	movs	r3, #31
   20352:	18fc      	adds	r4, r7, r3
   20354:	2314      	movs	r3, #20
   20356:	18fb      	adds	r3, r7, r3
   20358:	4a88      	ldr	r2, [pc, #544]	; (2057c <hif_send+0x364>)
   2035a:	0019      	movs	r1, r3
   2035c:	0010      	movs	r0, r2
   2035e:	4b88      	ldr	r3, [pc, #544]	; (20580 <hif_send+0x368>)
   20360:	4798      	blx	r3
   20362:	0003      	movs	r3, r0
   20364:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   20366:	231f      	movs	r3, #31
   20368:	18fb      	adds	r3, r7, r3
   2036a:	781b      	ldrb	r3, [r3, #0]
   2036c:	b25b      	sxtb	r3, r3
   2036e:	2b00      	cmp	r3, #0
   20370:	d147      	bne.n	20402 <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   20372:	230e      	movs	r3, #14
   20374:	18fb      	adds	r3, r7, r3
   20376:	881b      	ldrh	r3, [r3, #0]
   20378:	b29a      	uxth	r2, r3
   2037a:	23f4      	movs	r3, #244	; 0xf4
   2037c:	33ff      	adds	r3, #255	; 0xff
   2037e:	429a      	cmp	r2, r3
   20380:	d916      	bls.n	203b0 <hif_send+0x198>
				if(cnt < 501) {
   20382:	230e      	movs	r3, #14
   20384:	18fb      	adds	r3, r7, r3
   20386:	881b      	ldrh	r3, [r3, #0]
   20388:	b29a      	uxth	r2, r3
   2038a:	23fa      	movs	r3, #250	; 0xfa
   2038c:	005b      	lsls	r3, r3, #1
   2038e:	429a      	cmp	r2, r3
   20390:	d80b      	bhi.n	203aa <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   20392:	4b7c      	ldr	r3, [pc, #496]	; (20584 <hif_send+0x36c>)
   20394:	0018      	movs	r0, r3
   20396:	4b7c      	ldr	r3, [pc, #496]	; (20588 <hif_send+0x370>)
   20398:	4798      	blx	r3
   2039a:	4b7c      	ldr	r3, [pc, #496]	; (2058c <hif_send+0x374>)
   2039c:	0018      	movs	r0, r3
   2039e:	4b7a      	ldr	r3, [pc, #488]	; (20588 <hif_send+0x370>)
   203a0:	4798      	blx	r3
   203a2:	4b7b      	ldr	r3, [pc, #492]	; (20590 <hif_send+0x378>)
   203a4:	0018      	movs	r0, r3
   203a6:	4b78      	ldr	r3, [pc, #480]	; (20588 <hif_send+0x370>)
   203a8:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   203aa:	2001      	movs	r0, #1
   203ac:	4b79      	ldr	r3, [pc, #484]	; (20594 <hif_send+0x37c>)
   203ae:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   203b0:	697b      	ldr	r3, [r7, #20]
   203b2:	2202      	movs	r2, #2
   203b4:	4013      	ands	r3, r2
   203b6:	d113      	bne.n	203e0 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   203b8:	231f      	movs	r3, #31
   203ba:	18fc      	adds	r4, r7, r3
   203bc:	2310      	movs	r3, #16
   203be:	18fb      	adds	r3, r7, r3
   203c0:	4a75      	ldr	r2, [pc, #468]	; (20598 <hif_send+0x380>)
   203c2:	0019      	movs	r1, r3
   203c4:	0010      	movs	r0, r2
   203c6:	4b6e      	ldr	r3, [pc, #440]	; (20580 <hif_send+0x368>)
   203c8:	4798      	blx	r3
   203ca:	0003      	movs	r3, r0
   203cc:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   203ce:	231f      	movs	r3, #31
   203d0:	18fb      	adds	r3, r7, r3
   203d2:	781b      	ldrb	r3, [r3, #0]
   203d4:	b25b      	sxtb	r3, r3
   203d6:	2b00      	cmp	r3, #0
   203d8:	d015      	beq.n	20406 <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   203da:	2300      	movs	r3, #0
   203dc:	613b      	str	r3, [r7, #16]
					goto ERR1;
   203de:	e0bc      	b.n	2055a <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   203e0:	230e      	movs	r3, #14
   203e2:	18fb      	adds	r3, r7, r3
   203e4:	881b      	ldrh	r3, [r3, #0]
   203e6:	b29b      	uxth	r3, r3
   203e8:	3301      	adds	r3, #1
   203ea:	b29a      	uxth	r2, r3
   203ec:	230e      	movs	r3, #14
   203ee:	18fb      	adds	r3, r7, r3
   203f0:	801a      	strh	r2, [r3, #0]
   203f2:	230e      	movs	r3, #14
   203f4:	18fb      	adds	r3, r7, r3
   203f6:	881b      	ldrh	r3, [r3, #0]
   203f8:	b29b      	uxth	r3, r3
   203fa:	4a68      	ldr	r2, [pc, #416]	; (2059c <hif_send+0x384>)
   203fc:	4293      	cmp	r3, r2
   203fe:	d9a7      	bls.n	20350 <hif_send+0x138>
   20400:	e002      	b.n	20408 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   20402:	46c0      	nop			; (mov r8, r8)
   20404:	e000      	b.n	20408 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   20406:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   20408:	693b      	ldr	r3, [r7, #16]
   2040a:	2b00      	cmp	r3, #0
   2040c:	d100      	bne.n	20410 <hif_send+0x1f8>
   2040e:	e074      	b.n	204fa <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   20410:	693b      	ldr	r3, [r7, #16]
   20412:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   20414:	2318      	movs	r3, #24
   20416:	18fb      	adds	r3, r7, r3
   20418:	885b      	ldrh	r3, [r3, #2]
   2041a:	b29a      	uxth	r2, r3
   2041c:	2318      	movs	r3, #24
   2041e:	18fb      	adds	r3, r7, r3
   20420:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   20422:	68bb      	ldr	r3, [r7, #8]
   20424:	221f      	movs	r2, #31
   20426:	18bc      	adds	r4, r7, r2
   20428:	2218      	movs	r2, #24
   2042a:	18b9      	adds	r1, r7, r2
   2042c:	2208      	movs	r2, #8
   2042e:	0018      	movs	r0, r3
   20430:	4b5b      	ldr	r3, [pc, #364]	; (205a0 <hif_send+0x388>)
   20432:	4798      	blx	r3
   20434:	0003      	movs	r3, r0
   20436:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20438:	231f      	movs	r3, #31
   2043a:	18fb      	adds	r3, r7, r3
   2043c:	781b      	ldrb	r3, [r3, #0]
   2043e:	b25b      	sxtb	r3, r3
   20440:	2b00      	cmp	r3, #0
   20442:	d000      	beq.n	20446 <hif_send+0x22e>
   20444:	e084      	b.n	20550 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   20446:	68bb      	ldr	r3, [r7, #8]
   20448:	3308      	adds	r3, #8
   2044a:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   2044c:	683b      	ldr	r3, [r7, #0]
   2044e:	2b00      	cmp	r3, #0
   20450:	d016      	beq.n	20480 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   20452:	68b8      	ldr	r0, [r7, #8]
   20454:	1d3b      	adds	r3, r7, #4
   20456:	881a      	ldrh	r2, [r3, #0]
   20458:	231f      	movs	r3, #31
   2045a:	18fc      	adds	r4, r7, r3
   2045c:	683b      	ldr	r3, [r7, #0]
   2045e:	0019      	movs	r1, r3
   20460:	4b4f      	ldr	r3, [pc, #316]	; (205a0 <hif_send+0x388>)
   20462:	4798      	blx	r3
   20464:	0003      	movs	r3, r0
   20466:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   20468:	231f      	movs	r3, #31
   2046a:	18fb      	adds	r3, r7, r3
   2046c:	781b      	ldrb	r3, [r3, #0]
   2046e:	b25b      	sxtb	r3, r3
   20470:	2b00      	cmp	r3, #0
   20472:	d000      	beq.n	20476 <hif_send+0x25e>
   20474:	e06e      	b.n	20554 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   20476:	1d3b      	adds	r3, r7, #4
   20478:	881a      	ldrh	r2, [r3, #0]
   2047a:	68bb      	ldr	r3, [r7, #8]
   2047c:	18d3      	adds	r3, r2, r3
   2047e:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   20480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20482:	2b00      	cmp	r3, #0
   20484:	d021      	beq.n	204ca <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   20486:	2338      	movs	r3, #56	; 0x38
   20488:	18fb      	adds	r3, r7, r3
   2048a:	881a      	ldrh	r2, [r3, #0]
   2048c:	1d3b      	adds	r3, r7, #4
   2048e:	881b      	ldrh	r3, [r3, #0]
   20490:	1ad3      	subs	r3, r2, r3
   20492:	001a      	movs	r2, r3
   20494:	68bb      	ldr	r3, [r7, #8]
   20496:	18d3      	adds	r3, r2, r3
   20498:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   2049a:	68b8      	ldr	r0, [r7, #8]
   2049c:	2334      	movs	r3, #52	; 0x34
   2049e:	18fb      	adds	r3, r7, r3
   204a0:	881a      	ldrh	r2, [r3, #0]
   204a2:	231f      	movs	r3, #31
   204a4:	18fc      	adds	r4, r7, r3
   204a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   204a8:	0019      	movs	r1, r3
   204aa:	4b3d      	ldr	r3, [pc, #244]	; (205a0 <hif_send+0x388>)
   204ac:	4798      	blx	r3
   204ae:	0003      	movs	r3, r0
   204b0:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   204b2:	231f      	movs	r3, #31
   204b4:	18fb      	adds	r3, r7, r3
   204b6:	781b      	ldrb	r3, [r3, #0]
   204b8:	b25b      	sxtb	r3, r3
   204ba:	2b00      	cmp	r3, #0
   204bc:	d14c      	bne.n	20558 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   204be:	2334      	movs	r3, #52	; 0x34
   204c0:	18fb      	adds	r3, r7, r3
   204c2:	881a      	ldrh	r2, [r3, #0]
   204c4:	68bb      	ldr	r3, [r7, #8]
   204c6:	18d3      	adds	r3, r2, r3
   204c8:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   204ca:	693b      	ldr	r3, [r7, #16]
   204cc:	009b      	lsls	r3, r3, #2
   204ce:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   204d0:	697b      	ldr	r3, [r7, #20]
   204d2:	2202      	movs	r2, #2
   204d4:	4313      	orrs	r3, r2
   204d6:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   204d8:	697b      	ldr	r3, [r7, #20]
   204da:	221f      	movs	r2, #31
   204dc:	18bc      	adds	r4, r7, r2
   204de:	4a31      	ldr	r2, [pc, #196]	; (205a4 <hif_send+0x38c>)
   204e0:	0019      	movs	r1, r3
   204e2:	0010      	movs	r0, r2
   204e4:	4b24      	ldr	r3, [pc, #144]	; (20578 <hif_send+0x360>)
   204e6:	4798      	blx	r3
   204e8:	0003      	movs	r3, r0
   204ea:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   204ec:	231f      	movs	r3, #31
   204ee:	18fb      	adds	r3, r7, r3
   204f0:	781b      	ldrb	r3, [r3, #0]
   204f2:	b25b      	sxtb	r3, r3
   204f4:	2b00      	cmp	r3, #0
   204f6:	d01c      	beq.n	20532 <hif_send+0x31a>
   204f8:	e02f      	b.n	2055a <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   204fa:	231f      	movs	r3, #31
   204fc:	18fc      	adds	r4, r7, r3
   204fe:	4b2a      	ldr	r3, [pc, #168]	; (205a8 <hif_send+0x390>)
   20500:	4798      	blx	r3
   20502:	0003      	movs	r3, r0
   20504:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   20506:	231f      	movs	r3, #31
   20508:	18fb      	adds	r3, r7, r3
   2050a:	22fd      	movs	r2, #253	; 0xfd
   2050c:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   2050e:	e026      	b.n	2055e <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   20510:	2398      	movs	r3, #152	; 0x98
   20512:	33ff      	adds	r3, #255	; 0xff
   20514:	001a      	movs	r2, r3
   20516:	4925      	ldr	r1, [pc, #148]	; (205ac <hif_send+0x394>)
   20518:	4b25      	ldr	r3, [pc, #148]	; (205b0 <hif_send+0x398>)
   2051a:	0018      	movs	r0, r3
   2051c:	4b1a      	ldr	r3, [pc, #104]	; (20588 <hif_send+0x370>)
   2051e:	4798      	blx	r3
   20520:	4b24      	ldr	r3, [pc, #144]	; (205b4 <hif_send+0x39c>)
   20522:	0018      	movs	r0, r3
   20524:	4b18      	ldr	r3, [pc, #96]	; (20588 <hif_send+0x370>)
   20526:	4798      	blx	r3
   20528:	4b19      	ldr	r3, [pc, #100]	; (20590 <hif_send+0x378>)
   2052a:	0018      	movs	r0, r3
   2052c:	4b16      	ldr	r3, [pc, #88]	; (20588 <hif_send+0x370>)
   2052e:	4798      	blx	r3
		goto ERR2;
   20530:	e015      	b.n	2055e <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   20532:	231f      	movs	r3, #31
   20534:	18fc      	adds	r4, r7, r3
   20536:	4b1c      	ldr	r3, [pc, #112]	; (205a8 <hif_send+0x390>)
   20538:	4798      	blx	r3
   2053a:	0003      	movs	r3, r0
   2053c:	7023      	strb	r3, [r4, #0]
	return ret;
   2053e:	231f      	movs	r3, #31
   20540:	18fb      	adds	r3, r7, r3
   20542:	781b      	ldrb	r3, [r3, #0]
   20544:	b25b      	sxtb	r3, r3
   20546:	e00e      	b.n	20566 <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   20548:	46c0      	nop			; (mov r8, r8)
   2054a:	e006      	b.n	2055a <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   2054c:	46c0      	nop			; (mov r8, r8)
   2054e:	e004      	b.n	2055a <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   20550:	46c0      	nop			; (mov r8, r8)
   20552:	e002      	b.n	2055a <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   20554:	46c0      	nop			; (mov r8, r8)
   20556:	e000      	b.n	2055a <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   20558:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   2055a:	4b17      	ldr	r3, [pc, #92]	; (205b8 <hif_send+0x3a0>)
   2055c:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   2055e:	231f      	movs	r3, #31
   20560:	18fb      	adds	r3, r7, r3
   20562:	781b      	ldrb	r3, [r3, #0]
   20564:	b25b      	sxtb	r3, r3
}
   20566:	0018      	movs	r0, r3
   20568:	46bd      	mov	sp, r7
   2056a:	b009      	add	sp, #36	; 0x24
   2056c:	bd90      	pop	{r4, r7, pc}
   2056e:	46c0      	nop			; (mov r8, r8)
   20570:	000200e1 	.word	0x000200e1
   20574:	0000108c 	.word	0x0000108c
   20578:	0002206d 	.word	0x0002206d
   2057c:	00001078 	.word	0x00001078
   20580:	00022049 	.word	0x00022049
   20584:	000371ac 	.word	0x000371ac
   20588:	0001d28d 	.word	0x0001d28d
   2058c:	000371b8 	.word	0x000371b8
   20590:	000371cc 	.word	0x000371cc
   20594:	0001f6d9 	.word	0x0001f6d9
   20598:	00150400 	.word	0x00150400
   2059c:	000003e7 	.word	0x000003e7
   205a0:	000221b5 	.word	0x000221b5
   205a4:	0000106c 	.word	0x0000106c
   205a8:	00020179 	.word	0x00020179
   205ac:	000374d4 	.word	0x000374d4
   205b0:	000371d0 	.word	0x000371d0
   205b4:	000371e4 	.word	0x000371e4
   205b8:	00020151 	.word	0x00020151

000205bc <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   205bc:	b590      	push	{r4, r7, lr}
   205be:	b087      	sub	sp, #28
   205c0:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   205c2:	230f      	movs	r3, #15
   205c4:	18fb      	adds	r3, r7, r3
   205c6:	2200      	movs	r2, #0
   205c8:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   205ca:	230f      	movs	r3, #15
   205cc:	18fc      	adds	r4, r7, r3
   205ce:	2308      	movs	r3, #8
   205d0:	18fb      	adds	r3, r7, r3
   205d2:	4adc      	ldr	r2, [pc, #880]	; (20944 <hif_isr+0x388>)
   205d4:	0019      	movs	r1, r3
   205d6:	0010      	movs	r0, r2
   205d8:	4bdb      	ldr	r3, [pc, #876]	; (20948 <hif_isr+0x38c>)
   205da:	4798      	blx	r3
   205dc:	0003      	movs	r3, r0
   205de:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   205e0:	230f      	movs	r3, #15
   205e2:	18fb      	adds	r3, r7, r3
   205e4:	781b      	ldrb	r3, [r3, #0]
   205e6:	b25b      	sxtb	r3, r3
   205e8:	2b00      	cmp	r3, #0
   205ea:	d000      	beq.n	205ee <hif_isr+0x32>
   205ec:	e21e      	b.n	20a2c <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   205ee:	68bb      	ldr	r3, [r7, #8]
   205f0:	2201      	movs	r2, #1
   205f2:	4013      	ands	r3, r2
   205f4:	d100      	bne.n	205f8 <hif_isr+0x3c>
   205f6:	e204      	b.n	20a02 <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   205f8:	2000      	movs	r0, #0
   205fa:	4bd4      	ldr	r3, [pc, #848]	; (2094c <hif_isr+0x390>)
   205fc:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   205fe:	68bb      	ldr	r3, [r7, #8]
   20600:	2201      	movs	r2, #1
   20602:	4393      	bics	r3, r2
   20604:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   20606:	68bb      	ldr	r3, [r7, #8]
   20608:	220f      	movs	r2, #15
   2060a:	18bc      	adds	r4, r7, r2
   2060c:	4acd      	ldr	r2, [pc, #820]	; (20944 <hif_isr+0x388>)
   2060e:	0019      	movs	r1, r3
   20610:	0010      	movs	r0, r2
   20612:	4bcf      	ldr	r3, [pc, #828]	; (20950 <hif_isr+0x394>)
   20614:	4798      	blx	r3
   20616:	0003      	movs	r3, r0
   20618:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   2061a:	230f      	movs	r3, #15
   2061c:	18fb      	adds	r3, r7, r3
   2061e:	781b      	ldrb	r3, [r3, #0]
   20620:	b25b      	sxtb	r3, r3
   20622:	2b00      	cmp	r3, #0
   20624:	d000      	beq.n	20628 <hif_isr+0x6c>
   20626:	e210      	b.n	20a4a <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   20628:	4bca      	ldr	r3, [pc, #808]	; (20954 <hif_isr+0x398>)
   2062a:	2201      	movs	r2, #1
   2062c:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   2062e:	68bb      	ldr	r3, [r7, #8]
   20630:	089b      	lsrs	r3, r3, #2
   20632:	b29a      	uxth	r2, r3
   20634:	230c      	movs	r3, #12
   20636:	18fb      	adds	r3, r7, r3
   20638:	0512      	lsls	r2, r2, #20
   2063a:	0d12      	lsrs	r2, r2, #20
   2063c:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   2063e:	230c      	movs	r3, #12
   20640:	18fb      	adds	r3, r7, r3
   20642:	881b      	ldrh	r3, [r3, #0]
   20644:	2b00      	cmp	r3, #0
   20646:	d100      	bne.n	2064a <hif_isr+0x8e>
   20648:	e1c8      	b.n	209dc <hif_isr+0x420>
				uint32 address = 0;
   2064a:	2300      	movs	r3, #0
   2064c:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   2064e:	230f      	movs	r3, #15
   20650:	18fc      	adds	r4, r7, r3
   20652:	003b      	movs	r3, r7
   20654:	4ac0      	ldr	r2, [pc, #768]	; (20958 <hif_isr+0x39c>)
   20656:	0019      	movs	r1, r3
   20658:	0010      	movs	r0, r2
   2065a:	4bbb      	ldr	r3, [pc, #748]	; (20948 <hif_isr+0x38c>)
   2065c:	4798      	blx	r3
   2065e:	0003      	movs	r3, r0
   20660:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   20662:	230f      	movs	r3, #15
   20664:	18fb      	adds	r3, r7, r3
   20666:	781b      	ldrb	r3, [r3, #0]
   20668:	b25b      	sxtb	r3, r3
   2066a:	2b00      	cmp	r3, #0
   2066c:	d012      	beq.n	20694 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   2066e:	23e4      	movs	r3, #228	; 0xe4
   20670:	005a      	lsls	r2, r3, #1
   20672:	49ba      	ldr	r1, [pc, #744]	; (2095c <hif_isr+0x3a0>)
   20674:	4bba      	ldr	r3, [pc, #744]	; (20960 <hif_isr+0x3a4>)
   20676:	0018      	movs	r0, r3
   20678:	4bba      	ldr	r3, [pc, #744]	; (20964 <hif_isr+0x3a8>)
   2067a:	4798      	blx	r3
   2067c:	4bba      	ldr	r3, [pc, #744]	; (20968 <hif_isr+0x3ac>)
   2067e:	0018      	movs	r0, r3
   20680:	4bb8      	ldr	r3, [pc, #736]	; (20964 <hif_isr+0x3a8>)
   20682:	4798      	blx	r3
   20684:	4bb9      	ldr	r3, [pc, #740]	; (2096c <hif_isr+0x3b0>)
   20686:	0018      	movs	r0, r3
   20688:	4bb6      	ldr	r3, [pc, #728]	; (20964 <hif_isr+0x3a8>)
   2068a:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   2068c:	2001      	movs	r0, #1
   2068e:	4baf      	ldr	r3, [pc, #700]	; (2094c <hif_isr+0x390>)
   20690:	4798      	blx	r3
					goto ERR1;
   20692:	e1db      	b.n	20a4c <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   20694:	683a      	ldr	r2, [r7, #0]
   20696:	4baf      	ldr	r3, [pc, #700]	; (20954 <hif_isr+0x398>)
   20698:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   2069a:	230c      	movs	r3, #12
   2069c:	18fb      	adds	r3, r7, r3
   2069e:	881a      	ldrh	r2, [r3, #0]
   206a0:	4bac      	ldr	r3, [pc, #688]	; (20954 <hif_isr+0x398>)
   206a2:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   206a4:	683b      	ldr	r3, [r7, #0]
   206a6:	220f      	movs	r2, #15
   206a8:	18bc      	adds	r4, r7, r2
   206aa:	1d39      	adds	r1, r7, #4
   206ac:	2204      	movs	r2, #4
   206ae:	0018      	movs	r0, r3
   206b0:	4baf      	ldr	r3, [pc, #700]	; (20970 <hif_isr+0x3b4>)
   206b2:	4798      	blx	r3
   206b4:	0003      	movs	r3, r0
   206b6:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   206b8:	1d3b      	adds	r3, r7, #4
   206ba:	885b      	ldrh	r3, [r3, #2]
   206bc:	b29a      	uxth	r2, r3
   206be:	1d3b      	adds	r3, r7, #4
   206c0:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   206c2:	230f      	movs	r3, #15
   206c4:	18fb      	adds	r3, r7, r3
   206c6:	781b      	ldrb	r3, [r3, #0]
   206c8:	b25b      	sxtb	r3, r3
   206ca:	2b00      	cmp	r3, #0
   206cc:	d012      	beq.n	206f4 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   206ce:	23e9      	movs	r3, #233	; 0xe9
   206d0:	005a      	lsls	r2, r3, #1
   206d2:	49a2      	ldr	r1, [pc, #648]	; (2095c <hif_isr+0x3a0>)
   206d4:	4ba2      	ldr	r3, [pc, #648]	; (20960 <hif_isr+0x3a4>)
   206d6:	0018      	movs	r0, r3
   206d8:	4ba2      	ldr	r3, [pc, #648]	; (20964 <hif_isr+0x3a8>)
   206da:	4798      	blx	r3
   206dc:	4ba5      	ldr	r3, [pc, #660]	; (20974 <hif_isr+0x3b8>)
   206de:	0018      	movs	r0, r3
   206e0:	4ba0      	ldr	r3, [pc, #640]	; (20964 <hif_isr+0x3a8>)
   206e2:	4798      	blx	r3
   206e4:	4ba1      	ldr	r3, [pc, #644]	; (2096c <hif_isr+0x3b0>)
   206e6:	0018      	movs	r0, r3
   206e8:	4b9e      	ldr	r3, [pc, #632]	; (20964 <hif_isr+0x3a8>)
   206ea:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   206ec:	2001      	movs	r0, #1
   206ee:	4b97      	ldr	r3, [pc, #604]	; (2094c <hif_isr+0x390>)
   206f0:	4798      	blx	r3
					goto ERR1;
   206f2:	e1ab      	b.n	20a4c <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   206f4:	1d3b      	adds	r3, r7, #4
   206f6:	885b      	ldrh	r3, [r3, #2]
   206f8:	b29b      	uxth	r3, r3
   206fa:	220c      	movs	r2, #12
   206fc:	18ba      	adds	r2, r7, r2
   206fe:	8812      	ldrh	r2, [r2, #0]
   20700:	429a      	cmp	r2, r3
   20702:	d02f      	beq.n	20764 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   20704:	230c      	movs	r3, #12
   20706:	18fb      	adds	r3, r7, r3
   20708:	881b      	ldrh	r3, [r3, #0]
   2070a:	1d3a      	adds	r2, r7, #4
   2070c:	8852      	ldrh	r2, [r2, #2]
   2070e:	b292      	uxth	r2, r2
   20710:	1a9b      	subs	r3, r3, r2
   20712:	2b04      	cmp	r3, #4
   20714:	dd26      	ble.n	20764 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   20716:	23dc      	movs	r3, #220	; 0xdc
   20718:	33ff      	adds	r3, #255	; 0xff
   2071a:	001a      	movs	r2, r3
   2071c:	498f      	ldr	r1, [pc, #572]	; (2095c <hif_isr+0x3a0>)
   2071e:	4b90      	ldr	r3, [pc, #576]	; (20960 <hif_isr+0x3a4>)
   20720:	0018      	movs	r0, r3
   20722:	4b90      	ldr	r3, [pc, #576]	; (20964 <hif_isr+0x3a8>)
   20724:	4798      	blx	r3
   20726:	230c      	movs	r3, #12
   20728:	18fb      	adds	r3, r7, r3
   2072a:	8819      	ldrh	r1, [r3, #0]
   2072c:	1d3b      	adds	r3, r7, #4
   2072e:	885b      	ldrh	r3, [r3, #2]
   20730:	b29b      	uxth	r3, r3
   20732:	001a      	movs	r2, r3
   20734:	1d3b      	adds	r3, r7, #4
   20736:	781b      	ldrb	r3, [r3, #0]
   20738:	b2db      	uxtb	r3, r3
   2073a:	001c      	movs	r4, r3
   2073c:	1d3b      	adds	r3, r7, #4
   2073e:	785b      	ldrb	r3, [r3, #1]
   20740:	b2db      	uxtb	r3, r3
   20742:	488d      	ldr	r0, [pc, #564]	; (20978 <hif_isr+0x3bc>)
   20744:	9300      	str	r3, [sp, #0]
   20746:	0023      	movs	r3, r4
   20748:	4c86      	ldr	r4, [pc, #536]	; (20964 <hif_isr+0x3a8>)
   2074a:	47a0      	blx	r4
   2074c:	4b87      	ldr	r3, [pc, #540]	; (2096c <hif_isr+0x3b0>)
   2074e:	0018      	movs	r0, r3
   20750:	4b84      	ldr	r3, [pc, #528]	; (20964 <hif_isr+0x3a8>)
   20752:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   20754:	2001      	movs	r0, #1
   20756:	4b7d      	ldr	r3, [pc, #500]	; (2094c <hif_isr+0x390>)
   20758:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   2075a:	230f      	movs	r3, #15
   2075c:	18fb      	adds	r3, r7, r3
   2075e:	22fa      	movs	r2, #250	; 0xfa
   20760:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   20762:	e173      	b.n	20a4c <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   20764:	1d3b      	adds	r3, r7, #4
   20766:	781b      	ldrb	r3, [r3, #0]
   20768:	b2db      	uxtb	r3, r3
   2076a:	2b01      	cmp	r3, #1
   2076c:	d122      	bne.n	207b4 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   2076e:	4b79      	ldr	r3, [pc, #484]	; (20954 <hif_isr+0x398>)
   20770:	691b      	ldr	r3, [r3, #16]
   20772:	2b00      	cmp	r3, #0
   20774:	d00d      	beq.n	20792 <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20776:	4b77      	ldr	r3, [pc, #476]	; (20954 <hif_isr+0x398>)
   20778:	691b      	ldr	r3, [r3, #16]
   2077a:	1d3a      	adds	r2, r7, #4
   2077c:	7852      	ldrb	r2, [r2, #1]
   2077e:	b2d0      	uxtb	r0, r2
   20780:	1d3a      	adds	r2, r7, #4
   20782:	8852      	ldrh	r2, [r2, #2]
   20784:	b292      	uxth	r2, r2
   20786:	3a08      	subs	r2, #8
   20788:	b291      	uxth	r1, r2
   2078a:	683a      	ldr	r2, [r7, #0]
   2078c:	3208      	adds	r2, #8
   2078e:	4798      	blx	r3
   20790:	e102      	b.n	20998 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   20792:	23e8      	movs	r3, #232	; 0xe8
   20794:	33ff      	adds	r3, #255	; 0xff
   20796:	001a      	movs	r2, r3
   20798:	4970      	ldr	r1, [pc, #448]	; (2095c <hif_isr+0x3a0>)
   2079a:	4b71      	ldr	r3, [pc, #452]	; (20960 <hif_isr+0x3a4>)
   2079c:	0018      	movs	r0, r3
   2079e:	4b71      	ldr	r3, [pc, #452]	; (20964 <hif_isr+0x3a8>)
   207a0:	4798      	blx	r3
   207a2:	4b76      	ldr	r3, [pc, #472]	; (2097c <hif_isr+0x3c0>)
   207a4:	0018      	movs	r0, r3
   207a6:	4b6f      	ldr	r3, [pc, #444]	; (20964 <hif_isr+0x3a8>)
   207a8:	4798      	blx	r3
   207aa:	4b70      	ldr	r3, [pc, #448]	; (2096c <hif_isr+0x3b0>)
   207ac:	0018      	movs	r0, r3
   207ae:	4b6d      	ldr	r3, [pc, #436]	; (20964 <hif_isr+0x3a8>)
   207b0:	4798      	blx	r3
   207b2:	e0f1      	b.n	20998 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   207b4:	1d3b      	adds	r3, r7, #4
   207b6:	781b      	ldrb	r3, [r3, #0]
   207b8:	b2db      	uxtb	r3, r3
   207ba:	2b02      	cmp	r3, #2
   207bc:	d122      	bne.n	20804 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   207be:	4b65      	ldr	r3, [pc, #404]	; (20954 <hif_isr+0x398>)
   207c0:	695b      	ldr	r3, [r3, #20]
   207c2:	2b00      	cmp	r3, #0
   207c4:	d00d      	beq.n	207e2 <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   207c6:	4b63      	ldr	r3, [pc, #396]	; (20954 <hif_isr+0x398>)
   207c8:	695b      	ldr	r3, [r3, #20]
   207ca:	1d3a      	adds	r2, r7, #4
   207cc:	7852      	ldrb	r2, [r2, #1]
   207ce:	b2d0      	uxtb	r0, r2
   207d0:	1d3a      	adds	r2, r7, #4
   207d2:	8852      	ldrh	r2, [r2, #2]
   207d4:	b292      	uxth	r2, r2
   207d6:	3a08      	subs	r2, #8
   207d8:	b291      	uxth	r1, r2
   207da:	683a      	ldr	r2, [r7, #0]
   207dc:	3208      	adds	r2, #8
   207de:	4798      	blx	r3
   207e0:	e0da      	b.n	20998 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   207e2:	23f0      	movs	r3, #240	; 0xf0
   207e4:	33ff      	adds	r3, #255	; 0xff
   207e6:	001a      	movs	r2, r3
   207e8:	495c      	ldr	r1, [pc, #368]	; (2095c <hif_isr+0x3a0>)
   207ea:	4b5d      	ldr	r3, [pc, #372]	; (20960 <hif_isr+0x3a4>)
   207ec:	0018      	movs	r0, r3
   207ee:	4b5d      	ldr	r3, [pc, #372]	; (20964 <hif_isr+0x3a8>)
   207f0:	4798      	blx	r3
   207f2:	4b63      	ldr	r3, [pc, #396]	; (20980 <hif_isr+0x3c4>)
   207f4:	0018      	movs	r0, r3
   207f6:	4b5b      	ldr	r3, [pc, #364]	; (20964 <hif_isr+0x3a8>)
   207f8:	4798      	blx	r3
   207fa:	4b5c      	ldr	r3, [pc, #368]	; (2096c <hif_isr+0x3b0>)
   207fc:	0018      	movs	r0, r3
   207fe:	4b59      	ldr	r3, [pc, #356]	; (20964 <hif_isr+0x3a8>)
   20800:	4798      	blx	r3
   20802:	e0c9      	b.n	20998 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   20804:	1d3b      	adds	r3, r7, #4
   20806:	781b      	ldrb	r3, [r3, #0]
   20808:	b2db      	uxtb	r3, r3
   2080a:	2b04      	cmp	r3, #4
   2080c:	d122      	bne.n	20854 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   2080e:	4b51      	ldr	r3, [pc, #324]	; (20954 <hif_isr+0x398>)
   20810:	699b      	ldr	r3, [r3, #24]
   20812:	2b00      	cmp	r3, #0
   20814:	d00d      	beq.n	20832 <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20816:	4b4f      	ldr	r3, [pc, #316]	; (20954 <hif_isr+0x398>)
   20818:	699b      	ldr	r3, [r3, #24]
   2081a:	1d3a      	adds	r2, r7, #4
   2081c:	7852      	ldrb	r2, [r2, #1]
   2081e:	b2d0      	uxtb	r0, r2
   20820:	1d3a      	adds	r2, r7, #4
   20822:	8852      	ldrh	r2, [r2, #2]
   20824:	b292      	uxth	r2, r2
   20826:	3a08      	subs	r2, #8
   20828:	b291      	uxth	r1, r2
   2082a:	683a      	ldr	r2, [r7, #0]
   2082c:	3208      	adds	r2, #8
   2082e:	4798      	blx	r3
   20830:	e0b2      	b.n	20998 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   20832:	23f8      	movs	r3, #248	; 0xf8
   20834:	33ff      	adds	r3, #255	; 0xff
   20836:	001a      	movs	r2, r3
   20838:	4948      	ldr	r1, [pc, #288]	; (2095c <hif_isr+0x3a0>)
   2083a:	4b49      	ldr	r3, [pc, #292]	; (20960 <hif_isr+0x3a4>)
   2083c:	0018      	movs	r0, r3
   2083e:	4b49      	ldr	r3, [pc, #292]	; (20964 <hif_isr+0x3a8>)
   20840:	4798      	blx	r3
   20842:	4b50      	ldr	r3, [pc, #320]	; (20984 <hif_isr+0x3c8>)
   20844:	0018      	movs	r0, r3
   20846:	4b47      	ldr	r3, [pc, #284]	; (20964 <hif_isr+0x3a8>)
   20848:	4798      	blx	r3
   2084a:	4b48      	ldr	r3, [pc, #288]	; (2096c <hif_isr+0x3b0>)
   2084c:	0018      	movs	r0, r3
   2084e:	4b45      	ldr	r3, [pc, #276]	; (20964 <hif_isr+0x3a8>)
   20850:	4798      	blx	r3
   20852:	e0a1      	b.n	20998 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   20854:	1d3b      	adds	r3, r7, #4
   20856:	781b      	ldrb	r3, [r3, #0]
   20858:	b2db      	uxtb	r3, r3
   2085a:	2b06      	cmp	r3, #6
   2085c:	d121      	bne.n	208a2 <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   2085e:	4b3d      	ldr	r3, [pc, #244]	; (20954 <hif_isr+0x398>)
   20860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20862:	2b00      	cmp	r3, #0
   20864:	d00d      	beq.n	20882 <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20866:	4b3b      	ldr	r3, [pc, #236]	; (20954 <hif_isr+0x398>)
   20868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2086a:	1d3a      	adds	r2, r7, #4
   2086c:	7852      	ldrb	r2, [r2, #1]
   2086e:	b2d0      	uxtb	r0, r2
   20870:	1d3a      	adds	r2, r7, #4
   20872:	8852      	ldrh	r2, [r2, #2]
   20874:	b292      	uxth	r2, r2
   20876:	3a08      	subs	r2, #8
   20878:	b291      	uxth	r1, r2
   2087a:	683a      	ldr	r2, [r7, #0]
   2087c:	3208      	adds	r2, #8
   2087e:	4798      	blx	r3
   20880:	e08a      	b.n	20998 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   20882:	2380      	movs	r3, #128	; 0x80
   20884:	009a      	lsls	r2, r3, #2
   20886:	4935      	ldr	r1, [pc, #212]	; (2095c <hif_isr+0x3a0>)
   20888:	4b35      	ldr	r3, [pc, #212]	; (20960 <hif_isr+0x3a4>)
   2088a:	0018      	movs	r0, r3
   2088c:	4b35      	ldr	r3, [pc, #212]	; (20964 <hif_isr+0x3a8>)
   2088e:	4798      	blx	r3
   20890:	4b3d      	ldr	r3, [pc, #244]	; (20988 <hif_isr+0x3cc>)
   20892:	0018      	movs	r0, r3
   20894:	4b33      	ldr	r3, [pc, #204]	; (20964 <hif_isr+0x3a8>)
   20896:	4798      	blx	r3
   20898:	4b34      	ldr	r3, [pc, #208]	; (2096c <hif_isr+0x3b0>)
   2089a:	0018      	movs	r0, r3
   2089c:	4b31      	ldr	r3, [pc, #196]	; (20964 <hif_isr+0x3a8>)
   2089e:	4798      	blx	r3
   208a0:	e07a      	b.n	20998 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   208a2:	1d3b      	adds	r3, r7, #4
   208a4:	781b      	ldrb	r3, [r3, #0]
   208a6:	b2db      	uxtb	r3, r3
   208a8:	2b07      	cmp	r3, #7
   208aa:	d120      	bne.n	208ee <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   208ac:	4b29      	ldr	r3, [pc, #164]	; (20954 <hif_isr+0x398>)
   208ae:	69db      	ldr	r3, [r3, #28]
   208b0:	2b00      	cmp	r3, #0
   208b2:	d00d      	beq.n	208d0 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   208b4:	4b27      	ldr	r3, [pc, #156]	; (20954 <hif_isr+0x398>)
   208b6:	69db      	ldr	r3, [r3, #28]
   208b8:	1d3a      	adds	r2, r7, #4
   208ba:	7852      	ldrb	r2, [r2, #1]
   208bc:	b2d0      	uxtb	r0, r2
   208be:	1d3a      	adds	r2, r7, #4
   208c0:	8852      	ldrh	r2, [r2, #2]
   208c2:	b292      	uxth	r2, r2
   208c4:	3a08      	subs	r2, #8
   208c6:	b291      	uxth	r1, r2
   208c8:	683a      	ldr	r2, [r7, #0]
   208ca:	3208      	adds	r2, #8
   208cc:	4798      	blx	r3
   208ce:	e063      	b.n	20998 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   208d0:	4a2e      	ldr	r2, [pc, #184]	; (2098c <hif_isr+0x3d0>)
   208d2:	4922      	ldr	r1, [pc, #136]	; (2095c <hif_isr+0x3a0>)
   208d4:	4b22      	ldr	r3, [pc, #136]	; (20960 <hif_isr+0x3a4>)
   208d6:	0018      	movs	r0, r3
   208d8:	4b22      	ldr	r3, [pc, #136]	; (20964 <hif_isr+0x3a8>)
   208da:	4798      	blx	r3
   208dc:	4b2c      	ldr	r3, [pc, #176]	; (20990 <hif_isr+0x3d4>)
   208de:	0018      	movs	r0, r3
   208e0:	4b20      	ldr	r3, [pc, #128]	; (20964 <hif_isr+0x3a8>)
   208e2:	4798      	blx	r3
   208e4:	4b21      	ldr	r3, [pc, #132]	; (2096c <hif_isr+0x3b0>)
   208e6:	0018      	movs	r0, r3
   208e8:	4b1e      	ldr	r3, [pc, #120]	; (20964 <hif_isr+0x3a8>)
   208ea:	4798      	blx	r3
   208ec:	e054      	b.n	20998 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   208ee:	1d3b      	adds	r3, r7, #4
   208f0:	781b      	ldrb	r3, [r3, #0]
   208f2:	b2db      	uxtb	r3, r3
   208f4:	2b05      	cmp	r3, #5
   208f6:	d111      	bne.n	2091c <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   208f8:	4b16      	ldr	r3, [pc, #88]	; (20954 <hif_isr+0x398>)
   208fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   208fc:	2b00      	cmp	r3, #0
   208fe:	d04b      	beq.n	20998 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20900:	4b14      	ldr	r3, [pc, #80]	; (20954 <hif_isr+0x398>)
   20902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20904:	1d3a      	adds	r2, r7, #4
   20906:	7852      	ldrb	r2, [r2, #1]
   20908:	b2d0      	uxtb	r0, r2
   2090a:	1d3a      	adds	r2, r7, #4
   2090c:	8852      	ldrh	r2, [r2, #2]
   2090e:	b292      	uxth	r2, r2
   20910:	3a08      	subs	r2, #8
   20912:	b291      	uxth	r1, r2
   20914:	683a      	ldr	r2, [r7, #0]
   20916:	3208      	adds	r2, #8
   20918:	4798      	blx	r3
   2091a:	e03d      	b.n	20998 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   2091c:	2384      	movs	r3, #132	; 0x84
   2091e:	009a      	lsls	r2, r3, #2
   20920:	490e      	ldr	r1, [pc, #56]	; (2095c <hif_isr+0x3a0>)
   20922:	4b0f      	ldr	r3, [pc, #60]	; (20960 <hif_isr+0x3a4>)
   20924:	0018      	movs	r0, r3
   20926:	4b0f      	ldr	r3, [pc, #60]	; (20964 <hif_isr+0x3a8>)
   20928:	4798      	blx	r3
   2092a:	4b1a      	ldr	r3, [pc, #104]	; (20994 <hif_isr+0x3d8>)
   2092c:	0018      	movs	r0, r3
   2092e:	4b0d      	ldr	r3, [pc, #52]	; (20964 <hif_isr+0x3a8>)
   20930:	4798      	blx	r3
   20932:	4b0e      	ldr	r3, [pc, #56]	; (2096c <hif_isr+0x3b0>)
   20934:	0018      	movs	r0, r3
   20936:	4b0b      	ldr	r3, [pc, #44]	; (20964 <hif_isr+0x3a8>)
   20938:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   2093a:	230f      	movs	r3, #15
   2093c:	18fb      	adds	r3, r7, r3
   2093e:	22fa      	movs	r2, #250	; 0xfa
   20940:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   20942:	e083      	b.n	20a4c <hif_isr+0x490>
   20944:	00001070 	.word	0x00001070
   20948:	00022049 	.word	0x00022049
   2094c:	0001f76d 	.word	0x0001f76d
   20950:	0002206d 	.word	0x0002206d
   20954:	200054e0 	.word	0x200054e0
   20958:	00001084 	.word	0x00001084
   2095c:	000374e0 	.word	0x000374e0
   20960:	000371d0 	.word	0x000371d0
   20964:	0001d28d 	.word	0x0001d28d
   20968:	00037204 	.word	0x00037204
   2096c:	000371cc 	.word	0x000371cc
   20970:	000220bd 	.word	0x000220bd
   20974:	0003722c 	.word	0x0003722c
   20978:	00037244 	.word	0x00037244
   2097c:	00037284 	.word	0x00037284
   20980:	000372a8 	.word	0x000372a8
   20984:	000372cc 	.word	0x000372cc
   20988:	000372ec 	.word	0x000372ec
   2098c:	00000207 	.word	0x00000207
   20990:	00037310 	.word	0x00037310
   20994:	00037334 	.word	0x00037334
				}
				if(gstrHifCxt.u8HifRXDone)
   20998:	4b30      	ldr	r3, [pc, #192]	; (20a5c <hif_isr+0x4a0>)
   2099a:	789b      	ldrb	r3, [r3, #2]
   2099c:	b2db      	uxtb	r3, r3
   2099e:	2b00      	cmp	r3, #0
   209a0:	d054      	beq.n	20a4c <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   209a2:	4a2f      	ldr	r2, [pc, #188]	; (20a60 <hif_isr+0x4a4>)
   209a4:	492f      	ldr	r1, [pc, #188]	; (20a64 <hif_isr+0x4a8>)
   209a6:	4b30      	ldr	r3, [pc, #192]	; (20a68 <hif_isr+0x4ac>)
   209a8:	0018      	movs	r0, r3
   209aa:	4b30      	ldr	r3, [pc, #192]	; (20a6c <hif_isr+0x4b0>)
   209ac:	4798      	blx	r3
   209ae:	1d3b      	adds	r3, r7, #4
   209b0:	781b      	ldrb	r3, [r3, #0]
   209b2:	b2db      	uxtb	r3, r3
   209b4:	0019      	movs	r1, r3
   209b6:	1d3b      	adds	r3, r7, #4
   209b8:	785b      	ldrb	r3, [r3, #1]
   209ba:	b2db      	uxtb	r3, r3
   209bc:	001a      	movs	r2, r3
   209be:	4b2c      	ldr	r3, [pc, #176]	; (20a70 <hif_isr+0x4b4>)
   209c0:	0018      	movs	r0, r3
   209c2:	4b2a      	ldr	r3, [pc, #168]	; (20a6c <hif_isr+0x4b0>)
   209c4:	4798      	blx	r3
   209c6:	4b2b      	ldr	r3, [pc, #172]	; (20a74 <hif_isr+0x4b8>)
   209c8:	0018      	movs	r0, r3
   209ca:	4b28      	ldr	r3, [pc, #160]	; (20a6c <hif_isr+0x4b0>)
   209cc:	4798      	blx	r3
					ret = hif_set_rx_done();
   209ce:	230f      	movs	r3, #15
   209d0:	18fc      	adds	r4, r7, r3
   209d2:	4b29      	ldr	r3, [pc, #164]	; (20a78 <hif_isr+0x4bc>)
   209d4:	4798      	blx	r3
   209d6:	0003      	movs	r3, r0
   209d8:	7023      	strb	r3, [r4, #0]
   209da:	e037      	b.n	20a4c <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   209dc:	4a27      	ldr	r2, [pc, #156]	; (20a7c <hif_isr+0x4c0>)
   209de:	4921      	ldr	r1, [pc, #132]	; (20a64 <hif_isr+0x4a8>)
   209e0:	4b21      	ldr	r3, [pc, #132]	; (20a68 <hif_isr+0x4ac>)
   209e2:	0018      	movs	r0, r3
   209e4:	4b21      	ldr	r3, [pc, #132]	; (20a6c <hif_isr+0x4b0>)
   209e6:	4798      	blx	r3
   209e8:	4b25      	ldr	r3, [pc, #148]	; (20a80 <hif_isr+0x4c4>)
   209ea:	0018      	movs	r0, r3
   209ec:	4b1f      	ldr	r3, [pc, #124]	; (20a6c <hif_isr+0x4b0>)
   209ee:	4798      	blx	r3
   209f0:	4b20      	ldr	r3, [pc, #128]	; (20a74 <hif_isr+0x4b8>)
   209f2:	0018      	movs	r0, r3
   209f4:	4b1d      	ldr	r3, [pc, #116]	; (20a6c <hif_isr+0x4b0>)
   209f6:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   209f8:	230f      	movs	r3, #15
   209fa:	18fb      	adds	r3, r7, r3
   209fc:	22fe      	movs	r2, #254	; 0xfe
   209fe:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   20a00:	e024      	b.n	20a4c <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   20a02:	4a20      	ldr	r2, [pc, #128]	; (20a84 <hif_isr+0x4c8>)
   20a04:	4917      	ldr	r1, [pc, #92]	; (20a64 <hif_isr+0x4a8>)
   20a06:	4b18      	ldr	r3, [pc, #96]	; (20a68 <hif_isr+0x4ac>)
   20a08:	0018      	movs	r0, r3
   20a0a:	4b18      	ldr	r3, [pc, #96]	; (20a6c <hif_isr+0x4b0>)
   20a0c:	4798      	blx	r3
   20a0e:	68ba      	ldr	r2, [r7, #8]
   20a10:	4b1d      	ldr	r3, [pc, #116]	; (20a88 <hif_isr+0x4cc>)
   20a12:	0011      	movs	r1, r2
   20a14:	0018      	movs	r0, r3
   20a16:	4b15      	ldr	r3, [pc, #84]	; (20a6c <hif_isr+0x4b0>)
   20a18:	4798      	blx	r3
   20a1a:	4b16      	ldr	r3, [pc, #88]	; (20a74 <hif_isr+0x4b8>)
   20a1c:	0018      	movs	r0, r3
   20a1e:	4b13      	ldr	r3, [pc, #76]	; (20a6c <hif_isr+0x4b0>)
   20a20:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   20a22:	230f      	movs	r3, #15
   20a24:	18fb      	adds	r3, r7, r3
   20a26:	22f4      	movs	r2, #244	; 0xf4
   20a28:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   20a2a:	e00f      	b.n	20a4c <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   20a2c:	4a17      	ldr	r2, [pc, #92]	; (20a8c <hif_isr+0x4d0>)
   20a2e:	490d      	ldr	r1, [pc, #52]	; (20a64 <hif_isr+0x4a8>)
   20a30:	4b0d      	ldr	r3, [pc, #52]	; (20a68 <hif_isr+0x4ac>)
   20a32:	0018      	movs	r0, r3
   20a34:	4b0d      	ldr	r3, [pc, #52]	; (20a6c <hif_isr+0x4b0>)
   20a36:	4798      	blx	r3
   20a38:	4b15      	ldr	r3, [pc, #84]	; (20a90 <hif_isr+0x4d4>)
   20a3a:	0018      	movs	r0, r3
   20a3c:	4b0b      	ldr	r3, [pc, #44]	; (20a6c <hif_isr+0x4b0>)
   20a3e:	4798      	blx	r3
   20a40:	4b0c      	ldr	r3, [pc, #48]	; (20a74 <hif_isr+0x4b8>)
   20a42:	0018      	movs	r0, r3
   20a44:	4b09      	ldr	r3, [pc, #36]	; (20a6c <hif_isr+0x4b0>)
   20a46:	4798      	blx	r3
		goto ERR1;
   20a48:	e000      	b.n	20a4c <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   20a4a:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   20a4c:	230f      	movs	r3, #15
   20a4e:	18fb      	adds	r3, r7, r3
   20a50:	781b      	ldrb	r3, [r3, #0]
   20a52:	b25b      	sxtb	r3, r3
}
   20a54:	0018      	movs	r0, r3
   20a56:	46bd      	mov	sp, r7
   20a58:	b005      	add	sp, #20
   20a5a:	bd90      	pop	{r4, r7, pc}
   20a5c:	200054e0 	.word	0x200054e0
   20a60:	00000216 	.word	0x00000216
   20a64:	000374e0 	.word	0x000374e0
   20a68:	000371d0 	.word	0x000371d0
   20a6c:	0001d28d 	.word	0x0001d28d
   20a70:	0003734c 	.word	0x0003734c
   20a74:	000371cc 	.word	0x000371cc
   20a78:	00020051 	.word	0x00020051
   20a7c:	0000021d 	.word	0x0000021d
   20a80:	00037378 	.word	0x00037378
   20a84:	00000225 	.word	0x00000225
   20a88:	0003738c 	.word	0x0003738c
   20a8c:	0000022e 	.word	0x0000022e
   20a90:	000373a8 	.word	0x000373a8

00020a94 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   20a94:	b590      	push	{r4, r7, lr}
   20a96:	b083      	sub	sp, #12
   20a98:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   20a9a:	1dfb      	adds	r3, r7, #7
   20a9c:	2200      	movs	r2, #0
   20a9e:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   20aa0:	4b1c      	ldr	r3, [pc, #112]	; (20b14 <hif_handle_isr+0x80>)
   20aa2:	2200      	movs	r2, #0
   20aa4:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   20aa6:	e024      	b.n	20af2 <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   20aa8:	4b1a      	ldr	r3, [pc, #104]	; (20b14 <hif_handle_isr+0x80>)
   20aaa:	78db      	ldrb	r3, [r3, #3]
   20aac:	b2db      	uxtb	r3, r3
   20aae:	3b01      	subs	r3, #1
   20ab0:	b2da      	uxtb	r2, r3
   20ab2:	4b18      	ldr	r3, [pc, #96]	; (20b14 <hif_handle_isr+0x80>)
   20ab4:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   20ab6:	1dfc      	adds	r4, r7, #7
   20ab8:	4b17      	ldr	r3, [pc, #92]	; (20b18 <hif_handle_isr+0x84>)
   20aba:	4798      	blx	r3
   20abc:	0003      	movs	r3, r0
   20abe:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   20ac0:	1dfb      	adds	r3, r7, #7
   20ac2:	781b      	ldrb	r3, [r3, #0]
   20ac4:	b25b      	sxtb	r3, r3
   20ac6:	2b00      	cmp	r3, #0
   20ac8:	d100      	bne.n	20acc <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   20aca:	e012      	b.n	20af2 <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   20acc:	4a13      	ldr	r2, [pc, #76]	; (20b1c <hif_handle_isr+0x88>)
   20ace:	4914      	ldr	r1, [pc, #80]	; (20b20 <hif_handle_isr+0x8c>)
   20ad0:	4b14      	ldr	r3, [pc, #80]	; (20b24 <hif_handle_isr+0x90>)
   20ad2:	0018      	movs	r0, r3
   20ad4:	4b14      	ldr	r3, [pc, #80]	; (20b28 <hif_handle_isr+0x94>)
   20ad6:	4798      	blx	r3
   20ad8:	1dfb      	adds	r3, r7, #7
   20ada:	2200      	movs	r2, #0
   20adc:	569a      	ldrsb	r2, [r3, r2]
   20ade:	4b13      	ldr	r3, [pc, #76]	; (20b2c <hif_handle_isr+0x98>)
   20ae0:	0011      	movs	r1, r2
   20ae2:	0018      	movs	r0, r3
   20ae4:	4b10      	ldr	r3, [pc, #64]	; (20b28 <hif_handle_isr+0x94>)
   20ae6:	4798      	blx	r3
   20ae8:	4b11      	ldr	r3, [pc, #68]	; (20b30 <hif_handle_isr+0x9c>)
   20aea:	0018      	movs	r0, r3
   20aec:	4b0e      	ldr	r3, [pc, #56]	; (20b28 <hif_handle_isr+0x94>)
   20aee:	4798      	blx	r3
			ret = hif_isr();
   20af0:	e7e1      	b.n	20ab6 <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   20af2:	4b08      	ldr	r3, [pc, #32]	; (20b14 <hif_handle_isr+0x80>)
   20af4:	78db      	ldrb	r3, [r3, #3]
   20af6:	b2db      	uxtb	r3, r3
   20af8:	2b00      	cmp	r3, #0
   20afa:	d004      	beq.n	20b06 <hif_handle_isr+0x72>
   20afc:	4b05      	ldr	r3, [pc, #20]	; (20b14 <hif_handle_isr+0x80>)
   20afe:	791b      	ldrb	r3, [r3, #4]
   20b00:	b2db      	uxtb	r3, r3
   20b02:	2b00      	cmp	r3, #0
   20b04:	d0d0      	beq.n	20aa8 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   20b06:	1dfb      	adds	r3, r7, #7
   20b08:	781b      	ldrb	r3, [r3, #0]
   20b0a:	b25b      	sxtb	r3, r3
}
   20b0c:	0018      	movs	r0, r3
   20b0e:	46bd      	mov	sp, r7
   20b10:	b003      	add	sp, #12
   20b12:	bd90      	pop	{r4, r7, pc}
   20b14:	200054e0 	.word	0x200054e0
   20b18:	000205bd 	.word	0x000205bd
   20b1c:	00000257 	.word	0x00000257
   20b20:	000374e8 	.word	0x000374e8
   20b24:	000371d0 	.word	0x000371d0
   20b28:	0001d28d 	.word	0x0001d28d
   20b2c:	000373cc 	.word	0x000373cc
   20b30:	000371cc 	.word	0x000371cc

00020b34 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   20b34:	b590      	push	{r4, r7, lr}
   20b36:	b087      	sub	sp, #28
   20b38:	af00      	add	r7, sp, #0
   20b3a:	60f8      	str	r0, [r7, #12]
   20b3c:	60b9      	str	r1, [r7, #8]
   20b3e:	0019      	movs	r1, r3
   20b40:	1dbb      	adds	r3, r7, #6
   20b42:	801a      	strh	r2, [r3, #0]
   20b44:	1d7b      	adds	r3, r7, #5
   20b46:	1c0a      	adds	r2, r1, #0
   20b48:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   20b4a:	2317      	movs	r3, #23
   20b4c:	18fb      	adds	r3, r7, r3
   20b4e:	2200      	movs	r2, #0
   20b50:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   20b52:	68fb      	ldr	r3, [r7, #12]
   20b54:	2b00      	cmp	r3, #0
   20b56:	d006      	beq.n	20b66 <hif_receive+0x32>
   20b58:	68bb      	ldr	r3, [r7, #8]
   20b5a:	2b00      	cmp	r3, #0
   20b5c:	d003      	beq.n	20b66 <hif_receive+0x32>
   20b5e:	1dbb      	adds	r3, r7, #6
   20b60:	881b      	ldrh	r3, [r3, #0]
   20b62:	2b00      	cmp	r3, #0
   20b64:	d11e      	bne.n	20ba4 <hif_receive+0x70>
	{
		if(isDone)
   20b66:	1d7b      	adds	r3, r7, #5
   20b68:	781b      	ldrb	r3, [r3, #0]
   20b6a:	2b00      	cmp	r3, #0
   20b6c:	d006      	beq.n	20b7c <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   20b6e:	2317      	movs	r3, #23
   20b70:	18fc      	adds	r4, r7, r3
   20b72:	4b45      	ldr	r3, [pc, #276]	; (20c88 <hif_receive+0x154>)
   20b74:	4798      	blx	r3
   20b76:	0003      	movs	r3, r0
   20b78:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   20b7a:	e07c      	b.n	20c76 <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   20b7c:	2317      	movs	r3, #23
   20b7e:	18fb      	adds	r3, r7, r3
   20b80:	22f4      	movs	r2, #244	; 0xf4
   20b82:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   20b84:	239e      	movs	r3, #158	; 0x9e
   20b86:	009a      	lsls	r2, r3, #2
   20b88:	4940      	ldr	r1, [pc, #256]	; (20c8c <hif_receive+0x158>)
   20b8a:	4b41      	ldr	r3, [pc, #260]	; (20c90 <hif_receive+0x15c>)
   20b8c:	0018      	movs	r0, r3
   20b8e:	4b41      	ldr	r3, [pc, #260]	; (20c94 <hif_receive+0x160>)
   20b90:	4798      	blx	r3
   20b92:	4b41      	ldr	r3, [pc, #260]	; (20c98 <hif_receive+0x164>)
   20b94:	0018      	movs	r0, r3
   20b96:	4b3f      	ldr	r3, [pc, #252]	; (20c94 <hif_receive+0x160>)
   20b98:	4798      	blx	r3
   20b9a:	4b40      	ldr	r3, [pc, #256]	; (20c9c <hif_receive+0x168>)
   20b9c:	0018      	movs	r0, r3
   20b9e:	4b3d      	ldr	r3, [pc, #244]	; (20c94 <hif_receive+0x160>)
   20ba0:	4798      	blx	r3
		goto ERR1;
   20ba2:	e068      	b.n	20c76 <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   20ba4:	1dbb      	adds	r3, r7, #6
   20ba6:	881a      	ldrh	r2, [r3, #0]
   20ba8:	4b3d      	ldr	r3, [pc, #244]	; (20ca0 <hif_receive+0x16c>)
   20baa:	68db      	ldr	r3, [r3, #12]
   20bac:	429a      	cmp	r2, r3
   20bae:	d917      	bls.n	20be0 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   20bb0:	2317      	movs	r3, #23
   20bb2:	18fb      	adds	r3, r7, r3
   20bb4:	22f4      	movs	r2, #244	; 0xf4
   20bb6:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   20bb8:	23a0      	movs	r3, #160	; 0xa0
   20bba:	009a      	lsls	r2, r3, #2
   20bbc:	4933      	ldr	r1, [pc, #204]	; (20c8c <hif_receive+0x158>)
   20bbe:	4b34      	ldr	r3, [pc, #208]	; (20c90 <hif_receive+0x15c>)
   20bc0:	0018      	movs	r0, r3
   20bc2:	4b34      	ldr	r3, [pc, #208]	; (20c94 <hif_receive+0x160>)
   20bc4:	4798      	blx	r3
   20bc6:	1dbb      	adds	r3, r7, #6
   20bc8:	8819      	ldrh	r1, [r3, #0]
   20bca:	4b35      	ldr	r3, [pc, #212]	; (20ca0 <hif_receive+0x16c>)
   20bcc:	68da      	ldr	r2, [r3, #12]
   20bce:	4b35      	ldr	r3, [pc, #212]	; (20ca4 <hif_receive+0x170>)
   20bd0:	0018      	movs	r0, r3
   20bd2:	4b30      	ldr	r3, [pc, #192]	; (20c94 <hif_receive+0x160>)
   20bd4:	4798      	blx	r3
   20bd6:	4b31      	ldr	r3, [pc, #196]	; (20c9c <hif_receive+0x168>)
   20bd8:	0018      	movs	r0, r3
   20bda:	4b2e      	ldr	r3, [pc, #184]	; (20c94 <hif_receive+0x160>)
   20bdc:	4798      	blx	r3
		goto ERR1;
   20bde:	e04a      	b.n	20c76 <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   20be0:	4b2f      	ldr	r3, [pc, #188]	; (20ca0 <hif_receive+0x16c>)
   20be2:	689a      	ldr	r2, [r3, #8]
   20be4:	68fb      	ldr	r3, [r7, #12]
   20be6:	429a      	cmp	r2, r3
   20be8:	d80a      	bhi.n	20c00 <hif_receive+0xcc>
   20bea:	1dbb      	adds	r3, r7, #6
   20bec:	881a      	ldrh	r2, [r3, #0]
   20bee:	68fb      	ldr	r3, [r7, #12]
   20bf0:	18d2      	adds	r2, r2, r3
   20bf2:	4b2b      	ldr	r3, [pc, #172]	; (20ca0 <hif_receive+0x16c>)
   20bf4:	6899      	ldr	r1, [r3, #8]
   20bf6:	4b2a      	ldr	r3, [pc, #168]	; (20ca0 <hif_receive+0x16c>)
   20bf8:	68db      	ldr	r3, [r3, #12]
   20bfa:	18cb      	adds	r3, r1, r3
   20bfc:	429a      	cmp	r2, r3
   20bfe:	d912      	bls.n	20c26 <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   20c00:	2317      	movs	r3, #23
   20c02:	18fb      	adds	r3, r7, r3
   20c04:	22f4      	movs	r2, #244	; 0xf4
   20c06:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   20c08:	4a27      	ldr	r2, [pc, #156]	; (20ca8 <hif_receive+0x174>)
   20c0a:	4920      	ldr	r1, [pc, #128]	; (20c8c <hif_receive+0x158>)
   20c0c:	4b20      	ldr	r3, [pc, #128]	; (20c90 <hif_receive+0x15c>)
   20c0e:	0018      	movs	r0, r3
   20c10:	4b20      	ldr	r3, [pc, #128]	; (20c94 <hif_receive+0x160>)
   20c12:	4798      	blx	r3
   20c14:	4b25      	ldr	r3, [pc, #148]	; (20cac <hif_receive+0x178>)
   20c16:	0018      	movs	r0, r3
   20c18:	4b1e      	ldr	r3, [pc, #120]	; (20c94 <hif_receive+0x160>)
   20c1a:	4798      	blx	r3
   20c1c:	4b1f      	ldr	r3, [pc, #124]	; (20c9c <hif_receive+0x168>)
   20c1e:	0018      	movs	r0, r3
   20c20:	4b1c      	ldr	r3, [pc, #112]	; (20c94 <hif_receive+0x160>)
   20c22:	4798      	blx	r3
		goto ERR1;
   20c24:	e027      	b.n	20c76 <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   20c26:	1dbb      	adds	r3, r7, #6
   20c28:	881a      	ldrh	r2, [r3, #0]
   20c2a:	2317      	movs	r3, #23
   20c2c:	18fc      	adds	r4, r7, r3
   20c2e:	68b9      	ldr	r1, [r7, #8]
   20c30:	68fb      	ldr	r3, [r7, #12]
   20c32:	0018      	movs	r0, r3
   20c34:	4b1e      	ldr	r3, [pc, #120]	; (20cb0 <hif_receive+0x17c>)
   20c36:	4798      	blx	r3
   20c38:	0003      	movs	r3, r0
   20c3a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   20c3c:	2317      	movs	r3, #23
   20c3e:	18fb      	adds	r3, r7, r3
   20c40:	781b      	ldrb	r3, [r3, #0]
   20c42:	b25b      	sxtb	r3, r3
   20c44:	2b00      	cmp	r3, #0
   20c46:	d115      	bne.n	20c74 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   20c48:	4b15      	ldr	r3, [pc, #84]	; (20ca0 <hif_receive+0x16c>)
   20c4a:	689a      	ldr	r2, [r3, #8]
   20c4c:	4b14      	ldr	r3, [pc, #80]	; (20ca0 <hif_receive+0x16c>)
   20c4e:	68db      	ldr	r3, [r3, #12]
   20c50:	18d2      	adds	r2, r2, r3
   20c52:	1dbb      	adds	r3, r7, #6
   20c54:	8819      	ldrh	r1, [r3, #0]
   20c56:	68fb      	ldr	r3, [r7, #12]
   20c58:	18cb      	adds	r3, r1, r3
   20c5a:	429a      	cmp	r2, r3
   20c5c:	d003      	beq.n	20c66 <hif_receive+0x132>
   20c5e:	1d7b      	adds	r3, r7, #5
   20c60:	781b      	ldrb	r3, [r3, #0]
   20c62:	2b00      	cmp	r3, #0
   20c64:	d007      	beq.n	20c76 <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   20c66:	2317      	movs	r3, #23
   20c68:	18fc      	adds	r4, r7, r3
   20c6a:	4b07      	ldr	r3, [pc, #28]	; (20c88 <hif_receive+0x154>)
   20c6c:	4798      	blx	r3
   20c6e:	0003      	movs	r3, r0
   20c70:	7023      	strb	r3, [r4, #0]
   20c72:	e000      	b.n	20c76 <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   20c74:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   20c76:	2317      	movs	r3, #23
   20c78:	18fb      	adds	r3, r7, r3
   20c7a:	781b      	ldrb	r3, [r3, #0]
   20c7c:	b25b      	sxtb	r3, r3
}
   20c7e:	0018      	movs	r0, r3
   20c80:	46bd      	mov	sp, r7
   20c82:	b007      	add	sp, #28
   20c84:	bd90      	pop	{r4, r7, pc}
   20c86:	46c0      	nop			; (mov r8, r8)
   20c88:	00020051 	.word	0x00020051
   20c8c:	000374f8 	.word	0x000374f8
   20c90:	000371d0 	.word	0x000371d0
   20c94:	0001d28d 	.word	0x0001d28d
   20c98:	000373fc 	.word	0x000373fc
   20c9c:	000371cc 	.word	0x000371cc
   20ca0:	200054e0 	.word	0x200054e0
   20ca4:	0003741c 	.word	0x0003741c
   20ca8:	00000286 	.word	0x00000286
   20cac:	00037464 	.word	0x00037464
   20cb0:	000220bd 	.word	0x000220bd

00020cb4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   20cb4:	b580      	push	{r7, lr}
   20cb6:	b084      	sub	sp, #16
   20cb8:	af00      	add	r7, sp, #0
   20cba:	0002      	movs	r2, r0
   20cbc:	6039      	str	r1, [r7, #0]
   20cbe:	1dfb      	adds	r3, r7, #7
   20cc0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   20cc2:	230f      	movs	r3, #15
   20cc4:	18fb      	adds	r3, r7, r3
   20cc6:	2200      	movs	r2, #0
   20cc8:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   20cca:	1dfb      	adds	r3, r7, #7
   20ccc:	781b      	ldrb	r3, [r3, #0]
   20cce:	2b07      	cmp	r3, #7
   20cd0:	d820      	bhi.n	20d14 <hif_register_cb+0x60>
   20cd2:	009a      	lsls	r2, r3, #2
   20cd4:	4b1e      	ldr	r3, [pc, #120]	; (20d50 <hif_register_cb+0x9c>)
   20cd6:	18d3      	adds	r3, r2, r3
   20cd8:	681b      	ldr	r3, [r3, #0]
   20cda:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   20cdc:	4b1d      	ldr	r3, [pc, #116]	; (20d54 <hif_register_cb+0xa0>)
   20cde:	683a      	ldr	r2, [r7, #0]
   20ce0:	615a      	str	r2, [r3, #20]
			break;
   20ce2:	e02d      	b.n	20d40 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   20ce4:	4b1b      	ldr	r3, [pc, #108]	; (20d54 <hif_register_cb+0xa0>)
   20ce6:	683a      	ldr	r2, [r7, #0]
   20ce8:	611a      	str	r2, [r3, #16]
			break;
   20cea:	e029      	b.n	20d40 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   20cec:	4b19      	ldr	r3, [pc, #100]	; (20d54 <hif_register_cb+0xa0>)
   20cee:	683a      	ldr	r2, [r7, #0]
   20cf0:	619a      	str	r2, [r3, #24]
			break;
   20cf2:	e025      	b.n	20d40 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   20cf4:	4b17      	ldr	r3, [pc, #92]	; (20d54 <hif_register_cb+0xa0>)
   20cf6:	683a      	ldr	r2, [r7, #0]
   20cf8:	621a      	str	r2, [r3, #32]
			break;
   20cfa:	e021      	b.n	20d40 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   20cfc:	4b15      	ldr	r3, [pc, #84]	; (20d54 <hif_register_cb+0xa0>)
   20cfe:	683a      	ldr	r2, [r7, #0]
   20d00:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   20d02:	e01d      	b.n	20d40 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   20d04:	4b13      	ldr	r3, [pc, #76]	; (20d54 <hif_register_cb+0xa0>)
   20d06:	683a      	ldr	r2, [r7, #0]
   20d08:	61da      	str	r2, [r3, #28]
			break;
   20d0a:	e019      	b.n	20d40 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   20d0c:	4b11      	ldr	r3, [pc, #68]	; (20d54 <hif_register_cb+0xa0>)
   20d0e:	683a      	ldr	r2, [r7, #0]
   20d10:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   20d12:	e015      	b.n	20d40 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   20d14:	4a10      	ldr	r2, [pc, #64]	; (20d58 <hif_register_cb+0xa4>)
   20d16:	4911      	ldr	r1, [pc, #68]	; (20d5c <hif_register_cb+0xa8>)
   20d18:	4b11      	ldr	r3, [pc, #68]	; (20d60 <hif_register_cb+0xac>)
   20d1a:	0018      	movs	r0, r3
   20d1c:	4b11      	ldr	r3, [pc, #68]	; (20d64 <hif_register_cb+0xb0>)
   20d1e:	4798      	blx	r3
   20d20:	1dfb      	adds	r3, r7, #7
   20d22:	781a      	ldrb	r2, [r3, #0]
   20d24:	4b10      	ldr	r3, [pc, #64]	; (20d68 <hif_register_cb+0xb4>)
   20d26:	0011      	movs	r1, r2
   20d28:	0018      	movs	r0, r3
   20d2a:	4b0e      	ldr	r3, [pc, #56]	; (20d64 <hif_register_cb+0xb0>)
   20d2c:	4798      	blx	r3
   20d2e:	4b0f      	ldr	r3, [pc, #60]	; (20d6c <hif_register_cb+0xb8>)
   20d30:	0018      	movs	r0, r3
   20d32:	4b0c      	ldr	r3, [pc, #48]	; (20d64 <hif_register_cb+0xb0>)
   20d34:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   20d36:	230f      	movs	r3, #15
   20d38:	18fb      	adds	r3, r7, r3
   20d3a:	22f4      	movs	r2, #244	; 0xf4
   20d3c:	701a      	strb	r2, [r3, #0]
			break;
   20d3e:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   20d40:	230f      	movs	r3, #15
   20d42:	18fb      	adds	r3, r7, r3
   20d44:	781b      	ldrb	r3, [r3, #0]
   20d46:	b25b      	sxtb	r3, r3
}
   20d48:	0018      	movs	r0, r3
   20d4a:	46bd      	mov	sp, r7
   20d4c:	b004      	add	sp, #16
   20d4e:	bd80      	pop	{r7, pc}
   20d50:	000374b4 	.word	0x000374b4
   20d54:	200054e0 	.word	0x200054e0
   20d58:	000002be 	.word	0x000002be
   20d5c:	00037504 	.word	0x00037504
   20d60:	000371d0 	.word	0x000371d0
   20d64:	0001d28d 	.word	0x0001d28d
   20d68:	000374a8 	.word	0x000374a8
   20d6c:	000371cc 	.word	0x000371cc

00020d70 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   20d70:	b590      	push	{r4, r7, lr}
   20d72:	b0af      	sub	sp, #188	; 0xbc
   20d74:	af02      	add	r7, sp, #8
   20d76:	603a      	str	r2, [r7, #0]
   20d78:	1dfb      	adds	r3, r7, #7
   20d7a:	1c02      	adds	r2, r0, #0
   20d7c:	701a      	strb	r2, [r3, #0]
   20d7e:	1d3b      	adds	r3, r7, #4
   20d80:	1c0a      	adds	r2, r1, #0
   20d82:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   20d84:	1dfb      	adds	r3, r7, #7
   20d86:	781b      	ldrb	r3, [r3, #0]
   20d88:	2b2c      	cmp	r3, #44	; 0x2c
   20d8a:	d116      	bne.n	20dba <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   20d8c:	23a4      	movs	r3, #164	; 0xa4
   20d8e:	18f9      	adds	r1, r7, r3
   20d90:	6838      	ldr	r0, [r7, #0]
   20d92:	2300      	movs	r3, #0
   20d94:	2204      	movs	r2, #4
   20d96:	4cca      	ldr	r4, [pc, #808]	; (210c0 <m2m_wifi_cb+0x350>)
   20d98:	47a0      	blx	r4
   20d9a:	1e03      	subs	r3, r0, #0
   20d9c:	d000      	beq.n	20da0 <m2m_wifi_cb+0x30>
   20d9e:	e1b4      	b.n	2110a <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   20da0:	4bc8      	ldr	r3, [pc, #800]	; (210c4 <m2m_wifi_cb+0x354>)
   20da2:	681b      	ldr	r3, [r3, #0]
   20da4:	2b00      	cmp	r3, #0
   20da6:	d100      	bne.n	20daa <m2m_wifi_cb+0x3a>
   20da8:	e1af      	b.n	2110a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   20daa:	4bc6      	ldr	r3, [pc, #792]	; (210c4 <m2m_wifi_cb+0x354>)
   20dac:	681b      	ldr	r3, [r3, #0]
   20dae:	22a4      	movs	r2, #164	; 0xa4
   20db0:	18ba      	adds	r2, r7, r2
   20db2:	0011      	movs	r1, r2
   20db4:	202c      	movs	r0, #44	; 0x2c
   20db6:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   20db8:	e1a7      	b.n	2110a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   20dba:	1dfb      	adds	r3, r7, #7
   20dbc:	781b      	ldrb	r3, [r3, #0]
   20dbe:	2b1b      	cmp	r3, #27
   20dc0:	d116      	bne.n	20df0 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   20dc2:	239c      	movs	r3, #156	; 0x9c
   20dc4:	18f9      	adds	r1, r7, r3
   20dc6:	6838      	ldr	r0, [r7, #0]
   20dc8:	2300      	movs	r3, #0
   20dca:	2208      	movs	r2, #8
   20dcc:	4cbc      	ldr	r4, [pc, #752]	; (210c0 <m2m_wifi_cb+0x350>)
   20dce:	47a0      	blx	r4
   20dd0:	1e03      	subs	r3, r0, #0
   20dd2:	d000      	beq.n	20dd6 <m2m_wifi_cb+0x66>
   20dd4:	e199      	b.n	2110a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20dd6:	4bbb      	ldr	r3, [pc, #748]	; (210c4 <m2m_wifi_cb+0x354>)
   20dd8:	681b      	ldr	r3, [r3, #0]
   20dda:	2b00      	cmp	r3, #0
   20ddc:	d100      	bne.n	20de0 <m2m_wifi_cb+0x70>
   20dde:	e194      	b.n	2110a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   20de0:	4bb8      	ldr	r3, [pc, #736]	; (210c4 <m2m_wifi_cb+0x354>)
   20de2:	681b      	ldr	r3, [r3, #0]
   20de4:	229c      	movs	r2, #156	; 0x9c
   20de6:	18ba      	adds	r2, r7, r2
   20de8:	0011      	movs	r1, r2
   20dea:	201b      	movs	r0, #27
   20dec:	4798      	blx	r3
}
   20dee:	e18c      	b.n	2110a <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   20df0:	1dfb      	adds	r3, r7, #7
   20df2:	781b      	ldrb	r3, [r3, #0]
   20df4:	2b06      	cmp	r3, #6
   20df6:	d116      	bne.n	20e26 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   20df8:	230c      	movs	r3, #12
   20dfa:	18f9      	adds	r1, r7, r3
   20dfc:	6838      	ldr	r0, [r7, #0]
   20dfe:	2301      	movs	r3, #1
   20e00:	2230      	movs	r2, #48	; 0x30
   20e02:	4caf      	ldr	r4, [pc, #700]	; (210c0 <m2m_wifi_cb+0x350>)
   20e04:	47a0      	blx	r4
   20e06:	1e03      	subs	r3, r0, #0
   20e08:	d000      	beq.n	20e0c <m2m_wifi_cb+0x9c>
   20e0a:	e17e      	b.n	2110a <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   20e0c:	4bad      	ldr	r3, [pc, #692]	; (210c4 <m2m_wifi_cb+0x354>)
   20e0e:	681b      	ldr	r3, [r3, #0]
   20e10:	2b00      	cmp	r3, #0
   20e12:	d100      	bne.n	20e16 <m2m_wifi_cb+0xa6>
   20e14:	e179      	b.n	2110a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   20e16:	4bab      	ldr	r3, [pc, #684]	; (210c4 <m2m_wifi_cb+0x354>)
   20e18:	681b      	ldr	r3, [r3, #0]
   20e1a:	220c      	movs	r2, #12
   20e1c:	18ba      	adds	r2, r7, r2
   20e1e:	0011      	movs	r1, r2
   20e20:	2006      	movs	r0, #6
   20e22:	4798      	blx	r3
}
   20e24:	e171      	b.n	2110a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   20e26:	1dfb      	adds	r3, r7, #7
   20e28:	781b      	ldrb	r3, [r3, #0]
   20e2a:	2b0e      	cmp	r3, #14
   20e2c:	d100      	bne.n	20e30 <m2m_wifi_cb+0xc0>
   20e2e:	e16c      	b.n	2110a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   20e30:	1dfb      	adds	r3, r7, #7
   20e32:	781b      	ldrb	r3, [r3, #0]
   20e34:	2b32      	cmp	r3, #50	; 0x32
   20e36:	d116      	bne.n	20e66 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   20e38:	2384      	movs	r3, #132	; 0x84
   20e3a:	18f9      	adds	r1, r7, r3
   20e3c:	6838      	ldr	r0, [r7, #0]
   20e3e:	2300      	movs	r3, #0
   20e40:	2218      	movs	r2, #24
   20e42:	4c9f      	ldr	r4, [pc, #636]	; (210c0 <m2m_wifi_cb+0x350>)
   20e44:	47a0      	blx	r4
   20e46:	1e03      	subs	r3, r0, #0
   20e48:	d000      	beq.n	20e4c <m2m_wifi_cb+0xdc>
   20e4a:	e15e      	b.n	2110a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20e4c:	4b9d      	ldr	r3, [pc, #628]	; (210c4 <m2m_wifi_cb+0x354>)
   20e4e:	681b      	ldr	r3, [r3, #0]
   20e50:	2b00      	cmp	r3, #0
   20e52:	d100      	bne.n	20e56 <m2m_wifi_cb+0xe6>
   20e54:	e159      	b.n	2110a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   20e56:	4b9b      	ldr	r3, [pc, #620]	; (210c4 <m2m_wifi_cb+0x354>)
   20e58:	681b      	ldr	r3, [r3, #0]
   20e5a:	2284      	movs	r2, #132	; 0x84
   20e5c:	18ba      	adds	r2, r7, r2
   20e5e:	0011      	movs	r1, r2
   20e60:	2032      	movs	r0, #50	; 0x32
   20e62:	4798      	blx	r3
}
   20e64:	e151      	b.n	2110a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   20e66:	1dfb      	adds	r3, r7, #7
   20e68:	781b      	ldrb	r3, [r3, #0]
   20e6a:	2b2f      	cmp	r3, #47	; 0x2f
   20e6c:	d11d      	bne.n	20eaa <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   20e6e:	230c      	movs	r3, #12
   20e70:	18fb      	adds	r3, r7, r3
   20e72:	2264      	movs	r2, #100	; 0x64
   20e74:	2100      	movs	r1, #0
   20e76:	0018      	movs	r0, r3
   20e78:	4b93      	ldr	r3, [pc, #588]	; (210c8 <m2m_wifi_cb+0x358>)
   20e7a:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   20e7c:	230c      	movs	r3, #12
   20e7e:	18f9      	adds	r1, r7, r3
   20e80:	6838      	ldr	r0, [r7, #0]
   20e82:	2300      	movs	r3, #0
   20e84:	2264      	movs	r2, #100	; 0x64
   20e86:	4c8e      	ldr	r4, [pc, #568]	; (210c0 <m2m_wifi_cb+0x350>)
   20e88:	47a0      	blx	r4
   20e8a:	1e03      	subs	r3, r0, #0
   20e8c:	d000      	beq.n	20e90 <m2m_wifi_cb+0x120>
   20e8e:	e13c      	b.n	2110a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20e90:	4b8c      	ldr	r3, [pc, #560]	; (210c4 <m2m_wifi_cb+0x354>)
   20e92:	681b      	ldr	r3, [r3, #0]
   20e94:	2b00      	cmp	r3, #0
   20e96:	d100      	bne.n	20e9a <m2m_wifi_cb+0x12a>
   20e98:	e137      	b.n	2110a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   20e9a:	4b8a      	ldr	r3, [pc, #552]	; (210c4 <m2m_wifi_cb+0x354>)
   20e9c:	681b      	ldr	r3, [r3, #0]
   20e9e:	220c      	movs	r2, #12
   20ea0:	18ba      	adds	r2, r7, r2
   20ea2:	0011      	movs	r1, r2
   20ea4:	202f      	movs	r0, #47	; 0x2f
   20ea6:	4798      	blx	r3
}
   20ea8:	e12f      	b.n	2110a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   20eaa:	1dfb      	adds	r3, r7, #7
   20eac:	781b      	ldrb	r3, [r3, #0]
   20eae:	2b34      	cmp	r3, #52	; 0x34
   20eb0:	d137      	bne.n	20f22 <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   20eb2:	2380      	movs	r3, #128	; 0x80
   20eb4:	18f9      	adds	r1, r7, r3
   20eb6:	6838      	ldr	r0, [r7, #0]
   20eb8:	2300      	movs	r3, #0
   20eba:	2204      	movs	r2, #4
   20ebc:	4c80      	ldr	r4, [pc, #512]	; (210c0 <m2m_wifi_cb+0x350>)
   20ebe:	47a0      	blx	r4
   20ec0:	1e03      	subs	r3, r0, #0
   20ec2:	d000      	beq.n	20ec6 <m2m_wifi_cb+0x156>
   20ec4:	e121      	b.n	2110a <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   20ec6:	4b81      	ldr	r3, [pc, #516]	; (210cc <m2m_wifi_cb+0x35c>)
   20ec8:	0018      	movs	r0, r3
   20eca:	4b81      	ldr	r3, [pc, #516]	; (210d0 <m2m_wifi_cb+0x360>)
   20ecc:	4798      	blx	r3
   20ece:	2380      	movs	r3, #128	; 0x80
   20ed0:	18fb      	adds	r3, r7, r3
   20ed2:	681b      	ldr	r3, [r3, #0]
   20ed4:	0e1b      	lsrs	r3, r3, #24
   20ed6:	b2db      	uxtb	r3, r3
   20ed8:	0019      	movs	r1, r3
   20eda:	2380      	movs	r3, #128	; 0x80
   20edc:	18fb      	adds	r3, r7, r3
   20ede:	681b      	ldr	r3, [r3, #0]
   20ee0:	0c1b      	lsrs	r3, r3, #16
   20ee2:	b2db      	uxtb	r3, r3
   20ee4:	001a      	movs	r2, r3
   20ee6:	2380      	movs	r3, #128	; 0x80
   20ee8:	18fb      	adds	r3, r7, r3
   20eea:	681b      	ldr	r3, [r3, #0]
   20eec:	0a1b      	lsrs	r3, r3, #8
   20eee:	b2db      	uxtb	r3, r3
   20ef0:	001c      	movs	r4, r3
   20ef2:	2380      	movs	r3, #128	; 0x80
   20ef4:	18fb      	adds	r3, r7, r3
   20ef6:	681b      	ldr	r3, [r3, #0]
   20ef8:	b2db      	uxtb	r3, r3
   20efa:	4876      	ldr	r0, [pc, #472]	; (210d4 <m2m_wifi_cb+0x364>)
   20efc:	9300      	str	r3, [sp, #0]
   20efe:	0023      	movs	r3, r4
   20f00:	4c73      	ldr	r4, [pc, #460]	; (210d0 <m2m_wifi_cb+0x360>)
   20f02:	47a0      	blx	r4
   20f04:	4b74      	ldr	r3, [pc, #464]	; (210d8 <m2m_wifi_cb+0x368>)
   20f06:	0018      	movs	r0, r3
   20f08:	4b71      	ldr	r3, [pc, #452]	; (210d0 <m2m_wifi_cb+0x360>)
   20f0a:	4798      	blx	r3
			if (gpfAppWifiCb)
   20f0c:	4b6d      	ldr	r3, [pc, #436]	; (210c4 <m2m_wifi_cb+0x354>)
   20f0e:	681b      	ldr	r3, [r3, #0]
   20f10:	2b00      	cmp	r3, #0
   20f12:	d100      	bne.n	20f16 <m2m_wifi_cb+0x1a6>
   20f14:	e0f9      	b.n	2110a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   20f16:	4b6b      	ldr	r3, [pc, #428]	; (210c4 <m2m_wifi_cb+0x354>)
   20f18:	681b      	ldr	r3, [r3, #0]
   20f1a:	2100      	movs	r1, #0
   20f1c:	2034      	movs	r0, #52	; 0x34
   20f1e:	4798      	blx	r3
}
   20f20:	e0f3      	b.n	2110a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   20f22:	1dfb      	adds	r3, r7, #7
   20f24:	781b      	ldrb	r3, [r3, #0]
   20f26:	2b11      	cmp	r3, #17
   20f28:	d11e      	bne.n	20f68 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   20f2a:	4b6c      	ldr	r3, [pc, #432]	; (210dc <m2m_wifi_cb+0x36c>)
   20f2c:	2200      	movs	r2, #0
   20f2e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   20f30:	237c      	movs	r3, #124	; 0x7c
   20f32:	18f9      	adds	r1, r7, r3
   20f34:	6838      	ldr	r0, [r7, #0]
   20f36:	2300      	movs	r3, #0
   20f38:	2204      	movs	r2, #4
   20f3a:	4c61      	ldr	r4, [pc, #388]	; (210c0 <m2m_wifi_cb+0x350>)
   20f3c:	47a0      	blx	r4
   20f3e:	1e03      	subs	r3, r0, #0
   20f40:	d000      	beq.n	20f44 <m2m_wifi_cb+0x1d4>
   20f42:	e0e2      	b.n	2110a <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   20f44:	237c      	movs	r3, #124	; 0x7c
   20f46:	18fb      	adds	r3, r7, r3
   20f48:	781a      	ldrb	r2, [r3, #0]
   20f4a:	4b65      	ldr	r3, [pc, #404]	; (210e0 <m2m_wifi_cb+0x370>)
   20f4c:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   20f4e:	4b5d      	ldr	r3, [pc, #372]	; (210c4 <m2m_wifi_cb+0x354>)
   20f50:	681b      	ldr	r3, [r3, #0]
   20f52:	2b00      	cmp	r3, #0
   20f54:	d100      	bne.n	20f58 <m2m_wifi_cb+0x1e8>
   20f56:	e0d8      	b.n	2110a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   20f58:	4b5a      	ldr	r3, [pc, #360]	; (210c4 <m2m_wifi_cb+0x354>)
   20f5a:	681b      	ldr	r3, [r3, #0]
   20f5c:	227c      	movs	r2, #124	; 0x7c
   20f5e:	18ba      	adds	r2, r7, r2
   20f60:	0011      	movs	r1, r2
   20f62:	2011      	movs	r0, #17
   20f64:	4798      	blx	r3
}
   20f66:	e0d0      	b.n	2110a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   20f68:	1dfb      	adds	r3, r7, #7
   20f6a:	781b      	ldrb	r3, [r3, #0]
   20f6c:	2b13      	cmp	r3, #19
   20f6e:	d116      	bne.n	20f9e <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   20f70:	230c      	movs	r3, #12
   20f72:	18f9      	adds	r1, r7, r3
   20f74:	6838      	ldr	r0, [r7, #0]
   20f76:	2300      	movs	r3, #0
   20f78:	222c      	movs	r2, #44	; 0x2c
   20f7a:	4c51      	ldr	r4, [pc, #324]	; (210c0 <m2m_wifi_cb+0x350>)
   20f7c:	47a0      	blx	r4
   20f7e:	1e03      	subs	r3, r0, #0
   20f80:	d000      	beq.n	20f84 <m2m_wifi_cb+0x214>
   20f82:	e0c2      	b.n	2110a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20f84:	4b4f      	ldr	r3, [pc, #316]	; (210c4 <m2m_wifi_cb+0x354>)
   20f86:	681b      	ldr	r3, [r3, #0]
   20f88:	2b00      	cmp	r3, #0
   20f8a:	d100      	bne.n	20f8e <m2m_wifi_cb+0x21e>
   20f8c:	e0bd      	b.n	2110a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   20f8e:	4b4d      	ldr	r3, [pc, #308]	; (210c4 <m2m_wifi_cb+0x354>)
   20f90:	681b      	ldr	r3, [r3, #0]
   20f92:	220c      	movs	r2, #12
   20f94:	18ba      	adds	r2, r7, r2
   20f96:	0011      	movs	r1, r2
   20f98:	2013      	movs	r0, #19
   20f9a:	4798      	blx	r3
}
   20f9c:	e0b5      	b.n	2110a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   20f9e:	1dfb      	adds	r3, r7, #7
   20fa0:	781b      	ldrb	r3, [r3, #0]
   20fa2:	2b04      	cmp	r3, #4
   20fa4:	d116      	bne.n	20fd4 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   20fa6:	23a8      	movs	r3, #168	; 0xa8
   20fa8:	18f9      	adds	r1, r7, r3
   20faa:	6838      	ldr	r0, [r7, #0]
   20fac:	2300      	movs	r3, #0
   20fae:	2204      	movs	r2, #4
   20fb0:	4c43      	ldr	r4, [pc, #268]	; (210c0 <m2m_wifi_cb+0x350>)
   20fb2:	47a0      	blx	r4
   20fb4:	1e03      	subs	r3, r0, #0
   20fb6:	d000      	beq.n	20fba <m2m_wifi_cb+0x24a>
   20fb8:	e0a7      	b.n	2110a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20fba:	4b42      	ldr	r3, [pc, #264]	; (210c4 <m2m_wifi_cb+0x354>)
   20fbc:	681b      	ldr	r3, [r3, #0]
   20fbe:	2b00      	cmp	r3, #0
   20fc0:	d100      	bne.n	20fc4 <m2m_wifi_cb+0x254>
   20fc2:	e0a2      	b.n	2110a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   20fc4:	4b3f      	ldr	r3, [pc, #252]	; (210c4 <m2m_wifi_cb+0x354>)
   20fc6:	681b      	ldr	r3, [r3, #0]
   20fc8:	22a8      	movs	r2, #168	; 0xa8
   20fca:	18ba      	adds	r2, r7, r2
   20fcc:	0011      	movs	r1, r2
   20fce:	2004      	movs	r0, #4
   20fd0:	4798      	blx	r3
}
   20fd2:	e09a      	b.n	2110a <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   20fd4:	1dfb      	adds	r3, r7, #7
   20fd6:	781b      	ldrb	r3, [r3, #0]
   20fd8:	2b65      	cmp	r3, #101	; 0x65
   20fda:	d116      	bne.n	2100a <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   20fdc:	23a8      	movs	r3, #168	; 0xa8
   20fde:	18f9      	adds	r1, r7, r3
   20fe0:	6838      	ldr	r0, [r7, #0]
   20fe2:	2300      	movs	r3, #0
   20fe4:	2204      	movs	r2, #4
   20fe6:	4c36      	ldr	r4, [pc, #216]	; (210c0 <m2m_wifi_cb+0x350>)
   20fe8:	47a0      	blx	r4
   20fea:	1e03      	subs	r3, r0, #0
   20fec:	d000      	beq.n	20ff0 <m2m_wifi_cb+0x280>
   20fee:	e08c      	b.n	2110a <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20ff0:	4b34      	ldr	r3, [pc, #208]	; (210c4 <m2m_wifi_cb+0x354>)
   20ff2:	681b      	ldr	r3, [r3, #0]
   20ff4:	2b00      	cmp	r3, #0
   20ff6:	d100      	bne.n	20ffa <m2m_wifi_cb+0x28a>
   20ff8:	e087      	b.n	2110a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   20ffa:	4b32      	ldr	r3, [pc, #200]	; (210c4 <m2m_wifi_cb+0x354>)
   20ffc:	681b      	ldr	r3, [r3, #0]
   20ffe:	22a8      	movs	r2, #168	; 0xa8
   21000:	18ba      	adds	r2, r7, r2
   21002:	0011      	movs	r1, r2
   21004:	2065      	movs	r0, #101	; 0x65
   21006:	4798      	blx	r3
}
   21008:	e07f      	b.n	2110a <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   2100a:	1dfb      	adds	r3, r7, #7
   2100c:	781b      	ldrb	r3, [r3, #0]
   2100e:	2b09      	cmp	r3, #9
   21010:	d116      	bne.n	21040 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   21012:	230c      	movs	r3, #12
   21014:	18f9      	adds	r1, r7, r3
   21016:	6838      	ldr	r0, [r7, #0]
   21018:	2301      	movs	r3, #1
   2101a:	2264      	movs	r2, #100	; 0x64
   2101c:	4c28      	ldr	r4, [pc, #160]	; (210c0 <m2m_wifi_cb+0x350>)
   2101e:	47a0      	blx	r4
   21020:	1e03      	subs	r3, r0, #0
   21022:	d000      	beq.n	21026 <m2m_wifi_cb+0x2b6>
   21024:	e071      	b.n	2110a <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21026:	4b27      	ldr	r3, [pc, #156]	; (210c4 <m2m_wifi_cb+0x354>)
   21028:	681b      	ldr	r3, [r3, #0]
   2102a:	2b00      	cmp	r3, #0
   2102c:	d100      	bne.n	21030 <m2m_wifi_cb+0x2c0>
   2102e:	e06c      	b.n	2110a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   21030:	4b24      	ldr	r3, [pc, #144]	; (210c4 <m2m_wifi_cb+0x354>)
   21032:	681b      	ldr	r3, [r3, #0]
   21034:	220c      	movs	r2, #12
   21036:	18ba      	adds	r2, r7, r2
   21038:	0011      	movs	r1, r2
   2103a:	2009      	movs	r0, #9
   2103c:	4798      	blx	r3
}
   2103e:	e064      	b.n	2110a <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   21040:	1dfb      	adds	r3, r7, #7
   21042:	781b      	ldrb	r3, [r3, #0]
   21044:	2b2a      	cmp	r3, #42	; 0x2a
   21046:	d114      	bne.n	21072 <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   21048:	2378      	movs	r3, #120	; 0x78
   2104a:	18f9      	adds	r1, r7, r3
   2104c:	6838      	ldr	r0, [r7, #0]
   2104e:	2301      	movs	r3, #1
   21050:	2204      	movs	r2, #4
   21052:	4c1b      	ldr	r4, [pc, #108]	; (210c0 <m2m_wifi_cb+0x350>)
   21054:	47a0      	blx	r4
   21056:	1e03      	subs	r3, r0, #0
   21058:	d157      	bne.n	2110a <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   2105a:	4b1a      	ldr	r3, [pc, #104]	; (210c4 <m2m_wifi_cb+0x354>)
   2105c:	681b      	ldr	r3, [r3, #0]
   2105e:	2b00      	cmp	r3, #0
   21060:	d053      	beq.n	2110a <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   21062:	4b18      	ldr	r3, [pc, #96]	; (210c4 <m2m_wifi_cb+0x354>)
   21064:	681b      	ldr	r3, [r3, #0]
   21066:	2278      	movs	r2, #120	; 0x78
   21068:	18ba      	adds	r2, r7, r2
   2106a:	0011      	movs	r1, r2
   2106c:	202a      	movs	r0, #42	; 0x2a
   2106e:	4798      	blx	r3
}
   21070:	e04b      	b.n	2110a <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   21072:	1dfb      	adds	r3, r7, #7
   21074:	781b      	ldrb	r3, [r3, #0]
   21076:	2b20      	cmp	r3, #32
   21078:	d134      	bne.n	210e4 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   2107a:	2370      	movs	r3, #112	; 0x70
   2107c:	18f9      	adds	r1, r7, r3
   2107e:	6838      	ldr	r0, [r7, #0]
   21080:	2300      	movs	r3, #0
   21082:	2208      	movs	r2, #8
   21084:	4c0e      	ldr	r4, [pc, #56]	; (210c0 <m2m_wifi_cb+0x350>)
   21086:	47a0      	blx	r4
   21088:	1e03      	subs	r3, r0, #0
   2108a:	d13e      	bne.n	2110a <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   2108c:	683b      	ldr	r3, [r7, #0]
   2108e:	3308      	adds	r3, #8
   21090:	0018      	movs	r0, r3
   21092:	2370      	movs	r3, #112	; 0x70
   21094:	18fb      	adds	r3, r7, r3
   21096:	6819      	ldr	r1, [r3, #0]
   21098:	2370      	movs	r3, #112	; 0x70
   2109a:	18fb      	adds	r3, r7, r3
   2109c:	889a      	ldrh	r2, [r3, #4]
   2109e:	2301      	movs	r3, #1
   210a0:	4c07      	ldr	r4, [pc, #28]	; (210c0 <m2m_wifi_cb+0x350>)
   210a2:	47a0      	blx	r4
   210a4:	1e03      	subs	r3, r0, #0
   210a6:	d130      	bne.n	2110a <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   210a8:	4b06      	ldr	r3, [pc, #24]	; (210c4 <m2m_wifi_cb+0x354>)
   210aa:	681b      	ldr	r3, [r3, #0]
   210ac:	2b00      	cmp	r3, #0
   210ae:	d02c      	beq.n	2110a <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   210b0:	4b04      	ldr	r3, [pc, #16]	; (210c4 <m2m_wifi_cb+0x354>)
   210b2:	681b      	ldr	r3, [r3, #0]
   210b4:	2270      	movs	r2, #112	; 0x70
   210b6:	18ba      	adds	r2, r7, r2
   210b8:	0011      	movs	r1, r2
   210ba:	2020      	movs	r0, #32
   210bc:	4798      	blx	r3
}
   210be:	e024      	b.n	2110a <m2m_wifi_cb+0x39a>
   210c0:	00020b35 	.word	0x00020b35
   210c4:	20003e00 	.word	0x20003e00
   210c8:	0001ffb9 	.word	0x0001ffb9
   210cc:	00037514 	.word	0x00037514
   210d0:	0001d28d 	.word	0x0001d28d
   210d4:	00037520 	.word	0x00037520
   210d8:	00037540 	.word	0x00037540
   210dc:	20003dfd 	.word	0x20003dfd
   210e0:	20003dfc 	.word	0x20003dfc
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   210e4:	2324      	movs	r3, #36	; 0x24
   210e6:	33ff      	adds	r3, #255	; 0xff
   210e8:	001a      	movs	r2, r3
   210ea:	490a      	ldr	r1, [pc, #40]	; (21114 <m2m_wifi_cb+0x3a4>)
   210ec:	4b0a      	ldr	r3, [pc, #40]	; (21118 <m2m_wifi_cb+0x3a8>)
   210ee:	0018      	movs	r0, r3
   210f0:	4b0a      	ldr	r3, [pc, #40]	; (2111c <m2m_wifi_cb+0x3ac>)
   210f2:	4798      	blx	r3
   210f4:	1dfb      	adds	r3, r7, #7
   210f6:	781a      	ldrb	r2, [r3, #0]
   210f8:	4b09      	ldr	r3, [pc, #36]	; (21120 <m2m_wifi_cb+0x3b0>)
   210fa:	0011      	movs	r1, r2
   210fc:	0018      	movs	r0, r3
   210fe:	4b07      	ldr	r3, [pc, #28]	; (2111c <m2m_wifi_cb+0x3ac>)
   21100:	4798      	blx	r3
   21102:	4b08      	ldr	r3, [pc, #32]	; (21124 <m2m_wifi_cb+0x3b4>)
   21104:	0018      	movs	r0, r3
   21106:	4b05      	ldr	r3, [pc, #20]	; (2111c <m2m_wifi_cb+0x3ac>)
   21108:	4798      	blx	r3
}
   2110a:	46c0      	nop			; (mov r8, r8)
   2110c:	46bd      	mov	sp, r7
   2110e:	b02d      	add	sp, #180	; 0xb4
   21110:	bd90      	pop	{r4, r7, pc}
   21112:	46c0      	nop			; (mov r8, r8)
   21114:	000378e0 	.word	0x000378e0
   21118:	00037544 	.word	0x00037544
   2111c:	0001d28d 	.word	0x0001d28d
   21120:	00037558 	.word	0x00037558
   21124:	00037540 	.word	0x00037540

00021128 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   21128:	b590      	push	{r4, r7, lr}
   2112a:	b091      	sub	sp, #68	; 0x44
   2112c:	af02      	add	r7, sp, #8
   2112e:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   21130:	2337      	movs	r3, #55	; 0x37
   21132:	18fb      	adds	r3, r7, r3
   21134:	2200      	movs	r2, #0
   21136:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   21138:	230b      	movs	r3, #11
   2113a:	18fb      	adds	r3, r7, r3
   2113c:	2201      	movs	r2, #1
   2113e:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   21140:	687b      	ldr	r3, [r7, #4]
   21142:	2b00      	cmp	r3, #0
   21144:	d104      	bne.n	21150 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   21146:	2337      	movs	r3, #55	; 0x37
   21148:	18fb      	adds	r3, r7, r3
   2114a:	22f4      	movs	r2, #244	; 0xf4
   2114c:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   2114e:	e0b3      	b.n	212b8 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   21150:	687b      	ldr	r3, [r7, #4]
   21152:	681a      	ldr	r2, [r3, #0]
   21154:	4b5c      	ldr	r3, [pc, #368]	; (212c8 <m2m_wifi_init+0x1a0>)
   21156:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   21158:	4b5c      	ldr	r3, [pc, #368]	; (212cc <m2m_wifi_init+0x1a4>)
   2115a:	2200      	movs	r2, #0
   2115c:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   2115e:	2337      	movs	r3, #55	; 0x37
   21160:	18fc      	adds	r4, r7, r3
   21162:	230b      	movs	r3, #11
   21164:	18fb      	adds	r3, r7, r3
   21166:	0018      	movs	r0, r3
   21168:	4b59      	ldr	r3, [pc, #356]	; (212d0 <m2m_wifi_init+0x1a8>)
   2116a:	4798      	blx	r3
   2116c:	0003      	movs	r3, r0
   2116e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   21170:	2337      	movs	r3, #55	; 0x37
   21172:	18fb      	adds	r3, r7, r3
   21174:	781b      	ldrb	r3, [r3, #0]
   21176:	b25b      	sxtb	r3, r3
   21178:	2b00      	cmp	r3, #0
   2117a:	d000      	beq.n	2117e <m2m_wifi_init+0x56>
   2117c:	e099      	b.n	212b2 <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   2117e:	2337      	movs	r3, #55	; 0x37
   21180:	18fc      	adds	r4, r7, r3
   21182:	2000      	movs	r0, #0
   21184:	4b53      	ldr	r3, [pc, #332]	; (212d4 <m2m_wifi_init+0x1ac>)
   21186:	4798      	blx	r3
   21188:	0003      	movs	r3, r0
   2118a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   2118c:	2337      	movs	r3, #55	; 0x37
   2118e:	18fb      	adds	r3, r7, r3
   21190:	781b      	ldrb	r3, [r3, #0]
   21192:	b25b      	sxtb	r3, r3
   21194:	2b00      	cmp	r3, #0
   21196:	d000      	beq.n	2119a <m2m_wifi_init+0x72>
   21198:	e086      	b.n	212a8 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   2119a:	4b4f      	ldr	r3, [pc, #316]	; (212d8 <m2m_wifi_init+0x1b0>)
   2119c:	0019      	movs	r1, r3
   2119e:	2001      	movs	r0, #1
   211a0:	4b4e      	ldr	r3, [pc, #312]	; (212dc <m2m_wifi_init+0x1b4>)
   211a2:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   211a4:	2337      	movs	r3, #55	; 0x37
   211a6:	18fc      	adds	r4, r7, r3
   211a8:	230c      	movs	r3, #12
   211aa:	18fb      	adds	r3, r7, r3
   211ac:	0018      	movs	r0, r3
   211ae:	4b4c      	ldr	r3, [pc, #304]	; (212e0 <m2m_wifi_init+0x1b8>)
   211b0:	4798      	blx	r3
   211b2:	0003      	movs	r3, r0
   211b4:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   211b6:	4b4b      	ldr	r3, [pc, #300]	; (212e4 <m2m_wifi_init+0x1bc>)
   211b8:	0018      	movs	r0, r3
   211ba:	4b4b      	ldr	r3, [pc, #300]	; (212e8 <m2m_wifi_init+0x1c0>)
   211bc:	4798      	blx	r3
   211be:	230c      	movs	r3, #12
   211c0:	18fb      	adds	r3, r7, r3
   211c2:	791b      	ldrb	r3, [r3, #4]
   211c4:	0019      	movs	r1, r3
   211c6:	230c      	movs	r3, #12
   211c8:	18fb      	adds	r3, r7, r3
   211ca:	795b      	ldrb	r3, [r3, #5]
   211cc:	001a      	movs	r2, r3
   211ce:	230c      	movs	r3, #12
   211d0:	18fb      	adds	r3, r7, r3
   211d2:	799b      	ldrb	r3, [r3, #6]
   211d4:	001c      	movs	r4, r3
   211d6:	230c      	movs	r3, #12
   211d8:	18fb      	adds	r3, r7, r3
   211da:	8c1b      	ldrh	r3, [r3, #32]
   211dc:	4843      	ldr	r0, [pc, #268]	; (212ec <m2m_wifi_init+0x1c4>)
   211de:	9300      	str	r3, [sp, #0]
   211e0:	0023      	movs	r3, r4
   211e2:	4c41      	ldr	r4, [pc, #260]	; (212e8 <m2m_wifi_init+0x1c0>)
   211e4:	47a0      	blx	r4
   211e6:	4b42      	ldr	r3, [pc, #264]	; (212f0 <m2m_wifi_init+0x1c8>)
   211e8:	0018      	movs	r0, r3
   211ea:	4b3f      	ldr	r3, [pc, #252]	; (212e8 <m2m_wifi_init+0x1c0>)
   211ec:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   211ee:	4b3d      	ldr	r3, [pc, #244]	; (212e4 <m2m_wifi_init+0x1bc>)
   211f0:	0018      	movs	r0, r3
   211f2:	4b3d      	ldr	r3, [pc, #244]	; (212e8 <m2m_wifi_init+0x1c0>)
   211f4:	4798      	blx	r3
   211f6:	230c      	movs	r3, #12
   211f8:	18fb      	adds	r3, r7, r3
   211fa:	3316      	adds	r3, #22
   211fc:	001a      	movs	r2, r3
   211fe:	230c      	movs	r3, #12
   21200:	18fb      	adds	r3, r7, r3
   21202:	330a      	adds	r3, #10
   21204:	0019      	movs	r1, r3
   21206:	4b3b      	ldr	r3, [pc, #236]	; (212f4 <m2m_wifi_init+0x1cc>)
   21208:	0018      	movs	r0, r3
   2120a:	4b37      	ldr	r3, [pc, #220]	; (212e8 <m2m_wifi_init+0x1c0>)
   2120c:	4798      	blx	r3
   2120e:	4b38      	ldr	r3, [pc, #224]	; (212f0 <m2m_wifi_init+0x1c8>)
   21210:	0018      	movs	r0, r3
   21212:	4b35      	ldr	r3, [pc, #212]	; (212e8 <m2m_wifi_init+0x1c0>)
   21214:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   21216:	4b33      	ldr	r3, [pc, #204]	; (212e4 <m2m_wifi_init+0x1bc>)
   21218:	0018      	movs	r0, r3
   2121a:	4b33      	ldr	r3, [pc, #204]	; (212e8 <m2m_wifi_init+0x1c0>)
   2121c:	4798      	blx	r3
   2121e:	230c      	movs	r3, #12
   21220:	18fb      	adds	r3, r7, r3
   21222:	79db      	ldrb	r3, [r3, #7]
   21224:	0019      	movs	r1, r3
   21226:	230c      	movs	r3, #12
   21228:	18fb      	adds	r3, r7, r3
   2122a:	7a1b      	ldrb	r3, [r3, #8]
   2122c:	001a      	movs	r2, r3
   2122e:	230c      	movs	r3, #12
   21230:	18fb      	adds	r3, r7, r3
   21232:	7a5b      	ldrb	r3, [r3, #9]
   21234:	4830      	ldr	r0, [pc, #192]	; (212f8 <m2m_wifi_init+0x1d0>)
   21236:	4c2c      	ldr	r4, [pc, #176]	; (212e8 <m2m_wifi_init+0x1c0>)
   21238:	47a0      	blx	r4
   2123a:	4b2d      	ldr	r3, [pc, #180]	; (212f0 <m2m_wifi_init+0x1c8>)
   2123c:	0018      	movs	r0, r3
   2123e:	4b2a      	ldr	r3, [pc, #168]	; (212e8 <m2m_wifi_init+0x1c0>)
   21240:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   21242:	4b28      	ldr	r3, [pc, #160]	; (212e4 <m2m_wifi_init+0x1bc>)
   21244:	0018      	movs	r0, r3
   21246:	4b28      	ldr	r3, [pc, #160]	; (212e8 <m2m_wifi_init+0x1c0>)
   21248:	4798      	blx	r3
   2124a:	482c      	ldr	r0, [pc, #176]	; (212fc <m2m_wifi_init+0x1d4>)
   2124c:	2304      	movs	r3, #4
   2124e:	2205      	movs	r2, #5
   21250:	2113      	movs	r1, #19
   21252:	4c25      	ldr	r4, [pc, #148]	; (212e8 <m2m_wifi_init+0x1c0>)
   21254:	47a0      	blx	r4
   21256:	4b26      	ldr	r3, [pc, #152]	; (212f0 <m2m_wifi_init+0x1c8>)
   21258:	0018      	movs	r0, r3
   2125a:	4b23      	ldr	r3, [pc, #140]	; (212e8 <m2m_wifi_init+0x1c0>)
   2125c:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   2125e:	4b21      	ldr	r3, [pc, #132]	; (212e4 <m2m_wifi_init+0x1bc>)
   21260:	0018      	movs	r0, r3
   21262:	4b21      	ldr	r3, [pc, #132]	; (212e8 <m2m_wifi_init+0x1c0>)
   21264:	4798      	blx	r3
   21266:	4a26      	ldr	r2, [pc, #152]	; (21300 <m2m_wifi_init+0x1d8>)
   21268:	4926      	ldr	r1, [pc, #152]	; (21304 <m2m_wifi_init+0x1dc>)
   2126a:	4b27      	ldr	r3, [pc, #156]	; (21308 <m2m_wifi_init+0x1e0>)
   2126c:	0018      	movs	r0, r3
   2126e:	4b1e      	ldr	r3, [pc, #120]	; (212e8 <m2m_wifi_init+0x1c0>)
   21270:	4798      	blx	r3
   21272:	4b1f      	ldr	r3, [pc, #124]	; (212f0 <m2m_wifi_init+0x1c8>)
   21274:	0018      	movs	r0, r3
   21276:	4b1c      	ldr	r3, [pc, #112]	; (212e8 <m2m_wifi_init+0x1c0>)
   21278:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   2127a:	2337      	movs	r3, #55	; 0x37
   2127c:	18fb      	adds	r3, r7, r3
   2127e:	781b      	ldrb	r3, [r3, #0]
   21280:	b25b      	sxtb	r3, r3
   21282:	330d      	adds	r3, #13
   21284:	d117      	bne.n	212b6 <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   21286:	23e8      	movs	r3, #232	; 0xe8
   21288:	33ff      	adds	r3, #255	; 0xff
   2128a:	001a      	movs	r2, r3
   2128c:	491f      	ldr	r1, [pc, #124]	; (2130c <m2m_wifi_init+0x1e4>)
   2128e:	4b20      	ldr	r3, [pc, #128]	; (21310 <m2m_wifi_init+0x1e8>)
   21290:	0018      	movs	r0, r3
   21292:	4b15      	ldr	r3, [pc, #84]	; (212e8 <m2m_wifi_init+0x1c0>)
   21294:	4798      	blx	r3
   21296:	4b1f      	ldr	r3, [pc, #124]	; (21314 <m2m_wifi_init+0x1ec>)
   21298:	0018      	movs	r0, r3
   2129a:	4b13      	ldr	r3, [pc, #76]	; (212e8 <m2m_wifi_init+0x1c0>)
   2129c:	4798      	blx	r3
   2129e:	4b14      	ldr	r3, [pc, #80]	; (212f0 <m2m_wifi_init+0x1c8>)
   212a0:	0018      	movs	r0, r3
   212a2:	4b11      	ldr	r3, [pc, #68]	; (212e8 <m2m_wifi_init+0x1c0>)
   212a4:	4798      	blx	r3
	}

	goto _EXIT0;
   212a6:	e006      	b.n	212b6 <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   212a8:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   212aa:	2000      	movs	r0, #0
   212ac:	4b1a      	ldr	r3, [pc, #104]	; (21318 <m2m_wifi_init+0x1f0>)
   212ae:	4798      	blx	r3
   212b0:	e002      	b.n	212b8 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   212b2:	46c0      	nop			; (mov r8, r8)
   212b4:	e000      	b.n	212b8 <m2m_wifi_init+0x190>
	goto _EXIT0;
   212b6:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   212b8:	2337      	movs	r3, #55	; 0x37
   212ba:	18fb      	adds	r3, r7, r3
   212bc:	781b      	ldrb	r3, [r3, #0]
   212be:	b25b      	sxtb	r3, r3
}
   212c0:	0018      	movs	r0, r3
   212c2:	46bd      	mov	sp, r7
   212c4:	b00f      	add	sp, #60	; 0x3c
   212c6:	bd90      	pop	{r4, r7, pc}
   212c8:	20003e00 	.word	0x20003e00
   212cc:	20003dfd 	.word	0x20003dfd
   212d0:	0002244d 	.word	0x0002244d
   212d4:	000201d1 	.word	0x000201d1
   212d8:	00020d71 	.word	0x00020d71
   212dc:	00020cb5 	.word	0x00020cb5
   212e0:	00022281 	.word	0x00022281
   212e4:	00037514 	.word	0x00037514
   212e8:	0001d28d 	.word	0x0001d28d
   212ec:	000376b8 	.word	0x000376b8
   212f0:	00037540 	.word	0x00037540
   212f4:	000376e0 	.word	0x000376e0
   212f8:	000376fc 	.word	0x000376fc
   212fc:	00037720 	.word	0x00037720
   21300:	00037738 	.word	0x00037738
   21304:	00037744 	.word	0x00037744
   21308:	00037750 	.word	0x00037750
   2130c:	000378ec 	.word	0x000378ec
   21310:	00037544 	.word	0x00037544
   21314:	00037768 	.word	0x00037768
   21318:	000225dd 	.word	0x000225dd

0002131c <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   2131c:	b580      	push	{r7, lr}
   2131e:	b082      	sub	sp, #8
   21320:	af00      	add	r7, sp, #0
   21322:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   21324:	4b03      	ldr	r3, [pc, #12]	; (21334 <m2m_wifi_handle_events+0x18>)
   21326:	4798      	blx	r3
   21328:	0003      	movs	r3, r0
}
   2132a:	0018      	movs	r0, r3
   2132c:	46bd      	mov	sp, r7
   2132e:	b002      	add	sp, #8
   21330:	bd80      	pop	{r7, pc}
   21332:	46c0      	nop			; (mov r8, r8)
   21334:	00020a95 	.word	0x00020a95

00021338 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   21338:	b590      	push	{r4, r7, lr}
   2133a:	b087      	sub	sp, #28
   2133c:	af02      	add	r7, sp, #8
   2133e:	60f8      	str	r0, [r7, #12]
   21340:	0008      	movs	r0, r1
   21342:	0011      	movs	r1, r2
   21344:	607b      	str	r3, [r7, #4]
   21346:	230b      	movs	r3, #11
   21348:	18fb      	adds	r3, r7, r3
   2134a:	1c02      	adds	r2, r0, #0
   2134c:	701a      	strb	r2, [r3, #0]
   2134e:	230a      	movs	r3, #10
   21350:	18fb      	adds	r3, r7, r3
   21352:	1c0a      	adds	r2, r1, #0
   21354:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   21356:	687c      	ldr	r4, [r7, #4]
   21358:	230a      	movs	r3, #10
   2135a:	18fb      	adds	r3, r7, r3
   2135c:	781a      	ldrb	r2, [r3, #0]
   2135e:	230b      	movs	r3, #11
   21360:	18fb      	adds	r3, r7, r3
   21362:	7819      	ldrb	r1, [r3, #0]
   21364:	68f8      	ldr	r0, [r7, #12]
   21366:	2300      	movs	r3, #0
   21368:	9301      	str	r3, [sp, #4]
   2136a:	2320      	movs	r3, #32
   2136c:	18fb      	adds	r3, r7, r3
   2136e:	881b      	ldrh	r3, [r3, #0]
   21370:	9300      	str	r3, [sp, #0]
   21372:	0023      	movs	r3, r4
   21374:	4c03      	ldr	r4, [pc, #12]	; (21384 <m2m_wifi_connect+0x4c>)
   21376:	47a0      	blx	r4
   21378:	0003      	movs	r3, r0
}
   2137a:	0018      	movs	r0, r3
   2137c:	46bd      	mov	sp, r7
   2137e:	b005      	add	sp, #20
   21380:	bd90      	pop	{r4, r7, pc}
   21382:	46c0      	nop			; (mov r8, r8)
   21384:	00021389 	.word	0x00021389

00021388 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   21388:	b5b0      	push	{r4, r5, r7, lr}
   2138a:	b0aa      	sub	sp, #168	; 0xa8
   2138c:	af04      	add	r7, sp, #16
   2138e:	60f8      	str	r0, [r7, #12]
   21390:	0008      	movs	r0, r1
   21392:	0011      	movs	r1, r2
   21394:	607b      	str	r3, [r7, #4]
   21396:	230b      	movs	r3, #11
   21398:	18fb      	adds	r3, r7, r3
   2139a:	1c02      	adds	r2, r0, #0
   2139c:	701a      	strb	r2, [r3, #0]
   2139e:	230a      	movs	r3, #10
   213a0:	18fb      	adds	r3, r7, r3
   213a2:	1c0a      	adds	r2, r1, #0
   213a4:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   213a6:	2397      	movs	r3, #151	; 0x97
   213a8:	18fb      	adds	r3, r7, r3
   213aa:	2200      	movs	r2, #0
   213ac:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   213ae:	230a      	movs	r3, #10
   213b0:	18fb      	adds	r3, r7, r3
   213b2:	781b      	ldrb	r3, [r3, #0]
   213b4:	2b01      	cmp	r3, #1
   213b6:	d100      	bne.n	213ba <m2m_wifi_connect_sc+0x32>
   213b8:	e085      	b.n	214c6 <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   213ba:	687b      	ldr	r3, [r7, #4]
   213bc:	2b00      	cmp	r3, #0
   213be:	d112      	bne.n	213e6 <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   213c0:	4ad8      	ldr	r2, [pc, #864]	; (21724 <m2m_wifi_connect_sc+0x39c>)
   213c2:	49d9      	ldr	r1, [pc, #868]	; (21728 <m2m_wifi_connect_sc+0x3a0>)
   213c4:	4bd9      	ldr	r3, [pc, #868]	; (2172c <m2m_wifi_connect_sc+0x3a4>)
   213c6:	0018      	movs	r0, r3
   213c8:	4bd9      	ldr	r3, [pc, #868]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   213ca:	4798      	blx	r3
   213cc:	4bd9      	ldr	r3, [pc, #868]	; (21734 <m2m_wifi_connect_sc+0x3ac>)
   213ce:	0018      	movs	r0, r3
   213d0:	4bd7      	ldr	r3, [pc, #860]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   213d2:	4798      	blx	r3
   213d4:	4bd8      	ldr	r3, [pc, #864]	; (21738 <m2m_wifi_connect_sc+0x3b0>)
   213d6:	0018      	movs	r0, r3
   213d8:	4bd5      	ldr	r3, [pc, #852]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   213da:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   213dc:	2397      	movs	r3, #151	; 0x97
   213de:	18fb      	adds	r3, r7, r3
   213e0:	22f4      	movs	r2, #244	; 0xf4
   213e2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   213e4:	e1f9      	b.n	217da <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   213e6:	230a      	movs	r3, #10
   213e8:	18fb      	adds	r3, r7, r3
   213ea:	781b      	ldrb	r3, [r3, #0]
   213ec:	2b02      	cmp	r3, #2
   213ee:	d16a      	bne.n	214c6 <m2m_wifi_connect_sc+0x13e>
   213f0:	687b      	ldr	r3, [r7, #4]
   213f2:	0018      	movs	r0, r3
   213f4:	4bd1      	ldr	r3, [pc, #836]	; (2173c <m2m_wifi_connect_sc+0x3b4>)
   213f6:	4798      	blx	r3
   213f8:	0003      	movs	r3, r0
   213fa:	2b40      	cmp	r3, #64	; 0x40
   213fc:	d163      	bne.n	214c6 <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   213fe:	2396      	movs	r3, #150	; 0x96
   21400:	18fb      	adds	r3, r7, r3
   21402:	2200      	movs	r2, #0
   21404:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   21406:	687b      	ldr	r3, [r7, #4]
   21408:	2290      	movs	r2, #144	; 0x90
   2140a:	18ba      	adds	r2, r7, r2
   2140c:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   2140e:	e055      	b.n	214bc <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   21410:	2396      	movs	r3, #150	; 0x96
   21412:	18fb      	adds	r3, r7, r3
   21414:	781b      	ldrb	r3, [r3, #0]
   21416:	2290      	movs	r2, #144	; 0x90
   21418:	18ba      	adds	r2, r7, r2
   2141a:	6812      	ldr	r2, [r2, #0]
   2141c:	18d3      	adds	r3, r2, r3
   2141e:	781b      	ldrb	r3, [r3, #0]
   21420:	2b2f      	cmp	r3, #47	; 0x2f
   21422:	d931      	bls.n	21488 <m2m_wifi_connect_sc+0x100>
   21424:	2396      	movs	r3, #150	; 0x96
   21426:	18fb      	adds	r3, r7, r3
   21428:	781b      	ldrb	r3, [r3, #0]
   2142a:	2290      	movs	r2, #144	; 0x90
   2142c:	18ba      	adds	r2, r7, r2
   2142e:	6812      	ldr	r2, [r2, #0]
   21430:	18d3      	adds	r3, r2, r3
   21432:	781b      	ldrb	r3, [r3, #0]
   21434:	2b39      	cmp	r3, #57	; 0x39
   21436:	d909      	bls.n	2144c <m2m_wifi_connect_sc+0xc4>
   21438:	2396      	movs	r3, #150	; 0x96
   2143a:	18fb      	adds	r3, r7, r3
   2143c:	781b      	ldrb	r3, [r3, #0]
   2143e:	2290      	movs	r2, #144	; 0x90
   21440:	18ba      	adds	r2, r7, r2
   21442:	6812      	ldr	r2, [r2, #0]
   21444:	18d3      	adds	r3, r2, r3
   21446:	781b      	ldrb	r3, [r3, #0]
   21448:	2b40      	cmp	r3, #64	; 0x40
   2144a:	d91d      	bls.n	21488 <m2m_wifi_connect_sc+0x100>
   2144c:	2396      	movs	r3, #150	; 0x96
   2144e:	18fb      	adds	r3, r7, r3
   21450:	781b      	ldrb	r3, [r3, #0]
   21452:	2290      	movs	r2, #144	; 0x90
   21454:	18ba      	adds	r2, r7, r2
   21456:	6812      	ldr	r2, [r2, #0]
   21458:	18d3      	adds	r3, r2, r3
   2145a:	781b      	ldrb	r3, [r3, #0]
   2145c:	2b46      	cmp	r3, #70	; 0x46
   2145e:	d909      	bls.n	21474 <m2m_wifi_connect_sc+0xec>
   21460:	2396      	movs	r3, #150	; 0x96
   21462:	18fb      	adds	r3, r7, r3
   21464:	781b      	ldrb	r3, [r3, #0]
   21466:	2290      	movs	r2, #144	; 0x90
   21468:	18ba      	adds	r2, r7, r2
   2146a:	6812      	ldr	r2, [r2, #0]
   2146c:	18d3      	adds	r3, r2, r3
   2146e:	781b      	ldrb	r3, [r3, #0]
   21470:	2b60      	cmp	r3, #96	; 0x60
   21472:	d909      	bls.n	21488 <m2m_wifi_connect_sc+0x100>
   21474:	2396      	movs	r3, #150	; 0x96
   21476:	18fb      	adds	r3, r7, r3
   21478:	781b      	ldrb	r3, [r3, #0]
   2147a:	2290      	movs	r2, #144	; 0x90
   2147c:	18ba      	adds	r2, r7, r2
   2147e:	6812      	ldr	r2, [r2, #0]
   21480:	18d3      	adds	r3, r2, r3
   21482:	781b      	ldrb	r3, [r3, #0]
   21484:	2b66      	cmp	r3, #102	; 0x66
   21486:	d912      	bls.n	214ae <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   21488:	4aad      	ldr	r2, [pc, #692]	; (21740 <m2m_wifi_connect_sc+0x3b8>)
   2148a:	49a7      	ldr	r1, [pc, #668]	; (21728 <m2m_wifi_connect_sc+0x3a0>)
   2148c:	4ba7      	ldr	r3, [pc, #668]	; (2172c <m2m_wifi_connect_sc+0x3a4>)
   2148e:	0018      	movs	r0, r3
   21490:	4ba7      	ldr	r3, [pc, #668]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   21492:	4798      	blx	r3
   21494:	4bab      	ldr	r3, [pc, #684]	; (21744 <m2m_wifi_connect_sc+0x3bc>)
   21496:	0018      	movs	r0, r3
   21498:	4ba5      	ldr	r3, [pc, #660]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   2149a:	4798      	blx	r3
   2149c:	4ba6      	ldr	r3, [pc, #664]	; (21738 <m2m_wifi_connect_sc+0x3b0>)
   2149e:	0018      	movs	r0, r3
   214a0:	4ba3      	ldr	r3, [pc, #652]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   214a2:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   214a4:	2397      	movs	r3, #151	; 0x97
   214a6:	18fb      	adds	r3, r7, r3
   214a8:	22f4      	movs	r2, #244	; 0xf4
   214aa:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   214ac:	e195      	b.n	217da <m2m_wifi_connect_sc+0x452>
				}
				i++;
   214ae:	2396      	movs	r3, #150	; 0x96
   214b0:	18fb      	adds	r3, r7, r3
   214b2:	781a      	ldrb	r2, [r3, #0]
   214b4:	2396      	movs	r3, #150	; 0x96
   214b6:	18fb      	adds	r3, r7, r3
   214b8:	3201      	adds	r2, #1
   214ba:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   214bc:	2396      	movs	r3, #150	; 0x96
   214be:	18fb      	adds	r3, r7, r3
   214c0:	781b      	ldrb	r3, [r3, #0]
   214c2:	2b3f      	cmp	r3, #63	; 0x3f
   214c4:	d9a4      	bls.n	21410 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   214c6:	230b      	movs	r3, #11
   214c8:	18fb      	adds	r3, r7, r3
   214ca:	781b      	ldrb	r3, [r3, #0]
   214cc:	2b00      	cmp	r3, #0
   214ce:	d004      	beq.n	214da <m2m_wifi_connect_sc+0x152>
   214d0:	230b      	movs	r3, #11
   214d2:	18fb      	adds	r3, r7, r3
   214d4:	781b      	ldrb	r3, [r3, #0]
   214d6:	2b20      	cmp	r3, #32
   214d8:	d913      	bls.n	21502 <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   214da:	238c      	movs	r3, #140	; 0x8c
   214dc:	009a      	lsls	r2, r3, #2
   214de:	4992      	ldr	r1, [pc, #584]	; (21728 <m2m_wifi_connect_sc+0x3a0>)
   214e0:	4b92      	ldr	r3, [pc, #584]	; (2172c <m2m_wifi_connect_sc+0x3a4>)
   214e2:	0018      	movs	r0, r3
   214e4:	4b92      	ldr	r3, [pc, #584]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   214e6:	4798      	blx	r3
   214e8:	4b97      	ldr	r3, [pc, #604]	; (21748 <m2m_wifi_connect_sc+0x3c0>)
   214ea:	0018      	movs	r0, r3
   214ec:	4b90      	ldr	r3, [pc, #576]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   214ee:	4798      	blx	r3
   214f0:	4b91      	ldr	r3, [pc, #580]	; (21738 <m2m_wifi_connect_sc+0x3b0>)
   214f2:	0018      	movs	r0, r3
   214f4:	4b8e      	ldr	r3, [pc, #568]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   214f6:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   214f8:	2397      	movs	r3, #151	; 0x97
   214fa:	18fb      	adds	r3, r7, r3
   214fc:	22f4      	movs	r2, #244	; 0xf4
   214fe:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   21500:	e16b      	b.n	217da <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   21502:	23a8      	movs	r3, #168	; 0xa8
   21504:	18fb      	adds	r3, r7, r3
   21506:	881b      	ldrh	r3, [r3, #0]
   21508:	2b00      	cmp	r3, #0
   2150a:	d004      	beq.n	21516 <m2m_wifi_connect_sc+0x18e>
   2150c:	23a8      	movs	r3, #168	; 0xa8
   2150e:	18fb      	adds	r3, r7, r3
   21510:	881b      	ldrh	r3, [r3, #0]
   21512:	2b0e      	cmp	r3, #14
   21514:	d917      	bls.n	21546 <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   21516:	23a8      	movs	r3, #168	; 0xa8
   21518:	18fb      	adds	r3, r7, r3
   2151a:	881b      	ldrh	r3, [r3, #0]
   2151c:	2bff      	cmp	r3, #255	; 0xff
   2151e:	d012      	beq.n	21546 <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   21520:	4a8a      	ldr	r2, [pc, #552]	; (2174c <m2m_wifi_connect_sc+0x3c4>)
   21522:	4981      	ldr	r1, [pc, #516]	; (21728 <m2m_wifi_connect_sc+0x3a0>)
   21524:	4b81      	ldr	r3, [pc, #516]	; (2172c <m2m_wifi_connect_sc+0x3a4>)
   21526:	0018      	movs	r0, r3
   21528:	4b81      	ldr	r3, [pc, #516]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   2152a:	4798      	blx	r3
   2152c:	4b88      	ldr	r3, [pc, #544]	; (21750 <m2m_wifi_connect_sc+0x3c8>)
   2152e:	0018      	movs	r0, r3
   21530:	4b7f      	ldr	r3, [pc, #508]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   21532:	4798      	blx	r3
   21534:	4b80      	ldr	r3, [pc, #512]	; (21738 <m2m_wifi_connect_sc+0x3b0>)
   21536:	0018      	movs	r0, r3
   21538:	4b7d      	ldr	r3, [pc, #500]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   2153a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2153c:	2397      	movs	r3, #151	; 0x97
   2153e:	18fb      	adds	r3, r7, r3
   21540:	22f4      	movs	r2, #244	; 0xf4
   21542:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21544:	e149      	b.n	217da <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   21546:	230b      	movs	r3, #11
   21548:	18fb      	adds	r3, r7, r3
   2154a:	781a      	ldrb	r2, [r3, #0]
   2154c:	68f9      	ldr	r1, [r7, #12]
   2154e:	2314      	movs	r3, #20
   21550:	18fb      	adds	r3, r7, r3
   21552:	3346      	adds	r3, #70	; 0x46
   21554:	0018      	movs	r0, r3
   21556:	4b7f      	ldr	r3, [pc, #508]	; (21754 <m2m_wifi_connect_sc+0x3cc>)
   21558:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   2155a:	230b      	movs	r3, #11
   2155c:	18fb      	adds	r3, r7, r3
   2155e:	781b      	ldrb	r3, [r3, #0]
   21560:	2214      	movs	r2, #20
   21562:	18ba      	adds	r2, r7, r2
   21564:	2146      	movs	r1, #70	; 0x46
   21566:	18d3      	adds	r3, r2, r3
   21568:	185b      	adds	r3, r3, r1
   2156a:	2200      	movs	r2, #0
   2156c:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   2156e:	2314      	movs	r3, #20
   21570:	18fb      	adds	r3, r7, r3
   21572:	22a8      	movs	r2, #168	; 0xa8
   21574:	18ba      	adds	r2, r7, r2
   21576:	2144      	movs	r1, #68	; 0x44
   21578:	8812      	ldrh	r2, [r2, #0]
   2157a:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   2157c:	23ac      	movs	r3, #172	; 0xac
   2157e:	18fb      	adds	r3, r7, r3
   21580:	781b      	ldrb	r3, [r3, #0]
   21582:	1e5a      	subs	r2, r3, #1
   21584:	4193      	sbcs	r3, r2
   21586:	b2db      	uxtb	r3, r3
   21588:	0019      	movs	r1, r3
   2158a:	2314      	movs	r3, #20
   2158c:	18fb      	adds	r3, r7, r3
   2158e:	2267      	movs	r2, #103	; 0x67
   21590:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   21592:	2314      	movs	r3, #20
   21594:	18fb      	adds	r3, r7, r3
   21596:	228c      	movs	r2, #140	; 0x8c
   21598:	18ba      	adds	r2, r7, r2
   2159a:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   2159c:	238c      	movs	r3, #140	; 0x8c
   2159e:	18fb      	adds	r3, r7, r3
   215a0:	681b      	ldr	r3, [r3, #0]
   215a2:	220a      	movs	r2, #10
   215a4:	18ba      	adds	r2, r7, r2
   215a6:	2141      	movs	r1, #65	; 0x41
   215a8:	7812      	ldrb	r2, [r2, #0]
   215aa:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   215ac:	230a      	movs	r3, #10
   215ae:	18fb      	adds	r3, r7, r3
   215b0:	781b      	ldrb	r3, [r3, #0]
   215b2:	2b03      	cmp	r3, #3
   215b4:	d000      	beq.n	215b8 <m2m_wifi_connect_sc+0x230>
   215b6:	e07d      	b.n	216b4 <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   215b8:	687b      	ldr	r3, [r7, #4]
   215ba:	2288      	movs	r2, #136	; 0x88
   215bc:	18ba      	adds	r2, r7, r2
   215be:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   215c0:	238c      	movs	r3, #140	; 0x8c
   215c2:	18fb      	adds	r3, r7, r3
   215c4:	681b      	ldr	r3, [r3, #0]
   215c6:	2284      	movs	r2, #132	; 0x84
   215c8:	18ba      	adds	r2, r7, r2
   215ca:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   215cc:	2388      	movs	r3, #136	; 0x88
   215ce:	18fb      	adds	r3, r7, r3
   215d0:	681b      	ldr	r3, [r3, #0]
   215d2:	781b      	ldrb	r3, [r3, #0]
   215d4:	3b01      	subs	r3, #1
   215d6:	b2da      	uxtb	r2, r3
   215d8:	2384      	movs	r3, #132	; 0x84
   215da:	18fb      	adds	r3, r7, r3
   215dc:	681b      	ldr	r3, [r3, #0]
   215de:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   215e0:	2384      	movs	r3, #132	; 0x84
   215e2:	18fb      	adds	r3, r7, r3
   215e4:	681b      	ldr	r3, [r3, #0]
   215e6:	781b      	ldrb	r3, [r3, #0]
   215e8:	2b03      	cmp	r3, #3
   215ea:	d919      	bls.n	21620 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   215ec:	2394      	movs	r3, #148	; 0x94
   215ee:	009a      	lsls	r2, r3, #2
   215f0:	494d      	ldr	r1, [pc, #308]	; (21728 <m2m_wifi_connect_sc+0x3a0>)
   215f2:	4b4e      	ldr	r3, [pc, #312]	; (2172c <m2m_wifi_connect_sc+0x3a4>)
   215f4:	0018      	movs	r0, r3
   215f6:	4b4e      	ldr	r3, [pc, #312]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   215f8:	4798      	blx	r3
   215fa:	2384      	movs	r3, #132	; 0x84
   215fc:	18fb      	adds	r3, r7, r3
   215fe:	681b      	ldr	r3, [r3, #0]
   21600:	781b      	ldrb	r3, [r3, #0]
   21602:	001a      	movs	r2, r3
   21604:	4b54      	ldr	r3, [pc, #336]	; (21758 <m2m_wifi_connect_sc+0x3d0>)
   21606:	0011      	movs	r1, r2
   21608:	0018      	movs	r0, r3
   2160a:	4b49      	ldr	r3, [pc, #292]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   2160c:	4798      	blx	r3
   2160e:	4b4a      	ldr	r3, [pc, #296]	; (21738 <m2m_wifi_connect_sc+0x3b0>)
   21610:	0018      	movs	r0, r3
   21612:	4b47      	ldr	r3, [pc, #284]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   21614:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21616:	2397      	movs	r3, #151	; 0x97
   21618:	18fb      	adds	r3, r7, r3
   2161a:	22f4      	movs	r2, #244	; 0xf4
   2161c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2161e:	e0dc      	b.n	217da <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   21620:	2388      	movs	r3, #136	; 0x88
   21622:	18fb      	adds	r3, r7, r3
   21624:	681b      	ldr	r3, [r3, #0]
   21626:	785b      	ldrb	r3, [r3, #1]
   21628:	3b01      	subs	r3, #1
   2162a:	b2da      	uxtb	r2, r3
   2162c:	2384      	movs	r3, #132	; 0x84
   2162e:	18fb      	adds	r3, r7, r3
   21630:	681b      	ldr	r3, [r3, #0]
   21632:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   21634:	2384      	movs	r3, #132	; 0x84
   21636:	18fb      	adds	r3, r7, r3
   21638:	681b      	ldr	r3, [r3, #0]
   2163a:	785b      	ldrb	r3, [r3, #1]
   2163c:	2b0a      	cmp	r3, #10
   2163e:	d01e      	beq.n	2167e <m2m_wifi_connect_sc+0x2f6>
   21640:	2384      	movs	r3, #132	; 0x84
   21642:	18fb      	adds	r3, r7, r3
   21644:	681b      	ldr	r3, [r3, #0]
   21646:	785b      	ldrb	r3, [r3, #1]
   21648:	2b1a      	cmp	r3, #26
   2164a:	d018      	beq.n	2167e <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   2164c:	4a43      	ldr	r2, [pc, #268]	; (2175c <m2m_wifi_connect_sc+0x3d4>)
   2164e:	4936      	ldr	r1, [pc, #216]	; (21728 <m2m_wifi_connect_sc+0x3a0>)
   21650:	4b36      	ldr	r3, [pc, #216]	; (2172c <m2m_wifi_connect_sc+0x3a4>)
   21652:	0018      	movs	r0, r3
   21654:	4b36      	ldr	r3, [pc, #216]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   21656:	4798      	blx	r3
   21658:	2384      	movs	r3, #132	; 0x84
   2165a:	18fb      	adds	r3, r7, r3
   2165c:	681b      	ldr	r3, [r3, #0]
   2165e:	785b      	ldrb	r3, [r3, #1]
   21660:	001a      	movs	r2, r3
   21662:	4b3f      	ldr	r3, [pc, #252]	; (21760 <m2m_wifi_connect_sc+0x3d8>)
   21664:	0011      	movs	r1, r2
   21666:	0018      	movs	r0, r3
   21668:	4b31      	ldr	r3, [pc, #196]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   2166a:	4798      	blx	r3
   2166c:	4b32      	ldr	r3, [pc, #200]	; (21738 <m2m_wifi_connect_sc+0x3b0>)
   2166e:	0018      	movs	r0, r3
   21670:	4b2f      	ldr	r3, [pc, #188]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   21672:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21674:	2397      	movs	r3, #151	; 0x97
   21676:	18fb      	adds	r3, r7, r3
   21678:	22f4      	movs	r2, #244	; 0xf4
   2167a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2167c:	e0ad      	b.n	217da <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   2167e:	2384      	movs	r3, #132	; 0x84
   21680:	18fb      	adds	r3, r7, r3
   21682:	681b      	ldr	r3, [r3, #0]
   21684:	1c98      	adds	r0, r3, #2
   21686:	2388      	movs	r3, #136	; 0x88
   21688:	18fb      	adds	r3, r7, r3
   2168a:	681b      	ldr	r3, [r3, #0]
   2168c:	1c99      	adds	r1, r3, #2
   2168e:	2388      	movs	r3, #136	; 0x88
   21690:	18fb      	adds	r3, r7, r3
   21692:	681b      	ldr	r3, [r3, #0]
   21694:	785b      	ldrb	r3, [r3, #1]
   21696:	001a      	movs	r2, r3
   21698:	4b2e      	ldr	r3, [pc, #184]	; (21754 <m2m_wifi_connect_sc+0x3cc>)
   2169a:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   2169c:	2388      	movs	r3, #136	; 0x88
   2169e:	18fb      	adds	r3, r7, r3
   216a0:	681b      	ldr	r3, [r3, #0]
   216a2:	785b      	ldrb	r3, [r3, #1]
   216a4:	001a      	movs	r2, r3
   216a6:	2384      	movs	r3, #132	; 0x84
   216a8:	18fb      	adds	r3, r7, r3
   216aa:	681b      	ldr	r3, [r3, #0]
   216ac:	189b      	adds	r3, r3, r2
   216ae:	2200      	movs	r2, #0
   216b0:	709a      	strb	r2, [r3, #2]
   216b2:	e081      	b.n	217b8 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   216b4:	230a      	movs	r3, #10
   216b6:	18fb      	adds	r3, r7, r3
   216b8:	781b      	ldrb	r3, [r3, #0]
   216ba:	2b02      	cmp	r3, #2
   216bc:	d156      	bne.n	2176c <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   216be:	2382      	movs	r3, #130	; 0x82
   216c0:	18fc      	adds	r4, r7, r3
   216c2:	687b      	ldr	r3, [r7, #4]
   216c4:	0018      	movs	r0, r3
   216c6:	4b1d      	ldr	r3, [pc, #116]	; (2173c <m2m_wifi_connect_sc+0x3b4>)
   216c8:	4798      	blx	r3
   216ca:	0003      	movs	r3, r0
   216cc:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   216ce:	2382      	movs	r3, #130	; 0x82
   216d0:	18fb      	adds	r3, r7, r3
   216d2:	881b      	ldrh	r3, [r3, #0]
   216d4:	2b00      	cmp	r3, #0
   216d6:	d004      	beq.n	216e2 <m2m_wifi_connect_sc+0x35a>
   216d8:	2382      	movs	r3, #130	; 0x82
   216da:	18fb      	adds	r3, r7, r3
   216dc:	881b      	ldrh	r3, [r3, #0]
   216de:	2b40      	cmp	r3, #64	; 0x40
   216e0:	d912      	bls.n	21708 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   216e2:	4a20      	ldr	r2, [pc, #128]	; (21764 <m2m_wifi_connect_sc+0x3dc>)
   216e4:	4910      	ldr	r1, [pc, #64]	; (21728 <m2m_wifi_connect_sc+0x3a0>)
   216e6:	4b11      	ldr	r3, [pc, #68]	; (2172c <m2m_wifi_connect_sc+0x3a4>)
   216e8:	0018      	movs	r0, r3
   216ea:	4b11      	ldr	r3, [pc, #68]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   216ec:	4798      	blx	r3
   216ee:	4b1e      	ldr	r3, [pc, #120]	; (21768 <m2m_wifi_connect_sc+0x3e0>)
   216f0:	0018      	movs	r0, r3
   216f2:	4b0f      	ldr	r3, [pc, #60]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   216f4:	4798      	blx	r3
   216f6:	4b10      	ldr	r3, [pc, #64]	; (21738 <m2m_wifi_connect_sc+0x3b0>)
   216f8:	0018      	movs	r0, r3
   216fa:	4b0d      	ldr	r3, [pc, #52]	; (21730 <m2m_wifi_connect_sc+0x3a8>)
   216fc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   216fe:	2397      	movs	r3, #151	; 0x97
   21700:	18fb      	adds	r3, r7, r3
   21702:	22f4      	movs	r2, #244	; 0xf4
   21704:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21706:	e068      	b.n	217da <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   21708:	238c      	movs	r3, #140	; 0x8c
   2170a:	18fb      	adds	r3, r7, r3
   2170c:	6818      	ldr	r0, [r3, #0]
   2170e:	2382      	movs	r3, #130	; 0x82
   21710:	18fb      	adds	r3, r7, r3
   21712:	881b      	ldrh	r3, [r3, #0]
   21714:	3301      	adds	r3, #1
   21716:	001a      	movs	r2, r3
   21718:	687b      	ldr	r3, [r7, #4]
   2171a:	0019      	movs	r1, r3
   2171c:	4b0d      	ldr	r3, [pc, #52]	; (21754 <m2m_wifi_connect_sc+0x3cc>)
   2171e:	4798      	blx	r3
   21720:	e04a      	b.n	217b8 <m2m_wifi_connect_sc+0x430>
   21722:	46c0      	nop			; (mov r8, r8)
   21724:	0000021a 	.word	0x0000021a
   21728:	000378fc 	.word	0x000378fc
   2172c:	00037544 	.word	0x00037544
   21730:	0001d28d 	.word	0x0001d28d
   21734:	00037784 	.word	0x00037784
   21738:	00037540 	.word	0x00037540
   2173c:	0001fff7 	.word	0x0001fff7
   21740:	00000226 	.word	0x00000226
   21744:	00037798 	.word	0x00037798
   21748:	000377a8 	.word	0x000377a8
   2174c:	00000239 	.word	0x00000239
   21750:	000377bc 	.word	0x000377bc
   21754:	0001ff7d 	.word	0x0001ff7d
   21758:	000377c8 	.word	0x000377c8
   2175c:	00000257 	.word	0x00000257
   21760:	000377e4 	.word	0x000377e4
   21764:	00000266 	.word	0x00000266
   21768:	00037800 	.word	0x00037800
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   2176c:	230a      	movs	r3, #10
   2176e:	18fb      	adds	r3, r7, r3
   21770:	781b      	ldrb	r3, [r3, #0]
   21772:	2b04      	cmp	r3, #4
   21774:	d108      	bne.n	21788 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   21776:	238c      	movs	r3, #140	; 0x8c
   21778:	18fb      	adds	r3, r7, r3
   2177a:	681b      	ldr	r3, [r3, #0]
   2177c:	6879      	ldr	r1, [r7, #4]
   2177e:	223e      	movs	r2, #62	; 0x3e
   21780:	0018      	movs	r0, r3
   21782:	4b1a      	ldr	r3, [pc, #104]	; (217ec <m2m_wifi_connect_sc+0x464>)
   21784:	4798      	blx	r3
   21786:	e017      	b.n	217b8 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   21788:	230a      	movs	r3, #10
   2178a:	18fb      	adds	r3, r7, r3
   2178c:	781b      	ldrb	r3, [r3, #0]
   2178e:	2b01      	cmp	r3, #1
   21790:	d012      	beq.n	217b8 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   21792:	4a17      	ldr	r2, [pc, #92]	; (217f0 <m2m_wifi_connect_sc+0x468>)
   21794:	4917      	ldr	r1, [pc, #92]	; (217f4 <m2m_wifi_connect_sc+0x46c>)
   21796:	4b18      	ldr	r3, [pc, #96]	; (217f8 <m2m_wifi_connect_sc+0x470>)
   21798:	0018      	movs	r0, r3
   2179a:	4b18      	ldr	r3, [pc, #96]	; (217fc <m2m_wifi_connect_sc+0x474>)
   2179c:	4798      	blx	r3
   2179e:	4b18      	ldr	r3, [pc, #96]	; (21800 <m2m_wifi_connect_sc+0x478>)
   217a0:	0018      	movs	r0, r3
   217a2:	4b16      	ldr	r3, [pc, #88]	; (217fc <m2m_wifi_connect_sc+0x474>)
   217a4:	4798      	blx	r3
   217a6:	4b17      	ldr	r3, [pc, #92]	; (21804 <m2m_wifi_connect_sc+0x47c>)
   217a8:	0018      	movs	r0, r3
   217aa:	4b14      	ldr	r3, [pc, #80]	; (217fc <m2m_wifi_connect_sc+0x474>)
   217ac:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   217ae:	2397      	movs	r3, #151	; 0x97
   217b0:	18fb      	adds	r3, r7, r3
   217b2:	22f4      	movs	r2, #244	; 0xf4
   217b4:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   217b6:	e010      	b.n	217da <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   217b8:	2397      	movs	r3, #151	; 0x97
   217ba:	18fc      	adds	r4, r7, r3
   217bc:	2314      	movs	r3, #20
   217be:	18fa      	adds	r2, r7, r3
   217c0:	2300      	movs	r3, #0
   217c2:	9302      	str	r3, [sp, #8]
   217c4:	2300      	movs	r3, #0
   217c6:	9301      	str	r3, [sp, #4]
   217c8:	2300      	movs	r3, #0
   217ca:	9300      	str	r3, [sp, #0]
   217cc:	236c      	movs	r3, #108	; 0x6c
   217ce:	2128      	movs	r1, #40	; 0x28
   217d0:	2001      	movs	r0, #1
   217d2:	4d0d      	ldr	r5, [pc, #52]	; (21808 <m2m_wifi_connect_sc+0x480>)
   217d4:	47a8      	blx	r5
   217d6:	0003      	movs	r3, r0
   217d8:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   217da:	2397      	movs	r3, #151	; 0x97
   217dc:	18fb      	adds	r3, r7, r3
   217de:	781b      	ldrb	r3, [r3, #0]
   217e0:	b25b      	sxtb	r3, r3
}
   217e2:	0018      	movs	r0, r3
   217e4:	46bd      	mov	sp, r7
   217e6:	b026      	add	sp, #152	; 0x98
   217e8:	bdb0      	pop	{r4, r5, r7, pc}
   217ea:	46c0      	nop			; (mov r8, r8)
   217ec:	0001ff7d 	.word	0x0001ff7d
   217f0:	00000276 	.word	0x00000276
   217f4:	000378fc 	.word	0x000378fc
   217f8:	00037544 	.word	0x00037544
   217fc:	0001d28d 	.word	0x0001d28d
   21800:	0003781c 	.word	0x0003781c
   21804:	00037540 	.word	0x00037540
   21808:	00020219 	.word	0x00020219

0002180c <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   2180c:	b580      	push	{r7, lr}
   2180e:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   21810:	2300      	movs	r3, #0
}
   21812:	0018      	movs	r0, r3
   21814:	46bd      	mov	sp, r7
   21816:	bd80      	pop	{r7, pc}

00021818 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   21818:	b590      	push	{r4, r7, lr}
   2181a:	b087      	sub	sp, #28
   2181c:	af00      	add	r7, sp, #0
   2181e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   21820:	2317      	movs	r3, #23
   21822:	18fb      	adds	r3, r7, r3
   21824:	2200      	movs	r2, #0
   21826:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   21828:	687b      	ldr	r3, [r7, #4]
   2182a:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   2182c:	693b      	ldr	r3, [r7, #16]
   2182e:	2280      	movs	r2, #128	; 0x80
   21830:	0052      	lsls	r2, r2, #1
   21832:	4313      	orrs	r3, r2
   21834:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   21836:	693a      	ldr	r2, [r7, #16]
   21838:	23a5      	movs	r3, #165	; 0xa5
   2183a:	015b      	lsls	r3, r3, #5
   2183c:	0011      	movs	r1, r2
   2183e:	0018      	movs	r0, r3
   21840:	4b12      	ldr	r3, [pc, #72]	; (2188c <chip_apply_conf+0x74>)
   21842:	4798      	blx	r3
		if(val32 != 0) {		
   21844:	693b      	ldr	r3, [r7, #16]
   21846:	2b00      	cmp	r3, #0
   21848:	d018      	beq.n	2187c <chip_apply_conf+0x64>
			uint32 reg = 0;
   2184a:	2300      	movs	r3, #0
   2184c:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   2184e:	2317      	movs	r3, #23
   21850:	18fc      	adds	r4, r7, r3
   21852:	230c      	movs	r3, #12
   21854:	18fa      	adds	r2, r7, r3
   21856:	23a5      	movs	r3, #165	; 0xa5
   21858:	015b      	lsls	r3, r3, #5
   2185a:	0011      	movs	r1, r2
   2185c:	0018      	movs	r0, r3
   2185e:	4b0c      	ldr	r3, [pc, #48]	; (21890 <chip_apply_conf+0x78>)
   21860:	4798      	blx	r3
   21862:	0003      	movs	r3, r0
   21864:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   21866:	2317      	movs	r3, #23
   21868:	18fb      	adds	r3, r7, r3
   2186a:	781b      	ldrb	r3, [r3, #0]
   2186c:	b25b      	sxtb	r3, r3
   2186e:	2b00      	cmp	r3, #0
   21870:	d1e1      	bne.n	21836 <chip_apply_conf+0x1e>
				if(reg == val32)
   21872:	68fa      	ldr	r2, [r7, #12]
   21874:	693b      	ldr	r3, [r7, #16]
   21876:	429a      	cmp	r2, r3
   21878:	d002      	beq.n	21880 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   2187a:	e7dc      	b.n	21836 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   2187c:	46c0      	nop			; (mov r8, r8)
   2187e:	e000      	b.n	21882 <chip_apply_conf+0x6a>
					break;
   21880:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   21882:	2300      	movs	r3, #0
}
   21884:	0018      	movs	r0, r3
   21886:	46bd      	mov	sp, r7
   21888:	b007      	add	sp, #28
   2188a:	bd90      	pop	{r4, r7, pc}
   2188c:	0002206d 	.word	0x0002206d
   21890:	00022049 	.word	0x00022049

00021894 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   21894:	b590      	push	{r4, r7, lr}
   21896:	b083      	sub	sp, #12
   21898:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   2189a:	2300      	movs	r3, #0
   2189c:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   2189e:	1dfb      	adds	r3, r7, #7
   218a0:	2200      	movs	r2, #0
   218a2:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   218a4:	1dfc      	adds	r4, r7, #7
   218a6:	003b      	movs	r3, r7
   218a8:	4a24      	ldr	r2, [pc, #144]	; (2193c <enable_interrupts+0xa8>)
   218aa:	0019      	movs	r1, r3
   218ac:	0010      	movs	r0, r2
   218ae:	4b24      	ldr	r3, [pc, #144]	; (21940 <enable_interrupts+0xac>)
   218b0:	4798      	blx	r3
   218b2:	0003      	movs	r3, r0
   218b4:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   218b6:	1dfb      	adds	r3, r7, #7
   218b8:	781b      	ldrb	r3, [r3, #0]
   218ba:	b25b      	sxtb	r3, r3
   218bc:	2b00      	cmp	r3, #0
   218be:	d131      	bne.n	21924 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   218c0:	683b      	ldr	r3, [r7, #0]
   218c2:	2280      	movs	r2, #128	; 0x80
   218c4:	0052      	lsls	r2, r2, #1
   218c6:	4313      	orrs	r3, r2
   218c8:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   218ca:	683b      	ldr	r3, [r7, #0]
   218cc:	1dfc      	adds	r4, r7, #7
   218ce:	4a1b      	ldr	r2, [pc, #108]	; (2193c <enable_interrupts+0xa8>)
   218d0:	0019      	movs	r1, r3
   218d2:	0010      	movs	r0, r2
   218d4:	4b1b      	ldr	r3, [pc, #108]	; (21944 <enable_interrupts+0xb0>)
   218d6:	4798      	blx	r3
   218d8:	0003      	movs	r3, r0
   218da:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   218dc:	1dfb      	adds	r3, r7, #7
   218de:	781b      	ldrb	r3, [r3, #0]
   218e0:	b25b      	sxtb	r3, r3
   218e2:	2b00      	cmp	r3, #0
   218e4:	d120      	bne.n	21928 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   218e6:	1dfc      	adds	r4, r7, #7
   218e8:	003a      	movs	r2, r7
   218ea:	23d0      	movs	r3, #208	; 0xd0
   218ec:	015b      	lsls	r3, r3, #5
   218ee:	0011      	movs	r1, r2
   218f0:	0018      	movs	r0, r3
   218f2:	4b13      	ldr	r3, [pc, #76]	; (21940 <enable_interrupts+0xac>)
   218f4:	4798      	blx	r3
   218f6:	0003      	movs	r3, r0
   218f8:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   218fa:	1dfb      	adds	r3, r7, #7
   218fc:	781b      	ldrb	r3, [r3, #0]
   218fe:	b25b      	sxtb	r3, r3
   21900:	2b00      	cmp	r3, #0
   21902:	d113      	bne.n	2192c <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   21904:	683b      	ldr	r3, [r7, #0]
   21906:	2280      	movs	r2, #128	; 0x80
   21908:	0252      	lsls	r2, r2, #9
   2190a:	4313      	orrs	r3, r2
   2190c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   2190e:	683a      	ldr	r2, [r7, #0]
   21910:	1dfc      	adds	r4, r7, #7
   21912:	23d0      	movs	r3, #208	; 0xd0
   21914:	015b      	lsls	r3, r3, #5
   21916:	0011      	movs	r1, r2
   21918:	0018      	movs	r0, r3
   2191a:	4b0a      	ldr	r3, [pc, #40]	; (21944 <enable_interrupts+0xb0>)
   2191c:	4798      	blx	r3
   2191e:	0003      	movs	r3, r0
   21920:	7023      	strb	r3, [r4, #0]
   21922:	e004      	b.n	2192e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21924:	46c0      	nop			; (mov r8, r8)
   21926:	e002      	b.n	2192e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21928:	46c0      	nop			; (mov r8, r8)
   2192a:	e000      	b.n	2192e <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   2192c:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   2192e:	1dfb      	adds	r3, r7, #7
   21930:	781b      	ldrb	r3, [r3, #0]
   21932:	b25b      	sxtb	r3, r3
}
   21934:	0018      	movs	r0, r3
   21936:	46bd      	mov	sp, r7
   21938:	b003      	add	sp, #12
   2193a:	bd90      	pop	{r4, r7, pc}
   2193c:	00001408 	.word	0x00001408
   21940:	00022049 	.word	0x00022049
   21944:	0002206d 	.word	0x0002206d

00021948 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   21948:	b580      	push	{r7, lr}
   2194a:	b082      	sub	sp, #8
   2194c:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   2194e:	4b32      	ldr	r3, [pc, #200]	; (21a18 <nmi_get_chipid+0xd0>)
   21950:	681b      	ldr	r3, [r3, #0]
   21952:	2b00      	cmp	r3, #0
   21954:	d159      	bne.n	21a0a <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   21956:	4a30      	ldr	r2, [pc, #192]	; (21a18 <nmi_get_chipid+0xd0>)
   21958:	2380      	movs	r3, #128	; 0x80
   2195a:	015b      	lsls	r3, r3, #5
   2195c:	0011      	movs	r1, r2
   2195e:	0018      	movs	r0, r3
   21960:	4b2e      	ldr	r3, [pc, #184]	; (21a1c <nmi_get_chipid+0xd4>)
   21962:	4798      	blx	r3
   21964:	1e03      	subs	r3, r0, #0
   21966:	d004      	beq.n	21972 <nmi_get_chipid+0x2a>
			chipid = 0;
   21968:	4b2b      	ldr	r3, [pc, #172]	; (21a18 <nmi_get_chipid+0xd0>)
   2196a:	2200      	movs	r2, #0
   2196c:	601a      	str	r2, [r3, #0]
			return 0;
   2196e:	2300      	movs	r3, #0
   21970:	e04d      	b.n	21a0e <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   21972:	1d3b      	adds	r3, r7, #4
   21974:	4a2a      	ldr	r2, [pc, #168]	; (21a20 <nmi_get_chipid+0xd8>)
   21976:	0019      	movs	r1, r3
   21978:	0010      	movs	r0, r2
   2197a:	4b28      	ldr	r3, [pc, #160]	; (21a1c <nmi_get_chipid+0xd4>)
   2197c:	4798      	blx	r3
   2197e:	1e03      	subs	r3, r0, #0
   21980:	d004      	beq.n	2198c <nmi_get_chipid+0x44>
			chipid = 0;
   21982:	4b25      	ldr	r3, [pc, #148]	; (21a18 <nmi_get_chipid+0xd0>)
   21984:	2200      	movs	r2, #0
   21986:	601a      	str	r2, [r3, #0]
			return 0;
   21988:	2300      	movs	r3, #0
   2198a:	e040      	b.n	21a0e <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   2198c:	4b22      	ldr	r3, [pc, #136]	; (21a18 <nmi_get_chipid+0xd0>)
   2198e:	681b      	ldr	r3, [r3, #0]
   21990:	4a24      	ldr	r2, [pc, #144]	; (21a24 <nmi_get_chipid+0xdc>)
   21992:	4293      	cmp	r3, r2
   21994:	d106      	bne.n	219a4 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   21996:	687b      	ldr	r3, [r7, #4]
   21998:	2b01      	cmp	r3, #1
   2199a:	d029      	beq.n	219f0 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   2199c:	4b1e      	ldr	r3, [pc, #120]	; (21a18 <nmi_get_chipid+0xd0>)
   2199e:	4a22      	ldr	r2, [pc, #136]	; (21a28 <nmi_get_chipid+0xe0>)
   219a0:	601a      	str	r2, [r3, #0]
   219a2:	e025      	b.n	219f0 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   219a4:	4b1c      	ldr	r3, [pc, #112]	; (21a18 <nmi_get_chipid+0xd0>)
   219a6:	681b      	ldr	r3, [r3, #0]
   219a8:	4a20      	ldr	r2, [pc, #128]	; (21a2c <nmi_get_chipid+0xe4>)
   219aa:	4293      	cmp	r3, r2
   219ac:	d10d      	bne.n	219ca <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   219ae:	687b      	ldr	r3, [r7, #4]
   219b0:	2b03      	cmp	r3, #3
   219b2:	d01d      	beq.n	219f0 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   219b4:	687b      	ldr	r3, [r7, #4]
   219b6:	2b04      	cmp	r3, #4
   219b8:	d103      	bne.n	219c2 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   219ba:	4b17      	ldr	r3, [pc, #92]	; (21a18 <nmi_get_chipid+0xd0>)
   219bc:	4a1c      	ldr	r2, [pc, #112]	; (21a30 <nmi_get_chipid+0xe8>)
   219be:	601a      	str	r2, [r3, #0]
   219c0:	e016      	b.n	219f0 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   219c2:	4b15      	ldr	r3, [pc, #84]	; (21a18 <nmi_get_chipid+0xd0>)
   219c4:	4a1b      	ldr	r2, [pc, #108]	; (21a34 <nmi_get_chipid+0xec>)
   219c6:	601a      	str	r2, [r3, #0]
   219c8:	e012      	b.n	219f0 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   219ca:	4b13      	ldr	r3, [pc, #76]	; (21a18 <nmi_get_chipid+0xd0>)
   219cc:	681b      	ldr	r3, [r3, #0]
   219ce:	4a1a      	ldr	r2, [pc, #104]	; (21a38 <nmi_get_chipid+0xf0>)
   219d0:	4293      	cmp	r3, r2
   219d2:	d10d      	bne.n	219f0 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   219d4:	4a10      	ldr	r2, [pc, #64]	; (21a18 <nmi_get_chipid+0xd0>)
   219d6:	23ec      	movs	r3, #236	; 0xec
   219d8:	039b      	lsls	r3, r3, #14
   219da:	0011      	movs	r1, r2
   219dc:	0018      	movs	r0, r3
   219de:	4b0f      	ldr	r3, [pc, #60]	; (21a1c <nmi_get_chipid+0xd4>)
   219e0:	4798      	blx	r3
   219e2:	1e03      	subs	r3, r0, #0
   219e4:	d004      	beq.n	219f0 <nmi_get_chipid+0xa8>
			chipid = 0;
   219e6:	4b0c      	ldr	r3, [pc, #48]	; (21a18 <nmi_get_chipid+0xd0>)
   219e8:	2200      	movs	r2, #0
   219ea:	601a      	str	r2, [r3, #0]
			return 0;
   219ec:	2300      	movs	r3, #0
   219ee:	e00e      	b.n	21a0e <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   219f0:	4b09      	ldr	r3, [pc, #36]	; (21a18 <nmi_get_chipid+0xd0>)
   219f2:	681b      	ldr	r3, [r3, #0]
   219f4:	4a11      	ldr	r2, [pc, #68]	; (21a3c <nmi_get_chipid+0xf4>)
   219f6:	401a      	ands	r2, r3
   219f8:	4b07      	ldr	r3, [pc, #28]	; (21a18 <nmi_get_chipid+0xd0>)
   219fa:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   219fc:	4b06      	ldr	r3, [pc, #24]	; (21a18 <nmi_get_chipid+0xd0>)
   219fe:	681b      	ldr	r3, [r3, #0]
   21a00:	22a0      	movs	r2, #160	; 0xa0
   21a02:	02d2      	lsls	r2, r2, #11
   21a04:	431a      	orrs	r2, r3
   21a06:	4b04      	ldr	r3, [pc, #16]	; (21a18 <nmi_get_chipid+0xd0>)
   21a08:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   21a0a:	4b03      	ldr	r3, [pc, #12]	; (21a18 <nmi_get_chipid+0xd0>)
   21a0c:	681b      	ldr	r3, [r3, #0]
}
   21a0e:	0018      	movs	r0, r3
   21a10:	46bd      	mov	sp, r7
   21a12:	b002      	add	sp, #8
   21a14:	bd80      	pop	{r7, pc}
   21a16:	46c0      	nop			; (mov r8, r8)
   21a18:	20003e04 	.word	0x20003e04
   21a1c:	00022049 	.word	0x00022049
   21a20:	000013f4 	.word	0x000013f4
   21a24:	001002a0 	.word	0x001002a0
   21a28:	001002a1 	.word	0x001002a1
   21a2c:	001002b0 	.word	0x001002b0
   21a30:	001002b1 	.word	0x001002b1
   21a34:	001002b2 	.word	0x001002b2
   21a38:	001000f0 	.word	0x001000f0
   21a3c:	fff0ffff 	.word	0xfff0ffff

00021a40 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   21a40:	b590      	push	{r4, r7, lr}
   21a42:	b083      	sub	sp, #12
   21a44:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   21a46:	1dfb      	adds	r3, r7, #7
   21a48:	2200      	movs	r2, #0
   21a4a:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   21a4c:	1dfc      	adds	r4, r7, #7
   21a4e:	003b      	movs	r3, r7
   21a50:	0019      	movs	r1, r3
   21a52:	2010      	movs	r0, #16
   21a54:	4b2e      	ldr	r3, [pc, #184]	; (21b10 <chip_sleep+0xd0>)
   21a56:	4798      	blx	r3
   21a58:	0003      	movs	r3, r0
   21a5a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   21a5c:	1dfb      	adds	r3, r7, #7
   21a5e:	781b      	ldrb	r3, [r3, #0]
   21a60:	b25b      	sxtb	r3, r3
   21a62:	2b00      	cmp	r3, #0
   21a64:	d145      	bne.n	21af2 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   21a66:	683b      	ldr	r3, [r7, #0]
   21a68:	2201      	movs	r2, #1
   21a6a:	4013      	ands	r3, r2
   21a6c:	d000      	beq.n	21a70 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   21a6e:	e7ed      	b.n	21a4c <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   21a70:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   21a72:	1dfc      	adds	r4, r7, #7
   21a74:	003b      	movs	r3, r7
   21a76:	0019      	movs	r1, r3
   21a78:	2001      	movs	r0, #1
   21a7a:	4b25      	ldr	r3, [pc, #148]	; (21b10 <chip_sleep+0xd0>)
   21a7c:	4798      	blx	r3
   21a7e:	0003      	movs	r3, r0
   21a80:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21a82:	1dfb      	adds	r3, r7, #7
   21a84:	781b      	ldrb	r3, [r3, #0]
   21a86:	b25b      	sxtb	r3, r3
   21a88:	2b00      	cmp	r3, #0
   21a8a:	d134      	bne.n	21af6 <chip_sleep+0xb6>
	if(reg & NBIT1)
   21a8c:	683b      	ldr	r3, [r7, #0]
   21a8e:	2202      	movs	r2, #2
   21a90:	4013      	ands	r3, r2
   21a92:	d010      	beq.n	21ab6 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   21a94:	683b      	ldr	r3, [r7, #0]
   21a96:	2202      	movs	r2, #2
   21a98:	4393      	bics	r3, r2
   21a9a:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   21a9c:	683b      	ldr	r3, [r7, #0]
   21a9e:	1dfc      	adds	r4, r7, #7
   21aa0:	0019      	movs	r1, r3
   21aa2:	2001      	movs	r0, #1
   21aa4:	4b1b      	ldr	r3, [pc, #108]	; (21b14 <chip_sleep+0xd4>)
   21aa6:	4798      	blx	r3
   21aa8:	0003      	movs	r3, r0
   21aaa:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   21aac:	1dfb      	adds	r3, r7, #7
   21aae:	781b      	ldrb	r3, [r3, #0]
   21ab0:	b25b      	sxtb	r3, r3
   21ab2:	2b00      	cmp	r3, #0
   21ab4:	d121      	bne.n	21afa <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   21ab6:	1dfc      	adds	r4, r7, #7
   21ab8:	003b      	movs	r3, r7
   21aba:	0019      	movs	r1, r3
   21abc:	200b      	movs	r0, #11
   21abe:	4b14      	ldr	r3, [pc, #80]	; (21b10 <chip_sleep+0xd0>)
   21ac0:	4798      	blx	r3
   21ac2:	0003      	movs	r3, r0
   21ac4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21ac6:	1dfb      	adds	r3, r7, #7
   21ac8:	781b      	ldrb	r3, [r3, #0]
   21aca:	b25b      	sxtb	r3, r3
   21acc:	2b00      	cmp	r3, #0
   21ace:	d116      	bne.n	21afe <chip_sleep+0xbe>
	if(reg & NBIT0)
   21ad0:	683b      	ldr	r3, [r7, #0]
   21ad2:	2201      	movs	r2, #1
   21ad4:	4013      	ands	r3, r2
   21ad6:	d013      	beq.n	21b00 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   21ad8:	683b      	ldr	r3, [r7, #0]
   21ada:	2201      	movs	r2, #1
   21adc:	4393      	bics	r3, r2
   21ade:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   21ae0:	683b      	ldr	r3, [r7, #0]
   21ae2:	1dfc      	adds	r4, r7, #7
   21ae4:	0019      	movs	r1, r3
   21ae6:	200b      	movs	r0, #11
   21ae8:	4b0a      	ldr	r3, [pc, #40]	; (21b14 <chip_sleep+0xd4>)
   21aea:	4798      	blx	r3
   21aec:	0003      	movs	r3, r0
   21aee:	7023      	strb	r3, [r4, #0]
   21af0:	e006      	b.n	21b00 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   21af2:	46c0      	nop			; (mov r8, r8)
   21af4:	e004      	b.n	21b00 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   21af6:	46c0      	nop			; (mov r8, r8)
   21af8:	e002      	b.n	21b00 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   21afa:	46c0      	nop			; (mov r8, r8)
   21afc:	e000      	b.n	21b00 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   21afe:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   21b00:	1dfb      	adds	r3, r7, #7
   21b02:	781b      	ldrb	r3, [r3, #0]
   21b04:	b25b      	sxtb	r3, r3
}
   21b06:	0018      	movs	r0, r3
   21b08:	46bd      	mov	sp, r7
   21b0a:	b003      	add	sp, #12
   21b0c:	bd90      	pop	{r4, r7, pc}
   21b0e:	46c0      	nop			; (mov r8, r8)
   21b10:	00022049 	.word	0x00022049
   21b14:	0002206d 	.word	0x0002206d

00021b18 <chip_wake>:
sint8 chip_wake(void)
{
   21b18:	b590      	push	{r4, r7, lr}
   21b1a:	b085      	sub	sp, #20
   21b1c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21b1e:	230f      	movs	r3, #15
   21b20:	18fb      	adds	r3, r7, r3
   21b22:	2200      	movs	r2, #0
   21b24:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   21b26:	2300      	movs	r3, #0
   21b28:	607b      	str	r3, [r7, #4]
   21b2a:	2300      	movs	r3, #0
   21b2c:	603b      	str	r3, [r7, #0]
   21b2e:	2300      	movs	r3, #0
   21b30:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   21b32:	230f      	movs	r3, #15
   21b34:	18fc      	adds	r4, r7, r3
   21b36:	1d3b      	adds	r3, r7, #4
   21b38:	0019      	movs	r1, r3
   21b3a:	200b      	movs	r0, #11
   21b3c:	4b4e      	ldr	r3, [pc, #312]	; (21c78 <chip_wake+0x160>)
   21b3e:	4798      	blx	r3
   21b40:	0003      	movs	r3, r0
   21b42:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21b44:	230f      	movs	r3, #15
   21b46:	18fb      	adds	r3, r7, r3
   21b48:	781b      	ldrb	r3, [r3, #0]
   21b4a:	b25b      	sxtb	r3, r3
   21b4c:	2b00      	cmp	r3, #0
   21b4e:	d000      	beq.n	21b52 <chip_wake+0x3a>
   21b50:	e082      	b.n	21c58 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   21b52:	687b      	ldr	r3, [r7, #4]
   21b54:	2201      	movs	r2, #1
   21b56:	4013      	ands	r3, r2
   21b58:	d111      	bne.n	21b7e <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   21b5a:	687b      	ldr	r3, [r7, #4]
   21b5c:	2201      	movs	r2, #1
   21b5e:	4313      	orrs	r3, r2
   21b60:	220f      	movs	r2, #15
   21b62:	18bc      	adds	r4, r7, r2
   21b64:	0019      	movs	r1, r3
   21b66:	200b      	movs	r0, #11
   21b68:	4b44      	ldr	r3, [pc, #272]	; (21c7c <chip_wake+0x164>)
   21b6a:	4798      	blx	r3
   21b6c:	0003      	movs	r3, r0
   21b6e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21b70:	230f      	movs	r3, #15
   21b72:	18fb      	adds	r3, r7, r3
   21b74:	781b      	ldrb	r3, [r3, #0]
   21b76:	b25b      	sxtb	r3, r3
   21b78:	2b00      	cmp	r3, #0
   21b7a:	d000      	beq.n	21b7e <chip_wake+0x66>
   21b7c:	e06e      	b.n	21c5c <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   21b7e:	230f      	movs	r3, #15
   21b80:	18fc      	adds	r4, r7, r3
   21b82:	1d3b      	adds	r3, r7, #4
   21b84:	0019      	movs	r1, r3
   21b86:	2001      	movs	r0, #1
   21b88:	4b3b      	ldr	r3, [pc, #236]	; (21c78 <chip_wake+0x160>)
   21b8a:	4798      	blx	r3
   21b8c:	0003      	movs	r3, r0
   21b8e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21b90:	230f      	movs	r3, #15
   21b92:	18fb      	adds	r3, r7, r3
   21b94:	781b      	ldrb	r3, [r3, #0]
   21b96:	b25b      	sxtb	r3, r3
   21b98:	2b00      	cmp	r3, #0
   21b9a:	d161      	bne.n	21c60 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   21b9c:	687b      	ldr	r3, [r7, #4]
   21b9e:	2202      	movs	r2, #2
   21ba0:	4013      	ands	r3, r2
   21ba2:	d110      	bne.n	21bc6 <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   21ba4:	687b      	ldr	r3, [r7, #4]
   21ba6:	2202      	movs	r2, #2
   21ba8:	4313      	orrs	r3, r2
   21baa:	220f      	movs	r2, #15
   21bac:	18bc      	adds	r4, r7, r2
   21bae:	0019      	movs	r1, r3
   21bb0:	2001      	movs	r0, #1
   21bb2:	4b32      	ldr	r3, [pc, #200]	; (21c7c <chip_wake+0x164>)
   21bb4:	4798      	blx	r3
   21bb6:	0003      	movs	r3, r0
   21bb8:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   21bba:	230f      	movs	r3, #15
   21bbc:	18fb      	adds	r3, r7, r3
   21bbe:	781b      	ldrb	r3, [r3, #0]
   21bc0:	b25b      	sxtb	r3, r3
   21bc2:	2b00      	cmp	r3, #0
   21bc4:	d14e      	bne.n	21c64 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   21bc6:	230f      	movs	r3, #15
   21bc8:	18fc      	adds	r4, r7, r3
   21bca:	003b      	movs	r3, r7
   21bcc:	0019      	movs	r1, r3
   21bce:	200f      	movs	r0, #15
   21bd0:	4b29      	ldr	r3, [pc, #164]	; (21c78 <chip_wake+0x160>)
   21bd2:	4798      	blx	r3
   21bd4:	0003      	movs	r3, r0
   21bd6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   21bd8:	230f      	movs	r3, #15
   21bda:	18fb      	adds	r3, r7, r3
   21bdc:	781b      	ldrb	r3, [r3, #0]
   21bde:	b25b      	sxtb	r3, r3
   21be0:	2b00      	cmp	r3, #0
   21be2:	d014      	beq.n	21c0e <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   21be4:	23a8      	movs	r3, #168	; 0xa8
   21be6:	005a      	lsls	r2, r3, #1
   21be8:	4925      	ldr	r1, [pc, #148]	; (21c80 <chip_wake+0x168>)
   21bea:	4b26      	ldr	r3, [pc, #152]	; (21c84 <chip_wake+0x16c>)
   21bec:	0018      	movs	r0, r3
   21bee:	4b26      	ldr	r3, [pc, #152]	; (21c88 <chip_wake+0x170>)
   21bf0:	4798      	blx	r3
   21bf2:	230f      	movs	r3, #15
   21bf4:	18fb      	adds	r3, r7, r3
   21bf6:	2100      	movs	r1, #0
   21bf8:	5659      	ldrsb	r1, [r3, r1]
   21bfa:	683a      	ldr	r2, [r7, #0]
   21bfc:	4b23      	ldr	r3, [pc, #140]	; (21c8c <chip_wake+0x174>)
   21bfe:	0018      	movs	r0, r3
   21c00:	4b21      	ldr	r3, [pc, #132]	; (21c88 <chip_wake+0x170>)
   21c02:	4798      	blx	r3
   21c04:	4b22      	ldr	r3, [pc, #136]	; (21c90 <chip_wake+0x178>)
   21c06:	0018      	movs	r0, r3
   21c08:	4b1f      	ldr	r3, [pc, #124]	; (21c88 <chip_wake+0x170>)
   21c0a:	4798      	blx	r3
			goto _WAKE_EXIT;
   21c0c:	e02b      	b.n	21c66 <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   21c0e:	683b      	ldr	r3, [r7, #0]
   21c10:	2204      	movs	r2, #4
   21c12:	4013      	ands	r3, r2
   21c14:	d11c      	bne.n	21c50 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   21c16:	2002      	movs	r0, #2
   21c18:	4b1e      	ldr	r3, [pc, #120]	; (21c94 <chip_wake+0x17c>)
   21c1a:	4798      	blx	r3
		trials++;
   21c1c:	68bb      	ldr	r3, [r7, #8]
   21c1e:	3301      	adds	r3, #1
   21c20:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   21c22:	68bb      	ldr	r3, [r7, #8]
   21c24:	2b04      	cmp	r3, #4
   21c26:	d9ce      	bls.n	21bc6 <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   21c28:	23ad      	movs	r3, #173	; 0xad
   21c2a:	005a      	lsls	r2, r3, #1
   21c2c:	4914      	ldr	r1, [pc, #80]	; (21c80 <chip_wake+0x168>)
   21c2e:	4b15      	ldr	r3, [pc, #84]	; (21c84 <chip_wake+0x16c>)
   21c30:	0018      	movs	r0, r3
   21c32:	4b15      	ldr	r3, [pc, #84]	; (21c88 <chip_wake+0x170>)
   21c34:	4798      	blx	r3
   21c36:	4b18      	ldr	r3, [pc, #96]	; (21c98 <chip_wake+0x180>)
   21c38:	0018      	movs	r0, r3
   21c3a:	4b13      	ldr	r3, [pc, #76]	; (21c88 <chip_wake+0x170>)
   21c3c:	4798      	blx	r3
   21c3e:	4b14      	ldr	r3, [pc, #80]	; (21c90 <chip_wake+0x178>)
   21c40:	0018      	movs	r0, r3
   21c42:	4b11      	ldr	r3, [pc, #68]	; (21c88 <chip_wake+0x170>)
   21c44:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   21c46:	230f      	movs	r3, #15
   21c48:	18fb      	adds	r3, r7, r3
   21c4a:	22fc      	movs	r2, #252	; 0xfc
   21c4c:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   21c4e:	e00a      	b.n	21c66 <chip_wake+0x14e>
			break;
   21c50:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   21c52:	4b12      	ldr	r3, [pc, #72]	; (21c9c <chip_wake+0x184>)
   21c54:	4798      	blx	r3
   21c56:	e006      	b.n	21c66 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21c58:	46c0      	nop			; (mov r8, r8)
   21c5a:	e004      	b.n	21c66 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21c5c:	46c0      	nop			; (mov r8, r8)
   21c5e:	e002      	b.n	21c66 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21c60:	46c0      	nop			; (mov r8, r8)
   21c62:	e000      	b.n	21c66 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   21c64:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   21c66:	230f      	movs	r3, #15
   21c68:	18fb      	adds	r3, r7, r3
   21c6a:	781b      	ldrb	r3, [r3, #0]
   21c6c:	b25b      	sxtb	r3, r3
}
   21c6e:	0018      	movs	r0, r3
   21c70:	46bd      	mov	sp, r7
   21c72:	b005      	add	sp, #20
   21c74:	bd90      	pop	{r4, r7, pc}
   21c76:	46c0      	nop			; (mov r8, r8)
   21c78:	00022049 	.word	0x00022049
   21c7c:	0002206d 	.word	0x0002206d
   21c80:	0003799c 	.word	0x0003799c
   21c84:	00037910 	.word	0x00037910
   21c88:	0001d28d 	.word	0x0001d28d
   21c8c:	00037924 	.word	0x00037924
   21c90:	0003793c 	.word	0x0003793c
   21c94:	0001f6d9 	.word	0x0001f6d9
   21c98:	00037940 	.word	0x00037940
   21c9c:	00022009 	.word	0x00022009

00021ca0 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   21ca0:	b580      	push	{r7, lr}
   21ca2:	b088      	sub	sp, #32
   21ca4:	af00      	add	r7, sp, #0
   21ca6:	0002      	movs	r2, r0
   21ca8:	1dfb      	adds	r3, r7, #7
   21caa:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21cac:	2313      	movs	r3, #19
   21cae:	18fb      	adds	r3, r7, r3
   21cb0:	2200      	movs	r2, #0
   21cb2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   21cb4:	2300      	movs	r3, #0
   21cb6:	61fb      	str	r3, [r7, #28]
   21cb8:	2300      	movs	r3, #0
   21cba:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   21cbc:	2300      	movs	r3, #0
   21cbe:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   21cc0:	4b4a      	ldr	r3, [pc, #296]	; (21dec <wait_for_bootrom+0x14c>)
   21cc2:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   21cc4:	2300      	movs	r3, #0
   21cc6:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   21cc8:	4b49      	ldr	r3, [pc, #292]	; (21df0 <wait_for_bootrom+0x150>)
   21cca:	0018      	movs	r0, r3
   21ccc:	4b49      	ldr	r3, [pc, #292]	; (21df4 <wait_for_bootrom+0x154>)
   21cce:	4798      	blx	r3
   21cd0:	0003      	movs	r3, r0
   21cd2:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   21cd4:	69fb      	ldr	r3, [r7, #28]
   21cd6:	2b00      	cmp	r3, #0
   21cd8:	db03      	blt.n	21ce2 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   21cda:	2001      	movs	r0, #1
   21cdc:	4b46      	ldr	r3, [pc, #280]	; (21df8 <wait_for_bootrom+0x158>)
   21cde:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   21ce0:	e7f2      	b.n	21cc8 <wait_for_bootrom+0x28>
			break;
   21ce2:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   21ce4:	4b45      	ldr	r3, [pc, #276]	; (21dfc <wait_for_bootrom+0x15c>)
   21ce6:	0018      	movs	r0, r3
   21ce8:	4b42      	ldr	r3, [pc, #264]	; (21df4 <wait_for_bootrom+0x154>)
   21cea:	4798      	blx	r3
   21cec:	0003      	movs	r3, r0
   21cee:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   21cf0:	69fb      	ldr	r3, [r7, #28]
   21cf2:	2201      	movs	r2, #1
   21cf4:	4013      	ands	r3, r2
   21cf6:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   21cf8:	69fb      	ldr	r3, [r7, #28]
   21cfa:	2b00      	cmp	r3, #0
   21cfc:	d112      	bne.n	21d24 <wait_for_bootrom+0x84>
	{
		reg = 0;
   21cfe:	2300      	movs	r3, #0
   21d00:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   21d02:	e00b      	b.n	21d1c <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   21d04:	2001      	movs	r0, #1
   21d06:	4b3c      	ldr	r3, [pc, #240]	; (21df8 <wait_for_bootrom+0x158>)
   21d08:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   21d0a:	4b3d      	ldr	r3, [pc, #244]	; (21e00 <wait_for_bootrom+0x160>)
   21d0c:	0018      	movs	r0, r3
   21d0e:	4b39      	ldr	r3, [pc, #228]	; (21df4 <wait_for_bootrom+0x154>)
   21d10:	4798      	blx	r3
   21d12:	0003      	movs	r3, r0
   21d14:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   21d16:	69bb      	ldr	r3, [r7, #24]
   21d18:	3301      	adds	r3, #1
   21d1a:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   21d1c:	69fb      	ldr	r3, [r7, #28]
   21d1e:	4a39      	ldr	r2, [pc, #228]	; (21e04 <wait_for_bootrom+0x164>)
   21d20:	4293      	cmp	r3, r2
   21d22:	d1ef      	bne.n	21d04 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   21d24:	1dfb      	adds	r3, r7, #7
   21d26:	781b      	ldrb	r3, [r3, #0]
   21d28:	2b02      	cmp	r3, #2
   21d2a:	d10d      	bne.n	21d48 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   21d2c:	4a36      	ldr	r2, [pc, #216]	; (21e08 <wait_for_bootrom+0x168>)
   21d2e:	4b37      	ldr	r3, [pc, #220]	; (21e0c <wait_for_bootrom+0x16c>)
   21d30:	0011      	movs	r1, r2
   21d32:	0018      	movs	r0, r3
   21d34:	4b36      	ldr	r3, [pc, #216]	; (21e10 <wait_for_bootrom+0x170>)
   21d36:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   21d38:	2380      	movs	r3, #128	; 0x80
   21d3a:	035b      	lsls	r3, r3, #13
   21d3c:	4a35      	ldr	r2, [pc, #212]	; (21e14 <wait_for_bootrom+0x174>)
   21d3e:	0019      	movs	r1, r3
   21d40:	0010      	movs	r0, r2
   21d42:	4b33      	ldr	r3, [pc, #204]	; (21e10 <wait_for_bootrom+0x170>)
   21d44:	4798      	blx	r3
   21d46:	e022      	b.n	21d8e <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   21d48:	1dfb      	adds	r3, r7, #7
   21d4a:	781b      	ldrb	r3, [r3, #0]
   21d4c:	2b03      	cmp	r3, #3
   21d4e:	d10b      	bne.n	21d68 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   21d50:	4a2d      	ldr	r2, [pc, #180]	; (21e08 <wait_for_bootrom+0x168>)
   21d52:	4b2e      	ldr	r3, [pc, #184]	; (21e0c <wait_for_bootrom+0x16c>)
   21d54:	0011      	movs	r1, r2
   21d56:	0018      	movs	r0, r3
   21d58:	4b2d      	ldr	r3, [pc, #180]	; (21e10 <wait_for_bootrom+0x170>)
   21d5a:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   21d5c:	4b2d      	ldr	r3, [pc, #180]	; (21e14 <wait_for_bootrom+0x174>)
   21d5e:	2100      	movs	r1, #0
   21d60:	0018      	movs	r0, r3
   21d62:	4b2b      	ldr	r3, [pc, #172]	; (21e10 <wait_for_bootrom+0x170>)
   21d64:	4798      	blx	r3
   21d66:	e012      	b.n	21d8e <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   21d68:	1dfb      	adds	r3, r7, #7
   21d6a:	781b      	ldrb	r3, [r3, #0]
   21d6c:	2b04      	cmp	r3, #4
   21d6e:	d108      	bne.n	21d82 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   21d70:	2380      	movs	r3, #128	; 0x80
   21d72:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   21d74:	68fb      	ldr	r3, [r7, #12]
   21d76:	4a27      	ldr	r2, [pc, #156]	; (21e14 <wait_for_bootrom+0x174>)
   21d78:	0019      	movs	r1, r3
   21d7a:	0010      	movs	r0, r2
   21d7c:	4b24      	ldr	r3, [pc, #144]	; (21e10 <wait_for_bootrom+0x170>)
   21d7e:	4798      	blx	r3
   21d80:	e005      	b.n	21d8e <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   21d82:	68fb      	ldr	r3, [r7, #12]
   21d84:	4a23      	ldr	r2, [pc, #140]	; (21e14 <wait_for_bootrom+0x174>)
   21d86:	0019      	movs	r1, r3
   21d88:	0010      	movs	r0, r2
   21d8a:	4b21      	ldr	r3, [pc, #132]	; (21e10 <wait_for_bootrom+0x170>)
   21d8c:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   21d8e:	4b22      	ldr	r3, [pc, #136]	; (21e18 <wait_for_bootrom+0x178>)
   21d90:	4798      	blx	r3
   21d92:	0003      	movs	r3, r0
   21d94:	051b      	lsls	r3, r3, #20
   21d96:	0d1b      	lsrs	r3, r3, #20
   21d98:	4a20      	ldr	r2, [pc, #128]	; (21e1c <wait_for_bootrom+0x17c>)
   21d9a:	4293      	cmp	r3, r2
   21d9c:	d906      	bls.n	21dac <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   21d9e:	697b      	ldr	r3, [r7, #20]
   21da0:	2202      	movs	r2, #2
   21da2:	4313      	orrs	r3, r2
   21da4:	0018      	movs	r0, r3
   21da6:	4b1e      	ldr	r3, [pc, #120]	; (21e20 <wait_for_bootrom+0x180>)
   21da8:	4798      	blx	r3
   21daa:	e003      	b.n	21db4 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   21dac:	697b      	ldr	r3, [r7, #20]
   21dae:	0018      	movs	r0, r3
   21db0:	4b1b      	ldr	r3, [pc, #108]	; (21e20 <wait_for_bootrom+0x180>)
   21db2:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   21db4:	4b1b      	ldr	r3, [pc, #108]	; (21e24 <wait_for_bootrom+0x184>)
   21db6:	0018      	movs	r0, r3
   21db8:	4b1b      	ldr	r3, [pc, #108]	; (21e28 <wait_for_bootrom+0x188>)
   21dba:	4798      	blx	r3
   21dbc:	68fa      	ldr	r2, [r7, #12]
   21dbe:	4b1b      	ldr	r3, [pc, #108]	; (21e2c <wait_for_bootrom+0x18c>)
   21dc0:	0011      	movs	r1, r2
   21dc2:	0018      	movs	r0, r3
   21dc4:	4b18      	ldr	r3, [pc, #96]	; (21e28 <wait_for_bootrom+0x188>)
   21dc6:	4798      	blx	r3
   21dc8:	4b19      	ldr	r3, [pc, #100]	; (21e30 <wait_for_bootrom+0x190>)
   21dca:	0018      	movs	r0, r3
   21dcc:	4b16      	ldr	r3, [pc, #88]	; (21e28 <wait_for_bootrom+0x188>)
   21dce:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   21dd0:	4a18      	ldr	r2, [pc, #96]	; (21e34 <wait_for_bootrom+0x194>)
   21dd2:	4b0b      	ldr	r3, [pc, #44]	; (21e00 <wait_for_bootrom+0x160>)
   21dd4:	0011      	movs	r1, r2
   21dd6:	0018      	movs	r0, r3
   21dd8:	4b0d      	ldr	r3, [pc, #52]	; (21e10 <wait_for_bootrom+0x170>)
   21dda:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   21ddc:	2313      	movs	r3, #19
   21dde:	18fb      	adds	r3, r7, r3
   21de0:	781b      	ldrb	r3, [r3, #0]
   21de2:	b25b      	sxtb	r3, r3
}
   21de4:	0018      	movs	r0, r3
   21de6:	46bd      	mov	sp, r7
   21de8:	b008      	add	sp, #32
   21dea:	bd80      	pop	{r7, pc}
   21dec:	13301354 	.word	0x13301354
   21df0:	00001014 	.word	0x00001014
   21df4:	00022029 	.word	0x00022029
   21df8:	0001f6d9 	.word	0x0001f6d9
   21dfc:	000207bc 	.word	0x000207bc
   21e00:	000c000c 	.word	0x000c000c
   21e04:	10add09e 	.word	0x10add09e
   21e08:	3c1cd57d 	.word	0x3c1cd57d
   21e0c:	000207ac 	.word	0x000207ac
   21e10:	0002206d 	.word	0x0002206d
   21e14:	0000108c 	.word	0x0000108c
   21e18:	00021949 	.word	0x00021949
   21e1c:	0000039f 	.word	0x0000039f
   21e20:	00021819 	.word	0x00021819
   21e24:	0003795c 	.word	0x0003795c
   21e28:	0001d28d 	.word	0x0001d28d
   21e2c:	00037968 	.word	0x00037968
   21e30:	0003793c 	.word	0x0003793c
   21e34:	ef522f61 	.word	0xef522f61

00021e38 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   21e38:	b580      	push	{r7, lr}
   21e3a:	b088      	sub	sp, #32
   21e3c:	af00      	add	r7, sp, #0
   21e3e:	0002      	movs	r2, r0
   21e40:	1dfb      	adds	r3, r7, #7
   21e42:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21e44:	231f      	movs	r3, #31
   21e46:	18fb      	adds	r3, r7, r3
   21e48:	2200      	movs	r2, #0
   21e4a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   21e4c:	2300      	movs	r3, #0
   21e4e:	61bb      	str	r3, [r7, #24]
   21e50:	2300      	movs	r3, #0
   21e52:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   21e54:	2301      	movs	r3, #1
   21e56:	425b      	negs	r3, r3
   21e58:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   21e5a:	4b1d      	ldr	r3, [pc, #116]	; (21ed0 <wait_for_firmware_start+0x98>)
   21e5c:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   21e5e:	4b1d      	ldr	r3, [pc, #116]	; (21ed4 <wait_for_firmware_start+0x9c>)
   21e60:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   21e62:	1dfb      	adds	r3, r7, #7
   21e64:	781b      	ldrb	r3, [r3, #0]
   21e66:	2b02      	cmp	r3, #2
   21e68:	d003      	beq.n	21e72 <wait_for_firmware_start+0x3a>
   21e6a:	1dfb      	adds	r3, r7, #7
   21e6c:	781b      	ldrb	r3, [r3, #0]
   21e6e:	2b03      	cmp	r3, #3
   21e70:	d119      	bne.n	21ea6 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   21e72:	4b19      	ldr	r3, [pc, #100]	; (21ed8 <wait_for_firmware_start+0xa0>)
   21e74:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   21e76:	4b19      	ldr	r3, [pc, #100]	; (21edc <wait_for_firmware_start+0xa4>)
   21e78:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   21e7a:	e014      	b.n	21ea6 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   21e7c:	2002      	movs	r0, #2
   21e7e:	4b18      	ldr	r3, [pc, #96]	; (21ee0 <wait_for_firmware_start+0xa8>)
   21e80:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   21e82:	68fb      	ldr	r3, [r7, #12]
   21e84:	0018      	movs	r0, r3
   21e86:	4b17      	ldr	r3, [pc, #92]	; (21ee4 <wait_for_firmware_start+0xac>)
   21e88:	4798      	blx	r3
   21e8a:	0003      	movs	r3, r0
   21e8c:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   21e8e:	697b      	ldr	r3, [r7, #20]
   21e90:	3301      	adds	r3, #1
   21e92:	617b      	str	r3, [r7, #20]
   21e94:	697a      	ldr	r2, [r7, #20]
   21e96:	693b      	ldr	r3, [r7, #16]
   21e98:	429a      	cmp	r2, r3
   21e9a:	d304      	bcc.n	21ea6 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   21e9c:	231f      	movs	r3, #31
   21e9e:	18fb      	adds	r3, r7, r3
   21ea0:	22fb      	movs	r2, #251	; 0xfb
   21ea2:	701a      	strb	r2, [r3, #0]
			goto ERR;
   21ea4:	e00c      	b.n	21ec0 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   21ea6:	68ba      	ldr	r2, [r7, #8]
   21ea8:	69bb      	ldr	r3, [r7, #24]
   21eaa:	429a      	cmp	r2, r3
   21eac:	d1e6      	bne.n	21e7c <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   21eae:	68bb      	ldr	r3, [r7, #8]
   21eb0:	4a08      	ldr	r2, [pc, #32]	; (21ed4 <wait_for_firmware_start+0x9c>)
   21eb2:	4293      	cmp	r3, r2
   21eb4:	d104      	bne.n	21ec0 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   21eb6:	4b06      	ldr	r3, [pc, #24]	; (21ed0 <wait_for_firmware_start+0x98>)
   21eb8:	2100      	movs	r1, #0
   21eba:	0018      	movs	r0, r3
   21ebc:	4b0a      	ldr	r3, [pc, #40]	; (21ee8 <wait_for_firmware_start+0xb0>)
   21ebe:	4798      	blx	r3
	}
ERR:
	return ret;
   21ec0:	231f      	movs	r3, #31
   21ec2:	18fb      	adds	r3, r7, r3
   21ec4:	781b      	ldrb	r3, [r3, #0]
   21ec6:	b25b      	sxtb	r3, r3
}
   21ec8:	0018      	movs	r0, r3
   21eca:	46bd      	mov	sp, r7
   21ecc:	b008      	add	sp, #32
   21ece:	bd80      	pop	{r7, pc}
   21ed0:	0000108c 	.word	0x0000108c
   21ed4:	02532636 	.word	0x02532636
   21ed8:	000207ac 	.word	0x000207ac
   21edc:	d75dc1c3 	.word	0xd75dc1c3
   21ee0:	0001f6d9 	.word	0x0001f6d9
   21ee4:	00022029 	.word	0x00022029
   21ee8:	0002206d 	.word	0x0002206d

00021eec <chip_deinit>:

sint8 chip_deinit(void)
{
   21eec:	b590      	push	{r4, r7, lr}
   21eee:	b083      	sub	sp, #12
   21ef0:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   21ef2:	2300      	movs	r3, #0
   21ef4:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   21ef6:	1dfc      	adds	r4, r7, #7
   21ef8:	003a      	movs	r2, r7
   21efa:	23a0      	movs	r3, #160	; 0xa0
   21efc:	015b      	lsls	r3, r3, #5
   21efe:	0011      	movs	r1, r2
   21f00:	0018      	movs	r0, r3
   21f02:	4b20      	ldr	r3, [pc, #128]	; (21f84 <chip_deinit+0x98>)
   21f04:	4798      	blx	r3
   21f06:	0003      	movs	r3, r0
   21f08:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   21f0a:	1dfb      	adds	r3, r7, #7
   21f0c:	781b      	ldrb	r3, [r3, #0]
   21f0e:	b25b      	sxtb	r3, r3
   21f10:	2b00      	cmp	r3, #0
   21f12:	d00e      	beq.n	21f32 <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   21f14:	4a1c      	ldr	r2, [pc, #112]	; (21f88 <chip_deinit+0x9c>)
   21f16:	491d      	ldr	r1, [pc, #116]	; (21f8c <chip_deinit+0xa0>)
   21f18:	4b1d      	ldr	r3, [pc, #116]	; (21f90 <chip_deinit+0xa4>)
   21f1a:	0018      	movs	r0, r3
   21f1c:	4b1d      	ldr	r3, [pc, #116]	; (21f94 <chip_deinit+0xa8>)
   21f1e:	4798      	blx	r3
   21f20:	4b1d      	ldr	r3, [pc, #116]	; (21f98 <chip_deinit+0xac>)
   21f22:	0018      	movs	r0, r3
   21f24:	4b1b      	ldr	r3, [pc, #108]	; (21f94 <chip_deinit+0xa8>)
   21f26:	4798      	blx	r3
   21f28:	4b1c      	ldr	r3, [pc, #112]	; (21f9c <chip_deinit+0xb0>)
   21f2a:	0018      	movs	r0, r3
   21f2c:	4b19      	ldr	r3, [pc, #100]	; (21f94 <chip_deinit+0xa8>)
   21f2e:	4798      	blx	r3
		goto ERR1;
   21f30:	e021      	b.n	21f76 <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   21f32:	683b      	ldr	r3, [r7, #0]
   21f34:	4a1a      	ldr	r2, [pc, #104]	; (21fa0 <chip_deinit+0xb4>)
   21f36:	4013      	ands	r3, r2
   21f38:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   21f3a:	683a      	ldr	r2, [r7, #0]
   21f3c:	1dfc      	adds	r4, r7, #7
   21f3e:	23a0      	movs	r3, #160	; 0xa0
   21f40:	015b      	lsls	r3, r3, #5
   21f42:	0011      	movs	r1, r2
   21f44:	0018      	movs	r0, r3
   21f46:	4b17      	ldr	r3, [pc, #92]	; (21fa4 <chip_deinit+0xb8>)
   21f48:	4798      	blx	r3
   21f4a:	0003      	movs	r3, r0
   21f4c:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   21f4e:	1dfb      	adds	r3, r7, #7
   21f50:	781b      	ldrb	r3, [r3, #0]
   21f52:	b25b      	sxtb	r3, r3
   21f54:	2b00      	cmp	r3, #0
   21f56:	d00e      	beq.n	21f76 <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   21f58:	4a13      	ldr	r2, [pc, #76]	; (21fa8 <chip_deinit+0xbc>)
   21f5a:	490c      	ldr	r1, [pc, #48]	; (21f8c <chip_deinit+0xa0>)
   21f5c:	4b0c      	ldr	r3, [pc, #48]	; (21f90 <chip_deinit+0xa4>)
   21f5e:	0018      	movs	r0, r3
   21f60:	4b0c      	ldr	r3, [pc, #48]	; (21f94 <chip_deinit+0xa8>)
   21f62:	4798      	blx	r3
   21f64:	4b0c      	ldr	r3, [pc, #48]	; (21f98 <chip_deinit+0xac>)
   21f66:	0018      	movs	r0, r3
   21f68:	4b0a      	ldr	r3, [pc, #40]	; (21f94 <chip_deinit+0xa8>)
   21f6a:	4798      	blx	r3
   21f6c:	4b0b      	ldr	r3, [pc, #44]	; (21f9c <chip_deinit+0xb0>)
   21f6e:	0018      	movs	r0, r3
   21f70:	4b08      	ldr	r3, [pc, #32]	; (21f94 <chip_deinit+0xa8>)
   21f72:	4798      	blx	r3
		goto ERR1;
   21f74:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   21f76:	1dfb      	adds	r3, r7, #7
   21f78:	781b      	ldrb	r3, [r3, #0]
   21f7a:	b25b      	sxtb	r3, r3
}
   21f7c:	0018      	movs	r0, r3
   21f7e:	46bd      	mov	sp, r7
   21f80:	b003      	add	sp, #12
   21f82:	bd90      	pop	{r4, r7, pc}
   21f84:	00022049 	.word	0x00022049
   21f88:	00000201 	.word	0x00000201
   21f8c:	000379a8 	.word	0x000379a8
   21f90:	00037910 	.word	0x00037910
   21f94:	0001d28d 	.word	0x0001d28d
   21f98:	00037980 	.word	0x00037980
   21f9c:	0003793c 	.word	0x0003793c
   21fa0:	fffffbff 	.word	0xfffffbff
   21fa4:	0002206d 	.word	0x0002206d
   21fa8:	00000207 	.word	0x00000207

00021fac <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   21fac:	b590      	push	{r4, r7, lr}
   21fae:	b085      	sub	sp, #20
   21fb0:	af00      	add	r7, sp, #0
   21fb2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   21fb4:	230f      	movs	r3, #15
   21fb6:	18fb      	adds	r3, r7, r3
   21fb8:	2200      	movs	r2, #0
   21fba:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   21fbc:	230f      	movs	r3, #15
   21fbe:	18fc      	adds	r4, r7, r3
   21fc0:	687b      	ldr	r3, [r7, #4]
   21fc2:	0018      	movs	r0, r3
   21fc4:	4b05      	ldr	r3, [pc, #20]	; (21fdc <nm_bus_iface_init+0x30>)
   21fc6:	4798      	blx	r3
   21fc8:	0003      	movs	r3, r0
   21fca:	7023      	strb	r3, [r4, #0]
	return ret;
   21fcc:	230f      	movs	r3, #15
   21fce:	18fb      	adds	r3, r7, r3
   21fd0:	781b      	ldrb	r3, [r3, #0]
   21fd2:	b25b      	sxtb	r3, r3
}
   21fd4:	0018      	movs	r0, r3
   21fd6:	46bd      	mov	sp, r7
   21fd8:	b005      	add	sp, #20
   21fda:	bd90      	pop	{r4, r7, pc}
   21fdc:	0001fd95 	.word	0x0001fd95

00021fe0 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   21fe0:	b590      	push	{r4, r7, lr}
   21fe2:	b083      	sub	sp, #12
   21fe4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21fe6:	1dfb      	adds	r3, r7, #7
   21fe8:	2200      	movs	r2, #0
   21fea:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   21fec:	1dfc      	adds	r4, r7, #7
   21fee:	4b05      	ldr	r3, [pc, #20]	; (22004 <nm_bus_iface_deinit+0x24>)
   21ff0:	4798      	blx	r3
   21ff2:	0003      	movs	r3, r0
   21ff4:	7023      	strb	r3, [r4, #0]

	return ret;
   21ff6:	1dfb      	adds	r3, r7, #7
   21ff8:	781b      	ldrb	r3, [r3, #0]
   21ffa:	b25b      	sxtb	r3, r3
}
   21ffc:	0018      	movs	r0, r3
   21ffe:	46bd      	mov	sp, r7
   22000:	b003      	add	sp, #12
   22002:	bd90      	pop	{r4, r7, pc}
   22004:	0001ff0d 	.word	0x0001ff0d

00022008 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   22008:	b580      	push	{r7, lr}
   2200a:	b082      	sub	sp, #8
   2200c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2200e:	1dfb      	adds	r3, r7, #7
   22010:	2200      	movs	r2, #0
   22012:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   22014:	4b03      	ldr	r3, [pc, #12]	; (22024 <nm_bus_reset+0x1c>)
   22016:	4798      	blx	r3
   22018:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   2201a:	0018      	movs	r0, r3
   2201c:	46bd      	mov	sp, r7
   2201e:	b002      	add	sp, #8
   22020:	bd80      	pop	{r7, pc}
   22022:	46c0      	nop			; (mov r8, r8)
   22024:	00023e35 	.word	0x00023e35

00022028 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   22028:	b580      	push	{r7, lr}
   2202a:	b082      	sub	sp, #8
   2202c:	af00      	add	r7, sp, #0
   2202e:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   22030:	687b      	ldr	r3, [r7, #4]
   22032:	0018      	movs	r0, r3
   22034:	4b03      	ldr	r3, [pc, #12]	; (22044 <nm_read_reg+0x1c>)
   22036:	4798      	blx	r3
   22038:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   2203a:	0018      	movs	r0, r3
   2203c:	46bd      	mov	sp, r7
   2203e:	b002      	add	sp, #8
   22040:	bd80      	pop	{r7, pc}
   22042:	46c0      	nop			; (mov r8, r8)
   22044:	00023fc9 	.word	0x00023fc9

00022048 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   22048:	b580      	push	{r7, lr}
   2204a:	b082      	sub	sp, #8
   2204c:	af00      	add	r7, sp, #0
   2204e:	6078      	str	r0, [r7, #4]
   22050:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   22052:	683a      	ldr	r2, [r7, #0]
   22054:	687b      	ldr	r3, [r7, #4]
   22056:	0011      	movs	r1, r2
   22058:	0018      	movs	r0, r3
   2205a:	4b03      	ldr	r3, [pc, #12]	; (22068 <nm_read_reg_with_ret+0x20>)
   2205c:	4798      	blx	r3
   2205e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   22060:	0018      	movs	r0, r3
   22062:	46bd      	mov	sp, r7
   22064:	b002      	add	sp, #8
   22066:	bd80      	pop	{r7, pc}
   22068:	00023fed 	.word	0x00023fed

0002206c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   2206c:	b580      	push	{r7, lr}
   2206e:	b082      	sub	sp, #8
   22070:	af00      	add	r7, sp, #0
   22072:	6078      	str	r0, [r7, #4]
   22074:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   22076:	683a      	ldr	r2, [r7, #0]
   22078:	687b      	ldr	r3, [r7, #4]
   2207a:	0011      	movs	r1, r2
   2207c:	0018      	movs	r0, r3
   2207e:	4b03      	ldr	r3, [pc, #12]	; (2208c <nm_write_reg+0x20>)
   22080:	4798      	blx	r3
   22082:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   22084:	0018      	movs	r0, r3
   22086:	46bd      	mov	sp, r7
   22088:	b002      	add	sp, #8
   2208a:	bd80      	pop	{r7, pc}
   2208c:	0002403d 	.word	0x0002403d

00022090 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   22090:	b580      	push	{r7, lr}
   22092:	b084      	sub	sp, #16
   22094:	af00      	add	r7, sp, #0
   22096:	60f8      	str	r0, [r7, #12]
   22098:	60b9      	str	r1, [r7, #8]
   2209a:	1dbb      	adds	r3, r7, #6
   2209c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   2209e:	1dbb      	adds	r3, r7, #6
   220a0:	881a      	ldrh	r2, [r3, #0]
   220a2:	68b9      	ldr	r1, [r7, #8]
   220a4:	68fb      	ldr	r3, [r7, #12]
   220a6:	0018      	movs	r0, r3
   220a8:	4b03      	ldr	r3, [pc, #12]	; (220b8 <p_nm_read_block+0x28>)
   220aa:	4798      	blx	r3
   220ac:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   220ae:	0018      	movs	r0, r3
   220b0:	46bd      	mov	sp, r7
   220b2:	b004      	add	sp, #16
   220b4:	bd80      	pop	{r7, pc}
   220b6:	46c0      	nop			; (mov r8, r8)
   220b8:	0002408d 	.word	0x0002408d

000220bc <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   220bc:	b580      	push	{r7, lr}
   220be:	b086      	sub	sp, #24
   220c0:	af00      	add	r7, sp, #0
   220c2:	60f8      	str	r0, [r7, #12]
   220c4:	60b9      	str	r1, [r7, #8]
   220c6:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   220c8:	4b2d      	ldr	r3, [pc, #180]	; (22180 <nm_read_block+0xc4>)
   220ca:	881a      	ldrh	r2, [r3, #0]
   220cc:	2310      	movs	r3, #16
   220ce:	18fb      	adds	r3, r7, r3
   220d0:	3a08      	subs	r2, #8
   220d2:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   220d4:	2300      	movs	r3, #0
   220d6:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   220d8:	2313      	movs	r3, #19
   220da:	18fb      	adds	r3, r7, r3
   220dc:	2200      	movs	r2, #0
   220de:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   220e0:	2310      	movs	r3, #16
   220e2:	18fb      	adds	r3, r7, r3
   220e4:	881a      	ldrh	r2, [r3, #0]
   220e6:	687b      	ldr	r3, [r7, #4]
   220e8:	429a      	cmp	r2, r3
   220ea:	d313      	bcc.n	22114 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   220ec:	68ba      	ldr	r2, [r7, #8]
   220ee:	697b      	ldr	r3, [r7, #20]
   220f0:	18d1      	adds	r1, r2, r3
   220f2:	687b      	ldr	r3, [r7, #4]
   220f4:	b29a      	uxth	r2, r3
   220f6:	68fb      	ldr	r3, [r7, #12]
   220f8:	0018      	movs	r0, r3
   220fa:	4b22      	ldr	r3, [pc, #136]	; (22184 <nm_read_block+0xc8>)
   220fc:	4798      	blx	r3
   220fe:	0003      	movs	r3, r0
   22100:	b2da      	uxtb	r2, r3
   22102:	2313      	movs	r3, #19
   22104:	18fb      	adds	r3, r7, r3
   22106:	781b      	ldrb	r3, [r3, #0]
   22108:	18d3      	adds	r3, r2, r3
   2210a:	b2da      	uxtb	r2, r3
   2210c:	2313      	movs	r3, #19
   2210e:	18fb      	adds	r3, r7, r3
   22110:	701a      	strb	r2, [r3, #0]
			break;
   22112:	e02d      	b.n	22170 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22114:	68ba      	ldr	r2, [r7, #8]
   22116:	697b      	ldr	r3, [r7, #20]
   22118:	18d1      	adds	r1, r2, r3
   2211a:	2310      	movs	r3, #16
   2211c:	18fb      	adds	r3, r7, r3
   2211e:	881a      	ldrh	r2, [r3, #0]
   22120:	68fb      	ldr	r3, [r7, #12]
   22122:	0018      	movs	r0, r3
   22124:	4b17      	ldr	r3, [pc, #92]	; (22184 <nm_read_block+0xc8>)
   22126:	4798      	blx	r3
   22128:	0003      	movs	r3, r0
   2212a:	b2da      	uxtb	r2, r3
   2212c:	2313      	movs	r3, #19
   2212e:	18fb      	adds	r3, r7, r3
   22130:	781b      	ldrb	r3, [r3, #0]
   22132:	18d3      	adds	r3, r2, r3
   22134:	b2da      	uxtb	r2, r3
   22136:	2313      	movs	r3, #19
   22138:	18fb      	adds	r3, r7, r3
   2213a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   2213c:	2313      	movs	r3, #19
   2213e:	18fb      	adds	r3, r7, r3
   22140:	781b      	ldrb	r3, [r3, #0]
   22142:	b25b      	sxtb	r3, r3
   22144:	2b00      	cmp	r3, #0
   22146:	d112      	bne.n	2216e <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   22148:	2310      	movs	r3, #16
   2214a:	18fb      	adds	r3, r7, r3
   2214c:	881b      	ldrh	r3, [r3, #0]
   2214e:	687a      	ldr	r2, [r7, #4]
   22150:	1ad3      	subs	r3, r2, r3
   22152:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   22154:	2310      	movs	r3, #16
   22156:	18fb      	adds	r3, r7, r3
   22158:	881b      	ldrh	r3, [r3, #0]
   2215a:	697a      	ldr	r2, [r7, #20]
   2215c:	18d3      	adds	r3, r2, r3
   2215e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   22160:	2310      	movs	r3, #16
   22162:	18fb      	adds	r3, r7, r3
   22164:	881b      	ldrh	r3, [r3, #0]
   22166:	68fa      	ldr	r2, [r7, #12]
   22168:	18d3      	adds	r3, r2, r3
   2216a:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   2216c:	e7b8      	b.n	220e0 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   2216e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   22170:	2313      	movs	r3, #19
   22172:	18fb      	adds	r3, r7, r3
   22174:	781b      	ldrb	r3, [r3, #0]
   22176:	b25b      	sxtb	r3, r3
}
   22178:	0018      	movs	r0, r3
   2217a:	46bd      	mov	sp, r7
   2217c:	b006      	add	sp, #24
   2217e:	bd80      	pop	{r7, pc}
   22180:	200000cc 	.word	0x200000cc
   22184:	00022091 	.word	0x00022091

00022188 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   22188:	b580      	push	{r7, lr}
   2218a:	b084      	sub	sp, #16
   2218c:	af00      	add	r7, sp, #0
   2218e:	60f8      	str	r0, [r7, #12]
   22190:	60b9      	str	r1, [r7, #8]
   22192:	1dbb      	adds	r3, r7, #6
   22194:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   22196:	1dbb      	adds	r3, r7, #6
   22198:	881a      	ldrh	r2, [r3, #0]
   2219a:	68b9      	ldr	r1, [r7, #8]
   2219c:	68fb      	ldr	r3, [r7, #12]
   2219e:	0018      	movs	r0, r3
   221a0:	4b03      	ldr	r3, [pc, #12]	; (221b0 <p_nm_write_block+0x28>)
   221a2:	4798      	blx	r3
   221a4:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   221a6:	0018      	movs	r0, r3
   221a8:	46bd      	mov	sp, r7
   221aa:	b004      	add	sp, #16
   221ac:	bd80      	pop	{r7, pc}
   221ae:	46c0      	nop			; (mov r8, r8)
   221b0:	000240e5 	.word	0x000240e5

000221b4 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   221b4:	b580      	push	{r7, lr}
   221b6:	b086      	sub	sp, #24
   221b8:	af00      	add	r7, sp, #0
   221ba:	60f8      	str	r0, [r7, #12]
   221bc:	60b9      	str	r1, [r7, #8]
   221be:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   221c0:	4b2d      	ldr	r3, [pc, #180]	; (22278 <nm_write_block+0xc4>)
   221c2:	881a      	ldrh	r2, [r3, #0]
   221c4:	2310      	movs	r3, #16
   221c6:	18fb      	adds	r3, r7, r3
   221c8:	3a08      	subs	r2, #8
   221ca:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   221cc:	2300      	movs	r3, #0
   221ce:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   221d0:	2313      	movs	r3, #19
   221d2:	18fb      	adds	r3, r7, r3
   221d4:	2200      	movs	r2, #0
   221d6:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   221d8:	2310      	movs	r3, #16
   221da:	18fb      	adds	r3, r7, r3
   221dc:	881a      	ldrh	r2, [r3, #0]
   221de:	687b      	ldr	r3, [r7, #4]
   221e0:	429a      	cmp	r2, r3
   221e2:	d313      	bcc.n	2220c <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   221e4:	68ba      	ldr	r2, [r7, #8]
   221e6:	697b      	ldr	r3, [r7, #20]
   221e8:	18d1      	adds	r1, r2, r3
   221ea:	687b      	ldr	r3, [r7, #4]
   221ec:	b29a      	uxth	r2, r3
   221ee:	68fb      	ldr	r3, [r7, #12]
   221f0:	0018      	movs	r0, r3
   221f2:	4b22      	ldr	r3, [pc, #136]	; (2227c <nm_write_block+0xc8>)
   221f4:	4798      	blx	r3
   221f6:	0003      	movs	r3, r0
   221f8:	b2da      	uxtb	r2, r3
   221fa:	2313      	movs	r3, #19
   221fc:	18fb      	adds	r3, r7, r3
   221fe:	781b      	ldrb	r3, [r3, #0]
   22200:	18d3      	adds	r3, r2, r3
   22202:	b2da      	uxtb	r2, r3
   22204:	2313      	movs	r3, #19
   22206:	18fb      	adds	r3, r7, r3
   22208:	701a      	strb	r2, [r3, #0]
			break;
   2220a:	e02d      	b.n	22268 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   2220c:	68ba      	ldr	r2, [r7, #8]
   2220e:	697b      	ldr	r3, [r7, #20]
   22210:	18d1      	adds	r1, r2, r3
   22212:	2310      	movs	r3, #16
   22214:	18fb      	adds	r3, r7, r3
   22216:	881a      	ldrh	r2, [r3, #0]
   22218:	68fb      	ldr	r3, [r7, #12]
   2221a:	0018      	movs	r0, r3
   2221c:	4b17      	ldr	r3, [pc, #92]	; (2227c <nm_write_block+0xc8>)
   2221e:	4798      	blx	r3
   22220:	0003      	movs	r3, r0
   22222:	b2da      	uxtb	r2, r3
   22224:	2313      	movs	r3, #19
   22226:	18fb      	adds	r3, r7, r3
   22228:	781b      	ldrb	r3, [r3, #0]
   2222a:	18d3      	adds	r3, r2, r3
   2222c:	b2da      	uxtb	r2, r3
   2222e:	2313      	movs	r3, #19
   22230:	18fb      	adds	r3, r7, r3
   22232:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   22234:	2313      	movs	r3, #19
   22236:	18fb      	adds	r3, r7, r3
   22238:	781b      	ldrb	r3, [r3, #0]
   2223a:	b25b      	sxtb	r3, r3
   2223c:	2b00      	cmp	r3, #0
   2223e:	d112      	bne.n	22266 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   22240:	2310      	movs	r3, #16
   22242:	18fb      	adds	r3, r7, r3
   22244:	881b      	ldrh	r3, [r3, #0]
   22246:	687a      	ldr	r2, [r7, #4]
   22248:	1ad3      	subs	r3, r2, r3
   2224a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   2224c:	2310      	movs	r3, #16
   2224e:	18fb      	adds	r3, r7, r3
   22250:	881b      	ldrh	r3, [r3, #0]
   22252:	697a      	ldr	r2, [r7, #20]
   22254:	18d3      	adds	r3, r2, r3
   22256:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   22258:	2310      	movs	r3, #16
   2225a:	18fb      	adds	r3, r7, r3
   2225c:	881b      	ldrh	r3, [r3, #0]
   2225e:	68fa      	ldr	r2, [r7, #12]
   22260:	18d3      	adds	r3, r2, r3
   22262:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   22264:	e7b8      	b.n	221d8 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   22266:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   22268:	2313      	movs	r3, #19
   2226a:	18fb      	adds	r3, r7, r3
   2226c:	781b      	ldrb	r3, [r3, #0]
   2226e:	b25b      	sxtb	r3, r3
}
   22270:	0018      	movs	r0, r3
   22272:	46bd      	mov	sp, r7
   22274:	b006      	add	sp, #24
   22276:	bd80      	pop	{r7, pc}
   22278:	200000cc 	.word	0x200000cc
   2227c:	00022189 	.word	0x00022189

00022280 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   22280:	b590      	push	{r4, r7, lr}
   22282:	b089      	sub	sp, #36	; 0x24
   22284:	af00      	add	r7, sp, #0
   22286:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   22288:	2300      	movs	r3, #0
   2228a:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   2228c:	231f      	movs	r3, #31
   2228e:	18fb      	adds	r3, r7, r3
   22290:	2200      	movs	r2, #0
   22292:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   22294:	230c      	movs	r3, #12
   22296:	18fb      	adds	r3, r7, r3
   22298:	0018      	movs	r0, r3
   2229a:	2308      	movs	r3, #8
   2229c:	001a      	movs	r2, r3
   2229e:	2100      	movs	r1, #0
   222a0:	4b64      	ldr	r3, [pc, #400]	; (22434 <nm_get_firmware_full_info+0x1b4>)
   222a2:	4798      	blx	r3
	if (pstrRev != NULL)
   222a4:	687b      	ldr	r3, [r7, #4]
   222a6:	2b00      	cmp	r3, #0
   222a8:	d100      	bne.n	222ac <nm_get_firmware_full_info+0x2c>
   222aa:	e0ba      	b.n	22422 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   222ac:	687b      	ldr	r3, [r7, #4]
   222ae:	2228      	movs	r2, #40	; 0x28
   222b0:	2100      	movs	r1, #0
   222b2:	0018      	movs	r0, r3
   222b4:	4b60      	ldr	r3, [pc, #384]	; (22438 <nm_get_firmware_full_info+0x1b8>)
   222b6:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   222b8:	231f      	movs	r3, #31
   222ba:	18fc      	adds	r4, r7, r3
   222bc:	2314      	movs	r3, #20
   222be:	18fb      	adds	r3, r7, r3
   222c0:	4a5e      	ldr	r2, [pc, #376]	; (2243c <nm_get_firmware_full_info+0x1bc>)
   222c2:	0019      	movs	r1, r3
   222c4:	0010      	movs	r0, r2
   222c6:	4b5e      	ldr	r3, [pc, #376]	; (22440 <nm_get_firmware_full_info+0x1c0>)
   222c8:	4798      	blx	r3
   222ca:	0003      	movs	r3, r0
   222cc:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   222ce:	231f      	movs	r3, #31
   222d0:	18fb      	adds	r3, r7, r3
   222d2:	781b      	ldrb	r3, [r3, #0]
   222d4:	b25b      	sxtb	r3, r3
   222d6:	2b00      	cmp	r3, #0
   222d8:	d000      	beq.n	222dc <nm_get_firmware_full_info+0x5c>
   222da:	e0a2      	b.n	22422 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   222dc:	697b      	ldr	r3, [r7, #20]
   222de:	2b00      	cmp	r3, #0
   222e0:	d100      	bne.n	222e4 <nm_get_firmware_full_info+0x64>
   222e2:	e09a      	b.n	2241a <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   222e4:	697b      	ldr	r3, [r7, #20]
   222e6:	22c0      	movs	r2, #192	; 0xc0
   222e8:	0292      	lsls	r2, r2, #10
   222ea:	4313      	orrs	r3, r2
   222ec:	221f      	movs	r2, #31
   222ee:	18bc      	adds	r4, r7, r2
   222f0:	220c      	movs	r2, #12
   222f2:	18b9      	adds	r1, r7, r2
   222f4:	2208      	movs	r2, #8
   222f6:	0018      	movs	r0, r3
   222f8:	4b52      	ldr	r3, [pc, #328]	; (22444 <nm_get_firmware_full_info+0x1c4>)
   222fa:	4798      	blx	r3
   222fc:	0003      	movs	r3, r0
   222fe:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   22300:	231f      	movs	r3, #31
   22302:	18fb      	adds	r3, r7, r3
   22304:	781b      	ldrb	r3, [r3, #0]
   22306:	b25b      	sxtb	r3, r3
   22308:	2b00      	cmp	r3, #0
   2230a:	d000      	beq.n	2230e <nm_get_firmware_full_info+0x8e>
   2230c:	e089      	b.n	22422 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   2230e:	230c      	movs	r3, #12
   22310:	18fb      	adds	r3, r7, r3
   22312:	685b      	ldr	r3, [r3, #4]
   22314:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   22316:	697b      	ldr	r3, [r7, #20]
   22318:	041b      	lsls	r3, r3, #16
   2231a:	0c1b      	lsrs	r3, r3, #16
   2231c:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   2231e:	697b      	ldr	r3, [r7, #20]
   22320:	2b00      	cmp	r3, #0
   22322:	d100      	bne.n	22326 <nm_get_firmware_full_info+0xa6>
   22324:	e074      	b.n	22410 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   22326:	697b      	ldr	r3, [r7, #20]
   22328:	22c0      	movs	r2, #192	; 0xc0
   2232a:	0292      	lsls	r2, r2, #10
   2232c:	4313      	orrs	r3, r2
   2232e:	221f      	movs	r2, #31
   22330:	18bc      	adds	r4, r7, r2
   22332:	6879      	ldr	r1, [r7, #4]
   22334:	2228      	movs	r2, #40	; 0x28
   22336:	0018      	movs	r0, r3
   22338:	4b42      	ldr	r3, [pc, #264]	; (22444 <nm_get_firmware_full_info+0x1c4>)
   2233a:	4798      	blx	r3
   2233c:	0003      	movs	r3, r0
   2233e:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   22340:	231f      	movs	r3, #31
   22342:	18fb      	adds	r3, r7, r3
   22344:	781b      	ldrb	r3, [r3, #0]
   22346:	b25b      	sxtb	r3, r3
   22348:	2b00      	cmp	r3, #0
   2234a:	d16a      	bne.n	22422 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   2234c:	687b      	ldr	r3, [r7, #4]
   2234e:	791b      	ldrb	r3, [r3, #4]
   22350:	021b      	lsls	r3, r3, #8
   22352:	b21a      	sxth	r2, r3
   22354:	687b      	ldr	r3, [r7, #4]
   22356:	795b      	ldrb	r3, [r3, #5]
   22358:	011b      	lsls	r3, r3, #4
   2235a:	b21b      	sxth	r3, r3
   2235c:	21ff      	movs	r1, #255	; 0xff
   2235e:	400b      	ands	r3, r1
   22360:	b21b      	sxth	r3, r3
   22362:	4313      	orrs	r3, r2
   22364:	b21a      	sxth	r2, r3
   22366:	687b      	ldr	r3, [r7, #4]
   22368:	799b      	ldrb	r3, [r3, #6]
   2236a:	b21b      	sxth	r3, r3
   2236c:	210f      	movs	r1, #15
   2236e:	400b      	ands	r3, r1
   22370:	b21b      	sxth	r3, r3
   22372:	4313      	orrs	r3, r2
   22374:	b21a      	sxth	r2, r3
   22376:	231c      	movs	r3, #28
   22378:	18fb      	adds	r3, r7, r3
   2237a:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   2237c:	231a      	movs	r3, #26
   2237e:	18fb      	adds	r3, r7, r3
   22380:	4a31      	ldr	r2, [pc, #196]	; (22448 <nm_get_firmware_full_info+0x1c8>)
   22382:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   22384:	687b      	ldr	r3, [r7, #4]
   22386:	79db      	ldrb	r3, [r3, #7]
   22388:	021b      	lsls	r3, r3, #8
   2238a:	b21a      	sxth	r2, r3
   2238c:	687b      	ldr	r3, [r7, #4]
   2238e:	7a1b      	ldrb	r3, [r3, #8]
   22390:	011b      	lsls	r3, r3, #4
   22392:	b21b      	sxth	r3, r3
   22394:	21ff      	movs	r1, #255	; 0xff
   22396:	400b      	ands	r3, r1
   22398:	b21b      	sxth	r3, r3
   2239a:	4313      	orrs	r3, r2
   2239c:	b21a      	sxth	r2, r3
   2239e:	687b      	ldr	r3, [r7, #4]
   223a0:	7a5b      	ldrb	r3, [r3, #9]
   223a2:	b21b      	sxth	r3, r3
   223a4:	210f      	movs	r1, #15
   223a6:	400b      	ands	r3, r1
   223a8:	b21b      	sxth	r3, r3
   223aa:	4313      	orrs	r3, r2
   223ac:	b21a      	sxth	r2, r3
   223ae:	2318      	movs	r3, #24
   223b0:	18fb      	adds	r3, r7, r3
   223b2:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   223b4:	231c      	movs	r3, #28
   223b6:	18fb      	adds	r3, r7, r3
   223b8:	881b      	ldrh	r3, [r3, #0]
   223ba:	2b00      	cmp	r3, #0
   223bc:	d009      	beq.n	223d2 <nm_get_firmware_full_info+0x152>
   223be:	2318      	movs	r3, #24
   223c0:	18fb      	adds	r3, r7, r3
   223c2:	881b      	ldrh	r3, [r3, #0]
   223c4:	2b00      	cmp	r3, #0
   223c6:	d004      	beq.n	223d2 <nm_get_firmware_full_info+0x152>
   223c8:	2318      	movs	r3, #24
   223ca:	18fb      	adds	r3, r7, r3
   223cc:	881b      	ldrh	r3, [r3, #0]
   223ce:	2b00      	cmp	r3, #0
   223d0:	d104      	bne.n	223dc <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   223d2:	231f      	movs	r3, #31
   223d4:	18fb      	adds	r3, r7, r3
   223d6:	22f4      	movs	r2, #244	; 0xf4
   223d8:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   223da:	e022      	b.n	22422 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   223dc:	231a      	movs	r3, #26
   223de:	18fa      	adds	r2, r7, r3
   223e0:	2318      	movs	r3, #24
   223e2:	18fb      	adds	r3, r7, r3
   223e4:	8812      	ldrh	r2, [r2, #0]
   223e6:	881b      	ldrh	r3, [r3, #0]
   223e8:	429a      	cmp	r2, r3
   223ea:	d204      	bcs.n	223f6 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   223ec:	231f      	movs	r3, #31
   223ee:	18fb      	adds	r3, r7, r3
   223f0:	22f3      	movs	r2, #243	; 0xf3
   223f2:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   223f4:	e015      	b.n	22422 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   223f6:	231a      	movs	r3, #26
   223f8:	18fa      	adds	r2, r7, r3
   223fa:	231c      	movs	r3, #28
   223fc:	18fb      	adds	r3, r7, r3
   223fe:	8812      	ldrh	r2, [r2, #0]
   22400:	881b      	ldrh	r3, [r3, #0]
   22402:	429a      	cmp	r2, r3
   22404:	d90d      	bls.n	22422 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   22406:	231f      	movs	r3, #31
   22408:	18fb      	adds	r3, r7, r3
   2240a:	22f3      	movs	r2, #243	; 0xf3
   2240c:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   2240e:	e008      	b.n	22422 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   22410:	231f      	movs	r3, #31
   22412:	18fb      	adds	r3, r7, r3
   22414:	22f4      	movs	r2, #244	; 0xf4
   22416:	701a      	strb	r2, [r3, #0]
   22418:	e003      	b.n	22422 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   2241a:	231f      	movs	r3, #31
   2241c:	18fb      	adds	r3, r7, r3
   2241e:	22f4      	movs	r2, #244	; 0xf4
   22420:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   22422:	231f      	movs	r3, #31
   22424:	18fb      	adds	r3, r7, r3
   22426:	781b      	ldrb	r3, [r3, #0]
   22428:	b25b      	sxtb	r3, r3
}
   2242a:	0018      	movs	r0, r3
   2242c:	46bd      	mov	sp, r7
   2242e:	b009      	add	sp, #36	; 0x24
   22430:	bd90      	pop	{r4, r7, pc}
   22432:	46c0      	nop			; (mov r8, r8)
   22434:	000339ff 	.word	0x000339ff
   22438:	0001ffb9 	.word	0x0001ffb9
   2243c:	000c0008 	.word	0x000c0008
   22440:	00022049 	.word	0x00022049
   22444:	000220bd 	.word	0x000220bd
   22448:	00001354 	.word	0x00001354

0002244c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   2244c:	b590      	push	{r4, r7, lr}
   2244e:	b085      	sub	sp, #20
   22450:	af00      	add	r7, sp, #0
   22452:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22454:	230f      	movs	r3, #15
   22456:	18fb      	adds	r3, r7, r3
   22458:	2200      	movs	r2, #0
   2245a:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   2245c:	687b      	ldr	r3, [r7, #4]
   2245e:	2b00      	cmp	r3, #0
   22460:	d013      	beq.n	2248a <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   22462:	230e      	movs	r3, #14
   22464:	18fb      	adds	r3, r7, r3
   22466:	687a      	ldr	r2, [r7, #4]
   22468:	7812      	ldrb	r2, [r2, #0]
   2246a:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   2246c:	230e      	movs	r3, #14
   2246e:	18fb      	adds	r3, r7, r3
   22470:	781b      	ldrb	r3, [r3, #0]
   22472:	2b00      	cmp	r3, #0
   22474:	d004      	beq.n	22480 <nm_drv_init+0x34>
   22476:	230e      	movs	r3, #14
   22478:	18fb      	adds	r3, r7, r3
   2247a:	781b      	ldrb	r3, [r3, #0]
   2247c:	2b04      	cmp	r3, #4
   2247e:	d908      	bls.n	22492 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   22480:	230e      	movs	r3, #14
   22482:	18fb      	adds	r3, r7, r3
   22484:	2201      	movs	r2, #1
   22486:	701a      	strb	r2, [r3, #0]
   22488:	e003      	b.n	22492 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   2248a:	230e      	movs	r3, #14
   2248c:	18fb      	adds	r3, r7, r3
   2248e:	2201      	movs	r2, #1
   22490:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   22492:	230f      	movs	r3, #15
   22494:	18fc      	adds	r4, r7, r3
   22496:	2000      	movs	r0, #0
   22498:	4b41      	ldr	r3, [pc, #260]	; (225a0 <nm_drv_init+0x154>)
   2249a:	4798      	blx	r3
   2249c:	0003      	movs	r3, r0
   2249e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   224a0:	230f      	movs	r3, #15
   224a2:	18fb      	adds	r3, r7, r3
   224a4:	781b      	ldrb	r3, [r3, #0]
   224a6:	b25b      	sxtb	r3, r3
   224a8:	2b00      	cmp	r3, #0
   224aa:	d00f      	beq.n	224cc <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   224ac:	2390      	movs	r3, #144	; 0x90
   224ae:	005a      	lsls	r2, r3, #1
   224b0:	493c      	ldr	r1, [pc, #240]	; (225a4 <nm_drv_init+0x158>)
   224b2:	4b3d      	ldr	r3, [pc, #244]	; (225a8 <nm_drv_init+0x15c>)
   224b4:	0018      	movs	r0, r3
   224b6:	4b3d      	ldr	r3, [pc, #244]	; (225ac <nm_drv_init+0x160>)
   224b8:	4798      	blx	r3
   224ba:	4b3d      	ldr	r3, [pc, #244]	; (225b0 <nm_drv_init+0x164>)
   224bc:	0018      	movs	r0, r3
   224be:	4b3b      	ldr	r3, [pc, #236]	; (225ac <nm_drv_init+0x160>)
   224c0:	4798      	blx	r3
   224c2:	4b3c      	ldr	r3, [pc, #240]	; (225b4 <nm_drv_init+0x168>)
   224c4:	0018      	movs	r0, r3
   224c6:	4b39      	ldr	r3, [pc, #228]	; (225ac <nm_drv_init+0x160>)
   224c8:	4798      	blx	r3
		goto ERR1;
   224ca:	e061      	b.n	22590 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   224cc:	4b3a      	ldr	r3, [pc, #232]	; (225b8 <nm_drv_init+0x16c>)
   224ce:	0018      	movs	r0, r3
   224d0:	4b36      	ldr	r3, [pc, #216]	; (225ac <nm_drv_init+0x160>)
   224d2:	4798      	blx	r3
   224d4:	4b39      	ldr	r3, [pc, #228]	; (225bc <nm_drv_init+0x170>)
   224d6:	4798      	blx	r3
   224d8:	0002      	movs	r2, r0
   224da:	4b39      	ldr	r3, [pc, #228]	; (225c0 <nm_drv_init+0x174>)
   224dc:	0011      	movs	r1, r2
   224de:	0018      	movs	r0, r3
   224e0:	4b32      	ldr	r3, [pc, #200]	; (225ac <nm_drv_init+0x160>)
   224e2:	4798      	blx	r3
   224e4:	4b33      	ldr	r3, [pc, #204]	; (225b4 <nm_drv_init+0x168>)
   224e6:	0018      	movs	r0, r3
   224e8:	4b30      	ldr	r3, [pc, #192]	; (225ac <nm_drv_init+0x160>)
   224ea:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   224ec:	4b35      	ldr	r3, [pc, #212]	; (225c4 <nm_drv_init+0x178>)
   224ee:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   224f0:	230f      	movs	r3, #15
   224f2:	18fc      	adds	r4, r7, r3
   224f4:	230e      	movs	r3, #14
   224f6:	18fb      	adds	r3, r7, r3
   224f8:	781b      	ldrb	r3, [r3, #0]
   224fa:	0018      	movs	r0, r3
   224fc:	4b32      	ldr	r3, [pc, #200]	; (225c8 <nm_drv_init+0x17c>)
   224fe:	4798      	blx	r3
   22500:	0003      	movs	r3, r0
   22502:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22504:	230f      	movs	r3, #15
   22506:	18fb      	adds	r3, r7, r3
   22508:	781b      	ldrb	r3, [r3, #0]
   2250a:	b25b      	sxtb	r3, r3
   2250c:	2b00      	cmp	r3, #0
   2250e:	d13a      	bne.n	22586 <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   22510:	230f      	movs	r3, #15
   22512:	18fc      	adds	r4, r7, r3
   22514:	230e      	movs	r3, #14
   22516:	18fb      	adds	r3, r7, r3
   22518:	781b      	ldrb	r3, [r3, #0]
   2251a:	0018      	movs	r0, r3
   2251c:	4b2b      	ldr	r3, [pc, #172]	; (225cc <nm_drv_init+0x180>)
   2251e:	4798      	blx	r3
   22520:	0003      	movs	r3, r0
   22522:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22524:	230f      	movs	r3, #15
   22526:	18fb      	adds	r3, r7, r3
   22528:	781b      	ldrb	r3, [r3, #0]
   2252a:	b25b      	sxtb	r3, r3
   2252c:	2b00      	cmp	r3, #0
   2252e:	d12c      	bne.n	2258a <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   22530:	230e      	movs	r3, #14
   22532:	18fb      	adds	r3, r7, r3
   22534:	781b      	ldrb	r3, [r3, #0]
   22536:	2b02      	cmp	r3, #2
   22538:	d02a      	beq.n	22590 <nm_drv_init+0x144>
   2253a:	230e      	movs	r3, #14
   2253c:	18fb      	adds	r3, r7, r3
   2253e:	781b      	ldrb	r3, [r3, #0]
   22540:	2b03      	cmp	r3, #3
   22542:	d025      	beq.n	22590 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   22544:	230f      	movs	r3, #15
   22546:	18fc      	adds	r4, r7, r3
   22548:	4b21      	ldr	r3, [pc, #132]	; (225d0 <nm_drv_init+0x184>)
   2254a:	4798      	blx	r3
   2254c:	0003      	movs	r3, r0
   2254e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22550:	230f      	movs	r3, #15
   22552:	18fb      	adds	r3, r7, r3
   22554:	781b      	ldrb	r3, [r3, #0]
   22556:	b25b      	sxtb	r3, r3
   22558:	2b00      	cmp	r3, #0
   2255a:	d00f      	beq.n	2257c <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   2255c:	23a7      	movs	r3, #167	; 0xa7
   2255e:	005a      	lsls	r2, r3, #1
   22560:	4910      	ldr	r1, [pc, #64]	; (225a4 <nm_drv_init+0x158>)
   22562:	4b11      	ldr	r3, [pc, #68]	; (225a8 <nm_drv_init+0x15c>)
   22564:	0018      	movs	r0, r3
   22566:	4b11      	ldr	r3, [pc, #68]	; (225ac <nm_drv_init+0x160>)
   22568:	4798      	blx	r3
   2256a:	4b1a      	ldr	r3, [pc, #104]	; (225d4 <nm_drv_init+0x188>)
   2256c:	0018      	movs	r0, r3
   2256e:	4b0f      	ldr	r3, [pc, #60]	; (225ac <nm_drv_init+0x160>)
   22570:	4798      	blx	r3
   22572:	4b10      	ldr	r3, [pc, #64]	; (225b4 <nm_drv_init+0x168>)
   22574:	0018      	movs	r0, r3
   22576:	4b0d      	ldr	r3, [pc, #52]	; (225ac <nm_drv_init+0x160>)
   22578:	4798      	blx	r3
		goto ERR2;
   2257a:	e007      	b.n	2258c <nm_drv_init+0x140>
	}
	return ret;
   2257c:	230f      	movs	r3, #15
   2257e:	18fb      	adds	r3, r7, r3
   22580:	781b      	ldrb	r3, [r3, #0]
   22582:	b25b      	sxtb	r3, r3
   22584:	e008      	b.n	22598 <nm_drv_init+0x14c>
		goto ERR2;
   22586:	46c0      	nop			; (mov r8, r8)
   22588:	e000      	b.n	2258c <nm_drv_init+0x140>
		goto ERR2;
   2258a:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   2258c:	4b12      	ldr	r3, [pc, #72]	; (225d8 <nm_drv_init+0x18c>)
   2258e:	4798      	blx	r3
ERR1:
	return ret;
   22590:	230f      	movs	r3, #15
   22592:	18fb      	adds	r3, r7, r3
   22594:	781b      	ldrb	r3, [r3, #0]
   22596:	b25b      	sxtb	r3, r3
}
   22598:	0018      	movs	r0, r3
   2259a:	46bd      	mov	sp, r7
   2259c:	b005      	add	sp, #20
   2259e:	bd90      	pop	{r4, r7, pc}
   225a0:	00021fad 	.word	0x00021fad
   225a4:	00037a84 	.word	0x00037a84
   225a8:	000379b4 	.word	0x000379b4
   225ac:	0001d28d 	.word	0x0001d28d
   225b0:	000379c8 	.word	0x000379c8
   225b4:	000379e4 	.word	0x000379e4
   225b8:	000379e8 	.word	0x000379e8
   225bc:	00021949 	.word	0x00021949
   225c0:	000379f4 	.word	0x000379f4
   225c4:	00023e65 	.word	0x00023e65
   225c8:	00021ca1 	.word	0x00021ca1
   225cc:	00021e39 	.word	0x00021e39
   225d0:	00021895 	.word	0x00021895
   225d4:	00037a04 	.word	0x00037a04
   225d8:	00021fe1 	.word	0x00021fe1

000225dc <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   225dc:	b590      	push	{r4, r7, lr}
   225de:	b085      	sub	sp, #20
   225e0:	af00      	add	r7, sp, #0
   225e2:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   225e4:	230f      	movs	r3, #15
   225e6:	18fc      	adds	r4, r7, r3
   225e8:	4b2e      	ldr	r3, [pc, #184]	; (226a4 <nm_drv_deinit+0xc8>)
   225ea:	4798      	blx	r3
   225ec:	0003      	movs	r3, r0
   225ee:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   225f0:	230f      	movs	r3, #15
   225f2:	18fb      	adds	r3, r7, r3
   225f4:	781b      	ldrb	r3, [r3, #0]
   225f6:	b25b      	sxtb	r3, r3
   225f8:	2b00      	cmp	r3, #0
   225fa:	d010      	beq.n	2261e <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   225fc:	2366      	movs	r3, #102	; 0x66
   225fe:	33ff      	adds	r3, #255	; 0xff
   22600:	001a      	movs	r2, r3
   22602:	4929      	ldr	r1, [pc, #164]	; (226a8 <nm_drv_deinit+0xcc>)
   22604:	4b29      	ldr	r3, [pc, #164]	; (226ac <nm_drv_deinit+0xd0>)
   22606:	0018      	movs	r0, r3
   22608:	4b29      	ldr	r3, [pc, #164]	; (226b0 <nm_drv_deinit+0xd4>)
   2260a:	4798      	blx	r3
   2260c:	4b29      	ldr	r3, [pc, #164]	; (226b4 <nm_drv_deinit+0xd8>)
   2260e:	0018      	movs	r0, r3
   22610:	4b27      	ldr	r3, [pc, #156]	; (226b0 <nm_drv_deinit+0xd4>)
   22612:	4798      	blx	r3
   22614:	4b28      	ldr	r3, [pc, #160]	; (226b8 <nm_drv_deinit+0xdc>)
   22616:	0018      	movs	r0, r3
   22618:	4b25      	ldr	r3, [pc, #148]	; (226b0 <nm_drv_deinit+0xd4>)
   2261a:	4798      	blx	r3
		goto ERR1;
   2261c:	e03a      	b.n	22694 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   2261e:	230f      	movs	r3, #15
   22620:	18fc      	adds	r4, r7, r3
   22622:	2000      	movs	r0, #0
   22624:	4b25      	ldr	r3, [pc, #148]	; (226bc <nm_drv_deinit+0xe0>)
   22626:	4798      	blx	r3
   22628:	0003      	movs	r3, r0
   2262a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2262c:	230f      	movs	r3, #15
   2262e:	18fb      	adds	r3, r7, r3
   22630:	781b      	ldrb	r3, [r3, #0]
   22632:	b25b      	sxtb	r3, r3
   22634:	2b00      	cmp	r3, #0
   22636:	d00f      	beq.n	22658 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   22638:	23b6      	movs	r3, #182	; 0xb6
   2263a:	005a      	lsls	r2, r3, #1
   2263c:	491a      	ldr	r1, [pc, #104]	; (226a8 <nm_drv_deinit+0xcc>)
   2263e:	4b1b      	ldr	r3, [pc, #108]	; (226ac <nm_drv_deinit+0xd0>)
   22640:	0018      	movs	r0, r3
   22642:	4b1b      	ldr	r3, [pc, #108]	; (226b0 <nm_drv_deinit+0xd4>)
   22644:	4798      	blx	r3
   22646:	4b1e      	ldr	r3, [pc, #120]	; (226c0 <nm_drv_deinit+0xe4>)
   22648:	0018      	movs	r0, r3
   2264a:	4b19      	ldr	r3, [pc, #100]	; (226b0 <nm_drv_deinit+0xd4>)
   2264c:	4798      	blx	r3
   2264e:	4b1a      	ldr	r3, [pc, #104]	; (226b8 <nm_drv_deinit+0xdc>)
   22650:	0018      	movs	r0, r3
   22652:	4b17      	ldr	r3, [pc, #92]	; (226b0 <nm_drv_deinit+0xd4>)
   22654:	4798      	blx	r3
		goto ERR1;
   22656:	e01d      	b.n	22694 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   22658:	230f      	movs	r3, #15
   2265a:	18fc      	adds	r4, r7, r3
   2265c:	4b19      	ldr	r3, [pc, #100]	; (226c4 <nm_drv_deinit+0xe8>)
   2265e:	4798      	blx	r3
   22660:	0003      	movs	r3, r0
   22662:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22664:	230f      	movs	r3, #15
   22666:	18fb      	adds	r3, r7, r3
   22668:	781b      	ldrb	r3, [r3, #0]
   2266a:	b25b      	sxtb	r3, r3
   2266c:	2b00      	cmp	r3, #0
   2266e:	d00f      	beq.n	22690 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   22670:	23b9      	movs	r3, #185	; 0xb9
   22672:	005a      	lsls	r2, r3, #1
   22674:	490c      	ldr	r1, [pc, #48]	; (226a8 <nm_drv_deinit+0xcc>)
   22676:	4b0d      	ldr	r3, [pc, #52]	; (226ac <nm_drv_deinit+0xd0>)
   22678:	0018      	movs	r0, r3
   2267a:	4b0d      	ldr	r3, [pc, #52]	; (226b0 <nm_drv_deinit+0xd4>)
   2267c:	4798      	blx	r3
   2267e:	4b12      	ldr	r3, [pc, #72]	; (226c8 <nm_drv_deinit+0xec>)
   22680:	0018      	movs	r0, r3
   22682:	4b0b      	ldr	r3, [pc, #44]	; (226b0 <nm_drv_deinit+0xd4>)
   22684:	4798      	blx	r3
   22686:	4b0c      	ldr	r3, [pc, #48]	; (226b8 <nm_drv_deinit+0xdc>)
   22688:	0018      	movs	r0, r3
   2268a:	4b09      	ldr	r3, [pc, #36]	; (226b0 <nm_drv_deinit+0xd4>)
   2268c:	4798      	blx	r3
		goto ERR1;
   2268e:	e001      	b.n	22694 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   22690:	4b0e      	ldr	r3, [pc, #56]	; (226cc <nm_drv_deinit+0xf0>)
   22692:	4798      	blx	r3
#endif

ERR1:
	return ret;
   22694:	230f      	movs	r3, #15
   22696:	18fb      	adds	r3, r7, r3
   22698:	781b      	ldrb	r3, [r3, #0]
   2269a:	b25b      	sxtb	r3, r3
}
   2269c:	0018      	movs	r0, r3
   2269e:	46bd      	mov	sp, r7
   226a0:	b005      	add	sp, #20
   226a2:	bd90      	pop	{r4, r7, pc}
   226a4:	00021eed 	.word	0x00021eed
   226a8:	00037a90 	.word	0x00037a90
   226ac:	000379b4 	.word	0x000379b4
   226b0:	0001d28d 	.word	0x0001d28d
   226b4:	00037a24 	.word	0x00037a24
   226b8:	000379e4 	.word	0x000379e4
   226bc:	0002530d 	.word	0x0002530d
   226c0:	00037a44 	.word	0x00037a44
   226c4:	00021fe1 	.word	0x00021fe1
   226c8:	00037a68 	.word	0x00037a68
   226cc:	00023fb1 	.word	0x00023fb1

000226d0 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   226d0:	b580      	push	{r7, lr}
   226d2:	b086      	sub	sp, #24
   226d4:	af00      	add	r7, sp, #0
   226d6:	6078      	str	r0, [r7, #4]
   226d8:	000a      	movs	r2, r1
   226da:	1cbb      	adds	r3, r7, #2
   226dc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   226de:	230c      	movs	r3, #12
   226e0:	18fb      	adds	r3, r7, r3
   226e2:	2200      	movs	r2, #0
   226e4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   226e6:	230c      	movs	r3, #12
   226e8:	18fb      	adds	r3, r7, r3
   226ea:	687a      	ldr	r2, [r7, #4]
   226ec:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   226ee:	230c      	movs	r3, #12
   226f0:	18fb      	adds	r3, r7, r3
   226f2:	1cba      	adds	r2, r7, #2
   226f4:	8812      	ldrh	r2, [r2, #0]
   226f6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   226f8:	230c      	movs	r3, #12
   226fa:	18fb      	adds	r3, r7, r3
   226fc:	0019      	movs	r1, r3
   226fe:	2003      	movs	r0, #3
   22700:	4b03      	ldr	r3, [pc, #12]	; (22710 <nmi_spi_read+0x40>)
   22702:	4798      	blx	r3
   22704:	0003      	movs	r3, r0
}
   22706:	0018      	movs	r0, r3
   22708:	46bd      	mov	sp, r7
   2270a:	b006      	add	sp, #24
   2270c:	bd80      	pop	{r7, pc}
   2270e:	46c0      	nop			; (mov r8, r8)
   22710:	0001fe7d 	.word	0x0001fe7d

00022714 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   22714:	b580      	push	{r7, lr}
   22716:	b086      	sub	sp, #24
   22718:	af00      	add	r7, sp, #0
   2271a:	6078      	str	r0, [r7, #4]
   2271c:	000a      	movs	r2, r1
   2271e:	1cbb      	adds	r3, r7, #2
   22720:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   22722:	230c      	movs	r3, #12
   22724:	18fb      	adds	r3, r7, r3
   22726:	687a      	ldr	r2, [r7, #4]
   22728:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   2272a:	230c      	movs	r3, #12
   2272c:	18fb      	adds	r3, r7, r3
   2272e:	2200      	movs	r2, #0
   22730:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22732:	230c      	movs	r3, #12
   22734:	18fb      	adds	r3, r7, r3
   22736:	1cba      	adds	r2, r7, #2
   22738:	8812      	ldrh	r2, [r2, #0]
   2273a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   2273c:	230c      	movs	r3, #12
   2273e:	18fb      	adds	r3, r7, r3
   22740:	0019      	movs	r1, r3
   22742:	2003      	movs	r0, #3
   22744:	4b03      	ldr	r3, [pc, #12]	; (22754 <nmi_spi_write+0x40>)
   22746:	4798      	blx	r3
   22748:	0003      	movs	r3, r0
}
   2274a:	0018      	movs	r0, r3
   2274c:	46bd      	mov	sp, r7
   2274e:	b006      	add	sp, #24
   22750:	bd80      	pop	{r7, pc}
   22752:	46c0      	nop			; (mov r8, r8)
   22754:	0001fe7d 	.word	0x0001fe7d

00022758 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   22758:	b580      	push	{r7, lr}
   2275a:	b088      	sub	sp, #32
   2275c:	af00      	add	r7, sp, #0
   2275e:	60f8      	str	r0, [r7, #12]
   22760:	60b9      	str	r1, [r7, #8]
   22762:	1dbb      	adds	r3, r7, #6
   22764:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   22766:	2314      	movs	r3, #20
   22768:	18fb      	adds	r3, r7, r3
   2276a:	68fa      	ldr	r2, [r7, #12]
   2276c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   2276e:	2314      	movs	r3, #20
   22770:	18fb      	adds	r3, r7, r3
   22772:	68ba      	ldr	r2, [r7, #8]
   22774:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22776:	2314      	movs	r3, #20
   22778:	18fb      	adds	r3, r7, r3
   2277a:	1dba      	adds	r2, r7, #6
   2277c:	8812      	ldrh	r2, [r2, #0]
   2277e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   22780:	2314      	movs	r3, #20
   22782:	18fb      	adds	r3, r7, r3
   22784:	0019      	movs	r1, r3
   22786:	2003      	movs	r0, #3
   22788:	4b03      	ldr	r3, [pc, #12]	; (22798 <nmi_spi_rw+0x40>)
   2278a:	4798      	blx	r3
   2278c:	0003      	movs	r3, r0
}
   2278e:	0018      	movs	r0, r3
   22790:	46bd      	mov	sp, r7
   22792:	b008      	add	sp, #32
   22794:	bd80      	pop	{r7, pc}
   22796:	46c0      	nop			; (mov r8, r8)
   22798:	0001fe7d 	.word	0x0001fe7d

0002279c <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   2279c:	b580      	push	{r7, lr}
   2279e:	b082      	sub	sp, #8
   227a0:	af00      	add	r7, sp, #0
   227a2:	0002      	movs	r2, r0
   227a4:	1dfb      	adds	r3, r7, #7
   227a6:	701a      	strb	r2, [r3, #0]
   227a8:	1dbb      	adds	r3, r7, #6
   227aa:	1c0a      	adds	r2, r1, #0
   227ac:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   227ae:	1dfb      	adds	r3, r7, #7
   227b0:	781b      	ldrb	r3, [r3, #0]
   227b2:	005a      	lsls	r2, r3, #1
   227b4:	1dbb      	adds	r3, r7, #6
   227b6:	781b      	ldrb	r3, [r3, #0]
   227b8:	4053      	eors	r3, r2
   227ba:	4a03      	ldr	r2, [pc, #12]	; (227c8 <crc7_byte+0x2c>)
   227bc:	5cd3      	ldrb	r3, [r2, r3]
}
   227be:	0018      	movs	r0, r3
   227c0:	46bd      	mov	sp, r7
   227c2:	b002      	add	sp, #8
   227c4:	bd80      	pop	{r7, pc}
   227c6:	46c0      	nop			; (mov r8, r8)
   227c8:	00037aa0 	.word	0x00037aa0

000227cc <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   227cc:	b590      	push	{r4, r7, lr}
   227ce:	b085      	sub	sp, #20
   227d0:	af00      	add	r7, sp, #0
   227d2:	60b9      	str	r1, [r7, #8]
   227d4:	607a      	str	r2, [r7, #4]
   227d6:	230f      	movs	r3, #15
   227d8:	18fb      	adds	r3, r7, r3
   227da:	1c02      	adds	r2, r0, #0
   227dc:	701a      	strb	r2, [r3, #0]
	while (len--)
   227de:	e00e      	b.n	227fe <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   227e0:	68bb      	ldr	r3, [r7, #8]
   227e2:	1c5a      	adds	r2, r3, #1
   227e4:	60ba      	str	r2, [r7, #8]
   227e6:	781a      	ldrb	r2, [r3, #0]
   227e8:	230f      	movs	r3, #15
   227ea:	18fc      	adds	r4, r7, r3
   227ec:	230f      	movs	r3, #15
   227ee:	18fb      	adds	r3, r7, r3
   227f0:	781b      	ldrb	r3, [r3, #0]
   227f2:	0011      	movs	r1, r2
   227f4:	0018      	movs	r0, r3
   227f6:	4b08      	ldr	r3, [pc, #32]	; (22818 <crc7+0x4c>)
   227f8:	4798      	blx	r3
   227fa:	0003      	movs	r3, r0
   227fc:	7023      	strb	r3, [r4, #0]
	while (len--)
   227fe:	687b      	ldr	r3, [r7, #4]
   22800:	1e5a      	subs	r2, r3, #1
   22802:	607a      	str	r2, [r7, #4]
   22804:	2b00      	cmp	r3, #0
   22806:	d1eb      	bne.n	227e0 <crc7+0x14>
	return crc;
   22808:	230f      	movs	r3, #15
   2280a:	18fb      	adds	r3, r7, r3
   2280c:	781b      	ldrb	r3, [r3, #0]
}
   2280e:	0018      	movs	r0, r3
   22810:	46bd      	mov	sp, r7
   22812:	b005      	add	sp, #20
   22814:	bd90      	pop	{r4, r7, pc}
   22816:	46c0      	nop			; (mov r8, r8)
   22818:	0002279d 	.word	0x0002279d

0002281c <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   2281c:	b590      	push	{r4, r7, lr}
   2281e:	b089      	sub	sp, #36	; 0x24
   22820:	af00      	add	r7, sp, #0
   22822:	60b9      	str	r1, [r7, #8]
   22824:	607a      	str	r2, [r7, #4]
   22826:	603b      	str	r3, [r7, #0]
   22828:	230f      	movs	r3, #15
   2282a:	18fb      	adds	r3, r7, r3
   2282c:	1c02      	adds	r2, r0, #0
   2282e:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   22830:	231f      	movs	r3, #31
   22832:	18fb      	adds	r3, r7, r3
   22834:	2205      	movs	r2, #5
   22836:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   22838:	231e      	movs	r3, #30
   2283a:	18fb      	adds	r3, r7, r3
   2283c:	2201      	movs	r2, #1
   2283e:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   22840:	2314      	movs	r3, #20
   22842:	18fb      	adds	r3, r7, r3
   22844:	220f      	movs	r2, #15
   22846:	18ba      	adds	r2, r7, r2
   22848:	7812      	ldrb	r2, [r2, #0]
   2284a:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   2284c:	230f      	movs	r3, #15
   2284e:	18fb      	adds	r3, r7, r3
   22850:	781b      	ldrb	r3, [r3, #0]
   22852:	3bc1      	subs	r3, #193	; 0xc1
   22854:	2b0e      	cmp	r3, #14
   22856:	d900      	bls.n	2285a <spi_cmd+0x3e>
   22858:	e11b      	b.n	22a92 <spi_cmd+0x276>
   2285a:	009a      	lsls	r2, r3, #2
   2285c:	4bb6      	ldr	r3, [pc, #728]	; (22b38 <spi_cmd+0x31c>)
   2285e:	18d3      	adds	r3, r2, r3
   22860:	681b      	ldr	r3, [r3, #0]
   22862:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   22864:	68bb      	ldr	r3, [r7, #8]
   22866:	0c1b      	lsrs	r3, r3, #16
   22868:	b2da      	uxtb	r2, r3
   2286a:	2314      	movs	r3, #20
   2286c:	18fb      	adds	r3, r7, r3
   2286e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22870:	68bb      	ldr	r3, [r7, #8]
   22872:	0a1b      	lsrs	r3, r3, #8
   22874:	b2da      	uxtb	r2, r3
   22876:	2314      	movs	r3, #20
   22878:	18fb      	adds	r3, r7, r3
   2287a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2287c:	68bb      	ldr	r3, [r7, #8]
   2287e:	b2da      	uxtb	r2, r3
   22880:	2314      	movs	r3, #20
   22882:	18fb      	adds	r3, r7, r3
   22884:	70da      	strb	r2, [r3, #3]
		len = 5;
   22886:	231f      	movs	r3, #31
   22888:	18fb      	adds	r3, r7, r3
   2288a:	2205      	movs	r2, #5
   2288c:	701a      	strb	r2, [r3, #0]
		break;
   2288e:	e105      	b.n	22a9c <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   22890:	68bb      	ldr	r3, [r7, #8]
   22892:	0a1b      	lsrs	r3, r3, #8
   22894:	b2da      	uxtb	r2, r3
   22896:	2314      	movs	r3, #20
   22898:	18fb      	adds	r3, r7, r3
   2289a:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   2289c:	2330      	movs	r3, #48	; 0x30
   2289e:	18fb      	adds	r3, r7, r3
   228a0:	781b      	ldrb	r3, [r3, #0]
   228a2:	2b00      	cmp	r3, #0
   228a4:	d009      	beq.n	228ba <spi_cmd+0x9e>
   228a6:	2314      	movs	r3, #20
   228a8:	18fb      	adds	r3, r7, r3
   228aa:	785b      	ldrb	r3, [r3, #1]
   228ac:	2280      	movs	r2, #128	; 0x80
   228ae:	4252      	negs	r2, r2
   228b0:	4313      	orrs	r3, r2
   228b2:	b2da      	uxtb	r2, r3
   228b4:	2314      	movs	r3, #20
   228b6:	18fb      	adds	r3, r7, r3
   228b8:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   228ba:	68bb      	ldr	r3, [r7, #8]
   228bc:	b2da      	uxtb	r2, r3
   228be:	2314      	movs	r3, #20
   228c0:	18fb      	adds	r3, r7, r3
   228c2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   228c4:	2314      	movs	r3, #20
   228c6:	18fb      	adds	r3, r7, r3
   228c8:	2200      	movs	r2, #0
   228ca:	70da      	strb	r2, [r3, #3]
		len = 5;
   228cc:	231f      	movs	r3, #31
   228ce:	18fb      	adds	r3, r7, r3
   228d0:	2205      	movs	r2, #5
   228d2:	701a      	strb	r2, [r3, #0]
		break;
   228d4:	e0e2      	b.n	22a9c <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   228d6:	2314      	movs	r3, #20
   228d8:	18fb      	adds	r3, r7, r3
   228da:	2200      	movs	r2, #0
   228dc:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   228de:	2314      	movs	r3, #20
   228e0:	18fb      	adds	r3, r7, r3
   228e2:	2200      	movs	r2, #0
   228e4:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   228e6:	2314      	movs	r3, #20
   228e8:	18fb      	adds	r3, r7, r3
   228ea:	2200      	movs	r2, #0
   228ec:	70da      	strb	r2, [r3, #3]
		len = 5;
   228ee:	231f      	movs	r3, #31
   228f0:	18fb      	adds	r3, r7, r3
   228f2:	2205      	movs	r2, #5
   228f4:	701a      	strb	r2, [r3, #0]
		break;
   228f6:	e0d1      	b.n	22a9c <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   228f8:	2314      	movs	r3, #20
   228fa:	18fb      	adds	r3, r7, r3
   228fc:	2200      	movs	r2, #0
   228fe:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   22900:	2314      	movs	r3, #20
   22902:	18fb      	adds	r3, r7, r3
   22904:	2200      	movs	r2, #0
   22906:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   22908:	2314      	movs	r3, #20
   2290a:	18fb      	adds	r3, r7, r3
   2290c:	2200      	movs	r2, #0
   2290e:	70da      	strb	r2, [r3, #3]
		len = 5;
   22910:	231f      	movs	r3, #31
   22912:	18fb      	adds	r3, r7, r3
   22914:	2205      	movs	r2, #5
   22916:	701a      	strb	r2, [r3, #0]
		break;
   22918:	e0c0      	b.n	22a9c <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   2291a:	2314      	movs	r3, #20
   2291c:	18fb      	adds	r3, r7, r3
   2291e:	22ff      	movs	r2, #255	; 0xff
   22920:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   22922:	2314      	movs	r3, #20
   22924:	18fb      	adds	r3, r7, r3
   22926:	22ff      	movs	r2, #255	; 0xff
   22928:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   2292a:	2314      	movs	r3, #20
   2292c:	18fb      	adds	r3, r7, r3
   2292e:	22ff      	movs	r2, #255	; 0xff
   22930:	70da      	strb	r2, [r3, #3]
		len = 5;
   22932:	231f      	movs	r3, #31
   22934:	18fb      	adds	r3, r7, r3
   22936:	2205      	movs	r2, #5
   22938:	701a      	strb	r2, [r3, #0]
		break;
   2293a:	e0af      	b.n	22a9c <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   2293c:	68bb      	ldr	r3, [r7, #8]
   2293e:	0c1b      	lsrs	r3, r3, #16
   22940:	b2da      	uxtb	r2, r3
   22942:	2314      	movs	r3, #20
   22944:	18fb      	adds	r3, r7, r3
   22946:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22948:	68bb      	ldr	r3, [r7, #8]
   2294a:	0a1b      	lsrs	r3, r3, #8
   2294c:	b2da      	uxtb	r2, r3
   2294e:	2314      	movs	r3, #20
   22950:	18fb      	adds	r3, r7, r3
   22952:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   22954:	68bb      	ldr	r3, [r7, #8]
   22956:	b2da      	uxtb	r2, r3
   22958:	2314      	movs	r3, #20
   2295a:	18fb      	adds	r3, r7, r3
   2295c:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   2295e:	683b      	ldr	r3, [r7, #0]
   22960:	0a1b      	lsrs	r3, r3, #8
   22962:	b2da      	uxtb	r2, r3
   22964:	2314      	movs	r3, #20
   22966:	18fb      	adds	r3, r7, r3
   22968:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   2296a:	683b      	ldr	r3, [r7, #0]
   2296c:	b2da      	uxtb	r2, r3
   2296e:	2314      	movs	r3, #20
   22970:	18fb      	adds	r3, r7, r3
   22972:	715a      	strb	r2, [r3, #5]
		len = 7;
   22974:	231f      	movs	r3, #31
   22976:	18fb      	adds	r3, r7, r3
   22978:	2207      	movs	r2, #7
   2297a:	701a      	strb	r2, [r3, #0]
		break;
   2297c:	e08e      	b.n	22a9c <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   2297e:	68bb      	ldr	r3, [r7, #8]
   22980:	0c1b      	lsrs	r3, r3, #16
   22982:	b2da      	uxtb	r2, r3
   22984:	2314      	movs	r3, #20
   22986:	18fb      	adds	r3, r7, r3
   22988:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2298a:	68bb      	ldr	r3, [r7, #8]
   2298c:	0a1b      	lsrs	r3, r3, #8
   2298e:	b2da      	uxtb	r2, r3
   22990:	2314      	movs	r3, #20
   22992:	18fb      	adds	r3, r7, r3
   22994:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   22996:	68bb      	ldr	r3, [r7, #8]
   22998:	b2da      	uxtb	r2, r3
   2299a:	2314      	movs	r3, #20
   2299c:	18fb      	adds	r3, r7, r3
   2299e:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   229a0:	683b      	ldr	r3, [r7, #0]
   229a2:	0c1b      	lsrs	r3, r3, #16
   229a4:	b2da      	uxtb	r2, r3
   229a6:	2314      	movs	r3, #20
   229a8:	18fb      	adds	r3, r7, r3
   229aa:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   229ac:	683b      	ldr	r3, [r7, #0]
   229ae:	0a1b      	lsrs	r3, r3, #8
   229b0:	b2da      	uxtb	r2, r3
   229b2:	2314      	movs	r3, #20
   229b4:	18fb      	adds	r3, r7, r3
   229b6:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   229b8:	683b      	ldr	r3, [r7, #0]
   229ba:	b2da      	uxtb	r2, r3
   229bc:	2314      	movs	r3, #20
   229be:	18fb      	adds	r3, r7, r3
   229c0:	719a      	strb	r2, [r3, #6]
		len = 8;
   229c2:	231f      	movs	r3, #31
   229c4:	18fb      	adds	r3, r7, r3
   229c6:	2208      	movs	r2, #8
   229c8:	701a      	strb	r2, [r3, #0]
		break;
   229ca:	e067      	b.n	22a9c <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   229cc:	68bb      	ldr	r3, [r7, #8]
   229ce:	0a1b      	lsrs	r3, r3, #8
   229d0:	b2da      	uxtb	r2, r3
   229d2:	2314      	movs	r3, #20
   229d4:	18fb      	adds	r3, r7, r3
   229d6:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   229d8:	2330      	movs	r3, #48	; 0x30
   229da:	18fb      	adds	r3, r7, r3
   229dc:	781b      	ldrb	r3, [r3, #0]
   229de:	2b00      	cmp	r3, #0
   229e0:	d009      	beq.n	229f6 <spi_cmd+0x1da>
   229e2:	2314      	movs	r3, #20
   229e4:	18fb      	adds	r3, r7, r3
   229e6:	785b      	ldrb	r3, [r3, #1]
   229e8:	2280      	movs	r2, #128	; 0x80
   229ea:	4252      	negs	r2, r2
   229ec:	4313      	orrs	r3, r2
   229ee:	b2da      	uxtb	r2, r3
   229f0:	2314      	movs	r3, #20
   229f2:	18fb      	adds	r3, r7, r3
   229f4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   229f6:	68bb      	ldr	r3, [r7, #8]
   229f8:	b2da      	uxtb	r2, r3
   229fa:	2314      	movs	r3, #20
   229fc:	18fb      	adds	r3, r7, r3
   229fe:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   22a00:	687b      	ldr	r3, [r7, #4]
   22a02:	0e1b      	lsrs	r3, r3, #24
   22a04:	b2da      	uxtb	r2, r3
   22a06:	2314      	movs	r3, #20
   22a08:	18fb      	adds	r3, r7, r3
   22a0a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   22a0c:	687b      	ldr	r3, [r7, #4]
   22a0e:	0c1b      	lsrs	r3, r3, #16
   22a10:	b2da      	uxtb	r2, r3
   22a12:	2314      	movs	r3, #20
   22a14:	18fb      	adds	r3, r7, r3
   22a16:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   22a18:	687b      	ldr	r3, [r7, #4]
   22a1a:	0a1b      	lsrs	r3, r3, #8
   22a1c:	b2da      	uxtb	r2, r3
   22a1e:	2314      	movs	r3, #20
   22a20:	18fb      	adds	r3, r7, r3
   22a22:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   22a24:	687b      	ldr	r3, [r7, #4]
   22a26:	b2da      	uxtb	r2, r3
   22a28:	2314      	movs	r3, #20
   22a2a:	18fb      	adds	r3, r7, r3
   22a2c:	719a      	strb	r2, [r3, #6]
		len = 8;
   22a2e:	231f      	movs	r3, #31
   22a30:	18fb      	adds	r3, r7, r3
   22a32:	2208      	movs	r2, #8
   22a34:	701a      	strb	r2, [r3, #0]
		break;
   22a36:	e031      	b.n	22a9c <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   22a38:	68bb      	ldr	r3, [r7, #8]
   22a3a:	0c1b      	lsrs	r3, r3, #16
   22a3c:	b2da      	uxtb	r2, r3
   22a3e:	2314      	movs	r3, #20
   22a40:	18fb      	adds	r3, r7, r3
   22a42:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22a44:	68bb      	ldr	r3, [r7, #8]
   22a46:	0a1b      	lsrs	r3, r3, #8
   22a48:	b2da      	uxtb	r2, r3
   22a4a:	2314      	movs	r3, #20
   22a4c:	18fb      	adds	r3, r7, r3
   22a4e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   22a50:	68bb      	ldr	r3, [r7, #8]
   22a52:	b2da      	uxtb	r2, r3
   22a54:	2314      	movs	r3, #20
   22a56:	18fb      	adds	r3, r7, r3
   22a58:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   22a5a:	687b      	ldr	r3, [r7, #4]
   22a5c:	0e1b      	lsrs	r3, r3, #24
   22a5e:	b2da      	uxtb	r2, r3
   22a60:	2314      	movs	r3, #20
   22a62:	18fb      	adds	r3, r7, r3
   22a64:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   22a66:	687b      	ldr	r3, [r7, #4]
   22a68:	0c1b      	lsrs	r3, r3, #16
   22a6a:	b2da      	uxtb	r2, r3
   22a6c:	2314      	movs	r3, #20
   22a6e:	18fb      	adds	r3, r7, r3
   22a70:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   22a72:	687b      	ldr	r3, [r7, #4]
   22a74:	0a1b      	lsrs	r3, r3, #8
   22a76:	b2da      	uxtb	r2, r3
   22a78:	2314      	movs	r3, #20
   22a7a:	18fb      	adds	r3, r7, r3
   22a7c:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   22a7e:	687b      	ldr	r3, [r7, #4]
   22a80:	b2da      	uxtb	r2, r3
   22a82:	2314      	movs	r3, #20
   22a84:	18fb      	adds	r3, r7, r3
   22a86:	71da      	strb	r2, [r3, #7]
		len = 9;
   22a88:	231f      	movs	r3, #31
   22a8a:	18fb      	adds	r3, r7, r3
   22a8c:	2209      	movs	r2, #9
   22a8e:	701a      	strb	r2, [r3, #0]
		break;
   22a90:	e004      	b.n	22a9c <spi_cmd+0x280>
	default:
		result = N_FAIL;
   22a92:	231e      	movs	r3, #30
   22a94:	18fb      	adds	r3, r7, r3
   22a96:	2200      	movs	r2, #0
   22a98:	701a      	strb	r2, [r3, #0]
		break;
   22a9a:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   22a9c:	231e      	movs	r3, #30
   22a9e:	18fb      	adds	r3, r7, r3
   22aa0:	781b      	ldrb	r3, [r3, #0]
   22aa2:	b25b      	sxtb	r3, r3
   22aa4:	2b00      	cmp	r3, #0
   22aa6:	d03f      	beq.n	22b28 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   22aa8:	4b24      	ldr	r3, [pc, #144]	; (22b3c <spi_cmd+0x320>)
   22aaa:	781b      	ldrb	r3, [r3, #0]
   22aac:	2b00      	cmp	r3, #0
   22aae:	d115      	bne.n	22adc <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   22ab0:	231f      	movs	r3, #31
   22ab2:	18fb      	adds	r3, r7, r3
   22ab4:	781b      	ldrb	r3, [r3, #0]
   22ab6:	1e5c      	subs	r4, r3, #1
   22ab8:	231f      	movs	r3, #31
   22aba:	18fb      	adds	r3, r7, r3
   22abc:	781b      	ldrb	r3, [r3, #0]
   22abe:	3b01      	subs	r3, #1
   22ac0:	001a      	movs	r2, r3
   22ac2:	2314      	movs	r3, #20
   22ac4:	18fb      	adds	r3, r7, r3
   22ac6:	0019      	movs	r1, r3
   22ac8:	207f      	movs	r0, #127	; 0x7f
   22aca:	4b1d      	ldr	r3, [pc, #116]	; (22b40 <spi_cmd+0x324>)
   22acc:	4798      	blx	r3
   22ace:	0003      	movs	r3, r0
   22ad0:	18db      	adds	r3, r3, r3
   22ad2:	b2da      	uxtb	r2, r3
   22ad4:	2314      	movs	r3, #20
   22ad6:	18fb      	adds	r3, r7, r3
   22ad8:	551a      	strb	r2, [r3, r4]
   22ada:	e006      	b.n	22aea <spi_cmd+0x2ce>
		else
			len-=1;
   22adc:	231f      	movs	r3, #31
   22ade:	18fb      	adds	r3, r7, r3
   22ae0:	221f      	movs	r2, #31
   22ae2:	18ba      	adds	r2, r7, r2
   22ae4:	7812      	ldrb	r2, [r2, #0]
   22ae6:	3a01      	subs	r2, #1
   22ae8:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   22aea:	231f      	movs	r3, #31
   22aec:	18fb      	adds	r3, r7, r3
   22aee:	781b      	ldrb	r3, [r3, #0]
   22af0:	b29a      	uxth	r2, r3
   22af2:	2314      	movs	r3, #20
   22af4:	18fb      	adds	r3, r7, r3
   22af6:	0011      	movs	r1, r2
   22af8:	0018      	movs	r0, r3
   22afa:	4b12      	ldr	r3, [pc, #72]	; (22b44 <spi_cmd+0x328>)
   22afc:	4798      	blx	r3
   22afe:	1e03      	subs	r3, r0, #0
   22b00:	d012      	beq.n	22b28 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   22b02:	2390      	movs	r3, #144	; 0x90
   22b04:	005a      	lsls	r2, r3, #1
   22b06:	4910      	ldr	r1, [pc, #64]	; (22b48 <spi_cmd+0x32c>)
   22b08:	4b10      	ldr	r3, [pc, #64]	; (22b4c <spi_cmd+0x330>)
   22b0a:	0018      	movs	r0, r3
   22b0c:	4b10      	ldr	r3, [pc, #64]	; (22b50 <spi_cmd+0x334>)
   22b0e:	4798      	blx	r3
   22b10:	4b10      	ldr	r3, [pc, #64]	; (22b54 <spi_cmd+0x338>)
   22b12:	0018      	movs	r0, r3
   22b14:	4b0e      	ldr	r3, [pc, #56]	; (22b50 <spi_cmd+0x334>)
   22b16:	4798      	blx	r3
   22b18:	4b0f      	ldr	r3, [pc, #60]	; (22b58 <spi_cmd+0x33c>)
   22b1a:	0018      	movs	r0, r3
   22b1c:	4b0c      	ldr	r3, [pc, #48]	; (22b50 <spi_cmd+0x334>)
   22b1e:	4798      	blx	r3
			result = N_FAIL;
   22b20:	231e      	movs	r3, #30
   22b22:	18fb      	adds	r3, r7, r3
   22b24:	2200      	movs	r2, #0
   22b26:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   22b28:	231e      	movs	r3, #30
   22b2a:	18fb      	adds	r3, r7, r3
   22b2c:	781b      	ldrb	r3, [r3, #0]
   22b2e:	b25b      	sxtb	r3, r3
}
   22b30:	0018      	movs	r0, r3
   22b32:	46bd      	mov	sp, r7
   22b34:	b009      	add	sp, #36	; 0x24
   22b36:	bd90      	pop	{r4, r7, pc}
   22b38:	00038118 	.word	0x00038118
   22b3c:	20003e08 	.word	0x20003e08
   22b40:	000227cd 	.word	0x000227cd
   22b44:	00022715 	.word	0x00022715
   22b48:	00038190 	.word	0x00038190
   22b4c:	00037ba0 	.word	0x00037ba0
   22b50:	0001d28d 	.word	0x0001d28d
   22b54:	00037bb4 	.word	0x00037bb4
   22b58:	00037be0 	.word	0x00037be0

00022b5c <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   22b5c:	b590      	push	{r4, r7, lr}
   22b5e:	b085      	sub	sp, #20
   22b60:	af00      	add	r7, sp, #0
   22b62:	0002      	movs	r2, r0
   22b64:	1dfb      	adds	r3, r7, #7
   22b66:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   22b68:	230e      	movs	r3, #14
   22b6a:	18fb      	adds	r3, r7, r3
   22b6c:	2201      	movs	r2, #1
   22b6e:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   22b70:	4b32      	ldr	r3, [pc, #200]	; (22c3c <spi_data_rsp+0xe0>)
   22b72:	781b      	ldrb	r3, [r3, #0]
   22b74:	2b00      	cmp	r3, #0
   22b76:	d104      	bne.n	22b82 <spi_data_rsp+0x26>
		len = 2;
   22b78:	230f      	movs	r3, #15
   22b7a:	18fb      	adds	r3, r7, r3
   22b7c:	2202      	movs	r2, #2
   22b7e:	701a      	strb	r2, [r3, #0]
   22b80:	e003      	b.n	22b8a <spi_data_rsp+0x2e>
	else
		len = 3;
   22b82:	230f      	movs	r3, #15
   22b84:	18fb      	adds	r3, r7, r3
   22b86:	2203      	movs	r2, #3
   22b88:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   22b8a:	230f      	movs	r3, #15
   22b8c:	18fb      	adds	r3, r7, r3
   22b8e:	781b      	ldrb	r3, [r3, #0]
   22b90:	b29a      	uxth	r2, r3
   22b92:	2308      	movs	r3, #8
   22b94:	18fb      	adds	r3, r7, r3
   22b96:	0011      	movs	r1, r2
   22b98:	0018      	movs	r0, r3
   22b9a:	4b29      	ldr	r3, [pc, #164]	; (22c40 <spi_data_rsp+0xe4>)
   22b9c:	4798      	blx	r3
   22b9e:	1e03      	subs	r3, r0, #0
   22ba0:	d013      	beq.n	22bca <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   22ba2:	239a      	movs	r3, #154	; 0x9a
   22ba4:	005a      	lsls	r2, r3, #1
   22ba6:	4927      	ldr	r1, [pc, #156]	; (22c44 <spi_data_rsp+0xe8>)
   22ba8:	4b27      	ldr	r3, [pc, #156]	; (22c48 <spi_data_rsp+0xec>)
   22baa:	0018      	movs	r0, r3
   22bac:	4b27      	ldr	r3, [pc, #156]	; (22c4c <spi_data_rsp+0xf0>)
   22bae:	4798      	blx	r3
   22bb0:	4b27      	ldr	r3, [pc, #156]	; (22c50 <spi_data_rsp+0xf4>)
   22bb2:	0018      	movs	r0, r3
   22bb4:	4b25      	ldr	r3, [pc, #148]	; (22c4c <spi_data_rsp+0xf0>)
   22bb6:	4798      	blx	r3
   22bb8:	4b26      	ldr	r3, [pc, #152]	; (22c54 <spi_data_rsp+0xf8>)
   22bba:	0018      	movs	r0, r3
   22bbc:	4b23      	ldr	r3, [pc, #140]	; (22c4c <spi_data_rsp+0xf0>)
   22bbe:	4798      	blx	r3
		result = N_FAIL;
   22bc0:	230e      	movs	r3, #14
   22bc2:	18fb      	adds	r3, r7, r3
   22bc4:	2200      	movs	r2, #0
   22bc6:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   22bc8:	e030      	b.n	22c2c <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   22bca:	230f      	movs	r3, #15
   22bcc:	18fb      	adds	r3, r7, r3
   22bce:	781b      	ldrb	r3, [r3, #0]
   22bd0:	3b01      	subs	r3, #1
   22bd2:	2208      	movs	r2, #8
   22bd4:	18ba      	adds	r2, r7, r2
   22bd6:	5cd3      	ldrb	r3, [r2, r3]
   22bd8:	2b00      	cmp	r3, #0
   22bda:	d108      	bne.n	22bee <spi_data_rsp+0x92>
   22bdc:	230f      	movs	r3, #15
   22bde:	18fb      	adds	r3, r7, r3
   22be0:	781b      	ldrb	r3, [r3, #0]
   22be2:	3b02      	subs	r3, #2
   22be4:	2208      	movs	r2, #8
   22be6:	18ba      	adds	r2, r7, r2
   22be8:	5cd3      	ldrb	r3, [r2, r3]
   22bea:	2bc3      	cmp	r3, #195	; 0xc3
   22bec:	d01e      	beq.n	22c2c <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   22bee:	233c      	movs	r3, #60	; 0x3c
   22bf0:	33ff      	adds	r3, #255	; 0xff
   22bf2:	001a      	movs	r2, r3
   22bf4:	4913      	ldr	r1, [pc, #76]	; (22c44 <spi_data_rsp+0xe8>)
   22bf6:	4b14      	ldr	r3, [pc, #80]	; (22c48 <spi_data_rsp+0xec>)
   22bf8:	0018      	movs	r0, r3
   22bfa:	4b14      	ldr	r3, [pc, #80]	; (22c4c <spi_data_rsp+0xf0>)
   22bfc:	4798      	blx	r3
   22bfe:	2308      	movs	r3, #8
   22c00:	18fb      	adds	r3, r7, r3
   22c02:	781b      	ldrb	r3, [r3, #0]
   22c04:	0019      	movs	r1, r3
   22c06:	2308      	movs	r3, #8
   22c08:	18fb      	adds	r3, r7, r3
   22c0a:	785b      	ldrb	r3, [r3, #1]
   22c0c:	001a      	movs	r2, r3
   22c0e:	2308      	movs	r3, #8
   22c10:	18fb      	adds	r3, r7, r3
   22c12:	789b      	ldrb	r3, [r3, #2]
   22c14:	4810      	ldr	r0, [pc, #64]	; (22c58 <spi_data_rsp+0xfc>)
   22c16:	4c0d      	ldr	r4, [pc, #52]	; (22c4c <spi_data_rsp+0xf0>)
   22c18:	47a0      	blx	r4
   22c1a:	4b0e      	ldr	r3, [pc, #56]	; (22c54 <spi_data_rsp+0xf8>)
   22c1c:	0018      	movs	r0, r3
   22c1e:	4b0b      	ldr	r3, [pc, #44]	; (22c4c <spi_data_rsp+0xf0>)
   22c20:	4798      	blx	r3
		result = N_FAIL;
   22c22:	230e      	movs	r3, #14
   22c24:	18fb      	adds	r3, r7, r3
   22c26:	2200      	movs	r2, #0
   22c28:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   22c2a:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   22c2c:	230e      	movs	r3, #14
   22c2e:	18fb      	adds	r3, r7, r3
   22c30:	781b      	ldrb	r3, [r3, #0]
   22c32:	b25b      	sxtb	r3, r3
}
   22c34:	0018      	movs	r0, r3
   22c36:	46bd      	mov	sp, r7
   22c38:	b005      	add	sp, #20
   22c3a:	bd90      	pop	{r4, r7, pc}
   22c3c:	20003e08 	.word	0x20003e08
   22c40:	000226d1 	.word	0x000226d1
   22c44:	00038198 	.word	0x00038198
   22c48:	00037ba0 	.word	0x00037ba0
   22c4c:	0001d28d 	.word	0x0001d28d
   22c50:	00037be4 	.word	0x00037be4
   22c54:	00037be0 	.word	0x00037be0
   22c58:	00037c04 	.word	0x00037c04

00022c5c <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   22c5c:	b580      	push	{r7, lr}
   22c5e:	b084      	sub	sp, #16
   22c60:	af00      	add	r7, sp, #0
   22c62:	0002      	movs	r2, r0
   22c64:	1dfb      	adds	r3, r7, #7
   22c66:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   22c68:	230f      	movs	r3, #15
   22c6a:	18fb      	adds	r3, r7, r3
   22c6c:	2201      	movs	r2, #1
   22c6e:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   22c70:	1dfb      	adds	r3, r7, #7
   22c72:	781b      	ldrb	r3, [r3, #0]
   22c74:	2bcf      	cmp	r3, #207	; 0xcf
   22c76:	d007      	beq.n	22c88 <spi_cmd_rsp+0x2c>
   22c78:	1dfb      	adds	r3, r7, #7
   22c7a:	781b      	ldrb	r3, [r3, #0]
   22c7c:	2bc5      	cmp	r3, #197	; 0xc5
   22c7e:	d003      	beq.n	22c88 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   22c80:	1dfb      	adds	r3, r7, #7
   22c82:	781b      	ldrb	r3, [r3, #0]
   22c84:	2bc6      	cmp	r3, #198	; 0xc6
   22c86:	d10c      	bne.n	22ca2 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   22c88:	230d      	movs	r3, #13
   22c8a:	18fb      	adds	r3, r7, r3
   22c8c:	2101      	movs	r1, #1
   22c8e:	0018      	movs	r0, r3
   22c90:	4b3b      	ldr	r3, [pc, #236]	; (22d80 <spi_cmd_rsp+0x124>)
   22c92:	4798      	blx	r3
   22c94:	1e03      	subs	r3, r0, #0
   22c96:	d004      	beq.n	22ca2 <spi_cmd_rsp+0x46>
			result = N_FAIL;
   22c98:	230f      	movs	r3, #15
   22c9a:	18fb      	adds	r3, r7, r3
   22c9c:	2200      	movs	r2, #0
   22c9e:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   22ca0:	e065      	b.n	22d6e <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   22ca2:	230e      	movs	r3, #14
   22ca4:	18fb      	adds	r3, r7, r3
   22ca6:	220a      	movs	r2, #10
   22ca8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   22caa:	230d      	movs	r3, #13
   22cac:	18fb      	adds	r3, r7, r3
   22cae:	2101      	movs	r1, #1
   22cb0:	0018      	movs	r0, r3
   22cb2:	4b33      	ldr	r3, [pc, #204]	; (22d80 <spi_cmd_rsp+0x124>)
   22cb4:	4798      	blx	r3
   22cb6:	1e03      	subs	r3, r0, #0
   22cb8:	d014      	beq.n	22ce4 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   22cba:	235c      	movs	r3, #92	; 0x5c
   22cbc:	33ff      	adds	r3, #255	; 0xff
   22cbe:	001a      	movs	r2, r3
   22cc0:	4930      	ldr	r1, [pc, #192]	; (22d84 <spi_cmd_rsp+0x128>)
   22cc2:	4b31      	ldr	r3, [pc, #196]	; (22d88 <spi_cmd_rsp+0x12c>)
   22cc4:	0018      	movs	r0, r3
   22cc6:	4b31      	ldr	r3, [pc, #196]	; (22d8c <spi_cmd_rsp+0x130>)
   22cc8:	4798      	blx	r3
   22cca:	4b31      	ldr	r3, [pc, #196]	; (22d90 <spi_cmd_rsp+0x134>)
   22ccc:	0018      	movs	r0, r3
   22cce:	4b2f      	ldr	r3, [pc, #188]	; (22d8c <spi_cmd_rsp+0x130>)
   22cd0:	4798      	blx	r3
   22cd2:	4b30      	ldr	r3, [pc, #192]	; (22d94 <spi_cmd_rsp+0x138>)
   22cd4:	0018      	movs	r0, r3
   22cd6:	4b2d      	ldr	r3, [pc, #180]	; (22d8c <spi_cmd_rsp+0x130>)
   22cd8:	4798      	blx	r3
			result = N_FAIL;
   22cda:	230f      	movs	r3, #15
   22cdc:	18fb      	adds	r3, r7, r3
   22cde:	2200      	movs	r2, #0
   22ce0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   22ce2:	e044      	b.n	22d6e <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   22ce4:	230d      	movs	r3, #13
   22ce6:	18fb      	adds	r3, r7, r3
   22ce8:	781b      	ldrb	r3, [r3, #0]
   22cea:	1dfa      	adds	r2, r7, #7
   22cec:	7812      	ldrb	r2, [r2, #0]
   22cee:	429a      	cmp	r2, r3
   22cf0:	d00b      	beq.n	22d0a <spi_cmd_rsp+0xae>
   22cf2:	230e      	movs	r3, #14
   22cf4:	18fb      	adds	r3, r7, r3
   22cf6:	781b      	ldrb	r3, [r3, #0]
   22cf8:	b25b      	sxtb	r3, r3
   22cfa:	b2da      	uxtb	r2, r3
   22cfc:	3a01      	subs	r2, #1
   22cfe:	b2d1      	uxtb	r1, r2
   22d00:	220e      	movs	r2, #14
   22d02:	18ba      	adds	r2, r7, r2
   22d04:	7011      	strb	r1, [r2, #0]
   22d06:	2b00      	cmp	r3, #0
   22d08:	dccf      	bgt.n	22caa <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   22d0a:	230e      	movs	r3, #14
   22d0c:	18fb      	adds	r3, r7, r3
   22d0e:	220a      	movs	r2, #10
   22d10:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   22d12:	230d      	movs	r3, #13
   22d14:	18fb      	adds	r3, r7, r3
   22d16:	2101      	movs	r1, #1
   22d18:	0018      	movs	r0, r3
   22d1a:	4b19      	ldr	r3, [pc, #100]	; (22d80 <spi_cmd_rsp+0x124>)
   22d1c:	4798      	blx	r3
   22d1e:	1e03      	subs	r3, r0, #0
   22d20:	d014      	beq.n	22d4c <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   22d22:	236a      	movs	r3, #106	; 0x6a
   22d24:	33ff      	adds	r3, #255	; 0xff
   22d26:	001a      	movs	r2, r3
   22d28:	4916      	ldr	r1, [pc, #88]	; (22d84 <spi_cmd_rsp+0x128>)
   22d2a:	4b17      	ldr	r3, [pc, #92]	; (22d88 <spi_cmd_rsp+0x12c>)
   22d2c:	0018      	movs	r0, r3
   22d2e:	4b17      	ldr	r3, [pc, #92]	; (22d8c <spi_cmd_rsp+0x130>)
   22d30:	4798      	blx	r3
   22d32:	4b17      	ldr	r3, [pc, #92]	; (22d90 <spi_cmd_rsp+0x134>)
   22d34:	0018      	movs	r0, r3
   22d36:	4b15      	ldr	r3, [pc, #84]	; (22d8c <spi_cmd_rsp+0x130>)
   22d38:	4798      	blx	r3
   22d3a:	4b16      	ldr	r3, [pc, #88]	; (22d94 <spi_cmd_rsp+0x138>)
   22d3c:	0018      	movs	r0, r3
   22d3e:	4b13      	ldr	r3, [pc, #76]	; (22d8c <spi_cmd_rsp+0x130>)
   22d40:	4798      	blx	r3
			result = N_FAIL;
   22d42:	230f      	movs	r3, #15
   22d44:	18fb      	adds	r3, r7, r3
   22d46:	2200      	movs	r2, #0
   22d48:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   22d4a:	e010      	b.n	22d6e <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   22d4c:	230d      	movs	r3, #13
   22d4e:	18fb      	adds	r3, r7, r3
   22d50:	781b      	ldrb	r3, [r3, #0]
   22d52:	2b00      	cmp	r3, #0
   22d54:	d00b      	beq.n	22d6e <spi_cmd_rsp+0x112>
   22d56:	230e      	movs	r3, #14
   22d58:	18fb      	adds	r3, r7, r3
   22d5a:	781b      	ldrb	r3, [r3, #0]
   22d5c:	b25b      	sxtb	r3, r3
   22d5e:	b2da      	uxtb	r2, r3
   22d60:	3a01      	subs	r2, #1
   22d62:	b2d1      	uxtb	r1, r2
   22d64:	220e      	movs	r2, #14
   22d66:	18ba      	adds	r2, r7, r2
   22d68:	7011      	strb	r1, [r2, #0]
   22d6a:	2b00      	cmp	r3, #0
   22d6c:	dcd1      	bgt.n	22d12 <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   22d6e:	230f      	movs	r3, #15
   22d70:	18fb      	adds	r3, r7, r3
   22d72:	781b      	ldrb	r3, [r3, #0]
   22d74:	b25b      	sxtb	r3, r3
}
   22d76:	0018      	movs	r0, r3
   22d78:	46bd      	mov	sp, r7
   22d7a:	b004      	add	sp, #16
   22d7c:	bd80      	pop	{r7, pc}
   22d7e:	46c0      	nop			; (mov r8, r8)
   22d80:	000226d1 	.word	0x000226d1
   22d84:	000381a8 	.word	0x000381a8
   22d88:	00037ba0 	.word	0x00037ba0
   22d8c:	0001d28d 	.word	0x0001d28d
   22d90:	00037c34 	.word	0x00037c34
   22d94:	00037be0 	.word	0x00037be0

00022d98 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   22d98:	b590      	push	{r4, r7, lr}
   22d9a:	b09f      	sub	sp, #124	; 0x7c
   22d9c:	af00      	add	r7, sp, #0
   22d9e:	60b9      	str	r1, [r7, #8]
   22da0:	607a      	str	r2, [r7, #4]
   22da2:	603b      	str	r3, [r7, #0]
   22da4:	230f      	movs	r3, #15
   22da6:	18fb      	adds	r3, r7, r3
   22da8:	1c02      	adds	r2, r0, #0
   22daa:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   22dac:	2300      	movs	r3, #0
   22dae:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   22db0:	2301      	movs	r3, #1
   22db2:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   22db4:	2338      	movs	r3, #56	; 0x38
   22db6:	18fb      	adds	r3, r7, r3
   22db8:	220f      	movs	r2, #15
   22dba:	18ba      	adds	r2, r7, r2
   22dbc:	7812      	ldrb	r2, [r2, #0]
   22dbe:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   22dc0:	230f      	movs	r3, #15
   22dc2:	18fb      	adds	r3, r7, r3
   22dc4:	781b      	ldrb	r3, [r3, #0]
   22dc6:	3bc1      	subs	r3, #193	; 0xc1
   22dc8:	2b0e      	cmp	r3, #14
   22dca:	d900      	bls.n	22dce <spi_cmd_complete+0x36>
   22dcc:	e103      	b.n	22fd6 <spi_cmd_complete+0x23e>
   22dce:	009a      	lsls	r2, r3, #2
   22dd0:	4bd1      	ldr	r3, [pc, #836]	; (23118 <spi_cmd_complete+0x380>)
   22dd2:	18d3      	adds	r3, r2, r3
   22dd4:	681b      	ldr	r3, [r3, #0]
   22dd6:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   22dd8:	68bb      	ldr	r3, [r7, #8]
   22dda:	0c1b      	lsrs	r3, r3, #16
   22ddc:	b2da      	uxtb	r2, r3
   22dde:	2338      	movs	r3, #56	; 0x38
   22de0:	18fb      	adds	r3, r7, r3
   22de2:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22de4:	68bb      	ldr	r3, [r7, #8]
   22de6:	0a1b      	lsrs	r3, r3, #8
   22de8:	b2da      	uxtb	r2, r3
   22dea:	2338      	movs	r3, #56	; 0x38
   22dec:	18fb      	adds	r3, r7, r3
   22dee:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   22df0:	68bb      	ldr	r3, [r7, #8]
   22df2:	b2da      	uxtb	r2, r3
   22df4:	2338      	movs	r3, #56	; 0x38
   22df6:	18fb      	adds	r3, r7, r3
   22df8:	70da      	strb	r2, [r3, #3]
		len = 5;
   22dfa:	2305      	movs	r3, #5
   22dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   22dfe:	e0ed      	b.n	22fdc <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   22e00:	68bb      	ldr	r3, [r7, #8]
   22e02:	0a1b      	lsrs	r3, r3, #8
   22e04:	b2da      	uxtb	r2, r3
   22e06:	2338      	movs	r3, #56	; 0x38
   22e08:	18fb      	adds	r3, r7, r3
   22e0a:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   22e0c:	2388      	movs	r3, #136	; 0x88
   22e0e:	18fb      	adds	r3, r7, r3
   22e10:	781b      	ldrb	r3, [r3, #0]
   22e12:	2b01      	cmp	r3, #1
   22e14:	d109      	bne.n	22e2a <spi_cmd_complete+0x92>
   22e16:	2338      	movs	r3, #56	; 0x38
   22e18:	18fb      	adds	r3, r7, r3
   22e1a:	785b      	ldrb	r3, [r3, #1]
   22e1c:	2280      	movs	r2, #128	; 0x80
   22e1e:	4252      	negs	r2, r2
   22e20:	4313      	orrs	r3, r2
   22e22:	b2da      	uxtb	r2, r3
   22e24:	2338      	movs	r3, #56	; 0x38
   22e26:	18fb      	adds	r3, r7, r3
   22e28:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   22e2a:	68bb      	ldr	r3, [r7, #8]
   22e2c:	b2da      	uxtb	r2, r3
   22e2e:	2338      	movs	r3, #56	; 0x38
   22e30:	18fb      	adds	r3, r7, r3
   22e32:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   22e34:	2338      	movs	r3, #56	; 0x38
   22e36:	18fb      	adds	r3, r7, r3
   22e38:	2200      	movs	r2, #0
   22e3a:	70da      	strb	r2, [r3, #3]
		len = 5;
   22e3c:	2305      	movs	r3, #5
   22e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22e40:	e0cc      	b.n	22fdc <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   22e42:	2338      	movs	r3, #56	; 0x38
   22e44:	18fb      	adds	r3, r7, r3
   22e46:	2200      	movs	r2, #0
   22e48:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   22e4a:	2338      	movs	r3, #56	; 0x38
   22e4c:	18fb      	adds	r3, r7, r3
   22e4e:	2200      	movs	r2, #0
   22e50:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   22e52:	2338      	movs	r3, #56	; 0x38
   22e54:	18fb      	adds	r3, r7, r3
   22e56:	2200      	movs	r2, #0
   22e58:	70da      	strb	r2, [r3, #3]
		len = 5;
   22e5a:	2305      	movs	r3, #5
   22e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22e5e:	e0bd      	b.n	22fdc <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   22e60:	2338      	movs	r3, #56	; 0x38
   22e62:	18fb      	adds	r3, r7, r3
   22e64:	2200      	movs	r2, #0
   22e66:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   22e68:	2338      	movs	r3, #56	; 0x38
   22e6a:	18fb      	adds	r3, r7, r3
   22e6c:	2200      	movs	r2, #0
   22e6e:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   22e70:	2338      	movs	r3, #56	; 0x38
   22e72:	18fb      	adds	r3, r7, r3
   22e74:	2200      	movs	r2, #0
   22e76:	70da      	strb	r2, [r3, #3]
		len = 5;
   22e78:	2305      	movs	r3, #5
   22e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22e7c:	e0ae      	b.n	22fdc <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   22e7e:	2338      	movs	r3, #56	; 0x38
   22e80:	18fb      	adds	r3, r7, r3
   22e82:	22ff      	movs	r2, #255	; 0xff
   22e84:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   22e86:	2338      	movs	r3, #56	; 0x38
   22e88:	18fb      	adds	r3, r7, r3
   22e8a:	22ff      	movs	r2, #255	; 0xff
   22e8c:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   22e8e:	2338      	movs	r3, #56	; 0x38
   22e90:	18fb      	adds	r3, r7, r3
   22e92:	22ff      	movs	r2, #255	; 0xff
   22e94:	70da      	strb	r2, [r3, #3]
		len = 5;
   22e96:	2305      	movs	r3, #5
   22e98:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22e9a:	e09f      	b.n	22fdc <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   22e9c:	68bb      	ldr	r3, [r7, #8]
   22e9e:	0c1b      	lsrs	r3, r3, #16
   22ea0:	b2da      	uxtb	r2, r3
   22ea2:	2338      	movs	r3, #56	; 0x38
   22ea4:	18fb      	adds	r3, r7, r3
   22ea6:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22ea8:	68bb      	ldr	r3, [r7, #8]
   22eaa:	0a1b      	lsrs	r3, r3, #8
   22eac:	b2da      	uxtb	r2, r3
   22eae:	2338      	movs	r3, #56	; 0x38
   22eb0:	18fb      	adds	r3, r7, r3
   22eb2:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   22eb4:	68bb      	ldr	r3, [r7, #8]
   22eb6:	b2da      	uxtb	r2, r3
   22eb8:	2338      	movs	r3, #56	; 0x38
   22eba:	18fb      	adds	r3, r7, r3
   22ebc:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   22ebe:	683b      	ldr	r3, [r7, #0]
   22ec0:	0a1b      	lsrs	r3, r3, #8
   22ec2:	b2da      	uxtb	r2, r3
   22ec4:	2338      	movs	r3, #56	; 0x38
   22ec6:	18fb      	adds	r3, r7, r3
   22ec8:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   22eca:	683b      	ldr	r3, [r7, #0]
   22ecc:	b2da      	uxtb	r2, r3
   22ece:	2338      	movs	r3, #56	; 0x38
   22ed0:	18fb      	adds	r3, r7, r3
   22ed2:	715a      	strb	r2, [r3, #5]
		len = 7;
   22ed4:	2307      	movs	r3, #7
   22ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22ed8:	e080      	b.n	22fdc <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   22eda:	68bb      	ldr	r3, [r7, #8]
   22edc:	0c1b      	lsrs	r3, r3, #16
   22ede:	b2da      	uxtb	r2, r3
   22ee0:	2338      	movs	r3, #56	; 0x38
   22ee2:	18fb      	adds	r3, r7, r3
   22ee4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22ee6:	68bb      	ldr	r3, [r7, #8]
   22ee8:	0a1b      	lsrs	r3, r3, #8
   22eea:	b2da      	uxtb	r2, r3
   22eec:	2338      	movs	r3, #56	; 0x38
   22eee:	18fb      	adds	r3, r7, r3
   22ef0:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   22ef2:	68bb      	ldr	r3, [r7, #8]
   22ef4:	b2da      	uxtb	r2, r3
   22ef6:	2338      	movs	r3, #56	; 0x38
   22ef8:	18fb      	adds	r3, r7, r3
   22efa:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   22efc:	683b      	ldr	r3, [r7, #0]
   22efe:	0c1b      	lsrs	r3, r3, #16
   22f00:	b2da      	uxtb	r2, r3
   22f02:	2338      	movs	r3, #56	; 0x38
   22f04:	18fb      	adds	r3, r7, r3
   22f06:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   22f08:	683b      	ldr	r3, [r7, #0]
   22f0a:	0a1b      	lsrs	r3, r3, #8
   22f0c:	b2da      	uxtb	r2, r3
   22f0e:	2338      	movs	r3, #56	; 0x38
   22f10:	18fb      	adds	r3, r7, r3
   22f12:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   22f14:	683b      	ldr	r3, [r7, #0]
   22f16:	b2da      	uxtb	r2, r3
   22f18:	2338      	movs	r3, #56	; 0x38
   22f1a:	18fb      	adds	r3, r7, r3
   22f1c:	719a      	strb	r2, [r3, #6]
		len = 8;
   22f1e:	2308      	movs	r3, #8
   22f20:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22f22:	e05b      	b.n	22fdc <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   22f24:	68bb      	ldr	r3, [r7, #8]
   22f26:	0a1b      	lsrs	r3, r3, #8
   22f28:	b2da      	uxtb	r2, r3
   22f2a:	2338      	movs	r3, #56	; 0x38
   22f2c:	18fb      	adds	r3, r7, r3
   22f2e:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   22f30:	2388      	movs	r3, #136	; 0x88
   22f32:	18fb      	adds	r3, r7, r3
   22f34:	781b      	ldrb	r3, [r3, #0]
   22f36:	2b01      	cmp	r3, #1
   22f38:	d109      	bne.n	22f4e <spi_cmd_complete+0x1b6>
   22f3a:	2338      	movs	r3, #56	; 0x38
   22f3c:	18fb      	adds	r3, r7, r3
   22f3e:	785b      	ldrb	r3, [r3, #1]
   22f40:	2280      	movs	r2, #128	; 0x80
   22f42:	4252      	negs	r2, r2
   22f44:	4313      	orrs	r3, r2
   22f46:	b2da      	uxtb	r2, r3
   22f48:	2338      	movs	r3, #56	; 0x38
   22f4a:	18fb      	adds	r3, r7, r3
   22f4c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   22f4e:	68bb      	ldr	r3, [r7, #8]
   22f50:	b2da      	uxtb	r2, r3
   22f52:	2338      	movs	r3, #56	; 0x38
   22f54:	18fb      	adds	r3, r7, r3
   22f56:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   22f58:	687b      	ldr	r3, [r7, #4]
   22f5a:	78da      	ldrb	r2, [r3, #3]
   22f5c:	2338      	movs	r3, #56	; 0x38
   22f5e:	18fb      	adds	r3, r7, r3
   22f60:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   22f62:	687b      	ldr	r3, [r7, #4]
   22f64:	789a      	ldrb	r2, [r3, #2]
   22f66:	2338      	movs	r3, #56	; 0x38
   22f68:	18fb      	adds	r3, r7, r3
   22f6a:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   22f6c:	687b      	ldr	r3, [r7, #4]
   22f6e:	785a      	ldrb	r2, [r3, #1]
   22f70:	2338      	movs	r3, #56	; 0x38
   22f72:	18fb      	adds	r3, r7, r3
   22f74:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   22f76:	687b      	ldr	r3, [r7, #4]
   22f78:	781a      	ldrb	r2, [r3, #0]
   22f7a:	2338      	movs	r3, #56	; 0x38
   22f7c:	18fb      	adds	r3, r7, r3
   22f7e:	719a      	strb	r2, [r3, #6]
		len = 8;
   22f80:	2308      	movs	r3, #8
   22f82:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22f84:	e02a      	b.n	22fdc <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   22f86:	68bb      	ldr	r3, [r7, #8]
   22f88:	0c1b      	lsrs	r3, r3, #16
   22f8a:	b2da      	uxtb	r2, r3
   22f8c:	2338      	movs	r3, #56	; 0x38
   22f8e:	18fb      	adds	r3, r7, r3
   22f90:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22f92:	68bb      	ldr	r3, [r7, #8]
   22f94:	0a1b      	lsrs	r3, r3, #8
   22f96:	b2da      	uxtb	r2, r3
   22f98:	2338      	movs	r3, #56	; 0x38
   22f9a:	18fb      	adds	r3, r7, r3
   22f9c:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   22f9e:	68bb      	ldr	r3, [r7, #8]
   22fa0:	b2da      	uxtb	r2, r3
   22fa2:	2338      	movs	r3, #56	; 0x38
   22fa4:	18fb      	adds	r3, r7, r3
   22fa6:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   22fa8:	687b      	ldr	r3, [r7, #4]
   22faa:	78da      	ldrb	r2, [r3, #3]
   22fac:	2338      	movs	r3, #56	; 0x38
   22fae:	18fb      	adds	r3, r7, r3
   22fb0:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   22fb2:	687b      	ldr	r3, [r7, #4]
   22fb4:	789a      	ldrb	r2, [r3, #2]
   22fb6:	2338      	movs	r3, #56	; 0x38
   22fb8:	18fb      	adds	r3, r7, r3
   22fba:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   22fbc:	687b      	ldr	r3, [r7, #4]
   22fbe:	785a      	ldrb	r2, [r3, #1]
   22fc0:	2338      	movs	r3, #56	; 0x38
   22fc2:	18fb      	adds	r3, r7, r3
   22fc4:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   22fc6:	687b      	ldr	r3, [r7, #4]
   22fc8:	781a      	ldrb	r2, [r3, #0]
   22fca:	2338      	movs	r3, #56	; 0x38
   22fcc:	18fb      	adds	r3, r7, r3
   22fce:	71da      	strb	r2, [r3, #7]
		len = 9;
   22fd0:	2309      	movs	r3, #9
   22fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22fd4:	e002      	b.n	22fdc <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   22fd6:	2300      	movs	r3, #0
   22fd8:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   22fda:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   22fdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22fde:	2b01      	cmp	r3, #1
   22fe0:	d001      	beq.n	22fe6 <spi_cmd_complete+0x24e>
		return result;
   22fe2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22fe4:	e33a      	b.n	2365c <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   22fe6:	4b4d      	ldr	r3, [pc, #308]	; (2311c <spi_cmd_complete+0x384>)
   22fe8:	781b      	ldrb	r3, [r3, #0]
   22fea:	2b00      	cmp	r3, #0
   22fec:	d111      	bne.n	23012 <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   22fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22ff0:	1e5c      	subs	r4, r3, #1
   22ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22ff4:	3b01      	subs	r3, #1
   22ff6:	001a      	movs	r2, r3
   22ff8:	2338      	movs	r3, #56	; 0x38
   22ffa:	18fb      	adds	r3, r7, r3
   22ffc:	0019      	movs	r1, r3
   22ffe:	207f      	movs	r0, #127	; 0x7f
   23000:	4b47      	ldr	r3, [pc, #284]	; (23120 <spi_cmd_complete+0x388>)
   23002:	4798      	blx	r3
   23004:	0003      	movs	r3, r0
   23006:	18db      	adds	r3, r3, r3
   23008:	b2da      	uxtb	r2, r3
   2300a:	2338      	movs	r3, #56	; 0x38
   2300c:	18fb      	adds	r3, r7, r3
   2300e:	551a      	strb	r2, [r3, r4]
   23010:	e002      	b.n	23018 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   23012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23014:	3b01      	subs	r3, #1
   23016:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   23018:	230f      	movs	r3, #15
   2301a:	18fb      	adds	r3, r7, r3
   2301c:	781b      	ldrb	r3, [r3, #0]
   2301e:	2bcf      	cmp	r3, #207	; 0xcf
   23020:	d009      	beq.n	23036 <spi_cmd_complete+0x29e>
   23022:	230f      	movs	r3, #15
   23024:	18fb      	adds	r3, r7, r3
   23026:	781b      	ldrb	r3, [r3, #0]
   23028:	2bc5      	cmp	r3, #197	; 0xc5
   2302a:	d004      	beq.n	23036 <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   2302c:	230f      	movs	r3, #15
   2302e:	18fb      	adds	r3, r7, r3
   23030:	781b      	ldrb	r3, [r3, #0]
   23032:	2bc6      	cmp	r3, #198	; 0xc6
   23034:	d103      	bne.n	2303e <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   23036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23038:	3306      	adds	r3, #6
   2303a:	673b      	str	r3, [r7, #112]	; 0x70
   2303c:	e018      	b.n	23070 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   2303e:	230f      	movs	r3, #15
   23040:	18fb      	adds	r3, r7, r3
   23042:	781b      	ldrb	r3, [r3, #0]
   23044:	2bc4      	cmp	r3, #196	; 0xc4
   23046:	d004      	beq.n	23052 <spi_cmd_complete+0x2ba>
   23048:	230f      	movs	r3, #15
   2304a:	18fb      	adds	r3, r7, r3
   2304c:	781b      	ldrb	r3, [r3, #0]
   2304e:	2bca      	cmp	r3, #202	; 0xca
   23050:	d10b      	bne.n	2306a <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   23052:	4b32      	ldr	r3, [pc, #200]	; (2311c <spi_cmd_complete+0x384>)
   23054:	781b      	ldrb	r3, [r3, #0]
   23056:	2b00      	cmp	r3, #0
   23058:	d103      	bne.n	23062 <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   2305a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2305c:	330c      	adds	r3, #12
   2305e:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   23060:	e006      	b.n	23070 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   23062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23064:	330a      	adds	r3, #10
   23066:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   23068:	e002      	b.n	23070 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   2306a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2306c:	3305      	adds	r3, #5
   2306e:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   23070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23072:	2b20      	cmp	r3, #32
   23074:	d914      	bls.n	230a0 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   23076:	23f7      	movs	r3, #247	; 0xf7
   23078:	005a      	lsls	r2, r3, #1
   2307a:	492a      	ldr	r1, [pc, #168]	; (23124 <spi_cmd_complete+0x38c>)
   2307c:	4b2a      	ldr	r3, [pc, #168]	; (23128 <spi_cmd_complete+0x390>)
   2307e:	0018      	movs	r0, r3
   23080:	4b2a      	ldr	r3, [pc, #168]	; (2312c <spi_cmd_complete+0x394>)
   23082:	4798      	blx	r3
   23084:	6f39      	ldr	r1, [r7, #112]	; 0x70
   23086:	4b2a      	ldr	r3, [pc, #168]	; (23130 <spi_cmd_complete+0x398>)
   23088:	2220      	movs	r2, #32
   2308a:	0018      	movs	r0, r3
   2308c:	4b27      	ldr	r3, [pc, #156]	; (2312c <spi_cmd_complete+0x394>)
   2308e:	4798      	blx	r3
   23090:	4b28      	ldr	r3, [pc, #160]	; (23134 <spi_cmd_complete+0x39c>)
   23092:	0018      	movs	r0, r3
   23094:	4b25      	ldr	r3, [pc, #148]	; (2312c <spi_cmd_complete+0x394>)
   23096:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   23098:	2300      	movs	r3, #0
   2309a:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2309c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2309e:	e2dd      	b.n	2365c <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   230a0:	2377      	movs	r3, #119	; 0x77
   230a2:	18fb      	adds	r3, r7, r3
   230a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   230a6:	701a      	strb	r2, [r3, #0]
   230a8:	e00d      	b.n	230c6 <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   230aa:	2377      	movs	r3, #119	; 0x77
   230ac:	18fb      	adds	r3, r7, r3
   230ae:	781b      	ldrb	r3, [r3, #0]
   230b0:	2238      	movs	r2, #56	; 0x38
   230b2:	18ba      	adds	r2, r7, r2
   230b4:	2100      	movs	r1, #0
   230b6:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   230b8:	2377      	movs	r3, #119	; 0x77
   230ba:	18fb      	adds	r3, r7, r3
   230bc:	781a      	ldrb	r2, [r3, #0]
   230be:	2377      	movs	r3, #119	; 0x77
   230c0:	18fb      	adds	r3, r7, r3
   230c2:	3201      	adds	r2, #1
   230c4:	701a      	strb	r2, [r3, #0]
   230c6:	2377      	movs	r3, #119	; 0x77
   230c8:	18fb      	adds	r3, r7, r3
   230ca:	781a      	ldrb	r2, [r3, #0]
   230cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   230ce:	429a      	cmp	r2, r3
   230d0:	d3eb      	bcc.n	230aa <spi_cmd_complete+0x312>
	}
	rix = len;
   230d2:	2376      	movs	r3, #118	; 0x76
   230d4:	18fb      	adds	r3, r7, r3
   230d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   230d8:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   230da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   230dc:	b29a      	uxth	r2, r3
   230de:	2318      	movs	r3, #24
   230e0:	18f9      	adds	r1, r7, r3
   230e2:	2338      	movs	r3, #56	; 0x38
   230e4:	18fb      	adds	r3, r7, r3
   230e6:	0018      	movs	r0, r3
   230e8:	4b13      	ldr	r3, [pc, #76]	; (23138 <spi_cmd_complete+0x3a0>)
   230ea:	4798      	blx	r3
   230ec:	1e03      	subs	r3, r0, #0
   230ee:	d027      	beq.n	23140 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   230f0:	23fa      	movs	r3, #250	; 0xfa
   230f2:	33ff      	adds	r3, #255	; 0xff
   230f4:	001a      	movs	r2, r3
   230f6:	490b      	ldr	r1, [pc, #44]	; (23124 <spi_cmd_complete+0x38c>)
   230f8:	4b0b      	ldr	r3, [pc, #44]	; (23128 <spi_cmd_complete+0x390>)
   230fa:	0018      	movs	r0, r3
   230fc:	4b0b      	ldr	r3, [pc, #44]	; (2312c <spi_cmd_complete+0x394>)
   230fe:	4798      	blx	r3
   23100:	4b0e      	ldr	r3, [pc, #56]	; (2313c <spi_cmd_complete+0x3a4>)
   23102:	0018      	movs	r0, r3
   23104:	4b09      	ldr	r3, [pc, #36]	; (2312c <spi_cmd_complete+0x394>)
   23106:	4798      	blx	r3
   23108:	4b0a      	ldr	r3, [pc, #40]	; (23134 <spi_cmd_complete+0x39c>)
   2310a:	0018      	movs	r0, r3
   2310c:	4b07      	ldr	r3, [pc, #28]	; (2312c <spi_cmd_complete+0x394>)
   2310e:	4798      	blx	r3
		result = N_FAIL;
   23110:	2300      	movs	r3, #0
   23112:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23116:	e2a1      	b.n	2365c <spi_cmd_complete+0x8c4>
   23118:	00038154 	.word	0x00038154
   2311c:	20003e08 	.word	0x20003e08
   23120:	000227cd 	.word	0x000227cd
   23124:	000381b4 	.word	0x000381b4
   23128:	00037ba0 	.word	0x00037ba0
   2312c:	0001d28d 	.word	0x0001d28d
   23130:	00037c68 	.word	0x00037c68
   23134:	00037be0 	.word	0x00037be0
   23138:	00022759 	.word	0x00022759
   2313c:	00037bb4 	.word	0x00037bb4
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   23140:	230f      	movs	r3, #15
   23142:	18fb      	adds	r3, r7, r3
   23144:	781b      	ldrb	r3, [r3, #0]
   23146:	2bcf      	cmp	r3, #207	; 0xcf
   23148:	d009      	beq.n	2315e <spi_cmd_complete+0x3c6>
   2314a:	230f      	movs	r3, #15
   2314c:	18fb      	adds	r3, r7, r3
   2314e:	781b      	ldrb	r3, [r3, #0]
   23150:	2bc5      	cmp	r3, #197	; 0xc5
   23152:	d004      	beq.n	2315e <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   23154:	230f      	movs	r3, #15
   23156:	18fb      	adds	r3, r7, r3
   23158:	781b      	ldrb	r3, [r3, #0]
   2315a:	2bc6      	cmp	r3, #198	; 0xc6
   2315c:	d106      	bne.n	2316c <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   2315e:	2376      	movs	r3, #118	; 0x76
   23160:	18fb      	adds	r3, r7, r3
   23162:	781a      	ldrb	r2, [r3, #0]
   23164:	2376      	movs	r3, #118	; 0x76
   23166:	18fb      	adds	r3, r7, r3
   23168:	3201      	adds	r2, #1
   2316a:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   2316c:	2376      	movs	r3, #118	; 0x76
   2316e:	18fb      	adds	r3, r7, r3
   23170:	781b      	ldrb	r3, [r3, #0]
   23172:	2276      	movs	r2, #118	; 0x76
   23174:	18ba      	adds	r2, r7, r2
   23176:	1c59      	adds	r1, r3, #1
   23178:	7011      	strb	r1, [r2, #0]
   2317a:	001a      	movs	r2, r3
   2317c:	2318      	movs	r3, #24
   2317e:	18fb      	adds	r3, r7, r3
   23180:	5c9a      	ldrb	r2, [r3, r2]
   23182:	2317      	movs	r3, #23
   23184:	18fb      	adds	r3, r7, r3
   23186:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   23188:	2317      	movs	r3, #23
   2318a:	18fb      	adds	r3, r7, r3
   2318c:	781b      	ldrb	r3, [r3, #0]
   2318e:	220f      	movs	r2, #15
   23190:	18ba      	adds	r2, r7, r2
   23192:	7812      	ldrb	r2, [r2, #0]
   23194:	429a      	cmp	r2, r3
   23196:	d018      	beq.n	231ca <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   23198:	4add      	ldr	r2, [pc, #884]	; (23510 <spi_cmd_complete+0x778>)
   2319a:	49de      	ldr	r1, [pc, #888]	; (23514 <spi_cmd_complete+0x77c>)
   2319c:	4bde      	ldr	r3, [pc, #888]	; (23518 <spi_cmd_complete+0x780>)
   2319e:	0018      	movs	r0, r3
   231a0:	4bde      	ldr	r3, [pc, #888]	; (2351c <spi_cmd_complete+0x784>)
   231a2:	4798      	blx	r3
   231a4:	230f      	movs	r3, #15
   231a6:	18fb      	adds	r3, r7, r3
   231a8:	7819      	ldrb	r1, [r3, #0]
   231aa:	2317      	movs	r3, #23
   231ac:	18fb      	adds	r3, r7, r3
   231ae:	781b      	ldrb	r3, [r3, #0]
   231b0:	001a      	movs	r2, r3
   231b2:	4bdb      	ldr	r3, [pc, #876]	; (23520 <spi_cmd_complete+0x788>)
   231b4:	0018      	movs	r0, r3
   231b6:	4bd9      	ldr	r3, [pc, #868]	; (2351c <spi_cmd_complete+0x784>)
   231b8:	4798      	blx	r3
   231ba:	4bda      	ldr	r3, [pc, #872]	; (23524 <spi_cmd_complete+0x78c>)
   231bc:	0018      	movs	r0, r3
   231be:	4bd7      	ldr	r3, [pc, #860]	; (2351c <spi_cmd_complete+0x784>)
   231c0:	4798      	blx	r3
		result = N_FAIL;
   231c2:	2300      	movs	r3, #0
   231c4:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   231c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   231c8:	e248      	b.n	2365c <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   231ca:	2376      	movs	r3, #118	; 0x76
   231cc:	18fb      	adds	r3, r7, r3
   231ce:	781b      	ldrb	r3, [r3, #0]
   231d0:	2276      	movs	r2, #118	; 0x76
   231d2:	18ba      	adds	r2, r7, r2
   231d4:	1c59      	adds	r1, r3, #1
   231d6:	7011      	strb	r1, [r2, #0]
   231d8:	001a      	movs	r2, r3
   231da:	2318      	movs	r3, #24
   231dc:	18fb      	adds	r3, r7, r3
   231de:	5c9a      	ldrb	r2, [r3, r2]
   231e0:	2317      	movs	r3, #23
   231e2:	18fb      	adds	r3, r7, r3
   231e4:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   231e6:	2317      	movs	r3, #23
   231e8:	18fb      	adds	r3, r7, r3
   231ea:	781b      	ldrb	r3, [r3, #0]
   231ec:	2b00      	cmp	r3, #0
   231ee:	d016      	beq.n	2321e <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   231f0:	4acd      	ldr	r2, [pc, #820]	; (23528 <spi_cmd_complete+0x790>)
   231f2:	49c8      	ldr	r1, [pc, #800]	; (23514 <spi_cmd_complete+0x77c>)
   231f4:	4bc8      	ldr	r3, [pc, #800]	; (23518 <spi_cmd_complete+0x780>)
   231f6:	0018      	movs	r0, r3
   231f8:	4bc8      	ldr	r3, [pc, #800]	; (2351c <spi_cmd_complete+0x784>)
   231fa:	4798      	blx	r3
   231fc:	2317      	movs	r3, #23
   231fe:	18fb      	adds	r3, r7, r3
   23200:	781b      	ldrb	r3, [r3, #0]
   23202:	001a      	movs	r2, r3
   23204:	4bc9      	ldr	r3, [pc, #804]	; (2352c <spi_cmd_complete+0x794>)
   23206:	0011      	movs	r1, r2
   23208:	0018      	movs	r0, r3
   2320a:	4bc4      	ldr	r3, [pc, #784]	; (2351c <spi_cmd_complete+0x784>)
   2320c:	4798      	blx	r3
   2320e:	4bc5      	ldr	r3, [pc, #788]	; (23524 <spi_cmd_complete+0x78c>)
   23210:	0018      	movs	r0, r3
   23212:	4bc2      	ldr	r3, [pc, #776]	; (2351c <spi_cmd_complete+0x784>)
   23214:	4798      	blx	r3
		result = N_FAIL;
   23216:	2300      	movs	r3, #0
   23218:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2321a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2321c:	e21e      	b.n	2365c <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   2321e:	230f      	movs	r3, #15
   23220:	18fb      	adds	r3, r7, r3
   23222:	781b      	ldrb	r3, [r3, #0]
   23224:	2bc4      	cmp	r3, #196	; 0xc4
   23226:	d00f      	beq.n	23248 <spi_cmd_complete+0x4b0>
   23228:	230f      	movs	r3, #15
   2322a:	18fb      	adds	r3, r7, r3
   2322c:	781b      	ldrb	r3, [r3, #0]
   2322e:	2bca      	cmp	r3, #202	; 0xca
   23230:	d00a      	beq.n	23248 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   23232:	230f      	movs	r3, #15
   23234:	18fb      	adds	r3, r7, r3
   23236:	781b      	ldrb	r3, [r3, #0]
   23238:	2bc2      	cmp	r3, #194	; 0xc2
   2323a:	d005      	beq.n	23248 <spi_cmd_complete+0x4b0>
   2323c:	230f      	movs	r3, #15
   2323e:	18fb      	adds	r3, r7, r3
   23240:	781b      	ldrb	r3, [r3, #0]
   23242:	2bc8      	cmp	r3, #200	; 0xc8
   23244:	d000      	beq.n	23248 <spi_cmd_complete+0x4b0>
   23246:	e208      	b.n	2365a <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   23248:	230a      	movs	r3, #10
   2324a:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   2324c:	2376      	movs	r3, #118	; 0x76
   2324e:	18fb      	adds	r3, r7, r3
   23250:	781a      	ldrb	r2, [r3, #0]
   23252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23254:	429a      	cmp	r2, r3
   23256:	d218      	bcs.n	2328a <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   23258:	2376      	movs	r3, #118	; 0x76
   2325a:	18fb      	adds	r3, r7, r3
   2325c:	781b      	ldrb	r3, [r3, #0]
   2325e:	2276      	movs	r2, #118	; 0x76
   23260:	18ba      	adds	r2, r7, r2
   23262:	1c59      	adds	r1, r3, #1
   23264:	7011      	strb	r1, [r2, #0]
   23266:	001a      	movs	r2, r3
   23268:	2318      	movs	r3, #24
   2326a:	18fb      	adds	r3, r7, r3
   2326c:	5c9a      	ldrb	r2, [r3, r2]
   2326e:	2317      	movs	r3, #23
   23270:	18fb      	adds	r3, r7, r3
   23272:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   23274:	2317      	movs	r3, #23
   23276:	18fb      	adds	r3, r7, r3
   23278:	781b      	ldrb	r3, [r3, #0]
   2327a:	091b      	lsrs	r3, r3, #4
   2327c:	b2db      	uxtb	r3, r3
   2327e:	001a      	movs	r2, r3
   23280:	230f      	movs	r3, #15
   23282:	4013      	ands	r3, r2
   23284:	2b0f      	cmp	r3, #15
   23286:	d103      	bne.n	23290 <spi_cmd_complete+0x4f8>
					break;
   23288:	e007      	b.n	2329a <spi_cmd_complete+0x502>
					retry = 0;
   2328a:	2300      	movs	r3, #0
   2328c:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   2328e:	e004      	b.n	2329a <spi_cmd_complete+0x502>
			} while (retry--);
   23290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23292:	1e5a      	subs	r2, r3, #1
   23294:	667a      	str	r2, [r7, #100]	; 0x64
   23296:	2b00      	cmp	r3, #0
   23298:	d1d8      	bne.n	2324c <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   2329a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2329c:	2b00      	cmp	r3, #0
   2329e:	dc18      	bgt.n	232d2 <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   232a0:	2395      	movs	r3, #149	; 0x95
   232a2:	009a      	lsls	r2, r3, #2
   232a4:	499b      	ldr	r1, [pc, #620]	; (23514 <spi_cmd_complete+0x77c>)
   232a6:	4b9c      	ldr	r3, [pc, #624]	; (23518 <spi_cmd_complete+0x780>)
   232a8:	0018      	movs	r0, r3
   232aa:	4b9c      	ldr	r3, [pc, #624]	; (2351c <spi_cmd_complete+0x784>)
   232ac:	4798      	blx	r3
   232ae:	2317      	movs	r3, #23
   232b0:	18fb      	adds	r3, r7, r3
   232b2:	781b      	ldrb	r3, [r3, #0]
   232b4:	001a      	movs	r2, r3
   232b6:	4b9e      	ldr	r3, [pc, #632]	; (23530 <spi_cmd_complete+0x798>)
   232b8:	0011      	movs	r1, r2
   232ba:	0018      	movs	r0, r3
   232bc:	4b97      	ldr	r3, [pc, #604]	; (2351c <spi_cmd_complete+0x784>)
   232be:	4798      	blx	r3
   232c0:	4b98      	ldr	r3, [pc, #608]	; (23524 <spi_cmd_complete+0x78c>)
   232c2:	0018      	movs	r0, r3
   232c4:	4b95      	ldr	r3, [pc, #596]	; (2351c <spi_cmd_complete+0x784>)
   232c6:	4798      	blx	r3
				result = N_RESET;
   232c8:	2301      	movs	r3, #1
   232ca:	425b      	negs	r3, r3
   232cc:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   232ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   232d0:	e1c4      	b.n	2365c <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   232d2:	230f      	movs	r3, #15
   232d4:	18fb      	adds	r3, r7, r3
   232d6:	781b      	ldrb	r3, [r3, #0]
   232d8:	2bc4      	cmp	r3, #196	; 0xc4
   232da:	d005      	beq.n	232e8 <spi_cmd_complete+0x550>
   232dc:	230f      	movs	r3, #15
   232de:	18fb      	adds	r3, r7, r3
   232e0:	781b      	ldrb	r3, [r3, #0]
   232e2:	2bca      	cmp	r3, #202	; 0xca
   232e4:	d000      	beq.n	232e8 <spi_cmd_complete+0x550>
   232e6:	e08e      	b.n	23406 <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   232e8:	2376      	movs	r3, #118	; 0x76
   232ea:	18fb      	adds	r3, r7, r3
   232ec:	781b      	ldrb	r3, [r3, #0]
   232ee:	3303      	adds	r3, #3
   232f0:	001a      	movs	r2, r3
   232f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   232f4:	429a      	cmp	r2, r3
   232f6:	d23c      	bcs.n	23372 <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   232f8:	2376      	movs	r3, #118	; 0x76
   232fa:	18fb      	adds	r3, r7, r3
   232fc:	781b      	ldrb	r3, [r3, #0]
   232fe:	2276      	movs	r2, #118	; 0x76
   23300:	18ba      	adds	r2, r7, r2
   23302:	1c59      	adds	r1, r3, #1
   23304:	7011      	strb	r1, [r2, #0]
   23306:	001a      	movs	r2, r3
   23308:	2318      	movs	r3, #24
   2330a:	18fb      	adds	r3, r7, r3
   2330c:	5c9a      	ldrb	r2, [r3, r2]
   2330e:	687b      	ldr	r3, [r7, #4]
   23310:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   23312:	687b      	ldr	r3, [r7, #4]
   23314:	1c5a      	adds	r2, r3, #1
   23316:	2376      	movs	r3, #118	; 0x76
   23318:	18fb      	adds	r3, r7, r3
   2331a:	781b      	ldrb	r3, [r3, #0]
   2331c:	2176      	movs	r1, #118	; 0x76
   2331e:	1879      	adds	r1, r7, r1
   23320:	1c58      	adds	r0, r3, #1
   23322:	7008      	strb	r0, [r1, #0]
   23324:	0019      	movs	r1, r3
   23326:	2318      	movs	r3, #24
   23328:	18fb      	adds	r3, r7, r3
   2332a:	5c5b      	ldrb	r3, [r3, r1]
   2332c:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   2332e:	687b      	ldr	r3, [r7, #4]
   23330:	1c9a      	adds	r2, r3, #2
   23332:	2376      	movs	r3, #118	; 0x76
   23334:	18fb      	adds	r3, r7, r3
   23336:	781b      	ldrb	r3, [r3, #0]
   23338:	2176      	movs	r1, #118	; 0x76
   2333a:	1879      	adds	r1, r7, r1
   2333c:	1c58      	adds	r0, r3, #1
   2333e:	7008      	strb	r0, [r1, #0]
   23340:	0019      	movs	r1, r3
   23342:	2318      	movs	r3, #24
   23344:	18fb      	adds	r3, r7, r3
   23346:	5c5b      	ldrb	r3, [r3, r1]
   23348:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   2334a:	687b      	ldr	r3, [r7, #4]
   2334c:	1cda      	adds	r2, r3, #3
   2334e:	2376      	movs	r3, #118	; 0x76
   23350:	18fb      	adds	r3, r7, r3
   23352:	781b      	ldrb	r3, [r3, #0]
   23354:	2176      	movs	r1, #118	; 0x76
   23356:	1879      	adds	r1, r7, r1
   23358:	1c58      	adds	r0, r3, #1
   2335a:	7008      	strb	r0, [r1, #0]
   2335c:	0019      	movs	r1, r3
   2335e:	2318      	movs	r3, #24
   23360:	18fb      	adds	r3, r7, r3
   23362:	5c5b      	ldrb	r3, [r3, r1]
   23364:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   23366:	4b73      	ldr	r3, [pc, #460]	; (23534 <spi_cmd_complete+0x79c>)
   23368:	781b      	ldrb	r3, [r3, #0]
   2336a:	2b00      	cmp	r3, #0
   2336c:	d000      	beq.n	23370 <spi_cmd_complete+0x5d8>
   2336e:	e174      	b.n	2365a <spi_cmd_complete+0x8c2>
   23370:	e011      	b.n	23396 <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   23372:	4a71      	ldr	r2, [pc, #452]	; (23538 <spi_cmd_complete+0x7a0>)
   23374:	4967      	ldr	r1, [pc, #412]	; (23514 <spi_cmd_complete+0x77c>)
   23376:	4b68      	ldr	r3, [pc, #416]	; (23518 <spi_cmd_complete+0x780>)
   23378:	0018      	movs	r0, r3
   2337a:	4b68      	ldr	r3, [pc, #416]	; (2351c <spi_cmd_complete+0x784>)
   2337c:	4798      	blx	r3
   2337e:	4b6f      	ldr	r3, [pc, #444]	; (2353c <spi_cmd_complete+0x7a4>)
   23380:	0018      	movs	r0, r3
   23382:	4b66      	ldr	r3, [pc, #408]	; (2351c <spi_cmd_complete+0x784>)
   23384:	4798      	blx	r3
   23386:	4b67      	ldr	r3, [pc, #412]	; (23524 <spi_cmd_complete+0x78c>)
   23388:	0018      	movs	r0, r3
   2338a:	4b64      	ldr	r3, [pc, #400]	; (2351c <spi_cmd_complete+0x784>)
   2338c:	4798      	blx	r3
					result = N_FAIL;
   2338e:	2300      	movs	r3, #0
   23390:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   23392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23394:	e162      	b.n	2365c <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   23396:	2376      	movs	r3, #118	; 0x76
   23398:	18fb      	adds	r3, r7, r3
   2339a:	781b      	ldrb	r3, [r3, #0]
   2339c:	3301      	adds	r3, #1
   2339e:	001a      	movs	r2, r3
   233a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   233a2:	429a      	cmp	r2, r3
   233a4:	d21c      	bcs.n	233e0 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   233a6:	2376      	movs	r3, #118	; 0x76
   233a8:	18fb      	adds	r3, r7, r3
   233aa:	781b      	ldrb	r3, [r3, #0]
   233ac:	2276      	movs	r2, #118	; 0x76
   233ae:	18ba      	adds	r2, r7, r2
   233b0:	1c59      	adds	r1, r3, #1
   233b2:	7011      	strb	r1, [r2, #0]
   233b4:	001a      	movs	r2, r3
   233b6:	2318      	movs	r3, #24
   233b8:	18fb      	adds	r3, r7, r3
   233ba:	5c9a      	ldrb	r2, [r3, r2]
   233bc:	2314      	movs	r3, #20
   233be:	18fb      	adds	r3, r7, r3
   233c0:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   233c2:	2376      	movs	r3, #118	; 0x76
   233c4:	18fb      	adds	r3, r7, r3
   233c6:	781b      	ldrb	r3, [r3, #0]
   233c8:	2276      	movs	r2, #118	; 0x76
   233ca:	18ba      	adds	r2, r7, r2
   233cc:	1c59      	adds	r1, r3, #1
   233ce:	7011      	strb	r1, [r2, #0]
   233d0:	001a      	movs	r2, r3
   233d2:	2318      	movs	r3, #24
   233d4:	18fb      	adds	r3, r7, r3
   233d6:	5c9a      	ldrb	r2, [r3, r2]
   233d8:	2314      	movs	r3, #20
   233da:	18fb      	adds	r3, r7, r3
   233dc:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   233de:	e13c      	b.n	2365a <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   233e0:	239c      	movs	r3, #156	; 0x9c
   233e2:	009a      	lsls	r2, r3, #2
   233e4:	494b      	ldr	r1, [pc, #300]	; (23514 <spi_cmd_complete+0x77c>)
   233e6:	4b4c      	ldr	r3, [pc, #304]	; (23518 <spi_cmd_complete+0x780>)
   233e8:	0018      	movs	r0, r3
   233ea:	4b4c      	ldr	r3, [pc, #304]	; (2351c <spi_cmd_complete+0x784>)
   233ec:	4798      	blx	r3
   233ee:	4b54      	ldr	r3, [pc, #336]	; (23540 <spi_cmd_complete+0x7a8>)
   233f0:	0018      	movs	r0, r3
   233f2:	4b4a      	ldr	r3, [pc, #296]	; (2351c <spi_cmd_complete+0x784>)
   233f4:	4798      	blx	r3
   233f6:	4b4b      	ldr	r3, [pc, #300]	; (23524 <spi_cmd_complete+0x78c>)
   233f8:	0018      	movs	r0, r3
   233fa:	4b48      	ldr	r3, [pc, #288]	; (2351c <spi_cmd_complete+0x784>)
   233fc:	4798      	blx	r3
						result = N_FAIL;
   233fe:	2300      	movs	r3, #0
   23400:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   23402:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23404:	e12a      	b.n	2365c <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   23406:	230f      	movs	r3, #15
   23408:	18fb      	adds	r3, r7, r3
   2340a:	781b      	ldrb	r3, [r3, #0]
   2340c:	2bc2      	cmp	r3, #194	; 0xc2
   2340e:	d005      	beq.n	2341c <spi_cmd_complete+0x684>
   23410:	230f      	movs	r3, #15
   23412:	18fb      	adds	r3, r7, r3
   23414:	781b      	ldrb	r3, [r3, #0]
   23416:	2bc8      	cmp	r3, #200	; 0xc8
   23418:	d000      	beq.n	2341c <spi_cmd_complete+0x684>
   2341a:	e11e      	b.n	2365a <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   2341c:	2300      	movs	r3, #0
   2341e:	663b      	str	r3, [r7, #96]	; 0x60
   23420:	e011      	b.n	23446 <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   23422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23424:	1c5a      	adds	r2, r3, #1
   23426:	663a      	str	r2, [r7, #96]	; 0x60
   23428:	001a      	movs	r2, r3
   2342a:	687b      	ldr	r3, [r7, #4]
   2342c:	189a      	adds	r2, r3, r2
   2342e:	2376      	movs	r3, #118	; 0x76
   23430:	18fb      	adds	r3, r7, r3
   23432:	781b      	ldrb	r3, [r3, #0]
   23434:	2176      	movs	r1, #118	; 0x76
   23436:	1879      	adds	r1, r7, r1
   23438:	1c58      	adds	r0, r3, #1
   2343a:	7008      	strb	r0, [r1, #0]
   2343c:	0019      	movs	r1, r3
   2343e:	2318      	movs	r3, #24
   23440:	18fb      	adds	r3, r7, r3
   23442:	5c5b      	ldrb	r3, [r3, r1]
   23444:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   23446:	2376      	movs	r3, #118	; 0x76
   23448:	18fb      	adds	r3, r7, r3
   2344a:	781a      	ldrb	r2, [r3, #0]
   2344c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2344e:	429a      	cmp	r2, r3
   23450:	d203      	bcs.n	2345a <spi_cmd_complete+0x6c2>
   23452:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23454:	683b      	ldr	r3, [r7, #0]
   23456:	429a      	cmp	r2, r3
   23458:	d3e3      	bcc.n	23422 <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   2345a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2345c:	683a      	ldr	r2, [r7, #0]
   2345e:	1ad3      	subs	r3, r2, r3
   23460:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   23462:	683b      	ldr	r3, [r7, #0]
   23464:	2b00      	cmp	r3, #0
   23466:	d100      	bne.n	2346a <spi_cmd_complete+0x6d2>
   23468:	e0f1      	b.n	2364e <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   2346a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2346c:	2280      	movs	r2, #128	; 0x80
   2346e:	0192      	lsls	r2, r2, #6
   23470:	1ad3      	subs	r3, r2, r3
   23472:	001a      	movs	r2, r3
   23474:	683b      	ldr	r3, [r7, #0]
   23476:	429a      	cmp	r2, r3
   23478:	d302      	bcc.n	23480 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   2347a:	683b      	ldr	r3, [r7, #0]
   2347c:	65fb      	str	r3, [r7, #92]	; 0x5c
   2347e:	e004      	b.n	2348a <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   23480:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23482:	2280      	movs	r2, #128	; 0x80
   23484:	0192      	lsls	r2, r2, #6
   23486:	1ad3      	subs	r3, r2, r3
   23488:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   2348a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2348c:	687a      	ldr	r2, [r7, #4]
   2348e:	18d3      	adds	r3, r2, r3
   23490:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   23492:	b292      	uxth	r2, r2
   23494:	0011      	movs	r1, r2
   23496:	0018      	movs	r0, r3
   23498:	4b2a      	ldr	r3, [pc, #168]	; (23544 <spi_cmd_complete+0x7ac>)
   2349a:	4798      	blx	r3
   2349c:	1e03      	subs	r3, r0, #0
   2349e:	d010      	beq.n	234c2 <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   234a0:	4a29      	ldr	r2, [pc, #164]	; (23548 <spi_cmd_complete+0x7b0>)
   234a2:	491c      	ldr	r1, [pc, #112]	; (23514 <spi_cmd_complete+0x77c>)
   234a4:	4b1c      	ldr	r3, [pc, #112]	; (23518 <spi_cmd_complete+0x780>)
   234a6:	0018      	movs	r0, r3
   234a8:	4b1c      	ldr	r3, [pc, #112]	; (2351c <spi_cmd_complete+0x784>)
   234aa:	4798      	blx	r3
   234ac:	4b27      	ldr	r3, [pc, #156]	; (2354c <spi_cmd_complete+0x7b4>)
   234ae:	0018      	movs	r0, r3
   234b0:	4b1a      	ldr	r3, [pc, #104]	; (2351c <spi_cmd_complete+0x784>)
   234b2:	4798      	blx	r3
   234b4:	4b1b      	ldr	r3, [pc, #108]	; (23524 <spi_cmd_complete+0x78c>)
   234b6:	0018      	movs	r0, r3
   234b8:	4b18      	ldr	r3, [pc, #96]	; (2351c <spi_cmd_complete+0x784>)
   234ba:	4798      	blx	r3
						result = N_FAIL;
   234bc:	2300      	movs	r3, #0
   234be:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   234c0:	e0cb      	b.n	2365a <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   234c2:	4b1c      	ldr	r3, [pc, #112]	; (23534 <spi_cmd_complete+0x79c>)
   234c4:	781b      	ldrb	r3, [r3, #0]
   234c6:	2b00      	cmp	r3, #0
   234c8:	d119      	bne.n	234fe <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   234ca:	2314      	movs	r3, #20
   234cc:	18fb      	adds	r3, r7, r3
   234ce:	2102      	movs	r1, #2
   234d0:	0018      	movs	r0, r3
   234d2:	4b1c      	ldr	r3, [pc, #112]	; (23544 <spi_cmd_complete+0x7ac>)
   234d4:	4798      	blx	r3
   234d6:	1e03      	subs	r3, r0, #0
   234d8:	d011      	beq.n	234fe <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   234da:	23a6      	movs	r3, #166	; 0xa6
   234dc:	009a      	lsls	r2, r3, #2
   234de:	490d      	ldr	r1, [pc, #52]	; (23514 <spi_cmd_complete+0x77c>)
   234e0:	4b0d      	ldr	r3, [pc, #52]	; (23518 <spi_cmd_complete+0x780>)
   234e2:	0018      	movs	r0, r3
   234e4:	4b0d      	ldr	r3, [pc, #52]	; (2351c <spi_cmd_complete+0x784>)
   234e6:	4798      	blx	r3
   234e8:	4b19      	ldr	r3, [pc, #100]	; (23550 <spi_cmd_complete+0x7b8>)
   234ea:	0018      	movs	r0, r3
   234ec:	4b0b      	ldr	r3, [pc, #44]	; (2351c <spi_cmd_complete+0x784>)
   234ee:	4798      	blx	r3
   234f0:	4b0c      	ldr	r3, [pc, #48]	; (23524 <spi_cmd_complete+0x78c>)
   234f2:	0018      	movs	r0, r3
   234f4:	4b09      	ldr	r3, [pc, #36]	; (2351c <spi_cmd_complete+0x784>)
   234f6:	4798      	blx	r3
							result = N_FAIL;
   234f8:	2300      	movs	r3, #0
   234fa:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   234fc:	e0ad      	b.n	2365a <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   234fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23502:	18d3      	adds	r3, r2, r3
   23504:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   23506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23508:	683a      	ldr	r2, [r7, #0]
   2350a:	1ad3      	subs	r3, r2, r3
   2350c:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   2350e:	e09e      	b.n	2364e <spi_cmd_complete+0x8b6>
   23510:	0000022f 	.word	0x0000022f
   23514:	000381b4 	.word	0x000381b4
   23518:	00037ba0 	.word	0x00037ba0
   2351c:	0001d28d 	.word	0x0001d28d
   23520:	00037c98 	.word	0x00037c98
   23524:	00037be0 	.word	0x00037be0
   23528:	00000239 	.word	0x00000239
   2352c:	00037cd4 	.word	0x00037cd4
   23530:	00037d08 	.word	0x00037d08
   23534:	20003e08 	.word	0x20003e08
   23538:	00000263 	.word	0x00000263
   2353c:	00037d38 	.word	0x00037d38
   23540:	00037d68 	.word	0x00037d68
   23544:	000226d1 	.word	0x000226d1
   23548:	0000028e 	.word	0x0000028e
   2354c:	00037d98 	.word	0x00037d98
   23550:	00037dcc 	.word	0x00037dcc
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   23554:	683a      	ldr	r2, [r7, #0]
   23556:	2380      	movs	r3, #128	; 0x80
   23558:	019b      	lsls	r3, r3, #6
   2355a:	429a      	cmp	r2, r3
   2355c:	d802      	bhi.n	23564 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   2355e:	683b      	ldr	r3, [r7, #0]
   23560:	65bb      	str	r3, [r7, #88]	; 0x58
   23562:	e002      	b.n	2356a <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   23564:	2380      	movs	r3, #128	; 0x80
   23566:	019b      	lsls	r3, r3, #6
   23568:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   2356a:	230a      	movs	r3, #10
   2356c:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   2356e:	2317      	movs	r3, #23
   23570:	18fb      	adds	r3, r7, r3
   23572:	2101      	movs	r1, #1
   23574:	0018      	movs	r0, r3
   23576:	4b3b      	ldr	r3, [pc, #236]	; (23664 <spi_cmd_complete+0x8cc>)
   23578:	4798      	blx	r3
   2357a:	1e03      	subs	r3, r0, #0
   2357c:	d011      	beq.n	235a2 <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   2357e:	23ae      	movs	r3, #174	; 0xae
   23580:	009a      	lsls	r2, r3, #2
   23582:	4939      	ldr	r1, [pc, #228]	; (23668 <spi_cmd_complete+0x8d0>)
   23584:	4b39      	ldr	r3, [pc, #228]	; (2366c <spi_cmd_complete+0x8d4>)
   23586:	0018      	movs	r0, r3
   23588:	4b39      	ldr	r3, [pc, #228]	; (23670 <spi_cmd_complete+0x8d8>)
   2358a:	4798      	blx	r3
   2358c:	4b39      	ldr	r3, [pc, #228]	; (23674 <spi_cmd_complete+0x8dc>)
   2358e:	0018      	movs	r0, r3
   23590:	4b37      	ldr	r3, [pc, #220]	; (23670 <spi_cmd_complete+0x8d8>)
   23592:	4798      	blx	r3
   23594:	4b38      	ldr	r3, [pc, #224]	; (23678 <spi_cmd_complete+0x8e0>)
   23596:	0018      	movs	r0, r3
   23598:	4b35      	ldr	r3, [pc, #212]	; (23670 <spi_cmd_complete+0x8d8>)
   2359a:	4798      	blx	r3
							result = N_FAIL;
   2359c:	2300      	movs	r3, #0
   2359e:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   235a0:	e010      	b.n	235c4 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   235a2:	2317      	movs	r3, #23
   235a4:	18fb      	adds	r3, r7, r3
   235a6:	781b      	ldrb	r3, [r3, #0]
   235a8:	091b      	lsrs	r3, r3, #4
   235aa:	b2db      	uxtb	r3, r3
   235ac:	001a      	movs	r2, r3
   235ae:	230f      	movs	r3, #15
   235b0:	4013      	ands	r3, r2
   235b2:	2b0f      	cmp	r3, #15
   235b4:	d005      	beq.n	235c2 <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   235b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   235b8:	1e5a      	subs	r2, r3, #1
   235ba:	667a      	str	r2, [r7, #100]	; 0x64
   235bc:	2b00      	cmp	r3, #0
   235be:	d1d6      	bne.n	2356e <spi_cmd_complete+0x7d6>
   235c0:	e000      	b.n	235c4 <spi_cmd_complete+0x82c>
							break;
   235c2:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   235c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   235c6:	2b00      	cmp	r3, #0
   235c8:	d046      	beq.n	23658 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   235ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   235cc:	687a      	ldr	r2, [r7, #4]
   235ce:	18d3      	adds	r3, r2, r3
   235d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
   235d2:	b292      	uxth	r2, r2
   235d4:	0011      	movs	r1, r2
   235d6:	0018      	movs	r0, r3
   235d8:	4b22      	ldr	r3, [pc, #136]	; (23664 <spi_cmd_complete+0x8cc>)
   235da:	4798      	blx	r3
   235dc:	1e03      	subs	r3, r0, #0
   235de:	d011      	beq.n	23604 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   235e0:	23b2      	movs	r3, #178	; 0xb2
   235e2:	009a      	lsls	r2, r3, #2
   235e4:	4920      	ldr	r1, [pc, #128]	; (23668 <spi_cmd_complete+0x8d0>)
   235e6:	4b21      	ldr	r3, [pc, #132]	; (2366c <spi_cmd_complete+0x8d4>)
   235e8:	0018      	movs	r0, r3
   235ea:	4b21      	ldr	r3, [pc, #132]	; (23670 <spi_cmd_complete+0x8d8>)
   235ec:	4798      	blx	r3
   235ee:	4b23      	ldr	r3, [pc, #140]	; (2367c <spi_cmd_complete+0x8e4>)
   235f0:	0018      	movs	r0, r3
   235f2:	4b1f      	ldr	r3, [pc, #124]	; (23670 <spi_cmd_complete+0x8d8>)
   235f4:	4798      	blx	r3
   235f6:	4b20      	ldr	r3, [pc, #128]	; (23678 <spi_cmd_complete+0x8e0>)
   235f8:	0018      	movs	r0, r3
   235fa:	4b1d      	ldr	r3, [pc, #116]	; (23670 <spi_cmd_complete+0x8d8>)
   235fc:	4798      	blx	r3
						result = N_FAIL;
   235fe:	2300      	movs	r3, #0
   23600:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   23602:	e02a      	b.n	2365a <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   23604:	4b1e      	ldr	r3, [pc, #120]	; (23680 <spi_cmd_complete+0x8e8>)
   23606:	781b      	ldrb	r3, [r3, #0]
   23608:	2b00      	cmp	r3, #0
   2360a:	d118      	bne.n	2363e <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   2360c:	2314      	movs	r3, #20
   2360e:	18fb      	adds	r3, r7, r3
   23610:	2102      	movs	r1, #2
   23612:	0018      	movs	r0, r3
   23614:	4b13      	ldr	r3, [pc, #76]	; (23664 <spi_cmd_complete+0x8cc>)
   23616:	4798      	blx	r3
   23618:	1e03      	subs	r3, r0, #0
   2361a:	d010      	beq.n	2363e <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   2361c:	4a19      	ldr	r2, [pc, #100]	; (23684 <spi_cmd_complete+0x8ec>)
   2361e:	4912      	ldr	r1, [pc, #72]	; (23668 <spi_cmd_complete+0x8d0>)
   23620:	4b12      	ldr	r3, [pc, #72]	; (2366c <spi_cmd_complete+0x8d4>)
   23622:	0018      	movs	r0, r3
   23624:	4b12      	ldr	r3, [pc, #72]	; (23670 <spi_cmd_complete+0x8d8>)
   23626:	4798      	blx	r3
   23628:	4b17      	ldr	r3, [pc, #92]	; (23688 <spi_cmd_complete+0x8f0>)
   2362a:	0018      	movs	r0, r3
   2362c:	4b10      	ldr	r3, [pc, #64]	; (23670 <spi_cmd_complete+0x8d8>)
   2362e:	4798      	blx	r3
   23630:	4b11      	ldr	r3, [pc, #68]	; (23678 <spi_cmd_complete+0x8e0>)
   23632:	0018      	movs	r0, r3
   23634:	4b0e      	ldr	r3, [pc, #56]	; (23670 <spi_cmd_complete+0x8d8>)
   23636:	4798      	blx	r3
							result = N_FAIL;
   23638:	2300      	movs	r3, #0
   2363a:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   2363c:	e00d      	b.n	2365a <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   2363e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23642:	18d3      	adds	r3, r2, r3
   23644:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   23646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23648:	683a      	ldr	r2, [r7, #0]
   2364a:	1ad3      	subs	r3, r2, r3
   2364c:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   2364e:	683b      	ldr	r3, [r7, #0]
   23650:	2b00      	cmp	r3, #0
   23652:	d000      	beq.n	23656 <spi_cmd_complete+0x8be>
   23654:	e77e      	b.n	23554 <spi_cmd_complete+0x7bc>
   23656:	e000      	b.n	2365a <spi_cmd_complete+0x8c2>
						break;
   23658:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   2365a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   2365c:	0018      	movs	r0, r3
   2365e:	46bd      	mov	sp, r7
   23660:	b01f      	add	sp, #124	; 0x7c
   23662:	bd90      	pop	{r4, r7, pc}
   23664:	000226d1 	.word	0x000226d1
   23668:	000381b4 	.word	0x000381b4
   2366c:	00037ba0 	.word	0x00037ba0
   23670:	0001d28d 	.word	0x0001d28d
   23674:	00037e04 	.word	0x00037e04
   23678:	00037be0 	.word	0x00037be0
   2367c:	00037d98 	.word	0x00037d98
   23680:	20003e08 	.word	0x20003e08
   23684:	000002d2 	.word	0x000002d2
   23688:	00037dcc 	.word	0x00037dcc

0002368c <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   2368c:	b580      	push	{r7, lr}
   2368e:	b086      	sub	sp, #24
   23690:	af00      	add	r7, sp, #0
   23692:	6078      	str	r0, [r7, #4]
   23694:	000a      	movs	r2, r1
   23696:	1cbb      	adds	r3, r7, #2
   23698:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   2369a:	2313      	movs	r3, #19
   2369c:	18fb      	adds	r3, r7, r3
   2369e:	2201      	movs	r2, #1
   236a0:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   236a2:	230c      	movs	r3, #12
   236a4:	18fb      	adds	r3, r7, r3
   236a6:	2200      	movs	r2, #0
   236a8:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   236aa:	2316      	movs	r3, #22
   236ac:	18fb      	adds	r3, r7, r3
   236ae:	2200      	movs	r2, #0
   236b0:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   236b2:	1cbb      	adds	r3, r7, #2
   236b4:	881a      	ldrh	r2, [r3, #0]
   236b6:	2380      	movs	r3, #128	; 0x80
   236b8:	019b      	lsls	r3, r3, #6
   236ba:	429a      	cmp	r2, r3
   236bc:	d805      	bhi.n	236ca <spi_data_write+0x3e>
			nbytes = sz;
   236be:	2314      	movs	r3, #20
   236c0:	18fb      	adds	r3, r7, r3
   236c2:	1cba      	adds	r2, r7, #2
   236c4:	8812      	ldrh	r2, [r2, #0]
   236c6:	801a      	strh	r2, [r3, #0]
   236c8:	e004      	b.n	236d4 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   236ca:	2314      	movs	r3, #20
   236cc:	18fb      	adds	r3, r7, r3
   236ce:	2280      	movs	r2, #128	; 0x80
   236d0:	0192      	lsls	r2, r2, #6
   236d2:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   236d4:	2311      	movs	r3, #17
   236d6:	18fb      	adds	r3, r7, r3
   236d8:	22f0      	movs	r2, #240	; 0xf0
   236da:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   236dc:	2316      	movs	r3, #22
   236de:	18fb      	adds	r3, r7, r3
   236e0:	2200      	movs	r2, #0
   236e2:	5e9b      	ldrsh	r3, [r3, r2]
   236e4:	2b00      	cmp	r3, #0
   236e6:	d10f      	bne.n	23708 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   236e8:	1cbb      	adds	r3, r7, #2
   236ea:	881a      	ldrh	r2, [r3, #0]
   236ec:	2380      	movs	r3, #128	; 0x80
   236ee:	019b      	lsls	r3, r3, #6
   236f0:	429a      	cmp	r2, r3
   236f2:	d804      	bhi.n	236fe <spi_data_write+0x72>
				order = 0x3;
   236f4:	2312      	movs	r3, #18
   236f6:	18fb      	adds	r3, r7, r3
   236f8:	2203      	movs	r2, #3
   236fa:	701a      	strb	r2, [r3, #0]
   236fc:	e013      	b.n	23726 <spi_data_write+0x9a>
			else
				order = 0x1;
   236fe:	2312      	movs	r3, #18
   23700:	18fb      	adds	r3, r7, r3
   23702:	2201      	movs	r2, #1
   23704:	701a      	strb	r2, [r3, #0]
   23706:	e00e      	b.n	23726 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   23708:	1cbb      	adds	r3, r7, #2
   2370a:	881a      	ldrh	r2, [r3, #0]
   2370c:	2380      	movs	r3, #128	; 0x80
   2370e:	019b      	lsls	r3, r3, #6
   23710:	429a      	cmp	r2, r3
   23712:	d804      	bhi.n	2371e <spi_data_write+0x92>
				order = 0x3;
   23714:	2312      	movs	r3, #18
   23716:	18fb      	adds	r3, r7, r3
   23718:	2203      	movs	r2, #3
   2371a:	701a      	strb	r2, [r3, #0]
   2371c:	e003      	b.n	23726 <spi_data_write+0x9a>
			else
				order = 0x2;
   2371e:	2312      	movs	r3, #18
   23720:	18fb      	adds	r3, r7, r3
   23722:	2202      	movs	r2, #2
   23724:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   23726:	2311      	movs	r3, #17
   23728:	18fb      	adds	r3, r7, r3
   2372a:	781a      	ldrb	r2, [r3, #0]
   2372c:	2312      	movs	r3, #18
   2372e:	18fb      	adds	r3, r7, r3
   23730:	781b      	ldrb	r3, [r3, #0]
   23732:	4313      	orrs	r3, r2
   23734:	b2da      	uxtb	r2, r3
   23736:	2311      	movs	r3, #17
   23738:	18fb      	adds	r3, r7, r3
   2373a:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   2373c:	2311      	movs	r3, #17
   2373e:	18fb      	adds	r3, r7, r3
   23740:	2101      	movs	r1, #1
   23742:	0018      	movs	r0, r3
   23744:	4b3c      	ldr	r3, [pc, #240]	; (23838 <spi_data_write+0x1ac>)
   23746:	4798      	blx	r3
   23748:	1e03      	subs	r3, r0, #0
   2374a:	d012      	beq.n	23772 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   2374c:	4a3b      	ldr	r2, [pc, #236]	; (2383c <spi_data_write+0x1b0>)
   2374e:	493c      	ldr	r1, [pc, #240]	; (23840 <spi_data_write+0x1b4>)
   23750:	4b3c      	ldr	r3, [pc, #240]	; (23844 <spi_data_write+0x1b8>)
   23752:	0018      	movs	r0, r3
   23754:	4b3c      	ldr	r3, [pc, #240]	; (23848 <spi_data_write+0x1bc>)
   23756:	4798      	blx	r3
   23758:	4b3c      	ldr	r3, [pc, #240]	; (2384c <spi_data_write+0x1c0>)
   2375a:	0018      	movs	r0, r3
   2375c:	4b3a      	ldr	r3, [pc, #232]	; (23848 <spi_data_write+0x1bc>)
   2375e:	4798      	blx	r3
   23760:	4b3b      	ldr	r3, [pc, #236]	; (23850 <spi_data_write+0x1c4>)
   23762:	0018      	movs	r0, r3
   23764:	4b38      	ldr	r3, [pc, #224]	; (23848 <spi_data_write+0x1bc>)
   23766:	4798      	blx	r3
			result = N_FAIL;
   23768:	2313      	movs	r3, #19
   2376a:	18fb      	adds	r3, r7, r3
   2376c:	2200      	movs	r2, #0
   2376e:	701a      	strb	r2, [r3, #0]
			break;
   23770:	e059      	b.n	23826 <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   23772:	2316      	movs	r3, #22
   23774:	18fb      	adds	r3, r7, r3
   23776:	2200      	movs	r2, #0
   23778:	5e9b      	ldrsh	r3, [r3, r2]
   2377a:	687a      	ldr	r2, [r7, #4]
   2377c:	18d2      	adds	r2, r2, r3
   2377e:	2314      	movs	r3, #20
   23780:	18fb      	adds	r3, r7, r3
   23782:	881b      	ldrh	r3, [r3, #0]
   23784:	0019      	movs	r1, r3
   23786:	0010      	movs	r0, r2
   23788:	4b2b      	ldr	r3, [pc, #172]	; (23838 <spi_data_write+0x1ac>)
   2378a:	4798      	blx	r3
   2378c:	1e03      	subs	r3, r0, #0
   2378e:	d012      	beq.n	237b6 <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   23790:	4a30      	ldr	r2, [pc, #192]	; (23854 <spi_data_write+0x1c8>)
   23792:	492b      	ldr	r1, [pc, #172]	; (23840 <spi_data_write+0x1b4>)
   23794:	4b2b      	ldr	r3, [pc, #172]	; (23844 <spi_data_write+0x1b8>)
   23796:	0018      	movs	r0, r3
   23798:	4b2b      	ldr	r3, [pc, #172]	; (23848 <spi_data_write+0x1bc>)
   2379a:	4798      	blx	r3
   2379c:	4b2e      	ldr	r3, [pc, #184]	; (23858 <spi_data_write+0x1cc>)
   2379e:	0018      	movs	r0, r3
   237a0:	4b29      	ldr	r3, [pc, #164]	; (23848 <spi_data_write+0x1bc>)
   237a2:	4798      	blx	r3
   237a4:	4b2a      	ldr	r3, [pc, #168]	; (23850 <spi_data_write+0x1c4>)
   237a6:	0018      	movs	r0, r3
   237a8:	4b27      	ldr	r3, [pc, #156]	; (23848 <spi_data_write+0x1bc>)
   237aa:	4798      	blx	r3
			result = N_FAIL;
   237ac:	2313      	movs	r3, #19
   237ae:	18fb      	adds	r3, r7, r3
   237b0:	2200      	movs	r2, #0
   237b2:	701a      	strb	r2, [r3, #0]
			break;
   237b4:	e037      	b.n	23826 <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   237b6:	4b29      	ldr	r3, [pc, #164]	; (2385c <spi_data_write+0x1d0>)
   237b8:	781b      	ldrb	r3, [r3, #0]
   237ba:	2b00      	cmp	r3, #0
   237bc:	d11b      	bne.n	237f6 <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   237be:	230c      	movs	r3, #12
   237c0:	18fb      	adds	r3, r7, r3
   237c2:	2102      	movs	r1, #2
   237c4:	0018      	movs	r0, r3
   237c6:	4b1c      	ldr	r3, [pc, #112]	; (23838 <spi_data_write+0x1ac>)
   237c8:	4798      	blx	r3
   237ca:	1e03      	subs	r3, r0, #0
   237cc:	d013      	beq.n	237f6 <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   237ce:	23d7      	movs	r3, #215	; 0xd7
   237d0:	009a      	lsls	r2, r3, #2
   237d2:	491b      	ldr	r1, [pc, #108]	; (23840 <spi_data_write+0x1b4>)
   237d4:	4b1b      	ldr	r3, [pc, #108]	; (23844 <spi_data_write+0x1b8>)
   237d6:	0018      	movs	r0, r3
   237d8:	4b1b      	ldr	r3, [pc, #108]	; (23848 <spi_data_write+0x1bc>)
   237da:	4798      	blx	r3
   237dc:	4b20      	ldr	r3, [pc, #128]	; (23860 <spi_data_write+0x1d4>)
   237de:	0018      	movs	r0, r3
   237e0:	4b19      	ldr	r3, [pc, #100]	; (23848 <spi_data_write+0x1bc>)
   237e2:	4798      	blx	r3
   237e4:	4b1a      	ldr	r3, [pc, #104]	; (23850 <spi_data_write+0x1c4>)
   237e6:	0018      	movs	r0, r3
   237e8:	4b17      	ldr	r3, [pc, #92]	; (23848 <spi_data_write+0x1bc>)
   237ea:	4798      	blx	r3
				result = N_FAIL;
   237ec:	2313      	movs	r3, #19
   237ee:	18fb      	adds	r3, r7, r3
   237f0:	2200      	movs	r2, #0
   237f2:	701a      	strb	r2, [r3, #0]
				break;
   237f4:	e017      	b.n	23826 <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   237f6:	2316      	movs	r3, #22
   237f8:	18fb      	adds	r3, r7, r3
   237fa:	881a      	ldrh	r2, [r3, #0]
   237fc:	2314      	movs	r3, #20
   237fe:	18fb      	adds	r3, r7, r3
   23800:	881b      	ldrh	r3, [r3, #0]
   23802:	18d3      	adds	r3, r2, r3
   23804:	b29a      	uxth	r2, r3
   23806:	2316      	movs	r3, #22
   23808:	18fb      	adds	r3, r7, r3
   2380a:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   2380c:	1cbb      	adds	r3, r7, #2
   2380e:	1cb9      	adds	r1, r7, #2
   23810:	2214      	movs	r2, #20
   23812:	18ba      	adds	r2, r7, r2
   23814:	8809      	ldrh	r1, [r1, #0]
   23816:	8812      	ldrh	r2, [r2, #0]
   23818:	1a8a      	subs	r2, r1, r2
   2381a:	801a      	strh	r2, [r3, #0]
	} while (sz);
   2381c:	1cbb      	adds	r3, r7, #2
   2381e:	881b      	ldrh	r3, [r3, #0]
   23820:	2b00      	cmp	r3, #0
   23822:	d000      	beq.n	23826 <spi_data_write+0x19a>
   23824:	e745      	b.n	236b2 <spi_data_write+0x26>


	return result;
   23826:	2313      	movs	r3, #19
   23828:	18fb      	adds	r3, r7, r3
   2382a:	781b      	ldrb	r3, [r3, #0]
   2382c:	b25b      	sxtb	r3, r3
}
   2382e:	0018      	movs	r0, r3
   23830:	46bd      	mov	sp, r7
   23832:	b006      	add	sp, #24
   23834:	bd80      	pop	{r7, pc}
   23836:	46c0      	nop			; (mov r8, r8)
   23838:	00022715 	.word	0x00022715
   2383c:	00000349 	.word	0x00000349
   23840:	000381c8 	.word	0x000381c8
   23844:	00037ba0 	.word	0x00037ba0
   23848:	0001d28d 	.word	0x0001d28d
   2384c:	00037e68 	.word	0x00037e68
   23850:	00037be0 	.word	0x00037be0
   23854:	00000352 	.word	0x00000352
   23858:	00037ea0 	.word	0x00037ea0
   2385c:	20003e08 	.word	0x20003e08
   23860:	00037ed4 	.word	0x00037ed4

00023864 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   23864:	b590      	push	{r4, r7, lr}
   23866:	b087      	sub	sp, #28
   23868:	af02      	add	r7, sp, #8
   2386a:	6078      	str	r0, [r7, #4]
   2386c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2386e:	230f      	movs	r3, #15
   23870:	18fb      	adds	r3, r7, r3
   23872:	220a      	movs	r2, #10
   23874:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23876:	230c      	movs	r3, #12
   23878:	18fb      	adds	r3, r7, r3
   2387a:	2201      	movs	r2, #1
   2387c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   2387e:	230e      	movs	r3, #14
   23880:	18fb      	adds	r3, r7, r3
   23882:	22c9      	movs	r2, #201	; 0xc9
   23884:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   23886:	230d      	movs	r3, #13
   23888:	18fb      	adds	r3, r7, r3
   2388a:	2200      	movs	r2, #0
   2388c:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   2388e:	687b      	ldr	r3, [r7, #4]
   23890:	2b30      	cmp	r3, #48	; 0x30
   23892:	d808      	bhi.n	238a6 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   23894:	230e      	movs	r3, #14
   23896:	18fb      	adds	r3, r7, r3
   23898:	22c3      	movs	r2, #195	; 0xc3
   2389a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   2389c:	230d      	movs	r3, #13
   2389e:	18fb      	adds	r3, r7, r3
   238a0:	2201      	movs	r2, #1
   238a2:	701a      	strb	r2, [r3, #0]
   238a4:	e007      	b.n	238b6 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   238a6:	230e      	movs	r3, #14
   238a8:	18fb      	adds	r3, r7, r3
   238aa:	22c9      	movs	r2, #201	; 0xc9
   238ac:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   238ae:	230d      	movs	r3, #13
   238b0:	18fb      	adds	r3, r7, r3
   238b2:	2200      	movs	r2, #0
   238b4:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   238b6:	003a      	movs	r2, r7
   238b8:	6879      	ldr	r1, [r7, #4]
   238ba:	230e      	movs	r3, #14
   238bc:	18fb      	adds	r3, r7, r3
   238be:	7818      	ldrb	r0, [r3, #0]
   238c0:	230d      	movs	r3, #13
   238c2:	18fb      	adds	r3, r7, r3
   238c4:	781b      	ldrb	r3, [r3, #0]
   238c6:	9300      	str	r3, [sp, #0]
   238c8:	2304      	movs	r3, #4
   238ca:	4c2e      	ldr	r4, [pc, #184]	; (23984 <spi_write_reg+0x120>)
   238cc:	47a0      	blx	r4
   238ce:	0002      	movs	r2, r0
   238d0:	230c      	movs	r3, #12
   238d2:	18fb      	adds	r3, r7, r3
   238d4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   238d6:	230c      	movs	r3, #12
   238d8:	18fb      	adds	r3, r7, r3
   238da:	781b      	ldrb	r3, [r3, #0]
   238dc:	b25b      	sxtb	r3, r3
   238de:	2b01      	cmp	r3, #1
   238e0:	d010      	beq.n	23904 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   238e2:	4a29      	ldr	r2, [pc, #164]	; (23988 <spi_write_reg+0x124>)
   238e4:	4929      	ldr	r1, [pc, #164]	; (2398c <spi_write_reg+0x128>)
   238e6:	4b2a      	ldr	r3, [pc, #168]	; (23990 <spi_write_reg+0x12c>)
   238e8:	0018      	movs	r0, r3
   238ea:	4b2a      	ldr	r3, [pc, #168]	; (23994 <spi_write_reg+0x130>)
   238ec:	4798      	blx	r3
   238ee:	687a      	ldr	r2, [r7, #4]
   238f0:	4b29      	ldr	r3, [pc, #164]	; (23998 <spi_write_reg+0x134>)
   238f2:	0011      	movs	r1, r2
   238f4:	0018      	movs	r0, r3
   238f6:	4b27      	ldr	r3, [pc, #156]	; (23994 <spi_write_reg+0x130>)
   238f8:	4798      	blx	r3
   238fa:	4b28      	ldr	r3, [pc, #160]	; (2399c <spi_write_reg+0x138>)
   238fc:	0018      	movs	r0, r3
   238fe:	4b25      	ldr	r3, [pc, #148]	; (23994 <spi_write_reg+0x130>)
   23900:	4798      	blx	r3
		goto _FAIL_;
   23902:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   23904:	230c      	movs	r3, #12
   23906:	18fb      	adds	r3, r7, r3
   23908:	781b      	ldrb	r3, [r3, #0]
   2390a:	b25b      	sxtb	r3, r3
   2390c:	2b01      	cmp	r3, #1
   2390e:	d030      	beq.n	23972 <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   23910:	2001      	movs	r0, #1
   23912:	4b23      	ldr	r3, [pc, #140]	; (239a0 <spi_write_reg+0x13c>)
   23914:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23916:	2300      	movs	r3, #0
   23918:	9300      	str	r3, [sp, #0]
   2391a:	2300      	movs	r3, #0
   2391c:	2200      	movs	r2, #0
   2391e:	2100      	movs	r1, #0
   23920:	20cf      	movs	r0, #207	; 0xcf
   23922:	4c20      	ldr	r4, [pc, #128]	; (239a4 <spi_write_reg+0x140>)
   23924:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23926:	20cf      	movs	r0, #207	; 0xcf
   23928:	4b1f      	ldr	r3, [pc, #124]	; (239a8 <spi_write_reg+0x144>)
   2392a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   2392c:	23ea      	movs	r3, #234	; 0xea
   2392e:	009a      	lsls	r2, r3, #2
   23930:	4916      	ldr	r1, [pc, #88]	; (2398c <spi_write_reg+0x128>)
   23932:	4b17      	ldr	r3, [pc, #92]	; (23990 <spi_write_reg+0x12c>)
   23934:	0018      	movs	r0, r3
   23936:	4b17      	ldr	r3, [pc, #92]	; (23994 <spi_write_reg+0x130>)
   23938:	4798      	blx	r3
   2393a:	230f      	movs	r3, #15
   2393c:	18fb      	adds	r3, r7, r3
   2393e:	7819      	ldrb	r1, [r3, #0]
   23940:	683b      	ldr	r3, [r7, #0]
   23942:	687a      	ldr	r2, [r7, #4]
   23944:	4819      	ldr	r0, [pc, #100]	; (239ac <spi_write_reg+0x148>)
   23946:	4c13      	ldr	r4, [pc, #76]	; (23994 <spi_write_reg+0x130>)
   23948:	47a0      	blx	r4
   2394a:	4b14      	ldr	r3, [pc, #80]	; (2399c <spi_write_reg+0x138>)
   2394c:	0018      	movs	r0, r3
   2394e:	4b11      	ldr	r3, [pc, #68]	; (23994 <spi_write_reg+0x130>)
   23950:	4798      	blx	r3
		nm_bsp_sleep(1);
   23952:	2001      	movs	r0, #1
   23954:	4b12      	ldr	r3, [pc, #72]	; (239a0 <spi_write_reg+0x13c>)
   23956:	4798      	blx	r3
		retry--;
   23958:	230f      	movs	r3, #15
   2395a:	18fb      	adds	r3, r7, r3
   2395c:	781a      	ldrb	r2, [r3, #0]
   2395e:	230f      	movs	r3, #15
   23960:	18fb      	adds	r3, r7, r3
   23962:	3a01      	subs	r2, #1
   23964:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23966:	230f      	movs	r3, #15
   23968:	18fb      	adds	r3, r7, r3
   2396a:	781b      	ldrb	r3, [r3, #0]
   2396c:	2b00      	cmp	r3, #0
   2396e:	d000      	beq.n	23972 <spi_write_reg+0x10e>
   23970:	e78d      	b.n	2388e <spi_write_reg+0x2a>
	}

	return result;
   23972:	230c      	movs	r3, #12
   23974:	18fb      	adds	r3, r7, r3
   23976:	781b      	ldrb	r3, [r3, #0]
   23978:	b25b      	sxtb	r3, r3
}
   2397a:	0018      	movs	r0, r3
   2397c:	46bd      	mov	sp, r7
   2397e:	b005      	add	sp, #20
   23980:	bd90      	pop	{r4, r7, pc}
   23982:	46c0      	nop			; (mov r8, r8)
   23984:	00022d99 	.word	0x00022d99
   23988:	0000039d 	.word	0x0000039d
   2398c:	000381d8 	.word	0x000381d8
   23990:	00037ba0 	.word	0x00037ba0
   23994:	0001d28d 	.word	0x0001d28d
   23998:	00037f0c 	.word	0x00037f0c
   2399c:	00037be0 	.word	0x00037be0
   239a0:	0001f6d9 	.word	0x0001f6d9
   239a4:	0002281d 	.word	0x0002281d
   239a8:	00022c5d 	.word	0x00022c5d
   239ac:	00037f38 	.word	0x00037f38

000239b0 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   239b0:	b590      	push	{r4, r7, lr}
   239b2:	b089      	sub	sp, #36	; 0x24
   239b4:	af02      	add	r7, sp, #8
   239b6:	60f8      	str	r0, [r7, #12]
   239b8:	60b9      	str	r1, [r7, #8]
   239ba:	1dbb      	adds	r3, r7, #6
   239bc:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   239be:	2316      	movs	r3, #22
   239c0:	18fb      	adds	r3, r7, r3
   239c2:	220a      	movs	r2, #10
   239c4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   239c6:	2315      	movs	r3, #21
   239c8:	18fb      	adds	r3, r7, r3
   239ca:	22c7      	movs	r2, #199	; 0xc7
   239cc:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   239ce:	1dbb      	adds	r3, r7, #6
   239d0:	881a      	ldrh	r2, [r3, #0]
   239d2:	68f9      	ldr	r1, [r7, #12]
   239d4:	2315      	movs	r3, #21
   239d6:	18fb      	adds	r3, r7, r3
   239d8:	7818      	ldrb	r0, [r3, #0]
   239da:	2300      	movs	r3, #0
   239dc:	9300      	str	r3, [sp, #0]
   239de:	0013      	movs	r3, r2
   239e0:	2200      	movs	r2, #0
   239e2:	4c4d      	ldr	r4, [pc, #308]	; (23b18 <nm_spi_write+0x168>)
   239e4:	47a0      	blx	r4
   239e6:	0002      	movs	r2, r0
   239e8:	2317      	movs	r3, #23
   239ea:	18fb      	adds	r3, r7, r3
   239ec:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   239ee:	2317      	movs	r3, #23
   239f0:	18fb      	adds	r3, r7, r3
   239f2:	781b      	ldrb	r3, [r3, #0]
   239f4:	b25b      	sxtb	r3, r3
   239f6:	2b01      	cmp	r3, #1
   239f8:	d010      	beq.n	23a1c <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   239fa:	4a48      	ldr	r2, [pc, #288]	; (23b1c <nm_spi_write+0x16c>)
   239fc:	4948      	ldr	r1, [pc, #288]	; (23b20 <nm_spi_write+0x170>)
   239fe:	4b49      	ldr	r3, [pc, #292]	; (23b24 <nm_spi_write+0x174>)
   23a00:	0018      	movs	r0, r3
   23a02:	4b49      	ldr	r3, [pc, #292]	; (23b28 <nm_spi_write+0x178>)
   23a04:	4798      	blx	r3
   23a06:	68fa      	ldr	r2, [r7, #12]
   23a08:	4b48      	ldr	r3, [pc, #288]	; (23b2c <nm_spi_write+0x17c>)
   23a0a:	0011      	movs	r1, r2
   23a0c:	0018      	movs	r0, r3
   23a0e:	4b46      	ldr	r3, [pc, #280]	; (23b28 <nm_spi_write+0x178>)
   23a10:	4798      	blx	r3
   23a12:	4b47      	ldr	r3, [pc, #284]	; (23b30 <nm_spi_write+0x180>)
   23a14:	0018      	movs	r0, r3
   23a16:	4b44      	ldr	r3, [pc, #272]	; (23b28 <nm_spi_write+0x178>)
   23a18:	4798      	blx	r3
		goto _FAIL_;
   23a1a:	e03e      	b.n	23a9a <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   23a1c:	2317      	movs	r3, #23
   23a1e:	18fc      	adds	r4, r7, r3
   23a20:	1dbb      	adds	r3, r7, #6
   23a22:	881a      	ldrh	r2, [r3, #0]
   23a24:	68bb      	ldr	r3, [r7, #8]
   23a26:	0011      	movs	r1, r2
   23a28:	0018      	movs	r0, r3
   23a2a:	4b42      	ldr	r3, [pc, #264]	; (23b34 <nm_spi_write+0x184>)
   23a2c:	4798      	blx	r3
   23a2e:	0003      	movs	r3, r0
   23a30:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   23a32:	2317      	movs	r3, #23
   23a34:	18fb      	adds	r3, r7, r3
   23a36:	781b      	ldrb	r3, [r3, #0]
   23a38:	b25b      	sxtb	r3, r3
   23a3a:	2b01      	cmp	r3, #1
   23a3c:	d00e      	beq.n	23a5c <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   23a3e:	4a3e      	ldr	r2, [pc, #248]	; (23b38 <nm_spi_write+0x188>)
   23a40:	4937      	ldr	r1, [pc, #220]	; (23b20 <nm_spi_write+0x170>)
   23a42:	4b38      	ldr	r3, [pc, #224]	; (23b24 <nm_spi_write+0x174>)
   23a44:	0018      	movs	r0, r3
   23a46:	4b38      	ldr	r3, [pc, #224]	; (23b28 <nm_spi_write+0x178>)
   23a48:	4798      	blx	r3
   23a4a:	4b3c      	ldr	r3, [pc, #240]	; (23b3c <nm_spi_write+0x18c>)
   23a4c:	0018      	movs	r0, r3
   23a4e:	4b36      	ldr	r3, [pc, #216]	; (23b28 <nm_spi_write+0x178>)
   23a50:	4798      	blx	r3
   23a52:	4b37      	ldr	r3, [pc, #220]	; (23b30 <nm_spi_write+0x180>)
   23a54:	0018      	movs	r0, r3
   23a56:	4b34      	ldr	r3, [pc, #208]	; (23b28 <nm_spi_write+0x178>)
   23a58:	4798      	blx	r3
		goto _FAIL_;
   23a5a:	e01e      	b.n	23a9a <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   23a5c:	2317      	movs	r3, #23
   23a5e:	18fc      	adds	r4, r7, r3
   23a60:	2315      	movs	r3, #21
   23a62:	18fb      	adds	r3, r7, r3
   23a64:	781b      	ldrb	r3, [r3, #0]
   23a66:	0018      	movs	r0, r3
   23a68:	4b35      	ldr	r3, [pc, #212]	; (23b40 <nm_spi_write+0x190>)
   23a6a:	4798      	blx	r3
   23a6c:	0003      	movs	r3, r0
   23a6e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   23a70:	2317      	movs	r3, #23
   23a72:	18fb      	adds	r3, r7, r3
   23a74:	781b      	ldrb	r3, [r3, #0]
   23a76:	b25b      	sxtb	r3, r3
   23a78:	2b01      	cmp	r3, #1
   23a7a:	d00e      	beq.n	23a9a <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   23a7c:	4a31      	ldr	r2, [pc, #196]	; (23b44 <nm_spi_write+0x194>)
   23a7e:	4928      	ldr	r1, [pc, #160]	; (23b20 <nm_spi_write+0x170>)
   23a80:	4b28      	ldr	r3, [pc, #160]	; (23b24 <nm_spi_write+0x174>)
   23a82:	0018      	movs	r0, r3
   23a84:	4b28      	ldr	r3, [pc, #160]	; (23b28 <nm_spi_write+0x178>)
   23a86:	4798      	blx	r3
   23a88:	4b2c      	ldr	r3, [pc, #176]	; (23b3c <nm_spi_write+0x18c>)
   23a8a:	0018      	movs	r0, r3
   23a8c:	4b26      	ldr	r3, [pc, #152]	; (23b28 <nm_spi_write+0x178>)
   23a8e:	4798      	blx	r3
   23a90:	4b27      	ldr	r3, [pc, #156]	; (23b30 <nm_spi_write+0x180>)
   23a92:	0018      	movs	r0, r3
   23a94:	4b24      	ldr	r3, [pc, #144]	; (23b28 <nm_spi_write+0x178>)
   23a96:	4798      	blx	r3
		goto _FAIL_;
   23a98:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   23a9a:	2317      	movs	r3, #23
   23a9c:	18fb      	adds	r3, r7, r3
   23a9e:	781b      	ldrb	r3, [r3, #0]
   23aa0:	b25b      	sxtb	r3, r3
   23aa2:	2b01      	cmp	r3, #1
   23aa4:	d030      	beq.n	23b08 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   23aa6:	2001      	movs	r0, #1
   23aa8:	4b27      	ldr	r3, [pc, #156]	; (23b48 <nm_spi_write+0x198>)
   23aaa:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23aac:	2300      	movs	r3, #0
   23aae:	9300      	str	r3, [sp, #0]
   23ab0:	2300      	movs	r3, #0
   23ab2:	2200      	movs	r2, #0
   23ab4:	2100      	movs	r1, #0
   23ab6:	20cf      	movs	r0, #207	; 0xcf
   23ab8:	4c24      	ldr	r4, [pc, #144]	; (23b4c <nm_spi_write+0x19c>)
   23aba:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23abc:	20cf      	movs	r0, #207	; 0xcf
   23abe:	4b24      	ldr	r3, [pc, #144]	; (23b50 <nm_spi_write+0x1a0>)
   23ac0:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   23ac2:	4a24      	ldr	r2, [pc, #144]	; (23b54 <nm_spi_write+0x1a4>)
   23ac4:	4916      	ldr	r1, [pc, #88]	; (23b20 <nm_spi_write+0x170>)
   23ac6:	4b17      	ldr	r3, [pc, #92]	; (23b24 <nm_spi_write+0x174>)
   23ac8:	0018      	movs	r0, r3
   23aca:	4b17      	ldr	r3, [pc, #92]	; (23b28 <nm_spi_write+0x178>)
   23acc:	4798      	blx	r3
   23ace:	2316      	movs	r3, #22
   23ad0:	18fb      	adds	r3, r7, r3
   23ad2:	7819      	ldrb	r1, [r3, #0]
   23ad4:	1dbb      	adds	r3, r7, #6
   23ad6:	881b      	ldrh	r3, [r3, #0]
   23ad8:	68fa      	ldr	r2, [r7, #12]
   23ada:	481f      	ldr	r0, [pc, #124]	; (23b58 <nm_spi_write+0x1a8>)
   23adc:	4c12      	ldr	r4, [pc, #72]	; (23b28 <nm_spi_write+0x178>)
   23ade:	47a0      	blx	r4
   23ae0:	4b13      	ldr	r3, [pc, #76]	; (23b30 <nm_spi_write+0x180>)
   23ae2:	0018      	movs	r0, r3
   23ae4:	4b10      	ldr	r3, [pc, #64]	; (23b28 <nm_spi_write+0x178>)
   23ae6:	4798      	blx	r3
		nm_bsp_sleep(1);
   23ae8:	2001      	movs	r0, #1
   23aea:	4b17      	ldr	r3, [pc, #92]	; (23b48 <nm_spi_write+0x198>)
   23aec:	4798      	blx	r3
		retry--;
   23aee:	2316      	movs	r3, #22
   23af0:	18fb      	adds	r3, r7, r3
   23af2:	781a      	ldrb	r2, [r3, #0]
   23af4:	2316      	movs	r3, #22
   23af6:	18fb      	adds	r3, r7, r3
   23af8:	3a01      	subs	r2, #1
   23afa:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23afc:	2316      	movs	r3, #22
   23afe:	18fb      	adds	r3, r7, r3
   23b00:	781b      	ldrb	r3, [r3, #0]
   23b02:	2b00      	cmp	r3, #0
   23b04:	d000      	beq.n	23b08 <nm_spi_write+0x158>
   23b06:	e762      	b.n	239ce <nm_spi_write+0x1e>
	}


	return result;
   23b08:	2317      	movs	r3, #23
   23b0a:	18fb      	adds	r3, r7, r3
   23b0c:	781b      	ldrb	r3, [r3, #0]
   23b0e:	b25b      	sxtb	r3, r3
}
   23b10:	0018      	movs	r0, r3
   23b12:	46bd      	mov	sp, r7
   23b14:	b007      	add	sp, #28
   23b16:	bd90      	pop	{r4, r7, pc}
   23b18:	00022d99 	.word	0x00022d99
   23b1c:	000003cf 	.word	0x000003cf
   23b20:	000381e8 	.word	0x000381e8
   23b24:	00037ba0 	.word	0x00037ba0
   23b28:	0001d28d 	.word	0x0001d28d
   23b2c:	00037f54 	.word	0x00037f54
   23b30:	00037be0 	.word	0x00037be0
   23b34:	0002368d 	.word	0x0002368d
   23b38:	000003d9 	.word	0x000003d9
   23b3c:	00037f84 	.word	0x00037f84
   23b40:	00022b5d 	.word	0x00022b5d
   23b44:	000003e1 	.word	0x000003e1
   23b48:	0001f6d9 	.word	0x0001f6d9
   23b4c:	0002281d 	.word	0x0002281d
   23b50:	00022c5d 	.word	0x00022c5d
   23b54:	000003eb 	.word	0x000003eb
   23b58:	00037fac 	.word	0x00037fac

00023b5c <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   23b5c:	b590      	push	{r4, r7, lr}
   23b5e:	b087      	sub	sp, #28
   23b60:	af02      	add	r7, sp, #8
   23b62:	6078      	str	r0, [r7, #4]
   23b64:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   23b66:	230f      	movs	r3, #15
   23b68:	18fb      	adds	r3, r7, r3
   23b6a:	220a      	movs	r2, #10
   23b6c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23b6e:	230c      	movs	r3, #12
   23b70:	18fb      	adds	r3, r7, r3
   23b72:	2201      	movs	r2, #1
   23b74:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   23b76:	230e      	movs	r3, #14
   23b78:	18fb      	adds	r3, r7, r3
   23b7a:	22ca      	movs	r2, #202	; 0xca
   23b7c:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   23b7e:	230d      	movs	r3, #13
   23b80:	18fb      	adds	r3, r7, r3
   23b82:	2200      	movs	r2, #0
   23b84:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   23b86:	687b      	ldr	r3, [r7, #4]
   23b88:	2bff      	cmp	r3, #255	; 0xff
   23b8a:	d808      	bhi.n	23b9e <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   23b8c:	230e      	movs	r3, #14
   23b8e:	18fb      	adds	r3, r7, r3
   23b90:	22c4      	movs	r2, #196	; 0xc4
   23b92:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   23b94:	230d      	movs	r3, #13
   23b96:	18fb      	adds	r3, r7, r3
   23b98:	2201      	movs	r2, #1
   23b9a:	701a      	strb	r2, [r3, #0]
   23b9c:	e007      	b.n	23bae <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   23b9e:	230e      	movs	r3, #14
   23ba0:	18fb      	adds	r3, r7, r3
   23ba2:	22ca      	movs	r2, #202	; 0xca
   23ba4:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   23ba6:	230d      	movs	r3, #13
   23ba8:	18fb      	adds	r3, r7, r3
   23baa:	2200      	movs	r2, #0
   23bac:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   23bae:	2308      	movs	r3, #8
   23bb0:	18fa      	adds	r2, r7, r3
   23bb2:	6879      	ldr	r1, [r7, #4]
   23bb4:	230e      	movs	r3, #14
   23bb6:	18fb      	adds	r3, r7, r3
   23bb8:	7818      	ldrb	r0, [r3, #0]
   23bba:	230d      	movs	r3, #13
   23bbc:	18fb      	adds	r3, r7, r3
   23bbe:	781b      	ldrb	r3, [r3, #0]
   23bc0:	9300      	str	r3, [sp, #0]
   23bc2:	2304      	movs	r3, #4
   23bc4:	4c37      	ldr	r4, [pc, #220]	; (23ca4 <spi_read_reg+0x148>)
   23bc6:	47a0      	blx	r4
   23bc8:	0002      	movs	r2, r0
   23bca:	230c      	movs	r3, #12
   23bcc:	18fb      	adds	r3, r7, r3
   23bce:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   23bd0:	230c      	movs	r3, #12
   23bd2:	18fb      	adds	r3, r7, r3
   23bd4:	781b      	ldrb	r3, [r3, #0]
   23bd6:	b25b      	sxtb	r3, r3
   23bd8:	2b01      	cmp	r3, #1
   23bda:	d010      	beq.n	23bfe <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   23bdc:	4a32      	ldr	r2, [pc, #200]	; (23ca8 <spi_read_reg+0x14c>)
   23bde:	4933      	ldr	r1, [pc, #204]	; (23cac <spi_read_reg+0x150>)
   23be0:	4b33      	ldr	r3, [pc, #204]	; (23cb0 <spi_read_reg+0x154>)
   23be2:	0018      	movs	r0, r3
   23be4:	4b33      	ldr	r3, [pc, #204]	; (23cb4 <spi_read_reg+0x158>)
   23be6:	4798      	blx	r3
   23be8:	687a      	ldr	r2, [r7, #4]
   23bea:	4b33      	ldr	r3, [pc, #204]	; (23cb8 <spi_read_reg+0x15c>)
   23bec:	0011      	movs	r1, r2
   23bee:	0018      	movs	r0, r3
   23bf0:	4b30      	ldr	r3, [pc, #192]	; (23cb4 <spi_read_reg+0x158>)
   23bf2:	4798      	blx	r3
   23bf4:	4b31      	ldr	r3, [pc, #196]	; (23cbc <spi_read_reg+0x160>)
   23bf6:	0018      	movs	r0, r3
   23bf8:	4b2e      	ldr	r3, [pc, #184]	; (23cb4 <spi_read_reg+0x158>)
   23bfa:	4798      	blx	r3
		goto _FAIL_;
   23bfc:	e014      	b.n	23c28 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   23bfe:	2308      	movs	r3, #8
   23c00:	18fb      	adds	r3, r7, r3
   23c02:	781b      	ldrb	r3, [r3, #0]
   23c04:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   23c06:	2308      	movs	r3, #8
   23c08:	18fb      	adds	r3, r7, r3
   23c0a:	785b      	ldrb	r3, [r3, #1]
   23c0c:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   23c0e:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   23c10:	2308      	movs	r3, #8
   23c12:	18fb      	adds	r3, r7, r3
   23c14:	789b      	ldrb	r3, [r3, #2]
   23c16:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   23c18:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   23c1a:	2308      	movs	r3, #8
   23c1c:	18fb      	adds	r3, r7, r3
   23c1e:	78db      	ldrb	r3, [r3, #3]
   23c20:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   23c22:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   23c24:	683b      	ldr	r3, [r7, #0]
   23c26:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   23c28:	230c      	movs	r3, #12
   23c2a:	18fb      	adds	r3, r7, r3
   23c2c:	781b      	ldrb	r3, [r3, #0]
   23c2e:	b25b      	sxtb	r3, r3
   23c30:	2b01      	cmp	r3, #1
   23c32:	d02f      	beq.n	23c94 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   23c34:	2001      	movs	r0, #1
   23c36:	4b22      	ldr	r3, [pc, #136]	; (23cc0 <spi_read_reg+0x164>)
   23c38:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23c3a:	2300      	movs	r3, #0
   23c3c:	9300      	str	r3, [sp, #0]
   23c3e:	2300      	movs	r3, #0
   23c40:	2200      	movs	r2, #0
   23c42:	2100      	movs	r1, #0
   23c44:	20cf      	movs	r0, #207	; 0xcf
   23c46:	4c1f      	ldr	r4, [pc, #124]	; (23cc4 <spi_read_reg+0x168>)
   23c48:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23c4a:	20cf      	movs	r0, #207	; 0xcf
   23c4c:	4b1e      	ldr	r3, [pc, #120]	; (23cc8 <spi_read_reg+0x16c>)
   23c4e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   23c50:	4a1e      	ldr	r2, [pc, #120]	; (23ccc <spi_read_reg+0x170>)
   23c52:	4916      	ldr	r1, [pc, #88]	; (23cac <spi_read_reg+0x150>)
   23c54:	4b16      	ldr	r3, [pc, #88]	; (23cb0 <spi_read_reg+0x154>)
   23c56:	0018      	movs	r0, r3
   23c58:	4b16      	ldr	r3, [pc, #88]	; (23cb4 <spi_read_reg+0x158>)
   23c5a:	4798      	blx	r3
   23c5c:	230f      	movs	r3, #15
   23c5e:	18fb      	adds	r3, r7, r3
   23c60:	7819      	ldrb	r1, [r3, #0]
   23c62:	687a      	ldr	r2, [r7, #4]
   23c64:	4b1a      	ldr	r3, [pc, #104]	; (23cd0 <spi_read_reg+0x174>)
   23c66:	0018      	movs	r0, r3
   23c68:	4b12      	ldr	r3, [pc, #72]	; (23cb4 <spi_read_reg+0x158>)
   23c6a:	4798      	blx	r3
   23c6c:	4b13      	ldr	r3, [pc, #76]	; (23cbc <spi_read_reg+0x160>)
   23c6e:	0018      	movs	r0, r3
   23c70:	4b10      	ldr	r3, [pc, #64]	; (23cb4 <spi_read_reg+0x158>)
   23c72:	4798      	blx	r3
		nm_bsp_sleep(1);
   23c74:	2001      	movs	r0, #1
   23c76:	4b12      	ldr	r3, [pc, #72]	; (23cc0 <spi_read_reg+0x164>)
   23c78:	4798      	blx	r3
		retry--;
   23c7a:	230f      	movs	r3, #15
   23c7c:	18fb      	adds	r3, r7, r3
   23c7e:	781a      	ldrb	r2, [r3, #0]
   23c80:	230f      	movs	r3, #15
   23c82:	18fb      	adds	r3, r7, r3
   23c84:	3a01      	subs	r2, #1
   23c86:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23c88:	230f      	movs	r3, #15
   23c8a:	18fb      	adds	r3, r7, r3
   23c8c:	781b      	ldrb	r3, [r3, #0]
   23c8e:	2b00      	cmp	r3, #0
   23c90:	d000      	beq.n	23c94 <spi_read_reg+0x138>
   23c92:	e778      	b.n	23b86 <spi_read_reg+0x2a>
	}
		
	return result;
   23c94:	230c      	movs	r3, #12
   23c96:	18fb      	adds	r3, r7, r3
   23c98:	781b      	ldrb	r3, [r3, #0]
   23c9a:	b25b      	sxtb	r3, r3
}
   23c9c:	0018      	movs	r0, r3
   23c9e:	46bd      	mov	sp, r7
   23ca0:	b005      	add	sp, #20
   23ca2:	bd90      	pop	{r4, r7, pc}
   23ca4:	00022d99 	.word	0x00022d99
   23ca8:	00000423 	.word	0x00000423
   23cac:	000381f8 	.word	0x000381f8
   23cb0:	00037ba0 	.word	0x00037ba0
   23cb4:	0001d28d 	.word	0x0001d28d
   23cb8:	00037fc8 	.word	0x00037fc8
   23cbc:	00037be0 	.word	0x00037be0
   23cc0:	0001f6d9 	.word	0x0001f6d9
   23cc4:	0002281d 	.word	0x0002281d
   23cc8:	00022c5d 	.word	0x00022c5d
   23ccc:	00000435 	.word	0x00000435
   23cd0:	00037ff4 	.word	0x00037ff4

00023cd4 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   23cd4:	b590      	push	{r4, r7, lr}
   23cd6:	b089      	sub	sp, #36	; 0x24
   23cd8:	af02      	add	r7, sp, #8
   23cda:	60f8      	str	r0, [r7, #12]
   23cdc:	60b9      	str	r1, [r7, #8]
   23cde:	1dbb      	adds	r3, r7, #6
   23ce0:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   23ce2:	2316      	movs	r3, #22
   23ce4:	18fb      	adds	r3, r7, r3
   23ce6:	22c8      	movs	r2, #200	; 0xc8
   23ce8:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   23cea:	2317      	movs	r3, #23
   23cec:	18fb      	adds	r3, r7, r3
   23cee:	220a      	movs	r2, #10
   23cf0:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   23cf2:	1dbb      	adds	r3, r7, #6
   23cf4:	881c      	ldrh	r4, [r3, #0]
   23cf6:	68ba      	ldr	r2, [r7, #8]
   23cf8:	68f9      	ldr	r1, [r7, #12]
   23cfa:	2316      	movs	r3, #22
   23cfc:	18fb      	adds	r3, r7, r3
   23cfe:	7818      	ldrb	r0, [r3, #0]
   23d00:	2300      	movs	r3, #0
   23d02:	9300      	str	r3, [sp, #0]
   23d04:	0023      	movs	r3, r4
   23d06:	4c2e      	ldr	r4, [pc, #184]	; (23dc0 <nm_spi_read+0xec>)
   23d08:	47a0      	blx	r4
   23d0a:	0002      	movs	r2, r0
   23d0c:	2315      	movs	r3, #21
   23d0e:	18fb      	adds	r3, r7, r3
   23d10:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   23d12:	2315      	movs	r3, #21
   23d14:	18fb      	adds	r3, r7, r3
   23d16:	781b      	ldrb	r3, [r3, #0]
   23d18:	b25b      	sxtb	r3, r3
   23d1a:	2b01      	cmp	r3, #1
   23d1c:	d010      	beq.n	23d40 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   23d1e:	4a29      	ldr	r2, [pc, #164]	; (23dc4 <nm_spi_read+0xf0>)
   23d20:	4929      	ldr	r1, [pc, #164]	; (23dc8 <nm_spi_read+0xf4>)
   23d22:	4b2a      	ldr	r3, [pc, #168]	; (23dcc <nm_spi_read+0xf8>)
   23d24:	0018      	movs	r0, r3
   23d26:	4b2a      	ldr	r3, [pc, #168]	; (23dd0 <nm_spi_read+0xfc>)
   23d28:	4798      	blx	r3
   23d2a:	68fa      	ldr	r2, [r7, #12]
   23d2c:	4b29      	ldr	r3, [pc, #164]	; (23dd4 <nm_spi_read+0x100>)
   23d2e:	0011      	movs	r1, r2
   23d30:	0018      	movs	r0, r3
   23d32:	4b27      	ldr	r3, [pc, #156]	; (23dd0 <nm_spi_read+0xfc>)
   23d34:	4798      	blx	r3
   23d36:	4b28      	ldr	r3, [pc, #160]	; (23dd8 <nm_spi_read+0x104>)
   23d38:	0018      	movs	r0, r3
   23d3a:	4b25      	ldr	r3, [pc, #148]	; (23dd0 <nm_spi_read+0xfc>)
   23d3c:	4798      	blx	r3
		goto _FAIL_;
   23d3e:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   23d40:	2315      	movs	r3, #21
   23d42:	18fb      	adds	r3, r7, r3
   23d44:	781b      	ldrb	r3, [r3, #0]
   23d46:	b25b      	sxtb	r3, r3
   23d48:	2b01      	cmp	r3, #1
   23d4a:	d030      	beq.n	23dae <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   23d4c:	2001      	movs	r0, #1
   23d4e:	4b23      	ldr	r3, [pc, #140]	; (23ddc <nm_spi_read+0x108>)
   23d50:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23d52:	2300      	movs	r3, #0
   23d54:	9300      	str	r3, [sp, #0]
   23d56:	2300      	movs	r3, #0
   23d58:	2200      	movs	r2, #0
   23d5a:	2100      	movs	r1, #0
   23d5c:	20cf      	movs	r0, #207	; 0xcf
   23d5e:	4c20      	ldr	r4, [pc, #128]	; (23de0 <nm_spi_read+0x10c>)
   23d60:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23d62:	20cf      	movs	r0, #207	; 0xcf
   23d64:	4b1f      	ldr	r3, [pc, #124]	; (23de4 <nm_spi_read+0x110>)
   23d66:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   23d68:	4a1f      	ldr	r2, [pc, #124]	; (23de8 <nm_spi_read+0x114>)
   23d6a:	4917      	ldr	r1, [pc, #92]	; (23dc8 <nm_spi_read+0xf4>)
   23d6c:	4b17      	ldr	r3, [pc, #92]	; (23dcc <nm_spi_read+0xf8>)
   23d6e:	0018      	movs	r0, r3
   23d70:	4b17      	ldr	r3, [pc, #92]	; (23dd0 <nm_spi_read+0xfc>)
   23d72:	4798      	blx	r3
   23d74:	2317      	movs	r3, #23
   23d76:	18fb      	adds	r3, r7, r3
   23d78:	7819      	ldrb	r1, [r3, #0]
   23d7a:	1dbb      	adds	r3, r7, #6
   23d7c:	881b      	ldrh	r3, [r3, #0]
   23d7e:	68fa      	ldr	r2, [r7, #12]
   23d80:	481a      	ldr	r0, [pc, #104]	; (23dec <nm_spi_read+0x118>)
   23d82:	4c13      	ldr	r4, [pc, #76]	; (23dd0 <nm_spi_read+0xfc>)
   23d84:	47a0      	blx	r4
   23d86:	4b14      	ldr	r3, [pc, #80]	; (23dd8 <nm_spi_read+0x104>)
   23d88:	0018      	movs	r0, r3
   23d8a:	4b11      	ldr	r3, [pc, #68]	; (23dd0 <nm_spi_read+0xfc>)
   23d8c:	4798      	blx	r3
		nm_bsp_sleep(1);
   23d8e:	2001      	movs	r0, #1
   23d90:	4b12      	ldr	r3, [pc, #72]	; (23ddc <nm_spi_read+0x108>)
   23d92:	4798      	blx	r3
		retry--;
   23d94:	2317      	movs	r3, #23
   23d96:	18fb      	adds	r3, r7, r3
   23d98:	781a      	ldrb	r2, [r3, #0]
   23d9a:	2317      	movs	r3, #23
   23d9c:	18fb      	adds	r3, r7, r3
   23d9e:	3a01      	subs	r2, #1
   23da0:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23da2:	2317      	movs	r3, #23
   23da4:	18fb      	adds	r3, r7, r3
   23da6:	781b      	ldrb	r3, [r3, #0]
   23da8:	2b00      	cmp	r3, #0
   23daa:	d000      	beq.n	23dae <nm_spi_read+0xda>
   23dac:	e7a1      	b.n	23cf2 <nm_spi_read+0x1e>
	}

	return result;
   23dae:	2315      	movs	r3, #21
   23db0:	18fb      	adds	r3, r7, r3
   23db2:	781b      	ldrb	r3, [r3, #0]
   23db4:	b25b      	sxtb	r3, r3
}
   23db6:	0018      	movs	r0, r3
   23db8:	46bd      	mov	sp, r7
   23dba:	b007      	add	sp, #28
   23dbc:	bd90      	pop	{r4, r7, pc}
   23dbe:	46c0      	nop			; (mov r8, r8)
   23dc0:	00022d99 	.word	0x00022d99
   23dc4:	00000472 	.word	0x00000472
   23dc8:	00038208 	.word	0x00038208
   23dcc:	00037ba0 	.word	0x00037ba0
   23dd0:	0001d28d 	.word	0x0001d28d
   23dd4:	0003800c 	.word	0x0003800c
   23dd8:	00037be0 	.word	0x00037be0
   23ddc:	0001f6d9 	.word	0x0001f6d9
   23de0:	0002281d 	.word	0x0002281d
   23de4:	00022c5d 	.word	0x00022c5d
   23de8:	0000047d 	.word	0x0000047d
   23dec:	00037fac 	.word	0x00037fac

00023df0 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   23df0:	b580      	push	{r7, lr}
   23df2:	b082      	sub	sp, #8
   23df4:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   23df6:	4b0c      	ldr	r3, [pc, #48]	; (23e28 <spi_init_pkt_sz+0x38>)
   23df8:	0018      	movs	r0, r3
   23dfa:	4b0c      	ldr	r3, [pc, #48]	; (23e2c <spi_init_pkt_sz+0x3c>)
   23dfc:	4798      	blx	r3
   23dfe:	0003      	movs	r3, r0
   23e00:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   23e02:	687b      	ldr	r3, [r7, #4]
   23e04:	2270      	movs	r2, #112	; 0x70
   23e06:	4393      	bics	r3, r2
   23e08:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   23e0a:	687b      	ldr	r3, [r7, #4]
   23e0c:	2250      	movs	r2, #80	; 0x50
   23e0e:	4313      	orrs	r3, r2
   23e10:	607b      	str	r3, [r7, #4]
   23e12:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   23e14:	687b      	ldr	r3, [r7, #4]
   23e16:	4a04      	ldr	r2, [pc, #16]	; (23e28 <spi_init_pkt_sz+0x38>)
   23e18:	0019      	movs	r1, r3
   23e1a:	0010      	movs	r0, r2
   23e1c:	4b04      	ldr	r3, [pc, #16]	; (23e30 <spi_init_pkt_sz+0x40>)
   23e1e:	4798      	blx	r3
}
   23e20:	46c0      	nop			; (mov r8, r8)
   23e22:	46bd      	mov	sp, r7
   23e24:	b002      	add	sp, #8
   23e26:	bd80      	pop	{r7, pc}
   23e28:	0000e824 	.word	0x0000e824
   23e2c:	00023fc9 	.word	0x00023fc9
   23e30:	0002403d 	.word	0x0002403d

00023e34 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   23e34:	b590      	push	{r4, r7, lr}
   23e36:	b083      	sub	sp, #12
   23e38:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23e3a:	2300      	movs	r3, #0
   23e3c:	9300      	str	r3, [sp, #0]
   23e3e:	2300      	movs	r3, #0
   23e40:	2200      	movs	r2, #0
   23e42:	2100      	movs	r1, #0
   23e44:	20cf      	movs	r0, #207	; 0xcf
   23e46:	4c05      	ldr	r4, [pc, #20]	; (23e5c <nm_spi_reset+0x28>)
   23e48:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   23e4a:	20cf      	movs	r0, #207	; 0xcf
   23e4c:	4b04      	ldr	r3, [pc, #16]	; (23e60 <nm_spi_reset+0x2c>)
   23e4e:	4798      	blx	r3
	return M2M_SUCCESS;
   23e50:	2300      	movs	r3, #0
}
   23e52:	0018      	movs	r0, r3
   23e54:	46bd      	mov	sp, r7
   23e56:	b001      	add	sp, #4
   23e58:	bd90      	pop	{r4, r7, pc}
   23e5a:	46c0      	nop			; (mov r8, r8)
   23e5c:	0002281d 	.word	0x0002281d
   23e60:	00022c5d 	.word	0x00022c5d

00023e64 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   23e64:	b580      	push	{r7, lr}
   23e66:	b082      	sub	sp, #8
   23e68:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   23e6a:	2300      	movs	r3, #0
   23e6c:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   23e6e:	4b40      	ldr	r3, [pc, #256]	; (23f70 <nm_spi_init+0x10c>)
   23e70:	2200      	movs	r2, #0
   23e72:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   23e74:	003b      	movs	r3, r7
   23e76:	4a3f      	ldr	r2, [pc, #252]	; (23f74 <nm_spi_init+0x110>)
   23e78:	0019      	movs	r1, r3
   23e7a:	0010      	movs	r0, r2
   23e7c:	4b3e      	ldr	r3, [pc, #248]	; (23f78 <nm_spi_init+0x114>)
   23e7e:	4798      	blx	r3
   23e80:	1e03      	subs	r3, r0, #0
   23e82:	d129      	bne.n	23ed8 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   23e84:	4b3a      	ldr	r3, [pc, #232]	; (23f70 <nm_spi_init+0x10c>)
   23e86:	2201      	movs	r2, #1
   23e88:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   23e8a:	2398      	movs	r3, #152	; 0x98
   23e8c:	00da      	lsls	r2, r3, #3
   23e8e:	493b      	ldr	r1, [pc, #236]	; (23f7c <nm_spi_init+0x118>)
   23e90:	4b3b      	ldr	r3, [pc, #236]	; (23f80 <nm_spi_init+0x11c>)
   23e92:	0018      	movs	r0, r3
   23e94:	4b3b      	ldr	r3, [pc, #236]	; (23f84 <nm_spi_init+0x120>)
   23e96:	4798      	blx	r3
   23e98:	4b3b      	ldr	r3, [pc, #236]	; (23f88 <nm_spi_init+0x124>)
   23e9a:	0018      	movs	r0, r3
   23e9c:	4b39      	ldr	r3, [pc, #228]	; (23f84 <nm_spi_init+0x120>)
   23e9e:	4798      	blx	r3
   23ea0:	4b3a      	ldr	r3, [pc, #232]	; (23f8c <nm_spi_init+0x128>)
   23ea2:	0018      	movs	r0, r3
   23ea4:	4b37      	ldr	r3, [pc, #220]	; (23f84 <nm_spi_init+0x120>)
   23ea6:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   23ea8:	003b      	movs	r3, r7
   23eaa:	4a32      	ldr	r2, [pc, #200]	; (23f74 <nm_spi_init+0x110>)
   23eac:	0019      	movs	r1, r3
   23eae:	0010      	movs	r0, r2
   23eb0:	4b31      	ldr	r3, [pc, #196]	; (23f78 <nm_spi_init+0x114>)
   23eb2:	4798      	blx	r3
   23eb4:	1e03      	subs	r3, r0, #0
   23eb6:	d10f      	bne.n	23ed8 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   23eb8:	4a35      	ldr	r2, [pc, #212]	; (23f90 <nm_spi_init+0x12c>)
   23eba:	4930      	ldr	r1, [pc, #192]	; (23f7c <nm_spi_init+0x118>)
   23ebc:	4b30      	ldr	r3, [pc, #192]	; (23f80 <nm_spi_init+0x11c>)
   23ebe:	0018      	movs	r0, r3
   23ec0:	4b30      	ldr	r3, [pc, #192]	; (23f84 <nm_spi_init+0x120>)
   23ec2:	4798      	blx	r3
   23ec4:	4b33      	ldr	r3, [pc, #204]	; (23f94 <nm_spi_init+0x130>)
   23ec6:	0018      	movs	r0, r3
   23ec8:	4b2e      	ldr	r3, [pc, #184]	; (23f84 <nm_spi_init+0x120>)
   23eca:	4798      	blx	r3
   23ecc:	4b2f      	ldr	r3, [pc, #188]	; (23f8c <nm_spi_init+0x128>)
   23ece:	0018      	movs	r0, r3
   23ed0:	4b2c      	ldr	r3, [pc, #176]	; (23f84 <nm_spi_init+0x120>)
   23ed2:	4798      	blx	r3
			return 0;
   23ed4:	2300      	movs	r3, #0
   23ed6:	e047      	b.n	23f68 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   23ed8:	4b25      	ldr	r3, [pc, #148]	; (23f70 <nm_spi_init+0x10c>)
   23eda:	781b      	ldrb	r3, [r3, #0]
   23edc:	2b00      	cmp	r3, #0
   23ede:	d126      	bne.n	23f2e <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   23ee0:	683b      	ldr	r3, [r7, #0]
   23ee2:	220c      	movs	r2, #12
   23ee4:	4393      	bics	r3, r2
   23ee6:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   23ee8:	683b      	ldr	r3, [r7, #0]
   23eea:	2270      	movs	r2, #112	; 0x70
   23eec:	4393      	bics	r3, r2
   23eee:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   23ef0:	683b      	ldr	r3, [r7, #0]
   23ef2:	2250      	movs	r2, #80	; 0x50
   23ef4:	4313      	orrs	r3, r2
   23ef6:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   23ef8:	683b      	ldr	r3, [r7, #0]
   23efa:	4a1e      	ldr	r2, [pc, #120]	; (23f74 <nm_spi_init+0x110>)
   23efc:	0019      	movs	r1, r3
   23efe:	0010      	movs	r0, r2
   23f00:	4b25      	ldr	r3, [pc, #148]	; (23f98 <nm_spi_init+0x134>)
   23f02:	4798      	blx	r3
   23f04:	1e03      	subs	r3, r0, #0
   23f06:	d10f      	bne.n	23f28 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   23f08:	4a24      	ldr	r2, [pc, #144]	; (23f9c <nm_spi_init+0x138>)
   23f0a:	491c      	ldr	r1, [pc, #112]	; (23f7c <nm_spi_init+0x118>)
   23f0c:	4b1c      	ldr	r3, [pc, #112]	; (23f80 <nm_spi_init+0x11c>)
   23f0e:	0018      	movs	r0, r3
   23f10:	4b1c      	ldr	r3, [pc, #112]	; (23f84 <nm_spi_init+0x120>)
   23f12:	4798      	blx	r3
   23f14:	4b22      	ldr	r3, [pc, #136]	; (23fa0 <nm_spi_init+0x13c>)
   23f16:	0018      	movs	r0, r3
   23f18:	4b1a      	ldr	r3, [pc, #104]	; (23f84 <nm_spi_init+0x120>)
   23f1a:	4798      	blx	r3
   23f1c:	4b1b      	ldr	r3, [pc, #108]	; (23f8c <nm_spi_init+0x128>)
   23f1e:	0018      	movs	r0, r3
   23f20:	4b18      	ldr	r3, [pc, #96]	; (23f84 <nm_spi_init+0x120>)
   23f22:	4798      	blx	r3
			return 0;
   23f24:	2300      	movs	r3, #0
   23f26:	e01f      	b.n	23f68 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   23f28:	4b11      	ldr	r3, [pc, #68]	; (23f70 <nm_spi_init+0x10c>)
   23f2a:	2201      	movs	r2, #1
   23f2c:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   23f2e:	1d3a      	adds	r2, r7, #4
   23f30:	2380      	movs	r3, #128	; 0x80
   23f32:	015b      	lsls	r3, r3, #5
   23f34:	0011      	movs	r1, r2
   23f36:	0018      	movs	r0, r3
   23f38:	4b0f      	ldr	r3, [pc, #60]	; (23f78 <nm_spi_init+0x114>)
   23f3a:	4798      	blx	r3
   23f3c:	1e03      	subs	r3, r0, #0
   23f3e:	d110      	bne.n	23f62 <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   23f40:	4a18      	ldr	r2, [pc, #96]	; (23fa4 <nm_spi_init+0x140>)
   23f42:	490e      	ldr	r1, [pc, #56]	; (23f7c <nm_spi_init+0x118>)
   23f44:	4b0e      	ldr	r3, [pc, #56]	; (23f80 <nm_spi_init+0x11c>)
   23f46:	0018      	movs	r0, r3
   23f48:	4b0e      	ldr	r3, [pc, #56]	; (23f84 <nm_spi_init+0x120>)
   23f4a:	4798      	blx	r3
   23f4c:	4b16      	ldr	r3, [pc, #88]	; (23fa8 <nm_spi_init+0x144>)
   23f4e:	0018      	movs	r0, r3
   23f50:	4b0c      	ldr	r3, [pc, #48]	; (23f84 <nm_spi_init+0x120>)
   23f52:	4798      	blx	r3
   23f54:	4b0d      	ldr	r3, [pc, #52]	; (23f8c <nm_spi_init+0x128>)
   23f56:	0018      	movs	r0, r3
   23f58:	4b0a      	ldr	r3, [pc, #40]	; (23f84 <nm_spi_init+0x120>)
   23f5a:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   23f5c:	2306      	movs	r3, #6
   23f5e:	425b      	negs	r3, r3
   23f60:	e002      	b.n	23f68 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   23f62:	4b12      	ldr	r3, [pc, #72]	; (23fac <nm_spi_init+0x148>)
   23f64:	4798      	blx	r3


	return M2M_SUCCESS;
   23f66:	2300      	movs	r3, #0
}
   23f68:	0018      	movs	r0, r3
   23f6a:	46bd      	mov	sp, r7
   23f6c:	b002      	add	sp, #8
   23f6e:	bd80      	pop	{r7, pc}
   23f70:	20003e08 	.word	0x20003e08
   23f74:	0000e824 	.word	0x0000e824
   23f78:	00023b5d 	.word	0x00023b5d
   23f7c:	00038214 	.word	0x00038214
   23f80:	00037ba0 	.word	0x00037ba0
   23f84:	0001d28d 	.word	0x0001d28d
   23f88:	0003803c 	.word	0x0003803c
   23f8c:	00037be0 	.word	0x00037be0
   23f90:	000004c3 	.word	0x000004c3
   23f94:	0003808c 	.word	0x0003808c
   23f98:	00023865 	.word	0x00023865
   23f9c:	000004cd 	.word	0x000004cd
   23fa0:	000380bc 	.word	0x000380bc
   23fa4:	000004d7 	.word	0x000004d7
   23fa8:	000380f0 	.word	0x000380f0
   23fac:	00023df1 	.word	0x00023df1

00023fb0 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   23fb0:	b580      	push	{r7, lr}
   23fb2:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   23fb4:	4b03      	ldr	r3, [pc, #12]	; (23fc4 <nm_spi_deinit+0x14>)
   23fb6:	2200      	movs	r2, #0
   23fb8:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   23fba:	2300      	movs	r3, #0
}
   23fbc:	0018      	movs	r0, r3
   23fbe:	46bd      	mov	sp, r7
   23fc0:	bd80      	pop	{r7, pc}
   23fc2:	46c0      	nop			; (mov r8, r8)
   23fc4:	20003e08 	.word	0x20003e08

00023fc8 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   23fc8:	b580      	push	{r7, lr}
   23fca:	b084      	sub	sp, #16
   23fcc:	af00      	add	r7, sp, #0
   23fce:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   23fd0:	230c      	movs	r3, #12
   23fd2:	18fa      	adds	r2, r7, r3
   23fd4:	687b      	ldr	r3, [r7, #4]
   23fd6:	0011      	movs	r1, r2
   23fd8:	0018      	movs	r0, r3
   23fda:	4b03      	ldr	r3, [pc, #12]	; (23fe8 <nm_spi_read_reg+0x20>)
   23fdc:	4798      	blx	r3

	return u32Val;
   23fde:	68fb      	ldr	r3, [r7, #12]
}
   23fe0:	0018      	movs	r0, r3
   23fe2:	46bd      	mov	sp, r7
   23fe4:	b004      	add	sp, #16
   23fe6:	bd80      	pop	{r7, pc}
   23fe8:	00023b5d 	.word	0x00023b5d

00023fec <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   23fec:	b590      	push	{r4, r7, lr}
   23fee:	b085      	sub	sp, #20
   23ff0:	af00      	add	r7, sp, #0
   23ff2:	6078      	str	r0, [r7, #4]
   23ff4:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   23ff6:	230f      	movs	r3, #15
   23ff8:	18fc      	adds	r4, r7, r3
   23ffa:	683a      	ldr	r2, [r7, #0]
   23ffc:	687b      	ldr	r3, [r7, #4]
   23ffe:	0011      	movs	r1, r2
   24000:	0018      	movs	r0, r3
   24002:	4b0d      	ldr	r3, [pc, #52]	; (24038 <nm_spi_read_reg_with_ret+0x4c>)
   24004:	4798      	blx	r3
   24006:	0003      	movs	r3, r0
   24008:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   2400a:	230f      	movs	r3, #15
   2400c:	18fb      	adds	r3, r7, r3
   2400e:	781b      	ldrb	r3, [r3, #0]
   24010:	b25b      	sxtb	r3, r3
   24012:	2b01      	cmp	r3, #1
   24014:	d104      	bne.n	24020 <nm_spi_read_reg_with_ret+0x34>
   24016:	230f      	movs	r3, #15
   24018:	18fb      	adds	r3, r7, r3
   2401a:	2200      	movs	r2, #0
   2401c:	701a      	strb	r2, [r3, #0]
   2401e:	e003      	b.n	24028 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24020:	230f      	movs	r3, #15
   24022:	18fb      	adds	r3, r7, r3
   24024:	22fa      	movs	r2, #250	; 0xfa
   24026:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24028:	230f      	movs	r3, #15
   2402a:	18fb      	adds	r3, r7, r3
   2402c:	781b      	ldrb	r3, [r3, #0]
   2402e:	b25b      	sxtb	r3, r3
}
   24030:	0018      	movs	r0, r3
   24032:	46bd      	mov	sp, r7
   24034:	b005      	add	sp, #20
   24036:	bd90      	pop	{r4, r7, pc}
   24038:	00023b5d 	.word	0x00023b5d

0002403c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   2403c:	b590      	push	{r4, r7, lr}
   2403e:	b085      	sub	sp, #20
   24040:	af00      	add	r7, sp, #0
   24042:	6078      	str	r0, [r7, #4]
   24044:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   24046:	230f      	movs	r3, #15
   24048:	18fc      	adds	r4, r7, r3
   2404a:	683a      	ldr	r2, [r7, #0]
   2404c:	687b      	ldr	r3, [r7, #4]
   2404e:	0011      	movs	r1, r2
   24050:	0018      	movs	r0, r3
   24052:	4b0d      	ldr	r3, [pc, #52]	; (24088 <nm_spi_write_reg+0x4c>)
   24054:	4798      	blx	r3
   24056:	0003      	movs	r3, r0
   24058:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   2405a:	230f      	movs	r3, #15
   2405c:	18fb      	adds	r3, r7, r3
   2405e:	781b      	ldrb	r3, [r3, #0]
   24060:	b25b      	sxtb	r3, r3
   24062:	2b01      	cmp	r3, #1
   24064:	d104      	bne.n	24070 <nm_spi_write_reg+0x34>
   24066:	230f      	movs	r3, #15
   24068:	18fb      	adds	r3, r7, r3
   2406a:	2200      	movs	r2, #0
   2406c:	701a      	strb	r2, [r3, #0]
   2406e:	e003      	b.n	24078 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24070:	230f      	movs	r3, #15
   24072:	18fb      	adds	r3, r7, r3
   24074:	22fa      	movs	r2, #250	; 0xfa
   24076:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24078:	230f      	movs	r3, #15
   2407a:	18fb      	adds	r3, r7, r3
   2407c:	781b      	ldrb	r3, [r3, #0]
   2407e:	b25b      	sxtb	r3, r3
}
   24080:	0018      	movs	r0, r3
   24082:	46bd      	mov	sp, r7
   24084:	b005      	add	sp, #20
   24086:	bd90      	pop	{r4, r7, pc}
   24088:	00023865 	.word	0x00023865

0002408c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   2408c:	b590      	push	{r4, r7, lr}
   2408e:	b087      	sub	sp, #28
   24090:	af00      	add	r7, sp, #0
   24092:	60f8      	str	r0, [r7, #12]
   24094:	60b9      	str	r1, [r7, #8]
   24096:	1dbb      	adds	r3, r7, #6
   24098:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   2409a:	2317      	movs	r3, #23
   2409c:	18fc      	adds	r4, r7, r3
   2409e:	1dbb      	adds	r3, r7, #6
   240a0:	881a      	ldrh	r2, [r3, #0]
   240a2:	68b9      	ldr	r1, [r7, #8]
   240a4:	68fb      	ldr	r3, [r7, #12]
   240a6:	0018      	movs	r0, r3
   240a8:	4b0d      	ldr	r3, [pc, #52]	; (240e0 <nm_spi_read_block+0x54>)
   240aa:	4798      	blx	r3
   240ac:	0003      	movs	r3, r0
   240ae:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   240b0:	2317      	movs	r3, #23
   240b2:	18fb      	adds	r3, r7, r3
   240b4:	781b      	ldrb	r3, [r3, #0]
   240b6:	b25b      	sxtb	r3, r3
   240b8:	2b01      	cmp	r3, #1
   240ba:	d104      	bne.n	240c6 <nm_spi_read_block+0x3a>
   240bc:	2317      	movs	r3, #23
   240be:	18fb      	adds	r3, r7, r3
   240c0:	2200      	movs	r2, #0
   240c2:	701a      	strb	r2, [r3, #0]
   240c4:	e003      	b.n	240ce <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   240c6:	2317      	movs	r3, #23
   240c8:	18fb      	adds	r3, r7, r3
   240ca:	22fa      	movs	r2, #250	; 0xfa
   240cc:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   240ce:	2317      	movs	r3, #23
   240d0:	18fb      	adds	r3, r7, r3
   240d2:	781b      	ldrb	r3, [r3, #0]
   240d4:	b25b      	sxtb	r3, r3
}
   240d6:	0018      	movs	r0, r3
   240d8:	46bd      	mov	sp, r7
   240da:	b007      	add	sp, #28
   240dc:	bd90      	pop	{r4, r7, pc}
   240de:	46c0      	nop			; (mov r8, r8)
   240e0:	00023cd5 	.word	0x00023cd5

000240e4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   240e4:	b590      	push	{r4, r7, lr}
   240e6:	b087      	sub	sp, #28
   240e8:	af00      	add	r7, sp, #0
   240ea:	60f8      	str	r0, [r7, #12]
   240ec:	60b9      	str	r1, [r7, #8]
   240ee:	1dbb      	adds	r3, r7, #6
   240f0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   240f2:	2317      	movs	r3, #23
   240f4:	18fc      	adds	r4, r7, r3
   240f6:	1dbb      	adds	r3, r7, #6
   240f8:	881a      	ldrh	r2, [r3, #0]
   240fa:	68b9      	ldr	r1, [r7, #8]
   240fc:	68fb      	ldr	r3, [r7, #12]
   240fe:	0018      	movs	r0, r3
   24100:	4b0d      	ldr	r3, [pc, #52]	; (24138 <nm_spi_write_block+0x54>)
   24102:	4798      	blx	r3
   24104:	0003      	movs	r3, r0
   24106:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24108:	2317      	movs	r3, #23
   2410a:	18fb      	adds	r3, r7, r3
   2410c:	781b      	ldrb	r3, [r3, #0]
   2410e:	b25b      	sxtb	r3, r3
   24110:	2b01      	cmp	r3, #1
   24112:	d104      	bne.n	2411e <nm_spi_write_block+0x3a>
   24114:	2317      	movs	r3, #23
   24116:	18fb      	adds	r3, r7, r3
   24118:	2200      	movs	r2, #0
   2411a:	701a      	strb	r2, [r3, #0]
   2411c:	e003      	b.n	24126 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2411e:	2317      	movs	r3, #23
   24120:	18fb      	adds	r3, r7, r3
   24122:	22fa      	movs	r2, #250	; 0xfa
   24124:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24126:	2317      	movs	r3, #23
   24128:	18fb      	adds	r3, r7, r3
   2412a:	781b      	ldrb	r3, [r3, #0]
   2412c:	b25b      	sxtb	r3, r3
}
   2412e:	0018      	movs	r0, r3
   24130:	46bd      	mov	sp, r7
   24132:	b007      	add	sp, #28
   24134:	bd90      	pop	{r4, r7, pc}
   24136:	46c0      	nop			; (mov r8, r8)
   24138:	000239b1 	.word	0x000239b1

0002413c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   2413c:	b590      	push	{r4, r7, lr}
   2413e:	b089      	sub	sp, #36	; 0x24
   24140:	af00      	add	r7, sp, #0
   24142:	60b9      	str	r1, [r7, #8]
   24144:	0011      	movs	r1, r2
   24146:	607b      	str	r3, [r7, #4]
   24148:	230f      	movs	r3, #15
   2414a:	18fb      	adds	r3, r7, r3
   2414c:	1c02      	adds	r2, r0, #0
   2414e:	701a      	strb	r2, [r3, #0]
   24150:	230e      	movs	r3, #14
   24152:	18fb      	adds	r3, r7, r3
   24154:	1c0a      	adds	r2, r1, #0
   24156:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   24158:	2330      	movs	r3, #48	; 0x30
   2415a:	18fb      	adds	r3, r7, r3
   2415c:	881b      	ldrh	r3, [r3, #0]
   2415e:	2b00      	cmp	r3, #0
   24160:	d100      	bne.n	24164 <Socket_ReadSocketData+0x28>
   24162:	e0d7      	b.n	24314 <Socket_ReadSocketData+0x1d8>
   24164:	230f      	movs	r3, #15
   24166:	18fb      	adds	r3, r7, r3
   24168:	2200      	movs	r2, #0
   2416a:	569a      	ldrsb	r2, [r3, r2]
   2416c:	4b6b      	ldr	r3, [pc, #428]	; (2431c <Socket_ReadSocketData+0x1e0>)
   2416e:	0112      	lsls	r2, r2, #4
   24170:	58d3      	ldr	r3, [r2, r3]
   24172:	2b00      	cmp	r3, #0
   24174:	d100      	bne.n	24178 <Socket_ReadSocketData+0x3c>
   24176:	e0cd      	b.n	24314 <Socket_ReadSocketData+0x1d8>
   24178:	230f      	movs	r3, #15
   2417a:	18fb      	adds	r3, r7, r3
   2417c:	781b      	ldrb	r3, [r3, #0]
   2417e:	b25b      	sxtb	r3, r3
   24180:	4a66      	ldr	r2, [pc, #408]	; (2431c <Socket_ReadSocketData+0x1e0>)
   24182:	011b      	lsls	r3, r3, #4
   24184:	18d3      	adds	r3, r2, r3
   24186:	3304      	adds	r3, #4
   24188:	881b      	ldrh	r3, [r3, #0]
   2418a:	b29b      	uxth	r3, r3
   2418c:	2b00      	cmp	r3, #0
   2418e:	d100      	bne.n	24192 <Socket_ReadSocketData+0x56>
   24190:	e0c0      	b.n	24314 <Socket_ReadSocketData+0x1d8>
   24192:	230f      	movs	r3, #15
   24194:	18fb      	adds	r3, r7, r3
   24196:	781b      	ldrb	r3, [r3, #0]
   24198:	b25b      	sxtb	r3, r3
   2419a:	4a60      	ldr	r2, [pc, #384]	; (2431c <Socket_ReadSocketData+0x1e0>)
   2419c:	011b      	lsls	r3, r3, #4
   2419e:	18d3      	adds	r3, r2, r3
   241a0:	330a      	adds	r3, #10
   241a2:	781b      	ldrb	r3, [r3, #0]
   241a4:	b2db      	uxtb	r3, r3
   241a6:	2b01      	cmp	r3, #1
   241a8:	d000      	beq.n	241ac <Socket_ReadSocketData+0x70>
   241aa:	e0b3      	b.n	24314 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   241ac:	687b      	ldr	r3, [r7, #4]
   241ae:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   241b0:	68bb      	ldr	r3, [r7, #8]
   241b2:	2230      	movs	r2, #48	; 0x30
   241b4:	18ba      	adds	r2, r7, r2
   241b6:	8812      	ldrh	r2, [r2, #0]
   241b8:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   241ba:	2319      	movs	r3, #25
   241bc:	18fb      	adds	r3, r7, r3
   241be:	2201      	movs	r2, #1
   241c0:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   241c2:	231a      	movs	r3, #26
   241c4:	18fb      	adds	r3, r7, r3
   241c6:	2230      	movs	r2, #48	; 0x30
   241c8:	18ba      	adds	r2, r7, r2
   241ca:	8812      	ldrh	r2, [r2, #0]
   241cc:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   241ce:	230f      	movs	r3, #15
   241d0:	18fb      	adds	r3, r7, r3
   241d2:	781b      	ldrb	r3, [r3, #0]
   241d4:	b25b      	sxtb	r3, r3
   241d6:	4a51      	ldr	r2, [pc, #324]	; (2431c <Socket_ReadSocketData+0x1e0>)
   241d8:	011b      	lsls	r3, r3, #4
   241da:	18d3      	adds	r3, r2, r3
   241dc:	3304      	adds	r3, #4
   241de:	881b      	ldrh	r3, [r3, #0]
   241e0:	b29b      	uxth	r3, r3
   241e2:	221a      	movs	r2, #26
   241e4:	18ba      	adds	r2, r7, r2
   241e6:	8812      	ldrh	r2, [r2, #0]
   241e8:	1ad3      	subs	r3, r2, r3
   241ea:	b29a      	uxth	r2, r3
   241ec:	2316      	movs	r3, #22
   241ee:	18fb      	adds	r3, r7, r3
   241f0:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   241f2:	2316      	movs	r3, #22
   241f4:	18fb      	adds	r3, r7, r3
   241f6:	2200      	movs	r2, #0
   241f8:	5e9b      	ldrsh	r3, [r3, r2]
   241fa:	2b00      	cmp	r3, #0
   241fc:	dd0f      	ble.n	2421e <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   241fe:	2319      	movs	r3, #25
   24200:	18fb      	adds	r3, r7, r3
   24202:	2200      	movs	r2, #0
   24204:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   24206:	230f      	movs	r3, #15
   24208:	18fb      	adds	r3, r7, r3
   2420a:	2200      	movs	r2, #0
   2420c:	569a      	ldrsb	r2, [r3, r2]
   2420e:	231a      	movs	r3, #26
   24210:	18fb      	adds	r3, r7, r3
   24212:	4942      	ldr	r1, [pc, #264]	; (2431c <Socket_ReadSocketData+0x1e0>)
   24214:	0112      	lsls	r2, r2, #4
   24216:	188a      	adds	r2, r1, r2
   24218:	3204      	adds	r2, #4
   2421a:	8812      	ldrh	r2, [r2, #0]
   2421c:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   2421e:	230f      	movs	r3, #15
   24220:	18fb      	adds	r3, r7, r3
   24222:	2200      	movs	r2, #0
   24224:	569a      	ldrsb	r2, [r3, r2]
   24226:	4b3d      	ldr	r3, [pc, #244]	; (2431c <Socket_ReadSocketData+0x1e0>)
   24228:	0112      	lsls	r2, r2, #4
   2422a:	58d1      	ldr	r1, [r2, r3]
   2422c:	2319      	movs	r3, #25
   2422e:	18fb      	adds	r3, r7, r3
   24230:	781c      	ldrb	r4, [r3, #0]
   24232:	231a      	movs	r3, #26
   24234:	18fb      	adds	r3, r7, r3
   24236:	881a      	ldrh	r2, [r3, #0]
   24238:	69f8      	ldr	r0, [r7, #28]
   2423a:	0023      	movs	r3, r4
   2423c:	4c38      	ldr	r4, [pc, #224]	; (24320 <Socket_ReadSocketData+0x1e4>)
   2423e:	47a0      	blx	r4
   24240:	1e03      	subs	r3, r0, #0
   24242:	d14f      	bne.n	242e4 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   24244:	230f      	movs	r3, #15
   24246:	18fb      	adds	r3, r7, r3
   24248:	2200      	movs	r2, #0
   2424a:	569a      	ldrsb	r2, [r3, r2]
   2424c:	4b33      	ldr	r3, [pc, #204]	; (2431c <Socket_ReadSocketData+0x1e0>)
   2424e:	0112      	lsls	r2, r2, #4
   24250:	58d2      	ldr	r2, [r2, r3]
   24252:	68bb      	ldr	r3, [r7, #8]
   24254:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   24256:	231a      	movs	r3, #26
   24258:	18fb      	adds	r3, r7, r3
   2425a:	2200      	movs	r2, #0
   2425c:	5e9a      	ldrsh	r2, [r3, r2]
   2425e:	68bb      	ldr	r3, [r7, #8]
   24260:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   24262:	68bb      	ldr	r3, [r7, #8]
   24264:	88da      	ldrh	r2, [r3, #6]
   24266:	231a      	movs	r3, #26
   24268:	18fb      	adds	r3, r7, r3
   2426a:	881b      	ldrh	r3, [r3, #0]
   2426c:	1ad3      	subs	r3, r2, r3
   2426e:	b29a      	uxth	r2, r3
   24270:	68bb      	ldr	r3, [r7, #8]
   24272:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   24274:	4b2b      	ldr	r3, [pc, #172]	; (24324 <Socket_ReadSocketData+0x1e8>)
   24276:	681b      	ldr	r3, [r3, #0]
   24278:	2b00      	cmp	r3, #0
   2427a:	d00b      	beq.n	24294 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   2427c:	4b29      	ldr	r3, [pc, #164]	; (24324 <Socket_ReadSocketData+0x1e8>)
   2427e:	681b      	ldr	r3, [r3, #0]
   24280:	68bc      	ldr	r4, [r7, #8]
   24282:	220e      	movs	r2, #14
   24284:	18ba      	adds	r2, r7, r2
   24286:	7811      	ldrb	r1, [r2, #0]
   24288:	220f      	movs	r2, #15
   2428a:	18ba      	adds	r2, r7, r2
   2428c:	2000      	movs	r0, #0
   2428e:	5610      	ldrsb	r0, [r2, r0]
   24290:	0022      	movs	r2, r4
   24292:	4798      	blx	r3

				u16ReadCount -= u16Read;
   24294:	2330      	movs	r3, #48	; 0x30
   24296:	18f9      	adds	r1, r7, r3
   24298:	2330      	movs	r3, #48	; 0x30
   2429a:	18fa      	adds	r2, r7, r3
   2429c:	231a      	movs	r3, #26
   2429e:	18fb      	adds	r3, r7, r3
   242a0:	8812      	ldrh	r2, [r2, #0]
   242a2:	881b      	ldrh	r3, [r3, #0]
   242a4:	1ad3      	subs	r3, r2, r3
   242a6:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   242a8:	231a      	movs	r3, #26
   242aa:	18fb      	adds	r3, r7, r3
   242ac:	881b      	ldrh	r3, [r3, #0]
   242ae:	69fa      	ldr	r2, [r7, #28]
   242b0:	18d3      	adds	r3, r2, r3
   242b2:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   242b4:	230f      	movs	r3, #15
   242b6:	18fb      	adds	r3, r7, r3
   242b8:	781b      	ldrb	r3, [r3, #0]
   242ba:	b25b      	sxtb	r3, r3
   242bc:	4a17      	ldr	r2, [pc, #92]	; (2431c <Socket_ReadSocketData+0x1e0>)
   242be:	011b      	lsls	r3, r3, #4
   242c0:	18d3      	adds	r3, r2, r3
   242c2:	330a      	adds	r3, #10
   242c4:	781b      	ldrb	r3, [r3, #0]
   242c6:	b2db      	uxtb	r3, r3
   242c8:	2b00      	cmp	r3, #0
   242ca:	d11c      	bne.n	24306 <Socket_ReadSocketData+0x1ca>
   242cc:	2330      	movs	r3, #48	; 0x30
   242ce:	18fb      	adds	r3, r7, r3
   242d0:	881b      	ldrh	r3, [r3, #0]
   242d2:	2b00      	cmp	r3, #0
   242d4:	d017      	beq.n	24306 <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   242d6:	2301      	movs	r3, #1
   242d8:	2200      	movs	r2, #0
   242da:	2100      	movs	r1, #0
   242dc:	2000      	movs	r0, #0
   242de:	4c10      	ldr	r4, [pc, #64]	; (24320 <Socket_ReadSocketData+0x1e4>)
   242e0:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   242e2:	e017      	b.n	24314 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   242e4:	4b10      	ldr	r3, [pc, #64]	; (24328 <Socket_ReadSocketData+0x1ec>)
   242e6:	0018      	movs	r0, r3
   242e8:	4b10      	ldr	r3, [pc, #64]	; (2432c <Socket_ReadSocketData+0x1f0>)
   242ea:	4798      	blx	r3
   242ec:	2330      	movs	r3, #48	; 0x30
   242ee:	18fb      	adds	r3, r7, r3
   242f0:	881a      	ldrh	r2, [r3, #0]
   242f2:	4b0f      	ldr	r3, [pc, #60]	; (24330 <Socket_ReadSocketData+0x1f4>)
   242f4:	0011      	movs	r1, r2
   242f6:	0018      	movs	r0, r3
   242f8:	4b0c      	ldr	r3, [pc, #48]	; (2432c <Socket_ReadSocketData+0x1f0>)
   242fa:	4798      	blx	r3
   242fc:	4b0d      	ldr	r3, [pc, #52]	; (24334 <Socket_ReadSocketData+0x1f8>)
   242fe:	0018      	movs	r0, r3
   24300:	4b0a      	ldr	r3, [pc, #40]	; (2432c <Socket_ReadSocketData+0x1f0>)
   24302:	4798      	blx	r3
				break;
   24304:	e006      	b.n	24314 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   24306:	2330      	movs	r3, #48	; 0x30
   24308:	18fb      	adds	r3, r7, r3
   2430a:	881b      	ldrh	r3, [r3, #0]
   2430c:	2b00      	cmp	r3, #0
   2430e:	d000      	beq.n	24312 <Socket_ReadSocketData+0x1d6>
   24310:	e753      	b.n	241ba <Socket_ReadSocketData+0x7e>
	}
}
   24312:	e7ff      	b.n	24314 <Socket_ReadSocketData+0x1d8>
   24314:	46c0      	nop			; (mov r8, r8)
   24316:	46bd      	mov	sp, r7
   24318:	b009      	add	sp, #36	; 0x24
   2431a:	bd90      	pop	{r4, r7, pc}
   2431c:	20005510 	.word	0x20005510
   24320:	00020b35 	.word	0x00020b35
   24324:	200055c0 	.word	0x200055c0
   24328:	00038220 	.word	0x00038220
   2432c:	0001d28d 	.word	0x0001d28d
   24330:	0003822c 	.word	0x0003822c
   24334:	00038240 	.word	0x00038240

00024338 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   24338:	b590      	push	{r4, r7, lr}
   2433a:	b0bb      	sub	sp, #236	; 0xec
   2433c:	af02      	add	r7, sp, #8
   2433e:	603a      	str	r2, [r7, #0]
   24340:	1dfb      	adds	r3, r7, #7
   24342:	1c02      	adds	r2, r0, #0
   24344:	701a      	strb	r2, [r3, #0]
   24346:	1d3b      	adds	r3, r7, #4
   24348:	1c0a      	adds	r2, r1, #0
   2434a:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   2434c:	1dfb      	adds	r3, r7, #7
   2434e:	781b      	ldrb	r3, [r3, #0]
   24350:	2b41      	cmp	r3, #65	; 0x41
   24352:	d003      	beq.n	2435c <m2m_ip_cb+0x24>
   24354:	1dfb      	adds	r3, r7, #7
   24356:	781b      	ldrb	r3, [r3, #0]
   24358:	2b54      	cmp	r3, #84	; 0x54
   2435a:	d120      	bne.n	2439e <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   2435c:	23cc      	movs	r3, #204	; 0xcc
   2435e:	18f9      	adds	r1, r7, r3
   24360:	6838      	ldr	r0, [r7, #0]
   24362:	2300      	movs	r3, #0
   24364:	2204      	movs	r2, #4
   24366:	4c98      	ldr	r4, [pc, #608]	; (245c8 <m2m_ip_cb+0x290>)
   24368:	47a0      	blx	r4
   2436a:	1e03      	subs	r3, r0, #0
   2436c:	d000      	beq.n	24370 <m2m_ip_cb+0x38>
   2436e:	e275      	b.n	2485c <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   24370:	23cc      	movs	r3, #204	; 0xcc
   24372:	18fb      	adds	r3, r7, r3
   24374:	2201      	movs	r2, #1
   24376:	569a      	ldrsb	r2, [r3, r2]
   24378:	23c8      	movs	r3, #200	; 0xc8
   2437a:	18fb      	adds	r3, r7, r3
   2437c:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   2437e:	4b93      	ldr	r3, [pc, #588]	; (245cc <m2m_ip_cb+0x294>)
   24380:	681b      	ldr	r3, [r3, #0]
   24382:	2b00      	cmp	r3, #0
   24384:	d100      	bne.n	24388 <m2m_ip_cb+0x50>
   24386:	e269      	b.n	2485c <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   24388:	4b90      	ldr	r3, [pc, #576]	; (245cc <m2m_ip_cb+0x294>)
   2438a:	681b      	ldr	r3, [r3, #0]
   2438c:	22cc      	movs	r2, #204	; 0xcc
   2438e:	18ba      	adds	r2, r7, r2
   24390:	2000      	movs	r0, #0
   24392:	5610      	ldrsb	r0, [r2, r0]
   24394:	22c8      	movs	r2, #200	; 0xc8
   24396:	18ba      	adds	r2, r7, r2
   24398:	2101      	movs	r1, #1
   2439a:	4798      	blx	r3
	{
   2439c:	e25e      	b.n	2485c <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   2439e:	1dfb      	adds	r3, r7, #7
   243a0:	781b      	ldrb	r3, [r3, #0]
   243a2:	2b42      	cmp	r3, #66	; 0x42
   243a4:	d120      	bne.n	243e8 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   243a6:	23c4      	movs	r3, #196	; 0xc4
   243a8:	18f9      	adds	r1, r7, r3
   243aa:	6838      	ldr	r0, [r7, #0]
   243ac:	2300      	movs	r3, #0
   243ae:	2204      	movs	r2, #4
   243b0:	4c85      	ldr	r4, [pc, #532]	; (245c8 <m2m_ip_cb+0x290>)
   243b2:	47a0      	blx	r4
   243b4:	1e03      	subs	r3, r0, #0
   243b6:	d000      	beq.n	243ba <m2m_ip_cb+0x82>
   243b8:	e257      	b.n	2486a <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   243ba:	23c4      	movs	r3, #196	; 0xc4
   243bc:	18fb      	adds	r3, r7, r3
   243be:	2201      	movs	r2, #1
   243c0:	569a      	ldrsb	r2, [r3, r2]
   243c2:	23c0      	movs	r3, #192	; 0xc0
   243c4:	18fb      	adds	r3, r7, r3
   243c6:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   243c8:	4b80      	ldr	r3, [pc, #512]	; (245cc <m2m_ip_cb+0x294>)
   243ca:	681b      	ldr	r3, [r3, #0]
   243cc:	2b00      	cmp	r3, #0
   243ce:	d100      	bne.n	243d2 <m2m_ip_cb+0x9a>
   243d0:	e24b      	b.n	2486a <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   243d2:	4b7e      	ldr	r3, [pc, #504]	; (245cc <m2m_ip_cb+0x294>)
   243d4:	681b      	ldr	r3, [r3, #0]
   243d6:	22c4      	movs	r2, #196	; 0xc4
   243d8:	18ba      	adds	r2, r7, r2
   243da:	2000      	movs	r0, #0
   243dc:	5610      	ldrsb	r0, [r2, r0]
   243de:	22c0      	movs	r2, #192	; 0xc0
   243e0:	18ba      	adds	r2, r7, r2
   243e2:	2102      	movs	r1, #2
   243e4:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   243e6:	e240      	b.n	2486a <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   243e8:	1dfb      	adds	r3, r7, #7
   243ea:	781b      	ldrb	r3, [r3, #0]
   243ec:	2b43      	cmp	r3, #67	; 0x43
   243ee:	d000      	beq.n	243f2 <m2m_ip_cb+0xba>
   243f0:	e086      	b.n	24500 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   243f2:	23b4      	movs	r3, #180	; 0xb4
   243f4:	18f9      	adds	r1, r7, r3
   243f6:	6838      	ldr	r0, [r7, #0]
   243f8:	2300      	movs	r3, #0
   243fa:	220c      	movs	r2, #12
   243fc:	4c72      	ldr	r4, [pc, #456]	; (245c8 <m2m_ip_cb+0x290>)
   243fe:	47a0      	blx	r4
   24400:	1e03      	subs	r3, r0, #0
   24402:	d000      	beq.n	24406 <m2m_ip_cb+0xce>
   24404:	e231      	b.n	2486a <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   24406:	23b4      	movs	r3, #180	; 0xb4
   24408:	18fb      	adds	r3, r7, r3
   2440a:	7a5b      	ldrb	r3, [r3, #9]
   2440c:	b25b      	sxtb	r3, r3
   2440e:	2b00      	cmp	r3, #0
   24410:	db4f      	blt.n	244b2 <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   24412:	23b4      	movs	r3, #180	; 0xb4
   24414:	18fb      	adds	r3, r7, r3
   24416:	7a5b      	ldrb	r3, [r3, #9]
   24418:	b25b      	sxtb	r3, r3
   2441a:	0018      	movs	r0, r3
   2441c:	23b4      	movs	r3, #180	; 0xb4
   2441e:	18fb      	adds	r3, r7, r3
   24420:	7a1b      	ldrb	r3, [r3, #8]
   24422:	b25b      	sxtb	r3, r3
   24424:	4a6a      	ldr	r2, [pc, #424]	; (245d0 <m2m_ip_cb+0x298>)
   24426:	011b      	lsls	r3, r3, #4
   24428:	18d3      	adds	r3, r2, r3
   2442a:	330b      	adds	r3, #11
   2442c:	781b      	ldrb	r3, [r3, #0]
   2442e:	b2d9      	uxtb	r1, r3
   24430:	4a67      	ldr	r2, [pc, #412]	; (245d0 <m2m_ip_cb+0x298>)
   24432:	0103      	lsls	r3, r0, #4
   24434:	18d3      	adds	r3, r2, r3
   24436:	330b      	adds	r3, #11
   24438:	1c0a      	adds	r2, r1, #0
   2443a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   2443c:	23b4      	movs	r3, #180	; 0xb4
   2443e:	18fb      	adds	r3, r7, r3
   24440:	7a5b      	ldrb	r3, [r3, #9]
   24442:	b25b      	sxtb	r3, r3
   24444:	4a62      	ldr	r2, [pc, #392]	; (245d0 <m2m_ip_cb+0x298>)
   24446:	011b      	lsls	r3, r3, #4
   24448:	18d3      	adds	r3, r2, r3
   2444a:	330a      	adds	r3, #10
   2444c:	2201      	movs	r2, #1
   2444e:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24450:	23b4      	movs	r3, #180	; 0xb4
   24452:	18fb      	adds	r3, r7, r3
   24454:	7a5b      	ldrb	r3, [r3, #9]
   24456:	b25b      	sxtb	r3, r3
   24458:	0018      	movs	r0, r3
   2445a:	23b4      	movs	r3, #180	; 0xb4
   2445c:	18fb      	adds	r3, r7, r3
   2445e:	895b      	ldrh	r3, [r3, #10]
   24460:	3b08      	subs	r3, #8
   24462:	b299      	uxth	r1, r3
   24464:	4a5a      	ldr	r2, [pc, #360]	; (245d0 <m2m_ip_cb+0x298>)
   24466:	0103      	lsls	r3, r0, #4
   24468:	18d3      	adds	r3, r2, r3
   2446a:	3308      	adds	r3, #8
   2446c:	1c0a      	adds	r2, r1, #0
   2446e:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   24470:	4b58      	ldr	r3, [pc, #352]	; (245d4 <m2m_ip_cb+0x29c>)
   24472:	881b      	ldrh	r3, [r3, #0]
   24474:	b29b      	uxth	r3, r3
   24476:	3301      	adds	r3, #1
   24478:	b29a      	uxth	r2, r3
   2447a:	4b56      	ldr	r3, [pc, #344]	; (245d4 <m2m_ip_cb+0x29c>)
   2447c:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   2447e:	4b55      	ldr	r3, [pc, #340]	; (245d4 <m2m_ip_cb+0x29c>)
   24480:	881b      	ldrh	r3, [r3, #0]
   24482:	b29b      	uxth	r3, r3
   24484:	2b00      	cmp	r3, #0
   24486:	d106      	bne.n	24496 <m2m_ip_cb+0x15e>
					++gu16SessionID;
   24488:	4b52      	ldr	r3, [pc, #328]	; (245d4 <m2m_ip_cb+0x29c>)
   2448a:	881b      	ldrh	r3, [r3, #0]
   2448c:	b29b      	uxth	r3, r3
   2448e:	3301      	adds	r3, #1
   24490:	b29a      	uxth	r2, r3
   24492:	4b50      	ldr	r3, [pc, #320]	; (245d4 <m2m_ip_cb+0x29c>)
   24494:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   24496:	23b4      	movs	r3, #180	; 0xb4
   24498:	18fb      	adds	r3, r7, r3
   2449a:	7a5b      	ldrb	r3, [r3, #9]
   2449c:	b25b      	sxtb	r3, r3
   2449e:	0018      	movs	r0, r3
   244a0:	4b4c      	ldr	r3, [pc, #304]	; (245d4 <m2m_ip_cb+0x29c>)
   244a2:	881b      	ldrh	r3, [r3, #0]
   244a4:	b299      	uxth	r1, r3
   244a6:	4a4a      	ldr	r2, [pc, #296]	; (245d0 <m2m_ip_cb+0x298>)
   244a8:	0103      	lsls	r3, r0, #4
   244aa:	18d3      	adds	r3, r2, r3
   244ac:	3306      	adds	r3, #6
   244ae:	1c0a      	adds	r2, r1, #0
   244b0:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   244b2:	23b4      	movs	r3, #180	; 0xb4
   244b4:	18fb      	adds	r3, r7, r3
   244b6:	2209      	movs	r2, #9
   244b8:	569a      	ldrsb	r2, [r3, r2]
   244ba:	23a0      	movs	r3, #160	; 0xa0
   244bc:	18fb      	adds	r3, r7, r3
   244be:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   244c0:	23a0      	movs	r3, #160	; 0xa0
   244c2:	18fb      	adds	r3, r7, r3
   244c4:	2202      	movs	r2, #2
   244c6:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   244c8:	23b4      	movs	r3, #180	; 0xb4
   244ca:	18fb      	adds	r3, r7, r3
   244cc:	885a      	ldrh	r2, [r3, #2]
   244ce:	23a0      	movs	r3, #160	; 0xa0
   244d0:	18fb      	adds	r3, r7, r3
   244d2:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   244d4:	23b4      	movs	r3, #180	; 0xb4
   244d6:	18fb      	adds	r3, r7, r3
   244d8:	685a      	ldr	r2, [r3, #4]
   244da:	23a0      	movs	r3, #160	; 0xa0
   244dc:	18fb      	adds	r3, r7, r3
   244de:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   244e0:	4b3a      	ldr	r3, [pc, #232]	; (245cc <m2m_ip_cb+0x294>)
   244e2:	681b      	ldr	r3, [r3, #0]
   244e4:	2b00      	cmp	r3, #0
   244e6:	d100      	bne.n	244ea <m2m_ip_cb+0x1b2>
   244e8:	e1bf      	b.n	2486a <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   244ea:	4b38      	ldr	r3, [pc, #224]	; (245cc <m2m_ip_cb+0x294>)
   244ec:	681b      	ldr	r3, [r3, #0]
   244ee:	22b4      	movs	r2, #180	; 0xb4
   244f0:	18ba      	adds	r2, r7, r2
   244f2:	2008      	movs	r0, #8
   244f4:	5610      	ldrsb	r0, [r2, r0]
   244f6:	22a0      	movs	r2, #160	; 0xa0
   244f8:	18ba      	adds	r2, r7, r2
   244fa:	2104      	movs	r1, #4
   244fc:	4798      	blx	r3
}
   244fe:	e1b4      	b.n	2486a <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   24500:	1dfb      	adds	r3, r7, #7
   24502:	781b      	ldrb	r3, [r3, #0]
   24504:	2b44      	cmp	r3, #68	; 0x44
   24506:	d003      	beq.n	24510 <m2m_ip_cb+0x1d8>
   24508:	1dfb      	adds	r3, r7, #7
   2450a:	781b      	ldrb	r3, [r3, #0]
   2450c:	2b4b      	cmp	r3, #75	; 0x4b
   2450e:	d13d      	bne.n	2458c <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   24510:	239c      	movs	r3, #156	; 0x9c
   24512:	18f9      	adds	r1, r7, r3
   24514:	6838      	ldr	r0, [r7, #0]
   24516:	2300      	movs	r3, #0
   24518:	2204      	movs	r2, #4
   2451a:	4c2b      	ldr	r4, [pc, #172]	; (245c8 <m2m_ip_cb+0x290>)
   2451c:	47a0      	blx	r4
   2451e:	1e03      	subs	r3, r0, #0
   24520:	d000      	beq.n	24524 <m2m_ip_cb+0x1ec>
   24522:	e19d      	b.n	24860 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   24524:	239c      	movs	r3, #156	; 0x9c
   24526:	18fb      	adds	r3, r7, r3
   24528:	2200      	movs	r2, #0
   2452a:	569a      	ldrsb	r2, [r3, r2]
   2452c:	2398      	movs	r3, #152	; 0x98
   2452e:	18fb      	adds	r3, r7, r3
   24530:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   24532:	239c      	movs	r3, #156	; 0x9c
   24534:	18fb      	adds	r3, r7, r3
   24536:	2201      	movs	r2, #1
   24538:	569a      	ldrsb	r2, [r3, r2]
   2453a:	2398      	movs	r3, #152	; 0x98
   2453c:	18fb      	adds	r3, r7, r3
   2453e:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   24540:	239c      	movs	r3, #156	; 0x9c
   24542:	18fb      	adds	r3, r7, r3
   24544:	785b      	ldrb	r3, [r3, #1]
   24546:	b25b      	sxtb	r3, r3
   24548:	2b00      	cmp	r3, #0
   2454a:	d10f      	bne.n	2456c <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   2454c:	239c      	movs	r3, #156	; 0x9c
   2454e:	18fb      	adds	r3, r7, r3
   24550:	781b      	ldrb	r3, [r3, #0]
   24552:	b25b      	sxtb	r3, r3
   24554:	0018      	movs	r0, r3
   24556:	239c      	movs	r3, #156	; 0x9c
   24558:	18fb      	adds	r3, r7, r3
   2455a:	885b      	ldrh	r3, [r3, #2]
   2455c:	3b08      	subs	r3, #8
   2455e:	b299      	uxth	r1, r3
   24560:	4a1b      	ldr	r2, [pc, #108]	; (245d0 <m2m_ip_cb+0x298>)
   24562:	0103      	lsls	r3, r0, #4
   24564:	18d3      	adds	r3, r2, r3
   24566:	3308      	adds	r3, #8
   24568:	1c0a      	adds	r2, r1, #0
   2456a:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   2456c:	4b17      	ldr	r3, [pc, #92]	; (245cc <m2m_ip_cb+0x294>)
   2456e:	681b      	ldr	r3, [r3, #0]
   24570:	2b00      	cmp	r3, #0
   24572:	d100      	bne.n	24576 <m2m_ip_cb+0x23e>
   24574:	e174      	b.n	24860 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   24576:	4b15      	ldr	r3, [pc, #84]	; (245cc <m2m_ip_cb+0x294>)
   24578:	681b      	ldr	r3, [r3, #0]
   2457a:	229c      	movs	r2, #156	; 0x9c
   2457c:	18ba      	adds	r2, r7, r2
   2457e:	2000      	movs	r0, #0
   24580:	5610      	ldrsb	r0, [r2, r0]
   24582:	2298      	movs	r2, #152	; 0x98
   24584:	18ba      	adds	r2, r7, r2
   24586:	2105      	movs	r1, #5
   24588:	4798      	blx	r3
	{
   2458a:	e169      	b.n	24860 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   2458c:	1dfb      	adds	r3, r7, #7
   2458e:	781b      	ldrb	r3, [r3, #0]
   24590:	2b4a      	cmp	r3, #74	; 0x4a
   24592:	d123      	bne.n	245dc <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   24594:	230c      	movs	r3, #12
   24596:	18f9      	adds	r1, r7, r3
   24598:	6838      	ldr	r0, [r7, #0]
   2459a:	2300      	movs	r3, #0
   2459c:	2244      	movs	r2, #68	; 0x44
   2459e:	4c0a      	ldr	r4, [pc, #40]	; (245c8 <m2m_ip_cb+0x290>)
   245a0:	47a0      	blx	r4
   245a2:	1e03      	subs	r3, r0, #0
   245a4:	d000      	beq.n	245a8 <m2m_ip_cb+0x270>
   245a6:	e160      	b.n	2486a <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   245a8:	4b0b      	ldr	r3, [pc, #44]	; (245d8 <m2m_ip_cb+0x2a0>)
   245aa:	681b      	ldr	r3, [r3, #0]
   245ac:	2b00      	cmp	r3, #0
   245ae:	d100      	bne.n	245b2 <m2m_ip_cb+0x27a>
   245b0:	e15b      	b.n	2486a <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   245b2:	4b09      	ldr	r3, [pc, #36]	; (245d8 <m2m_ip_cb+0x2a0>)
   245b4:	681a      	ldr	r2, [r3, #0]
   245b6:	230c      	movs	r3, #12
   245b8:	18fb      	adds	r3, r7, r3
   245ba:	6c19      	ldr	r1, [r3, #64]	; 0x40
   245bc:	230c      	movs	r3, #12
   245be:	18fb      	adds	r3, r7, r3
   245c0:	0018      	movs	r0, r3
   245c2:	4790      	blx	r2
}
   245c4:	e151      	b.n	2486a <m2m_ip_cb+0x532>
   245c6:	46c0      	nop			; (mov r8, r8)
   245c8:	00020b35 	.word	0x00020b35
   245cc:	200055c0 	.word	0x200055c0
   245d0:	20005510 	.word	0x20005510
   245d4:	20003e0a 	.word	0x20003e0a
   245d8:	200055c8 	.word	0x200055c8
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   245dc:	1dfb      	adds	r3, r7, #7
   245de:	781b      	ldrb	r3, [r3, #0]
   245e0:	2b46      	cmp	r3, #70	; 0x46
   245e2:	d008      	beq.n	245f6 <m2m_ip_cb+0x2be>
   245e4:	1dfb      	adds	r3, r7, #7
   245e6:	781b      	ldrb	r3, [r3, #0]
   245e8:	2b48      	cmp	r3, #72	; 0x48
   245ea:	d004      	beq.n	245f6 <m2m_ip_cb+0x2be>
   245ec:	1dfb      	adds	r3, r7, #7
   245ee:	781b      	ldrb	r3, [r3, #0]
   245f0:	2b4d      	cmp	r3, #77	; 0x4d
   245f2:	d000      	beq.n	245f6 <m2m_ip_cb+0x2be>
   245f4:	e0b4      	b.n	24760 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   245f6:	23df      	movs	r3, #223	; 0xdf
   245f8:	18fb      	adds	r3, r7, r3
   245fa:	2206      	movs	r2, #6
   245fc:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   245fe:	1dfb      	adds	r3, r7, #7
   24600:	781b      	ldrb	r3, [r3, #0]
   24602:	2b48      	cmp	r3, #72	; 0x48
   24604:	d103      	bne.n	2460e <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   24606:	23df      	movs	r3, #223	; 0xdf
   24608:	18fb      	adds	r3, r7, r3
   2460a:	2209      	movs	r2, #9
   2460c:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   2460e:	23d8      	movs	r3, #216	; 0xd8
   24610:	18fb      	adds	r3, r7, r3
   24612:	2210      	movs	r2, #16
   24614:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   24616:	23d8      	movs	r3, #216	; 0xd8
   24618:	18fb      	adds	r3, r7, r3
   2461a:	881a      	ldrh	r2, [r3, #0]
   2461c:	2388      	movs	r3, #136	; 0x88
   2461e:	18f9      	adds	r1, r7, r3
   24620:	6838      	ldr	r0, [r7, #0]
   24622:	2300      	movs	r3, #0
   24624:	4c93      	ldr	r4, [pc, #588]	; (24874 <m2m_ip_cb+0x53c>)
   24626:	47a0      	blx	r4
   24628:	1e03      	subs	r3, r0, #0
   2462a:	d000      	beq.n	2462e <m2m_ip_cb+0x2f6>
   2462c:	e11a      	b.n	24864 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   2462e:	23d6      	movs	r3, #214	; 0xd6
   24630:	18fb      	adds	r3, r7, r3
   24632:	2200      	movs	r2, #0
   24634:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   24636:	23d5      	movs	r3, #213	; 0xd5
   24638:	18fb      	adds	r3, r7, r3
   2463a:	2288      	movs	r2, #136	; 0x88
   2463c:	18ba      	adds	r2, r7, r2
   2463e:	7b12      	ldrb	r2, [r2, #12]
   24640:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   24642:	23d6      	movs	r3, #214	; 0xd6
   24644:	18fb      	adds	r3, r7, r3
   24646:	2288      	movs	r2, #136	; 0x88
   24648:	18ba      	adds	r2, r7, r2
   2464a:	89d2      	ldrh	r2, [r2, #14]
   2464c:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   2464e:	23d5      	movs	r3, #213	; 0xd5
   24650:	18fb      	adds	r3, r7, r3
   24652:	781b      	ldrb	r3, [r3, #0]
   24654:	b25b      	sxtb	r3, r3
   24656:	4a88      	ldr	r2, [pc, #544]	; (24878 <m2m_ip_cb+0x540>)
   24658:	011b      	lsls	r3, r3, #4
   2465a:	18d3      	adds	r3, r2, r3
   2465c:	330c      	adds	r3, #12
   2465e:	2200      	movs	r2, #0
   24660:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   24662:	23d2      	movs	r3, #210	; 0xd2
   24664:	18fb      	adds	r3, r7, r3
   24666:	2288      	movs	r2, #136	; 0x88
   24668:	18ba      	adds	r2, r7, r2
   2466a:	8912      	ldrh	r2, [r2, #8]
   2466c:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   2466e:	23d0      	movs	r3, #208	; 0xd0
   24670:	18fb      	adds	r3, r7, r3
   24672:	2288      	movs	r2, #136	; 0x88
   24674:	18ba      	adds	r2, r7, r2
   24676:	8952      	ldrh	r2, [r2, #10]
   24678:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   2467a:	2388      	movs	r3, #136	; 0x88
   2467c:	18fb      	adds	r3, r7, r3
   2467e:	885a      	ldrh	r2, [r3, #2]
   24680:	2370      	movs	r3, #112	; 0x70
   24682:	18fb      	adds	r3, r7, r3
   24684:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   24686:	2388      	movs	r3, #136	; 0x88
   24688:	18fb      	adds	r3, r7, r3
   2468a:	685a      	ldr	r2, [r3, #4]
   2468c:	2370      	movs	r3, #112	; 0x70
   2468e:	18fb      	adds	r3, r7, r3
   24690:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   24692:	23d5      	movs	r3, #213	; 0xd5
   24694:	18fb      	adds	r3, r7, r3
   24696:	781b      	ldrb	r3, [r3, #0]
   24698:	b25b      	sxtb	r3, r3
   2469a:	4a77      	ldr	r2, [pc, #476]	; (24878 <m2m_ip_cb+0x540>)
   2469c:	011b      	lsls	r3, r3, #4
   2469e:	18d3      	adds	r3, r2, r3
   246a0:	3306      	adds	r3, #6
   246a2:	881b      	ldrh	r3, [r3, #0]
   246a4:	b29b      	uxth	r3, r3
   246a6:	22d6      	movs	r2, #214	; 0xd6
   246a8:	18ba      	adds	r2, r7, r2
   246aa:	8812      	ldrh	r2, [r2, #0]
   246ac:	429a      	cmp	r2, r3
   246ae:	d148      	bne.n	24742 <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   246b0:	23d2      	movs	r3, #210	; 0xd2
   246b2:	18fb      	adds	r3, r7, r3
   246b4:	2200      	movs	r2, #0
   246b6:	5e9b      	ldrsh	r3, [r3, r2]
   246b8:	2b00      	cmp	r3, #0
   246ba:	dd25      	ble.n	24708 <m2m_ip_cb+0x3d0>
   246bc:	23d2      	movs	r3, #210	; 0xd2
   246be:	18fb      	adds	r3, r7, r3
   246c0:	2200      	movs	r2, #0
   246c2:	5e9a      	ldrsh	r2, [r3, r2]
   246c4:	1d3b      	adds	r3, r7, #4
   246c6:	881b      	ldrh	r3, [r3, #0]
   246c8:	429a      	cmp	r2, r3
   246ca:	da1d      	bge.n	24708 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   246cc:	23d0      	movs	r3, #208	; 0xd0
   246ce:	18fb      	adds	r3, r7, r3
   246d0:	881b      	ldrh	r3, [r3, #0]
   246d2:	683a      	ldr	r2, [r7, #0]
   246d4:	18d3      	adds	r3, r2, r3
   246d6:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   246d8:	23d8      	movs	r3, #216	; 0xd8
   246da:	18fb      	adds	r3, r7, r3
   246dc:	22d2      	movs	r2, #210	; 0xd2
   246de:	18ba      	adds	r2, r7, r2
   246e0:	8812      	ldrh	r2, [r2, #0]
   246e2:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   246e4:	683c      	ldr	r4, [r7, #0]
   246e6:	23df      	movs	r3, #223	; 0xdf
   246e8:	18fb      	adds	r3, r7, r3
   246ea:	781a      	ldrb	r2, [r3, #0]
   246ec:	2370      	movs	r3, #112	; 0x70
   246ee:	18f9      	adds	r1, r7, r3
   246f0:	23d5      	movs	r3, #213	; 0xd5
   246f2:	18fb      	adds	r3, r7, r3
   246f4:	2000      	movs	r0, #0
   246f6:	5618      	ldrsb	r0, [r3, r0]
   246f8:	23d8      	movs	r3, #216	; 0xd8
   246fa:	18fb      	adds	r3, r7, r3
   246fc:	881b      	ldrh	r3, [r3, #0]
   246fe:	9300      	str	r3, [sp, #0]
   24700:	0023      	movs	r3, r4
   24702:	4c5e      	ldr	r4, [pc, #376]	; (2487c <m2m_ip_cb+0x544>)
   24704:	47a0      	blx	r4
	{
   24706:	e0ad      	b.n	24864 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   24708:	2370      	movs	r3, #112	; 0x70
   2470a:	18fb      	adds	r3, r7, r3
   2470c:	22d2      	movs	r2, #210	; 0xd2
   2470e:	18ba      	adds	r2, r7, r2
   24710:	8812      	ldrh	r2, [r2, #0]
   24712:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   24714:	2370      	movs	r3, #112	; 0x70
   24716:	18fb      	adds	r3, r7, r3
   24718:	2200      	movs	r2, #0
   2471a:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   2471c:	4b58      	ldr	r3, [pc, #352]	; (24880 <m2m_ip_cb+0x548>)
   2471e:	681b      	ldr	r3, [r3, #0]
   24720:	2b00      	cmp	r3, #0
   24722:	d100      	bne.n	24726 <m2m_ip_cb+0x3ee>
   24724:	e09e      	b.n	24864 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   24726:	4b56      	ldr	r3, [pc, #344]	; (24880 <m2m_ip_cb+0x548>)
   24728:	681b      	ldr	r3, [r3, #0]
   2472a:	2270      	movs	r2, #112	; 0x70
   2472c:	18bc      	adds	r4, r7, r2
   2472e:	22df      	movs	r2, #223	; 0xdf
   24730:	18ba      	adds	r2, r7, r2
   24732:	7811      	ldrb	r1, [r2, #0]
   24734:	22d5      	movs	r2, #213	; 0xd5
   24736:	18ba      	adds	r2, r7, r2
   24738:	2000      	movs	r0, #0
   2473a:	5610      	ldrsb	r0, [r2, r0]
   2473c:	0022      	movs	r2, r4
   2473e:	4798      	blx	r3
	{
   24740:	e090      	b.n	24864 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   24742:	23d8      	movs	r3, #216	; 0xd8
   24744:	18fa      	adds	r2, r7, r3
   24746:	1d3b      	adds	r3, r7, #4
   24748:	8812      	ldrh	r2, [r2, #0]
   2474a:	881b      	ldrh	r3, [r3, #0]
   2474c:	429a      	cmp	r2, r3
   2474e:	d300      	bcc.n	24752 <m2m_ip_cb+0x41a>
   24750:	e088      	b.n	24864 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   24752:	2301      	movs	r3, #1
   24754:	2200      	movs	r2, #0
   24756:	2100      	movs	r1, #0
   24758:	2000      	movs	r0, #0
   2475a:	4c46      	ldr	r4, [pc, #280]	; (24874 <m2m_ip_cb+0x53c>)
   2475c:	47a0      	blx	r4
	{
   2475e:	e081      	b.n	24864 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   24760:	1dfb      	adds	r3, r7, #7
   24762:	781b      	ldrb	r3, [r3, #0]
   24764:	2b45      	cmp	r3, #69	; 0x45
   24766:	d007      	beq.n	24778 <m2m_ip_cb+0x440>
   24768:	1dfb      	adds	r3, r7, #7
   2476a:	781b      	ldrb	r3, [r3, #0]
   2476c:	2b47      	cmp	r3, #71	; 0x47
   2476e:	d003      	beq.n	24778 <m2m_ip_cb+0x440>
   24770:	1dfb      	adds	r3, r7, #7
   24772:	781b      	ldrb	r3, [r3, #0]
   24774:	2b4c      	cmp	r3, #76	; 0x4c
   24776:	d14c      	bne.n	24812 <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   24778:	23de      	movs	r3, #222	; 0xde
   2477a:	18fb      	adds	r3, r7, r3
   2477c:	2207      	movs	r2, #7
   2477e:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   24780:	1dfb      	adds	r3, r7, #7
   24782:	781b      	ldrb	r3, [r3, #0]
   24784:	2b47      	cmp	r3, #71	; 0x47
   24786:	d103      	bne.n	24790 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   24788:	23de      	movs	r3, #222	; 0xde
   2478a:	18fb      	adds	r3, r7, r3
   2478c:	2208      	movs	r2, #8
   2478e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   24790:	2364      	movs	r3, #100	; 0x64
   24792:	18f9      	adds	r1, r7, r3
   24794:	6838      	ldr	r0, [r7, #0]
   24796:	2300      	movs	r3, #0
   24798:	2208      	movs	r2, #8
   2479a:	4c36      	ldr	r4, [pc, #216]	; (24874 <m2m_ip_cb+0x53c>)
   2479c:	47a0      	blx	r4
   2479e:	1e03      	subs	r3, r0, #0
   247a0:	d162      	bne.n	24868 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   247a2:	23dc      	movs	r3, #220	; 0xdc
   247a4:	18fb      	adds	r3, r7, r3
   247a6:	2200      	movs	r2, #0
   247a8:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   247aa:	23db      	movs	r3, #219	; 0xdb
   247ac:	18fb      	adds	r3, r7, r3
   247ae:	2264      	movs	r2, #100	; 0x64
   247b0:	18ba      	adds	r2, r7, r2
   247b2:	7812      	ldrb	r2, [r2, #0]
   247b4:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   247b6:	23dc      	movs	r3, #220	; 0xdc
   247b8:	18fb      	adds	r3, r7, r3
   247ba:	2264      	movs	r2, #100	; 0x64
   247bc:	18ba      	adds	r2, r7, r2
   247be:	8892      	ldrh	r2, [r2, #4]
   247c0:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   247c2:	2364      	movs	r3, #100	; 0x64
   247c4:	18fb      	adds	r3, r7, r3
   247c6:	2202      	movs	r2, #2
   247c8:	5e9a      	ldrsh	r2, [r3, r2]
   247ca:	236e      	movs	r3, #110	; 0x6e
   247cc:	18fb      	adds	r3, r7, r3
   247ce:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   247d0:	23db      	movs	r3, #219	; 0xdb
   247d2:	18fb      	adds	r3, r7, r3
   247d4:	781b      	ldrb	r3, [r3, #0]
   247d6:	b25b      	sxtb	r3, r3
   247d8:	4a27      	ldr	r2, [pc, #156]	; (24878 <m2m_ip_cb+0x540>)
   247da:	011b      	lsls	r3, r3, #4
   247dc:	18d3      	adds	r3, r2, r3
   247de:	3306      	adds	r3, #6
   247e0:	881b      	ldrh	r3, [r3, #0]
   247e2:	b29b      	uxth	r3, r3
   247e4:	22dc      	movs	r2, #220	; 0xdc
   247e6:	18ba      	adds	r2, r7, r2
   247e8:	8812      	ldrh	r2, [r2, #0]
   247ea:	429a      	cmp	r2, r3
   247ec:	d13c      	bne.n	24868 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   247ee:	4b24      	ldr	r3, [pc, #144]	; (24880 <m2m_ip_cb+0x548>)
   247f0:	681b      	ldr	r3, [r3, #0]
   247f2:	2b00      	cmp	r3, #0
   247f4:	d038      	beq.n	24868 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   247f6:	4b22      	ldr	r3, [pc, #136]	; (24880 <m2m_ip_cb+0x548>)
   247f8:	681b      	ldr	r3, [r3, #0]
   247fa:	226e      	movs	r2, #110	; 0x6e
   247fc:	18bc      	adds	r4, r7, r2
   247fe:	22de      	movs	r2, #222	; 0xde
   24800:	18ba      	adds	r2, r7, r2
   24802:	7811      	ldrb	r1, [r2, #0]
   24804:	22db      	movs	r2, #219	; 0xdb
   24806:	18ba      	adds	r2, r7, r2
   24808:	2000      	movs	r0, #0
   2480a:	5610      	ldrsb	r0, [r2, r0]
   2480c:	0022      	movs	r2, r4
   2480e:	4798      	blx	r3
	{
   24810:	e02a      	b.n	24868 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   24812:	1dfb      	adds	r3, r7, #7
   24814:	781b      	ldrb	r3, [r3, #0]
   24816:	2b52      	cmp	r3, #82	; 0x52
   24818:	d127      	bne.n	2486a <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   2481a:	2350      	movs	r3, #80	; 0x50
   2481c:	18f9      	adds	r1, r7, r3
   2481e:	6838      	ldr	r0, [r7, #0]
   24820:	2301      	movs	r3, #1
   24822:	2214      	movs	r2, #20
   24824:	4c13      	ldr	r4, [pc, #76]	; (24874 <m2m_ip_cb+0x53c>)
   24826:	47a0      	blx	r4
   24828:	1e03      	subs	r3, r0, #0
   2482a:	d11e      	bne.n	2486a <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   2482c:	2350      	movs	r3, #80	; 0x50
   2482e:	18fb      	adds	r3, r7, r3
   24830:	685b      	ldr	r3, [r3, #4]
   24832:	001a      	movs	r2, r3
   24834:	4b13      	ldr	r3, [pc, #76]	; (24884 <m2m_ip_cb+0x54c>)
   24836:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   24838:	4b12      	ldr	r3, [pc, #72]	; (24884 <m2m_ip_cb+0x54c>)
   2483a:	681b      	ldr	r3, [r3, #0]
   2483c:	2b00      	cmp	r3, #0
   2483e:	d014      	beq.n	2486a <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   24840:	4b10      	ldr	r3, [pc, #64]	; (24884 <m2m_ip_cb+0x54c>)
   24842:	681c      	ldr	r4, [r3, #0]
   24844:	2350      	movs	r3, #80	; 0x50
   24846:	18fb      	adds	r3, r7, r3
   24848:	6818      	ldr	r0, [r3, #0]
   2484a:	2350      	movs	r3, #80	; 0x50
   2484c:	18fb      	adds	r3, r7, r3
   2484e:	6899      	ldr	r1, [r3, #8]
   24850:	2350      	movs	r3, #80	; 0x50
   24852:	18fb      	adds	r3, r7, r3
   24854:	7c1b      	ldrb	r3, [r3, #16]
   24856:	001a      	movs	r2, r3
   24858:	47a0      	blx	r4
}
   2485a:	e006      	b.n	2486a <m2m_ip_cb+0x532>
	{
   2485c:	46c0      	nop			; (mov r8, r8)
   2485e:	e004      	b.n	2486a <m2m_ip_cb+0x532>
	{
   24860:	46c0      	nop			; (mov r8, r8)
   24862:	e002      	b.n	2486a <m2m_ip_cb+0x532>
	{
   24864:	46c0      	nop			; (mov r8, r8)
   24866:	e000      	b.n	2486a <m2m_ip_cb+0x532>
	{
   24868:	46c0      	nop			; (mov r8, r8)
}
   2486a:	46c0      	nop			; (mov r8, r8)
   2486c:	46bd      	mov	sp, r7
   2486e:	b039      	add	sp, #228	; 0xe4
   24870:	bd90      	pop	{r4, r7, pc}
   24872:	46c0      	nop			; (mov r8, r8)
   24874:	00020b35 	.word	0x00020b35
   24878:	20005510 	.word	0x20005510
   2487c:	0002413d 	.word	0x0002413d
   24880:	200055c0 	.word	0x200055c0
   24884:	200055c4 	.word	0x200055c4

00024888 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   24888:	b580      	push	{r7, lr}
   2488a:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   2488c:	4b0c      	ldr	r3, [pc, #48]	; (248c0 <socketInit+0x38>)
   2488e:	781b      	ldrb	r3, [r3, #0]
   24890:	b2db      	uxtb	r3, r3
   24892:	2b00      	cmp	r3, #0
   24894:	d110      	bne.n	248b8 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   24896:	4b0b      	ldr	r3, [pc, #44]	; (248c4 <socketInit+0x3c>)
   24898:	22b0      	movs	r2, #176	; 0xb0
   2489a:	2100      	movs	r1, #0
   2489c:	0018      	movs	r0, r3
   2489e:	4b0a      	ldr	r3, [pc, #40]	; (248c8 <socketInit+0x40>)
   248a0:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   248a2:	4b0a      	ldr	r3, [pc, #40]	; (248cc <socketInit+0x44>)
   248a4:	0019      	movs	r1, r3
   248a6:	2002      	movs	r0, #2
   248a8:	4b09      	ldr	r3, [pc, #36]	; (248d0 <socketInit+0x48>)
   248aa:	4798      	blx	r3
		gbSocketInit	= 1;
   248ac:	4b04      	ldr	r3, [pc, #16]	; (248c0 <socketInit+0x38>)
   248ae:	2201      	movs	r2, #1
   248b0:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   248b2:	4b08      	ldr	r3, [pc, #32]	; (248d4 <socketInit+0x4c>)
   248b4:	2200      	movs	r2, #0
   248b6:	801a      	strh	r2, [r3, #0]
	}
}
   248b8:	46c0      	nop			; (mov r8, r8)
   248ba:	46bd      	mov	sp, r7
   248bc:	bd80      	pop	{r7, pc}
   248be:	46c0      	nop			; (mov r8, r8)
   248c0:	20003e0c 	.word	0x20003e0c
   248c4:	20005510 	.word	0x20005510
   248c8:	0001ffb9 	.word	0x0001ffb9
   248cc:	00024339 	.word	0x00024339
   248d0:	00020cb5 	.word	0x00020cb5
   248d4:	20003e0a 	.word	0x20003e0a

000248d8 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   248d8:	b580      	push	{r7, lr}
   248da:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   248dc:	4b0a      	ldr	r3, [pc, #40]	; (24908 <socketDeinit+0x30>)
   248de:	22b0      	movs	r2, #176	; 0xb0
   248e0:	2100      	movs	r1, #0
   248e2:	0018      	movs	r0, r3
   248e4:	4b09      	ldr	r3, [pc, #36]	; (2490c <socketDeinit+0x34>)
   248e6:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   248e8:	2100      	movs	r1, #0
   248ea:	2002      	movs	r0, #2
   248ec:	4b08      	ldr	r3, [pc, #32]	; (24910 <socketDeinit+0x38>)
   248ee:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   248f0:	4b08      	ldr	r3, [pc, #32]	; (24914 <socketDeinit+0x3c>)
   248f2:	2200      	movs	r2, #0
   248f4:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   248f6:	4b08      	ldr	r3, [pc, #32]	; (24918 <socketDeinit+0x40>)
   248f8:	2200      	movs	r2, #0
   248fa:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   248fc:	4b07      	ldr	r3, [pc, #28]	; (2491c <socketDeinit+0x44>)
   248fe:	2200      	movs	r2, #0
   24900:	701a      	strb	r2, [r3, #0]
}
   24902:	46c0      	nop			; (mov r8, r8)
   24904:	46bd      	mov	sp, r7
   24906:	bd80      	pop	{r7, pc}
   24908:	20005510 	.word	0x20005510
   2490c:	0001ffb9 	.word	0x0001ffb9
   24910:	00020cb5 	.word	0x00020cb5
   24914:	200055c0 	.word	0x200055c0
   24918:	200055c8 	.word	0x200055c8
   2491c:	20003e0c 	.word	0x20003e0c

00024920 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   24920:	b580      	push	{r7, lr}
   24922:	b082      	sub	sp, #8
   24924:	af00      	add	r7, sp, #0
   24926:	6078      	str	r0, [r7, #4]
   24928:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   2492a:	4b05      	ldr	r3, [pc, #20]	; (24940 <registerSocketCallback+0x20>)
   2492c:	687a      	ldr	r2, [r7, #4]
   2492e:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   24930:	4b04      	ldr	r3, [pc, #16]	; (24944 <registerSocketCallback+0x24>)
   24932:	683a      	ldr	r2, [r7, #0]
   24934:	601a      	str	r2, [r3, #0]
}
   24936:	46c0      	nop			; (mov r8, r8)
   24938:	46bd      	mov	sp, r7
   2493a:	b002      	add	sp, #8
   2493c:	bd80      	pop	{r7, pc}
   2493e:	46c0      	nop			; (mov r8, r8)
   24940:	200055c0 	.word	0x200055c0
   24944:	200055c8 	.word	0x200055c8

00024948 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   24948:	b590      	push	{r4, r7, lr}
   2494a:	b08d      	sub	sp, #52	; 0x34
   2494c:	af04      	add	r7, sp, #16
   2494e:	0004      	movs	r4, r0
   24950:	0008      	movs	r0, r1
   24952:	0011      	movs	r1, r2
   24954:	1dbb      	adds	r3, r7, #6
   24956:	1c22      	adds	r2, r4, #0
   24958:	801a      	strh	r2, [r3, #0]
   2495a:	1d7b      	adds	r3, r7, #5
   2495c:	1c02      	adds	r2, r0, #0
   2495e:	701a      	strb	r2, [r3, #0]
   24960:	1d3b      	adds	r3, r7, #4
   24962:	1c0a      	adds	r2, r1, #0
   24964:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   24966:	231f      	movs	r3, #31
   24968:	18fb      	adds	r3, r7, r3
   2496a:	22ff      	movs	r2, #255	; 0xff
   2496c:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   2496e:	1dbb      	adds	r3, r7, #6
   24970:	881b      	ldrh	r3, [r3, #0]
   24972:	2b02      	cmp	r3, #2
   24974:	d000      	beq.n	24978 <socket+0x30>
   24976:	e0ce      	b.n	24b16 <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   24978:	1d7b      	adds	r3, r7, #5
   2497a:	781b      	ldrb	r3, [r3, #0]
   2497c:	2b01      	cmp	r3, #1
   2497e:	d135      	bne.n	249ec <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   24980:	231e      	movs	r3, #30
   24982:	18fb      	adds	r3, r7, r3
   24984:	2200      	movs	r2, #0
   24986:	701a      	strb	r2, [r3, #0]
   24988:	e02a      	b.n	249e0 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   2498a:	2317      	movs	r3, #23
   2498c:	18fb      	adds	r3, r7, r3
   2498e:	4a66      	ldr	r2, [pc, #408]	; (24b28 <socket+0x1e0>)
   24990:	7812      	ldrb	r2, [r2, #0]
   24992:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   24994:	4b64      	ldr	r3, [pc, #400]	; (24b28 <socket+0x1e0>)
   24996:	781b      	ldrb	r3, [r3, #0]
   24998:	b2db      	uxtb	r3, r3
   2499a:	011a      	lsls	r2, r3, #4
   2499c:	4b63      	ldr	r3, [pc, #396]	; (24b2c <socket+0x1e4>)
   2499e:	18d3      	adds	r3, r2, r3
   249a0:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   249a2:	4b61      	ldr	r3, [pc, #388]	; (24b28 <socket+0x1e0>)
   249a4:	781b      	ldrb	r3, [r3, #0]
   249a6:	b2db      	uxtb	r3, r3
   249a8:	1c5a      	adds	r2, r3, #1
   249aa:	4b61      	ldr	r3, [pc, #388]	; (24b30 <socket+0x1e8>)
   249ac:	2107      	movs	r1, #7
   249ae:	0010      	movs	r0, r2
   249b0:	4798      	blx	r3
   249b2:	000b      	movs	r3, r1
   249b4:	b2da      	uxtb	r2, r3
   249b6:	4b5c      	ldr	r3, [pc, #368]	; (24b28 <socket+0x1e0>)
   249b8:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   249ba:	69bb      	ldr	r3, [r7, #24]
   249bc:	7a9b      	ldrb	r3, [r3, #10]
   249be:	b2db      	uxtb	r3, r3
   249c0:	2b00      	cmp	r3, #0
   249c2:	d106      	bne.n	249d2 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   249c4:	231f      	movs	r3, #31
   249c6:	18fb      	adds	r3, r7, r3
   249c8:	2217      	movs	r2, #23
   249ca:	18ba      	adds	r2, r7, r2
   249cc:	7812      	ldrb	r2, [r2, #0]
   249ce:	701a      	strb	r2, [r3, #0]
					break;
   249d0:	e04c      	b.n	24a6c <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   249d2:	231e      	movs	r3, #30
   249d4:	18fb      	adds	r3, r7, r3
   249d6:	781a      	ldrb	r2, [r3, #0]
   249d8:	231e      	movs	r3, #30
   249da:	18fb      	adds	r3, r7, r3
   249dc:	3201      	adds	r2, #1
   249de:	701a      	strb	r2, [r3, #0]
   249e0:	231e      	movs	r3, #30
   249e2:	18fb      	adds	r3, r7, r3
   249e4:	781b      	ldrb	r3, [r3, #0]
   249e6:	2b06      	cmp	r3, #6
   249e8:	d9cf      	bls.n	2498a <socket+0x42>
   249ea:	e03f      	b.n	24a6c <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   249ec:	1d7b      	adds	r3, r7, #5
   249ee:	781b      	ldrb	r3, [r3, #0]
   249f0:	2b02      	cmp	r3, #2
   249f2:	d13b      	bne.n	24a6c <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   249f4:	4b4f      	ldr	r3, [pc, #316]	; (24b34 <socket+0x1ec>)
   249f6:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   249f8:	231e      	movs	r3, #30
   249fa:	18fb      	adds	r3, r7, r3
   249fc:	2200      	movs	r2, #0
   249fe:	701a      	strb	r2, [r3, #0]
   24a00:	e02f      	b.n	24a62 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   24a02:	2317      	movs	r3, #23
   24a04:	18fb      	adds	r3, r7, r3
   24a06:	4a4c      	ldr	r2, [pc, #304]	; (24b38 <socket+0x1f0>)
   24a08:	7812      	ldrb	r2, [r2, #0]
   24a0a:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   24a0c:	4b4a      	ldr	r3, [pc, #296]	; (24b38 <socket+0x1f0>)
   24a0e:	781b      	ldrb	r3, [r3, #0]
   24a10:	b2db      	uxtb	r3, r3
   24a12:	011b      	lsls	r3, r3, #4
   24a14:	693a      	ldr	r2, [r7, #16]
   24a16:	18d3      	adds	r3, r2, r3
   24a18:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   24a1a:	4b47      	ldr	r3, [pc, #284]	; (24b38 <socket+0x1f0>)
   24a1c:	781b      	ldrb	r3, [r3, #0]
   24a1e:	b2db      	uxtb	r3, r3
   24a20:	3301      	adds	r3, #1
   24a22:	4a46      	ldr	r2, [pc, #280]	; (24b3c <socket+0x1f4>)
   24a24:	4013      	ands	r3, r2
   24a26:	d504      	bpl.n	24a32 <socket+0xea>
   24a28:	3b01      	subs	r3, #1
   24a2a:	2204      	movs	r2, #4
   24a2c:	4252      	negs	r2, r2
   24a2e:	4313      	orrs	r3, r2
   24a30:	3301      	adds	r3, #1
   24a32:	b2da      	uxtb	r2, r3
   24a34:	4b40      	ldr	r3, [pc, #256]	; (24b38 <socket+0x1f0>)
   24a36:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   24a38:	69bb      	ldr	r3, [r7, #24]
   24a3a:	7a9b      	ldrb	r3, [r3, #10]
   24a3c:	b2db      	uxtb	r3, r3
   24a3e:	2b00      	cmp	r3, #0
   24a40:	d108      	bne.n	24a54 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   24a42:	2317      	movs	r3, #23
   24a44:	18fb      	adds	r3, r7, r3
   24a46:	781b      	ldrb	r3, [r3, #0]
   24a48:	3307      	adds	r3, #7
   24a4a:	b2da      	uxtb	r2, r3
   24a4c:	231f      	movs	r3, #31
   24a4e:	18fb      	adds	r3, r7, r3
   24a50:	701a      	strb	r2, [r3, #0]
					break;
   24a52:	e00b      	b.n	24a6c <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   24a54:	231e      	movs	r3, #30
   24a56:	18fb      	adds	r3, r7, r3
   24a58:	781a      	ldrb	r2, [r3, #0]
   24a5a:	231e      	movs	r3, #30
   24a5c:	18fb      	adds	r3, r7, r3
   24a5e:	3201      	adds	r2, #1
   24a60:	701a      	strb	r2, [r3, #0]
   24a62:	231e      	movs	r3, #30
   24a64:	18fb      	adds	r3, r7, r3
   24a66:	781b      	ldrb	r3, [r3, #0]
   24a68:	2b03      	cmp	r3, #3
   24a6a:	d9ca      	bls.n	24a02 <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   24a6c:	231f      	movs	r3, #31
   24a6e:	18fb      	adds	r3, r7, r3
   24a70:	781b      	ldrb	r3, [r3, #0]
   24a72:	2b7f      	cmp	r3, #127	; 0x7f
   24a74:	d84f      	bhi.n	24b16 <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   24a76:	69bb      	ldr	r3, [r7, #24]
   24a78:	2210      	movs	r2, #16
   24a7a:	2100      	movs	r1, #0
   24a7c:	0018      	movs	r0, r3
   24a7e:	4b30      	ldr	r3, [pc, #192]	; (24b40 <socket+0x1f8>)
   24a80:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   24a82:	69bb      	ldr	r3, [r7, #24]
   24a84:	2201      	movs	r2, #1
   24a86:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   24a88:	4b2e      	ldr	r3, [pc, #184]	; (24b44 <socket+0x1fc>)
   24a8a:	881b      	ldrh	r3, [r3, #0]
   24a8c:	b29b      	uxth	r3, r3
   24a8e:	3301      	adds	r3, #1
   24a90:	b29a      	uxth	r2, r3
   24a92:	4b2c      	ldr	r3, [pc, #176]	; (24b44 <socket+0x1fc>)
   24a94:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   24a96:	4b2b      	ldr	r3, [pc, #172]	; (24b44 <socket+0x1fc>)
   24a98:	881b      	ldrh	r3, [r3, #0]
   24a9a:	b29b      	uxth	r3, r3
   24a9c:	2b00      	cmp	r3, #0
   24a9e:	d106      	bne.n	24aae <socket+0x166>
				++gu16SessionID;
   24aa0:	4b28      	ldr	r3, [pc, #160]	; (24b44 <socket+0x1fc>)
   24aa2:	881b      	ldrh	r3, [r3, #0]
   24aa4:	b29b      	uxth	r3, r3
   24aa6:	3301      	adds	r3, #1
   24aa8:	b29a      	uxth	r2, r3
   24aaa:	4b26      	ldr	r3, [pc, #152]	; (24b44 <socket+0x1fc>)
   24aac:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   24aae:	4b25      	ldr	r3, [pc, #148]	; (24b44 <socket+0x1fc>)
   24ab0:	881b      	ldrh	r3, [r3, #0]
   24ab2:	b29a      	uxth	r2, r3
   24ab4:	69bb      	ldr	r3, [r7, #24]
   24ab6:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   24ab8:	4b23      	ldr	r3, [pc, #140]	; (24b48 <socket+0x200>)
   24aba:	0018      	movs	r0, r3
   24abc:	4b23      	ldr	r3, [pc, #140]	; (24b4c <socket+0x204>)
   24abe:	4798      	blx	r3
   24ac0:	231f      	movs	r3, #31
   24ac2:	18fb      	adds	r3, r7, r3
   24ac4:	2100      	movs	r1, #0
   24ac6:	5659      	ldrsb	r1, [r3, r1]
   24ac8:	4b1e      	ldr	r3, [pc, #120]	; (24b44 <socket+0x1fc>)
   24aca:	881b      	ldrh	r3, [r3, #0]
   24acc:	b29b      	uxth	r3, r3
   24ace:	001a      	movs	r2, r3
   24ad0:	4b1f      	ldr	r3, [pc, #124]	; (24b50 <socket+0x208>)
   24ad2:	0018      	movs	r0, r3
   24ad4:	4b1d      	ldr	r3, [pc, #116]	; (24b4c <socket+0x204>)
   24ad6:	4798      	blx	r3
   24ad8:	4b1e      	ldr	r3, [pc, #120]	; (24b54 <socket+0x20c>)
   24ada:	0018      	movs	r0, r3
   24adc:	4b1b      	ldr	r3, [pc, #108]	; (24b4c <socket+0x204>)
   24ade:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   24ae0:	1d3b      	adds	r3, r7, #4
   24ae2:	781b      	ldrb	r3, [r3, #0]
   24ae4:	2201      	movs	r2, #1
   24ae6:	4013      	ands	r3, r2
   24ae8:	d015      	beq.n	24b16 <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   24aea:	230c      	movs	r3, #12
   24aec:	18fb      	adds	r3, r7, r3
   24aee:	221f      	movs	r2, #31
   24af0:	18ba      	adds	r2, r7, r2
   24af2:	7812      	ldrb	r2, [r2, #0]
   24af4:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   24af6:	69bb      	ldr	r3, [r7, #24]
   24af8:	2221      	movs	r2, #33	; 0x21
   24afa:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   24afc:	230c      	movs	r3, #12
   24afe:	18fa      	adds	r2, r7, r3
   24b00:	2300      	movs	r3, #0
   24b02:	9302      	str	r3, [sp, #8]
   24b04:	2300      	movs	r3, #0
   24b06:	9301      	str	r3, [sp, #4]
   24b08:	2300      	movs	r3, #0
   24b0a:	9300      	str	r3, [sp, #0]
   24b0c:	2304      	movs	r3, #4
   24b0e:	2150      	movs	r1, #80	; 0x50
   24b10:	2002      	movs	r0, #2
   24b12:	4c11      	ldr	r4, [pc, #68]	; (24b58 <socket+0x210>)
   24b14:	47a0      	blx	r4
			}
		}
	}
	return sock;
   24b16:	231f      	movs	r3, #31
   24b18:	18fb      	adds	r3, r7, r3
   24b1a:	781b      	ldrb	r3, [r3, #0]
   24b1c:	b25b      	sxtb	r3, r3
}
   24b1e:	0018      	movs	r0, r3
   24b20:	46bd      	mov	sp, r7
   24b22:	b009      	add	sp, #36	; 0x24
   24b24:	bd90      	pop	{r4, r7, pc}
   24b26:	46c0      	nop			; (mov r8, r8)
   24b28:	20003e0d 	.word	0x20003e0d
   24b2c:	20005510 	.word	0x20005510
   24b30:	00032025 	.word	0x00032025
   24b34:	20005580 	.word	0x20005580
   24b38:	20003e0e 	.word	0x20003e0e
   24b3c:	80000003 	.word	0x80000003
   24b40:	0001ffb9 	.word	0x0001ffb9
   24b44:	20003e0a 	.word	0x20003e0a
   24b48:	00038220 	.word	0x00038220
   24b4c:	0001d28d 	.word	0x0001d28d
   24b50:	00038244 	.word	0x00038244
   24b54:	00038240 	.word	0x00038240
   24b58:	00020219 	.word	0x00020219

00024b5c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   24b5c:	b5b0      	push	{r4, r5, r7, lr}
   24b5e:	b08a      	sub	sp, #40	; 0x28
   24b60:	af04      	add	r7, sp, #16
   24b62:	6039      	str	r1, [r7, #0]
   24b64:	0011      	movs	r1, r2
   24b66:	1dfb      	adds	r3, r7, #7
   24b68:	1c02      	adds	r2, r0, #0
   24b6a:	701a      	strb	r2, [r3, #0]
   24b6c:	1dbb      	adds	r3, r7, #6
   24b6e:	1c0a      	adds	r2, r1, #0
   24b70:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   24b72:	2317      	movs	r3, #23
   24b74:	18fb      	adds	r3, r7, r3
   24b76:	22fa      	movs	r2, #250	; 0xfa
   24b78:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   24b7a:	1dfb      	adds	r3, r7, #7
   24b7c:	781b      	ldrb	r3, [r3, #0]
   24b7e:	2b7f      	cmp	r3, #127	; 0x7f
   24b80:	d867      	bhi.n	24c52 <connect+0xf6>
   24b82:	683b      	ldr	r3, [r7, #0]
   24b84:	2b00      	cmp	r3, #0
   24b86:	d064      	beq.n	24c52 <connect+0xf6>
   24b88:	1dfb      	adds	r3, r7, #7
   24b8a:	781b      	ldrb	r3, [r3, #0]
   24b8c:	b25b      	sxtb	r3, r3
   24b8e:	4a35      	ldr	r2, [pc, #212]	; (24c64 <connect+0x108>)
   24b90:	011b      	lsls	r3, r3, #4
   24b92:	18d3      	adds	r3, r2, r3
   24b94:	330a      	adds	r3, #10
   24b96:	781b      	ldrb	r3, [r3, #0]
   24b98:	b2db      	uxtb	r3, r3
   24b9a:	2b01      	cmp	r3, #1
   24b9c:	d159      	bne.n	24c52 <connect+0xf6>
   24b9e:	1dbb      	adds	r3, r7, #6
   24ba0:	781b      	ldrb	r3, [r3, #0]
   24ba2:	2b00      	cmp	r3, #0
   24ba4:	d055      	beq.n	24c52 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   24ba6:	2316      	movs	r3, #22
   24ba8:	18fb      	adds	r3, r7, r3
   24baa:	2244      	movs	r2, #68	; 0x44
   24bac:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   24bae:	1dfb      	adds	r3, r7, #7
   24bb0:	781b      	ldrb	r3, [r3, #0]
   24bb2:	b25b      	sxtb	r3, r3
   24bb4:	4a2b      	ldr	r2, [pc, #172]	; (24c64 <connect+0x108>)
   24bb6:	011b      	lsls	r3, r3, #4
   24bb8:	18d3      	adds	r3, r2, r3
   24bba:	330b      	adds	r3, #11
   24bbc:	781b      	ldrb	r3, [r3, #0]
   24bbe:	b2db      	uxtb	r3, r3
   24bc0:	001a      	movs	r2, r3
   24bc2:	2301      	movs	r3, #1
   24bc4:	4013      	ands	r3, r2
   24bc6:	d00f      	beq.n	24be8 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   24bc8:	2316      	movs	r3, #22
   24bca:	18fb      	adds	r3, r7, r3
   24bcc:	224b      	movs	r2, #75	; 0x4b
   24bce:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   24bd0:	1dfb      	adds	r3, r7, #7
   24bd2:	781b      	ldrb	r3, [r3, #0]
   24bd4:	b25b      	sxtb	r3, r3
   24bd6:	4a23      	ldr	r2, [pc, #140]	; (24c64 <connect+0x108>)
   24bd8:	011b      	lsls	r3, r3, #4
   24bda:	18d3      	adds	r3, r2, r3
   24bdc:	330b      	adds	r3, #11
   24bde:	781b      	ldrb	r3, [r3, #0]
   24be0:	b2da      	uxtb	r2, r3
   24be2:	2308      	movs	r3, #8
   24be4:	18fb      	adds	r3, r7, r3
   24be6:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   24be8:	2308      	movs	r3, #8
   24bea:	18fb      	adds	r3, r7, r3
   24bec:	1dfa      	adds	r2, r7, #7
   24bee:	7812      	ldrb	r2, [r2, #0]
   24bf0:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   24bf2:	6839      	ldr	r1, [r7, #0]
   24bf4:	2308      	movs	r3, #8
   24bf6:	18fb      	adds	r3, r7, r3
   24bf8:	2208      	movs	r2, #8
   24bfa:	0018      	movs	r0, r3
   24bfc:	4b1a      	ldr	r3, [pc, #104]	; (24c68 <connect+0x10c>)
   24bfe:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   24c00:	1dfb      	adds	r3, r7, #7
   24c02:	781b      	ldrb	r3, [r3, #0]
   24c04:	b25b      	sxtb	r3, r3
   24c06:	4a17      	ldr	r2, [pc, #92]	; (24c64 <connect+0x108>)
   24c08:	011b      	lsls	r3, r3, #4
   24c0a:	18d3      	adds	r3, r2, r3
   24c0c:	3306      	adds	r3, #6
   24c0e:	881b      	ldrh	r3, [r3, #0]
   24c10:	b29a      	uxth	r2, r3
   24c12:	2308      	movs	r3, #8
   24c14:	18fb      	adds	r3, r7, r3
   24c16:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   24c18:	2317      	movs	r3, #23
   24c1a:	18fc      	adds	r4, r7, r3
   24c1c:	2308      	movs	r3, #8
   24c1e:	18fa      	adds	r2, r7, r3
   24c20:	2316      	movs	r3, #22
   24c22:	18fb      	adds	r3, r7, r3
   24c24:	7819      	ldrb	r1, [r3, #0]
   24c26:	2300      	movs	r3, #0
   24c28:	9302      	str	r3, [sp, #8]
   24c2a:	2300      	movs	r3, #0
   24c2c:	9301      	str	r3, [sp, #4]
   24c2e:	2300      	movs	r3, #0
   24c30:	9300      	str	r3, [sp, #0]
   24c32:	230c      	movs	r3, #12
   24c34:	2002      	movs	r0, #2
   24c36:	4d0d      	ldr	r5, [pc, #52]	; (24c6c <connect+0x110>)
   24c38:	47a8      	blx	r5
   24c3a:	0003      	movs	r3, r0
   24c3c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   24c3e:	2317      	movs	r3, #23
   24c40:	18fb      	adds	r3, r7, r3
   24c42:	781b      	ldrb	r3, [r3, #0]
   24c44:	b25b      	sxtb	r3, r3
   24c46:	2b00      	cmp	r3, #0
   24c48:	d003      	beq.n	24c52 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   24c4a:	2317      	movs	r3, #23
   24c4c:	18fb      	adds	r3, r7, r3
   24c4e:	22f7      	movs	r2, #247	; 0xf7
   24c50:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   24c52:	2317      	movs	r3, #23
   24c54:	18fb      	adds	r3, r7, r3
   24c56:	781b      	ldrb	r3, [r3, #0]
   24c58:	b25b      	sxtb	r3, r3
}
   24c5a:	0018      	movs	r0, r3
   24c5c:	46bd      	mov	sp, r7
   24c5e:	b006      	add	sp, #24
   24c60:	bdb0      	pop	{r4, r5, r7, pc}
   24c62:	46c0      	nop			; (mov r8, r8)
   24c64:	20005510 	.word	0x20005510
   24c68:	0001ff7d 	.word	0x0001ff7d
   24c6c:	00020219 	.word	0x00020219

00024c70 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   24c70:	b590      	push	{r4, r7, lr}
   24c72:	b08f      	sub	sp, #60	; 0x3c
   24c74:	af04      	add	r7, sp, #16
   24c76:	0004      	movs	r4, r0
   24c78:	60b9      	str	r1, [r7, #8]
   24c7a:	0010      	movs	r0, r2
   24c7c:	0019      	movs	r1, r3
   24c7e:	230f      	movs	r3, #15
   24c80:	18fb      	adds	r3, r7, r3
   24c82:	1c22      	adds	r2, r4, #0
   24c84:	701a      	strb	r2, [r3, #0]
   24c86:	230c      	movs	r3, #12
   24c88:	18fb      	adds	r3, r7, r3
   24c8a:	1c02      	adds	r2, r0, #0
   24c8c:	801a      	strh	r2, [r3, #0]
   24c8e:	1dbb      	adds	r3, r7, #6
   24c90:	1c0a      	adds	r2, r1, #0
   24c92:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   24c94:	2326      	movs	r3, #38	; 0x26
   24c96:	18fb      	adds	r3, r7, r3
   24c98:	2206      	movs	r2, #6
   24c9a:	4252      	negs	r2, r2
   24c9c:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   24c9e:	230f      	movs	r3, #15
   24ca0:	18fb      	adds	r3, r7, r3
   24ca2:	781b      	ldrb	r3, [r3, #0]
   24ca4:	2b7f      	cmp	r3, #127	; 0x7f
   24ca6:	d900      	bls.n	24caa <send+0x3a>
   24ca8:	e087      	b.n	24dba <send+0x14a>
   24caa:	68bb      	ldr	r3, [r7, #8]
   24cac:	2b00      	cmp	r3, #0
   24cae:	d100      	bne.n	24cb2 <send+0x42>
   24cb0:	e083      	b.n	24dba <send+0x14a>
   24cb2:	230c      	movs	r3, #12
   24cb4:	18fb      	adds	r3, r7, r3
   24cb6:	881a      	ldrh	r2, [r3, #0]
   24cb8:	23af      	movs	r3, #175	; 0xaf
   24cba:	00db      	lsls	r3, r3, #3
   24cbc:	429a      	cmp	r2, r3
   24cbe:	d900      	bls.n	24cc2 <send+0x52>
   24cc0:	e07b      	b.n	24dba <send+0x14a>
   24cc2:	230f      	movs	r3, #15
   24cc4:	18fb      	adds	r3, r7, r3
   24cc6:	781b      	ldrb	r3, [r3, #0]
   24cc8:	b25b      	sxtb	r3, r3
   24cca:	4a40      	ldr	r2, [pc, #256]	; (24dcc <send+0x15c>)
   24ccc:	011b      	lsls	r3, r3, #4
   24cce:	18d3      	adds	r3, r2, r3
   24cd0:	330a      	adds	r3, #10
   24cd2:	781b      	ldrb	r3, [r3, #0]
   24cd4:	b2db      	uxtb	r3, r3
   24cd6:	2b01      	cmp	r3, #1
   24cd8:	d16f      	bne.n	24dba <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   24cda:	2323      	movs	r3, #35	; 0x23
   24cdc:	18fb      	adds	r3, r7, r3
   24cde:	2245      	movs	r2, #69	; 0x45
   24ce0:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   24ce2:	2324      	movs	r3, #36	; 0x24
   24ce4:	18fb      	adds	r3, r7, r3
   24ce6:	2250      	movs	r2, #80	; 0x50
   24ce8:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   24cea:	2310      	movs	r3, #16
   24cec:	18fb      	adds	r3, r7, r3
   24cee:	220f      	movs	r2, #15
   24cf0:	18ba      	adds	r2, r7, r2
   24cf2:	7812      	ldrb	r2, [r2, #0]
   24cf4:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   24cf6:	2310      	movs	r3, #16
   24cf8:	18fb      	adds	r3, r7, r3
   24cfa:	220c      	movs	r2, #12
   24cfc:	18ba      	adds	r2, r7, r2
   24cfe:	8812      	ldrh	r2, [r2, #0]
   24d00:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   24d02:	230f      	movs	r3, #15
   24d04:	18fb      	adds	r3, r7, r3
   24d06:	781b      	ldrb	r3, [r3, #0]
   24d08:	b25b      	sxtb	r3, r3
   24d0a:	4a30      	ldr	r2, [pc, #192]	; (24dcc <send+0x15c>)
   24d0c:	011b      	lsls	r3, r3, #4
   24d0e:	18d3      	adds	r3, r2, r3
   24d10:	3306      	adds	r3, #6
   24d12:	881b      	ldrh	r3, [r3, #0]
   24d14:	b29a      	uxth	r2, r3
   24d16:	2310      	movs	r3, #16
   24d18:	18fb      	adds	r3, r7, r3
   24d1a:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   24d1c:	230f      	movs	r3, #15
   24d1e:	18fb      	adds	r3, r7, r3
   24d20:	781b      	ldrb	r3, [r3, #0]
   24d22:	b25b      	sxtb	r3, r3
   24d24:	2b06      	cmp	r3, #6
   24d26:	dd03      	ble.n	24d30 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   24d28:	2324      	movs	r3, #36	; 0x24
   24d2a:	18fb      	adds	r3, r7, r3
   24d2c:	2244      	movs	r2, #68	; 0x44
   24d2e:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   24d30:	230f      	movs	r3, #15
   24d32:	18fb      	adds	r3, r7, r3
   24d34:	781b      	ldrb	r3, [r3, #0]
   24d36:	b25b      	sxtb	r3, r3
   24d38:	4a24      	ldr	r2, [pc, #144]	; (24dcc <send+0x15c>)
   24d3a:	011b      	lsls	r3, r3, #4
   24d3c:	18d3      	adds	r3, r2, r3
   24d3e:	330b      	adds	r3, #11
   24d40:	781b      	ldrb	r3, [r3, #0]
   24d42:	b2db      	uxtb	r3, r3
   24d44:	001a      	movs	r2, r3
   24d46:	2301      	movs	r3, #1
   24d48:	4013      	ands	r3, r2
   24d4a:	d00f      	beq.n	24d6c <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   24d4c:	2323      	movs	r3, #35	; 0x23
   24d4e:	18fb      	adds	r3, r7, r3
   24d50:	224c      	movs	r2, #76	; 0x4c
   24d52:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   24d54:	230f      	movs	r3, #15
   24d56:	18fb      	adds	r3, r7, r3
   24d58:	2200      	movs	r2, #0
   24d5a:	569a      	ldrsb	r2, [r3, r2]
   24d5c:	2324      	movs	r3, #36	; 0x24
   24d5e:	18fb      	adds	r3, r7, r3
   24d60:	491a      	ldr	r1, [pc, #104]	; (24dcc <send+0x15c>)
   24d62:	0112      	lsls	r2, r2, #4
   24d64:	188a      	adds	r2, r1, r2
   24d66:	3208      	adds	r2, #8
   24d68:	8812      	ldrh	r2, [r2, #0]
   24d6a:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   24d6c:	2323      	movs	r3, #35	; 0x23
   24d6e:	18fb      	adds	r3, r7, r3
   24d70:	781b      	ldrb	r3, [r3, #0]
   24d72:	2280      	movs	r2, #128	; 0x80
   24d74:	4252      	negs	r2, r2
   24d76:	4313      	orrs	r3, r2
   24d78:	b2d9      	uxtb	r1, r3
   24d7a:	2310      	movs	r3, #16
   24d7c:	18fa      	adds	r2, r7, r3
   24d7e:	2324      	movs	r3, #36	; 0x24
   24d80:	18fb      	adds	r3, r7, r3
   24d82:	881b      	ldrh	r3, [r3, #0]
   24d84:	9302      	str	r3, [sp, #8]
   24d86:	230c      	movs	r3, #12
   24d88:	18fb      	adds	r3, r7, r3
   24d8a:	881b      	ldrh	r3, [r3, #0]
   24d8c:	9301      	str	r3, [sp, #4]
   24d8e:	68bb      	ldr	r3, [r7, #8]
   24d90:	9300      	str	r3, [sp, #0]
   24d92:	2310      	movs	r3, #16
   24d94:	2002      	movs	r0, #2
   24d96:	4c0e      	ldr	r4, [pc, #56]	; (24dd0 <send+0x160>)
   24d98:	47a0      	blx	r4
   24d9a:	0003      	movs	r3, r0
   24d9c:	001a      	movs	r2, r3
   24d9e:	2326      	movs	r3, #38	; 0x26
   24da0:	18fb      	adds	r3, r7, r3
   24da2:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   24da4:	2326      	movs	r3, #38	; 0x26
   24da6:	18fb      	adds	r3, r7, r3
   24da8:	2200      	movs	r2, #0
   24daa:	5e9b      	ldrsh	r3, [r3, r2]
   24dac:	2b00      	cmp	r3, #0
   24dae:	d004      	beq.n	24dba <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   24db0:	2326      	movs	r3, #38	; 0x26
   24db2:	18fb      	adds	r3, r7, r3
   24db4:	220e      	movs	r2, #14
   24db6:	4252      	negs	r2, r2
   24db8:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   24dba:	2326      	movs	r3, #38	; 0x26
   24dbc:	18fb      	adds	r3, r7, r3
   24dbe:	2200      	movs	r2, #0
   24dc0:	5e9b      	ldrsh	r3, [r3, r2]
}
   24dc2:	0018      	movs	r0, r3
   24dc4:	46bd      	mov	sp, r7
   24dc6:	b00b      	add	sp, #44	; 0x2c
   24dc8:	bd90      	pop	{r4, r7, pc}
   24dca:	46c0      	nop			; (mov r8, r8)
   24dcc:	20005510 	.word	0x20005510
   24dd0:	00020219 	.word	0x00020219

00024dd4 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   24dd4:	b590      	push	{r4, r7, lr}
   24dd6:	b08d      	sub	sp, #52	; 0x34
   24dd8:	af04      	add	r7, sp, #16
   24dda:	60b9      	str	r1, [r7, #8]
   24ddc:	0011      	movs	r1, r2
   24dde:	607b      	str	r3, [r7, #4]
   24de0:	230f      	movs	r3, #15
   24de2:	18fb      	adds	r3, r7, r3
   24de4:	1c02      	adds	r2, r0, #0
   24de6:	701a      	strb	r2, [r3, #0]
   24de8:	230c      	movs	r3, #12
   24dea:	18fb      	adds	r3, r7, r3
   24dec:	1c0a      	adds	r2, r1, #0
   24dee:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   24df0:	231e      	movs	r3, #30
   24df2:	18fb      	adds	r3, r7, r3
   24df4:	2206      	movs	r2, #6
   24df6:	4252      	negs	r2, r2
   24df8:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   24dfa:	230f      	movs	r3, #15
   24dfc:	18fb      	adds	r3, r7, r3
   24dfe:	781b      	ldrb	r3, [r3, #0]
   24e00:	2b7f      	cmp	r3, #127	; 0x7f
   24e02:	d900      	bls.n	24e06 <recv+0x32>
   24e04:	e099      	b.n	24f3a <recv+0x166>
   24e06:	68bb      	ldr	r3, [r7, #8]
   24e08:	2b00      	cmp	r3, #0
   24e0a:	d100      	bne.n	24e0e <recv+0x3a>
   24e0c:	e095      	b.n	24f3a <recv+0x166>
   24e0e:	230c      	movs	r3, #12
   24e10:	18fb      	adds	r3, r7, r3
   24e12:	881b      	ldrh	r3, [r3, #0]
   24e14:	2b00      	cmp	r3, #0
   24e16:	d100      	bne.n	24e1a <recv+0x46>
   24e18:	e08f      	b.n	24f3a <recv+0x166>
   24e1a:	230f      	movs	r3, #15
   24e1c:	18fb      	adds	r3, r7, r3
   24e1e:	781b      	ldrb	r3, [r3, #0]
   24e20:	b25b      	sxtb	r3, r3
   24e22:	4a4a      	ldr	r2, [pc, #296]	; (24f4c <recv+0x178>)
   24e24:	011b      	lsls	r3, r3, #4
   24e26:	18d3      	adds	r3, r2, r3
   24e28:	330a      	adds	r3, #10
   24e2a:	781b      	ldrb	r3, [r3, #0]
   24e2c:	b2db      	uxtb	r3, r3
   24e2e:	2b01      	cmp	r3, #1
   24e30:	d000      	beq.n	24e34 <recv+0x60>
   24e32:	e082      	b.n	24f3a <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   24e34:	231e      	movs	r3, #30
   24e36:	18fb      	adds	r3, r7, r3
   24e38:	2200      	movs	r2, #0
   24e3a:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   24e3c:	230f      	movs	r3, #15
   24e3e:	18fb      	adds	r3, r7, r3
   24e40:	2200      	movs	r2, #0
   24e42:	569a      	ldrsb	r2, [r3, r2]
   24e44:	4b41      	ldr	r3, [pc, #260]	; (24f4c <recv+0x178>)
   24e46:	0112      	lsls	r2, r2, #4
   24e48:	68b9      	ldr	r1, [r7, #8]
   24e4a:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   24e4c:	230f      	movs	r3, #15
   24e4e:	18fb      	adds	r3, r7, r3
   24e50:	781b      	ldrb	r3, [r3, #0]
   24e52:	b25b      	sxtb	r3, r3
   24e54:	4a3d      	ldr	r2, [pc, #244]	; (24f4c <recv+0x178>)
   24e56:	011b      	lsls	r3, r3, #4
   24e58:	18d3      	adds	r3, r2, r3
   24e5a:	3304      	adds	r3, #4
   24e5c:	220c      	movs	r2, #12
   24e5e:	18ba      	adds	r2, r7, r2
   24e60:	8812      	ldrh	r2, [r2, #0]
   24e62:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   24e64:	230f      	movs	r3, #15
   24e66:	18fb      	adds	r3, r7, r3
   24e68:	781b      	ldrb	r3, [r3, #0]
   24e6a:	b25b      	sxtb	r3, r3
   24e6c:	4a37      	ldr	r2, [pc, #220]	; (24f4c <recv+0x178>)
   24e6e:	011b      	lsls	r3, r3, #4
   24e70:	18d3      	adds	r3, r2, r3
   24e72:	330c      	adds	r3, #12
   24e74:	781b      	ldrb	r3, [r3, #0]
   24e76:	b2db      	uxtb	r3, r3
   24e78:	2b00      	cmp	r3, #0
   24e7a:	d15e      	bne.n	24f3a <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   24e7c:	231d      	movs	r3, #29
   24e7e:	18fb      	adds	r3, r7, r3
   24e80:	2246      	movs	r2, #70	; 0x46
   24e82:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   24e84:	230f      	movs	r3, #15
   24e86:	18fb      	adds	r3, r7, r3
   24e88:	781b      	ldrb	r3, [r3, #0]
   24e8a:	b25b      	sxtb	r3, r3
   24e8c:	4a2f      	ldr	r2, [pc, #188]	; (24f4c <recv+0x178>)
   24e8e:	011b      	lsls	r3, r3, #4
   24e90:	18d3      	adds	r3, r2, r3
   24e92:	330c      	adds	r3, #12
   24e94:	2201      	movs	r2, #1
   24e96:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   24e98:	230f      	movs	r3, #15
   24e9a:	18fb      	adds	r3, r7, r3
   24e9c:	781b      	ldrb	r3, [r3, #0]
   24e9e:	b25b      	sxtb	r3, r3
   24ea0:	4a2a      	ldr	r2, [pc, #168]	; (24f4c <recv+0x178>)
   24ea2:	011b      	lsls	r3, r3, #4
   24ea4:	18d3      	adds	r3, r2, r3
   24ea6:	330b      	adds	r3, #11
   24ea8:	781b      	ldrb	r3, [r3, #0]
   24eaa:	b2db      	uxtb	r3, r3
   24eac:	001a      	movs	r2, r3
   24eae:	2301      	movs	r3, #1
   24eb0:	4013      	ands	r3, r2
   24eb2:	d003      	beq.n	24ebc <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   24eb4:	231d      	movs	r3, #29
   24eb6:	18fb      	adds	r3, r7, r3
   24eb8:	224d      	movs	r2, #77	; 0x4d
   24eba:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   24ebc:	687b      	ldr	r3, [r7, #4]
   24ebe:	2b00      	cmp	r3, #0
   24ec0:	d105      	bne.n	24ece <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   24ec2:	2314      	movs	r3, #20
   24ec4:	18fb      	adds	r3, r7, r3
   24ec6:	2201      	movs	r2, #1
   24ec8:	4252      	negs	r2, r2
   24eca:	601a      	str	r2, [r3, #0]
   24ecc:	e003      	b.n	24ed6 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   24ece:	2314      	movs	r3, #20
   24ed0:	18fb      	adds	r3, r7, r3
   24ed2:	687a      	ldr	r2, [r7, #4]
   24ed4:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   24ed6:	2314      	movs	r3, #20
   24ed8:	18fb      	adds	r3, r7, r3
   24eda:	220f      	movs	r2, #15
   24edc:	18ba      	adds	r2, r7, r2
   24ede:	7812      	ldrb	r2, [r2, #0]
   24ee0:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   24ee2:	230f      	movs	r3, #15
   24ee4:	18fb      	adds	r3, r7, r3
   24ee6:	781b      	ldrb	r3, [r3, #0]
   24ee8:	b25b      	sxtb	r3, r3
   24eea:	4a18      	ldr	r2, [pc, #96]	; (24f4c <recv+0x178>)
   24eec:	011b      	lsls	r3, r3, #4
   24eee:	18d3      	adds	r3, r2, r3
   24ef0:	3306      	adds	r3, #6
   24ef2:	881b      	ldrh	r3, [r3, #0]
   24ef4:	b29a      	uxth	r2, r3
   24ef6:	2314      	movs	r3, #20
   24ef8:	18fb      	adds	r3, r7, r3
   24efa:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   24efc:	2314      	movs	r3, #20
   24efe:	18fa      	adds	r2, r7, r3
   24f00:	231d      	movs	r3, #29
   24f02:	18fb      	adds	r3, r7, r3
   24f04:	7819      	ldrb	r1, [r3, #0]
   24f06:	2300      	movs	r3, #0
   24f08:	9302      	str	r3, [sp, #8]
   24f0a:	2300      	movs	r3, #0
   24f0c:	9301      	str	r3, [sp, #4]
   24f0e:	2300      	movs	r3, #0
   24f10:	9300      	str	r3, [sp, #0]
   24f12:	2308      	movs	r3, #8
   24f14:	2002      	movs	r0, #2
   24f16:	4c0e      	ldr	r4, [pc, #56]	; (24f50 <recv+0x17c>)
   24f18:	47a0      	blx	r4
   24f1a:	0003      	movs	r3, r0
   24f1c:	001a      	movs	r2, r3
   24f1e:	231e      	movs	r3, #30
   24f20:	18fb      	adds	r3, r7, r3
   24f22:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   24f24:	231e      	movs	r3, #30
   24f26:	18fb      	adds	r3, r7, r3
   24f28:	2200      	movs	r2, #0
   24f2a:	5e9b      	ldrsh	r3, [r3, r2]
   24f2c:	2b00      	cmp	r3, #0
   24f2e:	d004      	beq.n	24f3a <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   24f30:	231e      	movs	r3, #30
   24f32:	18fb      	adds	r3, r7, r3
   24f34:	220e      	movs	r2, #14
   24f36:	4252      	negs	r2, r2
   24f38:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   24f3a:	231e      	movs	r3, #30
   24f3c:	18fb      	adds	r3, r7, r3
   24f3e:	2200      	movs	r2, #0
   24f40:	5e9b      	ldrsh	r3, [r3, r2]
}
   24f42:	0018      	movs	r0, r3
   24f44:	46bd      	mov	sp, r7
   24f46:	b009      	add	sp, #36	; 0x24
   24f48:	bd90      	pop	{r4, r7, pc}
   24f4a:	46c0      	nop			; (mov r8, r8)
   24f4c:	20005510 	.word	0x20005510
   24f50:	00020219 	.word	0x00020219

00024f54 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   24f54:	b5b0      	push	{r4, r5, r7, lr}
   24f56:	b088      	sub	sp, #32
   24f58:	af04      	add	r7, sp, #16
   24f5a:	0002      	movs	r2, r0
   24f5c:	1dfb      	adds	r3, r7, #7
   24f5e:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   24f60:	230f      	movs	r3, #15
   24f62:	18fb      	adds	r3, r7, r3
   24f64:	22fa      	movs	r2, #250	; 0xfa
   24f66:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   24f68:	4b43      	ldr	r3, [pc, #268]	; (25078 <close+0x124>)
   24f6a:	0018      	movs	r0, r3
   24f6c:	4b43      	ldr	r3, [pc, #268]	; (2507c <close+0x128>)
   24f6e:	4798      	blx	r3
   24f70:	1dfb      	adds	r3, r7, #7
   24f72:	2200      	movs	r2, #0
   24f74:	569a      	ldrsb	r2, [r3, r2]
   24f76:	4b42      	ldr	r3, [pc, #264]	; (25080 <close+0x12c>)
   24f78:	0011      	movs	r1, r2
   24f7a:	0018      	movs	r0, r3
   24f7c:	4b3f      	ldr	r3, [pc, #252]	; (2507c <close+0x128>)
   24f7e:	4798      	blx	r3
   24f80:	4b40      	ldr	r3, [pc, #256]	; (25084 <close+0x130>)
   24f82:	0018      	movs	r0, r3
   24f84:	4b3d      	ldr	r3, [pc, #244]	; (2507c <close+0x128>)
   24f86:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   24f88:	1dfb      	adds	r3, r7, #7
   24f8a:	781b      	ldrb	r3, [r3, #0]
   24f8c:	2b7f      	cmp	r3, #127	; 0x7f
   24f8e:	d86a      	bhi.n	25066 <close+0x112>
   24f90:	1dfb      	adds	r3, r7, #7
   24f92:	781b      	ldrb	r3, [r3, #0]
   24f94:	b25b      	sxtb	r3, r3
   24f96:	4a3c      	ldr	r2, [pc, #240]	; (25088 <close+0x134>)
   24f98:	011b      	lsls	r3, r3, #4
   24f9a:	18d3      	adds	r3, r2, r3
   24f9c:	330a      	adds	r3, #10
   24f9e:	781b      	ldrb	r3, [r3, #0]
   24fa0:	b2db      	uxtb	r3, r3
   24fa2:	2b01      	cmp	r3, #1
   24fa4:	d15f      	bne.n	25066 <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   24fa6:	230e      	movs	r3, #14
   24fa8:	18fb      	adds	r3, r7, r3
   24faa:	2249      	movs	r2, #73	; 0x49
   24fac:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   24fae:	2308      	movs	r3, #8
   24fb0:	18fb      	adds	r3, r7, r3
   24fb2:	1dfa      	adds	r2, r7, #7
   24fb4:	7812      	ldrb	r2, [r2, #0]
   24fb6:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   24fb8:	1dfb      	adds	r3, r7, #7
   24fba:	781b      	ldrb	r3, [r3, #0]
   24fbc:	b25b      	sxtb	r3, r3
   24fbe:	4a32      	ldr	r2, [pc, #200]	; (25088 <close+0x134>)
   24fc0:	011b      	lsls	r3, r3, #4
   24fc2:	18d3      	adds	r3, r2, r3
   24fc4:	3306      	adds	r3, #6
   24fc6:	881b      	ldrh	r3, [r3, #0]
   24fc8:	b29a      	uxth	r2, r3
   24fca:	2308      	movs	r3, #8
   24fcc:	18fb      	adds	r3, r7, r3
   24fce:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   24fd0:	1dfb      	adds	r3, r7, #7
   24fd2:	781b      	ldrb	r3, [r3, #0]
   24fd4:	b25b      	sxtb	r3, r3
   24fd6:	4a2c      	ldr	r2, [pc, #176]	; (25088 <close+0x134>)
   24fd8:	011b      	lsls	r3, r3, #4
   24fda:	18d3      	adds	r3, r2, r3
   24fdc:	330a      	adds	r3, #10
   24fde:	2200      	movs	r2, #0
   24fe0:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   24fe2:	1dfb      	adds	r3, r7, #7
   24fe4:	781b      	ldrb	r3, [r3, #0]
   24fe6:	b25b      	sxtb	r3, r3
   24fe8:	4a27      	ldr	r2, [pc, #156]	; (25088 <close+0x134>)
   24fea:	011b      	lsls	r3, r3, #4
   24fec:	18d3      	adds	r3, r2, r3
   24fee:	3306      	adds	r3, #6
   24ff0:	2200      	movs	r2, #0
   24ff2:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   24ff4:	1dfb      	adds	r3, r7, #7
   24ff6:	781b      	ldrb	r3, [r3, #0]
   24ff8:	b25b      	sxtb	r3, r3
   24ffa:	4a23      	ldr	r2, [pc, #140]	; (25088 <close+0x134>)
   24ffc:	011b      	lsls	r3, r3, #4
   24ffe:	18d3      	adds	r3, r2, r3
   25000:	330b      	adds	r3, #11
   25002:	781b      	ldrb	r3, [r3, #0]
   25004:	b2db      	uxtb	r3, r3
   25006:	001a      	movs	r2, r3
   25008:	2301      	movs	r3, #1
   2500a:	4013      	ands	r3, r2
   2500c:	d003      	beq.n	25016 <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   2500e:	230e      	movs	r3, #14
   25010:	18fb      	adds	r3, r7, r3
   25012:	224e      	movs	r2, #78	; 0x4e
   25014:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   25016:	230f      	movs	r3, #15
   25018:	18fc      	adds	r4, r7, r3
   2501a:	2308      	movs	r3, #8
   2501c:	18fa      	adds	r2, r7, r3
   2501e:	230e      	movs	r3, #14
   25020:	18fb      	adds	r3, r7, r3
   25022:	7819      	ldrb	r1, [r3, #0]
   25024:	2300      	movs	r3, #0
   25026:	9302      	str	r3, [sp, #8]
   25028:	2300      	movs	r3, #0
   2502a:	9301      	str	r3, [sp, #4]
   2502c:	2300      	movs	r3, #0
   2502e:	9300      	str	r3, [sp, #0]
   25030:	2304      	movs	r3, #4
   25032:	2002      	movs	r0, #2
   25034:	4d15      	ldr	r5, [pc, #84]	; (2508c <close+0x138>)
   25036:	47a8      	blx	r5
   25038:	0003      	movs	r3, r0
   2503a:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   2503c:	230f      	movs	r3, #15
   2503e:	18fb      	adds	r3, r7, r3
   25040:	781b      	ldrb	r3, [r3, #0]
   25042:	b25b      	sxtb	r3, r3
   25044:	2b00      	cmp	r3, #0
   25046:	d003      	beq.n	25050 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   25048:	230f      	movs	r3, #15
   2504a:	18fb      	adds	r3, r7, r3
   2504c:	22f7      	movs	r2, #247	; 0xf7
   2504e:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   25050:	1dfb      	adds	r3, r7, #7
   25052:	781b      	ldrb	r3, [r3, #0]
   25054:	b25b      	sxtb	r3, r3
   25056:	011a      	lsls	r2, r3, #4
   25058:	4b0b      	ldr	r3, [pc, #44]	; (25088 <close+0x134>)
   2505a:	18d3      	adds	r3, r2, r3
   2505c:	2210      	movs	r2, #16
   2505e:	2100      	movs	r1, #0
   25060:	0018      	movs	r0, r3
   25062:	4b0b      	ldr	r3, [pc, #44]	; (25090 <close+0x13c>)
   25064:	4798      	blx	r3
	}
	return s8Ret;
   25066:	230f      	movs	r3, #15
   25068:	18fb      	adds	r3, r7, r3
   2506a:	781b      	ldrb	r3, [r3, #0]
   2506c:	b25b      	sxtb	r3, r3
}
   2506e:	0018      	movs	r0, r3
   25070:	46bd      	mov	sp, r7
   25072:	b004      	add	sp, #16
   25074:	bdb0      	pop	{r4, r5, r7, pc}
   25076:	46c0      	nop			; (mov r8, r8)
   25078:	00038220 	.word	0x00038220
   2507c:	0001d28d 	.word	0x0001d28d
   25080:	00038260 	.word	0x00038260
   25084:	00038240 	.word	0x00038240
   25088:	20005510 	.word	0x20005510
   2508c:	00020219 	.word	0x00020219
   25090:	0001ffb9 	.word	0x0001ffb9

00025094 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   25094:	b580      	push	{r7, lr}
   25096:	b086      	sub	sp, #24
   25098:	af00      	add	r7, sp, #0
   2509a:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   2509c:	2300      	movs	r3, #0
   2509e:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   250a0:	2317      	movs	r3, #23
   250a2:	18fb      	adds	r3, r7, r3
   250a4:	2200      	movs	r2, #0
   250a6:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   250a8:	2316      	movs	r3, #22
   250aa:	18fb      	adds	r3, r7, r3
   250ac:	2200      	movs	r2, #0
   250ae:	701a      	strb	r2, [r3, #0]
   250b0:	e060      	b.n	25174 <nmi_inet_addr+0xe0>
	{
		j = 0;
   250b2:	2315      	movs	r3, #21
   250b4:	18fb      	adds	r3, r7, r3
   250b6:	2200      	movs	r2, #0
   250b8:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   250ba:	2314      	movs	r3, #20
   250bc:	18fb      	adds	r3, r7, r3
   250be:	687a      	ldr	r2, [r7, #4]
   250c0:	7812      	ldrb	r2, [r2, #0]
   250c2:	701a      	strb	r2, [r3, #0]
			++j;
   250c4:	2315      	movs	r3, #21
   250c6:	18fb      	adds	r3, r7, r3
   250c8:	2215      	movs	r2, #21
   250ca:	18ba      	adds	r2, r7, r2
   250cc:	7812      	ldrb	r2, [r2, #0]
   250ce:	3201      	adds	r2, #1
   250d0:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   250d2:	2315      	movs	r3, #21
   250d4:	18fb      	adds	r3, r7, r3
   250d6:	781b      	ldrb	r3, [r3, #0]
   250d8:	2b04      	cmp	r3, #4
   250da:	d901      	bls.n	250e0 <nmi_inet_addr+0x4c>
			{
				return 0;
   250dc:	2300      	movs	r3, #0
   250de:	e057      	b.n	25190 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   250e0:	2314      	movs	r3, #20
   250e2:	18fb      	adds	r3, r7, r3
   250e4:	781b      	ldrb	r3, [r3, #0]
   250e6:	2b2e      	cmp	r3, #46	; 0x2e
   250e8:	d004      	beq.n	250f4 <nmi_inet_addr+0x60>
   250ea:	2314      	movs	r3, #20
   250ec:	18fb      	adds	r3, r7, r3
   250ee:	781b      	ldrb	r3, [r3, #0]
   250f0:	2b00      	cmp	r3, #0
   250f2:	d10d      	bne.n	25110 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   250f4:	2316      	movs	r3, #22
   250f6:	18fb      	adds	r3, r7, r3
   250f8:	781b      	ldrb	r3, [r3, #0]
   250fa:	220c      	movs	r2, #12
   250fc:	18ba      	adds	r2, r7, r2
   250fe:	2117      	movs	r1, #23
   25100:	1879      	adds	r1, r7, r1
   25102:	7809      	ldrb	r1, [r1, #0]
   25104:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   25106:	2317      	movs	r3, #23
   25108:	18fb      	adds	r3, r7, r3
   2510a:	2200      	movs	r2, #0
   2510c:	701a      	strb	r2, [r3, #0]
   2510e:	e01d      	b.n	2514c <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   25110:	2314      	movs	r3, #20
   25112:	18fb      	adds	r3, r7, r3
   25114:	781b      	ldrb	r3, [r3, #0]
   25116:	2b2f      	cmp	r3, #47	; 0x2f
   25118:	d916      	bls.n	25148 <nmi_inet_addr+0xb4>
   2511a:	2314      	movs	r3, #20
   2511c:	18fb      	adds	r3, r7, r3
   2511e:	781b      	ldrb	r3, [r3, #0]
   25120:	2b39      	cmp	r3, #57	; 0x39
   25122:	d811      	bhi.n	25148 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   25124:	2317      	movs	r3, #23
   25126:	18fb      	adds	r3, r7, r3
   25128:	781b      	ldrb	r3, [r3, #0]
   2512a:	1c1a      	adds	r2, r3, #0
   2512c:	0092      	lsls	r2, r2, #2
   2512e:	18d3      	adds	r3, r2, r3
   25130:	18db      	adds	r3, r3, r3
   25132:	b2da      	uxtb	r2, r3
   25134:	2314      	movs	r3, #20
   25136:	18fb      	adds	r3, r7, r3
   25138:	781b      	ldrb	r3, [r3, #0]
   2513a:	18d3      	adds	r3, r2, r3
   2513c:	b2da      	uxtb	r2, r3
   2513e:	2317      	movs	r3, #23
   25140:	18fb      	adds	r3, r7, r3
   25142:	3a30      	subs	r2, #48	; 0x30
   25144:	701a      	strb	r2, [r3, #0]
   25146:	e001      	b.n	2514c <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   25148:	2300      	movs	r3, #0
   2514a:	e021      	b.n	25190 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   2514c:	687b      	ldr	r3, [r7, #4]
   2514e:	3301      	adds	r3, #1
   25150:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   25152:	2314      	movs	r3, #20
   25154:	18fb      	adds	r3, r7, r3
   25156:	781b      	ldrb	r3, [r3, #0]
   25158:	2b2e      	cmp	r3, #46	; 0x2e
   2515a:	d004      	beq.n	25166 <nmi_inet_addr+0xd2>
   2515c:	2314      	movs	r3, #20
   2515e:	18fb      	adds	r3, r7, r3
   25160:	781b      	ldrb	r3, [r3, #0]
   25162:	2b00      	cmp	r3, #0
   25164:	d1a9      	bne.n	250ba <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   25166:	2316      	movs	r3, #22
   25168:	18fb      	adds	r3, r7, r3
   2516a:	2216      	movs	r2, #22
   2516c:	18ba      	adds	r2, r7, r2
   2516e:	7812      	ldrb	r2, [r2, #0]
   25170:	3201      	adds	r2, #1
   25172:	701a      	strb	r2, [r3, #0]
   25174:	2316      	movs	r3, #22
   25176:	18fb      	adds	r3, r7, r3
   25178:	781b      	ldrb	r3, [r3, #0]
   2517a:	2b03      	cmp	r3, #3
   2517c:	d999      	bls.n	250b2 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   2517e:	230c      	movs	r3, #12
   25180:	18f9      	adds	r1, r7, r3
   25182:	2310      	movs	r3, #16
   25184:	18fb      	adds	r3, r7, r3
   25186:	2204      	movs	r2, #4
   25188:	0018      	movs	r0, r3
   2518a:	4b03      	ldr	r3, [pc, #12]	; (25198 <nmi_inet_addr+0x104>)
   2518c:	4798      	blx	r3
	return u32IP;
   2518e:	693b      	ldr	r3, [r7, #16]
}
   25190:	0018      	movs	r0, r3
   25192:	46bd      	mov	sp, r7
   25194:	b006      	add	sp, #24
   25196:	bd80      	pop	{r7, pc}
   25198:	0001ff7d 	.word	0x0001ff7d

0002519c <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   2519c:	b5b0      	push	{r4, r5, r7, lr}
   2519e:	b088      	sub	sp, #32
   251a0:	af04      	add	r7, sp, #16
   251a2:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   251a4:	230f      	movs	r3, #15
   251a6:	18fb      	adds	r3, r7, r3
   251a8:	22fa      	movs	r2, #250	; 0xfa
   251aa:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   251ac:	687b      	ldr	r3, [r7, #4]
   251ae:	0018      	movs	r0, r3
   251b0:	4b14      	ldr	r3, [pc, #80]	; (25204 <gethostbyname+0x68>)
   251b2:	4798      	blx	r3
   251b4:	0003      	movs	r3, r0
   251b6:	001a      	movs	r2, r3
   251b8:	230e      	movs	r3, #14
   251ba:	18fb      	adds	r3, r7, r3
   251bc:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   251be:	230e      	movs	r3, #14
   251c0:	18fb      	adds	r3, r7, r3
   251c2:	781b      	ldrb	r3, [r3, #0]
   251c4:	2b40      	cmp	r3, #64	; 0x40
   251c6:	d815      	bhi.n	251f4 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   251c8:	230e      	movs	r3, #14
   251ca:	18fb      	adds	r3, r7, r3
   251cc:	781b      	ldrb	r3, [r3, #0]
   251ce:	b29b      	uxth	r3, r3
   251d0:	3301      	adds	r3, #1
   251d2:	b299      	uxth	r1, r3
   251d4:	230f      	movs	r3, #15
   251d6:	18fc      	adds	r4, r7, r3
   251d8:	687a      	ldr	r2, [r7, #4]
   251da:	2300      	movs	r3, #0
   251dc:	9302      	str	r3, [sp, #8]
   251de:	2300      	movs	r3, #0
   251e0:	9301      	str	r3, [sp, #4]
   251e2:	2300      	movs	r3, #0
   251e4:	9300      	str	r3, [sp, #0]
   251e6:	000b      	movs	r3, r1
   251e8:	214a      	movs	r1, #74	; 0x4a
   251ea:	2002      	movs	r0, #2
   251ec:	4d06      	ldr	r5, [pc, #24]	; (25208 <gethostbyname+0x6c>)
   251ee:	47a8      	blx	r5
   251f0:	0003      	movs	r3, r0
   251f2:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   251f4:	230f      	movs	r3, #15
   251f6:	18fb      	adds	r3, r7, r3
   251f8:	781b      	ldrb	r3, [r3, #0]
   251fa:	b25b      	sxtb	r3, r3
}
   251fc:	0018      	movs	r0, r3
   251fe:	46bd      	mov	sp, r7
   25200:	b004      	add	sp, #16
   25202:	bdb0      	pop	{r4, r5, r7, pc}
   25204:	0001fff7 	.word	0x0001fff7
   25208:	00020219 	.word	0x00020219

0002520c <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   2520c:	b580      	push	{r7, lr}
   2520e:	b082      	sub	sp, #8
   25210:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   25212:	003b      	movs	r3, r7
   25214:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   25216:	687b      	ldr	r3, [r7, #4]
   25218:	22b9      	movs	r2, #185	; 0xb9
   2521a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   2521c:	4b13      	ldr	r3, [pc, #76]	; (2526c <spi_flash_enter_low_power_mode+0x60>)
   2521e:	2100      	movs	r1, #0
   25220:	0018      	movs	r0, r3
   25222:	4b13      	ldr	r3, [pc, #76]	; (25270 <spi_flash_enter_low_power_mode+0x64>)
   25224:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   25226:	687b      	ldr	r3, [r7, #4]
   25228:	781b      	ldrb	r3, [r3, #0]
   2522a:	001a      	movs	r2, r3
   2522c:	4b11      	ldr	r3, [pc, #68]	; (25274 <spi_flash_enter_low_power_mode+0x68>)
   2522e:	0011      	movs	r1, r2
   25230:	0018      	movs	r0, r3
   25232:	4b0f      	ldr	r3, [pc, #60]	; (25270 <spi_flash_enter_low_power_mode+0x64>)
   25234:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   25236:	4b10      	ldr	r3, [pc, #64]	; (25278 <spi_flash_enter_low_power_mode+0x6c>)
   25238:	2101      	movs	r1, #1
   2523a:	0018      	movs	r0, r3
   2523c:	4b0c      	ldr	r3, [pc, #48]	; (25270 <spi_flash_enter_low_power_mode+0x64>)
   2523e:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25240:	4b0e      	ldr	r3, [pc, #56]	; (2527c <spi_flash_enter_low_power_mode+0x70>)
   25242:	2100      	movs	r1, #0
   25244:	0018      	movs	r0, r3
   25246:	4b0a      	ldr	r3, [pc, #40]	; (25270 <spi_flash_enter_low_power_mode+0x64>)
   25248:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   2524a:	4b0d      	ldr	r3, [pc, #52]	; (25280 <spi_flash_enter_low_power_mode+0x74>)
   2524c:	2181      	movs	r1, #129	; 0x81
   2524e:	0018      	movs	r0, r3
   25250:	4b07      	ldr	r3, [pc, #28]	; (25270 <spi_flash_enter_low_power_mode+0x64>)
   25252:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   25254:	46c0      	nop			; (mov r8, r8)
   25256:	4b0b      	ldr	r3, [pc, #44]	; (25284 <spi_flash_enter_low_power_mode+0x78>)
   25258:	0018      	movs	r0, r3
   2525a:	4b0b      	ldr	r3, [pc, #44]	; (25288 <spi_flash_enter_low_power_mode+0x7c>)
   2525c:	4798      	blx	r3
   2525e:	0003      	movs	r3, r0
   25260:	2b01      	cmp	r3, #1
   25262:	d1f8      	bne.n	25256 <spi_flash_enter_low_power_mode+0x4a>
}
   25264:	46c0      	nop			; (mov r8, r8)
   25266:	46bd      	mov	sp, r7
   25268:	b002      	add	sp, #8
   2526a:	bd80      	pop	{r7, pc}
   2526c:	00010208 	.word	0x00010208
   25270:	0002206d 	.word	0x0002206d
   25274:	0001020c 	.word	0x0001020c
   25278:	00010214 	.word	0x00010214
   2527c:	0001021c 	.word	0x0001021c
   25280:	00010204 	.word	0x00010204
   25284:	00010218 	.word	0x00010218
   25288:	00022029 	.word	0x00022029

0002528c <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   2528c:	b580      	push	{r7, lr}
   2528e:	b082      	sub	sp, #8
   25290:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   25292:	003b      	movs	r3, r7
   25294:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   25296:	687b      	ldr	r3, [r7, #4]
   25298:	22ab      	movs	r2, #171	; 0xab
   2529a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   2529c:	4b13      	ldr	r3, [pc, #76]	; (252ec <spi_flash_leave_low_power_mode+0x60>)
   2529e:	2100      	movs	r1, #0
   252a0:	0018      	movs	r0, r3
   252a2:	4b13      	ldr	r3, [pc, #76]	; (252f0 <spi_flash_leave_low_power_mode+0x64>)
   252a4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   252a6:	687b      	ldr	r3, [r7, #4]
   252a8:	781b      	ldrb	r3, [r3, #0]
   252aa:	001a      	movs	r2, r3
   252ac:	4b11      	ldr	r3, [pc, #68]	; (252f4 <spi_flash_leave_low_power_mode+0x68>)
   252ae:	0011      	movs	r1, r2
   252b0:	0018      	movs	r0, r3
   252b2:	4b0f      	ldr	r3, [pc, #60]	; (252f0 <spi_flash_leave_low_power_mode+0x64>)
   252b4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   252b6:	4b10      	ldr	r3, [pc, #64]	; (252f8 <spi_flash_leave_low_power_mode+0x6c>)
   252b8:	2101      	movs	r1, #1
   252ba:	0018      	movs	r0, r3
   252bc:	4b0c      	ldr	r3, [pc, #48]	; (252f0 <spi_flash_leave_low_power_mode+0x64>)
   252be:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   252c0:	4b0e      	ldr	r3, [pc, #56]	; (252fc <spi_flash_leave_low_power_mode+0x70>)
   252c2:	2100      	movs	r1, #0
   252c4:	0018      	movs	r0, r3
   252c6:	4b0a      	ldr	r3, [pc, #40]	; (252f0 <spi_flash_leave_low_power_mode+0x64>)
   252c8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   252ca:	4b0d      	ldr	r3, [pc, #52]	; (25300 <spi_flash_leave_low_power_mode+0x74>)
   252cc:	2181      	movs	r1, #129	; 0x81
   252ce:	0018      	movs	r0, r3
   252d0:	4b07      	ldr	r3, [pc, #28]	; (252f0 <spi_flash_leave_low_power_mode+0x64>)
   252d2:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   252d4:	46c0      	nop			; (mov r8, r8)
   252d6:	4b0b      	ldr	r3, [pc, #44]	; (25304 <spi_flash_leave_low_power_mode+0x78>)
   252d8:	0018      	movs	r0, r3
   252da:	4b0b      	ldr	r3, [pc, #44]	; (25308 <spi_flash_leave_low_power_mode+0x7c>)
   252dc:	4798      	blx	r3
   252de:	0003      	movs	r3, r0
   252e0:	2b01      	cmp	r3, #1
   252e2:	d1f8      	bne.n	252d6 <spi_flash_leave_low_power_mode+0x4a>
}
   252e4:	46c0      	nop			; (mov r8, r8)
   252e6:	46bd      	mov	sp, r7
   252e8:	b002      	add	sp, #8
   252ea:	bd80      	pop	{r7, pc}
   252ec:	00010208 	.word	0x00010208
   252f0:	0002206d 	.word	0x0002206d
   252f4:	0001020c 	.word	0x0001020c
   252f8:	00010214 	.word	0x00010214
   252fc:	0001021c 	.word	0x0001021c
   25300:	00010204 	.word	0x00010204
   25304:	00010218 	.word	0x00010218
   25308:	00022029 	.word	0x00022029

0002530c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   2530c:	b590      	push	{r4, r7, lr}
   2530e:	b085      	sub	sp, #20
   25310:	af00      	add	r7, sp, #0
   25312:	0002      	movs	r2, r0
   25314:	1dfb      	adds	r3, r7, #7
   25316:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   25318:	230f      	movs	r3, #15
   2531a:	18fb      	adds	r3, r7, r3
   2531c:	2200      	movs	r2, #0
   2531e:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   25320:	4b24      	ldr	r3, [pc, #144]	; (253b4 <spi_flash_enable+0xa8>)
   25322:	4798      	blx	r3
   25324:	0003      	movs	r3, r0
   25326:	051b      	lsls	r3, r3, #20
   25328:	0d1b      	lsrs	r3, r3, #20
   2532a:	4a23      	ldr	r2, [pc, #140]	; (253b8 <spi_flash_enable+0xac>)
   2532c:	4293      	cmp	r3, r2
   2532e:	d938      	bls.n	253a2 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   25330:	230f      	movs	r3, #15
   25332:	18fc      	adds	r4, r7, r3
   25334:	2308      	movs	r3, #8
   25336:	18fb      	adds	r3, r7, r3
   25338:	4a20      	ldr	r2, [pc, #128]	; (253bc <spi_flash_enable+0xb0>)
   2533a:	0019      	movs	r1, r3
   2533c:	0010      	movs	r0, r2
   2533e:	4b20      	ldr	r3, [pc, #128]	; (253c0 <spi_flash_enable+0xb4>)
   25340:	4798      	blx	r3
   25342:	0003      	movs	r3, r0
   25344:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   25346:	230f      	movs	r3, #15
   25348:	18fb      	adds	r3, r7, r3
   2534a:	781b      	ldrb	r3, [r3, #0]
   2534c:	b25b      	sxtb	r3, r3
   2534e:	2b00      	cmp	r3, #0
   25350:	d126      	bne.n	253a0 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   25352:	68bb      	ldr	r3, [r7, #8]
   25354:	4a1b      	ldr	r2, [pc, #108]	; (253c4 <spi_flash_enable+0xb8>)
   25356:	4013      	ands	r3, r2
   25358:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   2535a:	68bb      	ldr	r3, [r7, #8]
   2535c:	4a1a      	ldr	r2, [pc, #104]	; (253c8 <spi_flash_enable+0xbc>)
   2535e:	4313      	orrs	r3, r2
   25360:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   25362:	68bb      	ldr	r3, [r7, #8]
   25364:	4a15      	ldr	r2, [pc, #84]	; (253bc <spi_flash_enable+0xb0>)
   25366:	0019      	movs	r1, r3
   25368:	0010      	movs	r0, r2
   2536a:	4b18      	ldr	r3, [pc, #96]	; (253cc <spi_flash_enable+0xc0>)
   2536c:	4798      	blx	r3
		if(enable) {
   2536e:	1dfb      	adds	r3, r7, #7
   25370:	781b      	ldrb	r3, [r3, #0]
   25372:	2b00      	cmp	r3, #0
   25374:	d002      	beq.n	2537c <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   25376:	4b16      	ldr	r3, [pc, #88]	; (253d0 <spi_flash_enable+0xc4>)
   25378:	4798      	blx	r3
   2537a:	e001      	b.n	25380 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   2537c:	4b15      	ldr	r3, [pc, #84]	; (253d4 <spi_flash_enable+0xc8>)
   2537e:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   25380:	68bb      	ldr	r3, [r7, #8]
   25382:	4a10      	ldr	r2, [pc, #64]	; (253c4 <spi_flash_enable+0xb8>)
   25384:	4013      	ands	r3, r2
   25386:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   25388:	68bb      	ldr	r3, [r7, #8]
   2538a:	2280      	movs	r2, #128	; 0x80
   2538c:	0252      	lsls	r2, r2, #9
   2538e:	4313      	orrs	r3, r2
   25390:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   25392:	68bb      	ldr	r3, [r7, #8]
   25394:	4a09      	ldr	r2, [pc, #36]	; (253bc <spi_flash_enable+0xb0>)
   25396:	0019      	movs	r1, r3
   25398:	0010      	movs	r0, r2
   2539a:	4b0c      	ldr	r3, [pc, #48]	; (253cc <spi_flash_enable+0xc0>)
   2539c:	4798      	blx	r3
   2539e:	e000      	b.n	253a2 <spi_flash_enable+0x96>
			goto ERR1;
   253a0:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   253a2:	230f      	movs	r3, #15
   253a4:	18fb      	adds	r3, r7, r3
   253a6:	781b      	ldrb	r3, [r3, #0]
   253a8:	b25b      	sxtb	r3, r3
}
   253aa:	0018      	movs	r0, r3
   253ac:	46bd      	mov	sp, r7
   253ae:	b005      	add	sp, #20
   253b0:	bd90      	pop	{r4, r7, pc}
   253b2:	46c0      	nop			; (mov r8, r8)
   253b4:	00021949 	.word	0x00021949
   253b8:	0000039f 	.word	0x0000039f
   253bc:	00001410 	.word	0x00001410
   253c0:	00022049 	.word	0x00022049
   253c4:	f8888fff 	.word	0xf8888fff
   253c8:	01111000 	.word	0x01111000
   253cc:	0002206d 	.word	0x0002206d
   253d0:	0002528d 	.word	0x0002528d
   253d4:	0002520d 	.word	0x0002520d

000253d8 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   253d8:	b580      	push	{r7, lr}
   253da:	b084      	sub	sp, #16
   253dc:	af00      	add	r7, sp, #0
   253de:	0002      	movs	r2, r0
   253e0:	1dfb      	adds	r3, r7, #7
   253e2:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   253e4:	1dfb      	adds	r3, r7, #7
   253e6:	781b      	ldrb	r3, [r3, #0]
   253e8:	2b00      	cmp	r3, #0
   253ea:	d108      	bne.n	253fe <mem_test_unit_ready+0x26>
   253ec:	1dfb      	adds	r3, r7, #7
   253ee:	781a      	ldrb	r2, [r3, #0]
   253f0:	4b08      	ldr	r3, [pc, #32]	; (25414 <mem_test_unit_ready+0x3c>)
   253f2:	0152      	lsls	r2, r2, #5
   253f4:	58d3      	ldr	r3, [r2, r3]
   253f6:	4798      	blx	r3
   253f8:	0003      	movs	r3, r0
   253fa:	001a      	movs	r2, r3
   253fc:	e000      	b.n	25400 <mem_test_unit_ready+0x28>
   253fe:	2201      	movs	r2, #1
  status =
   25400:	230f      	movs	r3, #15
   25402:	18fb      	adds	r3, r7, r3
   25404:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25406:	230f      	movs	r3, #15
   25408:	18fb      	adds	r3, r7, r3
   2540a:	781b      	ldrb	r3, [r3, #0]
}
   2540c:	0018      	movs	r0, r3
   2540e:	46bd      	mov	sp, r7
   25410:	b004      	add	sp, #16
   25412:	bd80      	pop	{r7, pc}
   25414:	000382ec 	.word	0x000382ec

00025418 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   25418:	b580      	push	{r7, lr}
   2541a:	b084      	sub	sp, #16
   2541c:	af00      	add	r7, sp, #0
   2541e:	0002      	movs	r2, r0
   25420:	6039      	str	r1, [r7, #0]
   25422:	1dfb      	adds	r3, r7, #7
   25424:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   25426:	1dfb      	adds	r3, r7, #7
   25428:	781b      	ldrb	r3, [r3, #0]
   2542a:	2b00      	cmp	r3, #0
   2542c:	d10c      	bne.n	25448 <mem_read_capacity+0x30>
   2542e:	1dfb      	adds	r3, r7, #7
   25430:	781b      	ldrb	r3, [r3, #0]
   25432:	4a0b      	ldr	r2, [pc, #44]	; (25460 <mem_read_capacity+0x48>)
   25434:	015b      	lsls	r3, r3, #5
   25436:	18d3      	adds	r3, r2, r3
   25438:	3304      	adds	r3, #4
   2543a:	681b      	ldr	r3, [r3, #0]
   2543c:	683a      	ldr	r2, [r7, #0]
   2543e:	0010      	movs	r0, r2
   25440:	4798      	blx	r3
   25442:	0003      	movs	r3, r0
   25444:	001a      	movs	r2, r3
   25446:	e000      	b.n	2544a <mem_read_capacity+0x32>
   25448:	2201      	movs	r2, #1
  status =
   2544a:	230f      	movs	r3, #15
   2544c:	18fb      	adds	r3, r7, r3
   2544e:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25450:	230f      	movs	r3, #15
   25452:	18fb      	adds	r3, r7, r3
   25454:	781b      	ldrb	r3, [r3, #0]
}
   25456:	0018      	movs	r0, r3
   25458:	46bd      	mov	sp, r7
   2545a:	b004      	add	sp, #16
   2545c:	bd80      	pop	{r7, pc}
   2545e:	46c0      	nop			; (mov r8, r8)
   25460:	000382ec 	.word	0x000382ec

00025464 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   25464:	b580      	push	{r7, lr}
   25466:	b084      	sub	sp, #16
   25468:	af00      	add	r7, sp, #0
   2546a:	0002      	movs	r2, r0
   2546c:	1dfb      	adds	r3, r7, #7
   2546e:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   25470:	1dfb      	adds	r3, r7, #7
   25472:	781b      	ldrb	r3, [r3, #0]
   25474:	425a      	negs	r2, r3
   25476:	4153      	adcs	r3, r2
   25478:	b2da      	uxtb	r2, r3
  sector_size =
   2547a:	230f      	movs	r3, #15
   2547c:	18fb      	adds	r3, r7, r3
   2547e:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   25480:	230f      	movs	r3, #15
   25482:	18fb      	adds	r3, r7, r3
   25484:	781b      	ldrb	r3, [r3, #0]
}
   25486:	0018      	movs	r0, r3
   25488:	46bd      	mov	sp, r7
   2548a:	b004      	add	sp, #16
   2548c:	bd80      	pop	{r7, pc}
	...

00025490 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   25490:	b580      	push	{r7, lr}
   25492:	b084      	sub	sp, #16
   25494:	af00      	add	r7, sp, #0
   25496:	0002      	movs	r2, r0
   25498:	1dfb      	adds	r3, r7, #7
   2549a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   2549c:	1dfb      	adds	r3, r7, #7
   2549e:	781b      	ldrb	r3, [r3, #0]
   254a0:	2b00      	cmp	r3, #0
   254a2:	d109      	bne.n	254b8 <mem_wr_protect+0x28>
   254a4:	1dfb      	adds	r3, r7, #7
   254a6:	781b      	ldrb	r3, [r3, #0]
   254a8:	4a0a      	ldr	r2, [pc, #40]	; (254d4 <mem_wr_protect+0x44>)
   254aa:	015b      	lsls	r3, r3, #5
   254ac:	18d3      	adds	r3, r2, r3
   254ae:	330c      	adds	r3, #12
   254b0:	681b      	ldr	r3, [r3, #0]
   254b2:	4798      	blx	r3
   254b4:	1e03      	subs	r3, r0, #0
   254b6:	d001      	beq.n	254bc <mem_wr_protect+0x2c>
   254b8:	2201      	movs	r2, #1
   254ba:	e000      	b.n	254be <mem_wr_protect+0x2e>
   254bc:	2200      	movs	r2, #0
  wr_protect =
   254be:	230f      	movs	r3, #15
   254c0:	18fb      	adds	r3, r7, r3
   254c2:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   254c4:	230f      	movs	r3, #15
   254c6:	18fb      	adds	r3, r7, r3
   254c8:	781b      	ldrb	r3, [r3, #0]
}
   254ca:	0018      	movs	r0, r3
   254cc:	46bd      	mov	sp, r7
   254ce:	b004      	add	sp, #16
   254d0:	bd80      	pop	{r7, pc}
   254d2:	46c0      	nop			; (mov r8, r8)
   254d4:	000382ec 	.word	0x000382ec

000254d8 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   254d8:	b580      	push	{r7, lr}
   254da:	b086      	sub	sp, #24
   254dc:	af00      	add	r7, sp, #0
   254de:	60b9      	str	r1, [r7, #8]
   254e0:	607a      	str	r2, [r7, #4]
   254e2:	230f      	movs	r3, #15
   254e4:	18fb      	adds	r3, r7, r3
   254e6:	1c02      	adds	r2, r0, #0
   254e8:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   254ea:	230f      	movs	r3, #15
   254ec:	18fb      	adds	r3, r7, r3
   254ee:	781b      	ldrb	r3, [r3, #0]
   254f0:	2b00      	cmp	r3, #0
   254f2:	d10e      	bne.n	25512 <memory_2_ram+0x3a>
   254f4:	230f      	movs	r3, #15
   254f6:	18fb      	adds	r3, r7, r3
   254f8:	781b      	ldrb	r3, [r3, #0]
   254fa:	4a0b      	ldr	r2, [pc, #44]	; (25528 <memory_2_ram+0x50>)
   254fc:	015b      	lsls	r3, r3, #5
   254fe:	18d3      	adds	r3, r2, r3
   25500:	3314      	adds	r3, #20
   25502:	681b      	ldr	r3, [r3, #0]
   25504:	6879      	ldr	r1, [r7, #4]
   25506:	68ba      	ldr	r2, [r7, #8]
   25508:	0010      	movs	r0, r2
   2550a:	4798      	blx	r3
   2550c:	0003      	movs	r3, r0
   2550e:	001a      	movs	r2, r3
   25510:	e000      	b.n	25514 <memory_2_ram+0x3c>
   25512:	2201      	movs	r2, #1
  status =
   25514:	2317      	movs	r3, #23
   25516:	18fb      	adds	r3, r7, r3
   25518:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   2551a:	2317      	movs	r3, #23
   2551c:	18fb      	adds	r3, r7, r3
   2551e:	781b      	ldrb	r3, [r3, #0]
}
   25520:	0018      	movs	r0, r3
   25522:	46bd      	mov	sp, r7
   25524:	b006      	add	sp, #24
   25526:	bd80      	pop	{r7, pc}
   25528:	000382ec 	.word	0x000382ec

0002552c <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   2552c:	b580      	push	{r7, lr}
   2552e:	b086      	sub	sp, #24
   25530:	af00      	add	r7, sp, #0
   25532:	60b9      	str	r1, [r7, #8]
   25534:	607a      	str	r2, [r7, #4]
   25536:	230f      	movs	r3, #15
   25538:	18fb      	adds	r3, r7, r3
   2553a:	1c02      	adds	r2, r0, #0
   2553c:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   2553e:	230f      	movs	r3, #15
   25540:	18fb      	adds	r3, r7, r3
   25542:	781b      	ldrb	r3, [r3, #0]
   25544:	2b00      	cmp	r3, #0
   25546:	d10e      	bne.n	25566 <ram_2_memory+0x3a>
   25548:	230f      	movs	r3, #15
   2554a:	18fb      	adds	r3, r7, r3
   2554c:	781b      	ldrb	r3, [r3, #0]
   2554e:	4a0b      	ldr	r2, [pc, #44]	; (2557c <ram_2_memory+0x50>)
   25550:	015b      	lsls	r3, r3, #5
   25552:	18d3      	adds	r3, r2, r3
   25554:	3318      	adds	r3, #24
   25556:	681b      	ldr	r3, [r3, #0]
   25558:	6879      	ldr	r1, [r7, #4]
   2555a:	68ba      	ldr	r2, [r7, #8]
   2555c:	0010      	movs	r0, r2
   2555e:	4798      	blx	r3
   25560:	0003      	movs	r3, r0
   25562:	001a      	movs	r2, r3
   25564:	e000      	b.n	25568 <ram_2_memory+0x3c>
   25566:	2201      	movs	r2, #1
  status =
   25568:	2317      	movs	r3, #23
   2556a:	18fb      	adds	r3, r7, r3
   2556c:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   2556e:	2317      	movs	r3, #23
   25570:	18fb      	adds	r3, r7, r3
   25572:	781b      	ldrb	r3, [r3, #0]
}
   25574:	0018      	movs	r0, r3
   25576:	46bd      	mov	sp, r7
   25578:	b006      	add	sp, #24
   2557a:	bd80      	pop	{r7, pc}
   2557c:	000382ec 	.word	0x000382ec

00025580 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   25580:	b580      	push	{r7, lr}
   25582:	b082      	sub	sp, #8
   25584:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   25586:	4b10      	ldr	r3, [pc, #64]	; (255c8 <cpu_irq_enter_critical+0x48>)
   25588:	681b      	ldr	r3, [r3, #0]
   2558a:	2b00      	cmp	r3, #0
   2558c:	d112      	bne.n	255b4 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2558e:	f3ef 8310 	mrs	r3, PRIMASK
   25592:	607b      	str	r3, [r7, #4]
  return(result);
   25594:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   25596:	2b00      	cmp	r3, #0
   25598:	d109      	bne.n	255ae <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   2559a:	b672      	cpsid	i
   2559c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   255a0:	4b0a      	ldr	r3, [pc, #40]	; (255cc <cpu_irq_enter_critical+0x4c>)
   255a2:	2200      	movs	r2, #0
   255a4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   255a6:	4b0a      	ldr	r3, [pc, #40]	; (255d0 <cpu_irq_enter_critical+0x50>)
   255a8:	2201      	movs	r2, #1
   255aa:	701a      	strb	r2, [r3, #0]
   255ac:	e002      	b.n	255b4 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   255ae:	4b08      	ldr	r3, [pc, #32]	; (255d0 <cpu_irq_enter_critical+0x50>)
   255b0:	2200      	movs	r2, #0
   255b2:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   255b4:	4b04      	ldr	r3, [pc, #16]	; (255c8 <cpu_irq_enter_critical+0x48>)
   255b6:	681b      	ldr	r3, [r3, #0]
   255b8:	1c5a      	adds	r2, r3, #1
   255ba:	4b03      	ldr	r3, [pc, #12]	; (255c8 <cpu_irq_enter_critical+0x48>)
   255bc:	601a      	str	r2, [r3, #0]
}
   255be:	46c0      	nop			; (mov r8, r8)
   255c0:	46bd      	mov	sp, r7
   255c2:	b002      	add	sp, #8
   255c4:	bd80      	pop	{r7, pc}
   255c6:	46c0      	nop			; (mov r8, r8)
   255c8:	20003e10 	.word	0x20003e10
   255cc:	200000ce 	.word	0x200000ce
   255d0:	20003e14 	.word	0x20003e14

000255d4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   255d4:	b580      	push	{r7, lr}
   255d6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   255d8:	4b0b      	ldr	r3, [pc, #44]	; (25608 <cpu_irq_leave_critical+0x34>)
   255da:	681b      	ldr	r3, [r3, #0]
   255dc:	1e5a      	subs	r2, r3, #1
   255de:	4b0a      	ldr	r3, [pc, #40]	; (25608 <cpu_irq_leave_critical+0x34>)
   255e0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   255e2:	4b09      	ldr	r3, [pc, #36]	; (25608 <cpu_irq_leave_critical+0x34>)
   255e4:	681b      	ldr	r3, [r3, #0]
   255e6:	2b00      	cmp	r3, #0
   255e8:	d10a      	bne.n	25600 <cpu_irq_leave_critical+0x2c>
   255ea:	4b08      	ldr	r3, [pc, #32]	; (2560c <cpu_irq_leave_critical+0x38>)
   255ec:	781b      	ldrb	r3, [r3, #0]
   255ee:	b2db      	uxtb	r3, r3
   255f0:	2b00      	cmp	r3, #0
   255f2:	d005      	beq.n	25600 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   255f4:	4b06      	ldr	r3, [pc, #24]	; (25610 <cpu_irq_leave_critical+0x3c>)
   255f6:	2201      	movs	r2, #1
   255f8:	701a      	strb	r2, [r3, #0]
   255fa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   255fe:	b662      	cpsie	i
	}
}
   25600:	46c0      	nop			; (mov r8, r8)
   25602:	46bd      	mov	sp, r7
   25604:	bd80      	pop	{r7, pc}
   25606:	46c0      	nop			; (mov r8, r8)
   25608:	20003e10 	.word	0x20003e10
   2560c:	20003e14 	.word	0x20003e14
   25610:	200000ce 	.word	0x200000ce

00025614 <system_pinmux_get_group_from_gpio_pin>:
{
   25614:	b580      	push	{r7, lr}
   25616:	b084      	sub	sp, #16
   25618:	af00      	add	r7, sp, #0
   2561a:	0002      	movs	r2, r0
   2561c:	1dfb      	adds	r3, r7, #7
   2561e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   25620:	230f      	movs	r3, #15
   25622:	18fb      	adds	r3, r7, r3
   25624:	1dfa      	adds	r2, r7, #7
   25626:	7812      	ldrb	r2, [r2, #0]
   25628:	09d2      	lsrs	r2, r2, #7
   2562a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2562c:	230e      	movs	r3, #14
   2562e:	18fb      	adds	r3, r7, r3
   25630:	1dfa      	adds	r2, r7, #7
   25632:	7812      	ldrb	r2, [r2, #0]
   25634:	0952      	lsrs	r2, r2, #5
   25636:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   25638:	4b0d      	ldr	r3, [pc, #52]	; (25670 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2563a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2563c:	230f      	movs	r3, #15
   2563e:	18fb      	adds	r3, r7, r3
   25640:	781b      	ldrb	r3, [r3, #0]
   25642:	2b00      	cmp	r3, #0
   25644:	d10f      	bne.n	25666 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   25646:	230f      	movs	r3, #15
   25648:	18fb      	adds	r3, r7, r3
   2564a:	781b      	ldrb	r3, [r3, #0]
   2564c:	009b      	lsls	r3, r3, #2
   2564e:	2210      	movs	r2, #16
   25650:	4694      	mov	ip, r2
   25652:	44bc      	add	ip, r7
   25654:	4463      	add	r3, ip
   25656:	3b08      	subs	r3, #8
   25658:	681a      	ldr	r2, [r3, #0]
   2565a:	230e      	movs	r3, #14
   2565c:	18fb      	adds	r3, r7, r3
   2565e:	781b      	ldrb	r3, [r3, #0]
   25660:	01db      	lsls	r3, r3, #7
   25662:	18d3      	adds	r3, r2, r3
   25664:	e000      	b.n	25668 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   25666:	2300      	movs	r3, #0
}
   25668:	0018      	movs	r0, r3
   2566a:	46bd      	mov	sp, r7
   2566c:	b004      	add	sp, #16
   2566e:	bd80      	pop	{r7, pc}
   25670:	41004400 	.word	0x41004400

00025674 <port_get_group_from_gpio_pin>:
{
   25674:	b580      	push	{r7, lr}
   25676:	b082      	sub	sp, #8
   25678:	af00      	add	r7, sp, #0
   2567a:	0002      	movs	r2, r0
   2567c:	1dfb      	adds	r3, r7, #7
   2567e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   25680:	1dfb      	adds	r3, r7, #7
   25682:	781b      	ldrb	r3, [r3, #0]
   25684:	0018      	movs	r0, r3
   25686:	4b03      	ldr	r3, [pc, #12]	; (25694 <port_get_group_from_gpio_pin+0x20>)
   25688:	4798      	blx	r3
   2568a:	0003      	movs	r3, r0
}
   2568c:	0018      	movs	r0, r3
   2568e:	46bd      	mov	sp, r7
   25690:	b002      	add	sp, #8
   25692:	bd80      	pop	{r7, pc}
   25694:	00025615 	.word	0x00025615

00025698 <port_get_config_defaults>:
{
   25698:	b580      	push	{r7, lr}
   2569a:	b082      	sub	sp, #8
   2569c:	af00      	add	r7, sp, #0
   2569e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   256a0:	687b      	ldr	r3, [r7, #4]
   256a2:	2200      	movs	r2, #0
   256a4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   256a6:	687b      	ldr	r3, [r7, #4]
   256a8:	2201      	movs	r2, #1
   256aa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   256ac:	687b      	ldr	r3, [r7, #4]
   256ae:	2200      	movs	r2, #0
   256b0:	709a      	strb	r2, [r3, #2]
}
   256b2:	46c0      	nop			; (mov r8, r8)
   256b4:	46bd      	mov	sp, r7
   256b6:	b002      	add	sp, #8
   256b8:	bd80      	pop	{r7, pc}
	...

000256bc <port_pin_set_output_level>:
{
   256bc:	b580      	push	{r7, lr}
   256be:	b084      	sub	sp, #16
   256c0:	af00      	add	r7, sp, #0
   256c2:	0002      	movs	r2, r0
   256c4:	1dfb      	adds	r3, r7, #7
   256c6:	701a      	strb	r2, [r3, #0]
   256c8:	1dbb      	adds	r3, r7, #6
   256ca:	1c0a      	adds	r2, r1, #0
   256cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   256ce:	1dfb      	adds	r3, r7, #7
   256d0:	781b      	ldrb	r3, [r3, #0]
   256d2:	0018      	movs	r0, r3
   256d4:	4b0d      	ldr	r3, [pc, #52]	; (2570c <port_pin_set_output_level+0x50>)
   256d6:	4798      	blx	r3
   256d8:	0003      	movs	r3, r0
   256da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   256dc:	1dfb      	adds	r3, r7, #7
   256de:	781b      	ldrb	r3, [r3, #0]
   256e0:	221f      	movs	r2, #31
   256e2:	4013      	ands	r3, r2
   256e4:	2201      	movs	r2, #1
   256e6:	409a      	lsls	r2, r3
   256e8:	0013      	movs	r3, r2
   256ea:	60bb      	str	r3, [r7, #8]
	if (level) {
   256ec:	1dbb      	adds	r3, r7, #6
   256ee:	781b      	ldrb	r3, [r3, #0]
   256f0:	2b00      	cmp	r3, #0
   256f2:	d003      	beq.n	256fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   256f4:	68fb      	ldr	r3, [r7, #12]
   256f6:	68ba      	ldr	r2, [r7, #8]
   256f8:	619a      	str	r2, [r3, #24]
}
   256fa:	e002      	b.n	25702 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   256fc:	68fb      	ldr	r3, [r7, #12]
   256fe:	68ba      	ldr	r2, [r7, #8]
   25700:	615a      	str	r2, [r3, #20]
}
   25702:	46c0      	nop			; (mov r8, r8)
   25704:	46bd      	mov	sp, r7
   25706:	b004      	add	sp, #16
   25708:	bd80      	pop	{r7, pc}
   2570a:	46c0      	nop			; (mov r8, r8)
   2570c:	00025675 	.word	0x00025675

00025710 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   25710:	b580      	push	{r7, lr}
   25712:	b082      	sub	sp, #8
   25714:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   25716:	1d3b      	adds	r3, r7, #4
   25718:	0018      	movs	r0, r3
   2571a:	4b0e      	ldr	r3, [pc, #56]	; (25754 <system_board_init+0x44>)
   2571c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   2571e:	1d3b      	adds	r3, r7, #4
   25720:	2201      	movs	r2, #1
   25722:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   25724:	1d3b      	adds	r3, r7, #4
   25726:	0019      	movs	r1, r3
   25728:	2017      	movs	r0, #23
   2572a:	4b0b      	ldr	r3, [pc, #44]	; (25758 <system_board_init+0x48>)
   2572c:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   2572e:	2101      	movs	r1, #1
   25730:	2017      	movs	r0, #23
   25732:	4b0a      	ldr	r3, [pc, #40]	; (2575c <system_board_init+0x4c>)
   25734:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   25736:	1d3b      	adds	r3, r7, #4
   25738:	2200      	movs	r2, #0
   2573a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   2573c:	1d3b      	adds	r3, r7, #4
   2573e:	2201      	movs	r2, #1
   25740:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   25742:	1d3b      	adds	r3, r7, #4
   25744:	0019      	movs	r1, r3
   25746:	2037      	movs	r0, #55	; 0x37
   25748:	4b03      	ldr	r3, [pc, #12]	; (25758 <system_board_init+0x48>)
   2574a:	4798      	blx	r3
}
   2574c:	46c0      	nop			; (mov r8, r8)
   2574e:	46bd      	mov	sp, r7
   25750:	b002      	add	sp, #8
   25752:	bd80      	pop	{r7, pc}
   25754:	00025699 	.word	0x00025699
   25758:	00025d85 	.word	0x00025d85
   2575c:	000256bd 	.word	0x000256bd

00025760 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   25760:	b580      	push	{r7, lr}
   25762:	b084      	sub	sp, #16
   25764:	af00      	add	r7, sp, #0
   25766:	0002      	movs	r2, r0
   25768:	1dfb      	adds	r3, r7, #7
   2576a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   2576c:	230f      	movs	r3, #15
   2576e:	18fb      	adds	r3, r7, r3
   25770:	1dfa      	adds	r2, r7, #7
   25772:	7812      	ldrb	r2, [r2, #0]
   25774:	0952      	lsrs	r2, r2, #5
   25776:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   25778:	230f      	movs	r3, #15
   2577a:	18fb      	adds	r3, r7, r3
   2577c:	781b      	ldrb	r3, [r3, #0]
   2577e:	2b00      	cmp	r3, #0
   25780:	d10c      	bne.n	2579c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25782:	4b09      	ldr	r3, [pc, #36]	; (257a8 <_extint_get_eic_from_channel+0x48>)
   25784:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   25786:	230f      	movs	r3, #15
   25788:	18fb      	adds	r3, r7, r3
   2578a:	781b      	ldrb	r3, [r3, #0]
   2578c:	009b      	lsls	r3, r3, #2
   2578e:	2210      	movs	r2, #16
   25790:	4694      	mov	ip, r2
   25792:	44bc      	add	ip, r7
   25794:	4463      	add	r3, ip
   25796:	3b08      	subs	r3, #8
   25798:	681b      	ldr	r3, [r3, #0]
   2579a:	e000      	b.n	2579e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   2579c:	2300      	movs	r3, #0
	}
}
   2579e:	0018      	movs	r0, r3
   257a0:	46bd      	mov	sp, r7
   257a2:	b004      	add	sp, #16
   257a4:	bd80      	pop	{r7, pc}
   257a6:	46c0      	nop			; (mov r8, r8)
   257a8:	40001800 	.word	0x40001800

000257ac <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   257ac:	b580      	push	{r7, lr}
   257ae:	b084      	sub	sp, #16
   257b0:	af00      	add	r7, sp, #0
   257b2:	0002      	movs	r2, r0
   257b4:	1dfb      	adds	r3, r7, #7
   257b6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   257b8:	1dfb      	adds	r3, r7, #7
   257ba:	781b      	ldrb	r3, [r3, #0]
   257bc:	0018      	movs	r0, r3
   257be:	4b0b      	ldr	r3, [pc, #44]	; (257ec <extint_chan_is_detected+0x40>)
   257c0:	4798      	blx	r3
   257c2:	0003      	movs	r3, r0
   257c4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   257c6:	1dfb      	adds	r3, r7, #7
   257c8:	781b      	ldrb	r3, [r3, #0]
   257ca:	221f      	movs	r2, #31
   257cc:	4013      	ands	r3, r2
   257ce:	2201      	movs	r2, #1
   257d0:	409a      	lsls	r2, r3
   257d2:	0013      	movs	r3, r2
   257d4:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   257d6:	68fb      	ldr	r3, [r7, #12]
   257d8:	691b      	ldr	r3, [r3, #16]
   257da:	68ba      	ldr	r2, [r7, #8]
   257dc:	4013      	ands	r3, r2
   257de:	1e5a      	subs	r2, r3, #1
   257e0:	4193      	sbcs	r3, r2
   257e2:	b2db      	uxtb	r3, r3
}
   257e4:	0018      	movs	r0, r3
   257e6:	46bd      	mov	sp, r7
   257e8:	b004      	add	sp, #16
   257ea:	bd80      	pop	{r7, pc}
   257ec:	00025761 	.word	0x00025761

000257f0 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   257f0:	b580      	push	{r7, lr}
   257f2:	b084      	sub	sp, #16
   257f4:	af00      	add	r7, sp, #0
   257f6:	0002      	movs	r2, r0
   257f8:	1dfb      	adds	r3, r7, #7
   257fa:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   257fc:	1dfb      	adds	r3, r7, #7
   257fe:	781b      	ldrb	r3, [r3, #0]
   25800:	0018      	movs	r0, r3
   25802:	4b09      	ldr	r3, [pc, #36]	; (25828 <extint_chan_clear_detected+0x38>)
   25804:	4798      	blx	r3
   25806:	0003      	movs	r3, r0
   25808:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2580a:	1dfb      	adds	r3, r7, #7
   2580c:	781b      	ldrb	r3, [r3, #0]
   2580e:	221f      	movs	r2, #31
   25810:	4013      	ands	r3, r2
   25812:	2201      	movs	r2, #1
   25814:	409a      	lsls	r2, r3
   25816:	0013      	movs	r3, r2
   25818:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   2581a:	68fb      	ldr	r3, [r7, #12]
   2581c:	68ba      	ldr	r2, [r7, #8]
   2581e:	611a      	str	r2, [r3, #16]
}
   25820:	46c0      	nop			; (mov r8, r8)
   25822:	46bd      	mov	sp, r7
   25824:	b004      	add	sp, #16
   25826:	bd80      	pop	{r7, pc}
   25828:	00025761 	.word	0x00025761

0002582c <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   2582c:	b580      	push	{r7, lr}
   2582e:	b082      	sub	sp, #8
   25830:	af00      	add	r7, sp, #0
   25832:	6078      	str	r0, [r7, #4]
   25834:	0008      	movs	r0, r1
   25836:	0011      	movs	r1, r2
   25838:	1cfb      	adds	r3, r7, #3
   2583a:	1c02      	adds	r2, r0, #0
   2583c:	701a      	strb	r2, [r3, #0]
   2583e:	1cbb      	adds	r3, r7, #2
   25840:	1c0a      	adds	r2, r1, #0
   25842:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   25844:	1cbb      	adds	r3, r7, #2
   25846:	781b      	ldrb	r3, [r3, #0]
   25848:	2b00      	cmp	r3, #0
   2584a:	d001      	beq.n	25850 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2584c:	2317      	movs	r3, #23
   2584e:	e019      	b.n	25884 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   25850:	1cfb      	adds	r3, r7, #3
   25852:	781a      	ldrb	r2, [r3, #0]
   25854:	4b0d      	ldr	r3, [pc, #52]	; (2588c <extint_register_callback+0x60>)
   25856:	0092      	lsls	r2, r2, #2
   25858:	58d3      	ldr	r3, [r2, r3]
   2585a:	2b00      	cmp	r3, #0
   2585c:	d107      	bne.n	2586e <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   2585e:	1cfb      	adds	r3, r7, #3
   25860:	781a      	ldrb	r2, [r3, #0]
   25862:	4b0a      	ldr	r3, [pc, #40]	; (2588c <extint_register_callback+0x60>)
   25864:	0092      	lsls	r2, r2, #2
   25866:	6879      	ldr	r1, [r7, #4]
   25868:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   2586a:	2300      	movs	r3, #0
   2586c:	e00a      	b.n	25884 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   2586e:	1cfb      	adds	r3, r7, #3
   25870:	781a      	ldrb	r2, [r3, #0]
   25872:	4b06      	ldr	r3, [pc, #24]	; (2588c <extint_register_callback+0x60>)
   25874:	0092      	lsls	r2, r2, #2
   25876:	58d2      	ldr	r2, [r2, r3]
   25878:	687b      	ldr	r3, [r7, #4]
   2587a:	429a      	cmp	r2, r3
   2587c:	d101      	bne.n	25882 <extint_register_callback+0x56>
		return STATUS_OK;
   2587e:	2300      	movs	r3, #0
   25880:	e000      	b.n	25884 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   25882:	231d      	movs	r3, #29
}
   25884:	0018      	movs	r0, r3
   25886:	46bd      	mov	sp, r7
   25888:	b002      	add	sp, #8
   2588a:	bd80      	pop	{r7, pc}
   2588c:	200055d0 	.word	0x200055d0

00025890 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25890:	b580      	push	{r7, lr}
   25892:	b084      	sub	sp, #16
   25894:	af00      	add	r7, sp, #0
   25896:	0002      	movs	r2, r0
   25898:	1dfb      	adds	r3, r7, #7
   2589a:	701a      	strb	r2, [r3, #0]
   2589c:	1dbb      	adds	r3, r7, #6
   2589e:	1c0a      	adds	r2, r1, #0
   258a0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   258a2:	1dbb      	adds	r3, r7, #6
   258a4:	781b      	ldrb	r3, [r3, #0]
   258a6:	2b00      	cmp	r3, #0
   258a8:	d10e      	bne.n	258c8 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   258aa:	1dfb      	adds	r3, r7, #7
   258ac:	781b      	ldrb	r3, [r3, #0]
   258ae:	0018      	movs	r0, r3
   258b0:	4b08      	ldr	r3, [pc, #32]	; (258d4 <extint_chan_enable_callback+0x44>)
   258b2:	4798      	blx	r3
   258b4:	0003      	movs	r3, r0
   258b6:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   258b8:	1dfb      	adds	r3, r7, #7
   258ba:	781b      	ldrb	r3, [r3, #0]
   258bc:	2201      	movs	r2, #1
   258be:	409a      	lsls	r2, r3
   258c0:	68fb      	ldr	r3, [r7, #12]
   258c2:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   258c4:	2300      	movs	r3, #0
   258c6:	e000      	b.n	258ca <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   258c8:	2317      	movs	r3, #23
}
   258ca:	0018      	movs	r0, r3
   258cc:	46bd      	mov	sp, r7
   258ce:	b004      	add	sp, #16
   258d0:	bd80      	pop	{r7, pc}
   258d2:	46c0      	nop			; (mov r8, r8)
   258d4:	00025761 	.word	0x00025761

000258d8 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   258d8:	b580      	push	{r7, lr}
   258da:	b084      	sub	sp, #16
   258dc:	af00      	add	r7, sp, #0
   258de:	0002      	movs	r2, r0
   258e0:	1dfb      	adds	r3, r7, #7
   258e2:	701a      	strb	r2, [r3, #0]
   258e4:	1dbb      	adds	r3, r7, #6
   258e6:	1c0a      	adds	r2, r1, #0
   258e8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   258ea:	1dbb      	adds	r3, r7, #6
   258ec:	781b      	ldrb	r3, [r3, #0]
   258ee:	2b00      	cmp	r3, #0
   258f0:	d10e      	bne.n	25910 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   258f2:	1dfb      	adds	r3, r7, #7
   258f4:	781b      	ldrb	r3, [r3, #0]
   258f6:	0018      	movs	r0, r3
   258f8:	4b08      	ldr	r3, [pc, #32]	; (2591c <extint_chan_disable_callback+0x44>)
   258fa:	4798      	blx	r3
   258fc:	0003      	movs	r3, r0
   258fe:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   25900:	1dfb      	adds	r3, r7, #7
   25902:	781b      	ldrb	r3, [r3, #0]
   25904:	2201      	movs	r2, #1
   25906:	409a      	lsls	r2, r3
   25908:	68fb      	ldr	r3, [r7, #12]
   2590a:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   2590c:	2300      	movs	r3, #0
   2590e:	e000      	b.n	25912 <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   25910:	2317      	movs	r3, #23
}
   25912:	0018      	movs	r0, r3
   25914:	46bd      	mov	sp, r7
   25916:	b004      	add	sp, #16
   25918:	bd80      	pop	{r7, pc}
   2591a:	46c0      	nop			; (mov r8, r8)
   2591c:	00025761 	.word	0x00025761

00025920 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   25920:	b580      	push	{r7, lr}
   25922:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   25924:	4b15      	ldr	r3, [pc, #84]	; (2597c <EIC_Handler+0x5c>)
   25926:	2200      	movs	r2, #0
   25928:	701a      	strb	r2, [r3, #0]
   2592a:	e020      	b.n	2596e <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   2592c:	4b13      	ldr	r3, [pc, #76]	; (2597c <EIC_Handler+0x5c>)
   2592e:	781b      	ldrb	r3, [r3, #0]
   25930:	0018      	movs	r0, r3
   25932:	4b13      	ldr	r3, [pc, #76]	; (25980 <EIC_Handler+0x60>)
   25934:	4798      	blx	r3
   25936:	1e03      	subs	r3, r0, #0
   25938:	d013      	beq.n	25962 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   2593a:	4b10      	ldr	r3, [pc, #64]	; (2597c <EIC_Handler+0x5c>)
   2593c:	781b      	ldrb	r3, [r3, #0]
   2593e:	0018      	movs	r0, r3
   25940:	4b10      	ldr	r3, [pc, #64]	; (25984 <EIC_Handler+0x64>)
   25942:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   25944:	4b0d      	ldr	r3, [pc, #52]	; (2597c <EIC_Handler+0x5c>)
   25946:	781b      	ldrb	r3, [r3, #0]
   25948:	001a      	movs	r2, r3
   2594a:	4b0f      	ldr	r3, [pc, #60]	; (25988 <EIC_Handler+0x68>)
   2594c:	0092      	lsls	r2, r2, #2
   2594e:	58d3      	ldr	r3, [r2, r3]
   25950:	2b00      	cmp	r3, #0
   25952:	d006      	beq.n	25962 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   25954:	4b09      	ldr	r3, [pc, #36]	; (2597c <EIC_Handler+0x5c>)
   25956:	781b      	ldrb	r3, [r3, #0]
   25958:	001a      	movs	r2, r3
   2595a:	4b0b      	ldr	r3, [pc, #44]	; (25988 <EIC_Handler+0x68>)
   2595c:	0092      	lsls	r2, r2, #2
   2595e:	58d3      	ldr	r3, [r2, r3]
   25960:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   25962:	4b06      	ldr	r3, [pc, #24]	; (2597c <EIC_Handler+0x5c>)
   25964:	781b      	ldrb	r3, [r3, #0]
   25966:	3301      	adds	r3, #1
   25968:	b2da      	uxtb	r2, r3
   2596a:	4b04      	ldr	r3, [pc, #16]	; (2597c <EIC_Handler+0x5c>)
   2596c:	701a      	strb	r2, [r3, #0]
   2596e:	4b03      	ldr	r3, [pc, #12]	; (2597c <EIC_Handler+0x5c>)
   25970:	781b      	ldrb	r3, [r3, #0]
   25972:	2b0f      	cmp	r3, #15
   25974:	d9da      	bls.n	2592c <EIC_Handler+0xc>
			}
		}
	}
}
   25976:	46c0      	nop			; (mov r8, r8)
   25978:	46bd      	mov	sp, r7
   2597a:	bd80      	pop	{r7, pc}
   2597c:	200055cc 	.word	0x200055cc
   25980:	000257ad 	.word	0x000257ad
   25984:	000257f1 	.word	0x000257f1
   25988:	200055d0 	.word	0x200055d0

0002598c <system_gclk_chan_get_config_defaults>:
{
   2598c:	b580      	push	{r7, lr}
   2598e:	b082      	sub	sp, #8
   25990:	af00      	add	r7, sp, #0
   25992:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   25994:	687b      	ldr	r3, [r7, #4]
   25996:	2200      	movs	r2, #0
   25998:	701a      	strb	r2, [r3, #0]
}
   2599a:	46c0      	nop			; (mov r8, r8)
   2599c:	46bd      	mov	sp, r7
   2599e:	b002      	add	sp, #8
   259a0:	bd80      	pop	{r7, pc}
	...

000259a4 <system_apb_clock_set_mask>:
{
   259a4:	b580      	push	{r7, lr}
   259a6:	b082      	sub	sp, #8
   259a8:	af00      	add	r7, sp, #0
   259aa:	0002      	movs	r2, r0
   259ac:	6039      	str	r1, [r7, #0]
   259ae:	1dfb      	adds	r3, r7, #7
   259b0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   259b2:	1dfb      	adds	r3, r7, #7
   259b4:	781b      	ldrb	r3, [r3, #0]
   259b6:	2b01      	cmp	r3, #1
   259b8:	d00a      	beq.n	259d0 <system_apb_clock_set_mask+0x2c>
   259ba:	2b02      	cmp	r3, #2
   259bc:	d00f      	beq.n	259de <system_apb_clock_set_mask+0x3a>
   259be:	2b00      	cmp	r3, #0
   259c0:	d114      	bne.n	259ec <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   259c2:	4b0e      	ldr	r3, [pc, #56]	; (259fc <system_apb_clock_set_mask+0x58>)
   259c4:	4a0d      	ldr	r2, [pc, #52]	; (259fc <system_apb_clock_set_mask+0x58>)
   259c6:	6991      	ldr	r1, [r2, #24]
   259c8:	683a      	ldr	r2, [r7, #0]
   259ca:	430a      	orrs	r2, r1
   259cc:	619a      	str	r2, [r3, #24]
			break;
   259ce:	e00f      	b.n	259f0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   259d0:	4b0a      	ldr	r3, [pc, #40]	; (259fc <system_apb_clock_set_mask+0x58>)
   259d2:	4a0a      	ldr	r2, [pc, #40]	; (259fc <system_apb_clock_set_mask+0x58>)
   259d4:	69d1      	ldr	r1, [r2, #28]
   259d6:	683a      	ldr	r2, [r7, #0]
   259d8:	430a      	orrs	r2, r1
   259da:	61da      	str	r2, [r3, #28]
			break;
   259dc:	e008      	b.n	259f0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   259de:	4b07      	ldr	r3, [pc, #28]	; (259fc <system_apb_clock_set_mask+0x58>)
   259e0:	4a06      	ldr	r2, [pc, #24]	; (259fc <system_apb_clock_set_mask+0x58>)
   259e2:	6a11      	ldr	r1, [r2, #32]
   259e4:	683a      	ldr	r2, [r7, #0]
   259e6:	430a      	orrs	r2, r1
   259e8:	621a      	str	r2, [r3, #32]
			break;
   259ea:	e001      	b.n	259f0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   259ec:	2317      	movs	r3, #23
   259ee:	e000      	b.n	259f2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   259f0:	2300      	movs	r3, #0
}
   259f2:	0018      	movs	r0, r3
   259f4:	46bd      	mov	sp, r7
   259f6:	b002      	add	sp, #8
   259f8:	bd80      	pop	{r7, pc}
   259fa:	46c0      	nop			; (mov r8, r8)
   259fc:	40000400 	.word	0x40000400

00025a00 <system_pinmux_get_config_defaults>:
{
   25a00:	b580      	push	{r7, lr}
   25a02:	b082      	sub	sp, #8
   25a04:	af00      	add	r7, sp, #0
   25a06:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   25a08:	687b      	ldr	r3, [r7, #4]
   25a0a:	2280      	movs	r2, #128	; 0x80
   25a0c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   25a0e:	687b      	ldr	r3, [r7, #4]
   25a10:	2200      	movs	r2, #0
   25a12:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   25a14:	687b      	ldr	r3, [r7, #4]
   25a16:	2201      	movs	r2, #1
   25a18:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   25a1a:	687b      	ldr	r3, [r7, #4]
   25a1c:	2200      	movs	r2, #0
   25a1e:	70da      	strb	r2, [r3, #3]
}
   25a20:	46c0      	nop			; (mov r8, r8)
   25a22:	46bd      	mov	sp, r7
   25a24:	b002      	add	sp, #8
   25a26:	bd80      	pop	{r7, pc}

00025a28 <system_interrupt_enable>:
{
   25a28:	b580      	push	{r7, lr}
   25a2a:	b082      	sub	sp, #8
   25a2c:	af00      	add	r7, sp, #0
   25a2e:	0002      	movs	r2, r0
   25a30:	1dfb      	adds	r3, r7, #7
   25a32:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   25a34:	4b06      	ldr	r3, [pc, #24]	; (25a50 <system_interrupt_enable+0x28>)
   25a36:	1dfa      	adds	r2, r7, #7
   25a38:	7812      	ldrb	r2, [r2, #0]
   25a3a:	0011      	movs	r1, r2
   25a3c:	221f      	movs	r2, #31
   25a3e:	400a      	ands	r2, r1
   25a40:	2101      	movs	r1, #1
   25a42:	4091      	lsls	r1, r2
   25a44:	000a      	movs	r2, r1
   25a46:	601a      	str	r2, [r3, #0]
}
   25a48:	46c0      	nop			; (mov r8, r8)
   25a4a:	46bd      	mov	sp, r7
   25a4c:	b002      	add	sp, #8
   25a4e:	bd80      	pop	{r7, pc}
   25a50:	e000e100 	.word	0xe000e100

00025a54 <_extint_get_eic_from_channel>:
{
   25a54:	b580      	push	{r7, lr}
   25a56:	b084      	sub	sp, #16
   25a58:	af00      	add	r7, sp, #0
   25a5a:	0002      	movs	r2, r0
   25a5c:	1dfb      	adds	r3, r7, #7
   25a5e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   25a60:	230f      	movs	r3, #15
   25a62:	18fb      	adds	r3, r7, r3
   25a64:	1dfa      	adds	r2, r7, #7
   25a66:	7812      	ldrb	r2, [r2, #0]
   25a68:	0952      	lsrs	r2, r2, #5
   25a6a:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   25a6c:	230f      	movs	r3, #15
   25a6e:	18fb      	adds	r3, r7, r3
   25a70:	781b      	ldrb	r3, [r3, #0]
   25a72:	2b00      	cmp	r3, #0
   25a74:	d10c      	bne.n	25a90 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25a76:	4b09      	ldr	r3, [pc, #36]	; (25a9c <_extint_get_eic_from_channel+0x48>)
   25a78:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   25a7a:	230f      	movs	r3, #15
   25a7c:	18fb      	adds	r3, r7, r3
   25a7e:	781b      	ldrb	r3, [r3, #0]
   25a80:	009b      	lsls	r3, r3, #2
   25a82:	2210      	movs	r2, #16
   25a84:	4694      	mov	ip, r2
   25a86:	44bc      	add	ip, r7
   25a88:	4463      	add	r3, ip
   25a8a:	3b08      	subs	r3, #8
   25a8c:	681b      	ldr	r3, [r3, #0]
   25a8e:	e000      	b.n	25a92 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   25a90:	2300      	movs	r3, #0
}
   25a92:	0018      	movs	r0, r3
   25a94:	46bd      	mov	sp, r7
   25a96:	b004      	add	sp, #16
   25a98:	bd80      	pop	{r7, pc}
   25a9a:	46c0      	nop			; (mov r8, r8)
   25a9c:	40001800 	.word	0x40001800

00025aa0 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   25aa0:	b580      	push	{r7, lr}
   25aa2:	b082      	sub	sp, #8
   25aa4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25aa6:	4b0f      	ldr	r3, [pc, #60]	; (25ae4 <extint_is_syncing+0x44>)
   25aa8:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25aaa:	2300      	movs	r3, #0
   25aac:	607b      	str	r3, [r7, #4]
   25aae:	e011      	b.n	25ad4 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   25ab0:	687b      	ldr	r3, [r7, #4]
   25ab2:	009b      	lsls	r3, r3, #2
   25ab4:	2208      	movs	r2, #8
   25ab6:	4694      	mov	ip, r2
   25ab8:	44bc      	add	ip, r7
   25aba:	4463      	add	r3, ip
   25abc:	3b08      	subs	r3, #8
   25abe:	681b      	ldr	r3, [r3, #0]
   25ac0:	785b      	ldrb	r3, [r3, #1]
   25ac2:	b2db      	uxtb	r3, r3
   25ac4:	b25b      	sxtb	r3, r3
   25ac6:	2b00      	cmp	r3, #0
   25ac8:	da01      	bge.n	25ace <extint_is_syncing+0x2e>
			return true;
   25aca:	2301      	movs	r3, #1
   25acc:	e006      	b.n	25adc <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25ace:	687b      	ldr	r3, [r7, #4]
   25ad0:	3301      	adds	r3, #1
   25ad2:	607b      	str	r3, [r7, #4]
   25ad4:	687b      	ldr	r3, [r7, #4]
   25ad6:	2b00      	cmp	r3, #0
   25ad8:	d0ea      	beq.n	25ab0 <extint_is_syncing+0x10>
		}
	}
	return false;
   25ada:	2300      	movs	r3, #0
}
   25adc:	0018      	movs	r0, r3
   25ade:	46bd      	mov	sp, r7
   25ae0:	b002      	add	sp, #8
   25ae2:	bd80      	pop	{r7, pc}
   25ae4:	40001800 	.word	0x40001800

00025ae8 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   25ae8:	b580      	push	{r7, lr}
   25aea:	b084      	sub	sp, #16
   25aec:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25aee:	4b2d      	ldr	r3, [pc, #180]	; (25ba4 <_system_extint_init+0xbc>)
   25af0:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   25af2:	2140      	movs	r1, #64	; 0x40
   25af4:	2000      	movs	r0, #0
   25af6:	4b2c      	ldr	r3, [pc, #176]	; (25ba8 <_system_extint_init+0xc0>)
   25af8:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   25afa:	003b      	movs	r3, r7
   25afc:	0018      	movs	r0, r3
   25afe:	4b2b      	ldr	r3, [pc, #172]	; (25bac <_system_extint_init+0xc4>)
   25b00:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   25b02:	003b      	movs	r3, r7
   25b04:	2200      	movs	r2, #0
   25b06:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   25b08:	003b      	movs	r3, r7
   25b0a:	0019      	movs	r1, r3
   25b0c:	2005      	movs	r0, #5
   25b0e:	4b28      	ldr	r3, [pc, #160]	; (25bb0 <_system_extint_init+0xc8>)
   25b10:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   25b12:	2005      	movs	r0, #5
   25b14:	4b27      	ldr	r3, [pc, #156]	; (25bb4 <_system_extint_init+0xcc>)
   25b16:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25b18:	2300      	movs	r3, #0
   25b1a:	60fb      	str	r3, [r7, #12]
   25b1c:	e018      	b.n	25b50 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   25b1e:	68fb      	ldr	r3, [r7, #12]
   25b20:	009b      	lsls	r3, r3, #2
   25b22:	2210      	movs	r2, #16
   25b24:	4694      	mov	ip, r2
   25b26:	44bc      	add	ip, r7
   25b28:	4463      	add	r3, ip
   25b2a:	3b0c      	subs	r3, #12
   25b2c:	681a      	ldr	r2, [r3, #0]
   25b2e:	68fb      	ldr	r3, [r7, #12]
   25b30:	009b      	lsls	r3, r3, #2
   25b32:	2110      	movs	r1, #16
   25b34:	468c      	mov	ip, r1
   25b36:	44bc      	add	ip, r7
   25b38:	4463      	add	r3, ip
   25b3a:	3b0c      	subs	r3, #12
   25b3c:	681b      	ldr	r3, [r3, #0]
   25b3e:	781b      	ldrb	r3, [r3, #0]
   25b40:	b2db      	uxtb	r3, r3
   25b42:	2101      	movs	r1, #1
   25b44:	430b      	orrs	r3, r1
   25b46:	b2db      	uxtb	r3, r3
   25b48:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25b4a:	68fb      	ldr	r3, [r7, #12]
   25b4c:	3301      	adds	r3, #1
   25b4e:	60fb      	str	r3, [r7, #12]
   25b50:	68fb      	ldr	r3, [r7, #12]
   25b52:	2b00      	cmp	r3, #0
   25b54:	d0e3      	beq.n	25b1e <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   25b56:	46c0      	nop			; (mov r8, r8)
   25b58:	4b17      	ldr	r3, [pc, #92]	; (25bb8 <_system_extint_init+0xd0>)
   25b5a:	4798      	blx	r3
   25b5c:	1e03      	subs	r3, r0, #0
   25b5e:	d1fb      	bne.n	25b58 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   25b60:	230b      	movs	r3, #11
   25b62:	18fb      	adds	r3, r7, r3
   25b64:	2200      	movs	r2, #0
   25b66:	701a      	strb	r2, [r3, #0]
   25b68:	e00d      	b.n	25b86 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   25b6a:	230b      	movs	r3, #11
   25b6c:	18fb      	adds	r3, r7, r3
   25b6e:	781a      	ldrb	r2, [r3, #0]
   25b70:	4b12      	ldr	r3, [pc, #72]	; (25bbc <_system_extint_init+0xd4>)
   25b72:	0092      	lsls	r2, r2, #2
   25b74:	2100      	movs	r1, #0
   25b76:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   25b78:	230b      	movs	r3, #11
   25b7a:	18fb      	adds	r3, r7, r3
   25b7c:	781a      	ldrb	r2, [r3, #0]
   25b7e:	230b      	movs	r3, #11
   25b80:	18fb      	adds	r3, r7, r3
   25b82:	3201      	adds	r2, #1
   25b84:	701a      	strb	r2, [r3, #0]
   25b86:	230b      	movs	r3, #11
   25b88:	18fb      	adds	r3, r7, r3
   25b8a:	781b      	ldrb	r3, [r3, #0]
   25b8c:	2b0f      	cmp	r3, #15
   25b8e:	d9ec      	bls.n	25b6a <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   25b90:	2004      	movs	r0, #4
   25b92:	4b0b      	ldr	r3, [pc, #44]	; (25bc0 <_system_extint_init+0xd8>)
   25b94:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   25b96:	4b0b      	ldr	r3, [pc, #44]	; (25bc4 <_system_extint_init+0xdc>)
   25b98:	4798      	blx	r3
}
   25b9a:	46c0      	nop			; (mov r8, r8)
   25b9c:	46bd      	mov	sp, r7
   25b9e:	b004      	add	sp, #16
   25ba0:	bd80      	pop	{r7, pc}
   25ba2:	46c0      	nop			; (mov r8, r8)
   25ba4:	40001800 	.word	0x40001800
   25ba8:	000259a5 	.word	0x000259a5
   25bac:	0002598d 	.word	0x0002598d
   25bb0:	00029215 	.word	0x00029215
   25bb4:	00029259 	.word	0x00029259
   25bb8:	00025aa1 	.word	0x00025aa1
   25bbc:	200055d0 	.word	0x200055d0
   25bc0:	00025a29 	.word	0x00025a29
   25bc4:	00025bc9 	.word	0x00025bc9

00025bc8 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   25bc8:	b580      	push	{r7, lr}
   25bca:	b082      	sub	sp, #8
   25bcc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25bce:	4b15      	ldr	r3, [pc, #84]	; (25c24 <_extint_enable+0x5c>)
   25bd0:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25bd2:	2300      	movs	r3, #0
   25bd4:	607b      	str	r3, [r7, #4]
   25bd6:	e018      	b.n	25c0a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   25bd8:	687b      	ldr	r3, [r7, #4]
   25bda:	009b      	lsls	r3, r3, #2
   25bdc:	2208      	movs	r2, #8
   25bde:	4694      	mov	ip, r2
   25be0:	44bc      	add	ip, r7
   25be2:	4463      	add	r3, ip
   25be4:	3b08      	subs	r3, #8
   25be6:	681a      	ldr	r2, [r3, #0]
   25be8:	687b      	ldr	r3, [r7, #4]
   25bea:	009b      	lsls	r3, r3, #2
   25bec:	2108      	movs	r1, #8
   25bee:	468c      	mov	ip, r1
   25bf0:	44bc      	add	ip, r7
   25bf2:	4463      	add	r3, ip
   25bf4:	3b08      	subs	r3, #8
   25bf6:	681b      	ldr	r3, [r3, #0]
   25bf8:	781b      	ldrb	r3, [r3, #0]
   25bfa:	b2db      	uxtb	r3, r3
   25bfc:	2102      	movs	r1, #2
   25bfe:	430b      	orrs	r3, r1
   25c00:	b2db      	uxtb	r3, r3
   25c02:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25c04:	687b      	ldr	r3, [r7, #4]
   25c06:	3301      	adds	r3, #1
   25c08:	607b      	str	r3, [r7, #4]
   25c0a:	687b      	ldr	r3, [r7, #4]
   25c0c:	2b00      	cmp	r3, #0
   25c0e:	d0e3      	beq.n	25bd8 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   25c10:	46c0      	nop			; (mov r8, r8)
   25c12:	4b05      	ldr	r3, [pc, #20]	; (25c28 <_extint_enable+0x60>)
   25c14:	4798      	blx	r3
   25c16:	1e03      	subs	r3, r0, #0
   25c18:	d1fb      	bne.n	25c12 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   25c1a:	46c0      	nop			; (mov r8, r8)
   25c1c:	46bd      	mov	sp, r7
   25c1e:	b002      	add	sp, #8
   25c20:	bd80      	pop	{r7, pc}
   25c22:	46c0      	nop			; (mov r8, r8)
   25c24:	40001800 	.word	0x40001800
   25c28:	00025aa1 	.word	0x00025aa1

00025c2c <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   25c2c:	b580      	push	{r7, lr}
   25c2e:	b082      	sub	sp, #8
   25c30:	af00      	add	r7, sp, #0
   25c32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   25c34:	687b      	ldr	r3, [r7, #4]
   25c36:	2200      	movs	r2, #0
   25c38:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   25c3a:	687b      	ldr	r3, [r7, #4]
   25c3c:	2200      	movs	r2, #0
   25c3e:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   25c40:	687b      	ldr	r3, [r7, #4]
   25c42:	2201      	movs	r2, #1
   25c44:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   25c46:	687b      	ldr	r3, [r7, #4]
   25c48:	2201      	movs	r2, #1
   25c4a:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   25c4c:	687b      	ldr	r3, [r7, #4]
   25c4e:	2200      	movs	r2, #0
   25c50:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   25c52:	687b      	ldr	r3, [r7, #4]
   25c54:	2202      	movs	r2, #2
   25c56:	72da      	strb	r2, [r3, #11]
}
   25c58:	46c0      	nop			; (mov r8, r8)
   25c5a:	46bd      	mov	sp, r7
   25c5c:	b002      	add	sp, #8
   25c5e:	bd80      	pop	{r7, pc}

00025c60 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   25c60:	b580      	push	{r7, lr}
   25c62:	b086      	sub	sp, #24
   25c64:	af00      	add	r7, sp, #0
   25c66:	0002      	movs	r2, r0
   25c68:	6039      	str	r1, [r7, #0]
   25c6a:	1dfb      	adds	r3, r7, #7
   25c6c:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   25c6e:	2308      	movs	r3, #8
   25c70:	18fb      	adds	r3, r7, r3
   25c72:	0018      	movs	r0, r3
   25c74:	4b36      	ldr	r3, [pc, #216]	; (25d50 <extint_chan_set_config+0xf0>)
   25c76:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   25c78:	683b      	ldr	r3, [r7, #0]
   25c7a:	685b      	ldr	r3, [r3, #4]
   25c7c:	b2da      	uxtb	r2, r3
   25c7e:	2308      	movs	r3, #8
   25c80:	18fb      	adds	r3, r7, r3
   25c82:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   25c84:	2308      	movs	r3, #8
   25c86:	18fb      	adds	r3, r7, r3
   25c88:	2200      	movs	r2, #0
   25c8a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   25c8c:	683b      	ldr	r3, [r7, #0]
   25c8e:	7a1a      	ldrb	r2, [r3, #8]
   25c90:	2308      	movs	r3, #8
   25c92:	18fb      	adds	r3, r7, r3
   25c94:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   25c96:	683b      	ldr	r3, [r7, #0]
   25c98:	681b      	ldr	r3, [r3, #0]
   25c9a:	b2db      	uxtb	r3, r3
   25c9c:	2208      	movs	r2, #8
   25c9e:	18ba      	adds	r2, r7, r2
   25ca0:	0011      	movs	r1, r2
   25ca2:	0018      	movs	r0, r3
   25ca4:	4b2b      	ldr	r3, [pc, #172]	; (25d54 <extint_chan_set_config+0xf4>)
   25ca6:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   25ca8:	1dfb      	adds	r3, r7, #7
   25caa:	781b      	ldrb	r3, [r3, #0]
   25cac:	0018      	movs	r0, r3
   25cae:	4b2a      	ldr	r3, [pc, #168]	; (25d58 <extint_chan_set_config+0xf8>)
   25cb0:	4798      	blx	r3
   25cb2:	0003      	movs	r3, r0
   25cb4:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   25cb6:	1dfb      	adds	r3, r7, #7
   25cb8:	781b      	ldrb	r3, [r3, #0]
   25cba:	2207      	movs	r2, #7
   25cbc:	4013      	ands	r3, r2
   25cbe:	009b      	lsls	r3, r3, #2
   25cc0:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   25cc2:	683b      	ldr	r3, [r7, #0]
   25cc4:	7adb      	ldrb	r3, [r3, #11]
   25cc6:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   25cc8:	683b      	ldr	r3, [r7, #0]
   25cca:	7a9b      	ldrb	r3, [r3, #10]
   25ccc:	2b00      	cmp	r3, #0
   25cce:	d003      	beq.n	25cd8 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   25cd0:	697b      	ldr	r3, [r7, #20]
   25cd2:	2208      	movs	r2, #8
   25cd4:	4313      	orrs	r3, r2
   25cd6:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   25cd8:	1dfb      	adds	r3, r7, #7
   25cda:	781b      	ldrb	r3, [r3, #0]
   25cdc:	08db      	lsrs	r3, r3, #3
   25cde:	b2db      	uxtb	r3, r3
   25ce0:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   25ce2:	1dfb      	adds	r3, r7, #7
   25ce4:	781b      	ldrb	r3, [r3, #0]
   25ce6:	08db      	lsrs	r3, r3, #3
   25ce8:	b2db      	uxtb	r3, r3
   25cea:	001a      	movs	r2, r3
   25cec:	693b      	ldr	r3, [r7, #16]
   25cee:	3206      	adds	r2, #6
   25cf0:	0092      	lsls	r2, r2, #2
   25cf2:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   25cf4:	210f      	movs	r1, #15
   25cf6:	68fa      	ldr	r2, [r7, #12]
   25cf8:	4091      	lsls	r1, r2
   25cfa:	000a      	movs	r2, r1
   25cfc:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   25cfe:	401a      	ands	r2, r3
			(new_config << config_pos);
   25d00:	6979      	ldr	r1, [r7, #20]
   25d02:	68fb      	ldr	r3, [r7, #12]
   25d04:	4099      	lsls	r1, r3
   25d06:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   25d08:	431a      	orrs	r2, r3
   25d0a:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   25d0c:	693b      	ldr	r3, [r7, #16]
   25d0e:	1d82      	adds	r2, r0, #6
   25d10:	0092      	lsls	r2, r2, #2
   25d12:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   25d14:	683b      	ldr	r3, [r7, #0]
   25d16:	7a5b      	ldrb	r3, [r3, #9]
   25d18:	2b00      	cmp	r3, #0
   25d1a:	d00a      	beq.n	25d32 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   25d1c:	693b      	ldr	r3, [r7, #16]
   25d1e:	695a      	ldr	r2, [r3, #20]
   25d20:	1dfb      	adds	r3, r7, #7
   25d22:	781b      	ldrb	r3, [r3, #0]
   25d24:	2101      	movs	r1, #1
   25d26:	4099      	lsls	r1, r3
   25d28:	000b      	movs	r3, r1
   25d2a:	431a      	orrs	r2, r3
   25d2c:	693b      	ldr	r3, [r7, #16]
   25d2e:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   25d30:	e00a      	b.n	25d48 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   25d32:	693b      	ldr	r3, [r7, #16]
   25d34:	695b      	ldr	r3, [r3, #20]
   25d36:	1dfa      	adds	r2, r7, #7
   25d38:	7812      	ldrb	r2, [r2, #0]
   25d3a:	2101      	movs	r1, #1
   25d3c:	4091      	lsls	r1, r2
   25d3e:	000a      	movs	r2, r1
   25d40:	43d2      	mvns	r2, r2
   25d42:	401a      	ands	r2, r3
   25d44:	693b      	ldr	r3, [r7, #16]
   25d46:	615a      	str	r2, [r3, #20]
}
   25d48:	46c0      	nop			; (mov r8, r8)
   25d4a:	46bd      	mov	sp, r7
   25d4c:	b006      	add	sp, #24
   25d4e:	bd80      	pop	{r7, pc}
   25d50:	00025a01 	.word	0x00025a01
   25d54:	00029575 	.word	0x00029575
   25d58:	00025a55 	.word	0x00025a55

00025d5c <system_pinmux_get_config_defaults>:
{
   25d5c:	b580      	push	{r7, lr}
   25d5e:	b082      	sub	sp, #8
   25d60:	af00      	add	r7, sp, #0
   25d62:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   25d64:	687b      	ldr	r3, [r7, #4]
   25d66:	2280      	movs	r2, #128	; 0x80
   25d68:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   25d6a:	687b      	ldr	r3, [r7, #4]
   25d6c:	2200      	movs	r2, #0
   25d6e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   25d70:	687b      	ldr	r3, [r7, #4]
   25d72:	2201      	movs	r2, #1
   25d74:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   25d76:	687b      	ldr	r3, [r7, #4]
   25d78:	2200      	movs	r2, #0
   25d7a:	70da      	strb	r2, [r3, #3]
}
   25d7c:	46c0      	nop			; (mov r8, r8)
   25d7e:	46bd      	mov	sp, r7
   25d80:	b002      	add	sp, #8
   25d82:	bd80      	pop	{r7, pc}

00025d84 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   25d84:	b580      	push	{r7, lr}
   25d86:	b084      	sub	sp, #16
   25d88:	af00      	add	r7, sp, #0
   25d8a:	0002      	movs	r2, r0
   25d8c:	6039      	str	r1, [r7, #0]
   25d8e:	1dfb      	adds	r3, r7, #7
   25d90:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   25d92:	230c      	movs	r3, #12
   25d94:	18fb      	adds	r3, r7, r3
   25d96:	0018      	movs	r0, r3
   25d98:	4b10      	ldr	r3, [pc, #64]	; (25ddc <port_pin_set_config+0x58>)
   25d9a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   25d9c:	230c      	movs	r3, #12
   25d9e:	18fb      	adds	r3, r7, r3
   25da0:	2280      	movs	r2, #128	; 0x80
   25da2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   25da4:	683b      	ldr	r3, [r7, #0]
   25da6:	781a      	ldrb	r2, [r3, #0]
   25da8:	230c      	movs	r3, #12
   25daa:	18fb      	adds	r3, r7, r3
   25dac:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   25dae:	683b      	ldr	r3, [r7, #0]
   25db0:	785a      	ldrb	r2, [r3, #1]
   25db2:	230c      	movs	r3, #12
   25db4:	18fb      	adds	r3, r7, r3
   25db6:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   25db8:	683b      	ldr	r3, [r7, #0]
   25dba:	789a      	ldrb	r2, [r3, #2]
   25dbc:	230c      	movs	r3, #12
   25dbe:	18fb      	adds	r3, r7, r3
   25dc0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   25dc2:	230c      	movs	r3, #12
   25dc4:	18fa      	adds	r2, r7, r3
   25dc6:	1dfb      	adds	r3, r7, #7
   25dc8:	781b      	ldrb	r3, [r3, #0]
   25dca:	0011      	movs	r1, r2
   25dcc:	0018      	movs	r0, r3
   25dce:	4b04      	ldr	r3, [pc, #16]	; (25de0 <port_pin_set_config+0x5c>)
   25dd0:	4798      	blx	r3
}
   25dd2:	46c0      	nop			; (mov r8, r8)
   25dd4:	46bd      	mov	sp, r7
   25dd6:	b004      	add	sp, #16
   25dd8:	bd80      	pop	{r7, pc}
   25dda:	46c0      	nop			; (mov r8, r8)
   25ddc:	00025d5d 	.word	0x00025d5d
   25de0:	00029575 	.word	0x00029575

00025de4 <system_gclk_chan_get_config_defaults>:
{
   25de4:	b580      	push	{r7, lr}
   25de6:	b082      	sub	sp, #8
   25de8:	af00      	add	r7, sp, #0
   25dea:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   25dec:	687b      	ldr	r3, [r7, #4]
   25dee:	2200      	movs	r2, #0
   25df0:	701a      	strb	r2, [r3, #0]
}
   25df2:	46c0      	nop			; (mov r8, r8)
   25df4:	46bd      	mov	sp, r7
   25df6:	b002      	add	sp, #8
   25df8:	bd80      	pop	{r7, pc}
	...

00025dfc <system_apb_clock_set_mask>:
{
   25dfc:	b580      	push	{r7, lr}
   25dfe:	b082      	sub	sp, #8
   25e00:	af00      	add	r7, sp, #0
   25e02:	0002      	movs	r2, r0
   25e04:	6039      	str	r1, [r7, #0]
   25e06:	1dfb      	adds	r3, r7, #7
   25e08:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   25e0a:	1dfb      	adds	r3, r7, #7
   25e0c:	781b      	ldrb	r3, [r3, #0]
   25e0e:	2b01      	cmp	r3, #1
   25e10:	d00a      	beq.n	25e28 <system_apb_clock_set_mask+0x2c>
   25e12:	2b02      	cmp	r3, #2
   25e14:	d00f      	beq.n	25e36 <system_apb_clock_set_mask+0x3a>
   25e16:	2b00      	cmp	r3, #0
   25e18:	d114      	bne.n	25e44 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   25e1a:	4b0e      	ldr	r3, [pc, #56]	; (25e54 <system_apb_clock_set_mask+0x58>)
   25e1c:	4a0d      	ldr	r2, [pc, #52]	; (25e54 <system_apb_clock_set_mask+0x58>)
   25e1e:	6991      	ldr	r1, [r2, #24]
   25e20:	683a      	ldr	r2, [r7, #0]
   25e22:	430a      	orrs	r2, r1
   25e24:	619a      	str	r2, [r3, #24]
			break;
   25e26:	e00f      	b.n	25e48 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   25e28:	4b0a      	ldr	r3, [pc, #40]	; (25e54 <system_apb_clock_set_mask+0x58>)
   25e2a:	4a0a      	ldr	r2, [pc, #40]	; (25e54 <system_apb_clock_set_mask+0x58>)
   25e2c:	69d1      	ldr	r1, [r2, #28]
   25e2e:	683a      	ldr	r2, [r7, #0]
   25e30:	430a      	orrs	r2, r1
   25e32:	61da      	str	r2, [r3, #28]
			break;
   25e34:	e008      	b.n	25e48 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   25e36:	4b07      	ldr	r3, [pc, #28]	; (25e54 <system_apb_clock_set_mask+0x58>)
   25e38:	4a06      	ldr	r2, [pc, #24]	; (25e54 <system_apb_clock_set_mask+0x58>)
   25e3a:	6a11      	ldr	r1, [r2, #32]
   25e3c:	683a      	ldr	r2, [r7, #0]
   25e3e:	430a      	orrs	r2, r1
   25e40:	621a      	str	r2, [r3, #32]
			break;
   25e42:	e001      	b.n	25e48 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   25e44:	2317      	movs	r3, #23
   25e46:	e000      	b.n	25e4a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   25e48:	2300      	movs	r3, #0
}
   25e4a:	0018      	movs	r0, r3
   25e4c:	46bd      	mov	sp, r7
   25e4e:	b002      	add	sp, #8
   25e50:	bd80      	pop	{r7, pc}
   25e52:	46c0      	nop			; (mov r8, r8)
   25e54:	40000400 	.word	0x40000400

00025e58 <system_interrupt_enable>:
{
   25e58:	b580      	push	{r7, lr}
   25e5a:	b082      	sub	sp, #8
   25e5c:	af00      	add	r7, sp, #0
   25e5e:	0002      	movs	r2, r0
   25e60:	1dfb      	adds	r3, r7, #7
   25e62:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   25e64:	4b06      	ldr	r3, [pc, #24]	; (25e80 <system_interrupt_enable+0x28>)
   25e66:	1dfa      	adds	r2, r7, #7
   25e68:	7812      	ldrb	r2, [r2, #0]
   25e6a:	0011      	movs	r1, r2
   25e6c:	221f      	movs	r2, #31
   25e6e:	400a      	ands	r2, r1
   25e70:	2101      	movs	r1, #1
   25e72:	4091      	lsls	r1, r2
   25e74:	000a      	movs	r2, r1
   25e76:	601a      	str	r2, [r3, #0]
}
   25e78:	46c0      	nop			; (mov r8, r8)
   25e7a:	46bd      	mov	sp, r7
   25e7c:	b002      	add	sp, #8
   25e7e:	bd80      	pop	{r7, pc}
   25e80:	e000e100 	.word	0xe000e100

00025e84 <system_interrupt_disable>:
{
   25e84:	b580      	push	{r7, lr}
   25e86:	b082      	sub	sp, #8
   25e88:	af00      	add	r7, sp, #0
   25e8a:	0002      	movs	r2, r0
   25e8c:	1dfb      	adds	r3, r7, #7
   25e8e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   25e90:	4a07      	ldr	r2, [pc, #28]	; (25eb0 <system_interrupt_disable+0x2c>)
   25e92:	1dfb      	adds	r3, r7, #7
   25e94:	781b      	ldrb	r3, [r3, #0]
   25e96:	0019      	movs	r1, r3
   25e98:	231f      	movs	r3, #31
   25e9a:	400b      	ands	r3, r1
   25e9c:	2101      	movs	r1, #1
   25e9e:	4099      	lsls	r1, r3
   25ea0:	000b      	movs	r3, r1
   25ea2:	0019      	movs	r1, r3
   25ea4:	2380      	movs	r3, #128	; 0x80
   25ea6:	50d1      	str	r1, [r2, r3]
}
   25ea8:	46c0      	nop			; (mov r8, r8)
   25eaa:	46bd      	mov	sp, r7
   25eac:	b002      	add	sp, #8
   25eae:	bd80      	pop	{r7, pc}
   25eb0:	e000e100 	.word	0xe000e100

00025eb4 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   25eb4:	b580      	push	{r7, lr}
   25eb6:	b084      	sub	sp, #16
   25eb8:	af00      	add	r7, sp, #0
   25eba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25ebc:	687b      	ldr	r3, [r7, #4]
   25ebe:	681b      	ldr	r3, [r3, #0]
   25ec0:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   25ec2:	68fb      	ldr	r3, [r7, #12]
   25ec4:	7a9b      	ldrb	r3, [r3, #10]
   25ec6:	b2db      	uxtb	r3, r3
   25ec8:	b25b      	sxtb	r3, r3
   25eca:	2b00      	cmp	r3, #0
   25ecc:	da01      	bge.n	25ed2 <rtc_calendar_is_syncing+0x1e>
                return true;
   25ece:	2301      	movs	r3, #1
   25ed0:	e000      	b.n	25ed4 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   25ed2:	2300      	movs	r3, #0
}
   25ed4:	0018      	movs	r0, r3
   25ed6:	46bd      	mov	sp, r7
   25ed8:	b004      	add	sp, #16
   25eda:	bd80      	pop	{r7, pc}

00025edc <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   25edc:	b580      	push	{r7, lr}
   25ede:	b084      	sub	sp, #16
   25ee0:	af00      	add	r7, sp, #0
   25ee2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25ee4:	687b      	ldr	r3, [r7, #4]
   25ee6:	681b      	ldr	r3, [r3, #0]
   25ee8:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   25eea:	2003      	movs	r0, #3
   25eec:	4b0a      	ldr	r3, [pc, #40]	; (25f18 <rtc_calendar_enable+0x3c>)
   25eee:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   25ef0:	46c0      	nop			; (mov r8, r8)
   25ef2:	687b      	ldr	r3, [r7, #4]
   25ef4:	0018      	movs	r0, r3
   25ef6:	4b09      	ldr	r3, [pc, #36]	; (25f1c <rtc_calendar_enable+0x40>)
   25ef8:	4798      	blx	r3
   25efa:	1e03      	subs	r3, r0, #0
   25efc:	d1f9      	bne.n	25ef2 <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   25efe:	68fb      	ldr	r3, [r7, #12]
   25f00:	881b      	ldrh	r3, [r3, #0]
   25f02:	b29b      	uxth	r3, r3
   25f04:	2202      	movs	r2, #2
   25f06:	4313      	orrs	r3, r2
   25f08:	b29a      	uxth	r2, r3
   25f0a:	68fb      	ldr	r3, [r7, #12]
   25f0c:	801a      	strh	r2, [r3, #0]
}
   25f0e:	46c0      	nop			; (mov r8, r8)
   25f10:	46bd      	mov	sp, r7
   25f12:	b004      	add	sp, #16
   25f14:	bd80      	pop	{r7, pc}
   25f16:	46c0      	nop			; (mov r8, r8)
   25f18:	00025e59 	.word	0x00025e59
   25f1c:	00025eb5 	.word	0x00025eb5

00025f20 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   25f20:	b580      	push	{r7, lr}
   25f22:	b084      	sub	sp, #16
   25f24:	af00      	add	r7, sp, #0
   25f26:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25f28:	687b      	ldr	r3, [r7, #4]
   25f2a:	681b      	ldr	r3, [r3, #0]
   25f2c:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   25f2e:	2003      	movs	r0, #3
   25f30:	4b0d      	ldr	r3, [pc, #52]	; (25f68 <rtc_calendar_disable+0x48>)
   25f32:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   25f34:	46c0      	nop			; (mov r8, r8)
   25f36:	687b      	ldr	r3, [r7, #4]
   25f38:	0018      	movs	r0, r3
   25f3a:	4b0c      	ldr	r3, [pc, #48]	; (25f6c <rtc_calendar_disable+0x4c>)
   25f3c:	4798      	blx	r3
   25f3e:	1e03      	subs	r3, r0, #0
   25f40:	d1f9      	bne.n	25f36 <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   25f42:	68fb      	ldr	r3, [r7, #12]
   25f44:	22c1      	movs	r2, #193	; 0xc1
   25f46:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   25f48:	68fb      	ldr	r3, [r7, #12]
   25f4a:	22c1      	movs	r2, #193	; 0xc1
   25f4c:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   25f4e:	68fb      	ldr	r3, [r7, #12]
   25f50:	881b      	ldrh	r3, [r3, #0]
   25f52:	b29b      	uxth	r3, r3
   25f54:	2202      	movs	r2, #2
   25f56:	4393      	bics	r3, r2
   25f58:	b29a      	uxth	r2, r3
   25f5a:	68fb      	ldr	r3, [r7, #12]
   25f5c:	801a      	strh	r2, [r3, #0]
}
   25f5e:	46c0      	nop			; (mov r8, r8)
   25f60:	46bd      	mov	sp, r7
   25f62:	b004      	add	sp, #16
   25f64:	bd80      	pop	{r7, pc}
   25f66:	46c0      	nop			; (mov r8, r8)
   25f68:	00025e85 	.word	0x00025e85
   25f6c:	00025eb5 	.word	0x00025eb5

00025f70 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   25f70:	b580      	push	{r7, lr}
   25f72:	b084      	sub	sp, #16
   25f74:	af00      	add	r7, sp, #0
   25f76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25f78:	687b      	ldr	r3, [r7, #4]
   25f7a:	681b      	ldr	r3, [r3, #0]
   25f7c:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   25f7e:	687b      	ldr	r3, [r7, #4]
   25f80:	0018      	movs	r0, r3
   25f82:	4b0d      	ldr	r3, [pc, #52]	; (25fb8 <rtc_calendar_reset+0x48>)
   25f84:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   25f86:	687b      	ldr	r3, [r7, #4]
   25f88:	2200      	movs	r2, #0
   25f8a:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   25f8c:	687b      	ldr	r3, [r7, #4]
   25f8e:	2200      	movs	r2, #0
   25f90:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   25f92:	46c0      	nop			; (mov r8, r8)
   25f94:	687b      	ldr	r3, [r7, #4]
   25f96:	0018      	movs	r0, r3
   25f98:	4b08      	ldr	r3, [pc, #32]	; (25fbc <rtc_calendar_reset+0x4c>)
   25f9a:	4798      	blx	r3
   25f9c:	1e03      	subs	r3, r0, #0
   25f9e:	d1f9      	bne.n	25f94 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   25fa0:	68fb      	ldr	r3, [r7, #12]
   25fa2:	881b      	ldrh	r3, [r3, #0]
   25fa4:	b29b      	uxth	r3, r3
   25fa6:	2201      	movs	r2, #1
   25fa8:	4313      	orrs	r3, r2
   25faa:	b29a      	uxth	r2, r3
   25fac:	68fb      	ldr	r3, [r7, #12]
   25fae:	801a      	strh	r2, [r3, #0]
}
   25fb0:	46c0      	nop			; (mov r8, r8)
   25fb2:	46bd      	mov	sp, r7
   25fb4:	b004      	add	sp, #16
   25fb6:	bd80      	pop	{r7, pc}
   25fb8:	00025f21 	.word	0x00025f21
   25fbc:	00025eb5 	.word	0x00025eb5

00025fc0 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   25fc0:	b580      	push	{r7, lr}
   25fc2:	b084      	sub	sp, #16
   25fc4:	af00      	add	r7, sp, #0
   25fc6:	6078      	str	r0, [r7, #4]
   25fc8:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   25fca:	683b      	ldr	r3, [r7, #0]
   25fcc:	88db      	ldrh	r3, [r3, #6]
   25fce:	001a      	movs	r2, r3
   25fd0:	687b      	ldr	r3, [r7, #4]
   25fd2:	88db      	ldrh	r3, [r3, #6]
   25fd4:	1ad3      	subs	r3, r2, r3
   25fd6:	069b      	lsls	r3, r3, #26
   25fd8:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   25fda:	683b      	ldr	r3, [r7, #0]
   25fdc:	795b      	ldrb	r3, [r3, #5]
   25fde:	059b      	lsls	r3, r3, #22
   25fe0:	001a      	movs	r2, r3
   25fe2:	68fb      	ldr	r3, [r7, #12]
   25fe4:	4313      	orrs	r3, r2
   25fe6:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   25fe8:	683b      	ldr	r3, [r7, #0]
   25fea:	791b      	ldrb	r3, [r3, #4]
   25fec:	045b      	lsls	r3, r3, #17
   25fee:	001a      	movs	r2, r3
   25ff0:	68fb      	ldr	r3, [r7, #12]
   25ff2:	4313      	orrs	r3, r2
   25ff4:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   25ff6:	683b      	ldr	r3, [r7, #0]
   25ff8:	789b      	ldrb	r3, [r3, #2]
   25ffa:	031b      	lsls	r3, r3, #12
   25ffc:	001a      	movs	r2, r3
   25ffe:	68fb      	ldr	r3, [r7, #12]
   26000:	4313      	orrs	r3, r2
   26002:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   26004:	687b      	ldr	r3, [r7, #4]
   26006:	791b      	ldrb	r3, [r3, #4]
   26008:	2201      	movs	r2, #1
   2600a:	4053      	eors	r3, r2
   2600c:	b2db      	uxtb	r3, r3
   2600e:	2b00      	cmp	r3, #0
   26010:	d008      	beq.n	26024 <rtc_calendar_time_to_register_value+0x64>
   26012:	683b      	ldr	r3, [r7, #0]
   26014:	78db      	ldrb	r3, [r3, #3]
   26016:	2b00      	cmp	r3, #0
   26018:	d004      	beq.n	26024 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   2601a:	68fb      	ldr	r3, [r7, #12]
   2601c:	2280      	movs	r2, #128	; 0x80
   2601e:	0252      	lsls	r2, r2, #9
   26020:	4313      	orrs	r3, r2
   26022:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   26024:	683b      	ldr	r3, [r7, #0]
   26026:	785b      	ldrb	r3, [r3, #1]
   26028:	019b      	lsls	r3, r3, #6
   2602a:	001a      	movs	r2, r3
   2602c:	68fb      	ldr	r3, [r7, #12]
   2602e:	4313      	orrs	r3, r2
   26030:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   26032:	683b      	ldr	r3, [r7, #0]
   26034:	781b      	ldrb	r3, [r3, #0]
   26036:	001a      	movs	r2, r3
   26038:	68fb      	ldr	r3, [r7, #12]
   2603a:	4313      	orrs	r3, r2
   2603c:	60fb      	str	r3, [r7, #12]

	return register_value;
   2603e:	68fb      	ldr	r3, [r7, #12]
}
   26040:	0018      	movs	r0, r3
   26042:	46bd      	mov	sp, r7
   26044:	b004      	add	sp, #16
   26046:	bd80      	pop	{r7, pc}

00026048 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   26048:	b580      	push	{r7, lr}
   2604a:	b084      	sub	sp, #16
   2604c:	af00      	add	r7, sp, #0
   2604e:	60f8      	str	r0, [r7, #12]
   26050:	60b9      	str	r1, [r7, #8]
   26052:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   26054:	68bb      	ldr	r3, [r7, #8]
   26056:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   26058:	b29a      	uxth	r2, r3
   2605a:	68fb      	ldr	r3, [r7, #12]
   2605c:	88db      	ldrh	r3, [r3, #6]
   2605e:	18d3      	adds	r3, r2, r3
   26060:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   26062:	687b      	ldr	r3, [r7, #4]
   26064:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   26066:	68bb      	ldr	r3, [r7, #8]
   26068:	0d9b      	lsrs	r3, r3, #22
   2606a:	b2db      	uxtb	r3, r3
   2606c:	220f      	movs	r2, #15
   2606e:	4013      	ands	r3, r2
   26070:	b2da      	uxtb	r2, r3
   26072:	687b      	ldr	r3, [r7, #4]
   26074:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   26076:	68bb      	ldr	r3, [r7, #8]
   26078:	0c5b      	lsrs	r3, r3, #17
   2607a:	b2db      	uxtb	r3, r3
   2607c:	221f      	movs	r2, #31
   2607e:	4013      	ands	r3, r2
   26080:	b2da      	uxtb	r2, r3
   26082:	687b      	ldr	r3, [r7, #4]
   26084:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   26086:	68fb      	ldr	r3, [r7, #12]
   26088:	791b      	ldrb	r3, [r3, #4]
   2608a:	2b00      	cmp	r3, #0
   2608c:	d008      	beq.n	260a0 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   2608e:	68bb      	ldr	r3, [r7, #8]
   26090:	0b1b      	lsrs	r3, r3, #12
   26092:	b2db      	uxtb	r3, r3
   26094:	221f      	movs	r2, #31
   26096:	4013      	ands	r3, r2
   26098:	b2da      	uxtb	r2, r3
   2609a:	687b      	ldr	r3, [r7, #4]
   2609c:	709a      	strb	r2, [r3, #2]
   2609e:	e010      	b.n	260c2 <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   260a0:	68bb      	ldr	r3, [r7, #8]
   260a2:	0b1b      	lsrs	r3, r3, #12
   260a4:	b2db      	uxtb	r3, r3
   260a6:	220f      	movs	r2, #15
   260a8:	4013      	ands	r3, r2
   260aa:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   260ac:	687b      	ldr	r3, [r7, #4]
   260ae:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   260b0:	68ba      	ldr	r2, [r7, #8]
   260b2:	2380      	movs	r3, #128	; 0x80
   260b4:	025b      	lsls	r3, r3, #9
   260b6:	4013      	ands	r3, r2
   260b8:	1e5a      	subs	r2, r3, #1
   260ba:	4193      	sbcs	r3, r2
   260bc:	b2da      	uxtb	r2, r3
   260be:	687b      	ldr	r3, [r7, #4]
   260c0:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   260c2:	68bb      	ldr	r3, [r7, #8]
   260c4:	099b      	lsrs	r3, r3, #6
   260c6:	b2db      	uxtb	r3, r3
   260c8:	223f      	movs	r2, #63	; 0x3f
   260ca:	4013      	ands	r3, r2
   260cc:	b2da      	uxtb	r2, r3
   260ce:	687b      	ldr	r3, [r7, #4]
   260d0:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   260d2:	68bb      	ldr	r3, [r7, #8]
   260d4:	b2db      	uxtb	r3, r3
   260d6:	223f      	movs	r2, #63	; 0x3f
   260d8:	4013      	ands	r3, r2
   260da:	b2da      	uxtb	r2, r3
   260dc:	687b      	ldr	r3, [r7, #4]
   260de:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   260e0:	46c0      	nop			; (mov r8, r8)
   260e2:	46bd      	mov	sp, r7
   260e4:	b004      	add	sp, #16
   260e6:	bd80      	pop	{r7, pc}

000260e8 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   260e8:	b580      	push	{r7, lr}
   260ea:	b084      	sub	sp, #16
   260ec:	af00      	add	r7, sp, #0
   260ee:	6078      	str	r0, [r7, #4]
   260f0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   260f2:	687b      	ldr	r3, [r7, #4]
   260f4:	681b      	ldr	r3, [r3, #0]
   260f6:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   260f8:	683b      	ldr	r3, [r7, #0]
   260fa:	881a      	ldrh	r2, [r3, #0]
   260fc:	230e      	movs	r3, #14
   260fe:	18fb      	adds	r3, r7, r3
   26100:	2108      	movs	r1, #8
   26102:	430a      	orrs	r2, r1
   26104:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   26106:	683b      	ldr	r3, [r7, #0]
   26108:	791b      	ldrb	r3, [r3, #4]
   2610a:	2201      	movs	r2, #1
   2610c:	4053      	eors	r3, r2
   2610e:	b2db      	uxtb	r3, r3
   26110:	2b00      	cmp	r3, #0
   26112:	d007      	beq.n	26124 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   26114:	230e      	movs	r3, #14
   26116:	18fb      	adds	r3, r7, r3
   26118:	220e      	movs	r2, #14
   2611a:	18ba      	adds	r2, r7, r2
   2611c:	8812      	ldrh	r2, [r2, #0]
   2611e:	2140      	movs	r1, #64	; 0x40
   26120:	430a      	orrs	r2, r1
   26122:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   26124:	683b      	ldr	r3, [r7, #0]
   26126:	789b      	ldrb	r3, [r3, #2]
   26128:	2b00      	cmp	r3, #0
   2612a:	d007      	beq.n	2613c <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   2612c:	230e      	movs	r3, #14
   2612e:	18fb      	adds	r3, r7, r3
   26130:	220e      	movs	r2, #14
   26132:	18ba      	adds	r2, r7, r2
   26134:	8812      	ldrh	r2, [r2, #0]
   26136:	2180      	movs	r1, #128	; 0x80
   26138:	430a      	orrs	r2, r1
   2613a:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   2613c:	68bb      	ldr	r3, [r7, #8]
   2613e:	220e      	movs	r2, #14
   26140:	18ba      	adds	r2, r7, r2
   26142:	8812      	ldrh	r2, [r2, #0]
   26144:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   26146:	683b      	ldr	r3, [r7, #0]
   26148:	78db      	ldrb	r3, [r3, #3]
   2614a:	2b00      	cmp	r3, #0
   2614c:	d008      	beq.n	26160 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   2614e:	68bb      	ldr	r3, [r7, #8]
   26150:	885b      	ldrh	r3, [r3, #2]
   26152:	b29b      	uxth	r3, r3
   26154:	2280      	movs	r2, #128	; 0x80
   26156:	01d2      	lsls	r2, r2, #7
   26158:	4313      	orrs	r3, r2
   2615a:	b29a      	uxth	r2, r3
   2615c:	68bb      	ldr	r3, [r7, #8]
   2615e:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   26160:	230d      	movs	r3, #13
   26162:	18fb      	adds	r3, r7, r3
   26164:	2200      	movs	r2, #0
   26166:	701a      	strb	r2, [r3, #0]
   26168:	e017      	b.n	2619a <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   2616a:	230d      	movs	r3, #13
   2616c:	18fb      	adds	r3, r7, r3
   2616e:	781a      	ldrb	r2, [r3, #0]
   26170:	0013      	movs	r3, r2
   26172:	009b      	lsls	r3, r3, #2
   26174:	189b      	adds	r3, r3, r2
   26176:	005b      	lsls	r3, r3, #1
   26178:	3308      	adds	r3, #8
   2617a:	683a      	ldr	r2, [r7, #0]
   2617c:	18d1      	adds	r1, r2, r3
   2617e:	230d      	movs	r3, #13
   26180:	18fb      	adds	r3, r7, r3
   26182:	781a      	ldrb	r2, [r3, #0]
   26184:	687b      	ldr	r3, [r7, #4]
   26186:	0018      	movs	r0, r3
   26188:	4b08      	ldr	r3, [pc, #32]	; (261ac <_rtc_calendar_set_config+0xc4>)
   2618a:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2618c:	230d      	movs	r3, #13
   2618e:	18fb      	adds	r3, r7, r3
   26190:	781a      	ldrb	r2, [r3, #0]
   26192:	230d      	movs	r3, #13
   26194:	18fb      	adds	r3, r7, r3
   26196:	3201      	adds	r2, #1
   26198:	701a      	strb	r2, [r3, #0]
   2619a:	230d      	movs	r3, #13
   2619c:	18fb      	adds	r3, r7, r3
   2619e:	781b      	ldrb	r3, [r3, #0]
   261a0:	2b00      	cmp	r3, #0
   261a2:	d0e2      	beq.n	2616a <_rtc_calendar_set_config+0x82>
	}
}
   261a4:	46c0      	nop			; (mov r8, r8)
   261a6:	46bd      	mov	sp, r7
   261a8:	b004      	add	sp, #16
   261aa:	bd80      	pop	{r7, pc}
   261ac:	000262d1 	.word	0x000262d1

000261b0 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   261b0:	b580      	push	{r7, lr}
   261b2:	b086      	sub	sp, #24
   261b4:	af00      	add	r7, sp, #0
   261b6:	60f8      	str	r0, [r7, #12]
   261b8:	60b9      	str	r1, [r7, #8]
   261ba:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   261bc:	68fb      	ldr	r3, [r7, #12]
   261be:	68ba      	ldr	r2, [r7, #8]
   261c0:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   261c2:	2120      	movs	r1, #32
   261c4:	2000      	movs	r0, #0
   261c6:	4b18      	ldr	r3, [pc, #96]	; (26228 <rtc_calendar_init+0x78>)
   261c8:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   261ca:	2314      	movs	r3, #20
   261cc:	18fb      	adds	r3, r7, r3
   261ce:	0018      	movs	r0, r3
   261d0:	4b16      	ldr	r3, [pc, #88]	; (2622c <rtc_calendar_init+0x7c>)
   261d2:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   261d4:	2314      	movs	r3, #20
   261d6:	18fb      	adds	r3, r7, r3
   261d8:	2202      	movs	r2, #2
   261da:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   261dc:	2314      	movs	r3, #20
   261de:	18fb      	adds	r3, r7, r3
   261e0:	0019      	movs	r1, r3
   261e2:	2004      	movs	r0, #4
   261e4:	4b12      	ldr	r3, [pc, #72]	; (26230 <rtc_calendar_init+0x80>)
   261e6:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   261e8:	2004      	movs	r0, #4
   261ea:	4b12      	ldr	r3, [pc, #72]	; (26234 <rtc_calendar_init+0x84>)
   261ec:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   261ee:	68fb      	ldr	r3, [r7, #12]
   261f0:	0018      	movs	r0, r3
   261f2:	4b11      	ldr	r3, [pc, #68]	; (26238 <rtc_calendar_init+0x88>)
   261f4:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   261f6:	687b      	ldr	r3, [r7, #4]
   261f8:	791a      	ldrb	r2, [r3, #4]
   261fa:	68fb      	ldr	r3, [r7, #12]
   261fc:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   261fe:	687b      	ldr	r3, [r7, #4]
   26200:	78da      	ldrb	r2, [r3, #3]
   26202:	68fb      	ldr	r3, [r7, #12]
   26204:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   26206:	687b      	ldr	r3, [r7, #4]
   26208:	88da      	ldrh	r2, [r3, #6]
   2620a:	68fb      	ldr	r3, [r7, #12]
   2620c:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   2620e:	4b0b      	ldr	r3, [pc, #44]	; (2623c <rtc_calendar_init+0x8c>)
   26210:	68fa      	ldr	r2, [r7, #12]
   26212:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   26214:	687a      	ldr	r2, [r7, #4]
   26216:	68fb      	ldr	r3, [r7, #12]
   26218:	0011      	movs	r1, r2
   2621a:	0018      	movs	r0, r3
   2621c:	4b08      	ldr	r3, [pc, #32]	; (26240 <rtc_calendar_init+0x90>)
   2621e:	4798      	blx	r3
}
   26220:	46c0      	nop			; (mov r8, r8)
   26222:	46bd      	mov	sp, r7
   26224:	b006      	add	sp, #24
   26226:	bd80      	pop	{r7, pc}
   26228:	00025dfd 	.word	0x00025dfd
   2622c:	00025de5 	.word	0x00025de5
   26230:	00029215 	.word	0x00029215
   26234:	00029259 	.word	0x00029259
   26238:	00025f71 	.word	0x00025f71
   2623c:	20005610 	.word	0x20005610
   26240:	000260e9 	.word	0x000260e9

00026244 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   26244:	b580      	push	{r7, lr}
   26246:	b084      	sub	sp, #16
   26248:	af00      	add	r7, sp, #0
   2624a:	6078      	str	r0, [r7, #4]
   2624c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2624e:	687b      	ldr	r3, [r7, #4]
   26250:	681b      	ldr	r3, [r3, #0]
   26252:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   26254:	687b      	ldr	r3, [r7, #4]
   26256:	795b      	ldrb	r3, [r3, #5]
   26258:	2201      	movs	r2, #1
   2625a:	4053      	eors	r3, r2
   2625c:	b2db      	uxtb	r3, r3
   2625e:	2b00      	cmp	r3, #0
   26260:	d00a      	beq.n	26278 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   26262:	68fb      	ldr	r3, [r7, #12]
   26264:	4a16      	ldr	r2, [pc, #88]	; (262c0 <rtc_calendar_get_time+0x7c>)
   26266:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   26268:	46c0      	nop			; (mov r8, r8)
   2626a:	687b      	ldr	r3, [r7, #4]
   2626c:	0018      	movs	r0, r3
   2626e:	4b15      	ldr	r3, [pc, #84]	; (262c4 <rtc_calendar_get_time+0x80>)
   26270:	4798      	blx	r3
   26272:	1e03      	subs	r3, r0, #0
   26274:	d1f9      	bne.n	2626a <rtc_calendar_get_time+0x26>
   26276:	e016      	b.n	262a6 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   26278:	68fb      	ldr	r3, [r7, #12]
   2627a:	885b      	ldrh	r3, [r3, #2]
   2627c:	b29b      	uxth	r3, r3
   2627e:	001a      	movs	r2, r3
   26280:	2380      	movs	r3, #128	; 0x80
   26282:	01db      	lsls	r3, r3, #7
   26284:	4013      	ands	r3, r2
   26286:	d10e      	bne.n	262a6 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   26288:	68fb      	ldr	r3, [r7, #12]
   2628a:	885b      	ldrh	r3, [r3, #2]
   2628c:	b29b      	uxth	r3, r3
   2628e:	4a0e      	ldr	r2, [pc, #56]	; (262c8 <rtc_calendar_get_time+0x84>)
   26290:	4313      	orrs	r3, r2
   26292:	b29a      	uxth	r2, r3
   26294:	68fb      	ldr	r3, [r7, #12]
   26296:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   26298:	46c0      	nop			; (mov r8, r8)
   2629a:	687b      	ldr	r3, [r7, #4]
   2629c:	0018      	movs	r0, r3
   2629e:	4b09      	ldr	r3, [pc, #36]	; (262c4 <rtc_calendar_get_time+0x80>)
   262a0:	4798      	blx	r3
   262a2:	1e03      	subs	r3, r0, #0
   262a4:	d1f9      	bne.n	2629a <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   262a6:	68fb      	ldr	r3, [r7, #12]
   262a8:	691b      	ldr	r3, [r3, #16]
   262aa:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   262ac:	683a      	ldr	r2, [r7, #0]
   262ae:	68b9      	ldr	r1, [r7, #8]
   262b0:	687b      	ldr	r3, [r7, #4]
   262b2:	0018      	movs	r0, r3
   262b4:	4b05      	ldr	r3, [pc, #20]	; (262cc <rtc_calendar_get_time+0x88>)
   262b6:	4798      	blx	r3
}
   262b8:	46c0      	nop			; (mov r8, r8)
   262ba:	46bd      	mov	sp, r7
   262bc:	b004      	add	sp, #16
   262be:	bd80      	pop	{r7, pc}
   262c0:	ffff8000 	.word	0xffff8000
   262c4:	00025eb5 	.word	0x00025eb5
   262c8:	ffffc000 	.word	0xffffc000
   262cc:	00026049 	.word	0x00026049

000262d0 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   262d0:	b580      	push	{r7, lr}
   262d2:	b086      	sub	sp, #24
   262d4:	af00      	add	r7, sp, #0
   262d6:	60f8      	str	r0, [r7, #12]
   262d8:	60b9      	str	r1, [r7, #8]
   262da:	1dfb      	adds	r3, r7, #7
   262dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   262de:	68fb      	ldr	r3, [r7, #12]
   262e0:	681b      	ldr	r3, [r3, #0]
   262e2:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   262e4:	1dfb      	adds	r3, r7, #7
   262e6:	781b      	ldrb	r3, [r3, #0]
   262e8:	2b01      	cmp	r3, #1
   262ea:	d901      	bls.n	262f0 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   262ec:	2317      	movs	r3, #23
   262ee:	e021      	b.n	26334 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   262f0:	68ba      	ldr	r2, [r7, #8]
   262f2:	68fb      	ldr	r3, [r7, #12]
   262f4:	0011      	movs	r1, r2
   262f6:	0018      	movs	r0, r3
   262f8:	4b10      	ldr	r3, [pc, #64]	; (2633c <rtc_calendar_set_alarm+0x6c>)
   262fa:	4798      	blx	r3
   262fc:	0003      	movs	r3, r0
   262fe:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   26300:	46c0      	nop			; (mov r8, r8)
   26302:	68fb      	ldr	r3, [r7, #12]
   26304:	0018      	movs	r0, r3
   26306:	4b0e      	ldr	r3, [pc, #56]	; (26340 <rtc_calendar_set_alarm+0x70>)
   26308:	4798      	blx	r3
   2630a:	1e03      	subs	r3, r0, #0
   2630c:	d1f9      	bne.n	26302 <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   2630e:	1dfb      	adds	r3, r7, #7
   26310:	781a      	ldrb	r2, [r3, #0]
   26312:	697b      	ldr	r3, [r7, #20]
   26314:	3203      	adds	r2, #3
   26316:	00d2      	lsls	r2, r2, #3
   26318:	6939      	ldr	r1, [r7, #16]
   2631a:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   2631c:	1dfb      	adds	r3, r7, #7
   2631e:	781b      	ldrb	r3, [r3, #0]
   26320:	68ba      	ldr	r2, [r7, #8]
   26322:	7a11      	ldrb	r1, [r2, #8]
   26324:	697a      	ldr	r2, [r7, #20]
   26326:	3303      	adds	r3, #3
   26328:	00db      	lsls	r3, r3, #3
   2632a:	18d3      	adds	r3, r2, r3
   2632c:	3304      	adds	r3, #4
   2632e:	1c0a      	adds	r2, r1, #0
   26330:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   26332:	2300      	movs	r3, #0
}
   26334:	0018      	movs	r0, r3
   26336:	46bd      	mov	sp, r7
   26338:	b006      	add	sp, #24
   2633a:	bd80      	pop	{r7, pc}
   2633c:	00025fc1 	.word	0x00025fc1
   26340:	00025eb5 	.word	0x00025eb5

00026344 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   26344:	b580      	push	{r7, lr}
   26346:	b086      	sub	sp, #24
   26348:	af00      	add	r7, sp, #0
   2634a:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   2634c:	4b28      	ldr	r3, [pc, #160]	; (263f0 <_rtc_interrupt_handler+0xac>)
   2634e:	687a      	ldr	r2, [r7, #4]
   26350:	0092      	lsls	r2, r2, #2
   26352:	58d3      	ldr	r3, [r2, r3]
   26354:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   26356:	697b      	ldr	r3, [r7, #20]
   26358:	681b      	ldr	r3, [r3, #0]
   2635a:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   2635c:	230e      	movs	r3, #14
   2635e:	18fb      	adds	r3, r7, r3
   26360:	697a      	ldr	r2, [r7, #20]
   26362:	8a52      	ldrh	r2, [r2, #18]
   26364:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   26366:	697b      	ldr	r3, [r7, #20]
   26368:	8a1b      	ldrh	r3, [r3, #16]
   2636a:	b29a      	uxth	r2, r3
   2636c:	230e      	movs	r3, #14
   2636e:	18fb      	adds	r3, r7, r3
   26370:	210e      	movs	r1, #14
   26372:	1879      	adds	r1, r7, r1
   26374:	8809      	ldrh	r1, [r1, #0]
   26376:	400a      	ands	r2, r1
   26378:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   2637a:	693b      	ldr	r3, [r7, #16]
   2637c:	7a1b      	ldrb	r3, [r3, #8]
   2637e:	b2da      	uxtb	r2, r3
   26380:	230c      	movs	r3, #12
   26382:	18fb      	adds	r3, r7, r3
   26384:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   26386:	693b      	ldr	r3, [r7, #16]
   26388:	79db      	ldrb	r3, [r3, #7]
   2638a:	b2db      	uxtb	r3, r3
   2638c:	b29a      	uxth	r2, r3
   2638e:	230c      	movs	r3, #12
   26390:	18fb      	adds	r3, r7, r3
   26392:	210c      	movs	r1, #12
   26394:	1879      	adds	r1, r7, r1
   26396:	8809      	ldrh	r1, [r1, #0]
   26398:	400a      	ands	r2, r1
   2639a:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   2639c:	230c      	movs	r3, #12
   2639e:	18fb      	adds	r3, r7, r3
   263a0:	881b      	ldrh	r3, [r3, #0]
   263a2:	2280      	movs	r2, #128	; 0x80
   263a4:	4013      	ands	r3, r2
   263a6:	d00c      	beq.n	263c2 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   263a8:	230e      	movs	r3, #14
   263aa:	18fb      	adds	r3, r7, r3
   263ac:	881b      	ldrh	r3, [r3, #0]
   263ae:	2202      	movs	r2, #2
   263b0:	4013      	ands	r3, r2
   263b2:	d002      	beq.n	263ba <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   263b4:	697b      	ldr	r3, [r7, #20]
   263b6:	68db      	ldr	r3, [r3, #12]
   263b8:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   263ba:	693b      	ldr	r3, [r7, #16]
   263bc:	2280      	movs	r2, #128	; 0x80
   263be:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   263c0:	e011      	b.n	263e6 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   263c2:	230c      	movs	r3, #12
   263c4:	18fb      	adds	r3, r7, r3
   263c6:	881b      	ldrh	r3, [r3, #0]
   263c8:	2201      	movs	r2, #1
   263ca:	4013      	ands	r3, r2
   263cc:	d00b      	beq.n	263e6 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   263ce:	230e      	movs	r3, #14
   263d0:	18fb      	adds	r3, r7, r3
   263d2:	881b      	ldrh	r3, [r3, #0]
   263d4:	2201      	movs	r2, #1
   263d6:	4013      	ands	r3, r2
   263d8:	d002      	beq.n	263e0 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   263da:	697b      	ldr	r3, [r7, #20]
   263dc:	689b      	ldr	r3, [r3, #8]
   263de:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   263e0:	693b      	ldr	r3, [r7, #16]
   263e2:	2201      	movs	r2, #1
   263e4:	721a      	strb	r2, [r3, #8]
}
   263e6:	46c0      	nop			; (mov r8, r8)
   263e8:	46bd      	mov	sp, r7
   263ea:	b006      	add	sp, #24
   263ec:	bd80      	pop	{r7, pc}
   263ee:	46c0      	nop			; (mov r8, r8)
   263f0:	20005610 	.word	0x20005610

000263f4 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   263f4:	b580      	push	{r7, lr}
   263f6:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   263f8:	2000      	movs	r0, #0
   263fa:	4b02      	ldr	r3, [pc, #8]	; (26404 <RTC_Handler+0x10>)
   263fc:	4798      	blx	r3
}
   263fe:	46c0      	nop			; (mov r8, r8)
   26400:	46bd      	mov	sp, r7
   26402:	bd80      	pop	{r7, pc}
   26404:	00026345 	.word	0x00026345

00026408 <system_gclk_chan_get_config_defaults>:
{
   26408:	b580      	push	{r7, lr}
   2640a:	b082      	sub	sp, #8
   2640c:	af00      	add	r7, sp, #0
   2640e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26410:	687b      	ldr	r3, [r7, #4]
   26412:	2200      	movs	r2, #0
   26414:	701a      	strb	r2, [r3, #0]
}
   26416:	46c0      	nop			; (mov r8, r8)
   26418:	46bd      	mov	sp, r7
   2641a:	b002      	add	sp, #8
   2641c:	bd80      	pop	{r7, pc}

0002641e <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   2641e:	b5f0      	push	{r4, r5, r6, r7, lr}
   26420:	b08d      	sub	sp, #52	; 0x34
   26422:	af00      	add	r7, sp, #0
   26424:	60b8      	str	r0, [r7, #8]
   26426:	60f9      	str	r1, [r7, #12]
   26428:	603a      	str	r2, [r7, #0]
   2642a:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   2642c:	2300      	movs	r3, #0
   2642e:	2400      	movs	r4, #0
   26430:	623b      	str	r3, [r7, #32]
   26432:	627c      	str	r4, [r7, #36]	; 0x24
   26434:	2300      	movs	r3, #0
   26436:	2400      	movs	r4, #0
   26438:	61bb      	str	r3, [r7, #24]
   2643a:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   2643c:	233f      	movs	r3, #63	; 0x3f
   2643e:	62fb      	str	r3, [r7, #44]	; 0x2c
   26440:	e053      	b.n	264ea <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   26442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26444:	3b20      	subs	r3, #32
   26446:	2b00      	cmp	r3, #0
   26448:	db04      	blt.n	26454 <long_division+0x36>
   2644a:	2201      	movs	r2, #1
   2644c:	409a      	lsls	r2, r3
   2644e:	0013      	movs	r3, r2
   26450:	617b      	str	r3, [r7, #20]
   26452:	e00b      	b.n	2646c <long_division+0x4e>
   26454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26456:	2220      	movs	r2, #32
   26458:	1ad3      	subs	r3, r2, r3
   2645a:	2201      	movs	r2, #1
   2645c:	40da      	lsrs	r2, r3
   2645e:	0013      	movs	r3, r2
   26460:	2100      	movs	r1, #0
   26462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   26464:	4091      	lsls	r1, r2
   26466:	000a      	movs	r2, r1
   26468:	4313      	orrs	r3, r2
   2646a:	617b      	str	r3, [r7, #20]
   2646c:	2201      	movs	r2, #1
   2646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26470:	409a      	lsls	r2, r3
   26472:	0013      	movs	r3, r2
   26474:	613b      	str	r3, [r7, #16]

		r = r << 1;
   26476:	69bb      	ldr	r3, [r7, #24]
   26478:	69fc      	ldr	r4, [r7, #28]
   2647a:	18db      	adds	r3, r3, r3
   2647c:	4164      	adcs	r4, r4
   2647e:	61bb      	str	r3, [r7, #24]
   26480:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   26482:	68bb      	ldr	r3, [r7, #8]
   26484:	693a      	ldr	r2, [r7, #16]
   26486:	401a      	ands	r2, r3
   26488:	0015      	movs	r5, r2
   2648a:	68fb      	ldr	r3, [r7, #12]
   2648c:	697a      	ldr	r2, [r7, #20]
   2648e:	401a      	ands	r2, r3
   26490:	0016      	movs	r6, r2
   26492:	002b      	movs	r3, r5
   26494:	4333      	orrs	r3, r6
   26496:	d007      	beq.n	264a8 <long_division+0x8a>
			r |= 0x01;
   26498:	69bb      	ldr	r3, [r7, #24]
   2649a:	2201      	movs	r2, #1
   2649c:	4313      	orrs	r3, r2
   2649e:	61bb      	str	r3, [r7, #24]
   264a0:	69fb      	ldr	r3, [r7, #28]
   264a2:	2200      	movs	r2, #0
   264a4:	4313      	orrs	r3, r2
   264a6:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   264a8:	687a      	ldr	r2, [r7, #4]
   264aa:	69fb      	ldr	r3, [r7, #28]
   264ac:	429a      	cmp	r2, r3
   264ae:	d819      	bhi.n	264e4 <long_division+0xc6>
   264b0:	687a      	ldr	r2, [r7, #4]
   264b2:	69fb      	ldr	r3, [r7, #28]
   264b4:	429a      	cmp	r2, r3
   264b6:	d103      	bne.n	264c0 <long_division+0xa2>
   264b8:	683a      	ldr	r2, [r7, #0]
   264ba:	69bb      	ldr	r3, [r7, #24]
   264bc:	429a      	cmp	r2, r3
   264be:	d811      	bhi.n	264e4 <long_division+0xc6>
			r = r - d;
   264c0:	69b9      	ldr	r1, [r7, #24]
   264c2:	69fa      	ldr	r2, [r7, #28]
   264c4:	683b      	ldr	r3, [r7, #0]
   264c6:	687c      	ldr	r4, [r7, #4]
   264c8:	1ac9      	subs	r1, r1, r3
   264ca:	41a2      	sbcs	r2, r4
   264cc:	000b      	movs	r3, r1
   264ce:	0014      	movs	r4, r2
   264d0:	61bb      	str	r3, [r7, #24]
   264d2:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   264d4:	6a3a      	ldr	r2, [r7, #32]
   264d6:	693b      	ldr	r3, [r7, #16]
   264d8:	4313      	orrs	r3, r2
   264da:	623b      	str	r3, [r7, #32]
   264dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   264de:	697b      	ldr	r3, [r7, #20]
   264e0:	4313      	orrs	r3, r2
   264e2:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   264e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   264e6:	3b01      	subs	r3, #1
   264e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   264ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   264ec:	2b00      	cmp	r3, #0
   264ee:	daa8      	bge.n	26442 <long_division+0x24>
		}
	}

	return q;
   264f0:	6a3b      	ldr	r3, [r7, #32]
   264f2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   264f4:	0018      	movs	r0, r3
   264f6:	0021      	movs	r1, r4
   264f8:	46bd      	mov	sp, r7
   264fa:	b00d      	add	sp, #52	; 0x34
   264fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000264fe <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   264fe:	b580      	push	{r7, lr}
   26500:	b086      	sub	sp, #24
   26502:	af00      	add	r7, sp, #0
   26504:	60f8      	str	r0, [r7, #12]
   26506:	60b9      	str	r1, [r7, #8]
   26508:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   2650a:	2316      	movs	r3, #22
   2650c:	18fb      	adds	r3, r7, r3
   2650e:	2200      	movs	r2, #0
   26510:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   26512:	68bb      	ldr	r3, [r7, #8]
   26514:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   26516:	68bb      	ldr	r3, [r7, #8]
   26518:	085a      	lsrs	r2, r3, #1
   2651a:	68fb      	ldr	r3, [r7, #12]
   2651c:	429a      	cmp	r2, r3
   2651e:	d201      	bcs.n	26524 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26520:	2340      	movs	r3, #64	; 0x40
   26522:	e026      	b.n	26572 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   26524:	68bb      	ldr	r3, [r7, #8]
   26526:	085b      	lsrs	r3, r3, #1
   26528:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   2652a:	e00a      	b.n	26542 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   2652c:	693a      	ldr	r2, [r7, #16]
   2652e:	68fb      	ldr	r3, [r7, #12]
   26530:	1ad3      	subs	r3, r2, r3
   26532:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   26534:	2316      	movs	r3, #22
   26536:	18fb      	adds	r3, r7, r3
   26538:	881a      	ldrh	r2, [r3, #0]
   2653a:	2316      	movs	r3, #22
   2653c:	18fb      	adds	r3, r7, r3
   2653e:	3201      	adds	r2, #1
   26540:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   26542:	693a      	ldr	r2, [r7, #16]
   26544:	68fb      	ldr	r3, [r7, #12]
   26546:	429a      	cmp	r2, r3
   26548:	d2f0      	bcs.n	2652c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   2654a:	2316      	movs	r3, #22
   2654c:	18fb      	adds	r3, r7, r3
   2654e:	2216      	movs	r2, #22
   26550:	18ba      	adds	r2, r7, r2
   26552:	8812      	ldrh	r2, [r2, #0]
   26554:	3a01      	subs	r2, #1
   26556:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   26558:	2316      	movs	r3, #22
   2655a:	18fb      	adds	r3, r7, r3
   2655c:	881b      	ldrh	r3, [r3, #0]
   2655e:	2bff      	cmp	r3, #255	; 0xff
   26560:	d901      	bls.n	26566 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26562:	2340      	movs	r3, #64	; 0x40
   26564:	e005      	b.n	26572 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   26566:	687b      	ldr	r3, [r7, #4]
   26568:	2216      	movs	r2, #22
   2656a:	18ba      	adds	r2, r7, r2
   2656c:	8812      	ldrh	r2, [r2, #0]
   2656e:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   26570:	2300      	movs	r3, #0
	}
}
   26572:	0018      	movs	r0, r3
   26574:	46bd      	mov	sp, r7
   26576:	b006      	add	sp, #24
   26578:	bd80      	pop	{r7, pc}
	...

0002657c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   2657c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2657e:	b0a1      	sub	sp, #132	; 0x84
   26580:	af00      	add	r7, sp, #0
   26582:	64f8      	str	r0, [r7, #76]	; 0x4c
   26584:	64b9      	str	r1, [r7, #72]	; 0x48
   26586:	647a      	str	r2, [r7, #68]	; 0x44
   26588:	2243      	movs	r2, #67	; 0x43
   2658a:	18ba      	adds	r2, r7, r2
   2658c:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   2658e:	2300      	movs	r3, #0
   26590:	2400      	movs	r4, #0
   26592:	673b      	str	r3, [r7, #112]	; 0x70
   26594:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   26596:	2300      	movs	r3, #0
   26598:	2400      	movs	r4, #0
   2659a:	66bb      	str	r3, [r7, #104]	; 0x68
   2659c:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   2659e:	2300      	movs	r3, #0
   265a0:	2400      	movs	r4, #0
   265a2:	67bb      	str	r3, [r7, #120]	; 0x78
   265a4:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   265a6:	2300      	movs	r3, #0
   265a8:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   265aa:	2358      	movs	r3, #88	; 0x58
   265ac:	2240      	movs	r2, #64	; 0x40
   265ae:	4694      	mov	ip, r2
   265b0:	44bc      	add	ip, r7
   265b2:	4463      	add	r3, ip
   265b4:	781a      	ldrb	r2, [r3, #0]
   265b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   265b8:	435a      	muls	r2, r3
   265ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   265bc:	429a      	cmp	r2, r3
   265be:	d901      	bls.n	265c4 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   265c0:	2340      	movs	r3, #64	; 0x40
   265c2:	e0b3      	b.n	2672c <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   265c4:	2343      	movs	r3, #67	; 0x43
   265c6:	18fb      	adds	r3, r7, r3
   265c8:	781b      	ldrb	r3, [r3, #0]
   265ca:	2b00      	cmp	r3, #0
   265cc:	d13d      	bne.n	2664a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   265ce:	2358      	movs	r3, #88	; 0x58
   265d0:	2240      	movs	r2, #64	; 0x40
   265d2:	4694      	mov	ip, r2
   265d4:	44bc      	add	ip, r7
   265d6:	4463      	add	r3, ip
   265d8:	781b      	ldrb	r3, [r3, #0]
   265da:	b2db      	uxtb	r3, r3
   265dc:	613b      	str	r3, [r7, #16]
   265de:	2300      	movs	r3, #0
   265e0:	617b      	str	r3, [r7, #20]
   265e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   265e4:	60bb      	str	r3, [r7, #8]
   265e6:	2300      	movs	r3, #0
   265e8:	60fb      	str	r3, [r7, #12]
   265ea:	4c52      	ldr	r4, [pc, #328]	; (26734 <_sercom_get_async_baud_val+0x1b8>)
   265ec:	68ba      	ldr	r2, [r7, #8]
   265ee:	68fb      	ldr	r3, [r7, #12]
   265f0:	6938      	ldr	r0, [r7, #16]
   265f2:	6979      	ldr	r1, [r7, #20]
   265f4:	47a0      	blx	r4
   265f6:	0003      	movs	r3, r0
   265f8:	000c      	movs	r4, r1
   265fa:	001b      	movs	r3, r3
   265fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   265fe:	2300      	movs	r3, #0
   26600:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   26602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26604:	603b      	str	r3, [r7, #0]
   26606:	2300      	movs	r3, #0
   26608:	607b      	str	r3, [r7, #4]
   2660a:	6db8      	ldr	r0, [r7, #88]	; 0x58
   2660c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   2660e:	683a      	ldr	r2, [r7, #0]
   26610:	687b      	ldr	r3, [r7, #4]
   26612:	4c49      	ldr	r4, [pc, #292]	; (26738 <_sercom_get_async_baud_val+0x1bc>)
   26614:	47a0      	blx	r4
   26616:	0003      	movs	r3, r0
   26618:	000c      	movs	r4, r1
   2661a:	673b      	str	r3, [r7, #112]	; 0x70
   2661c:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   2661e:	2100      	movs	r1, #0
   26620:	2201      	movs	r2, #1
   26622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26624:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   26626:	1ac9      	subs	r1, r1, r3
   26628:	41a2      	sbcs	r2, r4
   2662a:	000b      	movs	r3, r1
   2662c:	0014      	movs	r4, r2
   2662e:	66bb      	str	r3, [r7, #104]	; 0x68
   26630:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   26632:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26634:	0c1b      	lsrs	r3, r3, #16
   26636:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   26638:	0416      	lsls	r6, r2, #16
   2663a:	431e      	orrs	r6, r3
   2663c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2663e:	041d      	lsls	r5, r3, #16
   26640:	0033      	movs	r3, r6
   26642:	67bb      	str	r3, [r7, #120]	; 0x78
   26644:	2300      	movs	r3, #0
   26646:	67fb      	str	r3, [r7, #124]	; 0x7c
   26648:	e06a      	b.n	26720 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   2664a:	2343      	movs	r3, #67	; 0x43
   2664c:	18fb      	adds	r3, r7, r3
   2664e:	781b      	ldrb	r3, [r3, #0]
   26650:	2b01      	cmp	r3, #1
   26652:	d165      	bne.n	26720 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   26654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26656:	633b      	str	r3, [r7, #48]	; 0x30
   26658:	2300      	movs	r3, #0
   2665a:	637b      	str	r3, [r7, #52]	; 0x34
   2665c:	2358      	movs	r3, #88	; 0x58
   2665e:	2240      	movs	r2, #64	; 0x40
   26660:	4694      	mov	ip, r2
   26662:	44bc      	add	ip, r7
   26664:	4463      	add	r3, ip
   26666:	781b      	ldrb	r3, [r3, #0]
   26668:	b2db      	uxtb	r3, r3
   2666a:	62bb      	str	r3, [r7, #40]	; 0x28
   2666c:	2300      	movs	r3, #0
   2666e:	62fb      	str	r3, [r7, #44]	; 0x2c
   26670:	4c30      	ldr	r4, [pc, #192]	; (26734 <_sercom_get_async_baud_val+0x1b8>)
   26672:	6aba      	ldr	r2, [r7, #40]	; 0x28
   26674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26676:	6b38      	ldr	r0, [r7, #48]	; 0x30
   26678:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2667a:	47a0      	blx	r4
   2667c:	0003      	movs	r3, r0
   2667e:	000c      	movs	r4, r1
   26680:	65bb      	str	r3, [r7, #88]	; 0x58
   26682:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   26684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26686:	623b      	str	r3, [r7, #32]
   26688:	2300      	movs	r3, #0
   2668a:	627b      	str	r3, [r7, #36]	; 0x24
   2668c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2668e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26690:	001a      	movs	r2, r3
   26692:	0023      	movs	r3, r4
   26694:	6a38      	ldr	r0, [r7, #32]
   26696:	6a79      	ldr	r1, [r7, #36]	; 0x24
   26698:	4c27      	ldr	r4, [pc, #156]	; (26738 <_sercom_get_async_baud_val+0x1bc>)
   2669a:	47a0      	blx	r4
   2669c:	0003      	movs	r3, r0
   2669e:	000c      	movs	r4, r1
   266a0:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   266a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   266a4:	2380      	movs	r3, #128	; 0x80
   266a6:	019b      	lsls	r3, r3, #6
   266a8:	429a      	cmp	r2, r3
   266aa:	d901      	bls.n	266b0 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   266ac:	2340      	movs	r3, #64	; 0x40
   266ae:	e03d      	b.n	2672c <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   266b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   266b2:	61bb      	str	r3, [r7, #24]
   266b4:	2300      	movs	r3, #0
   266b6:	61fb      	str	r3, [r7, #28]
   266b8:	69b9      	ldr	r1, [r7, #24]
   266ba:	69fa      	ldr	r2, [r7, #28]
   266bc:	000b      	movs	r3, r1
   266be:	0f5b      	lsrs	r3, r3, #29
   266c0:	0010      	movs	r0, r2
   266c2:	00c0      	lsls	r0, r0, #3
   266c4:	63f8      	str	r0, [r7, #60]	; 0x3c
   266c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   266c8:	4318      	orrs	r0, r3
   266ca:	63f8      	str	r0, [r7, #60]	; 0x3c
   266cc:	000b      	movs	r3, r1
   266ce:	00db      	lsls	r3, r3, #3
   266d0:	63bb      	str	r3, [r7, #56]	; 0x38
   266d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   266d4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   266d6:	001a      	movs	r2, r3
   266d8:	0023      	movs	r3, r4
   266da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   266dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   266de:	4c16      	ldr	r4, [pc, #88]	; (26738 <_sercom_get_async_baud_val+0x1bc>)
   266e0:	47a0      	blx	r4
   266e2:	0003      	movs	r3, r0
   266e4:	000c      	movs	r4, r1
   266e6:	65bb      	str	r3, [r7, #88]	; 0x58
   266e8:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   266ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   266ec:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   266ee:	b2d9      	uxtb	r1, r3
   266f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   266f2:	b2db      	uxtb	r3, r3
   266f4:	00db      	lsls	r3, r3, #3
   266f6:	b2da      	uxtb	r2, r3
   266f8:	2317      	movs	r3, #23
   266fa:	2040      	movs	r0, #64	; 0x40
   266fc:	4684      	mov	ip, r0
   266fe:	44bc      	add	ip, r7
   26700:	4463      	add	r3, ip
   26702:	1a8a      	subs	r2, r1, r2
   26704:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   26706:	2317      	movs	r3, #23
   26708:	2240      	movs	r2, #64	; 0x40
   2670a:	4694      	mov	ip, r2
   2670c:	44bc      	add	ip, r7
   2670e:	4463      	add	r3, ip
   26710:	781b      	ldrb	r3, [r3, #0]
   26712:	035b      	lsls	r3, r3, #13
   26714:	001a      	movs	r2, r3
   26716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26718:	4313      	orrs	r3, r2
   2671a:	67bb      	str	r3, [r7, #120]	; 0x78
   2671c:	2300      	movs	r3, #0
   2671e:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   26720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   26722:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   26724:	b29a      	uxth	r2, r3
   26726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   26728:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   2672a:	2300      	movs	r3, #0
}
   2672c:	0018      	movs	r0, r3
   2672e:	46bd      	mov	sp, r7
   26730:	b021      	add	sp, #132	; 0x84
   26732:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26734:	00032031 	.word	0x00032031
   26738:	0002641f 	.word	0x0002641f

0002673c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   2673c:	b580      	push	{r7, lr}
   2673e:	b084      	sub	sp, #16
   26740:	af00      	add	r7, sp, #0
   26742:	0002      	movs	r2, r0
   26744:	1dfb      	adds	r3, r7, #7
   26746:	701a      	strb	r2, [r3, #0]
   26748:	1dbb      	adds	r3, r7, #6
   2674a:	1c0a      	adds	r2, r1, #0
   2674c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   2674e:	4b1a      	ldr	r3, [pc, #104]	; (267b8 <sercom_set_gclk_generator+0x7c>)
   26750:	781b      	ldrb	r3, [r3, #0]
   26752:	2201      	movs	r2, #1
   26754:	4053      	eors	r3, r2
   26756:	b2db      	uxtb	r3, r3
   26758:	2b00      	cmp	r3, #0
   2675a:	d103      	bne.n	26764 <sercom_set_gclk_generator+0x28>
   2675c:	1dbb      	adds	r3, r7, #6
   2675e:	781b      	ldrb	r3, [r3, #0]
   26760:	2b00      	cmp	r3, #0
   26762:	d01b      	beq.n	2679c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26764:	230c      	movs	r3, #12
   26766:	18fb      	adds	r3, r7, r3
   26768:	0018      	movs	r0, r3
   2676a:	4b14      	ldr	r3, [pc, #80]	; (267bc <sercom_set_gclk_generator+0x80>)
   2676c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   2676e:	230c      	movs	r3, #12
   26770:	18fb      	adds	r3, r7, r3
   26772:	1dfa      	adds	r2, r7, #7
   26774:	7812      	ldrb	r2, [r2, #0]
   26776:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   26778:	230c      	movs	r3, #12
   2677a:	18fb      	adds	r3, r7, r3
   2677c:	0019      	movs	r1, r3
   2677e:	2013      	movs	r0, #19
   26780:	4b0f      	ldr	r3, [pc, #60]	; (267c0 <sercom_set_gclk_generator+0x84>)
   26782:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   26784:	2013      	movs	r0, #19
   26786:	4b0f      	ldr	r3, [pc, #60]	; (267c4 <sercom_set_gclk_generator+0x88>)
   26788:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   2678a:	4b0b      	ldr	r3, [pc, #44]	; (267b8 <sercom_set_gclk_generator+0x7c>)
   2678c:	1dfa      	adds	r2, r7, #7
   2678e:	7812      	ldrb	r2, [r2, #0]
   26790:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   26792:	4b09      	ldr	r3, [pc, #36]	; (267b8 <sercom_set_gclk_generator+0x7c>)
   26794:	2201      	movs	r2, #1
   26796:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   26798:	2300      	movs	r3, #0
   2679a:	e008      	b.n	267ae <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   2679c:	4b06      	ldr	r3, [pc, #24]	; (267b8 <sercom_set_gclk_generator+0x7c>)
   2679e:	785b      	ldrb	r3, [r3, #1]
   267a0:	1dfa      	adds	r2, r7, #7
   267a2:	7812      	ldrb	r2, [r2, #0]
   267a4:	429a      	cmp	r2, r3
   267a6:	d101      	bne.n	267ac <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   267a8:	2300      	movs	r3, #0
   267aa:	e000      	b.n	267ae <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   267ac:	231d      	movs	r3, #29
}
   267ae:	0018      	movs	r0, r3
   267b0:	46bd      	mov	sp, r7
   267b2:	b004      	add	sp, #16
   267b4:	bd80      	pop	{r7, pc}
   267b6:	46c0      	nop			; (mov r8, r8)
   267b8:	20003e18 	.word	0x20003e18
   267bc:	00026409 	.word	0x00026409
   267c0:	00029215 	.word	0x00029215
   267c4:	00029259 	.word	0x00029259

000267c8 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   267c8:	b580      	push	{r7, lr}
   267ca:	b082      	sub	sp, #8
   267cc:	af00      	add	r7, sp, #0
   267ce:	6078      	str	r0, [r7, #4]
   267d0:	000a      	movs	r2, r1
   267d2:	1cfb      	adds	r3, r7, #3
   267d4:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   267d6:	687b      	ldr	r3, [r7, #4]
   267d8:	4a4d      	ldr	r2, [pc, #308]	; (26910 <_sercom_get_default_pad+0x148>)
   267da:	4293      	cmp	r3, r2
   267dc:	d03f      	beq.n	2685e <_sercom_get_default_pad+0x96>
   267de:	4a4c      	ldr	r2, [pc, #304]	; (26910 <_sercom_get_default_pad+0x148>)
   267e0:	4293      	cmp	r3, r2
   267e2:	d806      	bhi.n	267f2 <_sercom_get_default_pad+0x2a>
   267e4:	4a4b      	ldr	r2, [pc, #300]	; (26914 <_sercom_get_default_pad+0x14c>)
   267e6:	4293      	cmp	r3, r2
   267e8:	d00f      	beq.n	2680a <_sercom_get_default_pad+0x42>
   267ea:	4a4b      	ldr	r2, [pc, #300]	; (26918 <_sercom_get_default_pad+0x150>)
   267ec:	4293      	cmp	r3, r2
   267ee:	d021      	beq.n	26834 <_sercom_get_default_pad+0x6c>
   267f0:	e089      	b.n	26906 <_sercom_get_default_pad+0x13e>
   267f2:	4a4a      	ldr	r2, [pc, #296]	; (2691c <_sercom_get_default_pad+0x154>)
   267f4:	4293      	cmp	r3, r2
   267f6:	d100      	bne.n	267fa <_sercom_get_default_pad+0x32>
   267f8:	e05b      	b.n	268b2 <_sercom_get_default_pad+0xea>
   267fa:	4a49      	ldr	r2, [pc, #292]	; (26920 <_sercom_get_default_pad+0x158>)
   267fc:	4293      	cmp	r3, r2
   267fe:	d100      	bne.n	26802 <_sercom_get_default_pad+0x3a>
   26800:	e06c      	b.n	268dc <_sercom_get_default_pad+0x114>
   26802:	4a48      	ldr	r2, [pc, #288]	; (26924 <_sercom_get_default_pad+0x15c>)
   26804:	4293      	cmp	r3, r2
   26806:	d03f      	beq.n	26888 <_sercom_get_default_pad+0xc0>
   26808:	e07d      	b.n	26906 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   2680a:	1cfb      	adds	r3, r7, #3
   2680c:	781b      	ldrb	r3, [r3, #0]
   2680e:	2b01      	cmp	r3, #1
   26810:	d00a      	beq.n	26828 <_sercom_get_default_pad+0x60>
   26812:	dc02      	bgt.n	2681a <_sercom_get_default_pad+0x52>
   26814:	2b00      	cmp	r3, #0
   26816:	d005      	beq.n	26824 <_sercom_get_default_pad+0x5c>
   26818:	e075      	b.n	26906 <_sercom_get_default_pad+0x13e>
   2681a:	2b02      	cmp	r3, #2
   2681c:	d006      	beq.n	2682c <_sercom_get_default_pad+0x64>
   2681e:	2b03      	cmp	r3, #3
   26820:	d006      	beq.n	26830 <_sercom_get_default_pad+0x68>
   26822:	e070      	b.n	26906 <_sercom_get_default_pad+0x13e>
   26824:	4b40      	ldr	r3, [pc, #256]	; (26928 <_sercom_get_default_pad+0x160>)
   26826:	e06f      	b.n	26908 <_sercom_get_default_pad+0x140>
   26828:	4b40      	ldr	r3, [pc, #256]	; (2692c <_sercom_get_default_pad+0x164>)
   2682a:	e06d      	b.n	26908 <_sercom_get_default_pad+0x140>
   2682c:	4b40      	ldr	r3, [pc, #256]	; (26930 <_sercom_get_default_pad+0x168>)
   2682e:	e06b      	b.n	26908 <_sercom_get_default_pad+0x140>
   26830:	4b40      	ldr	r3, [pc, #256]	; (26934 <_sercom_get_default_pad+0x16c>)
   26832:	e069      	b.n	26908 <_sercom_get_default_pad+0x140>
   26834:	1cfb      	adds	r3, r7, #3
   26836:	781b      	ldrb	r3, [r3, #0]
   26838:	2b01      	cmp	r3, #1
   2683a:	d00a      	beq.n	26852 <_sercom_get_default_pad+0x8a>
   2683c:	dc02      	bgt.n	26844 <_sercom_get_default_pad+0x7c>
   2683e:	2b00      	cmp	r3, #0
   26840:	d005      	beq.n	2684e <_sercom_get_default_pad+0x86>
   26842:	e060      	b.n	26906 <_sercom_get_default_pad+0x13e>
   26844:	2b02      	cmp	r3, #2
   26846:	d006      	beq.n	26856 <_sercom_get_default_pad+0x8e>
   26848:	2b03      	cmp	r3, #3
   2684a:	d006      	beq.n	2685a <_sercom_get_default_pad+0x92>
   2684c:	e05b      	b.n	26906 <_sercom_get_default_pad+0x13e>
   2684e:	2303      	movs	r3, #3
   26850:	e05a      	b.n	26908 <_sercom_get_default_pad+0x140>
   26852:	4b39      	ldr	r3, [pc, #228]	; (26938 <_sercom_get_default_pad+0x170>)
   26854:	e058      	b.n	26908 <_sercom_get_default_pad+0x140>
   26856:	4b39      	ldr	r3, [pc, #228]	; (2693c <_sercom_get_default_pad+0x174>)
   26858:	e056      	b.n	26908 <_sercom_get_default_pad+0x140>
   2685a:	4b39      	ldr	r3, [pc, #228]	; (26940 <_sercom_get_default_pad+0x178>)
   2685c:	e054      	b.n	26908 <_sercom_get_default_pad+0x140>
   2685e:	1cfb      	adds	r3, r7, #3
   26860:	781b      	ldrb	r3, [r3, #0]
   26862:	2b01      	cmp	r3, #1
   26864:	d00a      	beq.n	2687c <_sercom_get_default_pad+0xb4>
   26866:	dc02      	bgt.n	2686e <_sercom_get_default_pad+0xa6>
   26868:	2b00      	cmp	r3, #0
   2686a:	d005      	beq.n	26878 <_sercom_get_default_pad+0xb0>
   2686c:	e04b      	b.n	26906 <_sercom_get_default_pad+0x13e>
   2686e:	2b02      	cmp	r3, #2
   26870:	d006      	beq.n	26880 <_sercom_get_default_pad+0xb8>
   26872:	2b03      	cmp	r3, #3
   26874:	d006      	beq.n	26884 <_sercom_get_default_pad+0xbc>
   26876:	e046      	b.n	26906 <_sercom_get_default_pad+0x13e>
   26878:	4b32      	ldr	r3, [pc, #200]	; (26944 <_sercom_get_default_pad+0x17c>)
   2687a:	e045      	b.n	26908 <_sercom_get_default_pad+0x140>
   2687c:	4b32      	ldr	r3, [pc, #200]	; (26948 <_sercom_get_default_pad+0x180>)
   2687e:	e043      	b.n	26908 <_sercom_get_default_pad+0x140>
   26880:	4b32      	ldr	r3, [pc, #200]	; (2694c <_sercom_get_default_pad+0x184>)
   26882:	e041      	b.n	26908 <_sercom_get_default_pad+0x140>
   26884:	4b32      	ldr	r3, [pc, #200]	; (26950 <_sercom_get_default_pad+0x188>)
   26886:	e03f      	b.n	26908 <_sercom_get_default_pad+0x140>
   26888:	1cfb      	adds	r3, r7, #3
   2688a:	781b      	ldrb	r3, [r3, #0]
   2688c:	2b01      	cmp	r3, #1
   2688e:	d00a      	beq.n	268a6 <_sercom_get_default_pad+0xde>
   26890:	dc02      	bgt.n	26898 <_sercom_get_default_pad+0xd0>
   26892:	2b00      	cmp	r3, #0
   26894:	d005      	beq.n	268a2 <_sercom_get_default_pad+0xda>
   26896:	e036      	b.n	26906 <_sercom_get_default_pad+0x13e>
   26898:	2b02      	cmp	r3, #2
   2689a:	d006      	beq.n	268aa <_sercom_get_default_pad+0xe2>
   2689c:	2b03      	cmp	r3, #3
   2689e:	d006      	beq.n	268ae <_sercom_get_default_pad+0xe6>
   268a0:	e031      	b.n	26906 <_sercom_get_default_pad+0x13e>
   268a2:	4b2c      	ldr	r3, [pc, #176]	; (26954 <_sercom_get_default_pad+0x18c>)
   268a4:	e030      	b.n	26908 <_sercom_get_default_pad+0x140>
   268a6:	4b2c      	ldr	r3, [pc, #176]	; (26958 <_sercom_get_default_pad+0x190>)
   268a8:	e02e      	b.n	26908 <_sercom_get_default_pad+0x140>
   268aa:	4b2c      	ldr	r3, [pc, #176]	; (2695c <_sercom_get_default_pad+0x194>)
   268ac:	e02c      	b.n	26908 <_sercom_get_default_pad+0x140>
   268ae:	4b2c      	ldr	r3, [pc, #176]	; (26960 <_sercom_get_default_pad+0x198>)
   268b0:	e02a      	b.n	26908 <_sercom_get_default_pad+0x140>
   268b2:	1cfb      	adds	r3, r7, #3
   268b4:	781b      	ldrb	r3, [r3, #0]
   268b6:	2b01      	cmp	r3, #1
   268b8:	d00a      	beq.n	268d0 <_sercom_get_default_pad+0x108>
   268ba:	dc02      	bgt.n	268c2 <_sercom_get_default_pad+0xfa>
   268bc:	2b00      	cmp	r3, #0
   268be:	d005      	beq.n	268cc <_sercom_get_default_pad+0x104>
   268c0:	e021      	b.n	26906 <_sercom_get_default_pad+0x13e>
   268c2:	2b02      	cmp	r3, #2
   268c4:	d006      	beq.n	268d4 <_sercom_get_default_pad+0x10c>
   268c6:	2b03      	cmp	r3, #3
   268c8:	d006      	beq.n	268d8 <_sercom_get_default_pad+0x110>
   268ca:	e01c      	b.n	26906 <_sercom_get_default_pad+0x13e>
   268cc:	4b25      	ldr	r3, [pc, #148]	; (26964 <_sercom_get_default_pad+0x19c>)
   268ce:	e01b      	b.n	26908 <_sercom_get_default_pad+0x140>
   268d0:	4b25      	ldr	r3, [pc, #148]	; (26968 <_sercom_get_default_pad+0x1a0>)
   268d2:	e019      	b.n	26908 <_sercom_get_default_pad+0x140>
   268d4:	4b25      	ldr	r3, [pc, #148]	; (2696c <_sercom_get_default_pad+0x1a4>)
   268d6:	e017      	b.n	26908 <_sercom_get_default_pad+0x140>
   268d8:	4b25      	ldr	r3, [pc, #148]	; (26970 <_sercom_get_default_pad+0x1a8>)
   268da:	e015      	b.n	26908 <_sercom_get_default_pad+0x140>
   268dc:	1cfb      	adds	r3, r7, #3
   268de:	781b      	ldrb	r3, [r3, #0]
   268e0:	2b01      	cmp	r3, #1
   268e2:	d00a      	beq.n	268fa <_sercom_get_default_pad+0x132>
   268e4:	dc02      	bgt.n	268ec <_sercom_get_default_pad+0x124>
   268e6:	2b00      	cmp	r3, #0
   268e8:	d005      	beq.n	268f6 <_sercom_get_default_pad+0x12e>
   268ea:	e00c      	b.n	26906 <_sercom_get_default_pad+0x13e>
   268ec:	2b02      	cmp	r3, #2
   268ee:	d006      	beq.n	268fe <_sercom_get_default_pad+0x136>
   268f0:	2b03      	cmp	r3, #3
   268f2:	d006      	beq.n	26902 <_sercom_get_default_pad+0x13a>
   268f4:	e007      	b.n	26906 <_sercom_get_default_pad+0x13e>
   268f6:	4b1f      	ldr	r3, [pc, #124]	; (26974 <_sercom_get_default_pad+0x1ac>)
   268f8:	e006      	b.n	26908 <_sercom_get_default_pad+0x140>
   268fa:	4b1f      	ldr	r3, [pc, #124]	; (26978 <_sercom_get_default_pad+0x1b0>)
   268fc:	e004      	b.n	26908 <_sercom_get_default_pad+0x140>
   268fe:	4b1f      	ldr	r3, [pc, #124]	; (2697c <_sercom_get_default_pad+0x1b4>)
   26900:	e002      	b.n	26908 <_sercom_get_default_pad+0x140>
   26902:	4b1f      	ldr	r3, [pc, #124]	; (26980 <_sercom_get_default_pad+0x1b8>)
   26904:	e000      	b.n	26908 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   26906:	2300      	movs	r3, #0
}
   26908:	0018      	movs	r0, r3
   2690a:	46bd      	mov	sp, r7
   2690c:	b002      	add	sp, #8
   2690e:	bd80      	pop	{r7, pc}
   26910:	42001000 	.word	0x42001000
   26914:	42000800 	.word	0x42000800
   26918:	42000c00 	.word	0x42000c00
   2691c:	42001800 	.word	0x42001800
   26920:	42001c00 	.word	0x42001c00
   26924:	42001400 	.word	0x42001400
   26928:	00040003 	.word	0x00040003
   2692c:	00050003 	.word	0x00050003
   26930:	00060003 	.word	0x00060003
   26934:	00070003 	.word	0x00070003
   26938:	00010003 	.word	0x00010003
   2693c:	001e0003 	.word	0x001e0003
   26940:	001f0003 	.word	0x001f0003
   26944:	00080003 	.word	0x00080003
   26948:	00090003 	.word	0x00090003
   2694c:	000a0003 	.word	0x000a0003
   26950:	000b0003 	.word	0x000b0003
   26954:	00100003 	.word	0x00100003
   26958:	00110003 	.word	0x00110003
   2695c:	00120003 	.word	0x00120003
   26960:	00130003 	.word	0x00130003
   26964:	000c0003 	.word	0x000c0003
   26968:	000d0003 	.word	0x000d0003
   2696c:	000e0003 	.word	0x000e0003
   26970:	000f0003 	.word	0x000f0003
   26974:	00160003 	.word	0x00160003
   26978:	00170003 	.word	0x00170003
   2697c:	00180003 	.word	0x00180003
   26980:	00190003 	.word	0x00190003

00026984 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   26984:	b590      	push	{r4, r7, lr}
   26986:	b08b      	sub	sp, #44	; 0x2c
   26988:	af00      	add	r7, sp, #0
   2698a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   2698c:	230c      	movs	r3, #12
   2698e:	18fb      	adds	r3, r7, r3
   26990:	4a0f      	ldr	r2, [pc, #60]	; (269d0 <_sercom_get_sercom_inst_index+0x4c>)
   26992:	ca13      	ldmia	r2!, {r0, r1, r4}
   26994:	c313      	stmia	r3!, {r0, r1, r4}
   26996:	ca13      	ldmia	r2!, {r0, r1, r4}
   26998:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2699a:	2300      	movs	r3, #0
   2699c:	627b      	str	r3, [r7, #36]	; 0x24
   2699e:	e00e      	b.n	269be <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   269a0:	230c      	movs	r3, #12
   269a2:	18fb      	adds	r3, r7, r3
   269a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   269a6:	0092      	lsls	r2, r2, #2
   269a8:	58d3      	ldr	r3, [r2, r3]
   269aa:	001a      	movs	r2, r3
   269ac:	687b      	ldr	r3, [r7, #4]
   269ae:	429a      	cmp	r2, r3
   269b0:	d102      	bne.n	269b8 <_sercom_get_sercom_inst_index+0x34>
			return i;
   269b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   269b4:	b2db      	uxtb	r3, r3
   269b6:	e006      	b.n	269c6 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   269b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   269ba:	3301      	adds	r3, #1
   269bc:	627b      	str	r3, [r7, #36]	; 0x24
   269be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   269c0:	2b05      	cmp	r3, #5
   269c2:	d9ed      	bls.n	269a0 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   269c4:	2300      	movs	r3, #0
}
   269c6:	0018      	movs	r0, r3
   269c8:	46bd      	mov	sp, r7
   269ca:	b00b      	add	sp, #44	; 0x2c
   269cc:	bd90      	pop	{r4, r7, pc}
   269ce:	46c0      	nop			; (mov r8, r8)
   269d0:	0003830c 	.word	0x0003830c

000269d4 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   269d4:	b580      	push	{r7, lr}
   269d6:	b082      	sub	sp, #8
   269d8:	af00      	add	r7, sp, #0
   269da:	0002      	movs	r2, r0
   269dc:	1dfb      	adds	r3, r7, #7
   269de:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   269e0:	46c0      	nop			; (mov r8, r8)
   269e2:	46bd      	mov	sp, r7
   269e4:	b002      	add	sp, #8
   269e6:	bd80      	pop	{r7, pc}

000269e8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   269e8:	b580      	push	{r7, lr}
   269ea:	b084      	sub	sp, #16
   269ec:	af00      	add	r7, sp, #0
   269ee:	0002      	movs	r2, r0
   269f0:	6039      	str	r1, [r7, #0]
   269f2:	1dfb      	adds	r3, r7, #7
   269f4:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   269f6:	4b13      	ldr	r3, [pc, #76]	; (26a44 <_sercom_set_handler+0x5c>)
   269f8:	781b      	ldrb	r3, [r3, #0]
   269fa:	2201      	movs	r2, #1
   269fc:	4053      	eors	r3, r2
   269fe:	b2db      	uxtb	r3, r3
   26a00:	2b00      	cmp	r3, #0
   26a02:	d015      	beq.n	26a30 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   26a04:	2300      	movs	r3, #0
   26a06:	60fb      	str	r3, [r7, #12]
   26a08:	e00c      	b.n	26a24 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   26a0a:	4b0f      	ldr	r3, [pc, #60]	; (26a48 <_sercom_set_handler+0x60>)
   26a0c:	68fa      	ldr	r2, [r7, #12]
   26a0e:	0092      	lsls	r2, r2, #2
   26a10:	490e      	ldr	r1, [pc, #56]	; (26a4c <_sercom_set_handler+0x64>)
   26a12:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   26a14:	4b0e      	ldr	r3, [pc, #56]	; (26a50 <_sercom_set_handler+0x68>)
   26a16:	68fa      	ldr	r2, [r7, #12]
   26a18:	0092      	lsls	r2, r2, #2
   26a1a:	2100      	movs	r1, #0
   26a1c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   26a1e:	68fb      	ldr	r3, [r7, #12]
   26a20:	3301      	adds	r3, #1
   26a22:	60fb      	str	r3, [r7, #12]
   26a24:	68fb      	ldr	r3, [r7, #12]
   26a26:	2b05      	cmp	r3, #5
   26a28:	d9ef      	bls.n	26a0a <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   26a2a:	4b06      	ldr	r3, [pc, #24]	; (26a44 <_sercom_set_handler+0x5c>)
   26a2c:	2201      	movs	r2, #1
   26a2e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   26a30:	1dfb      	adds	r3, r7, #7
   26a32:	781a      	ldrb	r2, [r3, #0]
   26a34:	4b04      	ldr	r3, [pc, #16]	; (26a48 <_sercom_set_handler+0x60>)
   26a36:	0092      	lsls	r2, r2, #2
   26a38:	6839      	ldr	r1, [r7, #0]
   26a3a:	50d1      	str	r1, [r2, r3]
}
   26a3c:	46c0      	nop			; (mov r8, r8)
   26a3e:	46bd      	mov	sp, r7
   26a40:	b004      	add	sp, #16
   26a42:	bd80      	pop	{r7, pc}
   26a44:	20003e1a 	.word	0x20003e1a
   26a48:	20003e1c 	.word	0x20003e1c
   26a4c:	000269d5 	.word	0x000269d5
   26a50:	20005614 	.word	0x20005614

00026a54 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   26a54:	b590      	push	{r4, r7, lr}
   26a56:	b085      	sub	sp, #20
   26a58:	af00      	add	r7, sp, #0
   26a5a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   26a5c:	2308      	movs	r3, #8
   26a5e:	18fb      	adds	r3, r7, r3
   26a60:	4a0b      	ldr	r2, [pc, #44]	; (26a90 <_sercom_get_interrupt_vector+0x3c>)
   26a62:	6811      	ldr	r1, [r2, #0]
   26a64:	6019      	str	r1, [r3, #0]
   26a66:	8892      	ldrh	r2, [r2, #4]
   26a68:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   26a6a:	230f      	movs	r3, #15
   26a6c:	18fc      	adds	r4, r7, r3
   26a6e:	687b      	ldr	r3, [r7, #4]
   26a70:	0018      	movs	r0, r3
   26a72:	4b08      	ldr	r3, [pc, #32]	; (26a94 <_sercom_get_interrupt_vector+0x40>)
   26a74:	4798      	blx	r3
   26a76:	0003      	movs	r3, r0
   26a78:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   26a7a:	230f      	movs	r3, #15
   26a7c:	18fb      	adds	r3, r7, r3
   26a7e:	781b      	ldrb	r3, [r3, #0]
   26a80:	2208      	movs	r2, #8
   26a82:	18ba      	adds	r2, r7, r2
   26a84:	5cd3      	ldrb	r3, [r2, r3]
   26a86:	b25b      	sxtb	r3, r3
}
   26a88:	0018      	movs	r0, r3
   26a8a:	46bd      	mov	sp, r7
   26a8c:	b005      	add	sp, #20
   26a8e:	bd90      	pop	{r4, r7, pc}
   26a90:	00038324 	.word	0x00038324
   26a94:	00026985 	.word	0x00026985

00026a98 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   26a98:	b580      	push	{r7, lr}
   26a9a:	af00      	add	r7, sp, #0
   26a9c:	4b03      	ldr	r3, [pc, #12]	; (26aac <SERCOM0_Handler+0x14>)
   26a9e:	681b      	ldr	r3, [r3, #0]
   26aa0:	2000      	movs	r0, #0
   26aa2:	4798      	blx	r3
   26aa4:	46c0      	nop			; (mov r8, r8)
   26aa6:	46bd      	mov	sp, r7
   26aa8:	bd80      	pop	{r7, pc}
   26aaa:	46c0      	nop			; (mov r8, r8)
   26aac:	20003e1c 	.word	0x20003e1c

00026ab0 <SERCOM1_Handler>:
   26ab0:	b580      	push	{r7, lr}
   26ab2:	af00      	add	r7, sp, #0
   26ab4:	4b03      	ldr	r3, [pc, #12]	; (26ac4 <SERCOM1_Handler+0x14>)
   26ab6:	685b      	ldr	r3, [r3, #4]
   26ab8:	2001      	movs	r0, #1
   26aba:	4798      	blx	r3
   26abc:	46c0      	nop			; (mov r8, r8)
   26abe:	46bd      	mov	sp, r7
   26ac0:	bd80      	pop	{r7, pc}
   26ac2:	46c0      	nop			; (mov r8, r8)
   26ac4:	20003e1c 	.word	0x20003e1c

00026ac8 <SERCOM2_Handler>:
   26ac8:	b580      	push	{r7, lr}
   26aca:	af00      	add	r7, sp, #0
   26acc:	4b03      	ldr	r3, [pc, #12]	; (26adc <SERCOM2_Handler+0x14>)
   26ace:	689b      	ldr	r3, [r3, #8]
   26ad0:	2002      	movs	r0, #2
   26ad2:	4798      	blx	r3
   26ad4:	46c0      	nop			; (mov r8, r8)
   26ad6:	46bd      	mov	sp, r7
   26ad8:	bd80      	pop	{r7, pc}
   26ada:	46c0      	nop			; (mov r8, r8)
   26adc:	20003e1c 	.word	0x20003e1c

00026ae0 <SERCOM3_Handler>:
   26ae0:	b580      	push	{r7, lr}
   26ae2:	af00      	add	r7, sp, #0
   26ae4:	4b03      	ldr	r3, [pc, #12]	; (26af4 <SERCOM3_Handler+0x14>)
   26ae6:	68db      	ldr	r3, [r3, #12]
   26ae8:	2003      	movs	r0, #3
   26aea:	4798      	blx	r3
   26aec:	46c0      	nop			; (mov r8, r8)
   26aee:	46bd      	mov	sp, r7
   26af0:	bd80      	pop	{r7, pc}
   26af2:	46c0      	nop			; (mov r8, r8)
   26af4:	20003e1c 	.word	0x20003e1c

00026af8 <SERCOM4_Handler>:
   26af8:	b580      	push	{r7, lr}
   26afa:	af00      	add	r7, sp, #0
   26afc:	4b03      	ldr	r3, [pc, #12]	; (26b0c <SERCOM4_Handler+0x14>)
   26afe:	691b      	ldr	r3, [r3, #16]
   26b00:	2004      	movs	r0, #4
   26b02:	4798      	blx	r3
   26b04:	46c0      	nop			; (mov r8, r8)
   26b06:	46bd      	mov	sp, r7
   26b08:	bd80      	pop	{r7, pc}
   26b0a:	46c0      	nop			; (mov r8, r8)
   26b0c:	20003e1c 	.word	0x20003e1c

00026b10 <SERCOM5_Handler>:
   26b10:	b580      	push	{r7, lr}
   26b12:	af00      	add	r7, sp, #0
   26b14:	4b03      	ldr	r3, [pc, #12]	; (26b24 <SERCOM5_Handler+0x14>)
   26b16:	695b      	ldr	r3, [r3, #20]
   26b18:	2005      	movs	r0, #5
   26b1a:	4798      	blx	r3
   26b1c:	46c0      	nop			; (mov r8, r8)
   26b1e:	46bd      	mov	sp, r7
   26b20:	bd80      	pop	{r7, pc}
   26b22:	46c0      	nop			; (mov r8, r8)
   26b24:	20003e1c 	.word	0x20003e1c

00026b28 <system_pinmux_get_config_defaults>:
{
   26b28:	b580      	push	{r7, lr}
   26b2a:	b082      	sub	sp, #8
   26b2c:	af00      	add	r7, sp, #0
   26b2e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26b30:	687b      	ldr	r3, [r7, #4]
   26b32:	2280      	movs	r2, #128	; 0x80
   26b34:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26b36:	687b      	ldr	r3, [r7, #4]
   26b38:	2200      	movs	r2, #0
   26b3a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26b3c:	687b      	ldr	r3, [r7, #4]
   26b3e:	2201      	movs	r2, #1
   26b40:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   26b42:	687b      	ldr	r3, [r7, #4]
   26b44:	2200      	movs	r2, #0
   26b46:	70da      	strb	r2, [r3, #3]
}
   26b48:	46c0      	nop			; (mov r8, r8)
   26b4a:	46bd      	mov	sp, r7
   26b4c:	b002      	add	sp, #8
   26b4e:	bd80      	pop	{r7, pc}

00026b50 <system_pinmux_get_group_from_gpio_pin>:
{
   26b50:	b580      	push	{r7, lr}
   26b52:	b084      	sub	sp, #16
   26b54:	af00      	add	r7, sp, #0
   26b56:	0002      	movs	r2, r0
   26b58:	1dfb      	adds	r3, r7, #7
   26b5a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   26b5c:	230f      	movs	r3, #15
   26b5e:	18fb      	adds	r3, r7, r3
   26b60:	1dfa      	adds	r2, r7, #7
   26b62:	7812      	ldrb	r2, [r2, #0]
   26b64:	09d2      	lsrs	r2, r2, #7
   26b66:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   26b68:	230e      	movs	r3, #14
   26b6a:	18fb      	adds	r3, r7, r3
   26b6c:	1dfa      	adds	r2, r7, #7
   26b6e:	7812      	ldrb	r2, [r2, #0]
   26b70:	0952      	lsrs	r2, r2, #5
   26b72:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   26b74:	4b0d      	ldr	r3, [pc, #52]	; (26bac <system_pinmux_get_group_from_gpio_pin+0x5c>)
   26b76:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   26b78:	230f      	movs	r3, #15
   26b7a:	18fb      	adds	r3, r7, r3
   26b7c:	781b      	ldrb	r3, [r3, #0]
   26b7e:	2b00      	cmp	r3, #0
   26b80:	d10f      	bne.n	26ba2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   26b82:	230f      	movs	r3, #15
   26b84:	18fb      	adds	r3, r7, r3
   26b86:	781b      	ldrb	r3, [r3, #0]
   26b88:	009b      	lsls	r3, r3, #2
   26b8a:	2210      	movs	r2, #16
   26b8c:	4694      	mov	ip, r2
   26b8e:	44bc      	add	ip, r7
   26b90:	4463      	add	r3, ip
   26b92:	3b08      	subs	r3, #8
   26b94:	681a      	ldr	r2, [r3, #0]
   26b96:	230e      	movs	r3, #14
   26b98:	18fb      	adds	r3, r7, r3
   26b9a:	781b      	ldrb	r3, [r3, #0]
   26b9c:	01db      	lsls	r3, r3, #7
   26b9e:	18d3      	adds	r3, r2, r3
   26ba0:	e000      	b.n	26ba4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   26ba2:	2300      	movs	r3, #0
}
   26ba4:	0018      	movs	r0, r3
   26ba6:	46bd      	mov	sp, r7
   26ba8:	b004      	add	sp, #16
   26baa:	bd80      	pop	{r7, pc}
   26bac:	41004400 	.word	0x41004400

00026bb0 <port_get_group_from_gpio_pin>:
{
   26bb0:	b580      	push	{r7, lr}
   26bb2:	b082      	sub	sp, #8
   26bb4:	af00      	add	r7, sp, #0
   26bb6:	0002      	movs	r2, r0
   26bb8:	1dfb      	adds	r3, r7, #7
   26bba:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   26bbc:	1dfb      	adds	r3, r7, #7
   26bbe:	781b      	ldrb	r3, [r3, #0]
   26bc0:	0018      	movs	r0, r3
   26bc2:	4b03      	ldr	r3, [pc, #12]	; (26bd0 <port_get_group_from_gpio_pin+0x20>)
   26bc4:	4798      	blx	r3
   26bc6:	0003      	movs	r3, r0
}
   26bc8:	0018      	movs	r0, r3
   26bca:	46bd      	mov	sp, r7
   26bcc:	b002      	add	sp, #8
   26bce:	bd80      	pop	{r7, pc}
   26bd0:	00026b51 	.word	0x00026b51

00026bd4 <port_pin_set_output_level>:
{
   26bd4:	b580      	push	{r7, lr}
   26bd6:	b084      	sub	sp, #16
   26bd8:	af00      	add	r7, sp, #0
   26bda:	0002      	movs	r2, r0
   26bdc:	1dfb      	adds	r3, r7, #7
   26bde:	701a      	strb	r2, [r3, #0]
   26be0:	1dbb      	adds	r3, r7, #6
   26be2:	1c0a      	adds	r2, r1, #0
   26be4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   26be6:	1dfb      	adds	r3, r7, #7
   26be8:	781b      	ldrb	r3, [r3, #0]
   26bea:	0018      	movs	r0, r3
   26bec:	4b0d      	ldr	r3, [pc, #52]	; (26c24 <port_pin_set_output_level+0x50>)
   26bee:	4798      	blx	r3
   26bf0:	0003      	movs	r3, r0
   26bf2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   26bf4:	1dfb      	adds	r3, r7, #7
   26bf6:	781b      	ldrb	r3, [r3, #0]
   26bf8:	221f      	movs	r2, #31
   26bfa:	4013      	ands	r3, r2
   26bfc:	2201      	movs	r2, #1
   26bfe:	409a      	lsls	r2, r3
   26c00:	0013      	movs	r3, r2
   26c02:	60bb      	str	r3, [r7, #8]
	if (level) {
   26c04:	1dbb      	adds	r3, r7, #6
   26c06:	781b      	ldrb	r3, [r3, #0]
   26c08:	2b00      	cmp	r3, #0
   26c0a:	d003      	beq.n	26c14 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   26c0c:	68fb      	ldr	r3, [r7, #12]
   26c0e:	68ba      	ldr	r2, [r7, #8]
   26c10:	619a      	str	r2, [r3, #24]
}
   26c12:	e002      	b.n	26c1a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   26c14:	68fb      	ldr	r3, [r7, #12]
   26c16:	68ba      	ldr	r2, [r7, #8]
   26c18:	615a      	str	r2, [r3, #20]
}
   26c1a:	46c0      	nop			; (mov r8, r8)
   26c1c:	46bd      	mov	sp, r7
   26c1e:	b004      	add	sp, #16
   26c20:	bd80      	pop	{r7, pc}
   26c22:	46c0      	nop			; (mov r8, r8)
   26c24:	00026bb1 	.word	0x00026bb1

00026c28 <system_gclk_chan_get_config_defaults>:
{
   26c28:	b580      	push	{r7, lr}
   26c2a:	b082      	sub	sp, #8
   26c2c:	af00      	add	r7, sp, #0
   26c2e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26c30:	687b      	ldr	r3, [r7, #4]
   26c32:	2200      	movs	r2, #0
   26c34:	701a      	strb	r2, [r3, #0]
}
   26c36:	46c0      	nop			; (mov r8, r8)
   26c38:	46bd      	mov	sp, r7
   26c3a:	b002      	add	sp, #8
   26c3c:	bd80      	pop	{r7, pc}
	...

00026c40 <system_apb_clock_set_mask>:
{
   26c40:	b580      	push	{r7, lr}
   26c42:	b082      	sub	sp, #8
   26c44:	af00      	add	r7, sp, #0
   26c46:	0002      	movs	r2, r0
   26c48:	6039      	str	r1, [r7, #0]
   26c4a:	1dfb      	adds	r3, r7, #7
   26c4c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26c4e:	1dfb      	adds	r3, r7, #7
   26c50:	781b      	ldrb	r3, [r3, #0]
   26c52:	2b01      	cmp	r3, #1
   26c54:	d00a      	beq.n	26c6c <system_apb_clock_set_mask+0x2c>
   26c56:	2b02      	cmp	r3, #2
   26c58:	d00f      	beq.n	26c7a <system_apb_clock_set_mask+0x3a>
   26c5a:	2b00      	cmp	r3, #0
   26c5c:	d114      	bne.n	26c88 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26c5e:	4b0e      	ldr	r3, [pc, #56]	; (26c98 <system_apb_clock_set_mask+0x58>)
   26c60:	4a0d      	ldr	r2, [pc, #52]	; (26c98 <system_apb_clock_set_mask+0x58>)
   26c62:	6991      	ldr	r1, [r2, #24]
   26c64:	683a      	ldr	r2, [r7, #0]
   26c66:	430a      	orrs	r2, r1
   26c68:	619a      	str	r2, [r3, #24]
			break;
   26c6a:	e00f      	b.n	26c8c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26c6c:	4b0a      	ldr	r3, [pc, #40]	; (26c98 <system_apb_clock_set_mask+0x58>)
   26c6e:	4a0a      	ldr	r2, [pc, #40]	; (26c98 <system_apb_clock_set_mask+0x58>)
   26c70:	69d1      	ldr	r1, [r2, #28]
   26c72:	683a      	ldr	r2, [r7, #0]
   26c74:	430a      	orrs	r2, r1
   26c76:	61da      	str	r2, [r3, #28]
			break;
   26c78:	e008      	b.n	26c8c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26c7a:	4b07      	ldr	r3, [pc, #28]	; (26c98 <system_apb_clock_set_mask+0x58>)
   26c7c:	4a06      	ldr	r2, [pc, #24]	; (26c98 <system_apb_clock_set_mask+0x58>)
   26c7e:	6a11      	ldr	r1, [r2, #32]
   26c80:	683a      	ldr	r2, [r7, #0]
   26c82:	430a      	orrs	r2, r1
   26c84:	621a      	str	r2, [r3, #32]
			break;
   26c86:	e001      	b.n	26c8c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26c88:	2317      	movs	r3, #23
   26c8a:	e000      	b.n	26c8e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26c8c:	2300      	movs	r3, #0
}
   26c8e:	0018      	movs	r0, r3
   26c90:	46bd      	mov	sp, r7
   26c92:	b002      	add	sp, #8
   26c94:	bd80      	pop	{r7, pc}
   26c96:	46c0      	nop			; (mov r8, r8)
   26c98:	40000400 	.word	0x40000400

00026c9c <system_is_debugger_present>:
{
   26c9c:	b580      	push	{r7, lr}
   26c9e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   26ca0:	4b05      	ldr	r3, [pc, #20]	; (26cb8 <system_is_debugger_present+0x1c>)
   26ca2:	789b      	ldrb	r3, [r3, #2]
   26ca4:	b2db      	uxtb	r3, r3
   26ca6:	001a      	movs	r2, r3
   26ca8:	2302      	movs	r3, #2
   26caa:	4013      	ands	r3, r2
   26cac:	1e5a      	subs	r2, r3, #1
   26cae:	4193      	sbcs	r3, r2
   26cb0:	b2db      	uxtb	r3, r3
}
   26cb2:	0018      	movs	r0, r3
   26cb4:	46bd      	mov	sp, r7
   26cb6:	bd80      	pop	{r7, pc}
   26cb8:	41002000 	.word	0x41002000

00026cbc <system_interrupt_enable>:
{
   26cbc:	b580      	push	{r7, lr}
   26cbe:	b082      	sub	sp, #8
   26cc0:	af00      	add	r7, sp, #0
   26cc2:	0002      	movs	r2, r0
   26cc4:	1dfb      	adds	r3, r7, #7
   26cc6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26cc8:	4b06      	ldr	r3, [pc, #24]	; (26ce4 <system_interrupt_enable+0x28>)
   26cca:	1dfa      	adds	r2, r7, #7
   26ccc:	7812      	ldrb	r2, [r2, #0]
   26cce:	0011      	movs	r1, r2
   26cd0:	221f      	movs	r2, #31
   26cd2:	400a      	ands	r2, r1
   26cd4:	2101      	movs	r1, #1
   26cd6:	4091      	lsls	r1, r2
   26cd8:	000a      	movs	r2, r1
   26cda:	601a      	str	r2, [r3, #0]
}
   26cdc:	46c0      	nop			; (mov r8, r8)
   26cde:	46bd      	mov	sp, r7
   26ce0:	b002      	add	sp, #8
   26ce2:	bd80      	pop	{r7, pc}
   26ce4:	e000e100 	.word	0xe000e100

00026ce8 <system_interrupt_disable>:
{
   26ce8:	b580      	push	{r7, lr}
   26cea:	b082      	sub	sp, #8
   26cec:	af00      	add	r7, sp, #0
   26cee:	0002      	movs	r2, r0
   26cf0:	1dfb      	adds	r3, r7, #7
   26cf2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26cf4:	4a07      	ldr	r2, [pc, #28]	; (26d14 <system_interrupt_disable+0x2c>)
   26cf6:	1dfb      	adds	r3, r7, #7
   26cf8:	781b      	ldrb	r3, [r3, #0]
   26cfa:	0019      	movs	r1, r3
   26cfc:	231f      	movs	r3, #31
   26cfe:	400b      	ands	r3, r1
   26d00:	2101      	movs	r1, #1
   26d02:	4099      	lsls	r1, r3
   26d04:	000b      	movs	r3, r1
   26d06:	0019      	movs	r1, r3
   26d08:	2380      	movs	r3, #128	; 0x80
   26d0a:	50d1      	str	r1, [r2, r3]
}
   26d0c:	46c0      	nop			; (mov r8, r8)
   26d0e:	46bd      	mov	sp, r7
   26d10:	b002      	add	sp, #8
   26d12:	bd80      	pop	{r7, pc}
   26d14:	e000e100 	.word	0xe000e100

00026d18 <spi_is_syncing>:
{
   26d18:	b580      	push	{r7, lr}
   26d1a:	b084      	sub	sp, #16
   26d1c:	af00      	add	r7, sp, #0
   26d1e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26d20:	687b      	ldr	r3, [r7, #4]
   26d22:	681b      	ldr	r3, [r3, #0]
   26d24:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   26d26:	68fb      	ldr	r3, [r7, #12]
   26d28:	69db      	ldr	r3, [r3, #28]
   26d2a:	1e5a      	subs	r2, r3, #1
   26d2c:	4193      	sbcs	r3, r2
   26d2e:	b2db      	uxtb	r3, r3
}
   26d30:	0018      	movs	r0, r3
   26d32:	46bd      	mov	sp, r7
   26d34:	b004      	add	sp, #16
   26d36:	bd80      	pop	{r7, pc}

00026d38 <spi_enable>:
{
   26d38:	b580      	push	{r7, lr}
   26d3a:	b084      	sub	sp, #16
   26d3c:	af00      	add	r7, sp, #0
   26d3e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26d40:	687b      	ldr	r3, [r7, #4]
   26d42:	681b      	ldr	r3, [r3, #0]
   26d44:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   26d46:	687b      	ldr	r3, [r7, #4]
   26d48:	681b      	ldr	r3, [r3, #0]
   26d4a:	0018      	movs	r0, r3
   26d4c:	4b0b      	ldr	r3, [pc, #44]	; (26d7c <spi_enable+0x44>)
   26d4e:	4798      	blx	r3
   26d50:	0003      	movs	r3, r0
   26d52:	0018      	movs	r0, r3
   26d54:	4b0a      	ldr	r3, [pc, #40]	; (26d80 <spi_enable+0x48>)
   26d56:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   26d58:	46c0      	nop			; (mov r8, r8)
   26d5a:	687b      	ldr	r3, [r7, #4]
   26d5c:	0018      	movs	r0, r3
   26d5e:	4b09      	ldr	r3, [pc, #36]	; (26d84 <spi_enable+0x4c>)
   26d60:	4798      	blx	r3
   26d62:	1e03      	subs	r3, r0, #0
   26d64:	d1f9      	bne.n	26d5a <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   26d66:	68fb      	ldr	r3, [r7, #12]
   26d68:	681b      	ldr	r3, [r3, #0]
   26d6a:	2202      	movs	r2, #2
   26d6c:	431a      	orrs	r2, r3
   26d6e:	68fb      	ldr	r3, [r7, #12]
   26d70:	601a      	str	r2, [r3, #0]
}
   26d72:	46c0      	nop			; (mov r8, r8)
   26d74:	46bd      	mov	sp, r7
   26d76:	b004      	add	sp, #16
   26d78:	bd80      	pop	{r7, pc}
   26d7a:	46c0      	nop			; (mov r8, r8)
   26d7c:	00026a55 	.word	0x00026a55
   26d80:	00026cbd 	.word	0x00026cbd
   26d84:	00026d19 	.word	0x00026d19

00026d88 <spi_disable>:
{
   26d88:	b580      	push	{r7, lr}
   26d8a:	b084      	sub	sp, #16
   26d8c:	af00      	add	r7, sp, #0
   26d8e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26d90:	687b      	ldr	r3, [r7, #4]
   26d92:	681b      	ldr	r3, [r3, #0]
   26d94:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   26d96:	687b      	ldr	r3, [r7, #4]
   26d98:	681b      	ldr	r3, [r3, #0]
   26d9a:	0018      	movs	r0, r3
   26d9c:	4b0e      	ldr	r3, [pc, #56]	; (26dd8 <spi_disable+0x50>)
   26d9e:	4798      	blx	r3
   26da0:	0003      	movs	r3, r0
   26da2:	0018      	movs	r0, r3
   26da4:	4b0d      	ldr	r3, [pc, #52]	; (26ddc <spi_disable+0x54>)
   26da6:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   26da8:	46c0      	nop			; (mov r8, r8)
   26daa:	687b      	ldr	r3, [r7, #4]
   26dac:	0018      	movs	r0, r3
   26dae:	4b0c      	ldr	r3, [pc, #48]	; (26de0 <spi_disable+0x58>)
   26db0:	4798      	blx	r3
   26db2:	1e03      	subs	r3, r0, #0
   26db4:	d1f9      	bne.n	26daa <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   26db6:	68fb      	ldr	r3, [r7, #12]
   26db8:	228f      	movs	r2, #143	; 0x8f
   26dba:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   26dbc:	68fb      	ldr	r3, [r7, #12]
   26dbe:	228f      	movs	r2, #143	; 0x8f
   26dc0:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   26dc2:	68fb      	ldr	r3, [r7, #12]
   26dc4:	681b      	ldr	r3, [r3, #0]
   26dc6:	2202      	movs	r2, #2
   26dc8:	4393      	bics	r3, r2
   26dca:	001a      	movs	r2, r3
   26dcc:	68fb      	ldr	r3, [r7, #12]
   26dce:	601a      	str	r2, [r3, #0]
}
   26dd0:	46c0      	nop			; (mov r8, r8)
   26dd2:	46bd      	mov	sp, r7
   26dd4:	b004      	add	sp, #16
   26dd6:	bd80      	pop	{r7, pc}
   26dd8:	00026a55 	.word	0x00026a55
   26ddc:	00026ce9 	.word	0x00026ce9
   26de0:	00026d19 	.word	0x00026d19

00026de4 <spi_is_write_complete>:
{
   26de4:	b580      	push	{r7, lr}
   26de6:	b084      	sub	sp, #16
   26de8:	af00      	add	r7, sp, #0
   26dea:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26dec:	687b      	ldr	r3, [r7, #4]
   26dee:	681b      	ldr	r3, [r3, #0]
   26df0:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   26df2:	68fb      	ldr	r3, [r7, #12]
   26df4:	7e1b      	ldrb	r3, [r3, #24]
   26df6:	b2db      	uxtb	r3, r3
   26df8:	001a      	movs	r2, r3
   26dfa:	2302      	movs	r3, #2
   26dfc:	4013      	ands	r3, r2
   26dfe:	1e5a      	subs	r2, r3, #1
   26e00:	4193      	sbcs	r3, r2
   26e02:	b2db      	uxtb	r3, r3
}
   26e04:	0018      	movs	r0, r3
   26e06:	46bd      	mov	sp, r7
   26e08:	b004      	add	sp, #16
   26e0a:	bd80      	pop	{r7, pc}

00026e0c <spi_is_ready_to_write>:
{
   26e0c:	b580      	push	{r7, lr}
   26e0e:	b084      	sub	sp, #16
   26e10:	af00      	add	r7, sp, #0
   26e12:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26e14:	687b      	ldr	r3, [r7, #4]
   26e16:	681b      	ldr	r3, [r3, #0]
   26e18:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   26e1a:	68fb      	ldr	r3, [r7, #12]
   26e1c:	7e1b      	ldrb	r3, [r3, #24]
   26e1e:	b2db      	uxtb	r3, r3
   26e20:	001a      	movs	r2, r3
   26e22:	2301      	movs	r3, #1
   26e24:	4013      	ands	r3, r2
   26e26:	1e5a      	subs	r2, r3, #1
   26e28:	4193      	sbcs	r3, r2
   26e2a:	b2db      	uxtb	r3, r3
}
   26e2c:	0018      	movs	r0, r3
   26e2e:	46bd      	mov	sp, r7
   26e30:	b004      	add	sp, #16
   26e32:	bd80      	pop	{r7, pc}

00026e34 <spi_is_ready_to_read>:
{
   26e34:	b580      	push	{r7, lr}
   26e36:	b084      	sub	sp, #16
   26e38:	af00      	add	r7, sp, #0
   26e3a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26e3c:	687b      	ldr	r3, [r7, #4]
   26e3e:	681b      	ldr	r3, [r3, #0]
   26e40:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   26e42:	68fb      	ldr	r3, [r7, #12]
   26e44:	7e1b      	ldrb	r3, [r3, #24]
   26e46:	b2db      	uxtb	r3, r3
   26e48:	001a      	movs	r2, r3
   26e4a:	2304      	movs	r3, #4
   26e4c:	4013      	ands	r3, r2
   26e4e:	1e5a      	subs	r2, r3, #1
   26e50:	4193      	sbcs	r3, r2
   26e52:	b2db      	uxtb	r3, r3
}
   26e54:	0018      	movs	r0, r3
   26e56:	46bd      	mov	sp, r7
   26e58:	b004      	add	sp, #16
   26e5a:	bd80      	pop	{r7, pc}

00026e5c <spi_write>:
{
   26e5c:	b580      	push	{r7, lr}
   26e5e:	b084      	sub	sp, #16
   26e60:	af00      	add	r7, sp, #0
   26e62:	6078      	str	r0, [r7, #4]
   26e64:	000a      	movs	r2, r1
   26e66:	1cbb      	adds	r3, r7, #2
   26e68:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26e6a:	687b      	ldr	r3, [r7, #4]
   26e6c:	681b      	ldr	r3, [r3, #0]
   26e6e:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   26e70:	687b      	ldr	r3, [r7, #4]
   26e72:	0018      	movs	r0, r3
   26e74:	4b0a      	ldr	r3, [pc, #40]	; (26ea0 <spi_write+0x44>)
   26e76:	4798      	blx	r3
   26e78:	0003      	movs	r3, r0
   26e7a:	001a      	movs	r2, r3
   26e7c:	2301      	movs	r3, #1
   26e7e:	4053      	eors	r3, r2
   26e80:	b2db      	uxtb	r3, r3
   26e82:	2b00      	cmp	r3, #0
   26e84:	d001      	beq.n	26e8a <spi_write+0x2e>
		return STATUS_BUSY;
   26e86:	2305      	movs	r3, #5
   26e88:	e006      	b.n	26e98 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   26e8a:	1cbb      	adds	r3, r7, #2
   26e8c:	881b      	ldrh	r3, [r3, #0]
   26e8e:	05db      	lsls	r3, r3, #23
   26e90:	0dda      	lsrs	r2, r3, #23
   26e92:	68fb      	ldr	r3, [r7, #12]
   26e94:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   26e96:	2300      	movs	r3, #0
}
   26e98:	0018      	movs	r0, r3
   26e9a:	46bd      	mov	sp, r7
   26e9c:	b004      	add	sp, #16
   26e9e:	bd80      	pop	{r7, pc}
   26ea0:	00026e0d 	.word	0x00026e0d

00026ea4 <spi_read>:
{
   26ea4:	b580      	push	{r7, lr}
   26ea6:	b084      	sub	sp, #16
   26ea8:	af00      	add	r7, sp, #0
   26eaa:	6078      	str	r0, [r7, #4]
   26eac:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26eae:	687b      	ldr	r3, [r7, #4]
   26eb0:	681b      	ldr	r3, [r3, #0]
   26eb2:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   26eb4:	687b      	ldr	r3, [r7, #4]
   26eb6:	0018      	movs	r0, r3
   26eb8:	4b1b      	ldr	r3, [pc, #108]	; (26f28 <spi_read+0x84>)
   26eba:	4798      	blx	r3
   26ebc:	0003      	movs	r3, r0
   26ebe:	001a      	movs	r2, r3
   26ec0:	2301      	movs	r3, #1
   26ec2:	4053      	eors	r3, r2
   26ec4:	b2db      	uxtb	r3, r3
   26ec6:	2b00      	cmp	r3, #0
   26ec8:	d001      	beq.n	26ece <spi_read+0x2a>
		return STATUS_ERR_IO;
   26eca:	2310      	movs	r3, #16
   26ecc:	e027      	b.n	26f1e <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   26ece:	230f      	movs	r3, #15
   26ed0:	18fb      	adds	r3, r7, r3
   26ed2:	2200      	movs	r2, #0
   26ed4:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   26ed6:	68bb      	ldr	r3, [r7, #8]
   26ed8:	8b5b      	ldrh	r3, [r3, #26]
   26eda:	b29b      	uxth	r3, r3
   26edc:	001a      	movs	r2, r3
   26ede:	2304      	movs	r3, #4
   26ee0:	4013      	ands	r3, r2
   26ee2:	d006      	beq.n	26ef2 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   26ee4:	230f      	movs	r3, #15
   26ee6:	18fb      	adds	r3, r7, r3
   26ee8:	221e      	movs	r2, #30
   26eea:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   26eec:	68bb      	ldr	r3, [r7, #8]
   26eee:	2204      	movs	r2, #4
   26ef0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   26ef2:	687b      	ldr	r3, [r7, #4]
   26ef4:	799b      	ldrb	r3, [r3, #6]
   26ef6:	2b01      	cmp	r3, #1
   26ef8:	d108      	bne.n	26f0c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   26efa:	68bb      	ldr	r3, [r7, #8]
   26efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26efe:	b29b      	uxth	r3, r3
   26f00:	05db      	lsls	r3, r3, #23
   26f02:	0ddb      	lsrs	r3, r3, #23
   26f04:	b29a      	uxth	r2, r3
   26f06:	683b      	ldr	r3, [r7, #0]
   26f08:	801a      	strh	r2, [r3, #0]
   26f0a:	e005      	b.n	26f18 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   26f0c:	68bb      	ldr	r3, [r7, #8]
   26f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26f10:	b2db      	uxtb	r3, r3
   26f12:	b29a      	uxth	r2, r3
   26f14:	683b      	ldr	r3, [r7, #0]
   26f16:	801a      	strh	r2, [r3, #0]
	return retval;
   26f18:	230f      	movs	r3, #15
   26f1a:	18fb      	adds	r3, r7, r3
   26f1c:	781b      	ldrb	r3, [r3, #0]
}
   26f1e:	0018      	movs	r0, r3
   26f20:	46bd      	mov	sp, r7
   26f22:	b004      	add	sp, #16
   26f24:	bd80      	pop	{r7, pc}
   26f26:	46c0      	nop			; (mov r8, r8)
   26f28:	00026e35 	.word	0x00026e35

00026f2c <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   26f2c:	b590      	push	{r4, r7, lr}
   26f2e:	b089      	sub	sp, #36	; 0x24
   26f30:	af00      	add	r7, sp, #0
   26f32:	6078      	str	r0, [r7, #4]
   26f34:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   26f36:	230c      	movs	r3, #12
   26f38:	18fb      	adds	r3, r7, r3
   26f3a:	2200      	movs	r2, #0
   26f3c:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   26f3e:	687b      	ldr	r3, [r7, #4]
   26f40:	681b      	ldr	r3, [r3, #0]
   26f42:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   26f44:	687b      	ldr	r3, [r7, #4]
   26f46:	0018      	movs	r0, r3
   26f48:	4b24      	ldr	r3, [pc, #144]	; (26fdc <spi_set_baudrate+0xb0>)
   26f4a:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   26f4c:	46c0      	nop			; (mov r8, r8)
   26f4e:	687b      	ldr	r3, [r7, #4]
   26f50:	0018      	movs	r0, r3
   26f52:	4b23      	ldr	r3, [pc, #140]	; (26fe0 <spi_set_baudrate+0xb4>)
   26f54:	4798      	blx	r3
   26f56:	1e03      	subs	r3, r0, #0
   26f58:	d1f9      	bne.n	26f4e <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   26f5a:	687b      	ldr	r3, [r7, #4]
   26f5c:	681b      	ldr	r3, [r3, #0]
   26f5e:	0018      	movs	r0, r3
   26f60:	4b20      	ldr	r3, [pc, #128]	; (26fe4 <spi_set_baudrate+0xb8>)
   26f62:	4798      	blx	r3
   26f64:	0003      	movs	r3, r0
   26f66:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   26f68:	69bb      	ldr	r3, [r7, #24]
   26f6a:	3314      	adds	r3, #20
   26f6c:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   26f6e:	697b      	ldr	r3, [r7, #20]
   26f70:	b2db      	uxtb	r3, r3
   26f72:	0018      	movs	r0, r3
   26f74:	4b1c      	ldr	r3, [pc, #112]	; (26fe8 <spi_set_baudrate+0xbc>)
   26f76:	4798      	blx	r3
   26f78:	0003      	movs	r3, r0
   26f7a:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   26f7c:	230f      	movs	r3, #15
   26f7e:	18fc      	adds	r4, r7, r3
   26f80:	230c      	movs	r3, #12
   26f82:	18fa      	adds	r2, r7, r3
   26f84:	6939      	ldr	r1, [r7, #16]
   26f86:	683b      	ldr	r3, [r7, #0]
   26f88:	0018      	movs	r0, r3
   26f8a:	4b18      	ldr	r3, [pc, #96]	; (26fec <spi_set_baudrate+0xc0>)
   26f8c:	4798      	blx	r3
   26f8e:	0003      	movs	r3, r0
   26f90:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   26f92:	230f      	movs	r3, #15
   26f94:	18fb      	adds	r3, r7, r3
   26f96:	781b      	ldrb	r3, [r3, #0]
   26f98:	2b00      	cmp	r3, #0
   26f9a:	d001      	beq.n	26fa0 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   26f9c:	2317      	movs	r3, #23
   26f9e:	e018      	b.n	26fd2 <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   26fa0:	230c      	movs	r3, #12
   26fa2:	18fb      	adds	r3, r7, r3
   26fa4:	881b      	ldrh	r3, [r3, #0]
   26fa6:	b2da      	uxtb	r2, r3
   26fa8:	69fb      	ldr	r3, [r7, #28]
   26faa:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   26fac:	46c0      	nop			; (mov r8, r8)
   26fae:	687b      	ldr	r3, [r7, #4]
   26fb0:	0018      	movs	r0, r3
   26fb2:	4b0b      	ldr	r3, [pc, #44]	; (26fe0 <spi_set_baudrate+0xb4>)
   26fb4:	4798      	blx	r3
   26fb6:	1e03      	subs	r3, r0, #0
   26fb8:	d1f9      	bne.n	26fae <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   26fba:	687b      	ldr	r3, [r7, #4]
   26fbc:	0018      	movs	r0, r3
   26fbe:	4b0c      	ldr	r3, [pc, #48]	; (26ff0 <spi_set_baudrate+0xc4>)
   26fc0:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   26fc2:	46c0      	nop			; (mov r8, r8)
   26fc4:	687b      	ldr	r3, [r7, #4]
   26fc6:	0018      	movs	r0, r3
   26fc8:	4b05      	ldr	r3, [pc, #20]	; (26fe0 <spi_set_baudrate+0xb4>)
   26fca:	4798      	blx	r3
   26fcc:	1e03      	subs	r3, r0, #0
   26fce:	d1f9      	bne.n	26fc4 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   26fd0:	2300      	movs	r3, #0
}
   26fd2:	0018      	movs	r0, r3
   26fd4:	46bd      	mov	sp, r7
   26fd6:	b009      	add	sp, #36	; 0x24
   26fd8:	bd90      	pop	{r4, r7, pc}
   26fda:	46c0      	nop			; (mov r8, r8)
   26fdc:	00026d89 	.word	0x00026d89
   26fe0:	00026d19 	.word	0x00026d19
   26fe4:	00026985 	.word	0x00026985
   26fe8:	00029339 	.word	0x00029339
   26fec:	000264ff 	.word	0x000264ff
   26ff0:	00026d39 	.word	0x00026d39

00026ff4 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   26ff4:	b590      	push	{r4, r7, lr}
   26ff6:	b093      	sub	sp, #76	; 0x4c
   26ff8:	af00      	add	r7, sp, #0
   26ffa:	6078      	str	r0, [r7, #4]
   26ffc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   26ffe:	687b      	ldr	r3, [r7, #4]
   27000:	681b      	ldr	r3, [r3, #0]
   27002:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   27004:	687b      	ldr	r3, [r7, #4]
   27006:	681b      	ldr	r3, [r3, #0]
   27008:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2700a:	231c      	movs	r3, #28
   2700c:	18fb      	adds	r3, r7, r3
   2700e:	0018      	movs	r0, r3
   27010:	4b75      	ldr	r3, [pc, #468]	; (271e8 <_spi_set_config+0x1f4>)
   27012:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27014:	231c      	movs	r3, #28
   27016:	18fb      	adds	r3, r7, r3
   27018:	2200      	movs	r2, #0
   2701a:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   2701c:	683b      	ldr	r3, [r7, #0]
   2701e:	781b      	ldrb	r3, [r3, #0]
   27020:	2b00      	cmp	r3, #0
   27022:	d103      	bne.n	2702c <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   27024:	231c      	movs	r3, #28
   27026:	18fb      	adds	r3, r7, r3
   27028:	2200      	movs	r2, #0
   2702a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   2702c:	683b      	ldr	r3, [r7, #0]
   2702e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   27030:	230c      	movs	r3, #12
   27032:	18fb      	adds	r3, r7, r3
   27034:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   27036:	683b      	ldr	r3, [r7, #0]
   27038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   2703a:	230c      	movs	r3, #12
   2703c:	18fb      	adds	r3, r7, r3
   2703e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   27040:	683b      	ldr	r3, [r7, #0]
   27042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   27044:	230c      	movs	r3, #12
   27046:	18fb      	adds	r3, r7, r3
   27048:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2704a:	683b      	ldr	r3, [r7, #0]
   2704c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2704e:	230c      	movs	r3, #12
   27050:	18fb      	adds	r3, r7, r3
   27052:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   27054:	2347      	movs	r3, #71	; 0x47
   27056:	18fb      	adds	r3, r7, r3
   27058:	2200      	movs	r2, #0
   2705a:	701a      	strb	r2, [r3, #0]
   2705c:	e02c      	b.n	270b8 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2705e:	2347      	movs	r3, #71	; 0x47
   27060:	18fb      	adds	r3, r7, r3
   27062:	781a      	ldrb	r2, [r3, #0]
   27064:	230c      	movs	r3, #12
   27066:	18fb      	adds	r3, r7, r3
   27068:	0092      	lsls	r2, r2, #2
   2706a:	58d3      	ldr	r3, [r2, r3]
   2706c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   2706e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27070:	2b00      	cmp	r3, #0
   27072:	d109      	bne.n	27088 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   27074:	2347      	movs	r3, #71	; 0x47
   27076:	18fb      	adds	r3, r7, r3
   27078:	781a      	ldrb	r2, [r3, #0]
   2707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2707c:	0011      	movs	r1, r2
   2707e:	0018      	movs	r0, r3
   27080:	4b5a      	ldr	r3, [pc, #360]	; (271ec <_spi_set_config+0x1f8>)
   27082:	4798      	blx	r3
   27084:	0003      	movs	r3, r0
   27086:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   27088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2708a:	3301      	adds	r3, #1
   2708c:	d00d      	beq.n	270aa <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   2708e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27090:	b2da      	uxtb	r2, r3
   27092:	231c      	movs	r3, #28
   27094:	18fb      	adds	r3, r7, r3
   27096:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   27098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2709a:	0c1b      	lsrs	r3, r3, #16
   2709c:	b2db      	uxtb	r3, r3
   2709e:	221c      	movs	r2, #28
   270a0:	18ba      	adds	r2, r7, r2
   270a2:	0011      	movs	r1, r2
   270a4:	0018      	movs	r0, r3
   270a6:	4b52      	ldr	r3, [pc, #328]	; (271f0 <_spi_set_config+0x1fc>)
   270a8:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   270aa:	2347      	movs	r3, #71	; 0x47
   270ac:	18fb      	adds	r3, r7, r3
   270ae:	781a      	ldrb	r2, [r3, #0]
   270b0:	2347      	movs	r3, #71	; 0x47
   270b2:	18fb      	adds	r3, r7, r3
   270b4:	3201      	adds	r2, #1
   270b6:	701a      	strb	r2, [r3, #0]
   270b8:	2347      	movs	r3, #71	; 0x47
   270ba:	18fb      	adds	r3, r7, r3
   270bc:	781b      	ldrb	r3, [r3, #0]
   270be:	2b03      	cmp	r3, #3
   270c0:	d9cd      	bls.n	2705e <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   270c2:	683b      	ldr	r3, [r7, #0]
   270c4:	781a      	ldrb	r2, [r3, #0]
   270c6:	687b      	ldr	r3, [r7, #4]
   270c8:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   270ca:	683b      	ldr	r3, [r7, #0]
   270cc:	7c1a      	ldrb	r2, [r3, #16]
   270ce:	687b      	ldr	r3, [r7, #4]
   270d0:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   270d2:	683b      	ldr	r3, [r7, #0]
   270d4:	7c9a      	ldrb	r2, [r3, #18]
   270d6:	687b      	ldr	r3, [r7, #4]
   270d8:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   270da:	683b      	ldr	r3, [r7, #0]
   270dc:	7d1a      	ldrb	r2, [r3, #20]
   270de:	687b      	ldr	r3, [r7, #4]
   270e0:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   270e2:	230a      	movs	r3, #10
   270e4:	18fb      	adds	r3, r7, r3
   270e6:	2200      	movs	r2, #0
   270e8:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   270ea:	2300      	movs	r3, #0
   270ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   270ee:	2300      	movs	r3, #0
   270f0:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   270f2:	683b      	ldr	r3, [r7, #0]
   270f4:	781b      	ldrb	r3, [r3, #0]
   270f6:	2b01      	cmp	r3, #1
   270f8:	d129      	bne.n	2714e <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   270fa:	687b      	ldr	r3, [r7, #4]
   270fc:	681b      	ldr	r3, [r3, #0]
   270fe:	0018      	movs	r0, r3
   27100:	4b3c      	ldr	r3, [pc, #240]	; (271f4 <_spi_set_config+0x200>)
   27102:	4798      	blx	r3
   27104:	0003      	movs	r3, r0
   27106:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2710a:	3314      	adds	r3, #20
   2710c:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   2710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27110:	b2db      	uxtb	r3, r3
   27112:	0018      	movs	r0, r3
   27114:	4b38      	ldr	r3, [pc, #224]	; (271f8 <_spi_set_config+0x204>)
   27116:	4798      	blx	r3
   27118:	0003      	movs	r3, r0
   2711a:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   2711c:	683b      	ldr	r3, [r7, #0]
   2711e:	699b      	ldr	r3, [r3, #24]
   27120:	2223      	movs	r2, #35	; 0x23
   27122:	18bc      	adds	r4, r7, r2
   27124:	220a      	movs	r2, #10
   27126:	18ba      	adds	r2, r7, r2
   27128:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2712a:	0018      	movs	r0, r3
   2712c:	4b33      	ldr	r3, [pc, #204]	; (271fc <_spi_set_config+0x208>)
   2712e:	4798      	blx	r3
   27130:	0003      	movs	r3, r0
   27132:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   27134:	2323      	movs	r3, #35	; 0x23
   27136:	18fb      	adds	r3, r7, r3
   27138:	781b      	ldrb	r3, [r3, #0]
   2713a:	2b00      	cmp	r3, #0
   2713c:	d001      	beq.n	27142 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   2713e:	2317      	movs	r3, #23
   27140:	e04e      	b.n	271e0 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   27142:	230a      	movs	r3, #10
   27144:	18fb      	adds	r3, r7, r3
   27146:	881b      	ldrh	r3, [r3, #0]
   27148:	b2da      	uxtb	r2, r3
   2714a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2714c:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   2714e:	683b      	ldr	r3, [r7, #0]
   27150:	685b      	ldr	r3, [r3, #4]
   27152:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27154:	4313      	orrs	r3, r2
   27156:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   27158:	683b      	ldr	r3, [r7, #0]
   2715a:	689b      	ldr	r3, [r3, #8]
   2715c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2715e:	4313      	orrs	r3, r2
   27160:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   27162:	683b      	ldr	r3, [r7, #0]
   27164:	68db      	ldr	r3, [r3, #12]
   27166:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   27168:	4313      	orrs	r3, r2
   2716a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   2716c:	683b      	ldr	r3, [r7, #0]
   2716e:	7c1b      	ldrb	r3, [r3, #16]
   27170:	001a      	movs	r2, r3
   27172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27174:	4313      	orrs	r3, r2
   27176:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   27178:	683b      	ldr	r3, [r7, #0]
   2717a:	7c5b      	ldrb	r3, [r3, #17]
   2717c:	2b00      	cmp	r3, #0
   2717e:	d103      	bne.n	27188 <_spi_set_config+0x194>
   27180:	4b1f      	ldr	r3, [pc, #124]	; (27200 <_spi_set_config+0x20c>)
   27182:	4798      	blx	r3
   27184:	1e03      	subs	r3, r0, #0
   27186:	d003      	beq.n	27190 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   27188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2718a:	2280      	movs	r2, #128	; 0x80
   2718c:	4313      	orrs	r3, r2
   2718e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   27190:	683b      	ldr	r3, [r7, #0]
   27192:	7c9b      	ldrb	r3, [r3, #18]
   27194:	2b00      	cmp	r3, #0
   27196:	d004      	beq.n	271a2 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   27198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2719a:	2280      	movs	r2, #128	; 0x80
   2719c:	0292      	lsls	r2, r2, #10
   2719e:	4313      	orrs	r3, r2
   271a0:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   271a2:	683b      	ldr	r3, [r7, #0]
   271a4:	7cdb      	ldrb	r3, [r3, #19]
   271a6:	2b00      	cmp	r3, #0
   271a8:	d004      	beq.n	271b4 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   271aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   271ac:	2280      	movs	r2, #128	; 0x80
   271ae:	0092      	lsls	r2, r2, #2
   271b0:	4313      	orrs	r3, r2
   271b2:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   271b4:	683b      	ldr	r3, [r7, #0]
   271b6:	7d1b      	ldrb	r3, [r3, #20]
   271b8:	2b00      	cmp	r3, #0
   271ba:	d004      	beq.n	271c6 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   271bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   271be:	2280      	movs	r2, #128	; 0x80
   271c0:	0192      	lsls	r2, r2, #6
   271c2:	4313      	orrs	r3, r2
   271c4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   271c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   271c8:	681a      	ldr	r2, [r3, #0]
   271ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   271cc:	431a      	orrs	r2, r3
   271ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   271d0:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   271d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   271d4:	685a      	ldr	r2, [r3, #4]
   271d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   271d8:	431a      	orrs	r2, r3
   271da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   271dc:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   271de:	2300      	movs	r3, #0
}
   271e0:	0018      	movs	r0, r3
   271e2:	46bd      	mov	sp, r7
   271e4:	b013      	add	sp, #76	; 0x4c
   271e6:	bd90      	pop	{r4, r7, pc}
   271e8:	00026b29 	.word	0x00026b29
   271ec:	000267c9 	.word	0x000267c9
   271f0:	00029575 	.word	0x00029575
   271f4:	00026985 	.word	0x00026985
   271f8:	00029339 	.word	0x00029339
   271fc:	000264ff 	.word	0x000264ff
   27200:	00026c9d 	.word	0x00026c9d

00027204 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   27204:	b590      	push	{r4, r7, lr}
   27206:	b08b      	sub	sp, #44	; 0x2c
   27208:	af00      	add	r7, sp, #0
   2720a:	60f8      	str	r0, [r7, #12]
   2720c:	60b9      	str	r1, [r7, #8]
   2720e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27210:	68fb      	ldr	r3, [r7, #12]
   27212:	68ba      	ldr	r2, [r7, #8]
   27214:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   27216:	68fb      	ldr	r3, [r7, #12]
   27218:	681b      	ldr	r3, [r3, #0]
   2721a:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   2721c:	6a3b      	ldr	r3, [r7, #32]
   2721e:	681b      	ldr	r3, [r3, #0]
   27220:	2202      	movs	r2, #2
   27222:	4013      	ands	r3, r2
   27224:	d001      	beq.n	2722a <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   27226:	231c      	movs	r3, #28
   27228:	e09c      	b.n	27364 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   2722a:	6a3b      	ldr	r3, [r7, #32]
   2722c:	681b      	ldr	r3, [r3, #0]
   2722e:	2201      	movs	r2, #1
   27230:	4013      	ands	r3, r2
   27232:	d001      	beq.n	27238 <spi_init+0x34>
		return STATUS_BUSY;
   27234:	2305      	movs	r3, #5
   27236:	e095      	b.n	27364 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27238:	68fb      	ldr	r3, [r7, #12]
   2723a:	681b      	ldr	r3, [r3, #0]
   2723c:	0018      	movs	r0, r3
   2723e:	4b4b      	ldr	r3, [pc, #300]	; (2736c <spi_init+0x168>)
   27240:	4798      	blx	r3
   27242:	0003      	movs	r3, r0
   27244:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   27246:	69fb      	ldr	r3, [r7, #28]
   27248:	3302      	adds	r3, #2
   2724a:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2724c:	69fb      	ldr	r3, [r7, #28]
   2724e:	3314      	adds	r3, #20
   27250:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   27252:	2201      	movs	r2, #1
   27254:	69bb      	ldr	r3, [r7, #24]
   27256:	409a      	lsls	r2, r3
   27258:	0013      	movs	r3, r2
   2725a:	0019      	movs	r1, r3
   2725c:	2002      	movs	r0, #2
   2725e:	4b44      	ldr	r3, [pc, #272]	; (27370 <spi_init+0x16c>)
   27260:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27262:	2310      	movs	r3, #16
   27264:	18fb      	adds	r3, r7, r3
   27266:	0018      	movs	r0, r3
   27268:	4b42      	ldr	r3, [pc, #264]	; (27374 <spi_init+0x170>)
   2726a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   2726c:	687b      	ldr	r3, [r7, #4]
   2726e:	2224      	movs	r2, #36	; 0x24
   27270:	5c9a      	ldrb	r2, [r3, r2]
   27272:	2310      	movs	r3, #16
   27274:	18fb      	adds	r3, r7, r3
   27276:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   27278:	697b      	ldr	r3, [r7, #20]
   2727a:	b2db      	uxtb	r3, r3
   2727c:	2210      	movs	r2, #16
   2727e:	18ba      	adds	r2, r7, r2
   27280:	0011      	movs	r1, r2
   27282:	0018      	movs	r0, r3
   27284:	4b3c      	ldr	r3, [pc, #240]	; (27378 <spi_init+0x174>)
   27286:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   27288:	697b      	ldr	r3, [r7, #20]
   2728a:	b2db      	uxtb	r3, r3
   2728c:	0018      	movs	r0, r3
   2728e:	4b3b      	ldr	r3, [pc, #236]	; (2737c <spi_init+0x178>)
   27290:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   27292:	687b      	ldr	r3, [r7, #4]
   27294:	2224      	movs	r2, #36	; 0x24
   27296:	5c9b      	ldrb	r3, [r3, r2]
   27298:	2100      	movs	r1, #0
   2729a:	0018      	movs	r0, r3
   2729c:	4b38      	ldr	r3, [pc, #224]	; (27380 <spi_init+0x17c>)
   2729e:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   272a0:	687b      	ldr	r3, [r7, #4]
   272a2:	781b      	ldrb	r3, [r3, #0]
   272a4:	2b01      	cmp	r3, #1
   272a6:	d105      	bne.n	272b4 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   272a8:	6a3b      	ldr	r3, [r7, #32]
   272aa:	681b      	ldr	r3, [r3, #0]
   272ac:	220c      	movs	r2, #12
   272ae:	431a      	orrs	r2, r3
   272b0:	6a3b      	ldr	r3, [r7, #32]
   272b2:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   272b4:	2327      	movs	r3, #39	; 0x27
   272b6:	18fb      	adds	r3, r7, r3
   272b8:	2200      	movs	r2, #0
   272ba:	701a      	strb	r2, [r3, #0]
   272bc:	e010      	b.n	272e0 <spi_init+0xdc>
		module->callback[i]        = NULL;
   272be:	2327      	movs	r3, #39	; 0x27
   272c0:	18fb      	adds	r3, r7, r3
   272c2:	781b      	ldrb	r3, [r3, #0]
   272c4:	68fa      	ldr	r2, [r7, #12]
   272c6:	3302      	adds	r3, #2
   272c8:	009b      	lsls	r3, r3, #2
   272ca:	18d3      	adds	r3, r2, r3
   272cc:	3304      	adds	r3, #4
   272ce:	2200      	movs	r2, #0
   272d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   272d2:	2327      	movs	r3, #39	; 0x27
   272d4:	18fb      	adds	r3, r7, r3
   272d6:	781a      	ldrb	r2, [r3, #0]
   272d8:	2327      	movs	r3, #39	; 0x27
   272da:	18fb      	adds	r3, r7, r3
   272dc:	3201      	adds	r2, #1
   272de:	701a      	strb	r2, [r3, #0]
   272e0:	2327      	movs	r3, #39	; 0x27
   272e2:	18fb      	adds	r3, r7, r3
   272e4:	781b      	ldrb	r3, [r3, #0]
   272e6:	2b06      	cmp	r3, #6
   272e8:	d9e9      	bls.n	272be <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   272ea:	68fb      	ldr	r3, [r7, #12]
   272ec:	2200      	movs	r2, #0
   272ee:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   272f0:	68fb      	ldr	r3, [r7, #12]
   272f2:	2200      	movs	r2, #0
   272f4:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   272f6:	68fb      	ldr	r3, [r7, #12]
   272f8:	2200      	movs	r2, #0
   272fa:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   272fc:	68fb      	ldr	r3, [r7, #12]
   272fe:	2200      	movs	r2, #0
   27300:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   27302:	68fb      	ldr	r3, [r7, #12]
   27304:	2236      	movs	r2, #54	; 0x36
   27306:	2100      	movs	r1, #0
   27308:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   2730a:	68fb      	ldr	r3, [r7, #12]
   2730c:	2237      	movs	r2, #55	; 0x37
   2730e:	2100      	movs	r1, #0
   27310:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   27312:	68fb      	ldr	r3, [r7, #12]
   27314:	2238      	movs	r2, #56	; 0x38
   27316:	2100      	movs	r1, #0
   27318:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   2731a:	68fb      	ldr	r3, [r7, #12]
   2731c:	2203      	movs	r2, #3
   2731e:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   27320:	68fb      	ldr	r3, [r7, #12]
   27322:	2200      	movs	r2, #0
   27324:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   27326:	68fb      	ldr	r3, [r7, #12]
   27328:	681b      	ldr	r3, [r3, #0]
   2732a:	2213      	movs	r2, #19
   2732c:	18bc      	adds	r4, r7, r2
   2732e:	0018      	movs	r0, r3
   27330:	4b0e      	ldr	r3, [pc, #56]	; (2736c <spi_init+0x168>)
   27332:	4798      	blx	r3
   27334:	0003      	movs	r3, r0
   27336:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   27338:	4a12      	ldr	r2, [pc, #72]	; (27384 <spi_init+0x180>)
   2733a:	2313      	movs	r3, #19
   2733c:	18fb      	adds	r3, r7, r3
   2733e:	781b      	ldrb	r3, [r3, #0]
   27340:	0011      	movs	r1, r2
   27342:	0018      	movs	r0, r3
   27344:	4b10      	ldr	r3, [pc, #64]	; (27388 <spi_init+0x184>)
   27346:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   27348:	2313      	movs	r3, #19
   2734a:	18fb      	adds	r3, r7, r3
   2734c:	781a      	ldrb	r2, [r3, #0]
   2734e:	4b0f      	ldr	r3, [pc, #60]	; (2738c <spi_init+0x188>)
   27350:	0092      	lsls	r2, r2, #2
   27352:	68f9      	ldr	r1, [r7, #12]
   27354:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   27356:	687a      	ldr	r2, [r7, #4]
   27358:	68fb      	ldr	r3, [r7, #12]
   2735a:	0011      	movs	r1, r2
   2735c:	0018      	movs	r0, r3
   2735e:	4b0c      	ldr	r3, [pc, #48]	; (27390 <spi_init+0x18c>)
   27360:	4798      	blx	r3
   27362:	0003      	movs	r3, r0
}
   27364:	0018      	movs	r0, r3
   27366:	46bd      	mov	sp, r7
   27368:	b00b      	add	sp, #44	; 0x2c
   2736a:	bd90      	pop	{r4, r7, pc}
   2736c:	00026985 	.word	0x00026985
   27370:	00026c41 	.word	0x00026c41
   27374:	00026c29 	.word	0x00026c29
   27378:	00029215 	.word	0x00029215
   2737c:	00029259 	.word	0x00029259
   27380:	0002673d 	.word	0x0002673d
   27384:	0002785d 	.word	0x0002785d
   27388:	000269e9 	.word	0x000269e9
   2738c:	20005614 	.word	0x20005614
   27390:	00026ff5 	.word	0x00026ff5

00027394 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   27394:	b590      	push	{r4, r7, lr}
   27396:	b087      	sub	sp, #28
   27398:	af00      	add	r7, sp, #0
   2739a:	60f8      	str	r0, [r7, #12]
   2739c:	60b9      	str	r1, [r7, #8]
   2739e:	0019      	movs	r1, r3
   273a0:	1dbb      	adds	r3, r7, #6
   273a2:	801a      	strh	r2, [r3, #0]
   273a4:	1d3b      	adds	r3, r7, #4
   273a6:	1c0a      	adds	r2, r1, #0
   273a8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   273aa:	68fb      	ldr	r3, [r7, #12]
   273ac:	2238      	movs	r2, #56	; 0x38
   273ae:	5c9b      	ldrb	r3, [r3, r2]
   273b0:	b2db      	uxtb	r3, r3
   273b2:	2b05      	cmp	r3, #5
   273b4:	d101      	bne.n	273ba <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   273b6:	2305      	movs	r3, #5
   273b8:	e07a      	b.n	274b0 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   273ba:	1dbb      	adds	r3, r7, #6
   273bc:	881b      	ldrh	r3, [r3, #0]
   273be:	2b00      	cmp	r3, #0
   273c0:	d101      	bne.n	273c6 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   273c2:	2317      	movs	r3, #23
   273c4:	e074      	b.n	274b0 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   273c6:	68fb      	ldr	r3, [r7, #12]
   273c8:	79db      	ldrb	r3, [r3, #7]
   273ca:	2201      	movs	r2, #1
   273cc:	4053      	eors	r3, r2
   273ce:	b2db      	uxtb	r3, r3
   273d0:	2b00      	cmp	r3, #0
   273d2:	d001      	beq.n	273d8 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   273d4:	231c      	movs	r3, #28
   273d6:	e06b      	b.n	274b0 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   273d8:	2316      	movs	r3, #22
   273da:	18fb      	adds	r3, r7, r3
   273dc:	2200      	movs	r2, #0
   273de:	801a      	strh	r2, [r3, #0]

	while (length--) {
   273e0:	e05e      	b.n	274a0 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   273e2:	68fb      	ldr	r3, [r7, #12]
   273e4:	795b      	ldrb	r3, [r3, #5]
   273e6:	2b01      	cmp	r3, #1
   273e8:	d112      	bne.n	27410 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   273ea:	46c0      	nop			; (mov r8, r8)
   273ec:	68fb      	ldr	r3, [r7, #12]
   273ee:	0018      	movs	r0, r3
   273f0:	4b31      	ldr	r3, [pc, #196]	; (274b8 <spi_read_buffer_wait+0x124>)
   273f2:	4798      	blx	r3
   273f4:	0003      	movs	r3, r0
   273f6:	001a      	movs	r2, r3
   273f8:	2301      	movs	r3, #1
   273fa:	4053      	eors	r3, r2
   273fc:	b2db      	uxtb	r3, r3
   273fe:	2b00      	cmp	r3, #0
   27400:	d1f4      	bne.n	273ec <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   27402:	1d3b      	adds	r3, r7, #4
   27404:	881a      	ldrh	r2, [r3, #0]
   27406:	68fb      	ldr	r3, [r7, #12]
   27408:	0011      	movs	r1, r2
   2740a:	0018      	movs	r0, r3
   2740c:	4b2b      	ldr	r3, [pc, #172]	; (274bc <spi_read_buffer_wait+0x128>)
   2740e:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   27410:	46c0      	nop			; (mov r8, r8)
   27412:	68fb      	ldr	r3, [r7, #12]
   27414:	0018      	movs	r0, r3
   27416:	4b2a      	ldr	r3, [pc, #168]	; (274c0 <spi_read_buffer_wait+0x12c>)
   27418:	4798      	blx	r3
   2741a:	0003      	movs	r3, r0
   2741c:	001a      	movs	r2, r3
   2741e:	2301      	movs	r3, #1
   27420:	4053      	eors	r3, r2
   27422:	b2db      	uxtb	r3, r3
   27424:	2b00      	cmp	r3, #0
   27426:	d1f4      	bne.n	27412 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   27428:	2312      	movs	r3, #18
   2742a:	18fb      	adds	r3, r7, r3
   2742c:	2200      	movs	r2, #0
   2742e:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   27430:	2315      	movs	r3, #21
   27432:	18fc      	adds	r4, r7, r3
   27434:	2312      	movs	r3, #18
   27436:	18fa      	adds	r2, r7, r3
   27438:	68fb      	ldr	r3, [r7, #12]
   2743a:	0011      	movs	r1, r2
   2743c:	0018      	movs	r0, r3
   2743e:	4b21      	ldr	r3, [pc, #132]	; (274c4 <spi_read_buffer_wait+0x130>)
   27440:	4798      	blx	r3
   27442:	0003      	movs	r3, r0
   27444:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   27446:	2315      	movs	r3, #21
   27448:	18fb      	adds	r3, r7, r3
   2744a:	781b      	ldrb	r3, [r3, #0]
   2744c:	2b00      	cmp	r3, #0
   2744e:	d003      	beq.n	27458 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   27450:	2315      	movs	r3, #21
   27452:	18fb      	adds	r3, r7, r3
   27454:	781b      	ldrb	r3, [r3, #0]
   27456:	e02b      	b.n	274b0 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   27458:	2316      	movs	r3, #22
   2745a:	18fb      	adds	r3, r7, r3
   2745c:	881b      	ldrh	r3, [r3, #0]
   2745e:	2216      	movs	r2, #22
   27460:	18ba      	adds	r2, r7, r2
   27462:	1c59      	adds	r1, r3, #1
   27464:	8011      	strh	r1, [r2, #0]
   27466:	001a      	movs	r2, r3
   27468:	68bb      	ldr	r3, [r7, #8]
   2746a:	189b      	adds	r3, r3, r2
   2746c:	2212      	movs	r2, #18
   2746e:	18ba      	adds	r2, r7, r2
   27470:	8812      	ldrh	r2, [r2, #0]
   27472:	b2d2      	uxtb	r2, r2
   27474:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27476:	68fb      	ldr	r3, [r7, #12]
   27478:	799b      	ldrb	r3, [r3, #6]
   2747a:	2b01      	cmp	r3, #1
   2747c:	d110      	bne.n	274a0 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   2747e:	2316      	movs	r3, #22
   27480:	18fb      	adds	r3, r7, r3
   27482:	881b      	ldrh	r3, [r3, #0]
   27484:	2216      	movs	r2, #22
   27486:	18ba      	adds	r2, r7, r2
   27488:	1c59      	adds	r1, r3, #1
   2748a:	8011      	strh	r1, [r2, #0]
   2748c:	001a      	movs	r2, r3
   2748e:	68bb      	ldr	r3, [r7, #8]
   27490:	189b      	adds	r3, r3, r2
   27492:	2212      	movs	r2, #18
   27494:	18ba      	adds	r2, r7, r2
   27496:	8812      	ldrh	r2, [r2, #0]
   27498:	0a12      	lsrs	r2, r2, #8
   2749a:	b292      	uxth	r2, r2
   2749c:	b2d2      	uxtb	r2, r2
   2749e:	701a      	strb	r2, [r3, #0]
	while (length--) {
   274a0:	1dbb      	adds	r3, r7, #6
   274a2:	881b      	ldrh	r3, [r3, #0]
   274a4:	1dba      	adds	r2, r7, #6
   274a6:	1e59      	subs	r1, r3, #1
   274a8:	8011      	strh	r1, [r2, #0]
   274aa:	2b00      	cmp	r3, #0
   274ac:	d199      	bne.n	273e2 <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   274ae:	2300      	movs	r3, #0
}
   274b0:	0018      	movs	r0, r3
   274b2:	46bd      	mov	sp, r7
   274b4:	b007      	add	sp, #28
   274b6:	bd90      	pop	{r4, r7, pc}
   274b8:	00026e0d 	.word	0x00026e0d
   274bc:	00026e5d 	.word	0x00026e5d
   274c0:	00026e35 	.word	0x00026e35
   274c4:	00026ea5 	.word	0x00026ea5

000274c8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   274c8:	b580      	push	{r7, lr}
   274ca:	b086      	sub	sp, #24
   274cc:	af00      	add	r7, sp, #0
   274ce:	60f8      	str	r0, [r7, #12]
   274d0:	60b9      	str	r1, [r7, #8]
   274d2:	1dfb      	adds	r3, r7, #7
   274d4:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   274d6:	68fb      	ldr	r3, [r7, #12]
   274d8:	795b      	ldrb	r3, [r3, #5]
   274da:	2b01      	cmp	r3, #1
   274dc:	d001      	beq.n	274e2 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   274de:	2315      	movs	r3, #21
   274e0:	e05c      	b.n	2759c <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   274e2:	68fb      	ldr	r3, [r7, #12]
   274e4:	7a1b      	ldrb	r3, [r3, #8]
   274e6:	2201      	movs	r2, #1
   274e8:	4053      	eors	r3, r2
   274ea:	b2db      	uxtb	r3, r3
   274ec:	2b00      	cmp	r3, #0
   274ee:	d054      	beq.n	2759a <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   274f0:	1dfb      	adds	r3, r7, #7
   274f2:	781b      	ldrb	r3, [r3, #0]
   274f4:	2b00      	cmp	r3, #0
   274f6:	d04a      	beq.n	2758e <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   274f8:	68bb      	ldr	r3, [r7, #8]
   274fa:	785b      	ldrb	r3, [r3, #1]
   274fc:	2b00      	cmp	r3, #0
   274fe:	d03f      	beq.n	27580 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   27500:	68fb      	ldr	r3, [r7, #12]
   27502:	0018      	movs	r0, r3
   27504:	4b27      	ldr	r3, [pc, #156]	; (275a4 <spi_select_slave+0xdc>)
   27506:	4798      	blx	r3
   27508:	0003      	movs	r3, r0
   2750a:	001a      	movs	r2, r3
   2750c:	2301      	movs	r3, #1
   2750e:	4053      	eors	r3, r2
   27510:	b2db      	uxtb	r3, r3
   27512:	2b00      	cmp	r3, #0
   27514:	d007      	beq.n	27526 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   27516:	68bb      	ldr	r3, [r7, #8]
   27518:	781b      	ldrb	r3, [r3, #0]
   2751a:	2101      	movs	r1, #1
   2751c:	0018      	movs	r0, r3
   2751e:	4b22      	ldr	r3, [pc, #136]	; (275a8 <spi_select_slave+0xe0>)
   27520:	4798      	blx	r3
					return STATUS_BUSY;
   27522:	2305      	movs	r3, #5
   27524:	e03a      	b.n	2759c <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   27526:	68bb      	ldr	r3, [r7, #8]
   27528:	781b      	ldrb	r3, [r3, #0]
   2752a:	2100      	movs	r1, #0
   2752c:	0018      	movs	r0, r3
   2752e:	4b1e      	ldr	r3, [pc, #120]	; (275a8 <spi_select_slave+0xe0>)
   27530:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   27532:	68bb      	ldr	r3, [r7, #8]
   27534:	789b      	ldrb	r3, [r3, #2]
   27536:	b29a      	uxth	r2, r3
   27538:	68fb      	ldr	r3, [r7, #12]
   2753a:	0011      	movs	r1, r2
   2753c:	0018      	movs	r0, r3
   2753e:	4b1b      	ldr	r3, [pc, #108]	; (275ac <spi_select_slave+0xe4>)
   27540:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   27542:	68fb      	ldr	r3, [r7, #12]
   27544:	79db      	ldrb	r3, [r3, #7]
   27546:	2201      	movs	r2, #1
   27548:	4053      	eors	r3, r2
   2754a:	b2db      	uxtb	r3, r3
   2754c:	2b00      	cmp	r3, #0
   2754e:	d024      	beq.n	2759a <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   27550:	46c0      	nop			; (mov r8, r8)
   27552:	68fb      	ldr	r3, [r7, #12]
   27554:	0018      	movs	r0, r3
   27556:	4b16      	ldr	r3, [pc, #88]	; (275b0 <spi_select_slave+0xe8>)
   27558:	4798      	blx	r3
   2755a:	0003      	movs	r3, r0
   2755c:	001a      	movs	r2, r3
   2755e:	2301      	movs	r3, #1
   27560:	4053      	eors	r3, r2
   27562:	b2db      	uxtb	r3, r3
   27564:	2b00      	cmp	r3, #0
   27566:	d1f4      	bne.n	27552 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   27568:	2316      	movs	r3, #22
   2756a:	18fb      	adds	r3, r7, r3
   2756c:	2200      	movs	r2, #0
   2756e:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   27570:	2316      	movs	r3, #22
   27572:	18fa      	adds	r2, r7, r3
   27574:	68fb      	ldr	r3, [r7, #12]
   27576:	0011      	movs	r1, r2
   27578:	0018      	movs	r0, r3
   2757a:	4b0e      	ldr	r3, [pc, #56]	; (275b4 <spi_select_slave+0xec>)
   2757c:	4798      	blx	r3
   2757e:	e00c      	b.n	2759a <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   27580:	68bb      	ldr	r3, [r7, #8]
   27582:	781b      	ldrb	r3, [r3, #0]
   27584:	2100      	movs	r1, #0
   27586:	0018      	movs	r0, r3
   27588:	4b07      	ldr	r3, [pc, #28]	; (275a8 <spi_select_slave+0xe0>)
   2758a:	4798      	blx	r3
   2758c:	e005      	b.n	2759a <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   2758e:	68bb      	ldr	r3, [r7, #8]
   27590:	781b      	ldrb	r3, [r3, #0]
   27592:	2101      	movs	r1, #1
   27594:	0018      	movs	r0, r3
   27596:	4b04      	ldr	r3, [pc, #16]	; (275a8 <spi_select_slave+0xe0>)
   27598:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   2759a:	2300      	movs	r3, #0
}
   2759c:	0018      	movs	r0, r3
   2759e:	46bd      	mov	sp, r7
   275a0:	b006      	add	sp, #24
   275a2:	bd80      	pop	{r7, pc}
   275a4:	00026e0d 	.word	0x00026e0d
   275a8:	00026bd5 	.word	0x00026bd5
   275ac:	00026e5d 	.word	0x00026e5d
   275b0:	00026e35 	.word	0x00026e35
   275b4:	00026ea5 	.word	0x00026ea5

000275b8 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   275b8:	b580      	push	{r7, lr}
   275ba:	b086      	sub	sp, #24
   275bc:	af00      	add	r7, sp, #0
   275be:	60f8      	str	r0, [r7, #12]
   275c0:	60b9      	str	r1, [r7, #8]
   275c2:	1dbb      	adds	r3, r7, #6
   275c4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   275c6:	68fb      	ldr	r3, [r7, #12]
   275c8:	2238      	movs	r2, #56	; 0x38
   275ca:	5c9b      	ldrb	r3, [r3, r2]
   275cc:	b2db      	uxtb	r3, r3
   275ce:	2b05      	cmp	r3, #5
   275d0:	d101      	bne.n	275d6 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   275d2:	2305      	movs	r3, #5
   275d4:	e087      	b.n	276e6 <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   275d6:	1dbb      	adds	r3, r7, #6
   275d8:	881b      	ldrh	r3, [r3, #0]
   275da:	2b00      	cmp	r3, #0
   275dc:	d101      	bne.n	275e2 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   275de:	2317      	movs	r3, #23
   275e0:	e081      	b.n	276e6 <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   275e2:	2316      	movs	r3, #22
   275e4:	18fb      	adds	r3, r7, r3
   275e6:	2200      	movs	r2, #0
   275e8:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   275ea:	2314      	movs	r3, #20
   275ec:	18fb      	adds	r3, r7, r3
   275ee:	1dba      	adds	r2, r7, #6
   275f0:	8812      	ldrh	r2, [r2, #0]
   275f2:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   275f4:	e05f      	b.n	276b6 <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   275f6:	46c0      	nop			; (mov r8, r8)
   275f8:	68fb      	ldr	r3, [r7, #12]
   275fa:	0018      	movs	r0, r3
   275fc:	4b3c      	ldr	r3, [pc, #240]	; (276f0 <spi_write_buffer_wait+0x138>)
   275fe:	4798      	blx	r3
   27600:	0003      	movs	r3, r0
   27602:	001a      	movs	r2, r3
   27604:	2301      	movs	r3, #1
   27606:	4053      	eors	r3, r2
   27608:	b2db      	uxtb	r3, r3
   2760a:	2b00      	cmp	r3, #0
   2760c:	d1f4      	bne.n	275f8 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   2760e:	2316      	movs	r3, #22
   27610:	18fb      	adds	r3, r7, r3
   27612:	881b      	ldrh	r3, [r3, #0]
   27614:	2216      	movs	r2, #22
   27616:	18ba      	adds	r2, r7, r2
   27618:	1c59      	adds	r1, r3, #1
   2761a:	8011      	strh	r1, [r2, #0]
   2761c:	001a      	movs	r2, r3
   2761e:	68bb      	ldr	r3, [r7, #8]
   27620:	189b      	adds	r3, r3, r2
   27622:	781a      	ldrb	r2, [r3, #0]
   27624:	2312      	movs	r3, #18
   27626:	18fb      	adds	r3, r7, r3
   27628:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2762a:	68fb      	ldr	r3, [r7, #12]
   2762c:	799b      	ldrb	r3, [r3, #6]
   2762e:	2b01      	cmp	r3, #1
   27630:	d115      	bne.n	2765e <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   27632:	2316      	movs	r3, #22
   27634:	18fb      	adds	r3, r7, r3
   27636:	881b      	ldrh	r3, [r3, #0]
   27638:	2216      	movs	r2, #22
   2763a:	18ba      	adds	r2, r7, r2
   2763c:	1c59      	adds	r1, r3, #1
   2763e:	8011      	strh	r1, [r2, #0]
   27640:	001a      	movs	r2, r3
   27642:	68bb      	ldr	r3, [r7, #8]
   27644:	189b      	adds	r3, r3, r2
   27646:	781b      	ldrb	r3, [r3, #0]
   27648:	021b      	lsls	r3, r3, #8
   2764a:	b21a      	sxth	r2, r3
   2764c:	2312      	movs	r3, #18
   2764e:	18fb      	adds	r3, r7, r3
   27650:	2100      	movs	r1, #0
   27652:	5e5b      	ldrsh	r3, [r3, r1]
   27654:	4313      	orrs	r3, r2
   27656:	b21a      	sxth	r2, r3
   27658:	2312      	movs	r3, #18
   2765a:	18fb      	adds	r3, r7, r3
   2765c:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   2765e:	2312      	movs	r3, #18
   27660:	18fb      	adds	r3, r7, r3
   27662:	881a      	ldrh	r2, [r3, #0]
   27664:	68fb      	ldr	r3, [r7, #12]
   27666:	0011      	movs	r1, r2
   27668:	0018      	movs	r0, r3
   2766a:	4b22      	ldr	r3, [pc, #136]	; (276f4 <spi_write_buffer_wait+0x13c>)
   2766c:	4798      	blx	r3

		if (module->receiver_enabled) {
   2766e:	68fb      	ldr	r3, [r7, #12]
   27670:	79db      	ldrb	r3, [r3, #7]
   27672:	2214      	movs	r2, #20
   27674:	18ba      	adds	r2, r7, r2
   27676:	2114      	movs	r1, #20
   27678:	1879      	adds	r1, r7, r1
   2767a:	8809      	ldrh	r1, [r1, #0]
   2767c:	8011      	strh	r1, [r2, #0]
   2767e:	2b00      	cmp	r3, #0
   27680:	d019      	beq.n	276b6 <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   27682:	46c0      	nop			; (mov r8, r8)
   27684:	68fb      	ldr	r3, [r7, #12]
   27686:	0018      	movs	r0, r3
   27688:	4b1b      	ldr	r3, [pc, #108]	; (276f8 <spi_write_buffer_wait+0x140>)
   2768a:	4798      	blx	r3
   2768c:	0003      	movs	r3, r0
   2768e:	001a      	movs	r2, r3
   27690:	2301      	movs	r3, #1
   27692:	4053      	eors	r3, r2
   27694:	b2db      	uxtb	r3, r3
   27696:	2b00      	cmp	r3, #0
   27698:	d1f4      	bne.n	27684 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   2769a:	2310      	movs	r3, #16
   2769c:	18fa      	adds	r2, r7, r3
   2769e:	68fb      	ldr	r3, [r7, #12]
   276a0:	0011      	movs	r1, r2
   276a2:	0018      	movs	r0, r3
   276a4:	4b15      	ldr	r3, [pc, #84]	; (276fc <spi_write_buffer_wait+0x144>)
   276a6:	4798      	blx	r3
			flush_length--;
   276a8:	2314      	movs	r3, #20
   276aa:	18fb      	adds	r3, r7, r3
   276ac:	881a      	ldrh	r2, [r3, #0]
   276ae:	2314      	movs	r3, #20
   276b0:	18fb      	adds	r3, r7, r3
   276b2:	3a01      	subs	r2, #1
   276b4:	801a      	strh	r2, [r3, #0]
	while (length--) {
   276b6:	1dbb      	adds	r3, r7, #6
   276b8:	881b      	ldrh	r3, [r3, #0]
   276ba:	1dba      	adds	r2, r7, #6
   276bc:	1e59      	subs	r1, r3, #1
   276be:	8011      	strh	r1, [r2, #0]
   276c0:	2b00      	cmp	r3, #0
   276c2:	d198      	bne.n	275f6 <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   276c4:	68fb      	ldr	r3, [r7, #12]
   276c6:	795b      	ldrb	r3, [r3, #5]
   276c8:	2b01      	cmp	r3, #1
   276ca:	d10b      	bne.n	276e4 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   276cc:	46c0      	nop			; (mov r8, r8)
   276ce:	68fb      	ldr	r3, [r7, #12]
   276d0:	0018      	movs	r0, r3
   276d2:	4b0b      	ldr	r3, [pc, #44]	; (27700 <spi_write_buffer_wait+0x148>)
   276d4:	4798      	blx	r3
   276d6:	0003      	movs	r3, r0
   276d8:	001a      	movs	r2, r3
   276da:	2301      	movs	r3, #1
   276dc:	4053      	eors	r3, r2
   276de:	b2db      	uxtb	r3, r3
   276e0:	2b00      	cmp	r3, #0
   276e2:	d1f4      	bne.n	276ce <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   276e4:	2300      	movs	r3, #0
}
   276e6:	0018      	movs	r0, r3
   276e8:	46bd      	mov	sp, r7
   276ea:	b006      	add	sp, #24
   276ec:	bd80      	pop	{r7, pc}
   276ee:	46c0      	nop			; (mov r8, r8)
   276f0:	00026e0d 	.word	0x00026e0d
   276f4:	00026e5d 	.word	0x00026e5d
   276f8:	00026e35 	.word	0x00026e35
   276fc:	00026ea5 	.word	0x00026ea5
   27700:	00026de5 	.word	0x00026de5

00027704 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   27704:	b580      	push	{r7, lr}
   27706:	b084      	sub	sp, #16
   27708:	af00      	add	r7, sp, #0
   2770a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2770c:	687b      	ldr	r3, [r7, #4]
   2770e:	681b      	ldr	r3, [r3, #0]
   27710:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   27712:	687b      	ldr	r3, [r7, #4]
   27714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27716:	781b      	ldrb	r3, [r3, #0]
   27718:	b2da      	uxtb	r2, r3
   2771a:	230e      	movs	r3, #14
   2771c:	18fb      	adds	r3, r7, r3
   2771e:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   27720:	687b      	ldr	r3, [r7, #4]
   27722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27724:	1c5a      	adds	r2, r3, #1
   27726:	687b      	ldr	r3, [r7, #4]
   27728:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2772a:	687b      	ldr	r3, [r7, #4]
   2772c:	799b      	ldrb	r3, [r3, #6]
   2772e:	2b01      	cmp	r3, #1
   27730:	d113      	bne.n	2775a <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   27732:	687b      	ldr	r3, [r7, #4]
   27734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27736:	781b      	ldrb	r3, [r3, #0]
   27738:	b2db      	uxtb	r3, r3
   2773a:	021b      	lsls	r3, r3, #8
   2773c:	b21a      	sxth	r2, r3
   2773e:	230e      	movs	r3, #14
   27740:	18fb      	adds	r3, r7, r3
   27742:	2100      	movs	r1, #0
   27744:	5e5b      	ldrsh	r3, [r3, r1]
   27746:	4313      	orrs	r3, r2
   27748:	b21a      	sxth	r2, r3
   2774a:	230e      	movs	r3, #14
   2774c:	18fb      	adds	r3, r7, r3
   2774e:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   27750:	687b      	ldr	r3, [r7, #4]
   27752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27754:	1c5a      	adds	r2, r3, #1
   27756:	687b      	ldr	r3, [r7, #4]
   27758:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   2775a:	230e      	movs	r3, #14
   2775c:	18fb      	adds	r3, r7, r3
   2775e:	881b      	ldrh	r3, [r3, #0]
   27760:	05db      	lsls	r3, r3, #23
   27762:	0dda      	lsrs	r2, r3, #23
   27764:	68bb      	ldr	r3, [r7, #8]
   27766:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   27768:	687b      	ldr	r3, [r7, #4]
   2776a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   2776c:	b29b      	uxth	r3, r3
   2776e:	3b01      	subs	r3, #1
   27770:	b29a      	uxth	r2, r3
   27772:	687b      	ldr	r3, [r7, #4]
   27774:	869a      	strh	r2, [r3, #52]	; 0x34
}
   27776:	46c0      	nop			; (mov r8, r8)
   27778:	46bd      	mov	sp, r7
   2777a:	b004      	add	sp, #16
   2777c:	bd80      	pop	{r7, pc}
	...

00027780 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   27780:	b580      	push	{r7, lr}
   27782:	b084      	sub	sp, #16
   27784:	af00      	add	r7, sp, #0
   27786:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27788:	687b      	ldr	r3, [r7, #4]
   2778a:	681b      	ldr	r3, [r3, #0]
   2778c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   2778e:	4b08      	ldr	r3, [pc, #32]	; (277b0 <_spi_write_dummy+0x30>)
   27790:	881b      	ldrh	r3, [r3, #0]
   27792:	001a      	movs	r2, r3
   27794:	68fb      	ldr	r3, [r7, #12]
   27796:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   27798:	687b      	ldr	r3, [r7, #4]
   2779a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2779c:	b29b      	uxth	r3, r3
   2779e:	3b01      	subs	r3, #1
   277a0:	b29a      	uxth	r2, r3
   277a2:	687b      	ldr	r3, [r7, #4]
   277a4:	865a      	strh	r2, [r3, #50]	; 0x32
}
   277a6:	46c0      	nop			; (mov r8, r8)
   277a8:	46bd      	mov	sp, r7
   277aa:	b004      	add	sp, #16
   277ac:	bd80      	pop	{r7, pc}
   277ae:	46c0      	nop			; (mov r8, r8)
   277b0:	2000562c 	.word	0x2000562c

000277b4 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   277b4:	b580      	push	{r7, lr}
   277b6:	b084      	sub	sp, #16
   277b8:	af00      	add	r7, sp, #0
   277ba:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   277bc:	687b      	ldr	r3, [r7, #4]
   277be:	681b      	ldr	r3, [r3, #0]
   277c0:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   277c2:	230a      	movs	r3, #10
   277c4:	18fb      	adds	r3, r7, r3
   277c6:	2200      	movs	r2, #0
   277c8:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   277ca:	68fb      	ldr	r3, [r7, #12]
   277cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   277ce:	230a      	movs	r3, #10
   277d0:	18fb      	adds	r3, r7, r3
   277d2:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   277d4:	687b      	ldr	r3, [r7, #4]
   277d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   277d8:	b29b      	uxth	r3, r3
   277da:	3b01      	subs	r3, #1
   277dc:	b29a      	uxth	r2, r3
   277de:	687b      	ldr	r3, [r7, #4]
   277e0:	865a      	strh	r2, [r3, #50]	; 0x32
}
   277e2:	46c0      	nop			; (mov r8, r8)
   277e4:	46bd      	mov	sp, r7
   277e6:	b004      	add	sp, #16
   277e8:	bd80      	pop	{r7, pc}

000277ea <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   277ea:	b580      	push	{r7, lr}
   277ec:	b084      	sub	sp, #16
   277ee:	af00      	add	r7, sp, #0
   277f0:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   277f2:	687b      	ldr	r3, [r7, #4]
   277f4:	681b      	ldr	r3, [r3, #0]
   277f6:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   277f8:	68fb      	ldr	r3, [r7, #12]
   277fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   277fc:	b29a      	uxth	r2, r3
   277fe:	230a      	movs	r3, #10
   27800:	18fb      	adds	r3, r7, r3
   27802:	05d2      	lsls	r2, r2, #23
   27804:	0dd2      	lsrs	r2, r2, #23
   27806:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   27808:	687b      	ldr	r3, [r7, #4]
   2780a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2780c:	220a      	movs	r2, #10
   2780e:	18ba      	adds	r2, r7, r2
   27810:	8812      	ldrh	r2, [r2, #0]
   27812:	b2d2      	uxtb	r2, r2
   27814:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   27816:	687b      	ldr	r3, [r7, #4]
   27818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2781a:	1c5a      	adds	r2, r3, #1
   2781c:	687b      	ldr	r3, [r7, #4]
   2781e:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27820:	687b      	ldr	r3, [r7, #4]
   27822:	799b      	ldrb	r3, [r3, #6]
   27824:	2b01      	cmp	r3, #1
   27826:	d10d      	bne.n	27844 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   27828:	687b      	ldr	r3, [r7, #4]
   2782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2782c:	220a      	movs	r2, #10
   2782e:	18ba      	adds	r2, r7, r2
   27830:	8812      	ldrh	r2, [r2, #0]
   27832:	0a12      	lsrs	r2, r2, #8
   27834:	b292      	uxth	r2, r2
   27836:	b2d2      	uxtb	r2, r2
   27838:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   2783a:	687b      	ldr	r3, [r7, #4]
   2783c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2783e:	1c5a      	adds	r2, r3, #1
   27840:	687b      	ldr	r3, [r7, #4]
   27842:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   27844:	687b      	ldr	r3, [r7, #4]
   27846:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   27848:	b29b      	uxth	r3, r3
   2784a:	3b01      	subs	r3, #1
   2784c:	b29a      	uxth	r2, r3
   2784e:	687b      	ldr	r3, [r7, #4]
   27850:	861a      	strh	r2, [r3, #48]	; 0x30
}
   27852:	46c0      	nop			; (mov r8, r8)
   27854:	46bd      	mov	sp, r7
   27856:	b004      	add	sp, #16
   27858:	bd80      	pop	{r7, pc}
	...

0002785c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   2785c:	b580      	push	{r7, lr}
   2785e:	b086      	sub	sp, #24
   27860:	af00      	add	r7, sp, #0
   27862:	0002      	movs	r2, r0
   27864:	1dfb      	adds	r3, r7, #7
   27866:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   27868:	1dfb      	adds	r3, r7, #7
   2786a:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   2786c:	4b96      	ldr	r3, [pc, #600]	; (27ac8 <_spi_interrupt_handler+0x26c>)
   2786e:	0092      	lsls	r2, r2, #2
   27870:	58d3      	ldr	r3, [r2, r3]
   27872:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27874:	697b      	ldr	r3, [r7, #20]
   27876:	681b      	ldr	r3, [r3, #0]
   27878:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   2787a:	697b      	ldr	r3, [r7, #20]
   2787c:	2237      	movs	r2, #55	; 0x37
   2787e:	5c9a      	ldrb	r2, [r3, r2]
   27880:	697b      	ldr	r3, [r7, #20]
   27882:	2136      	movs	r1, #54	; 0x36
   27884:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   27886:	230f      	movs	r3, #15
   27888:	18fb      	adds	r3, r7, r3
   2788a:	400a      	ands	r2, r1
   2788c:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   2788e:	693b      	ldr	r3, [r7, #16]
   27890:	7e1b      	ldrb	r3, [r3, #24]
   27892:	b2da      	uxtb	r2, r3
   27894:	230c      	movs	r3, #12
   27896:	18fb      	adds	r3, r7, r3
   27898:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   2789a:	693b      	ldr	r3, [r7, #16]
   2789c:	7d9b      	ldrb	r3, [r3, #22]
   2789e:	b2db      	uxtb	r3, r3
   278a0:	b29a      	uxth	r2, r3
   278a2:	230c      	movs	r3, #12
   278a4:	18fb      	adds	r3, r7, r3
   278a6:	210c      	movs	r1, #12
   278a8:	1879      	adds	r1, r7, r1
   278aa:	8809      	ldrh	r1, [r1, #0]
   278ac:	400a      	ands	r2, r1
   278ae:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   278b0:	230c      	movs	r3, #12
   278b2:	18fb      	adds	r3, r7, r3
   278b4:	881b      	ldrh	r3, [r3, #0]
   278b6:	2201      	movs	r2, #1
   278b8:	4013      	ands	r3, r2
   278ba:	d038      	beq.n	2792e <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   278bc:	697b      	ldr	r3, [r7, #20]
   278be:	795b      	ldrb	r3, [r3, #5]
   278c0:	2b01      	cmp	r3, #1
   278c2:	d110      	bne.n	278e6 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   278c4:	697b      	ldr	r3, [r7, #20]
   278c6:	7a5b      	ldrb	r3, [r3, #9]
   278c8:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   278ca:	2b00      	cmp	r3, #0
   278cc:	d10b      	bne.n	278e6 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   278ce:	697b      	ldr	r3, [r7, #20]
   278d0:	0018      	movs	r0, r3
   278d2:	4b7e      	ldr	r3, [pc, #504]	; (27acc <_spi_interrupt_handler+0x270>)
   278d4:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   278d6:	697b      	ldr	r3, [r7, #20]
   278d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   278da:	b29b      	uxth	r3, r3
   278dc:	2b00      	cmp	r3, #0
   278de:	d102      	bne.n	278e6 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   278e0:	693b      	ldr	r3, [r7, #16]
   278e2:	2201      	movs	r2, #1
   278e4:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   278e6:	697b      	ldr	r3, [r7, #20]
   278e8:	795b      	ldrb	r3, [r3, #5]
		if (0
   278ea:	2b01      	cmp	r3, #1
   278ec:	d11f      	bne.n	2792e <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   278ee:	697b      	ldr	r3, [r7, #20]
   278f0:	7a5b      	ldrb	r3, [r3, #9]
   278f2:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   278f4:	2b00      	cmp	r3, #0
   278f6:	d01a      	beq.n	2792e <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   278f8:	697b      	ldr	r3, [r7, #20]
   278fa:	0018      	movs	r0, r3
   278fc:	4b74      	ldr	r3, [pc, #464]	; (27ad0 <_spi_interrupt_handler+0x274>)
   278fe:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   27900:	697b      	ldr	r3, [r7, #20]
   27902:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   27904:	b29b      	uxth	r3, r3
   27906:	2b00      	cmp	r3, #0
   27908:	d111      	bne.n	2792e <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   2790a:	693b      	ldr	r3, [r7, #16]
   2790c:	2201      	movs	r2, #1
   2790e:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   27910:	697b      	ldr	r3, [r7, #20]
   27912:	7a5b      	ldrb	r3, [r3, #9]
   27914:	b2db      	uxtb	r3, r3
   27916:	2b01      	cmp	r3, #1
   27918:	d109      	bne.n	2792e <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   2791a:	697b      	ldr	r3, [r7, #20]
   2791c:	79db      	ldrb	r3, [r3, #7]
   2791e:	2201      	movs	r2, #1
   27920:	4053      	eors	r3, r2
   27922:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   27924:	2b00      	cmp	r3, #0
   27926:	d002      	beq.n	2792e <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   27928:	693b      	ldr	r3, [r7, #16]
   2792a:	2202      	movs	r2, #2
   2792c:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   2792e:	230c      	movs	r3, #12
   27930:	18fb      	adds	r3, r7, r3
   27932:	881b      	ldrh	r3, [r3, #0]
   27934:	2204      	movs	r2, #4
   27936:	4013      	ands	r3, r2
   27938:	d100      	bne.n	2793c <_spi_interrupt_handler+0xe0>
   2793a:	e07e      	b.n	27a3a <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2793c:	693b      	ldr	r3, [r7, #16]
   2793e:	8b5b      	ldrh	r3, [r3, #26]
   27940:	b29b      	uxth	r3, r3
   27942:	001a      	movs	r2, r3
   27944:	2304      	movs	r3, #4
   27946:	4013      	ands	r3, r2
   27948:	d022      	beq.n	27990 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   2794a:	697b      	ldr	r3, [r7, #20]
   2794c:	7a5b      	ldrb	r3, [r3, #9]
   2794e:	b2db      	uxtb	r3, r3
   27950:	2b01      	cmp	r3, #1
   27952:	d014      	beq.n	2797e <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   27954:	697b      	ldr	r3, [r7, #20]
   27956:	2238      	movs	r2, #56	; 0x38
   27958:	211e      	movs	r1, #30
   2795a:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   2795c:	697b      	ldr	r3, [r7, #20]
   2795e:	2203      	movs	r2, #3
   27960:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   27962:	693b      	ldr	r3, [r7, #16]
   27964:	2205      	movs	r2, #5
   27966:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   27968:	230f      	movs	r3, #15
   2796a:	18fb      	adds	r3, r7, r3
   2796c:	781b      	ldrb	r3, [r3, #0]
   2796e:	2208      	movs	r2, #8
   27970:	4013      	ands	r3, r2
   27972:	d004      	beq.n	2797e <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   27974:	697b      	ldr	r3, [r7, #20]
   27976:	699b      	ldr	r3, [r3, #24]
   27978:	697a      	ldr	r2, [r7, #20]
   2797a:	0010      	movs	r0, r2
   2797c:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   2797e:	693b      	ldr	r3, [r7, #16]
   27980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   27982:	230a      	movs	r3, #10
   27984:	18fb      	adds	r3, r7, r3
   27986:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   27988:	693b      	ldr	r3, [r7, #16]
   2798a:	2204      	movs	r2, #4
   2798c:	835a      	strh	r2, [r3, #26]
   2798e:	e054      	b.n	27a3a <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   27990:	697b      	ldr	r3, [r7, #20]
   27992:	7a5b      	ldrb	r3, [r3, #9]
   27994:	b2db      	uxtb	r3, r3
   27996:	2b01      	cmp	r3, #1
   27998:	d11e      	bne.n	279d8 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   2799a:	697b      	ldr	r3, [r7, #20]
   2799c:	0018      	movs	r0, r3
   2799e:	4b4d      	ldr	r3, [pc, #308]	; (27ad4 <_spi_interrupt_handler+0x278>)
   279a0:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   279a2:	697b      	ldr	r3, [r7, #20]
   279a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   279a6:	b29b      	uxth	r3, r3
   279a8:	2b00      	cmp	r3, #0
   279aa:	d146      	bne.n	27a3a <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   279ac:	693b      	ldr	r3, [r7, #16]
   279ae:	2204      	movs	r2, #4
   279b0:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   279b2:	697b      	ldr	r3, [r7, #20]
   279b4:	2238      	movs	r2, #56	; 0x38
   279b6:	2100      	movs	r1, #0
   279b8:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   279ba:	697b      	ldr	r3, [r7, #20]
   279bc:	2203      	movs	r2, #3
   279be:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   279c0:	230f      	movs	r3, #15
   279c2:	18fb      	adds	r3, r7, r3
   279c4:	781b      	ldrb	r3, [r3, #0]
   279c6:	2201      	movs	r2, #1
   279c8:	4013      	ands	r3, r2
   279ca:	d036      	beq.n	27a3a <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   279cc:	697b      	ldr	r3, [r7, #20]
   279ce:	68db      	ldr	r3, [r3, #12]
   279d0:	697a      	ldr	r2, [r7, #20]
   279d2:	0010      	movs	r0, r2
   279d4:	4798      	blx	r3
   279d6:	e030      	b.n	27a3a <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   279d8:	697b      	ldr	r3, [r7, #20]
   279da:	0018      	movs	r0, r3
   279dc:	4b3e      	ldr	r3, [pc, #248]	; (27ad8 <_spi_interrupt_handler+0x27c>)
   279de:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   279e0:	697b      	ldr	r3, [r7, #20]
   279e2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   279e4:	b29b      	uxth	r3, r3
   279e6:	2b00      	cmp	r3, #0
   279e8:	d127      	bne.n	27a3a <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   279ea:	697b      	ldr	r3, [r7, #20]
   279ec:	2238      	movs	r2, #56	; 0x38
   279ee:	2100      	movs	r1, #0
   279f0:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   279f2:	693b      	ldr	r3, [r7, #16]
   279f4:	2204      	movs	r2, #4
   279f6:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   279f8:	697b      	ldr	r3, [r7, #20]
   279fa:	7a5b      	ldrb	r3, [r3, #9]
   279fc:	b2db      	uxtb	r3, r3
   279fe:	2b02      	cmp	r3, #2
   27a00:	d10b      	bne.n	27a1a <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   27a02:	230f      	movs	r3, #15
   27a04:	18fb      	adds	r3, r7, r3
   27a06:	781b      	ldrb	r3, [r3, #0]
   27a08:	2204      	movs	r2, #4
   27a0a:	4013      	ands	r3, r2
   27a0c:	d015      	beq.n	27a3a <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   27a0e:	697b      	ldr	r3, [r7, #20]
   27a10:	695b      	ldr	r3, [r3, #20]
   27a12:	697a      	ldr	r2, [r7, #20]
   27a14:	0010      	movs	r0, r2
   27a16:	4798      	blx	r3
   27a18:	e00f      	b.n	27a3a <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   27a1a:	697b      	ldr	r3, [r7, #20]
   27a1c:	7a5b      	ldrb	r3, [r3, #9]
   27a1e:	b2db      	uxtb	r3, r3
   27a20:	2b00      	cmp	r3, #0
   27a22:	d10a      	bne.n	27a3a <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   27a24:	230f      	movs	r3, #15
   27a26:	18fb      	adds	r3, r7, r3
   27a28:	781b      	ldrb	r3, [r3, #0]
   27a2a:	2202      	movs	r2, #2
   27a2c:	4013      	ands	r3, r2
   27a2e:	d004      	beq.n	27a3a <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   27a30:	697b      	ldr	r3, [r7, #20]
   27a32:	691b      	ldr	r3, [r3, #16]
   27a34:	697a      	ldr	r2, [r7, #20]
   27a36:	0010      	movs	r0, r2
   27a38:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   27a3a:	230c      	movs	r3, #12
   27a3c:	18fb      	adds	r3, r7, r3
   27a3e:	881b      	ldrh	r3, [r3, #0]
   27a40:	2202      	movs	r2, #2
   27a42:	4013      	ands	r3, r2
   27a44:	d024      	beq.n	27a90 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   27a46:	697b      	ldr	r3, [r7, #20]
   27a48:	795b      	ldrb	r3, [r3, #5]
   27a4a:	2b01      	cmp	r3, #1
   27a4c:	d120      	bne.n	27a90 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   27a4e:	697b      	ldr	r3, [r7, #20]
   27a50:	7a5b      	ldrb	r3, [r3, #9]
   27a52:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   27a54:	2b01      	cmp	r3, #1
   27a56:	d11b      	bne.n	27a90 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   27a58:	697b      	ldr	r3, [r7, #20]
   27a5a:	79db      	ldrb	r3, [r3, #7]
   27a5c:	2201      	movs	r2, #1
   27a5e:	4053      	eors	r3, r2
   27a60:	b2db      	uxtb	r3, r3
   27a62:	2b00      	cmp	r3, #0
   27a64:	d014      	beq.n	27a90 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   27a66:	693b      	ldr	r3, [r7, #16]
   27a68:	2202      	movs	r2, #2
   27a6a:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   27a6c:	697b      	ldr	r3, [r7, #20]
   27a6e:	2203      	movs	r2, #3
   27a70:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   27a72:	697b      	ldr	r3, [r7, #20]
   27a74:	2238      	movs	r2, #56	; 0x38
   27a76:	2100      	movs	r1, #0
   27a78:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   27a7a:	230f      	movs	r3, #15
   27a7c:	18fb      	adds	r3, r7, r3
   27a7e:	781b      	ldrb	r3, [r3, #0]
   27a80:	2201      	movs	r2, #1
   27a82:	4013      	ands	r3, r2
   27a84:	d004      	beq.n	27a90 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   27a86:	697b      	ldr	r3, [r7, #20]
   27a88:	68db      	ldr	r3, [r3, #12]
   27a8a:	697a      	ldr	r2, [r7, #20]
   27a8c:	0010      	movs	r0, r2
   27a8e:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   27a90:	230c      	movs	r3, #12
   27a92:	18fb      	adds	r3, r7, r3
   27a94:	881b      	ldrh	r3, [r3, #0]
   27a96:	2280      	movs	r2, #128	; 0x80
   27a98:	4013      	ands	r3, r2
   27a9a:	d010      	beq.n	27abe <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   27a9c:	693b      	ldr	r3, [r7, #16]
   27a9e:	2280      	movs	r2, #128	; 0x80
   27aa0:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   27aa2:	693b      	ldr	r3, [r7, #16]
   27aa4:	2280      	movs	r2, #128	; 0x80
   27aa6:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   27aa8:	230f      	movs	r3, #15
   27aaa:	18fb      	adds	r3, r7, r3
   27aac:	781b      	ldrb	r3, [r3, #0]
   27aae:	2240      	movs	r2, #64	; 0x40
   27ab0:	4013      	ands	r3, r2
   27ab2:	d004      	beq.n	27abe <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   27ab4:	697b      	ldr	r3, [r7, #20]
   27ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27ab8:	697a      	ldr	r2, [r7, #20]
   27aba:	0010      	movs	r0, r2
   27abc:	4798      	blx	r3
		}
	}
#  endif
}
   27abe:	46c0      	nop			; (mov r8, r8)
   27ac0:	46bd      	mov	sp, r7
   27ac2:	b006      	add	sp, #24
   27ac4:	bd80      	pop	{r7, pc}
   27ac6:	46c0      	nop			; (mov r8, r8)
   27ac8:	20005614 	.word	0x20005614
   27acc:	00027781 	.word	0x00027781
   27ad0:	00027705 	.word	0x00027705
   27ad4:	000277b5 	.word	0x000277b5
   27ad8:	000277eb 	.word	0x000277eb

00027adc <system_gclk_chan_get_config_defaults>:
{
   27adc:	b580      	push	{r7, lr}
   27ade:	b082      	sub	sp, #8
   27ae0:	af00      	add	r7, sp, #0
   27ae2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27ae4:	687b      	ldr	r3, [r7, #4]
   27ae6:	2200      	movs	r2, #0
   27ae8:	701a      	strb	r2, [r3, #0]
}
   27aea:	46c0      	nop			; (mov r8, r8)
   27aec:	46bd      	mov	sp, r7
   27aee:	b002      	add	sp, #8
   27af0:	bd80      	pop	{r7, pc}
	...

00027af4 <system_apb_clock_set_mask>:
{
   27af4:	b580      	push	{r7, lr}
   27af6:	b082      	sub	sp, #8
   27af8:	af00      	add	r7, sp, #0
   27afa:	0002      	movs	r2, r0
   27afc:	6039      	str	r1, [r7, #0]
   27afe:	1dfb      	adds	r3, r7, #7
   27b00:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27b02:	1dfb      	adds	r3, r7, #7
   27b04:	781b      	ldrb	r3, [r3, #0]
   27b06:	2b01      	cmp	r3, #1
   27b08:	d00a      	beq.n	27b20 <system_apb_clock_set_mask+0x2c>
   27b0a:	2b02      	cmp	r3, #2
   27b0c:	d00f      	beq.n	27b2e <system_apb_clock_set_mask+0x3a>
   27b0e:	2b00      	cmp	r3, #0
   27b10:	d114      	bne.n	27b3c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   27b12:	4b0e      	ldr	r3, [pc, #56]	; (27b4c <system_apb_clock_set_mask+0x58>)
   27b14:	4a0d      	ldr	r2, [pc, #52]	; (27b4c <system_apb_clock_set_mask+0x58>)
   27b16:	6991      	ldr	r1, [r2, #24]
   27b18:	683a      	ldr	r2, [r7, #0]
   27b1a:	430a      	orrs	r2, r1
   27b1c:	619a      	str	r2, [r3, #24]
			break;
   27b1e:	e00f      	b.n	27b40 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27b20:	4b0a      	ldr	r3, [pc, #40]	; (27b4c <system_apb_clock_set_mask+0x58>)
   27b22:	4a0a      	ldr	r2, [pc, #40]	; (27b4c <system_apb_clock_set_mask+0x58>)
   27b24:	69d1      	ldr	r1, [r2, #28]
   27b26:	683a      	ldr	r2, [r7, #0]
   27b28:	430a      	orrs	r2, r1
   27b2a:	61da      	str	r2, [r3, #28]
			break;
   27b2c:	e008      	b.n	27b40 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   27b2e:	4b07      	ldr	r3, [pc, #28]	; (27b4c <system_apb_clock_set_mask+0x58>)
   27b30:	4a06      	ldr	r2, [pc, #24]	; (27b4c <system_apb_clock_set_mask+0x58>)
   27b32:	6a11      	ldr	r1, [r2, #32]
   27b34:	683a      	ldr	r2, [r7, #0]
   27b36:	430a      	orrs	r2, r1
   27b38:	621a      	str	r2, [r3, #32]
			break;
   27b3a:	e001      	b.n	27b40 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27b3c:	2317      	movs	r3, #23
   27b3e:	e000      	b.n	27b42 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27b40:	2300      	movs	r3, #0
}
   27b42:	0018      	movs	r0, r3
   27b44:	46bd      	mov	sp, r7
   27b46:	b002      	add	sp, #8
   27b48:	bd80      	pop	{r7, pc}
   27b4a:	46c0      	nop			; (mov r8, r8)
   27b4c:	40000400 	.word	0x40000400

00027b50 <system_pinmux_get_config_defaults>:
{
   27b50:	b580      	push	{r7, lr}
   27b52:	b082      	sub	sp, #8
   27b54:	af00      	add	r7, sp, #0
   27b56:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27b58:	687b      	ldr	r3, [r7, #4]
   27b5a:	2280      	movs	r2, #128	; 0x80
   27b5c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27b5e:	687b      	ldr	r3, [r7, #4]
   27b60:	2200      	movs	r2, #0
   27b62:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27b64:	687b      	ldr	r3, [r7, #4]
   27b66:	2201      	movs	r2, #1
   27b68:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27b6a:	687b      	ldr	r3, [r7, #4]
   27b6c:	2200      	movs	r2, #0
   27b6e:	70da      	strb	r2, [r3, #3]
}
   27b70:	46c0      	nop			; (mov r8, r8)
   27b72:	46bd      	mov	sp, r7
   27b74:	b002      	add	sp, #8
   27b76:	bd80      	pop	{r7, pc}

00027b78 <system_is_debugger_present>:
{
   27b78:	b580      	push	{r7, lr}
   27b7a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   27b7c:	4b05      	ldr	r3, [pc, #20]	; (27b94 <system_is_debugger_present+0x1c>)
   27b7e:	789b      	ldrb	r3, [r3, #2]
   27b80:	b2db      	uxtb	r3, r3
   27b82:	001a      	movs	r2, r3
   27b84:	2302      	movs	r3, #2
   27b86:	4013      	ands	r3, r2
   27b88:	1e5a      	subs	r2, r3, #1
   27b8a:	4193      	sbcs	r3, r2
   27b8c:	b2db      	uxtb	r3, r3
}
   27b8e:	0018      	movs	r0, r3
   27b90:	46bd      	mov	sp, r7
   27b92:	bd80      	pop	{r7, pc}
   27b94:	41002000 	.word	0x41002000

00027b98 <usart_is_syncing>:
{
   27b98:	b580      	push	{r7, lr}
   27b9a:	b084      	sub	sp, #16
   27b9c:	af00      	add	r7, sp, #0
   27b9e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   27ba0:	687b      	ldr	r3, [r7, #4]
   27ba2:	681b      	ldr	r3, [r3, #0]
   27ba4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   27ba6:	68fb      	ldr	r3, [r7, #12]
   27ba8:	69db      	ldr	r3, [r3, #28]
   27baa:	1e5a      	subs	r2, r3, #1
   27bac:	4193      	sbcs	r3, r2
   27bae:	b2db      	uxtb	r3, r3
}
   27bb0:	0018      	movs	r0, r3
   27bb2:	46bd      	mov	sp, r7
   27bb4:	b004      	add	sp, #16
   27bb6:	bd80      	pop	{r7, pc}

00027bb8 <_usart_wait_for_sync>:
{
   27bb8:	b580      	push	{r7, lr}
   27bba:	b082      	sub	sp, #8
   27bbc:	af00      	add	r7, sp, #0
   27bbe:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   27bc0:	46c0      	nop			; (mov r8, r8)
   27bc2:	687b      	ldr	r3, [r7, #4]
   27bc4:	0018      	movs	r0, r3
   27bc6:	4b04      	ldr	r3, [pc, #16]	; (27bd8 <_usart_wait_for_sync+0x20>)
   27bc8:	4798      	blx	r3
   27bca:	1e03      	subs	r3, r0, #0
   27bcc:	d1f9      	bne.n	27bc2 <_usart_wait_for_sync+0xa>
}
   27bce:	46c0      	nop			; (mov r8, r8)
   27bd0:	46bd      	mov	sp, r7
   27bd2:	b002      	add	sp, #8
   27bd4:	bd80      	pop	{r7, pc}
   27bd6:	46c0      	nop			; (mov r8, r8)
   27bd8:	00027b99 	.word	0x00027b99

00027bdc <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   27bdc:	b5b0      	push	{r4, r5, r7, lr}
   27bde:	b08c      	sub	sp, #48	; 0x30
   27be0:	af02      	add	r7, sp, #8
   27be2:	6078      	str	r0, [r7, #4]
   27be4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   27be6:	687b      	ldr	r3, [r7, #4]
   27be8:	681b      	ldr	r3, [r3, #0]
   27bea:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27bec:	687b      	ldr	r3, [r7, #4]
   27bee:	681b      	ldr	r3, [r3, #0]
   27bf0:	0018      	movs	r0, r3
   27bf2:	4bab      	ldr	r3, [pc, #684]	; (27ea0 <_usart_set_config+0x2c4>)
   27bf4:	4798      	blx	r3
   27bf6:	0003      	movs	r3, r0
   27bf8:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27bfa:	697b      	ldr	r3, [r7, #20]
   27bfc:	3314      	adds	r3, #20
   27bfe:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   27c00:	2300      	movs	r3, #0
   27c02:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   27c04:	2300      	movs	r3, #0
   27c06:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   27c08:	230a      	movs	r3, #10
   27c0a:	18fb      	adds	r3, r7, r3
   27c0c:	2200      	movs	r2, #0
   27c0e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   27c10:	231f      	movs	r3, #31
   27c12:	18fb      	adds	r3, r7, r3
   27c14:	2200      	movs	r2, #0
   27c16:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   27c18:	231e      	movs	r3, #30
   27c1a:	18fb      	adds	r3, r7, r3
   27c1c:	2210      	movs	r2, #16
   27c1e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   27c20:	683b      	ldr	r3, [r7, #0]
   27c22:	8a1b      	ldrh	r3, [r3, #16]
   27c24:	2280      	movs	r2, #128	; 0x80
   27c26:	01d2      	lsls	r2, r2, #7
   27c28:	4293      	cmp	r3, r2
   27c2a:	d01c      	beq.n	27c66 <_usart_set_config+0x8a>
   27c2c:	2280      	movs	r2, #128	; 0x80
   27c2e:	01d2      	lsls	r2, r2, #7
   27c30:	4293      	cmp	r3, r2
   27c32:	dc06      	bgt.n	27c42 <_usart_set_config+0x66>
   27c34:	2b00      	cmp	r3, #0
   27c36:	d00d      	beq.n	27c54 <_usart_set_config+0x78>
   27c38:	2280      	movs	r2, #128	; 0x80
   27c3a:	0192      	lsls	r2, r2, #6
   27c3c:	4293      	cmp	r3, r2
   27c3e:	d024      	beq.n	27c8a <_usart_set_config+0xae>
   27c40:	e035      	b.n	27cae <_usart_set_config+0xd2>
   27c42:	22c0      	movs	r2, #192	; 0xc0
   27c44:	01d2      	lsls	r2, r2, #7
   27c46:	4293      	cmp	r3, r2
   27c48:	d028      	beq.n	27c9c <_usart_set_config+0xc0>
   27c4a:	2280      	movs	r2, #128	; 0x80
   27c4c:	0212      	lsls	r2, r2, #8
   27c4e:	4293      	cmp	r3, r2
   27c50:	d012      	beq.n	27c78 <_usart_set_config+0x9c>
   27c52:	e02c      	b.n	27cae <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   27c54:	231f      	movs	r3, #31
   27c56:	18fb      	adds	r3, r7, r3
   27c58:	2200      	movs	r2, #0
   27c5a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   27c5c:	231e      	movs	r3, #30
   27c5e:	18fb      	adds	r3, r7, r3
   27c60:	2210      	movs	r2, #16
   27c62:	701a      	strb	r2, [r3, #0]
			break;
   27c64:	e023      	b.n	27cae <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   27c66:	231f      	movs	r3, #31
   27c68:	18fb      	adds	r3, r7, r3
   27c6a:	2200      	movs	r2, #0
   27c6c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   27c6e:	231e      	movs	r3, #30
   27c70:	18fb      	adds	r3, r7, r3
   27c72:	2208      	movs	r2, #8
   27c74:	701a      	strb	r2, [r3, #0]
			break;
   27c76:	e01a      	b.n	27cae <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   27c78:	231f      	movs	r3, #31
   27c7a:	18fb      	adds	r3, r7, r3
   27c7c:	2200      	movs	r2, #0
   27c7e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   27c80:	231e      	movs	r3, #30
   27c82:	18fb      	adds	r3, r7, r3
   27c84:	2203      	movs	r2, #3
   27c86:	701a      	strb	r2, [r3, #0]
			break;
   27c88:	e011      	b.n	27cae <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   27c8a:	231f      	movs	r3, #31
   27c8c:	18fb      	adds	r3, r7, r3
   27c8e:	2201      	movs	r2, #1
   27c90:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   27c92:	231e      	movs	r3, #30
   27c94:	18fb      	adds	r3, r7, r3
   27c96:	2210      	movs	r2, #16
   27c98:	701a      	strb	r2, [r3, #0]
			break;
   27c9a:	e008      	b.n	27cae <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   27c9c:	231f      	movs	r3, #31
   27c9e:	18fb      	adds	r3, r7, r3
   27ca0:	2201      	movs	r2, #1
   27ca2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   27ca4:	231e      	movs	r3, #30
   27ca6:	18fb      	adds	r3, r7, r3
   27ca8:	2208      	movs	r2, #8
   27caa:	701a      	strb	r2, [r3, #0]
			break;
   27cac:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   27cae:	683b      	ldr	r3, [r7, #0]
   27cb0:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   27cb2:	683b      	ldr	r3, [r7, #0]
   27cb4:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   27cb6:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   27cb8:	683b      	ldr	r3, [r7, #0]
   27cba:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   27cbc:	4313      	orrs	r3, r2
		config->sample_rate |
   27cbe:	683a      	ldr	r2, [r7, #0]
   27cc0:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   27cc2:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   27cc4:	683a      	ldr	r2, [r7, #0]
   27cc6:	7e12      	ldrb	r2, [r2, #24]
   27cc8:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   27cca:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   27ccc:	683a      	ldr	r2, [r7, #0]
   27cce:	2126      	movs	r1, #38	; 0x26
   27cd0:	5c52      	ldrb	r2, [r2, r1]
   27cd2:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   27cd4:	4313      	orrs	r3, r2
   27cd6:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   27cd8:	231d      	movs	r3, #29
   27cda:	18fb      	adds	r3, r7, r3
   27cdc:	2200      	movs	r2, #0
   27cde:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   27ce0:	683b      	ldr	r3, [r7, #0]
   27ce2:	685b      	ldr	r3, [r3, #4]
   27ce4:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   27ce6:	68fb      	ldr	r3, [r7, #12]
   27ce8:	2b00      	cmp	r3, #0
   27cea:	d01e      	beq.n	27d2a <_usart_set_config+0x14e>
   27cec:	2280      	movs	r2, #128	; 0x80
   27cee:	0552      	lsls	r2, r2, #21
   27cf0:	4293      	cmp	r3, r2
   27cf2:	d14f      	bne.n	27d94 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   27cf4:	683b      	ldr	r3, [r7, #0]
   27cf6:	2227      	movs	r2, #39	; 0x27
   27cf8:	5c9b      	ldrb	r3, [r3, r2]
   27cfa:	2201      	movs	r2, #1
   27cfc:	4053      	eors	r3, r2
   27cfe:	b2db      	uxtb	r3, r3
   27d00:	2b00      	cmp	r3, #0
   27d02:	d046      	beq.n	27d92 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   27d04:	683b      	ldr	r3, [r7, #0]
   27d06:	6a1d      	ldr	r5, [r3, #32]
   27d08:	693b      	ldr	r3, [r7, #16]
   27d0a:	b2db      	uxtb	r3, r3
   27d0c:	0018      	movs	r0, r3
   27d0e:	4b65      	ldr	r3, [pc, #404]	; (27ea4 <_usart_set_config+0x2c8>)
   27d10:	4798      	blx	r3
   27d12:	0001      	movs	r1, r0
   27d14:	231d      	movs	r3, #29
   27d16:	18fc      	adds	r4, r7, r3
   27d18:	230a      	movs	r3, #10
   27d1a:	18fb      	adds	r3, r7, r3
   27d1c:	001a      	movs	r2, r3
   27d1e:	0028      	movs	r0, r5
   27d20:	4b61      	ldr	r3, [pc, #388]	; (27ea8 <_usart_set_config+0x2cc>)
   27d22:	4798      	blx	r3
   27d24:	0003      	movs	r3, r0
   27d26:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   27d28:	e033      	b.n	27d92 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   27d2a:	683b      	ldr	r3, [r7, #0]
   27d2c:	2227      	movs	r2, #39	; 0x27
   27d2e:	5c9b      	ldrb	r3, [r3, r2]
   27d30:	2b00      	cmp	r3, #0
   27d32:	d014      	beq.n	27d5e <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   27d34:	683b      	ldr	r3, [r7, #0]
   27d36:	6a18      	ldr	r0, [r3, #32]
   27d38:	683b      	ldr	r3, [r7, #0]
   27d3a:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   27d3c:	231d      	movs	r3, #29
   27d3e:	18fc      	adds	r4, r7, r3
   27d40:	231f      	movs	r3, #31
   27d42:	18fb      	adds	r3, r7, r3
   27d44:	781d      	ldrb	r5, [r3, #0]
   27d46:	230a      	movs	r3, #10
   27d48:	18fa      	adds	r2, r7, r3
   27d4a:	231e      	movs	r3, #30
   27d4c:	18fb      	adds	r3, r7, r3
   27d4e:	781b      	ldrb	r3, [r3, #0]
   27d50:	9300      	str	r3, [sp, #0]
   27d52:	002b      	movs	r3, r5
   27d54:	4d55      	ldr	r5, [pc, #340]	; (27eac <_usart_set_config+0x2d0>)
   27d56:	47a8      	blx	r5
   27d58:	0003      	movs	r3, r0
   27d5a:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   27d5c:	e01a      	b.n	27d94 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   27d5e:	683b      	ldr	r3, [r7, #0]
   27d60:	6a1d      	ldr	r5, [r3, #32]
   27d62:	693b      	ldr	r3, [r7, #16]
   27d64:	b2db      	uxtb	r3, r3
   27d66:	0018      	movs	r0, r3
   27d68:	4b4e      	ldr	r3, [pc, #312]	; (27ea4 <_usart_set_config+0x2c8>)
   27d6a:	4798      	blx	r3
				status_code =
   27d6c:	231d      	movs	r3, #29
   27d6e:	18fc      	adds	r4, r7, r3
   27d70:	231f      	movs	r3, #31
   27d72:	18fb      	adds	r3, r7, r3
   27d74:	7819      	ldrb	r1, [r3, #0]
   27d76:	230a      	movs	r3, #10
   27d78:	18fa      	adds	r2, r7, r3
   27d7a:	231e      	movs	r3, #30
   27d7c:	18fb      	adds	r3, r7, r3
   27d7e:	781b      	ldrb	r3, [r3, #0]
   27d80:	9300      	str	r3, [sp, #0]
   27d82:	000b      	movs	r3, r1
   27d84:	0001      	movs	r1, r0
   27d86:	0028      	movs	r0, r5
   27d88:	4d48      	ldr	r5, [pc, #288]	; (27eac <_usart_set_config+0x2d0>)
   27d8a:	47a8      	blx	r5
   27d8c:	0003      	movs	r3, r0
   27d8e:	7023      	strb	r3, [r4, #0]
			break;
   27d90:	e000      	b.n	27d94 <_usart_set_config+0x1b8>
			break;
   27d92:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   27d94:	231d      	movs	r3, #29
   27d96:	18fb      	adds	r3, r7, r3
   27d98:	781b      	ldrb	r3, [r3, #0]
   27d9a:	2b00      	cmp	r3, #0
   27d9c:	d003      	beq.n	27da6 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   27d9e:	231d      	movs	r3, #29
   27da0:	18fb      	adds	r3, r7, r3
   27da2:	781b      	ldrb	r3, [r3, #0]
   27da4:	e077      	b.n	27e96 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   27da6:	683b      	ldr	r3, [r7, #0]
   27da8:	7e5b      	ldrb	r3, [r3, #25]
   27daa:	2b00      	cmp	r3, #0
   27dac:	d003      	beq.n	27db6 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   27dae:	683b      	ldr	r3, [r7, #0]
   27db0:	7e9a      	ldrb	r2, [r3, #26]
   27db2:	69bb      	ldr	r3, [r7, #24]
   27db4:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   27db6:	687b      	ldr	r3, [r7, #4]
   27db8:	0018      	movs	r0, r3
   27dba:	4b3d      	ldr	r3, [pc, #244]	; (27eb0 <_usart_set_config+0x2d4>)
   27dbc:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   27dbe:	230a      	movs	r3, #10
   27dc0:	18fb      	adds	r3, r7, r3
   27dc2:	881a      	ldrh	r2, [r3, #0]
   27dc4:	69bb      	ldr	r3, [r7, #24]
   27dc6:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   27dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27dca:	68fb      	ldr	r3, [r7, #12]
   27dcc:	4313      	orrs	r3, r2
   27dce:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   27dd0:	683b      	ldr	r3, [r7, #0]
   27dd2:	2227      	movs	r2, #39	; 0x27
   27dd4:	5c9b      	ldrb	r3, [r3, r2]
   27dd6:	2201      	movs	r2, #1
   27dd8:	4053      	eors	r3, r2
   27dda:	b2db      	uxtb	r3, r3
   27ddc:	2b00      	cmp	r3, #0
   27dde:	d003      	beq.n	27de8 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   27de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27de2:	2204      	movs	r2, #4
   27de4:	4313      	orrs	r3, r2
   27de6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   27de8:	683b      	ldr	r3, [r7, #0]
   27dea:	7e5b      	ldrb	r3, [r3, #25]
   27dec:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   27dee:	683b      	ldr	r3, [r7, #0]
   27df0:	7f1b      	ldrb	r3, [r3, #28]
   27df2:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   27df4:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   27df6:	683b      	ldr	r3, [r7, #0]
   27df8:	7f5b      	ldrb	r3, [r3, #29]
   27dfa:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   27dfc:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   27dfe:	683b      	ldr	r3, [r7, #0]
   27e00:	2124      	movs	r1, #36	; 0x24
   27e02:	5c5b      	ldrb	r3, [r3, r1]
   27e04:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   27e06:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   27e08:	683b      	ldr	r3, [r7, #0]
   27e0a:	2125      	movs	r1, #37	; 0x25
   27e0c:	5c5b      	ldrb	r3, [r3, r1]
   27e0e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   27e10:	4313      	orrs	r3, r2
	ctrlb =  
   27e12:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   27e14:	683b      	ldr	r3, [r7, #0]
   27e16:	7a9b      	ldrb	r3, [r3, #10]
   27e18:	001a      	movs	r2, r3
   27e1a:	6a3b      	ldr	r3, [r7, #32]
   27e1c:	4313      	orrs	r3, r2
   27e1e:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   27e20:	683b      	ldr	r3, [r7, #0]
   27e22:	7adb      	ldrb	r3, [r3, #11]
   27e24:	001a      	movs	r2, r3
   27e26:	6a3b      	ldr	r3, [r7, #32]
   27e28:	4313      	orrs	r3, r2
   27e2a:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   27e2c:	683b      	ldr	r3, [r7, #0]
   27e2e:	891b      	ldrh	r3, [r3, #8]
   27e30:	2bff      	cmp	r3, #255	; 0xff
   27e32:	d00b      	beq.n	27e4c <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   27e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27e36:	2280      	movs	r2, #128	; 0x80
   27e38:	0452      	lsls	r2, r2, #17
   27e3a:	4313      	orrs	r3, r2
   27e3c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   27e3e:	683b      	ldr	r3, [r7, #0]
   27e40:	891b      	ldrh	r3, [r3, #8]
   27e42:	001a      	movs	r2, r3
   27e44:	6a3b      	ldr	r3, [r7, #32]
   27e46:	4313      	orrs	r3, r2
   27e48:	623b      	str	r3, [r7, #32]
   27e4a:	e008      	b.n	27e5e <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   27e4c:	683b      	ldr	r3, [r7, #0]
   27e4e:	7edb      	ldrb	r3, [r3, #27]
   27e50:	2b00      	cmp	r3, #0
   27e52:	d004      	beq.n	27e5e <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   27e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27e56:	2280      	movs	r2, #128	; 0x80
   27e58:	04d2      	lsls	r2, r2, #19
   27e5a:	4313      	orrs	r3, r2
   27e5c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   27e5e:	683b      	ldr	r3, [r7, #0]
   27e60:	222c      	movs	r2, #44	; 0x2c
   27e62:	5c9b      	ldrb	r3, [r3, r2]
   27e64:	2b00      	cmp	r3, #0
   27e66:	d103      	bne.n	27e70 <_usart_set_config+0x294>
   27e68:	4b12      	ldr	r3, [pc, #72]	; (27eb4 <_usart_set_config+0x2d8>)
   27e6a:	4798      	blx	r3
   27e6c:	1e03      	subs	r3, r0, #0
   27e6e:	d003      	beq.n	27e78 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   27e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27e72:	2280      	movs	r2, #128	; 0x80
   27e74:	4313      	orrs	r3, r2
   27e76:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   27e78:	687b      	ldr	r3, [r7, #4]
   27e7a:	0018      	movs	r0, r3
   27e7c:	4b0c      	ldr	r3, [pc, #48]	; (27eb0 <_usart_set_config+0x2d4>)
   27e7e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   27e80:	69bb      	ldr	r3, [r7, #24]
   27e82:	6a3a      	ldr	r2, [r7, #32]
   27e84:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   27e86:	687b      	ldr	r3, [r7, #4]
   27e88:	0018      	movs	r0, r3
   27e8a:	4b09      	ldr	r3, [pc, #36]	; (27eb0 <_usart_set_config+0x2d4>)
   27e8c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   27e8e:	69bb      	ldr	r3, [r7, #24]
   27e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27e92:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   27e94:	2300      	movs	r3, #0
}
   27e96:	0018      	movs	r0, r3
   27e98:	46bd      	mov	sp, r7
   27e9a:	b00a      	add	sp, #40	; 0x28
   27e9c:	bdb0      	pop	{r4, r5, r7, pc}
   27e9e:	46c0      	nop			; (mov r8, r8)
   27ea0:	00026985 	.word	0x00026985
   27ea4:	00029339 	.word	0x00029339
   27ea8:	000264ff 	.word	0x000264ff
   27eac:	0002657d 	.word	0x0002657d
   27eb0:	00027bb9 	.word	0x00027bb9
   27eb4:	00027b79 	.word	0x00027b79

00027eb8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   27eb8:	b590      	push	{r4, r7, lr}
   27eba:	b093      	sub	sp, #76	; 0x4c
   27ebc:	af00      	add	r7, sp, #0
   27ebe:	60f8      	str	r0, [r7, #12]
   27ec0:	60b9      	str	r1, [r7, #8]
   27ec2:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   27ec4:	233b      	movs	r3, #59	; 0x3b
   27ec6:	18fb      	adds	r3, r7, r3
   27ec8:	2200      	movs	r2, #0
   27eca:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   27ecc:	68fb      	ldr	r3, [r7, #12]
   27ece:	68ba      	ldr	r2, [r7, #8]
   27ed0:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   27ed2:	68fb      	ldr	r3, [r7, #12]
   27ed4:	681b      	ldr	r3, [r3, #0]
   27ed6:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27ed8:	68fb      	ldr	r3, [r7, #12]
   27eda:	681b      	ldr	r3, [r3, #0]
   27edc:	0018      	movs	r0, r3
   27ede:	4b86      	ldr	r3, [pc, #536]	; (280f8 <usart_init+0x240>)
   27ee0:	4798      	blx	r3
   27ee2:	0003      	movs	r3, r0
   27ee4:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   27ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27ee8:	3302      	adds	r3, #2
   27eea:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27eee:	3314      	adds	r3, #20
   27ef0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   27ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27ef4:	681b      	ldr	r3, [r3, #0]
   27ef6:	2201      	movs	r2, #1
   27ef8:	4013      	ands	r3, r2
   27efa:	d001      	beq.n	27f00 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   27efc:	2305      	movs	r3, #5
   27efe:	e0f6      	b.n	280ee <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   27f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27f02:	681b      	ldr	r3, [r3, #0]
   27f04:	2202      	movs	r2, #2
   27f06:	4013      	ands	r3, r2
   27f08:	d001      	beq.n	27f0e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   27f0a:	231c      	movs	r3, #28
   27f0c:	e0ef      	b.n	280ee <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   27f0e:	2201      	movs	r2, #1
   27f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27f12:	409a      	lsls	r2, r3
   27f14:	0013      	movs	r3, r2
   27f16:	0019      	movs	r1, r3
   27f18:	2002      	movs	r0, #2
   27f1a:	4b78      	ldr	r3, [pc, #480]	; (280fc <usart_init+0x244>)
   27f1c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27f1e:	2324      	movs	r3, #36	; 0x24
   27f20:	18fb      	adds	r3, r7, r3
   27f22:	0018      	movs	r0, r3
   27f24:	4b76      	ldr	r3, [pc, #472]	; (28100 <usart_init+0x248>)
   27f26:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   27f28:	687b      	ldr	r3, [r7, #4]
   27f2a:	222d      	movs	r2, #45	; 0x2d
   27f2c:	5c9a      	ldrb	r2, [r3, r2]
   27f2e:	2324      	movs	r3, #36	; 0x24
   27f30:	18fb      	adds	r3, r7, r3
   27f32:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   27f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27f36:	b2db      	uxtb	r3, r3
   27f38:	2224      	movs	r2, #36	; 0x24
   27f3a:	18ba      	adds	r2, r7, r2
   27f3c:	0011      	movs	r1, r2
   27f3e:	0018      	movs	r0, r3
   27f40:	4b70      	ldr	r3, [pc, #448]	; (28104 <usart_init+0x24c>)
   27f42:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   27f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27f46:	b2db      	uxtb	r3, r3
   27f48:	0018      	movs	r0, r3
   27f4a:	4b6f      	ldr	r3, [pc, #444]	; (28108 <usart_init+0x250>)
   27f4c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   27f4e:	687b      	ldr	r3, [r7, #4]
   27f50:	222d      	movs	r2, #45	; 0x2d
   27f52:	5c9b      	ldrb	r3, [r3, r2]
   27f54:	2100      	movs	r1, #0
   27f56:	0018      	movs	r0, r3
   27f58:	4b6c      	ldr	r3, [pc, #432]	; (2810c <usart_init+0x254>)
   27f5a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   27f5c:	687b      	ldr	r3, [r7, #4]
   27f5e:	7ada      	ldrb	r2, [r3, #11]
   27f60:	68fb      	ldr	r3, [r7, #12]
   27f62:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   27f64:	687b      	ldr	r3, [r7, #4]
   27f66:	2224      	movs	r2, #36	; 0x24
   27f68:	5c9a      	ldrb	r2, [r3, r2]
   27f6a:	68fb      	ldr	r3, [r7, #12]
   27f6c:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   27f6e:	687b      	ldr	r3, [r7, #4]
   27f70:	2225      	movs	r2, #37	; 0x25
   27f72:	5c9a      	ldrb	r2, [r3, r2]
   27f74:	68fb      	ldr	r3, [r7, #12]
   27f76:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   27f78:	687b      	ldr	r3, [r7, #4]
   27f7a:	7eda      	ldrb	r2, [r3, #27]
   27f7c:	68fb      	ldr	r3, [r7, #12]
   27f7e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   27f80:	687b      	ldr	r3, [r7, #4]
   27f82:	7f1a      	ldrb	r2, [r3, #28]
   27f84:	68fb      	ldr	r3, [r7, #12]
   27f86:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   27f88:	233b      	movs	r3, #59	; 0x3b
   27f8a:	18fc      	adds	r4, r7, r3
   27f8c:	687a      	ldr	r2, [r7, #4]
   27f8e:	68fb      	ldr	r3, [r7, #12]
   27f90:	0011      	movs	r1, r2
   27f92:	0018      	movs	r0, r3
   27f94:	4b5e      	ldr	r3, [pc, #376]	; (28110 <usart_init+0x258>)
   27f96:	4798      	blx	r3
   27f98:	0003      	movs	r3, r0
   27f9a:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   27f9c:	233b      	movs	r3, #59	; 0x3b
   27f9e:	18fb      	adds	r3, r7, r3
   27fa0:	781b      	ldrb	r3, [r3, #0]
   27fa2:	2b00      	cmp	r3, #0
   27fa4:	d003      	beq.n	27fae <usart_init+0xf6>
		return status_code;
   27fa6:	233b      	movs	r3, #59	; 0x3b
   27fa8:	18fb      	adds	r3, r7, r3
   27faa:	781b      	ldrb	r3, [r3, #0]
   27fac:	e09f      	b.n	280ee <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   27fae:	2320      	movs	r3, #32
   27fb0:	18fb      	adds	r3, r7, r3
   27fb2:	0018      	movs	r0, r3
   27fb4:	4b57      	ldr	r3, [pc, #348]	; (28114 <usart_init+0x25c>)
   27fb6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27fb8:	2320      	movs	r3, #32
   27fba:	18fb      	adds	r3, r7, r3
   27fbc:	2200      	movs	r2, #0
   27fbe:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   27fc0:	2320      	movs	r3, #32
   27fc2:	18fb      	adds	r3, r7, r3
   27fc4:	2200      	movs	r2, #0
   27fc6:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   27fc8:	687b      	ldr	r3, [r7, #4]
   27fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   27fcc:	2310      	movs	r3, #16
   27fce:	18fb      	adds	r3, r7, r3
   27fd0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   27fd2:	687b      	ldr	r3, [r7, #4]
   27fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   27fd6:	2310      	movs	r3, #16
   27fd8:	18fb      	adds	r3, r7, r3
   27fda:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   27fdc:	687b      	ldr	r3, [r7, #4]
   27fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   27fe0:	2310      	movs	r3, #16
   27fe2:	18fb      	adds	r3, r7, r3
   27fe4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   27fe6:	687b      	ldr	r3, [r7, #4]
   27fe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   27fea:	2310      	movs	r3, #16
   27fec:	18fb      	adds	r3, r7, r3
   27fee:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   27ff0:	2347      	movs	r3, #71	; 0x47
   27ff2:	18fb      	adds	r3, r7, r3
   27ff4:	2200      	movs	r2, #0
   27ff6:	701a      	strb	r2, [r3, #0]
   27ff8:	e02c      	b.n	28054 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   27ffa:	2347      	movs	r3, #71	; 0x47
   27ffc:	18fb      	adds	r3, r7, r3
   27ffe:	781a      	ldrb	r2, [r3, #0]
   28000:	2310      	movs	r3, #16
   28002:	18fb      	adds	r3, r7, r3
   28004:	0092      	lsls	r2, r2, #2
   28006:	58d3      	ldr	r3, [r2, r3]
   28008:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   2800a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2800c:	2b00      	cmp	r3, #0
   2800e:	d109      	bne.n	28024 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   28010:	2347      	movs	r3, #71	; 0x47
   28012:	18fb      	adds	r3, r7, r3
   28014:	781a      	ldrb	r2, [r3, #0]
   28016:	68bb      	ldr	r3, [r7, #8]
   28018:	0011      	movs	r1, r2
   2801a:	0018      	movs	r0, r3
   2801c:	4b3e      	ldr	r3, [pc, #248]	; (28118 <usart_init+0x260>)
   2801e:	4798      	blx	r3
   28020:	0003      	movs	r3, r0
   28022:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   28024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28026:	3301      	adds	r3, #1
   28028:	d00d      	beq.n	28046 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   2802a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2802c:	b2da      	uxtb	r2, r3
   2802e:	2320      	movs	r3, #32
   28030:	18fb      	adds	r3, r7, r3
   28032:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   28034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28036:	0c1b      	lsrs	r3, r3, #16
   28038:	b2db      	uxtb	r3, r3
   2803a:	2220      	movs	r2, #32
   2803c:	18ba      	adds	r2, r7, r2
   2803e:	0011      	movs	r1, r2
   28040:	0018      	movs	r0, r3
   28042:	4b36      	ldr	r3, [pc, #216]	; (2811c <usart_init+0x264>)
   28044:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   28046:	2347      	movs	r3, #71	; 0x47
   28048:	18fb      	adds	r3, r7, r3
   2804a:	781a      	ldrb	r2, [r3, #0]
   2804c:	2347      	movs	r3, #71	; 0x47
   2804e:	18fb      	adds	r3, r7, r3
   28050:	3201      	adds	r2, #1
   28052:	701a      	strb	r2, [r3, #0]
   28054:	2347      	movs	r3, #71	; 0x47
   28056:	18fb      	adds	r3, r7, r3
   28058:	781b      	ldrb	r3, [r3, #0]
   2805a:	2b03      	cmp	r3, #3
   2805c:	d9cd      	bls.n	27ffa <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2805e:	2300      	movs	r3, #0
   28060:	63fb      	str	r3, [r7, #60]	; 0x3c
   28062:	e00a      	b.n	2807a <usart_init+0x1c2>
		module->callback[i]            = NULL;
   28064:	68fa      	ldr	r2, [r7, #12]
   28066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28068:	3302      	adds	r3, #2
   2806a:	009b      	lsls	r3, r3, #2
   2806c:	18d3      	adds	r3, r2, r3
   2806e:	3304      	adds	r3, #4
   28070:	2200      	movs	r2, #0
   28072:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   28074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28076:	3301      	adds	r3, #1
   28078:	63fb      	str	r3, [r7, #60]	; 0x3c
   2807a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2807c:	2b05      	cmp	r3, #5
   2807e:	d9f1      	bls.n	28064 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   28080:	68fb      	ldr	r3, [r7, #12]
   28082:	2200      	movs	r2, #0
   28084:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   28086:	68fb      	ldr	r3, [r7, #12]
   28088:	2200      	movs	r2, #0
   2808a:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   2808c:	68fb      	ldr	r3, [r7, #12]
   2808e:	2200      	movs	r2, #0
   28090:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   28092:	68fb      	ldr	r3, [r7, #12]
   28094:	2200      	movs	r2, #0
   28096:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   28098:	68fb      	ldr	r3, [r7, #12]
   2809a:	2230      	movs	r2, #48	; 0x30
   2809c:	2100      	movs	r1, #0
   2809e:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   280a0:	68fb      	ldr	r3, [r7, #12]
   280a2:	2231      	movs	r2, #49	; 0x31
   280a4:	2100      	movs	r1, #0
   280a6:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   280a8:	68fb      	ldr	r3, [r7, #12]
   280aa:	2232      	movs	r2, #50	; 0x32
   280ac:	2100      	movs	r1, #0
   280ae:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   280b0:	68fb      	ldr	r3, [r7, #12]
   280b2:	2233      	movs	r2, #51	; 0x33
   280b4:	2100      	movs	r1, #0
   280b6:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   280b8:	68fb      	ldr	r3, [r7, #12]
   280ba:	681b      	ldr	r3, [r3, #0]
   280bc:	2227      	movs	r2, #39	; 0x27
   280be:	18bc      	adds	r4, r7, r2
   280c0:	0018      	movs	r0, r3
   280c2:	4b0d      	ldr	r3, [pc, #52]	; (280f8 <usart_init+0x240>)
   280c4:	4798      	blx	r3
   280c6:	0003      	movs	r3, r0
   280c8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   280ca:	4a15      	ldr	r2, [pc, #84]	; (28120 <usart_init+0x268>)
   280cc:	2327      	movs	r3, #39	; 0x27
   280ce:	18fb      	adds	r3, r7, r3
   280d0:	781b      	ldrb	r3, [r3, #0]
   280d2:	0011      	movs	r1, r2
   280d4:	0018      	movs	r0, r3
   280d6:	4b13      	ldr	r3, [pc, #76]	; (28124 <usart_init+0x26c>)
   280d8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   280da:	2327      	movs	r3, #39	; 0x27
   280dc:	18fb      	adds	r3, r7, r3
   280de:	781a      	ldrb	r2, [r3, #0]
   280e0:	4b11      	ldr	r3, [pc, #68]	; (28128 <usart_init+0x270>)
   280e2:	0092      	lsls	r2, r2, #2
   280e4:	68f9      	ldr	r1, [r7, #12]
   280e6:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   280e8:	233b      	movs	r3, #59	; 0x3b
   280ea:	18fb      	adds	r3, r7, r3
   280ec:	781b      	ldrb	r3, [r3, #0]
}
   280ee:	0018      	movs	r0, r3
   280f0:	46bd      	mov	sp, r7
   280f2:	b013      	add	sp, #76	; 0x4c
   280f4:	bd90      	pop	{r4, r7, pc}
   280f6:	46c0      	nop			; (mov r8, r8)
   280f8:	00026985 	.word	0x00026985
   280fc:	00027af5 	.word	0x00027af5
   28100:	00027add 	.word	0x00027add
   28104:	00029215 	.word	0x00029215
   28108:	00029259 	.word	0x00029259
   2810c:	0002673d 	.word	0x0002673d
   28110:	00027bdd 	.word	0x00027bdd
   28114:	00027b51 	.word	0x00027b51
   28118:	000267c9 	.word	0x000267c9
   2811c:	00029575 	.word	0x00029575
   28120:	00028395 	.word	0x00028395
   28124:	000269e9 	.word	0x000269e9
   28128:	20005614 	.word	0x20005614

0002812c <system_interrupt_enter_critical_section>:
{
   2812c:	b580      	push	{r7, lr}
   2812e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   28130:	4b02      	ldr	r3, [pc, #8]	; (2813c <system_interrupt_enter_critical_section+0x10>)
   28132:	4798      	blx	r3
}
   28134:	46c0      	nop			; (mov r8, r8)
   28136:	46bd      	mov	sp, r7
   28138:	bd80      	pop	{r7, pc}
   2813a:	46c0      	nop			; (mov r8, r8)
   2813c:	00025581 	.word	0x00025581

00028140 <system_interrupt_leave_critical_section>:
{
   28140:	b580      	push	{r7, lr}
   28142:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   28144:	4b02      	ldr	r3, [pc, #8]	; (28150 <system_interrupt_leave_critical_section+0x10>)
   28146:	4798      	blx	r3
}
   28148:	46c0      	nop			; (mov r8, r8)
   2814a:	46bd      	mov	sp, r7
   2814c:	bd80      	pop	{r7, pc}
   2814e:	46c0      	nop			; (mov r8, r8)
   28150:	000255d5 	.word	0x000255d5

00028154 <usart_is_syncing>:
{
   28154:	b580      	push	{r7, lr}
   28156:	b084      	sub	sp, #16
   28158:	af00      	add	r7, sp, #0
   2815a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   2815c:	687b      	ldr	r3, [r7, #4]
   2815e:	681b      	ldr	r3, [r3, #0]
   28160:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   28162:	68fb      	ldr	r3, [r7, #12]
   28164:	69db      	ldr	r3, [r3, #28]
   28166:	1e5a      	subs	r2, r3, #1
   28168:	4193      	sbcs	r3, r2
   2816a:	b2db      	uxtb	r3, r3
}
   2816c:	0018      	movs	r0, r3
   2816e:	46bd      	mov	sp, r7
   28170:	b004      	add	sp, #16
   28172:	bd80      	pop	{r7, pc}

00028174 <_usart_wait_for_sync>:
{
   28174:	b580      	push	{r7, lr}
   28176:	b082      	sub	sp, #8
   28178:	af00      	add	r7, sp, #0
   2817a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   2817c:	46c0      	nop			; (mov r8, r8)
   2817e:	687b      	ldr	r3, [r7, #4]
   28180:	0018      	movs	r0, r3
   28182:	4b04      	ldr	r3, [pc, #16]	; (28194 <_usart_wait_for_sync+0x20>)
   28184:	4798      	blx	r3
   28186:	1e03      	subs	r3, r0, #0
   28188:	d1f9      	bne.n	2817e <_usart_wait_for_sync+0xa>
}
   2818a:	46c0      	nop			; (mov r8, r8)
   2818c:	46bd      	mov	sp, r7
   2818e:	b002      	add	sp, #8
   28190:	bd80      	pop	{r7, pc}
   28192:	46c0      	nop			; (mov r8, r8)
   28194:	00028155 	.word	0x00028155

00028198 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   28198:	b580      	push	{r7, lr}
   2819a:	b086      	sub	sp, #24
   2819c:	af00      	add	r7, sp, #0
   2819e:	60f8      	str	r0, [r7, #12]
   281a0:	60b9      	str	r1, [r7, #8]
   281a2:	1dbb      	adds	r3, r7, #6
   281a4:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   281a6:	68fb      	ldr	r3, [r7, #12]
   281a8:	681b      	ldr	r3, [r3, #0]
   281aa:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   281ac:	4b0f      	ldr	r3, [pc, #60]	; (281ec <_usart_write_buffer+0x54>)
   281ae:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   281b0:	68fb      	ldr	r3, [r7, #12]
   281b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   281b4:	b29b      	uxth	r3, r3
   281b6:	2b00      	cmp	r3, #0
   281b8:	d003      	beq.n	281c2 <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   281ba:	4b0d      	ldr	r3, [pc, #52]	; (281f0 <_usart_write_buffer+0x58>)
   281bc:	4798      	blx	r3
		return STATUS_BUSY;
   281be:	2305      	movs	r3, #5
   281c0:	e010      	b.n	281e4 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   281c2:	68fb      	ldr	r3, [r7, #12]
   281c4:	1dba      	adds	r2, r7, #6
   281c6:	8812      	ldrh	r2, [r2, #0]
   281c8:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   281ca:	4b09      	ldr	r3, [pc, #36]	; (281f0 <_usart_write_buffer+0x58>)
   281cc:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   281ce:	68fb      	ldr	r3, [r7, #12]
   281d0:	68ba      	ldr	r2, [r7, #8]
   281d2:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   281d4:	68fb      	ldr	r3, [r7, #12]
   281d6:	2233      	movs	r2, #51	; 0x33
   281d8:	2105      	movs	r1, #5
   281da:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   281dc:	697b      	ldr	r3, [r7, #20]
   281de:	2201      	movs	r2, #1
   281e0:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   281e2:	2300      	movs	r3, #0
}
   281e4:	0018      	movs	r0, r3
   281e6:	46bd      	mov	sp, r7
   281e8:	b006      	add	sp, #24
   281ea:	bd80      	pop	{r7, pc}
   281ec:	0002812d 	.word	0x0002812d
   281f0:	00028141 	.word	0x00028141

000281f4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   281f4:	b580      	push	{r7, lr}
   281f6:	b086      	sub	sp, #24
   281f8:	af00      	add	r7, sp, #0
   281fa:	60f8      	str	r0, [r7, #12]
   281fc:	60b9      	str	r1, [r7, #8]
   281fe:	1dbb      	adds	r3, r7, #6
   28200:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28202:	68fb      	ldr	r3, [r7, #12]
   28204:	681b      	ldr	r3, [r3, #0]
   28206:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   28208:	4b16      	ldr	r3, [pc, #88]	; (28264 <_usart_read_buffer+0x70>)
   2820a:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   2820c:	68fb      	ldr	r3, [r7, #12]
   2820e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28210:	b29b      	uxth	r3, r3
   28212:	2b00      	cmp	r3, #0
   28214:	d003      	beq.n	2821e <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   28216:	4b14      	ldr	r3, [pc, #80]	; (28268 <_usart_read_buffer+0x74>)
   28218:	4798      	blx	r3
		return STATUS_BUSY;
   2821a:	2305      	movs	r3, #5
   2821c:	e01e      	b.n	2825c <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   2821e:	68fb      	ldr	r3, [r7, #12]
   28220:	1dba      	adds	r2, r7, #6
   28222:	8812      	ldrh	r2, [r2, #0]
   28224:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   28226:	4b10      	ldr	r3, [pc, #64]	; (28268 <_usart_read_buffer+0x74>)
   28228:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   2822a:	68fb      	ldr	r3, [r7, #12]
   2822c:	68ba      	ldr	r2, [r7, #8]
   2822e:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   28230:	68fb      	ldr	r3, [r7, #12]
   28232:	2232      	movs	r2, #50	; 0x32
   28234:	2105      	movs	r1, #5
   28236:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   28238:	697b      	ldr	r3, [r7, #20]
   2823a:	2204      	movs	r2, #4
   2823c:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   2823e:	68fb      	ldr	r3, [r7, #12]
   28240:	7a1b      	ldrb	r3, [r3, #8]
   28242:	2b00      	cmp	r3, #0
   28244:	d002      	beq.n	2824c <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   28246:	697b      	ldr	r3, [r7, #20]
   28248:	2220      	movs	r2, #32
   2824a:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   2824c:	68fb      	ldr	r3, [r7, #12]
   2824e:	7a5b      	ldrb	r3, [r3, #9]
   28250:	2b00      	cmp	r3, #0
   28252:	d002      	beq.n	2825a <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   28254:	697b      	ldr	r3, [r7, #20]
   28256:	2208      	movs	r2, #8
   28258:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   2825a:	2300      	movs	r3, #0
}
   2825c:	0018      	movs	r0, r3
   2825e:	46bd      	mov	sp, r7
   28260:	b006      	add	sp, #24
   28262:	bd80      	pop	{r7, pc}
   28264:	0002812d 	.word	0x0002812d
   28268:	00028141 	.word	0x00028141

0002826c <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   2826c:	b580      	push	{r7, lr}
   2826e:	b084      	sub	sp, #16
   28270:	af00      	add	r7, sp, #0
   28272:	60f8      	str	r0, [r7, #12]
   28274:	60b9      	str	r1, [r7, #8]
   28276:	1dfb      	adds	r3, r7, #7
   28278:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2827a:	1dfb      	adds	r3, r7, #7
   2827c:	781b      	ldrb	r3, [r3, #0]
   2827e:	68fa      	ldr	r2, [r7, #12]
   28280:	3302      	adds	r3, #2
   28282:	009b      	lsls	r3, r3, #2
   28284:	18d3      	adds	r3, r2, r3
   28286:	3304      	adds	r3, #4
   28288:	68ba      	ldr	r2, [r7, #8]
   2828a:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   2828c:	68fb      	ldr	r3, [r7, #12]
   2828e:	2230      	movs	r2, #48	; 0x30
   28290:	5c9b      	ldrb	r3, [r3, r2]
   28292:	b25a      	sxtb	r2, r3
   28294:	1dfb      	adds	r3, r7, #7
   28296:	781b      	ldrb	r3, [r3, #0]
   28298:	2101      	movs	r1, #1
   2829a:	4099      	lsls	r1, r3
   2829c:	000b      	movs	r3, r1
   2829e:	b25b      	sxtb	r3, r3
   282a0:	4313      	orrs	r3, r2
   282a2:	b25b      	sxtb	r3, r3
   282a4:	b2d9      	uxtb	r1, r3
   282a6:	68fb      	ldr	r3, [r7, #12]
   282a8:	2230      	movs	r2, #48	; 0x30
   282aa:	5499      	strb	r1, [r3, r2]
}
   282ac:	46c0      	nop			; (mov r8, r8)
   282ae:	46bd      	mov	sp, r7
   282b0:	b004      	add	sp, #16
   282b2:	bd80      	pop	{r7, pc}

000282b4 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   282b4:	b580      	push	{r7, lr}
   282b6:	b084      	sub	sp, #16
   282b8:	af00      	add	r7, sp, #0
   282ba:	60f8      	str	r0, [r7, #12]
   282bc:	60b9      	str	r1, [r7, #8]
   282be:	1dbb      	adds	r3, r7, #6
   282c0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   282c2:	1dbb      	adds	r3, r7, #6
   282c4:	881b      	ldrh	r3, [r3, #0]
   282c6:	2b00      	cmp	r3, #0
   282c8:	d101      	bne.n	282ce <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   282ca:	2317      	movs	r3, #23
   282cc:	e010      	b.n	282f0 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   282ce:	68fb      	ldr	r3, [r7, #12]
   282d0:	79db      	ldrb	r3, [r3, #7]
   282d2:	2201      	movs	r2, #1
   282d4:	4053      	eors	r3, r2
   282d6:	b2db      	uxtb	r3, r3
   282d8:	2b00      	cmp	r3, #0
   282da:	d001      	beq.n	282e0 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   282dc:	231c      	movs	r3, #28
   282de:	e007      	b.n	282f0 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   282e0:	1dbb      	adds	r3, r7, #6
   282e2:	881a      	ldrh	r2, [r3, #0]
   282e4:	68b9      	ldr	r1, [r7, #8]
   282e6:	68fb      	ldr	r3, [r7, #12]
   282e8:	0018      	movs	r0, r3
   282ea:	4b03      	ldr	r3, [pc, #12]	; (282f8 <usart_write_buffer_job+0x44>)
   282ec:	4798      	blx	r3
   282ee:	0003      	movs	r3, r0
}
   282f0:	0018      	movs	r0, r3
   282f2:	46bd      	mov	sp, r7
   282f4:	b004      	add	sp, #16
   282f6:	bd80      	pop	{r7, pc}
   282f8:	00028199 	.word	0x00028199

000282fc <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   282fc:	b580      	push	{r7, lr}
   282fe:	b084      	sub	sp, #16
   28300:	af00      	add	r7, sp, #0
   28302:	60f8      	str	r0, [r7, #12]
   28304:	60b9      	str	r1, [r7, #8]
   28306:	1dbb      	adds	r3, r7, #6
   28308:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   2830a:	1dbb      	adds	r3, r7, #6
   2830c:	881b      	ldrh	r3, [r3, #0]
   2830e:	2b00      	cmp	r3, #0
   28310:	d101      	bne.n	28316 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   28312:	2317      	movs	r3, #23
   28314:	e010      	b.n	28338 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   28316:	68fb      	ldr	r3, [r7, #12]
   28318:	799b      	ldrb	r3, [r3, #6]
   2831a:	2201      	movs	r2, #1
   2831c:	4053      	eors	r3, r2
   2831e:	b2db      	uxtb	r3, r3
   28320:	2b00      	cmp	r3, #0
   28322:	d001      	beq.n	28328 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28324:	231c      	movs	r3, #28
   28326:	e007      	b.n	28338 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   28328:	1dbb      	adds	r3, r7, #6
   2832a:	881a      	ldrh	r2, [r3, #0]
   2832c:	68b9      	ldr	r1, [r7, #8]
   2832e:	68fb      	ldr	r3, [r7, #12]
   28330:	0018      	movs	r0, r3
   28332:	4b03      	ldr	r3, [pc, #12]	; (28340 <usart_read_buffer_job+0x44>)
   28334:	4798      	blx	r3
   28336:	0003      	movs	r3, r0
}
   28338:	0018      	movs	r0, r3
   2833a:	46bd      	mov	sp, r7
   2833c:	b004      	add	sp, #16
   2833e:	bd80      	pop	{r7, pc}
   28340:	000281f5 	.word	0x000281f5

00028344 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   28344:	b580      	push	{r7, lr}
   28346:	b084      	sub	sp, #16
   28348:	af00      	add	r7, sp, #0
   2834a:	6078      	str	r0, [r7, #4]
   2834c:	000a      	movs	r2, r1
   2834e:	1cfb      	adds	r3, r7, #3
   28350:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   28352:	1cfb      	adds	r3, r7, #3
   28354:	781b      	ldrb	r3, [r3, #0]
   28356:	2b00      	cmp	r3, #0
   28358:	d002      	beq.n	28360 <usart_get_job_status+0x1c>
   2835a:	2b01      	cmp	r3, #1
   2835c:	d007      	beq.n	2836e <usart_get_job_status+0x2a>
   2835e:	e00d      	b.n	2837c <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   28360:	230f      	movs	r3, #15
   28362:	18fb      	adds	r3, r7, r3
   28364:	687a      	ldr	r2, [r7, #4]
   28366:	2132      	movs	r1, #50	; 0x32
   28368:	5c52      	ldrb	r2, [r2, r1]
   2836a:	701a      	strb	r2, [r3, #0]
			break;
   2836c:	e00b      	b.n	28386 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   2836e:	230f      	movs	r3, #15
   28370:	18fb      	adds	r3, r7, r3
   28372:	687a      	ldr	r2, [r7, #4]
   28374:	2133      	movs	r1, #51	; 0x33
   28376:	5c52      	ldrb	r2, [r2, r1]
   28378:	701a      	strb	r2, [r3, #0]
			break;
   2837a:	e004      	b.n	28386 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   2837c:	230f      	movs	r3, #15
   2837e:	18fb      	adds	r3, r7, r3
   28380:	2217      	movs	r2, #23
   28382:	701a      	strb	r2, [r3, #0]
			break;
   28384:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   28386:	230f      	movs	r3, #15
   28388:	18fb      	adds	r3, r7, r3
   2838a:	781b      	ldrb	r3, [r3, #0]
}
   2838c:	0018      	movs	r0, r3
   2838e:	46bd      	mov	sp, r7
   28390:	b004      	add	sp, #16
   28392:	bd80      	pop	{r7, pc}

00028394 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   28394:	b580      	push	{r7, lr}
   28396:	b088      	sub	sp, #32
   28398:	af00      	add	r7, sp, #0
   2839a:	0002      	movs	r2, r0
   2839c:	1dfb      	adds	r3, r7, #7
   2839e:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   283a0:	1dfb      	adds	r3, r7, #7
   283a2:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   283a4:	4ba3      	ldr	r3, [pc, #652]	; (28634 <_usart_interrupt_handler+0x2a0>)
   283a6:	0092      	lsls	r2, r2, #2
   283a8:	58d3      	ldr	r3, [r2, r3]
   283aa:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   283ac:	69bb      	ldr	r3, [r7, #24]
   283ae:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   283b0:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   283b2:	69bb      	ldr	r3, [r7, #24]
   283b4:	0018      	movs	r0, r3
   283b6:	4ba0      	ldr	r3, [pc, #640]	; (28638 <_usart_interrupt_handler+0x2a4>)
   283b8:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   283ba:	697b      	ldr	r3, [r7, #20]
   283bc:	7e1b      	ldrb	r3, [r3, #24]
   283be:	b2da      	uxtb	r2, r3
   283c0:	2312      	movs	r3, #18
   283c2:	18fb      	adds	r3, r7, r3
   283c4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   283c6:	697b      	ldr	r3, [r7, #20]
   283c8:	7d9b      	ldrb	r3, [r3, #22]
   283ca:	b2db      	uxtb	r3, r3
   283cc:	b29a      	uxth	r2, r3
   283ce:	2312      	movs	r3, #18
   283d0:	18fb      	adds	r3, r7, r3
   283d2:	2112      	movs	r1, #18
   283d4:	1879      	adds	r1, r7, r1
   283d6:	8809      	ldrh	r1, [r1, #0]
   283d8:	400a      	ands	r2, r1
   283da:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   283dc:	69bb      	ldr	r3, [r7, #24]
   283de:	2230      	movs	r2, #48	; 0x30
   283e0:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   283e2:	69ba      	ldr	r2, [r7, #24]
   283e4:	2131      	movs	r1, #49	; 0x31
   283e6:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   283e8:	4013      	ands	r3, r2
   283ea:	b2da      	uxtb	r2, r3
   283ec:	2310      	movs	r3, #16
   283ee:	18fb      	adds	r3, r7, r3
   283f0:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   283f2:	2312      	movs	r3, #18
   283f4:	18fb      	adds	r3, r7, r3
   283f6:	881b      	ldrh	r3, [r3, #0]
   283f8:	2201      	movs	r2, #1
   283fa:	4013      	ands	r3, r2
   283fc:	d044      	beq.n	28488 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   283fe:	69bb      	ldr	r3, [r7, #24]
   28400:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28402:	b29b      	uxth	r3, r3
   28404:	2b00      	cmp	r3, #0
   28406:	d03c      	beq.n	28482 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   28408:	69bb      	ldr	r3, [r7, #24]
   2840a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2840c:	781b      	ldrb	r3, [r3, #0]
   2840e:	b2da      	uxtb	r2, r3
   28410:	231c      	movs	r3, #28
   28412:	18fb      	adds	r3, r7, r3
   28414:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   28416:	69bb      	ldr	r3, [r7, #24]
   28418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2841a:	1c5a      	adds	r2, r3, #1
   2841c:	69bb      	ldr	r3, [r7, #24]
   2841e:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28420:	69bb      	ldr	r3, [r7, #24]
   28422:	795b      	ldrb	r3, [r3, #5]
   28424:	2b01      	cmp	r3, #1
   28426:	d113      	bne.n	28450 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   28428:	69bb      	ldr	r3, [r7, #24]
   2842a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2842c:	781b      	ldrb	r3, [r3, #0]
   2842e:	b2db      	uxtb	r3, r3
   28430:	021b      	lsls	r3, r3, #8
   28432:	b21a      	sxth	r2, r3
   28434:	231c      	movs	r3, #28
   28436:	18fb      	adds	r3, r7, r3
   28438:	2100      	movs	r1, #0
   2843a:	5e5b      	ldrsh	r3, [r3, r1]
   2843c:	4313      	orrs	r3, r2
   2843e:	b21a      	sxth	r2, r3
   28440:	231c      	movs	r3, #28
   28442:	18fb      	adds	r3, r7, r3
   28444:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   28446:	69bb      	ldr	r3, [r7, #24]
   28448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2844a:	1c5a      	adds	r2, r3, #1
   2844c:	69bb      	ldr	r3, [r7, #24]
   2844e:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   28450:	231c      	movs	r3, #28
   28452:	18fb      	adds	r3, r7, r3
   28454:	881b      	ldrh	r3, [r3, #0]
   28456:	05db      	lsls	r3, r3, #23
   28458:	0ddb      	lsrs	r3, r3, #23
   2845a:	b29a      	uxth	r2, r3
   2845c:	697b      	ldr	r3, [r7, #20]
   2845e:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   28460:	69bb      	ldr	r3, [r7, #24]
   28462:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28464:	b29b      	uxth	r3, r3
   28466:	3b01      	subs	r3, #1
   28468:	b29b      	uxth	r3, r3
   2846a:	69ba      	ldr	r2, [r7, #24]
   2846c:	1c19      	adds	r1, r3, #0
   2846e:	85d1      	strh	r1, [r2, #46]	; 0x2e
   28470:	2b00      	cmp	r3, #0
   28472:	d109      	bne.n	28488 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   28474:	697b      	ldr	r3, [r7, #20]
   28476:	2201      	movs	r2, #1
   28478:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   2847a:	697b      	ldr	r3, [r7, #20]
   2847c:	2202      	movs	r2, #2
   2847e:	759a      	strb	r2, [r3, #22]
   28480:	e002      	b.n	28488 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   28482:	697b      	ldr	r3, [r7, #20]
   28484:	2201      	movs	r2, #1
   28486:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   28488:	2312      	movs	r3, #18
   2848a:	18fb      	adds	r3, r7, r3
   2848c:	881b      	ldrh	r3, [r3, #0]
   2848e:	2202      	movs	r2, #2
   28490:	4013      	ands	r3, r2
   28492:	d011      	beq.n	284b8 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   28494:	697b      	ldr	r3, [r7, #20]
   28496:	2202      	movs	r2, #2
   28498:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   2849a:	69bb      	ldr	r3, [r7, #24]
   2849c:	2233      	movs	r2, #51	; 0x33
   2849e:	2100      	movs	r1, #0
   284a0:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   284a2:	2310      	movs	r3, #16
   284a4:	18fb      	adds	r3, r7, r3
   284a6:	881b      	ldrh	r3, [r3, #0]
   284a8:	2201      	movs	r2, #1
   284aa:	4013      	ands	r3, r2
   284ac:	d004      	beq.n	284b8 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   284ae:	69bb      	ldr	r3, [r7, #24]
   284b0:	68db      	ldr	r3, [r3, #12]
   284b2:	69ba      	ldr	r2, [r7, #24]
   284b4:	0010      	movs	r0, r2
   284b6:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   284b8:	2312      	movs	r3, #18
   284ba:	18fb      	adds	r3, r7, r3
   284bc:	881b      	ldrh	r3, [r3, #0]
   284be:	2204      	movs	r2, #4
   284c0:	4013      	ands	r3, r2
   284c2:	d100      	bne.n	284c6 <_usart_interrupt_handler+0x132>
   284c4:	e0bd      	b.n	28642 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   284c6:	69bb      	ldr	r3, [r7, #24]
   284c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   284ca:	b29b      	uxth	r3, r3
   284cc:	2b00      	cmp	r3, #0
   284ce:	d100      	bne.n	284d2 <_usart_interrupt_handler+0x13e>
   284d0:	e0b4      	b.n	2863c <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   284d2:	697b      	ldr	r3, [r7, #20]
   284d4:	8b5b      	ldrh	r3, [r3, #26]
   284d6:	b29b      	uxth	r3, r3
   284d8:	b2da      	uxtb	r2, r3
   284da:	231f      	movs	r3, #31
   284dc:	18fb      	adds	r3, r7, r3
   284de:	213f      	movs	r1, #63	; 0x3f
   284e0:	400a      	ands	r2, r1
   284e2:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   284e4:	231f      	movs	r3, #31
   284e6:	18fb      	adds	r3, r7, r3
   284e8:	781b      	ldrb	r3, [r3, #0]
   284ea:	2208      	movs	r2, #8
   284ec:	4013      	ands	r3, r2
   284ee:	d007      	beq.n	28500 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   284f0:	231f      	movs	r3, #31
   284f2:	18fb      	adds	r3, r7, r3
   284f4:	221f      	movs	r2, #31
   284f6:	18ba      	adds	r2, r7, r2
   284f8:	7812      	ldrb	r2, [r2, #0]
   284fa:	2108      	movs	r1, #8
   284fc:	438a      	bics	r2, r1
   284fe:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   28500:	231f      	movs	r3, #31
   28502:	18fb      	adds	r3, r7, r3
   28504:	781b      	ldrb	r3, [r3, #0]
   28506:	2b00      	cmp	r3, #0
   28508:	d050      	beq.n	285ac <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   2850a:	231f      	movs	r3, #31
   2850c:	18fb      	adds	r3, r7, r3
   2850e:	781b      	ldrb	r3, [r3, #0]
   28510:	2202      	movs	r2, #2
   28512:	4013      	ands	r3, r2
   28514:	d007      	beq.n	28526 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   28516:	69bb      	ldr	r3, [r7, #24]
   28518:	2232      	movs	r2, #50	; 0x32
   2851a:	211a      	movs	r1, #26
   2851c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   2851e:	697b      	ldr	r3, [r7, #20]
   28520:	2202      	movs	r2, #2
   28522:	835a      	strh	r2, [r3, #26]
   28524:	e036      	b.n	28594 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   28526:	231f      	movs	r3, #31
   28528:	18fb      	adds	r3, r7, r3
   2852a:	781b      	ldrb	r3, [r3, #0]
   2852c:	2204      	movs	r2, #4
   2852e:	4013      	ands	r3, r2
   28530:	d007      	beq.n	28542 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   28532:	69bb      	ldr	r3, [r7, #24]
   28534:	2232      	movs	r2, #50	; 0x32
   28536:	211e      	movs	r1, #30
   28538:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   2853a:	697b      	ldr	r3, [r7, #20]
   2853c:	2204      	movs	r2, #4
   2853e:	835a      	strh	r2, [r3, #26]
   28540:	e028      	b.n	28594 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   28542:	231f      	movs	r3, #31
   28544:	18fb      	adds	r3, r7, r3
   28546:	781b      	ldrb	r3, [r3, #0]
   28548:	2201      	movs	r2, #1
   2854a:	4013      	ands	r3, r2
   2854c:	d007      	beq.n	2855e <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   2854e:	69bb      	ldr	r3, [r7, #24]
   28550:	2232      	movs	r2, #50	; 0x32
   28552:	2113      	movs	r1, #19
   28554:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   28556:	697b      	ldr	r3, [r7, #20]
   28558:	2201      	movs	r2, #1
   2855a:	835a      	strh	r2, [r3, #26]
   2855c:	e01a      	b.n	28594 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   2855e:	231f      	movs	r3, #31
   28560:	18fb      	adds	r3, r7, r3
   28562:	781b      	ldrb	r3, [r3, #0]
   28564:	2210      	movs	r2, #16
   28566:	4013      	ands	r3, r2
   28568:	d007      	beq.n	2857a <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   2856a:	69bb      	ldr	r3, [r7, #24]
   2856c:	2232      	movs	r2, #50	; 0x32
   2856e:	2142      	movs	r1, #66	; 0x42
   28570:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   28572:	697b      	ldr	r3, [r7, #20]
   28574:	2210      	movs	r2, #16
   28576:	835a      	strh	r2, [r3, #26]
   28578:	e00c      	b.n	28594 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   2857a:	231f      	movs	r3, #31
   2857c:	18fb      	adds	r3, r7, r3
   2857e:	781b      	ldrb	r3, [r3, #0]
   28580:	2220      	movs	r2, #32
   28582:	4013      	ands	r3, r2
   28584:	d006      	beq.n	28594 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   28586:	69bb      	ldr	r3, [r7, #24]
   28588:	2232      	movs	r2, #50	; 0x32
   2858a:	2141      	movs	r1, #65	; 0x41
   2858c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   2858e:	697b      	ldr	r3, [r7, #20]
   28590:	2220      	movs	r2, #32
   28592:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   28594:	2310      	movs	r3, #16
   28596:	18fb      	adds	r3, r7, r3
   28598:	881b      	ldrh	r3, [r3, #0]
   2859a:	2204      	movs	r2, #4
   2859c:	4013      	ands	r3, r2
				if (callback_status
   2859e:	d050      	beq.n	28642 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   285a0:	69bb      	ldr	r3, [r7, #24]
   285a2:	695b      	ldr	r3, [r3, #20]
   285a4:	69ba      	ldr	r2, [r7, #24]
   285a6:	0010      	movs	r0, r2
   285a8:	4798      	blx	r3
   285aa:	e04a      	b.n	28642 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   285ac:	697b      	ldr	r3, [r7, #20]
   285ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   285b0:	b29a      	uxth	r2, r3
   285b2:	230e      	movs	r3, #14
   285b4:	18fb      	adds	r3, r7, r3
   285b6:	05d2      	lsls	r2, r2, #23
   285b8:	0dd2      	lsrs	r2, r2, #23
   285ba:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   285bc:	69bb      	ldr	r3, [r7, #24]
   285be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   285c0:	220e      	movs	r2, #14
   285c2:	18ba      	adds	r2, r7, r2
   285c4:	8812      	ldrh	r2, [r2, #0]
   285c6:	b2d2      	uxtb	r2, r2
   285c8:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   285ca:	69bb      	ldr	r3, [r7, #24]
   285cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   285ce:	1c5a      	adds	r2, r3, #1
   285d0:	69bb      	ldr	r3, [r7, #24]
   285d2:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   285d4:	69bb      	ldr	r3, [r7, #24]
   285d6:	795b      	ldrb	r3, [r3, #5]
   285d8:	2b01      	cmp	r3, #1
   285da:	d10d      	bne.n	285f8 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   285dc:	69bb      	ldr	r3, [r7, #24]
   285de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   285e0:	220e      	movs	r2, #14
   285e2:	18ba      	adds	r2, r7, r2
   285e4:	8812      	ldrh	r2, [r2, #0]
   285e6:	0a12      	lsrs	r2, r2, #8
   285e8:	b292      	uxth	r2, r2
   285ea:	b2d2      	uxtb	r2, r2
   285ec:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   285ee:	69bb      	ldr	r3, [r7, #24]
   285f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   285f2:	1c5a      	adds	r2, r3, #1
   285f4:	69bb      	ldr	r3, [r7, #24]
   285f6:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   285f8:	69bb      	ldr	r3, [r7, #24]
   285fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   285fc:	b29b      	uxth	r3, r3
   285fe:	3b01      	subs	r3, #1
   28600:	b29b      	uxth	r3, r3
   28602:	69ba      	ldr	r2, [r7, #24]
   28604:	1c19      	adds	r1, r3, #0
   28606:	8591      	strh	r1, [r2, #44]	; 0x2c
   28608:	2b00      	cmp	r3, #0
   2860a:	d11a      	bne.n	28642 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2860c:	697b      	ldr	r3, [r7, #20]
   2860e:	2204      	movs	r2, #4
   28610:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   28612:	69bb      	ldr	r3, [r7, #24]
   28614:	2232      	movs	r2, #50	; 0x32
   28616:	2100      	movs	r1, #0
   28618:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   2861a:	2310      	movs	r3, #16
   2861c:	18fb      	adds	r3, r7, r3
   2861e:	881b      	ldrh	r3, [r3, #0]
   28620:	2202      	movs	r2, #2
   28622:	4013      	ands	r3, r2
					if (callback_status
   28624:	d00d      	beq.n	28642 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   28626:	69bb      	ldr	r3, [r7, #24]
   28628:	691b      	ldr	r3, [r3, #16]
   2862a:	69ba      	ldr	r2, [r7, #24]
   2862c:	0010      	movs	r0, r2
   2862e:	4798      	blx	r3
   28630:	e007      	b.n	28642 <_usart_interrupt_handler+0x2ae>
   28632:	46c0      	nop			; (mov r8, r8)
   28634:	20005614 	.word	0x20005614
   28638:	00028175 	.word	0x00028175
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2863c:	697b      	ldr	r3, [r7, #20]
   2863e:	2204      	movs	r2, #4
   28640:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   28642:	2312      	movs	r3, #18
   28644:	18fb      	adds	r3, r7, r3
   28646:	881b      	ldrh	r3, [r3, #0]
   28648:	2210      	movs	r2, #16
   2864a:	4013      	ands	r3, r2
   2864c:	d010      	beq.n	28670 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   2864e:	697b      	ldr	r3, [r7, #20]
   28650:	2210      	movs	r2, #16
   28652:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   28654:	697b      	ldr	r3, [r7, #20]
   28656:	2210      	movs	r2, #16
   28658:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   2865a:	2310      	movs	r3, #16
   2865c:	18fb      	adds	r3, r7, r3
   2865e:	881b      	ldrh	r3, [r3, #0]
   28660:	2210      	movs	r2, #16
   28662:	4013      	ands	r3, r2
   28664:	d004      	beq.n	28670 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   28666:	69bb      	ldr	r3, [r7, #24]
   28668:	69db      	ldr	r3, [r3, #28]
   2866a:	69ba      	ldr	r2, [r7, #24]
   2866c:	0010      	movs	r0, r2
   2866e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   28670:	2312      	movs	r3, #18
   28672:	18fb      	adds	r3, r7, r3
   28674:	881b      	ldrh	r3, [r3, #0]
   28676:	2220      	movs	r2, #32
   28678:	4013      	ands	r3, r2
   2867a:	d010      	beq.n	2869e <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   2867c:	697b      	ldr	r3, [r7, #20]
   2867e:	2220      	movs	r2, #32
   28680:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   28682:	697b      	ldr	r3, [r7, #20]
   28684:	2220      	movs	r2, #32
   28686:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   28688:	2310      	movs	r3, #16
   2868a:	18fb      	adds	r3, r7, r3
   2868c:	881b      	ldrh	r3, [r3, #0]
   2868e:	2208      	movs	r2, #8
   28690:	4013      	ands	r3, r2
   28692:	d004      	beq.n	2869e <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   28694:	69bb      	ldr	r3, [r7, #24]
   28696:	699b      	ldr	r3, [r3, #24]
   28698:	69ba      	ldr	r2, [r7, #24]
   2869a:	0010      	movs	r0, r2
   2869c:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   2869e:	2312      	movs	r3, #18
   286a0:	18fb      	adds	r3, r7, r3
   286a2:	881b      	ldrh	r3, [r3, #0]
   286a4:	2208      	movs	r2, #8
   286a6:	4013      	ands	r3, r2
   286a8:	d010      	beq.n	286cc <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   286aa:	697b      	ldr	r3, [r7, #20]
   286ac:	2208      	movs	r2, #8
   286ae:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   286b0:	697b      	ldr	r3, [r7, #20]
   286b2:	2208      	movs	r2, #8
   286b4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   286b6:	2310      	movs	r3, #16
   286b8:	18fb      	adds	r3, r7, r3
   286ba:	881b      	ldrh	r3, [r3, #0]
   286bc:	2220      	movs	r2, #32
   286be:	4013      	ands	r3, r2
   286c0:	d004      	beq.n	286cc <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   286c2:	69bb      	ldr	r3, [r7, #24]
   286c4:	6a1b      	ldr	r3, [r3, #32]
   286c6:	69ba      	ldr	r2, [r7, #24]
   286c8:	0010      	movs	r0, r2
   286ca:	4798      	blx	r3
		}
	}
#endif
}
   286cc:	46c0      	nop			; (mov r8, r8)
   286ce:	46bd      	mov	sp, r7
   286d0:	b008      	add	sp, #32
   286d2:	bd80      	pop	{r7, pc}

000286d4 <system_gclk_gen_get_config_defaults>:
{
   286d4:	b580      	push	{r7, lr}
   286d6:	b082      	sub	sp, #8
   286d8:	af00      	add	r7, sp, #0
   286da:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   286dc:	687b      	ldr	r3, [r7, #4]
   286de:	2201      	movs	r2, #1
   286e0:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   286e2:	687b      	ldr	r3, [r7, #4]
   286e4:	2200      	movs	r2, #0
   286e6:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   286e8:	687b      	ldr	r3, [r7, #4]
   286ea:	2206      	movs	r2, #6
   286ec:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   286ee:	687b      	ldr	r3, [r7, #4]
   286f0:	2200      	movs	r2, #0
   286f2:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   286f4:	687b      	ldr	r3, [r7, #4]
   286f6:	2200      	movs	r2, #0
   286f8:	725a      	strb	r2, [r3, #9]
}
   286fa:	46c0      	nop			; (mov r8, r8)
   286fc:	46bd      	mov	sp, r7
   286fe:	b002      	add	sp, #8
   28700:	bd80      	pop	{r7, pc}

00028702 <system_gclk_chan_get_config_defaults>:
{
   28702:	b580      	push	{r7, lr}
   28704:	b082      	sub	sp, #8
   28706:	af00      	add	r7, sp, #0
   28708:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2870a:	687b      	ldr	r3, [r7, #4]
   2870c:	2200      	movs	r2, #0
   2870e:	701a      	strb	r2, [r3, #0]
}
   28710:	46c0      	nop			; (mov r8, r8)
   28712:	46bd      	mov	sp, r7
   28714:	b002      	add	sp, #8
   28716:	bd80      	pop	{r7, pc}

00028718 <system_clock_source_osc8m_get_config_defaults>:
{
   28718:	b580      	push	{r7, lr}
   2871a:	b082      	sub	sp, #8
   2871c:	af00      	add	r7, sp, #0
   2871e:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   28720:	687b      	ldr	r3, [r7, #4]
   28722:	2203      	movs	r2, #3
   28724:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   28726:	687b      	ldr	r3, [r7, #4]
   28728:	2200      	movs	r2, #0
   2872a:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   2872c:	687b      	ldr	r3, [r7, #4]
   2872e:	2201      	movs	r2, #1
   28730:	709a      	strb	r2, [r3, #2]
}
   28732:	46c0      	nop			; (mov r8, r8)
   28734:	46bd      	mov	sp, r7
   28736:	b002      	add	sp, #8
   28738:	bd80      	pop	{r7, pc}
	...

0002873c <system_cpu_clock_set_divider>:
{
   2873c:	b580      	push	{r7, lr}
   2873e:	b082      	sub	sp, #8
   28740:	af00      	add	r7, sp, #0
   28742:	0002      	movs	r2, r0
   28744:	1dfb      	adds	r3, r7, #7
   28746:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   28748:	4a03      	ldr	r2, [pc, #12]	; (28758 <system_cpu_clock_set_divider+0x1c>)
   2874a:	1dfb      	adds	r3, r7, #7
   2874c:	781b      	ldrb	r3, [r3, #0]
   2874e:	7213      	strb	r3, [r2, #8]
}
   28750:	46c0      	nop			; (mov r8, r8)
   28752:	46bd      	mov	sp, r7
   28754:	b002      	add	sp, #8
   28756:	bd80      	pop	{r7, pc}
   28758:	40000400 	.word	0x40000400

0002875c <system_apb_clock_set_divider>:
{
   2875c:	b580      	push	{r7, lr}
   2875e:	b082      	sub	sp, #8
   28760:	af00      	add	r7, sp, #0
   28762:	0002      	movs	r2, r0
   28764:	1dfb      	adds	r3, r7, #7
   28766:	701a      	strb	r2, [r3, #0]
   28768:	1dbb      	adds	r3, r7, #6
   2876a:	1c0a      	adds	r2, r1, #0
   2876c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2876e:	1dfb      	adds	r3, r7, #7
   28770:	781b      	ldrb	r3, [r3, #0]
   28772:	2b01      	cmp	r3, #1
   28774:	d008      	beq.n	28788 <system_apb_clock_set_divider+0x2c>
   28776:	2b02      	cmp	r3, #2
   28778:	d00b      	beq.n	28792 <system_apb_clock_set_divider+0x36>
   2877a:	2b00      	cmp	r3, #0
   2877c:	d10e      	bne.n	2879c <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   2877e:	4a0b      	ldr	r2, [pc, #44]	; (287ac <system_apb_clock_set_divider+0x50>)
   28780:	1dbb      	adds	r3, r7, #6
   28782:	781b      	ldrb	r3, [r3, #0]
   28784:	7253      	strb	r3, [r2, #9]
			break;
   28786:	e00b      	b.n	287a0 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   28788:	4a08      	ldr	r2, [pc, #32]	; (287ac <system_apb_clock_set_divider+0x50>)
   2878a:	1dbb      	adds	r3, r7, #6
   2878c:	781b      	ldrb	r3, [r3, #0]
   2878e:	7293      	strb	r3, [r2, #10]
			break;
   28790:	e006      	b.n	287a0 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   28792:	4a06      	ldr	r2, [pc, #24]	; (287ac <system_apb_clock_set_divider+0x50>)
   28794:	1dbb      	adds	r3, r7, #6
   28796:	781b      	ldrb	r3, [r3, #0]
   28798:	72d3      	strb	r3, [r2, #11]
			break;
   2879a:	e001      	b.n	287a0 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   2879c:	2317      	movs	r3, #23
   2879e:	e000      	b.n	287a2 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   287a0:	2300      	movs	r3, #0
}
   287a2:	0018      	movs	r0, r3
   287a4:	46bd      	mov	sp, r7
   287a6:	b002      	add	sp, #8
   287a8:	bd80      	pop	{r7, pc}
   287aa:	46c0      	nop			; (mov r8, r8)
   287ac:	40000400 	.word	0x40000400

000287b0 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   287b0:	b580      	push	{r7, lr}
   287b2:	b082      	sub	sp, #8
   287b4:	af00      	add	r7, sp, #0
   287b6:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   287b8:	687b      	ldr	r3, [r7, #4]
   287ba:	2201      	movs	r2, #1
   287bc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   287be:	687b      	ldr	r3, [r7, #4]
   287c0:	2200      	movs	r2, #0
   287c2:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   287c4:	687b      	ldr	r3, [r7, #4]
   287c6:	2200      	movs	r2, #0
   287c8:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   287ca:	687b      	ldr	r3, [r7, #4]
   287cc:	2200      	movs	r2, #0
   287ce:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   287d0:	687b      	ldr	r3, [r7, #4]
   287d2:	2200      	movs	r2, #0
   287d4:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   287d6:	687b      	ldr	r3, [r7, #4]
   287d8:	4a0a      	ldr	r2, [pc, #40]	; (28804 <system_clock_source_dpll_get_config_defaults+0x54>)
   287da:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   287dc:	687b      	ldr	r3, [r7, #4]
   287de:	2280      	movs	r2, #128	; 0x80
   287e0:	0212      	lsls	r2, r2, #8
   287e2:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   287e4:	687b      	ldr	r3, [r7, #4]
   287e6:	2201      	movs	r2, #1
   287e8:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   287ea:	687b      	ldr	r3, [r7, #4]
   287ec:	2200      	movs	r2, #0
   287ee:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   287f0:	687b      	ldr	r3, [r7, #4]
   287f2:	2200      	movs	r2, #0
   287f4:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   287f6:	687b      	ldr	r3, [r7, #4]
   287f8:	2200      	movs	r2, #0
   287fa:	749a      	strb	r2, [r3, #18]
};
   287fc:	46c0      	nop			; (mov r8, r8)
   287fe:	46bd      	mov	sp, r7
   28800:	b002      	add	sp, #8
   28802:	bd80      	pop	{r7, pc}
   28804:	02dc6c00 	.word	0x02dc6c00

00028808 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   28808:	b580      	push	{r7, lr}
   2880a:	b082      	sub	sp, #8
   2880c:	af00      	add	r7, sp, #0
   2880e:	0002      	movs	r2, r0
   28810:	1dfb      	adds	r3, r7, #7
   28812:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   28814:	4a08      	ldr	r2, [pc, #32]	; (28838 <system_flash_set_waitstates+0x30>)
   28816:	1dfb      	adds	r3, r7, #7
   28818:	781b      	ldrb	r3, [r3, #0]
   2881a:	210f      	movs	r1, #15
   2881c:	400b      	ands	r3, r1
   2881e:	b2d9      	uxtb	r1, r3
   28820:	6853      	ldr	r3, [r2, #4]
   28822:	200f      	movs	r0, #15
   28824:	4001      	ands	r1, r0
   28826:	0049      	lsls	r1, r1, #1
   28828:	201e      	movs	r0, #30
   2882a:	4383      	bics	r3, r0
   2882c:	430b      	orrs	r3, r1
   2882e:	6053      	str	r3, [r2, #4]
}
   28830:	46c0      	nop			; (mov r8, r8)
   28832:	46bd      	mov	sp, r7
   28834:	b002      	add	sp, #8
   28836:	bd80      	pop	{r7, pc}
   28838:	41004000 	.word	0x41004000

0002883c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   2883c:	b580      	push	{r7, lr}
   2883e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   28840:	46c0      	nop			; (mov r8, r8)
   28842:	4b04      	ldr	r3, [pc, #16]	; (28854 <_system_dfll_wait_for_sync+0x18>)
   28844:	68db      	ldr	r3, [r3, #12]
   28846:	2210      	movs	r2, #16
   28848:	4013      	ands	r3, r2
   2884a:	d0fa      	beq.n	28842 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   2884c:	46c0      	nop			; (mov r8, r8)
   2884e:	46bd      	mov	sp, r7
   28850:	bd80      	pop	{r7, pc}
   28852:	46c0      	nop			; (mov r8, r8)
   28854:	40000800 	.word	0x40000800

00028858 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   28858:	b580      	push	{r7, lr}
   2885a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   2885c:	4b0c      	ldr	r3, [pc, #48]	; (28890 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2885e:	2202      	movs	r2, #2
   28860:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   28862:	4b0c      	ldr	r3, [pc, #48]	; (28894 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   28864:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   28866:	4a0a      	ldr	r2, [pc, #40]	; (28890 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28868:	4b0b      	ldr	r3, [pc, #44]	; (28898 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2886a:	689b      	ldr	r3, [r3, #8]
   2886c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   2886e:	4a08      	ldr	r2, [pc, #32]	; (28890 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28870:	4b09      	ldr	r3, [pc, #36]	; (28898 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   28872:	685b      	ldr	r3, [r3, #4]
   28874:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   28876:	4b06      	ldr	r3, [pc, #24]	; (28890 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28878:	2200      	movs	r2, #0
   2887a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2887c:	4b05      	ldr	r3, [pc, #20]	; (28894 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2887e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   28880:	4a03      	ldr	r2, [pc, #12]	; (28890 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28882:	4b05      	ldr	r3, [pc, #20]	; (28898 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   28884:	681b      	ldr	r3, [r3, #0]
   28886:	b29b      	uxth	r3, r3
   28888:	8493      	strh	r3, [r2, #36]	; 0x24
}
   2888a:	46c0      	nop			; (mov r8, r8)
   2888c:	46bd      	mov	sp, r7
   2888e:	bd80      	pop	{r7, pc}
   28890:	40000800 	.word	0x40000800
   28894:	0002883d 	.word	0x0002883d
   28898:	20003e34 	.word	0x20003e34

0002889c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   2889c:	b580      	push	{r7, lr}
   2889e:	b082      	sub	sp, #8
   288a0:	af00      	add	r7, sp, #0
   288a2:	0002      	movs	r2, r0
   288a4:	1dfb      	adds	r3, r7, #7
   288a6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   288a8:	1dfb      	adds	r3, r7, #7
   288aa:	781b      	ldrb	r3, [r3, #0]
   288ac:	2b08      	cmp	r3, #8
   288ae:	d841      	bhi.n	28934 <system_clock_source_get_hz+0x98>
   288b0:	009a      	lsls	r2, r3, #2
   288b2:	4b23      	ldr	r3, [pc, #140]	; (28940 <system_clock_source_get_hz+0xa4>)
   288b4:	18d3      	adds	r3, r2, r3
   288b6:	681b      	ldr	r3, [r3, #0]
   288b8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   288ba:	4b22      	ldr	r3, [pc, #136]	; (28944 <system_clock_source_get_hz+0xa8>)
   288bc:	691b      	ldr	r3, [r3, #16]
   288be:	e03a      	b.n	28936 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   288c0:	4b21      	ldr	r3, [pc, #132]	; (28948 <system_clock_source_get_hz+0xac>)
   288c2:	6a1b      	ldr	r3, [r3, #32]
   288c4:	059b      	lsls	r3, r3, #22
   288c6:	0f9b      	lsrs	r3, r3, #30
   288c8:	b2db      	uxtb	r3, r3
   288ca:	001a      	movs	r2, r3
   288cc:	4b1f      	ldr	r3, [pc, #124]	; (2894c <system_clock_source_get_hz+0xb0>)
   288ce:	40d3      	lsrs	r3, r2
   288d0:	e031      	b.n	28936 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   288d2:	2380      	movs	r3, #128	; 0x80
   288d4:	021b      	lsls	r3, r3, #8
   288d6:	e02e      	b.n	28936 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   288d8:	2380      	movs	r3, #128	; 0x80
   288da:	021b      	lsls	r3, r3, #8
   288dc:	e02b      	b.n	28936 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   288de:	4b19      	ldr	r3, [pc, #100]	; (28944 <system_clock_source_get_hz+0xa8>)
   288e0:	695b      	ldr	r3, [r3, #20]
   288e2:	e028      	b.n	28936 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   288e4:	4b17      	ldr	r3, [pc, #92]	; (28944 <system_clock_source_get_hz+0xa8>)
   288e6:	681b      	ldr	r3, [r3, #0]
   288e8:	2202      	movs	r2, #2
   288ea:	4013      	ands	r3, r2
   288ec:	d101      	bne.n	288f2 <system_clock_source_get_hz+0x56>
			return 0;
   288ee:	2300      	movs	r3, #0
   288f0:	e021      	b.n	28936 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   288f2:	4b17      	ldr	r3, [pc, #92]	; (28950 <system_clock_source_get_hz+0xb4>)
   288f4:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   288f6:	4b13      	ldr	r3, [pc, #76]	; (28944 <system_clock_source_get_hz+0xa8>)
   288f8:	681b      	ldr	r3, [r3, #0]
   288fa:	2224      	movs	r2, #36	; 0x24
   288fc:	4013      	ands	r3, r2
   288fe:	2b04      	cmp	r3, #4
   28900:	d109      	bne.n	28916 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   28902:	2000      	movs	r0, #0
   28904:	4b13      	ldr	r3, [pc, #76]	; (28954 <system_clock_source_get_hz+0xb8>)
   28906:	4798      	blx	r3
   28908:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   2890a:	4b0e      	ldr	r3, [pc, #56]	; (28944 <system_clock_source_get_hz+0xa8>)
   2890c:	689b      	ldr	r3, [r3, #8]
   2890e:	041b      	lsls	r3, r3, #16
   28910:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   28912:	4353      	muls	r3, r2
   28914:	e00f      	b.n	28936 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   28916:	4b10      	ldr	r3, [pc, #64]	; (28958 <system_clock_source_get_hz+0xbc>)
   28918:	e00d      	b.n	28936 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   2891a:	4a0b      	ldr	r2, [pc, #44]	; (28948 <system_clock_source_get_hz+0xac>)
   2891c:	2350      	movs	r3, #80	; 0x50
   2891e:	5cd3      	ldrb	r3, [r2, r3]
   28920:	b2db      	uxtb	r3, r3
   28922:	001a      	movs	r2, r3
   28924:	2304      	movs	r3, #4
   28926:	4013      	ands	r3, r2
   28928:	d101      	bne.n	2892e <system_clock_source_get_hz+0x92>
			return 0;
   2892a:	2300      	movs	r3, #0
   2892c:	e003      	b.n	28936 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2892e:	4b05      	ldr	r3, [pc, #20]	; (28944 <system_clock_source_get_hz+0xa8>)
   28930:	68db      	ldr	r3, [r3, #12]
   28932:	e000      	b.n	28936 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   28934:	2300      	movs	r3, #0
	}
}
   28936:	0018      	movs	r0, r3
   28938:	46bd      	mov	sp, r7
   2893a:	b002      	add	sp, #8
   2893c:	bd80      	pop	{r7, pc}
   2893e:	46c0      	nop			; (mov r8, r8)
   28940:	0003832c 	.word	0x0003832c
   28944:	20003e34 	.word	0x20003e34
   28948:	40000800 	.word	0x40000800
   2894c:	007a1200 	.word	0x007a1200
   28950:	0002883d 	.word	0x0002883d
   28954:	00029339 	.word	0x00029339
   28958:	02dc6c00 	.word	0x02dc6c00

0002895c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   2895c:	b580      	push	{r7, lr}
   2895e:	b084      	sub	sp, #16
   28960:	af00      	add	r7, sp, #0
   28962:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   28964:	4b1a      	ldr	r3, [pc, #104]	; (289d0 <system_clock_source_osc8m_set_config+0x74>)
   28966:	6a1b      	ldr	r3, [r3, #32]
   28968:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   2896a:	687b      	ldr	r3, [r7, #4]
   2896c:	781b      	ldrb	r3, [r3, #0]
   2896e:	1c1a      	adds	r2, r3, #0
   28970:	2303      	movs	r3, #3
   28972:	4013      	ands	r3, r2
   28974:	b2da      	uxtb	r2, r3
   28976:	230d      	movs	r3, #13
   28978:	18fb      	adds	r3, r7, r3
   2897a:	2103      	movs	r1, #3
   2897c:	400a      	ands	r2, r1
   2897e:	0010      	movs	r0, r2
   28980:	781a      	ldrb	r2, [r3, #0]
   28982:	2103      	movs	r1, #3
   28984:	438a      	bics	r2, r1
   28986:	1c11      	adds	r1, r2, #0
   28988:	1c02      	adds	r2, r0, #0
   2898a:	430a      	orrs	r2, r1
   2898c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2898e:	687b      	ldr	r3, [r7, #4]
   28990:	789a      	ldrb	r2, [r3, #2]
   28992:	230c      	movs	r3, #12
   28994:	18fb      	adds	r3, r7, r3
   28996:	01d0      	lsls	r0, r2, #7
   28998:	781a      	ldrb	r2, [r3, #0]
   2899a:	217f      	movs	r1, #127	; 0x7f
   2899c:	400a      	ands	r2, r1
   2899e:	1c11      	adds	r1, r2, #0
   289a0:	1c02      	adds	r2, r0, #0
   289a2:	430a      	orrs	r2, r1
   289a4:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   289a6:	687b      	ldr	r3, [r7, #4]
   289a8:	785a      	ldrb	r2, [r3, #1]
   289aa:	230c      	movs	r3, #12
   289ac:	18fb      	adds	r3, r7, r3
   289ae:	2101      	movs	r1, #1
   289b0:	400a      	ands	r2, r1
   289b2:	0190      	lsls	r0, r2, #6
   289b4:	781a      	ldrb	r2, [r3, #0]
   289b6:	2140      	movs	r1, #64	; 0x40
   289b8:	438a      	bics	r2, r1
   289ba:	1c11      	adds	r1, r2, #0
   289bc:	1c02      	adds	r2, r0, #0
   289be:	430a      	orrs	r2, r1
   289c0:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   289c2:	4b03      	ldr	r3, [pc, #12]	; (289d0 <system_clock_source_osc8m_set_config+0x74>)
   289c4:	68fa      	ldr	r2, [r7, #12]
   289c6:	621a      	str	r2, [r3, #32]
}
   289c8:	46c0      	nop			; (mov r8, r8)
   289ca:	46bd      	mov	sp, r7
   289cc:	b004      	add	sp, #16
   289ce:	bd80      	pop	{r7, pc}
   289d0:	40000800 	.word	0x40000800

000289d4 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   289d4:	b580      	push	{r7, lr}
   289d6:	b086      	sub	sp, #24
   289d8:	af00      	add	r7, sp, #0
   289da:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   289dc:	687b      	ldr	r3, [r7, #4]
   289de:	68db      	ldr	r3, [r3, #12]
   289e0:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   289e2:	687b      	ldr	r3, [r7, #4]
   289e4:	7d1b      	ldrb	r3, [r3, #20]
   289e6:	2b01      	cmp	r3, #1
   289e8:	d10a      	bne.n	28a00 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   289ea:	687b      	ldr	r3, [r7, #4]
   289ec:	8a1b      	ldrh	r3, [r3, #16]
   289ee:	3301      	adds	r3, #1
   289f0:	005b      	lsls	r3, r3, #1
   289f2:	001a      	movs	r2, r3
   289f4:	4b36      	ldr	r3, [pc, #216]	; (28ad0 <system_clock_source_dpll_set_config+0xfc>)
   289f6:	0011      	movs	r1, r2
   289f8:	6978      	ldr	r0, [r7, #20]
   289fa:	4798      	blx	r3
   289fc:	0003      	movs	r3, r0
   289fe:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   28a00:	687b      	ldr	r3, [r7, #4]
   28a02:	689b      	ldr	r3, [r3, #8]
   28a04:	011a      	lsls	r2, r3, #4
   28a06:	4b32      	ldr	r3, [pc, #200]	; (28ad0 <system_clock_source_dpll_set_config+0xfc>)
   28a08:	6979      	ldr	r1, [r7, #20]
   28a0a:	0010      	movs	r0, r2
   28a0c:	4798      	blx	r3
   28a0e:	0003      	movs	r3, r0
   28a10:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   28a12:	693b      	ldr	r3, [r7, #16]
   28a14:	b2da      	uxtb	r2, r3
   28a16:	230f      	movs	r3, #15
   28a18:	18fb      	adds	r3, r7, r3
   28a1a:	210f      	movs	r1, #15
   28a1c:	400a      	ands	r2, r1
   28a1e:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   28a20:	693b      	ldr	r3, [r7, #16]
   28a22:	091b      	lsrs	r3, r3, #4
   28a24:	3b01      	subs	r3, #1
   28a26:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   28a28:	492a      	ldr	r1, [pc, #168]	; (28ad4 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   28a2a:	687b      	ldr	r3, [r7, #4]
   28a2c:	781b      	ldrb	r3, [r3, #0]
   28a2e:	01db      	lsls	r3, r3, #7
   28a30:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   28a32:	687b      	ldr	r3, [r7, #4]
   28a34:	785b      	ldrb	r3, [r3, #1]
   28a36:	019b      	lsls	r3, r3, #6
   28a38:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   28a3a:	4313      	orrs	r3, r2
   28a3c:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   28a3e:	2344      	movs	r3, #68	; 0x44
   28a40:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   28a42:	4b24      	ldr	r3, [pc, #144]	; (28ad4 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   28a44:	220f      	movs	r2, #15
   28a46:	18ba      	adds	r2, r7, r2
   28a48:	7812      	ldrb	r2, [r2, #0]
   28a4a:	0412      	lsls	r2, r2, #16
   28a4c:	0011      	movs	r1, r2
   28a4e:	22f0      	movs	r2, #240	; 0xf0
   28a50:	0312      	lsls	r2, r2, #12
   28a52:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   28a54:	693a      	ldr	r2, [r7, #16]
   28a56:	0512      	lsls	r2, r2, #20
   28a58:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   28a5a:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   28a5c:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   28a5e:	4b1d      	ldr	r3, [pc, #116]	; (28ad4 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   28a60:	687a      	ldr	r2, [r7, #4]
   28a62:	8a12      	ldrh	r2, [r2, #16]
   28a64:	0412      	lsls	r2, r2, #16
   28a66:	0011      	movs	r1, r2
   28a68:	4a1b      	ldr	r2, [pc, #108]	; (28ad8 <system_clock_source_dpll_set_config+0x104>)
   28a6a:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   28a6c:	687a      	ldr	r2, [r7, #4]
   28a6e:	7892      	ldrb	r2, [r2, #2]
   28a70:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   28a72:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   28a74:	687a      	ldr	r2, [r7, #4]
   28a76:	7cd2      	ldrb	r2, [r2, #19]
   28a78:	0212      	lsls	r2, r2, #8
   28a7a:	0010      	movs	r0, r2
   28a7c:	22e0      	movs	r2, #224	; 0xe0
   28a7e:	00d2      	lsls	r2, r2, #3
   28a80:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   28a82:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   28a84:	687a      	ldr	r2, [r7, #4]
   28a86:	7d12      	ldrb	r2, [r2, #20]
   28a88:	0112      	lsls	r2, r2, #4
   28a8a:	0010      	movs	r0, r2
   28a8c:	2230      	movs	r2, #48	; 0x30
   28a8e:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   28a90:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   28a92:	687a      	ldr	r2, [r7, #4]
   28a94:	78d2      	ldrb	r2, [r2, #3]
   28a96:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   28a98:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   28a9a:	687a      	ldr	r2, [r7, #4]
   28a9c:	7912      	ldrb	r2, [r2, #4]
   28a9e:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   28aa0:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   28aa2:	687a      	ldr	r2, [r7, #4]
   28aa4:	7c92      	ldrb	r2, [r2, #18]
   28aa6:	0010      	movs	r0, r2
   28aa8:	2203      	movs	r2, #3
   28aaa:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   28aac:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   28aae:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   28ab0:	693b      	ldr	r3, [r7, #16]
   28ab2:	3301      	adds	r3, #1
   28ab4:	011a      	lsls	r2, r3, #4
   28ab6:	230f      	movs	r3, #15
   28ab8:	18fb      	adds	r3, r7, r3
   28aba:	781b      	ldrb	r3, [r3, #0]
   28abc:	18d3      	adds	r3, r2, r3
   28abe:	697a      	ldr	r2, [r7, #20]
   28ac0:	4353      	muls	r3, r2
   28ac2:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   28ac4:	4b05      	ldr	r3, [pc, #20]	; (28adc <system_clock_source_dpll_set_config+0x108>)
   28ac6:	60da      	str	r2, [r3, #12]
}
   28ac8:	46c0      	nop			; (mov r8, r8)
   28aca:	46bd      	mov	sp, r7
   28acc:	b006      	add	sp, #24
   28ace:	bd80      	pop	{r7, pc}
   28ad0:	00031d45 	.word	0x00031d45
   28ad4:	40000800 	.word	0x40000800
   28ad8:	07ff0000 	.word	0x07ff0000
   28adc:	20003e34 	.word	0x20003e34

00028ae0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   28ae0:	b580      	push	{r7, lr}
   28ae2:	b082      	sub	sp, #8
   28ae4:	af00      	add	r7, sp, #0
   28ae6:	0002      	movs	r2, r0
   28ae8:	1dfb      	adds	r3, r7, #7
   28aea:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   28aec:	1dfb      	adds	r3, r7, #7
   28aee:	781b      	ldrb	r3, [r3, #0]
   28af0:	2b08      	cmp	r3, #8
   28af2:	d83b      	bhi.n	28b6c <system_clock_source_enable+0x8c>
   28af4:	009a      	lsls	r2, r3, #2
   28af6:	4b21      	ldr	r3, [pc, #132]	; (28b7c <system_clock_source_enable+0x9c>)
   28af8:	18d3      	adds	r3, r2, r3
   28afa:	681b      	ldr	r3, [r3, #0]
   28afc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   28afe:	4b20      	ldr	r3, [pc, #128]	; (28b80 <system_clock_source_enable+0xa0>)
   28b00:	4a1f      	ldr	r2, [pc, #124]	; (28b80 <system_clock_source_enable+0xa0>)
   28b02:	6a12      	ldr	r2, [r2, #32]
   28b04:	2102      	movs	r1, #2
   28b06:	430a      	orrs	r2, r1
   28b08:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   28b0a:	2300      	movs	r3, #0
   28b0c:	e031      	b.n	28b72 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   28b0e:	4b1c      	ldr	r3, [pc, #112]	; (28b80 <system_clock_source_enable+0xa0>)
   28b10:	4a1b      	ldr	r2, [pc, #108]	; (28b80 <system_clock_source_enable+0xa0>)
   28b12:	6992      	ldr	r2, [r2, #24]
   28b14:	2102      	movs	r1, #2
   28b16:	430a      	orrs	r2, r1
   28b18:	619a      	str	r2, [r3, #24]
		break;
   28b1a:	e029      	b.n	28b70 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   28b1c:	4a18      	ldr	r2, [pc, #96]	; (28b80 <system_clock_source_enable+0xa0>)
   28b1e:	4b18      	ldr	r3, [pc, #96]	; (28b80 <system_clock_source_enable+0xa0>)
   28b20:	8a1b      	ldrh	r3, [r3, #16]
   28b22:	b29b      	uxth	r3, r3
   28b24:	2102      	movs	r1, #2
   28b26:	430b      	orrs	r3, r1
   28b28:	b29b      	uxth	r3, r3
   28b2a:	8213      	strh	r3, [r2, #16]
		break;
   28b2c:	e020      	b.n	28b70 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   28b2e:	4a14      	ldr	r2, [pc, #80]	; (28b80 <system_clock_source_enable+0xa0>)
   28b30:	4b13      	ldr	r3, [pc, #76]	; (28b80 <system_clock_source_enable+0xa0>)
   28b32:	8a9b      	ldrh	r3, [r3, #20]
   28b34:	b29b      	uxth	r3, r3
   28b36:	2102      	movs	r1, #2
   28b38:	430b      	orrs	r3, r1
   28b3a:	b29b      	uxth	r3, r3
   28b3c:	8293      	strh	r3, [r2, #20]
		break;
   28b3e:	e017      	b.n	28b70 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   28b40:	4b10      	ldr	r3, [pc, #64]	; (28b84 <system_clock_source_enable+0xa4>)
   28b42:	681b      	ldr	r3, [r3, #0]
   28b44:	2202      	movs	r2, #2
   28b46:	431a      	orrs	r2, r3
   28b48:	4b0e      	ldr	r3, [pc, #56]	; (28b84 <system_clock_source_enable+0xa4>)
   28b4a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   28b4c:	4b0e      	ldr	r3, [pc, #56]	; (28b88 <system_clock_source_enable+0xa8>)
   28b4e:	4798      	blx	r3
		break;
   28b50:	e00e      	b.n	28b70 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   28b52:	4a0b      	ldr	r2, [pc, #44]	; (28b80 <system_clock_source_enable+0xa0>)
   28b54:	490a      	ldr	r1, [pc, #40]	; (28b80 <system_clock_source_enable+0xa0>)
   28b56:	2344      	movs	r3, #68	; 0x44
   28b58:	5ccb      	ldrb	r3, [r1, r3]
   28b5a:	b2db      	uxtb	r3, r3
   28b5c:	2102      	movs	r1, #2
   28b5e:	430b      	orrs	r3, r1
   28b60:	b2d9      	uxtb	r1, r3
   28b62:	2344      	movs	r3, #68	; 0x44
   28b64:	54d1      	strb	r1, [r2, r3]
		break;
   28b66:	e003      	b.n	28b70 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   28b68:	2300      	movs	r3, #0
   28b6a:	e002      	b.n	28b72 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   28b6c:	2317      	movs	r3, #23
   28b6e:	e000      	b.n	28b72 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   28b70:	2300      	movs	r3, #0
}
   28b72:	0018      	movs	r0, r3
   28b74:	46bd      	mov	sp, r7
   28b76:	b002      	add	sp, #8
   28b78:	bd80      	pop	{r7, pc}
   28b7a:	46c0      	nop			; (mov r8, r8)
   28b7c:	00038350 	.word	0x00038350
   28b80:	40000800 	.word	0x40000800
   28b84:	20003e34 	.word	0x20003e34
   28b88:	00028859 	.word	0x00028859

00028b8c <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   28b8c:	b580      	push	{r7, lr}
   28b8e:	b084      	sub	sp, #16
   28b90:	af00      	add	r7, sp, #0
   28b92:	0002      	movs	r2, r0
   28b94:	1dfb      	adds	r3, r7, #7
   28b96:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   28b98:	2300      	movs	r3, #0
   28b9a:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   28b9c:	1dfb      	adds	r3, r7, #7
   28b9e:	781b      	ldrb	r3, [r3, #0]
   28ba0:	2b08      	cmp	r3, #8
   28ba2:	d821      	bhi.n	28be8 <system_clock_source_is_ready+0x5c>
   28ba4:	009a      	lsls	r2, r3, #2
   28ba6:	4b18      	ldr	r3, [pc, #96]	; (28c08 <system_clock_source_is_ready+0x7c>)
   28ba8:	18d3      	adds	r3, r2, r3
   28baa:	681b      	ldr	r3, [r3, #0]
   28bac:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   28bae:	2308      	movs	r3, #8
   28bb0:	60fb      	str	r3, [r7, #12]
		break;
   28bb2:	e01b      	b.n	28bec <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   28bb4:	2304      	movs	r3, #4
   28bb6:	60fb      	str	r3, [r7, #12]
		break;
   28bb8:	e018      	b.n	28bec <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   28bba:	2301      	movs	r3, #1
   28bbc:	60fb      	str	r3, [r7, #12]
		break;
   28bbe:	e015      	b.n	28bec <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   28bc0:	2302      	movs	r3, #2
   28bc2:	60fb      	str	r3, [r7, #12]
		break;
   28bc4:	e012      	b.n	28bec <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   28bc6:	2310      	movs	r3, #16
   28bc8:	60fb      	str	r3, [r7, #12]
		}
		break;
   28bca:	e00f      	b.n	28bec <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   28bcc:	4a0f      	ldr	r2, [pc, #60]	; (28c0c <system_clock_source_is_ready+0x80>)
   28bce:	2350      	movs	r3, #80	; 0x50
   28bd0:	5cd3      	ldrb	r3, [r2, r3]
   28bd2:	b2db      	uxtb	r3, r3
   28bd4:	001a      	movs	r2, r3
   28bd6:	2303      	movs	r3, #3
   28bd8:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   28bda:	3b03      	subs	r3, #3
   28bdc:	425a      	negs	r2, r3
   28bde:	4153      	adcs	r3, r2
   28be0:	b2db      	uxtb	r3, r3
   28be2:	e00c      	b.n	28bfe <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   28be4:	2301      	movs	r3, #1
   28be6:	e00a      	b.n	28bfe <system_clock_source_is_ready+0x72>

	default:
		return false;
   28be8:	2300      	movs	r3, #0
   28bea:	e008      	b.n	28bfe <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   28bec:	4b07      	ldr	r3, [pc, #28]	; (28c0c <system_clock_source_is_ready+0x80>)
   28bee:	68db      	ldr	r3, [r3, #12]
   28bf0:	68fa      	ldr	r2, [r7, #12]
   28bf2:	401a      	ands	r2, r3
   28bf4:	68fb      	ldr	r3, [r7, #12]
   28bf6:	1ad3      	subs	r3, r2, r3
   28bf8:	425a      	negs	r2, r3
   28bfa:	4153      	adcs	r3, r2
   28bfc:	b2db      	uxtb	r3, r3
}
   28bfe:	0018      	movs	r0, r3
   28c00:	46bd      	mov	sp, r7
   28c02:	b004      	add	sp, #16
   28c04:	bd80      	pop	{r7, pc}
   28c06:	46c0      	nop			; (mov r8, r8)
   28c08:	00038374 	.word	0x00038374
   28c0c:	40000800 	.word	0x40000800

00028c10 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   28c10:	b580      	push	{r7, lr}
   28c12:	b082      	sub	sp, #8
   28c14:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   28c16:	003b      	movs	r3, r7
   28c18:	2203      	movs	r2, #3
   28c1a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   28c1c:	2300      	movs	r3, #0
   28c1e:	607b      	str	r3, [r7, #4]
   28c20:	e009      	b.n	28c36 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   28c22:	687b      	ldr	r3, [r7, #4]
   28c24:	b2db      	uxtb	r3, r3
   28c26:	003a      	movs	r2, r7
   28c28:	0011      	movs	r1, r2
   28c2a:	0018      	movs	r0, r3
   28c2c:	4b05      	ldr	r3, [pc, #20]	; (28c44 <_switch_peripheral_gclk+0x34>)
   28c2e:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   28c30:	687b      	ldr	r3, [r7, #4]
   28c32:	3301      	adds	r3, #1
   28c34:	607b      	str	r3, [r7, #4]
   28c36:	687b      	ldr	r3, [r7, #4]
   28c38:	2b24      	cmp	r3, #36	; 0x24
   28c3a:	d9f2      	bls.n	28c22 <_switch_peripheral_gclk+0x12>
	}
}
   28c3c:	46c0      	nop			; (mov r8, r8)
   28c3e:	46bd      	mov	sp, r7
   28c40:	b002      	add	sp, #8
   28c42:	bd80      	pop	{r7, pc}
   28c44:	00029215 	.word	0x00029215

00028c48 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   28c48:	b580      	push	{r7, lr}
   28c4a:	b0a6      	sub	sp, #152	; 0x98
   28c4c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   28c4e:	4b92      	ldr	r3, [pc, #584]	; (28e98 <system_clock_init+0x250>)
   28c50:	22c2      	movs	r2, #194	; 0xc2
   28c52:	00d2      	lsls	r2, r2, #3
   28c54:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   28c56:	2003      	movs	r0, #3
   28c58:	4b90      	ldr	r3, [pc, #576]	; (28e9c <system_clock_init+0x254>)
   28c5a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   28c5c:	4b90      	ldr	r3, [pc, #576]	; (28ea0 <system_clock_init+0x258>)
   28c5e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   28c60:	2394      	movs	r3, #148	; 0x94
   28c62:	18fb      	adds	r3, r7, r3
   28c64:	0018      	movs	r0, r3
   28c66:	4b8f      	ldr	r3, [pc, #572]	; (28ea4 <system_clock_init+0x25c>)
   28c68:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   28c6a:	2394      	movs	r3, #148	; 0x94
   28c6c:	18fb      	adds	r3, r7, r3
   28c6e:	2200      	movs	r2, #0
   28c70:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   28c72:	2394      	movs	r3, #148	; 0x94
   28c74:	18fb      	adds	r3, r7, r3
   28c76:	2201      	movs	r2, #1
   28c78:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   28c7a:	2394      	movs	r3, #148	; 0x94
   28c7c:	18fb      	adds	r3, r7, r3
   28c7e:	2200      	movs	r2, #0
   28c80:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   28c82:	2394      	movs	r3, #148	; 0x94
   28c84:	18fb      	adds	r3, r7, r3
   28c86:	0018      	movs	r0, r3
   28c88:	4b87      	ldr	r3, [pc, #540]	; (28ea8 <system_clock_init+0x260>)
   28c8a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   28c8c:	2006      	movs	r0, #6
   28c8e:	4b87      	ldr	r3, [pc, #540]	; (28eac <system_clock_init+0x264>)
   28c90:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   28c92:	4b87      	ldr	r3, [pc, #540]	; (28eb0 <system_clock_init+0x268>)
   28c94:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   28c96:	2360      	movs	r3, #96	; 0x60
   28c98:	18fb      	adds	r3, r7, r3
   28c9a:	0018      	movs	r0, r3
   28c9c:	4b85      	ldr	r3, [pc, #532]	; (28eb4 <system_clock_init+0x26c>)
   28c9e:	4798      	blx	r3
   28ca0:	2360      	movs	r3, #96	; 0x60
   28ca2:	18fb      	adds	r3, r7, r3
   28ca4:	2206      	movs	r2, #6
   28ca6:	701a      	strb	r2, [r3, #0]
   28ca8:	2360      	movs	r3, #96	; 0x60
   28caa:	18fb      	adds	r3, r7, r3
   28cac:	2208      	movs	r2, #8
   28cae:	605a      	str	r2, [r3, #4]
   28cb0:	2360      	movs	r3, #96	; 0x60
   28cb2:	18fb      	adds	r3, r7, r3
   28cb4:	2200      	movs	r2, #0
   28cb6:	721a      	strb	r2, [r3, #8]
   28cb8:	2360      	movs	r3, #96	; 0x60
   28cba:	18fb      	adds	r3, r7, r3
   28cbc:	2200      	movs	r2, #0
   28cbe:	725a      	strb	r2, [r3, #9]
   28cc0:	2360      	movs	r3, #96	; 0x60
   28cc2:	18fb      	adds	r3, r7, r3
   28cc4:	0019      	movs	r1, r3
   28cc6:	2001      	movs	r0, #1
   28cc8:	4b7b      	ldr	r3, [pc, #492]	; (28eb8 <system_clock_init+0x270>)
   28cca:	4798      	blx	r3
   28ccc:	2001      	movs	r0, #1
   28cce:	4b7b      	ldr	r3, [pc, #492]	; (28ebc <system_clock_init+0x274>)
   28cd0:	4798      	blx	r3
   28cd2:	2354      	movs	r3, #84	; 0x54
   28cd4:	18fb      	adds	r3, r7, r3
   28cd6:	0018      	movs	r0, r3
   28cd8:	4b76      	ldr	r3, [pc, #472]	; (28eb4 <system_clock_init+0x26c>)
   28cda:	4798      	blx	r3
   28cdc:	2354      	movs	r3, #84	; 0x54
   28cde:	18fb      	adds	r3, r7, r3
   28ce0:	2203      	movs	r2, #3
   28ce2:	701a      	strb	r2, [r3, #0]
   28ce4:	2354      	movs	r3, #84	; 0x54
   28ce6:	18fb      	adds	r3, r7, r3
   28ce8:	2201      	movs	r2, #1
   28cea:	605a      	str	r2, [r3, #4]
   28cec:	2354      	movs	r3, #84	; 0x54
   28cee:	18fb      	adds	r3, r7, r3
   28cf0:	2201      	movs	r2, #1
   28cf2:	721a      	strb	r2, [r3, #8]
   28cf4:	2354      	movs	r3, #84	; 0x54
   28cf6:	18fb      	adds	r3, r7, r3
   28cf8:	2200      	movs	r2, #0
   28cfa:	725a      	strb	r2, [r3, #9]
   28cfc:	2354      	movs	r3, #84	; 0x54
   28cfe:	18fb      	adds	r3, r7, r3
   28d00:	0019      	movs	r1, r3
   28d02:	2002      	movs	r0, #2
   28d04:	4b6c      	ldr	r3, [pc, #432]	; (28eb8 <system_clock_init+0x270>)
   28d06:	4798      	blx	r3
   28d08:	2002      	movs	r0, #2
   28d0a:	4b6c      	ldr	r3, [pc, #432]	; (28ebc <system_clock_init+0x274>)
   28d0c:	4798      	blx	r3
   28d0e:	233c      	movs	r3, #60	; 0x3c
   28d10:	18fb      	adds	r3, r7, r3
   28d12:	0018      	movs	r0, r3
   28d14:	4b67      	ldr	r3, [pc, #412]	; (28eb4 <system_clock_init+0x26c>)
   28d16:	4798      	blx	r3
   28d18:	233c      	movs	r3, #60	; 0x3c
   28d1a:	18fb      	adds	r3, r7, r3
   28d1c:	2203      	movs	r2, #3
   28d1e:	701a      	strb	r2, [r3, #0]
   28d20:	233c      	movs	r3, #60	; 0x3c
   28d22:	18fb      	adds	r3, r7, r3
   28d24:	2220      	movs	r2, #32
   28d26:	605a      	str	r2, [r3, #4]
   28d28:	233c      	movs	r3, #60	; 0x3c
   28d2a:	18fb      	adds	r3, r7, r3
   28d2c:	2200      	movs	r2, #0
   28d2e:	721a      	strb	r2, [r3, #8]
   28d30:	233c      	movs	r3, #60	; 0x3c
   28d32:	18fb      	adds	r3, r7, r3
   28d34:	2200      	movs	r2, #0
   28d36:	725a      	strb	r2, [r3, #9]
   28d38:	233c      	movs	r3, #60	; 0x3c
   28d3a:	18fb      	adds	r3, r7, r3
   28d3c:	0019      	movs	r1, r3
   28d3e:	2004      	movs	r0, #4
   28d40:	4b5d      	ldr	r3, [pc, #372]	; (28eb8 <system_clock_init+0x270>)
   28d42:	4798      	blx	r3
   28d44:	2004      	movs	r0, #4
   28d46:	4b5d      	ldr	r3, [pc, #372]	; (28ebc <system_clock_init+0x274>)
   28d48:	4798      	blx	r3
   28d4a:	2330      	movs	r3, #48	; 0x30
   28d4c:	18fb      	adds	r3, r7, r3
   28d4e:	0018      	movs	r0, r3
   28d50:	4b58      	ldr	r3, [pc, #352]	; (28eb4 <system_clock_init+0x26c>)
   28d52:	4798      	blx	r3
   28d54:	2330      	movs	r3, #48	; 0x30
   28d56:	18fb      	adds	r3, r7, r3
   28d58:	2206      	movs	r2, #6
   28d5a:	701a      	strb	r2, [r3, #0]
   28d5c:	2330      	movs	r3, #48	; 0x30
   28d5e:	18fb      	adds	r3, r7, r3
   28d60:	2201      	movs	r2, #1
   28d62:	605a      	str	r2, [r3, #4]
   28d64:	2330      	movs	r3, #48	; 0x30
   28d66:	18fb      	adds	r3, r7, r3
   28d68:	2200      	movs	r2, #0
   28d6a:	721a      	strb	r2, [r3, #8]
   28d6c:	2330      	movs	r3, #48	; 0x30
   28d6e:	18fb      	adds	r3, r7, r3
   28d70:	2200      	movs	r2, #0
   28d72:	725a      	strb	r2, [r3, #9]
   28d74:	2330      	movs	r3, #48	; 0x30
   28d76:	18fb      	adds	r3, r7, r3
   28d78:	0019      	movs	r1, r3
   28d7a:	2005      	movs	r0, #5
   28d7c:	4b4e      	ldr	r3, [pc, #312]	; (28eb8 <system_clock_init+0x270>)
   28d7e:	4798      	blx	r3
   28d80:	2005      	movs	r0, #5
   28d82:	4b4e      	ldr	r3, [pc, #312]	; (28ebc <system_clock_init+0x274>)
   28d84:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   28d86:	2390      	movs	r3, #144	; 0x90
   28d88:	18fb      	adds	r3, r7, r3
   28d8a:	0018      	movs	r0, r3
   28d8c:	4b4c      	ldr	r3, [pc, #304]	; (28ec0 <system_clock_init+0x278>)
   28d8e:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   28d90:	2390      	movs	r3, #144	; 0x90
   28d92:	18fb      	adds	r3, r7, r3
   28d94:	2201      	movs	r2, #1
   28d96:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   28d98:	2390      	movs	r3, #144	; 0x90
   28d9a:	18fb      	adds	r3, r7, r3
   28d9c:	0019      	movs	r1, r3
   28d9e:	2001      	movs	r0, #1
   28da0:	4b48      	ldr	r3, [pc, #288]	; (28ec4 <system_clock_init+0x27c>)
   28da2:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   28da4:	2001      	movs	r0, #1
   28da6:	4b48      	ldr	r3, [pc, #288]	; (28ec8 <system_clock_init+0x280>)
   28da8:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   28daa:	2378      	movs	r3, #120	; 0x78
   28dac:	18fb      	adds	r3, r7, r3
   28dae:	0018      	movs	r0, r3
   28db0:	4b46      	ldr	r3, [pc, #280]	; (28ecc <system_clock_init+0x284>)
   28db2:	4798      	blx	r3

	dpll_config.on_demand        = false;
   28db4:	2378      	movs	r3, #120	; 0x78
   28db6:	18fb      	adds	r3, r7, r3
   28db8:	2200      	movs	r2, #0
   28dba:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   28dbc:	2378      	movs	r3, #120	; 0x78
   28dbe:	18fb      	adds	r3, r7, r3
   28dc0:	2200      	movs	r2, #0
   28dc2:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   28dc4:	2378      	movs	r3, #120	; 0x78
   28dc6:	18fb      	adds	r3, r7, r3
   28dc8:	2200      	movs	r2, #0
   28dca:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   28dcc:	2378      	movs	r3, #120	; 0x78
   28dce:	18fb      	adds	r3, r7, r3
   28dd0:	2200      	movs	r2, #0
   28dd2:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   28dd4:	2378      	movs	r3, #120	; 0x78
   28dd6:	18fb      	adds	r3, r7, r3
   28dd8:	2200      	movs	r2, #0
   28dda:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   28ddc:	2378      	movs	r3, #120	; 0x78
   28dde:	18fb      	adds	r3, r7, r3
   28de0:	2200      	movs	r2, #0
   28de2:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   28de4:	2378      	movs	r3, #120	; 0x78
   28de6:	18fb      	adds	r3, r7, r3
   28de8:	2200      	movs	r2, #0
   28dea:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   28dec:	2378      	movs	r3, #120	; 0x78
   28dee:	18fb      	adds	r3, r7, r3
   28df0:	2202      	movs	r2, #2
   28df2:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   28df4:	2378      	movs	r3, #120	; 0x78
   28df6:	18fb      	adds	r3, r7, r3
   28df8:	4a35      	ldr	r2, [pc, #212]	; (28ed0 <system_clock_init+0x288>)
   28dfa:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   28dfc:	2378      	movs	r3, #120	; 0x78
   28dfe:	18fb      	adds	r3, r7, r3
   28e00:	2201      	movs	r2, #1
   28e02:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   28e04:	2378      	movs	r3, #120	; 0x78
   28e06:	18fb      	adds	r3, r7, r3
   28e08:	4a32      	ldr	r2, [pc, #200]	; (28ed4 <system_clock_init+0x28c>)
   28e0a:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   28e0c:	2378      	movs	r3, #120	; 0x78
   28e0e:	18fb      	adds	r3, r7, r3
   28e10:	0018      	movs	r0, r3
   28e12:	4b31      	ldr	r3, [pc, #196]	; (28ed8 <system_clock_init+0x290>)
   28e14:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   28e16:	2008      	movs	r0, #8
   28e18:	4b24      	ldr	r3, [pc, #144]	; (28eac <system_clock_init+0x264>)
   28e1a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   28e1c:	46c0      	nop			; (mov r8, r8)
   28e1e:	2008      	movs	r0, #8
   28e20:	4b2e      	ldr	r3, [pc, #184]	; (28edc <system_clock_init+0x294>)
   28e22:	4798      	blx	r3
   28e24:	0003      	movs	r3, r0
   28e26:	001a      	movs	r2, r3
   28e28:	2301      	movs	r3, #1
   28e2a:	4053      	eors	r3, r2
   28e2c:	b2db      	uxtb	r3, r3
   28e2e:	2b00      	cmp	r3, #0
   28e30:	d1f5      	bne.n	28e1e <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   28e32:	4919      	ldr	r1, [pc, #100]	; (28e98 <system_clock_init+0x250>)
   28e34:	2244      	movs	r2, #68	; 0x44
   28e36:	5c8b      	ldrb	r3, [r1, r2]
   28e38:	2080      	movs	r0, #128	; 0x80
   28e3a:	4240      	negs	r0, r0
   28e3c:	4303      	orrs	r3, r0
   28e3e:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   28e40:	2000      	movs	r0, #0
   28e42:	4b27      	ldr	r3, [pc, #156]	; (28ee0 <system_clock_init+0x298>)
   28e44:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   28e46:	2100      	movs	r1, #0
   28e48:	2000      	movs	r0, #0
   28e4a:	4b26      	ldr	r3, [pc, #152]	; (28ee4 <system_clock_init+0x29c>)
   28e4c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   28e4e:	2100      	movs	r1, #0
   28e50:	2001      	movs	r0, #1
   28e52:	4b24      	ldr	r3, [pc, #144]	; (28ee4 <system_clock_init+0x29c>)
   28e54:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   28e56:	2100      	movs	r1, #0
   28e58:	2002      	movs	r0, #2
   28e5a:	4b22      	ldr	r3, [pc, #136]	; (28ee4 <system_clock_init+0x29c>)
   28e5c:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   28e5e:	003b      	movs	r3, r7
   28e60:	0018      	movs	r0, r3
   28e62:	4b14      	ldr	r3, [pc, #80]	; (28eb4 <system_clock_init+0x26c>)
   28e64:	4798      	blx	r3
   28e66:	003b      	movs	r3, r7
   28e68:	2208      	movs	r2, #8
   28e6a:	701a      	strb	r2, [r3, #0]
   28e6c:	003b      	movs	r3, r7
   28e6e:	2201      	movs	r2, #1
   28e70:	605a      	str	r2, [r3, #4]
   28e72:	003b      	movs	r3, r7
   28e74:	2200      	movs	r2, #0
   28e76:	721a      	strb	r2, [r3, #8]
   28e78:	003b      	movs	r3, r7
   28e7a:	2201      	movs	r2, #1
   28e7c:	725a      	strb	r2, [r3, #9]
   28e7e:	003b      	movs	r3, r7
   28e80:	0019      	movs	r1, r3
   28e82:	2000      	movs	r0, #0
   28e84:	4b0c      	ldr	r3, [pc, #48]	; (28eb8 <system_clock_init+0x270>)
   28e86:	4798      	blx	r3
   28e88:	2000      	movs	r0, #0
   28e8a:	4b0c      	ldr	r3, [pc, #48]	; (28ebc <system_clock_init+0x274>)
   28e8c:	4798      	blx	r3
#endif
}
   28e8e:	46c0      	nop			; (mov r8, r8)
   28e90:	46bd      	mov	sp, r7
   28e92:	b026      	add	sp, #152	; 0x98
   28e94:	bd80      	pop	{r7, pc}
   28e96:	46c0      	nop			; (mov r8, r8)
   28e98:	40000800 	.word	0x40000800
   28e9c:	00028809 	.word	0x00028809
   28ea0:	00028c11 	.word	0x00028c11
   28ea4:	00028719 	.word	0x00028719
   28ea8:	0002895d 	.word	0x0002895d
   28eac:	00028ae1 	.word	0x00028ae1
   28eb0:	00028f8d 	.word	0x00028f8d
   28eb4:	000286d5 	.word	0x000286d5
   28eb8:	00028fbd 	.word	0x00028fbd
   28ebc:	000290e1 	.word	0x000290e1
   28ec0:	00028703 	.word	0x00028703
   28ec4:	00029215 	.word	0x00029215
   28ec8:	00029259 	.word	0x00029259
   28ecc:	000287b1 	.word	0x000287b1
   28ed0:	000f4240 	.word	0x000f4240
   28ed4:	02dc6c00 	.word	0x02dc6c00
   28ed8:	000289d5 	.word	0x000289d5
   28edc:	00028b8d 	.word	0x00028b8d
   28ee0:	0002873d 	.word	0x0002873d
   28ee4:	0002875d 	.word	0x0002875d

00028ee8 <system_apb_clock_set_mask>:
{
   28ee8:	b580      	push	{r7, lr}
   28eea:	b082      	sub	sp, #8
   28eec:	af00      	add	r7, sp, #0
   28eee:	0002      	movs	r2, r0
   28ef0:	6039      	str	r1, [r7, #0]
   28ef2:	1dfb      	adds	r3, r7, #7
   28ef4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28ef6:	1dfb      	adds	r3, r7, #7
   28ef8:	781b      	ldrb	r3, [r3, #0]
   28efa:	2b01      	cmp	r3, #1
   28efc:	d00a      	beq.n	28f14 <system_apb_clock_set_mask+0x2c>
   28efe:	2b02      	cmp	r3, #2
   28f00:	d00f      	beq.n	28f22 <system_apb_clock_set_mask+0x3a>
   28f02:	2b00      	cmp	r3, #0
   28f04:	d114      	bne.n	28f30 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28f06:	4b0e      	ldr	r3, [pc, #56]	; (28f40 <system_apb_clock_set_mask+0x58>)
   28f08:	4a0d      	ldr	r2, [pc, #52]	; (28f40 <system_apb_clock_set_mask+0x58>)
   28f0a:	6991      	ldr	r1, [r2, #24]
   28f0c:	683a      	ldr	r2, [r7, #0]
   28f0e:	430a      	orrs	r2, r1
   28f10:	619a      	str	r2, [r3, #24]
			break;
   28f12:	e00f      	b.n	28f34 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28f14:	4b0a      	ldr	r3, [pc, #40]	; (28f40 <system_apb_clock_set_mask+0x58>)
   28f16:	4a0a      	ldr	r2, [pc, #40]	; (28f40 <system_apb_clock_set_mask+0x58>)
   28f18:	69d1      	ldr	r1, [r2, #28]
   28f1a:	683a      	ldr	r2, [r7, #0]
   28f1c:	430a      	orrs	r2, r1
   28f1e:	61da      	str	r2, [r3, #28]
			break;
   28f20:	e008      	b.n	28f34 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28f22:	4b07      	ldr	r3, [pc, #28]	; (28f40 <system_apb_clock_set_mask+0x58>)
   28f24:	4a06      	ldr	r2, [pc, #24]	; (28f40 <system_apb_clock_set_mask+0x58>)
   28f26:	6a11      	ldr	r1, [r2, #32]
   28f28:	683a      	ldr	r2, [r7, #0]
   28f2a:	430a      	orrs	r2, r1
   28f2c:	621a      	str	r2, [r3, #32]
			break;
   28f2e:	e001      	b.n	28f34 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28f30:	2317      	movs	r3, #23
   28f32:	e000      	b.n	28f36 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28f34:	2300      	movs	r3, #0
}
   28f36:	0018      	movs	r0, r3
   28f38:	46bd      	mov	sp, r7
   28f3a:	b002      	add	sp, #8
   28f3c:	bd80      	pop	{r7, pc}
   28f3e:	46c0      	nop			; (mov r8, r8)
   28f40:	40000400 	.word	0x40000400

00028f44 <system_interrupt_enter_critical_section>:
{
   28f44:	b580      	push	{r7, lr}
   28f46:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   28f48:	4b02      	ldr	r3, [pc, #8]	; (28f54 <system_interrupt_enter_critical_section+0x10>)
   28f4a:	4798      	blx	r3
}
   28f4c:	46c0      	nop			; (mov r8, r8)
   28f4e:	46bd      	mov	sp, r7
   28f50:	bd80      	pop	{r7, pc}
   28f52:	46c0      	nop			; (mov r8, r8)
   28f54:	00025581 	.word	0x00025581

00028f58 <system_interrupt_leave_critical_section>:
{
   28f58:	b580      	push	{r7, lr}
   28f5a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   28f5c:	4b02      	ldr	r3, [pc, #8]	; (28f68 <system_interrupt_leave_critical_section+0x10>)
   28f5e:	4798      	blx	r3
}
   28f60:	46c0      	nop			; (mov r8, r8)
   28f62:	46bd      	mov	sp, r7
   28f64:	bd80      	pop	{r7, pc}
   28f66:	46c0      	nop			; (mov r8, r8)
   28f68:	000255d5 	.word	0x000255d5

00028f6c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   28f6c:	b580      	push	{r7, lr}
   28f6e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   28f70:	4b05      	ldr	r3, [pc, #20]	; (28f88 <system_gclk_is_syncing+0x1c>)
   28f72:	785b      	ldrb	r3, [r3, #1]
   28f74:	b2db      	uxtb	r3, r3
   28f76:	b25b      	sxtb	r3, r3
   28f78:	2b00      	cmp	r3, #0
   28f7a:	da01      	bge.n	28f80 <system_gclk_is_syncing+0x14>
		return true;
   28f7c:	2301      	movs	r3, #1
   28f7e:	e000      	b.n	28f82 <system_gclk_is_syncing+0x16>
	}

	return false;
   28f80:	2300      	movs	r3, #0
}
   28f82:	0018      	movs	r0, r3
   28f84:	46bd      	mov	sp, r7
   28f86:	bd80      	pop	{r7, pc}
   28f88:	40000c00 	.word	0x40000c00

00028f8c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   28f8c:	b580      	push	{r7, lr}
   28f8e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   28f90:	2108      	movs	r1, #8
   28f92:	2000      	movs	r0, #0
   28f94:	4b07      	ldr	r3, [pc, #28]	; (28fb4 <system_gclk_init+0x28>)
   28f96:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   28f98:	4b07      	ldr	r3, [pc, #28]	; (28fb8 <system_gclk_init+0x2c>)
   28f9a:	2201      	movs	r2, #1
   28f9c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   28f9e:	46c0      	nop			; (mov r8, r8)
   28fa0:	4b05      	ldr	r3, [pc, #20]	; (28fb8 <system_gclk_init+0x2c>)
   28fa2:	781b      	ldrb	r3, [r3, #0]
   28fa4:	b2db      	uxtb	r3, r3
   28fa6:	001a      	movs	r2, r3
   28fa8:	2301      	movs	r3, #1
   28faa:	4013      	ands	r3, r2
   28fac:	d1f8      	bne.n	28fa0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   28fae:	46c0      	nop			; (mov r8, r8)
   28fb0:	46bd      	mov	sp, r7
   28fb2:	bd80      	pop	{r7, pc}
   28fb4:	00028ee9 	.word	0x00028ee9
   28fb8:	40000c00 	.word	0x40000c00

00028fbc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   28fbc:	b580      	push	{r7, lr}
   28fbe:	b086      	sub	sp, #24
   28fc0:	af00      	add	r7, sp, #0
   28fc2:	0002      	movs	r2, r0
   28fc4:	6039      	str	r1, [r7, #0]
   28fc6:	1dfb      	adds	r3, r7, #7
   28fc8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   28fca:	1dfb      	adds	r3, r7, #7
   28fcc:	781b      	ldrb	r3, [r3, #0]
   28fce:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   28fd0:	1dfb      	adds	r3, r7, #7
   28fd2:	781b      	ldrb	r3, [r3, #0]
   28fd4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   28fd6:	683b      	ldr	r3, [r7, #0]
   28fd8:	781b      	ldrb	r3, [r3, #0]
   28fda:	021b      	lsls	r3, r3, #8
   28fdc:	001a      	movs	r2, r3
   28fde:	697b      	ldr	r3, [r7, #20]
   28fe0:	4313      	orrs	r3, r2
   28fe2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   28fe4:	683b      	ldr	r3, [r7, #0]
   28fe6:	785b      	ldrb	r3, [r3, #1]
   28fe8:	2b00      	cmp	r3, #0
   28fea:	d004      	beq.n	28ff6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   28fec:	697b      	ldr	r3, [r7, #20]
   28fee:	2280      	movs	r2, #128	; 0x80
   28ff0:	02d2      	lsls	r2, r2, #11
   28ff2:	4313      	orrs	r3, r2
   28ff4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   28ff6:	683b      	ldr	r3, [r7, #0]
   28ff8:	7a5b      	ldrb	r3, [r3, #9]
   28ffa:	2b00      	cmp	r3, #0
   28ffc:	d004      	beq.n	29008 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   28ffe:	697b      	ldr	r3, [r7, #20]
   29000:	2280      	movs	r2, #128	; 0x80
   29002:	0312      	lsls	r2, r2, #12
   29004:	4313      	orrs	r3, r2
   29006:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   29008:	683b      	ldr	r3, [r7, #0]
   2900a:	685b      	ldr	r3, [r3, #4]
   2900c:	2b01      	cmp	r3, #1
   2900e:	d92c      	bls.n	2906a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   29010:	683b      	ldr	r3, [r7, #0]
   29012:	685a      	ldr	r2, [r3, #4]
   29014:	683b      	ldr	r3, [r7, #0]
   29016:	685b      	ldr	r3, [r3, #4]
   29018:	3b01      	subs	r3, #1
   2901a:	4013      	ands	r3, r2
   2901c:	d11a      	bne.n	29054 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2901e:	2300      	movs	r3, #0
   29020:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   29022:	2302      	movs	r3, #2
   29024:	60bb      	str	r3, [r7, #8]
   29026:	e005      	b.n	29034 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   29028:	68fb      	ldr	r3, [r7, #12]
   2902a:	3301      	adds	r3, #1
   2902c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2902e:	68bb      	ldr	r3, [r7, #8]
   29030:	005b      	lsls	r3, r3, #1
   29032:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   29034:	683b      	ldr	r3, [r7, #0]
   29036:	685a      	ldr	r2, [r3, #4]
   29038:	68bb      	ldr	r3, [r7, #8]
   2903a:	429a      	cmp	r2, r3
   2903c:	d8f4      	bhi.n	29028 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2903e:	68fb      	ldr	r3, [r7, #12]
   29040:	021b      	lsls	r3, r3, #8
   29042:	693a      	ldr	r2, [r7, #16]
   29044:	4313      	orrs	r3, r2
   29046:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   29048:	697b      	ldr	r3, [r7, #20]
   2904a:	2280      	movs	r2, #128	; 0x80
   2904c:	0352      	lsls	r2, r2, #13
   2904e:	4313      	orrs	r3, r2
   29050:	617b      	str	r3, [r7, #20]
   29052:	e00a      	b.n	2906a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   29054:	683b      	ldr	r3, [r7, #0]
   29056:	685b      	ldr	r3, [r3, #4]
   29058:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2905a:	693a      	ldr	r2, [r7, #16]
   2905c:	4313      	orrs	r3, r2
   2905e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   29060:	697b      	ldr	r3, [r7, #20]
   29062:	2280      	movs	r2, #128	; 0x80
   29064:	0292      	lsls	r2, r2, #10
   29066:	4313      	orrs	r3, r2
   29068:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2906a:	683b      	ldr	r3, [r7, #0]
   2906c:	7a1b      	ldrb	r3, [r3, #8]
   2906e:	2b00      	cmp	r3, #0
   29070:	d004      	beq.n	2907c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   29072:	697b      	ldr	r3, [r7, #20]
   29074:	2280      	movs	r2, #128	; 0x80
   29076:	0392      	lsls	r2, r2, #14
   29078:	4313      	orrs	r3, r2
   2907a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2907c:	46c0      	nop			; (mov r8, r8)
   2907e:	4b13      	ldr	r3, [pc, #76]	; (290cc <system_gclk_gen_set_config+0x110>)
   29080:	4798      	blx	r3
   29082:	1e03      	subs	r3, r0, #0
   29084:	d1fb      	bne.n	2907e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   29086:	4b12      	ldr	r3, [pc, #72]	; (290d0 <system_gclk_gen_set_config+0x114>)
   29088:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2908a:	4a12      	ldr	r2, [pc, #72]	; (290d4 <system_gclk_gen_set_config+0x118>)
   2908c:	1dfb      	adds	r3, r7, #7
   2908e:	781b      	ldrb	r3, [r3, #0]
   29090:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   29092:	46c0      	nop			; (mov r8, r8)
   29094:	4b0d      	ldr	r3, [pc, #52]	; (290cc <system_gclk_gen_set_config+0x110>)
   29096:	4798      	blx	r3
   29098:	1e03      	subs	r3, r0, #0
   2909a:	d1fb      	bne.n	29094 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2909c:	4b0e      	ldr	r3, [pc, #56]	; (290d8 <system_gclk_gen_set_config+0x11c>)
   2909e:	693a      	ldr	r2, [r7, #16]
   290a0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   290a2:	46c0      	nop			; (mov r8, r8)
   290a4:	4b09      	ldr	r3, [pc, #36]	; (290cc <system_gclk_gen_set_config+0x110>)
   290a6:	4798      	blx	r3
   290a8:	1e03      	subs	r3, r0, #0
   290aa:	d1fb      	bne.n	290a4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   290ac:	4b0a      	ldr	r3, [pc, #40]	; (290d8 <system_gclk_gen_set_config+0x11c>)
   290ae:	4a0a      	ldr	r2, [pc, #40]	; (290d8 <system_gclk_gen_set_config+0x11c>)
   290b0:	6851      	ldr	r1, [r2, #4]
   290b2:	2280      	movs	r2, #128	; 0x80
   290b4:	0252      	lsls	r2, r2, #9
   290b6:	4011      	ands	r1, r2
   290b8:	697a      	ldr	r2, [r7, #20]
   290ba:	430a      	orrs	r2, r1
   290bc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   290be:	4b07      	ldr	r3, [pc, #28]	; (290dc <system_gclk_gen_set_config+0x120>)
   290c0:	4798      	blx	r3
}
   290c2:	46c0      	nop			; (mov r8, r8)
   290c4:	46bd      	mov	sp, r7
   290c6:	b006      	add	sp, #24
   290c8:	bd80      	pop	{r7, pc}
   290ca:	46c0      	nop			; (mov r8, r8)
   290cc:	00028f6d 	.word	0x00028f6d
   290d0:	00028f45 	.word	0x00028f45
   290d4:	40000c08 	.word	0x40000c08
   290d8:	40000c00 	.word	0x40000c00
   290dc:	00028f59 	.word	0x00028f59

000290e0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   290e0:	b580      	push	{r7, lr}
   290e2:	b082      	sub	sp, #8
   290e4:	af00      	add	r7, sp, #0
   290e6:	0002      	movs	r2, r0
   290e8:	1dfb      	adds	r3, r7, #7
   290ea:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   290ec:	46c0      	nop			; (mov r8, r8)
   290ee:	4b0e      	ldr	r3, [pc, #56]	; (29128 <system_gclk_gen_enable+0x48>)
   290f0:	4798      	blx	r3
   290f2:	1e03      	subs	r3, r0, #0
   290f4:	d1fb      	bne.n	290ee <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   290f6:	4b0d      	ldr	r3, [pc, #52]	; (2912c <system_gclk_gen_enable+0x4c>)
   290f8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   290fa:	4a0d      	ldr	r2, [pc, #52]	; (29130 <system_gclk_gen_enable+0x50>)
   290fc:	1dfb      	adds	r3, r7, #7
   290fe:	781b      	ldrb	r3, [r3, #0]
   29100:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29102:	46c0      	nop			; (mov r8, r8)
   29104:	4b08      	ldr	r3, [pc, #32]	; (29128 <system_gclk_gen_enable+0x48>)
   29106:	4798      	blx	r3
   29108:	1e03      	subs	r3, r0, #0
   2910a:	d1fb      	bne.n	29104 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2910c:	4b09      	ldr	r3, [pc, #36]	; (29134 <system_gclk_gen_enable+0x54>)
   2910e:	4a09      	ldr	r2, [pc, #36]	; (29134 <system_gclk_gen_enable+0x54>)
   29110:	6852      	ldr	r2, [r2, #4]
   29112:	2180      	movs	r1, #128	; 0x80
   29114:	0249      	lsls	r1, r1, #9
   29116:	430a      	orrs	r2, r1
   29118:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2911a:	4b07      	ldr	r3, [pc, #28]	; (29138 <system_gclk_gen_enable+0x58>)
   2911c:	4798      	blx	r3
}
   2911e:	46c0      	nop			; (mov r8, r8)
   29120:	46bd      	mov	sp, r7
   29122:	b002      	add	sp, #8
   29124:	bd80      	pop	{r7, pc}
   29126:	46c0      	nop			; (mov r8, r8)
   29128:	00028f6d 	.word	0x00028f6d
   2912c:	00028f45 	.word	0x00028f45
   29130:	40000c04 	.word	0x40000c04
   29134:	40000c00 	.word	0x40000c00
   29138:	00028f59 	.word	0x00028f59

0002913c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2913c:	b580      	push	{r7, lr}
   2913e:	b086      	sub	sp, #24
   29140:	af00      	add	r7, sp, #0
   29142:	0002      	movs	r2, r0
   29144:	1dfb      	adds	r3, r7, #7
   29146:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   29148:	46c0      	nop			; (mov r8, r8)
   2914a:	4b2a      	ldr	r3, [pc, #168]	; (291f4 <system_gclk_gen_get_hz+0xb8>)
   2914c:	4798      	blx	r3
   2914e:	1e03      	subs	r3, r0, #0
   29150:	d1fb      	bne.n	2914a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   29152:	4b29      	ldr	r3, [pc, #164]	; (291f8 <system_gclk_gen_get_hz+0xbc>)
   29154:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   29156:	4a29      	ldr	r2, [pc, #164]	; (291fc <system_gclk_gen_get_hz+0xc0>)
   29158:	1dfb      	adds	r3, r7, #7
   2915a:	781b      	ldrb	r3, [r3, #0]
   2915c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2915e:	46c0      	nop			; (mov r8, r8)
   29160:	4b24      	ldr	r3, [pc, #144]	; (291f4 <system_gclk_gen_get_hz+0xb8>)
   29162:	4798      	blx	r3
   29164:	1e03      	subs	r3, r0, #0
   29166:	d1fb      	bne.n	29160 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   29168:	4b25      	ldr	r3, [pc, #148]	; (29200 <system_gclk_gen_get_hz+0xc4>)
   2916a:	685b      	ldr	r3, [r3, #4]
   2916c:	04db      	lsls	r3, r3, #19
   2916e:	0edb      	lsrs	r3, r3, #27
   29170:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   29172:	0018      	movs	r0, r3
   29174:	4b23      	ldr	r3, [pc, #140]	; (29204 <system_gclk_gen_get_hz+0xc8>)
   29176:	4798      	blx	r3
   29178:	0003      	movs	r3, r0
   2917a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2917c:	4a1f      	ldr	r2, [pc, #124]	; (291fc <system_gclk_gen_get_hz+0xc0>)
   2917e:	1dfb      	adds	r3, r7, #7
   29180:	781b      	ldrb	r3, [r3, #0]
   29182:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   29184:	4b1e      	ldr	r3, [pc, #120]	; (29200 <system_gclk_gen_get_hz+0xc4>)
   29186:	685b      	ldr	r3, [r3, #4]
   29188:	02db      	lsls	r3, r3, #11
   2918a:	0fdb      	lsrs	r3, r3, #31
   2918c:	b2da      	uxtb	r2, r3
   2918e:	2313      	movs	r3, #19
   29190:	18fb      	adds	r3, r7, r3
   29192:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   29194:	4a1c      	ldr	r2, [pc, #112]	; (29208 <system_gclk_gen_get_hz+0xcc>)
   29196:	1dfb      	adds	r3, r7, #7
   29198:	781b      	ldrb	r3, [r3, #0]
   2919a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2919c:	46c0      	nop			; (mov r8, r8)
   2919e:	4b15      	ldr	r3, [pc, #84]	; (291f4 <system_gclk_gen_get_hz+0xb8>)
   291a0:	4798      	blx	r3
   291a2:	1e03      	subs	r3, r0, #0
   291a4:	d1fb      	bne.n	2919e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   291a6:	4b16      	ldr	r3, [pc, #88]	; (29200 <system_gclk_gen_get_hz+0xc4>)
   291a8:	689b      	ldr	r3, [r3, #8]
   291aa:	021b      	lsls	r3, r3, #8
   291ac:	0c1b      	lsrs	r3, r3, #16
   291ae:	b29b      	uxth	r3, r3
   291b0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   291b2:	4b16      	ldr	r3, [pc, #88]	; (2920c <system_gclk_gen_get_hz+0xd0>)
   291b4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   291b6:	2313      	movs	r3, #19
   291b8:	18fb      	adds	r3, r7, r3
   291ba:	781b      	ldrb	r3, [r3, #0]
   291bc:	2b00      	cmp	r3, #0
   291be:	d109      	bne.n	291d4 <system_gclk_gen_get_hz+0x98>
   291c0:	68fb      	ldr	r3, [r7, #12]
   291c2:	2b01      	cmp	r3, #1
   291c4:	d906      	bls.n	291d4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   291c6:	4b12      	ldr	r3, [pc, #72]	; (29210 <system_gclk_gen_get_hz+0xd4>)
   291c8:	68f9      	ldr	r1, [r7, #12]
   291ca:	6978      	ldr	r0, [r7, #20]
   291cc:	4798      	blx	r3
   291ce:	0003      	movs	r3, r0
   291d0:	617b      	str	r3, [r7, #20]
   291d2:	e00a      	b.n	291ea <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   291d4:	2313      	movs	r3, #19
   291d6:	18fb      	adds	r3, r7, r3
   291d8:	781b      	ldrb	r3, [r3, #0]
   291da:	2b00      	cmp	r3, #0
   291dc:	d005      	beq.n	291ea <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   291de:	68fb      	ldr	r3, [r7, #12]
   291e0:	3301      	adds	r3, #1
   291e2:	697a      	ldr	r2, [r7, #20]
   291e4:	40da      	lsrs	r2, r3
   291e6:	0013      	movs	r3, r2
   291e8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   291ea:	697b      	ldr	r3, [r7, #20]
}
   291ec:	0018      	movs	r0, r3
   291ee:	46bd      	mov	sp, r7
   291f0:	b006      	add	sp, #24
   291f2:	bd80      	pop	{r7, pc}
   291f4:	00028f6d 	.word	0x00028f6d
   291f8:	00028f45 	.word	0x00028f45
   291fc:	40000c04 	.word	0x40000c04
   29200:	40000c00 	.word	0x40000c00
   29204:	0002889d 	.word	0x0002889d
   29208:	40000c08 	.word	0x40000c08
   2920c:	00028f59 	.word	0x00028f59
   29210:	00031d45 	.word	0x00031d45

00029214 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   29214:	b580      	push	{r7, lr}
   29216:	b084      	sub	sp, #16
   29218:	af00      	add	r7, sp, #0
   2921a:	0002      	movs	r2, r0
   2921c:	6039      	str	r1, [r7, #0]
   2921e:	1dfb      	adds	r3, r7, #7
   29220:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   29222:	1dfb      	adds	r3, r7, #7
   29224:	781b      	ldrb	r3, [r3, #0]
   29226:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   29228:	683b      	ldr	r3, [r7, #0]
   2922a:	781b      	ldrb	r3, [r3, #0]
   2922c:	021b      	lsls	r3, r3, #8
   2922e:	001a      	movs	r2, r3
   29230:	68fb      	ldr	r3, [r7, #12]
   29232:	4313      	orrs	r3, r2
   29234:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   29236:	1dfb      	adds	r3, r7, #7
   29238:	781b      	ldrb	r3, [r3, #0]
   2923a:	0018      	movs	r0, r3
   2923c:	4b04      	ldr	r3, [pc, #16]	; (29250 <system_gclk_chan_set_config+0x3c>)
   2923e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   29240:	4b04      	ldr	r3, [pc, #16]	; (29254 <system_gclk_chan_set_config+0x40>)
   29242:	68fa      	ldr	r2, [r7, #12]
   29244:	b292      	uxth	r2, r2
   29246:	805a      	strh	r2, [r3, #2]
}
   29248:	46c0      	nop			; (mov r8, r8)
   2924a:	46bd      	mov	sp, r7
   2924c:	b004      	add	sp, #16
   2924e:	bd80      	pop	{r7, pc}
   29250:	000292a1 	.word	0x000292a1
   29254:	40000c00 	.word	0x40000c00

00029258 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   29258:	b580      	push	{r7, lr}
   2925a:	b082      	sub	sp, #8
   2925c:	af00      	add	r7, sp, #0
   2925e:	0002      	movs	r2, r0
   29260:	1dfb      	adds	r3, r7, #7
   29262:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   29264:	4b0a      	ldr	r3, [pc, #40]	; (29290 <system_gclk_chan_enable+0x38>)
   29266:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29268:	4a0a      	ldr	r2, [pc, #40]	; (29294 <system_gclk_chan_enable+0x3c>)
   2926a:	1dfb      	adds	r3, r7, #7
   2926c:	781b      	ldrb	r3, [r3, #0]
   2926e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   29270:	4909      	ldr	r1, [pc, #36]	; (29298 <system_gclk_chan_enable+0x40>)
   29272:	4b09      	ldr	r3, [pc, #36]	; (29298 <system_gclk_chan_enable+0x40>)
   29274:	885b      	ldrh	r3, [r3, #2]
   29276:	b29b      	uxth	r3, r3
   29278:	2280      	movs	r2, #128	; 0x80
   2927a:	01d2      	lsls	r2, r2, #7
   2927c:	4313      	orrs	r3, r2
   2927e:	b29b      	uxth	r3, r3
   29280:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   29282:	4b06      	ldr	r3, [pc, #24]	; (2929c <system_gclk_chan_enable+0x44>)
   29284:	4798      	blx	r3
}
   29286:	46c0      	nop			; (mov r8, r8)
   29288:	46bd      	mov	sp, r7
   2928a:	b002      	add	sp, #8
   2928c:	bd80      	pop	{r7, pc}
   2928e:	46c0      	nop			; (mov r8, r8)
   29290:	00028f45 	.word	0x00028f45
   29294:	40000c02 	.word	0x40000c02
   29298:	40000c00 	.word	0x40000c00
   2929c:	00028f59 	.word	0x00028f59

000292a0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   292a0:	b580      	push	{r7, lr}
   292a2:	b084      	sub	sp, #16
   292a4:	af00      	add	r7, sp, #0
   292a6:	0002      	movs	r2, r0
   292a8:	1dfb      	adds	r3, r7, #7
   292aa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   292ac:	4b1c      	ldr	r3, [pc, #112]	; (29320 <system_gclk_chan_disable+0x80>)
   292ae:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   292b0:	4a1c      	ldr	r2, [pc, #112]	; (29324 <system_gclk_chan_disable+0x84>)
   292b2:	1dfb      	adds	r3, r7, #7
   292b4:	781b      	ldrb	r3, [r3, #0]
   292b6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   292b8:	4b1b      	ldr	r3, [pc, #108]	; (29328 <system_gclk_chan_disable+0x88>)
   292ba:	885b      	ldrh	r3, [r3, #2]
   292bc:	051b      	lsls	r3, r3, #20
   292be:	0f1b      	lsrs	r3, r3, #28
   292c0:	b2db      	uxtb	r3, r3
   292c2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   292c4:	4a18      	ldr	r2, [pc, #96]	; (29328 <system_gclk_chan_disable+0x88>)
   292c6:	8853      	ldrh	r3, [r2, #2]
   292c8:	4918      	ldr	r1, [pc, #96]	; (2932c <system_gclk_chan_disable+0x8c>)
   292ca:	400b      	ands	r3, r1
   292cc:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   292ce:	4a16      	ldr	r2, [pc, #88]	; (29328 <system_gclk_chan_disable+0x88>)
   292d0:	4b15      	ldr	r3, [pc, #84]	; (29328 <system_gclk_chan_disable+0x88>)
   292d2:	885b      	ldrh	r3, [r3, #2]
   292d4:	b29b      	uxth	r3, r3
   292d6:	4916      	ldr	r1, [pc, #88]	; (29330 <system_gclk_chan_disable+0x90>)
   292d8:	400b      	ands	r3, r1
   292da:	b29b      	uxth	r3, r3
   292dc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   292de:	46c0      	nop			; (mov r8, r8)
   292e0:	4b11      	ldr	r3, [pc, #68]	; (29328 <system_gclk_chan_disable+0x88>)
   292e2:	885b      	ldrh	r3, [r3, #2]
   292e4:	b29b      	uxth	r3, r3
   292e6:	001a      	movs	r2, r3
   292e8:	2380      	movs	r3, #128	; 0x80
   292ea:	01db      	lsls	r3, r3, #7
   292ec:	4013      	ands	r3, r2
   292ee:	d1f7      	bne.n	292e0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   292f0:	4a0d      	ldr	r2, [pc, #52]	; (29328 <system_gclk_chan_disable+0x88>)
   292f2:	68fb      	ldr	r3, [r7, #12]
   292f4:	b2db      	uxtb	r3, r3
   292f6:	1c19      	adds	r1, r3, #0
   292f8:	230f      	movs	r3, #15
   292fa:	400b      	ands	r3, r1
   292fc:	b2d9      	uxtb	r1, r3
   292fe:	8853      	ldrh	r3, [r2, #2]
   29300:	1c08      	adds	r0, r1, #0
   29302:	210f      	movs	r1, #15
   29304:	4001      	ands	r1, r0
   29306:	0208      	lsls	r0, r1, #8
   29308:	4908      	ldr	r1, [pc, #32]	; (2932c <system_gclk_chan_disable+0x8c>)
   2930a:	400b      	ands	r3, r1
   2930c:	1c19      	adds	r1, r3, #0
   2930e:	1c03      	adds	r3, r0, #0
   29310:	430b      	orrs	r3, r1
   29312:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   29314:	4b07      	ldr	r3, [pc, #28]	; (29334 <system_gclk_chan_disable+0x94>)
   29316:	4798      	blx	r3
}
   29318:	46c0      	nop			; (mov r8, r8)
   2931a:	46bd      	mov	sp, r7
   2931c:	b004      	add	sp, #16
   2931e:	bd80      	pop	{r7, pc}
   29320:	00028f45 	.word	0x00028f45
   29324:	40000c02 	.word	0x40000c02
   29328:	40000c00 	.word	0x40000c00
   2932c:	fffff0ff 	.word	0xfffff0ff
   29330:	ffffbfff 	.word	0xffffbfff
   29334:	00028f59 	.word	0x00028f59

00029338 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   29338:	b580      	push	{r7, lr}
   2933a:	b084      	sub	sp, #16
   2933c:	af00      	add	r7, sp, #0
   2933e:	0002      	movs	r2, r0
   29340:	1dfb      	adds	r3, r7, #7
   29342:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   29344:	4b0d      	ldr	r3, [pc, #52]	; (2937c <system_gclk_chan_get_hz+0x44>)
   29346:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29348:	4a0d      	ldr	r2, [pc, #52]	; (29380 <system_gclk_chan_get_hz+0x48>)
   2934a:	1dfb      	adds	r3, r7, #7
   2934c:	781b      	ldrb	r3, [r3, #0]
   2934e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   29350:	4b0c      	ldr	r3, [pc, #48]	; (29384 <system_gclk_chan_get_hz+0x4c>)
   29352:	885b      	ldrh	r3, [r3, #2]
   29354:	051b      	lsls	r3, r3, #20
   29356:	0f1b      	lsrs	r3, r3, #28
   29358:	b2da      	uxtb	r2, r3
   2935a:	230f      	movs	r3, #15
   2935c:	18fb      	adds	r3, r7, r3
   2935e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   29360:	4b09      	ldr	r3, [pc, #36]	; (29388 <system_gclk_chan_get_hz+0x50>)
   29362:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   29364:	230f      	movs	r3, #15
   29366:	18fb      	adds	r3, r7, r3
   29368:	781b      	ldrb	r3, [r3, #0]
   2936a:	0018      	movs	r0, r3
   2936c:	4b07      	ldr	r3, [pc, #28]	; (2938c <system_gclk_chan_get_hz+0x54>)
   2936e:	4798      	blx	r3
   29370:	0003      	movs	r3, r0
}
   29372:	0018      	movs	r0, r3
   29374:	46bd      	mov	sp, r7
   29376:	b004      	add	sp, #16
   29378:	bd80      	pop	{r7, pc}
   2937a:	46c0      	nop			; (mov r8, r8)
   2937c:	00028f45 	.word	0x00028f45
   29380:	40000c02 	.word	0x40000c02
   29384:	40000c00 	.word	0x40000c00
   29388:	00028f59 	.word	0x00028f59
   2938c:	0002913d 	.word	0x0002913d

00029390 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   29390:	b580      	push	{r7, lr}
   29392:	b084      	sub	sp, #16
   29394:	af00      	add	r7, sp, #0
   29396:	0002      	movs	r2, r0
   29398:	1dfb      	adds	r3, r7, #7
   2939a:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2939c:	230f      	movs	r3, #15
   2939e:	18fb      	adds	r3, r7, r3
   293a0:	2200      	movs	r2, #0
   293a2:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   293a4:	1dfb      	adds	r3, r7, #7
   293a6:	781b      	ldrb	r3, [r3, #0]
   293a8:	2b7f      	cmp	r3, #127	; 0x7f
   293aa:	d80b      	bhi.n	293c4 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   293ac:	4a13      	ldr	r2, [pc, #76]	; (293fc <system_interrupt_clear_pending+0x6c>)
   293ae:	1dfb      	adds	r3, r7, #7
   293b0:	781b      	ldrb	r3, [r3, #0]
   293b2:	b25b      	sxtb	r3, r3
   293b4:	2101      	movs	r1, #1
   293b6:	4099      	lsls	r1, r3
   293b8:	000b      	movs	r3, r1
   293ba:	0019      	movs	r1, r3
   293bc:	23c0      	movs	r3, #192	; 0xc0
   293be:	005b      	lsls	r3, r3, #1
   293c0:	50d1      	str	r1, [r2, r3]
   293c2:	e014      	b.n	293ee <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   293c4:	1dfb      	adds	r3, r7, #7
   293c6:	781b      	ldrb	r3, [r3, #0]
   293c8:	b25b      	sxtb	r3, r3
   293ca:	330e      	adds	r3, #14
   293cc:	d101      	bne.n	293d2 <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   293ce:	2317      	movs	r3, #23
   293d0:	e010      	b.n	293f4 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   293d2:	1dfb      	adds	r3, r7, #7
   293d4:	781b      	ldrb	r3, [r3, #0]
   293d6:	b25b      	sxtb	r3, r3
   293d8:	3301      	adds	r3, #1
   293da:	d104      	bne.n	293e6 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   293dc:	4b08      	ldr	r3, [pc, #32]	; (29400 <system_interrupt_clear_pending+0x70>)
   293de:	2280      	movs	r2, #128	; 0x80
   293e0:	0492      	lsls	r2, r2, #18
   293e2:	605a      	str	r2, [r3, #4]
   293e4:	e003      	b.n	293ee <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   293e6:	230f      	movs	r3, #15
   293e8:	18fb      	adds	r3, r7, r3
   293ea:	2217      	movs	r2, #23
   293ec:	701a      	strb	r2, [r3, #0]
	}

	return status;
   293ee:	230f      	movs	r3, #15
   293f0:	18fb      	adds	r3, r7, r3
   293f2:	781b      	ldrb	r3, [r3, #0]
}
   293f4:	0018      	movs	r0, r3
   293f6:	46bd      	mov	sp, r7
   293f8:	b004      	add	sp, #16
   293fa:	bd80      	pop	{r7, pc}
   293fc:	e000e100 	.word	0xe000e100
   29400:	e000ed00 	.word	0xe000ed00

00029404 <system_pinmux_get_group_from_gpio_pin>:
{
   29404:	b580      	push	{r7, lr}
   29406:	b084      	sub	sp, #16
   29408:	af00      	add	r7, sp, #0
   2940a:	0002      	movs	r2, r0
   2940c:	1dfb      	adds	r3, r7, #7
   2940e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   29410:	230f      	movs	r3, #15
   29412:	18fb      	adds	r3, r7, r3
   29414:	1dfa      	adds	r2, r7, #7
   29416:	7812      	ldrb	r2, [r2, #0]
   29418:	09d2      	lsrs	r2, r2, #7
   2941a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2941c:	230e      	movs	r3, #14
   2941e:	18fb      	adds	r3, r7, r3
   29420:	1dfa      	adds	r2, r7, #7
   29422:	7812      	ldrb	r2, [r2, #0]
   29424:	0952      	lsrs	r2, r2, #5
   29426:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   29428:	4b0d      	ldr	r3, [pc, #52]	; (29460 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2942a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2942c:	230f      	movs	r3, #15
   2942e:	18fb      	adds	r3, r7, r3
   29430:	781b      	ldrb	r3, [r3, #0]
   29432:	2b00      	cmp	r3, #0
   29434:	d10f      	bne.n	29456 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   29436:	230f      	movs	r3, #15
   29438:	18fb      	adds	r3, r7, r3
   2943a:	781b      	ldrb	r3, [r3, #0]
   2943c:	009b      	lsls	r3, r3, #2
   2943e:	2210      	movs	r2, #16
   29440:	4694      	mov	ip, r2
   29442:	44bc      	add	ip, r7
   29444:	4463      	add	r3, ip
   29446:	3b08      	subs	r3, #8
   29448:	681a      	ldr	r2, [r3, #0]
   2944a:	230e      	movs	r3, #14
   2944c:	18fb      	adds	r3, r7, r3
   2944e:	781b      	ldrb	r3, [r3, #0]
   29450:	01db      	lsls	r3, r3, #7
   29452:	18d3      	adds	r3, r2, r3
   29454:	e000      	b.n	29458 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   29456:	2300      	movs	r3, #0
}
   29458:	0018      	movs	r0, r3
   2945a:	46bd      	mov	sp, r7
   2945c:	b004      	add	sp, #16
   2945e:	bd80      	pop	{r7, pc}
   29460:	41004400 	.word	0x41004400

00029464 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   29464:	b580      	push	{r7, lr}
   29466:	b088      	sub	sp, #32
   29468:	af00      	add	r7, sp, #0
   2946a:	60f8      	str	r0, [r7, #12]
   2946c:	60b9      	str	r1, [r7, #8]
   2946e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   29470:	2300      	movs	r3, #0
   29472:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   29474:	687b      	ldr	r3, [r7, #4]
   29476:	78db      	ldrb	r3, [r3, #3]
   29478:	2201      	movs	r2, #1
   2947a:	4053      	eors	r3, r2
   2947c:	b2db      	uxtb	r3, r3
   2947e:	2b00      	cmp	r3, #0
   29480:	d035      	beq.n	294ee <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   29482:	687b      	ldr	r3, [r7, #4]
   29484:	781b      	ldrb	r3, [r3, #0]
   29486:	2b80      	cmp	r3, #128	; 0x80
   29488:	d00b      	beq.n	294a2 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2948a:	69fb      	ldr	r3, [r7, #28]
   2948c:	2280      	movs	r2, #128	; 0x80
   2948e:	0252      	lsls	r2, r2, #9
   29490:	4313      	orrs	r3, r2
   29492:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   29494:	687b      	ldr	r3, [r7, #4]
   29496:	781b      	ldrb	r3, [r3, #0]
   29498:	061b      	lsls	r3, r3, #24
   2949a:	001a      	movs	r2, r3
   2949c:	69fb      	ldr	r3, [r7, #28]
   2949e:	4313      	orrs	r3, r2
   294a0:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   294a2:	687b      	ldr	r3, [r7, #4]
   294a4:	785b      	ldrb	r3, [r3, #1]
   294a6:	2b00      	cmp	r3, #0
   294a8:	d003      	beq.n	294b2 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   294aa:	687b      	ldr	r3, [r7, #4]
   294ac:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   294ae:	2b02      	cmp	r3, #2
   294b0:	d110      	bne.n	294d4 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   294b2:	69fb      	ldr	r3, [r7, #28]
   294b4:	2280      	movs	r2, #128	; 0x80
   294b6:	0292      	lsls	r2, r2, #10
   294b8:	4313      	orrs	r3, r2
   294ba:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   294bc:	687b      	ldr	r3, [r7, #4]
   294be:	789b      	ldrb	r3, [r3, #2]
   294c0:	2b00      	cmp	r3, #0
   294c2:	d004      	beq.n	294ce <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   294c4:	69fb      	ldr	r3, [r7, #28]
   294c6:	2280      	movs	r2, #128	; 0x80
   294c8:	02d2      	lsls	r2, r2, #11
   294ca:	4313      	orrs	r3, r2
   294cc:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   294ce:	68fb      	ldr	r3, [r7, #12]
   294d0:	68ba      	ldr	r2, [r7, #8]
   294d2:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   294d4:	687b      	ldr	r3, [r7, #4]
   294d6:	785b      	ldrb	r3, [r3, #1]
   294d8:	2b01      	cmp	r3, #1
   294da:	d003      	beq.n	294e4 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   294dc:	687b      	ldr	r3, [r7, #4]
   294de:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   294e0:	2b02      	cmp	r3, #2
   294e2:	d107      	bne.n	294f4 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   294e4:	69fb      	ldr	r3, [r7, #28]
   294e6:	4a22      	ldr	r2, [pc, #136]	; (29570 <_system_pinmux_config+0x10c>)
   294e8:	4013      	ands	r3, r2
   294ea:	61fb      	str	r3, [r7, #28]
   294ec:	e002      	b.n	294f4 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   294ee:	68fb      	ldr	r3, [r7, #12]
   294f0:	68ba      	ldr	r2, [r7, #8]
   294f2:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   294f4:	68bb      	ldr	r3, [r7, #8]
   294f6:	041b      	lsls	r3, r3, #16
   294f8:	0c1b      	lsrs	r3, r3, #16
   294fa:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   294fc:	68bb      	ldr	r3, [r7, #8]
   294fe:	0c1b      	lsrs	r3, r3, #16
   29500:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29502:	69ba      	ldr	r2, [r7, #24]
   29504:	69fb      	ldr	r3, [r7, #28]
   29506:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   29508:	22a0      	movs	r2, #160	; 0xa0
   2950a:	05d2      	lsls	r2, r2, #23
   2950c:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2950e:	68fb      	ldr	r3, [r7, #12]
   29510:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29512:	697a      	ldr	r2, [r7, #20]
   29514:	69fb      	ldr	r3, [r7, #28]
   29516:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   29518:	22d0      	movs	r2, #208	; 0xd0
   2951a:	0612      	lsls	r2, r2, #24
   2951c:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2951e:	68fb      	ldr	r3, [r7, #12]
   29520:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   29522:	687b      	ldr	r3, [r7, #4]
   29524:	78db      	ldrb	r3, [r3, #3]
   29526:	2201      	movs	r2, #1
   29528:	4053      	eors	r3, r2
   2952a:	b2db      	uxtb	r3, r3
   2952c:	2b00      	cmp	r3, #0
   2952e:	d01a      	beq.n	29566 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   29530:	69fa      	ldr	r2, [r7, #28]
   29532:	2380      	movs	r3, #128	; 0x80
   29534:	02db      	lsls	r3, r3, #11
   29536:	4013      	ands	r3, r2
   29538:	d00a      	beq.n	29550 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2953a:	687b      	ldr	r3, [r7, #4]
   2953c:	789b      	ldrb	r3, [r3, #2]
   2953e:	2b01      	cmp	r3, #1
   29540:	d103      	bne.n	2954a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   29542:	68fb      	ldr	r3, [r7, #12]
   29544:	68ba      	ldr	r2, [r7, #8]
   29546:	619a      	str	r2, [r3, #24]
   29548:	e002      	b.n	29550 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2954a:	68fb      	ldr	r3, [r7, #12]
   2954c:	68ba      	ldr	r2, [r7, #8]
   2954e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29550:	687b      	ldr	r3, [r7, #4]
   29552:	785b      	ldrb	r3, [r3, #1]
   29554:	2b01      	cmp	r3, #1
   29556:	d003      	beq.n	29560 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29558:	687b      	ldr	r3, [r7, #4]
   2955a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2955c:	2b02      	cmp	r3, #2
   2955e:	d102      	bne.n	29566 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   29560:	68fb      	ldr	r3, [r7, #12]
   29562:	68ba      	ldr	r2, [r7, #8]
   29564:	609a      	str	r2, [r3, #8]
		}
	}
}
   29566:	46c0      	nop			; (mov r8, r8)
   29568:	46bd      	mov	sp, r7
   2956a:	b008      	add	sp, #32
   2956c:	bd80      	pop	{r7, pc}
   2956e:	46c0      	nop			; (mov r8, r8)
   29570:	fffbffff 	.word	0xfffbffff

00029574 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   29574:	b580      	push	{r7, lr}
   29576:	b084      	sub	sp, #16
   29578:	af00      	add	r7, sp, #0
   2957a:	0002      	movs	r2, r0
   2957c:	6039      	str	r1, [r7, #0]
   2957e:	1dfb      	adds	r3, r7, #7
   29580:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   29582:	1dfb      	adds	r3, r7, #7
   29584:	781b      	ldrb	r3, [r3, #0]
   29586:	0018      	movs	r0, r3
   29588:	4b0a      	ldr	r3, [pc, #40]	; (295b4 <system_pinmux_pin_set_config+0x40>)
   2958a:	4798      	blx	r3
   2958c:	0003      	movs	r3, r0
   2958e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   29590:	1dfb      	adds	r3, r7, #7
   29592:	781b      	ldrb	r3, [r3, #0]
   29594:	221f      	movs	r2, #31
   29596:	4013      	ands	r3, r2
   29598:	2201      	movs	r2, #1
   2959a:	409a      	lsls	r2, r3
   2959c:	0013      	movs	r3, r2
   2959e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   295a0:	683a      	ldr	r2, [r7, #0]
   295a2:	68b9      	ldr	r1, [r7, #8]
   295a4:	68fb      	ldr	r3, [r7, #12]
   295a6:	0018      	movs	r0, r3
   295a8:	4b03      	ldr	r3, [pc, #12]	; (295b8 <system_pinmux_pin_set_config+0x44>)
   295aa:	4798      	blx	r3
}
   295ac:	46c0      	nop			; (mov r8, r8)
   295ae:	46bd      	mov	sp, r7
   295b0:	b004      	add	sp, #16
   295b2:	bd80      	pop	{r7, pc}
   295b4:	00029405 	.word	0x00029405
   295b8:	00029465 	.word	0x00029465

000295bc <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   295bc:	b580      	push	{r7, lr}
   295be:	af00      	add	r7, sp, #0
	return;
   295c0:	46c0      	nop			; (mov r8, r8)
}
   295c2:	46bd      	mov	sp, r7
   295c4:	bd80      	pop	{r7, pc}
	...

000295c8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   295c8:	b580      	push	{r7, lr}
   295ca:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   295cc:	4b06      	ldr	r3, [pc, #24]	; (295e8 <system_init+0x20>)
   295ce:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   295d0:	4b06      	ldr	r3, [pc, #24]	; (295ec <system_init+0x24>)
   295d2:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   295d4:	4b06      	ldr	r3, [pc, #24]	; (295f0 <system_init+0x28>)
   295d6:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   295d8:	4b06      	ldr	r3, [pc, #24]	; (295f4 <system_init+0x2c>)
   295da:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   295dc:	4b06      	ldr	r3, [pc, #24]	; (295f8 <system_init+0x30>)
   295de:	4798      	blx	r3
}
   295e0:	46c0      	nop			; (mov r8, r8)
   295e2:	46bd      	mov	sp, r7
   295e4:	bd80      	pop	{r7, pc}
   295e6:	46c0      	nop			; (mov r8, r8)
   295e8:	00028c49 	.word	0x00028c49
   295ec:	00025711 	.word	0x00025711
   295f0:	000132cd 	.word	0x000132cd
   295f4:	00025ae9 	.word	0x00025ae9
   295f8:	000295bd 	.word	0x000295bd

000295fc <system_gclk_chan_get_config_defaults>:
{
   295fc:	b580      	push	{r7, lr}
   295fe:	b082      	sub	sp, #8
   29600:	af00      	add	r7, sp, #0
   29602:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29604:	687b      	ldr	r3, [r7, #4]
   29606:	2200      	movs	r2, #0
   29608:	701a      	strb	r2, [r3, #0]
}
   2960a:	46c0      	nop			; (mov r8, r8)
   2960c:	46bd      	mov	sp, r7
   2960e:	b002      	add	sp, #8
   29610:	bd80      	pop	{r7, pc}
	...

00029614 <system_apb_clock_set_mask>:
{
   29614:	b580      	push	{r7, lr}
   29616:	b082      	sub	sp, #8
   29618:	af00      	add	r7, sp, #0
   2961a:	0002      	movs	r2, r0
   2961c:	6039      	str	r1, [r7, #0]
   2961e:	1dfb      	adds	r3, r7, #7
   29620:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29622:	1dfb      	adds	r3, r7, #7
   29624:	781b      	ldrb	r3, [r3, #0]
   29626:	2b01      	cmp	r3, #1
   29628:	d00a      	beq.n	29640 <system_apb_clock_set_mask+0x2c>
   2962a:	2b02      	cmp	r3, #2
   2962c:	d00f      	beq.n	2964e <system_apb_clock_set_mask+0x3a>
   2962e:	2b00      	cmp	r3, #0
   29630:	d114      	bne.n	2965c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   29632:	4b0e      	ldr	r3, [pc, #56]	; (2966c <system_apb_clock_set_mask+0x58>)
   29634:	4a0d      	ldr	r2, [pc, #52]	; (2966c <system_apb_clock_set_mask+0x58>)
   29636:	6991      	ldr	r1, [r2, #24]
   29638:	683a      	ldr	r2, [r7, #0]
   2963a:	430a      	orrs	r2, r1
   2963c:	619a      	str	r2, [r3, #24]
			break;
   2963e:	e00f      	b.n	29660 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29640:	4b0a      	ldr	r3, [pc, #40]	; (2966c <system_apb_clock_set_mask+0x58>)
   29642:	4a0a      	ldr	r2, [pc, #40]	; (2966c <system_apb_clock_set_mask+0x58>)
   29644:	69d1      	ldr	r1, [r2, #28]
   29646:	683a      	ldr	r2, [r7, #0]
   29648:	430a      	orrs	r2, r1
   2964a:	61da      	str	r2, [r3, #28]
			break;
   2964c:	e008      	b.n	29660 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2964e:	4b07      	ldr	r3, [pc, #28]	; (2966c <system_apb_clock_set_mask+0x58>)
   29650:	4a06      	ldr	r2, [pc, #24]	; (2966c <system_apb_clock_set_mask+0x58>)
   29652:	6a11      	ldr	r1, [r2, #32]
   29654:	683a      	ldr	r2, [r7, #0]
   29656:	430a      	orrs	r2, r1
   29658:	621a      	str	r2, [r3, #32]
			break;
   2965a:	e001      	b.n	29660 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2965c:	2317      	movs	r3, #23
   2965e:	e000      	b.n	29662 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29660:	2300      	movs	r3, #0
}
   29662:	0018      	movs	r0, r3
   29664:	46bd      	mov	sp, r7
   29666:	b002      	add	sp, #8
   29668:	bd80      	pop	{r7, pc}
   2966a:	46c0      	nop			; (mov r8, r8)
   2966c:	40000400 	.word	0x40000400

00029670 <system_pinmux_get_config_defaults>:
{
   29670:	b580      	push	{r7, lr}
   29672:	b082      	sub	sp, #8
   29674:	af00      	add	r7, sp, #0
   29676:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   29678:	687b      	ldr	r3, [r7, #4]
   2967a:	2280      	movs	r2, #128	; 0x80
   2967c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2967e:	687b      	ldr	r3, [r7, #4]
   29680:	2200      	movs	r2, #0
   29682:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   29684:	687b      	ldr	r3, [r7, #4]
   29686:	2201      	movs	r2, #1
   29688:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2968a:	687b      	ldr	r3, [r7, #4]
   2968c:	2200      	movs	r2, #0
   2968e:	70da      	strb	r2, [r3, #3]
}
   29690:	46c0      	nop			; (mov r8, r8)
   29692:	46bd      	mov	sp, r7
   29694:	b002      	add	sp, #8
   29696:	bd80      	pop	{r7, pc}

00029698 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   29698:	b580      	push	{r7, lr}
   2969a:	b084      	sub	sp, #16
   2969c:	af00      	add	r7, sp, #0
   2969e:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   296a0:	2300      	movs	r3, #0
   296a2:	60fb      	str	r3, [r7, #12]
   296a4:	e00c      	b.n	296c0 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   296a6:	4b0a      	ldr	r3, [pc, #40]	; (296d0 <_tcc_get_inst_index+0x38>)
   296a8:	68fa      	ldr	r2, [r7, #12]
   296aa:	0092      	lsls	r2, r2, #2
   296ac:	58d2      	ldr	r2, [r2, r3]
   296ae:	687b      	ldr	r3, [r7, #4]
   296b0:	429a      	cmp	r2, r3
   296b2:	d102      	bne.n	296ba <_tcc_get_inst_index+0x22>
			return i;
   296b4:	68fb      	ldr	r3, [r7, #12]
   296b6:	b2db      	uxtb	r3, r3
   296b8:	e006      	b.n	296c8 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   296ba:	68fb      	ldr	r3, [r7, #12]
   296bc:	3301      	adds	r3, #1
   296be:	60fb      	str	r3, [r7, #12]
   296c0:	68fb      	ldr	r3, [r7, #12]
   296c2:	2b02      	cmp	r3, #2
   296c4:	d9ef      	bls.n	296a6 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   296c6:	2300      	movs	r3, #0
}
   296c8:	0018      	movs	r0, r3
   296ca:	46bd      	mov	sp, r7
   296cc:	b004      	add	sp, #16
   296ce:	bd80      	pop	{r7, pc}
   296d0:	00038398 	.word	0x00038398

000296d4 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   296d4:	b590      	push	{r4, r7, lr}
   296d6:	b085      	sub	sp, #20
   296d8:	af00      	add	r7, sp, #0
   296da:	6078      	str	r0, [r7, #4]
   296dc:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   296de:	230f      	movs	r3, #15
   296e0:	18fc      	adds	r4, r7, r3
   296e2:	683b      	ldr	r3, [r7, #0]
   296e4:	0018      	movs	r0, r3
   296e6:	4bad      	ldr	r3, [pc, #692]	; (2999c <tcc_get_config_defaults+0x2c8>)
   296e8:	4798      	blx	r3
   296ea:	0003      	movs	r3, r0
   296ec:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   296ee:	687b      	ldr	r3, [r7, #4]
   296f0:	2200      	movs	r2, #0
   296f2:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   296f4:	230f      	movs	r3, #15
   296f6:	18fb      	adds	r3, r7, r3
   296f8:	781a      	ldrb	r2, [r3, #0]
   296fa:	4ba9      	ldr	r3, [pc, #676]	; (299a0 <tcc_get_config_defaults+0x2cc>)
   296fc:	0092      	lsls	r2, r2, #2
   296fe:	58d2      	ldr	r2, [r2, r3]
   29700:	687b      	ldr	r3, [r7, #4]
   29702:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   29704:	687b      	ldr	r3, [r7, #4]
   29706:	2200      	movs	r2, #0
   29708:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2970a:	687b      	ldr	r3, [r7, #4]
   2970c:	2200      	movs	r2, #0
   2970e:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   29710:	687b      	ldr	r3, [r7, #4]
   29712:	2200      	movs	r2, #0
   29714:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   29716:	687b      	ldr	r3, [r7, #4]
   29718:	2200      	movs	r2, #0
   2971a:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2971c:	687b      	ldr	r3, [r7, #4]
   2971e:	2200      	movs	r2, #0
   29720:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29722:	687b      	ldr	r3, [r7, #4]
   29724:	2200      	movs	r2, #0
   29726:	61da      	str	r2, [r3, #28]
   29728:	687b      	ldr	r3, [r7, #4]
   2972a:	2200      	movs	r2, #0
   2972c:	621a      	str	r2, [r3, #32]
   2972e:	687b      	ldr	r3, [r7, #4]
   29730:	2200      	movs	r2, #0
   29732:	625a      	str	r2, [r3, #36]	; 0x24
   29734:	687b      	ldr	r3, [r7, #4]
   29736:	2200      	movs	r2, #0
   29738:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2973a:	687b      	ldr	r3, [r7, #4]
   2973c:	2200      	movs	r2, #0
   2973e:	751a      	strb	r2, [r3, #20]
   29740:	687b      	ldr	r3, [r7, #4]
   29742:	2200      	movs	r2, #0
   29744:	755a      	strb	r2, [r3, #21]
   29746:	687b      	ldr	r3, [r7, #4]
   29748:	2200      	movs	r2, #0
   2974a:	759a      	strb	r2, [r3, #22]
   2974c:	687b      	ldr	r3, [r7, #4]
   2974e:	2200      	movs	r2, #0
   29750:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   29752:	687b      	ldr	r3, [r7, #4]
   29754:	2200      	movs	r2, #0
   29756:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   29758:	687b      	ldr	r3, [r7, #4]
   2975a:	2200      	movs	r2, #0
   2975c:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2975e:	687b      	ldr	r3, [r7, #4]
   29760:	2200      	movs	r2, #0
   29762:	741a      	strb	r2, [r3, #16]
   29764:	687b      	ldr	r3, [r7, #4]
   29766:	2200      	movs	r2, #0
   29768:	745a      	strb	r2, [r3, #17]
   2976a:	687b      	ldr	r3, [r7, #4]
   2976c:	2200      	movs	r2, #0
   2976e:	749a      	strb	r2, [r3, #18]
   29770:	687b      	ldr	r3, [r7, #4]
   29772:	2200      	movs	r2, #0
   29774:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   29776:	687b      	ldr	r3, [r7, #4]
   29778:	222c      	movs	r2, #44	; 0x2c
   2977a:	2100      	movs	r1, #0
   2977c:	5499      	strb	r1, [r3, r2]
   2977e:	687b      	ldr	r3, [r7, #4]
   29780:	222d      	movs	r2, #45	; 0x2d
   29782:	2100      	movs	r1, #0
   29784:	5499      	strb	r1, [r3, r2]
   29786:	687b      	ldr	r3, [r7, #4]
   29788:	222e      	movs	r2, #46	; 0x2e
   2978a:	2100      	movs	r1, #0
   2978c:	5499      	strb	r1, [r3, r2]
   2978e:	687b      	ldr	r3, [r7, #4]
   29790:	222f      	movs	r2, #47	; 0x2f
   29792:	2100      	movs	r1, #0
   29794:	5499      	strb	r1, [r3, r2]
   29796:	687b      	ldr	r3, [r7, #4]
   29798:	2230      	movs	r2, #48	; 0x30
   2979a:	2100      	movs	r1, #0
   2979c:	5499      	strb	r1, [r3, r2]
   2979e:	687b      	ldr	r3, [r7, #4]
   297a0:	2231      	movs	r2, #49	; 0x31
   297a2:	2100      	movs	r1, #0
   297a4:	5499      	strb	r1, [r3, r2]
   297a6:	687b      	ldr	r3, [r7, #4]
   297a8:	2232      	movs	r2, #50	; 0x32
   297aa:	2100      	movs	r1, #0
   297ac:	5499      	strb	r1, [r3, r2]
   297ae:	687b      	ldr	r3, [r7, #4]
   297b0:	2233      	movs	r2, #51	; 0x33
   297b2:	2100      	movs	r1, #0
   297b4:	5499      	strb	r1, [r3, r2]
   297b6:	687b      	ldr	r3, [r7, #4]
   297b8:	2234      	movs	r2, #52	; 0x34
   297ba:	2100      	movs	r1, #0
   297bc:	5499      	strb	r1, [r3, r2]
   297be:	687b      	ldr	r3, [r7, #4]
   297c0:	2235      	movs	r2, #53	; 0x35
   297c2:	2100      	movs	r1, #0
   297c4:	5499      	strb	r1, [r3, r2]
   297c6:	687b      	ldr	r3, [r7, #4]
   297c8:	2236      	movs	r2, #54	; 0x36
   297ca:	2100      	movs	r1, #0
   297cc:	5499      	strb	r1, [r3, r2]
   297ce:	687b      	ldr	r3, [r7, #4]
   297d0:	2237      	movs	r2, #55	; 0x37
   297d2:	2100      	movs	r1, #0
   297d4:	5499      	strb	r1, [r3, r2]
   297d6:	687b      	ldr	r3, [r7, #4]
   297d8:	2238      	movs	r2, #56	; 0x38
   297da:	2100      	movs	r1, #0
   297dc:	5499      	strb	r1, [r3, r2]
   297de:	687b      	ldr	r3, [r7, #4]
   297e0:	2239      	movs	r2, #57	; 0x39
   297e2:	2100      	movs	r1, #0
   297e4:	5499      	strb	r1, [r3, r2]
   297e6:	687b      	ldr	r3, [r7, #4]
   297e8:	223a      	movs	r2, #58	; 0x3a
   297ea:	2100      	movs	r1, #0
   297ec:	5499      	strb	r1, [r3, r2]
   297ee:	687b      	ldr	r3, [r7, #4]
   297f0:	223b      	movs	r2, #59	; 0x3b
   297f2:	2100      	movs	r1, #0
   297f4:	5499      	strb	r1, [r3, r2]
   297f6:	687b      	ldr	r3, [r7, #4]
   297f8:	223c      	movs	r2, #60	; 0x3c
   297fa:	2100      	movs	r1, #0
   297fc:	5499      	strb	r1, [r3, r2]
   297fe:	687b      	ldr	r3, [r7, #4]
   29800:	223d      	movs	r2, #61	; 0x3d
   29802:	2100      	movs	r1, #0
   29804:	5499      	strb	r1, [r3, r2]
   29806:	687b      	ldr	r3, [r7, #4]
   29808:	223e      	movs	r2, #62	; 0x3e
   2980a:	2100      	movs	r1, #0
   2980c:	5499      	strb	r1, [r3, r2]
   2980e:	687b      	ldr	r3, [r7, #4]
   29810:	223f      	movs	r2, #63	; 0x3f
   29812:	2100      	movs	r1, #0
   29814:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   29816:	687b      	ldr	r3, [r7, #4]
   29818:	2240      	movs	r2, #64	; 0x40
   2981a:	2100      	movs	r1, #0
   2981c:	5499      	strb	r1, [r3, r2]
   2981e:	687b      	ldr	r3, [r7, #4]
   29820:	2241      	movs	r2, #65	; 0x41
   29822:	2100      	movs	r1, #0
   29824:	5499      	strb	r1, [r3, r2]
   29826:	687b      	ldr	r3, [r7, #4]
   29828:	2242      	movs	r2, #66	; 0x42
   2982a:	2100      	movs	r1, #0
   2982c:	5499      	strb	r1, [r3, r2]
   2982e:	687b      	ldr	r3, [r7, #4]
   29830:	2243      	movs	r2, #67	; 0x43
   29832:	2100      	movs	r1, #0
   29834:	5499      	strb	r1, [r3, r2]
   29836:	687b      	ldr	r3, [r7, #4]
   29838:	2244      	movs	r2, #68	; 0x44
   2983a:	2100      	movs	r1, #0
   2983c:	5499      	strb	r1, [r3, r2]
   2983e:	687b      	ldr	r3, [r7, #4]
   29840:	2245      	movs	r2, #69	; 0x45
   29842:	2100      	movs	r1, #0
   29844:	5499      	strb	r1, [r3, r2]
   29846:	687b      	ldr	r3, [r7, #4]
   29848:	2246      	movs	r2, #70	; 0x46
   2984a:	2100      	movs	r1, #0
   2984c:	5499      	strb	r1, [r3, r2]
   2984e:	687b      	ldr	r3, [r7, #4]
   29850:	2247      	movs	r2, #71	; 0x47
   29852:	2100      	movs	r1, #0
   29854:	5499      	strb	r1, [r3, r2]
   29856:	687b      	ldr	r3, [r7, #4]
   29858:	2248      	movs	r2, #72	; 0x48
   2985a:	2100      	movs	r1, #0
   2985c:	5499      	strb	r1, [r3, r2]
   2985e:	687b      	ldr	r3, [r7, #4]
   29860:	2249      	movs	r2, #73	; 0x49
   29862:	2100      	movs	r1, #0
   29864:	5499      	strb	r1, [r3, r2]
   29866:	687b      	ldr	r3, [r7, #4]
   29868:	224a      	movs	r2, #74	; 0x4a
   2986a:	2100      	movs	r1, #0
   2986c:	5499      	strb	r1, [r3, r2]
   2986e:	687b      	ldr	r3, [r7, #4]
   29870:	224b      	movs	r2, #75	; 0x4b
   29872:	2100      	movs	r1, #0
   29874:	5499      	strb	r1, [r3, r2]
   29876:	687b      	ldr	r3, [r7, #4]
   29878:	224c      	movs	r2, #76	; 0x4c
   2987a:	2100      	movs	r1, #0
   2987c:	5499      	strb	r1, [r3, r2]
   2987e:	687b      	ldr	r3, [r7, #4]
   29880:	224d      	movs	r2, #77	; 0x4d
   29882:	2100      	movs	r1, #0
   29884:	5499      	strb	r1, [r3, r2]
   29886:	687b      	ldr	r3, [r7, #4]
   29888:	224e      	movs	r2, #78	; 0x4e
   2988a:	2100      	movs	r1, #0
   2988c:	5499      	strb	r1, [r3, r2]
   2988e:	687b      	ldr	r3, [r7, #4]
   29890:	224f      	movs	r2, #79	; 0x4f
   29892:	2100      	movs	r1, #0
   29894:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   29896:	687b      	ldr	r3, [r7, #4]
   29898:	2250      	movs	r2, #80	; 0x50
   2989a:	2100      	movs	r1, #0
   2989c:	5499      	strb	r1, [r3, r2]
   2989e:	687b      	ldr	r3, [r7, #4]
   298a0:	2251      	movs	r2, #81	; 0x51
   298a2:	2100      	movs	r1, #0
   298a4:	5499      	strb	r1, [r3, r2]
   298a6:	687b      	ldr	r3, [r7, #4]
   298a8:	2252      	movs	r2, #82	; 0x52
   298aa:	2100      	movs	r1, #0
   298ac:	5499      	strb	r1, [r3, r2]
   298ae:	687b      	ldr	r3, [r7, #4]
   298b0:	2253      	movs	r2, #83	; 0x53
   298b2:	2100      	movs	r1, #0
   298b4:	5499      	strb	r1, [r3, r2]
   298b6:	687b      	ldr	r3, [r7, #4]
   298b8:	2254      	movs	r2, #84	; 0x54
   298ba:	2100      	movs	r1, #0
   298bc:	5499      	strb	r1, [r3, r2]
   298be:	687b      	ldr	r3, [r7, #4]
   298c0:	2255      	movs	r2, #85	; 0x55
   298c2:	2100      	movs	r1, #0
   298c4:	5499      	strb	r1, [r3, r2]
   298c6:	687b      	ldr	r3, [r7, #4]
   298c8:	2256      	movs	r2, #86	; 0x56
   298ca:	2100      	movs	r1, #0
   298cc:	5499      	strb	r1, [r3, r2]
   298ce:	687b      	ldr	r3, [r7, #4]
   298d0:	2257      	movs	r2, #87	; 0x57
   298d2:	2100      	movs	r1, #0
   298d4:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   298d6:	687b      	ldr	r3, [r7, #4]
   298d8:	2298      	movs	r2, #152	; 0x98
   298da:	2100      	movs	r1, #0
   298dc:	5499      	strb	r1, [r3, r2]
   298de:	687b      	ldr	r3, [r7, #4]
   298e0:	2200      	movs	r2, #0
   298e2:	659a      	str	r2, [r3, #88]	; 0x58
   298e4:	687b      	ldr	r3, [r7, #4]
   298e6:	2200      	movs	r2, #0
   298e8:	679a      	str	r2, [r3, #120]	; 0x78
   298ea:	687b      	ldr	r3, [r7, #4]
   298ec:	2299      	movs	r2, #153	; 0x99
   298ee:	2100      	movs	r1, #0
   298f0:	5499      	strb	r1, [r3, r2]
   298f2:	687b      	ldr	r3, [r7, #4]
   298f4:	2200      	movs	r2, #0
   298f6:	65da      	str	r2, [r3, #92]	; 0x5c
   298f8:	687b      	ldr	r3, [r7, #4]
   298fa:	2200      	movs	r2, #0
   298fc:	67da      	str	r2, [r3, #124]	; 0x7c
   298fe:	687b      	ldr	r3, [r7, #4]
   29900:	229a      	movs	r2, #154	; 0x9a
   29902:	2100      	movs	r1, #0
   29904:	5499      	strb	r1, [r3, r2]
   29906:	687b      	ldr	r3, [r7, #4]
   29908:	2200      	movs	r2, #0
   2990a:	661a      	str	r2, [r3, #96]	; 0x60
   2990c:	687b      	ldr	r3, [r7, #4]
   2990e:	2280      	movs	r2, #128	; 0x80
   29910:	2100      	movs	r1, #0
   29912:	5099      	str	r1, [r3, r2]
   29914:	687b      	ldr	r3, [r7, #4]
   29916:	229b      	movs	r2, #155	; 0x9b
   29918:	2100      	movs	r1, #0
   2991a:	5499      	strb	r1, [r3, r2]
   2991c:	687b      	ldr	r3, [r7, #4]
   2991e:	2200      	movs	r2, #0
   29920:	665a      	str	r2, [r3, #100]	; 0x64
   29922:	687b      	ldr	r3, [r7, #4]
   29924:	2284      	movs	r2, #132	; 0x84
   29926:	2100      	movs	r1, #0
   29928:	5099      	str	r1, [r3, r2]
   2992a:	687b      	ldr	r3, [r7, #4]
   2992c:	229c      	movs	r2, #156	; 0x9c
   2992e:	2100      	movs	r1, #0
   29930:	5499      	strb	r1, [r3, r2]
   29932:	687b      	ldr	r3, [r7, #4]
   29934:	2200      	movs	r2, #0
   29936:	669a      	str	r2, [r3, #104]	; 0x68
   29938:	687b      	ldr	r3, [r7, #4]
   2993a:	2288      	movs	r2, #136	; 0x88
   2993c:	2100      	movs	r1, #0
   2993e:	5099      	str	r1, [r3, r2]
   29940:	687b      	ldr	r3, [r7, #4]
   29942:	229d      	movs	r2, #157	; 0x9d
   29944:	2100      	movs	r1, #0
   29946:	5499      	strb	r1, [r3, r2]
   29948:	687b      	ldr	r3, [r7, #4]
   2994a:	2200      	movs	r2, #0
   2994c:	66da      	str	r2, [r3, #108]	; 0x6c
   2994e:	687b      	ldr	r3, [r7, #4]
   29950:	228c      	movs	r2, #140	; 0x8c
   29952:	2100      	movs	r1, #0
   29954:	5099      	str	r1, [r3, r2]
   29956:	687b      	ldr	r3, [r7, #4]
   29958:	229e      	movs	r2, #158	; 0x9e
   2995a:	2100      	movs	r1, #0
   2995c:	5499      	strb	r1, [r3, r2]
   2995e:	687b      	ldr	r3, [r7, #4]
   29960:	2200      	movs	r2, #0
   29962:	671a      	str	r2, [r3, #112]	; 0x70
   29964:	687b      	ldr	r3, [r7, #4]
   29966:	2290      	movs	r2, #144	; 0x90
   29968:	2100      	movs	r1, #0
   2996a:	5099      	str	r1, [r3, r2]
   2996c:	687b      	ldr	r3, [r7, #4]
   2996e:	229f      	movs	r2, #159	; 0x9f
   29970:	2100      	movs	r1, #0
   29972:	5499      	strb	r1, [r3, r2]
   29974:	687b      	ldr	r3, [r7, #4]
   29976:	2200      	movs	r2, #0
   29978:	675a      	str	r2, [r3, #116]	; 0x74
   2997a:	687b      	ldr	r3, [r7, #4]
   2997c:	2294      	movs	r2, #148	; 0x94
   2997e:	2100      	movs	r1, #0
   29980:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   29982:	687b      	ldr	r3, [r7, #4]
   29984:	22a0      	movs	r2, #160	; 0xa0
   29986:	2101      	movs	r1, #1
   29988:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2998a:	687b      	ldr	r3, [r7, #4]
   2998c:	22a1      	movs	r2, #161	; 0xa1
   2998e:	2100      	movs	r1, #0
   29990:	5499      	strb	r1, [r3, r2]
}
   29992:	46c0      	nop			; (mov r8, r8)
   29994:	46bd      	mov	sp, r7
   29996:	b005      	add	sp, #20
   29998:	bd90      	pop	{r4, r7, pc}
   2999a:	46c0      	nop			; (mov r8, r8)
   2999c:	00029699 	.word	0x00029699
   299a0:	000383b4 	.word	0x000383b4

000299a4 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   299a4:	b580      	push	{r7, lr}
   299a6:	b086      	sub	sp, #24
   299a8:	af00      	add	r7, sp, #0
   299aa:	60b9      	str	r1, [r7, #8]
   299ac:	607a      	str	r2, [r7, #4]
   299ae:	230f      	movs	r3, #15
   299b0:	18fb      	adds	r3, r7, r3
   299b2:	1c02      	adds	r2, r0, #0
   299b4:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   299b6:	2300      	movs	r3, #0
   299b8:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   299ba:	2300      	movs	r3, #0
   299bc:	613b      	str	r3, [r7, #16]
   299be:	e01d      	b.n	299fc <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   299c0:	68ba      	ldr	r2, [r7, #8]
   299c2:	693b      	ldr	r3, [r7, #16]
   299c4:	18d3      	adds	r3, r2, r3
   299c6:	3310      	adds	r3, #16
   299c8:	781b      	ldrb	r3, [r3, #0]
   299ca:	2b01      	cmp	r3, #1
   299cc:	d113      	bne.n	299f6 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   299ce:	230f      	movs	r3, #15
   299d0:	18fb      	adds	r3, r7, r3
   299d2:	781b      	ldrb	r3, [r3, #0]
   299d4:	4a1b      	ldr	r2, [pc, #108]	; (29a44 <_tcc_build_ctrla+0xa0>)
   299d6:	5cd3      	ldrb	r3, [r2, r3]
   299d8:	001a      	movs	r2, r3
   299da:	693b      	ldr	r3, [r7, #16]
   299dc:	429a      	cmp	r2, r3
   299de:	da01      	bge.n	299e4 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   299e0:	2317      	movs	r3, #23
   299e2:	e02a      	b.n	29a3a <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   299e4:	2380      	movs	r3, #128	; 0x80
   299e6:	045a      	lsls	r2, r3, #17
   299e8:	693b      	ldr	r3, [r7, #16]
   299ea:	409a      	lsls	r2, r3
   299ec:	0013      	movs	r3, r2
   299ee:	001a      	movs	r2, r3
   299f0:	697b      	ldr	r3, [r7, #20]
   299f2:	4313      	orrs	r3, r2
   299f4:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   299f6:	693b      	ldr	r3, [r7, #16]
   299f8:	3301      	adds	r3, #1
   299fa:	613b      	str	r3, [r7, #16]
   299fc:	693b      	ldr	r3, [r7, #16]
   299fe:	2b03      	cmp	r3, #3
   29a00:	ddde      	ble.n	299c0 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   29a02:	68bb      	ldr	r3, [r7, #8]
   29a04:	22a1      	movs	r2, #161	; 0xa1
   29a06:	5c9b      	ldrb	r3, [r3, r2]
   29a08:	2b00      	cmp	r3, #0
   29a0a:	d004      	beq.n	29a16 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   29a0c:	697b      	ldr	r3, [r7, #20]
   29a0e:	2280      	movs	r2, #128	; 0x80
   29a10:	0112      	lsls	r2, r2, #4
   29a12:	4313      	orrs	r3, r2
   29a14:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   29a16:	68bb      	ldr	r3, [r7, #8]
   29a18:	7b1b      	ldrb	r3, [r3, #12]
   29a1a:	031b      	lsls	r3, r3, #12
   29a1c:	001a      	movs	r2, r3
   29a1e:	697b      	ldr	r3, [r7, #20]
   29a20:	4313      	orrs	r3, r2
   29a22:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   29a24:	68bb      	ldr	r3, [r7, #8]
   29a26:	7adb      	ldrb	r3, [r3, #11]
   29a28:	021b      	lsls	r3, r3, #8
   29a2a:	001a      	movs	r2, r3
   29a2c:	697b      	ldr	r3, [r7, #20]
   29a2e:	4313      	orrs	r3, r2
   29a30:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   29a32:	687b      	ldr	r3, [r7, #4]
   29a34:	697a      	ldr	r2, [r7, #20]
   29a36:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   29a38:	2300      	movs	r3, #0
}
   29a3a:	0018      	movs	r0, r3
   29a3c:	46bd      	mov	sp, r7
   29a3e:	b006      	add	sp, #24
   29a40:	bd80      	pop	{r7, pc}
   29a42:	46c0      	nop			; (mov r8, r8)
   29a44:	000383c0 	.word	0x000383c0

00029a48 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   29a48:	b580      	push	{r7, lr}
   29a4a:	b086      	sub	sp, #24
   29a4c:	af00      	add	r7, sp, #0
   29a4e:	60b9      	str	r1, [r7, #8]
   29a50:	607a      	str	r2, [r7, #4]
   29a52:	230f      	movs	r3, #15
   29a54:	18fb      	adds	r3, r7, r3
   29a56:	1c02      	adds	r2, r0, #0
   29a58:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   29a5a:	2317      	movs	r3, #23
   29a5c:	18fb      	adds	r3, r7, r3
   29a5e:	2200      	movs	r2, #0
   29a60:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   29a62:	68bb      	ldr	r3, [r7, #8]
   29a64:	7a1b      	ldrb	r3, [r3, #8]
   29a66:	2b00      	cmp	r3, #0
   29a68:	d007      	beq.n	29a7a <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   29a6a:	2317      	movs	r3, #23
   29a6c:	18fb      	adds	r3, r7, r3
   29a6e:	2217      	movs	r2, #23
   29a70:	18ba      	adds	r2, r7, r2
   29a72:	7812      	ldrb	r2, [r2, #0]
   29a74:	2104      	movs	r1, #4
   29a76:	430a      	orrs	r2, r1
   29a78:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   29a7a:	68bb      	ldr	r3, [r7, #8]
   29a7c:	7a5b      	ldrb	r3, [r3, #9]
   29a7e:	2b01      	cmp	r3, #1
   29a80:	d107      	bne.n	29a92 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   29a82:	2317      	movs	r3, #23
   29a84:	18fb      	adds	r3, r7, r3
   29a86:	2217      	movs	r2, #23
   29a88:	18ba      	adds	r2, r7, r2
   29a8a:	7812      	ldrb	r2, [r2, #0]
   29a8c:	2101      	movs	r1, #1
   29a8e:	430a      	orrs	r2, r1
   29a90:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   29a92:	687b      	ldr	r3, [r7, #4]
   29a94:	2217      	movs	r2, #23
   29a96:	18ba      	adds	r2, r7, r2
   29a98:	7812      	ldrb	r2, [r2, #0]
   29a9a:	701a      	strb	r2, [r3, #0]
}
   29a9c:	46c0      	nop			; (mov r8, r8)
   29a9e:	46bd      	mov	sp, r7
   29aa0:	b006      	add	sp, #24
   29aa2:	bd80      	pop	{r7, pc}

00029aa4 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   29aa4:	b580      	push	{r7, lr}
   29aa6:	b088      	sub	sp, #32
   29aa8:	af00      	add	r7, sp, #0
   29aaa:	60b9      	str	r1, [r7, #8]
   29aac:	607a      	str	r2, [r7, #4]
   29aae:	230f      	movs	r3, #15
   29ab0:	18fb      	adds	r3, r7, r3
   29ab2:	1c02      	adds	r2, r0, #0
   29ab4:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   29ab6:	230f      	movs	r3, #15
   29ab8:	18fb      	adds	r3, r7, r3
   29aba:	781a      	ldrb	r2, [r3, #0]
   29abc:	231b      	movs	r3, #27
   29abe:	18fb      	adds	r3, r7, r3
   29ac0:	493e      	ldr	r1, [pc, #248]	; (29bbc <_tcc_build_faults+0x118>)
   29ac2:	5c8a      	ldrb	r2, [r1, r2]
   29ac4:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   29ac6:	2300      	movs	r3, #0
   29ac8:	61fb      	str	r3, [r7, #28]
   29aca:	e06e      	b.n	29baa <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   29acc:	69fa      	ldr	r2, [r7, #28]
   29ace:	0013      	movs	r3, r2
   29ad0:	009b      	lsls	r3, r3, #2
   29ad2:	189b      	adds	r3, r3, r2
   29ad4:	005b      	lsls	r3, r3, #1
   29ad6:	3328      	adds	r3, #40	; 0x28
   29ad8:	68ba      	ldr	r2, [r7, #8]
   29ada:	18d3      	adds	r3, r2, r3
   29adc:	3304      	adds	r3, #4
   29ade:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   29ae0:	697b      	ldr	r3, [r7, #20]
   29ae2:	7a5b      	ldrb	r3, [r3, #9]
   29ae4:	221b      	movs	r2, #27
   29ae6:	18ba      	adds	r2, r7, r2
   29ae8:	7812      	ldrb	r2, [r2, #0]
   29aea:	429a      	cmp	r2, r3
   29aec:	d801      	bhi.n	29af2 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   29aee:	2317      	movs	r3, #23
   29af0:	e05f      	b.n	29bb2 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   29af2:	697b      	ldr	r3, [r7, #20]
   29af4:	781b      	ldrb	r3, [r3, #0]
   29af6:	2b0f      	cmp	r3, #15
   29af8:	d901      	bls.n	29afe <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   29afa:	2317      	movs	r3, #23
   29afc:	e059      	b.n	29bb2 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   29afe:	697b      	ldr	r3, [r7, #20]
   29b00:	781b      	ldrb	r3, [r3, #0]
   29b02:	061b      	lsls	r3, r3, #24
   29b04:	001a      	movs	r2, r3
   29b06:	23f0      	movs	r3, #240	; 0xf0
   29b08:	051b      	lsls	r3, r3, #20
   29b0a:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   29b0c:	697b      	ldr	r3, [r7, #20]
   29b0e:	785b      	ldrb	r3, [r3, #1]
   29b10:	041b      	lsls	r3, r3, #16
   29b12:	0019      	movs	r1, r3
   29b14:	23ff      	movs	r3, #255	; 0xff
   29b16:	041b      	lsls	r3, r3, #16
   29b18:	400b      	ands	r3, r1
   29b1a:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   29b1c:	697b      	ldr	r3, [r7, #20]
   29b1e:	789b      	ldrb	r3, [r3, #2]
   29b20:	2b00      	cmp	r3, #0
   29b22:	d001      	beq.n	29b28 <_tcc_build_faults+0x84>
   29b24:	2380      	movs	r3, #128	; 0x80
   29b26:	e000      	b.n	29b2a <_tcc_build_faults+0x86>
   29b28:	2300      	movs	r3, #0
   29b2a:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   29b2c:	697b      	ldr	r3, [r7, #20]
   29b2e:	78db      	ldrb	r3, [r3, #3]
   29b30:	2b00      	cmp	r3, #0
   29b32:	d001      	beq.n	29b38 <_tcc_build_faults+0x94>
   29b34:	2308      	movs	r3, #8
   29b36:	e000      	b.n	29b3a <_tcc_build_faults+0x96>
   29b38:	2300      	movs	r3, #0
   29b3a:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   29b3c:	697b      	ldr	r3, [r7, #20]
   29b3e:	791b      	ldrb	r3, [r3, #4]
   29b40:	2b00      	cmp	r3, #0
   29b42:	d001      	beq.n	29b48 <_tcc_build_faults+0xa4>
   29b44:	2310      	movs	r3, #16
   29b46:	e000      	b.n	29b4a <_tcc_build_faults+0xa6>
   29b48:	2300      	movs	r3, #0
   29b4a:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   29b4c:	697b      	ldr	r3, [r7, #20]
   29b4e:	795b      	ldrb	r3, [r3, #5]
   29b50:	0019      	movs	r1, r3
   29b52:	2303      	movs	r3, #3
   29b54:	400b      	ands	r3, r1
   29b56:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   29b58:	697b      	ldr	r3, [r7, #20]
   29b5a:	799b      	ldrb	r3, [r3, #6]
   29b5c:	015b      	lsls	r3, r3, #5
   29b5e:	0019      	movs	r1, r3
   29b60:	2360      	movs	r3, #96	; 0x60
   29b62:	400b      	ands	r3, r1
   29b64:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   29b66:	697b      	ldr	r3, [r7, #20]
   29b68:	79db      	ldrb	r3, [r3, #7]
   29b6a:	021b      	lsls	r3, r3, #8
   29b6c:	0019      	movs	r1, r3
   29b6e:	23c0      	movs	r3, #192	; 0xc0
   29b70:	009b      	lsls	r3, r3, #2
   29b72:	400b      	ands	r3, r1
   29b74:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   29b76:	697b      	ldr	r3, [r7, #20]
   29b78:	7a1b      	ldrb	r3, [r3, #8]
   29b7a:	031b      	lsls	r3, r3, #12
   29b7c:	0019      	movs	r1, r3
   29b7e:	23e0      	movs	r3, #224	; 0xe0
   29b80:	01db      	lsls	r3, r3, #7
   29b82:	400b      	ands	r3, r1
   29b84:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   29b86:	697b      	ldr	r3, [r7, #20]
   29b88:	7a5b      	ldrb	r3, [r3, #9]
   29b8a:	029b      	lsls	r3, r3, #10
   29b8c:	0019      	movs	r1, r3
   29b8e:	23c0      	movs	r3, #192	; 0xc0
   29b90:	011b      	lsls	r3, r3, #4
   29b92:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   29b94:	4313      	orrs	r3, r2
   29b96:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   29b98:	69fb      	ldr	r3, [r7, #28]
   29b9a:	009b      	lsls	r3, r3, #2
   29b9c:	687a      	ldr	r2, [r7, #4]
   29b9e:	18d3      	adds	r3, r2, r3
   29ba0:	693a      	ldr	r2, [r7, #16]
   29ba2:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   29ba4:	69fb      	ldr	r3, [r7, #28]
   29ba6:	3301      	adds	r3, #1
   29ba8:	61fb      	str	r3, [r7, #28]
   29baa:	69fb      	ldr	r3, [r7, #28]
   29bac:	2b01      	cmp	r3, #1
   29bae:	dd8d      	ble.n	29acc <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   29bb0:	2300      	movs	r3, #0
}
   29bb2:	0018      	movs	r0, r3
   29bb4:	46bd      	mov	sp, r7
   29bb6:	b008      	add	sp, #32
   29bb8:	bd80      	pop	{r7, pc}
   29bba:	46c0      	nop			; (mov r8, r8)
   29bbc:	000383c0 	.word	0x000383c0

00029bc0 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   29bc0:	b580      	push	{r7, lr}
   29bc2:	b088      	sub	sp, #32
   29bc4:	af00      	add	r7, sp, #0
   29bc6:	60b9      	str	r1, [r7, #8]
   29bc8:	607a      	str	r2, [r7, #4]
   29bca:	230f      	movs	r3, #15
   29bcc:	18fb      	adds	r3, r7, r3
   29bce:	1c02      	adds	r2, r0, #0
   29bd0:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   29bd2:	230f      	movs	r3, #15
   29bd4:	18fb      	adds	r3, r7, r3
   29bd6:	781a      	ldrb	r2, [r3, #0]
   29bd8:	2317      	movs	r3, #23
   29bda:	18fb      	adds	r3, r7, r3
   29bdc:	492d      	ldr	r1, [pc, #180]	; (29c94 <_tcc_build_drvctrl+0xd4>)
   29bde:	5c8a      	ldrb	r2, [r1, r2]
   29be0:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   29be2:	2300      	movs	r3, #0
   29be4:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29be6:	2300      	movs	r3, #0
   29be8:	61fb      	str	r3, [r7, #28]
   29bea:	e048      	b.n	29c7e <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   29bec:	68ba      	ldr	r2, [r7, #8]
   29bee:	2150      	movs	r1, #80	; 0x50
   29bf0:	69fb      	ldr	r3, [r7, #28]
   29bf2:	18d3      	adds	r3, r2, r3
   29bf4:	185b      	adds	r3, r3, r1
   29bf6:	781b      	ldrb	r3, [r3, #0]
   29bf8:	2b00      	cmp	r3, #0
   29bfa:	d010      	beq.n	29c1e <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   29bfc:	2317      	movs	r3, #23
   29bfe:	18fb      	adds	r3, r7, r3
   29c00:	781a      	ldrb	r2, [r3, #0]
   29c02:	69fb      	ldr	r3, [r7, #28]
   29c04:	429a      	cmp	r2, r3
   29c06:	d801      	bhi.n	29c0c <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   29c08:	2317      	movs	r3, #23
   29c0a:	e03f      	b.n	29c8c <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   29c0c:	2380      	movs	r3, #128	; 0x80
   29c0e:	025a      	lsls	r2, r3, #9
   29c10:	69fb      	ldr	r3, [r7, #28]
   29c12:	409a      	lsls	r2, r3
   29c14:	0013      	movs	r3, r2
   29c16:	001a      	movs	r2, r3
   29c18:	69bb      	ldr	r3, [r7, #24]
   29c1a:	4313      	orrs	r3, r2
   29c1c:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   29c1e:	68ba      	ldr	r2, [r7, #8]
   29c20:	69fb      	ldr	r3, [r7, #28]
   29c22:	331c      	adds	r3, #28
   29c24:	005b      	lsls	r3, r3, #1
   29c26:	18d3      	adds	r3, r2, r3
   29c28:	3309      	adds	r3, #9
   29c2a:	781b      	ldrb	r3, [r3, #0]
   29c2c:	2b00      	cmp	r3, #0
   29c2e:	d023      	beq.n	29c78 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   29c30:	2317      	movs	r3, #23
   29c32:	18fb      	adds	r3, r7, r3
   29c34:	781a      	ldrb	r2, [r3, #0]
   29c36:	69fb      	ldr	r3, [r7, #28]
   29c38:	429a      	cmp	r2, r3
   29c3a:	d801      	bhi.n	29c40 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   29c3c:	2317      	movs	r3, #23
   29c3e:	e025      	b.n	29c8c <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   29c40:	68ba      	ldr	r2, [r7, #8]
   29c42:	69fb      	ldr	r3, [r7, #28]
   29c44:	331c      	adds	r3, #28
   29c46:	005b      	lsls	r3, r3, #1
   29c48:	18d3      	adds	r3, r2, r3
   29c4a:	3309      	adds	r3, #9
   29c4c:	781b      	ldrb	r3, [r3, #0]
   29c4e:	2b02      	cmp	r3, #2
   29c50:	d10a      	bne.n	29c68 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   29c52:	2302      	movs	r3, #2
   29c54:	33ff      	adds	r3, #255	; 0xff
   29c56:	001a      	movs	r2, r3
   29c58:	69fb      	ldr	r3, [r7, #28]
   29c5a:	409a      	lsls	r2, r3
   29c5c:	0013      	movs	r3, r2
   29c5e:	001a      	movs	r2, r3
   29c60:	69bb      	ldr	r3, [r7, #24]
   29c62:	4313      	orrs	r3, r2
   29c64:	61bb      	str	r3, [r7, #24]
   29c66:	e007      	b.n	29c78 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   29c68:	2201      	movs	r2, #1
   29c6a:	69fb      	ldr	r3, [r7, #28]
   29c6c:	409a      	lsls	r2, r3
   29c6e:	0013      	movs	r3, r2
   29c70:	001a      	movs	r2, r3
   29c72:	69bb      	ldr	r3, [r7, #24]
   29c74:	4313      	orrs	r3, r2
   29c76:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29c78:	69fb      	ldr	r3, [r7, #28]
   29c7a:	3301      	adds	r3, #1
   29c7c:	61fb      	str	r3, [r7, #28]
   29c7e:	69fb      	ldr	r3, [r7, #28]
   29c80:	2b07      	cmp	r3, #7
   29c82:	d9b3      	bls.n	29bec <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   29c84:	687b      	ldr	r3, [r7, #4]
   29c86:	69ba      	ldr	r2, [r7, #24]
   29c88:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   29c8a:	2300      	movs	r3, #0
}
   29c8c:	0018      	movs	r0, r3
   29c8e:	46bd      	mov	sp, r7
   29c90:	b008      	add	sp, #32
   29c92:	bd80      	pop	{r7, pc}
   29c94:	000383c4 	.word	0x000383c4

00029c98 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   29c98:	b580      	push	{r7, lr}
   29c9a:	b088      	sub	sp, #32
   29c9c:	af00      	add	r7, sp, #0
   29c9e:	60b9      	str	r1, [r7, #8]
   29ca0:	607a      	str	r2, [r7, #4]
   29ca2:	230f      	movs	r3, #15
   29ca4:	18fb      	adds	r3, r7, r3
   29ca6:	1c02      	adds	r2, r0, #0
   29ca8:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   29caa:	230f      	movs	r3, #15
   29cac:	18fb      	adds	r3, r7, r3
   29cae:	781a      	ldrb	r2, [r3, #0]
   29cb0:	2317      	movs	r3, #23
   29cb2:	18fb      	adds	r3, r7, r3
   29cb4:	491d      	ldr	r1, [pc, #116]	; (29d2c <_tcc_build_waves+0x94>)
   29cb6:	5c8a      	ldrb	r2, [r1, r2]
   29cb8:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   29cba:	68bb      	ldr	r3, [r7, #8]
   29cbc:	3310      	adds	r3, #16
   29cbe:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   29cc0:	693b      	ldr	r3, [r7, #16]
   29cc2:	7a5b      	ldrb	r3, [r3, #9]
   29cc4:	011b      	lsls	r3, r3, #4
   29cc6:	001a      	movs	r2, r3
   29cc8:	2330      	movs	r3, #48	; 0x30
   29cca:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   29ccc:	693b      	ldr	r3, [r7, #16]
   29cce:	7a1b      	ldrb	r3, [r3, #8]
   29cd0:	0019      	movs	r1, r3
   29cd2:	2307      	movs	r3, #7
   29cd4:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   29cd6:	4313      	orrs	r3, r2
   29cd8:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   29cda:	2300      	movs	r3, #0
   29cdc:	61fb      	str	r3, [r7, #28]
   29cde:	e01a      	b.n	29d16 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   29ce0:	693a      	ldr	r2, [r7, #16]
   29ce2:	69fb      	ldr	r3, [r7, #28]
   29ce4:	18d3      	adds	r3, r2, r3
   29ce6:	3304      	adds	r3, #4
   29ce8:	781b      	ldrb	r3, [r3, #0]
   29cea:	2b00      	cmp	r3, #0
   29cec:	d010      	beq.n	29d10 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   29cee:	2317      	movs	r3, #23
   29cf0:	18fb      	adds	r3, r7, r3
   29cf2:	781a      	ldrb	r2, [r3, #0]
   29cf4:	69fb      	ldr	r3, [r7, #28]
   29cf6:	429a      	cmp	r2, r3
   29cf8:	dc01      	bgt.n	29cfe <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   29cfa:	2317      	movs	r3, #23
   29cfc:	e012      	b.n	29d24 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   29cfe:	2380      	movs	r3, #128	; 0x80
   29d00:	025a      	lsls	r2, r3, #9
   29d02:	69fb      	ldr	r3, [r7, #28]
   29d04:	409a      	lsls	r2, r3
   29d06:	0013      	movs	r3, r2
   29d08:	001a      	movs	r2, r3
   29d0a:	69bb      	ldr	r3, [r7, #24]
   29d0c:	4313      	orrs	r3, r2
   29d0e:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   29d10:	69fb      	ldr	r3, [r7, #28]
   29d12:	3301      	adds	r3, #1
   29d14:	61fb      	str	r3, [r7, #28]
   29d16:	69fb      	ldr	r3, [r7, #28]
   29d18:	2b03      	cmp	r3, #3
   29d1a:	dde1      	ble.n	29ce0 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   29d1c:	687b      	ldr	r3, [r7, #4]
   29d1e:	69ba      	ldr	r2, [r7, #24]
   29d20:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   29d22:	2300      	movs	r3, #0
}
   29d24:	0018      	movs	r0, r3
   29d26:	46bd      	mov	sp, r7
   29d28:	b008      	add	sp, #32
   29d2a:	bd80      	pop	{r7, pc}
   29d2c:	000383c0 	.word	0x000383c0

00029d30 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   29d30:	b590      	push	{r4, r7, lr}
   29d32:	b091      	sub	sp, #68	; 0x44
   29d34:	af00      	add	r7, sp, #0
   29d36:	60f8      	str	r0, [r7, #12]
   29d38:	60b9      	str	r1, [r7, #8]
   29d3a:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   29d3c:	233b      	movs	r3, #59	; 0x3b
   29d3e:	18fc      	adds	r4, r7, r3
   29d40:	68bb      	ldr	r3, [r7, #8]
   29d42:	0018      	movs	r0, r3
   29d44:	4bc4      	ldr	r3, [pc, #784]	; (2a058 <tcc_init+0x328>)
   29d46:	4798      	blx	r3
   29d48:	0003      	movs	r3, r0
   29d4a:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   29d4c:	233b      	movs	r3, #59	; 0x3b
   29d4e:	18fb      	adds	r3, r7, r3
   29d50:	781a      	ldrb	r2, [r3, #0]
   29d52:	4bc2      	ldr	r3, [pc, #776]	; (2a05c <tcc_init+0x32c>)
   29d54:	0092      	lsls	r2, r2, #2
   29d56:	58d3      	ldr	r3, [r2, r3]
   29d58:	0019      	movs	r1, r3
   29d5a:	2002      	movs	r0, #2
   29d5c:	4bc0      	ldr	r3, [pc, #768]	; (2a060 <tcc_init+0x330>)
   29d5e:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   29d60:	68bb      	ldr	r3, [r7, #8]
   29d62:	681b      	ldr	r3, [r3, #0]
   29d64:	2202      	movs	r2, #2
   29d66:	4013      	ands	r3, r2
   29d68:	d001      	beq.n	29d6e <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   29d6a:	231c      	movs	r3, #28
   29d6c:	e1be      	b.n	2a0ec <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   29d6e:	68bb      	ldr	r3, [r7, #8]
   29d70:	681b      	ldr	r3, [r3, #0]
   29d72:	2201      	movs	r2, #1
   29d74:	4013      	ands	r3, r2
   29d76:	d001      	beq.n	29d7c <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   29d78:	231c      	movs	r3, #28
   29d7a:	e1b7      	b.n	2a0ec <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   29d7c:	233b      	movs	r3, #59	; 0x3b
   29d7e:	18fb      	adds	r3, r7, r3
   29d80:	781a      	ldrb	r2, [r3, #0]
   29d82:	4bb8      	ldr	r3, [pc, #736]	; (2a064 <tcc_init+0x334>)
   29d84:	0092      	lsls	r2, r2, #2
   29d86:	58d3      	ldr	r3, [r2, r3]
   29d88:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   29d8a:	687b      	ldr	r3, [r7, #4]
   29d8c:	681a      	ldr	r2, [r3, #0]
   29d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29d90:	429a      	cmp	r2, r3
   29d92:	d804      	bhi.n	29d9e <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   29d94:	687b      	ldr	r3, [r7, #4]
   29d96:	685a      	ldr	r2, [r3, #4]
   29d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29d9a:	429a      	cmp	r2, r3
   29d9c:	d901      	bls.n	29da2 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   29d9e:	2317      	movs	r3, #23
   29da0:	e1a4      	b.n	2a0ec <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29da2:	2300      	movs	r3, #0
   29da4:	63fb      	str	r3, [r7, #60]	; 0x3c
   29da6:	e00e      	b.n	29dc6 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   29da8:	687a      	ldr	r2, [r7, #4]
   29daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29dac:	3306      	adds	r3, #6
   29dae:	009b      	lsls	r3, r3, #2
   29db0:	18d3      	adds	r3, r2, r3
   29db2:	3304      	adds	r3, #4
   29db4:	681a      	ldr	r2, [r3, #0]
   29db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29db8:	429a      	cmp	r2, r3
   29dba:	d901      	bls.n	29dc0 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   29dbc:	2317      	movs	r3, #23
   29dbe:	e195      	b.n	2a0ec <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29dc2:	3301      	adds	r3, #1
   29dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   29dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29dc8:	2b03      	cmp	r3, #3
   29dca:	dded      	ble.n	29da8 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29dcc:	2300      	movs	r3, #0
   29dce:	63fb      	str	r3, [r7, #60]	; 0x3c
   29dd0:	e019      	b.n	29e06 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   29dd2:	687a      	ldr	r2, [r7, #4]
   29dd4:	2198      	movs	r1, #152	; 0x98
   29dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29dd8:	18d3      	adds	r3, r2, r3
   29dda:	185b      	adds	r3, r3, r1
   29ddc:	781b      	ldrb	r3, [r3, #0]
   29dde:	2201      	movs	r2, #1
   29de0:	4053      	eors	r3, r2
   29de2:	b2db      	uxtb	r3, r3
   29de4:	2b00      	cmp	r3, #0
   29de6:	d10a      	bne.n	29dfe <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   29de8:	233b      	movs	r3, #59	; 0x3b
   29dea:	18fb      	adds	r3, r7, r3
   29dec:	781b      	ldrb	r3, [r3, #0]
   29dee:	4a9e      	ldr	r2, [pc, #632]	; (2a068 <tcc_init+0x338>)
   29df0:	5cd3      	ldrb	r3, [r2, r3]
   29df2:	001a      	movs	r2, r3
   29df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29df6:	429a      	cmp	r2, r3
   29df8:	dc02      	bgt.n	29e00 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   29dfa:	2317      	movs	r3, #23
   29dfc:	e176      	b.n	2a0ec <tcc_init+0x3bc>
			continue;
   29dfe:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29e02:	3301      	adds	r3, #1
   29e04:	63fb      	str	r3, [r7, #60]	; 0x3c
   29e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29e08:	2b07      	cmp	r3, #7
   29e0a:	dde2      	ble.n	29dd2 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   29e0c:	2300      	movs	r3, #0
   29e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   29e10:	2333      	movs	r3, #51	; 0x33
   29e12:	18fc      	adds	r4, r7, r3
   29e14:	232c      	movs	r3, #44	; 0x2c
   29e16:	18fa      	adds	r2, r7, r3
   29e18:	6879      	ldr	r1, [r7, #4]
   29e1a:	233b      	movs	r3, #59	; 0x3b
   29e1c:	18fb      	adds	r3, r7, r3
   29e1e:	781b      	ldrb	r3, [r3, #0]
   29e20:	0018      	movs	r0, r3
   29e22:	4b92      	ldr	r3, [pc, #584]	; (2a06c <tcc_init+0x33c>)
   29e24:	4798      	blx	r3
   29e26:	0003      	movs	r3, r0
   29e28:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29e2a:	2333      	movs	r3, #51	; 0x33
   29e2c:	18fb      	adds	r3, r7, r3
   29e2e:	781b      	ldrb	r3, [r3, #0]
   29e30:	2b00      	cmp	r3, #0
   29e32:	d003      	beq.n	29e3c <tcc_init+0x10c>
		return status;
   29e34:	2333      	movs	r3, #51	; 0x33
   29e36:	18fb      	adds	r3, r7, r3
   29e38:	781b      	ldrb	r3, [r3, #0]
   29e3a:	e157      	b.n	2a0ec <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   29e3c:	232b      	movs	r3, #43	; 0x2b
   29e3e:	18fa      	adds	r2, r7, r3
   29e40:	6879      	ldr	r1, [r7, #4]
   29e42:	233b      	movs	r3, #59	; 0x3b
   29e44:	18fb      	adds	r3, r7, r3
   29e46:	781b      	ldrb	r3, [r3, #0]
   29e48:	0018      	movs	r0, r3
   29e4a:	4b89      	ldr	r3, [pc, #548]	; (2a070 <tcc_init+0x340>)
   29e4c:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   29e4e:	2333      	movs	r3, #51	; 0x33
   29e50:	18fc      	adds	r4, r7, r3
   29e52:	2320      	movs	r3, #32
   29e54:	18fa      	adds	r2, r7, r3
   29e56:	6879      	ldr	r1, [r7, #4]
   29e58:	233b      	movs	r3, #59	; 0x3b
   29e5a:	18fb      	adds	r3, r7, r3
   29e5c:	781b      	ldrb	r3, [r3, #0]
   29e5e:	0018      	movs	r0, r3
   29e60:	4b84      	ldr	r3, [pc, #528]	; (2a074 <tcc_init+0x344>)
   29e62:	4798      	blx	r3
   29e64:	0003      	movs	r3, r0
   29e66:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29e68:	2333      	movs	r3, #51	; 0x33
   29e6a:	18fb      	adds	r3, r7, r3
   29e6c:	781b      	ldrb	r3, [r3, #0]
   29e6e:	2b00      	cmp	r3, #0
   29e70:	d003      	beq.n	29e7a <tcc_init+0x14a>
		return status;
   29e72:	2333      	movs	r3, #51	; 0x33
   29e74:	18fb      	adds	r3, r7, r3
   29e76:	781b      	ldrb	r3, [r3, #0]
   29e78:	e138      	b.n	2a0ec <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   29e7a:	2300      	movs	r3, #0
   29e7c:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   29e7e:	2333      	movs	r3, #51	; 0x33
   29e80:	18fc      	adds	r4, r7, r3
   29e82:	231c      	movs	r3, #28
   29e84:	18fa      	adds	r2, r7, r3
   29e86:	6879      	ldr	r1, [r7, #4]
   29e88:	233b      	movs	r3, #59	; 0x3b
   29e8a:	18fb      	adds	r3, r7, r3
   29e8c:	781b      	ldrb	r3, [r3, #0]
   29e8e:	0018      	movs	r0, r3
   29e90:	4b79      	ldr	r3, [pc, #484]	; (2a078 <tcc_init+0x348>)
   29e92:	4798      	blx	r3
   29e94:	0003      	movs	r3, r0
   29e96:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29e98:	2333      	movs	r3, #51	; 0x33
   29e9a:	18fb      	adds	r3, r7, r3
   29e9c:	781b      	ldrb	r3, [r3, #0]
   29e9e:	2b00      	cmp	r3, #0
   29ea0:	d003      	beq.n	29eaa <tcc_init+0x17a>
		return status;
   29ea2:	2333      	movs	r3, #51	; 0x33
   29ea4:	18fb      	adds	r3, r7, r3
   29ea6:	781b      	ldrb	r3, [r3, #0]
   29ea8:	e120      	b.n	2a0ec <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   29eaa:	2333      	movs	r3, #51	; 0x33
   29eac:	18fc      	adds	r4, r7, r3
   29eae:	2318      	movs	r3, #24
   29eb0:	18fa      	adds	r2, r7, r3
   29eb2:	6879      	ldr	r1, [r7, #4]
   29eb4:	233b      	movs	r3, #59	; 0x3b
   29eb6:	18fb      	adds	r3, r7, r3
   29eb8:	781b      	ldrb	r3, [r3, #0]
   29eba:	0018      	movs	r0, r3
   29ebc:	4b6f      	ldr	r3, [pc, #444]	; (2a07c <tcc_init+0x34c>)
   29ebe:	4798      	blx	r3
   29ec0:	0003      	movs	r3, r0
   29ec2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29ec4:	2333      	movs	r3, #51	; 0x33
   29ec6:	18fb      	adds	r3, r7, r3
   29ec8:	781b      	ldrb	r3, [r3, #0]
   29eca:	2b00      	cmp	r3, #0
   29ecc:	d003      	beq.n	29ed6 <tcc_init+0x1a6>
		return status;
   29ece:	2333      	movs	r3, #51	; 0x33
   29ed0:	18fb      	adds	r3, r7, r3
   29ed2:	781b      	ldrb	r3, [r3, #0]
   29ed4:	e10a      	b.n	2a0ec <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   29ed6:	2300      	movs	r3, #0
   29ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   29eda:	e009      	b.n	29ef0 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   29edc:	68fa      	ldr	r2, [r7, #12]
   29ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29ee0:	009b      	lsls	r3, r3, #2
   29ee2:	18d3      	adds	r3, r2, r3
   29ee4:	3304      	adds	r3, #4
   29ee6:	2200      	movs	r2, #0
   29ee8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   29eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29eec:	3301      	adds	r3, #1
   29eee:	63fb      	str	r3, [r7, #60]	; 0x3c
   29ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29ef2:	2b0b      	cmp	r3, #11
   29ef4:	ddf2      	ble.n	29edc <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   29ef6:	68fb      	ldr	r3, [r7, #12]
   29ef8:	2200      	movs	r2, #0
   29efa:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   29efc:	68fb      	ldr	r3, [r7, #12]
   29efe:	2200      	movs	r2, #0
   29f00:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   29f02:	233b      	movs	r3, #59	; 0x3b
   29f04:	18fb      	adds	r3, r7, r3
   29f06:	781a      	ldrb	r2, [r3, #0]
   29f08:	4b5d      	ldr	r3, [pc, #372]	; (2a080 <tcc_init+0x350>)
   29f0a:	0092      	lsls	r2, r2, #2
   29f0c:	68f9      	ldr	r1, [r7, #12]
   29f0e:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   29f10:	68fb      	ldr	r3, [r7, #12]
   29f12:	68ba      	ldr	r2, [r7, #8]
   29f14:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   29f16:	687b      	ldr	r3, [r7, #4]
   29f18:	22a0      	movs	r2, #160	; 0xa0
   29f1a:	5c99      	ldrb	r1, [r3, r2]
   29f1c:	68fb      	ldr	r3, [r7, #12]
   29f1e:	223c      	movs	r2, #60	; 0x3c
   29f20:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   29f22:	2314      	movs	r3, #20
   29f24:	18fb      	adds	r3, r7, r3
   29f26:	0018      	movs	r0, r3
   29f28:	4b56      	ldr	r3, [pc, #344]	; (2a084 <tcc_init+0x354>)
   29f2a:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   29f2c:	687b      	ldr	r3, [r7, #4]
   29f2e:	7a9a      	ldrb	r2, [r3, #10]
   29f30:	2314      	movs	r3, #20
   29f32:	18fb      	adds	r3, r7, r3
   29f34:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   29f36:	233b      	movs	r3, #59	; 0x3b
   29f38:	18fb      	adds	r3, r7, r3
   29f3a:	781b      	ldrb	r3, [r3, #0]
   29f3c:	4a52      	ldr	r2, [pc, #328]	; (2a088 <tcc_init+0x358>)
   29f3e:	5cd3      	ldrb	r3, [r2, r3]
   29f40:	2214      	movs	r2, #20
   29f42:	18ba      	adds	r2, r7, r2
   29f44:	0011      	movs	r1, r2
   29f46:	0018      	movs	r0, r3
   29f48:	4b50      	ldr	r3, [pc, #320]	; (2a08c <tcc_init+0x35c>)
   29f4a:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   29f4c:	233b      	movs	r3, #59	; 0x3b
   29f4e:	18fb      	adds	r3, r7, r3
   29f50:	781b      	ldrb	r3, [r3, #0]
   29f52:	4a4d      	ldr	r2, [pc, #308]	; (2a088 <tcc_init+0x358>)
   29f54:	5cd3      	ldrb	r3, [r2, r3]
   29f56:	0018      	movs	r0, r3
   29f58:	4b4d      	ldr	r3, [pc, #308]	; (2a090 <tcc_init+0x360>)
   29f5a:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   29f5c:	2300      	movs	r3, #0
   29f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   29f60:	e02d      	b.n	29fbe <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   29f62:	687a      	ldr	r2, [r7, #4]
   29f64:	2198      	movs	r1, #152	; 0x98
   29f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29f68:	18d3      	adds	r3, r2, r3
   29f6a:	185b      	adds	r3, r3, r1
   29f6c:	781b      	ldrb	r3, [r3, #0]
   29f6e:	2201      	movs	r2, #1
   29f70:	4053      	eors	r3, r2
   29f72:	b2db      	uxtb	r3, r3
   29f74:	2b00      	cmp	r3, #0
   29f76:	d11e      	bne.n	29fb6 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   29f78:	2310      	movs	r3, #16
   29f7a:	18fb      	adds	r3, r7, r3
   29f7c:	0018      	movs	r0, r3
   29f7e:	4b45      	ldr	r3, [pc, #276]	; (2a094 <tcc_init+0x364>)
   29f80:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   29f82:	687b      	ldr	r3, [r7, #4]
   29f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29f86:	321e      	adds	r2, #30
   29f88:	0092      	lsls	r2, r2, #2
   29f8a:	58d3      	ldr	r3, [r2, r3]
   29f8c:	b2da      	uxtb	r2, r3
   29f8e:	2310      	movs	r3, #16
   29f90:	18fb      	adds	r3, r7, r3
   29f92:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   29f94:	2310      	movs	r3, #16
   29f96:	18fb      	adds	r3, r7, r3
   29f98:	2201      	movs	r2, #1
   29f9a:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   29f9c:	687b      	ldr	r3, [r7, #4]
   29f9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29fa0:	3216      	adds	r2, #22
   29fa2:	0092      	lsls	r2, r2, #2
   29fa4:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   29fa6:	b2db      	uxtb	r3, r3
   29fa8:	2210      	movs	r2, #16
   29faa:	18ba      	adds	r2, r7, r2
   29fac:	0011      	movs	r1, r2
   29fae:	0018      	movs	r0, r3
   29fb0:	4b39      	ldr	r3, [pc, #228]	; (2a098 <tcc_init+0x368>)
   29fb2:	4798      	blx	r3
   29fb4:	e000      	b.n	29fb8 <tcc_init+0x288>
			continue;
   29fb6:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   29fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29fba:	3301      	adds	r3, #1
   29fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   29fbe:	233b      	movs	r3, #59	; 0x3b
   29fc0:	18fb      	adds	r3, r7, r3
   29fc2:	781b      	ldrb	r3, [r3, #0]
   29fc4:	4a28      	ldr	r2, [pc, #160]	; (2a068 <tcc_init+0x338>)
   29fc6:	5cd3      	ldrb	r3, [r2, r3]
   29fc8:	001a      	movs	r2, r3
   29fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29fcc:	429a      	cmp	r2, r3
   29fce:	dcc8      	bgt.n	29f62 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   29fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   29fd2:	68bb      	ldr	r3, [r7, #8]
   29fd4:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   29fd6:	46c0      	nop			; (mov r8, r8)
   29fd8:	68bb      	ldr	r3, [r7, #8]
   29fda:	689b      	ldr	r3, [r3, #8]
   29fdc:	2204      	movs	r2, #4
   29fde:	4013      	ands	r3, r2
   29fe0:	d1fa      	bne.n	29fd8 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   29fe2:	68bb      	ldr	r3, [r7, #8]
   29fe4:	22ff      	movs	r2, #255	; 0xff
   29fe6:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   29fe8:	46c0      	nop			; (mov r8, r8)
   29fea:	68bb      	ldr	r3, [r7, #8]
   29fec:	689b      	ldr	r3, [r3, #8]
   29fee:	2204      	movs	r2, #4
   29ff0:	4013      	ands	r3, r2
   29ff2:	d1fa      	bne.n	29fea <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   29ff4:	232b      	movs	r3, #43	; 0x2b
   29ff6:	18fb      	adds	r3, r7, r3
   29ff8:	781a      	ldrb	r2, [r3, #0]
   29ffa:	68bb      	ldr	r3, [r7, #8]
   29ffc:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   29ffe:	2320      	movs	r3, #32
   2a000:	18fb      	adds	r3, r7, r3
   2a002:	681a      	ldr	r2, [r3, #0]
   2a004:	68bb      	ldr	r3, [r7, #8]
   2a006:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2a008:	2320      	movs	r3, #32
   2a00a:	18fb      	adds	r3, r7, r3
   2a00c:	685a      	ldr	r2, [r3, #4]
   2a00e:	68bb      	ldr	r3, [r7, #8]
   2a010:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2a012:	69fa      	ldr	r2, [r7, #28]
   2a014:	68bb      	ldr	r3, [r7, #8]
   2a016:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2a018:	46c0      	nop			; (mov r8, r8)
   2a01a:	68bb      	ldr	r3, [r7, #8]
   2a01c:	689b      	ldr	r3, [r3, #8]
   2a01e:	4a1f      	ldr	r2, [pc, #124]	; (2a09c <tcc_init+0x36c>)
   2a020:	4013      	ands	r3, r2
   2a022:	d1fa      	bne.n	2a01a <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2a024:	69ba      	ldr	r2, [r7, #24]
   2a026:	68bb      	ldr	r3, [r7, #8]
   2a028:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2a02a:	46c0      	nop			; (mov r8, r8)
   2a02c:	68bb      	ldr	r3, [r7, #8]
   2a02e:	689b      	ldr	r3, [r3, #8]
   2a030:	2210      	movs	r2, #16
   2a032:	4013      	ands	r3, r2
   2a034:	d1fa      	bne.n	2a02c <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2a036:	687b      	ldr	r3, [r7, #4]
   2a038:	681a      	ldr	r2, [r3, #0]
   2a03a:	68bb      	ldr	r3, [r7, #8]
   2a03c:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2a03e:	46c0      	nop			; (mov r8, r8)
   2a040:	68bb      	ldr	r3, [r7, #8]
   2a042:	689b      	ldr	r3, [r3, #8]
   2a044:	4a16      	ldr	r2, [pc, #88]	; (2a0a0 <tcc_init+0x370>)
   2a046:	4013      	ands	r3, r2
   2a048:	d1fa      	bne.n	2a040 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2a04a:	687b      	ldr	r3, [r7, #4]
   2a04c:	685a      	ldr	r2, [r3, #4]
   2a04e:	68bb      	ldr	r3, [r7, #8]
   2a050:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2a052:	2300      	movs	r3, #0
   2a054:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a056:	e03f      	b.n	2a0d8 <tcc_init+0x3a8>
   2a058:	00029699 	.word	0x00029699
   2a05c:	000383a8 	.word	0x000383a8
   2a060:	00029615 	.word	0x00029615
   2a064:	000383b4 	.word	0x000383b4
   2a068:	000383c4 	.word	0x000383c4
   2a06c:	000299a5 	.word	0x000299a5
   2a070:	00029a49 	.word	0x00029a49
   2a074:	00029aa5 	.word	0x00029aa5
   2a078:	00029bc1 	.word	0x00029bc1
   2a07c:	00029c99 	.word	0x00029c99
   2a080:	20005630 	.word	0x20005630
   2a084:	000295fd 	.word	0x000295fd
   2a088:	000383a4 	.word	0x000383a4
   2a08c:	00029215 	.word	0x00029215
   2a090:	00029259 	.word	0x00029259
   2a094:	00029671 	.word	0x00029671
   2a098:	00029575 	.word	0x00029575
   2a09c:	00020040 	.word	0x00020040
   2a0a0:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2a0a4:	46c0      	nop			; (mov r8, r8)
   2a0a6:	68bb      	ldr	r3, [r7, #8]
   2a0a8:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2a0aa:	4912      	ldr	r1, [pc, #72]	; (2a0f4 <tcc_init+0x3c4>)
   2a0ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a0ae:	4091      	lsls	r1, r2
   2a0b0:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2a0b2:	4013      	ands	r3, r2
   2a0b4:	d1f7      	bne.n	2a0a6 <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2a0b6:	687a      	ldr	r2, [r7, #4]
   2a0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a0ba:	3306      	adds	r3, #6
   2a0bc:	009b      	lsls	r3, r3, #2
   2a0be:	18d3      	adds	r3, r2, r3
   2a0c0:	3304      	adds	r3, #4
   2a0c2:	681a      	ldr	r2, [r3, #0]
   2a0c4:	68b9      	ldr	r1, [r7, #8]
   2a0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a0c8:	3310      	adds	r3, #16
   2a0ca:	009b      	lsls	r3, r3, #2
   2a0cc:	18cb      	adds	r3, r1, r3
   2a0ce:	3304      	adds	r3, #4
   2a0d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2a0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a0d4:	3301      	adds	r3, #1
   2a0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a0d8:	233b      	movs	r3, #59	; 0x3b
   2a0da:	18fb      	adds	r3, r7, r3
   2a0dc:	781b      	ldrb	r3, [r3, #0]
   2a0de:	4a06      	ldr	r2, [pc, #24]	; (2a0f8 <tcc_init+0x3c8>)
   2a0e0:	5cd3      	ldrb	r3, [r2, r3]
   2a0e2:	001a      	movs	r2, r3
   2a0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a0e6:	429a      	cmp	r2, r3
   2a0e8:	dcdc      	bgt.n	2a0a4 <tcc_init+0x374>
	}

	return STATUS_OK;
   2a0ea:	2300      	movs	r3, #0
}
   2a0ec:	0018      	movs	r0, r3
   2a0ee:	46bd      	mov	sp, r7
   2a0f0:	b011      	add	sp, #68	; 0x44
   2a0f2:	bd90      	pop	{r4, r7, pc}
   2a0f4:	00080100 	.word	0x00080100
   2a0f8:	000383c0 	.word	0x000383c0

0002a0fc <system_interrupt_enable>:
{
   2a0fc:	b580      	push	{r7, lr}
   2a0fe:	b082      	sub	sp, #8
   2a100:	af00      	add	r7, sp, #0
   2a102:	0002      	movs	r2, r0
   2a104:	1dfb      	adds	r3, r7, #7
   2a106:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2a108:	4b06      	ldr	r3, [pc, #24]	; (2a124 <system_interrupt_enable+0x28>)
   2a10a:	1dfa      	adds	r2, r7, #7
   2a10c:	7812      	ldrb	r2, [r2, #0]
   2a10e:	0011      	movs	r1, r2
   2a110:	221f      	movs	r2, #31
   2a112:	400a      	ands	r2, r1
   2a114:	2101      	movs	r1, #1
   2a116:	4091      	lsls	r1, r2
   2a118:	000a      	movs	r2, r1
   2a11a:	601a      	str	r2, [r3, #0]
}
   2a11c:	46c0      	nop			; (mov r8, r8)
   2a11e:	46bd      	mov	sp, r7
   2a120:	b002      	add	sp, #8
   2a122:	bd80      	pop	{r7, pc}
   2a124:	e000e100 	.word	0xe000e100

0002a128 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2a128:	b580      	push	{r7, lr}
   2a12a:	b082      	sub	sp, #8
   2a12c:	af00      	add	r7, sp, #0
   2a12e:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2a130:	4a04      	ldr	r2, [pc, #16]	; (2a144 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2a132:	687b      	ldr	r3, [r7, #4]
   2a134:	18d3      	adds	r3, r2, r3
   2a136:	781b      	ldrb	r3, [r3, #0]
   2a138:	b25b      	sxtb	r3, r3
}
   2a13a:	0018      	movs	r0, r3
   2a13c:	46bd      	mov	sp, r7
   2a13e:	b002      	add	sp, #8
   2a140:	bd80      	pop	{r7, pc}
   2a142:	46c0      	nop			; (mov r8, r8)
   2a144:	200000d0 	.word	0x200000d0

0002a148 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2a148:	b580      	push	{r7, lr}
   2a14a:	b084      	sub	sp, #16
   2a14c:	af00      	add	r7, sp, #0
   2a14e:	60f8      	str	r0, [r7, #12]
   2a150:	60b9      	str	r1, [r7, #8]
   2a152:	1dfb      	adds	r3, r7, #7
   2a154:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2a156:	1dfb      	adds	r3, r7, #7
   2a158:	781b      	ldrb	r3, [r3, #0]
   2a15a:	68fa      	ldr	r2, [r7, #12]
   2a15c:	009b      	lsls	r3, r3, #2
   2a15e:	18d3      	adds	r3, r2, r3
   2a160:	3304      	adds	r3, #4
   2a162:	68ba      	ldr	r2, [r7, #8]
   2a164:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2a166:	68fb      	ldr	r3, [r7, #12]
   2a168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2a16a:	1dfb      	adds	r3, r7, #7
   2a16c:	7819      	ldrb	r1, [r3, #0]
   2a16e:	4b05      	ldr	r3, [pc, #20]	; (2a184 <tcc_register_callback+0x3c>)
   2a170:	0089      	lsls	r1, r1, #2
   2a172:	58cb      	ldr	r3, [r1, r3]
   2a174:	431a      	orrs	r2, r3
   2a176:	68fb      	ldr	r3, [r7, #12]
   2a178:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2a17a:	2300      	movs	r3, #0
}
   2a17c:	0018      	movs	r0, r3
   2a17e:	46bd      	mov	sp, r7
   2a180:	b004      	add	sp, #16
   2a182:	bd80      	pop	{r7, pc}
   2a184:	000383c8 	.word	0x000383c8

0002a188 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2a188:	b580      	push	{r7, lr}
   2a18a:	b082      	sub	sp, #8
   2a18c:	af00      	add	r7, sp, #0
   2a18e:	6078      	str	r0, [r7, #4]
   2a190:	000a      	movs	r2, r1
   2a192:	1cfb      	adds	r3, r7, #3
   2a194:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2a196:	687b      	ldr	r3, [r7, #4]
   2a198:	681b      	ldr	r3, [r3, #0]
   2a19a:	0018      	movs	r0, r3
   2a19c:	4b0f      	ldr	r3, [pc, #60]	; (2a1dc <tcc_enable_callback+0x54>)
   2a19e:	4798      	blx	r3
   2a1a0:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2a1a2:	0018      	movs	r0, r3
   2a1a4:	4b0e      	ldr	r3, [pc, #56]	; (2a1e0 <tcc_enable_callback+0x58>)
   2a1a6:	4798      	blx	r3
   2a1a8:	0003      	movs	r3, r0
   2a1aa:	0018      	movs	r0, r3
   2a1ac:	4b0d      	ldr	r3, [pc, #52]	; (2a1e4 <tcc_enable_callback+0x5c>)
   2a1ae:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2a1b0:	687b      	ldr	r3, [r7, #4]
   2a1b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2a1b4:	1cfb      	adds	r3, r7, #3
   2a1b6:	7819      	ldrb	r1, [r3, #0]
   2a1b8:	4b0b      	ldr	r3, [pc, #44]	; (2a1e8 <tcc_enable_callback+0x60>)
   2a1ba:	0089      	lsls	r1, r1, #2
   2a1bc:	58cb      	ldr	r3, [r1, r3]
   2a1be:	431a      	orrs	r2, r3
   2a1c0:	687b      	ldr	r3, [r7, #4]
   2a1c2:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2a1c4:	687b      	ldr	r3, [r7, #4]
   2a1c6:	681b      	ldr	r3, [r3, #0]
   2a1c8:	1cfa      	adds	r2, r7, #3
   2a1ca:	7811      	ldrb	r1, [r2, #0]
   2a1cc:	4a06      	ldr	r2, [pc, #24]	; (2a1e8 <tcc_enable_callback+0x60>)
   2a1ce:	0089      	lsls	r1, r1, #2
   2a1d0:	588a      	ldr	r2, [r1, r2]
   2a1d2:	629a      	str	r2, [r3, #40]	; 0x28
}
   2a1d4:	46c0      	nop			; (mov r8, r8)
   2a1d6:	46bd      	mov	sp, r7
   2a1d8:	b002      	add	sp, #8
   2a1da:	bd80      	pop	{r7, pc}
   2a1dc:	00029699 	.word	0x00029699
   2a1e0:	0002a129 	.word	0x0002a129
   2a1e4:	0002a0fd 	.word	0x0002a0fd
   2a1e8:	000383c8 	.word	0x000383c8

0002a1ec <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2a1ec:	b580      	push	{r7, lr}
   2a1ee:	af00      	add	r7, sp, #0
   2a1f0:	2000      	movs	r0, #0
   2a1f2:	4b02      	ldr	r3, [pc, #8]	; (2a1fc <TCC0_Handler+0x10>)
   2a1f4:	4798      	blx	r3
   2a1f6:	46c0      	nop			; (mov r8, r8)
   2a1f8:	46bd      	mov	sp, r7
   2a1fa:	bd80      	pop	{r7, pc}
   2a1fc:	0002a229 	.word	0x0002a229

0002a200 <TCC1_Handler>:
   2a200:	b580      	push	{r7, lr}
   2a202:	af00      	add	r7, sp, #0
   2a204:	2001      	movs	r0, #1
   2a206:	4b02      	ldr	r3, [pc, #8]	; (2a210 <TCC1_Handler+0x10>)
   2a208:	4798      	blx	r3
   2a20a:	46c0      	nop			; (mov r8, r8)
   2a20c:	46bd      	mov	sp, r7
   2a20e:	bd80      	pop	{r7, pc}
   2a210:	0002a229 	.word	0x0002a229

0002a214 <TCC2_Handler>:
   2a214:	b580      	push	{r7, lr}
   2a216:	af00      	add	r7, sp, #0
   2a218:	2002      	movs	r0, #2
   2a21a:	4b02      	ldr	r3, [pc, #8]	; (2a224 <TCC2_Handler+0x10>)
   2a21c:	4798      	blx	r3
   2a21e:	46c0      	nop			; (mov r8, r8)
   2a220:	46bd      	mov	sp, r7
   2a222:	bd80      	pop	{r7, pc}
   2a224:	0002a229 	.word	0x0002a229

0002a228 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2a228:	b580      	push	{r7, lr}
   2a22a:	b086      	sub	sp, #24
   2a22c:	af00      	add	r7, sp, #0
   2a22e:	0002      	movs	r2, r0
   2a230:	1dfb      	adds	r3, r7, #7
   2a232:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2a234:	1dfb      	adds	r3, r7, #7
   2a236:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2a238:	4b18      	ldr	r3, [pc, #96]	; (2a29c <_tcc_interrupt_handler+0x74>)
   2a23a:	0092      	lsls	r2, r2, #2
   2a23c:	58d3      	ldr	r3, [r2, r3]
   2a23e:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a240:	693b      	ldr	r3, [r7, #16]
   2a242:	681b      	ldr	r3, [r3, #0]
   2a244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2a246:	693b      	ldr	r3, [r7, #16]
   2a248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a24a:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2a24c:	693b      	ldr	r3, [r7, #16]
   2a24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a250:	4013      	ands	r3, r2
   2a252:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a254:	2300      	movs	r3, #0
   2a256:	617b      	str	r3, [r7, #20]
   2a258:	e019      	b.n	2a28e <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2a25a:	4b11      	ldr	r3, [pc, #68]	; (2a2a0 <_tcc_interrupt_handler+0x78>)
   2a25c:	697a      	ldr	r2, [r7, #20]
   2a25e:	0092      	lsls	r2, r2, #2
   2a260:	58d3      	ldr	r3, [r2, r3]
   2a262:	68fa      	ldr	r2, [r7, #12]
   2a264:	4013      	ands	r3, r2
   2a266:	d00f      	beq.n	2a288 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2a268:	693a      	ldr	r2, [r7, #16]
   2a26a:	697b      	ldr	r3, [r7, #20]
   2a26c:	009b      	lsls	r3, r3, #2
   2a26e:	18d3      	adds	r3, r2, r3
   2a270:	3304      	adds	r3, #4
   2a272:	681b      	ldr	r3, [r3, #0]
   2a274:	693a      	ldr	r2, [r7, #16]
   2a276:	0010      	movs	r0, r2
   2a278:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2a27a:	693b      	ldr	r3, [r7, #16]
   2a27c:	681b      	ldr	r3, [r3, #0]
   2a27e:	4a08      	ldr	r2, [pc, #32]	; (2a2a0 <_tcc_interrupt_handler+0x78>)
   2a280:	6979      	ldr	r1, [r7, #20]
   2a282:	0089      	lsls	r1, r1, #2
   2a284:	588a      	ldr	r2, [r1, r2]
   2a286:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a288:	697b      	ldr	r3, [r7, #20]
   2a28a:	3301      	adds	r3, #1
   2a28c:	617b      	str	r3, [r7, #20]
   2a28e:	697b      	ldr	r3, [r7, #20]
   2a290:	2b0b      	cmp	r3, #11
   2a292:	dde2      	ble.n	2a25a <_tcc_interrupt_handler+0x32>
		}
	}
}
   2a294:	46c0      	nop			; (mov r8, r8)
   2a296:	46bd      	mov	sp, r7
   2a298:	b006      	add	sp, #24
   2a29a:	bd80      	pop	{r7, pc}
   2a29c:	20005630 	.word	0x20005630
   2a2a0:	000383c8 	.word	0x000383c8

0002a2a4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2a2a4:	b580      	push	{r7, lr}
   2a2a6:	b082      	sub	sp, #8
   2a2a8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2a2aa:	4b2f      	ldr	r3, [pc, #188]	; (2a368 <Reset_Handler+0xc4>)
   2a2ac:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2a2ae:	4b2f      	ldr	r3, [pc, #188]	; (2a36c <Reset_Handler+0xc8>)
   2a2b0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2a2b2:	687a      	ldr	r2, [r7, #4]
   2a2b4:	683b      	ldr	r3, [r7, #0]
   2a2b6:	429a      	cmp	r2, r3
   2a2b8:	d00c      	beq.n	2a2d4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2a2ba:	e007      	b.n	2a2cc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2a2bc:	683b      	ldr	r3, [r7, #0]
   2a2be:	1d1a      	adds	r2, r3, #4
   2a2c0:	603a      	str	r2, [r7, #0]
   2a2c2:	687a      	ldr	r2, [r7, #4]
   2a2c4:	1d11      	adds	r1, r2, #4
   2a2c6:	6079      	str	r1, [r7, #4]
   2a2c8:	6812      	ldr	r2, [r2, #0]
   2a2ca:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2a2cc:	683a      	ldr	r2, [r7, #0]
   2a2ce:	4b28      	ldr	r3, [pc, #160]	; (2a370 <Reset_Handler+0xcc>)
   2a2d0:	429a      	cmp	r2, r3
   2a2d2:	d3f3      	bcc.n	2a2bc <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2a2d4:	4b27      	ldr	r3, [pc, #156]	; (2a374 <Reset_Handler+0xd0>)
   2a2d6:	603b      	str	r3, [r7, #0]
   2a2d8:	e004      	b.n	2a2e4 <Reset_Handler+0x40>
                *pDest++ = 0;
   2a2da:	683b      	ldr	r3, [r7, #0]
   2a2dc:	1d1a      	adds	r2, r3, #4
   2a2de:	603a      	str	r2, [r7, #0]
   2a2e0:	2200      	movs	r2, #0
   2a2e2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2a2e4:	683a      	ldr	r2, [r7, #0]
   2a2e6:	4b24      	ldr	r3, [pc, #144]	; (2a378 <Reset_Handler+0xd4>)
   2a2e8:	429a      	cmp	r2, r3
   2a2ea:	d3f6      	bcc.n	2a2da <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2a2ec:	4b23      	ldr	r3, [pc, #140]	; (2a37c <Reset_Handler+0xd8>)
   2a2ee:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2a2f0:	4b23      	ldr	r3, [pc, #140]	; (2a380 <Reset_Handler+0xdc>)
   2a2f2:	687a      	ldr	r2, [r7, #4]
   2a2f4:	21ff      	movs	r1, #255	; 0xff
   2a2f6:	438a      	bics	r2, r1
   2a2f8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2a2fa:	4a22      	ldr	r2, [pc, #136]	; (2a384 <Reset_Handler+0xe0>)
   2a2fc:	2390      	movs	r3, #144	; 0x90
   2a2fe:	005b      	lsls	r3, r3, #1
   2a300:	2102      	movs	r1, #2
   2a302:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2a304:	4a20      	ldr	r2, [pc, #128]	; (2a388 <Reset_Handler+0xe4>)
   2a306:	78d3      	ldrb	r3, [r2, #3]
   2a308:	2103      	movs	r1, #3
   2a30a:	438b      	bics	r3, r1
   2a30c:	1c19      	adds	r1, r3, #0
   2a30e:	2302      	movs	r3, #2
   2a310:	430b      	orrs	r3, r1
   2a312:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2a314:	4a1c      	ldr	r2, [pc, #112]	; (2a388 <Reset_Handler+0xe4>)
   2a316:	78d3      	ldrb	r3, [r2, #3]
   2a318:	210c      	movs	r1, #12
   2a31a:	438b      	bics	r3, r1
   2a31c:	1c19      	adds	r1, r3, #0
   2a31e:	2308      	movs	r3, #8
   2a320:	430b      	orrs	r3, r1
   2a322:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2a324:	4a19      	ldr	r2, [pc, #100]	; (2a38c <Reset_Handler+0xe8>)
   2a326:	7b93      	ldrb	r3, [r2, #14]
   2a328:	2130      	movs	r1, #48	; 0x30
   2a32a:	438b      	bics	r3, r1
   2a32c:	1c19      	adds	r1, r3, #0
   2a32e:	2320      	movs	r3, #32
   2a330:	430b      	orrs	r3, r1
   2a332:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2a334:	4a15      	ldr	r2, [pc, #84]	; (2a38c <Reset_Handler+0xe8>)
   2a336:	7b93      	ldrb	r3, [r2, #14]
   2a338:	210c      	movs	r1, #12
   2a33a:	438b      	bics	r3, r1
   2a33c:	1c19      	adds	r1, r3, #0
   2a33e:	2308      	movs	r3, #8
   2a340:	430b      	orrs	r3, r1
   2a342:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2a344:	4a11      	ldr	r2, [pc, #68]	; (2a38c <Reset_Handler+0xe8>)
   2a346:	7b93      	ldrb	r3, [r2, #14]
   2a348:	2103      	movs	r1, #3
   2a34a:	438b      	bics	r3, r1
   2a34c:	1c19      	adds	r1, r3, #0
   2a34e:	2302      	movs	r3, #2
   2a350:	430b      	orrs	r3, r1
   2a352:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2a354:	4a0e      	ldr	r2, [pc, #56]	; (2a390 <Reset_Handler+0xec>)
   2a356:	6853      	ldr	r3, [r2, #4]
   2a358:	2180      	movs	r1, #128	; 0x80
   2a35a:	430b      	orrs	r3, r1
   2a35c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2a35e:	4b0d      	ldr	r3, [pc, #52]	; (2a394 <Reset_Handler+0xf0>)
   2a360:	4798      	blx	r3

        /* Branch to main function */
        main();
   2a362:	4b0d      	ldr	r3, [pc, #52]	; (2a398 <Reset_Handler+0xf4>)
   2a364:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2a366:	e7fe      	b.n	2a366 <Reset_Handler+0xc2>
   2a368:	000390ec 	.word	0x000390ec
   2a36c:	20000000 	.word	0x20000000
   2a370:	200002a8 	.word	0x200002a8
   2a374:	200002b0 	.word	0x200002b0
   2a378:	200056a0 	.word	0x200056a0
   2a37c:	00012000 	.word	0x00012000
   2a380:	e000ed00 	.word	0xe000ed00
   2a384:	41007000 	.word	0x41007000
   2a388:	41005000 	.word	0x41005000
   2a38c:	41004800 	.word	0x41004800
   2a390:	41004000 	.word	0x41004000
   2a394:	00033959 	.word	0x00033959
   2a398:	00031ad9 	.word	0x00031ad9

0002a39c <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2a39c:	b580      	push	{r7, lr}
   2a39e:	af00      	add	r7, sp, #0
  __asm volatile (
   2a3a0:	2004      	movs	r0, #4
   2a3a2:	4671      	mov	r1, lr
   2a3a4:	4208      	tst	r0, r1
   2a3a6:	d002      	beq.n	2a3ae <_MSP>
   2a3a8:	f3ef 8009 	mrs	r0, PSP
   2a3ac:	e001      	b.n	2a3b2 <_HALT>

0002a3ae <_MSP>:
   2a3ae:	f3ef 8008 	mrs	r0, MSP

0002a3b2 <_HALT>:
   2a3b2:	6941      	ldr	r1, [r0, #20]
   2a3b4:	e004      	b.n	2a3c0 <HardFault_HandlerC>
   2a3b6:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2a3b8:	46c0      	nop			; (mov r8, r8)
   2a3ba:	46bd      	mov	sp, r7
   2a3bc:	bd80      	pop	{r7, pc}
	...

0002a3c0 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2a3c0:	b580      	push	{r7, lr}
   2a3c2:	b090      	sub	sp, #64	; 0x40
   2a3c4:	af00      	add	r7, sp, #0
   2a3c6:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2a3c8:	687b      	ldr	r3, [r7, #4]
   2a3ca:	681b      	ldr	r3, [r3, #0]
   2a3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2a3ce:	687b      	ldr	r3, [r7, #4]
   2a3d0:	685b      	ldr	r3, [r3, #4]
   2a3d2:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2a3d4:	687b      	ldr	r3, [r7, #4]
   2a3d6:	689b      	ldr	r3, [r3, #8]
   2a3d8:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2a3da:	687b      	ldr	r3, [r7, #4]
   2a3dc:	68db      	ldr	r3, [r3, #12]
   2a3de:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2a3e0:	687b      	ldr	r3, [r7, #4]
   2a3e2:	691b      	ldr	r3, [r3, #16]
   2a3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2a3e6:	687b      	ldr	r3, [r7, #4]
   2a3e8:	695b      	ldr	r3, [r3, #20]
   2a3ea:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2a3ec:	687b      	ldr	r3, [r7, #4]
   2a3ee:	699b      	ldr	r3, [r3, #24]
   2a3f0:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2a3f2:	687b      	ldr	r3, [r7, #4]
   2a3f4:	69db      	ldr	r3, [r3, #28]
   2a3f6:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2a3f8:	4b0b      	ldr	r3, [pc, #44]	; (2a428 <HardFault_HandlerC+0x68>)
   2a3fa:	681b      	ldr	r3, [r3, #0]
   2a3fc:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2a3fe:	4b0b      	ldr	r3, [pc, #44]	; (2a42c <HardFault_HandlerC+0x6c>)
   2a400:	681b      	ldr	r3, [r3, #0]
   2a402:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2a404:	4b0a      	ldr	r3, [pc, #40]	; (2a430 <HardFault_HandlerC+0x70>)
   2a406:	681b      	ldr	r3, [r3, #0]
   2a408:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2a40a:	4b0a      	ldr	r3, [pc, #40]	; (2a434 <HardFault_HandlerC+0x74>)
   2a40c:	681b      	ldr	r3, [r3, #0]
   2a40e:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2a410:	4b09      	ldr	r3, [pc, #36]	; (2a438 <HardFault_HandlerC+0x78>)
   2a412:	681b      	ldr	r3, [r3, #0]
   2a414:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2a416:	4b09      	ldr	r3, [pc, #36]	; (2a43c <HardFault_HandlerC+0x7c>)
   2a418:	681b      	ldr	r3, [r3, #0]
   2a41a:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2a41c:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2a41e:	46c0      	nop			; (mov r8, r8)
   2a420:	46bd      	mov	sp, r7
   2a422:	b010      	add	sp, #64	; 0x40
   2a424:	bd80      	pop	{r7, pc}
   2a426:	46c0      	nop			; (mov r8, r8)
   2a428:	e000ed28 	.word	0xe000ed28
   2a42c:	e000ed2c 	.word	0xe000ed2c
   2a430:	e000ed30 	.word	0xe000ed30
   2a434:	e000ed3c 	.word	0xe000ed3c
   2a438:	e000ed34 	.word	0xe000ed34
   2a43c:	e000ed38 	.word	0xe000ed38

0002a440 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2a440:	b580      	push	{r7, lr}
   2a442:	b086      	sub	sp, #24
   2a444:	af00      	add	r7, sp, #0
   2a446:	60f8      	str	r0, [r7, #12]
   2a448:	60b9      	str	r1, [r7, #8]
   2a44a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2a44c:	2300      	movs	r3, #0
   2a44e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2a450:	68fb      	ldr	r3, [r7, #12]
   2a452:	2b00      	cmp	r3, #0
   2a454:	d012      	beq.n	2a47c <_read+0x3c>
		return -1;
   2a456:	2301      	movs	r3, #1
   2a458:	425b      	negs	r3, r3
   2a45a:	e013      	b.n	2a484 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2a45c:	4b0b      	ldr	r3, [pc, #44]	; (2a48c <_read+0x4c>)
   2a45e:	681a      	ldr	r2, [r3, #0]
   2a460:	4b0b      	ldr	r3, [pc, #44]	; (2a490 <_read+0x50>)
   2a462:	681b      	ldr	r3, [r3, #0]
   2a464:	68b9      	ldr	r1, [r7, #8]
   2a466:	0018      	movs	r0, r3
   2a468:	4790      	blx	r2
		ptr++;
   2a46a:	68bb      	ldr	r3, [r7, #8]
   2a46c:	3301      	adds	r3, #1
   2a46e:	60bb      	str	r3, [r7, #8]
		nChars++;
   2a470:	697b      	ldr	r3, [r7, #20]
   2a472:	3301      	adds	r3, #1
   2a474:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2a476:	687b      	ldr	r3, [r7, #4]
   2a478:	3b01      	subs	r3, #1
   2a47a:	607b      	str	r3, [r7, #4]
   2a47c:	687b      	ldr	r3, [r7, #4]
   2a47e:	2b00      	cmp	r3, #0
   2a480:	dcec      	bgt.n	2a45c <_read+0x1c>
	}
	return nChars;
   2a482:	697b      	ldr	r3, [r7, #20]
}
   2a484:	0018      	movs	r0, r3
   2a486:	46bd      	mov	sp, r7
   2a488:	b006      	add	sp, #24
   2a48a:	bd80      	pop	{r7, pc}
   2a48c:	2000563c 	.word	0x2000563c
   2a490:	20005644 	.word	0x20005644

0002a494 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2a494:	b580      	push	{r7, lr}
   2a496:	b086      	sub	sp, #24
   2a498:	af00      	add	r7, sp, #0
   2a49a:	60f8      	str	r0, [r7, #12]
   2a49c:	60b9      	str	r1, [r7, #8]
   2a49e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2a4a0:	2300      	movs	r3, #0
   2a4a2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2a4a4:	68fb      	ldr	r3, [r7, #12]
   2a4a6:	2b01      	cmp	r3, #1
   2a4a8:	d01d      	beq.n	2a4e6 <_write+0x52>
   2a4aa:	68fb      	ldr	r3, [r7, #12]
   2a4ac:	2b02      	cmp	r3, #2
   2a4ae:	d01a      	beq.n	2a4e6 <_write+0x52>
   2a4b0:	68fb      	ldr	r3, [r7, #12]
   2a4b2:	2b03      	cmp	r3, #3
   2a4b4:	d017      	beq.n	2a4e6 <_write+0x52>
		return -1;
   2a4b6:	2301      	movs	r3, #1
   2a4b8:	425b      	negs	r3, r3
   2a4ba:	e018      	b.n	2a4ee <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2a4bc:	4b0e      	ldr	r3, [pc, #56]	; (2a4f8 <_write+0x64>)
   2a4be:	681a      	ldr	r2, [r3, #0]
   2a4c0:	4b0e      	ldr	r3, [pc, #56]	; (2a4fc <_write+0x68>)
   2a4c2:	6818      	ldr	r0, [r3, #0]
   2a4c4:	68bb      	ldr	r3, [r7, #8]
   2a4c6:	1c59      	adds	r1, r3, #1
   2a4c8:	60b9      	str	r1, [r7, #8]
   2a4ca:	781b      	ldrb	r3, [r3, #0]
   2a4cc:	0019      	movs	r1, r3
   2a4ce:	4790      	blx	r2
   2a4d0:	1e03      	subs	r3, r0, #0
   2a4d2:	da02      	bge.n	2a4da <_write+0x46>
			return -1;
   2a4d4:	2301      	movs	r3, #1
   2a4d6:	425b      	negs	r3, r3
   2a4d8:	e009      	b.n	2a4ee <_write+0x5a>
		}
		++nChars;
   2a4da:	697b      	ldr	r3, [r7, #20]
   2a4dc:	3301      	adds	r3, #1
   2a4de:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2a4e0:	687b      	ldr	r3, [r7, #4]
   2a4e2:	3b01      	subs	r3, #1
   2a4e4:	607b      	str	r3, [r7, #4]
   2a4e6:	687b      	ldr	r3, [r7, #4]
   2a4e8:	2b00      	cmp	r3, #0
   2a4ea:	d1e7      	bne.n	2a4bc <_write+0x28>
	}
	return nChars;
   2a4ec:	697b      	ldr	r3, [r7, #20]
}
   2a4ee:	0018      	movs	r0, r3
   2a4f0:	46bd      	mov	sp, r7
   2a4f2:	b006      	add	sp, #24
   2a4f4:	bd80      	pop	{r7, pc}
   2a4f6:	46c0      	nop			; (mov r8, r8)
   2a4f8:	20005640 	.word	0x20005640
   2a4fc:	20005644 	.word	0x20005644

0002a500 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2a500:	b580      	push	{r7, lr}
   2a502:	b084      	sub	sp, #16
   2a504:	af00      	add	r7, sp, #0
   2a506:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2a508:	4b0a      	ldr	r3, [pc, #40]	; (2a534 <_sbrk+0x34>)
   2a50a:	681b      	ldr	r3, [r3, #0]
   2a50c:	2b00      	cmp	r3, #0
   2a50e:	d102      	bne.n	2a516 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2a510:	4b08      	ldr	r3, [pc, #32]	; (2a534 <_sbrk+0x34>)
   2a512:	4a09      	ldr	r2, [pc, #36]	; (2a538 <_sbrk+0x38>)
   2a514:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2a516:	4b07      	ldr	r3, [pc, #28]	; (2a534 <_sbrk+0x34>)
   2a518:	681b      	ldr	r3, [r3, #0]
   2a51a:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2a51c:	4b05      	ldr	r3, [pc, #20]	; (2a534 <_sbrk+0x34>)
   2a51e:	681a      	ldr	r2, [r3, #0]
   2a520:	687b      	ldr	r3, [r7, #4]
   2a522:	18d2      	adds	r2, r2, r3
   2a524:	4b03      	ldr	r3, [pc, #12]	; (2a534 <_sbrk+0x34>)
   2a526:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2a528:	68fb      	ldr	r3, [r7, #12]
}
   2a52a:	0018      	movs	r0, r3
   2a52c:	46bd      	mov	sp, r7
   2a52e:	b004      	add	sp, #16
   2a530:	bd80      	pop	{r7, pc}
   2a532:	46c0      	nop			; (mov r8, r8)
   2a534:	20003e4c 	.word	0x20003e4c
   2a538:	200076a0 	.word	0x200076a0

0002a53c <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2a53c:	b580      	push	{r7, lr}
   2a53e:	b082      	sub	sp, #8
   2a540:	af00      	add	r7, sp, #0
   2a542:	6078      	str	r0, [r7, #4]
	return -1;
   2a544:	2301      	movs	r3, #1
   2a546:	425b      	negs	r3, r3
}
   2a548:	0018      	movs	r0, r3
   2a54a:	46bd      	mov	sp, r7
   2a54c:	b002      	add	sp, #8
   2a54e:	bd80      	pop	{r7, pc}

0002a550 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2a550:	b580      	push	{r7, lr}
   2a552:	b082      	sub	sp, #8
   2a554:	af00      	add	r7, sp, #0
   2a556:	6078      	str	r0, [r7, #4]
   2a558:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2a55a:	683b      	ldr	r3, [r7, #0]
   2a55c:	2280      	movs	r2, #128	; 0x80
   2a55e:	0192      	lsls	r2, r2, #6
   2a560:	605a      	str	r2, [r3, #4]

	return 0;
   2a562:	2300      	movs	r3, #0
}
   2a564:	0018      	movs	r0, r3
   2a566:	46bd      	mov	sp, r7
   2a568:	b002      	add	sp, #8
   2a56a:	bd80      	pop	{r7, pc}

0002a56c <_isatty>:

extern int _isatty(int file)
{
   2a56c:	b580      	push	{r7, lr}
   2a56e:	b082      	sub	sp, #8
   2a570:	af00      	add	r7, sp, #0
   2a572:	6078      	str	r0, [r7, #4]
	return 1;
   2a574:	2301      	movs	r3, #1
}
   2a576:	0018      	movs	r0, r3
   2a578:	46bd      	mov	sp, r7
   2a57a:	b002      	add	sp, #8
   2a57c:	bd80      	pop	{r7, pc}

0002a57e <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2a57e:	b580      	push	{r7, lr}
   2a580:	b084      	sub	sp, #16
   2a582:	af00      	add	r7, sp, #0
   2a584:	60f8      	str	r0, [r7, #12]
   2a586:	60b9      	str	r1, [r7, #8]
   2a588:	607a      	str	r2, [r7, #4]
	return 0;
   2a58a:	2300      	movs	r3, #0
}
   2a58c:	0018      	movs	r0, r3
   2a58e:	46bd      	mov	sp, r7
   2a590:	b004      	add	sp, #16
   2a592:	bd80      	pop	{r7, pc}

0002a594 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2a594:	b580      	push	{r7, lr}
   2a596:	b082      	sub	sp, #8
   2a598:	af00      	add	r7, sp, #0
   2a59a:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2a59c:	687b      	ldr	r3, [r7, #4]
   2a59e:	2200      	movs	r2, #0
   2a5a0:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2a5a2:	687b      	ldr	r3, [r7, #4]
   2a5a4:	2200      	movs	r2, #0
   2a5a6:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2a5a8:	687b      	ldr	r3, [r7, #4]
   2a5aa:	2200      	movs	r2, #0
   2a5ac:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2a5ae:	687b      	ldr	r3, [r7, #4]
   2a5b0:	2200      	movs	r2, #0
   2a5b2:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2a5b4:	687b      	ldr	r3, [r7, #4]
   2a5b6:	2201      	movs	r2, #1
   2a5b8:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2a5ba:	687b      	ldr	r3, [r7, #4]
   2a5bc:	2201      	movs	r2, #1
   2a5be:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2a5c0:	687b      	ldr	r3, [r7, #4]
   2a5c2:	22fa      	movs	r2, #250	; 0xfa
   2a5c4:	00d2      	lsls	r2, r2, #3
   2a5c6:	80da      	strh	r2, [r3, #6]
}
   2a5c8:	46c0      	nop			; (mov r8, r8)
   2a5ca:	46bd      	mov	sp, r7
   2a5cc:	b002      	add	sp, #8
   2a5ce:	bd80      	pop	{r7, pc}

0002a5d0 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2a5d0:	b580      	push	{r7, lr}
   2a5d2:	b086      	sub	sp, #24
   2a5d4:	af00      	add	r7, sp, #0
   2a5d6:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2a5d8:	230c      	movs	r3, #12
   2a5da:	18fb      	adds	r3, r7, r3
   2a5dc:	0018      	movs	r0, r3
   2a5de:	4b23      	ldr	r3, [pc, #140]	; (2a66c <rtc_calendar_get_config_defaults+0x9c>)
   2a5e0:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2a5e2:	687b      	ldr	r3, [r7, #4]
   2a5e4:	22a0      	movs	r2, #160	; 0xa0
   2a5e6:	0112      	lsls	r2, r2, #4
   2a5e8:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2a5ea:	687b      	ldr	r3, [r7, #4]
   2a5ec:	2200      	movs	r2, #0
   2a5ee:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2a5f0:	687b      	ldr	r3, [r7, #4]
   2a5f2:	2200      	movs	r2, #0
   2a5f4:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2a5f6:	687b      	ldr	r3, [r7, #4]
   2a5f8:	2200      	movs	r2, #0
   2a5fa:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2a5fc:	687b      	ldr	r3, [r7, #4]
   2a5fe:	22fa      	movs	r2, #250	; 0xfa
   2a600:	00d2      	lsls	r2, r2, #3
   2a602:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2a604:	2317      	movs	r3, #23
   2a606:	18fb      	adds	r3, r7, r3
   2a608:	2200      	movs	r2, #0
   2a60a:	701a      	strb	r2, [r3, #0]
   2a60c:	e025      	b.n	2a65a <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2a60e:	2317      	movs	r3, #23
   2a610:	18fb      	adds	r3, r7, r3
   2a612:	781a      	ldrb	r2, [r3, #0]
   2a614:	6879      	ldr	r1, [r7, #4]
   2a616:	2008      	movs	r0, #8
   2a618:	0013      	movs	r3, r2
   2a61a:	009b      	lsls	r3, r3, #2
   2a61c:	189b      	adds	r3, r3, r2
   2a61e:	005b      	lsls	r3, r3, #1
   2a620:	18cb      	adds	r3, r1, r3
   2a622:	181a      	adds	r2, r3, r0
   2a624:	230c      	movs	r3, #12
   2a626:	18fb      	adds	r3, r7, r3
   2a628:	0010      	movs	r0, r2
   2a62a:	0019      	movs	r1, r3
   2a62c:	2308      	movs	r3, #8
   2a62e:	001a      	movs	r2, r3
   2a630:	4b0f      	ldr	r3, [pc, #60]	; (2a670 <rtc_calendar_get_config_defaults+0xa0>)
   2a632:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2a634:	2317      	movs	r3, #23
   2a636:	18fb      	adds	r3, r7, r3
   2a638:	781a      	ldrb	r2, [r3, #0]
   2a63a:	6879      	ldr	r1, [r7, #4]
   2a63c:	0013      	movs	r3, r2
   2a63e:	009b      	lsls	r3, r3, #2
   2a640:	189b      	adds	r3, r3, r2
   2a642:	005b      	lsls	r3, r3, #1
   2a644:	18cb      	adds	r3, r1, r3
   2a646:	3310      	adds	r3, #16
   2a648:	2206      	movs	r2, #6
   2a64a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2a64c:	2317      	movs	r3, #23
   2a64e:	18fb      	adds	r3, r7, r3
   2a650:	781a      	ldrb	r2, [r3, #0]
   2a652:	2317      	movs	r3, #23
   2a654:	18fb      	adds	r3, r7, r3
   2a656:	3201      	adds	r2, #1
   2a658:	701a      	strb	r2, [r3, #0]
   2a65a:	2317      	movs	r3, #23
   2a65c:	18fb      	adds	r3, r7, r3
   2a65e:	781b      	ldrb	r3, [r3, #0]
   2a660:	2b00      	cmp	r3, #0
   2a662:	d0d4      	beq.n	2a60e <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2a664:	46c0      	nop			; (mov r8, r8)
   2a666:	46bd      	mov	sp, r7
   2a668:	b006      	add	sp, #24
   2a66a:	bd80      	pop	{r7, pc}
   2a66c:	0002a595 	.word	0x0002a595
   2a670:	000339c9 	.word	0x000339c9

0002a674 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2a674:	b580      	push	{r7, lr}
   2a676:	b088      	sub	sp, #32
   2a678:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2a67a:	230c      	movs	r3, #12
   2a67c:	18fb      	adds	r3, r7, r3
   2a67e:	0018      	movs	r0, r3
   2a680:	4b1a      	ldr	r3, [pc, #104]	; (2a6ec <configure_rtc_calendar+0x78>)
   2a682:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2a684:	1d3b      	adds	r3, r7, #4
   2a686:	0018      	movs	r0, r3
   2a688:	4b19      	ldr	r3, [pc, #100]	; (2a6f0 <configure_rtc_calendar+0x7c>)
   2a68a:	4798      	blx	r3
	init_time.year   = 2014;
   2a68c:	1d3b      	adds	r3, r7, #4
   2a68e:	4a19      	ldr	r2, [pc, #100]	; (2a6f4 <configure_rtc_calendar+0x80>)
   2a690:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2a692:	1d3b      	adds	r3, r7, #4
   2a694:	2201      	movs	r2, #1
   2a696:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2a698:	1d3b      	adds	r3, r7, #4
   2a69a:	2201      	movs	r2, #1
   2a69c:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2a69e:	1d3b      	adds	r3, r7, #4
   2a6a0:	2200      	movs	r2, #0
   2a6a2:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2a6a4:	1d3b      	adds	r3, r7, #4
   2a6a6:	2200      	movs	r2, #0
   2a6a8:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2a6aa:	1d3b      	adds	r3, r7, #4
   2a6ac:	2204      	movs	r2, #4
   2a6ae:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2a6b0:	230c      	movs	r3, #12
   2a6b2:	18fb      	adds	r3, r7, r3
   2a6b4:	2201      	movs	r2, #1
   2a6b6:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2a6b8:	230c      	movs	r3, #12
   2a6ba:	18fb      	adds	r3, r7, r3
   2a6bc:	1d3a      	adds	r2, r7, #4
   2a6be:	3308      	adds	r3, #8
   2a6c0:	ca03      	ldmia	r2!, {r0, r1}
   2a6c2:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2a6c4:	230c      	movs	r3, #12
   2a6c6:	18fb      	adds	r3, r7, r3
   2a6c8:	2206      	movs	r2, #6
   2a6ca:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2a6cc:	230c      	movs	r3, #12
   2a6ce:	18fa      	adds	r2, r7, r3
   2a6d0:	4909      	ldr	r1, [pc, #36]	; (2a6f8 <configure_rtc_calendar+0x84>)
   2a6d2:	4b0a      	ldr	r3, [pc, #40]	; (2a6fc <configure_rtc_calendar+0x88>)
   2a6d4:	0018      	movs	r0, r3
   2a6d6:	4b0a      	ldr	r3, [pc, #40]	; (2a700 <configure_rtc_calendar+0x8c>)
   2a6d8:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2a6da:	4b08      	ldr	r3, [pc, #32]	; (2a6fc <configure_rtc_calendar+0x88>)
   2a6dc:	0018      	movs	r0, r3
   2a6de:	4b09      	ldr	r3, [pc, #36]	; (2a704 <configure_rtc_calendar+0x90>)
   2a6e0:	4798      	blx	r3
}
   2a6e2:	46c0      	nop			; (mov r8, r8)
   2a6e4:	46bd      	mov	sp, r7
   2a6e6:	b008      	add	sp, #32
   2a6e8:	bd80      	pop	{r7, pc}
   2a6ea:	46c0      	nop			; (mov r8, r8)
   2a6ec:	0002a5d1 	.word	0x0002a5d1
   2a6f0:	0002a595 	.word	0x0002a595
   2a6f4:	000007de 	.word	0x000007de
   2a6f8:	40001400 	.word	0x40001400
   2a6fc:	20005648 	.word	0x20005648
   2a700:	000261b1 	.word	0x000261b1
   2a704:	00025edd 	.word	0x00025edd

0002a708 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2a708:	b590      	push	{r4, r7, lr}
   2a70a:	b085      	sub	sp, #20
   2a70c:	af00      	add	r7, sp, #0
   2a70e:	0002      	movs	r2, r0
   2a710:	1dfb      	adds	r3, r7, #7
   2a712:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2a714:	4b1a      	ldr	r3, [pc, #104]	; (2a780 <disk_initialize+0x78>)
   2a716:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2a718:	1dfb      	adds	r3, r7, #7
   2a71a:	781b      	ldrb	r3, [r3, #0]
   2a71c:	2b01      	cmp	r3, #1
   2a71e:	d901      	bls.n	2a724 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2a720:	2301      	movs	r3, #1
   2a722:	e029      	b.n	2a778 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2a724:	2300      	movs	r3, #0
   2a726:	60fb      	str	r3, [r7, #12]
   2a728:	e010      	b.n	2a74c <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2a72a:	230b      	movs	r3, #11
   2a72c:	18fc      	adds	r4, r7, r3
   2a72e:	1dfb      	adds	r3, r7, #7
   2a730:	781b      	ldrb	r3, [r3, #0]
   2a732:	0018      	movs	r0, r3
   2a734:	4b13      	ldr	r3, [pc, #76]	; (2a784 <disk_initialize+0x7c>)
   2a736:	4798      	blx	r3
   2a738:	0003      	movs	r3, r0
   2a73a:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2a73c:	230b      	movs	r3, #11
   2a73e:	18fb      	adds	r3, r7, r3
   2a740:	781b      	ldrb	r3, [r3, #0]
   2a742:	2b03      	cmp	r3, #3
   2a744:	d106      	bne.n	2a754 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2a746:	68fb      	ldr	r3, [r7, #12]
   2a748:	3301      	adds	r3, #1
   2a74a:	60fb      	str	r3, [r7, #12]
   2a74c:	68fb      	ldr	r3, [r7, #12]
   2a74e:	2b01      	cmp	r3, #1
   2a750:	ddeb      	ble.n	2a72a <disk_initialize+0x22>
   2a752:	e000      	b.n	2a756 <disk_initialize+0x4e>
			break;
   2a754:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2a756:	230b      	movs	r3, #11
   2a758:	18fb      	adds	r3, r7, r3
   2a75a:	781b      	ldrb	r3, [r3, #0]
   2a75c:	2b00      	cmp	r3, #0
   2a75e:	d001      	beq.n	2a764 <disk_initialize+0x5c>
		return STA_NOINIT;
   2a760:	2301      	movs	r3, #1
   2a762:	e009      	b.n	2a778 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2a764:	1dfb      	adds	r3, r7, #7
   2a766:	781b      	ldrb	r3, [r3, #0]
   2a768:	0018      	movs	r0, r3
   2a76a:	4b07      	ldr	r3, [pc, #28]	; (2a788 <disk_initialize+0x80>)
   2a76c:	4798      	blx	r3
   2a76e:	1e03      	subs	r3, r0, #0
   2a770:	d001      	beq.n	2a776 <disk_initialize+0x6e>
		return STA_PROTECT;
   2a772:	2304      	movs	r3, #4
   2a774:	e000      	b.n	2a778 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2a776:	2300      	movs	r3, #0
}
   2a778:	0018      	movs	r0, r3
   2a77a:	46bd      	mov	sp, r7
   2a77c:	b005      	add	sp, #20
   2a77e:	bd90      	pop	{r4, r7, pc}
   2a780:	0002a675 	.word	0x0002a675
   2a784:	000253d9 	.word	0x000253d9
   2a788:	00025491 	.word	0x00025491

0002a78c <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2a78c:	b580      	push	{r7, lr}
   2a78e:	b082      	sub	sp, #8
   2a790:	af00      	add	r7, sp, #0
   2a792:	0002      	movs	r2, r0
   2a794:	1dfb      	adds	r3, r7, #7
   2a796:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2a798:	1dfb      	adds	r3, r7, #7
   2a79a:	781b      	ldrb	r3, [r3, #0]
   2a79c:	0018      	movs	r0, r3
   2a79e:	4b08      	ldr	r3, [pc, #32]	; (2a7c0 <disk_status+0x34>)
   2a7a0:	4798      	blx	r3
   2a7a2:	1e03      	subs	r3, r0, #0
   2a7a4:	d002      	beq.n	2a7ac <disk_status+0x20>
   2a7a6:	2b02      	cmp	r3, #2
   2a7a8:	d002      	beq.n	2a7b0 <disk_status+0x24>
   2a7aa:	e003      	b.n	2a7b4 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2a7ac:	2300      	movs	r3, #0
   2a7ae:	e002      	b.n	2a7b6 <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2a7b0:	2303      	movs	r3, #3
   2a7b2:	e000      	b.n	2a7b6 <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2a7b4:	2301      	movs	r3, #1
	}
}
   2a7b6:	0018      	movs	r0, r3
   2a7b8:	46bd      	mov	sp, r7
   2a7ba:	b002      	add	sp, #8
   2a7bc:	bd80      	pop	{r7, pc}
   2a7be:	46c0      	nop			; (mov r8, r8)
   2a7c0:	000253d9 	.word	0x000253d9

0002a7c4 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2a7c4:	b590      	push	{r4, r7, lr}
   2a7c6:	b089      	sub	sp, #36	; 0x24
   2a7c8:	af00      	add	r7, sp, #0
   2a7ca:	60b9      	str	r1, [r7, #8]
   2a7cc:	607a      	str	r2, [r7, #4]
   2a7ce:	0019      	movs	r1, r3
   2a7d0:	230f      	movs	r3, #15
   2a7d2:	18fb      	adds	r3, r7, r3
   2a7d4:	1c02      	adds	r2, r0, #0
   2a7d6:	701a      	strb	r2, [r3, #0]
   2a7d8:	230e      	movs	r3, #14
   2a7da:	18fb      	adds	r3, r7, r3
   2a7dc:	1c0a      	adds	r2, r1, #0
   2a7de:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2a7e0:	231b      	movs	r3, #27
   2a7e2:	18fc      	adds	r4, r7, r3
   2a7e4:	230f      	movs	r3, #15
   2a7e6:	18fb      	adds	r3, r7, r3
   2a7e8:	781b      	ldrb	r3, [r3, #0]
   2a7ea:	0018      	movs	r0, r3
   2a7ec:	4b28      	ldr	r3, [pc, #160]	; (2a890 <disk_read+0xcc>)
   2a7ee:	4798      	blx	r3
   2a7f0:	0003      	movs	r3, r0
   2a7f2:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2a7f4:	231b      	movs	r3, #27
   2a7f6:	18fb      	adds	r3, r7, r3
   2a7f8:	781b      	ldrb	r3, [r3, #0]
   2a7fa:	2b00      	cmp	r3, #0
   2a7fc:	d101      	bne.n	2a802 <disk_read+0x3e>
		return RES_ERROR;
   2a7fe:	2301      	movs	r3, #1
   2a800:	e042      	b.n	2a888 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2a802:	2314      	movs	r3, #20
   2a804:	18fa      	adds	r2, r7, r3
   2a806:	230f      	movs	r3, #15
   2a808:	18fb      	adds	r3, r7, r3
   2a80a:	781b      	ldrb	r3, [r3, #0]
   2a80c:	0011      	movs	r1, r2
   2a80e:	0018      	movs	r0, r3
   2a810:	4b20      	ldr	r3, [pc, #128]	; (2a894 <disk_read+0xd0>)
   2a812:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2a814:	230e      	movs	r3, #14
   2a816:	18fb      	adds	r3, r7, r3
   2a818:	781b      	ldrb	r3, [r3, #0]
   2a81a:	221b      	movs	r2, #27
   2a81c:	18ba      	adds	r2, r7, r2
   2a81e:	7812      	ldrb	r2, [r2, #0]
   2a820:	4353      	muls	r3, r2
   2a822:	001a      	movs	r2, r3
   2a824:	687b      	ldr	r3, [r7, #4]
   2a826:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2a828:	697b      	ldr	r3, [r7, #20]
   2a82a:	3301      	adds	r3, #1
   2a82c:	211b      	movs	r1, #27
   2a82e:	1879      	adds	r1, r7, r1
   2a830:	7809      	ldrb	r1, [r1, #0]
   2a832:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2a834:	429a      	cmp	r2, r3
   2a836:	d901      	bls.n	2a83c <disk_read+0x78>
		return RES_PARERR;
   2a838:	2304      	movs	r3, #4
   2a83a:	e025      	b.n	2a888 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2a83c:	2300      	movs	r3, #0
   2a83e:	61fb      	str	r3, [r7, #28]
   2a840:	e01b      	b.n	2a87a <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2a842:	231b      	movs	r3, #27
   2a844:	18fb      	adds	r3, r7, r3
   2a846:	781b      	ldrb	r3, [r3, #0]
   2a848:	69fa      	ldr	r2, [r7, #28]
   2a84a:	435a      	muls	r2, r3
   2a84c:	687b      	ldr	r3, [r7, #4]
   2a84e:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2a850:	231b      	movs	r3, #27
   2a852:	18fb      	adds	r3, r7, r3
   2a854:	781b      	ldrb	r3, [r3, #0]
   2a856:	69fa      	ldr	r2, [r7, #28]
   2a858:	4353      	muls	r3, r2
   2a85a:	025b      	lsls	r3, r3, #9
   2a85c:	68ba      	ldr	r2, [r7, #8]
   2a85e:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2a860:	230f      	movs	r3, #15
   2a862:	18fb      	adds	r3, r7, r3
   2a864:	781b      	ldrb	r3, [r3, #0]
   2a866:	0018      	movs	r0, r3
   2a868:	4b0b      	ldr	r3, [pc, #44]	; (2a898 <disk_read+0xd4>)
   2a86a:	4798      	blx	r3
   2a86c:	1e03      	subs	r3, r0, #0
   2a86e:	d001      	beq.n	2a874 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2a870:	2301      	movs	r3, #1
   2a872:	e009      	b.n	2a888 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2a874:	69fb      	ldr	r3, [r7, #28]
   2a876:	3301      	adds	r3, #1
   2a878:	61fb      	str	r3, [r7, #28]
   2a87a:	230e      	movs	r3, #14
   2a87c:	18fb      	adds	r3, r7, r3
   2a87e:	781a      	ldrb	r2, [r3, #0]
   2a880:	69fb      	ldr	r3, [r7, #28]
   2a882:	429a      	cmp	r2, r3
   2a884:	d8dd      	bhi.n	2a842 <disk_read+0x7e>
		}
	}

	return RES_OK;
   2a886:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2a888:	0018      	movs	r0, r3
   2a88a:	46bd      	mov	sp, r7
   2a88c:	b009      	add	sp, #36	; 0x24
   2a88e:	bd90      	pop	{r4, r7, pc}
   2a890:	00025465 	.word	0x00025465
   2a894:	00025419 	.word	0x00025419
   2a898:	000254d9 	.word	0x000254d9

0002a89c <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2a89c:	b590      	push	{r4, r7, lr}
   2a89e:	b089      	sub	sp, #36	; 0x24
   2a8a0:	af00      	add	r7, sp, #0
   2a8a2:	60b9      	str	r1, [r7, #8]
   2a8a4:	607a      	str	r2, [r7, #4]
   2a8a6:	0019      	movs	r1, r3
   2a8a8:	230f      	movs	r3, #15
   2a8aa:	18fb      	adds	r3, r7, r3
   2a8ac:	1c02      	adds	r2, r0, #0
   2a8ae:	701a      	strb	r2, [r3, #0]
   2a8b0:	230e      	movs	r3, #14
   2a8b2:	18fb      	adds	r3, r7, r3
   2a8b4:	1c0a      	adds	r2, r1, #0
   2a8b6:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2a8b8:	231b      	movs	r3, #27
   2a8ba:	18fc      	adds	r4, r7, r3
   2a8bc:	230f      	movs	r3, #15
   2a8be:	18fb      	adds	r3, r7, r3
   2a8c0:	781b      	ldrb	r3, [r3, #0]
   2a8c2:	0018      	movs	r0, r3
   2a8c4:	4b28      	ldr	r3, [pc, #160]	; (2a968 <disk_write+0xcc>)
   2a8c6:	4798      	blx	r3
   2a8c8:	0003      	movs	r3, r0
   2a8ca:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2a8cc:	231b      	movs	r3, #27
   2a8ce:	18fb      	adds	r3, r7, r3
   2a8d0:	781b      	ldrb	r3, [r3, #0]
   2a8d2:	2b00      	cmp	r3, #0
   2a8d4:	d101      	bne.n	2a8da <disk_write+0x3e>
		return RES_ERROR;
   2a8d6:	2301      	movs	r3, #1
   2a8d8:	e042      	b.n	2a960 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2a8da:	2314      	movs	r3, #20
   2a8dc:	18fa      	adds	r2, r7, r3
   2a8de:	230f      	movs	r3, #15
   2a8e0:	18fb      	adds	r3, r7, r3
   2a8e2:	781b      	ldrb	r3, [r3, #0]
   2a8e4:	0011      	movs	r1, r2
   2a8e6:	0018      	movs	r0, r3
   2a8e8:	4b20      	ldr	r3, [pc, #128]	; (2a96c <disk_write+0xd0>)
   2a8ea:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2a8ec:	230e      	movs	r3, #14
   2a8ee:	18fb      	adds	r3, r7, r3
   2a8f0:	781b      	ldrb	r3, [r3, #0]
   2a8f2:	221b      	movs	r2, #27
   2a8f4:	18ba      	adds	r2, r7, r2
   2a8f6:	7812      	ldrb	r2, [r2, #0]
   2a8f8:	4353      	muls	r3, r2
   2a8fa:	001a      	movs	r2, r3
   2a8fc:	687b      	ldr	r3, [r7, #4]
   2a8fe:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2a900:	697b      	ldr	r3, [r7, #20]
   2a902:	3301      	adds	r3, #1
   2a904:	211b      	movs	r1, #27
   2a906:	1879      	adds	r1, r7, r1
   2a908:	7809      	ldrb	r1, [r1, #0]
   2a90a:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2a90c:	429a      	cmp	r2, r3
   2a90e:	d901      	bls.n	2a914 <disk_write+0x78>
		return RES_PARERR;
   2a910:	2304      	movs	r3, #4
   2a912:	e025      	b.n	2a960 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2a914:	2300      	movs	r3, #0
   2a916:	61fb      	str	r3, [r7, #28]
   2a918:	e01b      	b.n	2a952 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2a91a:	231b      	movs	r3, #27
   2a91c:	18fb      	adds	r3, r7, r3
   2a91e:	781b      	ldrb	r3, [r3, #0]
   2a920:	69fa      	ldr	r2, [r7, #28]
   2a922:	435a      	muls	r2, r3
   2a924:	687b      	ldr	r3, [r7, #4]
   2a926:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2a928:	231b      	movs	r3, #27
   2a92a:	18fb      	adds	r3, r7, r3
   2a92c:	781b      	ldrb	r3, [r3, #0]
   2a92e:	69fa      	ldr	r2, [r7, #28]
   2a930:	4353      	muls	r3, r2
   2a932:	025b      	lsls	r3, r3, #9
   2a934:	68ba      	ldr	r2, [r7, #8]
   2a936:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2a938:	230f      	movs	r3, #15
   2a93a:	18fb      	adds	r3, r7, r3
   2a93c:	781b      	ldrb	r3, [r3, #0]
   2a93e:	0018      	movs	r0, r3
   2a940:	4b0b      	ldr	r3, [pc, #44]	; (2a970 <disk_write+0xd4>)
   2a942:	4798      	blx	r3
   2a944:	1e03      	subs	r3, r0, #0
   2a946:	d001      	beq.n	2a94c <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2a948:	2301      	movs	r3, #1
   2a94a:	e009      	b.n	2a960 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2a94c:	69fb      	ldr	r3, [r7, #28]
   2a94e:	3301      	adds	r3, #1
   2a950:	61fb      	str	r3, [r7, #28]
   2a952:	230e      	movs	r3, #14
   2a954:	18fb      	adds	r3, r7, r3
   2a956:	781a      	ldrb	r2, [r3, #0]
   2a958:	69fb      	ldr	r3, [r7, #28]
   2a95a:	429a      	cmp	r2, r3
   2a95c:	d8dd      	bhi.n	2a91a <disk_write+0x7e>
		}
	}

	return RES_OK;
   2a95e:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2a960:	0018      	movs	r0, r3
   2a962:	46bd      	mov	sp, r7
   2a964:	b009      	add	sp, #36	; 0x24
   2a966:	bd90      	pop	{r4, r7, pc}
   2a968:	00025465 	.word	0x00025465
   2a96c:	00025419 	.word	0x00025419
   2a970:	0002552d 	.word	0x0002552d

0002a974 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2a974:	b590      	push	{r4, r7, lr}
   2a976:	b085      	sub	sp, #20
   2a978:	af00      	add	r7, sp, #0
   2a97a:	603a      	str	r2, [r7, #0]
   2a97c:	1dfb      	adds	r3, r7, #7
   2a97e:	1c02      	adds	r2, r0, #0
   2a980:	701a      	strb	r2, [r3, #0]
   2a982:	1dbb      	adds	r3, r7, #6
   2a984:	1c0a      	adds	r2, r1, #0
   2a986:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2a988:	230f      	movs	r3, #15
   2a98a:	18fb      	adds	r3, r7, r3
   2a98c:	2204      	movs	r2, #4
   2a98e:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2a990:	1dbb      	adds	r3, r7, #6
   2a992:	781b      	ldrb	r3, [r3, #0]
   2a994:	2b01      	cmp	r3, #1
   2a996:	d00f      	beq.n	2a9b8 <disk_ioctl+0x44>
   2a998:	dc02      	bgt.n	2a9a0 <disk_ioctl+0x2c>
   2a99a:	2b00      	cmp	r3, #0
   2a99c:	d044      	beq.n	2aa28 <disk_ioctl+0xb4>
   2a99e:	e054      	b.n	2aa4a <disk_ioctl+0xd6>
   2a9a0:	2b02      	cmp	r3, #2
   2a9a2:	d01a      	beq.n	2a9da <disk_ioctl+0x66>
   2a9a4:	2b03      	cmp	r3, #3
   2a9a6:	d150      	bne.n	2aa4a <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2a9a8:	683b      	ldr	r3, [r7, #0]
   2a9aa:	2201      	movs	r2, #1
   2a9ac:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2a9ae:	230f      	movs	r3, #15
   2a9b0:	18fb      	adds	r3, r7, r3
   2a9b2:	2200      	movs	r2, #0
   2a9b4:	701a      	strb	r2, [r3, #0]
		break;
   2a9b6:	e04c      	b.n	2aa52 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2a9b8:	2308      	movs	r3, #8
   2a9ba:	18fa      	adds	r2, r7, r3
   2a9bc:	1dfb      	adds	r3, r7, #7
   2a9be:	781b      	ldrb	r3, [r3, #0]
   2a9c0:	0011      	movs	r1, r2
   2a9c2:	0018      	movs	r0, r3
   2a9c4:	4b26      	ldr	r3, [pc, #152]	; (2aa60 <disk_ioctl+0xec>)
   2a9c6:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2a9c8:	68bb      	ldr	r3, [r7, #8]
   2a9ca:	1c5a      	adds	r2, r3, #1
   2a9cc:	683b      	ldr	r3, [r7, #0]
   2a9ce:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2a9d0:	230f      	movs	r3, #15
   2a9d2:	18fb      	adds	r3, r7, r3
   2a9d4:	2200      	movs	r2, #0
   2a9d6:	701a      	strb	r2, [r3, #0]
	}
	break;
   2a9d8:	e03b      	b.n	2aa52 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2a9da:	230e      	movs	r3, #14
   2a9dc:	18fc      	adds	r4, r7, r3
   2a9de:	1dfb      	adds	r3, r7, #7
   2a9e0:	781b      	ldrb	r3, [r3, #0]
   2a9e2:	0018      	movs	r0, r3
   2a9e4:	4b1f      	ldr	r3, [pc, #124]	; (2aa64 <disk_ioctl+0xf0>)
   2a9e6:	4798      	blx	r3
   2a9e8:	0003      	movs	r3, r0
   2a9ea:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2a9ec:	230e      	movs	r3, #14
   2a9ee:	18fb      	adds	r3, r7, r3
   2a9f0:	781b      	ldrb	r3, [r3, #0]
   2a9f2:	2b01      	cmp	r3, #1
   2a9f4:	d010      	beq.n	2aa18 <disk_ioctl+0xa4>
   2a9f6:	230e      	movs	r3, #14
   2a9f8:	18fb      	adds	r3, r7, r3
   2a9fa:	781b      	ldrb	r3, [r3, #0]
   2a9fc:	2b02      	cmp	r3, #2
   2a9fe:	d00b      	beq.n	2aa18 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2aa00:	230e      	movs	r3, #14
   2aa02:	18fb      	adds	r3, r7, r3
   2aa04:	781b      	ldrb	r3, [r3, #0]
   2aa06:	2b04      	cmp	r3, #4
   2aa08:	d006      	beq.n	2aa18 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2aa0a:	230e      	movs	r3, #14
   2aa0c:	18fb      	adds	r3, r7, r3
   2aa0e:	781b      	ldrb	r3, [r3, #0]
   2aa10:	2b08      	cmp	r3, #8
   2aa12:	d001      	beq.n	2aa18 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2aa14:	2301      	movs	r3, #1
   2aa16:	e01f      	b.n	2aa58 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2aa18:	683b      	ldr	r3, [r7, #0]
   2aa1a:	2200      	movs	r2, #0
   2aa1c:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2aa1e:	230f      	movs	r3, #15
   2aa20:	18fb      	adds	r3, r7, r3
   2aa22:	2200      	movs	r2, #0
   2aa24:	701a      	strb	r2, [r3, #0]
	}
	break;
   2aa26:	e014      	b.n	2aa52 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2aa28:	1dfb      	adds	r3, r7, #7
   2aa2a:	781b      	ldrb	r3, [r3, #0]
   2aa2c:	0018      	movs	r0, r3
   2aa2e:	4b0e      	ldr	r3, [pc, #56]	; (2aa68 <disk_ioctl+0xf4>)
   2aa30:	4798      	blx	r3
   2aa32:	1e03      	subs	r3, r0, #0
   2aa34:	d104      	bne.n	2aa40 <disk_ioctl+0xcc>
			res = RES_OK;
   2aa36:	230f      	movs	r3, #15
   2aa38:	18fb      	adds	r3, r7, r3
   2aa3a:	2200      	movs	r2, #0
   2aa3c:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2aa3e:	e008      	b.n	2aa52 <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2aa40:	230f      	movs	r3, #15
   2aa42:	18fb      	adds	r3, r7, r3
   2aa44:	2203      	movs	r2, #3
   2aa46:	701a      	strb	r2, [r3, #0]
		break;
   2aa48:	e003      	b.n	2aa52 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2aa4a:	230f      	movs	r3, #15
   2aa4c:	18fb      	adds	r3, r7, r3
   2aa4e:	2204      	movs	r2, #4
   2aa50:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2aa52:	230f      	movs	r3, #15
   2aa54:	18fb      	adds	r3, r7, r3
   2aa56:	781b      	ldrb	r3, [r3, #0]
}
   2aa58:	0018      	movs	r0, r3
   2aa5a:	46bd      	mov	sp, r7
   2aa5c:	b005      	add	sp, #20
   2aa5e:	bd90      	pop	{r4, r7, pc}
   2aa60:	00025419 	.word	0x00025419
   2aa64:	00025465 	.word	0x00025465
   2aa68:	000253d9 	.word	0x000253d9

0002aa6c <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2aa6c:	b580      	push	{r7, lr}
   2aa6e:	b084      	sub	sp, #16
   2aa70:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2aa72:	1d3a      	adds	r2, r7, #4
   2aa74:	4b12      	ldr	r3, [pc, #72]	; (2aac0 <get_fattime+0x54>)
   2aa76:	0011      	movs	r1, r2
   2aa78:	0018      	movs	r0, r3
   2aa7a:	4b12      	ldr	r3, [pc, #72]	; (2aac4 <get_fattime+0x58>)
   2aa7c:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2aa7e:	1d3b      	adds	r3, r7, #4
   2aa80:	88db      	ldrh	r3, [r3, #6]
   2aa82:	4a11      	ldr	r2, [pc, #68]	; (2aac8 <get_fattime+0x5c>)
   2aa84:	4694      	mov	ip, r2
   2aa86:	4463      	add	r3, ip
   2aa88:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2aa8a:	1d3b      	adds	r3, r7, #4
   2aa8c:	795b      	ldrb	r3, [r3, #5]
   2aa8e:	055b      	lsls	r3, r3, #21
   2aa90:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2aa92:	1d3b      	adds	r3, r7, #4
   2aa94:	791b      	ldrb	r3, [r3, #4]
   2aa96:	041b      	lsls	r3, r3, #16
   2aa98:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2aa9a:	1d3b      	adds	r3, r7, #4
   2aa9c:	789b      	ldrb	r3, [r3, #2]
   2aa9e:	02db      	lsls	r3, r3, #11
   2aaa0:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2aaa2:	1d3b      	adds	r3, r7, #4
   2aaa4:	785b      	ldrb	r3, [r3, #1]
   2aaa6:	015b      	lsls	r3, r3, #5
   2aaa8:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2aaaa:	1d3a      	adds	r2, r7, #4
   2aaac:	7812      	ldrb	r2, [r2, #0]
   2aaae:	0852      	lsrs	r2, r2, #1
   2aab0:	b2d2      	uxtb	r2, r2
   2aab2:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2aab4:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2aab6:	68fb      	ldr	r3, [r7, #12]
}
   2aab8:	0018      	movs	r0, r3
   2aaba:	46bd      	mov	sp, r7
   2aabc:	b004      	add	sp, #16
   2aabe:	bd80      	pop	{r7, pc}
   2aac0:	20005648 	.word	0x20005648
   2aac4:	00026245 	.word	0x00026245
   2aac8:	fffff844 	.word	0xfffff844

0002aacc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2aacc:	b580      	push	{r7, lr}
   2aace:	b086      	sub	sp, #24
   2aad0:	af00      	add	r7, sp, #0
   2aad2:	60f8      	str	r0, [r7, #12]
   2aad4:	60b9      	str	r1, [r7, #8]
   2aad6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2aad8:	68fb      	ldr	r3, [r7, #12]
   2aada:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2aadc:	68bb      	ldr	r3, [r7, #8]
   2aade:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2aae0:	e007      	b.n	2aaf2 <mem_cpy+0x26>
		*d++ = *s++;
   2aae2:	697b      	ldr	r3, [r7, #20]
   2aae4:	1c5a      	adds	r2, r3, #1
   2aae6:	617a      	str	r2, [r7, #20]
   2aae8:	693a      	ldr	r2, [r7, #16]
   2aaea:	1c51      	adds	r1, r2, #1
   2aaec:	6139      	str	r1, [r7, #16]
   2aaee:	7812      	ldrb	r2, [r2, #0]
   2aaf0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2aaf2:	687b      	ldr	r3, [r7, #4]
   2aaf4:	1e5a      	subs	r2, r3, #1
   2aaf6:	607a      	str	r2, [r7, #4]
   2aaf8:	2b00      	cmp	r3, #0
   2aafa:	d1f2      	bne.n	2aae2 <mem_cpy+0x16>
}
   2aafc:	46c0      	nop			; (mov r8, r8)
   2aafe:	46bd      	mov	sp, r7
   2ab00:	b006      	add	sp, #24
   2ab02:	bd80      	pop	{r7, pc}

0002ab04 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2ab04:	b580      	push	{r7, lr}
   2ab06:	b086      	sub	sp, #24
   2ab08:	af00      	add	r7, sp, #0
   2ab0a:	60f8      	str	r0, [r7, #12]
   2ab0c:	60b9      	str	r1, [r7, #8]
   2ab0e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2ab10:	68fb      	ldr	r3, [r7, #12]
   2ab12:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2ab14:	e005      	b.n	2ab22 <mem_set+0x1e>
		*d++ = (BYTE)val;
   2ab16:	697b      	ldr	r3, [r7, #20]
   2ab18:	1c5a      	adds	r2, r3, #1
   2ab1a:	617a      	str	r2, [r7, #20]
   2ab1c:	68ba      	ldr	r2, [r7, #8]
   2ab1e:	b2d2      	uxtb	r2, r2
   2ab20:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2ab22:	687b      	ldr	r3, [r7, #4]
   2ab24:	1e5a      	subs	r2, r3, #1
   2ab26:	607a      	str	r2, [r7, #4]
   2ab28:	2b00      	cmp	r3, #0
   2ab2a:	d1f4      	bne.n	2ab16 <mem_set+0x12>
}
   2ab2c:	46c0      	nop			; (mov r8, r8)
   2ab2e:	46bd      	mov	sp, r7
   2ab30:	b006      	add	sp, #24
   2ab32:	bd80      	pop	{r7, pc}

0002ab34 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2ab34:	b580      	push	{r7, lr}
   2ab36:	b088      	sub	sp, #32
   2ab38:	af00      	add	r7, sp, #0
   2ab3a:	60f8      	str	r0, [r7, #12]
   2ab3c:	60b9      	str	r1, [r7, #8]
   2ab3e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2ab40:	68fb      	ldr	r3, [r7, #12]
   2ab42:	61fb      	str	r3, [r7, #28]
   2ab44:	68bb      	ldr	r3, [r7, #8]
   2ab46:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2ab48:	2300      	movs	r3, #0
   2ab4a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2ab4c:	46c0      	nop			; (mov r8, r8)
   2ab4e:	687b      	ldr	r3, [r7, #4]
   2ab50:	1e5a      	subs	r2, r3, #1
   2ab52:	607a      	str	r2, [r7, #4]
   2ab54:	2b00      	cmp	r3, #0
   2ab56:	d00d      	beq.n	2ab74 <mem_cmp+0x40>
   2ab58:	69fb      	ldr	r3, [r7, #28]
   2ab5a:	1c5a      	adds	r2, r3, #1
   2ab5c:	61fa      	str	r2, [r7, #28]
   2ab5e:	781b      	ldrb	r3, [r3, #0]
   2ab60:	0019      	movs	r1, r3
   2ab62:	69bb      	ldr	r3, [r7, #24]
   2ab64:	1c5a      	adds	r2, r3, #1
   2ab66:	61ba      	str	r2, [r7, #24]
   2ab68:	781b      	ldrb	r3, [r3, #0]
   2ab6a:	1acb      	subs	r3, r1, r3
   2ab6c:	617b      	str	r3, [r7, #20]
   2ab6e:	697b      	ldr	r3, [r7, #20]
   2ab70:	2b00      	cmp	r3, #0
   2ab72:	d0ec      	beq.n	2ab4e <mem_cmp+0x1a>
	return r;
   2ab74:	697b      	ldr	r3, [r7, #20]
}
   2ab76:	0018      	movs	r0, r3
   2ab78:	46bd      	mov	sp, r7
   2ab7a:	b008      	add	sp, #32
   2ab7c:	bd80      	pop	{r7, pc}

0002ab7e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2ab7e:	b580      	push	{r7, lr}
   2ab80:	b082      	sub	sp, #8
   2ab82:	af00      	add	r7, sp, #0
   2ab84:	6078      	str	r0, [r7, #4]
   2ab86:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2ab88:	e002      	b.n	2ab90 <chk_chr+0x12>
   2ab8a:	687b      	ldr	r3, [r7, #4]
   2ab8c:	3301      	adds	r3, #1
   2ab8e:	607b      	str	r3, [r7, #4]
   2ab90:	687b      	ldr	r3, [r7, #4]
   2ab92:	781b      	ldrb	r3, [r3, #0]
   2ab94:	2b00      	cmp	r3, #0
   2ab96:	d005      	beq.n	2aba4 <chk_chr+0x26>
   2ab98:	687b      	ldr	r3, [r7, #4]
   2ab9a:	781b      	ldrb	r3, [r3, #0]
   2ab9c:	001a      	movs	r2, r3
   2ab9e:	683b      	ldr	r3, [r7, #0]
   2aba0:	429a      	cmp	r2, r3
   2aba2:	d1f2      	bne.n	2ab8a <chk_chr+0xc>
	return *str;
   2aba4:	687b      	ldr	r3, [r7, #4]
   2aba6:	781b      	ldrb	r3, [r3, #0]
}
   2aba8:	0018      	movs	r0, r3
   2abaa:	46bd      	mov	sp, r7
   2abac:	b002      	add	sp, #8
   2abae:	bd80      	pop	{r7, pc}

0002abb0 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2abb0:	b590      	push	{r4, r7, lr}
   2abb2:	b085      	sub	sp, #20
   2abb4:	af00      	add	r7, sp, #0
   2abb6:	6078      	str	r0, [r7, #4]
   2abb8:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2abba:	687b      	ldr	r3, [r7, #4]
   2abbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2abbe:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2abc0:	68fa      	ldr	r2, [r7, #12]
   2abc2:	683b      	ldr	r3, [r7, #0]
   2abc4:	429a      	cmp	r2, r3
   2abc6:	d04e      	beq.n	2ac66 <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2abc8:	687b      	ldr	r3, [r7, #4]
   2abca:	791b      	ldrb	r3, [r3, #4]
   2abcc:	2b00      	cmp	r3, #0
   2abce:	d037      	beq.n	2ac40 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2abd0:	687b      	ldr	r3, [r7, #4]
   2abd2:	7858      	ldrb	r0, [r3, #1]
   2abd4:	687b      	ldr	r3, [r7, #4]
   2abd6:	3330      	adds	r3, #48	; 0x30
   2abd8:	0019      	movs	r1, r3
   2abda:	68fa      	ldr	r2, [r7, #12]
   2abdc:	2301      	movs	r3, #1
   2abde:	4c24      	ldr	r4, [pc, #144]	; (2ac70 <move_window+0xc0>)
   2abe0:	47a0      	blx	r4
   2abe2:	1e03      	subs	r3, r0, #0
   2abe4:	d001      	beq.n	2abea <move_window+0x3a>
				return FR_DISK_ERR;
   2abe6:	2301      	movs	r3, #1
   2abe8:	e03e      	b.n	2ac68 <move_window+0xb8>
			fs->wflag = 0;
   2abea:	687b      	ldr	r3, [r7, #4]
   2abec:	2200      	movs	r2, #0
   2abee:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2abf0:	687b      	ldr	r3, [r7, #4]
   2abf2:	6a1a      	ldr	r2, [r3, #32]
   2abf4:	687b      	ldr	r3, [r7, #4]
   2abf6:	69db      	ldr	r3, [r3, #28]
   2abf8:	18d2      	adds	r2, r2, r3
   2abfa:	68fb      	ldr	r3, [r7, #12]
   2abfc:	429a      	cmp	r2, r3
   2abfe:	d91f      	bls.n	2ac40 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2ac00:	230b      	movs	r3, #11
   2ac02:	18fb      	adds	r3, r7, r3
   2ac04:	687a      	ldr	r2, [r7, #4]
   2ac06:	78d2      	ldrb	r2, [r2, #3]
   2ac08:	701a      	strb	r2, [r3, #0]
   2ac0a:	e014      	b.n	2ac36 <move_window+0x86>
					wsect += fs->fsize;
   2ac0c:	687b      	ldr	r3, [r7, #4]
   2ac0e:	69db      	ldr	r3, [r3, #28]
   2ac10:	68fa      	ldr	r2, [r7, #12]
   2ac12:	18d3      	adds	r3, r2, r3
   2ac14:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2ac16:	687b      	ldr	r3, [r7, #4]
   2ac18:	7858      	ldrb	r0, [r3, #1]
   2ac1a:	687b      	ldr	r3, [r7, #4]
   2ac1c:	3330      	adds	r3, #48	; 0x30
   2ac1e:	0019      	movs	r1, r3
   2ac20:	68fa      	ldr	r2, [r7, #12]
   2ac22:	2301      	movs	r3, #1
   2ac24:	4c12      	ldr	r4, [pc, #72]	; (2ac70 <move_window+0xc0>)
   2ac26:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2ac28:	230b      	movs	r3, #11
   2ac2a:	18fb      	adds	r3, r7, r3
   2ac2c:	781a      	ldrb	r2, [r3, #0]
   2ac2e:	230b      	movs	r3, #11
   2ac30:	18fb      	adds	r3, r7, r3
   2ac32:	3a01      	subs	r2, #1
   2ac34:	701a      	strb	r2, [r3, #0]
   2ac36:	230b      	movs	r3, #11
   2ac38:	18fb      	adds	r3, r7, r3
   2ac3a:	781b      	ldrb	r3, [r3, #0]
   2ac3c:	2b01      	cmp	r3, #1
   2ac3e:	d8e5      	bhi.n	2ac0c <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2ac40:	683b      	ldr	r3, [r7, #0]
   2ac42:	2b00      	cmp	r3, #0
   2ac44:	d00f      	beq.n	2ac66 <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2ac46:	687b      	ldr	r3, [r7, #4]
   2ac48:	7858      	ldrb	r0, [r3, #1]
   2ac4a:	687b      	ldr	r3, [r7, #4]
   2ac4c:	3330      	adds	r3, #48	; 0x30
   2ac4e:	0019      	movs	r1, r3
   2ac50:	683a      	ldr	r2, [r7, #0]
   2ac52:	2301      	movs	r3, #1
   2ac54:	4c07      	ldr	r4, [pc, #28]	; (2ac74 <move_window+0xc4>)
   2ac56:	47a0      	blx	r4
   2ac58:	1e03      	subs	r3, r0, #0
   2ac5a:	d001      	beq.n	2ac60 <move_window+0xb0>
				return FR_DISK_ERR;
   2ac5c:	2301      	movs	r3, #1
   2ac5e:	e003      	b.n	2ac68 <move_window+0xb8>
			fs->winsect = sector;
   2ac60:	687b      	ldr	r3, [r7, #4]
   2ac62:	683a      	ldr	r2, [r7, #0]
   2ac64:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2ac66:	2300      	movs	r3, #0
}
   2ac68:	0018      	movs	r0, r3
   2ac6a:	46bd      	mov	sp, r7
   2ac6c:	b005      	add	sp, #20
   2ac6e:	bd90      	pop	{r4, r7, pc}
   2ac70:	0002a89d 	.word	0x0002a89d
   2ac74:	0002a7c5 	.word	0x0002a7c5

0002ac78 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2ac78:	b590      	push	{r4, r7, lr}
   2ac7a:	b085      	sub	sp, #20
   2ac7c:	af00      	add	r7, sp, #0
   2ac7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2ac80:	230f      	movs	r3, #15
   2ac82:	18fc      	adds	r4, r7, r3
   2ac84:	687b      	ldr	r3, [r7, #4]
   2ac86:	2100      	movs	r1, #0
   2ac88:	0018      	movs	r0, r3
   2ac8a:	4b52      	ldr	r3, [pc, #328]	; (2add4 <sync+0x15c>)
   2ac8c:	4798      	blx	r3
   2ac8e:	0003      	movs	r3, r0
   2ac90:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2ac92:	230f      	movs	r3, #15
   2ac94:	18fb      	adds	r3, r7, r3
   2ac96:	781b      	ldrb	r3, [r3, #0]
   2ac98:	2b00      	cmp	r3, #0
   2ac9a:	d000      	beq.n	2ac9e <sync+0x26>
   2ac9c:	e093      	b.n	2adc6 <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2ac9e:	687b      	ldr	r3, [r7, #4]
   2aca0:	781b      	ldrb	r3, [r3, #0]
   2aca2:	2b03      	cmp	r3, #3
   2aca4:	d000      	beq.n	2aca8 <sync+0x30>
   2aca6:	e081      	b.n	2adac <sync+0x134>
   2aca8:	687b      	ldr	r3, [r7, #4]
   2acaa:	795b      	ldrb	r3, [r3, #5]
   2acac:	2b00      	cmp	r3, #0
   2acae:	d07d      	beq.n	2adac <sync+0x134>
			fs->winsect = 0;
   2acb0:	687b      	ldr	r3, [r7, #4]
   2acb2:	2200      	movs	r2, #0
   2acb4:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2acb6:	687b      	ldr	r3, [r7, #4]
   2acb8:	3330      	adds	r3, #48	; 0x30
   2acba:	0018      	movs	r0, r3
   2acbc:	2380      	movs	r3, #128	; 0x80
   2acbe:	009b      	lsls	r3, r3, #2
   2acc0:	001a      	movs	r2, r3
   2acc2:	2100      	movs	r1, #0
   2acc4:	4b44      	ldr	r3, [pc, #272]	; (2add8 <sync+0x160>)
   2acc6:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2acc8:	687b      	ldr	r3, [r7, #4]
   2acca:	4a44      	ldr	r2, [pc, #272]	; (2addc <sync+0x164>)
   2accc:	2155      	movs	r1, #85	; 0x55
   2acce:	5499      	strb	r1, [r3, r2]
   2acd0:	687b      	ldr	r3, [r7, #4]
   2acd2:	4a43      	ldr	r2, [pc, #268]	; (2ade0 <sync+0x168>)
   2acd4:	21aa      	movs	r1, #170	; 0xaa
   2acd6:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2acd8:	687b      	ldr	r3, [r7, #4]
   2acda:	2230      	movs	r2, #48	; 0x30
   2acdc:	2152      	movs	r1, #82	; 0x52
   2acde:	5499      	strb	r1, [r3, r2]
   2ace0:	687b      	ldr	r3, [r7, #4]
   2ace2:	2231      	movs	r2, #49	; 0x31
   2ace4:	2152      	movs	r1, #82	; 0x52
   2ace6:	5499      	strb	r1, [r3, r2]
   2ace8:	687b      	ldr	r3, [r7, #4]
   2acea:	2232      	movs	r2, #50	; 0x32
   2acec:	2161      	movs	r1, #97	; 0x61
   2acee:	5499      	strb	r1, [r3, r2]
   2acf0:	687b      	ldr	r3, [r7, #4]
   2acf2:	2233      	movs	r2, #51	; 0x33
   2acf4:	2141      	movs	r1, #65	; 0x41
   2acf6:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2acf8:	687a      	ldr	r2, [r7, #4]
   2acfa:	2385      	movs	r3, #133	; 0x85
   2acfc:	009b      	lsls	r3, r3, #2
   2acfe:	2172      	movs	r1, #114	; 0x72
   2ad00:	54d1      	strb	r1, [r2, r3]
   2ad02:	687b      	ldr	r3, [r7, #4]
   2ad04:	4a37      	ldr	r2, [pc, #220]	; (2ade4 <sync+0x16c>)
   2ad06:	2172      	movs	r1, #114	; 0x72
   2ad08:	5499      	strb	r1, [r3, r2]
   2ad0a:	687b      	ldr	r3, [r7, #4]
   2ad0c:	4a36      	ldr	r2, [pc, #216]	; (2ade8 <sync+0x170>)
   2ad0e:	2141      	movs	r1, #65	; 0x41
   2ad10:	5499      	strb	r1, [r3, r2]
   2ad12:	687b      	ldr	r3, [r7, #4]
   2ad14:	4a35      	ldr	r2, [pc, #212]	; (2adec <sync+0x174>)
   2ad16:	2161      	movs	r1, #97	; 0x61
   2ad18:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2ad1a:	687b      	ldr	r3, [r7, #4]
   2ad1c:	691b      	ldr	r3, [r3, #16]
   2ad1e:	b2d9      	uxtb	r1, r3
   2ad20:	687a      	ldr	r2, [r7, #4]
   2ad22:	2386      	movs	r3, #134	; 0x86
   2ad24:	009b      	lsls	r3, r3, #2
   2ad26:	54d1      	strb	r1, [r2, r3]
   2ad28:	687b      	ldr	r3, [r7, #4]
   2ad2a:	691b      	ldr	r3, [r3, #16]
   2ad2c:	b29b      	uxth	r3, r3
   2ad2e:	0a1b      	lsrs	r3, r3, #8
   2ad30:	b29b      	uxth	r3, r3
   2ad32:	b2d9      	uxtb	r1, r3
   2ad34:	687b      	ldr	r3, [r7, #4]
   2ad36:	4a2e      	ldr	r2, [pc, #184]	; (2adf0 <sync+0x178>)
   2ad38:	5499      	strb	r1, [r3, r2]
   2ad3a:	687b      	ldr	r3, [r7, #4]
   2ad3c:	691b      	ldr	r3, [r3, #16]
   2ad3e:	0c1b      	lsrs	r3, r3, #16
   2ad40:	b2d9      	uxtb	r1, r3
   2ad42:	687b      	ldr	r3, [r7, #4]
   2ad44:	4a2b      	ldr	r2, [pc, #172]	; (2adf4 <sync+0x17c>)
   2ad46:	5499      	strb	r1, [r3, r2]
   2ad48:	687b      	ldr	r3, [r7, #4]
   2ad4a:	691b      	ldr	r3, [r3, #16]
   2ad4c:	0e1b      	lsrs	r3, r3, #24
   2ad4e:	b2d9      	uxtb	r1, r3
   2ad50:	687b      	ldr	r3, [r7, #4]
   2ad52:	4a29      	ldr	r2, [pc, #164]	; (2adf8 <sync+0x180>)
   2ad54:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2ad56:	687b      	ldr	r3, [r7, #4]
   2ad58:	68db      	ldr	r3, [r3, #12]
   2ad5a:	b2d9      	uxtb	r1, r3
   2ad5c:	687a      	ldr	r2, [r7, #4]
   2ad5e:	2387      	movs	r3, #135	; 0x87
   2ad60:	009b      	lsls	r3, r3, #2
   2ad62:	54d1      	strb	r1, [r2, r3]
   2ad64:	687b      	ldr	r3, [r7, #4]
   2ad66:	68db      	ldr	r3, [r3, #12]
   2ad68:	b29b      	uxth	r3, r3
   2ad6a:	0a1b      	lsrs	r3, r3, #8
   2ad6c:	b29b      	uxth	r3, r3
   2ad6e:	b2d9      	uxtb	r1, r3
   2ad70:	687b      	ldr	r3, [r7, #4]
   2ad72:	4a22      	ldr	r2, [pc, #136]	; (2adfc <sync+0x184>)
   2ad74:	5499      	strb	r1, [r3, r2]
   2ad76:	687b      	ldr	r3, [r7, #4]
   2ad78:	68db      	ldr	r3, [r3, #12]
   2ad7a:	0c1b      	lsrs	r3, r3, #16
   2ad7c:	b2d9      	uxtb	r1, r3
   2ad7e:	687b      	ldr	r3, [r7, #4]
   2ad80:	4a1f      	ldr	r2, [pc, #124]	; (2ae00 <sync+0x188>)
   2ad82:	5499      	strb	r1, [r3, r2]
   2ad84:	687b      	ldr	r3, [r7, #4]
   2ad86:	68db      	ldr	r3, [r3, #12]
   2ad88:	0e1b      	lsrs	r3, r3, #24
   2ad8a:	b2d9      	uxtb	r1, r3
   2ad8c:	687b      	ldr	r3, [r7, #4]
   2ad8e:	4a1d      	ldr	r2, [pc, #116]	; (2ae04 <sync+0x18c>)
   2ad90:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2ad92:	687b      	ldr	r3, [r7, #4]
   2ad94:	7858      	ldrb	r0, [r3, #1]
   2ad96:	687b      	ldr	r3, [r7, #4]
   2ad98:	3330      	adds	r3, #48	; 0x30
   2ad9a:	0019      	movs	r1, r3
   2ad9c:	687b      	ldr	r3, [r7, #4]
   2ad9e:	695a      	ldr	r2, [r3, #20]
   2ada0:	2301      	movs	r3, #1
   2ada2:	4c19      	ldr	r4, [pc, #100]	; (2ae08 <sync+0x190>)
   2ada4:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2ada6:	687b      	ldr	r3, [r7, #4]
   2ada8:	2200      	movs	r2, #0
   2adaa:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2adac:	687b      	ldr	r3, [r7, #4]
   2adae:	785b      	ldrb	r3, [r3, #1]
   2adb0:	2200      	movs	r2, #0
   2adb2:	2100      	movs	r1, #0
   2adb4:	0018      	movs	r0, r3
   2adb6:	4b15      	ldr	r3, [pc, #84]	; (2ae0c <sync+0x194>)
   2adb8:	4798      	blx	r3
   2adba:	1e03      	subs	r3, r0, #0
   2adbc:	d003      	beq.n	2adc6 <sync+0x14e>
			res = FR_DISK_ERR;
   2adbe:	230f      	movs	r3, #15
   2adc0:	18fb      	adds	r3, r7, r3
   2adc2:	2201      	movs	r2, #1
   2adc4:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2adc6:	230f      	movs	r3, #15
   2adc8:	18fb      	adds	r3, r7, r3
   2adca:	781b      	ldrb	r3, [r3, #0]
}
   2adcc:	0018      	movs	r0, r3
   2adce:	46bd      	mov	sp, r7
   2add0:	b005      	add	sp, #20
   2add2:	bd90      	pop	{r4, r7, pc}
   2add4:	0002abb1 	.word	0x0002abb1
   2add8:	0002ab05 	.word	0x0002ab05
   2addc:	0000022e 	.word	0x0000022e
   2ade0:	0000022f 	.word	0x0000022f
   2ade4:	00000215 	.word	0x00000215
   2ade8:	00000216 	.word	0x00000216
   2adec:	00000217 	.word	0x00000217
   2adf0:	00000219 	.word	0x00000219
   2adf4:	0000021a 	.word	0x0000021a
   2adf8:	0000021b 	.word	0x0000021b
   2adfc:	0000021d 	.word	0x0000021d
   2ae00:	0000021e 	.word	0x0000021e
   2ae04:	0000021f 	.word	0x0000021f
   2ae08:	0002a89d 	.word	0x0002a89d
   2ae0c:	0002a975 	.word	0x0002a975

0002ae10 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2ae10:	b580      	push	{r7, lr}
   2ae12:	b082      	sub	sp, #8
   2ae14:	af00      	add	r7, sp, #0
   2ae16:	6078      	str	r0, [r7, #4]
   2ae18:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2ae1a:	683b      	ldr	r3, [r7, #0]
   2ae1c:	3b02      	subs	r3, #2
   2ae1e:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2ae20:	687b      	ldr	r3, [r7, #4]
   2ae22:	699b      	ldr	r3, [r3, #24]
   2ae24:	1e9a      	subs	r2, r3, #2
   2ae26:	683b      	ldr	r3, [r7, #0]
   2ae28:	429a      	cmp	r2, r3
   2ae2a:	d801      	bhi.n	2ae30 <clust2sect+0x20>
   2ae2c:	2300      	movs	r3, #0
   2ae2e:	e007      	b.n	2ae40 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2ae30:	687b      	ldr	r3, [r7, #4]
   2ae32:	789b      	ldrb	r3, [r3, #2]
   2ae34:	001a      	movs	r2, r3
   2ae36:	683b      	ldr	r3, [r7, #0]
   2ae38:	435a      	muls	r2, r3
   2ae3a:	687b      	ldr	r3, [r7, #4]
   2ae3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2ae3e:	18d3      	adds	r3, r2, r3
}
   2ae40:	0018      	movs	r0, r3
   2ae42:	46bd      	mov	sp, r7
   2ae44:	b002      	add	sp, #8
   2ae46:	bd80      	pop	{r7, pc}

0002ae48 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2ae48:	b580      	push	{r7, lr}
   2ae4a:	b086      	sub	sp, #24
   2ae4c:	af00      	add	r7, sp, #0
   2ae4e:	6078      	str	r0, [r7, #4]
   2ae50:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2ae52:	683b      	ldr	r3, [r7, #0]
   2ae54:	2b01      	cmp	r3, #1
   2ae56:	d904      	bls.n	2ae62 <get_fat+0x1a>
   2ae58:	687b      	ldr	r3, [r7, #4]
   2ae5a:	699a      	ldr	r2, [r3, #24]
   2ae5c:	683b      	ldr	r3, [r7, #0]
   2ae5e:	429a      	cmp	r2, r3
   2ae60:	d801      	bhi.n	2ae66 <get_fat+0x1e>
		return 1;
   2ae62:	2301      	movs	r3, #1
   2ae64:	e09f      	b.n	2afa6 <get_fat+0x15e>

	switch (fs->fs_type) {
   2ae66:	687b      	ldr	r3, [r7, #4]
   2ae68:	781b      	ldrb	r3, [r3, #0]
   2ae6a:	2b02      	cmp	r3, #2
   2ae6c:	d048      	beq.n	2af00 <get_fat+0xb8>
   2ae6e:	2b03      	cmp	r3, #3
   2ae70:	d067      	beq.n	2af42 <get_fat+0xfa>
   2ae72:	2b01      	cmp	r3, #1
   2ae74:	d000      	beq.n	2ae78 <get_fat+0x30>
   2ae76:	e094      	b.n	2afa2 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2ae78:	683b      	ldr	r3, [r7, #0]
   2ae7a:	617b      	str	r3, [r7, #20]
   2ae7c:	697b      	ldr	r3, [r7, #20]
   2ae7e:	085b      	lsrs	r3, r3, #1
   2ae80:	697a      	ldr	r2, [r7, #20]
   2ae82:	18d3      	adds	r3, r2, r3
   2ae84:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ae86:	687b      	ldr	r3, [r7, #4]
   2ae88:	6a1a      	ldr	r2, [r3, #32]
   2ae8a:	697b      	ldr	r3, [r7, #20]
   2ae8c:	0a5b      	lsrs	r3, r3, #9
   2ae8e:	18d2      	adds	r2, r2, r3
   2ae90:	687b      	ldr	r3, [r7, #4]
   2ae92:	0011      	movs	r1, r2
   2ae94:	0018      	movs	r0, r3
   2ae96:	4b46      	ldr	r3, [pc, #280]	; (2afb0 <get_fat+0x168>)
   2ae98:	4798      	blx	r3
   2ae9a:	1e03      	subs	r3, r0, #0
   2ae9c:	d000      	beq.n	2aea0 <get_fat+0x58>
   2ae9e:	e079      	b.n	2af94 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2aea0:	697b      	ldr	r3, [r7, #20]
   2aea2:	05db      	lsls	r3, r3, #23
   2aea4:	0ddb      	lsrs	r3, r3, #23
   2aea6:	687a      	ldr	r2, [r7, #4]
   2aea8:	2130      	movs	r1, #48	; 0x30
   2aeaa:	18d3      	adds	r3, r2, r3
   2aeac:	185b      	adds	r3, r3, r1
   2aeae:	781b      	ldrb	r3, [r3, #0]
   2aeb0:	613b      	str	r3, [r7, #16]
   2aeb2:	697b      	ldr	r3, [r7, #20]
   2aeb4:	3301      	adds	r3, #1
   2aeb6:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2aeb8:	687b      	ldr	r3, [r7, #4]
   2aeba:	6a1a      	ldr	r2, [r3, #32]
   2aebc:	697b      	ldr	r3, [r7, #20]
   2aebe:	0a5b      	lsrs	r3, r3, #9
   2aec0:	18d2      	adds	r2, r2, r3
   2aec2:	687b      	ldr	r3, [r7, #4]
   2aec4:	0011      	movs	r1, r2
   2aec6:	0018      	movs	r0, r3
   2aec8:	4b39      	ldr	r3, [pc, #228]	; (2afb0 <get_fat+0x168>)
   2aeca:	4798      	blx	r3
   2aecc:	1e03      	subs	r3, r0, #0
   2aece:	d163      	bne.n	2af98 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2aed0:	697b      	ldr	r3, [r7, #20]
   2aed2:	05db      	lsls	r3, r3, #23
   2aed4:	0ddb      	lsrs	r3, r3, #23
   2aed6:	687a      	ldr	r2, [r7, #4]
   2aed8:	2130      	movs	r1, #48	; 0x30
   2aeda:	18d3      	adds	r3, r2, r3
   2aedc:	185b      	adds	r3, r3, r1
   2aede:	781b      	ldrb	r3, [r3, #0]
   2aee0:	021b      	lsls	r3, r3, #8
   2aee2:	001a      	movs	r2, r3
   2aee4:	693b      	ldr	r3, [r7, #16]
   2aee6:	4313      	orrs	r3, r2
   2aee8:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2aeea:	683b      	ldr	r3, [r7, #0]
   2aeec:	2201      	movs	r2, #1
   2aeee:	4013      	ands	r3, r2
   2aef0:	d002      	beq.n	2aef8 <get_fat+0xb0>
   2aef2:	693b      	ldr	r3, [r7, #16]
   2aef4:	091b      	lsrs	r3, r3, #4
   2aef6:	e056      	b.n	2afa6 <get_fat+0x15e>
   2aef8:	693b      	ldr	r3, [r7, #16]
   2aefa:	051b      	lsls	r3, r3, #20
   2aefc:	0d1b      	lsrs	r3, r3, #20
   2aefe:	e052      	b.n	2afa6 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2af00:	687b      	ldr	r3, [r7, #4]
   2af02:	6a1a      	ldr	r2, [r3, #32]
   2af04:	683b      	ldr	r3, [r7, #0]
   2af06:	0a1b      	lsrs	r3, r3, #8
   2af08:	18d2      	adds	r2, r2, r3
   2af0a:	687b      	ldr	r3, [r7, #4]
   2af0c:	0011      	movs	r1, r2
   2af0e:	0018      	movs	r0, r3
   2af10:	4b27      	ldr	r3, [pc, #156]	; (2afb0 <get_fat+0x168>)
   2af12:	4798      	blx	r3
   2af14:	1e03      	subs	r3, r0, #0
   2af16:	d141      	bne.n	2af9c <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2af18:	683b      	ldr	r3, [r7, #0]
   2af1a:	005a      	lsls	r2, r3, #1
   2af1c:	23ff      	movs	r3, #255	; 0xff
   2af1e:	005b      	lsls	r3, r3, #1
   2af20:	4013      	ands	r3, r2
   2af22:	3330      	adds	r3, #48	; 0x30
   2af24:	687a      	ldr	r2, [r7, #4]
   2af26:	18d3      	adds	r3, r2, r3
   2af28:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2af2a:	68fb      	ldr	r3, [r7, #12]
   2af2c:	3301      	adds	r3, #1
   2af2e:	781b      	ldrb	r3, [r3, #0]
   2af30:	021b      	lsls	r3, r3, #8
   2af32:	b21a      	sxth	r2, r3
   2af34:	68fb      	ldr	r3, [r7, #12]
   2af36:	781b      	ldrb	r3, [r3, #0]
   2af38:	b21b      	sxth	r3, r3
   2af3a:	4313      	orrs	r3, r2
   2af3c:	b21b      	sxth	r3, r3
   2af3e:	b29b      	uxth	r3, r3
   2af40:	e031      	b.n	2afa6 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2af42:	687b      	ldr	r3, [r7, #4]
   2af44:	6a1a      	ldr	r2, [r3, #32]
   2af46:	683b      	ldr	r3, [r7, #0]
   2af48:	09db      	lsrs	r3, r3, #7
   2af4a:	18d2      	adds	r2, r2, r3
   2af4c:	687b      	ldr	r3, [r7, #4]
   2af4e:	0011      	movs	r1, r2
   2af50:	0018      	movs	r0, r3
   2af52:	4b17      	ldr	r3, [pc, #92]	; (2afb0 <get_fat+0x168>)
   2af54:	4798      	blx	r3
   2af56:	1e03      	subs	r3, r0, #0
   2af58:	d122      	bne.n	2afa0 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2af5a:	683b      	ldr	r3, [r7, #0]
   2af5c:	009a      	lsls	r2, r3, #2
   2af5e:	23fe      	movs	r3, #254	; 0xfe
   2af60:	005b      	lsls	r3, r3, #1
   2af62:	4013      	ands	r3, r2
   2af64:	3330      	adds	r3, #48	; 0x30
   2af66:	687a      	ldr	r2, [r7, #4]
   2af68:	18d3      	adds	r3, r2, r3
   2af6a:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2af6c:	68fb      	ldr	r3, [r7, #12]
   2af6e:	3303      	adds	r3, #3
   2af70:	781b      	ldrb	r3, [r3, #0]
   2af72:	061a      	lsls	r2, r3, #24
   2af74:	68fb      	ldr	r3, [r7, #12]
   2af76:	3302      	adds	r3, #2
   2af78:	781b      	ldrb	r3, [r3, #0]
   2af7a:	041b      	lsls	r3, r3, #16
   2af7c:	4313      	orrs	r3, r2
   2af7e:	68fa      	ldr	r2, [r7, #12]
   2af80:	3201      	adds	r2, #1
   2af82:	7812      	ldrb	r2, [r2, #0]
   2af84:	0212      	lsls	r2, r2, #8
   2af86:	4313      	orrs	r3, r2
   2af88:	68fa      	ldr	r2, [r7, #12]
   2af8a:	7812      	ldrb	r2, [r2, #0]
   2af8c:	4313      	orrs	r3, r2
   2af8e:	011b      	lsls	r3, r3, #4
   2af90:	091b      	lsrs	r3, r3, #4
   2af92:	e008      	b.n	2afa6 <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2af94:	46c0      	nop			; (mov r8, r8)
   2af96:	e004      	b.n	2afa2 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2af98:	46c0      	nop			; (mov r8, r8)
   2af9a:	e002      	b.n	2afa2 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2af9c:	46c0      	nop			; (mov r8, r8)
   2af9e:	e000      	b.n	2afa2 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2afa0:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2afa2:	2301      	movs	r3, #1
   2afa4:	425b      	negs	r3, r3
}
   2afa6:	0018      	movs	r0, r3
   2afa8:	46bd      	mov	sp, r7
   2afaa:	b006      	add	sp, #24
   2afac:	bd80      	pop	{r7, pc}
   2afae:	46c0      	nop			; (mov r8, r8)
   2afb0:	0002abb1 	.word	0x0002abb1

0002afb4 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2afb4:	b590      	push	{r4, r7, lr}
   2afb6:	b089      	sub	sp, #36	; 0x24
   2afb8:	af00      	add	r7, sp, #0
   2afba:	60f8      	str	r0, [r7, #12]
   2afbc:	60b9      	str	r1, [r7, #8]
   2afbe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2afc0:	68bb      	ldr	r3, [r7, #8]
   2afc2:	2b01      	cmp	r3, #1
   2afc4:	d904      	bls.n	2afd0 <put_fat+0x1c>
   2afc6:	68fb      	ldr	r3, [r7, #12]
   2afc8:	699a      	ldr	r2, [r3, #24]
   2afca:	68bb      	ldr	r3, [r7, #8]
   2afcc:	429a      	cmp	r2, r3
   2afce:	d804      	bhi.n	2afda <put_fat+0x26>
		res = FR_INT_ERR;
   2afd0:	231f      	movs	r3, #31
   2afd2:	18fb      	adds	r3, r7, r3
   2afd4:	2202      	movs	r2, #2
   2afd6:	701a      	strb	r2, [r3, #0]
   2afd8:	e100      	b.n	2b1dc <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2afda:	68fb      	ldr	r3, [r7, #12]
   2afdc:	781b      	ldrb	r3, [r3, #0]
   2afde:	2b02      	cmp	r3, #2
   2afe0:	d100      	bne.n	2afe4 <put_fat+0x30>
   2afe2:	e078      	b.n	2b0d6 <put_fat+0x122>
   2afe4:	2b03      	cmp	r3, #3
   2afe6:	d100      	bne.n	2afea <put_fat+0x36>
   2afe8:	e09e      	b.n	2b128 <put_fat+0x174>
   2afea:	2b01      	cmp	r3, #1
   2afec:	d000      	beq.n	2aff0 <put_fat+0x3c>
   2afee:	e0e6      	b.n	2b1be <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2aff0:	68bb      	ldr	r3, [r7, #8]
   2aff2:	61bb      	str	r3, [r7, #24]
   2aff4:	69bb      	ldr	r3, [r7, #24]
   2aff6:	085b      	lsrs	r3, r3, #1
   2aff8:	69ba      	ldr	r2, [r7, #24]
   2affa:	18d3      	adds	r3, r2, r3
   2affc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2affe:	68fb      	ldr	r3, [r7, #12]
   2b000:	6a1a      	ldr	r2, [r3, #32]
   2b002:	69bb      	ldr	r3, [r7, #24]
   2b004:	0a5b      	lsrs	r3, r3, #9
   2b006:	18d2      	adds	r2, r2, r3
   2b008:	231f      	movs	r3, #31
   2b00a:	18fc      	adds	r4, r7, r3
   2b00c:	68fb      	ldr	r3, [r7, #12]
   2b00e:	0011      	movs	r1, r2
   2b010:	0018      	movs	r0, r3
   2b012:	4b76      	ldr	r3, [pc, #472]	; (2b1ec <put_fat+0x238>)
   2b014:	4798      	blx	r3
   2b016:	0003      	movs	r3, r0
   2b018:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b01a:	231f      	movs	r3, #31
   2b01c:	18fb      	adds	r3, r7, r3
   2b01e:	781b      	ldrb	r3, [r3, #0]
   2b020:	2b00      	cmp	r3, #0
   2b022:	d000      	beq.n	2b026 <put_fat+0x72>
   2b024:	e0d0      	b.n	2b1c8 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2b026:	69bb      	ldr	r3, [r7, #24]
   2b028:	05db      	lsls	r3, r3, #23
   2b02a:	0ddb      	lsrs	r3, r3, #23
   2b02c:	3330      	adds	r3, #48	; 0x30
   2b02e:	68fa      	ldr	r2, [r7, #12]
   2b030:	18d3      	adds	r3, r2, r3
   2b032:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2b034:	68bb      	ldr	r3, [r7, #8]
   2b036:	2201      	movs	r2, #1
   2b038:	4013      	ands	r3, r2
   2b03a:	d00d      	beq.n	2b058 <put_fat+0xa4>
   2b03c:	697b      	ldr	r3, [r7, #20]
   2b03e:	781b      	ldrb	r3, [r3, #0]
   2b040:	b25b      	sxtb	r3, r3
   2b042:	220f      	movs	r2, #15
   2b044:	4013      	ands	r3, r2
   2b046:	b25a      	sxtb	r2, r3
   2b048:	687b      	ldr	r3, [r7, #4]
   2b04a:	b2db      	uxtb	r3, r3
   2b04c:	011b      	lsls	r3, r3, #4
   2b04e:	b25b      	sxtb	r3, r3
   2b050:	4313      	orrs	r3, r2
   2b052:	b25b      	sxtb	r3, r3
   2b054:	b2db      	uxtb	r3, r3
   2b056:	e001      	b.n	2b05c <put_fat+0xa8>
   2b058:	687b      	ldr	r3, [r7, #4]
   2b05a:	b2db      	uxtb	r3, r3
   2b05c:	697a      	ldr	r2, [r7, #20]
   2b05e:	7013      	strb	r3, [r2, #0]
			bc++;
   2b060:	69bb      	ldr	r3, [r7, #24]
   2b062:	3301      	adds	r3, #1
   2b064:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2b066:	68fb      	ldr	r3, [r7, #12]
   2b068:	2201      	movs	r2, #1
   2b06a:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2b06c:	68fb      	ldr	r3, [r7, #12]
   2b06e:	6a1a      	ldr	r2, [r3, #32]
   2b070:	69bb      	ldr	r3, [r7, #24]
   2b072:	0a5b      	lsrs	r3, r3, #9
   2b074:	18d2      	adds	r2, r2, r3
   2b076:	231f      	movs	r3, #31
   2b078:	18fc      	adds	r4, r7, r3
   2b07a:	68fb      	ldr	r3, [r7, #12]
   2b07c:	0011      	movs	r1, r2
   2b07e:	0018      	movs	r0, r3
   2b080:	4b5a      	ldr	r3, [pc, #360]	; (2b1ec <put_fat+0x238>)
   2b082:	4798      	blx	r3
   2b084:	0003      	movs	r3, r0
   2b086:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b088:	231f      	movs	r3, #31
   2b08a:	18fb      	adds	r3, r7, r3
   2b08c:	781b      	ldrb	r3, [r3, #0]
   2b08e:	2b00      	cmp	r3, #0
   2b090:	d000      	beq.n	2b094 <put_fat+0xe0>
   2b092:	e09b      	b.n	2b1cc <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2b094:	69bb      	ldr	r3, [r7, #24]
   2b096:	05db      	lsls	r3, r3, #23
   2b098:	0ddb      	lsrs	r3, r3, #23
   2b09a:	3330      	adds	r3, #48	; 0x30
   2b09c:	68fa      	ldr	r2, [r7, #12]
   2b09e:	18d3      	adds	r3, r2, r3
   2b0a0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2b0a2:	68bb      	ldr	r3, [r7, #8]
   2b0a4:	2201      	movs	r2, #1
   2b0a6:	4013      	ands	r3, r2
   2b0a8:	d003      	beq.n	2b0b2 <put_fat+0xfe>
   2b0aa:	687b      	ldr	r3, [r7, #4]
   2b0ac:	091b      	lsrs	r3, r3, #4
   2b0ae:	b2db      	uxtb	r3, r3
   2b0b0:	e00e      	b.n	2b0d0 <put_fat+0x11c>
   2b0b2:	697b      	ldr	r3, [r7, #20]
   2b0b4:	781b      	ldrb	r3, [r3, #0]
   2b0b6:	b25b      	sxtb	r3, r3
   2b0b8:	220f      	movs	r2, #15
   2b0ba:	4393      	bics	r3, r2
   2b0bc:	b25a      	sxtb	r2, r3
   2b0be:	687b      	ldr	r3, [r7, #4]
   2b0c0:	0a1b      	lsrs	r3, r3, #8
   2b0c2:	b25b      	sxtb	r3, r3
   2b0c4:	210f      	movs	r1, #15
   2b0c6:	400b      	ands	r3, r1
   2b0c8:	b25b      	sxtb	r3, r3
   2b0ca:	4313      	orrs	r3, r2
   2b0cc:	b25b      	sxtb	r3, r3
   2b0ce:	b2db      	uxtb	r3, r3
   2b0d0:	697a      	ldr	r2, [r7, #20]
   2b0d2:	7013      	strb	r3, [r2, #0]
			break;
   2b0d4:	e07f      	b.n	2b1d6 <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2b0d6:	68fb      	ldr	r3, [r7, #12]
   2b0d8:	6a1a      	ldr	r2, [r3, #32]
   2b0da:	68bb      	ldr	r3, [r7, #8]
   2b0dc:	0a1b      	lsrs	r3, r3, #8
   2b0de:	18d2      	adds	r2, r2, r3
   2b0e0:	231f      	movs	r3, #31
   2b0e2:	18fc      	adds	r4, r7, r3
   2b0e4:	68fb      	ldr	r3, [r7, #12]
   2b0e6:	0011      	movs	r1, r2
   2b0e8:	0018      	movs	r0, r3
   2b0ea:	4b40      	ldr	r3, [pc, #256]	; (2b1ec <put_fat+0x238>)
   2b0ec:	4798      	blx	r3
   2b0ee:	0003      	movs	r3, r0
   2b0f0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b0f2:	231f      	movs	r3, #31
   2b0f4:	18fb      	adds	r3, r7, r3
   2b0f6:	781b      	ldrb	r3, [r3, #0]
   2b0f8:	2b00      	cmp	r3, #0
   2b0fa:	d169      	bne.n	2b1d0 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2b0fc:	68bb      	ldr	r3, [r7, #8]
   2b0fe:	005a      	lsls	r2, r3, #1
   2b100:	23ff      	movs	r3, #255	; 0xff
   2b102:	005b      	lsls	r3, r3, #1
   2b104:	4013      	ands	r3, r2
   2b106:	3330      	adds	r3, #48	; 0x30
   2b108:	68fa      	ldr	r2, [r7, #12]
   2b10a:	18d3      	adds	r3, r2, r3
   2b10c:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2b10e:	687b      	ldr	r3, [r7, #4]
   2b110:	b2da      	uxtb	r2, r3
   2b112:	697b      	ldr	r3, [r7, #20]
   2b114:	701a      	strb	r2, [r3, #0]
   2b116:	697b      	ldr	r3, [r7, #20]
   2b118:	3301      	adds	r3, #1
   2b11a:	687a      	ldr	r2, [r7, #4]
   2b11c:	b292      	uxth	r2, r2
   2b11e:	0a12      	lsrs	r2, r2, #8
   2b120:	b292      	uxth	r2, r2
   2b122:	b2d2      	uxtb	r2, r2
   2b124:	701a      	strb	r2, [r3, #0]
			break;
   2b126:	e056      	b.n	2b1d6 <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2b128:	68fb      	ldr	r3, [r7, #12]
   2b12a:	6a1a      	ldr	r2, [r3, #32]
   2b12c:	68bb      	ldr	r3, [r7, #8]
   2b12e:	09db      	lsrs	r3, r3, #7
   2b130:	18d2      	adds	r2, r2, r3
   2b132:	231f      	movs	r3, #31
   2b134:	18fc      	adds	r4, r7, r3
   2b136:	68fb      	ldr	r3, [r7, #12]
   2b138:	0011      	movs	r1, r2
   2b13a:	0018      	movs	r0, r3
   2b13c:	4b2b      	ldr	r3, [pc, #172]	; (2b1ec <put_fat+0x238>)
   2b13e:	4798      	blx	r3
   2b140:	0003      	movs	r3, r0
   2b142:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b144:	231f      	movs	r3, #31
   2b146:	18fb      	adds	r3, r7, r3
   2b148:	781b      	ldrb	r3, [r3, #0]
   2b14a:	2b00      	cmp	r3, #0
   2b14c:	d142      	bne.n	2b1d4 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2b14e:	68bb      	ldr	r3, [r7, #8]
   2b150:	009a      	lsls	r2, r3, #2
   2b152:	23fe      	movs	r3, #254	; 0xfe
   2b154:	005b      	lsls	r3, r3, #1
   2b156:	4013      	ands	r3, r2
   2b158:	3330      	adds	r3, #48	; 0x30
   2b15a:	68fa      	ldr	r2, [r7, #12]
   2b15c:	18d3      	adds	r3, r2, r3
   2b15e:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2b160:	697b      	ldr	r3, [r7, #20]
   2b162:	3303      	adds	r3, #3
   2b164:	781b      	ldrb	r3, [r3, #0]
   2b166:	061a      	lsls	r2, r3, #24
   2b168:	697b      	ldr	r3, [r7, #20]
   2b16a:	3302      	adds	r3, #2
   2b16c:	781b      	ldrb	r3, [r3, #0]
   2b16e:	041b      	lsls	r3, r3, #16
   2b170:	4313      	orrs	r3, r2
   2b172:	697a      	ldr	r2, [r7, #20]
   2b174:	3201      	adds	r2, #1
   2b176:	7812      	ldrb	r2, [r2, #0]
   2b178:	0212      	lsls	r2, r2, #8
   2b17a:	4313      	orrs	r3, r2
   2b17c:	697a      	ldr	r2, [r7, #20]
   2b17e:	7812      	ldrb	r2, [r2, #0]
   2b180:	4313      	orrs	r3, r2
   2b182:	0f1b      	lsrs	r3, r3, #28
   2b184:	071b      	lsls	r3, r3, #28
   2b186:	687a      	ldr	r2, [r7, #4]
   2b188:	4313      	orrs	r3, r2
   2b18a:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2b18c:	687b      	ldr	r3, [r7, #4]
   2b18e:	b2da      	uxtb	r2, r3
   2b190:	697b      	ldr	r3, [r7, #20]
   2b192:	701a      	strb	r2, [r3, #0]
   2b194:	697b      	ldr	r3, [r7, #20]
   2b196:	3301      	adds	r3, #1
   2b198:	687a      	ldr	r2, [r7, #4]
   2b19a:	b292      	uxth	r2, r2
   2b19c:	0a12      	lsrs	r2, r2, #8
   2b19e:	b292      	uxth	r2, r2
   2b1a0:	b2d2      	uxtb	r2, r2
   2b1a2:	701a      	strb	r2, [r3, #0]
   2b1a4:	697b      	ldr	r3, [r7, #20]
   2b1a6:	3302      	adds	r3, #2
   2b1a8:	687a      	ldr	r2, [r7, #4]
   2b1aa:	0c12      	lsrs	r2, r2, #16
   2b1ac:	b2d2      	uxtb	r2, r2
   2b1ae:	701a      	strb	r2, [r3, #0]
   2b1b0:	697b      	ldr	r3, [r7, #20]
   2b1b2:	3303      	adds	r3, #3
   2b1b4:	687a      	ldr	r2, [r7, #4]
   2b1b6:	0e12      	lsrs	r2, r2, #24
   2b1b8:	b2d2      	uxtb	r2, r2
   2b1ba:	701a      	strb	r2, [r3, #0]
			break;
   2b1bc:	e00b      	b.n	2b1d6 <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2b1be:	231f      	movs	r3, #31
   2b1c0:	18fb      	adds	r3, r7, r3
   2b1c2:	2202      	movs	r2, #2
   2b1c4:	701a      	strb	r2, [r3, #0]
   2b1c6:	e006      	b.n	2b1d6 <put_fat+0x222>
			if (res != FR_OK) break;
   2b1c8:	46c0      	nop			; (mov r8, r8)
   2b1ca:	e004      	b.n	2b1d6 <put_fat+0x222>
			if (res != FR_OK) break;
   2b1cc:	46c0      	nop			; (mov r8, r8)
   2b1ce:	e002      	b.n	2b1d6 <put_fat+0x222>
			if (res != FR_OK) break;
   2b1d0:	46c0      	nop			; (mov r8, r8)
   2b1d2:	e000      	b.n	2b1d6 <put_fat+0x222>
			if (res != FR_OK) break;
   2b1d4:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2b1d6:	68fb      	ldr	r3, [r7, #12]
   2b1d8:	2201      	movs	r2, #1
   2b1da:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2b1dc:	231f      	movs	r3, #31
   2b1de:	18fb      	adds	r3, r7, r3
   2b1e0:	781b      	ldrb	r3, [r3, #0]
}
   2b1e2:	0018      	movs	r0, r3
   2b1e4:	46bd      	mov	sp, r7
   2b1e6:	b009      	add	sp, #36	; 0x24
   2b1e8:	bd90      	pop	{r4, r7, pc}
   2b1ea:	46c0      	nop			; (mov r8, r8)
   2b1ec:	0002abb1 	.word	0x0002abb1

0002b1f0 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2b1f0:	b590      	push	{r4, r7, lr}
   2b1f2:	b085      	sub	sp, #20
   2b1f4:	af00      	add	r7, sp, #0
   2b1f6:	6078      	str	r0, [r7, #4]
   2b1f8:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2b1fa:	683b      	ldr	r3, [r7, #0]
   2b1fc:	2b01      	cmp	r3, #1
   2b1fe:	d904      	bls.n	2b20a <remove_chain+0x1a>
   2b200:	687b      	ldr	r3, [r7, #4]
   2b202:	699a      	ldr	r2, [r3, #24]
   2b204:	683b      	ldr	r3, [r7, #0]
   2b206:	429a      	cmp	r2, r3
   2b208:	d804      	bhi.n	2b214 <remove_chain+0x24>
		res = FR_INT_ERR;
   2b20a:	230f      	movs	r3, #15
   2b20c:	18fb      	adds	r3, r7, r3
   2b20e:	2202      	movs	r2, #2
   2b210:	701a      	strb	r2, [r3, #0]
   2b212:	e045      	b.n	2b2a0 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2b214:	230f      	movs	r3, #15
   2b216:	18fb      	adds	r3, r7, r3
   2b218:	2200      	movs	r2, #0
   2b21a:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b21c:	e037      	b.n	2b28e <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2b21e:	683a      	ldr	r2, [r7, #0]
   2b220:	687b      	ldr	r3, [r7, #4]
   2b222:	0011      	movs	r1, r2
   2b224:	0018      	movs	r0, r3
   2b226:	4b22      	ldr	r3, [pc, #136]	; (2b2b0 <remove_chain+0xc0>)
   2b228:	4798      	blx	r3
   2b22a:	0003      	movs	r3, r0
   2b22c:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2b22e:	68bb      	ldr	r3, [r7, #8]
   2b230:	2b00      	cmp	r3, #0
   2b232:	d032      	beq.n	2b29a <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2b234:	68bb      	ldr	r3, [r7, #8]
   2b236:	2b01      	cmp	r3, #1
   2b238:	d104      	bne.n	2b244 <remove_chain+0x54>
   2b23a:	230f      	movs	r3, #15
   2b23c:	18fb      	adds	r3, r7, r3
   2b23e:	2202      	movs	r2, #2
   2b240:	701a      	strb	r2, [r3, #0]
   2b242:	e02d      	b.n	2b2a0 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2b244:	68bb      	ldr	r3, [r7, #8]
   2b246:	3301      	adds	r3, #1
   2b248:	d104      	bne.n	2b254 <remove_chain+0x64>
   2b24a:	230f      	movs	r3, #15
   2b24c:	18fb      	adds	r3, r7, r3
   2b24e:	2201      	movs	r2, #1
   2b250:	701a      	strb	r2, [r3, #0]
   2b252:	e025      	b.n	2b2a0 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2b254:	230f      	movs	r3, #15
   2b256:	18fc      	adds	r4, r7, r3
   2b258:	6839      	ldr	r1, [r7, #0]
   2b25a:	687b      	ldr	r3, [r7, #4]
   2b25c:	2200      	movs	r2, #0
   2b25e:	0018      	movs	r0, r3
   2b260:	4b14      	ldr	r3, [pc, #80]	; (2b2b4 <remove_chain+0xc4>)
   2b262:	4798      	blx	r3
   2b264:	0003      	movs	r3, r0
   2b266:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b268:	230f      	movs	r3, #15
   2b26a:	18fb      	adds	r3, r7, r3
   2b26c:	781b      	ldrb	r3, [r3, #0]
   2b26e:	2b00      	cmp	r3, #0
   2b270:	d115      	bne.n	2b29e <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2b272:	687b      	ldr	r3, [r7, #4]
   2b274:	691b      	ldr	r3, [r3, #16]
   2b276:	3301      	adds	r3, #1
   2b278:	d007      	beq.n	2b28a <remove_chain+0x9a>
				fs->free_clust++;
   2b27a:	687b      	ldr	r3, [r7, #4]
   2b27c:	691b      	ldr	r3, [r3, #16]
   2b27e:	1c5a      	adds	r2, r3, #1
   2b280:	687b      	ldr	r3, [r7, #4]
   2b282:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2b284:	687b      	ldr	r3, [r7, #4]
   2b286:	2201      	movs	r2, #1
   2b288:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2b28a:	68bb      	ldr	r3, [r7, #8]
   2b28c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b28e:	687b      	ldr	r3, [r7, #4]
   2b290:	699a      	ldr	r2, [r3, #24]
   2b292:	683b      	ldr	r3, [r7, #0]
   2b294:	429a      	cmp	r2, r3
   2b296:	d8c2      	bhi.n	2b21e <remove_chain+0x2e>
   2b298:	e002      	b.n	2b2a0 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2b29a:	46c0      	nop			; (mov r8, r8)
   2b29c:	e000      	b.n	2b2a0 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2b29e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2b2a0:	230f      	movs	r3, #15
   2b2a2:	18fb      	adds	r3, r7, r3
   2b2a4:	781b      	ldrb	r3, [r3, #0]
}
   2b2a6:	0018      	movs	r0, r3
   2b2a8:	46bd      	mov	sp, r7
   2b2aa:	b005      	add	sp, #20
   2b2ac:	bd90      	pop	{r4, r7, pc}
   2b2ae:	46c0      	nop			; (mov r8, r8)
   2b2b0:	0002ae49 	.word	0x0002ae49
   2b2b4:	0002afb5 	.word	0x0002afb5

0002b2b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2b2b8:	b590      	push	{r4, r7, lr}
   2b2ba:	b087      	sub	sp, #28
   2b2bc:	af00      	add	r7, sp, #0
   2b2be:	6078      	str	r0, [r7, #4]
   2b2c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2b2c2:	683b      	ldr	r3, [r7, #0]
   2b2c4:	2b00      	cmp	r3, #0
   2b2c6:	d10d      	bne.n	2b2e4 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2b2c8:	687b      	ldr	r3, [r7, #4]
   2b2ca:	68db      	ldr	r3, [r3, #12]
   2b2cc:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2b2ce:	693b      	ldr	r3, [r7, #16]
   2b2d0:	2b00      	cmp	r3, #0
   2b2d2:	d004      	beq.n	2b2de <create_chain+0x26>
   2b2d4:	687b      	ldr	r3, [r7, #4]
   2b2d6:	699a      	ldr	r2, [r3, #24]
   2b2d8:	693b      	ldr	r3, [r7, #16]
   2b2da:	429a      	cmp	r2, r3
   2b2dc:	d818      	bhi.n	2b310 <create_chain+0x58>
   2b2de:	2301      	movs	r3, #1
   2b2e0:	613b      	str	r3, [r7, #16]
   2b2e2:	e015      	b.n	2b310 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2b2e4:	683a      	ldr	r2, [r7, #0]
   2b2e6:	687b      	ldr	r3, [r7, #4]
   2b2e8:	0011      	movs	r1, r2
   2b2ea:	0018      	movs	r0, r3
   2b2ec:	4b3e      	ldr	r3, [pc, #248]	; (2b3e8 <create_chain+0x130>)
   2b2ee:	4798      	blx	r3
   2b2f0:	0003      	movs	r3, r0
   2b2f2:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2b2f4:	68bb      	ldr	r3, [r7, #8]
   2b2f6:	2b01      	cmp	r3, #1
   2b2f8:	d801      	bhi.n	2b2fe <create_chain+0x46>
   2b2fa:	2301      	movs	r3, #1
   2b2fc:	e070      	b.n	2b3e0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2b2fe:	687b      	ldr	r3, [r7, #4]
   2b300:	699a      	ldr	r2, [r3, #24]
   2b302:	68bb      	ldr	r3, [r7, #8]
   2b304:	429a      	cmp	r2, r3
   2b306:	d901      	bls.n	2b30c <create_chain+0x54>
   2b308:	68bb      	ldr	r3, [r7, #8]
   2b30a:	e069      	b.n	2b3e0 <create_chain+0x128>
		scl = clst;
   2b30c:	683b      	ldr	r3, [r7, #0]
   2b30e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2b310:	693b      	ldr	r3, [r7, #16]
   2b312:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2b314:	697b      	ldr	r3, [r7, #20]
   2b316:	3301      	adds	r3, #1
   2b318:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2b31a:	687b      	ldr	r3, [r7, #4]
   2b31c:	699a      	ldr	r2, [r3, #24]
   2b31e:	697b      	ldr	r3, [r7, #20]
   2b320:	429a      	cmp	r2, r3
   2b322:	d807      	bhi.n	2b334 <create_chain+0x7c>
			ncl = 2;
   2b324:	2302      	movs	r3, #2
   2b326:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2b328:	697a      	ldr	r2, [r7, #20]
   2b32a:	693b      	ldr	r3, [r7, #16]
   2b32c:	429a      	cmp	r2, r3
   2b32e:	d901      	bls.n	2b334 <create_chain+0x7c>
   2b330:	2300      	movs	r3, #0
   2b332:	e055      	b.n	2b3e0 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2b334:	697a      	ldr	r2, [r7, #20]
   2b336:	687b      	ldr	r3, [r7, #4]
   2b338:	0011      	movs	r1, r2
   2b33a:	0018      	movs	r0, r3
   2b33c:	4b2a      	ldr	r3, [pc, #168]	; (2b3e8 <create_chain+0x130>)
   2b33e:	4798      	blx	r3
   2b340:	0003      	movs	r3, r0
   2b342:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2b344:	68bb      	ldr	r3, [r7, #8]
   2b346:	2b00      	cmp	r3, #0
   2b348:	d00d      	beq.n	2b366 <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2b34a:	68bb      	ldr	r3, [r7, #8]
   2b34c:	3301      	adds	r3, #1
   2b34e:	d002      	beq.n	2b356 <create_chain+0x9e>
   2b350:	68bb      	ldr	r3, [r7, #8]
   2b352:	2b01      	cmp	r3, #1
   2b354:	d101      	bne.n	2b35a <create_chain+0xa2>
			return cs;
   2b356:	68bb      	ldr	r3, [r7, #8]
   2b358:	e042      	b.n	2b3e0 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2b35a:	697a      	ldr	r2, [r7, #20]
   2b35c:	693b      	ldr	r3, [r7, #16]
   2b35e:	429a      	cmp	r2, r3
   2b360:	d1d8      	bne.n	2b314 <create_chain+0x5c>
   2b362:	2300      	movs	r3, #0
   2b364:	e03c      	b.n	2b3e0 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2b366:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2b368:	230f      	movs	r3, #15
   2b36a:	18fc      	adds	r4, r7, r3
   2b36c:	4a1f      	ldr	r2, [pc, #124]	; (2b3ec <create_chain+0x134>)
   2b36e:	6979      	ldr	r1, [r7, #20]
   2b370:	687b      	ldr	r3, [r7, #4]
   2b372:	0018      	movs	r0, r3
   2b374:	4b1e      	ldr	r3, [pc, #120]	; (2b3f0 <create_chain+0x138>)
   2b376:	4798      	blx	r3
   2b378:	0003      	movs	r3, r0
   2b37a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2b37c:	230f      	movs	r3, #15
   2b37e:	18fb      	adds	r3, r7, r3
   2b380:	781b      	ldrb	r3, [r3, #0]
   2b382:	2b00      	cmp	r3, #0
   2b384:	d10c      	bne.n	2b3a0 <create_chain+0xe8>
   2b386:	683b      	ldr	r3, [r7, #0]
   2b388:	2b00      	cmp	r3, #0
   2b38a:	d009      	beq.n	2b3a0 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2b38c:	230f      	movs	r3, #15
   2b38e:	18fc      	adds	r4, r7, r3
   2b390:	697a      	ldr	r2, [r7, #20]
   2b392:	6839      	ldr	r1, [r7, #0]
   2b394:	687b      	ldr	r3, [r7, #4]
   2b396:	0018      	movs	r0, r3
   2b398:	4b15      	ldr	r3, [pc, #84]	; (2b3f0 <create_chain+0x138>)
   2b39a:	4798      	blx	r3
   2b39c:	0003      	movs	r3, r0
   2b39e:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2b3a0:	230f      	movs	r3, #15
   2b3a2:	18fb      	adds	r3, r7, r3
   2b3a4:	781b      	ldrb	r3, [r3, #0]
   2b3a6:	2b00      	cmp	r3, #0
   2b3a8:	d10f      	bne.n	2b3ca <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2b3aa:	687b      	ldr	r3, [r7, #4]
   2b3ac:	697a      	ldr	r2, [r7, #20]
   2b3ae:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2b3b0:	687b      	ldr	r3, [r7, #4]
   2b3b2:	691b      	ldr	r3, [r3, #16]
   2b3b4:	3301      	adds	r3, #1
   2b3b6:	d012      	beq.n	2b3de <create_chain+0x126>
			fs->free_clust--;
   2b3b8:	687b      	ldr	r3, [r7, #4]
   2b3ba:	691b      	ldr	r3, [r3, #16]
   2b3bc:	1e5a      	subs	r2, r3, #1
   2b3be:	687b      	ldr	r3, [r7, #4]
   2b3c0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2b3c2:	687b      	ldr	r3, [r7, #4]
   2b3c4:	2201      	movs	r2, #1
   2b3c6:	715a      	strb	r2, [r3, #5]
   2b3c8:	e009      	b.n	2b3de <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2b3ca:	230f      	movs	r3, #15
   2b3cc:	18fb      	adds	r3, r7, r3
   2b3ce:	781b      	ldrb	r3, [r3, #0]
   2b3d0:	2b01      	cmp	r3, #1
   2b3d2:	d102      	bne.n	2b3da <create_chain+0x122>
   2b3d4:	2301      	movs	r3, #1
   2b3d6:	425b      	negs	r3, r3
   2b3d8:	e000      	b.n	2b3dc <create_chain+0x124>
   2b3da:	2301      	movs	r3, #1
   2b3dc:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2b3de:	697b      	ldr	r3, [r7, #20]
}
   2b3e0:	0018      	movs	r0, r3
   2b3e2:	46bd      	mov	sp, r7
   2b3e4:	b007      	add	sp, #28
   2b3e6:	bd90      	pop	{r4, r7, pc}
   2b3e8:	0002ae49 	.word	0x0002ae49
   2b3ec:	0fffffff 	.word	0x0fffffff
   2b3f0:	0002afb5 	.word	0x0002afb5

0002b3f4 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2b3f4:	b580      	push	{r7, lr}
   2b3f6:	b084      	sub	sp, #16
   2b3f8:	af00      	add	r7, sp, #0
   2b3fa:	6078      	str	r0, [r7, #4]
   2b3fc:	000a      	movs	r2, r1
   2b3fe:	1cbb      	adds	r3, r7, #2
   2b400:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2b402:	687b      	ldr	r3, [r7, #4]
   2b404:	1cba      	adds	r2, r7, #2
   2b406:	8812      	ldrh	r2, [r2, #0]
   2b408:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2b40a:	687b      	ldr	r3, [r7, #4]
   2b40c:	689b      	ldr	r3, [r3, #8]
   2b40e:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2b410:	68fb      	ldr	r3, [r7, #12]
   2b412:	2b01      	cmp	r3, #1
   2b414:	d005      	beq.n	2b422 <dir_sdi+0x2e>
   2b416:	687b      	ldr	r3, [r7, #4]
   2b418:	681b      	ldr	r3, [r3, #0]
   2b41a:	699a      	ldr	r2, [r3, #24]
   2b41c:	68fb      	ldr	r3, [r7, #12]
   2b41e:	429a      	cmp	r2, r3
   2b420:	d801      	bhi.n	2b426 <dir_sdi+0x32>
		return FR_INT_ERR;
   2b422:	2302      	movs	r3, #2
   2b424:	e075      	b.n	2b512 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2b426:	68fb      	ldr	r3, [r7, #12]
   2b428:	2b00      	cmp	r3, #0
   2b42a:	d108      	bne.n	2b43e <dir_sdi+0x4a>
   2b42c:	687b      	ldr	r3, [r7, #4]
   2b42e:	681b      	ldr	r3, [r3, #0]
   2b430:	781b      	ldrb	r3, [r3, #0]
   2b432:	2b03      	cmp	r3, #3
   2b434:	d103      	bne.n	2b43e <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2b436:	687b      	ldr	r3, [r7, #4]
   2b438:	681b      	ldr	r3, [r3, #0]
   2b43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b43c:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2b43e:	68fb      	ldr	r3, [r7, #12]
   2b440:	2b00      	cmp	r3, #0
   2b442:	d116      	bne.n	2b472 <dir_sdi+0x7e>
		dj->clust = clst;
   2b444:	687b      	ldr	r3, [r7, #4]
   2b446:	68fa      	ldr	r2, [r7, #12]
   2b448:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2b44a:	687b      	ldr	r3, [r7, #4]
   2b44c:	681b      	ldr	r3, [r3, #0]
   2b44e:	891b      	ldrh	r3, [r3, #8]
   2b450:	1cba      	adds	r2, r7, #2
   2b452:	8812      	ldrh	r2, [r2, #0]
   2b454:	429a      	cmp	r2, r3
   2b456:	d301      	bcc.n	2b45c <dir_sdi+0x68>
			return FR_INT_ERR;
   2b458:	2302      	movs	r3, #2
   2b45a:	e05a      	b.n	2b512 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2b45c:	687b      	ldr	r3, [r7, #4]
   2b45e:	681b      	ldr	r3, [r3, #0]
   2b460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b462:	1cba      	adds	r2, r7, #2
   2b464:	8812      	ldrh	r2, [r2, #0]
   2b466:	0912      	lsrs	r2, r2, #4
   2b468:	b292      	uxth	r2, r2
   2b46a:	189a      	adds	r2, r3, r2
   2b46c:	687b      	ldr	r3, [r7, #4]
   2b46e:	611a      	str	r2, [r3, #16]
   2b470:	e042      	b.n	2b4f8 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2b472:	687b      	ldr	r3, [r7, #4]
   2b474:	681b      	ldr	r3, [r3, #0]
   2b476:	789b      	ldrb	r3, [r3, #2]
   2b478:	b29a      	uxth	r2, r3
   2b47a:	230a      	movs	r3, #10
   2b47c:	18fb      	adds	r3, r7, r3
   2b47e:	0112      	lsls	r2, r2, #4
   2b480:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2b482:	e020      	b.n	2b4c6 <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2b484:	687b      	ldr	r3, [r7, #4]
   2b486:	681b      	ldr	r3, [r3, #0]
   2b488:	68fa      	ldr	r2, [r7, #12]
   2b48a:	0011      	movs	r1, r2
   2b48c:	0018      	movs	r0, r3
   2b48e:	4b23      	ldr	r3, [pc, #140]	; (2b51c <dir_sdi+0x128>)
   2b490:	4798      	blx	r3
   2b492:	0003      	movs	r3, r0
   2b494:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2b496:	68fb      	ldr	r3, [r7, #12]
   2b498:	3301      	adds	r3, #1
   2b49a:	d101      	bne.n	2b4a0 <dir_sdi+0xac>
   2b49c:	2301      	movs	r3, #1
   2b49e:	e038      	b.n	2b512 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2b4a0:	68fb      	ldr	r3, [r7, #12]
   2b4a2:	2b01      	cmp	r3, #1
   2b4a4:	d905      	bls.n	2b4b2 <dir_sdi+0xbe>
   2b4a6:	687b      	ldr	r3, [r7, #4]
   2b4a8:	681b      	ldr	r3, [r3, #0]
   2b4aa:	699a      	ldr	r2, [r3, #24]
   2b4ac:	68fb      	ldr	r3, [r7, #12]
   2b4ae:	429a      	cmp	r2, r3
   2b4b0:	d801      	bhi.n	2b4b6 <dir_sdi+0xc2>
				return FR_INT_ERR;
   2b4b2:	2302      	movs	r3, #2
   2b4b4:	e02d      	b.n	2b512 <dir_sdi+0x11e>
			idx -= ic;
   2b4b6:	1cbb      	adds	r3, r7, #2
   2b4b8:	1cb9      	adds	r1, r7, #2
   2b4ba:	220a      	movs	r2, #10
   2b4bc:	18ba      	adds	r2, r7, r2
   2b4be:	8809      	ldrh	r1, [r1, #0]
   2b4c0:	8812      	ldrh	r2, [r2, #0]
   2b4c2:	1a8a      	subs	r2, r1, r2
   2b4c4:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2b4c6:	1cba      	adds	r2, r7, #2
   2b4c8:	230a      	movs	r3, #10
   2b4ca:	18fb      	adds	r3, r7, r3
   2b4cc:	8812      	ldrh	r2, [r2, #0]
   2b4ce:	881b      	ldrh	r3, [r3, #0]
   2b4d0:	429a      	cmp	r2, r3
   2b4d2:	d2d7      	bcs.n	2b484 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2b4d4:	687b      	ldr	r3, [r7, #4]
   2b4d6:	68fa      	ldr	r2, [r7, #12]
   2b4d8:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2b4da:	687b      	ldr	r3, [r7, #4]
   2b4dc:	681b      	ldr	r3, [r3, #0]
   2b4de:	68fa      	ldr	r2, [r7, #12]
   2b4e0:	0011      	movs	r1, r2
   2b4e2:	0018      	movs	r0, r3
   2b4e4:	4b0e      	ldr	r3, [pc, #56]	; (2b520 <dir_sdi+0x12c>)
   2b4e6:	4798      	blx	r3
   2b4e8:	0002      	movs	r2, r0
   2b4ea:	1cbb      	adds	r3, r7, #2
   2b4ec:	881b      	ldrh	r3, [r3, #0]
   2b4ee:	091b      	lsrs	r3, r3, #4
   2b4f0:	b29b      	uxth	r3, r3
   2b4f2:	18d2      	adds	r2, r2, r3
   2b4f4:	687b      	ldr	r3, [r7, #4]
   2b4f6:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2b4f8:	687b      	ldr	r3, [r7, #4]
   2b4fa:	681b      	ldr	r3, [r3, #0]
   2b4fc:	3330      	adds	r3, #48	; 0x30
   2b4fe:	001a      	movs	r2, r3
   2b500:	1cbb      	adds	r3, r7, #2
   2b502:	881b      	ldrh	r3, [r3, #0]
   2b504:	210f      	movs	r1, #15
   2b506:	400b      	ands	r3, r1
   2b508:	015b      	lsls	r3, r3, #5
   2b50a:	18d2      	adds	r2, r2, r3
   2b50c:	687b      	ldr	r3, [r7, #4]
   2b50e:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2b510:	2300      	movs	r3, #0
}
   2b512:	0018      	movs	r0, r3
   2b514:	46bd      	mov	sp, r7
   2b516:	b004      	add	sp, #16
   2b518:	bd80      	pop	{r7, pc}
   2b51a:	46c0      	nop			; (mov r8, r8)
   2b51c:	0002ae49 	.word	0x0002ae49
   2b520:	0002ae11 	.word	0x0002ae11

0002b524 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2b524:	b590      	push	{r4, r7, lr}
   2b526:	b085      	sub	sp, #20
   2b528:	af00      	add	r7, sp, #0
   2b52a:	6078      	str	r0, [r7, #4]
   2b52c:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2b52e:	687b      	ldr	r3, [r7, #4]
   2b530:	88da      	ldrh	r2, [r3, #6]
   2b532:	2308      	movs	r3, #8
   2b534:	18fb      	adds	r3, r7, r3
   2b536:	3201      	adds	r2, #1
   2b538:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2b53a:	2308      	movs	r3, #8
   2b53c:	18fb      	adds	r3, r7, r3
   2b53e:	881b      	ldrh	r3, [r3, #0]
   2b540:	2b00      	cmp	r3, #0
   2b542:	d003      	beq.n	2b54c <dir_next+0x28>
   2b544:	687b      	ldr	r3, [r7, #4]
   2b546:	691b      	ldr	r3, [r3, #16]
   2b548:	2b00      	cmp	r3, #0
   2b54a:	d101      	bne.n	2b550 <dir_next+0x2c>
		return FR_NO_FILE;
   2b54c:	2304      	movs	r3, #4
   2b54e:	e0d2      	b.n	2b6f6 <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2b550:	2308      	movs	r3, #8
   2b552:	18fb      	adds	r3, r7, r3
   2b554:	881b      	ldrh	r3, [r3, #0]
   2b556:	220f      	movs	r2, #15
   2b558:	4013      	ands	r3, r2
   2b55a:	b29b      	uxth	r3, r3
   2b55c:	2b00      	cmp	r3, #0
   2b55e:	d000      	beq.n	2b562 <dir_next+0x3e>
   2b560:	e0b6      	b.n	2b6d0 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2b562:	687b      	ldr	r3, [r7, #4]
   2b564:	691b      	ldr	r3, [r3, #16]
   2b566:	1c5a      	adds	r2, r3, #1
   2b568:	687b      	ldr	r3, [r7, #4]
   2b56a:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2b56c:	687b      	ldr	r3, [r7, #4]
   2b56e:	68db      	ldr	r3, [r3, #12]
   2b570:	2b00      	cmp	r3, #0
   2b572:	d10a      	bne.n	2b58a <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2b574:	687b      	ldr	r3, [r7, #4]
   2b576:	681b      	ldr	r3, [r3, #0]
   2b578:	891b      	ldrh	r3, [r3, #8]
   2b57a:	2208      	movs	r2, #8
   2b57c:	18ba      	adds	r2, r7, r2
   2b57e:	8812      	ldrh	r2, [r2, #0]
   2b580:	429a      	cmp	r2, r3
   2b582:	d200      	bcs.n	2b586 <dir_next+0x62>
   2b584:	e0a4      	b.n	2b6d0 <dir_next+0x1ac>
				return FR_NO_FILE;
   2b586:	2304      	movs	r3, #4
   2b588:	e0b5      	b.n	2b6f6 <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2b58a:	2308      	movs	r3, #8
   2b58c:	18fb      	adds	r3, r7, r3
   2b58e:	881b      	ldrh	r3, [r3, #0]
   2b590:	091b      	lsrs	r3, r3, #4
   2b592:	b29b      	uxth	r3, r3
   2b594:	001a      	movs	r2, r3
   2b596:	687b      	ldr	r3, [r7, #4]
   2b598:	681b      	ldr	r3, [r3, #0]
   2b59a:	789b      	ldrb	r3, [r3, #2]
   2b59c:	3b01      	subs	r3, #1
   2b59e:	4013      	ands	r3, r2
   2b5a0:	d000      	beq.n	2b5a4 <dir_next+0x80>
   2b5a2:	e095      	b.n	2b6d0 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2b5a4:	687b      	ldr	r3, [r7, #4]
   2b5a6:	681a      	ldr	r2, [r3, #0]
   2b5a8:	687b      	ldr	r3, [r7, #4]
   2b5aa:	68db      	ldr	r3, [r3, #12]
   2b5ac:	0019      	movs	r1, r3
   2b5ae:	0010      	movs	r0, r2
   2b5b0:	4b53      	ldr	r3, [pc, #332]	; (2b700 <dir_next+0x1dc>)
   2b5b2:	4798      	blx	r3
   2b5b4:	0003      	movs	r3, r0
   2b5b6:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2b5b8:	68fb      	ldr	r3, [r7, #12]
   2b5ba:	2b01      	cmp	r3, #1
   2b5bc:	d801      	bhi.n	2b5c2 <dir_next+0x9e>
   2b5be:	2302      	movs	r3, #2
   2b5c0:	e099      	b.n	2b6f6 <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2b5c2:	68fb      	ldr	r3, [r7, #12]
   2b5c4:	3301      	adds	r3, #1
   2b5c6:	d101      	bne.n	2b5cc <dir_next+0xa8>
   2b5c8:	2301      	movs	r3, #1
   2b5ca:	e094      	b.n	2b6f6 <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2b5cc:	687b      	ldr	r3, [r7, #4]
   2b5ce:	681b      	ldr	r3, [r3, #0]
   2b5d0:	699a      	ldr	r2, [r3, #24]
   2b5d2:	68fb      	ldr	r3, [r7, #12]
   2b5d4:	429a      	cmp	r2, r3
   2b5d6:	d900      	bls.n	2b5da <dir_next+0xb6>
   2b5d8:	e06d      	b.n	2b6b6 <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2b5da:	683b      	ldr	r3, [r7, #0]
   2b5dc:	2b00      	cmp	r3, #0
   2b5de:	d101      	bne.n	2b5e4 <dir_next+0xc0>
   2b5e0:	2304      	movs	r3, #4
   2b5e2:	e088      	b.n	2b6f6 <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2b5e4:	687b      	ldr	r3, [r7, #4]
   2b5e6:	681a      	ldr	r2, [r3, #0]
   2b5e8:	687b      	ldr	r3, [r7, #4]
   2b5ea:	68db      	ldr	r3, [r3, #12]
   2b5ec:	0019      	movs	r1, r3
   2b5ee:	0010      	movs	r0, r2
   2b5f0:	4b44      	ldr	r3, [pc, #272]	; (2b704 <dir_next+0x1e0>)
   2b5f2:	4798      	blx	r3
   2b5f4:	0003      	movs	r3, r0
   2b5f6:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2b5f8:	68fb      	ldr	r3, [r7, #12]
   2b5fa:	2b00      	cmp	r3, #0
   2b5fc:	d101      	bne.n	2b602 <dir_next+0xde>
   2b5fe:	2307      	movs	r3, #7
   2b600:	e079      	b.n	2b6f6 <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2b602:	68fb      	ldr	r3, [r7, #12]
   2b604:	2b01      	cmp	r3, #1
   2b606:	d101      	bne.n	2b60c <dir_next+0xe8>
   2b608:	2302      	movs	r3, #2
   2b60a:	e074      	b.n	2b6f6 <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2b60c:	68fb      	ldr	r3, [r7, #12]
   2b60e:	3301      	adds	r3, #1
   2b610:	d101      	bne.n	2b616 <dir_next+0xf2>
   2b612:	2301      	movs	r3, #1
   2b614:	e06f      	b.n	2b6f6 <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2b616:	687b      	ldr	r3, [r7, #4]
   2b618:	681b      	ldr	r3, [r3, #0]
   2b61a:	2100      	movs	r1, #0
   2b61c:	0018      	movs	r0, r3
   2b61e:	4b3a      	ldr	r3, [pc, #232]	; (2b708 <dir_next+0x1e4>)
   2b620:	4798      	blx	r3
   2b622:	1e03      	subs	r3, r0, #0
   2b624:	d001      	beq.n	2b62a <dir_next+0x106>
   2b626:	2301      	movs	r3, #1
   2b628:	e065      	b.n	2b6f6 <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2b62a:	687b      	ldr	r3, [r7, #4]
   2b62c:	681b      	ldr	r3, [r3, #0]
   2b62e:	3330      	adds	r3, #48	; 0x30
   2b630:	0018      	movs	r0, r3
   2b632:	2380      	movs	r3, #128	; 0x80
   2b634:	009b      	lsls	r3, r3, #2
   2b636:	001a      	movs	r2, r3
   2b638:	2100      	movs	r1, #0
   2b63a:	4b34      	ldr	r3, [pc, #208]	; (2b70c <dir_next+0x1e8>)
   2b63c:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2b63e:	687b      	ldr	r3, [r7, #4]
   2b640:	681c      	ldr	r4, [r3, #0]
   2b642:	687b      	ldr	r3, [r7, #4]
   2b644:	681b      	ldr	r3, [r3, #0]
   2b646:	68fa      	ldr	r2, [r7, #12]
   2b648:	0011      	movs	r1, r2
   2b64a:	0018      	movs	r0, r3
   2b64c:	4b30      	ldr	r3, [pc, #192]	; (2b710 <dir_next+0x1ec>)
   2b64e:	4798      	blx	r3
   2b650:	0003      	movs	r3, r0
   2b652:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2b654:	230b      	movs	r3, #11
   2b656:	18fb      	adds	r3, r7, r3
   2b658:	2200      	movs	r2, #0
   2b65a:	701a      	strb	r2, [r3, #0]
   2b65c:	e019      	b.n	2b692 <dir_next+0x16e>
						dj->fs->wflag = 1;
   2b65e:	687b      	ldr	r3, [r7, #4]
   2b660:	681b      	ldr	r3, [r3, #0]
   2b662:	2201      	movs	r2, #1
   2b664:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2b666:	687b      	ldr	r3, [r7, #4]
   2b668:	681b      	ldr	r3, [r3, #0]
   2b66a:	2100      	movs	r1, #0
   2b66c:	0018      	movs	r0, r3
   2b66e:	4b26      	ldr	r3, [pc, #152]	; (2b708 <dir_next+0x1e4>)
   2b670:	4798      	blx	r3
   2b672:	1e03      	subs	r3, r0, #0
   2b674:	d001      	beq.n	2b67a <dir_next+0x156>
   2b676:	2301      	movs	r3, #1
   2b678:	e03d      	b.n	2b6f6 <dir_next+0x1d2>
						dj->fs->winsect++;
   2b67a:	687b      	ldr	r3, [r7, #4]
   2b67c:	681b      	ldr	r3, [r3, #0]
   2b67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2b680:	3201      	adds	r2, #1
   2b682:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2b684:	230b      	movs	r3, #11
   2b686:	18fb      	adds	r3, r7, r3
   2b688:	781a      	ldrb	r2, [r3, #0]
   2b68a:	230b      	movs	r3, #11
   2b68c:	18fb      	adds	r3, r7, r3
   2b68e:	3201      	adds	r2, #1
   2b690:	701a      	strb	r2, [r3, #0]
   2b692:	687b      	ldr	r3, [r7, #4]
   2b694:	681b      	ldr	r3, [r3, #0]
   2b696:	789b      	ldrb	r3, [r3, #2]
   2b698:	220b      	movs	r2, #11
   2b69a:	18ba      	adds	r2, r7, r2
   2b69c:	7812      	ldrb	r2, [r2, #0]
   2b69e:	429a      	cmp	r2, r3
   2b6a0:	d3dd      	bcc.n	2b65e <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2b6a2:	687b      	ldr	r3, [r7, #4]
   2b6a4:	681b      	ldr	r3, [r3, #0]
   2b6a6:	687a      	ldr	r2, [r7, #4]
   2b6a8:	6812      	ldr	r2, [r2, #0]
   2b6aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2b6ac:	220b      	movs	r2, #11
   2b6ae:	18ba      	adds	r2, r7, r2
   2b6b0:	7812      	ldrb	r2, [r2, #0]
   2b6b2:	1a8a      	subs	r2, r1, r2
   2b6b4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2b6b6:	687b      	ldr	r3, [r7, #4]
   2b6b8:	68fa      	ldr	r2, [r7, #12]
   2b6ba:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2b6bc:	687b      	ldr	r3, [r7, #4]
   2b6be:	681b      	ldr	r3, [r3, #0]
   2b6c0:	68fa      	ldr	r2, [r7, #12]
   2b6c2:	0011      	movs	r1, r2
   2b6c4:	0018      	movs	r0, r3
   2b6c6:	4b12      	ldr	r3, [pc, #72]	; (2b710 <dir_next+0x1ec>)
   2b6c8:	4798      	blx	r3
   2b6ca:	0002      	movs	r2, r0
   2b6cc:	687b      	ldr	r3, [r7, #4]
   2b6ce:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2b6d0:	687b      	ldr	r3, [r7, #4]
   2b6d2:	2208      	movs	r2, #8
   2b6d4:	18ba      	adds	r2, r7, r2
   2b6d6:	8812      	ldrh	r2, [r2, #0]
   2b6d8:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2b6da:	687b      	ldr	r3, [r7, #4]
   2b6dc:	681b      	ldr	r3, [r3, #0]
   2b6de:	3330      	adds	r3, #48	; 0x30
   2b6e0:	001a      	movs	r2, r3
   2b6e2:	2308      	movs	r3, #8
   2b6e4:	18fb      	adds	r3, r7, r3
   2b6e6:	881b      	ldrh	r3, [r3, #0]
   2b6e8:	210f      	movs	r1, #15
   2b6ea:	400b      	ands	r3, r1
   2b6ec:	015b      	lsls	r3, r3, #5
   2b6ee:	18d2      	adds	r2, r2, r3
   2b6f0:	687b      	ldr	r3, [r7, #4]
   2b6f2:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2b6f4:	2300      	movs	r3, #0
}
   2b6f6:	0018      	movs	r0, r3
   2b6f8:	46bd      	mov	sp, r7
   2b6fa:	b005      	add	sp, #20
   2b6fc:	bd90      	pop	{r4, r7, pc}
   2b6fe:	46c0      	nop			; (mov r8, r8)
   2b700:	0002ae49 	.word	0x0002ae49
   2b704:	0002b2b9 	.word	0x0002b2b9
   2b708:	0002abb1 	.word	0x0002abb1
   2b70c:	0002ab05 	.word	0x0002ab05
   2b710:	0002ae11 	.word	0x0002ae11

0002b714 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2b714:	b590      	push	{r4, r7, lr}
   2b716:	b087      	sub	sp, #28
   2b718:	af00      	add	r7, sp, #0
   2b71a:	6078      	str	r0, [r7, #4]
   2b71c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2b71e:	683b      	ldr	r3, [r7, #0]
   2b720:	781b      	ldrb	r3, [r3, #0]
   2b722:	001a      	movs	r2, r3
   2b724:	2340      	movs	r3, #64	; 0x40
   2b726:	439a      	bics	r2, r3
   2b728:	0013      	movs	r3, r2
   2b72a:	1e5a      	subs	r2, r3, #1
   2b72c:	0013      	movs	r3, r2
   2b72e:	005b      	lsls	r3, r3, #1
   2b730:	189b      	adds	r3, r3, r2
   2b732:	009b      	lsls	r3, r3, #2
   2b734:	189b      	adds	r3, r3, r2
   2b736:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2b738:	2300      	movs	r3, #0
   2b73a:	613b      	str	r3, [r7, #16]
   2b73c:	230e      	movs	r3, #14
   2b73e:	18fb      	adds	r3, r7, r3
   2b740:	2201      	movs	r2, #1
   2b742:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2b744:	4a31      	ldr	r2, [pc, #196]	; (2b80c <cmp_lfn+0xf8>)
   2b746:	693b      	ldr	r3, [r7, #16]
   2b748:	18d3      	adds	r3, r2, r3
   2b74a:	781b      	ldrb	r3, [r3, #0]
   2b74c:	3301      	adds	r3, #1
   2b74e:	683a      	ldr	r2, [r7, #0]
   2b750:	18d3      	adds	r3, r2, r3
   2b752:	781b      	ldrb	r3, [r3, #0]
   2b754:	021b      	lsls	r3, r3, #8
   2b756:	b21a      	sxth	r2, r3
   2b758:	492c      	ldr	r1, [pc, #176]	; (2b80c <cmp_lfn+0xf8>)
   2b75a:	693b      	ldr	r3, [r7, #16]
   2b75c:	18cb      	adds	r3, r1, r3
   2b75e:	781b      	ldrb	r3, [r3, #0]
   2b760:	0019      	movs	r1, r3
   2b762:	683b      	ldr	r3, [r7, #0]
   2b764:	185b      	adds	r3, r3, r1
   2b766:	781b      	ldrb	r3, [r3, #0]
   2b768:	b21b      	sxth	r3, r3
   2b76a:	4313      	orrs	r3, r2
   2b76c:	b21a      	sxth	r2, r3
   2b76e:	230c      	movs	r3, #12
   2b770:	18fb      	adds	r3, r7, r3
   2b772:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2b774:	230e      	movs	r3, #14
   2b776:	18fb      	adds	r3, r7, r3
   2b778:	881b      	ldrh	r3, [r3, #0]
   2b77a:	2b00      	cmp	r3, #0
   2b77c:	d01f      	beq.n	2b7be <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2b77e:	230e      	movs	r3, #14
   2b780:	18fc      	adds	r4, r7, r3
   2b782:	230c      	movs	r3, #12
   2b784:	18fb      	adds	r3, r7, r3
   2b786:	881b      	ldrh	r3, [r3, #0]
   2b788:	0018      	movs	r0, r3
   2b78a:	4b21      	ldr	r3, [pc, #132]	; (2b810 <cmp_lfn+0xfc>)
   2b78c:	4798      	blx	r3
   2b78e:	0003      	movs	r3, r0
   2b790:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2b792:	697b      	ldr	r3, [r7, #20]
   2b794:	2bfe      	cmp	r3, #254	; 0xfe
   2b796:	d810      	bhi.n	2b7ba <cmp_lfn+0xa6>
   2b798:	697b      	ldr	r3, [r7, #20]
   2b79a:	1c5a      	adds	r2, r3, #1
   2b79c:	617a      	str	r2, [r7, #20]
   2b79e:	005b      	lsls	r3, r3, #1
   2b7a0:	687a      	ldr	r2, [r7, #4]
   2b7a2:	18d3      	adds	r3, r2, r3
   2b7a4:	881b      	ldrh	r3, [r3, #0]
   2b7a6:	0018      	movs	r0, r3
   2b7a8:	4b19      	ldr	r3, [pc, #100]	; (2b810 <cmp_lfn+0xfc>)
   2b7aa:	4798      	blx	r3
   2b7ac:	0003      	movs	r3, r0
   2b7ae:	001a      	movs	r2, r3
   2b7b0:	230e      	movs	r3, #14
   2b7b2:	18fb      	adds	r3, r7, r3
   2b7b4:	881b      	ldrh	r3, [r3, #0]
   2b7b6:	4293      	cmp	r3, r2
   2b7b8:	d009      	beq.n	2b7ce <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2b7ba:	2300      	movs	r3, #0
   2b7bc:	e022      	b.n	2b804 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2b7be:	230c      	movs	r3, #12
   2b7c0:	18fb      	adds	r3, r7, r3
   2b7c2:	881b      	ldrh	r3, [r3, #0]
   2b7c4:	4a13      	ldr	r2, [pc, #76]	; (2b814 <cmp_lfn+0x100>)
   2b7c6:	4293      	cmp	r3, r2
   2b7c8:	d001      	beq.n	2b7ce <cmp_lfn+0xba>
   2b7ca:	2300      	movs	r3, #0
   2b7cc:	e01a      	b.n	2b804 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2b7ce:	693b      	ldr	r3, [r7, #16]
   2b7d0:	3301      	adds	r3, #1
   2b7d2:	613b      	str	r3, [r7, #16]
   2b7d4:	693b      	ldr	r3, [r7, #16]
   2b7d6:	2b0c      	cmp	r3, #12
   2b7d8:	d9b4      	bls.n	2b744 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2b7da:	683b      	ldr	r3, [r7, #0]
   2b7dc:	781b      	ldrb	r3, [r3, #0]
   2b7de:	001a      	movs	r2, r3
   2b7e0:	2340      	movs	r3, #64	; 0x40
   2b7e2:	4013      	ands	r3, r2
   2b7e4:	d00d      	beq.n	2b802 <cmp_lfn+0xee>
   2b7e6:	230e      	movs	r3, #14
   2b7e8:	18fb      	adds	r3, r7, r3
   2b7ea:	881b      	ldrh	r3, [r3, #0]
   2b7ec:	2b00      	cmp	r3, #0
   2b7ee:	d008      	beq.n	2b802 <cmp_lfn+0xee>
   2b7f0:	697b      	ldr	r3, [r7, #20]
   2b7f2:	005b      	lsls	r3, r3, #1
   2b7f4:	687a      	ldr	r2, [r7, #4]
   2b7f6:	18d3      	adds	r3, r2, r3
   2b7f8:	881b      	ldrh	r3, [r3, #0]
   2b7fa:	2b00      	cmp	r3, #0
   2b7fc:	d001      	beq.n	2b802 <cmp_lfn+0xee>
		return 0;
   2b7fe:	2300      	movs	r3, #0
   2b800:	e000      	b.n	2b804 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2b802:	2301      	movs	r3, #1
}
   2b804:	0018      	movs	r0, r3
   2b806:	46bd      	mov	sp, r7
   2b808:	b007      	add	sp, #28
   2b80a:	bd90      	pop	{r4, r7, pc}
   2b80c:	000383f8 	.word	0x000383f8
   2b810:	0002d7c1 	.word	0x0002d7c1
   2b814:	0000ffff 	.word	0x0000ffff

0002b818 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2b818:	b580      	push	{r7, lr}
   2b81a:	b088      	sub	sp, #32
   2b81c:	af00      	add	r7, sp, #0
   2b81e:	60f8      	str	r0, [r7, #12]
   2b820:	60b9      	str	r1, [r7, #8]
   2b822:	0019      	movs	r1, r3
   2b824:	1dfb      	adds	r3, r7, #7
   2b826:	701a      	strb	r2, [r3, #0]
   2b828:	1dbb      	adds	r3, r7, #6
   2b82a:	1c0a      	adds	r2, r1, #0
   2b82c:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2b82e:	68bb      	ldr	r3, [r7, #8]
   2b830:	330d      	adds	r3, #13
   2b832:	1dba      	adds	r2, r7, #6
   2b834:	7812      	ldrb	r2, [r2, #0]
   2b836:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2b838:	68bb      	ldr	r3, [r7, #8]
   2b83a:	330b      	adds	r3, #11
   2b83c:	220f      	movs	r2, #15
   2b83e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2b840:	68bb      	ldr	r3, [r7, #8]
   2b842:	330c      	adds	r3, #12
   2b844:	2200      	movs	r2, #0
   2b846:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2b848:	68bb      	ldr	r3, [r7, #8]
   2b84a:	331a      	adds	r3, #26
   2b84c:	2200      	movs	r2, #0
   2b84e:	701a      	strb	r2, [r3, #0]
   2b850:	68bb      	ldr	r3, [r7, #8]
   2b852:	331b      	adds	r3, #27
   2b854:	2200      	movs	r2, #0
   2b856:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2b858:	1dfb      	adds	r3, r7, #7
   2b85a:	781b      	ldrb	r3, [r3, #0]
   2b85c:	1e5a      	subs	r2, r3, #1
   2b85e:	0013      	movs	r3, r2
   2b860:	005b      	lsls	r3, r3, #1
   2b862:	189b      	adds	r3, r3, r2
   2b864:	009b      	lsls	r3, r3, #2
   2b866:	189b      	adds	r3, r3, r2
   2b868:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2b86a:	2316      	movs	r3, #22
   2b86c:	18fb      	adds	r3, r7, r3
   2b86e:	2200      	movs	r2, #0
   2b870:	801a      	strh	r2, [r3, #0]
   2b872:	2300      	movs	r3, #0
   2b874:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2b876:	2316      	movs	r3, #22
   2b878:	18fb      	adds	r3, r7, r3
   2b87a:	881b      	ldrh	r3, [r3, #0]
   2b87c:	4a28      	ldr	r2, [pc, #160]	; (2b920 <fit_lfn+0x108>)
   2b87e:	4293      	cmp	r3, r2
   2b880:	d009      	beq.n	2b896 <fit_lfn+0x7e>
   2b882:	69fb      	ldr	r3, [r7, #28]
   2b884:	1c5a      	adds	r2, r3, #1
   2b886:	61fa      	str	r2, [r7, #28]
   2b888:	005b      	lsls	r3, r3, #1
   2b88a:	68fa      	ldr	r2, [r7, #12]
   2b88c:	18d2      	adds	r2, r2, r3
   2b88e:	2316      	movs	r3, #22
   2b890:	18fb      	adds	r3, r7, r3
   2b892:	8812      	ldrh	r2, [r2, #0]
   2b894:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2b896:	4a23      	ldr	r2, [pc, #140]	; (2b924 <fit_lfn+0x10c>)
   2b898:	69bb      	ldr	r3, [r7, #24]
   2b89a:	18d3      	adds	r3, r2, r3
   2b89c:	781b      	ldrb	r3, [r3, #0]
   2b89e:	001a      	movs	r2, r3
   2b8a0:	68bb      	ldr	r3, [r7, #8]
   2b8a2:	189b      	adds	r3, r3, r2
   2b8a4:	2216      	movs	r2, #22
   2b8a6:	18ba      	adds	r2, r7, r2
   2b8a8:	8812      	ldrh	r2, [r2, #0]
   2b8aa:	b2d2      	uxtb	r2, r2
   2b8ac:	701a      	strb	r2, [r3, #0]
   2b8ae:	4a1d      	ldr	r2, [pc, #116]	; (2b924 <fit_lfn+0x10c>)
   2b8b0:	69bb      	ldr	r3, [r7, #24]
   2b8b2:	18d3      	adds	r3, r2, r3
   2b8b4:	781b      	ldrb	r3, [r3, #0]
   2b8b6:	3301      	adds	r3, #1
   2b8b8:	68ba      	ldr	r2, [r7, #8]
   2b8ba:	18d3      	adds	r3, r2, r3
   2b8bc:	2216      	movs	r2, #22
   2b8be:	18ba      	adds	r2, r7, r2
   2b8c0:	8812      	ldrh	r2, [r2, #0]
   2b8c2:	0a12      	lsrs	r2, r2, #8
   2b8c4:	b292      	uxth	r2, r2
   2b8c6:	b2d2      	uxtb	r2, r2
   2b8c8:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2b8ca:	2316      	movs	r3, #22
   2b8cc:	18fb      	adds	r3, r7, r3
   2b8ce:	881b      	ldrh	r3, [r3, #0]
   2b8d0:	2b00      	cmp	r3, #0
   2b8d2:	d104      	bne.n	2b8de <fit_lfn+0xc6>
   2b8d4:	2316      	movs	r3, #22
   2b8d6:	18fb      	adds	r3, r7, r3
   2b8d8:	2201      	movs	r2, #1
   2b8da:	4252      	negs	r2, r2
   2b8dc:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2b8de:	69bb      	ldr	r3, [r7, #24]
   2b8e0:	3301      	adds	r3, #1
   2b8e2:	61bb      	str	r3, [r7, #24]
   2b8e4:	69bb      	ldr	r3, [r7, #24]
   2b8e6:	2b0c      	cmp	r3, #12
   2b8e8:	d9c5      	bls.n	2b876 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2b8ea:	2316      	movs	r3, #22
   2b8ec:	18fb      	adds	r3, r7, r3
   2b8ee:	881b      	ldrh	r3, [r3, #0]
   2b8f0:	4a0b      	ldr	r2, [pc, #44]	; (2b920 <fit_lfn+0x108>)
   2b8f2:	4293      	cmp	r3, r2
   2b8f4:	d006      	beq.n	2b904 <fit_lfn+0xec>
   2b8f6:	69fb      	ldr	r3, [r7, #28]
   2b8f8:	005b      	lsls	r3, r3, #1
   2b8fa:	68fa      	ldr	r2, [r7, #12]
   2b8fc:	18d3      	adds	r3, r2, r3
   2b8fe:	881b      	ldrh	r3, [r3, #0]
   2b900:	2b00      	cmp	r3, #0
   2b902:	d105      	bne.n	2b910 <fit_lfn+0xf8>
   2b904:	1dfb      	adds	r3, r7, #7
   2b906:	1dfa      	adds	r2, r7, #7
   2b908:	7812      	ldrb	r2, [r2, #0]
   2b90a:	2140      	movs	r1, #64	; 0x40
   2b90c:	430a      	orrs	r2, r1
   2b90e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2b910:	68bb      	ldr	r3, [r7, #8]
   2b912:	1dfa      	adds	r2, r7, #7
   2b914:	7812      	ldrb	r2, [r2, #0]
   2b916:	701a      	strb	r2, [r3, #0]
}
   2b918:	46c0      	nop			; (mov r8, r8)
   2b91a:	46bd      	mov	sp, r7
   2b91c:	b008      	add	sp, #32
   2b91e:	bd80      	pop	{r7, pc}
   2b920:	0000ffff 	.word	0x0000ffff
   2b924:	000383f8 	.word	0x000383f8

0002b928 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2b928:	b580      	push	{r7, lr}
   2b92a:	b08a      	sub	sp, #40	; 0x28
   2b92c:	af00      	add	r7, sp, #0
   2b92e:	60f8      	str	r0, [r7, #12]
   2b930:	60b9      	str	r1, [r7, #8]
   2b932:	607a      	str	r2, [r7, #4]
   2b934:	001a      	movs	r2, r3
   2b936:	1cbb      	adds	r3, r7, #2
   2b938:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2b93a:	68b9      	ldr	r1, [r7, #8]
   2b93c:	68fb      	ldr	r3, [r7, #12]
   2b93e:	220b      	movs	r2, #11
   2b940:	0018      	movs	r0, r3
   2b942:	4b38      	ldr	r3, [pc, #224]	; (2ba24 <gen_numname+0xfc>)
   2b944:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2b946:	1cbb      	adds	r3, r7, #2
   2b948:	881b      	ldrh	r3, [r3, #0]
   2b94a:	2b05      	cmp	r3, #5
   2b94c:	d911      	bls.n	2b972 <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2b94e:	1cbb      	adds	r3, r7, #2
   2b950:	881b      	ldrh	r3, [r3, #0]
   2b952:	b29a      	uxth	r2, r3
   2b954:	0852      	lsrs	r2, r2, #1
   2b956:	03db      	lsls	r3, r3, #15
   2b958:	4313      	orrs	r3, r2
   2b95a:	b299      	uxth	r1, r3
   2b95c:	687b      	ldr	r3, [r7, #4]
   2b95e:	1c9a      	adds	r2, r3, #2
   2b960:	607a      	str	r2, [r7, #4]
   2b962:	881a      	ldrh	r2, [r3, #0]
   2b964:	1cbb      	adds	r3, r7, #2
   2b966:	188a      	adds	r2, r1, r2
   2b968:	801a      	strh	r2, [r3, #0]
   2b96a:	687b      	ldr	r3, [r7, #4]
   2b96c:	881b      	ldrh	r3, [r3, #0]
   2b96e:	2b00      	cmp	r3, #0
   2b970:	d1ed      	bne.n	2b94e <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2b972:	2307      	movs	r3, #7
   2b974:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2b976:	1cbb      	adds	r3, r7, #2
   2b978:	881b      	ldrh	r3, [r3, #0]
   2b97a:	b2db      	uxtb	r3, r3
   2b97c:	220f      	movs	r2, #15
   2b97e:	4013      	ands	r3, r2
   2b980:	b2da      	uxtb	r2, r3
   2b982:	2327      	movs	r3, #39	; 0x27
   2b984:	18fb      	adds	r3, r7, r3
   2b986:	3230      	adds	r2, #48	; 0x30
   2b988:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2b98a:	2327      	movs	r3, #39	; 0x27
   2b98c:	18fb      	adds	r3, r7, r3
   2b98e:	781b      	ldrb	r3, [r3, #0]
   2b990:	2b39      	cmp	r3, #57	; 0x39
   2b992:	d906      	bls.n	2b9a2 <gen_numname+0x7a>
   2b994:	2327      	movs	r3, #39	; 0x27
   2b996:	18fb      	adds	r3, r7, r3
   2b998:	2227      	movs	r2, #39	; 0x27
   2b99a:	18ba      	adds	r2, r7, r2
   2b99c:	7812      	ldrb	r2, [r2, #0]
   2b99e:	3207      	adds	r2, #7
   2b9a0:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2b9a2:	6a3b      	ldr	r3, [r7, #32]
   2b9a4:	1e5a      	subs	r2, r3, #1
   2b9a6:	623a      	str	r2, [r7, #32]
   2b9a8:	2214      	movs	r2, #20
   2b9aa:	18ba      	adds	r2, r7, r2
   2b9ac:	2127      	movs	r1, #39	; 0x27
   2b9ae:	1879      	adds	r1, r7, r1
   2b9b0:	7809      	ldrb	r1, [r1, #0]
   2b9b2:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2b9b4:	1cbb      	adds	r3, r7, #2
   2b9b6:	1cba      	adds	r2, r7, #2
   2b9b8:	8812      	ldrh	r2, [r2, #0]
   2b9ba:	0912      	lsrs	r2, r2, #4
   2b9bc:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2b9be:	1cbb      	adds	r3, r7, #2
   2b9c0:	881b      	ldrh	r3, [r3, #0]
   2b9c2:	2b00      	cmp	r3, #0
   2b9c4:	d1d7      	bne.n	2b976 <gen_numname+0x4e>
	ns[i] = '~';
   2b9c6:	2314      	movs	r3, #20
   2b9c8:	18fa      	adds	r2, r7, r3
   2b9ca:	6a3b      	ldr	r3, [r7, #32]
   2b9cc:	18d3      	adds	r3, r2, r3
   2b9ce:	227e      	movs	r2, #126	; 0x7e
   2b9d0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2b9d2:	2300      	movs	r3, #0
   2b9d4:	61fb      	str	r3, [r7, #28]
   2b9d6:	e002      	b.n	2b9de <gen_numname+0xb6>
   2b9d8:	69fb      	ldr	r3, [r7, #28]
   2b9da:	3301      	adds	r3, #1
   2b9dc:	61fb      	str	r3, [r7, #28]
   2b9de:	69fa      	ldr	r2, [r7, #28]
   2b9e0:	6a3b      	ldr	r3, [r7, #32]
   2b9e2:	429a      	cmp	r2, r3
   2b9e4:	d205      	bcs.n	2b9f2 <gen_numname+0xca>
   2b9e6:	68fa      	ldr	r2, [r7, #12]
   2b9e8:	69fb      	ldr	r3, [r7, #28]
   2b9ea:	18d3      	adds	r3, r2, r3
   2b9ec:	781b      	ldrb	r3, [r3, #0]
   2b9ee:	2b20      	cmp	r3, #32
   2b9f0:	d1f2      	bne.n	2b9d8 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2b9f2:	69fb      	ldr	r3, [r7, #28]
   2b9f4:	1c5a      	adds	r2, r3, #1
   2b9f6:	61fa      	str	r2, [r7, #28]
   2b9f8:	68fa      	ldr	r2, [r7, #12]
   2b9fa:	18d2      	adds	r2, r2, r3
   2b9fc:	6a3b      	ldr	r3, [r7, #32]
   2b9fe:	2b07      	cmp	r3, #7
   2ba00:	d806      	bhi.n	2ba10 <gen_numname+0xe8>
   2ba02:	6a3b      	ldr	r3, [r7, #32]
   2ba04:	1c59      	adds	r1, r3, #1
   2ba06:	6239      	str	r1, [r7, #32]
   2ba08:	2114      	movs	r1, #20
   2ba0a:	1879      	adds	r1, r7, r1
   2ba0c:	5ccb      	ldrb	r3, [r1, r3]
   2ba0e:	e000      	b.n	2ba12 <gen_numname+0xea>
   2ba10:	2320      	movs	r3, #32
   2ba12:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2ba14:	69fb      	ldr	r3, [r7, #28]
   2ba16:	2b07      	cmp	r3, #7
   2ba18:	d9eb      	bls.n	2b9f2 <gen_numname+0xca>
}
   2ba1a:	46c0      	nop			; (mov r8, r8)
   2ba1c:	46bd      	mov	sp, r7
   2ba1e:	b00a      	add	sp, #40	; 0x28
   2ba20:	bd80      	pop	{r7, pc}
   2ba22:	46c0      	nop			; (mov r8, r8)
   2ba24:	0002aacd 	.word	0x0002aacd

0002ba28 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2ba28:	b580      	push	{r7, lr}
   2ba2a:	b084      	sub	sp, #16
   2ba2c:	af00      	add	r7, sp, #0
   2ba2e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2ba30:	230f      	movs	r3, #15
   2ba32:	18fb      	adds	r3, r7, r3
   2ba34:	2200      	movs	r2, #0
   2ba36:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2ba38:	230b      	movs	r3, #11
   2ba3a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2ba3c:	230f      	movs	r3, #15
   2ba3e:	18fb      	adds	r3, r7, r3
   2ba40:	781b      	ldrb	r3, [r3, #0]
   2ba42:	b2da      	uxtb	r2, r3
   2ba44:	0852      	lsrs	r2, r2, #1
   2ba46:	01db      	lsls	r3, r3, #7
   2ba48:	4313      	orrs	r3, r2
   2ba4a:	b2d9      	uxtb	r1, r3
   2ba4c:	687b      	ldr	r3, [r7, #4]
   2ba4e:	1c5a      	adds	r2, r3, #1
   2ba50:	607a      	str	r2, [r7, #4]
   2ba52:	781a      	ldrb	r2, [r3, #0]
   2ba54:	230f      	movs	r3, #15
   2ba56:	18fb      	adds	r3, r7, r3
   2ba58:	188a      	adds	r2, r1, r2
   2ba5a:	701a      	strb	r2, [r3, #0]
   2ba5c:	68bb      	ldr	r3, [r7, #8]
   2ba5e:	3b01      	subs	r3, #1
   2ba60:	60bb      	str	r3, [r7, #8]
   2ba62:	68bb      	ldr	r3, [r7, #8]
   2ba64:	2b00      	cmp	r3, #0
   2ba66:	d1e9      	bne.n	2ba3c <sum_sfn+0x14>
	return sum;
   2ba68:	230f      	movs	r3, #15
   2ba6a:	18fb      	adds	r3, r7, r3
   2ba6c:	781b      	ldrb	r3, [r3, #0]
}
   2ba6e:	0018      	movs	r0, r3
   2ba70:	46bd      	mov	sp, r7
   2ba72:	b004      	add	sp, #16
   2ba74:	bd80      	pop	{r7, pc}
	...

0002ba78 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2ba78:	b590      	push	{r4, r7, lr}
   2ba7a:	b087      	sub	sp, #28
   2ba7c:	af00      	add	r7, sp, #0
   2ba7e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2ba80:	2317      	movs	r3, #23
   2ba82:	18fc      	adds	r4, r7, r3
   2ba84:	687b      	ldr	r3, [r7, #4]
   2ba86:	2100      	movs	r1, #0
   2ba88:	0018      	movs	r0, r3
   2ba8a:	4b74      	ldr	r3, [pc, #464]	; (2bc5c <dir_find+0x1e4>)
   2ba8c:	4798      	blx	r3
   2ba8e:	0003      	movs	r3, r0
   2ba90:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2ba92:	2317      	movs	r3, #23
   2ba94:	18fb      	adds	r3, r7, r3
   2ba96:	781b      	ldrb	r3, [r3, #0]
   2ba98:	2b00      	cmp	r3, #0
   2ba9a:	d003      	beq.n	2baa4 <dir_find+0x2c>
   2ba9c:	2317      	movs	r3, #23
   2ba9e:	18fb      	adds	r3, r7, r3
   2baa0:	781b      	ldrb	r3, [r3, #0]
   2baa2:	e0d6      	b.n	2bc52 <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2baa4:	2314      	movs	r3, #20
   2baa6:	18fb      	adds	r3, r7, r3
   2baa8:	22ff      	movs	r2, #255	; 0xff
   2baaa:	701a      	strb	r2, [r3, #0]
   2baac:	2315      	movs	r3, #21
   2baae:	18fb      	adds	r3, r7, r3
   2bab0:	2214      	movs	r2, #20
   2bab2:	18ba      	adds	r2, r7, r2
   2bab4:	7812      	ldrb	r2, [r2, #0]
   2bab6:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2bab8:	687b      	ldr	r3, [r7, #4]
   2baba:	681a      	ldr	r2, [r3, #0]
   2babc:	687b      	ldr	r3, [r7, #4]
   2babe:	691b      	ldr	r3, [r3, #16]
   2bac0:	2117      	movs	r1, #23
   2bac2:	187c      	adds	r4, r7, r1
   2bac4:	0019      	movs	r1, r3
   2bac6:	0010      	movs	r0, r2
   2bac8:	4b65      	ldr	r3, [pc, #404]	; (2bc60 <dir_find+0x1e8>)
   2baca:	4798      	blx	r3
   2bacc:	0003      	movs	r3, r0
   2bace:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2bad0:	2317      	movs	r3, #23
   2bad2:	18fb      	adds	r3, r7, r3
   2bad4:	781b      	ldrb	r3, [r3, #0]
   2bad6:	2b00      	cmp	r3, #0
   2bad8:	d000      	beq.n	2badc <dir_find+0x64>
   2bada:	e0b2      	b.n	2bc42 <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2badc:	687b      	ldr	r3, [r7, #4]
   2bade:	695b      	ldr	r3, [r3, #20]
   2bae0:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2bae2:	2316      	movs	r3, #22
   2bae4:	18fb      	adds	r3, r7, r3
   2bae6:	693a      	ldr	r2, [r7, #16]
   2bae8:	7812      	ldrb	r2, [r2, #0]
   2baea:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2baec:	2316      	movs	r3, #22
   2baee:	18fb      	adds	r3, r7, r3
   2baf0:	781b      	ldrb	r3, [r3, #0]
   2baf2:	2b00      	cmp	r3, #0
   2baf4:	d104      	bne.n	2bb00 <dir_find+0x88>
   2baf6:	2317      	movs	r3, #23
   2baf8:	18fb      	adds	r3, r7, r3
   2bafa:	2204      	movs	r2, #4
   2bafc:	701a      	strb	r2, [r3, #0]
   2bafe:	e0a5      	b.n	2bc4c <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2bb00:	693b      	ldr	r3, [r7, #16]
   2bb02:	330b      	adds	r3, #11
   2bb04:	781a      	ldrb	r2, [r3, #0]
   2bb06:	230f      	movs	r3, #15
   2bb08:	18fb      	adds	r3, r7, r3
   2bb0a:	213f      	movs	r1, #63	; 0x3f
   2bb0c:	400a      	ands	r2, r1
   2bb0e:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2bb10:	2316      	movs	r3, #22
   2bb12:	18fb      	adds	r3, r7, r3
   2bb14:	781b      	ldrb	r3, [r3, #0]
   2bb16:	2be5      	cmp	r3, #229	; 0xe5
   2bb18:	d00a      	beq.n	2bb30 <dir_find+0xb8>
   2bb1a:	230f      	movs	r3, #15
   2bb1c:	18fb      	adds	r3, r7, r3
   2bb1e:	781b      	ldrb	r3, [r3, #0]
   2bb20:	2208      	movs	r2, #8
   2bb22:	4013      	ands	r3, r2
   2bb24:	d009      	beq.n	2bb3a <dir_find+0xc2>
   2bb26:	230f      	movs	r3, #15
   2bb28:	18fb      	adds	r3, r7, r3
   2bb2a:	781b      	ldrb	r3, [r3, #0]
   2bb2c:	2b0f      	cmp	r3, #15
   2bb2e:	d004      	beq.n	2bb3a <dir_find+0xc2>
			ord = 0xFF;
   2bb30:	2315      	movs	r3, #21
   2bb32:	18fb      	adds	r3, r7, r3
   2bb34:	22ff      	movs	r2, #255	; 0xff
   2bb36:	701a      	strb	r2, [r3, #0]
   2bb38:	e073      	b.n	2bc22 <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2bb3a:	230f      	movs	r3, #15
   2bb3c:	18fb      	adds	r3, r7, r3
   2bb3e:	781b      	ldrb	r3, [r3, #0]
   2bb40:	2b0f      	cmp	r3, #15
   2bb42:	d145      	bne.n	2bbd0 <dir_find+0x158>
				if (dj->lfn) {
   2bb44:	687b      	ldr	r3, [r7, #4]
   2bb46:	69db      	ldr	r3, [r3, #28]
   2bb48:	2b00      	cmp	r3, #0
   2bb4a:	d100      	bne.n	2bb4e <dir_find+0xd6>
   2bb4c:	e069      	b.n	2bc22 <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2bb4e:	2316      	movs	r3, #22
   2bb50:	18fb      	adds	r3, r7, r3
   2bb52:	781b      	ldrb	r3, [r3, #0]
   2bb54:	2240      	movs	r2, #64	; 0x40
   2bb56:	4013      	ands	r3, r2
   2bb58:	d016      	beq.n	2bb88 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2bb5a:	2314      	movs	r3, #20
   2bb5c:	18fb      	adds	r3, r7, r3
   2bb5e:	693a      	ldr	r2, [r7, #16]
   2bb60:	7b52      	ldrb	r2, [r2, #13]
   2bb62:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2bb64:	2316      	movs	r3, #22
   2bb66:	18fb      	adds	r3, r7, r3
   2bb68:	2216      	movs	r2, #22
   2bb6a:	18ba      	adds	r2, r7, r2
   2bb6c:	7812      	ldrb	r2, [r2, #0]
   2bb6e:	2140      	movs	r1, #64	; 0x40
   2bb70:	438a      	bics	r2, r1
   2bb72:	701a      	strb	r2, [r3, #0]
   2bb74:	2315      	movs	r3, #21
   2bb76:	18fb      	adds	r3, r7, r3
   2bb78:	2216      	movs	r2, #22
   2bb7a:	18ba      	adds	r2, r7, r2
   2bb7c:	7812      	ldrb	r2, [r2, #0]
   2bb7e:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2bb80:	687b      	ldr	r3, [r7, #4]
   2bb82:	88da      	ldrh	r2, [r3, #6]
   2bb84:	687b      	ldr	r3, [r7, #4]
   2bb86:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2bb88:	2316      	movs	r3, #22
   2bb8a:	18fa      	adds	r2, r7, r3
   2bb8c:	2315      	movs	r3, #21
   2bb8e:	18fb      	adds	r3, r7, r3
   2bb90:	7812      	ldrb	r2, [r2, #0]
   2bb92:	781b      	ldrb	r3, [r3, #0]
   2bb94:	429a      	cmp	r2, r3
   2bb96:	d116      	bne.n	2bbc6 <dir_find+0x14e>
   2bb98:	693b      	ldr	r3, [r7, #16]
   2bb9a:	330d      	adds	r3, #13
   2bb9c:	781b      	ldrb	r3, [r3, #0]
   2bb9e:	2214      	movs	r2, #20
   2bba0:	18ba      	adds	r2, r7, r2
   2bba2:	7812      	ldrb	r2, [r2, #0]
   2bba4:	429a      	cmp	r2, r3
   2bba6:	d10e      	bne.n	2bbc6 <dir_find+0x14e>
   2bba8:	687b      	ldr	r3, [r7, #4]
   2bbaa:	69db      	ldr	r3, [r3, #28]
   2bbac:	693a      	ldr	r2, [r7, #16]
   2bbae:	0011      	movs	r1, r2
   2bbb0:	0018      	movs	r0, r3
   2bbb2:	4b2c      	ldr	r3, [pc, #176]	; (2bc64 <dir_find+0x1ec>)
   2bbb4:	4798      	blx	r3
   2bbb6:	1e03      	subs	r3, r0, #0
   2bbb8:	d005      	beq.n	2bbc6 <dir_find+0x14e>
   2bbba:	2315      	movs	r3, #21
   2bbbc:	18fb      	adds	r3, r7, r3
   2bbbe:	781b      	ldrb	r3, [r3, #0]
   2bbc0:	3b01      	subs	r3, #1
   2bbc2:	b2da      	uxtb	r2, r3
   2bbc4:	e000      	b.n	2bbc8 <dir_find+0x150>
   2bbc6:	22ff      	movs	r2, #255	; 0xff
   2bbc8:	2315      	movs	r3, #21
   2bbca:	18fb      	adds	r3, r7, r3
   2bbcc:	701a      	strb	r2, [r3, #0]
   2bbce:	e028      	b.n	2bc22 <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2bbd0:	2315      	movs	r3, #21
   2bbd2:	18fb      	adds	r3, r7, r3
   2bbd4:	781b      	ldrb	r3, [r3, #0]
   2bbd6:	2b00      	cmp	r3, #0
   2bbd8:	d10a      	bne.n	2bbf0 <dir_find+0x178>
   2bbda:	693b      	ldr	r3, [r7, #16]
   2bbdc:	0018      	movs	r0, r3
   2bbde:	4b22      	ldr	r3, [pc, #136]	; (2bc68 <dir_find+0x1f0>)
   2bbe0:	4798      	blx	r3
   2bbe2:	0003      	movs	r3, r0
   2bbe4:	001a      	movs	r2, r3
   2bbe6:	2314      	movs	r3, #20
   2bbe8:	18fb      	adds	r3, r7, r3
   2bbea:	781b      	ldrb	r3, [r3, #0]
   2bbec:	4293      	cmp	r3, r2
   2bbee:	d02a      	beq.n	2bc46 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2bbf0:	2315      	movs	r3, #21
   2bbf2:	18fb      	adds	r3, r7, r3
   2bbf4:	22ff      	movs	r2, #255	; 0xff
   2bbf6:	701a      	strb	r2, [r3, #0]
   2bbf8:	687b      	ldr	r3, [r7, #4]
   2bbfa:	2201      	movs	r2, #1
   2bbfc:	4252      	negs	r2, r2
   2bbfe:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2bc00:	687b      	ldr	r3, [r7, #4]
   2bc02:	699b      	ldr	r3, [r3, #24]
   2bc04:	330b      	adds	r3, #11
   2bc06:	781b      	ldrb	r3, [r3, #0]
   2bc08:	001a      	movs	r2, r3
   2bc0a:	2301      	movs	r3, #1
   2bc0c:	4013      	ands	r3, r2
   2bc0e:	d108      	bne.n	2bc22 <dir_find+0x1aa>
   2bc10:	687b      	ldr	r3, [r7, #4]
   2bc12:	6999      	ldr	r1, [r3, #24]
   2bc14:	693b      	ldr	r3, [r7, #16]
   2bc16:	220b      	movs	r2, #11
   2bc18:	0018      	movs	r0, r3
   2bc1a:	4b14      	ldr	r3, [pc, #80]	; (2bc6c <dir_find+0x1f4>)
   2bc1c:	4798      	blx	r3
   2bc1e:	1e03      	subs	r3, r0, #0
   2bc20:	d013      	beq.n	2bc4a <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2bc22:	2317      	movs	r3, #23
   2bc24:	18fc      	adds	r4, r7, r3
   2bc26:	687b      	ldr	r3, [r7, #4]
   2bc28:	2100      	movs	r1, #0
   2bc2a:	0018      	movs	r0, r3
   2bc2c:	4b10      	ldr	r3, [pc, #64]	; (2bc70 <dir_find+0x1f8>)
   2bc2e:	4798      	blx	r3
   2bc30:	0003      	movs	r3, r0
   2bc32:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2bc34:	2317      	movs	r3, #23
   2bc36:	18fb      	adds	r3, r7, r3
   2bc38:	781b      	ldrb	r3, [r3, #0]
   2bc3a:	2b00      	cmp	r3, #0
   2bc3c:	d100      	bne.n	2bc40 <dir_find+0x1c8>
   2bc3e:	e73b      	b.n	2bab8 <dir_find+0x40>
   2bc40:	e004      	b.n	2bc4c <dir_find+0x1d4>
		if (res != FR_OK) break;
   2bc42:	46c0      	nop			; (mov r8, r8)
   2bc44:	e002      	b.n	2bc4c <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2bc46:	46c0      	nop			; (mov r8, r8)
   2bc48:	e000      	b.n	2bc4c <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2bc4a:	46c0      	nop			; (mov r8, r8)

	return res;
   2bc4c:	2317      	movs	r3, #23
   2bc4e:	18fb      	adds	r3, r7, r3
   2bc50:	781b      	ldrb	r3, [r3, #0]
}
   2bc52:	0018      	movs	r0, r3
   2bc54:	46bd      	mov	sp, r7
   2bc56:	b007      	add	sp, #28
   2bc58:	bd90      	pop	{r4, r7, pc}
   2bc5a:	46c0      	nop			; (mov r8, r8)
   2bc5c:	0002b3f5 	.word	0x0002b3f5
   2bc60:	0002abb1 	.word	0x0002abb1
   2bc64:	0002b715 	.word	0x0002b715
   2bc68:	0002ba29 	.word	0x0002ba29
   2bc6c:	0002ab35 	.word	0x0002ab35
   2bc70:	0002b525 	.word	0x0002b525

0002bc74 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2bc74:	b590      	push	{r4, r7, lr}
   2bc76:	b08d      	sub	sp, #52	; 0x34
   2bc78:	af00      	add	r7, sp, #0
   2bc7a:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2bc7c:	687b      	ldr	r3, [r7, #4]
   2bc7e:	699b      	ldr	r3, [r3, #24]
   2bc80:	627b      	str	r3, [r7, #36]	; 0x24
   2bc82:	687b      	ldr	r3, [r7, #4]
   2bc84:	69db      	ldr	r3, [r3, #28]
   2bc86:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2bc88:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2bc8a:	230c      	movs	r3, #12
   2bc8c:	18fb      	adds	r3, r7, r3
   2bc8e:	220c      	movs	r2, #12
   2bc90:	0018      	movs	r0, r3
   2bc92:	4bc8      	ldr	r3, [pc, #800]	; (2bfb4 <dir_register+0x340>)
   2bc94:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2bc96:	230c      	movs	r3, #12
   2bc98:	18fb      	adds	r3, r7, r3
   2bc9a:	7adb      	ldrb	r3, [r3, #11]
   2bc9c:	001a      	movs	r2, r3
   2bc9e:	2301      	movs	r3, #1
   2bca0:	4013      	ands	r3, r2
   2bca2:	d048      	beq.n	2bd36 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2bca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bca6:	330b      	adds	r3, #11
   2bca8:	2200      	movs	r2, #0
   2bcaa:	701a      	strb	r2, [r3, #0]
   2bcac:	687b      	ldr	r3, [r7, #4]
   2bcae:	2200      	movs	r2, #0
   2bcb0:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2bcb2:	232c      	movs	r3, #44	; 0x2c
   2bcb4:	18fb      	adds	r3, r7, r3
   2bcb6:	2201      	movs	r2, #1
   2bcb8:	801a      	strh	r2, [r3, #0]
   2bcba:	e01c      	b.n	2bcf6 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2bcbc:	232c      	movs	r3, #44	; 0x2c
   2bcbe:	18fb      	adds	r3, r7, r3
   2bcc0:	881b      	ldrh	r3, [r3, #0]
   2bcc2:	6a3a      	ldr	r2, [r7, #32]
   2bcc4:	210c      	movs	r1, #12
   2bcc6:	1879      	adds	r1, r7, r1
   2bcc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2bcca:	4cbb      	ldr	r4, [pc, #748]	; (2bfb8 <dir_register+0x344>)
   2bccc:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2bcce:	232f      	movs	r3, #47	; 0x2f
   2bcd0:	18fc      	adds	r4, r7, r3
   2bcd2:	687b      	ldr	r3, [r7, #4]
   2bcd4:	0018      	movs	r0, r3
   2bcd6:	4bb9      	ldr	r3, [pc, #740]	; (2bfbc <dir_register+0x348>)
   2bcd8:	4798      	blx	r3
   2bcda:	0003      	movs	r3, r0
   2bcdc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bcde:	232f      	movs	r3, #47	; 0x2f
   2bce0:	18fb      	adds	r3, r7, r3
   2bce2:	781b      	ldrb	r3, [r3, #0]
   2bce4:	2b00      	cmp	r3, #0
   2bce6:	d10c      	bne.n	2bd02 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2bce8:	232c      	movs	r3, #44	; 0x2c
   2bcea:	18fb      	adds	r3, r7, r3
   2bcec:	881a      	ldrh	r2, [r3, #0]
   2bcee:	232c      	movs	r3, #44	; 0x2c
   2bcf0:	18fb      	adds	r3, r7, r3
   2bcf2:	3201      	adds	r2, #1
   2bcf4:	801a      	strh	r2, [r3, #0]
   2bcf6:	232c      	movs	r3, #44	; 0x2c
   2bcf8:	18fb      	adds	r3, r7, r3
   2bcfa:	881b      	ldrh	r3, [r3, #0]
   2bcfc:	2b63      	cmp	r3, #99	; 0x63
   2bcfe:	d9dd      	bls.n	2bcbc <dir_register+0x48>
   2bd00:	e000      	b.n	2bd04 <dir_register+0x90>
			if (res != FR_OK) break;
   2bd02:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2bd04:	232c      	movs	r3, #44	; 0x2c
   2bd06:	18fb      	adds	r3, r7, r3
   2bd08:	881b      	ldrh	r3, [r3, #0]
   2bd0a:	2b64      	cmp	r3, #100	; 0x64
   2bd0c:	d101      	bne.n	2bd12 <dir_register+0x9e>
   2bd0e:	2307      	movs	r3, #7
   2bd10:	e14c      	b.n	2bfac <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2bd12:	232f      	movs	r3, #47	; 0x2f
   2bd14:	18fb      	adds	r3, r7, r3
   2bd16:	781b      	ldrb	r3, [r3, #0]
   2bd18:	2b04      	cmp	r3, #4
   2bd1a:	d003      	beq.n	2bd24 <dir_register+0xb0>
   2bd1c:	232f      	movs	r3, #47	; 0x2f
   2bd1e:	18fb      	adds	r3, r7, r3
   2bd20:	781b      	ldrb	r3, [r3, #0]
   2bd22:	e143      	b.n	2bfac <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2bd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2bd26:	330b      	adds	r3, #11
   2bd28:	220c      	movs	r2, #12
   2bd2a:	18ba      	adds	r2, r7, r2
   2bd2c:	7ad2      	ldrb	r2, [r2, #11]
   2bd2e:	701a      	strb	r2, [r3, #0]
   2bd30:	687b      	ldr	r3, [r7, #4]
   2bd32:	6a3a      	ldr	r2, [r7, #32]
   2bd34:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2bd36:	230c      	movs	r3, #12
   2bd38:	18fb      	adds	r3, r7, r3
   2bd3a:	7adb      	ldrb	r3, [r3, #11]
   2bd3c:	001a      	movs	r2, r3
   2bd3e:	2302      	movs	r3, #2
   2bd40:	4013      	ands	r3, r2
   2bd42:	d023      	beq.n	2bd8c <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2bd44:	232a      	movs	r3, #42	; 0x2a
   2bd46:	18fb      	adds	r3, r7, r3
   2bd48:	2200      	movs	r2, #0
   2bd4a:	801a      	strh	r2, [r3, #0]
   2bd4c:	e006      	b.n	2bd5c <dir_register+0xe8>
   2bd4e:	232a      	movs	r3, #42	; 0x2a
   2bd50:	18fb      	adds	r3, r7, r3
   2bd52:	881a      	ldrh	r2, [r3, #0]
   2bd54:	232a      	movs	r3, #42	; 0x2a
   2bd56:	18fb      	adds	r3, r7, r3
   2bd58:	3201      	adds	r2, #1
   2bd5a:	801a      	strh	r2, [r3, #0]
   2bd5c:	232a      	movs	r3, #42	; 0x2a
   2bd5e:	18fb      	adds	r3, r7, r3
   2bd60:	881b      	ldrh	r3, [r3, #0]
   2bd62:	005b      	lsls	r3, r3, #1
   2bd64:	6a3a      	ldr	r2, [r7, #32]
   2bd66:	18d3      	adds	r3, r2, r3
   2bd68:	881b      	ldrh	r3, [r3, #0]
   2bd6a:	2b00      	cmp	r3, #0
   2bd6c:	d1ef      	bne.n	2bd4e <dir_register+0xda>
		ne = (ne + 25) / 13;
   2bd6e:	232a      	movs	r3, #42	; 0x2a
   2bd70:	18fb      	adds	r3, r7, r3
   2bd72:	881b      	ldrh	r3, [r3, #0]
   2bd74:	3319      	adds	r3, #25
   2bd76:	001a      	movs	r2, r3
   2bd78:	4b91      	ldr	r3, [pc, #580]	; (2bfc0 <dir_register+0x34c>)
   2bd7a:	210d      	movs	r1, #13
   2bd7c:	0010      	movs	r0, r2
   2bd7e:	4798      	blx	r3
   2bd80:	0003      	movs	r3, r0
   2bd82:	001a      	movs	r2, r3
   2bd84:	232a      	movs	r3, #42	; 0x2a
   2bd86:	18fb      	adds	r3, r7, r3
   2bd88:	801a      	strh	r2, [r3, #0]
   2bd8a:	e003      	b.n	2bd94 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2bd8c:	232a      	movs	r3, #42	; 0x2a
   2bd8e:	18fb      	adds	r3, r7, r3
   2bd90:	2201      	movs	r2, #1
   2bd92:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2bd94:	232f      	movs	r3, #47	; 0x2f
   2bd96:	18fc      	adds	r4, r7, r3
   2bd98:	687b      	ldr	r3, [r7, #4]
   2bd9a:	2100      	movs	r1, #0
   2bd9c:	0018      	movs	r0, r3
   2bd9e:	4b89      	ldr	r3, [pc, #548]	; (2bfc4 <dir_register+0x350>)
   2bda0:	4798      	blx	r3
   2bda2:	0003      	movs	r3, r0
   2bda4:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2bda6:	232f      	movs	r3, #47	; 0x2f
   2bda8:	18fb      	adds	r3, r7, r3
   2bdaa:	781b      	ldrb	r3, [r3, #0]
   2bdac:	2b00      	cmp	r3, #0
   2bdae:	d003      	beq.n	2bdb8 <dir_register+0x144>
   2bdb0:	232f      	movs	r3, #47	; 0x2f
   2bdb2:	18fb      	adds	r3, r7, r3
   2bdb4:	781b      	ldrb	r3, [r3, #0]
   2bdb6:	e0f9      	b.n	2bfac <dir_register+0x338>
	n = is = 0;
   2bdb8:	2328      	movs	r3, #40	; 0x28
   2bdba:	18fb      	adds	r3, r7, r3
   2bdbc:	2200      	movs	r2, #0
   2bdbe:	801a      	strh	r2, [r3, #0]
   2bdc0:	232c      	movs	r3, #44	; 0x2c
   2bdc2:	18fb      	adds	r3, r7, r3
   2bdc4:	2228      	movs	r2, #40	; 0x28
   2bdc6:	18ba      	adds	r2, r7, r2
   2bdc8:	8812      	ldrh	r2, [r2, #0]
   2bdca:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2bdcc:	687b      	ldr	r3, [r7, #4]
   2bdce:	681a      	ldr	r2, [r3, #0]
   2bdd0:	687b      	ldr	r3, [r7, #4]
   2bdd2:	691b      	ldr	r3, [r3, #16]
   2bdd4:	212f      	movs	r1, #47	; 0x2f
   2bdd6:	187c      	adds	r4, r7, r1
   2bdd8:	0019      	movs	r1, r3
   2bdda:	0010      	movs	r0, r2
   2bddc:	4b7a      	ldr	r3, [pc, #488]	; (2bfc8 <dir_register+0x354>)
   2bdde:	4798      	blx	r3
   2bde0:	0003      	movs	r3, r0
   2bde2:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2bde4:	232f      	movs	r3, #47	; 0x2f
   2bde6:	18fb      	adds	r3, r7, r3
   2bde8:	781b      	ldrb	r3, [r3, #0]
   2bdea:	2b00      	cmp	r3, #0
   2bdec:	d13c      	bne.n	2be68 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2bdee:	687b      	ldr	r3, [r7, #4]
   2bdf0:	695a      	ldr	r2, [r3, #20]
   2bdf2:	231f      	movs	r3, #31
   2bdf4:	18fb      	adds	r3, r7, r3
   2bdf6:	7812      	ldrb	r2, [r2, #0]
   2bdf8:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2bdfa:	231f      	movs	r3, #31
   2bdfc:	18fb      	adds	r3, r7, r3
   2bdfe:	781b      	ldrb	r3, [r3, #0]
   2be00:	2be5      	cmp	r3, #229	; 0xe5
   2be02:	d004      	beq.n	2be0e <dir_register+0x19a>
   2be04:	231f      	movs	r3, #31
   2be06:	18fb      	adds	r3, r7, r3
   2be08:	781b      	ldrb	r3, [r3, #0]
   2be0a:	2b00      	cmp	r3, #0
   2be0c:	d119      	bne.n	2be42 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2be0e:	232c      	movs	r3, #44	; 0x2c
   2be10:	18fb      	adds	r3, r7, r3
   2be12:	881b      	ldrh	r3, [r3, #0]
   2be14:	2b00      	cmp	r3, #0
   2be16:	d104      	bne.n	2be22 <dir_register+0x1ae>
   2be18:	2328      	movs	r3, #40	; 0x28
   2be1a:	18fb      	adds	r3, r7, r3
   2be1c:	687a      	ldr	r2, [r7, #4]
   2be1e:	88d2      	ldrh	r2, [r2, #6]
   2be20:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2be22:	232c      	movs	r3, #44	; 0x2c
   2be24:	18fb      	adds	r3, r7, r3
   2be26:	222c      	movs	r2, #44	; 0x2c
   2be28:	18ba      	adds	r2, r7, r2
   2be2a:	8812      	ldrh	r2, [r2, #0]
   2be2c:	3201      	adds	r2, #1
   2be2e:	801a      	strh	r2, [r3, #0]
   2be30:	232c      	movs	r3, #44	; 0x2c
   2be32:	18fa      	adds	r2, r7, r3
   2be34:	232a      	movs	r3, #42	; 0x2a
   2be36:	18fb      	adds	r3, r7, r3
   2be38:	8812      	ldrh	r2, [r2, #0]
   2be3a:	881b      	ldrh	r3, [r3, #0]
   2be3c:	429a      	cmp	r2, r3
   2be3e:	d104      	bne.n	2be4a <dir_register+0x1d6>
   2be40:	e013      	b.n	2be6a <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2be42:	232c      	movs	r3, #44	; 0x2c
   2be44:	18fb      	adds	r3, r7, r3
   2be46:	2200      	movs	r2, #0
   2be48:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2be4a:	232f      	movs	r3, #47	; 0x2f
   2be4c:	18fc      	adds	r4, r7, r3
   2be4e:	687b      	ldr	r3, [r7, #4]
   2be50:	2101      	movs	r1, #1
   2be52:	0018      	movs	r0, r3
   2be54:	4b5d      	ldr	r3, [pc, #372]	; (2bfcc <dir_register+0x358>)
   2be56:	4798      	blx	r3
   2be58:	0003      	movs	r3, r0
   2be5a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2be5c:	232f      	movs	r3, #47	; 0x2f
   2be5e:	18fb      	adds	r3, r7, r3
   2be60:	781b      	ldrb	r3, [r3, #0]
   2be62:	2b00      	cmp	r3, #0
   2be64:	d0b2      	beq.n	2bdcc <dir_register+0x158>
   2be66:	e000      	b.n	2be6a <dir_register+0x1f6>
		if (res != FR_OK) break;
   2be68:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2be6a:	232f      	movs	r3, #47	; 0x2f
   2be6c:	18fb      	adds	r3, r7, r3
   2be6e:	781b      	ldrb	r3, [r3, #0]
   2be70:	2b00      	cmp	r3, #0
   2be72:	d163      	bne.n	2bf3c <dir_register+0x2c8>
   2be74:	232a      	movs	r3, #42	; 0x2a
   2be76:	18fb      	adds	r3, r7, r3
   2be78:	881b      	ldrh	r3, [r3, #0]
   2be7a:	2b01      	cmp	r3, #1
   2be7c:	d95e      	bls.n	2bf3c <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2be7e:	232f      	movs	r3, #47	; 0x2f
   2be80:	18fc      	adds	r4, r7, r3
   2be82:	2328      	movs	r3, #40	; 0x28
   2be84:	18fb      	adds	r3, r7, r3
   2be86:	881a      	ldrh	r2, [r3, #0]
   2be88:	687b      	ldr	r3, [r7, #4]
   2be8a:	0011      	movs	r1, r2
   2be8c:	0018      	movs	r0, r3
   2be8e:	4b4d      	ldr	r3, [pc, #308]	; (2bfc4 <dir_register+0x350>)
   2be90:	4798      	blx	r3
   2be92:	0003      	movs	r3, r0
   2be94:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2be96:	232f      	movs	r3, #47	; 0x2f
   2be98:	18fb      	adds	r3, r7, r3
   2be9a:	781b      	ldrb	r3, [r3, #0]
   2be9c:	2b00      	cmp	r3, #0
   2be9e:	d14d      	bne.n	2bf3c <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2bea0:	687b      	ldr	r3, [r7, #4]
   2bea2:	699b      	ldr	r3, [r3, #24]
   2bea4:	221e      	movs	r2, #30
   2bea6:	18bc      	adds	r4, r7, r2
   2bea8:	0018      	movs	r0, r3
   2beaa:	4b49      	ldr	r3, [pc, #292]	; (2bfd0 <dir_register+0x35c>)
   2beac:	4798      	blx	r3
   2beae:	0003      	movs	r3, r0
   2beb0:	7023      	strb	r3, [r4, #0]
			ne--;
   2beb2:	232a      	movs	r3, #42	; 0x2a
   2beb4:	18fb      	adds	r3, r7, r3
   2beb6:	881a      	ldrh	r2, [r3, #0]
   2beb8:	232a      	movs	r3, #42	; 0x2a
   2beba:	18fb      	adds	r3, r7, r3
   2bebc:	3a01      	subs	r2, #1
   2bebe:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2bec0:	687b      	ldr	r3, [r7, #4]
   2bec2:	681a      	ldr	r2, [r3, #0]
   2bec4:	687b      	ldr	r3, [r7, #4]
   2bec6:	691b      	ldr	r3, [r3, #16]
   2bec8:	212f      	movs	r1, #47	; 0x2f
   2beca:	187c      	adds	r4, r7, r1
   2becc:	0019      	movs	r1, r3
   2bece:	0010      	movs	r0, r2
   2bed0:	4b3d      	ldr	r3, [pc, #244]	; (2bfc8 <dir_register+0x354>)
   2bed2:	4798      	blx	r3
   2bed4:	0003      	movs	r3, r0
   2bed6:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2bed8:	232f      	movs	r3, #47	; 0x2f
   2beda:	18fb      	adds	r3, r7, r3
   2bedc:	781b      	ldrb	r3, [r3, #0]
   2bede:	2b00      	cmp	r3, #0
   2bee0:	d12b      	bne.n	2bf3a <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2bee2:	687b      	ldr	r3, [r7, #4]
   2bee4:	69d8      	ldr	r0, [r3, #28]
   2bee6:	687b      	ldr	r3, [r7, #4]
   2bee8:	6959      	ldr	r1, [r3, #20]
   2beea:	232a      	movs	r3, #42	; 0x2a
   2beec:	18fb      	adds	r3, r7, r3
   2beee:	881b      	ldrh	r3, [r3, #0]
   2bef0:	b2da      	uxtb	r2, r3
   2bef2:	231e      	movs	r3, #30
   2bef4:	18fb      	adds	r3, r7, r3
   2bef6:	781b      	ldrb	r3, [r3, #0]
   2bef8:	4c36      	ldr	r4, [pc, #216]	; (2bfd4 <dir_register+0x360>)
   2befa:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2befc:	687b      	ldr	r3, [r7, #4]
   2befe:	681b      	ldr	r3, [r3, #0]
   2bf00:	2201      	movs	r2, #1
   2bf02:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2bf04:	232f      	movs	r3, #47	; 0x2f
   2bf06:	18fc      	adds	r4, r7, r3
   2bf08:	687b      	ldr	r3, [r7, #4]
   2bf0a:	2100      	movs	r1, #0
   2bf0c:	0018      	movs	r0, r3
   2bf0e:	4b2f      	ldr	r3, [pc, #188]	; (2bfcc <dir_register+0x358>)
   2bf10:	4798      	blx	r3
   2bf12:	0003      	movs	r3, r0
   2bf14:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2bf16:	232f      	movs	r3, #47	; 0x2f
   2bf18:	18fb      	adds	r3, r7, r3
   2bf1a:	781b      	ldrb	r3, [r3, #0]
   2bf1c:	2b00      	cmp	r3, #0
   2bf1e:	d10d      	bne.n	2bf3c <dir_register+0x2c8>
   2bf20:	232a      	movs	r3, #42	; 0x2a
   2bf22:	18fb      	adds	r3, r7, r3
   2bf24:	222a      	movs	r2, #42	; 0x2a
   2bf26:	18ba      	adds	r2, r7, r2
   2bf28:	8812      	ldrh	r2, [r2, #0]
   2bf2a:	3a01      	subs	r2, #1
   2bf2c:	801a      	strh	r2, [r3, #0]
   2bf2e:	232a      	movs	r3, #42	; 0x2a
   2bf30:	18fb      	adds	r3, r7, r3
   2bf32:	881b      	ldrh	r3, [r3, #0]
   2bf34:	2b00      	cmp	r3, #0
   2bf36:	d1c3      	bne.n	2bec0 <dir_register+0x24c>
   2bf38:	e000      	b.n	2bf3c <dir_register+0x2c8>
				if (res != FR_OK) break;
   2bf3a:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2bf3c:	232f      	movs	r3, #47	; 0x2f
   2bf3e:	18fb      	adds	r3, r7, r3
   2bf40:	781b      	ldrb	r3, [r3, #0]
   2bf42:	2b00      	cmp	r3, #0
   2bf44:	d12f      	bne.n	2bfa6 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2bf46:	687b      	ldr	r3, [r7, #4]
   2bf48:	681a      	ldr	r2, [r3, #0]
   2bf4a:	687b      	ldr	r3, [r7, #4]
   2bf4c:	691b      	ldr	r3, [r3, #16]
   2bf4e:	212f      	movs	r1, #47	; 0x2f
   2bf50:	187c      	adds	r4, r7, r1
   2bf52:	0019      	movs	r1, r3
   2bf54:	0010      	movs	r0, r2
   2bf56:	4b1c      	ldr	r3, [pc, #112]	; (2bfc8 <dir_register+0x354>)
   2bf58:	4798      	blx	r3
   2bf5a:	0003      	movs	r3, r0
   2bf5c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2bf5e:	232f      	movs	r3, #47	; 0x2f
   2bf60:	18fb      	adds	r3, r7, r3
   2bf62:	781b      	ldrb	r3, [r3, #0]
   2bf64:	2b00      	cmp	r3, #0
   2bf66:	d11e      	bne.n	2bfa6 <dir_register+0x332>
			dir = dj->dir;
   2bf68:	687b      	ldr	r3, [r7, #4]
   2bf6a:	695b      	ldr	r3, [r3, #20]
   2bf6c:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2bf6e:	69bb      	ldr	r3, [r7, #24]
   2bf70:	2220      	movs	r2, #32
   2bf72:	2100      	movs	r1, #0
   2bf74:	0018      	movs	r0, r3
   2bf76:	4b18      	ldr	r3, [pc, #96]	; (2bfd8 <dir_register+0x364>)
   2bf78:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2bf7a:	687b      	ldr	r3, [r7, #4]
   2bf7c:	6999      	ldr	r1, [r3, #24]
   2bf7e:	69bb      	ldr	r3, [r7, #24]
   2bf80:	220b      	movs	r2, #11
   2bf82:	0018      	movs	r0, r3
   2bf84:	4b0b      	ldr	r3, [pc, #44]	; (2bfb4 <dir_register+0x340>)
   2bf86:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2bf88:	69bb      	ldr	r3, [r7, #24]
   2bf8a:	330c      	adds	r3, #12
   2bf8c:	001a      	movs	r2, r3
   2bf8e:	687b      	ldr	r3, [r7, #4]
   2bf90:	699b      	ldr	r3, [r3, #24]
   2bf92:	330b      	adds	r3, #11
   2bf94:	781b      	ldrb	r3, [r3, #0]
   2bf96:	2118      	movs	r1, #24
   2bf98:	400b      	ands	r3, r1
   2bf9a:	b2db      	uxtb	r3, r3
   2bf9c:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2bf9e:	687b      	ldr	r3, [r7, #4]
   2bfa0:	681b      	ldr	r3, [r3, #0]
   2bfa2:	2201      	movs	r2, #1
   2bfa4:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2bfa6:	232f      	movs	r3, #47	; 0x2f
   2bfa8:	18fb      	adds	r3, r7, r3
   2bfaa:	781b      	ldrb	r3, [r3, #0]
}
   2bfac:	0018      	movs	r0, r3
   2bfae:	46bd      	mov	sp, r7
   2bfb0:	b00d      	add	sp, #52	; 0x34
   2bfb2:	bd90      	pop	{r4, r7, pc}
   2bfb4:	0002aacd 	.word	0x0002aacd
   2bfb8:	0002b929 	.word	0x0002b929
   2bfbc:	0002ba79 	.word	0x0002ba79
   2bfc0:	00031e59 	.word	0x00031e59
   2bfc4:	0002b3f5 	.word	0x0002b3f5
   2bfc8:	0002abb1 	.word	0x0002abb1
   2bfcc:	0002b525 	.word	0x0002b525
   2bfd0:	0002ba29 	.word	0x0002ba29
   2bfd4:	0002b819 	.word	0x0002b819
   2bfd8:	0002ab05 	.word	0x0002ab05

0002bfdc <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2bfdc:	b590      	push	{r4, r7, lr}
   2bfde:	b08b      	sub	sp, #44	; 0x2c
   2bfe0:	af00      	add	r7, sp, #0
   2bfe2:	6078      	str	r0, [r7, #4]
   2bfe4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2bfe6:	683b      	ldr	r3, [r7, #0]
   2bfe8:	681b      	ldr	r3, [r3, #0]
   2bfea:	613b      	str	r3, [r7, #16]
   2bfec:	e002      	b.n	2bff4 <create_name+0x18>
   2bfee:	693b      	ldr	r3, [r7, #16]
   2bff0:	3301      	adds	r3, #1
   2bff2:	613b      	str	r3, [r7, #16]
   2bff4:	693b      	ldr	r3, [r7, #16]
   2bff6:	781b      	ldrb	r3, [r3, #0]
   2bff8:	2b2f      	cmp	r3, #47	; 0x2f
   2bffa:	d0f8      	beq.n	2bfee <create_name+0x12>
   2bffc:	693b      	ldr	r3, [r7, #16]
   2bffe:	781b      	ldrb	r3, [r3, #0]
   2c000:	2b5c      	cmp	r3, #92	; 0x5c
   2c002:	d0f4      	beq.n	2bfee <create_name+0x12>
	lfn = dj->lfn;
   2c004:	687b      	ldr	r3, [r7, #4]
   2c006:	69db      	ldr	r3, [r3, #28]
   2c008:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2c00a:	2300      	movs	r3, #0
   2c00c:	617b      	str	r3, [r7, #20]
   2c00e:	697b      	ldr	r3, [r7, #20]
   2c010:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2c012:	69bb      	ldr	r3, [r7, #24]
   2c014:	1c5a      	adds	r2, r3, #1
   2c016:	61ba      	str	r2, [r7, #24]
   2c018:	693a      	ldr	r2, [r7, #16]
   2c01a:	18d3      	adds	r3, r2, r3
   2c01c:	781a      	ldrb	r2, [r3, #0]
   2c01e:	2324      	movs	r3, #36	; 0x24
   2c020:	18fb      	adds	r3, r7, r3
   2c022:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2c024:	2324      	movs	r3, #36	; 0x24
   2c026:	18fb      	adds	r3, r7, r3
   2c028:	881b      	ldrh	r3, [r3, #0]
   2c02a:	2b1f      	cmp	r3, #31
   2c02c:	d944      	bls.n	2c0b8 <create_name+0xdc>
   2c02e:	2324      	movs	r3, #36	; 0x24
   2c030:	18fb      	adds	r3, r7, r3
   2c032:	881b      	ldrh	r3, [r3, #0]
   2c034:	2b2f      	cmp	r3, #47	; 0x2f
   2c036:	d03f      	beq.n	2c0b8 <create_name+0xdc>
   2c038:	2324      	movs	r3, #36	; 0x24
   2c03a:	18fb      	adds	r3, r7, r3
   2c03c:	881b      	ldrh	r3, [r3, #0]
   2c03e:	2b5c      	cmp	r3, #92	; 0x5c
   2c040:	d03a      	beq.n	2c0b8 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2c042:	697b      	ldr	r3, [r7, #20]
   2c044:	2bfe      	cmp	r3, #254	; 0xfe
   2c046:	d901      	bls.n	2c04c <create_name+0x70>
			return FR_INVALID_NAME;
   2c048:	2306      	movs	r3, #6
   2c04a:	e1e7      	b.n	2c41c <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2c04c:	2324      	movs	r3, #36	; 0x24
   2c04e:	18fb      	adds	r3, r7, r3
   2c050:	2224      	movs	r2, #36	; 0x24
   2c052:	18ba      	adds	r2, r7, r2
   2c054:	8812      	ldrh	r2, [r2, #0]
   2c056:	21ff      	movs	r1, #255	; 0xff
   2c058:	400a      	ands	r2, r1
   2c05a:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2c05c:	2324      	movs	r3, #36	; 0x24
   2c05e:	18fc      	adds	r4, r7, r3
   2c060:	2324      	movs	r3, #36	; 0x24
   2c062:	18fb      	adds	r3, r7, r3
   2c064:	881b      	ldrh	r3, [r3, #0]
   2c066:	2101      	movs	r1, #1
   2c068:	0018      	movs	r0, r3
   2c06a:	4bba      	ldr	r3, [pc, #744]	; (2c354 <create_name+0x378>)
   2c06c:	4798      	blx	r3
   2c06e:	0003      	movs	r3, r0
   2c070:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2c072:	2324      	movs	r3, #36	; 0x24
   2c074:	18fb      	adds	r3, r7, r3
   2c076:	881b      	ldrh	r3, [r3, #0]
   2c078:	2b00      	cmp	r3, #0
   2c07a:	d101      	bne.n	2c080 <create_name+0xa4>
   2c07c:	2306      	movs	r3, #6
   2c07e:	e1cd      	b.n	2c41c <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2c080:	2324      	movs	r3, #36	; 0x24
   2c082:	18fb      	adds	r3, r7, r3
   2c084:	881b      	ldrh	r3, [r3, #0]
   2c086:	2b7f      	cmp	r3, #127	; 0x7f
   2c088:	d80b      	bhi.n	2c0a2 <create_name+0xc6>
   2c08a:	2324      	movs	r3, #36	; 0x24
   2c08c:	18fb      	adds	r3, r7, r3
   2c08e:	881a      	ldrh	r2, [r3, #0]
   2c090:	4bb1      	ldr	r3, [pc, #708]	; (2c358 <create_name+0x37c>)
   2c092:	0011      	movs	r1, r2
   2c094:	0018      	movs	r0, r3
   2c096:	4bb1      	ldr	r3, [pc, #708]	; (2c35c <create_name+0x380>)
   2c098:	4798      	blx	r3
   2c09a:	1e03      	subs	r3, r0, #0
   2c09c:	d001      	beq.n	2c0a2 <create_name+0xc6>
			return FR_INVALID_NAME;
   2c09e:	2306      	movs	r3, #6
   2c0a0:	e1bc      	b.n	2c41c <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2c0a2:	697b      	ldr	r3, [r7, #20]
   2c0a4:	1c5a      	adds	r2, r3, #1
   2c0a6:	617a      	str	r2, [r7, #20]
   2c0a8:	005b      	lsls	r3, r3, #1
   2c0aa:	68fa      	ldr	r2, [r7, #12]
   2c0ac:	18d3      	adds	r3, r2, r3
   2c0ae:	2224      	movs	r2, #36	; 0x24
   2c0b0:	18ba      	adds	r2, r7, r2
   2c0b2:	8812      	ldrh	r2, [r2, #0]
   2c0b4:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2c0b6:	e7ac      	b.n	2c012 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2c0b8:	693a      	ldr	r2, [r7, #16]
   2c0ba:	69bb      	ldr	r3, [r7, #24]
   2c0bc:	18d2      	adds	r2, r2, r3
   2c0be:	683b      	ldr	r3, [r7, #0]
   2c0c0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2c0c2:	2324      	movs	r3, #36	; 0x24
   2c0c4:	18fb      	adds	r3, r7, r3
   2c0c6:	881b      	ldrh	r3, [r3, #0]
   2c0c8:	2b1f      	cmp	r3, #31
   2c0ca:	d801      	bhi.n	2c0d0 <create_name+0xf4>
   2c0cc:	2204      	movs	r2, #4
   2c0ce:	e000      	b.n	2c0d2 <create_name+0xf6>
   2c0d0:	2200      	movs	r2, #0
   2c0d2:	2326      	movs	r3, #38	; 0x26
   2c0d4:	18fb      	adds	r3, r7, r3
   2c0d6:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2c0d8:	e017      	b.n	2c10a <create_name+0x12e>
		w = lfn[di-1];
   2c0da:	697b      	ldr	r3, [r7, #20]
   2c0dc:	4aa0      	ldr	r2, [pc, #640]	; (2c360 <create_name+0x384>)
   2c0de:	4694      	mov	ip, r2
   2c0e0:	4463      	add	r3, ip
   2c0e2:	005b      	lsls	r3, r3, #1
   2c0e4:	68fa      	ldr	r2, [r7, #12]
   2c0e6:	18d2      	adds	r2, r2, r3
   2c0e8:	2324      	movs	r3, #36	; 0x24
   2c0ea:	18fb      	adds	r3, r7, r3
   2c0ec:	8812      	ldrh	r2, [r2, #0]
   2c0ee:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2c0f0:	2324      	movs	r3, #36	; 0x24
   2c0f2:	18fb      	adds	r3, r7, r3
   2c0f4:	881b      	ldrh	r3, [r3, #0]
   2c0f6:	2b20      	cmp	r3, #32
   2c0f8:	d004      	beq.n	2c104 <create_name+0x128>
   2c0fa:	2324      	movs	r3, #36	; 0x24
   2c0fc:	18fb      	adds	r3, r7, r3
   2c0fe:	881b      	ldrh	r3, [r3, #0]
   2c100:	2b2e      	cmp	r3, #46	; 0x2e
   2c102:	d106      	bne.n	2c112 <create_name+0x136>
		di--;
   2c104:	697b      	ldr	r3, [r7, #20]
   2c106:	3b01      	subs	r3, #1
   2c108:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2c10a:	697b      	ldr	r3, [r7, #20]
   2c10c:	2b00      	cmp	r3, #0
   2c10e:	d1e4      	bne.n	2c0da <create_name+0xfe>
   2c110:	e000      	b.n	2c114 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2c112:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2c114:	697b      	ldr	r3, [r7, #20]
   2c116:	2b00      	cmp	r3, #0
   2c118:	d101      	bne.n	2c11e <create_name+0x142>
   2c11a:	2306      	movs	r3, #6
   2c11c:	e17e      	b.n	2c41c <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2c11e:	697b      	ldr	r3, [r7, #20]
   2c120:	005b      	lsls	r3, r3, #1
   2c122:	68fa      	ldr	r2, [r7, #12]
   2c124:	18d3      	adds	r3, r2, r3
   2c126:	2200      	movs	r2, #0
   2c128:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2c12a:	687b      	ldr	r3, [r7, #4]
   2c12c:	699b      	ldr	r3, [r3, #24]
   2c12e:	220b      	movs	r2, #11
   2c130:	2120      	movs	r1, #32
   2c132:	0018      	movs	r0, r3
   2c134:	4b8b      	ldr	r3, [pc, #556]	; (2c364 <create_name+0x388>)
   2c136:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2c138:	2300      	movs	r3, #0
   2c13a:	61bb      	str	r3, [r7, #24]
   2c13c:	e002      	b.n	2c144 <create_name+0x168>
   2c13e:	69bb      	ldr	r3, [r7, #24]
   2c140:	3301      	adds	r3, #1
   2c142:	61bb      	str	r3, [r7, #24]
   2c144:	69bb      	ldr	r3, [r7, #24]
   2c146:	005b      	lsls	r3, r3, #1
   2c148:	68fa      	ldr	r2, [r7, #12]
   2c14a:	18d3      	adds	r3, r2, r3
   2c14c:	881b      	ldrh	r3, [r3, #0]
   2c14e:	2b20      	cmp	r3, #32
   2c150:	d0f5      	beq.n	2c13e <create_name+0x162>
   2c152:	69bb      	ldr	r3, [r7, #24]
   2c154:	005b      	lsls	r3, r3, #1
   2c156:	68fa      	ldr	r2, [r7, #12]
   2c158:	18d3      	adds	r3, r2, r3
   2c15a:	881b      	ldrh	r3, [r3, #0]
   2c15c:	2b2e      	cmp	r3, #46	; 0x2e
   2c15e:	d0ee      	beq.n	2c13e <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2c160:	69bb      	ldr	r3, [r7, #24]
   2c162:	2b00      	cmp	r3, #0
   2c164:	d00b      	beq.n	2c17e <create_name+0x1a2>
   2c166:	2326      	movs	r3, #38	; 0x26
   2c168:	18fb      	adds	r3, r7, r3
   2c16a:	2226      	movs	r2, #38	; 0x26
   2c16c:	18ba      	adds	r2, r7, r2
   2c16e:	7812      	ldrb	r2, [r2, #0]
   2c170:	2103      	movs	r1, #3
   2c172:	430a      	orrs	r2, r1
   2c174:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2c176:	e002      	b.n	2c17e <create_name+0x1a2>
   2c178:	697b      	ldr	r3, [r7, #20]
   2c17a:	3b01      	subs	r3, #1
   2c17c:	617b      	str	r3, [r7, #20]
   2c17e:	697b      	ldr	r3, [r7, #20]
   2c180:	2b00      	cmp	r3, #0
   2c182:	d009      	beq.n	2c198 <create_name+0x1bc>
   2c184:	697b      	ldr	r3, [r7, #20]
   2c186:	4a76      	ldr	r2, [pc, #472]	; (2c360 <create_name+0x384>)
   2c188:	4694      	mov	ip, r2
   2c18a:	4463      	add	r3, ip
   2c18c:	005b      	lsls	r3, r3, #1
   2c18e:	68fa      	ldr	r2, [r7, #12]
   2c190:	18d3      	adds	r3, r2, r3
   2c192:	881b      	ldrh	r3, [r3, #0]
   2c194:	2b2e      	cmp	r3, #46	; 0x2e
   2c196:	d1ef      	bne.n	2c178 <create_name+0x19c>

	b = i = 0; ni = 8;
   2c198:	2300      	movs	r3, #0
   2c19a:	623b      	str	r3, [r7, #32]
   2c19c:	2327      	movs	r3, #39	; 0x27
   2c19e:	18fb      	adds	r3, r7, r3
   2c1a0:	2200      	movs	r2, #0
   2c1a2:	701a      	strb	r2, [r3, #0]
   2c1a4:	2308      	movs	r3, #8
   2c1a6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2c1a8:	69bb      	ldr	r3, [r7, #24]
   2c1aa:	1c5a      	adds	r2, r3, #1
   2c1ac:	61ba      	str	r2, [r7, #24]
   2c1ae:	005b      	lsls	r3, r3, #1
   2c1b0:	68fa      	ldr	r2, [r7, #12]
   2c1b2:	18d2      	adds	r2, r2, r3
   2c1b4:	2324      	movs	r3, #36	; 0x24
   2c1b6:	18fb      	adds	r3, r7, r3
   2c1b8:	8812      	ldrh	r2, [r2, #0]
   2c1ba:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2c1bc:	2324      	movs	r3, #36	; 0x24
   2c1be:	18fb      	adds	r3, r7, r3
   2c1c0:	881b      	ldrh	r3, [r3, #0]
   2c1c2:	2b00      	cmp	r3, #0
   2c1c4:	d100      	bne.n	2c1c8 <create_name+0x1ec>
   2c1c6:	e0c3      	b.n	2c350 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2c1c8:	2324      	movs	r3, #36	; 0x24
   2c1ca:	18fb      	adds	r3, r7, r3
   2c1cc:	881b      	ldrh	r3, [r3, #0]
   2c1ce:	2b20      	cmp	r3, #32
   2c1d0:	d008      	beq.n	2c1e4 <create_name+0x208>
   2c1d2:	2324      	movs	r3, #36	; 0x24
   2c1d4:	18fb      	adds	r3, r7, r3
   2c1d6:	881b      	ldrh	r3, [r3, #0]
   2c1d8:	2b2e      	cmp	r3, #46	; 0x2e
   2c1da:	d10c      	bne.n	2c1f6 <create_name+0x21a>
   2c1dc:	69ba      	ldr	r2, [r7, #24]
   2c1de:	697b      	ldr	r3, [r7, #20]
   2c1e0:	429a      	cmp	r2, r3
   2c1e2:	d008      	beq.n	2c1f6 <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2c1e4:	2326      	movs	r3, #38	; 0x26
   2c1e6:	18fb      	adds	r3, r7, r3
   2c1e8:	2226      	movs	r2, #38	; 0x26
   2c1ea:	18ba      	adds	r2, r7, r2
   2c1ec:	7812      	ldrb	r2, [r2, #0]
   2c1ee:	2103      	movs	r1, #3
   2c1f0:	430a      	orrs	r2, r1
   2c1f2:	701a      	strb	r2, [r3, #0]
   2c1f4:	e0ab      	b.n	2c34e <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2c1f6:	6a3a      	ldr	r2, [r7, #32]
   2c1f8:	69fb      	ldr	r3, [r7, #28]
   2c1fa:	429a      	cmp	r2, r3
   2c1fc:	d203      	bcs.n	2c206 <create_name+0x22a>
   2c1fe:	69ba      	ldr	r2, [r7, #24]
   2c200:	697b      	ldr	r3, [r7, #20]
   2c202:	429a      	cmp	r2, r3
   2c204:	d12a      	bne.n	2c25c <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2c206:	69fb      	ldr	r3, [r7, #28]
   2c208:	2b0b      	cmp	r3, #11
   2c20a:	d108      	bne.n	2c21e <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2c20c:	2326      	movs	r3, #38	; 0x26
   2c20e:	18fb      	adds	r3, r7, r3
   2c210:	2226      	movs	r2, #38	; 0x26
   2c212:	18ba      	adds	r2, r7, r2
   2c214:	7812      	ldrb	r2, [r2, #0]
   2c216:	2103      	movs	r1, #3
   2c218:	430a      	orrs	r2, r1
   2c21a:	701a      	strb	r2, [r3, #0]
   2c21c:	e0a9      	b.n	2c372 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2c21e:	69ba      	ldr	r2, [r7, #24]
   2c220:	697b      	ldr	r3, [r7, #20]
   2c222:	429a      	cmp	r2, r3
   2c224:	d007      	beq.n	2c236 <create_name+0x25a>
   2c226:	2326      	movs	r3, #38	; 0x26
   2c228:	18fb      	adds	r3, r7, r3
   2c22a:	2226      	movs	r2, #38	; 0x26
   2c22c:	18ba      	adds	r2, r7, r2
   2c22e:	7812      	ldrb	r2, [r2, #0]
   2c230:	2103      	movs	r1, #3
   2c232:	430a      	orrs	r2, r1
   2c234:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2c236:	69ba      	ldr	r2, [r7, #24]
   2c238:	697b      	ldr	r3, [r7, #20]
   2c23a:	429a      	cmp	r2, r3
   2c23c:	d900      	bls.n	2c240 <create_name+0x264>
   2c23e:	e097      	b.n	2c370 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2c240:	697b      	ldr	r3, [r7, #20]
   2c242:	61bb      	str	r3, [r7, #24]
   2c244:	2308      	movs	r3, #8
   2c246:	623b      	str	r3, [r7, #32]
   2c248:	230b      	movs	r3, #11
   2c24a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2c24c:	2327      	movs	r3, #39	; 0x27
   2c24e:	18fb      	adds	r3, r7, r3
   2c250:	2227      	movs	r2, #39	; 0x27
   2c252:	18ba      	adds	r2, r7, r2
   2c254:	7812      	ldrb	r2, [r2, #0]
   2c256:	0092      	lsls	r2, r2, #2
   2c258:	701a      	strb	r2, [r3, #0]
   2c25a:	e078      	b.n	2c34e <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2c25c:	2324      	movs	r3, #36	; 0x24
   2c25e:	18fb      	adds	r3, r7, r3
   2c260:	881b      	ldrh	r3, [r3, #0]
   2c262:	2b7f      	cmp	r3, #127	; 0x7f
   2c264:	d920      	bls.n	2c2a8 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2c266:	2324      	movs	r3, #36	; 0x24
   2c268:	18fc      	adds	r4, r7, r3
   2c26a:	2324      	movs	r3, #36	; 0x24
   2c26c:	18fb      	adds	r3, r7, r3
   2c26e:	881b      	ldrh	r3, [r3, #0]
   2c270:	2100      	movs	r1, #0
   2c272:	0018      	movs	r0, r3
   2c274:	4b37      	ldr	r3, [pc, #220]	; (2c354 <create_name+0x378>)
   2c276:	4798      	blx	r3
   2c278:	0003      	movs	r3, r0
   2c27a:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2c27c:	2324      	movs	r3, #36	; 0x24
   2c27e:	18fb      	adds	r3, r7, r3
   2c280:	881b      	ldrh	r3, [r3, #0]
   2c282:	2b00      	cmp	r3, #0
   2c284:	d008      	beq.n	2c298 <create_name+0x2bc>
   2c286:	2324      	movs	r3, #36	; 0x24
   2c288:	18fb      	adds	r3, r7, r3
   2c28a:	881b      	ldrh	r3, [r3, #0]
   2c28c:	3b80      	subs	r3, #128	; 0x80
   2c28e:	4a36      	ldr	r2, [pc, #216]	; (2c368 <create_name+0x38c>)
   2c290:	5cd2      	ldrb	r2, [r2, r3]
   2c292:	2324      	movs	r3, #36	; 0x24
   2c294:	18fb      	adds	r3, r7, r3
   2c296:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2c298:	2326      	movs	r3, #38	; 0x26
   2c29a:	18fb      	adds	r3, r7, r3
   2c29c:	2226      	movs	r2, #38	; 0x26
   2c29e:	18ba      	adds	r2, r7, r2
   2c2a0:	7812      	ldrb	r2, [r2, #0]
   2c2a2:	2102      	movs	r1, #2
   2c2a4:	430a      	orrs	r2, r1
   2c2a6:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2c2a8:	2324      	movs	r3, #36	; 0x24
   2c2aa:	18fb      	adds	r3, r7, r3
   2c2ac:	881b      	ldrh	r3, [r3, #0]
   2c2ae:	2b00      	cmp	r3, #0
   2c2b0:	d009      	beq.n	2c2c6 <create_name+0x2ea>
   2c2b2:	2324      	movs	r3, #36	; 0x24
   2c2b4:	18fb      	adds	r3, r7, r3
   2c2b6:	881a      	ldrh	r2, [r3, #0]
   2c2b8:	4b2c      	ldr	r3, [pc, #176]	; (2c36c <create_name+0x390>)
   2c2ba:	0011      	movs	r1, r2
   2c2bc:	0018      	movs	r0, r3
   2c2be:	4b27      	ldr	r3, [pc, #156]	; (2c35c <create_name+0x380>)
   2c2c0:	4798      	blx	r3
   2c2c2:	1e03      	subs	r3, r0, #0
   2c2c4:	d00c      	beq.n	2c2e0 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2c2c6:	2324      	movs	r3, #36	; 0x24
   2c2c8:	18fb      	adds	r3, r7, r3
   2c2ca:	225f      	movs	r2, #95	; 0x5f
   2c2cc:	801a      	strh	r2, [r3, #0]
   2c2ce:	2326      	movs	r3, #38	; 0x26
   2c2d0:	18fb      	adds	r3, r7, r3
   2c2d2:	2226      	movs	r2, #38	; 0x26
   2c2d4:	18ba      	adds	r2, r7, r2
   2c2d6:	7812      	ldrb	r2, [r2, #0]
   2c2d8:	2103      	movs	r1, #3
   2c2da:	430a      	orrs	r2, r1
   2c2dc:	701a      	strb	r2, [r3, #0]
   2c2de:	e02b      	b.n	2c338 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2c2e0:	2324      	movs	r3, #36	; 0x24
   2c2e2:	18fb      	adds	r3, r7, r3
   2c2e4:	881b      	ldrh	r3, [r3, #0]
   2c2e6:	2b40      	cmp	r3, #64	; 0x40
   2c2e8:	d90d      	bls.n	2c306 <create_name+0x32a>
   2c2ea:	2324      	movs	r3, #36	; 0x24
   2c2ec:	18fb      	adds	r3, r7, r3
   2c2ee:	881b      	ldrh	r3, [r3, #0]
   2c2f0:	2b5a      	cmp	r3, #90	; 0x5a
   2c2f2:	d808      	bhi.n	2c306 <create_name+0x32a>
					b |= 2;
   2c2f4:	2327      	movs	r3, #39	; 0x27
   2c2f6:	18fb      	adds	r3, r7, r3
   2c2f8:	2227      	movs	r2, #39	; 0x27
   2c2fa:	18ba      	adds	r2, r7, r2
   2c2fc:	7812      	ldrb	r2, [r2, #0]
   2c2fe:	2102      	movs	r1, #2
   2c300:	430a      	orrs	r2, r1
   2c302:	701a      	strb	r2, [r3, #0]
   2c304:	e018      	b.n	2c338 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2c306:	2324      	movs	r3, #36	; 0x24
   2c308:	18fb      	adds	r3, r7, r3
   2c30a:	881b      	ldrh	r3, [r3, #0]
   2c30c:	2b60      	cmp	r3, #96	; 0x60
   2c30e:	d913      	bls.n	2c338 <create_name+0x35c>
   2c310:	2324      	movs	r3, #36	; 0x24
   2c312:	18fb      	adds	r3, r7, r3
   2c314:	881b      	ldrh	r3, [r3, #0]
   2c316:	2b7a      	cmp	r3, #122	; 0x7a
   2c318:	d80e      	bhi.n	2c338 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2c31a:	2327      	movs	r3, #39	; 0x27
   2c31c:	18fb      	adds	r3, r7, r3
   2c31e:	2227      	movs	r2, #39	; 0x27
   2c320:	18ba      	adds	r2, r7, r2
   2c322:	7812      	ldrb	r2, [r2, #0]
   2c324:	2101      	movs	r1, #1
   2c326:	430a      	orrs	r2, r1
   2c328:	701a      	strb	r2, [r3, #0]
   2c32a:	2324      	movs	r3, #36	; 0x24
   2c32c:	18fb      	adds	r3, r7, r3
   2c32e:	2224      	movs	r2, #36	; 0x24
   2c330:	18ba      	adds	r2, r7, r2
   2c332:	8812      	ldrh	r2, [r2, #0]
   2c334:	3a20      	subs	r2, #32
   2c336:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2c338:	687b      	ldr	r3, [r7, #4]
   2c33a:	699a      	ldr	r2, [r3, #24]
   2c33c:	6a3b      	ldr	r3, [r7, #32]
   2c33e:	1c59      	adds	r1, r3, #1
   2c340:	6239      	str	r1, [r7, #32]
   2c342:	18d3      	adds	r3, r2, r3
   2c344:	2224      	movs	r2, #36	; 0x24
   2c346:	18ba      	adds	r2, r7, r2
   2c348:	8812      	ldrh	r2, [r2, #0]
   2c34a:	b2d2      	uxtb	r2, r2
   2c34c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2c34e:	e72b      	b.n	2c1a8 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2c350:	46c0      	nop			; (mov r8, r8)
   2c352:	e00e      	b.n	2c372 <create_name+0x396>
   2c354:	0002d715 	.word	0x0002d715
   2c358:	00038408 	.word	0x00038408
   2c35c:	0002ab7f 	.word	0x0002ab7f
   2c360:	7fffffff 	.word	0x7fffffff
   2c364:	0002ab05 	.word	0x0002ab05
   2c368:	00038450 	.word	0x00038450
   2c36c:	00038414 	.word	0x00038414
			if (si > di) break;			/* No extension */
   2c370:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2c372:	687b      	ldr	r3, [r7, #4]
   2c374:	699b      	ldr	r3, [r3, #24]
   2c376:	781b      	ldrb	r3, [r3, #0]
   2c378:	2be5      	cmp	r3, #229	; 0xe5
   2c37a:	d103      	bne.n	2c384 <create_name+0x3a8>
   2c37c:	687b      	ldr	r3, [r7, #4]
   2c37e:	699b      	ldr	r3, [r3, #24]
   2c380:	2205      	movs	r2, #5
   2c382:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2c384:	69fb      	ldr	r3, [r7, #28]
   2c386:	2b08      	cmp	r3, #8
   2c388:	d106      	bne.n	2c398 <create_name+0x3bc>
   2c38a:	2327      	movs	r3, #39	; 0x27
   2c38c:	18fb      	adds	r3, r7, r3
   2c38e:	2227      	movs	r2, #39	; 0x27
   2c390:	18ba      	adds	r2, r7, r2
   2c392:	7812      	ldrb	r2, [r2, #0]
   2c394:	0092      	lsls	r2, r2, #2
   2c396:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2c398:	2327      	movs	r3, #39	; 0x27
   2c39a:	18fb      	adds	r3, r7, r3
   2c39c:	781b      	ldrb	r3, [r3, #0]
   2c39e:	220c      	movs	r2, #12
   2c3a0:	4013      	ands	r3, r2
   2c3a2:	2b0c      	cmp	r3, #12
   2c3a4:	d006      	beq.n	2c3b4 <create_name+0x3d8>
   2c3a6:	2327      	movs	r3, #39	; 0x27
   2c3a8:	18fb      	adds	r3, r7, r3
   2c3aa:	781b      	ldrb	r3, [r3, #0]
   2c3ac:	2203      	movs	r2, #3
   2c3ae:	4013      	ands	r3, r2
   2c3b0:	2b03      	cmp	r3, #3
   2c3b2:	d107      	bne.n	2c3c4 <create_name+0x3e8>
		cf |= NS_LFN;
   2c3b4:	2326      	movs	r3, #38	; 0x26
   2c3b6:	18fb      	adds	r3, r7, r3
   2c3b8:	2226      	movs	r2, #38	; 0x26
   2c3ba:	18ba      	adds	r2, r7, r2
   2c3bc:	7812      	ldrb	r2, [r2, #0]
   2c3be:	2102      	movs	r1, #2
   2c3c0:	430a      	orrs	r2, r1
   2c3c2:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2c3c4:	2326      	movs	r3, #38	; 0x26
   2c3c6:	18fb      	adds	r3, r7, r3
   2c3c8:	781b      	ldrb	r3, [r3, #0]
   2c3ca:	2202      	movs	r2, #2
   2c3cc:	4013      	ands	r3, r2
   2c3ce:	d11d      	bne.n	2c40c <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2c3d0:	2327      	movs	r3, #39	; 0x27
   2c3d2:	18fb      	adds	r3, r7, r3
   2c3d4:	781b      	ldrb	r3, [r3, #0]
   2c3d6:	2203      	movs	r2, #3
   2c3d8:	4013      	ands	r3, r2
   2c3da:	2b01      	cmp	r3, #1
   2c3dc:	d107      	bne.n	2c3ee <create_name+0x412>
   2c3de:	2326      	movs	r3, #38	; 0x26
   2c3e0:	18fb      	adds	r3, r7, r3
   2c3e2:	2226      	movs	r2, #38	; 0x26
   2c3e4:	18ba      	adds	r2, r7, r2
   2c3e6:	7812      	ldrb	r2, [r2, #0]
   2c3e8:	2110      	movs	r1, #16
   2c3ea:	430a      	orrs	r2, r1
   2c3ec:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2c3ee:	2327      	movs	r3, #39	; 0x27
   2c3f0:	18fb      	adds	r3, r7, r3
   2c3f2:	781b      	ldrb	r3, [r3, #0]
   2c3f4:	220c      	movs	r2, #12
   2c3f6:	4013      	ands	r3, r2
   2c3f8:	2b04      	cmp	r3, #4
   2c3fa:	d107      	bne.n	2c40c <create_name+0x430>
   2c3fc:	2326      	movs	r3, #38	; 0x26
   2c3fe:	18fb      	adds	r3, r7, r3
   2c400:	2226      	movs	r2, #38	; 0x26
   2c402:	18ba      	adds	r2, r7, r2
   2c404:	7812      	ldrb	r2, [r2, #0]
   2c406:	2108      	movs	r1, #8
   2c408:	430a      	orrs	r2, r1
   2c40a:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2c40c:	687b      	ldr	r3, [r7, #4]
   2c40e:	699b      	ldr	r3, [r3, #24]
   2c410:	330b      	adds	r3, #11
   2c412:	2226      	movs	r2, #38	; 0x26
   2c414:	18ba      	adds	r2, r7, r2
   2c416:	7812      	ldrb	r2, [r2, #0]
   2c418:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2c41a:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2c41c:	0018      	movs	r0, r3
   2c41e:	46bd      	mov	sp, r7
   2c420:	b00b      	add	sp, #44	; 0x2c
   2c422:	bd90      	pop	{r4, r7, pc}

0002c424 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2c424:	b590      	push	{r4, r7, lr}
   2c426:	b085      	sub	sp, #20
   2c428:	af00      	add	r7, sp, #0
   2c42a:	6078      	str	r0, [r7, #4]
   2c42c:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2c42e:	683b      	ldr	r3, [r7, #0]
   2c430:	781b      	ldrb	r3, [r3, #0]
   2c432:	2b2f      	cmp	r3, #47	; 0x2f
   2c434:	d003      	beq.n	2c43e <follow_path+0x1a>
   2c436:	683b      	ldr	r3, [r7, #0]
   2c438:	781b      	ldrb	r3, [r3, #0]
   2c43a:	2b5c      	cmp	r3, #92	; 0x5c
   2c43c:	d102      	bne.n	2c444 <follow_path+0x20>
		path++;
   2c43e:	683b      	ldr	r3, [r7, #0]
   2c440:	3301      	adds	r3, #1
   2c442:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2c444:	687b      	ldr	r3, [r7, #4]
   2c446:	2200      	movs	r2, #0
   2c448:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2c44a:	683b      	ldr	r3, [r7, #0]
   2c44c:	781b      	ldrb	r3, [r3, #0]
   2c44e:	2b1f      	cmp	r3, #31
   2c450:	d80c      	bhi.n	2c46c <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2c452:	230f      	movs	r3, #15
   2c454:	18fc      	adds	r4, r7, r3
   2c456:	687b      	ldr	r3, [r7, #4]
   2c458:	2100      	movs	r1, #0
   2c45a:	0018      	movs	r0, r3
   2c45c:	4b3c      	ldr	r3, [pc, #240]	; (2c550 <follow_path+0x12c>)
   2c45e:	4798      	blx	r3
   2c460:	0003      	movs	r3, r0
   2c462:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2c464:	687b      	ldr	r3, [r7, #4]
   2c466:	2200      	movs	r2, #0
   2c468:	615a      	str	r2, [r3, #20]
   2c46a:	e06a      	b.n	2c542 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2c46c:	230f      	movs	r3, #15
   2c46e:	18fc      	adds	r4, r7, r3
   2c470:	003a      	movs	r2, r7
   2c472:	687b      	ldr	r3, [r7, #4]
   2c474:	0011      	movs	r1, r2
   2c476:	0018      	movs	r0, r3
   2c478:	4b36      	ldr	r3, [pc, #216]	; (2c554 <follow_path+0x130>)
   2c47a:	4798      	blx	r3
   2c47c:	0003      	movs	r3, r0
   2c47e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c480:	230f      	movs	r3, #15
   2c482:	18fb      	adds	r3, r7, r3
   2c484:	781b      	ldrb	r3, [r3, #0]
   2c486:	2b00      	cmp	r3, #0
   2c488:	d154      	bne.n	2c534 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2c48a:	230f      	movs	r3, #15
   2c48c:	18fc      	adds	r4, r7, r3
   2c48e:	687b      	ldr	r3, [r7, #4]
   2c490:	0018      	movs	r0, r3
   2c492:	4b31      	ldr	r3, [pc, #196]	; (2c558 <follow_path+0x134>)
   2c494:	4798      	blx	r3
   2c496:	0003      	movs	r3, r0
   2c498:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2c49a:	687b      	ldr	r3, [r7, #4]
   2c49c:	699a      	ldr	r2, [r3, #24]
   2c49e:	230e      	movs	r3, #14
   2c4a0:	18fb      	adds	r3, r7, r3
   2c4a2:	7ad2      	ldrb	r2, [r2, #11]
   2c4a4:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2c4a6:	230f      	movs	r3, #15
   2c4a8:	18fb      	adds	r3, r7, r3
   2c4aa:	781b      	ldrb	r3, [r3, #0]
   2c4ac:	2b00      	cmp	r3, #0
   2c4ae:	d00f      	beq.n	2c4d0 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2c4b0:	230f      	movs	r3, #15
   2c4b2:	18fb      	adds	r3, r7, r3
   2c4b4:	781b      	ldrb	r3, [r3, #0]
   2c4b6:	2b04      	cmp	r3, #4
   2c4b8:	d13e      	bne.n	2c538 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2c4ba:	230e      	movs	r3, #14
   2c4bc:	18fb      	adds	r3, r7, r3
   2c4be:	781b      	ldrb	r3, [r3, #0]
   2c4c0:	2204      	movs	r2, #4
   2c4c2:	4013      	ands	r3, r2
   2c4c4:	d13a      	bne.n	2c53c <follow_path+0x118>
   2c4c6:	230f      	movs	r3, #15
   2c4c8:	18fb      	adds	r3, r7, r3
   2c4ca:	2205      	movs	r2, #5
   2c4cc:	701a      	strb	r2, [r3, #0]
				}
				break;
   2c4ce:	e035      	b.n	2c53c <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2c4d0:	230e      	movs	r3, #14
   2c4d2:	18fb      	adds	r3, r7, r3
   2c4d4:	781b      	ldrb	r3, [r3, #0]
   2c4d6:	2204      	movs	r2, #4
   2c4d8:	4013      	ands	r3, r2
   2c4da:	d131      	bne.n	2c540 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2c4dc:	687b      	ldr	r3, [r7, #4]
   2c4de:	695b      	ldr	r3, [r3, #20]
   2c4e0:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2c4e2:	68bb      	ldr	r3, [r7, #8]
   2c4e4:	330b      	adds	r3, #11
   2c4e6:	781b      	ldrb	r3, [r3, #0]
   2c4e8:	001a      	movs	r2, r3
   2c4ea:	2310      	movs	r3, #16
   2c4ec:	4013      	ands	r3, r2
   2c4ee:	d104      	bne.n	2c4fa <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2c4f0:	230f      	movs	r3, #15
   2c4f2:	18fb      	adds	r3, r7, r3
   2c4f4:	2205      	movs	r2, #5
   2c4f6:	701a      	strb	r2, [r3, #0]
   2c4f8:	e023      	b.n	2c542 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2c4fa:	68bb      	ldr	r3, [r7, #8]
   2c4fc:	3315      	adds	r3, #21
   2c4fe:	781b      	ldrb	r3, [r3, #0]
   2c500:	021b      	lsls	r3, r3, #8
   2c502:	b21a      	sxth	r2, r3
   2c504:	68bb      	ldr	r3, [r7, #8]
   2c506:	3314      	adds	r3, #20
   2c508:	781b      	ldrb	r3, [r3, #0]
   2c50a:	b21b      	sxth	r3, r3
   2c50c:	4313      	orrs	r3, r2
   2c50e:	b21b      	sxth	r3, r3
   2c510:	b29b      	uxth	r3, r3
   2c512:	041b      	lsls	r3, r3, #16
   2c514:	68ba      	ldr	r2, [r7, #8]
   2c516:	321b      	adds	r2, #27
   2c518:	7812      	ldrb	r2, [r2, #0]
   2c51a:	0212      	lsls	r2, r2, #8
   2c51c:	b211      	sxth	r1, r2
   2c51e:	68ba      	ldr	r2, [r7, #8]
   2c520:	321a      	adds	r2, #26
   2c522:	7812      	ldrb	r2, [r2, #0]
   2c524:	b212      	sxth	r2, r2
   2c526:	430a      	orrs	r2, r1
   2c528:	b212      	sxth	r2, r2
   2c52a:	b292      	uxth	r2, r2
   2c52c:	431a      	orrs	r2, r3
   2c52e:	687b      	ldr	r3, [r7, #4]
   2c530:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2c532:	e79b      	b.n	2c46c <follow_path+0x48>
			if (res != FR_OK) break;
   2c534:	46c0      	nop			; (mov r8, r8)
   2c536:	e004      	b.n	2c542 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2c538:	46c0      	nop			; (mov r8, r8)
   2c53a:	e002      	b.n	2c542 <follow_path+0x11e>
				break;
   2c53c:	46c0      	nop			; (mov r8, r8)
   2c53e:	e000      	b.n	2c542 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2c540:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2c542:	230f      	movs	r3, #15
   2c544:	18fb      	adds	r3, r7, r3
   2c546:	781b      	ldrb	r3, [r3, #0]
}
   2c548:	0018      	movs	r0, r3
   2c54a:	46bd      	mov	sp, r7
   2c54c:	b005      	add	sp, #20
   2c54e:	bd90      	pop	{r4, r7, pc}
   2c550:	0002b3f5 	.word	0x0002b3f5
   2c554:	0002bfdd 	.word	0x0002bfdd
   2c558:	0002ba79 	.word	0x0002ba79

0002c55c <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2c55c:	b590      	push	{r4, r7, lr}
   2c55e:	b083      	sub	sp, #12
   2c560:	af00      	add	r7, sp, #0
   2c562:	6078      	str	r0, [r7, #4]
   2c564:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2c566:	687b      	ldr	r3, [r7, #4]
   2c568:	7858      	ldrb	r0, [r3, #1]
   2c56a:	687b      	ldr	r3, [r7, #4]
   2c56c:	3330      	adds	r3, #48	; 0x30
   2c56e:	0019      	movs	r1, r3
   2c570:	683a      	ldr	r2, [r7, #0]
   2c572:	2301      	movs	r3, #1
   2c574:	4c2a      	ldr	r4, [pc, #168]	; (2c620 <check_fs+0xc4>)
   2c576:	47a0      	blx	r4
   2c578:	1e03      	subs	r3, r0, #0
   2c57a:	d001      	beq.n	2c580 <check_fs+0x24>
		return 3;
   2c57c:	2303      	movs	r3, #3
   2c57e:	e04b      	b.n	2c618 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2c580:	687b      	ldr	r3, [r7, #4]
   2c582:	4a28      	ldr	r2, [pc, #160]	; (2c624 <check_fs+0xc8>)
   2c584:	4694      	mov	ip, r2
   2c586:	4463      	add	r3, ip
   2c588:	3301      	adds	r3, #1
   2c58a:	781b      	ldrb	r3, [r3, #0]
   2c58c:	021b      	lsls	r3, r3, #8
   2c58e:	b21a      	sxth	r2, r3
   2c590:	687b      	ldr	r3, [r7, #4]
   2c592:	4924      	ldr	r1, [pc, #144]	; (2c624 <check_fs+0xc8>)
   2c594:	5c5b      	ldrb	r3, [r3, r1]
   2c596:	b21b      	sxth	r3, r3
   2c598:	4313      	orrs	r3, r2
   2c59a:	b21b      	sxth	r3, r3
   2c59c:	4a22      	ldr	r2, [pc, #136]	; (2c628 <check_fs+0xcc>)
   2c59e:	4293      	cmp	r3, r2
   2c5a0:	d001      	beq.n	2c5a6 <check_fs+0x4a>
		return 2;
   2c5a2:	2302      	movs	r3, #2
   2c5a4:	e038      	b.n	2c618 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2c5a6:	687b      	ldr	r3, [r7, #4]
   2c5a8:	3366      	adds	r3, #102	; 0x66
   2c5aa:	3303      	adds	r3, #3
   2c5ac:	781b      	ldrb	r3, [r3, #0]
   2c5ae:	061a      	lsls	r2, r3, #24
   2c5b0:	687b      	ldr	r3, [r7, #4]
   2c5b2:	3366      	adds	r3, #102	; 0x66
   2c5b4:	3302      	adds	r3, #2
   2c5b6:	781b      	ldrb	r3, [r3, #0]
   2c5b8:	041b      	lsls	r3, r3, #16
   2c5ba:	4313      	orrs	r3, r2
   2c5bc:	687a      	ldr	r2, [r7, #4]
   2c5be:	3266      	adds	r2, #102	; 0x66
   2c5c0:	3201      	adds	r2, #1
   2c5c2:	7812      	ldrb	r2, [r2, #0]
   2c5c4:	0212      	lsls	r2, r2, #8
   2c5c6:	4313      	orrs	r3, r2
   2c5c8:	687a      	ldr	r2, [r7, #4]
   2c5ca:	2166      	movs	r1, #102	; 0x66
   2c5cc:	5c52      	ldrb	r2, [r2, r1]
   2c5ce:	4313      	orrs	r3, r2
   2c5d0:	021b      	lsls	r3, r3, #8
   2c5d2:	0a1b      	lsrs	r3, r3, #8
   2c5d4:	4a15      	ldr	r2, [pc, #84]	; (2c62c <check_fs+0xd0>)
   2c5d6:	4293      	cmp	r3, r2
   2c5d8:	d101      	bne.n	2c5de <check_fs+0x82>
		return 0;
   2c5da:	2300      	movs	r3, #0
   2c5dc:	e01c      	b.n	2c618 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2c5de:	687b      	ldr	r3, [r7, #4]
   2c5e0:	3382      	adds	r3, #130	; 0x82
   2c5e2:	3303      	adds	r3, #3
   2c5e4:	781b      	ldrb	r3, [r3, #0]
   2c5e6:	061a      	lsls	r2, r3, #24
   2c5e8:	687b      	ldr	r3, [r7, #4]
   2c5ea:	3382      	adds	r3, #130	; 0x82
   2c5ec:	3302      	adds	r3, #2
   2c5ee:	781b      	ldrb	r3, [r3, #0]
   2c5f0:	041b      	lsls	r3, r3, #16
   2c5f2:	4313      	orrs	r3, r2
   2c5f4:	687a      	ldr	r2, [r7, #4]
   2c5f6:	3282      	adds	r2, #130	; 0x82
   2c5f8:	3201      	adds	r2, #1
   2c5fa:	7812      	ldrb	r2, [r2, #0]
   2c5fc:	0212      	lsls	r2, r2, #8
   2c5fe:	4313      	orrs	r3, r2
   2c600:	687a      	ldr	r2, [r7, #4]
   2c602:	2182      	movs	r1, #130	; 0x82
   2c604:	5c52      	ldrb	r2, [r2, r1]
   2c606:	4313      	orrs	r3, r2
   2c608:	021b      	lsls	r3, r3, #8
   2c60a:	0a1b      	lsrs	r3, r3, #8
   2c60c:	4a07      	ldr	r2, [pc, #28]	; (2c62c <check_fs+0xd0>)
   2c60e:	4293      	cmp	r3, r2
   2c610:	d101      	bne.n	2c616 <check_fs+0xba>
		return 0;
   2c612:	2300      	movs	r3, #0
   2c614:	e000      	b.n	2c618 <check_fs+0xbc>

	return 1;
   2c616:	2301      	movs	r3, #1
}
   2c618:	0018      	movs	r0, r3
   2c61a:	46bd      	mov	sp, r7
   2c61c:	b003      	add	sp, #12
   2c61e:	bd90      	pop	{r4, r7, pc}
   2c620:	0002a7c5 	.word	0x0002a7c5
   2c624:	0000022e 	.word	0x0000022e
   2c628:	ffffaa55 	.word	0xffffaa55
   2c62c:	00544146 	.word	0x00544146

0002c630 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2c630:	b590      	push	{r4, r7, lr}
   2c632:	b093      	sub	sp, #76	; 0x4c
   2c634:	af00      	add	r7, sp, #0
   2c636:	60f8      	str	r0, [r7, #12]
   2c638:	60b9      	str	r1, [r7, #8]
   2c63a:	1dfb      	adds	r3, r7, #7
   2c63c:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2c63e:	68fb      	ldr	r3, [r7, #12]
   2c640:	681b      	ldr	r3, [r3, #0]
   2c642:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2c644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2c646:	781b      	ldrb	r3, [r3, #0]
   2c648:	3b30      	subs	r3, #48	; 0x30
   2c64a:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2c64c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c64e:	2b09      	cmp	r3, #9
   2c650:	d80b      	bhi.n	2c66a <chk_mounted+0x3a>
   2c652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2c654:	3301      	adds	r3, #1
   2c656:	781b      	ldrb	r3, [r3, #0]
   2c658:	2b3a      	cmp	r3, #58	; 0x3a
   2c65a:	d106      	bne.n	2c66a <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2c65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2c65e:	3302      	adds	r3, #2
   2c660:	62fb      	str	r3, [r7, #44]	; 0x2c
   2c662:	68fb      	ldr	r3, [r7, #12]
   2c664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2c666:	601a      	str	r2, [r3, #0]
   2c668:	e001      	b.n	2c66e <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2c66a:	2300      	movs	r3, #0
   2c66c:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2c66e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c670:	2b07      	cmp	r3, #7
   2c672:	d901      	bls.n	2c678 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2c674:	230b      	movs	r3, #11
   2c676:	e2af      	b.n	2cbd8 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2c678:	4bc5      	ldr	r3, [pc, #788]	; (2c990 <chk_mounted+0x360>)
   2c67a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2c67c:	0092      	lsls	r2, r2, #2
   2c67e:	58d3      	ldr	r3, [r2, r3]
   2c680:	62bb      	str	r3, [r7, #40]	; 0x28
   2c682:	68bb      	ldr	r3, [r7, #8]
   2c684:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c686:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2c688:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c68a:	2b00      	cmp	r3, #0
   2c68c:	d101      	bne.n	2c692 <chk_mounted+0x62>
   2c68e:	230c      	movs	r3, #12
   2c690:	e2a2      	b.n	2cbd8 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2c692:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c694:	781b      	ldrb	r3, [r3, #0]
   2c696:	2b00      	cmp	r3, #0
   2c698:	d01c      	beq.n	2c6d4 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2c69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c69c:	785b      	ldrb	r3, [r3, #1]
   2c69e:	2227      	movs	r2, #39	; 0x27
   2c6a0:	18bc      	adds	r4, r7, r2
   2c6a2:	0018      	movs	r0, r3
   2c6a4:	4bbb      	ldr	r3, [pc, #748]	; (2c994 <chk_mounted+0x364>)
   2c6a6:	4798      	blx	r3
   2c6a8:	0003      	movs	r3, r0
   2c6aa:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2c6ac:	2327      	movs	r3, #39	; 0x27
   2c6ae:	18fb      	adds	r3, r7, r3
   2c6b0:	781b      	ldrb	r3, [r3, #0]
   2c6b2:	2201      	movs	r2, #1
   2c6b4:	4013      	ands	r3, r2
   2c6b6:	d10d      	bne.n	2c6d4 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2c6b8:	1dfb      	adds	r3, r7, #7
   2c6ba:	781b      	ldrb	r3, [r3, #0]
   2c6bc:	2b00      	cmp	r3, #0
   2c6be:	d007      	beq.n	2c6d0 <chk_mounted+0xa0>
   2c6c0:	2327      	movs	r3, #39	; 0x27
   2c6c2:	18fb      	adds	r3, r7, r3
   2c6c4:	781b      	ldrb	r3, [r3, #0]
   2c6c6:	2204      	movs	r2, #4
   2c6c8:	4013      	ands	r3, r2
   2c6ca:	d001      	beq.n	2c6d0 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2c6cc:	230a      	movs	r3, #10
   2c6ce:	e283      	b.n	2cbd8 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2c6d0:	2300      	movs	r3, #0
   2c6d2:	e281      	b.n	2cbd8 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2c6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6d6:	2200      	movs	r2, #0
   2c6d8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2c6da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2c6dc:	b2da      	uxtb	r2, r3
   2c6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6e0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2c6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c6e4:	785b      	ldrb	r3, [r3, #1]
   2c6e6:	2227      	movs	r2, #39	; 0x27
   2c6e8:	18bc      	adds	r4, r7, r2
   2c6ea:	0018      	movs	r0, r3
   2c6ec:	4baa      	ldr	r3, [pc, #680]	; (2c998 <chk_mounted+0x368>)
   2c6ee:	4798      	blx	r3
   2c6f0:	0003      	movs	r3, r0
   2c6f2:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2c6f4:	2327      	movs	r3, #39	; 0x27
   2c6f6:	18fb      	adds	r3, r7, r3
   2c6f8:	781b      	ldrb	r3, [r3, #0]
   2c6fa:	2201      	movs	r2, #1
   2c6fc:	4013      	ands	r3, r2
   2c6fe:	d001      	beq.n	2c704 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2c700:	2303      	movs	r3, #3
   2c702:	e269      	b.n	2cbd8 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2c704:	1dfb      	adds	r3, r7, #7
   2c706:	781b      	ldrb	r3, [r3, #0]
   2c708:	2b00      	cmp	r3, #0
   2c70a:	d007      	beq.n	2c71c <chk_mounted+0xec>
   2c70c:	2327      	movs	r3, #39	; 0x27
   2c70e:	18fb      	adds	r3, r7, r3
   2c710:	781b      	ldrb	r3, [r3, #0]
   2c712:	2204      	movs	r2, #4
   2c714:	4013      	ands	r3, r2
   2c716:	d001      	beq.n	2c71c <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2c718:	230a      	movs	r3, #10
   2c71a:	e25d      	b.n	2cbd8 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2c71c:	2300      	movs	r3, #0
   2c71e:	63fb      	str	r3, [r7, #60]	; 0x3c
   2c720:	2347      	movs	r3, #71	; 0x47
   2c722:	18fc      	adds	r4, r7, r3
   2c724:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2c726:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c728:	0011      	movs	r1, r2
   2c72a:	0018      	movs	r0, r3
   2c72c:	4b9b      	ldr	r3, [pc, #620]	; (2c99c <chk_mounted+0x36c>)
   2c72e:	4798      	blx	r3
   2c730:	0003      	movs	r3, r0
   2c732:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2c734:	2347      	movs	r3, #71	; 0x47
   2c736:	18fb      	adds	r3, r7, r3
   2c738:	781b      	ldrb	r3, [r3, #0]
   2c73a:	2b01      	cmp	r3, #1
   2c73c:	d13b      	bne.n	2c7b6 <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2c73e:	2346      	movs	r3, #70	; 0x46
   2c740:	18fb      	adds	r3, r7, r3
   2c742:	2200      	movs	r2, #0
   2c744:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2c746:	2346      	movs	r3, #70	; 0x46
   2c748:	18fb      	adds	r3, r7, r3
   2c74a:	781b      	ldrb	r3, [r3, #0]
   2c74c:	2b00      	cmp	r3, #0
   2c74e:	d006      	beq.n	2c75e <chk_mounted+0x12e>
   2c750:	2346      	movs	r3, #70	; 0x46
   2c752:	18fb      	adds	r3, r7, r3
   2c754:	781a      	ldrb	r2, [r3, #0]
   2c756:	2346      	movs	r3, #70	; 0x46
   2c758:	18fb      	adds	r3, r7, r3
   2c75a:	3a01      	subs	r2, #1
   2c75c:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2c75e:	2346      	movs	r3, #70	; 0x46
   2c760:	18fb      	adds	r3, r7, r3
   2c762:	781b      	ldrb	r3, [r3, #0]
   2c764:	011b      	lsls	r3, r3, #4
   2c766:	33bf      	adds	r3, #191	; 0xbf
   2c768:	33ff      	adds	r3, #255	; 0xff
   2c76a:	3330      	adds	r3, #48	; 0x30
   2c76c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c76e:	18d3      	adds	r3, r2, r3
   2c770:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2c772:	6a3b      	ldr	r3, [r7, #32]
   2c774:	3304      	adds	r3, #4
   2c776:	781b      	ldrb	r3, [r3, #0]
   2c778:	2b00      	cmp	r3, #0
   2c77a:	d01c      	beq.n	2c7b6 <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2c77c:	6a3b      	ldr	r3, [r7, #32]
   2c77e:	330b      	adds	r3, #11
   2c780:	781b      	ldrb	r3, [r3, #0]
   2c782:	061a      	lsls	r2, r3, #24
   2c784:	6a3b      	ldr	r3, [r7, #32]
   2c786:	330a      	adds	r3, #10
   2c788:	781b      	ldrb	r3, [r3, #0]
   2c78a:	041b      	lsls	r3, r3, #16
   2c78c:	4313      	orrs	r3, r2
   2c78e:	6a3a      	ldr	r2, [r7, #32]
   2c790:	3209      	adds	r2, #9
   2c792:	7812      	ldrb	r2, [r2, #0]
   2c794:	0212      	lsls	r2, r2, #8
   2c796:	4313      	orrs	r3, r2
   2c798:	6a3a      	ldr	r2, [r7, #32]
   2c79a:	3208      	adds	r2, #8
   2c79c:	7812      	ldrb	r2, [r2, #0]
   2c79e:	4313      	orrs	r3, r2
   2c7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2c7a2:	2347      	movs	r3, #71	; 0x47
   2c7a4:	18fc      	adds	r4, r7, r3
   2c7a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2c7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c7aa:	0011      	movs	r1, r2
   2c7ac:	0018      	movs	r0, r3
   2c7ae:	4b7b      	ldr	r3, [pc, #492]	; (2c99c <chk_mounted+0x36c>)
   2c7b0:	4798      	blx	r3
   2c7b2:	0003      	movs	r3, r0
   2c7b4:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2c7b6:	2347      	movs	r3, #71	; 0x47
   2c7b8:	18fb      	adds	r3, r7, r3
   2c7ba:	781b      	ldrb	r3, [r3, #0]
   2c7bc:	2b03      	cmp	r3, #3
   2c7be:	d101      	bne.n	2c7c4 <chk_mounted+0x194>
   2c7c0:	2301      	movs	r3, #1
   2c7c2:	e209      	b.n	2cbd8 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2c7c4:	2347      	movs	r3, #71	; 0x47
   2c7c6:	18fb      	adds	r3, r7, r3
   2c7c8:	781b      	ldrb	r3, [r3, #0]
   2c7ca:	2b00      	cmp	r3, #0
   2c7cc:	d001      	beq.n	2c7d2 <chk_mounted+0x1a2>
   2c7ce:	230d      	movs	r3, #13
   2c7d0:	e202      	b.n	2cbd8 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2c7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c7d4:	223c      	movs	r2, #60	; 0x3c
   2c7d6:	5c9b      	ldrb	r3, [r3, r2]
   2c7d8:	021b      	lsls	r3, r3, #8
   2c7da:	b21a      	sxth	r2, r3
   2c7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c7de:	213b      	movs	r1, #59	; 0x3b
   2c7e0:	5c5b      	ldrb	r3, [r3, r1]
   2c7e2:	b21b      	sxth	r3, r3
   2c7e4:	4313      	orrs	r3, r2
   2c7e6:	b21a      	sxth	r2, r3
   2c7e8:	2380      	movs	r3, #128	; 0x80
   2c7ea:	009b      	lsls	r3, r3, #2
   2c7ec:	429a      	cmp	r2, r3
   2c7ee:	d001      	beq.n	2c7f4 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2c7f0:	230d      	movs	r3, #13
   2c7f2:	e1f1      	b.n	2cbd8 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2c7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c7f6:	2247      	movs	r2, #71	; 0x47
   2c7f8:	5c9b      	ldrb	r3, [r3, r2]
   2c7fa:	021b      	lsls	r3, r3, #8
   2c7fc:	b21a      	sxth	r2, r3
   2c7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c800:	2146      	movs	r1, #70	; 0x46
   2c802:	5c5b      	ldrb	r3, [r3, r1]
   2c804:	b21b      	sxth	r3, r3
   2c806:	4313      	orrs	r3, r2
   2c808:	b21b      	sxth	r3, r3
   2c80a:	b29b      	uxth	r3, r3
   2c80c:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2c80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c810:	2b00      	cmp	r3, #0
   2c812:	d112      	bne.n	2c83a <chk_mounted+0x20a>
   2c814:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c816:	2257      	movs	r2, #87	; 0x57
   2c818:	5c9b      	ldrb	r3, [r3, r2]
   2c81a:	061a      	lsls	r2, r3, #24
   2c81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c81e:	2156      	movs	r1, #86	; 0x56
   2c820:	5c5b      	ldrb	r3, [r3, r1]
   2c822:	041b      	lsls	r3, r3, #16
   2c824:	4313      	orrs	r3, r2
   2c826:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c828:	2155      	movs	r1, #85	; 0x55
   2c82a:	5c52      	ldrb	r2, [r2, r1]
   2c82c:	0212      	lsls	r2, r2, #8
   2c82e:	4313      	orrs	r3, r2
   2c830:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c832:	2154      	movs	r1, #84	; 0x54
   2c834:	5c52      	ldrb	r2, [r2, r1]
   2c836:	4313      	orrs	r3, r2
   2c838:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c83c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2c83e:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2c840:	231f      	movs	r3, #31
   2c842:	18fb      	adds	r3, r7, r3
   2c844:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c846:	2140      	movs	r1, #64	; 0x40
   2c848:	5c52      	ldrb	r2, [r2, r1]
   2c84a:	701a      	strb	r2, [r3, #0]
   2c84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c84e:	221f      	movs	r2, #31
   2c850:	18ba      	adds	r2, r7, r2
   2c852:	7812      	ldrb	r2, [r2, #0]
   2c854:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2c856:	231f      	movs	r3, #31
   2c858:	18fb      	adds	r3, r7, r3
   2c85a:	781b      	ldrb	r3, [r3, #0]
   2c85c:	2b01      	cmp	r3, #1
   2c85e:	d006      	beq.n	2c86e <chk_mounted+0x23e>
   2c860:	231f      	movs	r3, #31
   2c862:	18fb      	adds	r3, r7, r3
   2c864:	781b      	ldrb	r3, [r3, #0]
   2c866:	2b02      	cmp	r3, #2
   2c868:	d001      	beq.n	2c86e <chk_mounted+0x23e>
   2c86a:	230d      	movs	r3, #13
   2c86c:	e1b4      	b.n	2cbd8 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2c86e:	231f      	movs	r3, #31
   2c870:	18fb      	adds	r3, r7, r3
   2c872:	781a      	ldrb	r2, [r3, #0]
   2c874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c876:	4353      	muls	r3, r2
   2c878:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2c87a:	231f      	movs	r3, #31
   2c87c:	18fb      	adds	r3, r7, r3
   2c87e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c880:	213d      	movs	r1, #61	; 0x3d
   2c882:	5c52      	ldrb	r2, [r2, r1]
   2c884:	701a      	strb	r2, [r3, #0]
   2c886:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c888:	221f      	movs	r2, #31
   2c88a:	18ba      	adds	r2, r7, r2
   2c88c:	7812      	ldrb	r2, [r2, #0]
   2c88e:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2c890:	231f      	movs	r3, #31
   2c892:	18fb      	adds	r3, r7, r3
   2c894:	781b      	ldrb	r3, [r3, #0]
   2c896:	2b00      	cmp	r3, #0
   2c898:	d008      	beq.n	2c8ac <chk_mounted+0x27c>
   2c89a:	231f      	movs	r3, #31
   2c89c:	18fb      	adds	r3, r7, r3
   2c89e:	781b      	ldrb	r3, [r3, #0]
   2c8a0:	221f      	movs	r2, #31
   2c8a2:	18ba      	adds	r2, r7, r2
   2c8a4:	7812      	ldrb	r2, [r2, #0]
   2c8a6:	3a01      	subs	r2, #1
   2c8a8:	4013      	ands	r3, r2
   2c8aa:	d001      	beq.n	2c8b0 <chk_mounted+0x280>
   2c8ac:	230d      	movs	r3, #13
   2c8ae:	e193      	b.n	2cbd8 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2c8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8b2:	2242      	movs	r2, #66	; 0x42
   2c8b4:	5c9b      	ldrb	r3, [r3, r2]
   2c8b6:	021b      	lsls	r3, r3, #8
   2c8b8:	b21a      	sxth	r2, r3
   2c8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8bc:	2141      	movs	r1, #65	; 0x41
   2c8be:	5c5b      	ldrb	r3, [r3, r1]
   2c8c0:	b21b      	sxth	r3, r3
   2c8c2:	4313      	orrs	r3, r2
   2c8c4:	b21b      	sxth	r3, r3
   2c8c6:	b29a      	uxth	r2, r3
   2c8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8ca:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2c8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8ce:	891b      	ldrh	r3, [r3, #8]
   2c8d0:	220f      	movs	r2, #15
   2c8d2:	4013      	ands	r3, r2
   2c8d4:	b29b      	uxth	r3, r3
   2c8d6:	2b00      	cmp	r3, #0
   2c8d8:	d001      	beq.n	2c8de <chk_mounted+0x2ae>
   2c8da:	230d      	movs	r3, #13
   2c8dc:	e17c      	b.n	2cbd8 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2c8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8e0:	2244      	movs	r2, #68	; 0x44
   2c8e2:	5c9b      	ldrb	r3, [r3, r2]
   2c8e4:	021b      	lsls	r3, r3, #8
   2c8e6:	b21a      	sxth	r2, r3
   2c8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c8ea:	2143      	movs	r1, #67	; 0x43
   2c8ec:	5c5b      	ldrb	r3, [r3, r1]
   2c8ee:	b21b      	sxth	r3, r3
   2c8f0:	4313      	orrs	r3, r2
   2c8f2:	b21b      	sxth	r3, r3
   2c8f4:	b29b      	uxth	r3, r3
   2c8f6:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2c8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2c8fa:	2b00      	cmp	r3, #0
   2c8fc:	d112      	bne.n	2c924 <chk_mounted+0x2f4>
   2c8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c900:	2253      	movs	r2, #83	; 0x53
   2c902:	5c9b      	ldrb	r3, [r3, r2]
   2c904:	061a      	lsls	r2, r3, #24
   2c906:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c908:	2152      	movs	r1, #82	; 0x52
   2c90a:	5c5b      	ldrb	r3, [r3, r1]
   2c90c:	041b      	lsls	r3, r3, #16
   2c90e:	4313      	orrs	r3, r2
   2c910:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c912:	2151      	movs	r1, #81	; 0x51
   2c914:	5c52      	ldrb	r2, [r2, r1]
   2c916:	0212      	lsls	r2, r2, #8
   2c918:	4313      	orrs	r3, r2
   2c91a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c91c:	2150      	movs	r1, #80	; 0x50
   2c91e:	5c52      	ldrb	r2, [r2, r1]
   2c920:	4313      	orrs	r3, r2
   2c922:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2c924:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c926:	223f      	movs	r2, #63	; 0x3f
   2c928:	5c9b      	ldrb	r3, [r3, r2]
   2c92a:	021b      	lsls	r3, r3, #8
   2c92c:	b21a      	sxth	r2, r3
   2c92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c930:	213e      	movs	r1, #62	; 0x3e
   2c932:	5c5b      	ldrb	r3, [r3, r1]
   2c934:	b21b      	sxth	r3, r3
   2c936:	4313      	orrs	r3, r2
   2c938:	b21a      	sxth	r2, r3
   2c93a:	231c      	movs	r3, #28
   2c93c:	18fb      	adds	r3, r7, r3
   2c93e:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2c940:	231c      	movs	r3, #28
   2c942:	18fb      	adds	r3, r7, r3
   2c944:	881b      	ldrh	r3, [r3, #0]
   2c946:	2b00      	cmp	r3, #0
   2c948:	d101      	bne.n	2c94e <chk_mounted+0x31e>
   2c94a:	230d      	movs	r3, #13
   2c94c:	e144      	b.n	2cbd8 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2c94e:	231c      	movs	r3, #28
   2c950:	18fb      	adds	r3, r7, r3
   2c952:	881a      	ldrh	r2, [r3, #0]
   2c954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2c956:	18d3      	adds	r3, r2, r3
   2c958:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c95a:	8912      	ldrh	r2, [r2, #8]
   2c95c:	0912      	lsrs	r2, r2, #4
   2c95e:	b292      	uxth	r2, r2
   2c960:	189b      	adds	r3, r3, r2
   2c962:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2c964:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2c966:	69bb      	ldr	r3, [r7, #24]
   2c968:	429a      	cmp	r2, r3
   2c96a:	d201      	bcs.n	2c970 <chk_mounted+0x340>
   2c96c:	230d      	movs	r3, #13
   2c96e:	e133      	b.n	2cbd8 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2c970:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2c972:	69bb      	ldr	r3, [r7, #24]
   2c974:	1ad2      	subs	r2, r2, r3
   2c976:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c978:	789b      	ldrb	r3, [r3, #2]
   2c97a:	0019      	movs	r1, r3
   2c97c:	4b08      	ldr	r3, [pc, #32]	; (2c9a0 <chk_mounted+0x370>)
   2c97e:	0010      	movs	r0, r2
   2c980:	4798      	blx	r3
   2c982:	0003      	movs	r3, r0
   2c984:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2c986:	697b      	ldr	r3, [r7, #20]
   2c988:	2b00      	cmp	r3, #0
   2c98a:	d10b      	bne.n	2c9a4 <chk_mounted+0x374>
   2c98c:	230d      	movs	r3, #13
   2c98e:	e123      	b.n	2cbd8 <chk_mounted+0x5a8>
   2c990:	20003e50 	.word	0x20003e50
   2c994:	0002a78d 	.word	0x0002a78d
   2c998:	0002a709 	.word	0x0002a709
   2c99c:	0002c55d 	.word	0x0002c55d
   2c9a0:	00031d45 	.word	0x00031d45
	fmt = FS_FAT12;
   2c9a4:	2347      	movs	r3, #71	; 0x47
   2c9a6:	18fb      	adds	r3, r7, r3
   2c9a8:	2201      	movs	r2, #1
   2c9aa:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2c9ac:	697b      	ldr	r3, [r7, #20]
   2c9ae:	4a8c      	ldr	r2, [pc, #560]	; (2cbe0 <chk_mounted+0x5b0>)
   2c9b0:	4293      	cmp	r3, r2
   2c9b2:	d903      	bls.n	2c9bc <chk_mounted+0x38c>
   2c9b4:	2347      	movs	r3, #71	; 0x47
   2c9b6:	18fb      	adds	r3, r7, r3
   2c9b8:	2202      	movs	r2, #2
   2c9ba:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2c9bc:	697b      	ldr	r3, [r7, #20]
   2c9be:	4a89      	ldr	r2, [pc, #548]	; (2cbe4 <chk_mounted+0x5b4>)
   2c9c0:	4293      	cmp	r3, r2
   2c9c2:	d903      	bls.n	2c9cc <chk_mounted+0x39c>
   2c9c4:	2347      	movs	r3, #71	; 0x47
   2c9c6:	18fb      	adds	r3, r7, r3
   2c9c8:	2203      	movs	r2, #3
   2c9ca:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2c9cc:	697b      	ldr	r3, [r7, #20]
   2c9ce:	1c9a      	adds	r2, r3, #2
   2c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9d2:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2c9d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2c9d6:	69bb      	ldr	r3, [r7, #24]
   2c9d8:	18d2      	adds	r2, r2, r3
   2c9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9dc:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2c9de:	231c      	movs	r3, #28
   2c9e0:	18fb      	adds	r3, r7, r3
   2c9e2:	881a      	ldrh	r2, [r3, #0]
   2c9e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c9e6:	18d2      	adds	r2, r2, r3
   2c9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9ea:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2c9ec:	2347      	movs	r3, #71	; 0x47
   2c9ee:	18fb      	adds	r3, r7, r3
   2c9f0:	781b      	ldrb	r3, [r3, #0]
   2c9f2:	2b03      	cmp	r3, #3
   2c9f4:	d11e      	bne.n	2ca34 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2c9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c9f8:	891b      	ldrh	r3, [r3, #8]
   2c9fa:	2b00      	cmp	r3, #0
   2c9fc:	d001      	beq.n	2ca02 <chk_mounted+0x3d2>
   2c9fe:	230d      	movs	r3, #13
   2ca00:	e0ea      	b.n	2cbd8 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2ca02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca04:	225f      	movs	r2, #95	; 0x5f
   2ca06:	5c9b      	ldrb	r3, [r3, r2]
   2ca08:	061a      	lsls	r2, r3, #24
   2ca0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca0c:	215e      	movs	r1, #94	; 0x5e
   2ca0e:	5c5b      	ldrb	r3, [r3, r1]
   2ca10:	041b      	lsls	r3, r3, #16
   2ca12:	4313      	orrs	r3, r2
   2ca14:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ca16:	215d      	movs	r1, #93	; 0x5d
   2ca18:	5c52      	ldrb	r2, [r2, r1]
   2ca1a:	0212      	lsls	r2, r2, #8
   2ca1c:	4313      	orrs	r3, r2
   2ca1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ca20:	215c      	movs	r1, #92	; 0x5c
   2ca22:	5c52      	ldrb	r2, [r2, r1]
   2ca24:	431a      	orrs	r2, r3
   2ca26:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca28:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2ca2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca2c:	699b      	ldr	r3, [r3, #24]
   2ca2e:	009b      	lsls	r3, r3, #2
   2ca30:	633b      	str	r3, [r7, #48]	; 0x30
   2ca32:	e020      	b.n	2ca76 <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2ca34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca36:	891b      	ldrh	r3, [r3, #8]
   2ca38:	2b00      	cmp	r3, #0
   2ca3a:	d101      	bne.n	2ca40 <chk_mounted+0x410>
   2ca3c:	230d      	movs	r3, #13
   2ca3e:	e0cb      	b.n	2cbd8 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2ca40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca42:	6a1a      	ldr	r2, [r3, #32]
   2ca44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2ca46:	18d2      	adds	r2, r2, r3
   2ca48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca4a:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2ca4c:	2347      	movs	r3, #71	; 0x47
   2ca4e:	18fb      	adds	r3, r7, r3
   2ca50:	781b      	ldrb	r3, [r3, #0]
   2ca52:	2b02      	cmp	r3, #2
   2ca54:	d103      	bne.n	2ca5e <chk_mounted+0x42e>
   2ca56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca58:	699b      	ldr	r3, [r3, #24]
   2ca5a:	005b      	lsls	r3, r3, #1
   2ca5c:	e00a      	b.n	2ca74 <chk_mounted+0x444>
   2ca5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca60:	699a      	ldr	r2, [r3, #24]
   2ca62:	0013      	movs	r3, r2
   2ca64:	005b      	lsls	r3, r3, #1
   2ca66:	189b      	adds	r3, r3, r2
   2ca68:	085a      	lsrs	r2, r3, #1
   2ca6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca6c:	699b      	ldr	r3, [r3, #24]
   2ca6e:	2101      	movs	r1, #1
   2ca70:	400b      	ands	r3, r1
   2ca72:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2ca74:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2ca76:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca78:	69da      	ldr	r2, [r3, #28]
   2ca7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ca7c:	495a      	ldr	r1, [pc, #360]	; (2cbe8 <chk_mounted+0x5b8>)
   2ca7e:	468c      	mov	ip, r1
   2ca80:	4463      	add	r3, ip
   2ca82:	0a5b      	lsrs	r3, r3, #9
   2ca84:	429a      	cmp	r2, r3
   2ca86:	d201      	bcs.n	2ca8c <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2ca88:	230d      	movs	r3, #13
   2ca8a:	e0a5      	b.n	2cbd8 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2ca8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca8e:	2201      	movs	r2, #1
   2ca90:	4252      	negs	r2, r2
   2ca92:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2ca94:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ca96:	2200      	movs	r2, #0
   2ca98:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2ca9a:	2347      	movs	r3, #71	; 0x47
   2ca9c:	18fb      	adds	r3, r7, r3
   2ca9e:	781b      	ldrb	r3, [r3, #0]
   2caa0:	2b03      	cmp	r3, #3
   2caa2:	d000      	beq.n	2caa6 <chk_mounted+0x476>
   2caa4:	e082      	b.n	2cbac <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2caa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2caa8:	2200      	movs	r2, #0
   2caaa:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2caac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2caae:	2261      	movs	r2, #97	; 0x61
   2cab0:	5c9b      	ldrb	r3, [r3, r2]
   2cab2:	021b      	lsls	r3, r3, #8
   2cab4:	b21a      	sxth	r2, r3
   2cab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cab8:	2160      	movs	r1, #96	; 0x60
   2caba:	5c5b      	ldrb	r3, [r3, r1]
   2cabc:	b21b      	sxth	r3, r3
   2cabe:	4313      	orrs	r3, r2
   2cac0:	b21b      	sxth	r3, r3
   2cac2:	b29b      	uxth	r3, r3
   2cac4:	001a      	movs	r2, r3
   2cac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2cac8:	18d2      	adds	r2, r2, r3
   2caca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cacc:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2cace:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cad0:	7858      	ldrb	r0, [r3, #1]
   2cad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cad4:	3330      	adds	r3, #48	; 0x30
   2cad6:	0019      	movs	r1, r3
   2cad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cada:	695a      	ldr	r2, [r3, #20]
   2cadc:	2301      	movs	r3, #1
   2cade:	4c43      	ldr	r4, [pc, #268]	; (2cbec <chk_mounted+0x5bc>)
   2cae0:	47a0      	blx	r4
   2cae2:	1e03      	subs	r3, r0, #0
   2cae4:	d162      	bne.n	2cbac <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2cae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cae8:	4a41      	ldr	r2, [pc, #260]	; (2cbf0 <chk_mounted+0x5c0>)
   2caea:	5c9b      	ldrb	r3, [r3, r2]
   2caec:	021b      	lsls	r3, r3, #8
   2caee:	b21a      	sxth	r2, r3
   2caf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2caf2:	4940      	ldr	r1, [pc, #256]	; (2cbf4 <chk_mounted+0x5c4>)
   2caf4:	5c5b      	ldrb	r3, [r3, r1]
   2caf6:	b21b      	sxth	r3, r3
   2caf8:	4313      	orrs	r3, r2
   2cafa:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2cafc:	4a3e      	ldr	r2, [pc, #248]	; (2cbf8 <chk_mounted+0x5c8>)
   2cafe:	4293      	cmp	r3, r2
   2cb00:	d154      	bne.n	2cbac <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2cb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb04:	2233      	movs	r2, #51	; 0x33
   2cb06:	5c9b      	ldrb	r3, [r3, r2]
   2cb08:	061a      	lsls	r2, r3, #24
   2cb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb0c:	2132      	movs	r1, #50	; 0x32
   2cb0e:	5c5b      	ldrb	r3, [r3, r1]
   2cb10:	041b      	lsls	r3, r3, #16
   2cb12:	4313      	orrs	r3, r2
   2cb14:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cb16:	2131      	movs	r1, #49	; 0x31
   2cb18:	5c52      	ldrb	r2, [r2, r1]
   2cb1a:	0212      	lsls	r2, r2, #8
   2cb1c:	4313      	orrs	r3, r2
   2cb1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cb20:	2130      	movs	r1, #48	; 0x30
   2cb22:	5c52      	ldrb	r2, [r2, r1]
   2cb24:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2cb26:	4a35      	ldr	r2, [pc, #212]	; (2cbfc <chk_mounted+0x5cc>)
   2cb28:	4293      	cmp	r3, r2
   2cb2a:	d13f      	bne.n	2cbac <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2cb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb2e:	4a34      	ldr	r2, [pc, #208]	; (2cc00 <chk_mounted+0x5d0>)
   2cb30:	5c9b      	ldrb	r3, [r3, r2]
   2cb32:	061a      	lsls	r2, r3, #24
   2cb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb36:	4933      	ldr	r1, [pc, #204]	; (2cc04 <chk_mounted+0x5d4>)
   2cb38:	5c5b      	ldrb	r3, [r3, r1]
   2cb3a:	041b      	lsls	r3, r3, #16
   2cb3c:	4313      	orrs	r3, r2
   2cb3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cb40:	4931      	ldr	r1, [pc, #196]	; (2cc08 <chk_mounted+0x5d8>)
   2cb42:	5c52      	ldrb	r2, [r2, r1]
   2cb44:	0212      	lsls	r2, r2, #8
   2cb46:	4313      	orrs	r3, r2
   2cb48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2cb4a:	2285      	movs	r2, #133	; 0x85
   2cb4c:	0092      	lsls	r2, r2, #2
   2cb4e:	5c8a      	ldrb	r2, [r1, r2]
   2cb50:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2cb52:	4a2e      	ldr	r2, [pc, #184]	; (2cc0c <chk_mounted+0x5dc>)
   2cb54:	4293      	cmp	r3, r2
   2cb56:	d129      	bne.n	2cbac <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2cb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb5a:	4a2d      	ldr	r2, [pc, #180]	; (2cc10 <chk_mounted+0x5e0>)
   2cb5c:	5c9b      	ldrb	r3, [r3, r2]
   2cb5e:	061a      	lsls	r2, r3, #24
   2cb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb62:	492c      	ldr	r1, [pc, #176]	; (2cc14 <chk_mounted+0x5e4>)
   2cb64:	5c5b      	ldrb	r3, [r3, r1]
   2cb66:	041b      	lsls	r3, r3, #16
   2cb68:	4313      	orrs	r3, r2
   2cb6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cb6c:	492a      	ldr	r1, [pc, #168]	; (2cc18 <chk_mounted+0x5e8>)
   2cb6e:	5c52      	ldrb	r2, [r2, r1]
   2cb70:	0212      	lsls	r2, r2, #8
   2cb72:	4313      	orrs	r3, r2
   2cb74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2cb76:	2287      	movs	r2, #135	; 0x87
   2cb78:	0092      	lsls	r2, r2, #2
   2cb7a:	5c8a      	ldrb	r2, [r1, r2]
   2cb7c:	431a      	orrs	r2, r3
   2cb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb80:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2cb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb84:	4a25      	ldr	r2, [pc, #148]	; (2cc1c <chk_mounted+0x5ec>)
   2cb86:	5c9b      	ldrb	r3, [r3, r2]
   2cb88:	061a      	lsls	r2, r3, #24
   2cb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cb8c:	4924      	ldr	r1, [pc, #144]	; (2cc20 <chk_mounted+0x5f0>)
   2cb8e:	5c5b      	ldrb	r3, [r3, r1]
   2cb90:	041b      	lsls	r3, r3, #16
   2cb92:	4313      	orrs	r3, r2
   2cb94:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cb96:	4923      	ldr	r1, [pc, #140]	; (2cc24 <chk_mounted+0x5f4>)
   2cb98:	5c52      	ldrb	r2, [r2, r1]
   2cb9a:	0212      	lsls	r2, r2, #8
   2cb9c:	4313      	orrs	r3, r2
   2cb9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2cba0:	2286      	movs	r2, #134	; 0x86
   2cba2:	0092      	lsls	r2, r2, #2
   2cba4:	5c8a      	ldrb	r2, [r1, r2]
   2cba6:	431a      	orrs	r2, r3
   2cba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cbaa:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2cbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cbae:	2247      	movs	r2, #71	; 0x47
   2cbb0:	18ba      	adds	r2, r7, r2
   2cbb2:	7812      	ldrb	r2, [r2, #0]
   2cbb4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2cbb6:	4b1c      	ldr	r3, [pc, #112]	; (2cc28 <chk_mounted+0x5f8>)
   2cbb8:	881b      	ldrh	r3, [r3, #0]
   2cbba:	3301      	adds	r3, #1
   2cbbc:	b29a      	uxth	r2, r3
   2cbbe:	4b1a      	ldr	r3, [pc, #104]	; (2cc28 <chk_mounted+0x5f8>)
   2cbc0:	801a      	strh	r2, [r3, #0]
   2cbc2:	4b19      	ldr	r3, [pc, #100]	; (2cc28 <chk_mounted+0x5f8>)
   2cbc4:	881a      	ldrh	r2, [r3, #0]
   2cbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cbc8:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2cbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cbcc:	2200      	movs	r2, #0
   2cbce:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2cbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cbd2:	2200      	movs	r2, #0
   2cbd4:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2cbd6:	2300      	movs	r3, #0
}
   2cbd8:	0018      	movs	r0, r3
   2cbda:	46bd      	mov	sp, r7
   2cbdc:	b013      	add	sp, #76	; 0x4c
   2cbde:	bd90      	pop	{r4, r7, pc}
   2cbe0:	00000ff5 	.word	0x00000ff5
   2cbe4:	0000fff5 	.word	0x0000fff5
   2cbe8:	000001ff 	.word	0x000001ff
   2cbec:	0002a7c5 	.word	0x0002a7c5
   2cbf0:	0000022f 	.word	0x0000022f
   2cbf4:	0000022e 	.word	0x0000022e
   2cbf8:	ffffaa55 	.word	0xffffaa55
   2cbfc:	41615252 	.word	0x41615252
   2cc00:	00000217 	.word	0x00000217
   2cc04:	00000216 	.word	0x00000216
   2cc08:	00000215 	.word	0x00000215
   2cc0c:	61417272 	.word	0x61417272
   2cc10:	0000021f 	.word	0x0000021f
   2cc14:	0000021e 	.word	0x0000021e
   2cc18:	0000021d 	.word	0x0000021d
   2cc1c:	0000021b 	.word	0x0000021b
   2cc20:	0000021a 	.word	0x0000021a
   2cc24:	00000219 	.word	0x00000219
   2cc28:	20003e70 	.word	0x20003e70

0002cc2c <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2cc2c:	b580      	push	{r7, lr}
   2cc2e:	b082      	sub	sp, #8
   2cc30:	af00      	add	r7, sp, #0
   2cc32:	6078      	str	r0, [r7, #4]
   2cc34:	000a      	movs	r2, r1
   2cc36:	1cbb      	adds	r3, r7, #2
   2cc38:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2cc3a:	687b      	ldr	r3, [r7, #4]
   2cc3c:	2b00      	cmp	r3, #0
   2cc3e:	d009      	beq.n	2cc54 <validate+0x28>
   2cc40:	687b      	ldr	r3, [r7, #4]
   2cc42:	781b      	ldrb	r3, [r3, #0]
   2cc44:	2b00      	cmp	r3, #0
   2cc46:	d005      	beq.n	2cc54 <validate+0x28>
   2cc48:	687b      	ldr	r3, [r7, #4]
   2cc4a:	88db      	ldrh	r3, [r3, #6]
   2cc4c:	1cba      	adds	r2, r7, #2
   2cc4e:	8812      	ldrh	r2, [r2, #0]
   2cc50:	429a      	cmp	r2, r3
   2cc52:	d001      	beq.n	2cc58 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2cc54:	2309      	movs	r3, #9
   2cc56:	e00c      	b.n	2cc72 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2cc58:	687b      	ldr	r3, [r7, #4]
   2cc5a:	785b      	ldrb	r3, [r3, #1]
   2cc5c:	0018      	movs	r0, r3
   2cc5e:	4b07      	ldr	r3, [pc, #28]	; (2cc7c <validate+0x50>)
   2cc60:	4798      	blx	r3
   2cc62:	0003      	movs	r3, r0
   2cc64:	001a      	movs	r2, r3
   2cc66:	2301      	movs	r3, #1
   2cc68:	4013      	ands	r3, r2
   2cc6a:	d001      	beq.n	2cc70 <validate+0x44>
		return FR_NOT_READY;
   2cc6c:	2303      	movs	r3, #3
   2cc6e:	e000      	b.n	2cc72 <validate+0x46>

	return FR_OK;
   2cc70:	2300      	movs	r3, #0
}
   2cc72:	0018      	movs	r0, r3
   2cc74:	46bd      	mov	sp, r7
   2cc76:	b002      	add	sp, #8
   2cc78:	bd80      	pop	{r7, pc}
   2cc7a:	46c0      	nop			; (mov r8, r8)
   2cc7c:	0002a78d 	.word	0x0002a78d

0002cc80 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2cc80:	b580      	push	{r7, lr}
   2cc82:	b084      	sub	sp, #16
   2cc84:	af00      	add	r7, sp, #0
   2cc86:	0002      	movs	r2, r0
   2cc88:	6039      	str	r1, [r7, #0]
   2cc8a:	1dfb      	adds	r3, r7, #7
   2cc8c:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2cc8e:	1dfb      	adds	r3, r7, #7
   2cc90:	781b      	ldrb	r3, [r3, #0]
   2cc92:	2b07      	cmp	r3, #7
   2cc94:	d901      	bls.n	2cc9a <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2cc96:	230b      	movs	r3, #11
   2cc98:	e018      	b.n	2cccc <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2cc9a:	1dfb      	adds	r3, r7, #7
   2cc9c:	781a      	ldrb	r2, [r3, #0]
   2cc9e:	4b0d      	ldr	r3, [pc, #52]	; (2ccd4 <f_mount+0x54>)
   2cca0:	0092      	lsls	r2, r2, #2
   2cca2:	58d3      	ldr	r3, [r2, r3]
   2cca4:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2cca6:	68fb      	ldr	r3, [r7, #12]
   2cca8:	2b00      	cmp	r3, #0
   2ccaa:	d002      	beq.n	2ccb2 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2ccac:	68fb      	ldr	r3, [r7, #12]
   2ccae:	2200      	movs	r2, #0
   2ccb0:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2ccb2:	683b      	ldr	r3, [r7, #0]
   2ccb4:	2b00      	cmp	r3, #0
   2ccb6:	d002      	beq.n	2ccbe <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2ccb8:	683b      	ldr	r3, [r7, #0]
   2ccba:	2200      	movs	r2, #0
   2ccbc:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2ccbe:	1dfb      	adds	r3, r7, #7
   2ccc0:	781a      	ldrb	r2, [r3, #0]
   2ccc2:	4b04      	ldr	r3, [pc, #16]	; (2ccd4 <f_mount+0x54>)
   2ccc4:	0092      	lsls	r2, r2, #2
   2ccc6:	6839      	ldr	r1, [r7, #0]
   2ccc8:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2ccca:	2300      	movs	r3, #0
}
   2cccc:	0018      	movs	r0, r3
   2ccce:	46bd      	mov	sp, r7
   2ccd0:	b004      	add	sp, #16
   2ccd2:	bd80      	pop	{r7, pc}
   2ccd4:	20003e50 	.word	0x20003e50

0002ccd8 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2ccd8:	b590      	push	{r4, r7, lr}
   2ccda:	4ce5      	ldr	r4, [pc, #916]	; (2d070 <f_open+0x398>)
   2ccdc:	44a5      	add	sp, r4
   2ccde:	af00      	add	r7, sp, #0
   2cce0:	60f8      	str	r0, [r7, #12]
   2cce2:	60b9      	str	r1, [r7, #8]
   2cce4:	4be3      	ldr	r3, [pc, #908]	; (2d074 <f_open+0x39c>)
   2cce6:	2194      	movs	r1, #148	; 0x94
   2cce8:	0089      	lsls	r1, r1, #2
   2ccea:	468c      	mov	ip, r1
   2ccec:	44bc      	add	ip, r7
   2ccee:	4463      	add	r3, ip
   2ccf0:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2ccf2:	68fb      	ldr	r3, [r7, #12]
   2ccf4:	2200      	movs	r2, #0
   2ccf6:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2ccf8:	4bde      	ldr	r3, [pc, #888]	; (2d074 <f_open+0x39c>)
   2ccfa:	2294      	movs	r2, #148	; 0x94
   2ccfc:	0092      	lsls	r2, r2, #2
   2ccfe:	4694      	mov	ip, r2
   2cd00:	44bc      	add	ip, r7
   2cd02:	4463      	add	r3, ip
   2cd04:	4adb      	ldr	r2, [pc, #876]	; (2d074 <f_open+0x39c>)
   2cd06:	2194      	movs	r1, #148	; 0x94
   2cd08:	0089      	lsls	r1, r1, #2
   2cd0a:	468c      	mov	ip, r1
   2cd0c:	44bc      	add	ip, r7
   2cd0e:	4462      	add	r2, ip
   2cd10:	7812      	ldrb	r2, [r2, #0]
   2cd12:	211f      	movs	r1, #31
   2cd14:	400a      	ands	r2, r1
   2cd16:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2cd18:	4bd6      	ldr	r3, [pc, #856]	; (2d074 <f_open+0x39c>)
   2cd1a:	2294      	movs	r2, #148	; 0x94
   2cd1c:	0092      	lsls	r2, r2, #2
   2cd1e:	4694      	mov	ip, r2
   2cd20:	44bc      	add	ip, r7
   2cd22:	4463      	add	r3, ip
   2cd24:	781b      	ldrb	r3, [r3, #0]
   2cd26:	2201      	movs	r2, #1
   2cd28:	4393      	bics	r3, r2
   2cd2a:	b2da      	uxtb	r2, r3
   2cd2c:	4bd2      	ldr	r3, [pc, #840]	; (2d078 <f_open+0x3a0>)
   2cd2e:	18fc      	adds	r4, r7, r3
   2cd30:	2387      	movs	r3, #135	; 0x87
   2cd32:	009b      	lsls	r3, r3, #2
   2cd34:	18f9      	adds	r1, r7, r3
   2cd36:	2308      	movs	r3, #8
   2cd38:	18fb      	adds	r3, r7, r3
   2cd3a:	0018      	movs	r0, r3
   2cd3c:	4bcf      	ldr	r3, [pc, #828]	; (2d07c <f_open+0x3a4>)
   2cd3e:	4798      	blx	r3
   2cd40:	0003      	movs	r3, r0
   2cd42:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2cd44:	2387      	movs	r3, #135	; 0x87
   2cd46:	009b      	lsls	r3, r3, #2
   2cd48:	18fb      	adds	r3, r7, r3
   2cd4a:	2284      	movs	r2, #132	; 0x84
   2cd4c:	0092      	lsls	r2, r2, #2
   2cd4e:	18ba      	adds	r2, r7, r2
   2cd50:	619a      	str	r2, [r3, #24]
   2cd52:	2387      	movs	r3, #135	; 0x87
   2cd54:	009b      	lsls	r3, r3, #2
   2cd56:	18fb      	adds	r3, r7, r3
   2cd58:	2210      	movs	r2, #16
   2cd5a:	18ba      	adds	r2, r7, r2
   2cd5c:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2cd5e:	4bc6      	ldr	r3, [pc, #792]	; (2d078 <f_open+0x3a0>)
   2cd60:	18fb      	adds	r3, r7, r3
   2cd62:	781b      	ldrb	r3, [r3, #0]
   2cd64:	2b00      	cmp	r3, #0
   2cd66:	d10b      	bne.n	2cd80 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2cd68:	68ba      	ldr	r2, [r7, #8]
   2cd6a:	4bc3      	ldr	r3, [pc, #780]	; (2d078 <f_open+0x3a0>)
   2cd6c:	18fc      	adds	r4, r7, r3
   2cd6e:	2387      	movs	r3, #135	; 0x87
   2cd70:	009b      	lsls	r3, r3, #2
   2cd72:	18fb      	adds	r3, r7, r3
   2cd74:	0011      	movs	r1, r2
   2cd76:	0018      	movs	r0, r3
   2cd78:	4bc1      	ldr	r3, [pc, #772]	; (2d080 <f_open+0x3a8>)
   2cd7a:	4798      	blx	r3
   2cd7c:	0003      	movs	r3, r0
   2cd7e:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2cd80:	2387      	movs	r3, #135	; 0x87
   2cd82:	009b      	lsls	r3, r3, #2
   2cd84:	18fb      	adds	r3, r7, r3
   2cd86:	695b      	ldr	r3, [r3, #20]
   2cd88:	2292      	movs	r2, #146	; 0x92
   2cd8a:	0092      	lsls	r2, r2, #2
   2cd8c:	18ba      	adds	r2, r7, r2
   2cd8e:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2cd90:	4bb9      	ldr	r3, [pc, #740]	; (2d078 <f_open+0x3a0>)
   2cd92:	18fb      	adds	r3, r7, r3
   2cd94:	781b      	ldrb	r3, [r3, #0]
   2cd96:	2b00      	cmp	r3, #0
   2cd98:	d109      	bne.n	2cdae <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2cd9a:	2392      	movs	r3, #146	; 0x92
   2cd9c:	009b      	lsls	r3, r3, #2
   2cd9e:	18fb      	adds	r3, r7, r3
   2cda0:	681b      	ldr	r3, [r3, #0]
   2cda2:	2b00      	cmp	r3, #0
   2cda4:	d103      	bne.n	2cdae <f_open+0xd6>
			res = FR_INVALID_NAME;
   2cda6:	4bb4      	ldr	r3, [pc, #720]	; (2d078 <f_open+0x3a0>)
   2cda8:	18fb      	adds	r3, r7, r3
   2cdaa:	2206      	movs	r2, #6
   2cdac:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2cdae:	4bb1      	ldr	r3, [pc, #708]	; (2d074 <f_open+0x39c>)
   2cdb0:	2294      	movs	r2, #148	; 0x94
   2cdb2:	0092      	lsls	r2, r2, #2
   2cdb4:	4694      	mov	ip, r2
   2cdb6:	44bc      	add	ip, r7
   2cdb8:	4463      	add	r3, ip
   2cdba:	781b      	ldrb	r3, [r3, #0]
   2cdbc:	221c      	movs	r2, #28
   2cdbe:	4013      	ands	r3, r2
   2cdc0:	d100      	bne.n	2cdc4 <f_open+0xec>
   2cdc2:	e141      	b.n	2d048 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2cdc4:	4bac      	ldr	r3, [pc, #688]	; (2d078 <f_open+0x3a0>)
   2cdc6:	18fb      	adds	r3, r7, r3
   2cdc8:	781b      	ldrb	r3, [r3, #0]
   2cdca:	2b00      	cmp	r3, #0
   2cdcc:	d027      	beq.n	2ce1e <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2cdce:	4baa      	ldr	r3, [pc, #680]	; (2d078 <f_open+0x3a0>)
   2cdd0:	18fb      	adds	r3, r7, r3
   2cdd2:	781b      	ldrb	r3, [r3, #0]
   2cdd4:	2b04      	cmp	r3, #4
   2cdd6:	d109      	bne.n	2cdec <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2cdd8:	4ba7      	ldr	r3, [pc, #668]	; (2d078 <f_open+0x3a0>)
   2cdda:	18fc      	adds	r4, r7, r3
   2cddc:	2387      	movs	r3, #135	; 0x87
   2cdde:	009b      	lsls	r3, r3, #2
   2cde0:	18fb      	adds	r3, r7, r3
   2cde2:	0018      	movs	r0, r3
   2cde4:	4ba7      	ldr	r3, [pc, #668]	; (2d084 <f_open+0x3ac>)
   2cde6:	4798      	blx	r3
   2cde8:	0003      	movs	r3, r0
   2cdea:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2cdec:	4ba1      	ldr	r3, [pc, #644]	; (2d074 <f_open+0x39c>)
   2cdee:	2294      	movs	r2, #148	; 0x94
   2cdf0:	0092      	lsls	r2, r2, #2
   2cdf2:	4694      	mov	ip, r2
   2cdf4:	44bc      	add	ip, r7
   2cdf6:	4463      	add	r3, ip
   2cdf8:	4a9e      	ldr	r2, [pc, #632]	; (2d074 <f_open+0x39c>)
   2cdfa:	2194      	movs	r1, #148	; 0x94
   2cdfc:	0089      	lsls	r1, r1, #2
   2cdfe:	468c      	mov	ip, r1
   2ce00:	44bc      	add	ip, r7
   2ce02:	4462      	add	r2, ip
   2ce04:	7812      	ldrb	r2, [r2, #0]
   2ce06:	2108      	movs	r1, #8
   2ce08:	430a      	orrs	r2, r1
   2ce0a:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2ce0c:	2387      	movs	r3, #135	; 0x87
   2ce0e:	009b      	lsls	r3, r3, #2
   2ce10:	18fb      	adds	r3, r7, r3
   2ce12:	695b      	ldr	r3, [r3, #20]
   2ce14:	2292      	movs	r2, #146	; 0x92
   2ce16:	0092      	lsls	r2, r2, #2
   2ce18:	18ba      	adds	r2, r7, r2
   2ce1a:	6013      	str	r3, [r2, #0]
   2ce1c:	e01c      	b.n	2ce58 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2ce1e:	2392      	movs	r3, #146	; 0x92
   2ce20:	009b      	lsls	r3, r3, #2
   2ce22:	18fb      	adds	r3, r7, r3
   2ce24:	681b      	ldr	r3, [r3, #0]
   2ce26:	330b      	adds	r3, #11
   2ce28:	781b      	ldrb	r3, [r3, #0]
   2ce2a:	001a      	movs	r2, r3
   2ce2c:	2311      	movs	r3, #17
   2ce2e:	4013      	ands	r3, r2
   2ce30:	d004      	beq.n	2ce3c <f_open+0x164>
				res = FR_DENIED;
   2ce32:	4b91      	ldr	r3, [pc, #580]	; (2d078 <f_open+0x3a0>)
   2ce34:	18fb      	adds	r3, r7, r3
   2ce36:	2207      	movs	r2, #7
   2ce38:	701a      	strb	r2, [r3, #0]
   2ce3a:	e00d      	b.n	2ce58 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2ce3c:	4b8d      	ldr	r3, [pc, #564]	; (2d074 <f_open+0x39c>)
   2ce3e:	2294      	movs	r2, #148	; 0x94
   2ce40:	0092      	lsls	r2, r2, #2
   2ce42:	4694      	mov	ip, r2
   2ce44:	44bc      	add	ip, r7
   2ce46:	4463      	add	r3, ip
   2ce48:	781b      	ldrb	r3, [r3, #0]
   2ce4a:	2204      	movs	r2, #4
   2ce4c:	4013      	ands	r3, r2
   2ce4e:	d003      	beq.n	2ce58 <f_open+0x180>
					res = FR_EXIST;
   2ce50:	4b89      	ldr	r3, [pc, #548]	; (2d078 <f_open+0x3a0>)
   2ce52:	18fb      	adds	r3, r7, r3
   2ce54:	2208      	movs	r2, #8
   2ce56:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2ce58:	4b87      	ldr	r3, [pc, #540]	; (2d078 <f_open+0x3a0>)
   2ce5a:	18fb      	adds	r3, r7, r3
   2ce5c:	781b      	ldrb	r3, [r3, #0]
   2ce5e:	2b00      	cmp	r3, #0
   2ce60:	d000      	beq.n	2ce64 <f_open+0x18c>
   2ce62:	e12f      	b.n	2d0c4 <f_open+0x3ec>
   2ce64:	4b83      	ldr	r3, [pc, #524]	; (2d074 <f_open+0x39c>)
   2ce66:	2294      	movs	r2, #148	; 0x94
   2ce68:	0092      	lsls	r2, r2, #2
   2ce6a:	4694      	mov	ip, r2
   2ce6c:	44bc      	add	ip, r7
   2ce6e:	4463      	add	r3, ip
   2ce70:	781b      	ldrb	r3, [r3, #0]
   2ce72:	2208      	movs	r2, #8
   2ce74:	4013      	ands	r3, r2
   2ce76:	d100      	bne.n	2ce7a <f_open+0x1a2>
   2ce78:	e124      	b.n	2d0c4 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2ce7a:	4b83      	ldr	r3, [pc, #524]	; (2d088 <f_open+0x3b0>)
   2ce7c:	4798      	blx	r3
   2ce7e:	0003      	movs	r3, r0
   2ce80:	2291      	movs	r2, #145	; 0x91
   2ce82:	0092      	lsls	r2, r2, #2
   2ce84:	18ba      	adds	r2, r7, r2
   2ce86:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2ce88:	2392      	movs	r3, #146	; 0x92
   2ce8a:	009b      	lsls	r3, r3, #2
   2ce8c:	18fb      	adds	r3, r7, r3
   2ce8e:	681b      	ldr	r3, [r3, #0]
   2ce90:	330e      	adds	r3, #14
   2ce92:	2291      	movs	r2, #145	; 0x91
   2ce94:	0092      	lsls	r2, r2, #2
   2ce96:	18ba      	adds	r2, r7, r2
   2ce98:	6812      	ldr	r2, [r2, #0]
   2ce9a:	b2d2      	uxtb	r2, r2
   2ce9c:	701a      	strb	r2, [r3, #0]
   2ce9e:	2392      	movs	r3, #146	; 0x92
   2cea0:	009b      	lsls	r3, r3, #2
   2cea2:	18fb      	adds	r3, r7, r3
   2cea4:	681b      	ldr	r3, [r3, #0]
   2cea6:	330f      	adds	r3, #15
   2cea8:	2291      	movs	r2, #145	; 0x91
   2ceaa:	0092      	lsls	r2, r2, #2
   2ceac:	18ba      	adds	r2, r7, r2
   2ceae:	6812      	ldr	r2, [r2, #0]
   2ceb0:	b292      	uxth	r2, r2
   2ceb2:	0a12      	lsrs	r2, r2, #8
   2ceb4:	b292      	uxth	r2, r2
   2ceb6:	b2d2      	uxtb	r2, r2
   2ceb8:	701a      	strb	r2, [r3, #0]
   2ceba:	2392      	movs	r3, #146	; 0x92
   2cebc:	009b      	lsls	r3, r3, #2
   2cebe:	18fb      	adds	r3, r7, r3
   2cec0:	681b      	ldr	r3, [r3, #0]
   2cec2:	3310      	adds	r3, #16
   2cec4:	2291      	movs	r2, #145	; 0x91
   2cec6:	0092      	lsls	r2, r2, #2
   2cec8:	18ba      	adds	r2, r7, r2
   2ceca:	6812      	ldr	r2, [r2, #0]
   2cecc:	0c12      	lsrs	r2, r2, #16
   2cece:	b2d2      	uxtb	r2, r2
   2ced0:	701a      	strb	r2, [r3, #0]
   2ced2:	2392      	movs	r3, #146	; 0x92
   2ced4:	009b      	lsls	r3, r3, #2
   2ced6:	18fb      	adds	r3, r7, r3
   2ced8:	681b      	ldr	r3, [r3, #0]
   2ceda:	3311      	adds	r3, #17
   2cedc:	2291      	movs	r2, #145	; 0x91
   2cede:	0092      	lsls	r2, r2, #2
   2cee0:	18ba      	adds	r2, r7, r2
   2cee2:	6812      	ldr	r2, [r2, #0]
   2cee4:	0e12      	lsrs	r2, r2, #24
   2cee6:	b2d2      	uxtb	r2, r2
   2cee8:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2ceea:	2392      	movs	r3, #146	; 0x92
   2ceec:	009b      	lsls	r3, r3, #2
   2ceee:	18fb      	adds	r3, r7, r3
   2cef0:	681b      	ldr	r3, [r3, #0]
   2cef2:	330b      	adds	r3, #11
   2cef4:	2200      	movs	r2, #0
   2cef6:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2cef8:	2392      	movs	r3, #146	; 0x92
   2cefa:	009b      	lsls	r3, r3, #2
   2cefc:	18fb      	adds	r3, r7, r3
   2cefe:	681b      	ldr	r3, [r3, #0]
   2cf00:	331c      	adds	r3, #28
   2cf02:	2200      	movs	r2, #0
   2cf04:	701a      	strb	r2, [r3, #0]
   2cf06:	2392      	movs	r3, #146	; 0x92
   2cf08:	009b      	lsls	r3, r3, #2
   2cf0a:	18fb      	adds	r3, r7, r3
   2cf0c:	681b      	ldr	r3, [r3, #0]
   2cf0e:	331d      	adds	r3, #29
   2cf10:	2200      	movs	r2, #0
   2cf12:	701a      	strb	r2, [r3, #0]
   2cf14:	2392      	movs	r3, #146	; 0x92
   2cf16:	009b      	lsls	r3, r3, #2
   2cf18:	18fb      	adds	r3, r7, r3
   2cf1a:	681b      	ldr	r3, [r3, #0]
   2cf1c:	331e      	adds	r3, #30
   2cf1e:	2200      	movs	r2, #0
   2cf20:	701a      	strb	r2, [r3, #0]
   2cf22:	2392      	movs	r3, #146	; 0x92
   2cf24:	009b      	lsls	r3, r3, #2
   2cf26:	18fb      	adds	r3, r7, r3
   2cf28:	681b      	ldr	r3, [r3, #0]
   2cf2a:	331f      	adds	r3, #31
   2cf2c:	2200      	movs	r2, #0
   2cf2e:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2cf30:	2392      	movs	r3, #146	; 0x92
   2cf32:	009b      	lsls	r3, r3, #2
   2cf34:	18fb      	adds	r3, r7, r3
   2cf36:	681b      	ldr	r3, [r3, #0]
   2cf38:	3315      	adds	r3, #21
   2cf3a:	781b      	ldrb	r3, [r3, #0]
   2cf3c:	021b      	lsls	r3, r3, #8
   2cf3e:	b21a      	sxth	r2, r3
   2cf40:	2392      	movs	r3, #146	; 0x92
   2cf42:	009b      	lsls	r3, r3, #2
   2cf44:	18fb      	adds	r3, r7, r3
   2cf46:	681b      	ldr	r3, [r3, #0]
   2cf48:	3314      	adds	r3, #20
   2cf4a:	781b      	ldrb	r3, [r3, #0]
   2cf4c:	b21b      	sxth	r3, r3
   2cf4e:	4313      	orrs	r3, r2
   2cf50:	b21b      	sxth	r3, r3
   2cf52:	b29b      	uxth	r3, r3
   2cf54:	041b      	lsls	r3, r3, #16
   2cf56:	2292      	movs	r2, #146	; 0x92
   2cf58:	0092      	lsls	r2, r2, #2
   2cf5a:	18ba      	adds	r2, r7, r2
   2cf5c:	6812      	ldr	r2, [r2, #0]
   2cf5e:	321b      	adds	r2, #27
   2cf60:	7812      	ldrb	r2, [r2, #0]
   2cf62:	0212      	lsls	r2, r2, #8
   2cf64:	b211      	sxth	r1, r2
   2cf66:	2292      	movs	r2, #146	; 0x92
   2cf68:	0092      	lsls	r2, r2, #2
   2cf6a:	18ba      	adds	r2, r7, r2
   2cf6c:	6812      	ldr	r2, [r2, #0]
   2cf6e:	321a      	adds	r2, #26
   2cf70:	7812      	ldrb	r2, [r2, #0]
   2cf72:	b212      	sxth	r2, r2
   2cf74:	430a      	orrs	r2, r1
   2cf76:	b212      	sxth	r2, r2
   2cf78:	b292      	uxth	r2, r2
   2cf7a:	4313      	orrs	r3, r2
   2cf7c:	2290      	movs	r2, #144	; 0x90
   2cf7e:	0092      	lsls	r2, r2, #2
   2cf80:	18ba      	adds	r2, r7, r2
   2cf82:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2cf84:	2392      	movs	r3, #146	; 0x92
   2cf86:	009b      	lsls	r3, r3, #2
   2cf88:	18fb      	adds	r3, r7, r3
   2cf8a:	681b      	ldr	r3, [r3, #0]
   2cf8c:	331a      	adds	r3, #26
   2cf8e:	2200      	movs	r2, #0
   2cf90:	701a      	strb	r2, [r3, #0]
   2cf92:	2392      	movs	r3, #146	; 0x92
   2cf94:	009b      	lsls	r3, r3, #2
   2cf96:	18fb      	adds	r3, r7, r3
   2cf98:	681b      	ldr	r3, [r3, #0]
   2cf9a:	331b      	adds	r3, #27
   2cf9c:	2200      	movs	r2, #0
   2cf9e:	701a      	strb	r2, [r3, #0]
   2cfa0:	2392      	movs	r3, #146	; 0x92
   2cfa2:	009b      	lsls	r3, r3, #2
   2cfa4:	18fb      	adds	r3, r7, r3
   2cfa6:	681b      	ldr	r3, [r3, #0]
   2cfa8:	3314      	adds	r3, #20
   2cfaa:	2200      	movs	r2, #0
   2cfac:	701a      	strb	r2, [r3, #0]
   2cfae:	2392      	movs	r3, #146	; 0x92
   2cfb0:	009b      	lsls	r3, r3, #2
   2cfb2:	18fb      	adds	r3, r7, r3
   2cfb4:	681b      	ldr	r3, [r3, #0]
   2cfb6:	3315      	adds	r3, #21
   2cfb8:	2200      	movs	r2, #0
   2cfba:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2cfbc:	2387      	movs	r3, #135	; 0x87
   2cfbe:	009b      	lsls	r3, r3, #2
   2cfc0:	18fb      	adds	r3, r7, r3
   2cfc2:	681b      	ldr	r3, [r3, #0]
   2cfc4:	2201      	movs	r2, #1
   2cfc6:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2cfc8:	2390      	movs	r3, #144	; 0x90
   2cfca:	009b      	lsls	r3, r3, #2
   2cfcc:	18fb      	adds	r3, r7, r3
   2cfce:	681b      	ldr	r3, [r3, #0]
   2cfd0:	2b00      	cmp	r3, #0
   2cfd2:	d100      	bne.n	2cfd6 <f_open+0x2fe>
   2cfd4:	e076      	b.n	2d0c4 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2cfd6:	2387      	movs	r3, #135	; 0x87
   2cfd8:	009b      	lsls	r3, r3, #2
   2cfda:	18fb      	adds	r3, r7, r3
   2cfdc:	681b      	ldr	r3, [r3, #0]
   2cfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2cfe0:	2291      	movs	r2, #145	; 0x91
   2cfe2:	0092      	lsls	r2, r2, #2
   2cfe4:	18ba      	adds	r2, r7, r2
   2cfe6:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2cfe8:	2387      	movs	r3, #135	; 0x87
   2cfea:	009b      	lsls	r3, r3, #2
   2cfec:	18fb      	adds	r3, r7, r3
   2cfee:	681b      	ldr	r3, [r3, #0]
   2cff0:	4a21      	ldr	r2, [pc, #132]	; (2d078 <f_open+0x3a0>)
   2cff2:	18bc      	adds	r4, r7, r2
   2cff4:	2290      	movs	r2, #144	; 0x90
   2cff6:	0092      	lsls	r2, r2, #2
   2cff8:	18ba      	adds	r2, r7, r2
   2cffa:	6812      	ldr	r2, [r2, #0]
   2cffc:	0011      	movs	r1, r2
   2cffe:	0018      	movs	r0, r3
   2d000:	4b22      	ldr	r3, [pc, #136]	; (2d08c <f_open+0x3b4>)
   2d002:	4798      	blx	r3
   2d004:	0003      	movs	r3, r0
   2d006:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2d008:	4b1b      	ldr	r3, [pc, #108]	; (2d078 <f_open+0x3a0>)
   2d00a:	18fb      	adds	r3, r7, r3
   2d00c:	781b      	ldrb	r3, [r3, #0]
   2d00e:	2b00      	cmp	r3, #0
   2d010:	d158      	bne.n	2d0c4 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2d012:	2387      	movs	r3, #135	; 0x87
   2d014:	009b      	lsls	r3, r3, #2
   2d016:	18fb      	adds	r3, r7, r3
   2d018:	681b      	ldr	r3, [r3, #0]
   2d01a:	2290      	movs	r2, #144	; 0x90
   2d01c:	0092      	lsls	r2, r2, #2
   2d01e:	18ba      	adds	r2, r7, r2
   2d020:	6812      	ldr	r2, [r2, #0]
   2d022:	3a01      	subs	r2, #1
   2d024:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2d026:	2387      	movs	r3, #135	; 0x87
   2d028:	009b      	lsls	r3, r3, #2
   2d02a:	18fb      	adds	r3, r7, r3
   2d02c:	681b      	ldr	r3, [r3, #0]
   2d02e:	4a12      	ldr	r2, [pc, #72]	; (2d078 <f_open+0x3a0>)
   2d030:	18bc      	adds	r4, r7, r2
   2d032:	2291      	movs	r2, #145	; 0x91
   2d034:	0092      	lsls	r2, r2, #2
   2d036:	18ba      	adds	r2, r7, r2
   2d038:	6812      	ldr	r2, [r2, #0]
   2d03a:	0011      	movs	r1, r2
   2d03c:	0018      	movs	r0, r3
   2d03e:	4b14      	ldr	r3, [pc, #80]	; (2d090 <f_open+0x3b8>)
   2d040:	4798      	blx	r3
   2d042:	0003      	movs	r3, r0
   2d044:	7023      	strb	r3, [r4, #0]
   2d046:	e03d      	b.n	2d0c4 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2d048:	4b0b      	ldr	r3, [pc, #44]	; (2d078 <f_open+0x3a0>)
   2d04a:	18fb      	adds	r3, r7, r3
   2d04c:	781b      	ldrb	r3, [r3, #0]
   2d04e:	2b00      	cmp	r3, #0
   2d050:	d138      	bne.n	2d0c4 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2d052:	2392      	movs	r3, #146	; 0x92
   2d054:	009b      	lsls	r3, r3, #2
   2d056:	18fb      	adds	r3, r7, r3
   2d058:	681b      	ldr	r3, [r3, #0]
   2d05a:	330b      	adds	r3, #11
   2d05c:	781b      	ldrb	r3, [r3, #0]
   2d05e:	001a      	movs	r2, r3
   2d060:	2310      	movs	r3, #16
   2d062:	4013      	ands	r3, r2
   2d064:	d016      	beq.n	2d094 <f_open+0x3bc>
				res = FR_NO_FILE;
   2d066:	4b04      	ldr	r3, [pc, #16]	; (2d078 <f_open+0x3a0>)
   2d068:	18fb      	adds	r3, r7, r3
   2d06a:	2204      	movs	r2, #4
   2d06c:	701a      	strb	r2, [r3, #0]
   2d06e:	e029      	b.n	2d0c4 <f_open+0x3ec>
   2d070:	fffffdac 	.word	0xfffffdac
   2d074:	fffffdb7 	.word	0xfffffdb7
   2d078:	0000024f 	.word	0x0000024f
   2d07c:	0002c631 	.word	0x0002c631
   2d080:	0002c425 	.word	0x0002c425
   2d084:	0002bc75 	.word	0x0002bc75
   2d088:	0002aa6d 	.word	0x0002aa6d
   2d08c:	0002b1f1 	.word	0x0002b1f1
   2d090:	0002abb1 	.word	0x0002abb1
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2d094:	4b5a      	ldr	r3, [pc, #360]	; (2d200 <f_open+0x528>)
   2d096:	2294      	movs	r2, #148	; 0x94
   2d098:	0092      	lsls	r2, r2, #2
   2d09a:	4694      	mov	ip, r2
   2d09c:	44bc      	add	ip, r7
   2d09e:	4463      	add	r3, ip
   2d0a0:	781b      	ldrb	r3, [r3, #0]
   2d0a2:	2202      	movs	r2, #2
   2d0a4:	4013      	ands	r3, r2
   2d0a6:	d00d      	beq.n	2d0c4 <f_open+0x3ec>
   2d0a8:	2392      	movs	r3, #146	; 0x92
   2d0aa:	009b      	lsls	r3, r3, #2
   2d0ac:	18fb      	adds	r3, r7, r3
   2d0ae:	681b      	ldr	r3, [r3, #0]
   2d0b0:	330b      	adds	r3, #11
   2d0b2:	781b      	ldrb	r3, [r3, #0]
   2d0b4:	001a      	movs	r2, r3
   2d0b6:	2301      	movs	r3, #1
   2d0b8:	4013      	ands	r3, r2
   2d0ba:	d003      	beq.n	2d0c4 <f_open+0x3ec>
					res = FR_DENIED;
   2d0bc:	4b51      	ldr	r3, [pc, #324]	; (2d204 <f_open+0x52c>)
   2d0be:	18fb      	adds	r3, r7, r3
   2d0c0:	2207      	movs	r2, #7
   2d0c2:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2d0c4:	4b4f      	ldr	r3, [pc, #316]	; (2d204 <f_open+0x52c>)
   2d0c6:	18fb      	adds	r3, r7, r3
   2d0c8:	781b      	ldrb	r3, [r3, #0]
   2d0ca:	2b00      	cmp	r3, #0
   2d0cc:	d126      	bne.n	2d11c <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2d0ce:	4b4c      	ldr	r3, [pc, #304]	; (2d200 <f_open+0x528>)
   2d0d0:	2294      	movs	r2, #148	; 0x94
   2d0d2:	0092      	lsls	r2, r2, #2
   2d0d4:	4694      	mov	ip, r2
   2d0d6:	44bc      	add	ip, r7
   2d0d8:	4463      	add	r3, ip
   2d0da:	781b      	ldrb	r3, [r3, #0]
   2d0dc:	2208      	movs	r2, #8
   2d0de:	4013      	ands	r3, r2
   2d0e0:	d00f      	beq.n	2d102 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2d0e2:	4b47      	ldr	r3, [pc, #284]	; (2d200 <f_open+0x528>)
   2d0e4:	2294      	movs	r2, #148	; 0x94
   2d0e6:	0092      	lsls	r2, r2, #2
   2d0e8:	4694      	mov	ip, r2
   2d0ea:	44bc      	add	ip, r7
   2d0ec:	4463      	add	r3, ip
   2d0ee:	4a44      	ldr	r2, [pc, #272]	; (2d200 <f_open+0x528>)
   2d0f0:	2194      	movs	r1, #148	; 0x94
   2d0f2:	0089      	lsls	r1, r1, #2
   2d0f4:	468c      	mov	ip, r1
   2d0f6:	44bc      	add	ip, r7
   2d0f8:	4462      	add	r2, ip
   2d0fa:	7812      	ldrb	r2, [r2, #0]
   2d0fc:	2120      	movs	r1, #32
   2d0fe:	430a      	orrs	r2, r1
   2d100:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2d102:	2387      	movs	r3, #135	; 0x87
   2d104:	009b      	lsls	r3, r3, #2
   2d106:	18fb      	adds	r3, r7, r3
   2d108:	681b      	ldr	r3, [r3, #0]
   2d10a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d10c:	68fb      	ldr	r3, [r7, #12]
   2d10e:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2d110:	68fb      	ldr	r3, [r7, #12]
   2d112:	2292      	movs	r2, #146	; 0x92
   2d114:	0092      	lsls	r2, r2, #2
   2d116:	18ba      	adds	r2, r7, r2
   2d118:	6812      	ldr	r2, [r2, #0]
   2d11a:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2d11c:	4b39      	ldr	r3, [pc, #228]	; (2d204 <f_open+0x52c>)
   2d11e:	18fb      	adds	r3, r7, r3
   2d120:	781b      	ldrb	r3, [r3, #0]
   2d122:	2b00      	cmp	r3, #0
   2d124:	d163      	bne.n	2d1ee <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2d126:	68fb      	ldr	r3, [r7, #12]
   2d128:	4a35      	ldr	r2, [pc, #212]	; (2d200 <f_open+0x528>)
   2d12a:	2194      	movs	r1, #148	; 0x94
   2d12c:	0089      	lsls	r1, r1, #2
   2d12e:	468c      	mov	ip, r1
   2d130:	44bc      	add	ip, r7
   2d132:	4462      	add	r2, ip
   2d134:	7812      	ldrb	r2, [r2, #0]
   2d136:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2d138:	2392      	movs	r3, #146	; 0x92
   2d13a:	009b      	lsls	r3, r3, #2
   2d13c:	18fb      	adds	r3, r7, r3
   2d13e:	681b      	ldr	r3, [r3, #0]
   2d140:	3315      	adds	r3, #21
   2d142:	781b      	ldrb	r3, [r3, #0]
   2d144:	021b      	lsls	r3, r3, #8
   2d146:	b21a      	sxth	r2, r3
   2d148:	2392      	movs	r3, #146	; 0x92
   2d14a:	009b      	lsls	r3, r3, #2
   2d14c:	18fb      	adds	r3, r7, r3
   2d14e:	681b      	ldr	r3, [r3, #0]
   2d150:	3314      	adds	r3, #20
   2d152:	781b      	ldrb	r3, [r3, #0]
   2d154:	b21b      	sxth	r3, r3
   2d156:	4313      	orrs	r3, r2
   2d158:	b21b      	sxth	r3, r3
   2d15a:	b29b      	uxth	r3, r3
   2d15c:	041b      	lsls	r3, r3, #16
   2d15e:	2292      	movs	r2, #146	; 0x92
   2d160:	0092      	lsls	r2, r2, #2
   2d162:	18ba      	adds	r2, r7, r2
   2d164:	6812      	ldr	r2, [r2, #0]
   2d166:	321b      	adds	r2, #27
   2d168:	7812      	ldrb	r2, [r2, #0]
   2d16a:	0212      	lsls	r2, r2, #8
   2d16c:	b211      	sxth	r1, r2
   2d16e:	2292      	movs	r2, #146	; 0x92
   2d170:	0092      	lsls	r2, r2, #2
   2d172:	18ba      	adds	r2, r7, r2
   2d174:	6812      	ldr	r2, [r2, #0]
   2d176:	321a      	adds	r2, #26
   2d178:	7812      	ldrb	r2, [r2, #0]
   2d17a:	b212      	sxth	r2, r2
   2d17c:	430a      	orrs	r2, r1
   2d17e:	b212      	sxth	r2, r2
   2d180:	b292      	uxth	r2, r2
   2d182:	431a      	orrs	r2, r3
   2d184:	68fb      	ldr	r3, [r7, #12]
   2d186:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2d188:	2392      	movs	r3, #146	; 0x92
   2d18a:	009b      	lsls	r3, r3, #2
   2d18c:	18fb      	adds	r3, r7, r3
   2d18e:	681b      	ldr	r3, [r3, #0]
   2d190:	331f      	adds	r3, #31
   2d192:	781b      	ldrb	r3, [r3, #0]
   2d194:	061a      	lsls	r2, r3, #24
   2d196:	2392      	movs	r3, #146	; 0x92
   2d198:	009b      	lsls	r3, r3, #2
   2d19a:	18fb      	adds	r3, r7, r3
   2d19c:	681b      	ldr	r3, [r3, #0]
   2d19e:	331e      	adds	r3, #30
   2d1a0:	781b      	ldrb	r3, [r3, #0]
   2d1a2:	041b      	lsls	r3, r3, #16
   2d1a4:	4313      	orrs	r3, r2
   2d1a6:	2292      	movs	r2, #146	; 0x92
   2d1a8:	0092      	lsls	r2, r2, #2
   2d1aa:	18ba      	adds	r2, r7, r2
   2d1ac:	6812      	ldr	r2, [r2, #0]
   2d1ae:	321d      	adds	r2, #29
   2d1b0:	7812      	ldrb	r2, [r2, #0]
   2d1b2:	0212      	lsls	r2, r2, #8
   2d1b4:	4313      	orrs	r3, r2
   2d1b6:	2292      	movs	r2, #146	; 0x92
   2d1b8:	0092      	lsls	r2, r2, #2
   2d1ba:	18ba      	adds	r2, r7, r2
   2d1bc:	6812      	ldr	r2, [r2, #0]
   2d1be:	321c      	adds	r2, #28
   2d1c0:	7812      	ldrb	r2, [r2, #0]
   2d1c2:	431a      	orrs	r2, r3
   2d1c4:	68fb      	ldr	r3, [r7, #12]
   2d1c6:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2d1c8:	68fb      	ldr	r3, [r7, #12]
   2d1ca:	2200      	movs	r2, #0
   2d1cc:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2d1ce:	68fb      	ldr	r3, [r7, #12]
   2d1d0:	2200      	movs	r2, #0
   2d1d2:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2d1d4:	2387      	movs	r3, #135	; 0x87
   2d1d6:	009b      	lsls	r3, r3, #2
   2d1d8:	18fb      	adds	r3, r7, r3
   2d1da:	681a      	ldr	r2, [r3, #0]
   2d1dc:	68fb      	ldr	r3, [r7, #12]
   2d1de:	601a      	str	r2, [r3, #0]
   2d1e0:	2387      	movs	r3, #135	; 0x87
   2d1e2:	009b      	lsls	r3, r3, #2
   2d1e4:	18fb      	adds	r3, r7, r3
   2d1e6:	681b      	ldr	r3, [r3, #0]
   2d1e8:	88da      	ldrh	r2, [r3, #6]
   2d1ea:	68fb      	ldr	r3, [r7, #12]
   2d1ec:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2d1ee:	4b05      	ldr	r3, [pc, #20]	; (2d204 <f_open+0x52c>)
   2d1f0:	18fb      	adds	r3, r7, r3
   2d1f2:	781b      	ldrb	r3, [r3, #0]
}
   2d1f4:	0018      	movs	r0, r3
   2d1f6:	46bd      	mov	sp, r7
   2d1f8:	2395      	movs	r3, #149	; 0x95
   2d1fa:	009b      	lsls	r3, r3, #2
   2d1fc:	449d      	add	sp, r3
   2d1fe:	bd90      	pop	{r4, r7, pc}
   2d200:	fffffdb7 	.word	0xfffffdb7
   2d204:	0000024f 	.word	0x0000024f

0002d208 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2d208:	b590      	push	{r4, r7, lr}
   2d20a:	b08b      	sub	sp, #44	; 0x2c
   2d20c:	af00      	add	r7, sp, #0
   2d20e:	60f8      	str	r0, [r7, #12]
   2d210:	60b9      	str	r1, [r7, #8]
   2d212:	607a      	str	r2, [r7, #4]
   2d214:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2d216:	68bb      	ldr	r3, [r7, #8]
   2d218:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2d21a:	683b      	ldr	r3, [r7, #0]
   2d21c:	2200      	movs	r2, #0
   2d21e:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2d220:	68fb      	ldr	r3, [r7, #12]
   2d222:	681a      	ldr	r2, [r3, #0]
   2d224:	68fb      	ldr	r3, [r7, #12]
   2d226:	889b      	ldrh	r3, [r3, #4]
   2d228:	2117      	movs	r1, #23
   2d22a:	187c      	adds	r4, r7, r1
   2d22c:	0019      	movs	r1, r3
   2d22e:	0010      	movs	r0, r2
   2d230:	4bc3      	ldr	r3, [pc, #780]	; (2d540 <f_write+0x338>)
   2d232:	4798      	blx	r3
   2d234:	0003      	movs	r3, r0
   2d236:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2d238:	2317      	movs	r3, #23
   2d23a:	18fb      	adds	r3, r7, r3
   2d23c:	781b      	ldrb	r3, [r3, #0]
   2d23e:	2b00      	cmp	r3, #0
   2d240:	d003      	beq.n	2d24a <f_write+0x42>
   2d242:	2317      	movs	r3, #23
   2d244:	18fb      	adds	r3, r7, r3
   2d246:	781b      	ldrb	r3, [r3, #0]
   2d248:	e176      	b.n	2d538 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2d24a:	68fb      	ldr	r3, [r7, #12]
   2d24c:	799b      	ldrb	r3, [r3, #6]
   2d24e:	b25b      	sxtb	r3, r3
   2d250:	2b00      	cmp	r3, #0
   2d252:	da01      	bge.n	2d258 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2d254:	2302      	movs	r3, #2
   2d256:	e16f      	b.n	2d538 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2d258:	68fb      	ldr	r3, [r7, #12]
   2d25a:	799b      	ldrb	r3, [r3, #6]
   2d25c:	001a      	movs	r2, r3
   2d25e:	2302      	movs	r3, #2
   2d260:	4013      	ands	r3, r2
   2d262:	d101      	bne.n	2d268 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2d264:	2307      	movs	r3, #7
   2d266:	e167      	b.n	2d538 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2d268:	68fb      	ldr	r3, [r7, #12]
   2d26a:	68da      	ldr	r2, [r3, #12]
   2d26c:	687b      	ldr	r3, [r7, #4]
   2d26e:	18d2      	adds	r2, r2, r3
   2d270:	68fb      	ldr	r3, [r7, #12]
   2d272:	68db      	ldr	r3, [r3, #12]
   2d274:	429a      	cmp	r2, r3
   2d276:	d300      	bcc.n	2d27a <f_write+0x72>
   2d278:	e146      	b.n	2d508 <f_write+0x300>
   2d27a:	2300      	movs	r3, #0
   2d27c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2d27e:	e143      	b.n	2d508 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2d280:	68fb      	ldr	r3, [r7, #12]
   2d282:	689b      	ldr	r3, [r3, #8]
   2d284:	05db      	lsls	r3, r3, #23
   2d286:	0ddb      	lsrs	r3, r3, #23
   2d288:	d000      	beq.n	2d28c <f_write+0x84>
   2d28a:	e0f6      	b.n	2d47a <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2d28c:	68fb      	ldr	r3, [r7, #12]
   2d28e:	689b      	ldr	r3, [r3, #8]
   2d290:	0a5b      	lsrs	r3, r3, #9
   2d292:	b2da      	uxtb	r2, r3
   2d294:	68fb      	ldr	r3, [r7, #12]
   2d296:	681b      	ldr	r3, [r3, #0]
   2d298:	789b      	ldrb	r3, [r3, #2]
   2d29a:	3b01      	subs	r3, #1
   2d29c:	b2d9      	uxtb	r1, r3
   2d29e:	2316      	movs	r3, #22
   2d2a0:	18fb      	adds	r3, r7, r3
   2d2a2:	400a      	ands	r2, r1
   2d2a4:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2d2a6:	2316      	movs	r3, #22
   2d2a8:	18fb      	adds	r3, r7, r3
   2d2aa:	781b      	ldrb	r3, [r3, #0]
   2d2ac:	2b00      	cmp	r3, #0
   2d2ae:	d140      	bne.n	2d332 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2d2b0:	68fb      	ldr	r3, [r7, #12]
   2d2b2:	689b      	ldr	r3, [r3, #8]
   2d2b4:	2b00      	cmp	r3, #0
   2d2b6:	d111      	bne.n	2d2dc <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2d2b8:	68fb      	ldr	r3, [r7, #12]
   2d2ba:	691b      	ldr	r3, [r3, #16]
   2d2bc:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2d2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d2c0:	2b00      	cmp	r3, #0
   2d2c2:	d115      	bne.n	2d2f0 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2d2c4:	68fb      	ldr	r3, [r7, #12]
   2d2c6:	681b      	ldr	r3, [r3, #0]
   2d2c8:	2100      	movs	r1, #0
   2d2ca:	0018      	movs	r0, r3
   2d2cc:	4b9d      	ldr	r3, [pc, #628]	; (2d544 <f_write+0x33c>)
   2d2ce:	4798      	blx	r3
   2d2d0:	0003      	movs	r3, r0
   2d2d2:	627b      	str	r3, [r7, #36]	; 0x24
   2d2d4:	68fb      	ldr	r3, [r7, #12]
   2d2d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d2d8:	611a      	str	r2, [r3, #16]
   2d2da:	e009      	b.n	2d2f0 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2d2dc:	68fb      	ldr	r3, [r7, #12]
   2d2de:	681a      	ldr	r2, [r3, #0]
   2d2e0:	68fb      	ldr	r3, [r7, #12]
   2d2e2:	695b      	ldr	r3, [r3, #20]
   2d2e4:	0019      	movs	r1, r3
   2d2e6:	0010      	movs	r0, r2
   2d2e8:	4b96      	ldr	r3, [pc, #600]	; (2d544 <f_write+0x33c>)
   2d2ea:	4798      	blx	r3
   2d2ec:	0003      	movs	r3, r0
   2d2ee:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2d2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d2f2:	2b00      	cmp	r3, #0
   2d2f4:	d100      	bne.n	2d2f8 <f_write+0xf0>
   2d2f6:	e10c      	b.n	2d512 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2d2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d2fa:	2b01      	cmp	r3, #1
   2d2fc:	d109      	bne.n	2d312 <f_write+0x10a>
   2d2fe:	68fb      	ldr	r3, [r7, #12]
   2d300:	799b      	ldrb	r3, [r3, #6]
   2d302:	2280      	movs	r2, #128	; 0x80
   2d304:	4252      	negs	r2, r2
   2d306:	4313      	orrs	r3, r2
   2d308:	b2da      	uxtb	r2, r3
   2d30a:	68fb      	ldr	r3, [r7, #12]
   2d30c:	719a      	strb	r2, [r3, #6]
   2d30e:	2302      	movs	r3, #2
   2d310:	e112      	b.n	2d538 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2d312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d314:	3301      	adds	r3, #1
   2d316:	d109      	bne.n	2d32c <f_write+0x124>
   2d318:	68fb      	ldr	r3, [r7, #12]
   2d31a:	799b      	ldrb	r3, [r3, #6]
   2d31c:	2280      	movs	r2, #128	; 0x80
   2d31e:	4252      	negs	r2, r2
   2d320:	4313      	orrs	r3, r2
   2d322:	b2da      	uxtb	r2, r3
   2d324:	68fb      	ldr	r3, [r7, #12]
   2d326:	719a      	strb	r2, [r3, #6]
   2d328:	2301      	movs	r3, #1
   2d32a:	e105      	b.n	2d538 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2d32c:	68fb      	ldr	r3, [r7, #12]
   2d32e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d330:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2d332:	68fb      	ldr	r3, [r7, #12]
   2d334:	681b      	ldr	r3, [r3, #0]
   2d336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d338:	68fb      	ldr	r3, [r7, #12]
   2d33a:	699b      	ldr	r3, [r3, #24]
   2d33c:	429a      	cmp	r2, r3
   2d33e:	d111      	bne.n	2d364 <f_write+0x15c>
   2d340:	68fb      	ldr	r3, [r7, #12]
   2d342:	681b      	ldr	r3, [r3, #0]
   2d344:	2100      	movs	r1, #0
   2d346:	0018      	movs	r0, r3
   2d348:	4b7f      	ldr	r3, [pc, #508]	; (2d548 <f_write+0x340>)
   2d34a:	4798      	blx	r3
   2d34c:	1e03      	subs	r3, r0, #0
   2d34e:	d009      	beq.n	2d364 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2d350:	68fb      	ldr	r3, [r7, #12]
   2d352:	799b      	ldrb	r3, [r3, #6]
   2d354:	2280      	movs	r2, #128	; 0x80
   2d356:	4252      	negs	r2, r2
   2d358:	4313      	orrs	r3, r2
   2d35a:	b2da      	uxtb	r2, r3
   2d35c:	68fb      	ldr	r3, [r7, #12]
   2d35e:	719a      	strb	r2, [r3, #6]
   2d360:	2301      	movs	r3, #1
   2d362:	e0e9      	b.n	2d538 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2d364:	68fb      	ldr	r3, [r7, #12]
   2d366:	681a      	ldr	r2, [r3, #0]
   2d368:	68fb      	ldr	r3, [r7, #12]
   2d36a:	695b      	ldr	r3, [r3, #20]
   2d36c:	0019      	movs	r1, r3
   2d36e:	0010      	movs	r0, r2
   2d370:	4b76      	ldr	r3, [pc, #472]	; (2d54c <f_write+0x344>)
   2d372:	4798      	blx	r3
   2d374:	0003      	movs	r3, r0
   2d376:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2d378:	693b      	ldr	r3, [r7, #16]
   2d37a:	2b00      	cmp	r3, #0
   2d37c:	d109      	bne.n	2d392 <f_write+0x18a>
   2d37e:	68fb      	ldr	r3, [r7, #12]
   2d380:	799b      	ldrb	r3, [r3, #6]
   2d382:	2280      	movs	r2, #128	; 0x80
   2d384:	4252      	negs	r2, r2
   2d386:	4313      	orrs	r3, r2
   2d388:	b2da      	uxtb	r2, r3
   2d38a:	68fb      	ldr	r3, [r7, #12]
   2d38c:	719a      	strb	r2, [r3, #6]
   2d38e:	2302      	movs	r3, #2
   2d390:	e0d2      	b.n	2d538 <f_write+0x330>
			sect += csect;
   2d392:	2316      	movs	r3, #22
   2d394:	18fb      	adds	r3, r7, r3
   2d396:	781b      	ldrb	r3, [r3, #0]
   2d398:	693a      	ldr	r2, [r7, #16]
   2d39a:	18d3      	adds	r3, r2, r3
   2d39c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2d39e:	687b      	ldr	r3, [r7, #4]
   2d3a0:	0a5b      	lsrs	r3, r3, #9
   2d3a2:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2d3a4:	69fb      	ldr	r3, [r7, #28]
   2d3a6:	2b00      	cmp	r3, #0
   2d3a8:	d048      	beq.n	2d43c <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2d3aa:	2316      	movs	r3, #22
   2d3ac:	18fb      	adds	r3, r7, r3
   2d3ae:	781a      	ldrb	r2, [r3, #0]
   2d3b0:	69fb      	ldr	r3, [r7, #28]
   2d3b2:	18d2      	adds	r2, r2, r3
   2d3b4:	68fb      	ldr	r3, [r7, #12]
   2d3b6:	681b      	ldr	r3, [r3, #0]
   2d3b8:	789b      	ldrb	r3, [r3, #2]
   2d3ba:	429a      	cmp	r2, r3
   2d3bc:	d908      	bls.n	2d3d0 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2d3be:	68fb      	ldr	r3, [r7, #12]
   2d3c0:	681b      	ldr	r3, [r3, #0]
   2d3c2:	789b      	ldrb	r3, [r3, #2]
   2d3c4:	001a      	movs	r2, r3
   2d3c6:	2316      	movs	r3, #22
   2d3c8:	18fb      	adds	r3, r7, r3
   2d3ca:	781b      	ldrb	r3, [r3, #0]
   2d3cc:	1ad3      	subs	r3, r2, r3
   2d3ce:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2d3d0:	68fb      	ldr	r3, [r7, #12]
   2d3d2:	681b      	ldr	r3, [r3, #0]
   2d3d4:	7858      	ldrb	r0, [r3, #1]
   2d3d6:	69fb      	ldr	r3, [r7, #28]
   2d3d8:	b2db      	uxtb	r3, r3
   2d3da:	693a      	ldr	r2, [r7, #16]
   2d3dc:	69b9      	ldr	r1, [r7, #24]
   2d3de:	4c5c      	ldr	r4, [pc, #368]	; (2d550 <f_write+0x348>)
   2d3e0:	47a0      	blx	r4
   2d3e2:	1e03      	subs	r3, r0, #0
   2d3e4:	d009      	beq.n	2d3fa <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2d3e6:	68fb      	ldr	r3, [r7, #12]
   2d3e8:	799b      	ldrb	r3, [r3, #6]
   2d3ea:	2280      	movs	r2, #128	; 0x80
   2d3ec:	4252      	negs	r2, r2
   2d3ee:	4313      	orrs	r3, r2
   2d3f0:	b2da      	uxtb	r2, r3
   2d3f2:	68fb      	ldr	r3, [r7, #12]
   2d3f4:	719a      	strb	r2, [r3, #6]
   2d3f6:	2301      	movs	r3, #1
   2d3f8:	e09e      	b.n	2d538 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2d3fa:	68fb      	ldr	r3, [r7, #12]
   2d3fc:	681b      	ldr	r3, [r3, #0]
   2d3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d400:	693b      	ldr	r3, [r7, #16]
   2d402:	1ad2      	subs	r2, r2, r3
   2d404:	69fb      	ldr	r3, [r7, #28]
   2d406:	429a      	cmp	r2, r3
   2d408:	d214      	bcs.n	2d434 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2d40a:	68fb      	ldr	r3, [r7, #12]
   2d40c:	681b      	ldr	r3, [r3, #0]
   2d40e:	3330      	adds	r3, #48	; 0x30
   2d410:	0018      	movs	r0, r3
   2d412:	68fb      	ldr	r3, [r7, #12]
   2d414:	681b      	ldr	r3, [r3, #0]
   2d416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d418:	693b      	ldr	r3, [r7, #16]
   2d41a:	1ad3      	subs	r3, r2, r3
   2d41c:	025b      	lsls	r3, r3, #9
   2d41e:	69ba      	ldr	r2, [r7, #24]
   2d420:	18d1      	adds	r1, r2, r3
   2d422:	2380      	movs	r3, #128	; 0x80
   2d424:	009b      	lsls	r3, r3, #2
   2d426:	001a      	movs	r2, r3
   2d428:	4b4a      	ldr	r3, [pc, #296]	; (2d554 <f_write+0x34c>)
   2d42a:	4798      	blx	r3
					fp->fs->wflag = 0;
   2d42c:	68fb      	ldr	r3, [r7, #12]
   2d42e:	681b      	ldr	r3, [r3, #0]
   2d430:	2200      	movs	r2, #0
   2d432:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2d434:	69fb      	ldr	r3, [r7, #28]
   2d436:	025b      	lsls	r3, r3, #9
   2d438:	623b      	str	r3, [r7, #32]
				continue;
   2d43a:	e051      	b.n	2d4e0 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2d43c:	68fb      	ldr	r3, [r7, #12]
   2d43e:	689a      	ldr	r2, [r3, #8]
   2d440:	68fb      	ldr	r3, [r7, #12]
   2d442:	68db      	ldr	r3, [r3, #12]
   2d444:	429a      	cmp	r2, r3
   2d446:	d315      	bcc.n	2d474 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2d448:	68fb      	ldr	r3, [r7, #12]
   2d44a:	681b      	ldr	r3, [r3, #0]
   2d44c:	2100      	movs	r1, #0
   2d44e:	0018      	movs	r0, r3
   2d450:	4b3d      	ldr	r3, [pc, #244]	; (2d548 <f_write+0x340>)
   2d452:	4798      	blx	r3
   2d454:	1e03      	subs	r3, r0, #0
   2d456:	d009      	beq.n	2d46c <f_write+0x264>
   2d458:	68fb      	ldr	r3, [r7, #12]
   2d45a:	799b      	ldrb	r3, [r3, #6]
   2d45c:	2280      	movs	r2, #128	; 0x80
   2d45e:	4252      	negs	r2, r2
   2d460:	4313      	orrs	r3, r2
   2d462:	b2da      	uxtb	r2, r3
   2d464:	68fb      	ldr	r3, [r7, #12]
   2d466:	719a      	strb	r2, [r3, #6]
   2d468:	2301      	movs	r3, #1
   2d46a:	e065      	b.n	2d538 <f_write+0x330>
				fp->fs->winsect = sect;
   2d46c:	68fb      	ldr	r3, [r7, #12]
   2d46e:	681b      	ldr	r3, [r3, #0]
   2d470:	693a      	ldr	r2, [r7, #16]
   2d472:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2d474:	68fb      	ldr	r3, [r7, #12]
   2d476:	693a      	ldr	r2, [r7, #16]
   2d478:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2d47a:	68fb      	ldr	r3, [r7, #12]
   2d47c:	689b      	ldr	r3, [r3, #8]
   2d47e:	05db      	lsls	r3, r3, #23
   2d480:	0ddb      	lsrs	r3, r3, #23
   2d482:	2280      	movs	r2, #128	; 0x80
   2d484:	0092      	lsls	r2, r2, #2
   2d486:	1ad3      	subs	r3, r2, r3
   2d488:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2d48a:	6a3a      	ldr	r2, [r7, #32]
   2d48c:	687b      	ldr	r3, [r7, #4]
   2d48e:	429a      	cmp	r2, r3
   2d490:	d901      	bls.n	2d496 <f_write+0x28e>
   2d492:	687b      	ldr	r3, [r7, #4]
   2d494:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2d496:	68fb      	ldr	r3, [r7, #12]
   2d498:	681a      	ldr	r2, [r3, #0]
   2d49a:	68fb      	ldr	r3, [r7, #12]
   2d49c:	699b      	ldr	r3, [r3, #24]
   2d49e:	0019      	movs	r1, r3
   2d4a0:	0010      	movs	r0, r2
   2d4a2:	4b29      	ldr	r3, [pc, #164]	; (2d548 <f_write+0x340>)
   2d4a4:	4798      	blx	r3
   2d4a6:	1e03      	subs	r3, r0, #0
   2d4a8:	d009      	beq.n	2d4be <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2d4aa:	68fb      	ldr	r3, [r7, #12]
   2d4ac:	799b      	ldrb	r3, [r3, #6]
   2d4ae:	2280      	movs	r2, #128	; 0x80
   2d4b0:	4252      	negs	r2, r2
   2d4b2:	4313      	orrs	r3, r2
   2d4b4:	b2da      	uxtb	r2, r3
   2d4b6:	68fb      	ldr	r3, [r7, #12]
   2d4b8:	719a      	strb	r2, [r3, #6]
   2d4ba:	2301      	movs	r3, #1
   2d4bc:	e03c      	b.n	2d538 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2d4be:	68fb      	ldr	r3, [r7, #12]
   2d4c0:	681a      	ldr	r2, [r3, #0]
   2d4c2:	68fb      	ldr	r3, [r7, #12]
   2d4c4:	689b      	ldr	r3, [r3, #8]
   2d4c6:	05db      	lsls	r3, r3, #23
   2d4c8:	0ddb      	lsrs	r3, r3, #23
   2d4ca:	3330      	adds	r3, #48	; 0x30
   2d4cc:	18d3      	adds	r3, r2, r3
   2d4ce:	6a3a      	ldr	r2, [r7, #32]
   2d4d0:	69b9      	ldr	r1, [r7, #24]
   2d4d2:	0018      	movs	r0, r3
   2d4d4:	4b1f      	ldr	r3, [pc, #124]	; (2d554 <f_write+0x34c>)
   2d4d6:	4798      	blx	r3
		fp->fs->wflag = 1;
   2d4d8:	68fb      	ldr	r3, [r7, #12]
   2d4da:	681b      	ldr	r3, [r3, #0]
   2d4dc:	2201      	movs	r2, #1
   2d4de:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2d4e0:	69ba      	ldr	r2, [r7, #24]
   2d4e2:	6a3b      	ldr	r3, [r7, #32]
   2d4e4:	18d3      	adds	r3, r2, r3
   2d4e6:	61bb      	str	r3, [r7, #24]
   2d4e8:	68fb      	ldr	r3, [r7, #12]
   2d4ea:	689a      	ldr	r2, [r3, #8]
   2d4ec:	6a3b      	ldr	r3, [r7, #32]
   2d4ee:	18d2      	adds	r2, r2, r3
   2d4f0:	68fb      	ldr	r3, [r7, #12]
   2d4f2:	609a      	str	r2, [r3, #8]
   2d4f4:	683b      	ldr	r3, [r7, #0]
   2d4f6:	681a      	ldr	r2, [r3, #0]
   2d4f8:	6a3b      	ldr	r3, [r7, #32]
   2d4fa:	18d2      	adds	r2, r2, r3
   2d4fc:	683b      	ldr	r3, [r7, #0]
   2d4fe:	601a      	str	r2, [r3, #0]
   2d500:	687a      	ldr	r2, [r7, #4]
   2d502:	6a3b      	ldr	r3, [r7, #32]
   2d504:	1ad3      	subs	r3, r2, r3
   2d506:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2d508:	687b      	ldr	r3, [r7, #4]
   2d50a:	2b00      	cmp	r3, #0
   2d50c:	d000      	beq.n	2d510 <f_write+0x308>
   2d50e:	e6b7      	b.n	2d280 <f_write+0x78>
   2d510:	e000      	b.n	2d514 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2d512:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2d514:	68fb      	ldr	r3, [r7, #12]
   2d516:	689a      	ldr	r2, [r3, #8]
   2d518:	68fb      	ldr	r3, [r7, #12]
   2d51a:	68db      	ldr	r3, [r3, #12]
   2d51c:	429a      	cmp	r2, r3
   2d51e:	d903      	bls.n	2d528 <f_write+0x320>
   2d520:	68fb      	ldr	r3, [r7, #12]
   2d522:	689a      	ldr	r2, [r3, #8]
   2d524:	68fb      	ldr	r3, [r7, #12]
   2d526:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2d528:	68fb      	ldr	r3, [r7, #12]
   2d52a:	799b      	ldrb	r3, [r3, #6]
   2d52c:	2220      	movs	r2, #32
   2d52e:	4313      	orrs	r3, r2
   2d530:	b2da      	uxtb	r2, r3
   2d532:	68fb      	ldr	r3, [r7, #12]
   2d534:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2d536:	2300      	movs	r3, #0
}
   2d538:	0018      	movs	r0, r3
   2d53a:	46bd      	mov	sp, r7
   2d53c:	b00b      	add	sp, #44	; 0x2c
   2d53e:	bd90      	pop	{r4, r7, pc}
   2d540:	0002cc2d 	.word	0x0002cc2d
   2d544:	0002b2b9 	.word	0x0002b2b9
   2d548:	0002abb1 	.word	0x0002abb1
   2d54c:	0002ae11 	.word	0x0002ae11
   2d550:	0002a89d 	.word	0x0002a89d
   2d554:	0002aacd 	.word	0x0002aacd

0002d558 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2d558:	b590      	push	{r4, r7, lr}
   2d55a:	b087      	sub	sp, #28
   2d55c:	af00      	add	r7, sp, #0
   2d55e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2d560:	687b      	ldr	r3, [r7, #4]
   2d562:	681a      	ldr	r2, [r3, #0]
   2d564:	687b      	ldr	r3, [r7, #4]
   2d566:	889b      	ldrh	r3, [r3, #4]
   2d568:	2117      	movs	r1, #23
   2d56a:	187c      	adds	r4, r7, r1
   2d56c:	0019      	movs	r1, r3
   2d56e:	0010      	movs	r0, r2
   2d570:	4b55      	ldr	r3, [pc, #340]	; (2d6c8 <f_sync+0x170>)
   2d572:	4798      	blx	r3
   2d574:	0003      	movs	r3, r0
   2d576:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2d578:	2317      	movs	r3, #23
   2d57a:	18fb      	adds	r3, r7, r3
   2d57c:	781b      	ldrb	r3, [r3, #0]
   2d57e:	2b00      	cmp	r3, #0
   2d580:	d000      	beq.n	2d584 <f_sync+0x2c>
   2d582:	e09a      	b.n	2d6ba <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2d584:	687b      	ldr	r3, [r7, #4]
   2d586:	799b      	ldrb	r3, [r3, #6]
   2d588:	001a      	movs	r2, r3
   2d58a:	2320      	movs	r3, #32
   2d58c:	4013      	ands	r3, r2
   2d58e:	d100      	bne.n	2d592 <f_sync+0x3a>
   2d590:	e093      	b.n	2d6ba <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2d592:	687b      	ldr	r3, [r7, #4]
   2d594:	681a      	ldr	r2, [r3, #0]
   2d596:	687b      	ldr	r3, [r7, #4]
   2d598:	69db      	ldr	r3, [r3, #28]
   2d59a:	2117      	movs	r1, #23
   2d59c:	187c      	adds	r4, r7, r1
   2d59e:	0019      	movs	r1, r3
   2d5a0:	0010      	movs	r0, r2
   2d5a2:	4b4a      	ldr	r3, [pc, #296]	; (2d6cc <f_sync+0x174>)
   2d5a4:	4798      	blx	r3
   2d5a6:	0003      	movs	r3, r0
   2d5a8:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2d5aa:	2317      	movs	r3, #23
   2d5ac:	18fb      	adds	r3, r7, r3
   2d5ae:	781b      	ldrb	r3, [r3, #0]
   2d5b0:	2b00      	cmp	r3, #0
   2d5b2:	d000      	beq.n	2d5b6 <f_sync+0x5e>
   2d5b4:	e081      	b.n	2d6ba <f_sync+0x162>
				dir = fp->dir_ptr;
   2d5b6:	687b      	ldr	r3, [r7, #4]
   2d5b8:	6a1b      	ldr	r3, [r3, #32]
   2d5ba:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2d5bc:	693b      	ldr	r3, [r7, #16]
   2d5be:	330b      	adds	r3, #11
   2d5c0:	693a      	ldr	r2, [r7, #16]
   2d5c2:	320b      	adds	r2, #11
   2d5c4:	7812      	ldrb	r2, [r2, #0]
   2d5c6:	2120      	movs	r1, #32
   2d5c8:	430a      	orrs	r2, r1
   2d5ca:	b2d2      	uxtb	r2, r2
   2d5cc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2d5ce:	693b      	ldr	r3, [r7, #16]
   2d5d0:	331c      	adds	r3, #28
   2d5d2:	001a      	movs	r2, r3
   2d5d4:	687b      	ldr	r3, [r7, #4]
   2d5d6:	68db      	ldr	r3, [r3, #12]
   2d5d8:	b2db      	uxtb	r3, r3
   2d5da:	7013      	strb	r3, [r2, #0]
   2d5dc:	693b      	ldr	r3, [r7, #16]
   2d5de:	331d      	adds	r3, #29
   2d5e0:	001a      	movs	r2, r3
   2d5e2:	687b      	ldr	r3, [r7, #4]
   2d5e4:	68db      	ldr	r3, [r3, #12]
   2d5e6:	b29b      	uxth	r3, r3
   2d5e8:	0a1b      	lsrs	r3, r3, #8
   2d5ea:	b29b      	uxth	r3, r3
   2d5ec:	b2db      	uxtb	r3, r3
   2d5ee:	7013      	strb	r3, [r2, #0]
   2d5f0:	693b      	ldr	r3, [r7, #16]
   2d5f2:	331e      	adds	r3, #30
   2d5f4:	001a      	movs	r2, r3
   2d5f6:	687b      	ldr	r3, [r7, #4]
   2d5f8:	68db      	ldr	r3, [r3, #12]
   2d5fa:	0c1b      	lsrs	r3, r3, #16
   2d5fc:	b2db      	uxtb	r3, r3
   2d5fe:	7013      	strb	r3, [r2, #0]
   2d600:	693b      	ldr	r3, [r7, #16]
   2d602:	331f      	adds	r3, #31
   2d604:	001a      	movs	r2, r3
   2d606:	687b      	ldr	r3, [r7, #4]
   2d608:	68db      	ldr	r3, [r3, #12]
   2d60a:	0e1b      	lsrs	r3, r3, #24
   2d60c:	b2db      	uxtb	r3, r3
   2d60e:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2d610:	693b      	ldr	r3, [r7, #16]
   2d612:	331a      	adds	r3, #26
   2d614:	001a      	movs	r2, r3
   2d616:	687b      	ldr	r3, [r7, #4]
   2d618:	691b      	ldr	r3, [r3, #16]
   2d61a:	b2db      	uxtb	r3, r3
   2d61c:	7013      	strb	r3, [r2, #0]
   2d61e:	693b      	ldr	r3, [r7, #16]
   2d620:	331b      	adds	r3, #27
   2d622:	001a      	movs	r2, r3
   2d624:	687b      	ldr	r3, [r7, #4]
   2d626:	691b      	ldr	r3, [r3, #16]
   2d628:	b29b      	uxth	r3, r3
   2d62a:	0a1b      	lsrs	r3, r3, #8
   2d62c:	b29b      	uxth	r3, r3
   2d62e:	b2db      	uxtb	r3, r3
   2d630:	7013      	strb	r3, [r2, #0]
   2d632:	693b      	ldr	r3, [r7, #16]
   2d634:	3314      	adds	r3, #20
   2d636:	001a      	movs	r2, r3
   2d638:	687b      	ldr	r3, [r7, #4]
   2d63a:	691b      	ldr	r3, [r3, #16]
   2d63c:	0c1b      	lsrs	r3, r3, #16
   2d63e:	b2db      	uxtb	r3, r3
   2d640:	7013      	strb	r3, [r2, #0]
   2d642:	693b      	ldr	r3, [r7, #16]
   2d644:	3315      	adds	r3, #21
   2d646:	001a      	movs	r2, r3
   2d648:	687b      	ldr	r3, [r7, #4]
   2d64a:	691b      	ldr	r3, [r3, #16]
   2d64c:	0c1b      	lsrs	r3, r3, #16
   2d64e:	b29b      	uxth	r3, r3
   2d650:	0a1b      	lsrs	r3, r3, #8
   2d652:	b29b      	uxth	r3, r3
   2d654:	b2db      	uxtb	r3, r3
   2d656:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2d658:	4b1d      	ldr	r3, [pc, #116]	; (2d6d0 <f_sync+0x178>)
   2d65a:	4798      	blx	r3
   2d65c:	0003      	movs	r3, r0
   2d65e:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2d660:	693b      	ldr	r3, [r7, #16]
   2d662:	3316      	adds	r3, #22
   2d664:	68fa      	ldr	r2, [r7, #12]
   2d666:	b2d2      	uxtb	r2, r2
   2d668:	701a      	strb	r2, [r3, #0]
   2d66a:	693b      	ldr	r3, [r7, #16]
   2d66c:	3317      	adds	r3, #23
   2d66e:	68fa      	ldr	r2, [r7, #12]
   2d670:	b292      	uxth	r2, r2
   2d672:	0a12      	lsrs	r2, r2, #8
   2d674:	b292      	uxth	r2, r2
   2d676:	b2d2      	uxtb	r2, r2
   2d678:	701a      	strb	r2, [r3, #0]
   2d67a:	693b      	ldr	r3, [r7, #16]
   2d67c:	3318      	adds	r3, #24
   2d67e:	68fa      	ldr	r2, [r7, #12]
   2d680:	0c12      	lsrs	r2, r2, #16
   2d682:	b2d2      	uxtb	r2, r2
   2d684:	701a      	strb	r2, [r3, #0]
   2d686:	693b      	ldr	r3, [r7, #16]
   2d688:	3319      	adds	r3, #25
   2d68a:	68fa      	ldr	r2, [r7, #12]
   2d68c:	0e12      	lsrs	r2, r2, #24
   2d68e:	b2d2      	uxtb	r2, r2
   2d690:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2d692:	687b      	ldr	r3, [r7, #4]
   2d694:	799b      	ldrb	r3, [r3, #6]
   2d696:	2220      	movs	r2, #32
   2d698:	4393      	bics	r3, r2
   2d69a:	b2da      	uxtb	r2, r3
   2d69c:	687b      	ldr	r3, [r7, #4]
   2d69e:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2d6a0:	687b      	ldr	r3, [r7, #4]
   2d6a2:	681b      	ldr	r3, [r3, #0]
   2d6a4:	2201      	movs	r2, #1
   2d6a6:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2d6a8:	687b      	ldr	r3, [r7, #4]
   2d6aa:	681b      	ldr	r3, [r3, #0]
   2d6ac:	2217      	movs	r2, #23
   2d6ae:	18bc      	adds	r4, r7, r2
   2d6b0:	0018      	movs	r0, r3
   2d6b2:	4b08      	ldr	r3, [pc, #32]	; (2d6d4 <f_sync+0x17c>)
   2d6b4:	4798      	blx	r3
   2d6b6:	0003      	movs	r3, r0
   2d6b8:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2d6ba:	2317      	movs	r3, #23
   2d6bc:	18fb      	adds	r3, r7, r3
   2d6be:	781b      	ldrb	r3, [r3, #0]
}
   2d6c0:	0018      	movs	r0, r3
   2d6c2:	46bd      	mov	sp, r7
   2d6c4:	b007      	add	sp, #28
   2d6c6:	bd90      	pop	{r4, r7, pc}
   2d6c8:	0002cc2d 	.word	0x0002cc2d
   2d6cc:	0002abb1 	.word	0x0002abb1
   2d6d0:	0002aa6d 	.word	0x0002aa6d
   2d6d4:	0002ac79 	.word	0x0002ac79

0002d6d8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2d6d8:	b590      	push	{r4, r7, lr}
   2d6da:	b085      	sub	sp, #20
   2d6dc:	af00      	add	r7, sp, #0
   2d6de:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2d6e0:	230f      	movs	r3, #15
   2d6e2:	18fc      	adds	r4, r7, r3
   2d6e4:	687b      	ldr	r3, [r7, #4]
   2d6e6:	0018      	movs	r0, r3
   2d6e8:	4b09      	ldr	r3, [pc, #36]	; (2d710 <f_close+0x38>)
   2d6ea:	4798      	blx	r3
   2d6ec:	0003      	movs	r3, r0
   2d6ee:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2d6f0:	230f      	movs	r3, #15
   2d6f2:	18fb      	adds	r3, r7, r3
   2d6f4:	781b      	ldrb	r3, [r3, #0]
   2d6f6:	2b00      	cmp	r3, #0
   2d6f8:	d102      	bne.n	2d700 <f_close+0x28>
   2d6fa:	687b      	ldr	r3, [r7, #4]
   2d6fc:	2200      	movs	r2, #0
   2d6fe:	601a      	str	r2, [r3, #0]
	return res;
   2d700:	230f      	movs	r3, #15
   2d702:	18fb      	adds	r3, r7, r3
   2d704:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2d706:	0018      	movs	r0, r3
   2d708:	46bd      	mov	sp, r7
   2d70a:	b005      	add	sp, #20
   2d70c:	bd90      	pop	{r4, r7, pc}
   2d70e:	46c0      	nop			; (mov r8, r8)
   2d710:	0002d559 	.word	0x0002d559

0002d714 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2d714:	b580      	push	{r7, lr}
   2d716:	b084      	sub	sp, #16
   2d718:	af00      	add	r7, sp, #0
   2d71a:	0002      	movs	r2, r0
   2d71c:	6039      	str	r1, [r7, #0]
   2d71e:	1dbb      	adds	r3, r7, #6
   2d720:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2d722:	1dbb      	adds	r3, r7, #6
   2d724:	881b      	ldrh	r3, [r3, #0]
   2d726:	2b7f      	cmp	r3, #127	; 0x7f
   2d728:	d805      	bhi.n	2d736 <ff_convert+0x22>
		c = src;
   2d72a:	230e      	movs	r3, #14
   2d72c:	18fb      	adds	r3, r7, r3
   2d72e:	1dba      	adds	r2, r7, #6
   2d730:	8812      	ldrh	r2, [r2, #0]
   2d732:	801a      	strh	r2, [r3, #0]
   2d734:	e03a      	b.n	2d7ac <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2d736:	683b      	ldr	r3, [r7, #0]
   2d738:	2b00      	cmp	r3, #0
   2d73a:	d010      	beq.n	2d75e <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2d73c:	1dbb      	adds	r3, r7, #6
   2d73e:	881b      	ldrh	r3, [r3, #0]
   2d740:	2bff      	cmp	r3, #255	; 0xff
   2d742:	d807      	bhi.n	2d754 <ff_convert+0x40>
   2d744:	1dbb      	adds	r3, r7, #6
   2d746:	881b      	ldrh	r3, [r3, #0]
   2d748:	3b80      	subs	r3, #128	; 0x80
   2d74a:	001a      	movs	r2, r3
   2d74c:	4b1b      	ldr	r3, [pc, #108]	; (2d7bc <ff_convert+0xa8>)
   2d74e:	0052      	lsls	r2, r2, #1
   2d750:	5ad2      	ldrh	r2, [r2, r3]
   2d752:	e000      	b.n	2d756 <ff_convert+0x42>
   2d754:	2200      	movs	r2, #0
   2d756:	230e      	movs	r3, #14
   2d758:	18fb      	adds	r3, r7, r3
   2d75a:	801a      	strh	r2, [r3, #0]
   2d75c:	e026      	b.n	2d7ac <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2d75e:	230e      	movs	r3, #14
   2d760:	18fb      	adds	r3, r7, r3
   2d762:	2200      	movs	r2, #0
   2d764:	801a      	strh	r2, [r3, #0]
   2d766:	e010      	b.n	2d78a <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2d768:	230e      	movs	r3, #14
   2d76a:	18fb      	adds	r3, r7, r3
   2d76c:	881a      	ldrh	r2, [r3, #0]
   2d76e:	4b13      	ldr	r3, [pc, #76]	; (2d7bc <ff_convert+0xa8>)
   2d770:	0052      	lsls	r2, r2, #1
   2d772:	5ad3      	ldrh	r3, [r2, r3]
   2d774:	1dba      	adds	r2, r7, #6
   2d776:	8812      	ldrh	r2, [r2, #0]
   2d778:	429a      	cmp	r2, r3
   2d77a:	d00c      	beq.n	2d796 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2d77c:	230e      	movs	r3, #14
   2d77e:	18fb      	adds	r3, r7, r3
   2d780:	881a      	ldrh	r2, [r3, #0]
   2d782:	230e      	movs	r3, #14
   2d784:	18fb      	adds	r3, r7, r3
   2d786:	3201      	adds	r2, #1
   2d788:	801a      	strh	r2, [r3, #0]
   2d78a:	230e      	movs	r3, #14
   2d78c:	18fb      	adds	r3, r7, r3
   2d78e:	881b      	ldrh	r3, [r3, #0]
   2d790:	2b7f      	cmp	r3, #127	; 0x7f
   2d792:	d9e9      	bls.n	2d768 <ff_convert+0x54>
   2d794:	e000      	b.n	2d798 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2d796:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2d798:	230e      	movs	r3, #14
   2d79a:	18fb      	adds	r3, r7, r3
   2d79c:	881b      	ldrh	r3, [r3, #0]
   2d79e:	3380      	adds	r3, #128	; 0x80
   2d7a0:	b29a      	uxth	r2, r3
   2d7a2:	230e      	movs	r3, #14
   2d7a4:	18fb      	adds	r3, r7, r3
   2d7a6:	21ff      	movs	r1, #255	; 0xff
   2d7a8:	400a      	ands	r2, r1
   2d7aa:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2d7ac:	230e      	movs	r3, #14
   2d7ae:	18fb      	adds	r3, r7, r3
   2d7b0:	881b      	ldrh	r3, [r3, #0]
}
   2d7b2:	0018      	movs	r0, r3
   2d7b4:	46bd      	mov	sp, r7
   2d7b6:	b004      	add	sp, #16
   2d7b8:	bd80      	pop	{r7, pc}
   2d7ba:	46c0      	nop			; (mov r8, r8)
   2d7bc:	000384d0 	.word	0x000384d0

0002d7c0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2d7c0:	b580      	push	{r7, lr}
   2d7c2:	b084      	sub	sp, #16
   2d7c4:	af00      	add	r7, sp, #0
   2d7c6:	0002      	movs	r2, r0
   2d7c8:	1dbb      	adds	r3, r7, #6
   2d7ca:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2d7cc:	2300      	movs	r3, #0
   2d7ce:	60fb      	str	r3, [r7, #12]
   2d7d0:	e002      	b.n	2d7d8 <ff_wtoupper+0x18>
   2d7d2:	68fb      	ldr	r3, [r7, #12]
   2d7d4:	3301      	adds	r3, #1
   2d7d6:	60fb      	str	r3, [r7, #12]
   2d7d8:	4b0f      	ldr	r3, [pc, #60]	; (2d818 <ff_wtoupper+0x58>)
   2d7da:	68fa      	ldr	r2, [r7, #12]
   2d7dc:	0052      	lsls	r2, r2, #1
   2d7de:	5ad3      	ldrh	r3, [r2, r3]
   2d7e0:	2b00      	cmp	r3, #0
   2d7e2:	d007      	beq.n	2d7f4 <ff_wtoupper+0x34>
   2d7e4:	4b0c      	ldr	r3, [pc, #48]	; (2d818 <ff_wtoupper+0x58>)
   2d7e6:	68fa      	ldr	r2, [r7, #12]
   2d7e8:	0052      	lsls	r2, r2, #1
   2d7ea:	5ad3      	ldrh	r3, [r2, r3]
   2d7ec:	1dba      	adds	r2, r7, #6
   2d7ee:	8812      	ldrh	r2, [r2, #0]
   2d7f0:	429a      	cmp	r2, r3
   2d7f2:	d1ee      	bne.n	2d7d2 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2d7f4:	4b08      	ldr	r3, [pc, #32]	; (2d818 <ff_wtoupper+0x58>)
   2d7f6:	68fa      	ldr	r2, [r7, #12]
   2d7f8:	0052      	lsls	r2, r2, #1
   2d7fa:	5ad3      	ldrh	r3, [r2, r3]
   2d7fc:	2b00      	cmp	r3, #0
   2d7fe:	d004      	beq.n	2d80a <ff_wtoupper+0x4a>
   2d800:	4b06      	ldr	r3, [pc, #24]	; (2d81c <ff_wtoupper+0x5c>)
   2d802:	68fa      	ldr	r2, [r7, #12]
   2d804:	0052      	lsls	r2, r2, #1
   2d806:	5ad3      	ldrh	r3, [r2, r3]
   2d808:	e001      	b.n	2d80e <ff_wtoupper+0x4e>
   2d80a:	1dbb      	adds	r3, r7, #6
   2d80c:	881b      	ldrh	r3, [r3, #0]
}
   2d80e:	0018      	movs	r0, r3
   2d810:	46bd      	mov	sp, r7
   2d812:	b004      	add	sp, #16
   2d814:	bd80      	pop	{r7, pc}
   2d816:	46c0      	nop			; (mov r8, r8)
   2d818:	000385d0 	.word	0x000385d0
   2d81c:	000387b0 	.word	0x000387b0

0002d820 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2d820:	b580      	push	{r7, lr}
   2d822:	b084      	sub	sp, #16
   2d824:	af00      	add	r7, sp, #0
   2d826:	60f8      	str	r0, [r7, #12]
   2d828:	60b9      	str	r1, [r7, #8]
   2d82a:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2d82c:	68fb      	ldr	r3, [r7, #12]
   2d82e:	68ba      	ldr	r2, [r7, #8]
   2d830:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2d832:	68fb      	ldr	r3, [r7, #12]
   2d834:	687a      	ldr	r2, [r7, #4]
   2d836:	601a      	str	r2, [r3, #0]
}
   2d838:	46c0      	nop			; (mov r8, r8)
   2d83a:	46bd      	mov	sp, r7
   2d83c:	b004      	add	sp, #16
   2d83e:	bd80      	pop	{r7, pc}

0002d840 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2d840:	b580      	push	{r7, lr}
   2d842:	b082      	sub	sp, #8
   2d844:	af00      	add	r7, sp, #0
   2d846:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2d848:	687b      	ldr	r3, [r7, #4]
   2d84a:	681b      	ldr	r3, [r3, #0]
   2d84c:	4a07      	ldr	r2, [pc, #28]	; (2d86c <getNextPacketId+0x2c>)
   2d84e:	4293      	cmp	r3, r2
   2d850:	d003      	beq.n	2d85a <getNextPacketId+0x1a>
   2d852:	687b      	ldr	r3, [r7, #4]
   2d854:	681b      	ldr	r3, [r3, #0]
   2d856:	1c5a      	adds	r2, r3, #1
   2d858:	e000      	b.n	2d85c <getNextPacketId+0x1c>
   2d85a:	2201      	movs	r2, #1
   2d85c:	687b      	ldr	r3, [r7, #4]
   2d85e:	601a      	str	r2, [r3, #0]
   2d860:	687b      	ldr	r3, [r7, #4]
   2d862:	681b      	ldr	r3, [r3, #0]
}
   2d864:	0018      	movs	r0, r3
   2d866:	46bd      	mov	sp, r7
   2d868:	b002      	add	sp, #8
   2d86a:	bd80      	pop	{r7, pc}
   2d86c:	0000ffff 	.word	0x0000ffff

0002d870 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2d870:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d872:	b087      	sub	sp, #28
   2d874:	af00      	add	r7, sp, #0
   2d876:	60f8      	str	r0, [r7, #12]
   2d878:	60b9      	str	r1, [r7, #8]
   2d87a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2d87c:	2301      	movs	r3, #1
   2d87e:	425b      	negs	r3, r3
   2d880:	617b      	str	r3, [r7, #20]
        sent = 0;
   2d882:	2300      	movs	r3, #0
   2d884:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2d886:	e01a      	b.n	2d8be <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2d888:	68fb      	ldr	r3, [r7, #12]
   2d88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2d88c:	68dc      	ldr	r4, [r3, #12]
   2d88e:	68fb      	ldr	r3, [r7, #12]
   2d890:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2d892:	68fb      	ldr	r3, [r7, #12]
   2d894:	691a      	ldr	r2, [r3, #16]
   2d896:	693b      	ldr	r3, [r7, #16]
   2d898:	18d6      	adds	r6, r2, r3
   2d89a:	687b      	ldr	r3, [r7, #4]
   2d89c:	0018      	movs	r0, r3
   2d89e:	4b1a      	ldr	r3, [pc, #104]	; (2d908 <sendPacket+0x98>)
   2d8a0:	4798      	blx	r3
   2d8a2:	0003      	movs	r3, r0
   2d8a4:	68ba      	ldr	r2, [r7, #8]
   2d8a6:	0031      	movs	r1, r6
   2d8a8:	0028      	movs	r0, r5
   2d8aa:	47a0      	blx	r4
   2d8ac:	0003      	movs	r3, r0
   2d8ae:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2d8b0:	697b      	ldr	r3, [r7, #20]
   2d8b2:	2b00      	cmp	r3, #0
   2d8b4:	db0e      	blt.n	2d8d4 <sendPacket+0x64>
            break;
        sent += rc;
   2d8b6:	693a      	ldr	r2, [r7, #16]
   2d8b8:	697b      	ldr	r3, [r7, #20]
   2d8ba:	18d3      	adds	r3, r2, r3
   2d8bc:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2d8be:	693a      	ldr	r2, [r7, #16]
   2d8c0:	68bb      	ldr	r3, [r7, #8]
   2d8c2:	429a      	cmp	r2, r3
   2d8c4:	da07      	bge.n	2d8d6 <sendPacket+0x66>
   2d8c6:	687b      	ldr	r3, [r7, #4]
   2d8c8:	0018      	movs	r0, r3
   2d8ca:	4b10      	ldr	r3, [pc, #64]	; (2d90c <sendPacket+0x9c>)
   2d8cc:	4798      	blx	r3
   2d8ce:	1e03      	subs	r3, r0, #0
   2d8d0:	d0da      	beq.n	2d888 <sendPacket+0x18>
   2d8d2:	e000      	b.n	2d8d6 <sendPacket+0x66>
            break;
   2d8d4:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2d8d6:	693a      	ldr	r2, [r7, #16]
   2d8d8:	68bb      	ldr	r3, [r7, #8]
   2d8da:	429a      	cmp	r2, r3
   2d8dc:	d10b      	bne.n	2d8f6 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2d8de:	68fb      	ldr	r3, [r7, #12]
   2d8e0:	3354      	adds	r3, #84	; 0x54
   2d8e2:	001a      	movs	r2, r3
   2d8e4:	68fb      	ldr	r3, [r7, #12]
   2d8e6:	699b      	ldr	r3, [r3, #24]
   2d8e8:	0019      	movs	r1, r3
   2d8ea:	0010      	movs	r0, r2
   2d8ec:	4b08      	ldr	r3, [pc, #32]	; (2d910 <sendPacket+0xa0>)
   2d8ee:	4798      	blx	r3
        rc = SUCCESS;
   2d8f0:	2300      	movs	r3, #0
   2d8f2:	617b      	str	r3, [r7, #20]
   2d8f4:	e002      	b.n	2d8fc <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2d8f6:	2301      	movs	r3, #1
   2d8f8:	425b      	negs	r3, r3
   2d8fa:	617b      	str	r3, [r7, #20]
    return rc;
   2d8fc:	697b      	ldr	r3, [r7, #20]
}
   2d8fe:	0018      	movs	r0, r3
   2d900:	46bd      	mov	sp, r7
   2d902:	b007      	add	sp, #28
   2d904:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d906:	46c0      	nop			; (mov r8, r8)
   2d908:	0002e6d1 	.word	0x0002e6d1
   2d90c:	0002e655 	.word	0x0002e655
   2d910:	0002e6a9 	.word	0x0002e6a9

0002d914 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2d914:	b580      	push	{r7, lr}
   2d916:	b086      	sub	sp, #24
   2d918:	af00      	add	r7, sp, #0
   2d91a:	60f8      	str	r0, [r7, #12]
   2d91c:	60b9      	str	r1, [r7, #8]
   2d91e:	607a      	str	r2, [r7, #4]
   2d920:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2d922:	68fb      	ldr	r3, [r7, #12]
   2d924:	68ba      	ldr	r2, [r7, #8]
   2d926:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d928:	2300      	movs	r3, #0
   2d92a:	617b      	str	r3, [r7, #20]
   2d92c:	e00a      	b.n	2d944 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2d92e:	68fa      	ldr	r2, [r7, #12]
   2d930:	697b      	ldr	r3, [r7, #20]
   2d932:	3304      	adds	r3, #4
   2d934:	00db      	lsls	r3, r3, #3
   2d936:	18d3      	adds	r3, r2, r3
   2d938:	3304      	adds	r3, #4
   2d93a:	2200      	movs	r2, #0
   2d93c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d93e:	697b      	ldr	r3, [r7, #20]
   2d940:	3301      	adds	r3, #1
   2d942:	617b      	str	r3, [r7, #20]
   2d944:	697b      	ldr	r3, [r7, #20]
   2d946:	2b04      	cmp	r3, #4
   2d948:	ddf1      	ble.n	2d92e <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2d94a:	68fb      	ldr	r3, [r7, #12]
   2d94c:	687a      	ldr	r2, [r7, #4]
   2d94e:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2d950:	68fb      	ldr	r3, [r7, #12]
   2d952:	683a      	ldr	r2, [r7, #0]
   2d954:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2d956:	68fb      	ldr	r3, [r7, #12]
   2d958:	6a3a      	ldr	r2, [r7, #32]
   2d95a:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2d95c:	68fb      	ldr	r3, [r7, #12]
   2d95e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d960:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2d962:	68fb      	ldr	r3, [r7, #12]
   2d964:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d966:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2d968:	68fb      	ldr	r3, [r7, #12]
   2d96a:	2200      	movs	r2, #0
   2d96c:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2d96e:	68fb      	ldr	r3, [r7, #12]
   2d970:	2200      	movs	r2, #0
   2d972:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2d974:	68fb      	ldr	r3, [r7, #12]
   2d976:	2200      	movs	r2, #0
   2d978:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2d97a:	68fb      	ldr	r3, [r7, #12]
   2d97c:	2201      	movs	r2, #1
   2d97e:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2d980:	68fb      	ldr	r3, [r7, #12]
   2d982:	3354      	adds	r3, #84	; 0x54
   2d984:	0018      	movs	r0, r3
   2d986:	4b03      	ldr	r3, [pc, #12]	; (2d994 <MQTTClientInit+0x80>)
   2d988:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2d98a:	46c0      	nop			; (mov r8, r8)
   2d98c:	46bd      	mov	sp, r7
   2d98e:	b006      	add	sp, #24
   2d990:	bd80      	pop	{r7, pc}
   2d992:	46c0      	nop			; (mov r8, r8)
   2d994:	0002e6f9 	.word	0x0002e6f9

0002d998 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2d998:	b590      	push	{r4, r7, lr}
   2d99a:	b08b      	sub	sp, #44	; 0x2c
   2d99c:	af00      	add	r7, sp, #0
   2d99e:	60f8      	str	r0, [r7, #12]
   2d9a0:	60b9      	str	r1, [r7, #8]
   2d9a2:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2d9a4:	2301      	movs	r3, #1
   2d9a6:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2d9a8:	2300      	movs	r3, #0
   2d9aa:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2d9ac:	2304      	movs	r3, #4
   2d9ae:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2d9b0:	68bb      	ldr	r3, [r7, #8]
   2d9b2:	2200      	movs	r2, #0
   2d9b4:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2d9b6:	2301      	movs	r3, #1
   2d9b8:	425b      	negs	r3, r3
   2d9ba:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2d9bc:	6a3b      	ldr	r3, [r7, #32]
   2d9be:	3301      	adds	r3, #1
   2d9c0:	623b      	str	r3, [r7, #32]
   2d9c2:	6a3a      	ldr	r2, [r7, #32]
   2d9c4:	69fb      	ldr	r3, [r7, #28]
   2d9c6:	429a      	cmp	r2, r3
   2d9c8:	dd03      	ble.n	2d9d2 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2d9ca:	2301      	movs	r3, #1
   2d9cc:	425b      	negs	r3, r3
   2d9ce:	61bb      	str	r3, [r7, #24]
            goto exit;
   2d9d0:	e026      	b.n	2da20 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2d9d2:	68fb      	ldr	r3, [r7, #12]
   2d9d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2d9d6:	689c      	ldr	r4, [r3, #8]
   2d9d8:	68fb      	ldr	r3, [r7, #12]
   2d9da:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2d9dc:	687b      	ldr	r3, [r7, #4]
   2d9de:	2217      	movs	r2, #23
   2d9e0:	18b9      	adds	r1, r7, r2
   2d9e2:	2201      	movs	r2, #1
   2d9e4:	47a0      	blx	r4
   2d9e6:	0003      	movs	r3, r0
   2d9e8:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2d9ea:	69bb      	ldr	r3, [r7, #24]
   2d9ec:	2b01      	cmp	r3, #1
   2d9ee:	d116      	bne.n	2da1e <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2d9f0:	68bb      	ldr	r3, [r7, #8]
   2d9f2:	681a      	ldr	r2, [r3, #0]
   2d9f4:	2317      	movs	r3, #23
   2d9f6:	18fb      	adds	r3, r7, r3
   2d9f8:	781b      	ldrb	r3, [r3, #0]
   2d9fa:	0019      	movs	r1, r3
   2d9fc:	237f      	movs	r3, #127	; 0x7f
   2d9fe:	400b      	ands	r3, r1
   2da00:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2da02:	434b      	muls	r3, r1
   2da04:	18d2      	adds	r2, r2, r3
   2da06:	68bb      	ldr	r3, [r7, #8]
   2da08:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2da0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2da0c:	01db      	lsls	r3, r3, #7
   2da0e:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2da10:	2317      	movs	r3, #23
   2da12:	18fb      	adds	r3, r7, r3
   2da14:	781b      	ldrb	r3, [r3, #0]
   2da16:	b25b      	sxtb	r3, r3
   2da18:	2b00      	cmp	r3, #0
   2da1a:	dbcc      	blt.n	2d9b6 <decodePacket+0x1e>
   2da1c:	e000      	b.n	2da20 <decodePacket+0x88>
            goto exit;
   2da1e:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2da20:	6a3b      	ldr	r3, [r7, #32]
}
   2da22:	0018      	movs	r0, r3
   2da24:	46bd      	mov	sp, r7
   2da26:	b00b      	add	sp, #44	; 0x2c
   2da28:	bd90      	pop	{r4, r7, pc}
	...

0002da2c <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2da2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2da2e:	46c6      	mov	lr, r8
   2da30:	b500      	push	{lr}
   2da32:	b086      	sub	sp, #24
   2da34:	af00      	add	r7, sp, #0
   2da36:	6078      	str	r0, [r7, #4]
   2da38:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2da3a:	2301      	movs	r3, #1
   2da3c:	425b      	negs	r3, r3
   2da3e:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2da40:	2300      	movs	r3, #0
   2da42:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2da44:	2300      	movs	r3, #0
   2da46:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2da48:	2300      	movs	r3, #0
   2da4a:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2da4c:	687b      	ldr	r3, [r7, #4]
   2da4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2da50:	689c      	ldr	r4, [r3, #8]
   2da52:	687b      	ldr	r3, [r7, #4]
   2da54:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2da56:	687b      	ldr	r3, [r7, #4]
   2da58:	695e      	ldr	r6, [r3, #20]
   2da5a:	683b      	ldr	r3, [r7, #0]
   2da5c:	0018      	movs	r0, r3
   2da5e:	4b2b      	ldr	r3, [pc, #172]	; (2db0c <readPacket+0xe0>)
   2da60:	4798      	blx	r3
   2da62:	0003      	movs	r3, r0
   2da64:	2201      	movs	r2, #1
   2da66:	0031      	movs	r1, r6
   2da68:	0028      	movs	r0, r5
   2da6a:	47a0      	blx	r4
   2da6c:	0003      	movs	r3, r0
   2da6e:	2b01      	cmp	r3, #1
   2da70:	d141      	bne.n	2daf6 <readPacket+0xca>
        goto exit;

    len = 1;
   2da72:	2301      	movs	r3, #1
   2da74:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2da76:	683b      	ldr	r3, [r7, #0]
   2da78:	0018      	movs	r0, r3
   2da7a:	4b24      	ldr	r3, [pc, #144]	; (2db0c <readPacket+0xe0>)
   2da7c:	4798      	blx	r3
   2da7e:	0002      	movs	r2, r0
   2da80:	2308      	movs	r3, #8
   2da82:	18f9      	adds	r1, r7, r3
   2da84:	687b      	ldr	r3, [r7, #4]
   2da86:	0018      	movs	r0, r3
   2da88:	4b21      	ldr	r3, [pc, #132]	; (2db10 <readPacket+0xe4>)
   2da8a:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2da8c:	687b      	ldr	r3, [r7, #4]
   2da8e:	695b      	ldr	r3, [r3, #20]
   2da90:	3301      	adds	r3, #1
   2da92:	68ba      	ldr	r2, [r7, #8]
   2da94:	0011      	movs	r1, r2
   2da96:	0018      	movs	r0, r3
   2da98:	4b1e      	ldr	r3, [pc, #120]	; (2db14 <readPacket+0xe8>)
   2da9a:	4798      	blx	r3
   2da9c:	0002      	movs	r2, r0
   2da9e:	693b      	ldr	r3, [r7, #16]
   2daa0:	189b      	adds	r3, r3, r2
   2daa2:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2daa4:	68bb      	ldr	r3, [r7, #8]
   2daa6:	2b00      	cmp	r3, #0
   2daa8:	dd17      	ble.n	2dada <readPacket+0xae>
   2daaa:	687b      	ldr	r3, [r7, #4]
   2daac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2daae:	689c      	ldr	r4, [r3, #8]
   2dab0:	687b      	ldr	r3, [r7, #4]
   2dab2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2dab4:	687b      	ldr	r3, [r7, #4]
   2dab6:	695a      	ldr	r2, [r3, #20]
   2dab8:	693b      	ldr	r3, [r7, #16]
   2daba:	18d6      	adds	r6, r2, r3
   2dabc:	68bb      	ldr	r3, [r7, #8]
   2dabe:	4698      	mov	r8, r3
   2dac0:	683b      	ldr	r3, [r7, #0]
   2dac2:	0018      	movs	r0, r3
   2dac4:	4b11      	ldr	r3, [pc, #68]	; (2db0c <readPacket+0xe0>)
   2dac6:	4798      	blx	r3
   2dac8:	0003      	movs	r3, r0
   2daca:	4642      	mov	r2, r8
   2dacc:	0031      	movs	r1, r6
   2dace:	0028      	movs	r0, r5
   2dad0:	47a0      	blx	r4
   2dad2:	0002      	movs	r2, r0
   2dad4:	68bb      	ldr	r3, [r7, #8]
   2dad6:	429a      	cmp	r2, r3
   2dad8:	d10f      	bne.n	2dafa <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2dada:	687b      	ldr	r3, [r7, #4]
   2dadc:	695b      	ldr	r3, [r3, #20]
   2dade:	781a      	ldrb	r2, [r3, #0]
   2dae0:	230c      	movs	r3, #12
   2dae2:	18fb      	adds	r3, r7, r3
   2dae4:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2dae6:	230c      	movs	r3, #12
   2dae8:	18fb      	adds	r3, r7, r3
   2daea:	781b      	ldrb	r3, [r3, #0]
   2daec:	061b      	lsls	r3, r3, #24
   2daee:	0f1b      	lsrs	r3, r3, #28
   2daf0:	b2db      	uxtb	r3, r3
   2daf2:	617b      	str	r3, [r7, #20]
   2daf4:	e002      	b.n	2dafc <readPacket+0xd0>
        goto exit;
   2daf6:	46c0      	nop			; (mov r8, r8)
   2daf8:	e000      	b.n	2dafc <readPacket+0xd0>
        goto exit;
   2dafa:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2dafc:	697b      	ldr	r3, [r7, #20]
}
   2dafe:	0018      	movs	r0, r3
   2db00:	46bd      	mov	sp, r7
   2db02:	b006      	add	sp, #24
   2db04:	bc04      	pop	{r2}
   2db06:	4690      	mov	r8, r2
   2db08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2db0a:	46c0      	nop			; (mov r8, r8)
   2db0c:	0002e6d1 	.word	0x0002e6d1
   2db10:	0002d999 	.word	0x0002d999
   2db14:	0002f4a9 	.word	0x0002f4a9

0002db18 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2db18:	b580      	push	{r7, lr}
   2db1a:	b086      	sub	sp, #24
   2db1c:	af00      	add	r7, sp, #0
   2db1e:	6078      	str	r0, [r7, #4]
   2db20:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2db22:	687b      	ldr	r3, [r7, #4]
   2db24:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2db26:	683b      	ldr	r3, [r7, #0]
   2db28:	689b      	ldr	r3, [r3, #8]
   2db2a:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2db2c:	683b      	ldr	r3, [r7, #0]
   2db2e:	685b      	ldr	r3, [r3, #4]
   2db30:	001a      	movs	r2, r3
   2db32:	693b      	ldr	r3, [r7, #16]
   2db34:	189b      	adds	r3, r3, r2
   2db36:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2db38:	e039      	b.n	2dbae <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2db3a:	693b      	ldr	r3, [r7, #16]
   2db3c:	781b      	ldrb	r3, [r3, #0]
   2db3e:	2b2f      	cmp	r3, #47	; 0x2f
   2db40:	d103      	bne.n	2db4a <isTopicMatched+0x32>
   2db42:	697b      	ldr	r3, [r7, #20]
   2db44:	781b      	ldrb	r3, [r3, #0]
   2db46:	2b2f      	cmp	r3, #47	; 0x2f
   2db48:	d13a      	bne.n	2dbc0 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2db4a:	697b      	ldr	r3, [r7, #20]
   2db4c:	781b      	ldrb	r3, [r3, #0]
   2db4e:	2b2b      	cmp	r3, #43	; 0x2b
   2db50:	d009      	beq.n	2db66 <isTopicMatched+0x4e>
   2db52:	697b      	ldr	r3, [r7, #20]
   2db54:	781b      	ldrb	r3, [r3, #0]
   2db56:	2b23      	cmp	r3, #35	; 0x23
   2db58:	d005      	beq.n	2db66 <isTopicMatched+0x4e>
   2db5a:	697b      	ldr	r3, [r7, #20]
   2db5c:	781a      	ldrb	r2, [r3, #0]
   2db5e:	693b      	ldr	r3, [r7, #16]
   2db60:	781b      	ldrb	r3, [r3, #0]
   2db62:	429a      	cmp	r2, r3
   2db64:	d12e      	bne.n	2dbc4 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2db66:	697b      	ldr	r3, [r7, #20]
   2db68:	781b      	ldrb	r3, [r3, #0]
   2db6a:	2b2b      	cmp	r3, #43	; 0x2b
   2db6c:	d112      	bne.n	2db94 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2db6e:	693b      	ldr	r3, [r7, #16]
   2db70:	3301      	adds	r3, #1
   2db72:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2db74:	e005      	b.n	2db82 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2db76:	693b      	ldr	r3, [r7, #16]
   2db78:	3301      	adds	r3, #1
   2db7a:	613b      	str	r3, [r7, #16]
   2db7c:	693b      	ldr	r3, [r7, #16]
   2db7e:	3301      	adds	r3, #1
   2db80:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2db82:	68fa      	ldr	r2, [r7, #12]
   2db84:	68bb      	ldr	r3, [r7, #8]
   2db86:	429a      	cmp	r2, r3
   2db88:	d20b      	bcs.n	2dba2 <isTopicMatched+0x8a>
   2db8a:	68fb      	ldr	r3, [r7, #12]
   2db8c:	781b      	ldrb	r3, [r3, #0]
   2db8e:	2b2f      	cmp	r3, #47	; 0x2f
   2db90:	d1f1      	bne.n	2db76 <isTopicMatched+0x5e>
   2db92:	e006      	b.n	2dba2 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2db94:	697b      	ldr	r3, [r7, #20]
   2db96:	781b      	ldrb	r3, [r3, #0]
   2db98:	2b23      	cmp	r3, #35	; 0x23
   2db9a:	d102      	bne.n	2dba2 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2db9c:	68bb      	ldr	r3, [r7, #8]
   2db9e:	3b01      	subs	r3, #1
   2dba0:	613b      	str	r3, [r7, #16]
        curf++;
   2dba2:	697b      	ldr	r3, [r7, #20]
   2dba4:	3301      	adds	r3, #1
   2dba6:	617b      	str	r3, [r7, #20]
        curn++;
   2dba8:	693b      	ldr	r3, [r7, #16]
   2dbaa:	3301      	adds	r3, #1
   2dbac:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2dbae:	697b      	ldr	r3, [r7, #20]
   2dbb0:	781b      	ldrb	r3, [r3, #0]
   2dbb2:	2b00      	cmp	r3, #0
   2dbb4:	d007      	beq.n	2dbc6 <isTopicMatched+0xae>
   2dbb6:	693a      	ldr	r2, [r7, #16]
   2dbb8:	68bb      	ldr	r3, [r7, #8]
   2dbba:	429a      	cmp	r2, r3
   2dbbc:	d3bd      	bcc.n	2db3a <isTopicMatched+0x22>
   2dbbe:	e002      	b.n	2dbc6 <isTopicMatched+0xae>
            break;
   2dbc0:	46c0      	nop			; (mov r8, r8)
   2dbc2:	e000      	b.n	2dbc6 <isTopicMatched+0xae>
            break;
   2dbc4:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2dbc6:	693a      	ldr	r2, [r7, #16]
   2dbc8:	68bb      	ldr	r3, [r7, #8]
   2dbca:	429a      	cmp	r2, r3
   2dbcc:	d105      	bne.n	2dbda <isTopicMatched+0xc2>
   2dbce:	697b      	ldr	r3, [r7, #20]
   2dbd0:	781b      	ldrb	r3, [r3, #0]
   2dbd2:	2b00      	cmp	r3, #0
   2dbd4:	d101      	bne.n	2dbda <isTopicMatched+0xc2>
   2dbd6:	2301      	movs	r3, #1
   2dbd8:	e000      	b.n	2dbdc <isTopicMatched+0xc4>
   2dbda:	2300      	movs	r3, #0
   2dbdc:	b2db      	uxtb	r3, r3
}
   2dbde:	0018      	movs	r0, r3
   2dbe0:	46bd      	mov	sp, r7
   2dbe2:	b006      	add	sp, #24
   2dbe4:	bd80      	pop	{r7, pc}
	...

0002dbe8 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2dbe8:	b580      	push	{r7, lr}
   2dbea:	b08a      	sub	sp, #40	; 0x28
   2dbec:	af00      	add	r7, sp, #0
   2dbee:	60f8      	str	r0, [r7, #12]
   2dbf0:	60b9      	str	r1, [r7, #8]
   2dbf2:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2dbf4:	2301      	movs	r3, #1
   2dbf6:	425b      	negs	r3, r3
   2dbf8:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2dbfa:	2300      	movs	r3, #0
   2dbfc:	627b      	str	r3, [r7, #36]	; 0x24
   2dbfe:	e044      	b.n	2dc8a <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2dc00:	68fa      	ldr	r2, [r7, #12]
   2dc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dc04:	3304      	adds	r3, #4
   2dc06:	00db      	lsls	r3, r3, #3
   2dc08:	18d3      	adds	r3, r2, r3
   2dc0a:	3304      	adds	r3, #4
   2dc0c:	681b      	ldr	r3, [r3, #0]
   2dc0e:	2b00      	cmp	r3, #0
   2dc10:	d038      	beq.n	2dc84 <deliverMessage+0x9c>
   2dc12:	68fa      	ldr	r2, [r7, #12]
   2dc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dc16:	3304      	adds	r3, #4
   2dc18:	00db      	lsls	r3, r3, #3
   2dc1a:	18d3      	adds	r3, r2, r3
   2dc1c:	3304      	adds	r3, #4
   2dc1e:	681a      	ldr	r2, [r3, #0]
   2dc20:	68bb      	ldr	r3, [r7, #8]
   2dc22:	0011      	movs	r1, r2
   2dc24:	0018      	movs	r0, r3
   2dc26:	4b28      	ldr	r3, [pc, #160]	; (2dcc8 <deliverMessage+0xe0>)
   2dc28:	4798      	blx	r3
   2dc2a:	1e03      	subs	r3, r0, #0
   2dc2c:	d10d      	bne.n	2dc4a <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2dc2e:	68fa      	ldr	r2, [r7, #12]
   2dc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dc32:	3304      	adds	r3, #4
   2dc34:	00db      	lsls	r3, r3, #3
   2dc36:	18d3      	adds	r3, r2, r3
   2dc38:	3304      	adds	r3, #4
   2dc3a:	681b      	ldr	r3, [r3, #0]
   2dc3c:	68ba      	ldr	r2, [r7, #8]
   2dc3e:	0011      	movs	r1, r2
   2dc40:	0018      	movs	r0, r3
   2dc42:	4b22      	ldr	r3, [pc, #136]	; (2dccc <deliverMessage+0xe4>)
   2dc44:	4798      	blx	r3
   2dc46:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2dc48:	d01c      	beq.n	2dc84 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2dc4a:	68fa      	ldr	r2, [r7, #12]
   2dc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dc4e:	3304      	adds	r3, #4
   2dc50:	00db      	lsls	r3, r3, #3
   2dc52:	18d3      	adds	r3, r2, r3
   2dc54:	3308      	adds	r3, #8
   2dc56:	681b      	ldr	r3, [r3, #0]
   2dc58:	2b00      	cmp	r3, #0
   2dc5a:	d013      	beq.n	2dc84 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2dc5c:	687a      	ldr	r2, [r7, #4]
   2dc5e:	68b9      	ldr	r1, [r7, #8]
   2dc60:	2318      	movs	r3, #24
   2dc62:	18fb      	adds	r3, r7, r3
   2dc64:	0018      	movs	r0, r3
   2dc66:	4b1a      	ldr	r3, [pc, #104]	; (2dcd0 <deliverMessage+0xe8>)
   2dc68:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2dc6a:	68fa      	ldr	r2, [r7, #12]
   2dc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dc6e:	3304      	adds	r3, #4
   2dc70:	00db      	lsls	r3, r3, #3
   2dc72:	18d3      	adds	r3, r2, r3
   2dc74:	3308      	adds	r3, #8
   2dc76:	681b      	ldr	r3, [r3, #0]
   2dc78:	2218      	movs	r2, #24
   2dc7a:	18ba      	adds	r2, r7, r2
   2dc7c:	0010      	movs	r0, r2
   2dc7e:	4798      	blx	r3
                rc = SUCCESS;
   2dc80:	2300      	movs	r3, #0
   2dc82:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2dc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dc86:	3301      	adds	r3, #1
   2dc88:	627b      	str	r3, [r7, #36]	; 0x24
   2dc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2dc8c:	2b04      	cmp	r3, #4
   2dc8e:	ddb7      	ble.n	2dc00 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2dc90:	6a3b      	ldr	r3, [r7, #32]
   2dc92:	3301      	adds	r3, #1
   2dc94:	d112      	bne.n	2dcbc <deliverMessage+0xd4>
   2dc96:	68fb      	ldr	r3, [r7, #12]
   2dc98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2dc9a:	2b00      	cmp	r3, #0
   2dc9c:	d00e      	beq.n	2dcbc <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2dc9e:	687a      	ldr	r2, [r7, #4]
   2dca0:	68b9      	ldr	r1, [r7, #8]
   2dca2:	2310      	movs	r3, #16
   2dca4:	18fb      	adds	r3, r7, r3
   2dca6:	0018      	movs	r0, r3
   2dca8:	4b09      	ldr	r3, [pc, #36]	; (2dcd0 <deliverMessage+0xe8>)
   2dcaa:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2dcac:	68fb      	ldr	r3, [r7, #12]
   2dcae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2dcb0:	2210      	movs	r2, #16
   2dcb2:	18ba      	adds	r2, r7, r2
   2dcb4:	0010      	movs	r0, r2
   2dcb6:	4798      	blx	r3
        rc = SUCCESS;
   2dcb8:	2300      	movs	r3, #0
   2dcba:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2dcbc:	6a3b      	ldr	r3, [r7, #32]
}
   2dcbe:	0018      	movs	r0, r3
   2dcc0:	46bd      	mov	sp, r7
   2dcc2:	b00a      	add	sp, #40	; 0x28
   2dcc4:	bd80      	pop	{r7, pc}
   2dcc6:	46c0      	nop			; (mov r8, r8)
   2dcc8:	0002f8bd 	.word	0x0002f8bd
   2dccc:	0002db19 	.word	0x0002db19
   2dcd0:	0002d821 	.word	0x0002d821

0002dcd4 <keepalive>:


int keepalive(MQTTClient* c)
{
   2dcd4:	b580      	push	{r7, lr}
   2dcd6:	b088      	sub	sp, #32
   2dcd8:	af00      	add	r7, sp, #0
   2dcda:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2dcdc:	2301      	movs	r3, #1
   2dcde:	425b      	negs	r3, r3
   2dce0:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2dce2:	687b      	ldr	r3, [r7, #4]
   2dce4:	699b      	ldr	r3, [r3, #24]
   2dce6:	2b00      	cmp	r3, #0
   2dce8:	d102      	bne.n	2dcf0 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2dcea:	2300      	movs	r3, #0
   2dcec:	61fb      	str	r3, [r7, #28]
        goto exit;
   2dcee:	e033      	b.n	2dd58 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2dcf0:	687b      	ldr	r3, [r7, #4]
   2dcf2:	3354      	adds	r3, #84	; 0x54
   2dcf4:	0018      	movs	r0, r3
   2dcf6:	4b1b      	ldr	r3, [pc, #108]	; (2dd64 <keepalive+0x90>)
   2dcf8:	4798      	blx	r3
   2dcfa:	1e03      	subs	r3, r0, #0
   2dcfc:	d02c      	beq.n	2dd58 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2dcfe:	687b      	ldr	r3, [r7, #4]
   2dd00:	7f1b      	ldrb	r3, [r3, #28]
   2dd02:	2b00      	cmp	r3, #0
   2dd04:	d128      	bne.n	2dd58 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2dd06:	230c      	movs	r3, #12
   2dd08:	18fb      	adds	r3, r7, r3
   2dd0a:	0018      	movs	r0, r3
   2dd0c:	4b16      	ldr	r3, [pc, #88]	; (2dd68 <keepalive+0x94>)
   2dd0e:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2dd10:	23fa      	movs	r3, #250	; 0xfa
   2dd12:	009a      	lsls	r2, r3, #2
   2dd14:	230c      	movs	r3, #12
   2dd16:	18fb      	adds	r3, r7, r3
   2dd18:	0011      	movs	r1, r2
   2dd1a:	0018      	movs	r0, r3
   2dd1c:	4b13      	ldr	r3, [pc, #76]	; (2dd6c <keepalive+0x98>)
   2dd1e:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2dd20:	687b      	ldr	r3, [r7, #4]
   2dd22:	691a      	ldr	r2, [r3, #16]
   2dd24:	687b      	ldr	r3, [r7, #4]
   2dd26:	689b      	ldr	r3, [r3, #8]
   2dd28:	0019      	movs	r1, r3
   2dd2a:	0010      	movs	r0, r2
   2dd2c:	4b10      	ldr	r3, [pc, #64]	; (2dd70 <keepalive+0x9c>)
   2dd2e:	4798      	blx	r3
   2dd30:	0003      	movs	r3, r0
   2dd32:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2dd34:	69bb      	ldr	r3, [r7, #24]
   2dd36:	2b00      	cmp	r3, #0
   2dd38:	dd0e      	ble.n	2dd58 <keepalive+0x84>
   2dd3a:	230c      	movs	r3, #12
   2dd3c:	18fa      	adds	r2, r7, r3
   2dd3e:	69b9      	ldr	r1, [r7, #24]
   2dd40:	687b      	ldr	r3, [r7, #4]
   2dd42:	0018      	movs	r0, r3
   2dd44:	4b0b      	ldr	r3, [pc, #44]	; (2dd74 <keepalive+0xa0>)
   2dd46:	4798      	blx	r3
   2dd48:	0003      	movs	r3, r0
   2dd4a:	61fb      	str	r3, [r7, #28]
   2dd4c:	69fb      	ldr	r3, [r7, #28]
   2dd4e:	2b00      	cmp	r3, #0
   2dd50:	d102      	bne.n	2dd58 <keepalive+0x84>
                c->ping_outstanding = 1;
   2dd52:	687b      	ldr	r3, [r7, #4]
   2dd54:	2201      	movs	r2, #1
   2dd56:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2dd58:	69fb      	ldr	r3, [r7, #28]
}
   2dd5a:	0018      	movs	r0, r3
   2dd5c:	46bd      	mov	sp, r7
   2dd5e:	b008      	add	sp, #32
   2dd60:	bd80      	pop	{r7, pc}
   2dd62:	46c0      	nop			; (mov r8, r8)
   2dd64:	0002e655 	.word	0x0002e655
   2dd68:	0002e6f9 	.word	0x0002e6f9
   2dd6c:	0002e681 	.word	0x0002e681
   2dd70:	0002f2cd 	.word	0x0002f2cd
   2dd74:	0002d871 	.word	0x0002d871

0002dd78 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2dd78:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dd7a:	b095      	sub	sp, #84	; 0x54
   2dd7c:	af06      	add	r7, sp, #24
   2dd7e:	6078      	str	r0, [r7, #4]
   2dd80:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2dd82:	683a      	ldr	r2, [r7, #0]
   2dd84:	687b      	ldr	r3, [r7, #4]
   2dd86:	0011      	movs	r1, r2
   2dd88:	0018      	movs	r0, r3
   2dd8a:	4b70      	ldr	r3, [pc, #448]	; (2df4c <cycle+0x1d4>)
   2dd8c:	4798      	blx	r3
   2dd8e:	0002      	movs	r2, r0
   2dd90:	232e      	movs	r3, #46	; 0x2e
   2dd92:	18fb      	adds	r3, r7, r3
   2dd94:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2dd96:	2300      	movs	r3, #0
   2dd98:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2dd9a:	2300      	movs	r3, #0
   2dd9c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2dd9e:	232e      	movs	r3, #46	; 0x2e
   2dda0:	18fb      	adds	r3, r7, r3
   2dda2:	881b      	ldrh	r3, [r3, #0]
   2dda4:	2b0d      	cmp	r3, #13
   2dda6:	d900      	bls.n	2ddaa <cycle+0x32>
   2dda8:	e0bd      	b.n	2df26 <cycle+0x1ae>
   2ddaa:	009a      	lsls	r2, r3, #2
   2ddac:	4b68      	ldr	r3, [pc, #416]	; (2df50 <cycle+0x1d8>)
   2ddae:	18d3      	adds	r3, r2, r3
   2ddb0:	681b      	ldr	r3, [r3, #0]
   2ddb2:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2ddb4:	687b      	ldr	r3, [r7, #4]
   2ddb6:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2ddb8:	687b      	ldr	r3, [r7, #4]
   2ddba:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2ddbc:	001e      	movs	r6, r3
   2ddbe:	2310      	movs	r3, #16
   2ddc0:	18fb      	adds	r3, r7, r3
   2ddc2:	1d1d      	adds	r5, r3, #4
   2ddc4:	2310      	movs	r3, #16
   2ddc6:	18fb      	adds	r3, r7, r3
   2ddc8:	1c5c      	adds	r4, r3, #1
   2ddca:	230c      	movs	r3, #12
   2ddcc:	18f9      	adds	r1, r7, r3
   2ddce:	2310      	movs	r3, #16
   2ddd0:	18fb      	adds	r3, r7, r3
   2ddd2:	1c98      	adds	r0, r3, #2
   2ddd4:	9604      	str	r6, [sp, #16]
   2ddd6:	9203      	str	r2, [sp, #12]
   2ddd8:	2310      	movs	r3, #16
   2ddda:	18fb      	adds	r3, r7, r3
   2dddc:	330c      	adds	r3, #12
   2ddde:	9302      	str	r3, [sp, #8]
   2dde0:	2310      	movs	r3, #16
   2dde2:	18fb      	adds	r3, r7, r3
   2dde4:	3308      	adds	r3, #8
   2dde6:	9301      	str	r3, [sp, #4]
   2dde8:	2320      	movs	r3, #32
   2ddea:	18fb      	adds	r3, r7, r3
   2ddec:	9300      	str	r3, [sp, #0]
   2ddee:	002b      	movs	r3, r5
   2ddf0:	0022      	movs	r2, r4
   2ddf2:	4c58      	ldr	r4, [pc, #352]	; (2df54 <cycle+0x1dc>)
   2ddf4:	47a0      	blx	r4
   2ddf6:	0003      	movs	r3, r0
   2ddf8:	2b01      	cmp	r3, #1
   2ddfa:	d000      	beq.n	2ddfe <cycle+0x86>
   2ddfc:	e098      	b.n	2df30 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2ddfe:	68fb      	ldr	r3, [r7, #12]
   2de00:	b2da      	uxtb	r2, r3
   2de02:	2310      	movs	r3, #16
   2de04:	18fb      	adds	r3, r7, r3
   2de06:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2de08:	2310      	movs	r3, #16
   2de0a:	18fa      	adds	r2, r7, r3
   2de0c:	2320      	movs	r3, #32
   2de0e:	18f9      	adds	r1, r7, r3
   2de10:	687b      	ldr	r3, [r7, #4]
   2de12:	0018      	movs	r0, r3
   2de14:	4b50      	ldr	r3, [pc, #320]	; (2df58 <cycle+0x1e0>)
   2de16:	4798      	blx	r3
            if (msg.qos != QOS0)
   2de18:	2310      	movs	r3, #16
   2de1a:	18fb      	adds	r3, r7, r3
   2de1c:	781b      	ldrb	r3, [r3, #0]
   2de1e:	2b00      	cmp	r3, #0
   2de20:	d100      	bne.n	2de24 <cycle+0xac>
   2de22:	e07d      	b.n	2df20 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2de24:	2310      	movs	r3, #16
   2de26:	18fb      	adds	r3, r7, r3
   2de28:	781b      	ldrb	r3, [r3, #0]
   2de2a:	2b01      	cmp	r3, #1
   2de2c:	d10f      	bne.n	2de4e <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2de2e:	687b      	ldr	r3, [r7, #4]
   2de30:	6918      	ldr	r0, [r3, #16]
   2de32:	687b      	ldr	r3, [r7, #4]
   2de34:	689b      	ldr	r3, [r3, #8]
   2de36:	0019      	movs	r1, r3
   2de38:	2310      	movs	r3, #16
   2de3a:	18fb      	adds	r3, r7, r3
   2de3c:	889b      	ldrh	r3, [r3, #4]
   2de3e:	9300      	str	r3, [sp, #0]
   2de40:	2300      	movs	r3, #0
   2de42:	2204      	movs	r2, #4
   2de44:	4c45      	ldr	r4, [pc, #276]	; (2df5c <cycle+0x1e4>)
   2de46:	47a0      	blx	r4
   2de48:	0003      	movs	r3, r0
   2de4a:	637b      	str	r3, [r7, #52]	; 0x34
   2de4c:	e013      	b.n	2de76 <cycle+0xfe>
                else if (msg.qos == QOS2)
   2de4e:	2310      	movs	r3, #16
   2de50:	18fb      	adds	r3, r7, r3
   2de52:	781b      	ldrb	r3, [r3, #0]
   2de54:	2b02      	cmp	r3, #2
   2de56:	d10e      	bne.n	2de76 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2de58:	687b      	ldr	r3, [r7, #4]
   2de5a:	6918      	ldr	r0, [r3, #16]
   2de5c:	687b      	ldr	r3, [r7, #4]
   2de5e:	689b      	ldr	r3, [r3, #8]
   2de60:	0019      	movs	r1, r3
   2de62:	2310      	movs	r3, #16
   2de64:	18fb      	adds	r3, r7, r3
   2de66:	889b      	ldrh	r3, [r3, #4]
   2de68:	9300      	str	r3, [sp, #0]
   2de6a:	2300      	movs	r3, #0
   2de6c:	2205      	movs	r2, #5
   2de6e:	4c3b      	ldr	r4, [pc, #236]	; (2df5c <cycle+0x1e4>)
   2de70:	47a0      	blx	r4
   2de72:	0003      	movs	r3, r0
   2de74:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2de76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2de78:	2b00      	cmp	r3, #0
   2de7a:	dc03      	bgt.n	2de84 <cycle+0x10c>
                    rc = FAILURE;
   2de7c:	2301      	movs	r3, #1
   2de7e:	425b      	negs	r3, r3
   2de80:	633b      	str	r3, [r7, #48]	; 0x30
   2de82:	e007      	b.n	2de94 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2de84:	683a      	ldr	r2, [r7, #0]
   2de86:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2de88:	687b      	ldr	r3, [r7, #4]
   2de8a:	0018      	movs	r0, r3
   2de8c:	4b34      	ldr	r3, [pc, #208]	; (2df60 <cycle+0x1e8>)
   2de8e:	4798      	blx	r3
   2de90:	0003      	movs	r3, r0
   2de92:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2de94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2de96:	3301      	adds	r3, #1
   2de98:	d142      	bne.n	2df20 <cycle+0x1a8>
                    goto exit; // there was a problem
   2de9a:	46c0      	nop			; (mov r8, r8)
   2de9c:	e049      	b.n	2df32 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2de9e:	687b      	ldr	r3, [r7, #4]
   2dea0:	695c      	ldr	r4, [r3, #20]
   2dea2:	687b      	ldr	r3, [r7, #4]
   2dea4:	68db      	ldr	r3, [r3, #12]
   2dea6:	220a      	movs	r2, #10
   2dea8:	18ba      	adds	r2, r7, r2
   2deaa:	2109      	movs	r1, #9
   2deac:	1879      	adds	r1, r7, r1
   2deae:	2008      	movs	r0, #8
   2deb0:	1838      	adds	r0, r7, r0
   2deb2:	9300      	str	r3, [sp, #0]
   2deb4:	0023      	movs	r3, r4
   2deb6:	4c2b      	ldr	r4, [pc, #172]	; (2df64 <cycle+0x1ec>)
   2deb8:	47a0      	blx	r4
   2deba:	0003      	movs	r3, r0
   2debc:	2b01      	cmp	r3, #1
   2debe:	d003      	beq.n	2dec8 <cycle+0x150>
                rc = FAILURE;
   2dec0:	2301      	movs	r3, #1
   2dec2:	425b      	negs	r3, r3
   2dec4:	633b      	str	r3, [r7, #48]	; 0x30
   2dec6:	e023      	b.n	2df10 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2dec8:	687b      	ldr	r3, [r7, #4]
   2deca:	6918      	ldr	r0, [r3, #16]
   2decc:	687b      	ldr	r3, [r7, #4]
   2dece:	689b      	ldr	r3, [r3, #8]
   2ded0:	0019      	movs	r1, r3
   2ded2:	230a      	movs	r3, #10
   2ded4:	18fb      	adds	r3, r7, r3
   2ded6:	881b      	ldrh	r3, [r3, #0]
   2ded8:	9300      	str	r3, [sp, #0]
   2deda:	2300      	movs	r3, #0
   2dedc:	2206      	movs	r2, #6
   2dede:	4c1f      	ldr	r4, [pc, #124]	; (2df5c <cycle+0x1e4>)
   2dee0:	47a0      	blx	r4
   2dee2:	0003      	movs	r3, r0
   2dee4:	637b      	str	r3, [r7, #52]	; 0x34
   2dee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2dee8:	2b00      	cmp	r3, #0
   2deea:	dc03      	bgt.n	2def4 <cycle+0x17c>
                rc = FAILURE;
   2deec:	2301      	movs	r3, #1
   2deee:	425b      	negs	r3, r3
   2def0:	633b      	str	r3, [r7, #48]	; 0x30
   2def2:	e00d      	b.n	2df10 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2def4:	683a      	ldr	r2, [r7, #0]
   2def6:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2def8:	687b      	ldr	r3, [r7, #4]
   2defa:	0018      	movs	r0, r3
   2defc:	4b18      	ldr	r3, [pc, #96]	; (2df60 <cycle+0x1e8>)
   2defe:	4798      	blx	r3
   2df00:	0003      	movs	r3, r0
   2df02:	633b      	str	r3, [r7, #48]	; 0x30
   2df04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2df06:	2b00      	cmp	r3, #0
   2df08:	d002      	beq.n	2df10 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2df0a:	2301      	movs	r3, #1
   2df0c:	425b      	negs	r3, r3
   2df0e:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2df10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2df12:	3301      	adds	r3, #1
   2df14:	d106      	bne.n	2df24 <cycle+0x1ac>
                goto exit; // there was a problem
   2df16:	e00c      	b.n	2df32 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2df18:	687b      	ldr	r3, [r7, #4]
   2df1a:	2200      	movs	r2, #0
   2df1c:	771a      	strb	r2, [r3, #28]
            break;
   2df1e:	e002      	b.n	2df26 <cycle+0x1ae>
            break;
   2df20:	46c0      	nop			; (mov r8, r8)
   2df22:	e000      	b.n	2df26 <cycle+0x1ae>
            break;
   2df24:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2df26:	687b      	ldr	r3, [r7, #4]
   2df28:	0018      	movs	r0, r3
   2df2a:	4b0f      	ldr	r3, [pc, #60]	; (2df68 <cycle+0x1f0>)
   2df2c:	4798      	blx	r3
   2df2e:	e000      	b.n	2df32 <cycle+0x1ba>
                goto exit;
   2df30:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2df32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2df34:	2b00      	cmp	r3, #0
   2df36:	d103      	bne.n	2df40 <cycle+0x1c8>
        rc = packet_type;
   2df38:	232e      	movs	r3, #46	; 0x2e
   2df3a:	18fb      	adds	r3, r7, r3
   2df3c:	881b      	ldrh	r3, [r3, #0]
   2df3e:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2df40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2df42:	0018      	movs	r0, r3
   2df44:	46bd      	mov	sp, r7
   2df46:	b00f      	add	sp, #60	; 0x3c
   2df48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2df4a:	46c0      	nop			; (mov r8, r8)
   2df4c:	0002da2d 	.word	0x0002da2d
   2df50:	00038990 	.word	0x00038990
   2df54:	0002f2f1 	.word	0x0002f2f1
   2df58:	0002dbe9 	.word	0x0002dbe9
   2df5c:	0002fae9 	.word	0x0002fae9
   2df60:	0002d871 	.word	0x0002d871
   2df64:	0002f3f5 	.word	0x0002f3f5
   2df68:	0002dcd5 	.word	0x0002dcd5

0002df6c <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2df6c:	b580      	push	{r7, lr}
   2df6e:	b086      	sub	sp, #24
   2df70:	af00      	add	r7, sp, #0
   2df72:	6078      	str	r0, [r7, #4]
   2df74:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2df76:	2300      	movs	r3, #0
   2df78:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2df7a:	2308      	movs	r3, #8
   2df7c:	18fb      	adds	r3, r7, r3
   2df7e:	0018      	movs	r0, r3
   2df80:	4b11      	ldr	r3, [pc, #68]	; (2dfc8 <MQTTYield+0x5c>)
   2df82:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2df84:	683a      	ldr	r2, [r7, #0]
   2df86:	2308      	movs	r3, #8
   2df88:	18fb      	adds	r3, r7, r3
   2df8a:	0011      	movs	r1, r2
   2df8c:	0018      	movs	r0, r3
   2df8e:	4b0f      	ldr	r3, [pc, #60]	; (2dfcc <MQTTYield+0x60>)
   2df90:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2df92:	2308      	movs	r3, #8
   2df94:	18fa      	adds	r2, r7, r3
   2df96:	687b      	ldr	r3, [r7, #4]
   2df98:	0011      	movs	r1, r2
   2df9a:	0018      	movs	r0, r3
   2df9c:	4b0c      	ldr	r3, [pc, #48]	; (2dfd0 <MQTTYield+0x64>)
   2df9e:	4798      	blx	r3
   2dfa0:	0003      	movs	r3, r0
   2dfa2:	3301      	adds	r3, #1
   2dfa4:	d103      	bne.n	2dfae <MQTTYield+0x42>
        {
            rc = FAILURE;
   2dfa6:	2301      	movs	r3, #1
   2dfa8:	425b      	negs	r3, r3
   2dfaa:	617b      	str	r3, [r7, #20]
            break;
   2dfac:	e006      	b.n	2dfbc <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2dfae:	2308      	movs	r3, #8
   2dfb0:	18fb      	adds	r3, r7, r3
   2dfb2:	0018      	movs	r0, r3
   2dfb4:	4b07      	ldr	r3, [pc, #28]	; (2dfd4 <MQTTYield+0x68>)
   2dfb6:	4798      	blx	r3
   2dfb8:	1e03      	subs	r3, r0, #0
   2dfba:	d0ea      	beq.n	2df92 <MQTTYield+0x26>
        
    return rc;
   2dfbc:	697b      	ldr	r3, [r7, #20]
}
   2dfbe:	0018      	movs	r0, r3
   2dfc0:	46bd      	mov	sp, r7
   2dfc2:	b006      	add	sp, #24
   2dfc4:	bd80      	pop	{r7, pc}
   2dfc6:	46c0      	nop			; (mov r8, r8)
   2dfc8:	0002e6f9 	.word	0x0002e6f9
   2dfcc:	0002e681 	.word	0x0002e681
   2dfd0:	0002dd79 	.word	0x0002dd79
   2dfd4:	0002e655 	.word	0x0002e655

0002dfd8 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2dfd8:	b580      	push	{r7, lr}
   2dfda:	b086      	sub	sp, #24
   2dfdc:	af00      	add	r7, sp, #0
   2dfde:	60f8      	str	r0, [r7, #12]
   2dfe0:	60b9      	str	r1, [r7, #8]
   2dfe2:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2dfe4:	2301      	movs	r3, #1
   2dfe6:	425b      	negs	r3, r3
   2dfe8:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2dfea:	687b      	ldr	r3, [r7, #4]
   2dfec:	0018      	movs	r0, r3
   2dfee:	4b0b      	ldr	r3, [pc, #44]	; (2e01c <waitfor+0x44>)
   2dff0:	4798      	blx	r3
   2dff2:	1e03      	subs	r3, r0, #0
   2dff4:	d10c      	bne.n	2e010 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2dff6:	687a      	ldr	r2, [r7, #4]
   2dff8:	68fb      	ldr	r3, [r7, #12]
   2dffa:	0011      	movs	r1, r2
   2dffc:	0018      	movs	r0, r3
   2dffe:	4b08      	ldr	r3, [pc, #32]	; (2e020 <waitfor+0x48>)
   2e000:	4798      	blx	r3
   2e002:	0003      	movs	r3, r0
   2e004:	617b      	str	r3, [r7, #20]
   2e006:	697a      	ldr	r2, [r7, #20]
   2e008:	68bb      	ldr	r3, [r7, #8]
   2e00a:	429a      	cmp	r2, r3
   2e00c:	d1ed      	bne.n	2dfea <waitfor+0x12>
   2e00e:	e000      	b.n	2e012 <waitfor+0x3a>
            break; // we timed out
   2e010:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2e012:	697b      	ldr	r3, [r7, #20]
}
   2e014:	0018      	movs	r0, r3
   2e016:	46bd      	mov	sp, r7
   2e018:	b006      	add	sp, #24
   2e01a:	bd80      	pop	{r7, pc}
   2e01c:	0002e655 	.word	0x0002e655
   2e020:	0002dd79 	.word	0x0002dd79

0002e024 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2e024:	b590      	push	{r4, r7, lr}
   2e026:	b09f      	sub	sp, #124	; 0x7c
   2e028:	af00      	add	r7, sp, #0
   2e02a:	6078      	str	r0, [r7, #4]
   2e02c:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2e02e:	2301      	movs	r3, #1
   2e030:	425b      	negs	r3, r3
   2e032:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2e034:	230c      	movs	r3, #12
   2e036:	18fa      	adds	r2, r7, r3
   2e038:	4b41      	ldr	r3, [pc, #260]	; (2e140 <MQTTConnect+0x11c>)
   2e03a:	0010      	movs	r0, r2
   2e03c:	0019      	movs	r1, r3
   2e03e:	2358      	movs	r3, #88	; 0x58
   2e040:	001a      	movs	r2, r3
   2e042:	4b40      	ldr	r3, [pc, #256]	; (2e144 <MQTTConnect+0x120>)
   2e044:	4798      	blx	r3
    int len = 0;
   2e046:	2300      	movs	r3, #0
   2e048:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2e04a:	687b      	ldr	r3, [r7, #4]
   2e04c:	6a1b      	ldr	r3, [r3, #32]
   2e04e:	2b00      	cmp	r3, #0
   2e050:	d166      	bne.n	2e120 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2e052:	2364      	movs	r3, #100	; 0x64
   2e054:	18fb      	adds	r3, r7, r3
   2e056:	0018      	movs	r0, r3
   2e058:	4b3b      	ldr	r3, [pc, #236]	; (2e148 <MQTTConnect+0x124>)
   2e05a:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2e05c:	687b      	ldr	r3, [r7, #4]
   2e05e:	685a      	ldr	r2, [r3, #4]
   2e060:	2364      	movs	r3, #100	; 0x64
   2e062:	18fb      	adds	r3, r7, r3
   2e064:	0011      	movs	r1, r2
   2e066:	0018      	movs	r0, r3
   2e068:	4b38      	ldr	r3, [pc, #224]	; (2e14c <MQTTConnect+0x128>)
   2e06a:	4798      	blx	r3

    if (options == 0)
   2e06c:	683b      	ldr	r3, [r7, #0]
   2e06e:	2b00      	cmp	r3, #0
   2e070:	d102      	bne.n	2e078 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2e072:	230c      	movs	r3, #12
   2e074:	18fb      	adds	r3, r7, r3
   2e076:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2e078:	683b      	ldr	r3, [r7, #0]
   2e07a:	8b1b      	ldrh	r3, [r3, #24]
   2e07c:	001a      	movs	r2, r3
   2e07e:	687b      	ldr	r3, [r7, #4]
   2e080:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2e082:	687b      	ldr	r3, [r7, #4]
   2e084:	3354      	adds	r3, #84	; 0x54
   2e086:	001a      	movs	r2, r3
   2e088:	687b      	ldr	r3, [r7, #4]
   2e08a:	699b      	ldr	r3, [r3, #24]
   2e08c:	0019      	movs	r1, r3
   2e08e:	0010      	movs	r0, r2
   2e090:	4b2f      	ldr	r3, [pc, #188]	; (2e150 <MQTTConnect+0x12c>)
   2e092:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2e094:	687b      	ldr	r3, [r7, #4]
   2e096:	6918      	ldr	r0, [r3, #16]
   2e098:	687b      	ldr	r3, [r7, #4]
   2e09a:	689b      	ldr	r3, [r3, #8]
   2e09c:	0019      	movs	r1, r3
   2e09e:	683b      	ldr	r3, [r7, #0]
   2e0a0:	001a      	movs	r2, r3
   2e0a2:	4b2c      	ldr	r3, [pc, #176]	; (2e154 <MQTTConnect+0x130>)
   2e0a4:	4798      	blx	r3
   2e0a6:	0003      	movs	r3, r0
   2e0a8:	673b      	str	r3, [r7, #112]	; 0x70
   2e0aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2e0ac:	2b00      	cmp	r3, #0
   2e0ae:	dd39      	ble.n	2e124 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2e0b0:	2364      	movs	r3, #100	; 0x64
   2e0b2:	18fa      	adds	r2, r7, r3
   2e0b4:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2e0b6:	687b      	ldr	r3, [r7, #4]
   2e0b8:	0018      	movs	r0, r3
   2e0ba:	4b27      	ldr	r3, [pc, #156]	; (2e158 <MQTTConnect+0x134>)
   2e0bc:	4798      	blx	r3
   2e0be:	0003      	movs	r3, r0
   2e0c0:	677b      	str	r3, [r7, #116]	; 0x74
   2e0c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2e0c4:	2b00      	cmp	r3, #0
   2e0c6:	d12f      	bne.n	2e128 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2e0c8:	2364      	movs	r3, #100	; 0x64
   2e0ca:	18fa      	adds	r2, r7, r3
   2e0cc:	687b      	ldr	r3, [r7, #4]
   2e0ce:	2102      	movs	r1, #2
   2e0d0:	0018      	movs	r0, r3
   2e0d2:	4b22      	ldr	r3, [pc, #136]	; (2e15c <MQTTConnect+0x138>)
   2e0d4:	4798      	blx	r3
   2e0d6:	0003      	movs	r3, r0
   2e0d8:	2b02      	cmp	r3, #2
   2e0da:	d11d      	bne.n	2e118 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2e0dc:	230b      	movs	r3, #11
   2e0de:	18fb      	adds	r3, r7, r3
   2e0e0:	22ff      	movs	r2, #255	; 0xff
   2e0e2:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2e0e4:	230a      	movs	r3, #10
   2e0e6:	18fb      	adds	r3, r7, r3
   2e0e8:	2200      	movs	r2, #0
   2e0ea:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2e0ec:	687b      	ldr	r3, [r7, #4]
   2e0ee:	695a      	ldr	r2, [r3, #20]
   2e0f0:	687b      	ldr	r3, [r7, #4]
   2e0f2:	68db      	ldr	r3, [r3, #12]
   2e0f4:	210b      	movs	r1, #11
   2e0f6:	1879      	adds	r1, r7, r1
   2e0f8:	200a      	movs	r0, #10
   2e0fa:	1838      	adds	r0, r7, r0
   2e0fc:	4c18      	ldr	r4, [pc, #96]	; (2e160 <MQTTConnect+0x13c>)
   2e0fe:	47a0      	blx	r4
   2e100:	0003      	movs	r3, r0
   2e102:	2b01      	cmp	r3, #1
   2e104:	d104      	bne.n	2e110 <MQTTConnect+0xec>
            rc = connack_rc;
   2e106:	230b      	movs	r3, #11
   2e108:	18fb      	adds	r3, r7, r3
   2e10a:	781b      	ldrb	r3, [r3, #0]
   2e10c:	677b      	str	r3, [r7, #116]	; 0x74
   2e10e:	e00c      	b.n	2e12a <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2e110:	2301      	movs	r3, #1
   2e112:	425b      	negs	r3, r3
   2e114:	677b      	str	r3, [r7, #116]	; 0x74
   2e116:	e008      	b.n	2e12a <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2e118:	2301      	movs	r3, #1
   2e11a:	425b      	negs	r3, r3
   2e11c:	677b      	str	r3, [r7, #116]	; 0x74
   2e11e:	e004      	b.n	2e12a <MQTTConnect+0x106>
		goto exit;
   2e120:	46c0      	nop			; (mov r8, r8)
   2e122:	e002      	b.n	2e12a <MQTTConnect+0x106>
        goto exit;
   2e124:	46c0      	nop			; (mov r8, r8)
   2e126:	e000      	b.n	2e12a <MQTTConnect+0x106>
        goto exit; // there was a problem
   2e128:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2e12a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2e12c:	2b00      	cmp	r3, #0
   2e12e:	d102      	bne.n	2e136 <MQTTConnect+0x112>
        c->isconnected = 1;
   2e130:	687b      	ldr	r3, [r7, #4]
   2e132:	2201      	movs	r2, #1
   2e134:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2e136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2e138:	0018      	movs	r0, r3
   2e13a:	46bd      	mov	sp, r7
   2e13c:	b01f      	add	sp, #124	; 0x7c
   2e13e:	bd90      	pop	{r4, r7, pc}
   2e140:	000389c8 	.word	0x000389c8
   2e144:	000339c9 	.word	0x000339c9
   2e148:	0002e6f9 	.word	0x0002e6f9
   2e14c:	0002e681 	.word	0x0002e681
   2e150:	0002e6a9 	.word	0x0002e6a9
   2e154:	0002eed5 	.word	0x0002eed5
   2e158:	0002d871 	.word	0x0002d871
   2e15c:	0002dfd9 	.word	0x0002dfd9
   2e160:	0002f151 	.word	0x0002f151

0002e164 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2e164:	b5b0      	push	{r4, r5, r7, lr}
   2e166:	b096      	sub	sp, #88	; 0x58
   2e168:	af04      	add	r7, sp, #16
   2e16a:	60f8      	str	r0, [r7, #12]
   2e16c:	60b9      	str	r1, [r7, #8]
   2e16e:	603b      	str	r3, [r7, #0]
   2e170:	1dfb      	adds	r3, r7, #7
   2e172:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2e174:	2301      	movs	r3, #1
   2e176:	425b      	negs	r3, r3
   2e178:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2e17a:	2300      	movs	r3, #0
   2e17c:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2e17e:	2324      	movs	r3, #36	; 0x24
   2e180:	18fb      	adds	r3, r7, r3
   2e182:	2200      	movs	r2, #0
   2e184:	601a      	str	r2, [r3, #0]
   2e186:	2324      	movs	r3, #36	; 0x24
   2e188:	18fb      	adds	r3, r7, r3
   2e18a:	2200      	movs	r2, #0
   2e18c:	605a      	str	r2, [r3, #4]
   2e18e:	2324      	movs	r3, #36	; 0x24
   2e190:	18fb      	adds	r3, r7, r3
   2e192:	2200      	movs	r2, #0
   2e194:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2e196:	1dfb      	adds	r3, r7, #7
   2e198:	781b      	ldrb	r3, [r3, #0]
   2e19a:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2e19c:	2324      	movs	r3, #36	; 0x24
   2e19e:	18fb      	adds	r3, r7, r3
   2e1a0:	68ba      	ldr	r2, [r7, #8]
   2e1a2:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2e1a4:	68fb      	ldr	r3, [r7, #12]
   2e1a6:	6a1b      	ldr	r3, [r3, #32]
   2e1a8:	2b00      	cmp	r3, #0
   2e1aa:	d100      	bne.n	2e1ae <MQTTSubscribe+0x4a>
   2e1ac:	e088      	b.n	2e2c0 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2e1ae:	2330      	movs	r3, #48	; 0x30
   2e1b0:	18fb      	adds	r3, r7, r3
   2e1b2:	0018      	movs	r0, r3
   2e1b4:	4b47      	ldr	r3, [pc, #284]	; (2e2d4 <MQTTSubscribe+0x170>)
   2e1b6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e1b8:	68fb      	ldr	r3, [r7, #12]
   2e1ba:	685a      	ldr	r2, [r3, #4]
   2e1bc:	2330      	movs	r3, #48	; 0x30
   2e1be:	18fb      	adds	r3, r7, r3
   2e1c0:	0011      	movs	r1, r2
   2e1c2:	0018      	movs	r0, r3
   2e1c4:	4b44      	ldr	r3, [pc, #272]	; (2e2d8 <MQTTSubscribe+0x174>)
   2e1c6:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2e1c8:	68fb      	ldr	r3, [r7, #12]
   2e1ca:	691c      	ldr	r4, [r3, #16]
   2e1cc:	68fb      	ldr	r3, [r7, #12]
   2e1ce:	689b      	ldr	r3, [r3, #8]
   2e1d0:	001d      	movs	r5, r3
   2e1d2:	68fb      	ldr	r3, [r7, #12]
   2e1d4:	0018      	movs	r0, r3
   2e1d6:	4b41      	ldr	r3, [pc, #260]	; (2e2dc <MQTTSubscribe+0x178>)
   2e1d8:	4798      	blx	r3
   2e1da:	0003      	movs	r3, r0
   2e1dc:	b29a      	uxth	r2, r3
   2e1de:	2320      	movs	r3, #32
   2e1e0:	18fb      	adds	r3, r7, r3
   2e1e2:	9302      	str	r3, [sp, #8]
   2e1e4:	2324      	movs	r3, #36	; 0x24
   2e1e6:	18fb      	adds	r3, r7, r3
   2e1e8:	9301      	str	r3, [sp, #4]
   2e1ea:	2301      	movs	r3, #1
   2e1ec:	9300      	str	r3, [sp, #0]
   2e1ee:	0013      	movs	r3, r2
   2e1f0:	2200      	movs	r2, #0
   2e1f2:	0029      	movs	r1, r5
   2e1f4:	0020      	movs	r0, r4
   2e1f6:	4c3a      	ldr	r4, [pc, #232]	; (2e2e0 <MQTTSubscribe+0x17c>)
   2e1f8:	47a0      	blx	r4
   2e1fa:	0003      	movs	r3, r0
   2e1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2e1fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e200:	2b00      	cmp	r3, #0
   2e202:	dd5f      	ble.n	2e2c4 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2e204:	2330      	movs	r3, #48	; 0x30
   2e206:	18fa      	adds	r2, r7, r3
   2e208:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2e20a:	68fb      	ldr	r3, [r7, #12]
   2e20c:	0018      	movs	r0, r3
   2e20e:	4b35      	ldr	r3, [pc, #212]	; (2e2e4 <MQTTSubscribe+0x180>)
   2e210:	4798      	blx	r3
   2e212:	0003      	movs	r3, r0
   2e214:	647b      	str	r3, [r7, #68]	; 0x44
   2e216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e218:	2b00      	cmp	r3, #0
   2e21a:	d155      	bne.n	2e2c8 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2e21c:	2330      	movs	r3, #48	; 0x30
   2e21e:	18fa      	adds	r2, r7, r3
   2e220:	68fb      	ldr	r3, [r7, #12]
   2e222:	2109      	movs	r1, #9
   2e224:	0018      	movs	r0, r3
   2e226:	4b30      	ldr	r3, [pc, #192]	; (2e2e8 <MQTTSubscribe+0x184>)
   2e228:	4798      	blx	r3
   2e22a:	0003      	movs	r3, r0
   2e22c:	2b09      	cmp	r3, #9
   2e22e:	d143      	bne.n	2e2b8 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2e230:	2300      	movs	r3, #0
   2e232:	61fb      	str	r3, [r7, #28]
   2e234:	2301      	movs	r3, #1
   2e236:	425b      	negs	r3, r3
   2e238:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2e23a:	68fb      	ldr	r3, [r7, #12]
   2e23c:	695a      	ldr	r2, [r3, #20]
   2e23e:	68fb      	ldr	r3, [r7, #12]
   2e240:	68db      	ldr	r3, [r3, #12]
   2e242:	001c      	movs	r4, r3
   2e244:	2318      	movs	r3, #24
   2e246:	18fb      	adds	r3, r7, r3
   2e248:	211c      	movs	r1, #28
   2e24a:	1879      	adds	r1, r7, r1
   2e24c:	2016      	movs	r0, #22
   2e24e:	1838      	adds	r0, r7, r0
   2e250:	9401      	str	r4, [sp, #4]
   2e252:	9200      	str	r2, [sp, #0]
   2e254:	000a      	movs	r2, r1
   2e256:	2101      	movs	r1, #1
   2e258:	4c24      	ldr	r4, [pc, #144]	; (2e2ec <MQTTSubscribe+0x188>)
   2e25a:	47a0      	blx	r4
   2e25c:	0003      	movs	r3, r0
   2e25e:	2b01      	cmp	r3, #1
   2e260:	d101      	bne.n	2e266 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2e262:	69bb      	ldr	r3, [r7, #24]
   2e264:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2e266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e268:	2b80      	cmp	r3, #128	; 0x80
   2e26a:	d02e      	beq.n	2e2ca <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e26c:	2300      	movs	r3, #0
   2e26e:	643b      	str	r3, [r7, #64]	; 0x40
   2e270:	e01e      	b.n	2e2b0 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2e272:	68fa      	ldr	r2, [r7, #12]
   2e274:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e276:	3304      	adds	r3, #4
   2e278:	00db      	lsls	r3, r3, #3
   2e27a:	18d3      	adds	r3, r2, r3
   2e27c:	3304      	adds	r3, #4
   2e27e:	681b      	ldr	r3, [r3, #0]
   2e280:	2b00      	cmp	r3, #0
   2e282:	d112      	bne.n	2e2aa <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2e284:	68fa      	ldr	r2, [r7, #12]
   2e286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e288:	3304      	adds	r3, #4
   2e28a:	00db      	lsls	r3, r3, #3
   2e28c:	18d3      	adds	r3, r2, r3
   2e28e:	3304      	adds	r3, #4
   2e290:	68ba      	ldr	r2, [r7, #8]
   2e292:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2e294:	68fa      	ldr	r2, [r7, #12]
   2e296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e298:	3304      	adds	r3, #4
   2e29a:	00db      	lsls	r3, r3, #3
   2e29c:	18d3      	adds	r3, r2, r3
   2e29e:	3308      	adds	r3, #8
   2e2a0:	683a      	ldr	r2, [r7, #0]
   2e2a2:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2e2a4:	2300      	movs	r3, #0
   2e2a6:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2e2a8:	e00f      	b.n	2e2ca <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e2aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e2ac:	3301      	adds	r3, #1
   2e2ae:	643b      	str	r3, [r7, #64]	; 0x40
   2e2b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e2b2:	2b04      	cmp	r3, #4
   2e2b4:	dddd      	ble.n	2e272 <MQTTSubscribe+0x10e>
   2e2b6:	e008      	b.n	2e2ca <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2e2b8:	2301      	movs	r3, #1
   2e2ba:	425b      	negs	r3, r3
   2e2bc:	647b      	str	r3, [r7, #68]	; 0x44
   2e2be:	e004      	b.n	2e2ca <MQTTSubscribe+0x166>
		goto exit;
   2e2c0:	46c0      	nop			; (mov r8, r8)
   2e2c2:	e002      	b.n	2e2ca <MQTTSubscribe+0x166>
        goto exit;
   2e2c4:	46c0      	nop			; (mov r8, r8)
   2e2c6:	e000      	b.n	2e2ca <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2e2c8:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e2ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2e2cc:	0018      	movs	r0, r3
   2e2ce:	46bd      	mov	sp, r7
   2e2d0:	b012      	add	sp, #72	; 0x48
   2e2d2:	bdb0      	pop	{r4, r5, r7, pc}
   2e2d4:	0002e6f9 	.word	0x0002e6f9
   2e2d8:	0002e681 	.word	0x0002e681
   2e2dc:	0002d841 	.word	0x0002d841
   2e2e0:	0002fc31 	.word	0x0002fc31
   2e2e4:	0002d871 	.word	0x0002d871
   2e2e8:	0002dfd9 	.word	0x0002dfd9
   2e2ec:	0002fd81 	.word	0x0002fd81

0002e2f0 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2e2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e2f2:	46ce      	mov	lr, r9
   2e2f4:	4647      	mov	r7, r8
   2e2f6:	b580      	push	{r7, lr}
   2e2f8:	b097      	sub	sp, #92	; 0x5c
   2e2fa:	af08      	add	r7, sp, #32
   2e2fc:	60f8      	str	r0, [r7, #12]
   2e2fe:	60b9      	str	r1, [r7, #8]
   2e300:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2e302:	2301      	movs	r3, #1
   2e304:	425b      	negs	r3, r3
   2e306:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2e308:	2318      	movs	r3, #24
   2e30a:	18fb      	adds	r3, r7, r3
   2e30c:	2200      	movs	r2, #0
   2e30e:	601a      	str	r2, [r3, #0]
   2e310:	2318      	movs	r3, #24
   2e312:	18fb      	adds	r3, r7, r3
   2e314:	2200      	movs	r2, #0
   2e316:	605a      	str	r2, [r3, #4]
   2e318:	2318      	movs	r3, #24
   2e31a:	18fb      	adds	r3, r7, r3
   2e31c:	2200      	movs	r2, #0
   2e31e:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2e320:	2318      	movs	r3, #24
   2e322:	18fb      	adds	r3, r7, r3
   2e324:	68ba      	ldr	r2, [r7, #8]
   2e326:	601a      	str	r2, [r3, #0]
    int len = 0;
   2e328:	2300      	movs	r3, #0
   2e32a:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2e32c:	68fb      	ldr	r3, [r7, #12]
   2e32e:	6a1b      	ldr	r3, [r3, #32]
   2e330:	2b00      	cmp	r3, #0
   2e332:	d100      	bne.n	2e336 <MQTTPublish+0x46>
   2e334:	e0a0      	b.n	2e478 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2e336:	2324      	movs	r3, #36	; 0x24
   2e338:	18fb      	adds	r3, r7, r3
   2e33a:	0018      	movs	r0, r3
   2e33c:	4b55      	ldr	r3, [pc, #340]	; (2e494 <MQTTPublish+0x1a4>)
   2e33e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e340:	68fb      	ldr	r3, [r7, #12]
   2e342:	685a      	ldr	r2, [r3, #4]
   2e344:	2324      	movs	r3, #36	; 0x24
   2e346:	18fb      	adds	r3, r7, r3
   2e348:	0011      	movs	r1, r2
   2e34a:	0018      	movs	r0, r3
   2e34c:	4b52      	ldr	r3, [pc, #328]	; (2e498 <MQTTPublish+0x1a8>)
   2e34e:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2e350:	687b      	ldr	r3, [r7, #4]
   2e352:	781b      	ldrb	r3, [r3, #0]
   2e354:	2b01      	cmp	r3, #1
   2e356:	d003      	beq.n	2e360 <MQTTPublish+0x70>
   2e358:	687b      	ldr	r3, [r7, #4]
   2e35a:	781b      	ldrb	r3, [r3, #0]
   2e35c:	2b02      	cmp	r3, #2
   2e35e:	d107      	bne.n	2e370 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2e360:	68fb      	ldr	r3, [r7, #12]
   2e362:	0018      	movs	r0, r3
   2e364:	4b4d      	ldr	r3, [pc, #308]	; (2e49c <MQTTPublish+0x1ac>)
   2e366:	4798      	blx	r3
   2e368:	0003      	movs	r3, r0
   2e36a:	b29a      	uxth	r2, r3
   2e36c:	687b      	ldr	r3, [r7, #4]
   2e36e:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e370:	68fb      	ldr	r3, [r7, #12]
   2e372:	691b      	ldr	r3, [r3, #16]
   2e374:	469c      	mov	ip, r3
   2e376:	68fb      	ldr	r3, [r7, #12]
   2e378:	689b      	ldr	r3, [r3, #8]
   2e37a:	001d      	movs	r5, r3
   2e37c:	687b      	ldr	r3, [r7, #4]
   2e37e:	781b      	ldrb	r3, [r3, #0]
   2e380:	001e      	movs	r6, r3
   2e382:	687b      	ldr	r3, [r7, #4]
   2e384:	785b      	ldrb	r3, [r3, #1]
   2e386:	4698      	mov	r8, r3
   2e388:	687b      	ldr	r3, [r7, #4]
   2e38a:	889b      	ldrh	r3, [r3, #4]
   2e38c:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2e38e:	687b      	ldr	r3, [r7, #4]
   2e390:	689a      	ldr	r2, [r3, #8]
   2e392:	687b      	ldr	r3, [r7, #4]
   2e394:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e396:	9306      	str	r3, [sp, #24]
   2e398:	9205      	str	r2, [sp, #20]
   2e39a:	2318      	movs	r3, #24
   2e39c:	18fa      	adds	r2, r7, r3
   2e39e:	2308      	movs	r3, #8
   2e3a0:	446b      	add	r3, sp
   2e3a2:	ca13      	ldmia	r2!, {r0, r1, r4}
   2e3a4:	c313      	stmia	r3!, {r0, r1, r4}
   2e3a6:	464b      	mov	r3, r9
   2e3a8:	9301      	str	r3, [sp, #4]
   2e3aa:	4643      	mov	r3, r8
   2e3ac:	9300      	str	r3, [sp, #0]
   2e3ae:	0033      	movs	r3, r6
   2e3b0:	2200      	movs	r2, #0
   2e3b2:	0029      	movs	r1, r5
   2e3b4:	4660      	mov	r0, ip
   2e3b6:	4c3a      	ldr	r4, [pc, #232]	; (2e4a0 <MQTTPublish+0x1b0>)
   2e3b8:	47a0      	blx	r4
   2e3ba:	0003      	movs	r3, r0
   2e3bc:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2e3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e3c0:	2b00      	cmp	r3, #0
   2e3c2:	dd5b      	ble.n	2e47c <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2e3c4:	2324      	movs	r3, #36	; 0x24
   2e3c6:	18fa      	adds	r2, r7, r3
   2e3c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2e3ca:	68fb      	ldr	r3, [r7, #12]
   2e3cc:	0018      	movs	r0, r3
   2e3ce:	4b35      	ldr	r3, [pc, #212]	; (2e4a4 <MQTTPublish+0x1b4>)
   2e3d0:	4798      	blx	r3
   2e3d2:	0003      	movs	r3, r0
   2e3d4:	637b      	str	r3, [r7, #52]	; 0x34
   2e3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e3d8:	2b00      	cmp	r3, #0
   2e3da:	d151      	bne.n	2e480 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2e3dc:	687b      	ldr	r3, [r7, #4]
   2e3de:	781b      	ldrb	r3, [r3, #0]
   2e3e0:	2b01      	cmp	r3, #1
   2e3e2:	d122      	bne.n	2e42a <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2e3e4:	2324      	movs	r3, #36	; 0x24
   2e3e6:	18fa      	adds	r2, r7, r3
   2e3e8:	68fb      	ldr	r3, [r7, #12]
   2e3ea:	2104      	movs	r1, #4
   2e3ec:	0018      	movs	r0, r3
   2e3ee:	4b2e      	ldr	r3, [pc, #184]	; (2e4a8 <MQTTPublish+0x1b8>)
   2e3f0:	4798      	blx	r3
   2e3f2:	0003      	movs	r3, r0
   2e3f4:	2b04      	cmp	r3, #4
   2e3f6:	d114      	bne.n	2e422 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e3f8:	68fb      	ldr	r3, [r7, #12]
   2e3fa:	695c      	ldr	r4, [r3, #20]
   2e3fc:	68fb      	ldr	r3, [r7, #12]
   2e3fe:	68db      	ldr	r3, [r3, #12]
   2e400:	2216      	movs	r2, #22
   2e402:	18ba      	adds	r2, r7, r2
   2e404:	2115      	movs	r1, #21
   2e406:	1879      	adds	r1, r7, r1
   2e408:	2014      	movs	r0, #20
   2e40a:	1838      	adds	r0, r7, r0
   2e40c:	9300      	str	r3, [sp, #0]
   2e40e:	0023      	movs	r3, r4
   2e410:	4c26      	ldr	r4, [pc, #152]	; (2e4ac <MQTTPublish+0x1bc>)
   2e412:	47a0      	blx	r4
   2e414:	0003      	movs	r3, r0
   2e416:	2b01      	cmp	r3, #1
   2e418:	d033      	beq.n	2e482 <MQTTPublish+0x192>
                rc = FAILURE;
   2e41a:	2301      	movs	r3, #1
   2e41c:	425b      	negs	r3, r3
   2e41e:	637b      	str	r3, [r7, #52]	; 0x34
   2e420:	e02f      	b.n	2e482 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2e422:	2301      	movs	r3, #1
   2e424:	425b      	negs	r3, r3
   2e426:	637b      	str	r3, [r7, #52]	; 0x34
   2e428:	e02b      	b.n	2e482 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2e42a:	687b      	ldr	r3, [r7, #4]
   2e42c:	781b      	ldrb	r3, [r3, #0]
   2e42e:	2b02      	cmp	r3, #2
   2e430:	d127      	bne.n	2e482 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2e432:	2324      	movs	r3, #36	; 0x24
   2e434:	18fa      	adds	r2, r7, r3
   2e436:	68fb      	ldr	r3, [r7, #12]
   2e438:	2107      	movs	r1, #7
   2e43a:	0018      	movs	r0, r3
   2e43c:	4b1a      	ldr	r3, [pc, #104]	; (2e4a8 <MQTTPublish+0x1b8>)
   2e43e:	4798      	blx	r3
   2e440:	0003      	movs	r3, r0
   2e442:	2b07      	cmp	r3, #7
   2e444:	d114      	bne.n	2e470 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e446:	68fb      	ldr	r3, [r7, #12]
   2e448:	695c      	ldr	r4, [r3, #20]
   2e44a:	68fb      	ldr	r3, [r7, #12]
   2e44c:	68db      	ldr	r3, [r3, #12]
   2e44e:	2212      	movs	r2, #18
   2e450:	18ba      	adds	r2, r7, r2
   2e452:	2111      	movs	r1, #17
   2e454:	1879      	adds	r1, r7, r1
   2e456:	2010      	movs	r0, #16
   2e458:	1838      	adds	r0, r7, r0
   2e45a:	9300      	str	r3, [sp, #0]
   2e45c:	0023      	movs	r3, r4
   2e45e:	4c13      	ldr	r4, [pc, #76]	; (2e4ac <MQTTPublish+0x1bc>)
   2e460:	47a0      	blx	r4
   2e462:	0003      	movs	r3, r0
   2e464:	2b01      	cmp	r3, #1
   2e466:	d00c      	beq.n	2e482 <MQTTPublish+0x192>
                rc = FAILURE;
   2e468:	2301      	movs	r3, #1
   2e46a:	425b      	negs	r3, r3
   2e46c:	637b      	str	r3, [r7, #52]	; 0x34
   2e46e:	e008      	b.n	2e482 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2e470:	2301      	movs	r3, #1
   2e472:	425b      	negs	r3, r3
   2e474:	637b      	str	r3, [r7, #52]	; 0x34
   2e476:	e004      	b.n	2e482 <MQTTPublish+0x192>
		goto exit;
   2e478:	46c0      	nop			; (mov r8, r8)
   2e47a:	e002      	b.n	2e482 <MQTTPublish+0x192>
        goto exit;
   2e47c:	46c0      	nop			; (mov r8, r8)
   2e47e:	e000      	b.n	2e482 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2e480:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2e484:	0018      	movs	r0, r3
   2e486:	46bd      	mov	sp, r7
   2e488:	b00f      	add	sp, #60	; 0x3c
   2e48a:	bc0c      	pop	{r2, r3}
   2e48c:	4690      	mov	r8, r2
   2e48e:	4699      	mov	r9, r3
   2e490:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e492:	46c0      	nop			; (mov r8, r8)
   2e494:	0002e6f9 	.word	0x0002e6f9
   2e498:	0002e681 	.word	0x0002e681
   2e49c:	0002d841 	.word	0x0002d841
   2e4a0:	0002f97d 	.word	0x0002f97d
   2e4a4:	0002d871 	.word	0x0002d871
   2e4a8:	0002dfd9 	.word	0x0002dfd9
   2e4ac:	0002f3f5 	.word	0x0002f3f5

0002e4b0 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2e4b0:	b580      	push	{r7, lr}
   2e4b2:	b088      	sub	sp, #32
   2e4b4:	af00      	add	r7, sp, #0
   2e4b6:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2e4b8:	2301      	movs	r3, #1
   2e4ba:	425b      	negs	r3, r3
   2e4bc:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2e4be:	2300      	movs	r3, #0
   2e4c0:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2e4c2:	230c      	movs	r3, #12
   2e4c4:	18fb      	adds	r3, r7, r3
   2e4c6:	0018      	movs	r0, r3
   2e4c8:	4b13      	ldr	r3, [pc, #76]	; (2e518 <MQTTDisconnect+0x68>)
   2e4ca:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e4cc:	687b      	ldr	r3, [r7, #4]
   2e4ce:	685a      	ldr	r2, [r3, #4]
   2e4d0:	230c      	movs	r3, #12
   2e4d2:	18fb      	adds	r3, r7, r3
   2e4d4:	0011      	movs	r1, r2
   2e4d6:	0018      	movs	r0, r3
   2e4d8:	4b10      	ldr	r3, [pc, #64]	; (2e51c <MQTTDisconnect+0x6c>)
   2e4da:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2e4dc:	687b      	ldr	r3, [r7, #4]
   2e4de:	691a      	ldr	r2, [r3, #16]
   2e4e0:	687b      	ldr	r3, [r7, #4]
   2e4e2:	689b      	ldr	r3, [r3, #8]
   2e4e4:	0019      	movs	r1, r3
   2e4e6:	0010      	movs	r0, r2
   2e4e8:	4b0d      	ldr	r3, [pc, #52]	; (2e520 <MQTTDisconnect+0x70>)
   2e4ea:	4798      	blx	r3
   2e4ec:	0003      	movs	r3, r0
   2e4ee:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2e4f0:	69bb      	ldr	r3, [r7, #24]
   2e4f2:	2b00      	cmp	r3, #0
   2e4f4:	dd08      	ble.n	2e508 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2e4f6:	230c      	movs	r3, #12
   2e4f8:	18fa      	adds	r2, r7, r3
   2e4fa:	69b9      	ldr	r1, [r7, #24]
   2e4fc:	687b      	ldr	r3, [r7, #4]
   2e4fe:	0018      	movs	r0, r3
   2e500:	4b08      	ldr	r3, [pc, #32]	; (2e524 <MQTTDisconnect+0x74>)
   2e502:	4798      	blx	r3
   2e504:	0003      	movs	r3, r0
   2e506:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2e508:	687b      	ldr	r3, [r7, #4]
   2e50a:	2200      	movs	r2, #0
   2e50c:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e50e:	69fb      	ldr	r3, [r7, #28]
}
   2e510:	0018      	movs	r0, r3
   2e512:	46bd      	mov	sp, r7
   2e514:	b008      	add	sp, #32
   2e516:	bd80      	pop	{r7, pc}
   2e518:	0002e6f9 	.word	0x0002e6f9
   2e51c:	0002e681 	.word	0x0002e681
   2e520:	0002f2a9 	.word	0x0002f2a9
   2e524:	0002d871 	.word	0x0002d871

0002e528 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2e528:	b580      	push	{r7, lr}
   2e52a:	b084      	sub	sp, #16
   2e52c:	af00      	add	r7, sp, #0
   2e52e:	0002      	movs	r2, r0
   2e530:	1dfb      	adds	r3, r7, #7
   2e532:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2e534:	2300      	movs	r3, #0
   2e536:	60fb      	str	r3, [r7, #12]
   2e538:	e01c      	b.n	2e574 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2e53a:	4a12      	ldr	r2, [pc, #72]	; (2e584 <isMQTTSocket+0x5c>)
   2e53c:	68fb      	ldr	r3, [r7, #12]
   2e53e:	2164      	movs	r1, #100	; 0x64
   2e540:	434b      	muls	r3, r1
   2e542:	18d3      	adds	r3, r2, r3
   2e544:	3360      	adds	r3, #96	; 0x60
   2e546:	681b      	ldr	r3, [r3, #0]
   2e548:	2b00      	cmp	r3, #0
   2e54a:	d010      	beq.n	2e56e <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2e54c:	4a0d      	ldr	r2, [pc, #52]	; (2e584 <isMQTTSocket+0x5c>)
   2e54e:	68fb      	ldr	r3, [r7, #12]
   2e550:	2164      	movs	r1, #100	; 0x64
   2e552:	434b      	muls	r3, r1
   2e554:	18d3      	adds	r3, r2, r3
   2e556:	3360      	adds	r3, #96	; 0x60
   2e558:	681b      	ldr	r3, [r3, #0]
   2e55a:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2e55c:	68bb      	ldr	r3, [r7, #8]
   2e55e:	6a1a      	ldr	r2, [r3, #32]
   2e560:	1dfb      	adds	r3, r7, #7
   2e562:	781b      	ldrb	r3, [r3, #0]
   2e564:	b25b      	sxtb	r3, r3
   2e566:	429a      	cmp	r2, r3
   2e568:	d101      	bne.n	2e56e <isMQTTSocket+0x46>
				return true;
   2e56a:	2301      	movs	r3, #1
   2e56c:	e006      	b.n	2e57c <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2e56e:	68fb      	ldr	r3, [r7, #12]
   2e570:	3301      	adds	r3, #1
   2e572:	60fb      	str	r3, [r7, #12]
   2e574:	68fb      	ldr	r3, [r7, #12]
   2e576:	2b06      	cmp	r3, #6
   2e578:	d9df      	bls.n	2e53a <isMQTTSocket+0x12>
		}
	}
	return false;
   2e57a:	2300      	movs	r3, #0
}
   2e57c:	0018      	movs	r0, r3
   2e57e:	46bd      	mov	sp, r7
   2e580:	b004      	add	sp, #16
   2e582:	bd80      	pop	{r7, pc}
   2e584:	20003f8c 	.word	0x20003f8c

0002e588 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2e588:	b580      	push	{r7, lr}
   2e58a:	b082      	sub	sp, #8
   2e58c:	af00      	add	r7, sp, #0
   2e58e:	6078      	str	r0, [r7, #4]
   2e590:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2e592:	4b0d      	ldr	r3, [pc, #52]	; (2e5c8 <dnsResolveCallback+0x40>)
   2e594:	781b      	ldrb	r3, [r3, #0]
   2e596:	2201      	movs	r2, #1
   2e598:	4053      	eors	r3, r2
   2e59a:	b2db      	uxtb	r3, r3
   2e59c:	2b00      	cmp	r3, #0
   2e59e:	d00e      	beq.n	2e5be <dnsResolveCallback+0x36>
   2e5a0:	4b0a      	ldr	r3, [pc, #40]	; (2e5cc <dnsResolveCallback+0x44>)
   2e5a2:	681b      	ldr	r3, [r3, #0]
   2e5a4:	687a      	ldr	r2, [r7, #4]
   2e5a6:	0011      	movs	r1, r2
   2e5a8:	0018      	movs	r0, r3
   2e5aa:	4b09      	ldr	r3, [pc, #36]	; (2e5d0 <dnsResolveCallback+0x48>)
   2e5ac:	4798      	blx	r3
   2e5ae:	1e03      	subs	r3, r0, #0
   2e5b0:	d105      	bne.n	2e5be <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2e5b2:	683a      	ldr	r2, [r7, #0]
   2e5b4:	4b07      	ldr	r3, [pc, #28]	; (2e5d4 <dnsResolveCallback+0x4c>)
   2e5b6:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2e5b8:	4b03      	ldr	r3, [pc, #12]	; (2e5c8 <dnsResolveCallback+0x40>)
   2e5ba:	2201      	movs	r2, #1
   2e5bc:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2e5be:	46c0      	nop			; (mov r8, r8)
   2e5c0:	46bd      	mov	sp, r7
   2e5c2:	b002      	add	sp, #8
   2e5c4:	bd80      	pop	{r7, pc}
   2e5c6:	46c0      	nop			; (mov r8, r8)
   2e5c8:	20003e7c 	.word	0x20003e7c
   2e5cc:	20003f88 	.word	0x20003f88
   2e5d0:	00033d57 	.word	0x00033d57
   2e5d4:	20003e74 	.word	0x20003e74

0002e5d8 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2e5d8:	b580      	push	{r7, lr}
   2e5da:	b084      	sub	sp, #16
   2e5dc:	af00      	add	r7, sp, #0
   2e5de:	603a      	str	r2, [r7, #0]
   2e5e0:	1dfb      	adds	r3, r7, #7
   2e5e2:	1c02      	adds	r2, r0, #0
   2e5e4:	701a      	strb	r2, [r3, #0]
   2e5e6:	1dbb      	adds	r3, r7, #6
   2e5e8:	1c0a      	adds	r2, r1, #0
   2e5ea:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2e5ec:	1dfb      	adds	r3, r7, #7
   2e5ee:	781b      	ldrb	r3, [r3, #0]
   2e5f0:	b25b      	sxtb	r3, r3
   2e5f2:	0018      	movs	r0, r3
   2e5f4:	4b12      	ldr	r3, [pc, #72]	; (2e640 <tcpClientSocketEventHandler+0x68>)
   2e5f6:	4798      	blx	r3
   2e5f8:	1e03      	subs	r3, r0, #0
   2e5fa:	d01c      	beq.n	2e636 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2e5fc:	1dbb      	adds	r3, r7, #6
   2e5fe:	781b      	ldrb	r3, [r3, #0]
   2e600:	2b06      	cmp	r3, #6
   2e602:	d00c      	beq.n	2e61e <tcpClientSocketEventHandler+0x46>
   2e604:	2b07      	cmp	r3, #7
   2e606:	d006      	beq.n	2e616 <tcpClientSocketEventHandler+0x3e>
   2e608:	2b05      	cmp	r3, #5
   2e60a:	d000      	beq.n	2e60e <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2e60c:	e013      	b.n	2e636 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2e60e:	4b0d      	ldr	r3, [pc, #52]	; (2e644 <tcpClientSocketEventHandler+0x6c>)
   2e610:	2201      	movs	r2, #1
   2e612:	701a      	strb	r2, [r3, #0]
			break;
   2e614:	e00f      	b.n	2e636 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2e616:	4b0c      	ldr	r3, [pc, #48]	; (2e648 <tcpClientSocketEventHandler+0x70>)
   2e618:	2201      	movs	r2, #1
   2e61a:	701a      	strb	r2, [r3, #0]
			break;
   2e61c:	e00b      	b.n	2e636 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2e61e:	683b      	ldr	r3, [r7, #0]
   2e620:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2e622:	68fb      	ldr	r3, [r7, #12]
   2e624:	2204      	movs	r2, #4
   2e626:	5e9b      	ldrsh	r3, [r3, r2]
   2e628:	001a      	movs	r2, r3
   2e62a:	4b08      	ldr	r3, [pc, #32]	; (2e64c <tcpClientSocketEventHandler+0x74>)
   2e62c:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2e62e:	4b08      	ldr	r3, [pc, #32]	; (2e650 <tcpClientSocketEventHandler+0x78>)
   2e630:	2201      	movs	r2, #1
   2e632:	701a      	strb	r2, [r3, #0]
			break;
   2e634:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2e636:	46c0      	nop			; (mov r8, r8)
   2e638:	46bd      	mov	sp, r7
   2e63a:	b004      	add	sp, #16
   2e63c:	bd80      	pop	{r7, pc}
   2e63e:	46c0      	nop			; (mov r8, r8)
   2e640:	0002e529 	.word	0x0002e529
   2e644:	20003e7d 	.word	0x20003e7d
   2e648:	20003e7e 	.word	0x20003e7e
   2e64c:	20003e78 	.word	0x20003e78
   2e650:	20003e7f 	.word	0x20003e7f

0002e654 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2e654:	b580      	push	{r7, lr}
   2e656:	b082      	sub	sp, #8
   2e658:	af00      	add	r7, sp, #0
   2e65a:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2e65c:	687b      	ldr	r3, [r7, #4]
   2e65e:	3304      	adds	r3, #4
   2e660:	687a      	ldr	r2, [r7, #4]
   2e662:	0011      	movs	r1, r2
   2e664:	0018      	movs	r0, r3
   2e666:	4b05      	ldr	r3, [pc, #20]	; (2e67c <TimerIsExpired+0x28>)
   2e668:	4798      	blx	r3
   2e66a:	0003      	movs	r3, r0
   2e66c:	3b01      	subs	r3, #1
   2e66e:	425a      	negs	r2, r3
   2e670:	4153      	adcs	r3, r2
   2e672:	b2db      	uxtb	r3, r3
}
   2e674:	0018      	movs	r0, r3
   2e676:	46bd      	mov	sp, r7
   2e678:	b002      	add	sp, #8
   2e67a:	bd80      	pop	{r7, pc}
   2e67c:	0001bef5 	.word	0x0001bef5

0002e680 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2e680:	b580      	push	{r7, lr}
   2e682:	b082      	sub	sp, #8
   2e684:	af00      	add	r7, sp, #0
   2e686:	6078      	str	r0, [r7, #4]
   2e688:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2e68a:	687b      	ldr	r3, [r7, #4]
   2e68c:	683a      	ldr	r2, [r7, #0]
   2e68e:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2e690:	687b      	ldr	r3, [r7, #4]
   2e692:	3304      	adds	r3, #4
   2e694:	0018      	movs	r0, r3
   2e696:	4b03      	ldr	r3, [pc, #12]	; (2e6a4 <TimerCountdownMS+0x24>)
   2e698:	4798      	blx	r3
}
   2e69a:	46c0      	nop			; (mov r8, r8)
   2e69c:	46bd      	mov	sp, r7
   2e69e:	b002      	add	sp, #8
   2e6a0:	bd80      	pop	{r7, pc}
   2e6a2:	46c0      	nop			; (mov r8, r8)
   2e6a4:	0001be89 	.word	0x0001be89

0002e6a8 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2e6a8:	b580      	push	{r7, lr}
   2e6aa:	b082      	sub	sp, #8
   2e6ac:	af00      	add	r7, sp, #0
   2e6ae:	6078      	str	r0, [r7, #4]
   2e6b0:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2e6b2:	683b      	ldr	r3, [r7, #0]
   2e6b4:	22fa      	movs	r2, #250	; 0xfa
   2e6b6:	0092      	lsls	r2, r2, #2
   2e6b8:	435a      	muls	r2, r3
   2e6ba:	687b      	ldr	r3, [r7, #4]
   2e6bc:	0011      	movs	r1, r2
   2e6be:	0018      	movs	r0, r3
   2e6c0:	4b02      	ldr	r3, [pc, #8]	; (2e6cc <TimerCountdown+0x24>)
   2e6c2:	4798      	blx	r3
}
   2e6c4:	46c0      	nop			; (mov r8, r8)
   2e6c6:	46bd      	mov	sp, r7
   2e6c8:	b002      	add	sp, #8
   2e6ca:	bd80      	pop	{r7, pc}
   2e6cc:	0002e681 	.word	0x0002e681

0002e6d0 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2e6d0:	b580      	push	{r7, lr}
   2e6d2:	b082      	sub	sp, #8
   2e6d4:	af00      	add	r7, sp, #0
   2e6d6:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2e6d8:	687b      	ldr	r3, [r7, #4]
   2e6da:	3304      	adds	r3, #4
   2e6dc:	687a      	ldr	r2, [r7, #4]
   2e6de:	0011      	movs	r1, r2
   2e6e0:	0018      	movs	r0, r3
   2e6e2:	4b04      	ldr	r3, [pc, #16]	; (2e6f4 <TimerLeftMS+0x24>)
   2e6e4:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2e6e6:	687b      	ldr	r3, [r7, #4]
   2e6e8:	681b      	ldr	r3, [r3, #0]
}
   2e6ea:	0018      	movs	r0, r3
   2e6ec:	46bd      	mov	sp, r7
   2e6ee:	b002      	add	sp, #8
   2e6f0:	bd80      	pop	{r7, pc}
   2e6f2:	46c0      	nop			; (mov r8, r8)
   2e6f4:	0001bef5 	.word	0x0001bef5

0002e6f8 <TimerInit>:


void TimerInit(Timer* timer) {
   2e6f8:	b580      	push	{r7, lr}
   2e6fa:	b082      	sub	sp, #8
   2e6fc:	af00      	add	r7, sp, #0
   2e6fe:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2e700:	687b      	ldr	r3, [r7, #4]
   2e702:	2200      	movs	r2, #0
   2e704:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2e706:	687b      	ldr	r3, [r7, #4]
   2e708:	3304      	adds	r3, #4
   2e70a:	2208      	movs	r2, #8
   2e70c:	2100      	movs	r1, #0
   2e70e:	0018      	movs	r0, r3
   2e710:	4b02      	ldr	r3, [pc, #8]	; (2e71c <TimerInit+0x24>)
   2e712:	4798      	blx	r3
}
   2e714:	46c0      	nop			; (mov r8, r8)
   2e716:	46bd      	mov	sp, r7
   2e718:	b002      	add	sp, #8
   2e71a:	bd80      	pop	{r7, pc}
   2e71c:	000339ff 	.word	0x000339ff

0002e720 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2e720:	b590      	push	{r4, r7, lr}
   2e722:	b085      	sub	sp, #20
   2e724:	af00      	add	r7, sp, #0
   2e726:	60f8      	str	r0, [r7, #12]
   2e728:	60b9      	str	r1, [r7, #8]
   2e72a:	607a      	str	r2, [r7, #4]
   2e72c:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2e72e:	683b      	ldr	r3, [r7, #0]
   2e730:	2b00      	cmp	r3, #0
   2e732:	d101      	bne.n	2e738 <WINC1500_read+0x18>
   2e734:	230a      	movs	r3, #10
   2e736:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2e738:	4b2c      	ldr	r3, [pc, #176]	; (2e7ec <WINC1500_read+0xcc>)
   2e73a:	681b      	ldr	r3, [r3, #0]
   2e73c:	2b00      	cmp	r3, #0
   2e73e:	d131      	bne.n	2e7a4 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2e740:	4b2b      	ldr	r3, [pc, #172]	; (2e7f0 <WINC1500_read+0xd0>)
   2e742:	2200      	movs	r2, #0
   2e744:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2e746:	68fb      	ldr	r3, [r7, #12]
   2e748:	681b      	ldr	r3, [r3, #0]
   2e74a:	b258      	sxtb	r0, r3
   2e74c:	683c      	ldr	r4, [r7, #0]
   2e74e:	2380      	movs	r3, #128	; 0x80
   2e750:	005a      	lsls	r2, r3, #1
   2e752:	4928      	ldr	r1, [pc, #160]	; (2e7f4 <WINC1500_read+0xd4>)
   2e754:	0023      	movs	r3, r4
   2e756:	4c28      	ldr	r4, [pc, #160]	; (2e7f8 <WINC1500_read+0xd8>)
   2e758:	47a0      	blx	r4
   2e75a:	1e03      	subs	r3, r0, #0
   2e75c:	d005      	beq.n	2e76a <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2e75e:	2301      	movs	r3, #1
   2e760:	425b      	negs	r3, r3
   2e762:	e03e      	b.n	2e7e2 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2e764:	2000      	movs	r0, #0
   2e766:	4b25      	ldr	r3, [pc, #148]	; (2e7fc <WINC1500_read+0xdc>)
   2e768:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2e76a:	4b21      	ldr	r3, [pc, #132]	; (2e7f0 <WINC1500_read+0xd0>)
   2e76c:	781b      	ldrb	r3, [r3, #0]
   2e76e:	2201      	movs	r2, #1
   2e770:	4053      	eors	r3, r2
   2e772:	b2db      	uxtb	r3, r3
   2e774:	2b00      	cmp	r3, #0
   2e776:	d1f5      	bne.n	2e764 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2e778:	4b21      	ldr	r3, [pc, #132]	; (2e800 <WINC1500_read+0xe0>)
   2e77a:	681b      	ldr	r3, [r3, #0]
   2e77c:	2b00      	cmp	r3, #0
   2e77e:	dd08      	ble.n	2e792 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2e780:	4b1f      	ldr	r3, [pc, #124]	; (2e800 <WINC1500_read+0xe0>)
   2e782:	681b      	ldr	r3, [r3, #0]
   2e784:	001a      	movs	r2, r3
   2e786:	4b19      	ldr	r3, [pc, #100]	; (2e7ec <WINC1500_read+0xcc>)
   2e788:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2e78a:	4b1e      	ldr	r3, [pc, #120]	; (2e804 <WINC1500_read+0xe4>)
   2e78c:	2200      	movs	r2, #0
   2e78e:	601a      	str	r2, [r3, #0]
   2e790:	e008      	b.n	2e7a4 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2e792:	4b16      	ldr	r3, [pc, #88]	; (2e7ec <WINC1500_read+0xcc>)
   2e794:	2200      	movs	r2, #0
   2e796:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2e798:	4b1a      	ldr	r3, [pc, #104]	; (2e804 <WINC1500_read+0xe4>)
   2e79a:	2200      	movs	r2, #0
   2e79c:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2e79e:	4b18      	ldr	r3, [pc, #96]	; (2e800 <WINC1500_read+0xe0>)
   2e7a0:	681b      	ldr	r3, [r3, #0]
   2e7a2:	e01e      	b.n	2e7e2 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2e7a4:	4b11      	ldr	r3, [pc, #68]	; (2e7ec <WINC1500_read+0xcc>)
   2e7a6:	681b      	ldr	r3, [r3, #0]
   2e7a8:	001a      	movs	r2, r3
   2e7aa:	687b      	ldr	r3, [r7, #4]
   2e7ac:	4293      	cmp	r3, r2
   2e7ae:	dd02      	ble.n	2e7b6 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2e7b0:	2301      	movs	r3, #1
   2e7b2:	425b      	negs	r3, r3
   2e7b4:	e015      	b.n	2e7e2 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2e7b6:	4b13      	ldr	r3, [pc, #76]	; (2e804 <WINC1500_read+0xe4>)
   2e7b8:	681a      	ldr	r2, [r3, #0]
   2e7ba:	4b0e      	ldr	r3, [pc, #56]	; (2e7f4 <WINC1500_read+0xd4>)
   2e7bc:	18d1      	adds	r1, r2, r3
   2e7be:	687a      	ldr	r2, [r7, #4]
   2e7c0:	68bb      	ldr	r3, [r7, #8]
   2e7c2:	0018      	movs	r0, r3
   2e7c4:	4b10      	ldr	r3, [pc, #64]	; (2e808 <WINC1500_read+0xe8>)
   2e7c6:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2e7c8:	4b08      	ldr	r3, [pc, #32]	; (2e7ec <WINC1500_read+0xcc>)
   2e7ca:	681a      	ldr	r2, [r3, #0]
   2e7cc:	687b      	ldr	r3, [r7, #4]
   2e7ce:	1ad2      	subs	r2, r2, r3
   2e7d0:	4b06      	ldr	r3, [pc, #24]	; (2e7ec <WINC1500_read+0xcc>)
   2e7d2:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2e7d4:	4b0b      	ldr	r3, [pc, #44]	; (2e804 <WINC1500_read+0xe4>)
   2e7d6:	681a      	ldr	r2, [r3, #0]
   2e7d8:	687b      	ldr	r3, [r7, #4]
   2e7da:	18d2      	adds	r2, r2, r3
   2e7dc:	4b09      	ldr	r3, [pc, #36]	; (2e804 <WINC1500_read+0xe4>)
   2e7de:	601a      	str	r2, [r3, #0]
  
  return len;
   2e7e0:	687b      	ldr	r3, [r7, #4]
}
   2e7e2:	0018      	movs	r0, r3
   2e7e4:	46bd      	mov	sp, r7
   2e7e6:	b005      	add	sp, #20
   2e7e8:	bd90      	pop	{r4, r7, pc}
   2e7ea:	46c0      	nop			; (mov r8, r8)
   2e7ec:	20003f84 	.word	0x20003f84
   2e7f0:	20003e7f 	.word	0x20003e7f
   2e7f4:	20003e80 	.word	0x20003e80
   2e7f8:	00024dd5 	.word	0x00024dd5
   2e7fc:	0002131d 	.word	0x0002131d
   2e800:	20003e78 	.word	0x20003e78
   2e804:	20003f80 	.word	0x20003f80
   2e808:	000339c9 	.word	0x000339c9

0002e80c <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2e80c:	b590      	push	{r4, r7, lr}
   2e80e:	b085      	sub	sp, #20
   2e810:	af00      	add	r7, sp, #0
   2e812:	60f8      	str	r0, [r7, #12]
   2e814:	60b9      	str	r1, [r7, #8]
   2e816:	607a      	str	r2, [r7, #4]
   2e818:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2e81a:	4b10      	ldr	r3, [pc, #64]	; (2e85c <WINC1500_write+0x50>)
   2e81c:	2200      	movs	r2, #0
   2e81e:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2e820:	68fb      	ldr	r3, [r7, #12]
   2e822:	681b      	ldr	r3, [r3, #0]
   2e824:	b258      	sxtb	r0, r3
   2e826:	687b      	ldr	r3, [r7, #4]
   2e828:	b29a      	uxth	r2, r3
   2e82a:	68b9      	ldr	r1, [r7, #8]
   2e82c:	2300      	movs	r3, #0
   2e82e:	4c0c      	ldr	r4, [pc, #48]	; (2e860 <WINC1500_write+0x54>)
   2e830:	47a0      	blx	r4
   2e832:	1e03      	subs	r3, r0, #0
   2e834:	d005      	beq.n	2e842 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2e836:	2301      	movs	r3, #1
   2e838:	425b      	negs	r3, r3
   2e83a:	e00a      	b.n	2e852 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2e83c:	2000      	movs	r0, #0
   2e83e:	4b09      	ldr	r3, [pc, #36]	; (2e864 <WINC1500_write+0x58>)
   2e840:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2e842:	4b06      	ldr	r3, [pc, #24]	; (2e85c <WINC1500_write+0x50>)
   2e844:	781b      	ldrb	r3, [r3, #0]
   2e846:	2201      	movs	r2, #1
   2e848:	4053      	eors	r3, r2
   2e84a:	b2db      	uxtb	r3, r3
   2e84c:	2b00      	cmp	r3, #0
   2e84e:	d1f5      	bne.n	2e83c <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2e850:	687b      	ldr	r3, [r7, #4]
}
   2e852:	0018      	movs	r0, r3
   2e854:	46bd      	mov	sp, r7
   2e856:	b005      	add	sp, #20
   2e858:	bd90      	pop	{r4, r7, pc}
   2e85a:	46c0      	nop			; (mov r8, r8)
   2e85c:	20003e7e 	.word	0x20003e7e
   2e860:	00024c71 	.word	0x00024c71
   2e864:	0002131d 	.word	0x0002131d

0002e868 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2e868:	b580      	push	{r7, lr}
   2e86a:	b082      	sub	sp, #8
   2e86c:	af00      	add	r7, sp, #0
   2e86e:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2e870:	687b      	ldr	r3, [r7, #4]
   2e872:	681b      	ldr	r3, [r3, #0]
   2e874:	b25b      	sxtb	r3, r3
   2e876:	0018      	movs	r0, r3
   2e878:	4b06      	ldr	r3, [pc, #24]	; (2e894 <WINC1500_disconnect+0x2c>)
   2e87a:	4798      	blx	r3
	n->socket=-1;
   2e87c:	687b      	ldr	r3, [r7, #4]
   2e87e:	2201      	movs	r2, #1
   2e880:	4252      	negs	r2, r2
   2e882:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2e884:	4b04      	ldr	r3, [pc, #16]	; (2e898 <WINC1500_disconnect+0x30>)
   2e886:	2200      	movs	r2, #0
   2e888:	701a      	strb	r2, [r3, #0]
}
   2e88a:	46c0      	nop			; (mov r8, r8)
   2e88c:	46bd      	mov	sp, r7
   2e88e:	b002      	add	sp, #8
   2e890:	bd80      	pop	{r7, pc}
   2e892:	46c0      	nop			; (mov r8, r8)
   2e894:	00024f55 	.word	0x00024f55
   2e898:	20003e7d 	.word	0x20003e7d

0002e89c <NetworkInit>:


void NetworkInit(Network* n) {
   2e89c:	b580      	push	{r7, lr}
   2e89e:	b082      	sub	sp, #8
   2e8a0:	af00      	add	r7, sp, #0
   2e8a2:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2e8a4:	687b      	ldr	r3, [r7, #4]
   2e8a6:	2201      	movs	r2, #1
   2e8a8:	4252      	negs	r2, r2
   2e8aa:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2e8ac:	687b      	ldr	r3, [r7, #4]
   2e8ae:	4a06      	ldr	r2, [pc, #24]	; (2e8c8 <NetworkInit+0x2c>)
   2e8b0:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2e8b2:	687b      	ldr	r3, [r7, #4]
   2e8b4:	4a05      	ldr	r2, [pc, #20]	; (2e8cc <NetworkInit+0x30>)
   2e8b6:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2e8b8:	687b      	ldr	r3, [r7, #4]
   2e8ba:	4a05      	ldr	r2, [pc, #20]	; (2e8d0 <NetworkInit+0x34>)
   2e8bc:	611a      	str	r2, [r3, #16]
}
   2e8be:	46c0      	nop			; (mov r8, r8)
   2e8c0:	46bd      	mov	sp, r7
   2e8c2:	b002      	add	sp, #8
   2e8c4:	bd80      	pop	{r7, pc}
   2e8c6:	46c0      	nop			; (mov r8, r8)
   2e8c8:	0002e721 	.word	0x0002e721
   2e8cc:	0002e80d 	.word	0x0002e80d
   2e8d0:	0002e869 	.word	0x0002e869

0002e8d4 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2e8d4:	b580      	push	{r7, lr}
   2e8d6:	b088      	sub	sp, #32
   2e8d8:	af00      	add	r7, sp, #0
   2e8da:	60f8      	str	r0, [r7, #12]
   2e8dc:	60b9      	str	r1, [r7, #8]
   2e8de:	607a      	str	r2, [r7, #4]
   2e8e0:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2e8e2:	4b37      	ldr	r3, [pc, #220]	; (2e9c0 <ConnectNetwork+0xec>)
   2e8e4:	2200      	movs	r2, #0
   2e8e6:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2e8e8:	4b36      	ldr	r3, [pc, #216]	; (2e9c4 <ConnectNetwork+0xf0>)
   2e8ea:	68ba      	ldr	r2, [r7, #8]
   2e8ec:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2e8ee:	68bb      	ldr	r3, [r7, #8]
   2e8f0:	0018      	movs	r0, r3
   2e8f2:	4b35      	ldr	r3, [pc, #212]	; (2e9c8 <ConnectNetwork+0xf4>)
   2e8f4:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2e8f6:	e002      	b.n	2e8fe <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2e8f8:	2000      	movs	r0, #0
   2e8fa:	4b34      	ldr	r3, [pc, #208]	; (2e9cc <ConnectNetwork+0xf8>)
   2e8fc:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2e8fe:	4b30      	ldr	r3, [pc, #192]	; (2e9c0 <ConnectNetwork+0xec>)
   2e900:	781b      	ldrb	r3, [r3, #0]
   2e902:	2201      	movs	r2, #1
   2e904:	4053      	eors	r3, r2
   2e906:	b2db      	uxtb	r3, r3
   2e908:	2b00      	cmp	r3, #0
   2e90a:	d1f5      	bne.n	2e8f8 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2e90c:	4b30      	ldr	r3, [pc, #192]	; (2e9d0 <ConnectNetwork+0xfc>)
   2e90e:	681a      	ldr	r2, [r3, #0]
   2e910:	68fb      	ldr	r3, [r7, #12]
   2e912:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2e914:	2310      	movs	r3, #16
   2e916:	18fb      	adds	r3, r7, r3
   2e918:	2202      	movs	r2, #2
   2e91a:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2e91c:	687b      	ldr	r3, [r7, #4]
   2e91e:	b29b      	uxth	r3, r3
   2e920:	021b      	lsls	r3, r3, #8
   2e922:	b21a      	sxth	r2, r3
   2e924:	687b      	ldr	r3, [r7, #4]
   2e926:	b29b      	uxth	r3, r3
   2e928:	0a1b      	lsrs	r3, r3, #8
   2e92a:	b29b      	uxth	r3, r3
   2e92c:	b21b      	sxth	r3, r3
   2e92e:	4313      	orrs	r3, r2
   2e930:	b21b      	sxth	r3, r3
   2e932:	b29a      	uxth	r2, r3
   2e934:	2310      	movs	r3, #16
   2e936:	18fb      	adds	r3, r7, r3
   2e938:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2e93a:	4b25      	ldr	r3, [pc, #148]	; (2e9d0 <ConnectNetwork+0xfc>)
   2e93c:	681b      	ldr	r3, [r3, #0]
   2e93e:	001a      	movs	r2, r3
   2e940:	2310      	movs	r3, #16
   2e942:	18fb      	adds	r3, r7, r3
   2e944:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2e946:	68fb      	ldr	r3, [r7, #12]
   2e948:	681b      	ldr	r3, [r3, #0]
   2e94a:	2b00      	cmp	r3, #0
   2e94c:	da0a      	bge.n	2e964 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2e94e:	683b      	ldr	r3, [r7, #0]
   2e950:	b2db      	uxtb	r3, r3
   2e952:	001a      	movs	r2, r3
   2e954:	2101      	movs	r1, #1
   2e956:	2002      	movs	r0, #2
   2e958:	4b1e      	ldr	r3, [pc, #120]	; (2e9d4 <ConnectNetwork+0x100>)
   2e95a:	4798      	blx	r3
   2e95c:	0003      	movs	r3, r0
   2e95e:	001a      	movs	r2, r3
   2e960:	68fb      	ldr	r3, [r7, #12]
   2e962:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2e964:	68fb      	ldr	r3, [r7, #12]
   2e966:	681b      	ldr	r3, [r3, #0]
   2e968:	3301      	adds	r3, #1
   2e96a:	d108      	bne.n	2e97e <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2e96c:	68fb      	ldr	r3, [r7, #12]
   2e96e:	681b      	ldr	r3, [r3, #0]
   2e970:	b25b      	sxtb	r3, r3
   2e972:	0018      	movs	r0, r3
   2e974:	4b18      	ldr	r3, [pc, #96]	; (2e9d8 <ConnectNetwork+0x104>)
   2e976:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2e978:	2309      	movs	r3, #9
   2e97a:	425b      	negs	r3, r3
   2e97c:	e01c      	b.n	2e9b8 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2e97e:	68fb      	ldr	r3, [r7, #12]
   2e980:	681b      	ldr	r3, [r3, #0]
   2e982:	b25b      	sxtb	r3, r3
   2e984:	2210      	movs	r2, #16
   2e986:	18b9      	adds	r1, r7, r2
   2e988:	2210      	movs	r2, #16
   2e98a:	0018      	movs	r0, r3
   2e98c:	4b13      	ldr	r3, [pc, #76]	; (2e9dc <ConnectNetwork+0x108>)
   2e98e:	4798      	blx	r3
   2e990:	1e03      	subs	r3, r0, #0
   2e992:	d002      	beq.n	2e99a <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2e994:	2309      	movs	r3, #9
   2e996:	425b      	negs	r3, r3
   2e998:	e00e      	b.n	2e9b8 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2e99a:	4b11      	ldr	r3, [pc, #68]	; (2e9e0 <ConnectNetwork+0x10c>)
   2e99c:	2200      	movs	r2, #0
   2e99e:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2e9a0:	e002      	b.n	2e9a8 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2e9a2:	2000      	movs	r0, #0
   2e9a4:	4b09      	ldr	r3, [pc, #36]	; (2e9cc <ConnectNetwork+0xf8>)
   2e9a6:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2e9a8:	4b0d      	ldr	r3, [pc, #52]	; (2e9e0 <ConnectNetwork+0x10c>)
   2e9aa:	781b      	ldrb	r3, [r3, #0]
   2e9ac:	2201      	movs	r2, #1
   2e9ae:	4053      	eors	r3, r2
   2e9b0:	b2db      	uxtb	r3, r3
   2e9b2:	2b00      	cmp	r3, #0
   2e9b4:	d1f5      	bne.n	2e9a2 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2e9b6:	2300      	movs	r3, #0
   2e9b8:	0018      	movs	r0, r3
   2e9ba:	46bd      	mov	sp, r7
   2e9bc:	b008      	add	sp, #32
   2e9be:	bd80      	pop	{r7, pc}
   2e9c0:	20003e7c 	.word	0x20003e7c
   2e9c4:	20003f88 	.word	0x20003f88
   2e9c8:	0002519d 	.word	0x0002519d
   2e9cc:	0002131d 	.word	0x0002131d
   2e9d0:	20003e74 	.word	0x20003e74
   2e9d4:	00024949 	.word	0x00024949
   2e9d8:	00024f55 	.word	0x00024f55
   2e9dc:	00024b5d 	.word	0x00024b5d
   2e9e0:	20003e7d 	.word	0x20003e7d

0002e9e4 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2e9e4:	b580      	push	{r7, lr}
   2e9e6:	b084      	sub	sp, #16
   2e9e8:	af00      	add	r7, sp, #0
   2e9ea:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2e9ec:	687b      	ldr	r3, [r7, #4]
   2e9ee:	2b00      	cmp	r3, #0
   2e9f0:	d022      	beq.n	2ea38 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2e9f2:	2300      	movs	r3, #0
   2e9f4:	60fb      	str	r3, [r7, #12]
   2e9f6:	e01b      	b.n	2ea30 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2e9f8:	4a11      	ldr	r2, [pc, #68]	; (2ea40 <allocateClient+0x5c>)
   2e9fa:	68fb      	ldr	r3, [r7, #12]
   2e9fc:	2164      	movs	r1, #100	; 0x64
   2e9fe:	434b      	muls	r3, r1
   2ea00:	18d3      	adds	r3, r2, r3
   2ea02:	3360      	adds	r3, #96	; 0x60
   2ea04:	681b      	ldr	r3, [r3, #0]
   2ea06:	2b00      	cmp	r3, #0
   2ea08:	d10f      	bne.n	2ea2a <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2ea0a:	4a0d      	ldr	r2, [pc, #52]	; (2ea40 <allocateClient+0x5c>)
   2ea0c:	68fb      	ldr	r3, [r7, #12]
   2ea0e:	2164      	movs	r1, #100	; 0x64
   2ea10:	434b      	muls	r3, r1
   2ea12:	18d3      	adds	r3, r2, r3
   2ea14:	3360      	adds	r3, #96	; 0x60
   2ea16:	687a      	ldr	r2, [r7, #4]
   2ea18:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2ea1a:	68fb      	ldr	r3, [r7, #12]
   2ea1c:	2264      	movs	r2, #100	; 0x64
   2ea1e:	435a      	muls	r2, r3
   2ea20:	4b07      	ldr	r3, [pc, #28]	; (2ea40 <allocateClient+0x5c>)
   2ea22:	18d2      	adds	r2, r2, r3
   2ea24:	687b      	ldr	r3, [r7, #4]
   2ea26:	61da      	str	r2, [r3, #28]
			return;
   2ea28:	e007      	b.n	2ea3a <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2ea2a:	68fb      	ldr	r3, [r7, #12]
   2ea2c:	3301      	adds	r3, #1
   2ea2e:	60fb      	str	r3, [r7, #12]
   2ea30:	68fb      	ldr	r3, [r7, #12]
   2ea32:	2b06      	cmp	r3, #6
   2ea34:	d9e0      	bls.n	2e9f8 <allocateClient+0x14>
   2ea36:	e000      	b.n	2ea3a <allocateClient+0x56>
		return;
   2ea38:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2ea3a:	46bd      	mov	sp, r7
   2ea3c:	b004      	add	sp, #16
   2ea3e:	bd80      	pop	{r7, pc}
   2ea40:	20003f8c 	.word	0x20003f8c

0002ea44 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2ea44:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ea46:	b089      	sub	sp, #36	; 0x24
   2ea48:	af04      	add	r7, sp, #16
   2ea4a:	6078      	str	r0, [r7, #4]
   2ea4c:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2ea4e:	687b      	ldr	r3, [r7, #4]
   2ea50:	2b00      	cmp	r3, #0
   2ea52:	d00a      	beq.n	2ea6a <mqtt_init+0x26>
   2ea54:	683b      	ldr	r3, [r7, #0]
   2ea56:	2b00      	cmp	r3, #0
   2ea58:	d007      	beq.n	2ea6a <mqtt_init+0x26>
   2ea5a:	683b      	ldr	r3, [r7, #0]
   2ea5c:	691b      	ldr	r3, [r3, #16]
   2ea5e:	2b00      	cmp	r3, #0
   2ea60:	d003      	beq.n	2ea6a <mqtt_init+0x26>
   2ea62:	683b      	ldr	r3, [r7, #0]
   2ea64:	689b      	ldr	r3, [r3, #8]
   2ea66:	2b00      	cmp	r3, #0
   2ea68:	d102      	bne.n	2ea70 <mqtt_init+0x2c>
		return FAILURE;
   2ea6a:	2301      	movs	r3, #1
   2ea6c:	425b      	negs	r3, r3
   2ea6e:	e034      	b.n	2eada <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2ea70:	683b      	ldr	r3, [r7, #0]
   2ea72:	889b      	ldrh	r3, [r3, #4]
   2ea74:	001a      	movs	r2, r3
   2ea76:	23fa      	movs	r3, #250	; 0xfa
   2ea78:	009b      	lsls	r3, r3, #2
   2ea7a:	4353      	muls	r3, r2
   2ea7c:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2ea7e:	687b      	ldr	r3, [r7, #4]
   2ea80:	3320      	adds	r3, #32
   2ea82:	0018      	movs	r0, r3
   2ea84:	4b17      	ldr	r3, [pc, #92]	; (2eae4 <mqtt_init+0xa0>)
   2ea86:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2ea88:	687b      	ldr	r3, [r7, #4]
   2ea8a:	3304      	adds	r3, #4
   2ea8c:	6839      	ldr	r1, [r7, #0]
   2ea8e:	2218      	movs	r2, #24
   2ea90:	0018      	movs	r0, r3
   2ea92:	4b15      	ldr	r3, [pc, #84]	; (2eae8 <mqtt_init+0xa4>)
   2ea94:	4798      	blx	r3
	allocateClient(module);
   2ea96:	687b      	ldr	r3, [r7, #4]
   2ea98:	0018      	movs	r0, r3
   2ea9a:	4b14      	ldr	r3, [pc, #80]	; (2eaec <mqtt_init+0xa8>)
   2ea9c:	4798      	blx	r3
	
	if(module->client)
   2ea9e:	687b      	ldr	r3, [r7, #4]
   2eaa0:	69db      	ldr	r3, [r3, #28]
   2eaa2:	2b00      	cmp	r3, #0
   2eaa4:	d017      	beq.n	2ead6 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2eaa6:	687b      	ldr	r3, [r7, #4]
   2eaa8:	69d8      	ldr	r0, [r3, #28]
   2eaaa:	687b      	ldr	r3, [r7, #4]
   2eaac:	3320      	adds	r3, #32
   2eaae:	001c      	movs	r4, r3
   2eab0:	683b      	ldr	r3, [r7, #0]
   2eab2:	691e      	ldr	r6, [r3, #16]
   2eab4:	683b      	ldr	r3, [r7, #0]
   2eab6:	695a      	ldr	r2, [r3, #20]
   2eab8:	683b      	ldr	r3, [r7, #0]
   2eaba:	6899      	ldr	r1, [r3, #8]
   2eabc:	683b      	ldr	r3, [r7, #0]
   2eabe:	68db      	ldr	r3, [r3, #12]
   2eac0:	68fd      	ldr	r5, [r7, #12]
   2eac2:	9302      	str	r3, [sp, #8]
   2eac4:	9101      	str	r1, [sp, #4]
   2eac6:	9200      	str	r2, [sp, #0]
   2eac8:	0033      	movs	r3, r6
   2eaca:	002a      	movs	r2, r5
   2eacc:	0021      	movs	r1, r4
   2eace:	4c08      	ldr	r4, [pc, #32]	; (2eaf0 <mqtt_init+0xac>)
   2ead0:	47a0      	blx	r4
		return SUCCESS;
   2ead2:	2300      	movs	r3, #0
   2ead4:	e001      	b.n	2eada <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2ead6:	2301      	movs	r3, #1
   2ead8:	425b      	negs	r3, r3
}
   2eada:	0018      	movs	r0, r3
   2eadc:	46bd      	mov	sp, r7
   2eade:	b005      	add	sp, #20
   2eae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2eae2:	46c0      	nop			; (mov r8, r8)
   2eae4:	0002e89d 	.word	0x0002e89d
   2eae8:	000339c9 	.word	0x000339c9
   2eaec:	0002e9e5 	.word	0x0002e9e5
   2eaf0:	0002d915 	.word	0x0002d915

0002eaf4 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2eaf4:	b580      	push	{r7, lr}
   2eaf6:	b082      	sub	sp, #8
   2eaf8:	af00      	add	r7, sp, #0
   2eafa:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2eafc:	687b      	ldr	r3, [r7, #4]
   2eafe:	4a0c      	ldr	r2, [pc, #48]	; (2eb30 <mqtt_get_config_defaults+0x3c>)
   2eb00:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2eb02:	687b      	ldr	r3, [r7, #4]
   2eb04:	2200      	movs	r2, #0
   2eb06:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2eb08:	687b      	ldr	r3, [r7, #4]
   2eb0a:	223c      	movs	r2, #60	; 0x3c
   2eb0c:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2eb0e:	687b      	ldr	r3, [r7, #4]
   2eb10:	2200      	movs	r2, #0
   2eb12:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2eb14:	687b      	ldr	r3, [r7, #4]
   2eb16:	2200      	movs	r2, #0
   2eb18:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2eb1a:	687b      	ldr	r3, [r7, #4]
   2eb1c:	2200      	movs	r2, #0
   2eb1e:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2eb20:	687b      	ldr	r3, [r7, #4]
   2eb22:	2200      	movs	r2, #0
   2eb24:	615a      	str	r2, [r3, #20]
}
   2eb26:	46c0      	nop			; (mov r8, r8)
   2eb28:	46bd      	mov	sp, r7
   2eb2a:	b002      	add	sp, #8
   2eb2c:	bd80      	pop	{r7, pc}
   2eb2e:	46c0      	nop			; (mov r8, r8)
   2eb30:	0000075b 	.word	0x0000075b

0002eb34 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2eb34:	b580      	push	{r7, lr}
   2eb36:	b082      	sub	sp, #8
   2eb38:	af00      	add	r7, sp, #0
   2eb3a:	6078      	str	r0, [r7, #4]
   2eb3c:	6039      	str	r1, [r7, #0]
	if(module)
   2eb3e:	687b      	ldr	r3, [r7, #4]
   2eb40:	2b00      	cmp	r3, #0
   2eb42:	d004      	beq.n	2eb4e <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2eb44:	687b      	ldr	r3, [r7, #4]
   2eb46:	683a      	ldr	r2, [r7, #0]
   2eb48:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2eb4a:	2300      	movs	r3, #0
   2eb4c:	e001      	b.n	2eb52 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2eb4e:	2301      	movs	r3, #1
   2eb50:	425b      	negs	r3, r3
}
   2eb52:	0018      	movs	r0, r3
   2eb54:	46bd      	mov	sp, r7
   2eb56:	b002      	add	sp, #8
   2eb58:	bd80      	pop	{r7, pc}
	...

0002eb5c <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2eb5c:	b580      	push	{r7, lr}
   2eb5e:	b082      	sub	sp, #8
   2eb60:	af00      	add	r7, sp, #0
   2eb62:	603a      	str	r2, [r7, #0]
   2eb64:	1dfb      	adds	r3, r7, #7
   2eb66:	1c02      	adds	r2, r0, #0
   2eb68:	701a      	strb	r2, [r3, #0]
   2eb6a:	1dbb      	adds	r3, r7, #6
   2eb6c:	1c0a      	adds	r2, r1, #0
   2eb6e:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2eb70:	683a      	ldr	r2, [r7, #0]
   2eb72:	1dbb      	adds	r3, r7, #6
   2eb74:	7819      	ldrb	r1, [r3, #0]
   2eb76:	1dfb      	adds	r3, r7, #7
   2eb78:	781b      	ldrb	r3, [r3, #0]
   2eb7a:	b25b      	sxtb	r3, r3
   2eb7c:	0018      	movs	r0, r3
   2eb7e:	4b03      	ldr	r3, [pc, #12]	; (2eb8c <mqtt_socket_event_handler+0x30>)
   2eb80:	4798      	blx	r3
}
   2eb82:	46c0      	nop			; (mov r8, r8)
   2eb84:	46bd      	mov	sp, r7
   2eb86:	b002      	add	sp, #8
   2eb88:	bd80      	pop	{r7, pc}
   2eb8a:	46c0      	nop			; (mov r8, r8)
   2eb8c:	0002e5d9 	.word	0x0002e5d9

0002eb90 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2eb90:	b580      	push	{r7, lr}
   2eb92:	b082      	sub	sp, #8
   2eb94:	af00      	add	r7, sp, #0
   2eb96:	6078      	str	r0, [r7, #4]
   2eb98:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2eb9a:	683a      	ldr	r2, [r7, #0]
   2eb9c:	687b      	ldr	r3, [r7, #4]
   2eb9e:	0011      	movs	r1, r2
   2eba0:	0018      	movs	r0, r3
   2eba2:	4b03      	ldr	r3, [pc, #12]	; (2ebb0 <mqtt_socket_resolve_handler+0x20>)
   2eba4:	4798      	blx	r3
}
   2eba6:	46c0      	nop			; (mov r8, r8)
   2eba8:	46bd      	mov	sp, r7
   2ebaa:	b002      	add	sp, #8
   2ebac:	bd80      	pop	{r7, pc}
   2ebae:	46c0      	nop			; (mov r8, r8)
   2ebb0:	0002e589 	.word	0x0002e589

0002ebb4 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2ebb4:	b590      	push	{r4, r7, lr}
   2ebb6:	b085      	sub	sp, #20
   2ebb8:	af00      	add	r7, sp, #0
   2ebba:	6078      	str	r0, [r7, #4]
   2ebbc:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2ebbe:	687b      	ldr	r3, [r7, #4]
   2ebc0:	3320      	adds	r3, #32
   2ebc2:	0018      	movs	r0, r3
   2ebc4:	687b      	ldr	r3, [r7, #4]
   2ebc6:	889b      	ldrh	r3, [r3, #4]
   2ebc8:	001a      	movs	r2, r3
   2ebca:	687b      	ldr	r3, [r7, #4]
   2ebcc:	799b      	ldrb	r3, [r3, #6]
   2ebce:	6839      	ldr	r1, [r7, #0]
   2ebd0:	4c09      	ldr	r4, [pc, #36]	; (2ebf8 <mqtt_connect+0x44>)
   2ebd2:	47a0      	blx	r4
   2ebd4:	0003      	movs	r3, r0
   2ebd6:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2ebd8:	687b      	ldr	r3, [r7, #4]
   2ebda:	681b      	ldr	r3, [r3, #0]
   2ebdc:	2b00      	cmp	r3, #0
   2ebde:	d006      	beq.n	2ebee <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2ebe0:	687b      	ldr	r3, [r7, #4]
   2ebe2:	681b      	ldr	r3, [r3, #0]
   2ebe4:	220c      	movs	r2, #12
   2ebe6:	18ba      	adds	r2, r7, r2
   2ebe8:	6878      	ldr	r0, [r7, #4]
   2ebea:	2100      	movs	r1, #0
   2ebec:	4798      	blx	r3
	return connResult.sock_connected.result;
   2ebee:	68fb      	ldr	r3, [r7, #12]
}
   2ebf0:	0018      	movs	r0, r3
   2ebf2:	46bd      	mov	sp, r7
   2ebf4:	b005      	add	sp, #20
   2ebf6:	bd90      	pop	{r4, r7, pc}
   2ebf8:	0002e8d5 	.word	0x0002e8d5

0002ebfc <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2ebfc:	b580      	push	{r7, lr}
   2ebfe:	b09c      	sub	sp, #112	; 0x70
   2ec00:	af00      	add	r7, sp, #0
   2ec02:	60f8      	str	r0, [r7, #12]
   2ec04:	607a      	str	r2, [r7, #4]
   2ec06:	603b      	str	r3, [r7, #0]
   2ec08:	230b      	movs	r3, #11
   2ec0a:	18fb      	adds	r3, r7, r3
   2ec0c:	1c0a      	adds	r2, r1, #0
   2ec0e:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2ec10:	2310      	movs	r3, #16
   2ec12:	18fa      	adds	r2, r7, r3
   2ec14:	4b31      	ldr	r3, [pc, #196]	; (2ecdc <mqtt_connect_broker+0xe0>)
   2ec16:	0010      	movs	r0, r2
   2ec18:	0019      	movs	r1, r3
   2ec1a:	2358      	movs	r3, #88	; 0x58
   2ec1c:	001a      	movs	r2, r3
   2ec1e:	4b30      	ldr	r3, [pc, #192]	; (2ece0 <mqtt_connect_broker+0xe4>)
   2ec20:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2ec22:	2310      	movs	r3, #16
   2ec24:	18fb      	adds	r3, r7, r3
   2ec26:	2204      	movs	r2, #4
   2ec28:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2ec2a:	2310      	movs	r3, #16
   2ec2c:	18fb      	adds	r3, r7, r3
   2ec2e:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2ec30:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2ec32:	2310      	movs	r3, #16
   2ec34:	18fb      	adds	r3, r7, r3
   2ec36:	687a      	ldr	r2, [r7, #4]
   2ec38:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2ec3a:	2310      	movs	r3, #16
   2ec3c:	18fb      	adds	r3, r7, r3
   2ec3e:	683a      	ldr	r2, [r7, #0]
   2ec40:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2ec42:	2310      	movs	r3, #16
   2ec44:	18fb      	adds	r3, r7, r3
   2ec46:	220b      	movs	r2, #11
   2ec48:	18ba      	adds	r2, r7, r2
   2ec4a:	7812      	ldrb	r2, [r2, #0]
   2ec4c:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2ec4e:	2310      	movs	r3, #16
   2ec50:	18fb      	adds	r3, r7, r3
   2ec52:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2ec54:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2ec56:	2310      	movs	r3, #16
   2ec58:	18fb      	adds	r3, r7, r3
   2ec5a:	2280      	movs	r2, #128	; 0x80
   2ec5c:	18ba      	adds	r2, r7, r2
   2ec5e:	6812      	ldr	r2, [r2, #0]
   2ec60:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2ec62:	2310      	movs	r3, #16
   2ec64:	18fb      	adds	r3, r7, r3
   2ec66:	228c      	movs	r2, #140	; 0x8c
   2ec68:	18ba      	adds	r2, r7, r2
   2ec6a:	213c      	movs	r1, #60	; 0x3c
   2ec6c:	7812      	ldrb	r2, [r2, #0]
   2ec6e:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2ec70:	2310      	movs	r3, #16
   2ec72:	18fb      	adds	r3, r7, r3
   2ec74:	2288      	movs	r2, #136	; 0x88
   2ec76:	18ba      	adds	r2, r7, r2
   2ec78:	213d      	movs	r1, #61	; 0x3d
   2ec7a:	7812      	ldrb	r2, [r2, #0]
   2ec7c:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2ec7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2ec80:	2b00      	cmp	r3, #0
   2ec82:	d008      	beq.n	2ec96 <mqtt_connect_broker+0x9a>
   2ec84:	2380      	movs	r3, #128	; 0x80
   2ec86:	18fb      	adds	r3, r7, r3
   2ec88:	681b      	ldr	r3, [r3, #0]
   2ec8a:	2b00      	cmp	r3, #0
   2ec8c:	d003      	beq.n	2ec96 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2ec8e:	2310      	movs	r3, #16
   2ec90:	18fb      	adds	r3, r7, r3
   2ec92:	2201      	movs	r2, #1
   2ec94:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2ec96:	68fb      	ldr	r3, [r7, #12]
   2ec98:	69db      	ldr	r3, [r3, #28]
   2ec9a:	2210      	movs	r2, #16
   2ec9c:	18ba      	adds	r2, r7, r2
   2ec9e:	0011      	movs	r1, r2
   2eca0:	0018      	movs	r0, r3
   2eca2:	4b10      	ldr	r3, [pc, #64]	; (2ece4 <mqtt_connect_broker+0xe8>)
   2eca4:	4798      	blx	r3
   2eca6:	0003      	movs	r3, r0
   2eca8:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2ecaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2ecac:	b2da      	uxtb	r2, r3
   2ecae:	2368      	movs	r3, #104	; 0x68
   2ecb0:	18fb      	adds	r3, r7, r3
   2ecb2:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2ecb4:	68fb      	ldr	r3, [r7, #12]
   2ecb6:	681b      	ldr	r3, [r3, #0]
   2ecb8:	2b00      	cmp	r3, #0
   2ecba:	d006      	beq.n	2ecca <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2ecbc:	68fb      	ldr	r3, [r7, #12]
   2ecbe:	681b      	ldr	r3, [r3, #0]
   2ecc0:	2268      	movs	r2, #104	; 0x68
   2ecc2:	18ba      	adds	r2, r7, r2
   2ecc4:	68f8      	ldr	r0, [r7, #12]
   2ecc6:	2101      	movs	r1, #1
   2ecc8:	4798      	blx	r3
	
	module->isConnected = true;
   2ecca:	68fb      	ldr	r3, [r7, #12]
   2eccc:	2234      	movs	r2, #52	; 0x34
   2ecce:	2101      	movs	r1, #1
   2ecd0:	5499      	strb	r1, [r3, r2]
	return rc;
   2ecd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2ecd4:	0018      	movs	r0, r3
   2ecd6:	46bd      	mov	sp, r7
   2ecd8:	b01c      	add	sp, #112	; 0x70
   2ecda:	bd80      	pop	{r7, pc}
   2ecdc:	00038a20 	.word	0x00038a20
   2ece0:	000339c9 	.word	0x000339c9
   2ece4:	0002e025 	.word	0x0002e025

0002ece8 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2ece8:	b580      	push	{r7, lr}
   2ecea:	b084      	sub	sp, #16
   2ecec:	af00      	add	r7, sp, #0
   2ecee:	6078      	str	r0, [r7, #4]
   2ecf0:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2ecf2:	687b      	ldr	r3, [r7, #4]
   2ecf4:	69db      	ldr	r3, [r3, #28]
   2ecf6:	0018      	movs	r0, r3
   2ecf8:	4b0c      	ldr	r3, [pc, #48]	; (2ed2c <mqtt_disconnect+0x44>)
   2ecfa:	4798      	blx	r3
   2ecfc:	0003      	movs	r3, r0
   2ecfe:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2ed00:	68fb      	ldr	r3, [r7, #12]
   2ed02:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2ed04:	687b      	ldr	r3, [r7, #4]
   2ed06:	681b      	ldr	r3, [r3, #0]
   2ed08:	2b00      	cmp	r3, #0
   2ed0a:	d006      	beq.n	2ed1a <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2ed0c:	687b      	ldr	r3, [r7, #4]
   2ed0e:	681b      	ldr	r3, [r3, #0]
   2ed10:	2208      	movs	r2, #8
   2ed12:	18ba      	adds	r2, r7, r2
   2ed14:	6878      	ldr	r0, [r7, #4]
   2ed16:	2105      	movs	r1, #5
   2ed18:	4798      	blx	r3
	
	module->isConnected = false;
   2ed1a:	687b      	ldr	r3, [r7, #4]
   2ed1c:	2234      	movs	r2, #52	; 0x34
   2ed1e:	2100      	movs	r1, #0
   2ed20:	5499      	strb	r1, [r3, r2]
	return rc;
   2ed22:	68fb      	ldr	r3, [r7, #12]
}
   2ed24:	0018      	movs	r0, r3
   2ed26:	46bd      	mov	sp, r7
   2ed28:	b004      	add	sp, #16
   2ed2a:	bd80      	pop	{r7, pc}
   2ed2c:	0002e4b1 	.word	0x0002e4b1

0002ed30 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2ed30:	b580      	push	{r7, lr}
   2ed32:	b08a      	sub	sp, #40	; 0x28
   2ed34:	af00      	add	r7, sp, #0
   2ed36:	60f8      	str	r0, [r7, #12]
   2ed38:	60b9      	str	r1, [r7, #8]
   2ed3a:	607a      	str	r2, [r7, #4]
   2ed3c:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2ed3e:	2314      	movs	r3, #20
   2ed40:	18fb      	adds	r3, r7, r3
   2ed42:	2230      	movs	r2, #48	; 0x30
   2ed44:	18ba      	adds	r2, r7, r2
   2ed46:	7812      	ldrb	r2, [r2, #0]
   2ed48:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2ed4a:	2314      	movs	r3, #20
   2ed4c:	18fb      	adds	r3, r7, r3
   2ed4e:	687a      	ldr	r2, [r7, #4]
   2ed50:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2ed52:	2314      	movs	r3, #20
   2ed54:	18fb      	adds	r3, r7, r3
   2ed56:	683a      	ldr	r2, [r7, #0]
   2ed58:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2ed5a:	2314      	movs	r3, #20
   2ed5c:	18fb      	adds	r3, r7, r3
   2ed5e:	2234      	movs	r2, #52	; 0x34
   2ed60:	18ba      	adds	r2, r7, r2
   2ed62:	7812      	ldrb	r2, [r2, #0]
   2ed64:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2ed66:	68fb      	ldr	r3, [r7, #12]
   2ed68:	69db      	ldr	r3, [r3, #28]
   2ed6a:	2214      	movs	r2, #20
   2ed6c:	18ba      	adds	r2, r7, r2
   2ed6e:	68b9      	ldr	r1, [r7, #8]
   2ed70:	0018      	movs	r0, r3
   2ed72:	4b09      	ldr	r3, [pc, #36]	; (2ed98 <mqtt_publish+0x68>)
   2ed74:	4798      	blx	r3
   2ed76:	0003      	movs	r3, r0
   2ed78:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2ed7a:	68fb      	ldr	r3, [r7, #12]
   2ed7c:	681b      	ldr	r3, [r3, #0]
   2ed7e:	2b00      	cmp	r3, #0
   2ed80:	d005      	beq.n	2ed8e <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2ed82:	68fb      	ldr	r3, [r7, #12]
   2ed84:	681b      	ldr	r3, [r3, #0]
   2ed86:	68f8      	ldr	r0, [r7, #12]
   2ed88:	2200      	movs	r2, #0
   2ed8a:	2102      	movs	r1, #2
   2ed8c:	4798      	blx	r3
	
	return rc;
   2ed8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2ed90:	0018      	movs	r0, r3
   2ed92:	46bd      	mov	sp, r7
   2ed94:	b00a      	add	sp, #40	; 0x28
   2ed96:	bd80      	pop	{r7, pc}
   2ed98:	0002e2f1 	.word	0x0002e2f1

0002ed9c <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2ed9c:	b590      	push	{r4, r7, lr}
   2ed9e:	b087      	sub	sp, #28
   2eda0:	af00      	add	r7, sp, #0
   2eda2:	60f8      	str	r0, [r7, #12]
   2eda4:	60b9      	str	r1, [r7, #8]
   2eda6:	603b      	str	r3, [r7, #0]
   2eda8:	1dfb      	adds	r3, r7, #7
   2edaa:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2edac:	68fb      	ldr	r3, [r7, #12]
   2edae:	69d8      	ldr	r0, [r3, #28]
   2edb0:	683c      	ldr	r4, [r7, #0]
   2edb2:	1dfb      	adds	r3, r7, #7
   2edb4:	781a      	ldrb	r2, [r3, #0]
   2edb6:	68b9      	ldr	r1, [r7, #8]
   2edb8:	0023      	movs	r3, r4
   2edba:	4c09      	ldr	r4, [pc, #36]	; (2ede0 <mqtt_subscribe+0x44>)
   2edbc:	47a0      	blx	r4
   2edbe:	0003      	movs	r3, r0
   2edc0:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2edc2:	68fb      	ldr	r3, [r7, #12]
   2edc4:	681b      	ldr	r3, [r3, #0]
   2edc6:	2b00      	cmp	r3, #0
   2edc8:	d005      	beq.n	2edd6 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2edca:	68fb      	ldr	r3, [r7, #12]
   2edcc:	681b      	ldr	r3, [r3, #0]
   2edce:	68f8      	ldr	r0, [r7, #12]
   2edd0:	2200      	movs	r2, #0
   2edd2:	2103      	movs	r1, #3
   2edd4:	4798      	blx	r3
	
	return rc;
   2edd6:	697b      	ldr	r3, [r7, #20]
}
   2edd8:	0018      	movs	r0, r3
   2edda:	46bd      	mov	sp, r7
   2eddc:	b007      	add	sp, #28
   2edde:	bd90      	pop	{r4, r7, pc}
   2ede0:	0002e165 	.word	0x0002e165

0002ede4 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2ede4:	b580      	push	{r7, lr}
   2ede6:	b082      	sub	sp, #8
   2ede8:	af00      	add	r7, sp, #0
   2edea:	6078      	str	r0, [r7, #4]
   2edec:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2edee:	687b      	ldr	r3, [r7, #4]
   2edf0:	69db      	ldr	r3, [r3, #28]
   2edf2:	683a      	ldr	r2, [r7, #0]
   2edf4:	0011      	movs	r1, r2
   2edf6:	0018      	movs	r0, r3
   2edf8:	4b03      	ldr	r3, [pc, #12]	; (2ee08 <mqtt_yield+0x24>)
   2edfa:	4798      	blx	r3
   2edfc:	0003      	movs	r3, r0
   2edfe:	0018      	movs	r0, r3
   2ee00:	46bd      	mov	sp, r7
   2ee02:	b002      	add	sp, #8
   2ee04:	bd80      	pop	{r7, pc}
   2ee06:	46c0      	nop			; (mov r8, r8)
   2ee08:	0002df6d 	.word	0x0002df6d

0002ee0c <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2ee0c:	b590      	push	{r4, r7, lr}
   2ee0e:	b085      	sub	sp, #20
   2ee10:	af00      	add	r7, sp, #0
   2ee12:	6078      	str	r0, [r7, #4]
	int len = 0;
   2ee14:	2300      	movs	r3, #0
   2ee16:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2ee18:	687b      	ldr	r3, [r7, #4]
   2ee1a:	7a1b      	ldrb	r3, [r3, #8]
   2ee1c:	2b03      	cmp	r3, #3
   2ee1e:	d102      	bne.n	2ee26 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2ee20:	230c      	movs	r3, #12
   2ee22:	60fb      	str	r3, [r7, #12]
   2ee24:	e005      	b.n	2ee32 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2ee26:	687b      	ldr	r3, [r7, #4]
   2ee28:	7a1b      	ldrb	r3, [r3, #8]
   2ee2a:	2b04      	cmp	r3, #4
   2ee2c:	d101      	bne.n	2ee32 <MQTTSerialize_connectLength+0x26>
		len = 10;
   2ee2e:	230a      	movs	r3, #10
   2ee30:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2ee32:	687b      	ldr	r3, [r7, #4]
   2ee34:	68d8      	ldr	r0, [r3, #12]
   2ee36:	6919      	ldr	r1, [r3, #16]
   2ee38:	695a      	ldr	r2, [r3, #20]
   2ee3a:	4b25      	ldr	r3, [pc, #148]	; (2eed0 <MQTTSerialize_connectLength+0xc4>)
   2ee3c:	4798      	blx	r3
   2ee3e:	0003      	movs	r3, r0
   2ee40:	3302      	adds	r3, #2
   2ee42:	68fa      	ldr	r2, [r7, #12]
   2ee44:	18d3      	adds	r3, r2, r3
   2ee46:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2ee48:	687b      	ldr	r3, [r7, #4]
   2ee4a:	7edb      	ldrb	r3, [r3, #27]
   2ee4c:	2b00      	cmp	r3, #0
   2ee4e:	d013      	beq.n	2ee78 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2ee50:	687b      	ldr	r3, [r7, #4]
   2ee52:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2ee54:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2ee56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ee58:	4b1d      	ldr	r3, [pc, #116]	; (2eed0 <MQTTSerialize_connectLength+0xc4>)
   2ee5a:	4798      	blx	r3
   2ee5c:	0003      	movs	r3, r0
   2ee5e:	1c9c      	adds	r4, r3, #2
   2ee60:	687b      	ldr	r3, [r7, #4]
   2ee62:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2ee64:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2ee66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2ee68:	4b19      	ldr	r3, [pc, #100]	; (2eed0 <MQTTSerialize_connectLength+0xc4>)
   2ee6a:	4798      	blx	r3
   2ee6c:	0003      	movs	r3, r0
   2ee6e:	18e3      	adds	r3, r4, r3
   2ee70:	3302      	adds	r3, #2
   2ee72:	68fa      	ldr	r2, [r7, #12]
   2ee74:	18d3      	adds	r3, r2, r3
   2ee76:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2ee78:	687b      	ldr	r3, [r7, #4]
   2ee7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2ee7c:	2b00      	cmp	r3, #0
   2ee7e:	d103      	bne.n	2ee88 <MQTTSerialize_connectLength+0x7c>
   2ee80:	687b      	ldr	r3, [r7, #4]
   2ee82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2ee84:	2b00      	cmp	r3, #0
   2ee86:	d00a      	beq.n	2ee9e <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2ee88:	687b      	ldr	r3, [r7, #4]
   2ee8a:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2ee8c:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2ee8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2ee90:	4b0f      	ldr	r3, [pc, #60]	; (2eed0 <MQTTSerialize_connectLength+0xc4>)
   2ee92:	4798      	blx	r3
   2ee94:	0003      	movs	r3, r0
   2ee96:	3302      	adds	r3, #2
   2ee98:	68fa      	ldr	r2, [r7, #12]
   2ee9a:	18d3      	adds	r3, r2, r3
   2ee9c:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2ee9e:	687b      	ldr	r3, [r7, #4]
   2eea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2eea2:	2b00      	cmp	r3, #0
   2eea4:	d103      	bne.n	2eeae <MQTTSerialize_connectLength+0xa2>
   2eea6:	687b      	ldr	r3, [r7, #4]
   2eea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2eeaa:	2b00      	cmp	r3, #0
   2eeac:	d00a      	beq.n	2eec4 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2eeae:	687b      	ldr	r3, [r7, #4]
   2eeb0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2eeb2:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2eeb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2eeb6:	4b06      	ldr	r3, [pc, #24]	; (2eed0 <MQTTSerialize_connectLength+0xc4>)
   2eeb8:	4798      	blx	r3
   2eeba:	0003      	movs	r3, r0
   2eebc:	3302      	adds	r3, #2
   2eebe:	68fa      	ldr	r2, [r7, #12]
   2eec0:	18d3      	adds	r3, r2, r3
   2eec2:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2eec4:	68fb      	ldr	r3, [r7, #12]
}
   2eec6:	0018      	movs	r0, r3
   2eec8:	46bd      	mov	sp, r7
   2eeca:	b005      	add	sp, #20
   2eecc:	bd90      	pop	{r4, r7, pc}
   2eece:	46c0      	nop			; (mov r8, r8)
   2eed0:	0002f87d 	.word	0x0002f87d

0002eed4 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2eed4:	b590      	push	{r4, r7, lr}
   2eed6:	b08b      	sub	sp, #44	; 0x2c
   2eed8:	af00      	add	r7, sp, #0
   2eeda:	60f8      	str	r0, [r7, #12]
   2eedc:	60b9      	str	r1, [r7, #8]
   2eede:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2eee0:	68fb      	ldr	r3, [r7, #12]
   2eee2:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2eee4:	2300      	movs	r3, #0
   2eee6:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2eee8:	2300      	movs	r3, #0
   2eeea:	617b      	str	r3, [r7, #20]
	int len = 0;
   2eeec:	2300      	movs	r3, #0
   2eeee:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2eef0:	2301      	movs	r3, #1
   2eef2:	425b      	negs	r3, r3
   2eef4:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2eef6:	687b      	ldr	r3, [r7, #4]
   2eef8:	0018      	movs	r0, r3
   2eefa:	4b8c      	ldr	r3, [pc, #560]	; (2f12c <MQTTSerialize_connect+0x258>)
   2eefc:	4798      	blx	r3
   2eefe:	0003      	movs	r3, r0
   2ef00:	623b      	str	r3, [r7, #32]
   2ef02:	6a3b      	ldr	r3, [r7, #32]
   2ef04:	0018      	movs	r0, r3
   2ef06:	4b8a      	ldr	r3, [pc, #552]	; (2f130 <MQTTSerialize_connect+0x25c>)
   2ef08:	4798      	blx	r3
   2ef0a:	0002      	movs	r2, r0
   2ef0c:	68bb      	ldr	r3, [r7, #8]
   2ef0e:	429a      	cmp	r2, r3
   2ef10:	dd03      	ble.n	2ef1a <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2ef12:	2302      	movs	r3, #2
   2ef14:	425b      	negs	r3, r3
   2ef16:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2ef18:	e103      	b.n	2f122 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2ef1a:	2318      	movs	r3, #24
   2ef1c:	18fb      	adds	r3, r7, r3
   2ef1e:	2200      	movs	r2, #0
   2ef20:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2ef22:	2318      	movs	r3, #24
   2ef24:	18fb      	adds	r3, r7, r3
   2ef26:	781a      	ldrb	r2, [r3, #0]
   2ef28:	210f      	movs	r1, #15
   2ef2a:	400a      	ands	r2, r1
   2ef2c:	1c11      	adds	r1, r2, #0
   2ef2e:	2210      	movs	r2, #16
   2ef30:	430a      	orrs	r2, r1
   2ef32:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2ef34:	2318      	movs	r3, #24
   2ef36:	18fb      	adds	r3, r7, r3
   2ef38:	781a      	ldrb	r2, [r3, #0]
   2ef3a:	231c      	movs	r3, #28
   2ef3c:	18fb      	adds	r3, r7, r3
   2ef3e:	0011      	movs	r1, r2
   2ef40:	0018      	movs	r0, r3
   2ef42:	4b7c      	ldr	r3, [pc, #496]	; (2f134 <MQTTSerialize_connect+0x260>)
   2ef44:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2ef46:	69fb      	ldr	r3, [r7, #28]
   2ef48:	6a3a      	ldr	r2, [r7, #32]
   2ef4a:	0011      	movs	r1, r2
   2ef4c:	0018      	movs	r0, r3
   2ef4e:	4b7a      	ldr	r3, [pc, #488]	; (2f138 <MQTTSerialize_connect+0x264>)
   2ef50:	4798      	blx	r3
   2ef52:	0002      	movs	r2, r0
   2ef54:	69fb      	ldr	r3, [r7, #28]
   2ef56:	189b      	adds	r3, r3, r2
   2ef58:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2ef5a:	687b      	ldr	r3, [r7, #4]
   2ef5c:	7a1b      	ldrb	r3, [r3, #8]
   2ef5e:	2b04      	cmp	r3, #4
   2ef60:	d10d      	bne.n	2ef7e <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2ef62:	4a76      	ldr	r2, [pc, #472]	; (2f13c <MQTTSerialize_connect+0x268>)
   2ef64:	231c      	movs	r3, #28
   2ef66:	18fb      	adds	r3, r7, r3
   2ef68:	0011      	movs	r1, r2
   2ef6a:	0018      	movs	r0, r3
   2ef6c:	4b74      	ldr	r3, [pc, #464]	; (2f140 <MQTTSerialize_connect+0x26c>)
   2ef6e:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2ef70:	231c      	movs	r3, #28
   2ef72:	18fb      	adds	r3, r7, r3
   2ef74:	2104      	movs	r1, #4
   2ef76:	0018      	movs	r0, r3
   2ef78:	4b6e      	ldr	r3, [pc, #440]	; (2f134 <MQTTSerialize_connect+0x260>)
   2ef7a:	4798      	blx	r3
   2ef7c:	e00c      	b.n	2ef98 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2ef7e:	4a71      	ldr	r2, [pc, #452]	; (2f144 <MQTTSerialize_connect+0x270>)
   2ef80:	231c      	movs	r3, #28
   2ef82:	18fb      	adds	r3, r7, r3
   2ef84:	0011      	movs	r1, r2
   2ef86:	0018      	movs	r0, r3
   2ef88:	4b6d      	ldr	r3, [pc, #436]	; (2f140 <MQTTSerialize_connect+0x26c>)
   2ef8a:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2ef8c:	231c      	movs	r3, #28
   2ef8e:	18fb      	adds	r3, r7, r3
   2ef90:	2103      	movs	r1, #3
   2ef92:	0018      	movs	r0, r3
   2ef94:	4b67      	ldr	r3, [pc, #412]	; (2f134 <MQTTSerialize_connect+0x260>)
   2ef96:	4798      	blx	r3
	}

	flags.all = 0;
   2ef98:	2314      	movs	r3, #20
   2ef9a:	18fb      	adds	r3, r7, r3
   2ef9c:	2200      	movs	r2, #0
   2ef9e:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2efa0:	687b      	ldr	r3, [r7, #4]
   2efa2:	7e9b      	ldrb	r3, [r3, #26]
   2efa4:	1c1a      	adds	r2, r3, #0
   2efa6:	2301      	movs	r3, #1
   2efa8:	4013      	ands	r3, r2
   2efaa:	b2da      	uxtb	r2, r3
   2efac:	2314      	movs	r3, #20
   2efae:	18fb      	adds	r3, r7, r3
   2efb0:	2101      	movs	r1, #1
   2efb2:	400a      	ands	r2, r1
   2efb4:	1890      	adds	r0, r2, r2
   2efb6:	781a      	ldrb	r2, [r3, #0]
   2efb8:	2102      	movs	r1, #2
   2efba:	438a      	bics	r2, r1
   2efbc:	1c11      	adds	r1, r2, #0
   2efbe:	1c02      	adds	r2, r0, #0
   2efc0:	430a      	orrs	r2, r1
   2efc2:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2efc4:	687b      	ldr	r3, [r7, #4]
   2efc6:	7edb      	ldrb	r3, [r3, #27]
   2efc8:	1e5a      	subs	r2, r3, #1
   2efca:	4193      	sbcs	r3, r2
   2efcc:	b2da      	uxtb	r2, r3
   2efce:	2314      	movs	r3, #20
   2efd0:	18fb      	adds	r3, r7, r3
   2efd2:	2101      	movs	r1, #1
   2efd4:	400a      	ands	r2, r1
   2efd6:	0090      	lsls	r0, r2, #2
   2efd8:	781a      	ldrb	r2, [r3, #0]
   2efda:	2104      	movs	r1, #4
   2efdc:	438a      	bics	r2, r1
   2efde:	1c11      	adds	r1, r2, #0
   2efe0:	1c02      	adds	r2, r0, #0
   2efe2:	430a      	orrs	r2, r1
   2efe4:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2efe6:	2314      	movs	r3, #20
   2efe8:	18fb      	adds	r3, r7, r3
   2efea:	781b      	ldrb	r3, [r3, #0]
   2efec:	2204      	movs	r2, #4
   2efee:	4013      	ands	r3, r2
   2eff0:	b2db      	uxtb	r3, r3
   2eff2:	2b00      	cmp	r3, #0
   2eff4:	d025      	beq.n	2f042 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2eff6:	687b      	ldr	r3, [r7, #4]
   2eff8:	223d      	movs	r2, #61	; 0x3d
   2effa:	5c9b      	ldrb	r3, [r3, r2]
   2effc:	1c1a      	adds	r2, r3, #0
   2effe:	2303      	movs	r3, #3
   2f000:	4013      	ands	r3, r2
   2f002:	b2da      	uxtb	r2, r3
   2f004:	2314      	movs	r3, #20
   2f006:	18fb      	adds	r3, r7, r3
   2f008:	2103      	movs	r1, #3
   2f00a:	400a      	ands	r2, r1
   2f00c:	00d0      	lsls	r0, r2, #3
   2f00e:	781a      	ldrb	r2, [r3, #0]
   2f010:	2118      	movs	r1, #24
   2f012:	438a      	bics	r2, r1
   2f014:	1c11      	adds	r1, r2, #0
   2f016:	1c02      	adds	r2, r0, #0
   2f018:	430a      	orrs	r2, r1
   2f01a:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2f01c:	687b      	ldr	r3, [r7, #4]
   2f01e:	223c      	movs	r2, #60	; 0x3c
   2f020:	5c9b      	ldrb	r3, [r3, r2]
   2f022:	1c1a      	adds	r2, r3, #0
   2f024:	2301      	movs	r3, #1
   2f026:	4013      	ands	r3, r2
   2f028:	b2da      	uxtb	r2, r3
   2f02a:	2314      	movs	r3, #20
   2f02c:	18fb      	adds	r3, r7, r3
   2f02e:	2101      	movs	r1, #1
   2f030:	400a      	ands	r2, r1
   2f032:	0150      	lsls	r0, r2, #5
   2f034:	781a      	ldrb	r2, [r3, #0]
   2f036:	2120      	movs	r1, #32
   2f038:	438a      	bics	r2, r1
   2f03a:	1c11      	adds	r1, r2, #0
   2f03c:	1c02      	adds	r2, r0, #0
   2f03e:	430a      	orrs	r2, r1
   2f040:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2f042:	687b      	ldr	r3, [r7, #4]
   2f044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2f046:	2b00      	cmp	r3, #0
   2f048:	d103      	bne.n	2f052 <MQTTSerialize_connect+0x17e>
   2f04a:	687b      	ldr	r3, [r7, #4]
   2f04c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f04e:	2b00      	cmp	r3, #0
   2f050:	d006      	beq.n	2f060 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2f052:	2314      	movs	r3, #20
   2f054:	18fb      	adds	r3, r7, r3
   2f056:	781a      	ldrb	r2, [r3, #0]
   2f058:	2180      	movs	r1, #128	; 0x80
   2f05a:	4249      	negs	r1, r1
   2f05c:	430a      	orrs	r2, r1
   2f05e:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2f060:	687b      	ldr	r3, [r7, #4]
   2f062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f064:	2b00      	cmp	r3, #0
   2f066:	d103      	bne.n	2f070 <MQTTSerialize_connect+0x19c>
   2f068:	687b      	ldr	r3, [r7, #4]
   2f06a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f06c:	2b00      	cmp	r3, #0
   2f06e:	d005      	beq.n	2f07c <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2f070:	2314      	movs	r3, #20
   2f072:	18fb      	adds	r3, r7, r3
   2f074:	781a      	ldrb	r2, [r3, #0]
   2f076:	2140      	movs	r1, #64	; 0x40
   2f078:	430a      	orrs	r2, r1
   2f07a:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2f07c:	2314      	movs	r3, #20
   2f07e:	18fb      	adds	r3, r7, r3
   2f080:	781a      	ldrb	r2, [r3, #0]
   2f082:	231c      	movs	r3, #28
   2f084:	18fb      	adds	r3, r7, r3
   2f086:	0011      	movs	r1, r2
   2f088:	0018      	movs	r0, r3
   2f08a:	4b2a      	ldr	r3, [pc, #168]	; (2f134 <MQTTSerialize_connect+0x260>)
   2f08c:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2f08e:	687b      	ldr	r3, [r7, #4]
   2f090:	8b1b      	ldrh	r3, [r3, #24]
   2f092:	001a      	movs	r2, r3
   2f094:	231c      	movs	r3, #28
   2f096:	18fb      	adds	r3, r7, r3
   2f098:	0011      	movs	r1, r2
   2f09a:	0018      	movs	r0, r3
   2f09c:	4b2a      	ldr	r3, [pc, #168]	; (2f148 <MQTTSerialize_connect+0x274>)
   2f09e:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2f0a0:	687b      	ldr	r3, [r7, #4]
   2f0a2:	221c      	movs	r2, #28
   2f0a4:	18b8      	adds	r0, r7, r2
   2f0a6:	68d9      	ldr	r1, [r3, #12]
   2f0a8:	691a      	ldr	r2, [r3, #16]
   2f0aa:	695b      	ldr	r3, [r3, #20]
   2f0ac:	4c27      	ldr	r4, [pc, #156]	; (2f14c <MQTTSerialize_connect+0x278>)
   2f0ae:	47a0      	blx	r4
	if (options->willFlag)
   2f0b0:	687b      	ldr	r3, [r7, #4]
   2f0b2:	7edb      	ldrb	r3, [r3, #27]
   2f0b4:	2b00      	cmp	r3, #0
   2f0b6:	d00f      	beq.n	2f0d8 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2f0b8:	687b      	ldr	r3, [r7, #4]
   2f0ba:	221c      	movs	r2, #28
   2f0bc:	18b8      	adds	r0, r7, r2
   2f0be:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2f0c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2f0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2f0c4:	4c21      	ldr	r4, [pc, #132]	; (2f14c <MQTTSerialize_connect+0x278>)
   2f0c6:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2f0c8:	687b      	ldr	r3, [r7, #4]
   2f0ca:	221c      	movs	r2, #28
   2f0cc:	18b8      	adds	r0, r7, r2
   2f0ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2f0d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2f0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2f0d4:	4c1d      	ldr	r4, [pc, #116]	; (2f14c <MQTTSerialize_connect+0x278>)
   2f0d6:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2f0d8:	2314      	movs	r3, #20
   2f0da:	18fb      	adds	r3, r7, r3
   2f0dc:	781b      	ldrb	r3, [r3, #0]
   2f0de:	227f      	movs	r2, #127	; 0x7f
   2f0e0:	4393      	bics	r3, r2
   2f0e2:	b2db      	uxtb	r3, r3
   2f0e4:	2b00      	cmp	r3, #0
   2f0e6:	d007      	beq.n	2f0f8 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2f0e8:	687b      	ldr	r3, [r7, #4]
   2f0ea:	221c      	movs	r2, #28
   2f0ec:	18b8      	adds	r0, r7, r2
   2f0ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2f0f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2f0f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f0f4:	4c15      	ldr	r4, [pc, #84]	; (2f14c <MQTTSerialize_connect+0x278>)
   2f0f6:	47a0      	blx	r4
	if (flags.bits.password)
   2f0f8:	2314      	movs	r3, #20
   2f0fa:	18fb      	adds	r3, r7, r3
   2f0fc:	781b      	ldrb	r3, [r3, #0]
   2f0fe:	2240      	movs	r2, #64	; 0x40
   2f100:	4013      	ands	r3, r2
   2f102:	b2db      	uxtb	r3, r3
   2f104:	2b00      	cmp	r3, #0
   2f106:	d007      	beq.n	2f118 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2f108:	687b      	ldr	r3, [r7, #4]
   2f10a:	221c      	movs	r2, #28
   2f10c:	18b8      	adds	r0, r7, r2
   2f10e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2f110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2f112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f114:	4c0d      	ldr	r4, [pc, #52]	; (2f14c <MQTTSerialize_connect+0x278>)
   2f116:	47a0      	blx	r4

	rc = ptr - buf;
   2f118:	69fb      	ldr	r3, [r7, #28]
   2f11a:	001a      	movs	r2, r3
   2f11c:	68fb      	ldr	r3, [r7, #12]
   2f11e:	1ad3      	subs	r3, r2, r3
   2f120:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2f122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f124:	0018      	movs	r0, r3
   2f126:	46bd      	mov	sp, r7
   2f128:	b00b      	add	sp, #44	; 0x2c
   2f12a:	bd90      	pop	{r4, r7, pc}
   2f12c:	0002ee0d 	.word	0x0002ee0d
   2f130:	0002f5a1 	.word	0x0002f5a1
   2f134:	0002f6c3 	.word	0x0002f6c3
   2f138:	0002f4a9 	.word	0x0002f4a9
   2f13c:	00038a78 	.word	0x00038a78
   2f140:	0002f745 	.word	0x0002f745
   2f144:	00038a80 	.word	0x00038a80
   2f148:	0002f6ed 	.word	0x0002f6ed
   2f14c:	0002f795 	.word	0x0002f795

0002f150 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2f150:	b580      	push	{r7, lr}
   2f152:	b08a      	sub	sp, #40	; 0x28
   2f154:	af00      	add	r7, sp, #0
   2f156:	60f8      	str	r0, [r7, #12]
   2f158:	60b9      	str	r1, [r7, #8]
   2f15a:	607a      	str	r2, [r7, #4]
   2f15c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f15e:	2300      	movs	r3, #0
   2f160:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f162:	687b      	ldr	r3, [r7, #4]
   2f164:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f166:	2300      	movs	r3, #0
   2f168:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f16a:	2300      	movs	r3, #0
   2f16c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2f16e:	2300      	movs	r3, #0
   2f170:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f172:	2318      	movs	r3, #24
   2f174:	18fb      	adds	r3, r7, r3
   2f176:	0018      	movs	r0, r3
   2f178:	4b25      	ldr	r3, [pc, #148]	; (2f210 <MQTTDeserialize_connack+0xc0>)
   2f17a:	4798      	blx	r3
   2f17c:	0003      	movs	r3, r0
   2f17e:	001a      	movs	r2, r3
   2f180:	231c      	movs	r3, #28
   2f182:	18fb      	adds	r3, r7, r3
   2f184:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   2f186:	231c      	movs	r3, #28
   2f188:	18fb      	adds	r3, r7, r3
   2f18a:	781b      	ldrb	r3, [r3, #0]
   2f18c:	220f      	movs	r2, #15
   2f18e:	4393      	bics	r3, r2
   2f190:	b2db      	uxtb	r3, r3
   2f192:	2b20      	cmp	r3, #32
   2f194:	d134      	bne.n	2f200 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f196:	69bb      	ldr	r3, [r7, #24]
   2f198:	2214      	movs	r2, #20
   2f19a:	18ba      	adds	r2, r7, r2
   2f19c:	0011      	movs	r1, r2
   2f19e:	0018      	movs	r0, r3
   2f1a0:	4b1c      	ldr	r3, [pc, #112]	; (2f214 <MQTTDeserialize_connack+0xc4>)
   2f1a2:	4798      	blx	r3
   2f1a4:	0003      	movs	r3, r0
   2f1a6:	627b      	str	r3, [r7, #36]	; 0x24
   2f1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f1aa:	69bb      	ldr	r3, [r7, #24]
   2f1ac:	189b      	adds	r3, r3, r2
   2f1ae:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f1b0:	69bb      	ldr	r3, [r7, #24]
   2f1b2:	697a      	ldr	r2, [r7, #20]
   2f1b4:	189b      	adds	r3, r3, r2
   2f1b6:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2f1b8:	6a3b      	ldr	r3, [r7, #32]
   2f1ba:	69ba      	ldr	r2, [r7, #24]
   2f1bc:	1a9b      	subs	r3, r3, r2
   2f1be:	2b01      	cmp	r3, #1
   2f1c0:	dd20      	ble.n	2f204 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   2f1c2:	2318      	movs	r3, #24
   2f1c4:	18fb      	adds	r3, r7, r3
   2f1c6:	0018      	movs	r0, r3
   2f1c8:	4b11      	ldr	r3, [pc, #68]	; (2f210 <MQTTDeserialize_connack+0xc0>)
   2f1ca:	4798      	blx	r3
   2f1cc:	0003      	movs	r3, r0
   2f1ce:	001a      	movs	r2, r3
   2f1d0:	2310      	movs	r3, #16
   2f1d2:	18fb      	adds	r3, r7, r3
   2f1d4:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   2f1d6:	2310      	movs	r3, #16
   2f1d8:	18fb      	adds	r3, r7, r3
   2f1da:	781b      	ldrb	r3, [r3, #0]
   2f1dc:	061b      	lsls	r3, r3, #24
   2f1de:	0fdb      	lsrs	r3, r3, #31
   2f1e0:	b2db      	uxtb	r3, r3
   2f1e2:	001a      	movs	r2, r3
   2f1e4:	68fb      	ldr	r3, [r7, #12]
   2f1e6:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   2f1e8:	2318      	movs	r3, #24
   2f1ea:	18fb      	adds	r3, r7, r3
   2f1ec:	0018      	movs	r0, r3
   2f1ee:	4b08      	ldr	r3, [pc, #32]	; (2f210 <MQTTDeserialize_connack+0xc0>)
   2f1f0:	4798      	blx	r3
   2f1f2:	0003      	movs	r3, r0
   2f1f4:	001a      	movs	r2, r3
   2f1f6:	68bb      	ldr	r3, [r7, #8]
   2f1f8:	701a      	strb	r2, [r3, #0]

	rc = 1;
   2f1fa:	2301      	movs	r3, #1
   2f1fc:	627b      	str	r3, [r7, #36]	; 0x24
   2f1fe:	e002      	b.n	2f206 <MQTTDeserialize_connack+0xb6>
		goto exit;
   2f200:	46c0      	nop			; (mov r8, r8)
   2f202:	e000      	b.n	2f206 <MQTTDeserialize_connack+0xb6>
		goto exit;
   2f204:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f208:	0018      	movs	r0, r3
   2f20a:	46bd      	mov	sp, r7
   2f20c:	b00a      	add	sp, #40	; 0x28
   2f20e:	bd80      	pop	{r7, pc}
   2f210:	0002f697 	.word	0x0002f697
   2f214:	0002f631 	.word	0x0002f631

0002f218 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2f218:	b580      	push	{r7, lr}
   2f21a:	b088      	sub	sp, #32
   2f21c:	af00      	add	r7, sp, #0
   2f21e:	60f8      	str	r0, [r7, #12]
   2f220:	60b9      	str	r1, [r7, #8]
   2f222:	1dfb      	adds	r3, r7, #7
   2f224:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2f226:	2300      	movs	r3, #0
   2f228:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   2f22a:	2301      	movs	r3, #1
   2f22c:	425b      	negs	r3, r3
   2f22e:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2f230:	68fb      	ldr	r3, [r7, #12]
   2f232:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   2f234:	68bb      	ldr	r3, [r7, #8]
   2f236:	2b01      	cmp	r3, #1
   2f238:	dc03      	bgt.n	2f242 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f23a:	2302      	movs	r3, #2
   2f23c:	425b      	negs	r3, r3
   2f23e:	61fb      	str	r3, [r7, #28]
		goto exit;
   2f240:	e029      	b.n	2f296 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   2f242:	2318      	movs	r3, #24
   2f244:	18fb      	adds	r3, r7, r3
   2f246:	2200      	movs	r2, #0
   2f248:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   2f24a:	1dfb      	adds	r3, r7, #7
   2f24c:	781b      	ldrb	r3, [r3, #0]
   2f24e:	220f      	movs	r2, #15
   2f250:	4013      	ands	r3, r2
   2f252:	b2da      	uxtb	r2, r3
   2f254:	2318      	movs	r3, #24
   2f256:	18fb      	adds	r3, r7, r3
   2f258:	0110      	lsls	r0, r2, #4
   2f25a:	781a      	ldrb	r2, [r3, #0]
   2f25c:	210f      	movs	r1, #15
   2f25e:	400a      	ands	r2, r1
   2f260:	1c11      	adds	r1, r2, #0
   2f262:	1c02      	adds	r2, r0, #0
   2f264:	430a      	orrs	r2, r1
   2f266:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f268:	2318      	movs	r3, #24
   2f26a:	18fb      	adds	r3, r7, r3
   2f26c:	781a      	ldrb	r2, [r3, #0]
   2f26e:	2314      	movs	r3, #20
   2f270:	18fb      	adds	r3, r7, r3
   2f272:	0011      	movs	r1, r2
   2f274:	0018      	movs	r0, r3
   2f276:	4b0a      	ldr	r3, [pc, #40]	; (2f2a0 <MQTTSerialize_zero+0x88>)
   2f278:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   2f27a:	697b      	ldr	r3, [r7, #20]
   2f27c:	2100      	movs	r1, #0
   2f27e:	0018      	movs	r0, r3
   2f280:	4b08      	ldr	r3, [pc, #32]	; (2f2a4 <MQTTSerialize_zero+0x8c>)
   2f282:	4798      	blx	r3
   2f284:	0002      	movs	r2, r0
   2f286:	697b      	ldr	r3, [r7, #20]
   2f288:	189b      	adds	r3, r3, r2
   2f28a:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   2f28c:	697b      	ldr	r3, [r7, #20]
   2f28e:	001a      	movs	r2, r3
   2f290:	68fb      	ldr	r3, [r7, #12]
   2f292:	1ad3      	subs	r3, r2, r3
   2f294:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f296:	69fb      	ldr	r3, [r7, #28]
}
   2f298:	0018      	movs	r0, r3
   2f29a:	46bd      	mov	sp, r7
   2f29c:	b008      	add	sp, #32
   2f29e:	bd80      	pop	{r7, pc}
   2f2a0:	0002f6c3 	.word	0x0002f6c3
   2f2a4:	0002f4a9 	.word	0x0002f4a9

0002f2a8 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2f2a8:	b580      	push	{r7, lr}
   2f2aa:	b082      	sub	sp, #8
   2f2ac:	af00      	add	r7, sp, #0
   2f2ae:	6078      	str	r0, [r7, #4]
   2f2b0:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2f2b2:	6839      	ldr	r1, [r7, #0]
   2f2b4:	687b      	ldr	r3, [r7, #4]
   2f2b6:	220e      	movs	r2, #14
   2f2b8:	0018      	movs	r0, r3
   2f2ba:	4b03      	ldr	r3, [pc, #12]	; (2f2c8 <MQTTSerialize_disconnect+0x20>)
   2f2bc:	4798      	blx	r3
   2f2be:	0003      	movs	r3, r0
}
   2f2c0:	0018      	movs	r0, r3
   2f2c2:	46bd      	mov	sp, r7
   2f2c4:	b002      	add	sp, #8
   2f2c6:	bd80      	pop	{r7, pc}
   2f2c8:	0002f219 	.word	0x0002f219

0002f2cc <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2f2cc:	b580      	push	{r7, lr}
   2f2ce:	b082      	sub	sp, #8
   2f2d0:	af00      	add	r7, sp, #0
   2f2d2:	6078      	str	r0, [r7, #4]
   2f2d4:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2f2d6:	6839      	ldr	r1, [r7, #0]
   2f2d8:	687b      	ldr	r3, [r7, #4]
   2f2da:	220c      	movs	r2, #12
   2f2dc:	0018      	movs	r0, r3
   2f2de:	4b03      	ldr	r3, [pc, #12]	; (2f2ec <MQTTSerialize_pingreq+0x20>)
   2f2e0:	4798      	blx	r3
   2f2e2:	0003      	movs	r3, r0
}
   2f2e4:	0018      	movs	r0, r3
   2f2e6:	46bd      	mov	sp, r7
   2f2e8:	b002      	add	sp, #8
   2f2ea:	bd80      	pop	{r7, pc}
   2f2ec:	0002f219 	.word	0x0002f219

0002f2f0 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2f2f0:	b580      	push	{r7, lr}
   2f2f2:	b08a      	sub	sp, #40	; 0x28
   2f2f4:	af00      	add	r7, sp, #0
   2f2f6:	60f8      	str	r0, [r7, #12]
   2f2f8:	60b9      	str	r1, [r7, #8]
   2f2fa:	607a      	str	r2, [r7, #4]
   2f2fc:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f2fe:	2300      	movs	r3, #0
   2f300:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f304:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f306:	2300      	movs	r3, #0
   2f308:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f30a:	2300      	movs	r3, #0
   2f30c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   2f30e:	2300      	movs	r3, #0
   2f310:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f312:	2318      	movs	r3, #24
   2f314:	18fb      	adds	r3, r7, r3
   2f316:	0018      	movs	r0, r3
   2f318:	4b32      	ldr	r3, [pc, #200]	; (2f3e4 <MQTTDeserialize_publish+0xf4>)
   2f31a:	4798      	blx	r3
   2f31c:	0003      	movs	r3, r0
   2f31e:	001a      	movs	r2, r3
   2f320:	231c      	movs	r3, #28
   2f322:	18fb      	adds	r3, r7, r3
   2f324:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   2f326:	231c      	movs	r3, #28
   2f328:	18fb      	adds	r3, r7, r3
   2f32a:	781b      	ldrb	r3, [r3, #0]
   2f32c:	220f      	movs	r2, #15
   2f32e:	4393      	bics	r3, r2
   2f330:	b2db      	uxtb	r3, r3
   2f332:	2b30      	cmp	r3, #48	; 0x30
   2f334:	d150      	bne.n	2f3d8 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   2f336:	231c      	movs	r3, #28
   2f338:	18fb      	adds	r3, r7, r3
   2f33a:	781b      	ldrb	r3, [r3, #0]
   2f33c:	071b      	lsls	r3, r3, #28
   2f33e:	0fdb      	lsrs	r3, r3, #31
   2f340:	b2db      	uxtb	r3, r3
   2f342:	001a      	movs	r2, r3
   2f344:	68fb      	ldr	r3, [r7, #12]
   2f346:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   2f348:	231c      	movs	r3, #28
   2f34a:	18fb      	adds	r3, r7, r3
   2f34c:	781b      	ldrb	r3, [r3, #0]
   2f34e:	075b      	lsls	r3, r3, #29
   2f350:	0f9b      	lsrs	r3, r3, #30
   2f352:	b2db      	uxtb	r3, r3
   2f354:	001a      	movs	r2, r3
   2f356:	68bb      	ldr	r3, [r7, #8]
   2f358:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   2f35a:	231c      	movs	r3, #28
   2f35c:	18fb      	adds	r3, r7, r3
   2f35e:	781b      	ldrb	r3, [r3, #0]
   2f360:	07db      	lsls	r3, r3, #31
   2f362:	0fdb      	lsrs	r3, r3, #31
   2f364:	b2db      	uxtb	r3, r3
   2f366:	001a      	movs	r2, r3
   2f368:	687b      	ldr	r3, [r7, #4]
   2f36a:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f36c:	69bb      	ldr	r3, [r7, #24]
   2f36e:	2214      	movs	r2, #20
   2f370:	18ba      	adds	r2, r7, r2
   2f372:	0011      	movs	r1, r2
   2f374:	0018      	movs	r0, r3
   2f376:	4b1c      	ldr	r3, [pc, #112]	; (2f3e8 <MQTTDeserialize_publish+0xf8>)
   2f378:	4798      	blx	r3
   2f37a:	0003      	movs	r3, r0
   2f37c:	627b      	str	r3, [r7, #36]	; 0x24
   2f37e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f380:	69bb      	ldr	r3, [r7, #24]
   2f382:	189b      	adds	r3, r3, r2
   2f384:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f386:	69bb      	ldr	r3, [r7, #24]
   2f388:	697a      	ldr	r2, [r7, #20]
   2f38a:	189b      	adds	r3, r3, r2
   2f38c:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f38e:	6a3a      	ldr	r2, [r7, #32]
   2f390:	2318      	movs	r3, #24
   2f392:	18f9      	adds	r1, r7, r3
   2f394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f396:	0018      	movs	r0, r3
   2f398:	4b14      	ldr	r3, [pc, #80]	; (2f3ec <MQTTDeserialize_publish+0xfc>)
   2f39a:	4798      	blx	r3
   2f39c:	1e03      	subs	r3, r0, #0
   2f39e:	d01c      	beq.n	2f3da <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2f3a0:	6a3b      	ldr	r3, [r7, #32]
   2f3a2:	69ba      	ldr	r2, [r7, #24]
   2f3a4:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f3a6:	d418      	bmi.n	2f3da <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   2f3a8:	68bb      	ldr	r3, [r7, #8]
   2f3aa:	681b      	ldr	r3, [r3, #0]
   2f3ac:	2b00      	cmp	r3, #0
   2f3ae:	dd08      	ble.n	2f3c2 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   2f3b0:	2318      	movs	r3, #24
   2f3b2:	18fb      	adds	r3, r7, r3
   2f3b4:	0018      	movs	r0, r3
   2f3b6:	4b0e      	ldr	r3, [pc, #56]	; (2f3f0 <MQTTDeserialize_publish+0x100>)
   2f3b8:	4798      	blx	r3
   2f3ba:	0003      	movs	r3, r0
   2f3bc:	b29a      	uxth	r2, r3
   2f3be:	683b      	ldr	r3, [r7, #0]
   2f3c0:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   2f3c2:	6a3b      	ldr	r3, [r7, #32]
   2f3c4:	69ba      	ldr	r2, [r7, #24]
   2f3c6:	1a9a      	subs	r2, r3, r2
   2f3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f3ca:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   2f3cc:	69ba      	ldr	r2, [r7, #24]
   2f3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f3d0:	601a      	str	r2, [r3, #0]
	rc = 1;
   2f3d2:	2301      	movs	r3, #1
   2f3d4:	627b      	str	r3, [r7, #36]	; 0x24
   2f3d6:	e000      	b.n	2f3da <MQTTDeserialize_publish+0xea>
		goto exit;
   2f3d8:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f3dc:	0018      	movs	r0, r3
   2f3de:	46bd      	mov	sp, r7
   2f3e0:	b00a      	add	sp, #40	; 0x28
   2f3e2:	bd80      	pop	{r7, pc}
   2f3e4:	0002f697 	.word	0x0002f697
   2f3e8:	0002f631 	.word	0x0002f631
   2f3ec:	0002f815 	.word	0x0002f815
   2f3f0:	0002f665 	.word	0x0002f665

0002f3f4 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   2f3f4:	b580      	push	{r7, lr}
   2f3f6:	b08a      	sub	sp, #40	; 0x28
   2f3f8:	af00      	add	r7, sp, #0
   2f3fa:	60f8      	str	r0, [r7, #12]
   2f3fc:	60b9      	str	r1, [r7, #8]
   2f3fe:	607a      	str	r2, [r7, #4]
   2f400:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f402:	2300      	movs	r3, #0
   2f404:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f406:	683b      	ldr	r3, [r7, #0]
   2f408:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f40a:	2300      	movs	r3, #0
   2f40c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f40e:	2300      	movs	r3, #0
   2f410:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f412:	2318      	movs	r3, #24
   2f414:	18fb      	adds	r3, r7, r3
   2f416:	0018      	movs	r0, r3
   2f418:	4b20      	ldr	r3, [pc, #128]	; (2f49c <MQTTDeserialize_ack+0xa8>)
   2f41a:	4798      	blx	r3
   2f41c:	0003      	movs	r3, r0
   2f41e:	001a      	movs	r2, r3
   2f420:	231c      	movs	r3, #28
   2f422:	18fb      	adds	r3, r7, r3
   2f424:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   2f426:	231c      	movs	r3, #28
   2f428:	18fb      	adds	r3, r7, r3
   2f42a:	781b      	ldrb	r3, [r3, #0]
   2f42c:	071b      	lsls	r3, r3, #28
   2f42e:	0fdb      	lsrs	r3, r3, #31
   2f430:	b2db      	uxtb	r3, r3
   2f432:	001a      	movs	r2, r3
   2f434:	68bb      	ldr	r3, [r7, #8]
   2f436:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   2f438:	231c      	movs	r3, #28
   2f43a:	18fb      	adds	r3, r7, r3
   2f43c:	781b      	ldrb	r3, [r3, #0]
   2f43e:	061b      	lsls	r3, r3, #24
   2f440:	0f1b      	lsrs	r3, r3, #28
   2f442:	b2db      	uxtb	r3, r3
   2f444:	001a      	movs	r2, r3
   2f446:	68fb      	ldr	r3, [r7, #12]
   2f448:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f44a:	69bb      	ldr	r3, [r7, #24]
   2f44c:	2214      	movs	r2, #20
   2f44e:	18ba      	adds	r2, r7, r2
   2f450:	0011      	movs	r1, r2
   2f452:	0018      	movs	r0, r3
   2f454:	4b12      	ldr	r3, [pc, #72]	; (2f4a0 <MQTTDeserialize_ack+0xac>)
   2f456:	4798      	blx	r3
   2f458:	0003      	movs	r3, r0
   2f45a:	627b      	str	r3, [r7, #36]	; 0x24
   2f45c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f45e:	69bb      	ldr	r3, [r7, #24]
   2f460:	189b      	adds	r3, r3, r2
   2f462:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f464:	69bb      	ldr	r3, [r7, #24]
   2f466:	697a      	ldr	r2, [r7, #20]
   2f468:	189b      	adds	r3, r3, r2
   2f46a:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   2f46c:	6a3b      	ldr	r3, [r7, #32]
   2f46e:	69ba      	ldr	r2, [r7, #24]
   2f470:	1a9b      	subs	r3, r3, r2
   2f472:	2b01      	cmp	r3, #1
   2f474:	dd0b      	ble.n	2f48e <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   2f476:	2318      	movs	r3, #24
   2f478:	18fb      	adds	r3, r7, r3
   2f47a:	0018      	movs	r0, r3
   2f47c:	4b09      	ldr	r3, [pc, #36]	; (2f4a4 <MQTTDeserialize_ack+0xb0>)
   2f47e:	4798      	blx	r3
   2f480:	0003      	movs	r3, r0
   2f482:	b29a      	uxth	r2, r3
   2f484:	687b      	ldr	r3, [r7, #4]
   2f486:	801a      	strh	r2, [r3, #0]

	rc = 1;
   2f488:	2301      	movs	r3, #1
   2f48a:	627b      	str	r3, [r7, #36]	; 0x24
   2f48c:	e000      	b.n	2f490 <MQTTDeserialize_ack+0x9c>
		goto exit;
   2f48e:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f492:	0018      	movs	r0, r3
   2f494:	46bd      	mov	sp, r7
   2f496:	b00a      	add	sp, #40	; 0x28
   2f498:	bd80      	pop	{r7, pc}
   2f49a:	46c0      	nop			; (mov r8, r8)
   2f49c:	0002f697 	.word	0x0002f697
   2f4a0:	0002f631 	.word	0x0002f631
   2f4a4:	0002f665 	.word	0x0002f665

0002f4a8 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   2f4a8:	b580      	push	{r7, lr}
   2f4aa:	b084      	sub	sp, #16
   2f4ac:	af00      	add	r7, sp, #0
   2f4ae:	6078      	str	r0, [r7, #4]
   2f4b0:	6039      	str	r1, [r7, #0]
	int rc = 0;
   2f4b2:	2300      	movs	r3, #0
   2f4b4:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   2f4b6:	683b      	ldr	r3, [r7, #0]
   2f4b8:	4a17      	ldr	r2, [pc, #92]	; (2f518 <MQTTPacket_encode+0x70>)
   2f4ba:	4013      	ands	r3, r2
   2f4bc:	d504      	bpl.n	2f4c8 <MQTTPacket_encode+0x20>
   2f4be:	3b01      	subs	r3, #1
   2f4c0:	2280      	movs	r2, #128	; 0x80
   2f4c2:	4252      	negs	r2, r2
   2f4c4:	4313      	orrs	r3, r2
   2f4c6:	3301      	adds	r3, #1
   2f4c8:	001a      	movs	r2, r3
   2f4ca:	230b      	movs	r3, #11
   2f4cc:	18fb      	adds	r3, r7, r3
   2f4ce:	701a      	strb	r2, [r3, #0]
		length /= 128;
   2f4d0:	683b      	ldr	r3, [r7, #0]
   2f4d2:	2b00      	cmp	r3, #0
   2f4d4:	da00      	bge.n	2f4d8 <MQTTPacket_encode+0x30>
   2f4d6:	337f      	adds	r3, #127	; 0x7f
   2f4d8:	11db      	asrs	r3, r3, #7
   2f4da:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   2f4dc:	683b      	ldr	r3, [r7, #0]
   2f4de:	2b00      	cmp	r3, #0
   2f4e0:	dd08      	ble.n	2f4f4 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   2f4e2:	230b      	movs	r3, #11
   2f4e4:	18fb      	adds	r3, r7, r3
   2f4e6:	220b      	movs	r2, #11
   2f4e8:	18ba      	adds	r2, r7, r2
   2f4ea:	7812      	ldrb	r2, [r2, #0]
   2f4ec:	2180      	movs	r1, #128	; 0x80
   2f4ee:	4249      	negs	r1, r1
   2f4f0:	430a      	orrs	r2, r1
   2f4f2:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   2f4f4:	68fb      	ldr	r3, [r7, #12]
   2f4f6:	1c5a      	adds	r2, r3, #1
   2f4f8:	60fa      	str	r2, [r7, #12]
   2f4fa:	001a      	movs	r2, r3
   2f4fc:	687b      	ldr	r3, [r7, #4]
   2f4fe:	189b      	adds	r3, r3, r2
   2f500:	220b      	movs	r2, #11
   2f502:	18ba      	adds	r2, r7, r2
   2f504:	7812      	ldrb	r2, [r2, #0]
   2f506:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   2f508:	683b      	ldr	r3, [r7, #0]
   2f50a:	2b00      	cmp	r3, #0
   2f50c:	dcd3      	bgt.n	2f4b6 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   2f50e:	68fb      	ldr	r3, [r7, #12]
}
   2f510:	0018      	movs	r0, r3
   2f512:	46bd      	mov	sp, r7
   2f514:	b004      	add	sp, #16
   2f516:	bd80      	pop	{r7, pc}
   2f518:	8000007f 	.word	0x8000007f

0002f51c <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   2f51c:	b580      	push	{r7, lr}
   2f51e:	b086      	sub	sp, #24
   2f520:	af00      	add	r7, sp, #0
   2f522:	6078      	str	r0, [r7, #4]
   2f524:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   2f526:	2301      	movs	r3, #1
   2f528:	617b      	str	r3, [r7, #20]
	int len = 0;
   2f52a:	2300      	movs	r3, #0
   2f52c:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   2f52e:	683b      	ldr	r3, [r7, #0]
   2f530:	2200      	movs	r2, #0
   2f532:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   2f534:	2301      	movs	r3, #1
   2f536:	425b      	negs	r3, r3
   2f538:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2f53a:	693b      	ldr	r3, [r7, #16]
   2f53c:	3301      	adds	r3, #1
   2f53e:	613b      	str	r3, [r7, #16]
   2f540:	693b      	ldr	r3, [r7, #16]
   2f542:	2b04      	cmp	r3, #4
   2f544:	dd03      	ble.n	2f54e <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   2f546:	2301      	movs	r3, #1
   2f548:	425b      	negs	r3, r3
   2f54a:	60fb      	str	r3, [r7, #12]
			goto exit;
   2f54c:	e022      	b.n	2f594 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   2f54e:	230b      	movs	r3, #11
   2f550:	18fa      	adds	r2, r7, r3
   2f552:	687b      	ldr	r3, [r7, #4]
   2f554:	2101      	movs	r1, #1
   2f556:	0010      	movs	r0, r2
   2f558:	4798      	blx	r3
   2f55a:	0003      	movs	r3, r0
   2f55c:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   2f55e:	68fb      	ldr	r3, [r7, #12]
   2f560:	2b01      	cmp	r3, #1
   2f562:	d116      	bne.n	2f592 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   2f564:	683b      	ldr	r3, [r7, #0]
   2f566:	681a      	ldr	r2, [r3, #0]
   2f568:	230b      	movs	r3, #11
   2f56a:	18fb      	adds	r3, r7, r3
   2f56c:	781b      	ldrb	r3, [r3, #0]
   2f56e:	0019      	movs	r1, r3
   2f570:	237f      	movs	r3, #127	; 0x7f
   2f572:	400b      	ands	r3, r1
   2f574:	6979      	ldr	r1, [r7, #20]
   2f576:	434b      	muls	r3, r1
   2f578:	18d2      	adds	r2, r2, r3
   2f57a:	683b      	ldr	r3, [r7, #0]
   2f57c:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   2f57e:	697b      	ldr	r3, [r7, #20]
   2f580:	01db      	lsls	r3, r3, #7
   2f582:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   2f584:	230b      	movs	r3, #11
   2f586:	18fb      	adds	r3, r7, r3
   2f588:	781b      	ldrb	r3, [r3, #0]
   2f58a:	b25b      	sxtb	r3, r3
   2f58c:	2b00      	cmp	r3, #0
   2f58e:	dbd1      	blt.n	2f534 <MQTTPacket_decode+0x18>
   2f590:	e000      	b.n	2f594 <MQTTPacket_decode+0x78>
			goto exit;
   2f592:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   2f594:	693b      	ldr	r3, [r7, #16]
}
   2f596:	0018      	movs	r0, r3
   2f598:	46bd      	mov	sp, r7
   2f59a:	b006      	add	sp, #24
   2f59c:	bd80      	pop	{r7, pc}
	...

0002f5a0 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   2f5a0:	b580      	push	{r7, lr}
   2f5a2:	b082      	sub	sp, #8
   2f5a4:	af00      	add	r7, sp, #0
   2f5a6:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   2f5a8:	687b      	ldr	r3, [r7, #4]
   2f5aa:	3301      	adds	r3, #1
   2f5ac:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   2f5ae:	687b      	ldr	r3, [r7, #4]
   2f5b0:	2b7f      	cmp	r3, #127	; 0x7f
   2f5b2:	dc03      	bgt.n	2f5bc <MQTTPacket_len+0x1c>
		rem_len += 1;
   2f5b4:	687b      	ldr	r3, [r7, #4]
   2f5b6:	3301      	adds	r3, #1
   2f5b8:	607b      	str	r3, [r7, #4]
   2f5ba:	e012      	b.n	2f5e2 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   2f5bc:	687b      	ldr	r3, [r7, #4]
   2f5be:	4a0b      	ldr	r2, [pc, #44]	; (2f5ec <MQTTPacket_len+0x4c>)
   2f5c0:	4293      	cmp	r3, r2
   2f5c2:	dc03      	bgt.n	2f5cc <MQTTPacket_len+0x2c>
		rem_len += 2;
   2f5c4:	687b      	ldr	r3, [r7, #4]
   2f5c6:	3302      	adds	r3, #2
   2f5c8:	607b      	str	r3, [r7, #4]
   2f5ca:	e00a      	b.n	2f5e2 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   2f5cc:	687b      	ldr	r3, [r7, #4]
   2f5ce:	4a08      	ldr	r2, [pc, #32]	; (2f5f0 <MQTTPacket_len+0x50>)
   2f5d0:	4293      	cmp	r3, r2
   2f5d2:	dc03      	bgt.n	2f5dc <MQTTPacket_len+0x3c>
		rem_len += 3;
   2f5d4:	687b      	ldr	r3, [r7, #4]
   2f5d6:	3303      	adds	r3, #3
   2f5d8:	607b      	str	r3, [r7, #4]
   2f5da:	e002      	b.n	2f5e2 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   2f5dc:	687b      	ldr	r3, [r7, #4]
   2f5de:	3304      	adds	r3, #4
   2f5e0:	607b      	str	r3, [r7, #4]
	return rem_len;
   2f5e2:	687b      	ldr	r3, [r7, #4]
}
   2f5e4:	0018      	movs	r0, r3
   2f5e6:	46bd      	mov	sp, r7
   2f5e8:	b002      	add	sp, #8
   2f5ea:	bd80      	pop	{r7, pc}
   2f5ec:	00003fff 	.word	0x00003fff
   2f5f0:	001ffffe 	.word	0x001ffffe

0002f5f4 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   2f5f4:	b580      	push	{r7, lr}
   2f5f6:	b084      	sub	sp, #16
   2f5f8:	af00      	add	r7, sp, #0
   2f5fa:	6078      	str	r0, [r7, #4]
   2f5fc:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   2f5fe:	2300      	movs	r3, #0
   2f600:	60fb      	str	r3, [r7, #12]
   2f602:	e00a      	b.n	2f61a <bufchar+0x26>
		*c = *bufptr++;
   2f604:	4b09      	ldr	r3, [pc, #36]	; (2f62c <bufchar+0x38>)
   2f606:	681b      	ldr	r3, [r3, #0]
   2f608:	1c59      	adds	r1, r3, #1
   2f60a:	4a08      	ldr	r2, [pc, #32]	; (2f62c <bufchar+0x38>)
   2f60c:	6011      	str	r1, [r2, #0]
   2f60e:	781a      	ldrb	r2, [r3, #0]
   2f610:	687b      	ldr	r3, [r7, #4]
   2f612:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   2f614:	68fb      	ldr	r3, [r7, #12]
   2f616:	3301      	adds	r3, #1
   2f618:	60fb      	str	r3, [r7, #12]
   2f61a:	68fa      	ldr	r2, [r7, #12]
   2f61c:	683b      	ldr	r3, [r7, #0]
   2f61e:	429a      	cmp	r2, r3
   2f620:	dbf0      	blt.n	2f604 <bufchar+0x10>
	return count;
   2f622:	683b      	ldr	r3, [r7, #0]
}
   2f624:	0018      	movs	r0, r3
   2f626:	46bd      	mov	sp, r7
   2f628:	b004      	add	sp, #16
   2f62a:	bd80      	pop	{r7, pc}
   2f62c:	20004248 	.word	0x20004248

0002f630 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   2f630:	b580      	push	{r7, lr}
   2f632:	b082      	sub	sp, #8
   2f634:	af00      	add	r7, sp, #0
   2f636:	6078      	str	r0, [r7, #4]
   2f638:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   2f63a:	4b07      	ldr	r3, [pc, #28]	; (2f658 <MQTTPacket_decodeBuf+0x28>)
   2f63c:	687a      	ldr	r2, [r7, #4]
   2f63e:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   2f640:	683a      	ldr	r2, [r7, #0]
   2f642:	4b06      	ldr	r3, [pc, #24]	; (2f65c <MQTTPacket_decodeBuf+0x2c>)
   2f644:	0011      	movs	r1, r2
   2f646:	0018      	movs	r0, r3
   2f648:	4b05      	ldr	r3, [pc, #20]	; (2f660 <MQTTPacket_decodeBuf+0x30>)
   2f64a:	4798      	blx	r3
   2f64c:	0003      	movs	r3, r0
}
   2f64e:	0018      	movs	r0, r3
   2f650:	46bd      	mov	sp, r7
   2f652:	b002      	add	sp, #8
   2f654:	bd80      	pop	{r7, pc}
   2f656:	46c0      	nop			; (mov r8, r8)
   2f658:	20004248 	.word	0x20004248
   2f65c:	0002f5f5 	.word	0x0002f5f5
   2f660:	0002f51d 	.word	0x0002f51d

0002f664 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   2f664:	b580      	push	{r7, lr}
   2f666:	b084      	sub	sp, #16
   2f668:	af00      	add	r7, sp, #0
   2f66a:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   2f66c:	687b      	ldr	r3, [r7, #4]
   2f66e:	681b      	ldr	r3, [r3, #0]
   2f670:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   2f672:	68fb      	ldr	r3, [r7, #12]
   2f674:	781b      	ldrb	r3, [r3, #0]
   2f676:	021b      	lsls	r3, r3, #8
   2f678:	68fa      	ldr	r2, [r7, #12]
   2f67a:	3201      	adds	r2, #1
   2f67c:	7812      	ldrb	r2, [r2, #0]
   2f67e:	189b      	adds	r3, r3, r2
   2f680:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   2f682:	687b      	ldr	r3, [r7, #4]
   2f684:	681b      	ldr	r3, [r3, #0]
   2f686:	1c9a      	adds	r2, r3, #2
   2f688:	687b      	ldr	r3, [r7, #4]
   2f68a:	601a      	str	r2, [r3, #0]
	return len;
   2f68c:	68bb      	ldr	r3, [r7, #8]
}
   2f68e:	0018      	movs	r0, r3
   2f690:	46bd      	mov	sp, r7
   2f692:	b004      	add	sp, #16
   2f694:	bd80      	pop	{r7, pc}

0002f696 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   2f696:	b580      	push	{r7, lr}
   2f698:	b084      	sub	sp, #16
   2f69a:	af00      	add	r7, sp, #0
   2f69c:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   2f69e:	687b      	ldr	r3, [r7, #4]
   2f6a0:	681a      	ldr	r2, [r3, #0]
   2f6a2:	230f      	movs	r3, #15
   2f6a4:	18fb      	adds	r3, r7, r3
   2f6a6:	7812      	ldrb	r2, [r2, #0]
   2f6a8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2f6aa:	687b      	ldr	r3, [r7, #4]
   2f6ac:	681b      	ldr	r3, [r3, #0]
   2f6ae:	1c5a      	adds	r2, r3, #1
   2f6b0:	687b      	ldr	r3, [r7, #4]
   2f6b2:	601a      	str	r2, [r3, #0]
	return c;
   2f6b4:	230f      	movs	r3, #15
   2f6b6:	18fb      	adds	r3, r7, r3
   2f6b8:	781b      	ldrb	r3, [r3, #0]
}
   2f6ba:	0018      	movs	r0, r3
   2f6bc:	46bd      	mov	sp, r7
   2f6be:	b004      	add	sp, #16
   2f6c0:	bd80      	pop	{r7, pc}

0002f6c2 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   2f6c2:	b580      	push	{r7, lr}
   2f6c4:	b082      	sub	sp, #8
   2f6c6:	af00      	add	r7, sp, #0
   2f6c8:	6078      	str	r0, [r7, #4]
   2f6ca:	000a      	movs	r2, r1
   2f6cc:	1cfb      	adds	r3, r7, #3
   2f6ce:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   2f6d0:	687b      	ldr	r3, [r7, #4]
   2f6d2:	681b      	ldr	r3, [r3, #0]
   2f6d4:	1cfa      	adds	r2, r7, #3
   2f6d6:	7812      	ldrb	r2, [r2, #0]
   2f6d8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2f6da:	687b      	ldr	r3, [r7, #4]
   2f6dc:	681b      	ldr	r3, [r3, #0]
   2f6de:	1c5a      	adds	r2, r3, #1
   2f6e0:	687b      	ldr	r3, [r7, #4]
   2f6e2:	601a      	str	r2, [r3, #0]
}
   2f6e4:	46c0      	nop			; (mov r8, r8)
   2f6e6:	46bd      	mov	sp, r7
   2f6e8:	b002      	add	sp, #8
   2f6ea:	bd80      	pop	{r7, pc}

0002f6ec <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   2f6ec:	b580      	push	{r7, lr}
   2f6ee:	b082      	sub	sp, #8
   2f6f0:	af00      	add	r7, sp, #0
   2f6f2:	6078      	str	r0, [r7, #4]
   2f6f4:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   2f6f6:	687b      	ldr	r3, [r7, #4]
   2f6f8:	681a      	ldr	r2, [r3, #0]
   2f6fa:	683b      	ldr	r3, [r7, #0]
   2f6fc:	2b00      	cmp	r3, #0
   2f6fe:	da00      	bge.n	2f702 <writeInt+0x16>
   2f700:	33ff      	adds	r3, #255	; 0xff
   2f702:	121b      	asrs	r3, r3, #8
   2f704:	b2db      	uxtb	r3, r3
   2f706:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2f708:	687b      	ldr	r3, [r7, #4]
   2f70a:	681b      	ldr	r3, [r3, #0]
   2f70c:	1c5a      	adds	r2, r3, #1
   2f70e:	687b      	ldr	r3, [r7, #4]
   2f710:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   2f712:	687b      	ldr	r3, [r7, #4]
   2f714:	681a      	ldr	r2, [r3, #0]
   2f716:	683b      	ldr	r3, [r7, #0]
   2f718:	4908      	ldr	r1, [pc, #32]	; (2f73c <writeInt+0x50>)
   2f71a:	400b      	ands	r3, r1
   2f71c:	d503      	bpl.n	2f726 <writeInt+0x3a>
   2f71e:	3b01      	subs	r3, #1
   2f720:	4907      	ldr	r1, [pc, #28]	; (2f740 <writeInt+0x54>)
   2f722:	430b      	orrs	r3, r1
   2f724:	3301      	adds	r3, #1
   2f726:	b2db      	uxtb	r3, r3
   2f728:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2f72a:	687b      	ldr	r3, [r7, #4]
   2f72c:	681b      	ldr	r3, [r3, #0]
   2f72e:	1c5a      	adds	r2, r3, #1
   2f730:	687b      	ldr	r3, [r7, #4]
   2f732:	601a      	str	r2, [r3, #0]
}
   2f734:	46c0      	nop			; (mov r8, r8)
   2f736:	46bd      	mov	sp, r7
   2f738:	b002      	add	sp, #8
   2f73a:	bd80      	pop	{r7, pc}
   2f73c:	800000ff 	.word	0x800000ff
   2f740:	ffffff00 	.word	0xffffff00

0002f744 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   2f744:	b580      	push	{r7, lr}
   2f746:	b084      	sub	sp, #16
   2f748:	af00      	add	r7, sp, #0
   2f74a:	6078      	str	r0, [r7, #4]
   2f74c:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   2f74e:	683b      	ldr	r3, [r7, #0]
   2f750:	0018      	movs	r0, r3
   2f752:	4b0d      	ldr	r3, [pc, #52]	; (2f788 <writeCString+0x44>)
   2f754:	4798      	blx	r3
   2f756:	0003      	movs	r3, r0
   2f758:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   2f75a:	68fa      	ldr	r2, [r7, #12]
   2f75c:	687b      	ldr	r3, [r7, #4]
   2f75e:	0011      	movs	r1, r2
   2f760:	0018      	movs	r0, r3
   2f762:	4b0a      	ldr	r3, [pc, #40]	; (2f78c <writeCString+0x48>)
   2f764:	4798      	blx	r3
	memcpy(*pptr, string, len);
   2f766:	687b      	ldr	r3, [r7, #4]
   2f768:	681b      	ldr	r3, [r3, #0]
   2f76a:	68fa      	ldr	r2, [r7, #12]
   2f76c:	6839      	ldr	r1, [r7, #0]
   2f76e:	0018      	movs	r0, r3
   2f770:	4b07      	ldr	r3, [pc, #28]	; (2f790 <writeCString+0x4c>)
   2f772:	4798      	blx	r3
	*pptr += len;
   2f774:	687b      	ldr	r3, [r7, #4]
   2f776:	681a      	ldr	r2, [r3, #0]
   2f778:	68fb      	ldr	r3, [r7, #12]
   2f77a:	18d2      	adds	r2, r2, r3
   2f77c:	687b      	ldr	r3, [r7, #4]
   2f77e:	601a      	str	r2, [r3, #0]
}
   2f780:	46c0      	nop			; (mov r8, r8)
   2f782:	46bd      	mov	sp, r7
   2f784:	b004      	add	sp, #16
   2f786:	bd80      	pop	{r7, pc}
   2f788:	00033db7 	.word	0x00033db7
   2f78c:	0002f6ed 	.word	0x0002f6ed
   2f790:	000339c9 	.word	0x000339c9

0002f794 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   2f794:	b580      	push	{r7, lr}
   2f796:	b084      	sub	sp, #16
   2f798:	af00      	add	r7, sp, #0
   2f79a:	60f8      	str	r0, [r7, #12]
   2f79c:	0038      	movs	r0, r7
   2f79e:	6001      	str	r1, [r0, #0]
   2f7a0:	6042      	str	r2, [r0, #4]
   2f7a2:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   2f7a4:	003b      	movs	r3, r7
   2f7a6:	685b      	ldr	r3, [r3, #4]
   2f7a8:	2b00      	cmp	r3, #0
   2f7aa:	dd17      	ble.n	2f7dc <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   2f7ac:	003b      	movs	r3, r7
   2f7ae:	685a      	ldr	r2, [r3, #4]
   2f7b0:	68fb      	ldr	r3, [r7, #12]
   2f7b2:	0011      	movs	r1, r2
   2f7b4:	0018      	movs	r0, r3
   2f7b6:	4b14      	ldr	r3, [pc, #80]	; (2f808 <writeMQTTString+0x74>)
   2f7b8:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   2f7ba:	68fb      	ldr	r3, [r7, #12]
   2f7bc:	6818      	ldr	r0, [r3, #0]
   2f7be:	003b      	movs	r3, r7
   2f7c0:	6899      	ldr	r1, [r3, #8]
   2f7c2:	003b      	movs	r3, r7
   2f7c4:	685b      	ldr	r3, [r3, #4]
   2f7c6:	001a      	movs	r2, r3
   2f7c8:	4b10      	ldr	r3, [pc, #64]	; (2f80c <writeMQTTString+0x78>)
   2f7ca:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   2f7cc:	68fb      	ldr	r3, [r7, #12]
   2f7ce:	681a      	ldr	r2, [r3, #0]
   2f7d0:	003b      	movs	r3, r7
   2f7d2:	685b      	ldr	r3, [r3, #4]
   2f7d4:	18d2      	adds	r2, r2, r3
   2f7d6:	68fb      	ldr	r3, [r7, #12]
   2f7d8:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   2f7da:	e010      	b.n	2f7fe <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   2f7dc:	003b      	movs	r3, r7
   2f7de:	681b      	ldr	r3, [r3, #0]
   2f7e0:	2b00      	cmp	r3, #0
   2f7e2:	d007      	beq.n	2f7f4 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   2f7e4:	003b      	movs	r3, r7
   2f7e6:	681a      	ldr	r2, [r3, #0]
   2f7e8:	68fb      	ldr	r3, [r7, #12]
   2f7ea:	0011      	movs	r1, r2
   2f7ec:	0018      	movs	r0, r3
   2f7ee:	4b08      	ldr	r3, [pc, #32]	; (2f810 <writeMQTTString+0x7c>)
   2f7f0:	4798      	blx	r3
}
   2f7f2:	e004      	b.n	2f7fe <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   2f7f4:	68fb      	ldr	r3, [r7, #12]
   2f7f6:	2100      	movs	r1, #0
   2f7f8:	0018      	movs	r0, r3
   2f7fa:	4b03      	ldr	r3, [pc, #12]	; (2f808 <writeMQTTString+0x74>)
   2f7fc:	4798      	blx	r3
}
   2f7fe:	46c0      	nop			; (mov r8, r8)
   2f800:	46bd      	mov	sp, r7
   2f802:	b004      	add	sp, #16
   2f804:	bd80      	pop	{r7, pc}
   2f806:	46c0      	nop			; (mov r8, r8)
   2f808:	0002f6ed 	.word	0x0002f6ed
   2f80c:	000339c9 	.word	0x000339c9
   2f810:	0002f745 	.word	0x0002f745

0002f814 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   2f814:	b580      	push	{r7, lr}
   2f816:	b086      	sub	sp, #24
   2f818:	af00      	add	r7, sp, #0
   2f81a:	60f8      	str	r0, [r7, #12]
   2f81c:	60b9      	str	r1, [r7, #8]
   2f81e:	607a      	str	r2, [r7, #4]
	int rc = 0;
   2f820:	2300      	movs	r3, #0
   2f822:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   2f824:	687a      	ldr	r2, [r7, #4]
   2f826:	68bb      	ldr	r3, [r7, #8]
   2f828:	681b      	ldr	r3, [r3, #0]
   2f82a:	1ad3      	subs	r3, r2, r3
   2f82c:	2b01      	cmp	r3, #1
   2f82e:	dd1b      	ble.n	2f868 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   2f830:	68bb      	ldr	r3, [r7, #8]
   2f832:	0018      	movs	r0, r3
   2f834:	4b10      	ldr	r3, [pc, #64]	; (2f878 <readMQTTLenString+0x64>)
   2f836:	4798      	blx	r3
   2f838:	0002      	movs	r2, r0
   2f83a:	68fb      	ldr	r3, [r7, #12]
   2f83c:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   2f83e:	68bb      	ldr	r3, [r7, #8]
   2f840:	681a      	ldr	r2, [r3, #0]
   2f842:	68fb      	ldr	r3, [r7, #12]
   2f844:	685b      	ldr	r3, [r3, #4]
   2f846:	18d2      	adds	r2, r2, r3
   2f848:	687b      	ldr	r3, [r7, #4]
   2f84a:	429a      	cmp	r2, r3
   2f84c:	d80c      	bhi.n	2f868 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   2f84e:	68bb      	ldr	r3, [r7, #8]
   2f850:	681a      	ldr	r2, [r3, #0]
   2f852:	68fb      	ldr	r3, [r7, #12]
   2f854:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   2f856:	68bb      	ldr	r3, [r7, #8]
   2f858:	681a      	ldr	r2, [r3, #0]
   2f85a:	68fb      	ldr	r3, [r7, #12]
   2f85c:	685b      	ldr	r3, [r3, #4]
   2f85e:	18d2      	adds	r2, r2, r3
   2f860:	68bb      	ldr	r3, [r7, #8]
   2f862:	601a      	str	r2, [r3, #0]
			rc = 1;
   2f864:	2301      	movs	r3, #1
   2f866:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   2f868:	68fb      	ldr	r3, [r7, #12]
   2f86a:	2200      	movs	r2, #0
   2f86c:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   2f86e:	697b      	ldr	r3, [r7, #20]
}
   2f870:	0018      	movs	r0, r3
   2f872:	46bd      	mov	sp, r7
   2f874:	b006      	add	sp, #24
   2f876:	bd80      	pop	{r7, pc}
   2f878:	0002f665 	.word	0x0002f665

0002f87c <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   2f87c:	b580      	push	{r7, lr}
   2f87e:	b086      	sub	sp, #24
   2f880:	af00      	add	r7, sp, #0
   2f882:	1d3b      	adds	r3, r7, #4
   2f884:	6018      	str	r0, [r3, #0]
   2f886:	6059      	str	r1, [r3, #4]
   2f888:	609a      	str	r2, [r3, #8]
	int rc = 0;
   2f88a:	2300      	movs	r3, #0
   2f88c:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   2f88e:	1d3b      	adds	r3, r7, #4
   2f890:	681b      	ldr	r3, [r3, #0]
   2f892:	2b00      	cmp	r3, #0
   2f894:	d007      	beq.n	2f8a6 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   2f896:	1d3b      	adds	r3, r7, #4
   2f898:	681b      	ldr	r3, [r3, #0]
   2f89a:	0018      	movs	r0, r3
   2f89c:	4b06      	ldr	r3, [pc, #24]	; (2f8b8 <MQTTstrlen+0x3c>)
   2f89e:	4798      	blx	r3
   2f8a0:	0003      	movs	r3, r0
   2f8a2:	617b      	str	r3, [r7, #20]
   2f8a4:	e002      	b.n	2f8ac <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   2f8a6:	1d3b      	adds	r3, r7, #4
   2f8a8:	685b      	ldr	r3, [r3, #4]
   2f8aa:	617b      	str	r3, [r7, #20]
	return rc;
   2f8ac:	697b      	ldr	r3, [r7, #20]
}
   2f8ae:	0018      	movs	r0, r3
   2f8b0:	46bd      	mov	sp, r7
   2f8b2:	b006      	add	sp, #24
   2f8b4:	bd80      	pop	{r7, pc}
   2f8b6:	46c0      	nop			; (mov r8, r8)
   2f8b8:	00033db7 	.word	0x00033db7

0002f8bc <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   2f8bc:	b580      	push	{r7, lr}
   2f8be:	b086      	sub	sp, #24
   2f8c0:	af00      	add	r7, sp, #0
   2f8c2:	6078      	str	r0, [r7, #4]
   2f8c4:	6039      	str	r1, [r7, #0]
	int alen = 0,
   2f8c6:	2300      	movs	r3, #0
   2f8c8:	617b      	str	r3, [r7, #20]
		blen = 0;
   2f8ca:	2300      	movs	r3, #0
   2f8cc:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   2f8ce:	687b      	ldr	r3, [r7, #4]
   2f8d0:	681b      	ldr	r3, [r3, #0]
   2f8d2:	2b00      	cmp	r3, #0
   2f8d4:	d00a      	beq.n	2f8ec <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   2f8d6:	687b      	ldr	r3, [r7, #4]
   2f8d8:	681b      	ldr	r3, [r3, #0]
   2f8da:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   2f8dc:	687b      	ldr	r3, [r7, #4]
   2f8de:	681b      	ldr	r3, [r3, #0]
   2f8e0:	0018      	movs	r0, r3
   2f8e2:	4b12      	ldr	r3, [pc, #72]	; (2f92c <MQTTPacket_equals+0x70>)
   2f8e4:	4798      	blx	r3
   2f8e6:	0003      	movs	r3, r0
   2f8e8:	617b      	str	r3, [r7, #20]
   2f8ea:	e005      	b.n	2f8f8 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   2f8ec:	687b      	ldr	r3, [r7, #4]
   2f8ee:	689b      	ldr	r3, [r3, #8]
   2f8f0:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   2f8f2:	687b      	ldr	r3, [r7, #4]
   2f8f4:	685b      	ldr	r3, [r3, #4]
   2f8f6:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   2f8f8:	683b      	ldr	r3, [r7, #0]
   2f8fa:	0018      	movs	r0, r3
   2f8fc:	4b0b      	ldr	r3, [pc, #44]	; (2f92c <MQTTPacket_equals+0x70>)
   2f8fe:	4798      	blx	r3
   2f900:	0003      	movs	r3, r0
   2f902:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2f904:	697a      	ldr	r2, [r7, #20]
   2f906:	68fb      	ldr	r3, [r7, #12]
   2f908:	429a      	cmp	r2, r3
   2f90a:	d109      	bne.n	2f920 <MQTTPacket_equals+0x64>
   2f90c:	697a      	ldr	r2, [r7, #20]
   2f90e:	6839      	ldr	r1, [r7, #0]
   2f910:	693b      	ldr	r3, [r7, #16]
   2f912:	0018      	movs	r0, r3
   2f914:	4b06      	ldr	r3, [pc, #24]	; (2f930 <MQTTPacket_equals+0x74>)
   2f916:	4798      	blx	r3
   2f918:	1e03      	subs	r3, r0, #0
   2f91a:	d101      	bne.n	2f920 <MQTTPacket_equals+0x64>
   2f91c:	2301      	movs	r3, #1
   2f91e:	e000      	b.n	2f922 <MQTTPacket_equals+0x66>
   2f920:	2300      	movs	r3, #0
}
   2f922:	0018      	movs	r0, r3
   2f924:	46bd      	mov	sp, r7
   2f926:	b006      	add	sp, #24
   2f928:	bd80      	pop	{r7, pc}
   2f92a:	46c0      	nop			; (mov r8, r8)
   2f92c:	00033db7 	.word	0x00033db7
   2f930:	00033dc5 	.word	0x00033dc5

0002f934 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   2f934:	b580      	push	{r7, lr}
   2f936:	b086      	sub	sp, #24
   2f938:	af00      	add	r7, sp, #0
   2f93a:	60f8      	str	r0, [r7, #12]
   2f93c:	0038      	movs	r0, r7
   2f93e:	6001      	str	r1, [r0, #0]
   2f940:	6042      	str	r2, [r0, #4]
   2f942:	6083      	str	r3, [r0, #8]
	int len = 0;
   2f944:	2300      	movs	r3, #0
   2f946:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   2f948:	003b      	movs	r3, r7
   2f94a:	6818      	ldr	r0, [r3, #0]
   2f94c:	6859      	ldr	r1, [r3, #4]
   2f94e:	689a      	ldr	r2, [r3, #8]
   2f950:	4b09      	ldr	r3, [pc, #36]	; (2f978 <MQTTSerialize_publishLength+0x44>)
   2f952:	4798      	blx	r3
   2f954:	0003      	movs	r3, r0
   2f956:	1c9a      	adds	r2, r3, #2
   2f958:	6a3b      	ldr	r3, [r7, #32]
   2f95a:	18d3      	adds	r3, r2, r3
   2f95c:	697a      	ldr	r2, [r7, #20]
   2f95e:	18d3      	adds	r3, r2, r3
   2f960:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   2f962:	68fb      	ldr	r3, [r7, #12]
   2f964:	2b00      	cmp	r3, #0
   2f966:	dd02      	ble.n	2f96e <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   2f968:	697b      	ldr	r3, [r7, #20]
   2f96a:	3302      	adds	r3, #2
   2f96c:	617b      	str	r3, [r7, #20]
	return len;
   2f96e:	697b      	ldr	r3, [r7, #20]
}
   2f970:	0018      	movs	r0, r3
   2f972:	46bd      	mov	sp, r7
   2f974:	b006      	add	sp, #24
   2f976:	bd80      	pop	{r7, pc}
   2f978:	0002f87d 	.word	0x0002f87d

0002f97c <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   2f97c:	b590      	push	{r4, r7, lr}
   2f97e:	b08b      	sub	sp, #44	; 0x2c
   2f980:	af02      	add	r7, sp, #8
   2f982:	60f8      	str	r0, [r7, #12]
   2f984:	60b9      	str	r1, [r7, #8]
   2f986:	603b      	str	r3, [r7, #0]
   2f988:	1dfb      	adds	r3, r7, #7
   2f98a:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   2f98c:	68fb      	ldr	r3, [r7, #12]
   2f98e:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   2f990:	2300      	movs	r3, #0
   2f992:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   2f994:	2300      	movs	r3, #0
   2f996:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2f998:	2300      	movs	r3, #0
   2f99a:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   2f99c:	2308      	movs	r3, #8
   2f99e:	2230      	movs	r2, #48	; 0x30
   2f9a0:	4694      	mov	ip, r2
   2f9a2:	44bc      	add	ip, r7
   2f9a4:	4463      	add	r3, ip
   2f9a6:	6838      	ldr	r0, [r7, #0]
   2f9a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2f9aa:	9200      	str	r2, [sp, #0]
   2f9ac:	6819      	ldr	r1, [r3, #0]
   2f9ae:	685a      	ldr	r2, [r3, #4]
   2f9b0:	689b      	ldr	r3, [r3, #8]
   2f9b2:	4c46      	ldr	r4, [pc, #280]	; (2facc <MQTTSerialize_publish+0x150>)
   2f9b4:	47a0      	blx	r4
   2f9b6:	0003      	movs	r3, r0
   2f9b8:	61bb      	str	r3, [r7, #24]
   2f9ba:	69bb      	ldr	r3, [r7, #24]
   2f9bc:	0018      	movs	r0, r3
   2f9be:	4b44      	ldr	r3, [pc, #272]	; (2fad0 <MQTTSerialize_publish+0x154>)
   2f9c0:	4798      	blx	r3
   2f9c2:	0002      	movs	r2, r0
   2f9c4:	68bb      	ldr	r3, [r7, #8]
   2f9c6:	429a      	cmp	r2, r3
   2f9c8:	dd03      	ble.n	2f9d2 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f9ca:	2302      	movs	r3, #2
   2f9cc:	425b      	negs	r3, r3
   2f9ce:	61fb      	str	r3, [r7, #28]
		goto exit;
   2f9d0:	e077      	b.n	2fac2 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   2f9d2:	2310      	movs	r3, #16
   2f9d4:	18fb      	adds	r3, r7, r3
   2f9d6:	781a      	ldrb	r2, [r3, #0]
   2f9d8:	210f      	movs	r1, #15
   2f9da:	400a      	ands	r2, r1
   2f9dc:	1c11      	adds	r1, r2, #0
   2f9de:	2230      	movs	r2, #48	; 0x30
   2f9e0:	430a      	orrs	r2, r1
   2f9e2:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2f9e4:	1dfb      	adds	r3, r7, #7
   2f9e6:	781b      	ldrb	r3, [r3, #0]
   2f9e8:	2201      	movs	r2, #1
   2f9ea:	4013      	ands	r3, r2
   2f9ec:	b2da      	uxtb	r2, r3
   2f9ee:	2310      	movs	r3, #16
   2f9f0:	18fb      	adds	r3, r7, r3
   2f9f2:	2101      	movs	r1, #1
   2f9f4:	400a      	ands	r2, r1
   2f9f6:	00d0      	lsls	r0, r2, #3
   2f9f8:	781a      	ldrb	r2, [r3, #0]
   2f9fa:	2108      	movs	r1, #8
   2f9fc:	438a      	bics	r2, r1
   2f9fe:	1c11      	adds	r1, r2, #0
   2fa00:	1c02      	adds	r2, r0, #0
   2fa02:	430a      	orrs	r2, r1
   2fa04:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   2fa06:	683b      	ldr	r3, [r7, #0]
   2fa08:	b2db      	uxtb	r3, r3
   2fa0a:	1c1a      	adds	r2, r3, #0
   2fa0c:	2303      	movs	r3, #3
   2fa0e:	4013      	ands	r3, r2
   2fa10:	b2da      	uxtb	r2, r3
   2fa12:	2310      	movs	r3, #16
   2fa14:	18fb      	adds	r3, r7, r3
   2fa16:	2103      	movs	r1, #3
   2fa18:	400a      	ands	r2, r1
   2fa1a:	1890      	adds	r0, r2, r2
   2fa1c:	781a      	ldrb	r2, [r3, #0]
   2fa1e:	2106      	movs	r1, #6
   2fa20:	438a      	bics	r2, r1
   2fa22:	1c11      	adds	r1, r2, #0
   2fa24:	1c02      	adds	r2, r0, #0
   2fa26:	430a      	orrs	r2, r1
   2fa28:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   2fa2a:	2330      	movs	r3, #48	; 0x30
   2fa2c:	18fb      	adds	r3, r7, r3
   2fa2e:	781b      	ldrb	r3, [r3, #0]
   2fa30:	2201      	movs	r2, #1
   2fa32:	4013      	ands	r3, r2
   2fa34:	b2da      	uxtb	r2, r3
   2fa36:	2310      	movs	r3, #16
   2fa38:	18fb      	adds	r3, r7, r3
   2fa3a:	2101      	movs	r1, #1
   2fa3c:	400a      	ands	r2, r1
   2fa3e:	0010      	movs	r0, r2
   2fa40:	781a      	ldrb	r2, [r3, #0]
   2fa42:	2101      	movs	r1, #1
   2fa44:	438a      	bics	r2, r1
   2fa46:	1c11      	adds	r1, r2, #0
   2fa48:	1c02      	adds	r2, r0, #0
   2fa4a:	430a      	orrs	r2, r1
   2fa4c:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fa4e:	2310      	movs	r3, #16
   2fa50:	18fb      	adds	r3, r7, r3
   2fa52:	781a      	ldrb	r2, [r3, #0]
   2fa54:	2314      	movs	r3, #20
   2fa56:	18fb      	adds	r3, r7, r3
   2fa58:	0011      	movs	r1, r2
   2fa5a:	0018      	movs	r0, r3
   2fa5c:	4b1d      	ldr	r3, [pc, #116]	; (2fad4 <MQTTSerialize_publish+0x158>)
   2fa5e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2fa60:	697b      	ldr	r3, [r7, #20]
   2fa62:	69ba      	ldr	r2, [r7, #24]
   2fa64:	0011      	movs	r1, r2
   2fa66:	0018      	movs	r0, r3
   2fa68:	4b1b      	ldr	r3, [pc, #108]	; (2fad8 <MQTTSerialize_publish+0x15c>)
   2fa6a:	4798      	blx	r3
   2fa6c:	0002      	movs	r2, r0
   2fa6e:	697b      	ldr	r3, [r7, #20]
   2fa70:	189b      	adds	r3, r3, r2
   2fa72:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   2fa74:	2308      	movs	r3, #8
   2fa76:	2230      	movs	r2, #48	; 0x30
   2fa78:	4694      	mov	ip, r2
   2fa7a:	44bc      	add	ip, r7
   2fa7c:	4463      	add	r3, ip
   2fa7e:	2214      	movs	r2, #20
   2fa80:	18b8      	adds	r0, r7, r2
   2fa82:	6819      	ldr	r1, [r3, #0]
   2fa84:	685a      	ldr	r2, [r3, #4]
   2fa86:	689b      	ldr	r3, [r3, #8]
   2fa88:	4c14      	ldr	r4, [pc, #80]	; (2fadc <MQTTSerialize_publish+0x160>)
   2fa8a:	47a0      	blx	r4

	if (qos > 0)
   2fa8c:	683b      	ldr	r3, [r7, #0]
   2fa8e:	2b00      	cmp	r3, #0
   2fa90:	dd08      	ble.n	2faa4 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   2fa92:	2334      	movs	r3, #52	; 0x34
   2fa94:	18fb      	adds	r3, r7, r3
   2fa96:	881a      	ldrh	r2, [r3, #0]
   2fa98:	2314      	movs	r3, #20
   2fa9a:	18fb      	adds	r3, r7, r3
   2fa9c:	0011      	movs	r1, r2
   2fa9e:	0018      	movs	r0, r3
   2faa0:	4b0f      	ldr	r3, [pc, #60]	; (2fae0 <MQTTSerialize_publish+0x164>)
   2faa2:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   2faa4:	697b      	ldr	r3, [r7, #20]
   2faa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2faa8:	6c79      	ldr	r1, [r7, #68]	; 0x44
   2faaa:	0018      	movs	r0, r3
   2faac:	4b0d      	ldr	r3, [pc, #52]	; (2fae4 <MQTTSerialize_publish+0x168>)
   2faae:	4798      	blx	r3
	ptr += payloadlen;
   2fab0:	697a      	ldr	r2, [r7, #20]
   2fab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2fab4:	18d3      	adds	r3, r2, r3
   2fab6:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   2fab8:	697b      	ldr	r3, [r7, #20]
   2faba:	001a      	movs	r2, r3
   2fabc:	68fb      	ldr	r3, [r7, #12]
   2fabe:	1ad3      	subs	r3, r2, r3
   2fac0:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fac2:	69fb      	ldr	r3, [r7, #28]
}
   2fac4:	0018      	movs	r0, r3
   2fac6:	46bd      	mov	sp, r7
   2fac8:	b009      	add	sp, #36	; 0x24
   2faca:	bd90      	pop	{r4, r7, pc}
   2facc:	0002f935 	.word	0x0002f935
   2fad0:	0002f5a1 	.word	0x0002f5a1
   2fad4:	0002f6c3 	.word	0x0002f6c3
   2fad8:	0002f4a9 	.word	0x0002f4a9
   2fadc:	0002f795 	.word	0x0002f795
   2fae0:	0002f6ed 	.word	0x0002f6ed
   2fae4:	000339c9 	.word	0x000339c9

0002fae8 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   2fae8:	b580      	push	{r7, lr}
   2faea:	b088      	sub	sp, #32
   2faec:	af00      	add	r7, sp, #0
   2faee:	60f8      	str	r0, [r7, #12]
   2faf0:	60b9      	str	r1, [r7, #8]
   2faf2:	0019      	movs	r1, r3
   2faf4:	1dfb      	adds	r3, r7, #7
   2faf6:	701a      	strb	r2, [r3, #0]
   2faf8:	1dbb      	adds	r3, r7, #6
   2fafa:	1c0a      	adds	r2, r1, #0
   2fafc:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2fafe:	2300      	movs	r3, #0
   2fb00:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2fb02:	2300      	movs	r3, #0
   2fb04:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2fb06:	68fb      	ldr	r3, [r7, #12]
   2fb08:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   2fb0a:	68bb      	ldr	r3, [r7, #8]
   2fb0c:	2b03      	cmp	r3, #3
   2fb0e:	dc03      	bgt.n	2fb18 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2fb10:	2302      	movs	r3, #2
   2fb12:	425b      	negs	r3, r3
   2fb14:	61fb      	str	r3, [r7, #28]
		goto exit;
   2fb16:	e055      	b.n	2fbc4 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   2fb18:	1dfb      	adds	r3, r7, #7
   2fb1a:	781b      	ldrb	r3, [r3, #0]
   2fb1c:	220f      	movs	r2, #15
   2fb1e:	4013      	ands	r3, r2
   2fb20:	b2da      	uxtb	r2, r3
   2fb22:	2318      	movs	r3, #24
   2fb24:	18fb      	adds	r3, r7, r3
   2fb26:	0110      	lsls	r0, r2, #4
   2fb28:	781a      	ldrb	r2, [r3, #0]
   2fb2a:	210f      	movs	r1, #15
   2fb2c:	400a      	ands	r2, r1
   2fb2e:	1c11      	adds	r1, r2, #0
   2fb30:	1c02      	adds	r2, r0, #0
   2fb32:	430a      	orrs	r2, r1
   2fb34:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2fb36:	1dbb      	adds	r3, r7, #6
   2fb38:	781b      	ldrb	r3, [r3, #0]
   2fb3a:	2201      	movs	r2, #1
   2fb3c:	4013      	ands	r3, r2
   2fb3e:	b2da      	uxtb	r2, r3
   2fb40:	2318      	movs	r3, #24
   2fb42:	18fb      	adds	r3, r7, r3
   2fb44:	2101      	movs	r1, #1
   2fb46:	400a      	ands	r2, r1
   2fb48:	00d0      	lsls	r0, r2, #3
   2fb4a:	781a      	ldrb	r2, [r3, #0]
   2fb4c:	2108      	movs	r1, #8
   2fb4e:	438a      	bics	r2, r1
   2fb50:	1c11      	adds	r1, r2, #0
   2fb52:	1c02      	adds	r2, r0, #0
   2fb54:	430a      	orrs	r2, r1
   2fb56:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   2fb58:	1dfb      	adds	r3, r7, #7
   2fb5a:	781b      	ldrb	r3, [r3, #0]
   2fb5c:	3b06      	subs	r3, #6
   2fb5e:	425a      	negs	r2, r3
   2fb60:	4153      	adcs	r3, r2
   2fb62:	b2db      	uxtb	r3, r3
   2fb64:	1c1a      	adds	r2, r3, #0
   2fb66:	2303      	movs	r3, #3
   2fb68:	4013      	ands	r3, r2
   2fb6a:	b2da      	uxtb	r2, r3
   2fb6c:	2318      	movs	r3, #24
   2fb6e:	18fb      	adds	r3, r7, r3
   2fb70:	2103      	movs	r1, #3
   2fb72:	400a      	ands	r2, r1
   2fb74:	1890      	adds	r0, r2, r2
   2fb76:	781a      	ldrb	r2, [r3, #0]
   2fb78:	2106      	movs	r1, #6
   2fb7a:	438a      	bics	r2, r1
   2fb7c:	1c11      	adds	r1, r2, #0
   2fb7e:	1c02      	adds	r2, r0, #0
   2fb80:	430a      	orrs	r2, r1
   2fb82:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fb84:	2318      	movs	r3, #24
   2fb86:	18fb      	adds	r3, r7, r3
   2fb88:	781a      	ldrb	r2, [r3, #0]
   2fb8a:	2314      	movs	r3, #20
   2fb8c:	18fb      	adds	r3, r7, r3
   2fb8e:	0011      	movs	r1, r2
   2fb90:	0018      	movs	r0, r3
   2fb92:	4b0f      	ldr	r3, [pc, #60]	; (2fbd0 <MQTTSerialize_ack+0xe8>)
   2fb94:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   2fb96:	697b      	ldr	r3, [r7, #20]
   2fb98:	2102      	movs	r1, #2
   2fb9a:	0018      	movs	r0, r3
   2fb9c:	4b0d      	ldr	r3, [pc, #52]	; (2fbd4 <MQTTSerialize_ack+0xec>)
   2fb9e:	4798      	blx	r3
   2fba0:	0002      	movs	r2, r0
   2fba2:	697b      	ldr	r3, [r7, #20]
   2fba4:	189b      	adds	r3, r3, r2
   2fba6:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   2fba8:	2328      	movs	r3, #40	; 0x28
   2fbaa:	18fb      	adds	r3, r7, r3
   2fbac:	881a      	ldrh	r2, [r3, #0]
   2fbae:	2314      	movs	r3, #20
   2fbb0:	18fb      	adds	r3, r7, r3
   2fbb2:	0011      	movs	r1, r2
   2fbb4:	0018      	movs	r0, r3
   2fbb6:	4b08      	ldr	r3, [pc, #32]	; (2fbd8 <MQTTSerialize_ack+0xf0>)
   2fbb8:	4798      	blx	r3
	rc = ptr - buf;
   2fbba:	697b      	ldr	r3, [r7, #20]
   2fbbc:	001a      	movs	r2, r3
   2fbbe:	68fb      	ldr	r3, [r7, #12]
   2fbc0:	1ad3      	subs	r3, r2, r3
   2fbc2:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fbc4:	69fb      	ldr	r3, [r7, #28]
}
   2fbc6:	0018      	movs	r0, r3
   2fbc8:	46bd      	mov	sp, r7
   2fbca:	b008      	add	sp, #32
   2fbcc:	bd80      	pop	{r7, pc}
   2fbce:	46c0      	nop			; (mov r8, r8)
   2fbd0:	0002f6c3 	.word	0x0002f6c3
   2fbd4:	0002f4a9 	.word	0x0002f4a9
   2fbd8:	0002f6ed 	.word	0x0002f6ed

0002fbdc <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   2fbdc:	b580      	push	{r7, lr}
   2fbde:	b084      	sub	sp, #16
   2fbe0:	af00      	add	r7, sp, #0
   2fbe2:	6078      	str	r0, [r7, #4]
   2fbe4:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   2fbe6:	2302      	movs	r3, #2
   2fbe8:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   2fbea:	2300      	movs	r3, #0
   2fbec:	60fb      	str	r3, [r7, #12]
   2fbee:	e014      	b.n	2fc1a <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   2fbf0:	68fa      	ldr	r2, [r7, #12]
   2fbf2:	0013      	movs	r3, r2
   2fbf4:	005b      	lsls	r3, r3, #1
   2fbf6:	189b      	adds	r3, r3, r2
   2fbf8:	009b      	lsls	r3, r3, #2
   2fbfa:	001a      	movs	r2, r3
   2fbfc:	683b      	ldr	r3, [r7, #0]
   2fbfe:	189b      	adds	r3, r3, r2
   2fc00:	6818      	ldr	r0, [r3, #0]
   2fc02:	6859      	ldr	r1, [r3, #4]
   2fc04:	689a      	ldr	r2, [r3, #8]
   2fc06:	4b09      	ldr	r3, [pc, #36]	; (2fc2c <MQTTSerialize_subscribeLength+0x50>)
   2fc08:	4798      	blx	r3
   2fc0a:	0003      	movs	r3, r0
   2fc0c:	3303      	adds	r3, #3
   2fc0e:	68ba      	ldr	r2, [r7, #8]
   2fc10:	18d3      	adds	r3, r2, r3
   2fc12:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   2fc14:	68fb      	ldr	r3, [r7, #12]
   2fc16:	3301      	adds	r3, #1
   2fc18:	60fb      	str	r3, [r7, #12]
   2fc1a:	68fa      	ldr	r2, [r7, #12]
   2fc1c:	687b      	ldr	r3, [r7, #4]
   2fc1e:	429a      	cmp	r2, r3
   2fc20:	dbe6      	blt.n	2fbf0 <MQTTSerialize_subscribeLength+0x14>
	return len;
   2fc22:	68bb      	ldr	r3, [r7, #8]
}
   2fc24:	0018      	movs	r0, r3
   2fc26:	46bd      	mov	sp, r7
   2fc28:	b004      	add	sp, #16
   2fc2a:	bd80      	pop	{r7, pc}
   2fc2c:	0002f87d 	.word	0x0002f87d

0002fc30 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   2fc30:	b590      	push	{r4, r7, lr}
   2fc32:	b08b      	sub	sp, #44	; 0x2c
   2fc34:	af00      	add	r7, sp, #0
   2fc36:	60f8      	str	r0, [r7, #12]
   2fc38:	60b9      	str	r1, [r7, #8]
   2fc3a:	0019      	movs	r1, r3
   2fc3c:	1dfb      	adds	r3, r7, #7
   2fc3e:	701a      	strb	r2, [r3, #0]
   2fc40:	1d3b      	adds	r3, r7, #4
   2fc42:	1c0a      	adds	r2, r1, #0
   2fc44:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   2fc46:	68fb      	ldr	r3, [r7, #12]
   2fc48:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   2fc4a:	2300      	movs	r3, #0
   2fc4c:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   2fc4e:	2300      	movs	r3, #0
   2fc50:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   2fc52:	2300      	movs	r3, #0
   2fc54:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   2fc56:	2300      	movs	r3, #0
   2fc58:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   2fc5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2fc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fc5e:	0011      	movs	r1, r2
   2fc60:	0018      	movs	r0, r3
   2fc62:	4b41      	ldr	r3, [pc, #260]	; (2fd68 <MQTTSerialize_subscribe+0x138>)
   2fc64:	4798      	blx	r3
   2fc66:	0003      	movs	r3, r0
   2fc68:	61fb      	str	r3, [r7, #28]
   2fc6a:	69fb      	ldr	r3, [r7, #28]
   2fc6c:	0018      	movs	r0, r3
   2fc6e:	4b3f      	ldr	r3, [pc, #252]	; (2fd6c <MQTTSerialize_subscribe+0x13c>)
   2fc70:	4798      	blx	r3
   2fc72:	0002      	movs	r2, r0
   2fc74:	68bb      	ldr	r3, [r7, #8]
   2fc76:	429a      	cmp	r2, r3
   2fc78:	dd03      	ble.n	2fc82 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2fc7a:	2302      	movs	r3, #2
   2fc7c:	425b      	negs	r3, r3
   2fc7e:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2fc80:	e06c      	b.n	2fd5c <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   2fc82:	2314      	movs	r3, #20
   2fc84:	18fb      	adds	r3, r7, r3
   2fc86:	2200      	movs	r2, #0
   2fc88:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   2fc8a:	2314      	movs	r3, #20
   2fc8c:	18fb      	adds	r3, r7, r3
   2fc8e:	781a      	ldrb	r2, [r3, #0]
   2fc90:	210f      	movs	r1, #15
   2fc92:	400a      	ands	r2, r1
   2fc94:	1c11      	adds	r1, r2, #0
   2fc96:	2280      	movs	r2, #128	; 0x80
   2fc98:	4252      	negs	r2, r2
   2fc9a:	430a      	orrs	r2, r1
   2fc9c:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2fc9e:	1dfb      	adds	r3, r7, #7
   2fca0:	781b      	ldrb	r3, [r3, #0]
   2fca2:	2201      	movs	r2, #1
   2fca4:	4013      	ands	r3, r2
   2fca6:	b2da      	uxtb	r2, r3
   2fca8:	2314      	movs	r3, #20
   2fcaa:	18fb      	adds	r3, r7, r3
   2fcac:	2101      	movs	r1, #1
   2fcae:	400a      	ands	r2, r1
   2fcb0:	00d0      	lsls	r0, r2, #3
   2fcb2:	781a      	ldrb	r2, [r3, #0]
   2fcb4:	2108      	movs	r1, #8
   2fcb6:	438a      	bics	r2, r1
   2fcb8:	1c11      	adds	r1, r2, #0
   2fcba:	1c02      	adds	r2, r0, #0
   2fcbc:	430a      	orrs	r2, r1
   2fcbe:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   2fcc0:	2314      	movs	r3, #20
   2fcc2:	18fb      	adds	r3, r7, r3
   2fcc4:	781a      	ldrb	r2, [r3, #0]
   2fcc6:	2106      	movs	r1, #6
   2fcc8:	438a      	bics	r2, r1
   2fcca:	1c11      	adds	r1, r2, #0
   2fccc:	2202      	movs	r2, #2
   2fcce:	430a      	orrs	r2, r1
   2fcd0:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fcd2:	2314      	movs	r3, #20
   2fcd4:	18fb      	adds	r3, r7, r3
   2fcd6:	781a      	ldrb	r2, [r3, #0]
   2fcd8:	2318      	movs	r3, #24
   2fcda:	18fb      	adds	r3, r7, r3
   2fcdc:	0011      	movs	r1, r2
   2fcde:	0018      	movs	r0, r3
   2fce0:	4b23      	ldr	r3, [pc, #140]	; (2fd70 <MQTTSerialize_subscribe+0x140>)
   2fce2:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2fce4:	69bb      	ldr	r3, [r7, #24]
   2fce6:	69fa      	ldr	r2, [r7, #28]
   2fce8:	0011      	movs	r1, r2
   2fcea:	0018      	movs	r0, r3
   2fcec:	4b21      	ldr	r3, [pc, #132]	; (2fd74 <MQTTSerialize_subscribe+0x144>)
   2fcee:	4798      	blx	r3
   2fcf0:	0002      	movs	r2, r0
   2fcf2:	69bb      	ldr	r3, [r7, #24]
   2fcf4:	189b      	adds	r3, r3, r2
   2fcf6:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   2fcf8:	1d3b      	adds	r3, r7, #4
   2fcfa:	881a      	ldrh	r2, [r3, #0]
   2fcfc:	2318      	movs	r3, #24
   2fcfe:	18fb      	adds	r3, r7, r3
   2fd00:	0011      	movs	r1, r2
   2fd02:	0018      	movs	r0, r3
   2fd04:	4b1c      	ldr	r3, [pc, #112]	; (2fd78 <MQTTSerialize_subscribe+0x148>)
   2fd06:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   2fd08:	2300      	movs	r3, #0
   2fd0a:	623b      	str	r3, [r7, #32]
   2fd0c:	e01d      	b.n	2fd4a <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   2fd0e:	6a3a      	ldr	r2, [r7, #32]
   2fd10:	0013      	movs	r3, r2
   2fd12:	005b      	lsls	r3, r3, #1
   2fd14:	189b      	adds	r3, r3, r2
   2fd16:	009b      	lsls	r3, r3, #2
   2fd18:	001a      	movs	r2, r3
   2fd1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fd1c:	189b      	adds	r3, r3, r2
   2fd1e:	2218      	movs	r2, #24
   2fd20:	18b8      	adds	r0, r7, r2
   2fd22:	6819      	ldr	r1, [r3, #0]
   2fd24:	685a      	ldr	r2, [r3, #4]
   2fd26:	689b      	ldr	r3, [r3, #8]
   2fd28:	4c14      	ldr	r4, [pc, #80]	; (2fd7c <MQTTSerialize_subscribe+0x14c>)
   2fd2a:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   2fd2c:	6a3b      	ldr	r3, [r7, #32]
   2fd2e:	009b      	lsls	r3, r3, #2
   2fd30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2fd32:	18d3      	adds	r3, r2, r3
   2fd34:	681b      	ldr	r3, [r3, #0]
   2fd36:	b2da      	uxtb	r2, r3
   2fd38:	2318      	movs	r3, #24
   2fd3a:	18fb      	adds	r3, r7, r3
   2fd3c:	0011      	movs	r1, r2
   2fd3e:	0018      	movs	r0, r3
   2fd40:	4b0b      	ldr	r3, [pc, #44]	; (2fd70 <MQTTSerialize_subscribe+0x140>)
   2fd42:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   2fd44:	6a3b      	ldr	r3, [r7, #32]
   2fd46:	3301      	adds	r3, #1
   2fd48:	623b      	str	r3, [r7, #32]
   2fd4a:	6a3a      	ldr	r2, [r7, #32]
   2fd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fd4e:	429a      	cmp	r2, r3
   2fd50:	dbdd      	blt.n	2fd0e <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   2fd52:	69bb      	ldr	r3, [r7, #24]
   2fd54:	001a      	movs	r2, r3
   2fd56:	68fb      	ldr	r3, [r7, #12]
   2fd58:	1ad3      	subs	r3, r2, r3
   2fd5a:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fd5e:	0018      	movs	r0, r3
   2fd60:	46bd      	mov	sp, r7
   2fd62:	b00b      	add	sp, #44	; 0x2c
   2fd64:	bd90      	pop	{r4, r7, pc}
   2fd66:	46c0      	nop			; (mov r8, r8)
   2fd68:	0002fbdd 	.word	0x0002fbdd
   2fd6c:	0002f5a1 	.word	0x0002f5a1
   2fd70:	0002f6c3 	.word	0x0002f6c3
   2fd74:	0002f4a9 	.word	0x0002f4a9
   2fd78:	0002f6ed 	.word	0x0002f6ed
   2fd7c:	0002f795 	.word	0x0002f795

0002fd80 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   2fd80:	b590      	push	{r4, r7, lr}
   2fd82:	b08b      	sub	sp, #44	; 0x2c
   2fd84:	af00      	add	r7, sp, #0
   2fd86:	60f8      	str	r0, [r7, #12]
   2fd88:	60b9      	str	r1, [r7, #8]
   2fd8a:	607a      	str	r2, [r7, #4]
   2fd8c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fd8e:	2300      	movs	r3, #0
   2fd90:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2fd94:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fd96:	2300      	movs	r3, #0
   2fd98:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fd9a:	2300      	movs	r3, #0
   2fd9c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fd9e:	2318      	movs	r3, #24
   2fda0:	18fb      	adds	r3, r7, r3
   2fda2:	0018      	movs	r0, r3
   2fda4:	4b2c      	ldr	r3, [pc, #176]	; (2fe58 <MQTTDeserialize_suback+0xd8>)
   2fda6:	4798      	blx	r3
   2fda8:	0003      	movs	r3, r0
   2fdaa:	001a      	movs	r2, r3
   2fdac:	231c      	movs	r3, #28
   2fdae:	18fb      	adds	r3, r7, r3
   2fdb0:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   2fdb2:	231c      	movs	r3, #28
   2fdb4:	18fb      	adds	r3, r7, r3
   2fdb6:	781b      	ldrb	r3, [r3, #0]
   2fdb8:	220f      	movs	r2, #15
   2fdba:	4393      	bics	r3, r2
   2fdbc:	b2db      	uxtb	r3, r3
   2fdbe:	2b90      	cmp	r3, #144	; 0x90
   2fdc0:	d142      	bne.n	2fe48 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fdc2:	69bb      	ldr	r3, [r7, #24]
   2fdc4:	2214      	movs	r2, #20
   2fdc6:	18ba      	adds	r2, r7, r2
   2fdc8:	0011      	movs	r1, r2
   2fdca:	0018      	movs	r0, r3
   2fdcc:	4b23      	ldr	r3, [pc, #140]	; (2fe5c <MQTTDeserialize_suback+0xdc>)
   2fdce:	4798      	blx	r3
   2fdd0:	0003      	movs	r3, r0
   2fdd2:	627b      	str	r3, [r7, #36]	; 0x24
   2fdd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fdd6:	69bb      	ldr	r3, [r7, #24]
   2fdd8:	189b      	adds	r3, r3, r2
   2fdda:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fddc:	69bb      	ldr	r3, [r7, #24]
   2fdde:	697a      	ldr	r2, [r7, #20]
   2fde0:	189b      	adds	r3, r3, r2
   2fde2:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2fde4:	6a3b      	ldr	r3, [r7, #32]
   2fde6:	69ba      	ldr	r2, [r7, #24]
   2fde8:	1a9b      	subs	r3, r3, r2
   2fdea:	2b01      	cmp	r3, #1
   2fdec:	dd2e      	ble.n	2fe4c <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   2fdee:	2318      	movs	r3, #24
   2fdf0:	18fb      	adds	r3, r7, r3
   2fdf2:	0018      	movs	r0, r3
   2fdf4:	4b1a      	ldr	r3, [pc, #104]	; (2fe60 <MQTTDeserialize_suback+0xe0>)
   2fdf6:	4798      	blx	r3
   2fdf8:	0003      	movs	r3, r0
   2fdfa:	b29a      	uxth	r2, r3
   2fdfc:	68fb      	ldr	r3, [r7, #12]
   2fdfe:	801a      	strh	r2, [r3, #0]

	*count = 0;
   2fe00:	687b      	ldr	r3, [r7, #4]
   2fe02:	2200      	movs	r2, #0
   2fe04:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   2fe06:	e018      	b.n	2fe3a <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   2fe08:	687b      	ldr	r3, [r7, #4]
   2fe0a:	681a      	ldr	r2, [r3, #0]
   2fe0c:	68bb      	ldr	r3, [r7, #8]
   2fe0e:	429a      	cmp	r2, r3
   2fe10:	dd03      	ble.n	2fe1a <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   2fe12:	2301      	movs	r3, #1
   2fe14:	425b      	negs	r3, r3
   2fe16:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   2fe18:	e019      	b.n	2fe4e <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   2fe1a:	687b      	ldr	r3, [r7, #4]
   2fe1c:	681a      	ldr	r2, [r3, #0]
   2fe1e:	1c51      	adds	r1, r2, #1
   2fe20:	687b      	ldr	r3, [r7, #4]
   2fe22:	6019      	str	r1, [r3, #0]
   2fe24:	0013      	movs	r3, r2
   2fe26:	009b      	lsls	r3, r3, #2
   2fe28:	683a      	ldr	r2, [r7, #0]
   2fe2a:	18d4      	adds	r4, r2, r3
   2fe2c:	2318      	movs	r3, #24
   2fe2e:	18fb      	adds	r3, r7, r3
   2fe30:	0018      	movs	r0, r3
   2fe32:	4b09      	ldr	r3, [pc, #36]	; (2fe58 <MQTTDeserialize_suback+0xd8>)
   2fe34:	4798      	blx	r3
   2fe36:	0003      	movs	r3, r0
   2fe38:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   2fe3a:	69ba      	ldr	r2, [r7, #24]
   2fe3c:	6a3b      	ldr	r3, [r7, #32]
   2fe3e:	429a      	cmp	r2, r3
   2fe40:	d3e2      	bcc.n	2fe08 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   2fe42:	2301      	movs	r3, #1
   2fe44:	627b      	str	r3, [r7, #36]	; 0x24
   2fe46:	e002      	b.n	2fe4e <MQTTDeserialize_suback+0xce>
		goto exit;
   2fe48:	46c0      	nop			; (mov r8, r8)
   2fe4a:	e000      	b.n	2fe4e <MQTTDeserialize_suback+0xce>
		goto exit;
   2fe4c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fe4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fe50:	0018      	movs	r0, r3
   2fe52:	46bd      	mov	sp, r7
   2fe54:	b00b      	add	sp, #44	; 0x2c
   2fe56:	bd90      	pop	{r4, r7, pc}
   2fe58:	0002f697 	.word	0x0002f697
   2fe5c:	0002f631 	.word	0x0002f631
   2fe60:	0002f665 	.word	0x0002f665

0002fe64 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   2fe64:	b580      	push	{r7, lr}
   2fe66:	b082      	sub	sp, #8
   2fe68:	af00      	add	r7, sp, #0
   2fe6a:	6078      	str	r0, [r7, #4]
	config->port = 80;
   2fe6c:	687b      	ldr	r3, [r7, #4]
   2fe6e:	2250      	movs	r2, #80	; 0x50
   2fe70:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2fe72:	687b      	ldr	r3, [r7, #4]
   2fe74:	2200      	movs	r2, #0
   2fe76:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   2fe78:	687b      	ldr	r3, [r7, #4]
   2fe7a:	4a0b      	ldr	r2, [pc, #44]	; (2fea8 <http_client_get_config_defaults+0x44>)
   2fe7c:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   2fe7e:	687b      	ldr	r3, [r7, #4]
   2fe80:	2200      	movs	r2, #0
   2fe82:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   2fe84:	687b      	ldr	r3, [r7, #4]
   2fe86:	2200      	movs	r2, #0
   2fe88:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   2fe8a:	687b      	ldr	r3, [r7, #4]
   2fe8c:	2280      	movs	r2, #128	; 0x80
   2fe8e:	0052      	lsls	r2, r2, #1
   2fe90:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   2fe92:	687b      	ldr	r3, [r7, #4]
   2fe94:	2252      	movs	r2, #82	; 0x52
   2fe96:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   2fe98:	687b      	ldr	r3, [r7, #4]
   2fe9a:	4a04      	ldr	r2, [pc, #16]	; (2feac <http_client_get_config_defaults+0x48>)
   2fe9c:	619a      	str	r2, [r3, #24]
}
   2fe9e:	46c0      	nop			; (mov r8, r8)
   2fea0:	46bd      	mov	sp, r7
   2fea2:	b002      	add	sp, #8
   2fea4:	bd80      	pop	{r7, pc}
   2fea6:	46c0      	nop			; (mov r8, r8)
   2fea8:	00004e20 	.word	0x00004e20
   2feac:	00038a88 	.word	0x00038a88

0002feb0 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   2feb0:	b590      	push	{r4, r7, lr}
   2feb2:	b083      	sub	sp, #12
   2feb4:	af00      	add	r7, sp, #0
   2feb6:	6078      	str	r0, [r7, #4]
   2feb8:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   2feba:	687b      	ldr	r3, [r7, #4]
   2febc:	2b00      	cmp	r3, #0
   2febe:	d002      	beq.n	2fec6 <http_client_init+0x16>
   2fec0:	683b      	ldr	r3, [r7, #0]
   2fec2:	2b00      	cmp	r3, #0
   2fec4:	d102      	bne.n	2fecc <http_client_init+0x1c>
		return -EINVAL;
   2fec6:	2316      	movs	r3, #22
   2fec8:	425b      	negs	r3, r3
   2feca:	e058      	b.n	2ff7e <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   2fecc:	683b      	ldr	r3, [r7, #0]
   2fece:	691b      	ldr	r3, [r3, #16]
   2fed0:	2b00      	cmp	r3, #0
   2fed2:	d102      	bne.n	2feda <http_client_init+0x2a>
		return -EINVAL;
   2fed4:	2316      	movs	r3, #22
   2fed6:	425b      	negs	r3, r3
   2fed8:	e051      	b.n	2ff7e <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   2feda:	683b      	ldr	r3, [r7, #0]
   2fedc:	685b      	ldr	r3, [r3, #4]
   2fede:	2b00      	cmp	r3, #0
   2fee0:	d102      	bne.n	2fee8 <http_client_init+0x38>
		return -EINVAL;
   2fee2:	2316      	movs	r3, #22
   2fee4:	425b      	negs	r3, r3
   2fee6:	e04a      	b.n	2ff7e <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   2fee8:	683b      	ldr	r3, [r7, #0]
   2feea:	695b      	ldr	r3, [r3, #20]
   2feec:	2b51      	cmp	r3, #81	; 0x51
   2feee:	d802      	bhi.n	2fef6 <http_client_init+0x46>
		return -EINVAL;
   2fef0:	2316      	movs	r3, #22
   2fef2:	425b      	negs	r3, r3
   2fef4:	e043      	b.n	2ff7e <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   2fef6:	687b      	ldr	r3, [r7, #4]
   2fef8:	22e8      	movs	r2, #232	; 0xe8
   2fefa:	2100      	movs	r1, #0
   2fefc:	0018      	movs	r0, r3
   2fefe:	4b22      	ldr	r3, [pc, #136]	; (2ff88 <http_client_init+0xd8>)
   2ff00:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   2ff02:	687b      	ldr	r3, [r7, #4]
   2ff04:	3350      	adds	r3, #80	; 0x50
   2ff06:	6839      	ldr	r1, [r7, #0]
   2ff08:	221c      	movs	r2, #28
   2ff0a:	0018      	movs	r0, r3
   2ff0c:	4b1f      	ldr	r3, [pc, #124]	; (2ff8c <http_client_init+0xdc>)
   2ff0e:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   2ff10:	687b      	ldr	r3, [r7, #4]
   2ff12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2ff14:	2b00      	cmp	r3, #0
   2ff16:	d115      	bne.n	2ff44 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   2ff18:	683b      	ldr	r3, [r7, #0]
   2ff1a:	691b      	ldr	r3, [r3, #16]
   2ff1c:	0018      	movs	r0, r3
   2ff1e:	4b1c      	ldr	r3, [pc, #112]	; (2ff90 <http_client_init+0xe0>)
   2ff20:	4798      	blx	r3
   2ff22:	0003      	movs	r3, r0
   2ff24:	001a      	movs	r2, r3
   2ff26:	687b      	ldr	r3, [r7, #4]
   2ff28:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   2ff2a:	687b      	ldr	r3, [r7, #4]
   2ff2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2ff2e:	2b00      	cmp	r3, #0
   2ff30:	d102      	bne.n	2ff38 <http_client_init+0x88>
			return -ENOMEM;
   2ff32:	230c      	movs	r3, #12
   2ff34:	425b      	negs	r3, r3
   2ff36:	e022      	b.n	2ff7e <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   2ff38:	687b      	ldr	r3, [r7, #4]
   2ff3a:	2241      	movs	r2, #65	; 0x41
   2ff3c:	5c99      	ldrb	r1, [r3, r2]
   2ff3e:	2004      	movs	r0, #4
   2ff40:	4301      	orrs	r1, r0
   2ff42:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   2ff44:	683b      	ldr	r3, [r7, #0]
   2ff46:	891b      	ldrh	r3, [r3, #8]
   2ff48:	2b00      	cmp	r3, #0
   2ff4a:	d010      	beq.n	2ff6e <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   2ff4c:	683b      	ldr	r3, [r7, #0]
   2ff4e:	6858      	ldr	r0, [r3, #4]
   2ff50:	687a      	ldr	r2, [r7, #4]
   2ff52:	4910      	ldr	r1, [pc, #64]	; (2ff94 <http_client_init+0xe4>)
   2ff54:	2300      	movs	r3, #0
   2ff56:	4c10      	ldr	r4, [pc, #64]	; (2ff98 <http_client_init+0xe8>)
   2ff58:	47a0      	blx	r4
   2ff5a:	0002      	movs	r2, r0
   2ff5c:	687b      	ldr	r3, [r7, #4]
   2ff5e:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   2ff60:	687b      	ldr	r3, [r7, #4]
   2ff62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2ff64:	2b00      	cmp	r3, #0
   2ff66:	da02      	bge.n	2ff6e <http_client_init+0xbe>
			return -ENOSPC;
   2ff68:	231c      	movs	r3, #28
   2ff6a:	425b      	negs	r3, r3
   2ff6c:	e007      	b.n	2ff7e <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   2ff6e:	687b      	ldr	r3, [r7, #4]
   2ff70:	2200      	movs	r2, #0
   2ff72:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   2ff74:	687b      	ldr	r3, [r7, #4]
   2ff76:	22d8      	movs	r2, #216	; 0xd8
   2ff78:	2100      	movs	r1, #0
   2ff7a:	5099      	str	r1, [r3, r2]

	return 0;
   2ff7c:	2300      	movs	r3, #0
}
   2ff7e:	0018      	movs	r0, r3
   2ff80:	46bd      	mov	sp, r7
   2ff82:	b003      	add	sp, #12
   2ff84:	bd90      	pop	{r4, r7, pc}
   2ff86:	46c0      	nop			; (mov r8, r8)
   2ff88:	000339ff 	.word	0x000339ff
   2ff8c:	000339c9 	.word	0x000339c9
   2ff90:	000339a1 	.word	0x000339a1
   2ff94:	00030261 	.word	0x00030261
   2ff98:	00031905 	.word	0x00031905

0002ff9c <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   2ff9c:	b580      	push	{r7, lr}
   2ff9e:	b082      	sub	sp, #8
   2ffa0:	af00      	add	r7, sp, #0
   2ffa2:	6078      	str	r0, [r7, #4]
   2ffa4:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   2ffa6:	687b      	ldr	r3, [r7, #4]
   2ffa8:	2b00      	cmp	r3, #0
   2ffaa:	d102      	bne.n	2ffb2 <http_client_register_callback+0x16>
		return -EINVAL;
   2ffac:	2316      	movs	r3, #22
   2ffae:	425b      	negs	r3, r3
   2ffb0:	e003      	b.n	2ffba <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   2ffb2:	687b      	ldr	r3, [r7, #4]
   2ffb4:	683a      	ldr	r2, [r7, #0]
   2ffb6:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   2ffb8:	2300      	movs	r3, #0
}
   2ffba:	0018      	movs	r0, r3
   2ffbc:	46bd      	mov	sp, r7
   2ffbe:	b002      	add	sp, #8
   2ffc0:	bd80      	pop	{r7, pc}
	...

0002ffc4 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   2ffc4:	b580      	push	{r7, lr}
   2ffc6:	b082      	sub	sp, #8
   2ffc8:	af00      	add	r7, sp, #0
   2ffca:	6078      	str	r0, [r7, #4]
	switch (err) {
   2ffcc:	687b      	ldr	r3, [r7, #4]
   2ffce:	330e      	adds	r3, #14
   2ffd0:	2b0e      	cmp	r3, #14
   2ffd2:	d825      	bhi.n	30020 <_hwerr_to_stderr+0x5c>
   2ffd4:	009a      	lsls	r2, r3, #2
   2ffd6:	4b18      	ldr	r3, [pc, #96]	; (30038 <_hwerr_to_stderr+0x74>)
   2ffd8:	18d3      	adds	r3, r2, r3
   2ffda:	681b      	ldr	r3, [r3, #0]
   2ffdc:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   2ffde:	2305      	movs	r3, #5
   2ffe0:	425b      	negs	r3, r3
   2ffe2:	e024      	b.n	3002e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   2ffe4:	2302      	movs	r3, #2
   2ffe6:	425b      	negs	r3, r3
   2ffe8:	e021      	b.n	3002e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   2ffea:	2370      	movs	r3, #112	; 0x70
   2ffec:	425b      	negs	r3, r3
   2ffee:	e01e      	b.n	3002e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   2fff0:	230c      	movs	r3, #12
   2fff2:	425b      	negs	r3, r3
   2fff4:	e01b      	b.n	3002e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   2fff6:	2316      	movs	r3, #22
   2fff8:	425b      	negs	r3, r3
   2fffa:	e018      	b.n	3002e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   2fffc:	230c      	movs	r3, #12
   2fffe:	425b      	negs	r3, r3
   30000:	e015      	b.n	3002e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   30002:	2305      	movs	r3, #5
   30004:	425b      	negs	r3, r3
   30006:	e012      	b.n	3002e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   30008:	2379      	movs	r3, #121	; 0x79
   3000a:	425b      	negs	r3, r3
   3000c:	e00f      	b.n	3002e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   3000e:	2368      	movs	r3, #104	; 0x68
   30010:	425b      	negs	r3, r3
   30012:	e00c      	b.n	3002e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   30014:	230b      	movs	r3, #11
   30016:	425b      	negs	r3, r3
   30018:	e009      	b.n	3002e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   3001a:	2310      	movs	r3, #16
   3001c:	425b      	negs	r3, r3
   3001e:	e006      	b.n	3002e <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   30020:	687b      	ldr	r3, [r7, #4]
   30022:	2b00      	cmp	r3, #0
   30024:	da02      	bge.n	3002c <_hwerr_to_stderr+0x68>
				return -EIO;
   30026:	2305      	movs	r3, #5
   30028:	425b      	negs	r3, r3
   3002a:	e000      	b.n	3002e <_hwerr_to_stderr+0x6a>
			}
			return 0;
   3002c:	2300      	movs	r3, #0
	}
}
   3002e:	0018      	movs	r0, r3
   30030:	46bd      	mov	sp, r7
   30032:	b002      	add	sp, #8
   30034:	bd80      	pop	{r7, pc}
   30036:	46c0      	nop			; (mov r8, r8)
   30038:	00038bc4 	.word	0x00038bc4

0003003c <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   3003c:	b580      	push	{r7, lr}
   3003e:	b08a      	sub	sp, #40	; 0x28
   30040:	af00      	add	r7, sp, #0
   30042:	603a      	str	r2, [r7, #0]
   30044:	1dfb      	adds	r3, r7, #7
   30046:	1c02      	adds	r2, r0, #0
   30048:	701a      	strb	r2, [r3, #0]
   3004a:	1dbb      	adds	r3, r7, #6
   3004c:	1c0a      	adds	r2, r1, #0
   3004e:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   30050:	1dfb      	adds	r3, r7, #7
   30052:	2200      	movs	r2, #0
   30054:	569a      	ldrsb	r2, [r3, r2]
   30056:	4b4b      	ldr	r3, [pc, #300]	; (30184 <http_client_socket_event_handler+0x148>)
   30058:	0092      	lsls	r2, r2, #2
   3005a:	58d3      	ldr	r3, [r2, r3]
   3005c:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   3005e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30060:	2b00      	cmp	r3, #0
   30062:	d100      	bne.n	30066 <http_client_socket_event_handler+0x2a>
   30064:	e08a      	b.n	3017c <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   30066:	1dbb      	adds	r3, r7, #6
   30068:	781b      	ldrb	r3, [r3, #0]
   3006a:	2b06      	cmp	r3, #6
   3006c:	d040      	beq.n	300f0 <http_client_socket_event_handler+0xb4>
   3006e:	2b07      	cmp	r3, #7
   30070:	d060      	beq.n	30134 <http_client_socket_event_handler+0xf8>
   30072:	2b05      	cmp	r3, #5
   30074:	d000      	beq.n	30078 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   30076:	e082      	b.n	3017e <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   30078:	683b      	ldr	r3, [r7, #0]
   3007a:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   3007c:	6a3b      	ldr	r3, [r7, #32]
   3007e:	785b      	ldrb	r3, [r3, #1]
   30080:	b25b      	sxtb	r3, r3
   30082:	001a      	movs	r2, r3
   30084:	230c      	movs	r3, #12
   30086:	18fb      	adds	r3, r7, r3
   30088:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   3008a:	6a3b      	ldr	r3, [r7, #32]
   3008c:	785b      	ldrb	r3, [r3, #1]
   3008e:	b25b      	sxtb	r3, r3
   30090:	2b00      	cmp	r3, #0
   30092:	da0c      	bge.n	300ae <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   30094:	6a3b      	ldr	r3, [r7, #32]
   30096:	785b      	ldrb	r3, [r3, #1]
   30098:	b25b      	sxtb	r3, r3
   3009a:	0018      	movs	r0, r3
   3009c:	4b3a      	ldr	r3, [pc, #232]	; (30188 <http_client_socket_event_handler+0x14c>)
   3009e:	4798      	blx	r3
   300a0:	0002      	movs	r2, r0
   300a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   300a4:	0011      	movs	r1, r2
   300a6:	0018      	movs	r0, r3
   300a8:	4b38      	ldr	r3, [pc, #224]	; (3018c <http_client_socket_event_handler+0x150>)
   300aa:	4798      	blx	r3
    	break;
   300ac:	e067      	b.n	3017e <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   300ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   300b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   300b2:	2b00      	cmp	r3, #0
   300b4:	d006      	beq.n	300c4 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   300b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   300b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   300ba:	220c      	movs	r2, #12
   300bc:	18ba      	adds	r2, r7, r2
   300be:	6a78      	ldr	r0, [r7, #36]	; 0x24
   300c0:	2100      	movs	r1, #0
   300c2:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   300c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   300c6:	2203      	movs	r2, #3
   300c8:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   300ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   300cc:	6d58      	ldr	r0, [r3, #84]	; 0x54
   300ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   300d0:	6c99      	ldr	r1, [r3, #72]	; 0x48
   300d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   300d4:	2258      	movs	r2, #88	; 0x58
   300d6:	5a9b      	ldrh	r3, [r3, r2]
   300d8:	001a      	movs	r2, r3
   300da:	4b2d      	ldr	r3, [pc, #180]	; (30190 <http_client_socket_event_handler+0x154>)
   300dc:	4798      	blx	r3
    		_http_client_recv_packet(module);
   300de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   300e0:	0018      	movs	r0, r3
   300e2:	4b2c      	ldr	r3, [pc, #176]	; (30194 <http_client_socket_event_handler+0x158>)
   300e4:	4798      	blx	r3
			_http_client_request(module);
   300e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   300e8:	0018      	movs	r0, r3
   300ea:	4b2b      	ldr	r3, [pc, #172]	; (30198 <http_client_socket_event_handler+0x15c>)
   300ec:	4798      	blx	r3
    	break;
   300ee:	e046      	b.n	3017e <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   300f0:	683b      	ldr	r3, [r7, #0]
   300f2:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   300f4:	69fb      	ldr	r3, [r7, #28]
   300f6:	2204      	movs	r2, #4
   300f8:	5e9b      	ldrsh	r3, [r3, r2]
   300fa:	2b00      	cmp	r3, #0
   300fc:	dd09      	ble.n	30112 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   300fe:	69fb      	ldr	r3, [r7, #28]
   30100:	2204      	movs	r2, #4
   30102:	5e9b      	ldrsh	r3, [r3, r2]
   30104:	001a      	movs	r2, r3
   30106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30108:	0011      	movs	r1, r2
   3010a:	0018      	movs	r0, r3
   3010c:	4b23      	ldr	r3, [pc, #140]	; (3019c <http_client_socket_event_handler+0x160>)
   3010e:	4798      	blx	r3
   30110:	e00b      	b.n	3012a <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   30112:	69fb      	ldr	r3, [r7, #28]
   30114:	2204      	movs	r2, #4
   30116:	5e9b      	ldrsh	r3, [r3, r2]
   30118:	0018      	movs	r0, r3
   3011a:	4b1b      	ldr	r3, [pc, #108]	; (30188 <http_client_socket_event_handler+0x14c>)
   3011c:	4798      	blx	r3
   3011e:	0002      	movs	r2, r0
   30120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30122:	0011      	movs	r1, r2
   30124:	0018      	movs	r0, r3
   30126:	4b19      	ldr	r3, [pc, #100]	; (3018c <http_client_socket_event_handler+0x150>)
   30128:	4798      	blx	r3
		_http_client_recv_packet(module);
   3012a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3012c:	0018      	movs	r0, r3
   3012e:	4b19      	ldr	r3, [pc, #100]	; (30194 <http_client_socket_event_handler+0x158>)
   30130:	4798      	blx	r3
		break;
   30132:	e024      	b.n	3017e <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   30134:	231a      	movs	r3, #26
   30136:	18fb      	adds	r3, r7, r3
   30138:	683a      	ldr	r2, [r7, #0]
   3013a:	8812      	ldrh	r2, [r2, #0]
   3013c:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   3013e:	231a      	movs	r3, #26
   30140:	18fb      	adds	r3, r7, r3
   30142:	2200      	movs	r2, #0
   30144:	5e9b      	ldrsh	r3, [r3, r2]
   30146:	2b00      	cmp	r3, #0
   30148:	da0d      	bge.n	30166 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   3014a:	231a      	movs	r3, #26
   3014c:	18fb      	adds	r3, r7, r3
   3014e:	2200      	movs	r2, #0
   30150:	5e9b      	ldrsh	r3, [r3, r2]
   30152:	0018      	movs	r0, r3
   30154:	4b0c      	ldr	r3, [pc, #48]	; (30188 <http_client_socket_event_handler+0x14c>)
   30156:	4798      	blx	r3
   30158:	0002      	movs	r2, r0
   3015a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3015c:	0011      	movs	r1, r2
   3015e:	0018      	movs	r0, r3
   30160:	4b0a      	ldr	r3, [pc, #40]	; (3018c <http_client_socket_event_handler+0x150>)
   30162:	4798      	blx	r3
   30164:	e003      	b.n	3016e <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   30166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30168:	0018      	movs	r0, r3
   3016a:	4b0b      	ldr	r3, [pc, #44]	; (30198 <http_client_socket_event_handler+0x15c>)
   3016c:	4798      	blx	r3
		module->sending = 0;
   3016e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30170:	2241      	movs	r2, #65	; 0x41
   30172:	5c99      	ldrb	r1, [r3, r2]
   30174:	2001      	movs	r0, #1
   30176:	4381      	bics	r1, r0
   30178:	5499      	strb	r1, [r3, r2]
    	break;
   3017a:	e000      	b.n	3017e <http_client_socket_event_handler+0x142>
		return;
   3017c:	46c0      	nop			; (mov r8, r8)
	}

}
   3017e:	46bd      	mov	sp, r7
   30180:	b00a      	add	sp, #40	; 0x28
   30182:	bd80      	pop	{r7, pc}
   30184:	2000424c 	.word	0x2000424c
   30188:	0002ffc5 	.word	0x0002ffc5
   3018c:	00030639 	.word	0x00030639
   30190:	00031995 	.word	0x00031995
   30194:	00030ec5 	.word	0x00030ec5
   30198:	0003078d 	.word	0x0003078d
   3019c:	00030f29 	.word	0x00030f29

000301a0 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   301a0:	b580      	push	{r7, lr}
   301a2:	b088      	sub	sp, #32
   301a4:	af00      	add	r7, sp, #0
   301a6:	6078      	str	r0, [r7, #4]
   301a8:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   301aa:	2300      	movs	r3, #0
   301ac:	61fb      	str	r3, [r7, #28]
   301ae:	e048      	b.n	30242 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   301b0:	4b27      	ldr	r3, [pc, #156]	; (30250 <http_client_socket_resolve_handler+0xb0>)
   301b2:	69fa      	ldr	r2, [r7, #28]
   301b4:	0092      	lsls	r2, r2, #2
   301b6:	58d3      	ldr	r3, [r2, r3]
   301b8:	2b00      	cmp	r3, #0
   301ba:	d03f      	beq.n	3023c <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   301bc:	4b24      	ldr	r3, [pc, #144]	; (30250 <http_client_socket_resolve_handler+0xb0>)
   301be:	69fa      	ldr	r2, [r7, #28]
   301c0:	0092      	lsls	r2, r2, #2
   301c2:	58d3      	ldr	r3, [r2, r3]
   301c4:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   301c6:	69bb      	ldr	r3, [r7, #24]
   301c8:	1c5a      	adds	r2, r3, #1
   301ca:	687b      	ldr	r3, [r7, #4]
   301cc:	0011      	movs	r1, r2
   301ce:	0018      	movs	r0, r3
   301d0:	4b20      	ldr	r3, [pc, #128]	; (30254 <http_client_socket_resolve_handler+0xb4>)
   301d2:	4798      	blx	r3
   301d4:	1e03      	subs	r3, r0, #0
   301d6:	d131      	bne.n	3023c <http_client_socket_resolve_handler+0x9c>
   301d8:	69bb      	ldr	r3, [r7, #24]
   301da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   301dc:	2b01      	cmp	r3, #1
   301de:	d12d      	bne.n	3023c <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   301e0:	683b      	ldr	r3, [r7, #0]
   301e2:	2b00      	cmp	r3, #0
   301e4:	d107      	bne.n	301f6 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   301e6:	2376      	movs	r3, #118	; 0x76
   301e8:	425a      	negs	r2, r3
   301ea:	69bb      	ldr	r3, [r7, #24]
   301ec:	0011      	movs	r1, r2
   301ee:	0018      	movs	r0, r3
   301f0:	4b19      	ldr	r3, [pc, #100]	; (30258 <http_client_socket_resolve_handler+0xb8>)
   301f2:	4798      	blx	r3
					return;
   301f4:	e028      	b.n	30248 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   301f6:	2308      	movs	r3, #8
   301f8:	18fb      	adds	r3, r7, r3
   301fa:	2202      	movs	r2, #2
   301fc:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   301fe:	69bb      	ldr	r3, [r7, #24]
   30200:	2250      	movs	r2, #80	; 0x50
   30202:	5a9b      	ldrh	r3, [r3, r2]
   30204:	021b      	lsls	r3, r3, #8
   30206:	b21a      	sxth	r2, r3
   30208:	69bb      	ldr	r3, [r7, #24]
   3020a:	2150      	movs	r1, #80	; 0x50
   3020c:	5a5b      	ldrh	r3, [r3, r1]
   3020e:	0a1b      	lsrs	r3, r3, #8
   30210:	b29b      	uxth	r3, r3
   30212:	b21b      	sxth	r3, r3
   30214:	4313      	orrs	r3, r2
   30216:	b21b      	sxth	r3, r3
   30218:	b29a      	uxth	r2, r3
   3021a:	2308      	movs	r3, #8
   3021c:	18fb      	adds	r3, r7, r3
   3021e:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   30220:	2308      	movs	r3, #8
   30222:	18fb      	adds	r3, r7, r3
   30224:	683a      	ldr	r2, [r7, #0]
   30226:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   30228:	69bb      	ldr	r3, [r7, #24]
   3022a:	781b      	ldrb	r3, [r3, #0]
   3022c:	b25b      	sxtb	r3, r3
   3022e:	2208      	movs	r2, #8
   30230:	18b9      	adds	r1, r7, r2
   30232:	2210      	movs	r2, #16
   30234:	0018      	movs	r0, r3
   30236:	4b09      	ldr	r3, [pc, #36]	; (3025c <http_client_socket_resolve_handler+0xbc>)
   30238:	4798      	blx	r3
				return;
   3023a:	e005      	b.n	30248 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   3023c:	69fb      	ldr	r3, [r7, #28]
   3023e:	3301      	adds	r3, #1
   30240:	61fb      	str	r3, [r7, #28]
   30242:	69fb      	ldr	r3, [r7, #28]
   30244:	2b06      	cmp	r3, #6
   30246:	ddb3      	ble.n	301b0 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   30248:	46bd      	mov	sp, r7
   3024a:	b008      	add	sp, #32
   3024c:	bd80      	pop	{r7, pc}
   3024e:	46c0      	nop			; (mov r8, r8)
   30250:	2000424c 	.word	0x2000424c
   30254:	00033d57 	.word	0x00033d57
   30258:	00030639 	.word	0x00030639
   3025c:	00024b5d 	.word	0x00024b5d

00030260 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   30260:	b580      	push	{r7, lr}
   30262:	b086      	sub	sp, #24
   30264:	af00      	add	r7, sp, #0
   30266:	60f8      	str	r0, [r7, #12]
   30268:	60b9      	str	r1, [r7, #8]
   3026a:	607a      	str	r2, [r7, #4]
   3026c:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   3026e:	687b      	ldr	r3, [r7, #4]
   30270:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   30272:	697b      	ldr	r3, [r7, #20]
   30274:	2b00      	cmp	r3, #0
   30276:	d007      	beq.n	30288 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   30278:	233e      	movs	r3, #62	; 0x3e
   3027a:	425a      	negs	r2, r3
   3027c:	697b      	ldr	r3, [r7, #20]
   3027e:	0011      	movs	r1, r2
   30280:	0018      	movs	r0, r3
   30282:	4b03      	ldr	r3, [pc, #12]	; (30290 <http_client_timer_callback+0x30>)
   30284:	4798      	blx	r3
   30286:	e000      	b.n	3028a <http_client_timer_callback+0x2a>
		return;
   30288:	46c0      	nop			; (mov r8, r8)
}
   3028a:	46bd      	mov	sp, r7
   3028c:	b006      	add	sp, #24
   3028e:	bd80      	pop	{r7, pc}
   30290:	00030639 	.word	0x00030639

00030294 <_is_ip>:

static int _is_ip(const char *host)
{
   30294:	b580      	push	{r7, lr}
   30296:	b084      	sub	sp, #16
   30298:	af00      	add	r7, sp, #0
   3029a:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   3029c:	2300      	movs	r3, #0
   3029e:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   302a0:	e03a      	b.n	30318 <_is_ip+0x84>
		ch = *host++;
   302a2:	687b      	ldr	r3, [r7, #4]
   302a4:	1c5a      	adds	r2, r3, #1
   302a6:	607a      	str	r2, [r7, #4]
   302a8:	220b      	movs	r2, #11
   302aa:	18ba      	adds	r2, r7, r2
   302ac:	781b      	ldrb	r3, [r3, #0]
   302ae:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   302b0:	230b      	movs	r3, #11
   302b2:	18fb      	adds	r3, r7, r3
   302b4:	781b      	ldrb	r3, [r3, #0]
   302b6:	2b60      	cmp	r3, #96	; 0x60
   302b8:	d904      	bls.n	302c4 <_is_ip+0x30>
   302ba:	230b      	movs	r3, #11
   302bc:	18fb      	adds	r3, r7, r3
   302be:	781b      	ldrb	r3, [r3, #0]
   302c0:	2b66      	cmp	r3, #102	; 0x66
   302c2:	d913      	bls.n	302ec <_is_ip+0x58>
   302c4:	230b      	movs	r3, #11
   302c6:	18fb      	adds	r3, r7, r3
   302c8:	781b      	ldrb	r3, [r3, #0]
   302ca:	2b40      	cmp	r3, #64	; 0x40
   302cc:	d904      	bls.n	302d8 <_is_ip+0x44>
   302ce:	230b      	movs	r3, #11
   302d0:	18fb      	adds	r3, r7, r3
   302d2:	781b      	ldrb	r3, [r3, #0]
   302d4:	2b46      	cmp	r3, #70	; 0x46
   302d6:	d909      	bls.n	302ec <_is_ip+0x58>
   302d8:	230b      	movs	r3, #11
   302da:	18fb      	adds	r3, r7, r3
   302dc:	781b      	ldrb	r3, [r3, #0]
   302de:	2b3a      	cmp	r3, #58	; 0x3a
   302e0:	d004      	beq.n	302ec <_is_ip+0x58>
   302e2:	230b      	movs	r3, #11
   302e4:	18fb      	adds	r3, r7, r3
   302e6:	781b      	ldrb	r3, [r3, #0]
   302e8:	2b2f      	cmp	r3, #47	; 0x2f
   302ea:	d102      	bne.n	302f2 <_is_ip+0x5e>
			isv6 = 1;
   302ec:	2301      	movs	r3, #1
   302ee:	60fb      	str	r3, [r7, #12]
   302f0:	e012      	b.n	30318 <_is_ip+0x84>
		} else if (ch == '.') {
   302f2:	230b      	movs	r3, #11
   302f4:	18fb      	adds	r3, r7, r3
   302f6:	781b      	ldrb	r3, [r3, #0]
   302f8:	2b2e      	cmp	r3, #46	; 0x2e
   302fa:	d104      	bne.n	30306 <_is_ip+0x72>
			if (isv6) {
   302fc:	68fb      	ldr	r3, [r7, #12]
   302fe:	2b00      	cmp	r3, #0
   30300:	d00a      	beq.n	30318 <_is_ip+0x84>
				return 0;
   30302:	2300      	movs	r3, #0
   30304:	e00d      	b.n	30322 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   30306:	230b      	movs	r3, #11
   30308:	18fb      	adds	r3, r7, r3
   3030a:	781b      	ldrb	r3, [r3, #0]
   3030c:	2230      	movs	r2, #48	; 0x30
   3030e:	4013      	ands	r3, r2
   30310:	2b30      	cmp	r3, #48	; 0x30
   30312:	d001      	beq.n	30318 <_is_ip+0x84>
			return 0;
   30314:	2300      	movs	r3, #0
   30316:	e004      	b.n	30322 <_is_ip+0x8e>
	while (*host != '\0') {
   30318:	687b      	ldr	r3, [r7, #4]
   3031a:	781b      	ldrb	r3, [r3, #0]
   3031c:	2b00      	cmp	r3, #0
   3031e:	d1c0      	bne.n	302a2 <_is_ip+0xe>
		}
	}
	return 1;
   30320:	2301      	movs	r3, #1
}
   30322:	0018      	movs	r0, r3
   30324:	46bd      	mov	sp, r7
   30326:	b004      	add	sp, #16
   30328:	bd80      	pop	{r7, pc}
	...

0003032c <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   3032c:	b5b0      	push	{r4, r5, r7, lr}
   3032e:	b08e      	sub	sp, #56	; 0x38
   30330:	af00      	add	r7, sp, #0
   30332:	60f8      	str	r0, [r7, #12]
   30334:	60b9      	str	r1, [r7, #8]
   30336:	603b      	str	r3, [r7, #0]
   30338:	1dfb      	adds	r3, r7, #7
   3033a:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   3033c:	2337      	movs	r3, #55	; 0x37
   3033e:	18fb      	adds	r3, r7, r3
   30340:	2200      	movs	r2, #0
   30342:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   30344:	2300      	movs	r3, #0
   30346:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   30348:	2300      	movs	r3, #0
   3034a:	633b      	str	r3, [r7, #48]	; 0x30
   3034c:	2300      	movs	r3, #0
   3034e:	62fb      	str	r3, [r7, #44]	; 0x2c
   30350:	2300      	movs	r3, #0
   30352:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   30354:	68fb      	ldr	r3, [r7, #12]
   30356:	2b00      	cmp	r3, #0
   30358:	d102      	bne.n	30360 <http_client_send_request+0x34>
		return -EINVAL;
   3035a:	2316      	movs	r3, #22
   3035c:	425b      	negs	r3, r3
   3035e:	e145      	b.n	305ec <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   30360:	68fb      	ldr	r3, [r7, #12]
   30362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30364:	2b02      	cmp	r3, #2
   30366:	d902      	bls.n	3036e <http_client_send_request+0x42>
		return -EBUSY;
   30368:	2310      	movs	r3, #16
   3036a:	425b      	negs	r3, r3
   3036c:	e13e      	b.n	305ec <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   3036e:	49a1      	ldr	r1, [pc, #644]	; (305f4 <http_client_send_request+0x2c8>)
   30370:	68bb      	ldr	r3, [r7, #8]
   30372:	2207      	movs	r2, #7
   30374:	0018      	movs	r0, r3
   30376:	4ba0      	ldr	r3, [pc, #640]	; (305f8 <http_client_send_request+0x2cc>)
   30378:	4798      	blx	r3
   3037a:	1e03      	subs	r3, r0, #0
   3037c:	d102      	bne.n	30384 <http_client_send_request+0x58>
		i = 7;
   3037e:	2307      	movs	r3, #7
   30380:	633b      	str	r3, [r7, #48]	; 0x30
   30382:	e009      	b.n	30398 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   30384:	499d      	ldr	r1, [pc, #628]	; (305fc <http_client_send_request+0x2d0>)
   30386:	68bb      	ldr	r3, [r7, #8]
   30388:	2208      	movs	r2, #8
   3038a:	0018      	movs	r0, r3
   3038c:	4b9a      	ldr	r3, [pc, #616]	; (305f8 <http_client_send_request+0x2cc>)
   3038e:	4798      	blx	r3
   30390:	1e03      	subs	r3, r0, #0
   30392:	d101      	bne.n	30398 <http_client_send_request+0x6c>
		i = 8;
   30394:	2308      	movs	r3, #8
   30396:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   30398:	68fb      	ldr	r3, [r7, #12]
   3039a:	1c5c      	adds	r4, r3, #1
   3039c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3039e:	68ba      	ldr	r2, [r7, #8]
   303a0:	18d5      	adds	r5, r2, r3
   303a2:	68fb      	ldr	r3, [r7, #12]
   303a4:	3301      	adds	r3, #1
   303a6:	0018      	movs	r0, r3
   303a8:	4b95      	ldr	r3, [pc, #596]	; (30600 <http_client_send_request+0x2d4>)
   303aa:	4798      	blx	r3
   303ac:	0003      	movs	r3, r0
   303ae:	001a      	movs	r2, r3
   303b0:	0029      	movs	r1, r5
   303b2:	0020      	movs	r0, r4
   303b4:	4b90      	ldr	r3, [pc, #576]	; (305f8 <http_client_send_request+0x2cc>)
   303b6:	4798      	blx	r3
   303b8:	0003      	movs	r3, r0
   303ba:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   303bc:	e00d      	b.n	303da <http_client_send_request+0xae>
		module->host[j++] = url[i];
   303be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   303c0:	1c5a      	adds	r2, r3, #1
   303c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   303c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   303c6:	68b9      	ldr	r1, [r7, #8]
   303c8:	188a      	adds	r2, r1, r2
   303ca:	7811      	ldrb	r1, [r2, #0]
   303cc:	68fa      	ldr	r2, [r7, #12]
   303ce:	18d3      	adds	r3, r2, r3
   303d0:	1c0a      	adds	r2, r1, #0
   303d2:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   303d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   303d6:	3301      	adds	r3, #1
   303d8:	633b      	str	r3, [r7, #48]	; 0x30
   303da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   303dc:	68ba      	ldr	r2, [r7, #8]
   303de:	18d3      	adds	r3, r2, r3
   303e0:	781b      	ldrb	r3, [r3, #0]
   303e2:	2b00      	cmp	r3, #0
   303e4:	d005      	beq.n	303f2 <http_client_send_request+0xc6>
   303e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   303e8:	68ba      	ldr	r2, [r7, #8]
   303ea:	18d3      	adds	r3, r2, r3
   303ec:	781b      	ldrb	r3, [r3, #0]
   303ee:	2b2f      	cmp	r3, #47	; 0x2f
   303f0:	d1e5      	bne.n	303be <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   303f2:	68fa      	ldr	r2, [r7, #12]
   303f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   303f6:	18d3      	adds	r3, r2, r3
   303f8:	3301      	adds	r3, #1
   303fa:	2200      	movs	r2, #0
   303fc:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   303fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30400:	68ba      	ldr	r2, [r7, #8]
   30402:	18d3      	adds	r3, r2, r3
   30404:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   30406:	68fb      	ldr	r3, [r7, #12]
   30408:	3301      	adds	r3, #1
   3040a:	781b      	ldrb	r3, [r3, #0]
   3040c:	2b00      	cmp	r3, #0
   3040e:	d102      	bne.n	30416 <http_client_send_request+0xea>
		return -EINVAL;
   30410:	2316      	movs	r3, #22
   30412:	425b      	negs	r3, r3
   30414:	e0ea      	b.n	305ec <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   30416:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30418:	0018      	movs	r0, r3
   3041a:	4b79      	ldr	r3, [pc, #484]	; (30600 <http_client_send_request+0x2d4>)
   3041c:	4798      	blx	r3
   3041e:	0003      	movs	r3, r0
   30420:	2b3f      	cmp	r3, #63	; 0x3f
   30422:	d902      	bls.n	3042a <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   30424:	235b      	movs	r3, #91	; 0x5b
   30426:	425b      	negs	r3, r3
   30428:	e0e0      	b.n	305ec <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   3042a:	68fb      	ldr	r3, [r7, #12]
   3042c:	22d4      	movs	r2, #212	; 0xd4
   3042e:	589b      	ldr	r3, [r3, r2]
   30430:	2b00      	cmp	r3, #0
   30432:	d005      	beq.n	30440 <http_client_send_request+0x114>
		free(module->req.ext_header);
   30434:	68fb      	ldr	r3, [r7, #12]
   30436:	22d4      	movs	r2, #212	; 0xd4
   30438:	589b      	ldr	r3, [r3, r2]
   3043a:	0018      	movs	r0, r3
   3043c:	4b71      	ldr	r3, [pc, #452]	; (30604 <http_client_send_request+0x2d8>)
   3043e:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   30440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30442:	2b00      	cmp	r3, #0
   30444:	d010      	beq.n	30468 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   30446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30448:	0018      	movs	r0, r3
   3044a:	4b6f      	ldr	r3, [pc, #444]	; (30608 <http_client_send_request+0x2dc>)
   3044c:	4798      	blx	r3
   3044e:	0003      	movs	r3, r0
   30450:	0019      	movs	r1, r3
   30452:	68fb      	ldr	r3, [r7, #12]
   30454:	22d4      	movs	r2, #212	; 0xd4
   30456:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   30458:	68fb      	ldr	r3, [r7, #12]
   3045a:	22d4      	movs	r2, #212	; 0xd4
   3045c:	589b      	ldr	r3, [r3, r2]
   3045e:	2b00      	cmp	r3, #0
   30460:	d106      	bne.n	30470 <http_client_send_request+0x144>
			return -ENOMEM;
   30462:	230c      	movs	r3, #12
   30464:	425b      	negs	r3, r3
   30466:	e0c1      	b.n	305ec <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   30468:	68fb      	ldr	r3, [r7, #12]
   3046a:	22d4      	movs	r2, #212	; 0xd4
   3046c:	2100      	movs	r1, #0
   3046e:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   30470:	68fb      	ldr	r3, [r7, #12]
   30472:	2241      	movs	r2, #65	; 0x41
   30474:	5c99      	ldrb	r1, [r3, r2]
   30476:	2001      	movs	r0, #1
   30478:	4381      	bics	r1, r0
   3047a:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   3047c:	68fb      	ldr	r3, [r7, #12]
   3047e:	2200      	movs	r2, #0
   30480:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   30482:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30484:	781b      	ldrb	r3, [r3, #0]
   30486:	2b2f      	cmp	r3, #47	; 0x2f
   30488:	d107      	bne.n	3049a <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   3048a:	68fb      	ldr	r3, [r7, #12]
   3048c:	3370      	adds	r3, #112	; 0x70
   3048e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30490:	0011      	movs	r1, r2
   30492:	0018      	movs	r0, r3
   30494:	4b5d      	ldr	r3, [pc, #372]	; (3060c <http_client_send_request+0x2e0>)
   30496:	4798      	blx	r3
   30498:	e00f      	b.n	304ba <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   3049a:	68fb      	ldr	r3, [r7, #12]
   3049c:	2270      	movs	r2, #112	; 0x70
   3049e:	212f      	movs	r1, #47	; 0x2f
   304a0:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   304a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   304a4:	781b      	ldrb	r3, [r3, #0]
   304a6:	2b00      	cmp	r3, #0
   304a8:	d007      	beq.n	304ba <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   304aa:	68fb      	ldr	r3, [r7, #12]
   304ac:	3370      	adds	r3, #112	; 0x70
   304ae:	3301      	adds	r3, #1
   304b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   304b2:	0011      	movs	r1, r2
   304b4:	0018      	movs	r0, r3
   304b6:	4b55      	ldr	r3, [pc, #340]	; (3060c <http_client_send_request+0x2e0>)
   304b8:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   304ba:	683b      	ldr	r3, [r7, #0]
   304bc:	2b00      	cmp	r3, #0
   304be:	d007      	beq.n	304d0 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   304c0:	68fb      	ldr	r3, [r7, #12]
   304c2:	33b0      	adds	r3, #176	; 0xb0
   304c4:	6839      	ldr	r1, [r7, #0]
   304c6:	2218      	movs	r2, #24
   304c8:	0018      	movs	r0, r3
   304ca:	4b51      	ldr	r3, [pc, #324]	; (30610 <http_client_send_request+0x2e4>)
   304cc:	4798      	blx	r3
   304ce:	e006      	b.n	304de <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   304d0:	68fb      	ldr	r3, [r7, #12]
   304d2:	33b0      	adds	r3, #176	; 0xb0
   304d4:	2218      	movs	r2, #24
   304d6:	2100      	movs	r1, #0
   304d8:	0018      	movs	r0, r3
   304da:	4b4e      	ldr	r3, [pc, #312]	; (30614 <http_client_send_request+0x2e8>)
   304dc:	4798      	blx	r3
	}

	module->req.method = method;
   304de:	68fb      	ldr	r3, [r7, #12]
   304e0:	1dfa      	adds	r2, r7, #7
   304e2:	21c8      	movs	r1, #200	; 0xc8
   304e4:	7812      	ldrb	r2, [r2, #0]
   304e6:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   304e8:	68fb      	ldr	r3, [r7, #12]
   304ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   304ec:	2b01      	cmp	r3, #1
   304ee:	d003      	beq.n	304f8 <http_client_send_request+0x1cc>
   304f0:	d316      	bcc.n	30520 <http_client_send_request+0x1f4>
   304f2:	2b02      	cmp	r3, #2
   304f4:	d004      	beq.n	30500 <http_client_send_request+0x1d4>
   304f6:	e074      	b.n	305e2 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   304f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   304fa:	2b00      	cmp	r3, #0
   304fc:	d100      	bne.n	30500 <http_client_send_request+0x1d4>
   304fe:	e073      	b.n	305e8 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   30500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30502:	2b00      	cmp	r3, #0
   30504:	d107      	bne.n	30516 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   30506:	68fb      	ldr	r3, [r7, #12]
   30508:	2203      	movs	r2, #3
   3050a:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   3050c:	68fb      	ldr	r3, [r7, #12]
   3050e:	0018      	movs	r0, r3
   30510:	4b41      	ldr	r3, [pc, #260]	; (30618 <http_client_send_request+0x2ec>)
   30512:	4798      	blx	r3
			break;
   30514:	e069      	b.n	305ea <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   30516:	68fb      	ldr	r3, [r7, #12]
   30518:	2100      	movs	r1, #0
   3051a:	0018      	movs	r0, r3
   3051c:	4b3f      	ldr	r3, [pc, #252]	; (3061c <http_client_send_request+0x2f0>)
   3051e:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   30520:	68fb      	ldr	r3, [r7, #12]
   30522:	2252      	movs	r2, #82	; 0x52
   30524:	5c9b      	ldrb	r3, [r3, r2]
   30526:	2b00      	cmp	r3, #0
   30528:	d007      	beq.n	3053a <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   3052a:	2337      	movs	r3, #55	; 0x37
   3052c:	18fb      	adds	r3, r7, r3
   3052e:	2237      	movs	r2, #55	; 0x37
   30530:	18ba      	adds	r2, r7, r2
   30532:	7812      	ldrb	r2, [r2, #0]
   30534:	2101      	movs	r1, #1
   30536:	430a      	orrs	r2, r1
   30538:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   3053a:	2337      	movs	r3, #55	; 0x37
   3053c:	18fb      	adds	r3, r7, r3
   3053e:	781b      	ldrb	r3, [r3, #0]
   30540:	001a      	movs	r2, r3
   30542:	2101      	movs	r1, #1
   30544:	2002      	movs	r0, #2
   30546:	4b36      	ldr	r3, [pc, #216]	; (30620 <http_client_send_request+0x2f4>)
   30548:	4798      	blx	r3
   3054a:	0003      	movs	r3, r0
   3054c:	001a      	movs	r2, r3
   3054e:	68fb      	ldr	r3, [r7, #12]
   30550:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   30552:	68fb      	ldr	r3, [r7, #12]
   30554:	781b      	ldrb	r3, [r3, #0]
   30556:	b25b      	sxtb	r3, r3
   30558:	2b00      	cmp	r3, #0
   3055a:	db3f      	blt.n	305dc <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   3055c:	68fb      	ldr	r3, [r7, #12]
   3055e:	781b      	ldrb	r3, [r3, #0]
   30560:	b25b      	sxtb	r3, r3
   30562:	001a      	movs	r2, r3
   30564:	4b2f      	ldr	r3, [pc, #188]	; (30624 <http_client_send_request+0x2f8>)
   30566:	0092      	lsls	r2, r2, #2
   30568:	68f9      	ldr	r1, [r7, #12]
   3056a:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   3056c:	68fb      	ldr	r3, [r7, #12]
   3056e:	3301      	adds	r3, #1
   30570:	0018      	movs	r0, r3
   30572:	4b2d      	ldr	r3, [pc, #180]	; (30628 <http_client_send_request+0x2fc>)
   30574:	4798      	blx	r3
   30576:	1e03      	subs	r3, r0, #0
   30578:	d027      	beq.n	305ca <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   3057a:	2314      	movs	r3, #20
   3057c:	18fb      	adds	r3, r7, r3
   3057e:	2202      	movs	r2, #2
   30580:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30582:	68fb      	ldr	r3, [r7, #12]
   30584:	2250      	movs	r2, #80	; 0x50
   30586:	5a9b      	ldrh	r3, [r3, r2]
   30588:	021b      	lsls	r3, r3, #8
   3058a:	b21a      	sxth	r2, r3
   3058c:	68fb      	ldr	r3, [r7, #12]
   3058e:	2150      	movs	r1, #80	; 0x50
   30590:	5a5b      	ldrh	r3, [r3, r1]
   30592:	0a1b      	lsrs	r3, r3, #8
   30594:	b29b      	uxth	r3, r3
   30596:	b21b      	sxth	r3, r3
   30598:	4313      	orrs	r3, r2
   3059a:	b21b      	sxth	r3, r3
   3059c:	b29a      	uxth	r2, r3
   3059e:	2314      	movs	r3, #20
   305a0:	18fb      	adds	r3, r7, r3
   305a2:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   305a4:	68fb      	ldr	r3, [r7, #12]
   305a6:	3301      	adds	r3, #1
   305a8:	0018      	movs	r0, r3
   305aa:	4b20      	ldr	r3, [pc, #128]	; (3062c <http_client_send_request+0x300>)
   305ac:	4798      	blx	r3
   305ae:	0002      	movs	r2, r0
   305b0:	2314      	movs	r3, #20
   305b2:	18fb      	adds	r3, r7, r3
   305b4:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   305b6:	68fb      	ldr	r3, [r7, #12]
   305b8:	781b      	ldrb	r3, [r3, #0]
   305ba:	b25b      	sxtb	r3, r3
   305bc:	2214      	movs	r2, #20
   305be:	18b9      	adds	r1, r7, r2
   305c0:	2210      	movs	r2, #16
   305c2:	0018      	movs	r0, r3
   305c4:	4b1a      	ldr	r3, [pc, #104]	; (30630 <http_client_send_request+0x304>)
   305c6:	4798      	blx	r3
   305c8:	e004      	b.n	305d4 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   305ca:	68fb      	ldr	r3, [r7, #12]
   305cc:	3301      	adds	r3, #1
   305ce:	0018      	movs	r0, r3
   305d0:	4b18      	ldr	r3, [pc, #96]	; (30634 <http_client_send_request+0x308>)
   305d2:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   305d4:	68fb      	ldr	r3, [r7, #12]
   305d6:	2201      	movs	r2, #1
   305d8:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   305da:	e006      	b.n	305ea <http_client_send_request+0x2be>
			return -ENOSPC;
   305dc:	231c      	movs	r3, #28
   305de:	425b      	negs	r3, r3
   305e0:	e004      	b.n	305ec <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   305e2:	230b      	movs	r3, #11
   305e4:	425b      	negs	r3, r3
   305e6:	e001      	b.n	305ec <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   305e8:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   305ea:	2300      	movs	r3, #0
}
   305ec:	0018      	movs	r0, r3
   305ee:	46bd      	mov	sp, r7
   305f0:	b00e      	add	sp, #56	; 0x38
   305f2:	bdb0      	pop	{r4, r5, r7, pc}
   305f4:	00038a94 	.word	0x00038a94
   305f8:	00033dc5 	.word	0x00033dc5
   305fc:	00038a9c 	.word	0x00038a9c
   30600:	00033db7 	.word	0x00033db7
   30604:	000339b5 	.word	0x000339b5
   30608:	00033d7d 	.word	0x00033d7d
   3060c:	00033d6b 	.word	0x00033d6b
   30610:	000339c9 	.word	0x000339c9
   30614:	000339ff 	.word	0x000339ff
   30618:	0003078d 	.word	0x0003078d
   3061c:	00030639 	.word	0x00030639
   30620:	00024949 	.word	0x00024949
   30624:	2000424c 	.word	0x2000424c
   30628:	00030295 	.word	0x00030295
   3062c:	00025095 	.word	0x00025095
   30630:	00024b5d 	.word	0x00024b5d
   30634:	0002519d 	.word	0x0002519d

00030638 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   30638:	b580      	push	{r7, lr}
   3063a:	b086      	sub	sp, #24
   3063c:	af00      	add	r7, sp, #0
   3063e:	6078      	str	r0, [r7, #4]
   30640:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   30642:	687b      	ldr	r3, [r7, #4]
   30644:	22c0      	movs	r2, #192	; 0xc0
   30646:	589b      	ldr	r3, [r3, r2]
   30648:	2b00      	cmp	r3, #0
   3064a:	d007      	beq.n	3065c <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   3064c:	687b      	ldr	r3, [r7, #4]
   3064e:	22c0      	movs	r2, #192	; 0xc0
   30650:	589b      	ldr	r3, [r3, r2]
   30652:	687a      	ldr	r2, [r7, #4]
   30654:	21c4      	movs	r1, #196	; 0xc4
   30656:	5852      	ldr	r2, [r2, r1]
   30658:	0010      	movs	r0, r2
   3065a:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   3065c:	687b      	ldr	r3, [r7, #4]
   3065e:	33b0      	adds	r3, #176	; 0xb0
   30660:	2218      	movs	r2, #24
   30662:	2100      	movs	r1, #0
   30664:	0018      	movs	r0, r3
   30666:	4b24      	ldr	r3, [pc, #144]	; (306f8 <_http_client_clear_conn+0xc0>)
   30668:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   3066a:	687b      	ldr	r3, [r7, #4]
   3066c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3066e:	2b00      	cmp	r3, #0
   30670:	d005      	beq.n	3067e <_http_client_clear_conn+0x46>
		close(module->sock);
   30672:	687b      	ldr	r3, [r7, #4]
   30674:	781b      	ldrb	r3, [r3, #0]
   30676:	b25b      	sxtb	r3, r3
   30678:	0018      	movs	r0, r3
   3067a:	4b20      	ldr	r3, [pc, #128]	; (306fc <_http_client_clear_conn+0xc4>)
   3067c:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   3067e:	687b      	ldr	r3, [r7, #4]
   30680:	781b      	ldrb	r3, [r3, #0]
   30682:	b25b      	sxtb	r3, r3
   30684:	001a      	movs	r2, r3
   30686:	4b1e      	ldr	r3, [pc, #120]	; (30700 <_http_client_clear_conn+0xc8>)
   30688:	0092      	lsls	r2, r2, #2
   3068a:	2100      	movs	r1, #0
   3068c:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   3068e:	687b      	ldr	r3, [r7, #4]
   30690:	336c      	adds	r3, #108	; 0x6c
   30692:	226c      	movs	r2, #108	; 0x6c
   30694:	2100      	movs	r1, #0
   30696:	0018      	movs	r0, r3
   30698:	4b17      	ldr	r3, [pc, #92]	; (306f8 <_http_client_clear_conn+0xc0>)
   3069a:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   3069c:	687b      	ldr	r3, [r7, #4]
   3069e:	33d8      	adds	r3, #216	; 0xd8
   306a0:	2210      	movs	r2, #16
   306a2:	2100      	movs	r1, #0
   306a4:	0018      	movs	r0, r3
   306a6:	4b14      	ldr	r3, [pc, #80]	; (306f8 <_http_client_clear_conn+0xc0>)
   306a8:	4798      	blx	r3
	module->req.state = STATE_INIT;
   306aa:	687b      	ldr	r3, [r7, #4]
   306ac:	2200      	movs	r2, #0
   306ae:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   306b0:	687b      	ldr	r3, [r7, #4]
   306b2:	22d8      	movs	r2, #216	; 0xd8
   306b4:	2100      	movs	r1, #0
   306b6:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   306b8:	687b      	ldr	r3, [r7, #4]
   306ba:	2241      	movs	r2, #65	; 0x41
   306bc:	5c99      	ldrb	r1, [r3, r2]
   306be:	2001      	movs	r0, #1
   306c0:	4381      	bics	r1, r0
   306c2:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   306c4:	687b      	ldr	r3, [r7, #4]
   306c6:	2241      	movs	r2, #65	; 0x41
   306c8:	5c99      	ldrb	r1, [r3, r2]
   306ca:	2002      	movs	r0, #2
   306cc:	4381      	bics	r1, r0
   306ce:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   306d0:	230c      	movs	r3, #12
   306d2:	18fb      	adds	r3, r7, r3
   306d4:	683a      	ldr	r2, [r7, #0]
   306d6:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   306d8:	687b      	ldr	r3, [r7, #4]
   306da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   306dc:	2b00      	cmp	r3, #0
   306de:	d006      	beq.n	306ee <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   306e0:	687b      	ldr	r3, [r7, #4]
   306e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   306e4:	220c      	movs	r2, #12
   306e6:	18ba      	adds	r2, r7, r2
   306e8:	6878      	ldr	r0, [r7, #4]
   306ea:	2104      	movs	r1, #4
   306ec:	4798      	blx	r3
	}
}
   306ee:	46c0      	nop			; (mov r8, r8)
   306f0:	46bd      	mov	sp, r7
   306f2:	b006      	add	sp, #24
   306f4:	bd80      	pop	{r7, pc}
   306f6:	46c0      	nop			; (mov r8, r8)
   306f8:	000339ff 	.word	0x000339ff
   306fc:	00024f55 	.word	0x00024f55
   30700:	2000424c 	.word	0x2000424c

00030704 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   30704:	b590      	push	{r4, r7, lr}
   30706:	b087      	sub	sp, #28
   30708:	af00      	add	r7, sp, #0
   3070a:	60f8      	str	r0, [r7, #12]
   3070c:	60b9      	str	r1, [r7, #8]
   3070e:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   30710:	68fb      	ldr	r3, [r7, #12]
   30712:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   30714:	697b      	ldr	r3, [r7, #20]
   30716:	2241      	movs	r2, #65	; 0x41
   30718:	5c99      	ldrb	r1, [r3, r2]
   3071a:	2001      	movs	r0, #1
   3071c:	4301      	orrs	r1, r0
   3071e:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   30720:	697b      	ldr	r3, [r7, #20]
   30722:	2000      	movs	r0, #0
   30724:	5618      	ldrsb	r0, [r3, r0]
   30726:	687b      	ldr	r3, [r7, #4]
   30728:	b29a      	uxth	r2, r3
   3072a:	68b9      	ldr	r1, [r7, #8]
   3072c:	2300      	movs	r3, #0
   3072e:	4c14      	ldr	r4, [pc, #80]	; (30780 <_http_client_send_wait+0x7c>)
   30730:	47a0      	blx	r4
   30732:	0003      	movs	r3, r0
   30734:	613b      	str	r3, [r7, #16]
   30736:	693b      	ldr	r3, [r7, #16]
   30738:	2b00      	cmp	r3, #0
   3073a:	da0f      	bge.n	3075c <_http_client_send_wait+0x58>
		module->sending = 0;
   3073c:	697b      	ldr	r3, [r7, #20]
   3073e:	2241      	movs	r2, #65	; 0x41
   30740:	5c99      	ldrb	r1, [r3, r2]
   30742:	2001      	movs	r0, #1
   30744:	4381      	bics	r1, r0
   30746:	5499      	strb	r1, [r3, r2]
		return result;
   30748:	693b      	ldr	r3, [r7, #16]
   3074a:	e014      	b.n	30776 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   3074c:	2000      	movs	r0, #0
   3074e:	4b0d      	ldr	r3, [pc, #52]	; (30784 <_http_client_send_wait+0x80>)
   30750:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   30752:	697b      	ldr	r3, [r7, #20]
   30754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30756:	0018      	movs	r0, r3
   30758:	4b0b      	ldr	r3, [pc, #44]	; (30788 <_http_client_send_wait+0x84>)
   3075a:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   3075c:	697b      	ldr	r3, [r7, #20]
   3075e:	2241      	movs	r2, #65	; 0x41
   30760:	5c9b      	ldrb	r3, [r3, r2]
   30762:	2201      	movs	r2, #1
   30764:	4013      	ands	r3, r2
   30766:	b2db      	uxtb	r3, r3
   30768:	2b00      	cmp	r3, #0
   3076a:	d003      	beq.n	30774 <_http_client_send_wait+0x70>
   3076c:	697b      	ldr	r3, [r7, #20]
   3076e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30770:	2b02      	cmp	r3, #2
   30772:	d8eb      	bhi.n	3074c <_http_client_send_wait+0x48>
	}

	return 0;
   30774:	2300      	movs	r3, #0
}
   30776:	0018      	movs	r0, r3
   30778:	46bd      	mov	sp, r7
   3077a:	b007      	add	sp, #28
   3077c:	bd90      	pop	{r4, r7, pc}
   3077e:	46c0      	nop			; (mov r8, r8)
   30780:	00024c71 	.word	0x00024c71
   30784:	0002131d 	.word	0x0002131d
   30788:	00031a11 	.word	0x00031a11

0003078c <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   3078c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3078e:	46c6      	mov	lr, r8
   30790:	b500      	push	{lr}
   30792:	b0a0      	sub	sp, #128	; 0x80
   30794:	af02      	add	r7, sp, #8
   30796:	61f8      	str	r0, [r7, #28]
   30798:	4668      	mov	r0, sp
   3079a:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   3079c:	2318      	movs	r3, #24
   3079e:	2218      	movs	r2, #24
   307a0:	18ba      	adds	r2, r7, r2
   307a2:	18d0      	adds	r0, r2, r3
   307a4:	4bbd      	ldr	r3, [pc, #756]	; (30a9c <_http_client_request+0x310>)
   307a6:	469c      	mov	ip, r3
   307a8:	4663      	mov	r3, ip
   307aa:	cb16      	ldmia	r3!, {r1, r2, r4}
   307ac:	c016      	stmia	r0!, {r1, r2, r4}
   307ae:	469c      	mov	ip, r3
   307b0:	4663      	mov	r3, ip
   307b2:	681b      	ldr	r3, [r3, #0]
   307b4:	469c      	mov	ip, r3
   307b6:	4663      	mov	r3, ip
   307b8:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   307ba:	69f8      	ldr	r0, [r7, #28]
   307bc:	6e40      	ldr	r0, [r0, #100]	; 0x64
   307be:	4684      	mov	ip, r0
   307c0:	2301      	movs	r3, #1
   307c2:	425b      	negs	r3, r3
   307c4:	4698      	mov	r8, r3
   307c6:	44c4      	add	ip, r8
   307c8:	4663      	mov	r3, ip
   307ca:	66fb      	str	r3, [r7, #108]	; 0x6c
   307cc:	6038      	str	r0, [r7, #0]
   307ce:	2300      	movs	r3, #0
   307d0:	607b      	str	r3, [r7, #4]
   307d2:	6839      	ldr	r1, [r7, #0]
   307d4:	687a      	ldr	r2, [r7, #4]
   307d6:	000b      	movs	r3, r1
   307d8:	0f5b      	lsrs	r3, r3, #29
   307da:	469c      	mov	ip, r3
   307dc:	0013      	movs	r3, r2
   307de:	00db      	lsls	r3, r3, #3
   307e0:	617b      	str	r3, [r7, #20]
   307e2:	4663      	mov	r3, ip
   307e4:	697c      	ldr	r4, [r7, #20]
   307e6:	431c      	orrs	r4, r3
   307e8:	617c      	str	r4, [r7, #20]
   307ea:	000b      	movs	r3, r1
   307ec:	00db      	lsls	r3, r3, #3
   307ee:	613b      	str	r3, [r7, #16]
   307f0:	0005      	movs	r5, r0
   307f2:	2200      	movs	r2, #0
   307f4:	0016      	movs	r6, r2
   307f6:	0f6a      	lsrs	r2, r5, #29
   307f8:	00f3      	lsls	r3, r6, #3
   307fa:	60fb      	str	r3, [r7, #12]
   307fc:	68fb      	ldr	r3, [r7, #12]
   307fe:	4313      	orrs	r3, r2
   30800:	60fb      	str	r3, [r7, #12]
   30802:	00eb      	lsls	r3, r5, #3
   30804:	60bb      	str	r3, [r7, #8]
   30806:	1dc3      	adds	r3, r0, #7
   30808:	08db      	lsrs	r3, r3, #3
   3080a:	00db      	lsls	r3, r3, #3
   3080c:	466a      	mov	r2, sp
   3080e:	1ad3      	subs	r3, r2, r3
   30810:	469d      	mov	sp, r3
   30812:	ab02      	add	r3, sp, #8
   30814:	3300      	adds	r3, #0
   30816:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   30818:	69fb      	ldr	r3, [r7, #28]
   3081a:	2b00      	cmp	r3, #0
   3081c:	d100      	bne.n	30820 <_http_client_request+0x94>
   3081e:	e346      	b.n	30eae <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   30820:	69fb      	ldr	r3, [r7, #28]
   30822:	2241      	movs	r2, #65	; 0x41
   30824:	5c9b      	ldrb	r3, [r3, r2]
   30826:	2201      	movs	r2, #1
   30828:	4013      	ands	r3, r2
   3082a:	b2db      	uxtb	r3, r3
   3082c:	2b00      	cmp	r3, #0
   3082e:	d000      	beq.n	30832 <_http_client_request+0xa6>
   30830:	e33f      	b.n	30eb2 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   30832:	69fb      	ldr	r3, [r7, #28]
   30834:	33b0      	adds	r3, #176	; 0xb0
   30836:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   30838:	69fb      	ldr	r3, [r7, #28]
   3083a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3083c:	2b03      	cmp	r3, #3
   3083e:	d003      	beq.n	30848 <_http_client_request+0xbc>
   30840:	2b04      	cmp	r3, #4
   30842:	d100      	bne.n	30846 <_http_client_request+0xba>
   30844:	e1b3      	b.n	30bae <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   30846:	e32f      	b.n	30ea8 <_http_client_request+0x71c>
		module->req.content_length = 0;
   30848:	69fb      	ldr	r3, [r7, #28]
   3084a:	22cc      	movs	r2, #204	; 0xcc
   3084c:	2100      	movs	r1, #0
   3084e:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   30850:	69fb      	ldr	r3, [r7, #28]
   30852:	22d0      	movs	r2, #208	; 0xd0
   30854:	2100      	movs	r1, #0
   30856:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   30858:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3085a:	69fb      	ldr	r3, [r7, #28]
   3085c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   3085e:	4c90      	ldr	r4, [pc, #576]	; (30aa0 <_http_client_request+0x314>)
   30860:	2334      	movs	r3, #52	; 0x34
   30862:	2018      	movs	r0, #24
   30864:	1838      	adds	r0, r7, r0
   30866:	18c0      	adds	r0, r0, r3
   30868:	69fb      	ldr	r3, [r7, #28]
   3086a:	9300      	str	r3, [sp, #0]
   3086c:	0023      	movs	r3, r4
   3086e:	4c8d      	ldr	r4, [pc, #564]	; (30aa4 <_http_client_request+0x318>)
   30870:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   30872:	69fb      	ldr	r3, [r7, #28]
   30874:	22c8      	movs	r2, #200	; 0xc8
   30876:	5c9b      	ldrb	r3, [r3, r2]
   30878:	2b01      	cmp	r3, #1
   3087a:	d10a      	bne.n	30892 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   3087c:	498a      	ldr	r1, [pc, #552]	; (30aa8 <_http_client_request+0x31c>)
   3087e:	2334      	movs	r3, #52	; 0x34
   30880:	2218      	movs	r2, #24
   30882:	4694      	mov	ip, r2
   30884:	44bc      	add	ip, r7
   30886:	4463      	add	r3, ip
   30888:	2204      	movs	r2, #4
   3088a:	0018      	movs	r0, r3
   3088c:	4b87      	ldr	r3, [pc, #540]	; (30aac <_http_client_request+0x320>)
   3088e:	4798      	blx	r3
   30890:	e04e      	b.n	30930 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   30892:	69fb      	ldr	r3, [r7, #28]
   30894:	22c8      	movs	r2, #200	; 0xc8
   30896:	5c9b      	ldrb	r3, [r3, r2]
   30898:	2b02      	cmp	r3, #2
   3089a:	d10a      	bne.n	308b2 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   3089c:	4984      	ldr	r1, [pc, #528]	; (30ab0 <_http_client_request+0x324>)
   3089e:	2334      	movs	r3, #52	; 0x34
   308a0:	2218      	movs	r2, #24
   308a2:	4694      	mov	ip, r2
   308a4:	44bc      	add	ip, r7
   308a6:	4463      	add	r3, ip
   308a8:	2205      	movs	r2, #5
   308aa:	0018      	movs	r0, r3
   308ac:	4b7f      	ldr	r3, [pc, #508]	; (30aac <_http_client_request+0x320>)
   308ae:	4798      	blx	r3
   308b0:	e03e      	b.n	30930 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   308b2:	69fb      	ldr	r3, [r7, #28]
   308b4:	22c8      	movs	r2, #200	; 0xc8
   308b6:	5c9b      	ldrb	r3, [r3, r2]
   308b8:	2b03      	cmp	r3, #3
   308ba:	d10a      	bne.n	308d2 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   308bc:	497d      	ldr	r1, [pc, #500]	; (30ab4 <_http_client_request+0x328>)
   308be:	2334      	movs	r3, #52	; 0x34
   308c0:	2218      	movs	r2, #24
   308c2:	4694      	mov	ip, r2
   308c4:	44bc      	add	ip, r7
   308c6:	4463      	add	r3, ip
   308c8:	2207      	movs	r2, #7
   308ca:	0018      	movs	r0, r3
   308cc:	4b77      	ldr	r3, [pc, #476]	; (30aac <_http_client_request+0x320>)
   308ce:	4798      	blx	r3
   308d0:	e02e      	b.n	30930 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   308d2:	69fb      	ldr	r3, [r7, #28]
   308d4:	22c8      	movs	r2, #200	; 0xc8
   308d6:	5c9b      	ldrb	r3, [r3, r2]
   308d8:	2b04      	cmp	r3, #4
   308da:	d10a      	bne.n	308f2 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   308dc:	4976      	ldr	r1, [pc, #472]	; (30ab8 <_http_client_request+0x32c>)
   308de:	2334      	movs	r3, #52	; 0x34
   308e0:	2218      	movs	r2, #24
   308e2:	4694      	mov	ip, r2
   308e4:	44bc      	add	ip, r7
   308e6:	4463      	add	r3, ip
   308e8:	2204      	movs	r2, #4
   308ea:	0018      	movs	r0, r3
   308ec:	4b6f      	ldr	r3, [pc, #444]	; (30aac <_http_client_request+0x320>)
   308ee:	4798      	blx	r3
   308f0:	e01e      	b.n	30930 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   308f2:	69fb      	ldr	r3, [r7, #28]
   308f4:	22c8      	movs	r2, #200	; 0xc8
   308f6:	5c9b      	ldrb	r3, [r3, r2]
   308f8:	2b05      	cmp	r3, #5
   308fa:	d10a      	bne.n	30912 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   308fc:	496f      	ldr	r1, [pc, #444]	; (30abc <_http_client_request+0x330>)
   308fe:	2334      	movs	r3, #52	; 0x34
   30900:	2218      	movs	r2, #24
   30902:	4694      	mov	ip, r2
   30904:	44bc      	add	ip, r7
   30906:	4463      	add	r3, ip
   30908:	2208      	movs	r2, #8
   3090a:	0018      	movs	r0, r3
   3090c:	4b67      	ldr	r3, [pc, #412]	; (30aac <_http_client_request+0x320>)
   3090e:	4798      	blx	r3
   30910:	e00e      	b.n	30930 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   30912:	69fb      	ldr	r3, [r7, #28]
   30914:	22c8      	movs	r2, #200	; 0xc8
   30916:	5c9b      	ldrb	r3, [r3, r2]
   30918:	2b06      	cmp	r3, #6
   3091a:	d109      	bne.n	30930 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   3091c:	4968      	ldr	r1, [pc, #416]	; (30ac0 <_http_client_request+0x334>)
   3091e:	2334      	movs	r3, #52	; 0x34
   30920:	2218      	movs	r2, #24
   30922:	4694      	mov	ip, r2
   30924:	44bc      	add	ip, r7
   30926:	4463      	add	r3, ip
   30928:	2205      	movs	r2, #5
   3092a:	0018      	movs	r0, r3
   3092c:	4b5f      	ldr	r3, [pc, #380]	; (30aac <_http_client_request+0x320>)
   3092e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   30930:	69fb      	ldr	r3, [r7, #28]
   30932:	3370      	adds	r3, #112	; 0x70
   30934:	001c      	movs	r4, r3
   30936:	69fb      	ldr	r3, [r7, #28]
   30938:	3370      	adds	r3, #112	; 0x70
   3093a:	0018      	movs	r0, r3
   3093c:	4b61      	ldr	r3, [pc, #388]	; (30ac4 <_http_client_request+0x338>)
   3093e:	4798      	blx	r3
   30940:	0002      	movs	r2, r0
   30942:	2334      	movs	r3, #52	; 0x34
   30944:	2118      	movs	r1, #24
   30946:	468c      	mov	ip, r1
   30948:	44bc      	add	ip, r7
   3094a:	4463      	add	r3, ip
   3094c:	0021      	movs	r1, r4
   3094e:	0018      	movs	r0, r3
   30950:	4b56      	ldr	r3, [pc, #344]	; (30aac <_http_client_request+0x320>)
   30952:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   30954:	495c      	ldr	r1, [pc, #368]	; (30ac8 <_http_client_request+0x33c>)
   30956:	2334      	movs	r3, #52	; 0x34
   30958:	2218      	movs	r2, #24
   3095a:	4694      	mov	ip, r2
   3095c:	44bc      	add	ip, r7
   3095e:	4463      	add	r3, ip
   30960:	220b      	movs	r2, #11
   30962:	0018      	movs	r0, r3
   30964:	4b51      	ldr	r3, [pc, #324]	; (30aac <_http_client_request+0x320>)
   30966:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   30968:	4958      	ldr	r1, [pc, #352]	; (30acc <_http_client_request+0x340>)
   3096a:	2334      	movs	r3, #52	; 0x34
   3096c:	2218      	movs	r2, #24
   3096e:	4694      	mov	ip, r2
   30970:	44bc      	add	ip, r7
   30972:	4463      	add	r3, ip
   30974:	220c      	movs	r2, #12
   30976:	0018      	movs	r0, r3
   30978:	4b4c      	ldr	r3, [pc, #304]	; (30aac <_http_client_request+0x320>)
   3097a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   3097c:	69fb      	ldr	r3, [r7, #28]
   3097e:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   30980:	69fb      	ldr	r3, [r7, #28]
   30982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   30984:	0018      	movs	r0, r3
   30986:	4b4f      	ldr	r3, [pc, #316]	; (30ac4 <_http_client_request+0x338>)
   30988:	4798      	blx	r3
   3098a:	0002      	movs	r2, r0
   3098c:	2334      	movs	r3, #52	; 0x34
   3098e:	2118      	movs	r1, #24
   30990:	468c      	mov	ip, r1
   30992:	44bc      	add	ip, r7
   30994:	4463      	add	r3, ip
   30996:	0021      	movs	r1, r4
   30998:	0018      	movs	r0, r3
   3099a:	4b44      	ldr	r3, [pc, #272]	; (30aac <_http_client_request+0x320>)
   3099c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3099e:	494c      	ldr	r1, [pc, #304]	; (30ad0 <_http_client_request+0x344>)
   309a0:	2334      	movs	r3, #52	; 0x34
   309a2:	2218      	movs	r2, #24
   309a4:	4694      	mov	ip, r2
   309a6:	44bc      	add	ip, r7
   309a8:	4463      	add	r3, ip
   309aa:	2202      	movs	r2, #2
   309ac:	0018      	movs	r0, r3
   309ae:	4b3f      	ldr	r3, [pc, #252]	; (30aac <_http_client_request+0x320>)
   309b0:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   309b2:	4948      	ldr	r1, [pc, #288]	; (30ad4 <_http_client_request+0x348>)
   309b4:	2334      	movs	r3, #52	; 0x34
   309b6:	2218      	movs	r2, #24
   309b8:	4694      	mov	ip, r2
   309ba:	44bc      	add	ip, r7
   309bc:	4463      	add	r3, ip
   309be:	2206      	movs	r2, #6
   309c0:	0018      	movs	r0, r3
   309c2:	4b3a      	ldr	r3, [pc, #232]	; (30aac <_http_client_request+0x320>)
   309c4:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   309c6:	69fb      	ldr	r3, [r7, #28]
   309c8:	1c5c      	adds	r4, r3, #1
   309ca:	69fb      	ldr	r3, [r7, #28]
   309cc:	3301      	adds	r3, #1
   309ce:	0018      	movs	r0, r3
   309d0:	4b3c      	ldr	r3, [pc, #240]	; (30ac4 <_http_client_request+0x338>)
   309d2:	4798      	blx	r3
   309d4:	0002      	movs	r2, r0
   309d6:	2334      	movs	r3, #52	; 0x34
   309d8:	2118      	movs	r1, #24
   309da:	468c      	mov	ip, r1
   309dc:	44bc      	add	ip, r7
   309de:	4463      	add	r3, ip
   309e0:	0021      	movs	r1, r4
   309e2:	0018      	movs	r0, r3
   309e4:	4b31      	ldr	r3, [pc, #196]	; (30aac <_http_client_request+0x320>)
   309e6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   309e8:	4939      	ldr	r1, [pc, #228]	; (30ad0 <_http_client_request+0x344>)
   309ea:	2334      	movs	r3, #52	; 0x34
   309ec:	2218      	movs	r2, #24
   309ee:	4694      	mov	ip, r2
   309f0:	44bc      	add	ip, r7
   309f2:	4463      	add	r3, ip
   309f4:	2202      	movs	r2, #2
   309f6:	0018      	movs	r0, r3
   309f8:	4b2c      	ldr	r3, [pc, #176]	; (30aac <_http_client_request+0x320>)
   309fa:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   309fc:	4936      	ldr	r1, [pc, #216]	; (30ad8 <_http_client_request+0x34c>)
   309fe:	2334      	movs	r3, #52	; 0x34
   30a00:	2218      	movs	r2, #24
   30a02:	4694      	mov	ip, r2
   30a04:	44bc      	add	ip, r7
   30a06:	4463      	add	r3, ip
   30a08:	2218      	movs	r2, #24
   30a0a:	0018      	movs	r0, r3
   30a0c:	4b27      	ldr	r3, [pc, #156]	; (30aac <_http_client_request+0x320>)
   30a0e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   30a10:	4932      	ldr	r1, [pc, #200]	; (30adc <_http_client_request+0x350>)
   30a12:	2334      	movs	r3, #52	; 0x34
   30a14:	2218      	movs	r2, #24
   30a16:	4694      	mov	ip, r2
   30a18:	44bc      	add	ip, r7
   30a1a:	4463      	add	r3, ip
   30a1c:	2213      	movs	r2, #19
   30a1e:	0018      	movs	r0, r3
   30a20:	4b22      	ldr	r3, [pc, #136]	; (30aac <_http_client_request+0x320>)
   30a22:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   30a24:	492e      	ldr	r1, [pc, #184]	; (30ae0 <_http_client_request+0x354>)
   30a26:	2334      	movs	r3, #52	; 0x34
   30a28:	2218      	movs	r2, #24
   30a2a:	4694      	mov	ip, r2
   30a2c:	44bc      	add	ip, r7
   30a2e:	4463      	add	r3, ip
   30a30:	2217      	movs	r2, #23
   30a32:	0018      	movs	r0, r3
   30a34:	4b1d      	ldr	r3, [pc, #116]	; (30aac <_http_client_request+0x320>)
   30a36:	4798      	blx	r3
		if (entity->read != NULL) {
   30a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30a3a:	68db      	ldr	r3, [r3, #12]
   30a3c:	2b00      	cmp	r3, #0
   30a3e:	d100      	bne.n	30a42 <_http_client_request+0x2b6>
   30a40:	e088      	b.n	30b54 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   30a42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30a44:	781b      	ldrb	r3, [r3, #0]
   30a46:	2b00      	cmp	r3, #0
   30a48:	d00f      	beq.n	30a6a <_http_client_request+0x2de>
				module->req.content_length = -1;
   30a4a:	69fb      	ldr	r3, [r7, #28]
   30a4c:	21cc      	movs	r1, #204	; 0xcc
   30a4e:	2201      	movs	r2, #1
   30a50:	4252      	negs	r2, r2
   30a52:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   30a54:	4923      	ldr	r1, [pc, #140]	; (30ae4 <_http_client_request+0x358>)
   30a56:	2334      	movs	r3, #52	; 0x34
   30a58:	2218      	movs	r2, #24
   30a5a:	4694      	mov	ip, r2
   30a5c:	44bc      	add	ip, r7
   30a5e:	4463      	add	r3, ip
   30a60:	221c      	movs	r2, #28
   30a62:	0018      	movs	r0, r3
   30a64:	4b11      	ldr	r3, [pc, #68]	; (30aac <_http_client_request+0x320>)
   30a66:	4798      	blx	r3
   30a68:	e074      	b.n	30b54 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   30a6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30a6c:	689b      	ldr	r3, [r3, #8]
   30a6e:	2b00      	cmp	r3, #0
   30a70:	d070      	beq.n	30b54 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   30a72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30a74:	689a      	ldr	r2, [r3, #8]
   30a76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30a78:	695b      	ldr	r3, [r3, #20]
   30a7a:	0018      	movs	r0, r3
   30a7c:	4790      	blx	r2
   30a7e:	0001      	movs	r1, r0
   30a80:	69fb      	ldr	r3, [r7, #28]
   30a82:	22cc      	movs	r2, #204	; 0xcc
   30a84:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   30a86:	69fb      	ldr	r3, [r7, #28]
   30a88:	22cc      	movs	r2, #204	; 0xcc
   30a8a:	589b      	ldr	r3, [r3, r2]
   30a8c:	2b00      	cmp	r3, #0
   30a8e:	da2b      	bge.n	30ae8 <_http_client_request+0x35c>
					module->req.content_length = 0;
   30a90:	69fb      	ldr	r3, [r7, #28]
   30a92:	22cc      	movs	r2, #204	; 0xcc
   30a94:	2100      	movs	r1, #0
   30a96:	5099      	str	r1, [r3, r2]
   30a98:	e05c      	b.n	30b54 <_http_client_request+0x3c8>
   30a9a:	46c0      	nop			; (mov r8, r8)
   30a9c:	00038b84 	.word	0x00038b84
   30aa0:	00030705 	.word	0x00030705
   30aa4:	0003166d 	.word	0x0003166d
   30aa8:	00038aa8 	.word	0x00038aa8
   30aac:	000316ed 	.word	0x000316ed
   30ab0:	00038ab0 	.word	0x00038ab0
   30ab4:	00038ab8 	.word	0x00038ab8
   30ab8:	00038ac0 	.word	0x00038ac0
   30abc:	00038ac8 	.word	0x00038ac8
   30ac0:	00038ad4 	.word	0x00038ad4
   30ac4:	00033db7 	.word	0x00033db7
   30ac8:	00038adc 	.word	0x00038adc
   30acc:	00038ae8 	.word	0x00038ae8
   30ad0:	00038af8 	.word	0x00038af8
   30ad4:	00038afc 	.word	0x00038afc
   30ad8:	00038b04 	.word	0x00038b04
   30adc:	00038b20 	.word	0x00038b20
   30ae0:	00038b34 	.word	0x00038b34
   30ae4:	00038b4c 	.word	0x00038b4c
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   30ae8:	69fb      	ldr	r3, [r7, #28]
   30aea:	22cc      	movs	r2, #204	; 0xcc
   30aec:	589b      	ldr	r3, [r3, r2]
   30aee:	001a      	movs	r2, r3
   30af0:	49e0      	ldr	r1, [pc, #896]	; (30e74 <_http_client_request+0x6e8>)
   30af2:	2328      	movs	r3, #40	; 0x28
   30af4:	2018      	movs	r0, #24
   30af6:	4684      	mov	ip, r0
   30af8:	44bc      	add	ip, r7
   30afa:	4463      	add	r3, ip
   30afc:	0018      	movs	r0, r3
   30afe:	4bde      	ldr	r3, [pc, #888]	; (30e78 <_http_client_request+0x6ec>)
   30b00:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   30b02:	49de      	ldr	r1, [pc, #888]	; (30e7c <_http_client_request+0x6f0>)
   30b04:	2334      	movs	r3, #52	; 0x34
   30b06:	2218      	movs	r2, #24
   30b08:	4694      	mov	ip, r2
   30b0a:	44bc      	add	ip, r7
   30b0c:	4463      	add	r3, ip
   30b0e:	2210      	movs	r2, #16
   30b10:	0018      	movs	r0, r3
   30b12:	4bdb      	ldr	r3, [pc, #876]	; (30e80 <_http_client_request+0x6f4>)
   30b14:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   30b16:	2328      	movs	r3, #40	; 0x28
   30b18:	2218      	movs	r2, #24
   30b1a:	4694      	mov	ip, r2
   30b1c:	44bc      	add	ip, r7
   30b1e:	4463      	add	r3, ip
   30b20:	0018      	movs	r0, r3
   30b22:	4bd8      	ldr	r3, [pc, #864]	; (30e84 <_http_client_request+0x6f8>)
   30b24:	4798      	blx	r3
   30b26:	0002      	movs	r2, r0
   30b28:	2328      	movs	r3, #40	; 0x28
   30b2a:	2118      	movs	r1, #24
   30b2c:	1879      	adds	r1, r7, r1
   30b2e:	18c9      	adds	r1, r1, r3
   30b30:	2334      	movs	r3, #52	; 0x34
   30b32:	2018      	movs	r0, #24
   30b34:	4684      	mov	ip, r0
   30b36:	44bc      	add	ip, r7
   30b38:	4463      	add	r3, ip
   30b3a:	0018      	movs	r0, r3
   30b3c:	4bd0      	ldr	r3, [pc, #832]	; (30e80 <_http_client_request+0x6f4>)
   30b3e:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30b40:	49d1      	ldr	r1, [pc, #836]	; (30e88 <_http_client_request+0x6fc>)
   30b42:	2334      	movs	r3, #52	; 0x34
   30b44:	2218      	movs	r2, #24
   30b46:	4694      	mov	ip, r2
   30b48:	44bc      	add	ip, r7
   30b4a:	4463      	add	r3, ip
   30b4c:	2202      	movs	r2, #2
   30b4e:	0018      	movs	r0, r3
   30b50:	4bcb      	ldr	r3, [pc, #812]	; (30e80 <_http_client_request+0x6f4>)
   30b52:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   30b54:	69fb      	ldr	r3, [r7, #28]
   30b56:	22d4      	movs	r2, #212	; 0xd4
   30b58:	589b      	ldr	r3, [r3, r2]
   30b5a:	2b00      	cmp	r3, #0
   30b5c:	d012      	beq.n	30b84 <_http_client_request+0x3f8>
				module->req.ext_header,
   30b5e:	69fb      	ldr	r3, [r7, #28]
   30b60:	22d4      	movs	r2, #212	; 0xd4
   30b62:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   30b64:	69fb      	ldr	r3, [r7, #28]
   30b66:	22d4      	movs	r2, #212	; 0xd4
   30b68:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   30b6a:	0018      	movs	r0, r3
   30b6c:	4bc5      	ldr	r3, [pc, #788]	; (30e84 <_http_client_request+0x6f8>)
   30b6e:	4798      	blx	r3
   30b70:	0002      	movs	r2, r0
   30b72:	2334      	movs	r3, #52	; 0x34
   30b74:	2118      	movs	r1, #24
   30b76:	468c      	mov	ip, r1
   30b78:	44bc      	add	ip, r7
   30b7a:	4463      	add	r3, ip
   30b7c:	0021      	movs	r1, r4
   30b7e:	0018      	movs	r0, r3
   30b80:	4bbf      	ldr	r3, [pc, #764]	; (30e80 <_http_client_request+0x6f4>)
   30b82:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30b84:	49c0      	ldr	r1, [pc, #768]	; (30e88 <_http_client_request+0x6fc>)
   30b86:	2334      	movs	r3, #52	; 0x34
   30b88:	2218      	movs	r2, #24
   30b8a:	4694      	mov	ip, r2
   30b8c:	44bc      	add	ip, r7
   30b8e:	4463      	add	r3, ip
   30b90:	2202      	movs	r2, #2
   30b92:	0018      	movs	r0, r3
   30b94:	4bba      	ldr	r3, [pc, #744]	; (30e80 <_http_client_request+0x6f4>)
   30b96:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   30b98:	2334      	movs	r3, #52	; 0x34
   30b9a:	2218      	movs	r2, #24
   30b9c:	4694      	mov	ip, r2
   30b9e:	44bc      	add	ip, r7
   30ba0:	4463      	add	r3, ip
   30ba2:	0018      	movs	r0, r3
   30ba4:	4bb9      	ldr	r3, [pc, #740]	; (30e8c <_http_client_request+0x700>)
   30ba6:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   30ba8:	69fb      	ldr	r3, [r7, #28]
   30baa:	2204      	movs	r2, #4
   30bac:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   30bae:	69fb      	ldr	r3, [r7, #28]
   30bb0:	22cc      	movs	r2, #204	; 0xcc
   30bb2:	589b      	ldr	r3, [r3, r2]
   30bb4:	2b00      	cmp	r3, #0
   30bb6:	db00      	blt.n	30bba <_http_client_request+0x42e>
   30bb8:	e0c6      	b.n	30d48 <_http_client_request+0x5bc>
   30bba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30bbc:	68db      	ldr	r3, [r3, #12]
   30bbe:	2b00      	cmp	r3, #0
   30bc0:	d100      	bne.n	30bc4 <_http_client_request+0x438>
   30bc2:	e0c1      	b.n	30d48 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   30bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30bc6:	68dc      	ldr	r4, [r3, #12]
   30bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30bca:	6958      	ldr	r0, [r3, #20]
   30bcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30bce:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   30bd0:	69fb      	ldr	r3, [r7, #28]
   30bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   30bd4:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   30bd6:	69fb      	ldr	r3, [r7, #28]
   30bd8:	22d0      	movs	r2, #208	; 0xd0
   30bda:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   30bdc:	002a      	movs	r2, r5
   30bde:	47a0      	blx	r4
   30be0:	0003      	movs	r3, r0
   30be2:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   30be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30be6:	2b00      	cmp	r3, #0
   30be8:	da01      	bge.n	30bee <_http_client_request+0x462>
				size = 0;
   30bea:	2300      	movs	r3, #0
   30bec:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   30bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30bf0:	220a      	movs	r2, #10
   30bf2:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   30bf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30bf6:	220d      	movs	r2, #13
   30bf8:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   30bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30bfc:	3305      	adds	r3, #5
   30bfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
   30c00:	210d      	movs	r1, #13
   30c02:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   30c04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c06:	3306      	adds	r3, #6
   30c08:	6eba      	ldr	r2, [r7, #104]	; 0x68
   30c0a:	210a      	movs	r1, #10
   30c0c:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   30c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c10:	2b00      	cmp	r3, #0
   30c12:	db14      	blt.n	30c3e <_http_client_request+0x4b2>
				ptr = buffer + 2;
   30c14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30c16:	3302      	adds	r3, #2
   30c18:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   30c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c1c:	4a9c      	ldr	r2, [pc, #624]	; (30e90 <_http_client_request+0x704>)
   30c1e:	4013      	ands	r3, r2
   30c20:	d504      	bpl.n	30c2c <_http_client_request+0x4a0>
   30c22:	3b01      	subs	r3, #1
   30c24:	2210      	movs	r2, #16
   30c26:	4252      	negs	r2, r2
   30c28:	4313      	orrs	r3, r2
   30c2a:	3301      	adds	r3, #1
   30c2c:	001a      	movs	r2, r3
   30c2e:	2318      	movs	r3, #24
   30c30:	2118      	movs	r1, #24
   30c32:	468c      	mov	ip, r1
   30c34:	44bc      	add	ip, r7
   30c36:	4463      	add	r3, ip
   30c38:	5c9a      	ldrb	r2, [r3, r2]
   30c3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30c3c:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   30c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c40:	2b0f      	cmp	r3, #15
   30c42:	dd19      	ble.n	30c78 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   30c44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30c46:	3301      	adds	r3, #1
   30c48:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   30c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c4c:	2b00      	cmp	r3, #0
   30c4e:	da00      	bge.n	30c52 <_http_client_request+0x4c6>
   30c50:	330f      	adds	r3, #15
   30c52:	111b      	asrs	r3, r3, #4
   30c54:	001a      	movs	r2, r3
   30c56:	4b8e      	ldr	r3, [pc, #568]	; (30e90 <_http_client_request+0x704>)
   30c58:	4013      	ands	r3, r2
   30c5a:	d504      	bpl.n	30c66 <_http_client_request+0x4da>
   30c5c:	3b01      	subs	r3, #1
   30c5e:	2210      	movs	r2, #16
   30c60:	4252      	negs	r2, r2
   30c62:	4313      	orrs	r3, r2
   30c64:	3301      	adds	r3, #1
   30c66:	001a      	movs	r2, r3
   30c68:	2318      	movs	r3, #24
   30c6a:	2118      	movs	r1, #24
   30c6c:	468c      	mov	ip, r1
   30c6e:	44bc      	add	ip, r7
   30c70:	4463      	add	r3, ip
   30c72:	5c9a      	ldrb	r2, [r3, r2]
   30c74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30c76:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   30c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c7a:	2bff      	cmp	r3, #255	; 0xff
   30c7c:	dd18      	ble.n	30cb0 <_http_client_request+0x524>
				ptr = buffer;
   30c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30c80:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   30c82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30c84:	2b00      	cmp	r3, #0
   30c86:	da00      	bge.n	30c8a <_http_client_request+0x4fe>
   30c88:	33ff      	adds	r3, #255	; 0xff
   30c8a:	121b      	asrs	r3, r3, #8
   30c8c:	001a      	movs	r2, r3
   30c8e:	4b80      	ldr	r3, [pc, #512]	; (30e90 <_http_client_request+0x704>)
   30c90:	4013      	ands	r3, r2
   30c92:	d504      	bpl.n	30c9e <_http_client_request+0x512>
   30c94:	3b01      	subs	r3, #1
   30c96:	2210      	movs	r2, #16
   30c98:	4252      	negs	r2, r2
   30c9a:	4313      	orrs	r3, r2
   30c9c:	3301      	adds	r3, #1
   30c9e:	001a      	movs	r2, r3
   30ca0:	2318      	movs	r3, #24
   30ca2:	2118      	movs	r1, #24
   30ca4:	468c      	mov	ip, r1
   30ca6:	44bc      	add	ip, r7
   30ca8:	4463      	add	r3, ip
   30caa:	5c9a      	ldrb	r2, [r3, r2]
   30cac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30cae:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   30cb0:	69fb      	ldr	r3, [r7, #28]
   30cb2:	2000      	movs	r0, #0
   30cb4:	5618      	ldrsb	r0, [r3, r0]
   30cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30cb8:	3303      	adds	r3, #3
   30cba:	001a      	movs	r2, r3
   30cbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30cbe:	1ad3      	subs	r3, r2, r3
   30cc0:	b29a      	uxth	r2, r3
   30cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30cc4:	b29b      	uxth	r3, r3
   30cc6:	18d3      	adds	r3, r2, r3
   30cc8:	b29b      	uxth	r3, r3
   30cca:	3304      	adds	r3, #4
   30ccc:	b29a      	uxth	r2, r3
   30cce:	6f39      	ldr	r1, [r7, #112]	; 0x70
   30cd0:	2300      	movs	r3, #0
   30cd2:	4c70      	ldr	r4, [pc, #448]	; (30e94 <_http_client_request+0x708>)
   30cd4:	47a0      	blx	r4
   30cd6:	0003      	movs	r3, r0
   30cd8:	663b      	str	r3, [r7, #96]	; 0x60
   30cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   30cdc:	2b00      	cmp	r3, #0
   30cde:	da07      	bge.n	30cf0 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   30ce0:	2305      	movs	r3, #5
   30ce2:	425a      	negs	r2, r3
   30ce4:	69fb      	ldr	r3, [r7, #28]
   30ce6:	0011      	movs	r1, r2
   30ce8:	0018      	movs	r0, r3
   30cea:	4b6b      	ldr	r3, [pc, #428]	; (30e98 <_http_client_request+0x70c>)
   30cec:	4798      	blx	r3
				return;
   30cee:	e0e1      	b.n	30eb4 <_http_client_request+0x728>
			module->req.sent_length += size;
   30cf0:	69fb      	ldr	r3, [r7, #28]
   30cf2:	22d0      	movs	r2, #208	; 0xd0
   30cf4:	589a      	ldr	r2, [r3, r2]
   30cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30cf8:	18d2      	adds	r2, r2, r3
   30cfa:	69fb      	ldr	r3, [r7, #28]
   30cfc:	21d0      	movs	r1, #208	; 0xd0
   30cfe:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   30d00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30d02:	2b00      	cmp	r3, #0
   30d04:	d000      	beq.n	30d08 <_http_client_request+0x57c>
   30d06:	e0c9      	b.n	30e9c <_http_client_request+0x710>
				if (module->req.entity.close) {
   30d08:	69fb      	ldr	r3, [r7, #28]
   30d0a:	22c0      	movs	r2, #192	; 0xc0
   30d0c:	589b      	ldr	r3, [r3, r2]
   30d0e:	2b00      	cmp	r3, #0
   30d10:	d007      	beq.n	30d22 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   30d12:	69fb      	ldr	r3, [r7, #28]
   30d14:	22c0      	movs	r2, #192	; 0xc0
   30d16:	589b      	ldr	r3, [r3, r2]
   30d18:	69fa      	ldr	r2, [r7, #28]
   30d1a:	21c4      	movs	r1, #196	; 0xc4
   30d1c:	5852      	ldr	r2, [r2, r1]
   30d1e:	0010      	movs	r0, r2
   30d20:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   30d22:	69fb      	ldr	r3, [r7, #28]
   30d24:	2202      	movs	r2, #2
   30d26:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   30d28:	69fb      	ldr	r3, [r7, #28]
   30d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30d2c:	2b00      	cmp	r3, #0
   30d2e:	d100      	bne.n	30d32 <_http_client_request+0x5a6>
   30d30:	e0b5      	b.n	30e9e <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30d32:	69fb      	ldr	r3, [r7, #28]
   30d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30d36:	220c      	movs	r2, #12
   30d38:	2118      	movs	r1, #24
   30d3a:	468c      	mov	ip, r1
   30d3c:	44bc      	add	ip, r7
   30d3e:	4462      	add	r2, ip
   30d40:	69f8      	ldr	r0, [r7, #28]
   30d42:	2101      	movs	r1, #1
   30d44:	4798      	blx	r3
				break;
   30d46:	e0aa      	b.n	30e9e <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   30d48:	69fb      	ldr	r3, [r7, #28]
   30d4a:	22cc      	movs	r2, #204	; 0xcc
   30d4c:	589b      	ldr	r3, [r3, r2]
   30d4e:	2b00      	cmp	r3, #0
   30d50:	dc00      	bgt.n	30d54 <_http_client_request+0x5c8>
   30d52:	e07c      	b.n	30e4e <_http_client_request+0x6c2>
   30d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30d56:	68db      	ldr	r3, [r3, #12]
   30d58:	2b00      	cmp	r3, #0
   30d5a:	d100      	bne.n	30d5e <_http_client_request+0x5d2>
   30d5c:	e077      	b.n	30e4e <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   30d5e:	69fb      	ldr	r3, [r7, #28]
   30d60:	22d0      	movs	r2, #208	; 0xd0
   30d62:	589a      	ldr	r2, [r3, r2]
   30d64:	69fb      	ldr	r3, [r7, #28]
   30d66:	21cc      	movs	r1, #204	; 0xcc
   30d68:	585b      	ldr	r3, [r3, r1]
   30d6a:	429a      	cmp	r2, r3
   30d6c:	db1f      	blt.n	30dae <_http_client_request+0x622>
				if (module->req.entity.close) {
   30d6e:	69fb      	ldr	r3, [r7, #28]
   30d70:	22c0      	movs	r2, #192	; 0xc0
   30d72:	589b      	ldr	r3, [r3, r2]
   30d74:	2b00      	cmp	r3, #0
   30d76:	d007      	beq.n	30d88 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   30d78:	69fb      	ldr	r3, [r7, #28]
   30d7a:	22c0      	movs	r2, #192	; 0xc0
   30d7c:	589b      	ldr	r3, [r3, r2]
   30d7e:	69fa      	ldr	r2, [r7, #28]
   30d80:	21c4      	movs	r1, #196	; 0xc4
   30d82:	5852      	ldr	r2, [r2, r1]
   30d84:	0010      	movs	r0, r2
   30d86:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   30d88:	69fb      	ldr	r3, [r7, #28]
   30d8a:	2202      	movs	r2, #2
   30d8c:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   30d8e:	69fb      	ldr	r3, [r7, #28]
   30d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30d92:	2b00      	cmp	r3, #0
   30d94:	d100      	bne.n	30d98 <_http_client_request+0x60c>
   30d96:	e084      	b.n	30ea2 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30d98:	69fb      	ldr	r3, [r7, #28]
   30d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30d9c:	220c      	movs	r2, #12
   30d9e:	2118      	movs	r1, #24
   30da0:	468c      	mov	ip, r1
   30da2:	44bc      	add	ip, r7
   30da4:	4462      	add	r2, ip
   30da6:	69f8      	ldr	r0, [r7, #28]
   30da8:	2101      	movs	r1, #1
   30daa:	4798      	blx	r3
				break;
   30dac:	e079      	b.n	30ea2 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   30dae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30db0:	68dc      	ldr	r4, [r3, #12]
   30db2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30db4:	6958      	ldr	r0, [r3, #20]
   30db6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   30db8:	69fb      	ldr	r3, [r7, #28]
   30dba:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   30dbc:	69fb      	ldr	r3, [r7, #28]
   30dbe:	22d0      	movs	r2, #208	; 0xd0
   30dc0:	589b      	ldr	r3, [r3, r2]
   30dc2:	002a      	movs	r2, r5
   30dc4:	47a0      	blx	r4
   30dc6:	0003      	movs	r3, r0
   30dc8:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   30dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30dcc:	2b00      	cmp	r3, #0
   30dce:	da0d      	bge.n	30dec <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   30dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30dd2:	2b00      	cmp	r3, #0
   30dd4:	d102      	bne.n	30ddc <_http_client_request+0x650>
   30dd6:	234d      	movs	r3, #77	; 0x4d
   30dd8:	425b      	negs	r3, r3
   30dda:	e001      	b.n	30de0 <_http_client_request+0x654>
   30ddc:	2305      	movs	r3, #5
   30dde:	425b      	negs	r3, r3
   30de0:	69fa      	ldr	r2, [r7, #28]
   30de2:	0019      	movs	r1, r3
   30de4:	0010      	movs	r0, r2
   30de6:	4b2c      	ldr	r3, [pc, #176]	; (30e98 <_http_client_request+0x70c>)
   30de8:	4798      	blx	r3
			if (size < 0) {
   30dea:	e057      	b.n	30e9c <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   30dec:	69fb      	ldr	r3, [r7, #28]
   30dee:	22cc      	movs	r2, #204	; 0xcc
   30df0:	589a      	ldr	r2, [r3, r2]
   30df2:	69fb      	ldr	r3, [r7, #28]
   30df4:	21d0      	movs	r1, #208	; 0xd0
   30df6:	585b      	ldr	r3, [r3, r1]
   30df8:	1ad2      	subs	r2, r2, r3
   30dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30dfc:	429a      	cmp	r2, r3
   30dfe:	da07      	bge.n	30e10 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   30e00:	69fb      	ldr	r3, [r7, #28]
   30e02:	22cc      	movs	r2, #204	; 0xcc
   30e04:	589a      	ldr	r2, [r3, r2]
   30e06:	69fb      	ldr	r3, [r7, #28]
   30e08:	21d0      	movs	r1, #208	; 0xd0
   30e0a:	585b      	ldr	r3, [r3, r1]
   30e0c:	1ad3      	subs	r3, r2, r3
   30e0e:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   30e10:	69fb      	ldr	r3, [r7, #28]
   30e12:	2000      	movs	r0, #0
   30e14:	5618      	ldrsb	r0, [r3, r0]
   30e16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   30e18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30e1a:	b29a      	uxth	r2, r3
   30e1c:	2300      	movs	r3, #0
   30e1e:	4c1d      	ldr	r4, [pc, #116]	; (30e94 <_http_client_request+0x708>)
   30e20:	47a0      	blx	r4
   30e22:	0003      	movs	r3, r0
   30e24:	663b      	str	r3, [r7, #96]	; 0x60
   30e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   30e28:	2b00      	cmp	r3, #0
   30e2a:	da07      	bge.n	30e3c <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   30e2c:	2305      	movs	r3, #5
   30e2e:	425a      	negs	r2, r3
   30e30:	69fb      	ldr	r3, [r7, #28]
   30e32:	0011      	movs	r1, r2
   30e34:	0018      	movs	r0, r3
   30e36:	4b18      	ldr	r3, [pc, #96]	; (30e98 <_http_client_request+0x70c>)
   30e38:	4798      	blx	r3
					return;
   30e3a:	e03b      	b.n	30eb4 <_http_client_request+0x728>
				module->req.sent_length += size;
   30e3c:	69fb      	ldr	r3, [r7, #28]
   30e3e:	22d0      	movs	r2, #208	; 0xd0
   30e40:	589a      	ldr	r2, [r3, r2]
   30e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30e44:	18d2      	adds	r2, r2, r3
   30e46:	69fb      	ldr	r3, [r7, #28]
   30e48:	21d0      	movs	r1, #208	; 0xd0
   30e4a:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   30e4c:	e026      	b.n	30e9c <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   30e4e:	69fb      	ldr	r3, [r7, #28]
   30e50:	2202      	movs	r2, #2
   30e52:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   30e54:	69fb      	ldr	r3, [r7, #28]
   30e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30e58:	2b00      	cmp	r3, #0
   30e5a:	d024      	beq.n	30ea6 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30e5c:	69fb      	ldr	r3, [r7, #28]
   30e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30e60:	220c      	movs	r2, #12
   30e62:	2118      	movs	r1, #24
   30e64:	468c      	mov	ip, r1
   30e66:	44bc      	add	ip, r7
   30e68:	4462      	add	r2, ip
   30e6a:	69f8      	ldr	r0, [r7, #28]
   30e6c:	2101      	movs	r1, #1
   30e6e:	4798      	blx	r3
			break;
   30e70:	e019      	b.n	30ea6 <_http_client_request+0x71a>
   30e72:	46c0      	nop			; (mov r8, r8)
   30e74:	00038b6c 	.word	0x00038b6c
   30e78:	00033cbd 	.word	0x00033cbd
   30e7c:	00038b70 	.word	0x00038b70
   30e80:	000316ed 	.word	0x000316ed
   30e84:	00033db7 	.word	0x00033db7
   30e88:	00038af8 	.word	0x00038af8
   30e8c:	00031729 	.word	0x00031729
   30e90:	8000000f 	.word	0x8000000f
   30e94:	00024c71 	.word	0x00024c71
   30e98:	00030639 	.word	0x00030639
		break;
   30e9c:	e004      	b.n	30ea8 <_http_client_request+0x71c>
				break;
   30e9e:	46c0      	nop			; (mov r8, r8)
   30ea0:	e002      	b.n	30ea8 <_http_client_request+0x71c>
				break;
   30ea2:	46c0      	nop			; (mov r8, r8)
   30ea4:	e000      	b.n	30ea8 <_http_client_request+0x71c>
			break;
   30ea6:	46c0      	nop			; (mov r8, r8)
   30ea8:	69bb      	ldr	r3, [r7, #24]
   30eaa:	469d      	mov	sp, r3
   30eac:	e004      	b.n	30eb8 <_http_client_request+0x72c>
		return;
   30eae:	46c0      	nop			; (mov r8, r8)
   30eb0:	e000      	b.n	30eb4 <_http_client_request+0x728>
		return;
   30eb2:	46c0      	nop			; (mov r8, r8)
   30eb4:	69bb      	ldr	r3, [r7, #24]
   30eb6:	469d      	mov	sp, r3
	}
}
   30eb8:	46bd      	mov	sp, r7
   30eba:	b01e      	add	sp, #120	; 0x78
   30ebc:	bc04      	pop	{r2}
   30ebe:	4690      	mov	r8, r2
   30ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30ec2:	46c0      	nop			; (mov r8, r8)

00030ec4 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   30ec4:	b590      	push	{r4, r7, lr}
   30ec6:	b083      	sub	sp, #12
   30ec8:	af00      	add	r7, sp, #0
   30eca:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   30ecc:	687b      	ldr	r3, [r7, #4]
   30ece:	2b00      	cmp	r3, #0
   30ed0:	d021      	beq.n	30f16 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   30ed2:	687b      	ldr	r3, [r7, #4]
   30ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30ed6:	687b      	ldr	r3, [r7, #4]
   30ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   30eda:	429a      	cmp	r2, r3
   30edc:	d307      	bcc.n	30eee <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   30ede:	238b      	movs	r3, #139	; 0x8b
   30ee0:	425a      	negs	r2, r3
   30ee2:	687b      	ldr	r3, [r7, #4]
   30ee4:	0011      	movs	r1, r2
   30ee6:	0018      	movs	r0, r3
   30ee8:	4b0d      	ldr	r3, [pc, #52]	; (30f20 <_http_client_recv_packet+0x5c>)
   30eea:	4798      	blx	r3
		return;
   30eec:	e014      	b.n	30f18 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   30eee:	687b      	ldr	r3, [r7, #4]
   30ef0:	2000      	movs	r0, #0
   30ef2:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   30ef4:	687b      	ldr	r3, [r7, #4]
   30ef6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   30ef8:	687b      	ldr	r3, [r7, #4]
   30efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30efc:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   30efe:	687b      	ldr	r3, [r7, #4]
   30f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   30f02:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   30f04:	687b      	ldr	r3, [r7, #4]
   30f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   30f08:	b29b      	uxth	r3, r3
   30f0a:	1ad3      	subs	r3, r2, r3
   30f0c:	b29a      	uxth	r2, r3
   30f0e:	2300      	movs	r3, #0
   30f10:	4c04      	ldr	r4, [pc, #16]	; (30f24 <_http_client_recv_packet+0x60>)
   30f12:	47a0      	blx	r4
   30f14:	e000      	b.n	30f18 <_http_client_recv_packet+0x54>
		return;
   30f16:	46c0      	nop			; (mov r8, r8)
}
   30f18:	46bd      	mov	sp, r7
   30f1a:	b003      	add	sp, #12
   30f1c:	bd90      	pop	{r4, r7, pc}
   30f1e:	46c0      	nop			; (mov r8, r8)
   30f20:	00030639 	.word	0x00030639
   30f24:	00024dd5 	.word	0x00024dd5

00030f28 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   30f28:	b580      	push	{r7, lr}
   30f2a:	b082      	sub	sp, #8
   30f2c:	af00      	add	r7, sp, #0
   30f2e:	6078      	str	r0, [r7, #4]
   30f30:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   30f32:	687b      	ldr	r3, [r7, #4]
   30f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30f36:	683b      	ldr	r3, [r7, #0]
   30f38:	18d2      	adds	r2, r2, r3
   30f3a:	687b      	ldr	r3, [r7, #4]
   30f3c:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   30f3e:	687b      	ldr	r3, [r7, #4]
   30f40:	2258      	movs	r2, #88	; 0x58
   30f42:	5a9b      	ldrh	r3, [r3, r2]
   30f44:	2b00      	cmp	r3, #0
   30f46:	d007      	beq.n	30f58 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   30f48:	687b      	ldr	r3, [r7, #4]
   30f4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   30f4c:	687b      	ldr	r3, [r7, #4]
   30f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30f50:	0019      	movs	r1, r3
   30f52:	0010      	movs	r0, r2
   30f54:	4b06      	ldr	r3, [pc, #24]	; (30f70 <_http_client_recved_packet+0x48>)
   30f56:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   30f58:	46c0      	nop			; (mov r8, r8)
   30f5a:	687b      	ldr	r3, [r7, #4]
   30f5c:	0018      	movs	r0, r3
   30f5e:	4b05      	ldr	r3, [pc, #20]	; (30f74 <_http_client_recved_packet+0x4c>)
   30f60:	4798      	blx	r3
   30f62:	1e03      	subs	r3, r0, #0
   30f64:	d1f9      	bne.n	30f5a <_http_client_recved_packet+0x32>
}
   30f66:	46c0      	nop			; (mov r8, r8)
   30f68:	46bd      	mov	sp, r7
   30f6a:	b002      	add	sp, #8
   30f6c:	bd80      	pop	{r7, pc}
   30f6e:	46c0      	nop			; (mov r8, r8)
   30f70:	000319e5 	.word	0x000319e5
   30f74:	00030f79 	.word	0x00030f79

00030f78 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   30f78:	b580      	push	{r7, lr}
   30f7a:	b082      	sub	sp, #8
   30f7c:	af00      	add	r7, sp, #0
   30f7e:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   30f80:	687b      	ldr	r3, [r7, #4]
   30f82:	22d8      	movs	r2, #216	; 0xd8
   30f84:	589b      	ldr	r3, [r3, r2]
   30f86:	2b00      	cmp	r3, #0
   30f88:	d002      	beq.n	30f90 <_http_client_handle_response+0x18>
   30f8a:	2b01      	cmp	r3, #1
   30f8c:	d006      	beq.n	30f9c <_http_client_handle_response+0x24>
   30f8e:	e00b      	b.n	30fa8 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   30f90:	687b      	ldr	r3, [r7, #4]
   30f92:	0018      	movs	r0, r3
   30f94:	4b07      	ldr	r3, [pc, #28]	; (30fb4 <_http_client_handle_response+0x3c>)
   30f96:	4798      	blx	r3
   30f98:	0003      	movs	r3, r0
   30f9a:	e006      	b.n	30faa <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   30f9c:	687b      	ldr	r3, [r7, #4]
   30f9e:	0018      	movs	r0, r3
   30fa0:	4b05      	ldr	r3, [pc, #20]	; (30fb8 <_http_client_handle_response+0x40>)
   30fa2:	4798      	blx	r3
   30fa4:	0003      	movs	r3, r0
   30fa6:	e000      	b.n	30faa <_http_client_handle_response+0x32>
	}
	return 0;
   30fa8:	2300      	movs	r3, #0
}
   30faa:	0018      	movs	r0, r3
   30fac:	46bd      	mov	sp, r7
   30fae:	b002      	add	sp, #8
   30fb0:	bd80      	pop	{r7, pc}
   30fb2:	46c0      	nop			; (mov r8, r8)
   30fb4:	00030fbd 	.word	0x00030fbd
   30fb8:	00031475 	.word	0x00031475

00030fbc <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   30fbc:	b590      	push	{r4, r7, lr}
   30fbe:	b08b      	sub	sp, #44	; 0x2c
   30fc0:	af00      	add	r7, sp, #0
   30fc2:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   30fc4:	687b      	ldr	r3, [r7, #4]
   30fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30fc8:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   30fca:	4b9a      	ldr	r3, [pc, #616]	; (31234 <_http_client_handle_header+0x278>)
   30fcc:	681a      	ldr	r2, [r3, #0]
   30fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30fd0:	0011      	movs	r1, r2
   30fd2:	0018      	movs	r0, r3
   30fd4:	4b98      	ldr	r3, [pc, #608]	; (31238 <_http_client_handle_header+0x27c>)
   30fd6:	4798      	blx	r3
   30fd8:	0003      	movs	r3, r0
   30fda:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   30fdc:	69bb      	ldr	r3, [r7, #24]
   30fde:	2b00      	cmp	r3, #0
   30fe0:	d007      	beq.n	30ff2 <_http_client_handle_header+0x36>
   30fe2:	687b      	ldr	r3, [r7, #4]
   30fe4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   30fe6:	687b      	ldr	r3, [r7, #4]
   30fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30fea:	18d2      	adds	r2, r2, r3
   30fec:	69bb      	ldr	r3, [r7, #24]
   30fee:	429a      	cmp	r2, r3
   30ff0:	d807      	bhi.n	31002 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   30ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30ff4:	687b      	ldr	r3, [r7, #4]
   30ff6:	0011      	movs	r1, r2
   30ff8:	0018      	movs	r0, r3
   30ffa:	4b90      	ldr	r3, [pc, #576]	; (3123c <_http_client_handle_header+0x280>)
   30ffc:	4798      	blx	r3
			return 0;
   30ffe:	2300      	movs	r3, #0
   31000:	e114      	b.n	3122c <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   31002:	4b8c      	ldr	r3, [pc, #560]	; (31234 <_http_client_handle_header+0x278>)
   31004:	681c      	ldr	r4, [r3, #0]
   31006:	4b8b      	ldr	r3, [pc, #556]	; (31234 <_http_client_handle_header+0x278>)
   31008:	681b      	ldr	r3, [r3, #0]
   3100a:	0018      	movs	r0, r3
   3100c:	4b8c      	ldr	r3, [pc, #560]	; (31240 <_http_client_handle_header+0x284>)
   3100e:	4798      	blx	r3
   31010:	0002      	movs	r2, r0
   31012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31014:	0021      	movs	r1, r4
   31016:	0018      	movs	r0, r3
   31018:	4b8a      	ldr	r3, [pc, #552]	; (31244 <_http_client_handle_header+0x288>)
   3101a:	4798      	blx	r3
   3101c:	1e03      	subs	r3, r0, #0
   3101e:	d15d      	bne.n	310dc <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   31020:	4b84      	ldr	r3, [pc, #528]	; (31234 <_http_client_handle_header+0x278>)
   31022:	681b      	ldr	r3, [r3, #0]
   31024:	0018      	movs	r0, r3
   31026:	4b86      	ldr	r3, [pc, #536]	; (31240 <_http_client_handle_header+0x284>)
   31028:	4798      	blx	r3
   3102a:	0002      	movs	r2, r0
   3102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3102e:	189a      	adds	r2, r3, r2
   31030:	687b      	ldr	r3, [r7, #4]
   31032:	0011      	movs	r1, r2
   31034:	0018      	movs	r0, r3
   31036:	4b81      	ldr	r3, [pc, #516]	; (3123c <_http_client_handle_header+0x280>)
   31038:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   3103a:	687b      	ldr	r3, [r7, #4]
   3103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3103e:	2b00      	cmp	r3, #0
   31040:	d046      	beq.n	310d0 <_http_client_handle_header+0x114>
   31042:	687b      	ldr	r3, [r7, #4]
   31044:	22e4      	movs	r2, #228	; 0xe4
   31046:	5a9b      	ldrh	r3, [r3, r2]
   31048:	2b00      	cmp	r3, #0
   3104a:	d041      	beq.n	310d0 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   3104c:	687b      	ldr	r3, [r7, #4]
   3104e:	22dc      	movs	r2, #220	; 0xdc
   31050:	589b      	ldr	r3, [r3, r2]
   31052:	2b00      	cmp	r3, #0
   31054:	da19      	bge.n	3108a <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   31056:	687b      	ldr	r3, [r7, #4]
   31058:	22e4      	movs	r2, #228	; 0xe4
   3105a:	5a9a      	ldrh	r2, [r3, r2]
   3105c:	230c      	movs	r3, #12
   3105e:	18fb      	adds	r3, r7, r3
   31060:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   31062:	230c      	movs	r3, #12
   31064:	18fb      	adds	r3, r7, r3
   31066:	2201      	movs	r2, #1
   31068:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   3106a:	687b      	ldr	r3, [r7, #4]
   3106c:	22e0      	movs	r2, #224	; 0xe0
   3106e:	2100      	movs	r1, #0
   31070:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   31072:	230c      	movs	r3, #12
   31074:	18fb      	adds	r3, r7, r3
   31076:	2200      	movs	r2, #0
   31078:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3107a:	687b      	ldr	r3, [r7, #4]
   3107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3107e:	220c      	movs	r2, #12
   31080:	18ba      	adds	r2, r7, r2
   31082:	6878      	ldr	r0, [r7, #4]
   31084:	2102      	movs	r1, #2
   31086:	4798      	blx	r3
   31088:	e022      	b.n	310d0 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   3108a:	687b      	ldr	r3, [r7, #4]
   3108c:	22dc      	movs	r2, #220	; 0xdc
   3108e:	589a      	ldr	r2, [r3, r2]
   31090:	687b      	ldr	r3, [r7, #4]
   31092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31094:	429a      	cmp	r2, r3
   31096:	dd1b      	ble.n	310d0 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   31098:	687b      	ldr	r3, [r7, #4]
   3109a:	22e4      	movs	r2, #228	; 0xe4
   3109c:	5a9a      	ldrh	r2, [r3, r2]
   3109e:	230c      	movs	r3, #12
   310a0:	18fb      	adds	r3, r7, r3
   310a2:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   310a4:	687b      	ldr	r3, [r7, #4]
   310a6:	22dc      	movs	r2, #220	; 0xdc
   310a8:	589b      	ldr	r3, [r3, r2]
   310aa:	001a      	movs	r2, r3
   310ac:	230c      	movs	r3, #12
   310ae:	18fb      	adds	r3, r7, r3
   310b0:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   310b2:	230c      	movs	r3, #12
   310b4:	18fb      	adds	r3, r7, r3
   310b6:	2200      	movs	r2, #0
   310b8:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   310ba:	687b      	ldr	r3, [r7, #4]
   310bc:	22e0      	movs	r2, #224	; 0xe0
   310be:	2100      	movs	r1, #0
   310c0:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   310c2:	687b      	ldr	r3, [r7, #4]
   310c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   310c6:	220c      	movs	r2, #12
   310c8:	18ba      	adds	r2, r7, r2
   310ca:	6878      	ldr	r0, [r7, #4]
   310cc:	2102      	movs	r1, #2
   310ce:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   310d0:	687b      	ldr	r3, [r7, #4]
   310d2:	22d8      	movs	r2, #216	; 0xd8
   310d4:	2101      	movs	r1, #1
   310d6:	5099      	str	r1, [r3, r2]
			return 1;
   310d8:	2301      	movs	r3, #1
   310da:	e0a7      	b.n	3122c <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   310dc:	495a      	ldr	r1, [pc, #360]	; (31248 <_http_client_handle_header+0x28c>)
   310de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   310e0:	2210      	movs	r2, #16
   310e2:	0018      	movs	r0, r3
   310e4:	4b57      	ldr	r3, [pc, #348]	; (31244 <_http_client_handle_header+0x288>)
   310e6:	4798      	blx	r3
   310e8:	1e03      	subs	r3, r0, #0
   310ea:	d109      	bne.n	31100 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   310ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   310ee:	3310      	adds	r3, #16
   310f0:	0018      	movs	r0, r3
   310f2:	4b56      	ldr	r3, [pc, #344]	; (3124c <_http_client_handle_header+0x290>)
   310f4:	4798      	blx	r3
   310f6:	0001      	movs	r1, r0
   310f8:	687b      	ldr	r3, [r7, #4]
   310fa:	22dc      	movs	r2, #220	; 0xdc
   310fc:	5099      	str	r1, [r3, r2]
   310fe:	e08b      	b.n	31218 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   31100:	4953      	ldr	r1, [pc, #332]	; (31250 <_http_client_handle_header+0x294>)
   31102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31104:	2213      	movs	r2, #19
   31106:	0018      	movs	r0, r3
   31108:	4b4e      	ldr	r3, [pc, #312]	; (31244 <_http_client_handle_header+0x288>)
   3110a:	4798      	blx	r3
   3110c:	1e03      	subs	r3, r0, #0
   3110e:	d127      	bne.n	31160 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   31110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31112:	3313      	adds	r3, #19
   31114:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31116:	e01e      	b.n	31156 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   31118:	6a3b      	ldr	r3, [r7, #32]
   3111a:	781b      	ldrb	r3, [r3, #0]
   3111c:	2b20      	cmp	r3, #32
   3111e:	d103      	bne.n	31128 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31120:	6a3b      	ldr	r3, [r7, #32]
   31122:	3301      	adds	r3, #1
   31124:	623b      	str	r3, [r7, #32]
   31126:	e016      	b.n	31156 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   31128:	6a3b      	ldr	r3, [r7, #32]
   3112a:	781b      	ldrb	r3, [r3, #0]
   3112c:	2b43      	cmp	r3, #67	; 0x43
   3112e:	d003      	beq.n	31138 <_http_client_handle_header+0x17c>
   31130:	6a3b      	ldr	r3, [r7, #32]
   31132:	781b      	ldrb	r3, [r3, #0]
   31134:	2b63      	cmp	r3, #99	; 0x63
   31136:	d105      	bne.n	31144 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   31138:	687b      	ldr	r3, [r7, #4]
   3113a:	21cc      	movs	r1, #204	; 0xcc
   3113c:	2201      	movs	r2, #1
   3113e:	4252      	negs	r2, r2
   31140:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   31142:	e069      	b.n	31218 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   31144:	2386      	movs	r3, #134	; 0x86
   31146:	425a      	negs	r2, r3
   31148:	687b      	ldr	r3, [r7, #4]
   3114a:	0011      	movs	r1, r2
   3114c:	0018      	movs	r0, r3
   3114e:	4b41      	ldr	r3, [pc, #260]	; (31254 <_http_client_handle_header+0x298>)
   31150:	4798      	blx	r3
					return 0;
   31152:	2300      	movs	r3, #0
   31154:	e06a      	b.n	3122c <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31156:	69ba      	ldr	r2, [r7, #24]
   31158:	6a3b      	ldr	r3, [r7, #32]
   3115a:	429a      	cmp	r2, r3
   3115c:	d8dc      	bhi.n	31118 <_http_client_handle_header+0x15c>
   3115e:	e05b      	b.n	31218 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   31160:	493d      	ldr	r1, [pc, #244]	; (31258 <_http_client_handle_header+0x29c>)
   31162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31164:	220c      	movs	r2, #12
   31166:	0018      	movs	r0, r3
   31168:	4b36      	ldr	r3, [pc, #216]	; (31244 <_http_client_handle_header+0x288>)
   3116a:	4798      	blx	r3
   3116c:	1e03      	subs	r3, r0, #0
   3116e:	d126      	bne.n	311be <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   31170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31172:	330c      	adds	r3, #12
   31174:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31176:	e01d      	b.n	311b4 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   31178:	69fb      	ldr	r3, [r7, #28]
   3117a:	781b      	ldrb	r3, [r3, #0]
   3117c:	2b20      	cmp	r3, #32
   3117e:	d103      	bne.n	31188 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31180:	69fb      	ldr	r3, [r7, #28]
   31182:	3301      	adds	r3, #1
   31184:	61fb      	str	r3, [r7, #28]
   31186:	e015      	b.n	311b4 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   31188:	69fb      	ldr	r3, [r7, #28]
   3118a:	781b      	ldrb	r3, [r3, #0]
   3118c:	2b4b      	cmp	r3, #75	; 0x4b
   3118e:	d003      	beq.n	31198 <_http_client_handle_header+0x1dc>
   31190:	69fb      	ldr	r3, [r7, #28]
   31192:	781b      	ldrb	r3, [r3, #0]
   31194:	2b6b      	cmp	r3, #107	; 0x6b
   31196:	d106      	bne.n	311a6 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   31198:	687b      	ldr	r3, [r7, #4]
   3119a:	2241      	movs	r2, #65	; 0x41
   3119c:	5c99      	ldrb	r1, [r3, r2]
   3119e:	2002      	movs	r0, #2
   311a0:	4301      	orrs	r1, r0
   311a2:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   311a4:	e038      	b.n	31218 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   311a6:	687b      	ldr	r3, [r7, #4]
   311a8:	2241      	movs	r2, #65	; 0x41
   311aa:	5c99      	ldrb	r1, [r3, r2]
   311ac:	2002      	movs	r0, #2
   311ae:	4381      	bics	r1, r0
   311b0:	5499      	strb	r1, [r3, r2]
				break;
   311b2:	e031      	b.n	31218 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   311b4:	69ba      	ldr	r2, [r7, #24]
   311b6:	69fb      	ldr	r3, [r7, #28]
   311b8:	429a      	cmp	r2, r3
   311ba:	d8dd      	bhi.n	31178 <_http_client_handle_header+0x1bc>
   311bc:	e02c      	b.n	31218 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   311be:	4927      	ldr	r1, [pc, #156]	; (3125c <_http_client_handle_header+0x2a0>)
   311c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   311c2:	2205      	movs	r2, #5
   311c4:	0018      	movs	r0, r3
   311c6:	4b1f      	ldr	r3, [pc, #124]	; (31244 <_http_client_handle_header+0x288>)
   311c8:	4798      	blx	r3
   311ca:	1e03      	subs	r3, r0, #0
   311cc:	d124      	bne.n	31218 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   311ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   311d0:	3309      	adds	r3, #9
   311d2:	0018      	movs	r0, r3
   311d4:	4b1d      	ldr	r3, [pc, #116]	; (3124c <_http_client_handle_header+0x290>)
   311d6:	4798      	blx	r3
   311d8:	0003      	movs	r3, r0
   311da:	b299      	uxth	r1, r3
   311dc:	687b      	ldr	r3, [r7, #4]
   311de:	22e4      	movs	r2, #228	; 0xe4
   311e0:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   311e2:	687b      	ldr	r3, [r7, #4]
   311e4:	22dc      	movs	r2, #220	; 0xdc
   311e6:	2100      	movs	r1, #0
   311e8:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   311ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   311ec:	3305      	adds	r3, #5
   311ee:	781b      	ldrb	r3, [r3, #0]
   311f0:	2b31      	cmp	r3, #49	; 0x31
   311f2:	d804      	bhi.n	311fe <_http_client_handle_header+0x242>
   311f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   311f6:	3307      	adds	r3, #7
   311f8:	781b      	ldrb	r3, [r3, #0]
   311fa:	2b30      	cmp	r3, #48	; 0x30
   311fc:	d906      	bls.n	3120c <_http_client_handle_header+0x250>
				module->permanent = 1;
   311fe:	687b      	ldr	r3, [r7, #4]
   31200:	2241      	movs	r2, #65	; 0x41
   31202:	5c99      	ldrb	r1, [r3, r2]
   31204:	2002      	movs	r0, #2
   31206:	4301      	orrs	r1, r0
   31208:	5499      	strb	r1, [r3, r2]
   3120a:	e005      	b.n	31218 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   3120c:	687b      	ldr	r3, [r7, #4]
   3120e:	2241      	movs	r2, #65	; 0x41
   31210:	5c99      	ldrb	r1, [r3, r2]
   31212:	2002      	movs	r0, #2
   31214:	4381      	bics	r1, r0
   31216:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   31218:	4b06      	ldr	r3, [pc, #24]	; (31234 <_http_client_handle_header+0x278>)
   3121a:	681b      	ldr	r3, [r3, #0]
   3121c:	0018      	movs	r0, r3
   3121e:	4b08      	ldr	r3, [pc, #32]	; (31240 <_http_client_handle_header+0x284>)
   31220:	4798      	blx	r3
   31222:	0002      	movs	r2, r0
   31224:	69bb      	ldr	r3, [r7, #24]
   31226:	189b      	adds	r3, r3, r2
   31228:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   3122a:	e6ce      	b.n	30fca <_http_client_handle_header+0xe>
	}
}
   3122c:	0018      	movs	r0, r3
   3122e:	46bd      	mov	sp, r7
   31230:	b00b      	add	sp, #44	; 0x2c
   31232:	bd90      	pop	{r4, r7, pc}
   31234:	200000d4 	.word	0x200000d4
   31238:	00033e35 	.word	0x00033e35
   3123c:	00031621 	.word	0x00031621
   31240:	00033db7 	.word	0x00033db7
   31244:	00033dc5 	.word	0x00033dc5
   31248:	00038b70 	.word	0x00038b70
   3124c:	0003394d 	.word	0x0003394d
   31250:	00038b94 	.word	0x00038b94
   31254:	00030639 	.word	0x00030639
   31258:	00038ba8 	.word	0x00038ba8
   3125c:	00038bb8 	.word	0x00038bb8

00031260 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   31260:	b580      	push	{r7, lr}
   31262:	b088      	sub	sp, #32
   31264:	af00      	add	r7, sp, #0
   31266:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   31268:	687b      	ldr	r3, [r7, #4]
   3126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3126c:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   3126e:	2300      	movs	r3, #0
   31270:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   31272:	687b      	ldr	r3, [r7, #4]
   31274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31276:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   31278:	687b      	ldr	r3, [r7, #4]
   3127a:	22e0      	movs	r2, #224	; 0xe0
   3127c:	589b      	ldr	r3, [r3, r2]
   3127e:	2b00      	cmp	r3, #0
   31280:	db71      	blt.n	31366 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   31282:	687b      	ldr	r3, [r7, #4]
   31284:	22e0      	movs	r2, #224	; 0xe0
   31286:	589b      	ldr	r3, [r3, r2]
   31288:	2b00      	cmp	r3, #0
   3128a:	d134      	bne.n	312f6 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   3128c:	687b      	ldr	r3, [r7, #4]
   3128e:	22d8      	movs	r2, #216	; 0xd8
   31290:	2100      	movs	r1, #0
   31292:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   31294:	687b      	ldr	r3, [r7, #4]
   31296:	22e4      	movs	r2, #228	; 0xe4
   31298:	2100      	movs	r1, #0
   3129a:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   3129c:	2308      	movs	r3, #8
   3129e:	18fb      	adds	r3, r7, r3
   312a0:	2201      	movs	r2, #1
   312a2:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   312a4:	2308      	movs	r3, #8
   312a6:	18fb      	adds	r3, r7, r3
   312a8:	2200      	movs	r2, #0
   312aa:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   312ac:	2308      	movs	r3, #8
   312ae:	18fb      	adds	r3, r7, r3
   312b0:	2200      	movs	r2, #0
   312b2:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   312b4:	687b      	ldr	r3, [r7, #4]
   312b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   312b8:	2b00      	cmp	r3, #0
   312ba:	d006      	beq.n	312ca <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   312bc:	687b      	ldr	r3, [r7, #4]
   312be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   312c0:	2208      	movs	r2, #8
   312c2:	18ba      	adds	r2, r7, r2
   312c4:	6878      	ldr	r0, [r7, #4]
   312c6:	2103      	movs	r1, #3
   312c8:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   312ca:	687b      	ldr	r3, [r7, #4]
   312cc:	2241      	movs	r2, #65	; 0x41
   312ce:	5c9b      	ldrb	r3, [r3, r2]
   312d0:	2202      	movs	r2, #2
   312d2:	4013      	ands	r3, r2
   312d4:	b2db      	uxtb	r3, r3
   312d6:	2b00      	cmp	r3, #0
   312d8:	d105      	bne.n	312e6 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   312da:	687b      	ldr	r3, [r7, #4]
   312dc:	2100      	movs	r1, #0
   312de:	0018      	movs	r0, r3
   312e0:	4b62      	ldr	r3, [pc, #392]	; (3146c <_http_client_read_chuked_entity+0x20c>)
   312e2:	4798      	blx	r3
					return;
   312e4:	e0bf      	b.n	31466 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   312e6:	697b      	ldr	r3, [r7, #20]
   312e8:	1c9a      	adds	r2, r3, #2
   312ea:	687b      	ldr	r3, [r7, #4]
   312ec:	0011      	movs	r1, r2
   312ee:	0018      	movs	r0, r3
   312f0:	4b5f      	ldr	r3, [pc, #380]	; (31470 <_http_client_read_chuked_entity+0x210>)
   312f2:	4798      	blx	r3
   312f4:	e0b2      	b.n	3145c <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   312f6:	687b      	ldr	r3, [r7, #4]
   312f8:	22e0      	movs	r2, #224	; 0xe0
   312fa:	589a      	ldr	r2, [r3, r2]
   312fc:	69fb      	ldr	r3, [r7, #28]
   312fe:	429a      	cmp	r2, r3
   31300:	dd00      	ble.n	31304 <_http_client_read_chuked_entity+0xa4>
   31302:	e0ab      	b.n	3145c <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   31304:	687b      	ldr	r3, [r7, #4]
   31306:	22e0      	movs	r2, #224	; 0xe0
   31308:	589b      	ldr	r3, [r3, r2]
   3130a:	001a      	movs	r2, r3
   3130c:	2308      	movs	r3, #8
   3130e:	18fb      	adds	r3, r7, r3
   31310:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   31312:	2308      	movs	r3, #8
   31314:	18fb      	adds	r3, r7, r3
   31316:	697a      	ldr	r2, [r7, #20]
   31318:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   3131a:	2308      	movs	r3, #8
   3131c:	18fb      	adds	r3, r7, r3
   3131e:	2200      	movs	r2, #0
   31320:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   31322:	687b      	ldr	r3, [r7, #4]
   31324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31326:	2b00      	cmp	r3, #0
   31328:	d006      	beq.n	31338 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   3132a:	687b      	ldr	r3, [r7, #4]
   3132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3132e:	2208      	movs	r2, #8
   31330:	18ba      	adds	r2, r7, r2
   31332:	6878      	ldr	r0, [r7, #4]
   31334:	2103      	movs	r1, #3
   31336:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   31338:	687b      	ldr	r3, [r7, #4]
   3133a:	22e0      	movs	r2, #224	; 0xe0
   3133c:	589b      	ldr	r3, [r3, r2]
   3133e:	3302      	adds	r3, #2
   31340:	697a      	ldr	r2, [r7, #20]
   31342:	18d2      	adds	r2, r2, r3
   31344:	687b      	ldr	r3, [r7, #4]
   31346:	0011      	movs	r1, r2
   31348:	0018      	movs	r0, r3
   3134a:	4b49      	ldr	r3, [pc, #292]	; (31470 <_http_client_read_chuked_entity+0x210>)
   3134c:	4798      	blx	r3
				length = (int)module->recved_size;
   3134e:	687b      	ldr	r3, [r7, #4]
   31350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31352:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   31354:	687b      	ldr	r3, [r7, #4]
   31356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31358:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   3135a:	687b      	ldr	r3, [r7, #4]
   3135c:	21e0      	movs	r1, #224	; 0xe0
   3135e:	2201      	movs	r2, #1
   31360:	4252      	negs	r2, r2
   31362:	505a      	str	r2, [r3, r1]
   31364:	e07a      	b.n	3145c <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   31366:	687b      	ldr	r3, [r7, #4]
   31368:	22e0      	movs	r2, #224	; 0xe0
   3136a:	2100      	movs	r1, #0
   3136c:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   3136e:	e05a      	b.n	31426 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   31370:	697b      	ldr	r3, [r7, #20]
   31372:	781b      	ldrb	r3, [r3, #0]
   31374:	2b0a      	cmp	r3, #10
   31376:	d106      	bne.n	31386 <_http_client_read_chuked_entity+0x126>
					buffer++;
   31378:	697b      	ldr	r3, [r7, #20]
   3137a:	3301      	adds	r3, #1
   3137c:	617b      	str	r3, [r7, #20]
					length--;
   3137e:	69fb      	ldr	r3, [r7, #28]
   31380:	3b01      	subs	r3, #1
   31382:	61fb      	str	r3, [r7, #28]
					break;
   31384:	e052      	b.n	3142c <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   31386:	69bb      	ldr	r3, [r7, #24]
   31388:	2b00      	cmp	r3, #0
   3138a:	d145      	bne.n	31418 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   3138c:	697b      	ldr	r3, [r7, #20]
   3138e:	781b      	ldrb	r3, [r3, #0]
   31390:	2b2f      	cmp	r3, #47	; 0x2f
   31392:	d910      	bls.n	313b6 <_http_client_read_chuked_entity+0x156>
   31394:	697b      	ldr	r3, [r7, #20]
   31396:	781b      	ldrb	r3, [r3, #0]
   31398:	2b39      	cmp	r3, #57	; 0x39
   3139a:	d80c      	bhi.n	313b6 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   3139c:	687b      	ldr	r3, [r7, #4]
   3139e:	22e0      	movs	r2, #224	; 0xe0
   313a0:	589b      	ldr	r3, [r3, r2]
   313a2:	011b      	lsls	r3, r3, #4
   313a4:	697a      	ldr	r2, [r7, #20]
   313a6:	7812      	ldrb	r2, [r2, #0]
   313a8:	189b      	adds	r3, r3, r2
   313aa:	3b30      	subs	r3, #48	; 0x30
   313ac:	001a      	movs	r2, r3
   313ae:	687b      	ldr	r3, [r7, #4]
   313b0:	21e0      	movs	r1, #224	; 0xe0
   313b2:	505a      	str	r2, [r3, r1]
   313b4:	e031      	b.n	3141a <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   313b6:	697b      	ldr	r3, [r7, #20]
   313b8:	781b      	ldrb	r3, [r3, #0]
   313ba:	2b60      	cmp	r3, #96	; 0x60
   313bc:	d910      	bls.n	313e0 <_http_client_read_chuked_entity+0x180>
   313be:	697b      	ldr	r3, [r7, #20]
   313c0:	781b      	ldrb	r3, [r3, #0]
   313c2:	2b66      	cmp	r3, #102	; 0x66
   313c4:	d80c      	bhi.n	313e0 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   313c6:	687b      	ldr	r3, [r7, #4]
   313c8:	22e0      	movs	r2, #224	; 0xe0
   313ca:	589b      	ldr	r3, [r3, r2]
   313cc:	011b      	lsls	r3, r3, #4
   313ce:	697a      	ldr	r2, [r7, #20]
   313d0:	7812      	ldrb	r2, [r2, #0]
   313d2:	189b      	adds	r3, r3, r2
   313d4:	3b61      	subs	r3, #97	; 0x61
   313d6:	001a      	movs	r2, r3
   313d8:	687b      	ldr	r3, [r7, #4]
   313da:	21e0      	movs	r1, #224	; 0xe0
   313dc:	505a      	str	r2, [r3, r1]
   313de:	e01c      	b.n	3141a <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   313e0:	697b      	ldr	r3, [r7, #20]
   313e2:	781b      	ldrb	r3, [r3, #0]
   313e4:	2b40      	cmp	r3, #64	; 0x40
   313e6:	d910      	bls.n	3140a <_http_client_read_chuked_entity+0x1aa>
   313e8:	697b      	ldr	r3, [r7, #20]
   313ea:	781b      	ldrb	r3, [r3, #0]
   313ec:	2b46      	cmp	r3, #70	; 0x46
   313ee:	d80c      	bhi.n	3140a <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   313f0:	687b      	ldr	r3, [r7, #4]
   313f2:	22e0      	movs	r2, #224	; 0xe0
   313f4:	589b      	ldr	r3, [r3, r2]
   313f6:	011b      	lsls	r3, r3, #4
   313f8:	697a      	ldr	r2, [r7, #20]
   313fa:	7812      	ldrb	r2, [r2, #0]
   313fc:	189b      	adds	r3, r3, r2
   313fe:	3b41      	subs	r3, #65	; 0x41
   31400:	001a      	movs	r2, r3
   31402:	687b      	ldr	r3, [r7, #4]
   31404:	21e0      	movs	r1, #224	; 0xe0
   31406:	505a      	str	r2, [r3, r1]
   31408:	e007      	b.n	3141a <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   3140a:	697b      	ldr	r3, [r7, #20]
   3140c:	781b      	ldrb	r3, [r3, #0]
   3140e:	2b3b      	cmp	r3, #59	; 0x3b
   31410:	d103      	bne.n	3141a <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   31412:	2301      	movs	r3, #1
   31414:	61bb      	str	r3, [r7, #24]
   31416:	e000      	b.n	3141a <_http_client_read_chuked_entity+0x1ba>
					continue;
   31418:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   3141a:	697b      	ldr	r3, [r7, #20]
   3141c:	3301      	adds	r3, #1
   3141e:	617b      	str	r3, [r7, #20]
   31420:	69fb      	ldr	r3, [r7, #28]
   31422:	3b01      	subs	r3, #1
   31424:	61fb      	str	r3, [r7, #28]
   31426:	69fb      	ldr	r3, [r7, #28]
   31428:	2b00      	cmp	r3, #0
   3142a:	dca1      	bgt.n	31370 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   3142c:	687b      	ldr	r3, [r7, #4]
   3142e:	22e0      	movs	r2, #224	; 0xe0
   31430:	589a      	ldr	r2, [r3, r2]
   31432:	687b      	ldr	r3, [r7, #4]
   31434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31436:	429a      	cmp	r2, r3
   31438:	dd07      	ble.n	3144a <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   3143a:	238b      	movs	r3, #139	; 0x8b
   3143c:	425a      	negs	r2, r3
   3143e:	687b      	ldr	r3, [r7, #4]
   31440:	0011      	movs	r1, r2
   31442:	0018      	movs	r0, r3
   31444:	4b09      	ldr	r3, [pc, #36]	; (3146c <_http_client_read_chuked_entity+0x20c>)
   31446:	4798      	blx	r3
				return;
   31448:	e00d      	b.n	31466 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   3144a:	69fb      	ldr	r3, [r7, #28]
   3144c:	2b00      	cmp	r3, #0
   3144e:	d105      	bne.n	3145c <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   31450:	687b      	ldr	r3, [r7, #4]
   31452:	21e0      	movs	r1, #224	; 0xe0
   31454:	2201      	movs	r2, #1
   31456:	4252      	negs	r2, r2
   31458:	505a      	str	r2, [r3, r1]
				return;
   3145a:	e004      	b.n	31466 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   3145c:	687b      	ldr	r3, [r7, #4]
   3145e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31460:	2b00      	cmp	r3, #0
   31462:	d000      	beq.n	31466 <_http_client_read_chuked_entity+0x206>
   31464:	e708      	b.n	31278 <_http_client_read_chuked_entity+0x18>
}
   31466:	46bd      	mov	sp, r7
   31468:	b008      	add	sp, #32
   3146a:	bd80      	pop	{r7, pc}
   3146c:	00030639 	.word	0x00030639
   31470:	00031621 	.word	0x00031621

00031474 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   31474:	b580      	push	{r7, lr}
   31476:	b086      	sub	sp, #24
   31478:	af00      	add	r7, sp, #0
   3147a:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   3147c:	687b      	ldr	r3, [r7, #4]
   3147e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31480:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   31482:	687b      	ldr	r3, [r7, #4]
   31484:	22dc      	movs	r2, #220	; 0xdc
   31486:	589b      	ldr	r3, [r3, r2]
   31488:	2b00      	cmp	r3, #0
   3148a:	db58      	blt.n	3153e <_http_client_handle_entity+0xca>
   3148c:	687b      	ldr	r3, [r7, #4]
   3148e:	22dc      	movs	r2, #220	; 0xdc
   31490:	589a      	ldr	r2, [r3, r2]
   31492:	687b      	ldr	r3, [r7, #4]
   31494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31496:	429a      	cmp	r2, r3
   31498:	dc51      	bgt.n	3153e <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   3149a:	687b      	ldr	r3, [r7, #4]
   3149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3149e:	0019      	movs	r1, r3
   314a0:	687b      	ldr	r3, [r7, #4]
   314a2:	22dc      	movs	r2, #220	; 0xdc
   314a4:	589b      	ldr	r3, [r3, r2]
   314a6:	4299      	cmp	r1, r3
   314a8:	da00      	bge.n	314ac <_http_client_handle_entity+0x38>
   314aa:	e0a9      	b.n	31600 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   314ac:	687b      	ldr	r3, [r7, #4]
   314ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   314b0:	2b00      	cmp	r3, #0
   314b2:	d020      	beq.n	314f6 <_http_client_handle_entity+0x82>
   314b4:	687b      	ldr	r3, [r7, #4]
   314b6:	22e4      	movs	r2, #228	; 0xe4
   314b8:	5a9b      	ldrh	r3, [r3, r2]
   314ba:	2b00      	cmp	r3, #0
   314bc:	d01b      	beq.n	314f6 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   314be:	687b      	ldr	r3, [r7, #4]
   314c0:	22e4      	movs	r2, #228	; 0xe4
   314c2:	5a9a      	ldrh	r2, [r3, r2]
   314c4:	2308      	movs	r3, #8
   314c6:	18fb      	adds	r3, r7, r3
   314c8:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   314ca:	2308      	movs	r3, #8
   314cc:	18fb      	adds	r3, r7, r3
   314ce:	2200      	movs	r2, #0
   314d0:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   314d2:	687b      	ldr	r3, [r7, #4]
   314d4:	22dc      	movs	r2, #220	; 0xdc
   314d6:	589b      	ldr	r3, [r3, r2]
   314d8:	001a      	movs	r2, r3
   314da:	2308      	movs	r3, #8
   314dc:	18fb      	adds	r3, r7, r3
   314de:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   314e0:	2308      	movs	r3, #8
   314e2:	18fb      	adds	r3, r7, r3
   314e4:	697a      	ldr	r2, [r7, #20]
   314e6:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   314e8:	687b      	ldr	r3, [r7, #4]
   314ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   314ec:	2208      	movs	r2, #8
   314ee:	18ba      	adds	r2, r7, r2
   314f0:	6878      	ldr	r0, [r7, #4]
   314f2:	2102      	movs	r1, #2
   314f4:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   314f6:	687b      	ldr	r3, [r7, #4]
   314f8:	22d8      	movs	r2, #216	; 0xd8
   314fa:	2100      	movs	r1, #0
   314fc:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   314fe:	687b      	ldr	r3, [r7, #4]
   31500:	22e4      	movs	r2, #228	; 0xe4
   31502:	2100      	movs	r1, #0
   31504:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   31506:	687b      	ldr	r3, [r7, #4]
   31508:	2241      	movs	r2, #65	; 0x41
   3150a:	5c9b      	ldrb	r3, [r3, r2]
   3150c:	2202      	movs	r2, #2
   3150e:	4013      	ands	r3, r2
   31510:	b2db      	uxtb	r3, r3
   31512:	2b00      	cmp	r3, #0
   31514:	d105      	bne.n	31522 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   31516:	687b      	ldr	r3, [r7, #4]
   31518:	2100      	movs	r1, #0
   3151a:	0018      	movs	r0, r3
   3151c:	4b3b      	ldr	r3, [pc, #236]	; (3160c <_http_client_handle_entity+0x198>)
   3151e:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   31520:	e06e      	b.n	31600 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   31522:	687b      	ldr	r3, [r7, #4]
   31524:	22dc      	movs	r2, #220	; 0xdc
   31526:	589b      	ldr	r3, [r3, r2]
   31528:	001a      	movs	r2, r3
   3152a:	697b      	ldr	r3, [r7, #20]
   3152c:	189a      	adds	r2, r3, r2
   3152e:	687b      	ldr	r3, [r7, #4]
   31530:	0011      	movs	r1, r2
   31532:	0018      	movs	r0, r3
   31534:	4b36      	ldr	r3, [pc, #216]	; (31610 <_http_client_handle_entity+0x19c>)
   31536:	4798      	blx	r3
				return module->recved_size;
   31538:	687b      	ldr	r3, [r7, #4]
   3153a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3153c:	e061      	b.n	31602 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   3153e:	687b      	ldr	r3, [r7, #4]
   31540:	22dc      	movs	r2, #220	; 0xdc
   31542:	589b      	ldr	r3, [r3, r2]
   31544:	2b00      	cmp	r3, #0
   31546:	db57      	blt.n	315f8 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   31548:	687b      	ldr	r3, [r7, #4]
   3154a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3154c:	2308      	movs	r3, #8
   3154e:	18fb      	adds	r3, r7, r3
   31550:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   31552:	2308      	movs	r3, #8
   31554:	18fb      	adds	r3, r7, r3
   31556:	697a      	ldr	r2, [r7, #20]
   31558:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   3155a:	687b      	ldr	r3, [r7, #4]
   3155c:	22e0      	movs	r2, #224	; 0xe0
   3155e:	589a      	ldr	r2, [r3, r2]
   31560:	687b      	ldr	r3, [r7, #4]
   31562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31564:	18d2      	adds	r2, r2, r3
   31566:	687b      	ldr	r3, [r7, #4]
   31568:	21e0      	movs	r1, #224	; 0xe0
   3156a:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   3156c:	687b      	ldr	r3, [r7, #4]
   3156e:	22dc      	movs	r2, #220	; 0xdc
   31570:	589a      	ldr	r2, [r3, r2]
   31572:	687b      	ldr	r3, [r7, #4]
   31574:	21e0      	movs	r1, #224	; 0xe0
   31576:	585b      	ldr	r3, [r3, r1]
   31578:	429a      	cmp	r2, r3
   3157a:	dc0c      	bgt.n	31596 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   3157c:	687b      	ldr	r3, [r7, #4]
   3157e:	22d8      	movs	r2, #216	; 0xd8
   31580:	2100      	movs	r1, #0
   31582:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   31584:	687b      	ldr	r3, [r7, #4]
   31586:	22e4      	movs	r2, #228	; 0xe4
   31588:	2100      	movs	r1, #0
   3158a:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   3158c:	2308      	movs	r3, #8
   3158e:	18fb      	adds	r3, r7, r3
   31590:	2201      	movs	r2, #1
   31592:	721a      	strb	r2, [r3, #8]
   31594:	e003      	b.n	3159e <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   31596:	2308      	movs	r3, #8
   31598:	18fb      	adds	r3, r7, r3
   3159a:	2200      	movs	r2, #0
   3159c:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   3159e:	687b      	ldr	r3, [r7, #4]
   315a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   315a2:	2b00      	cmp	r3, #0
   315a4:	d006      	beq.n	315b4 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   315a6:	687b      	ldr	r3, [r7, #4]
   315a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   315aa:	2208      	movs	r2, #8
   315ac:	18ba      	adds	r2, r7, r2
   315ae:	6878      	ldr	r0, [r7, #4]
   315b0:	2103      	movs	r1, #3
   315b2:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   315b4:	2308      	movs	r3, #8
   315b6:	18fb      	adds	r3, r7, r3
   315b8:	7a1b      	ldrb	r3, [r3, #8]
   315ba:	2b01      	cmp	r3, #1
   315bc:	d112      	bne.n	315e4 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   315be:	687b      	ldr	r3, [r7, #4]
   315c0:	2241      	movs	r2, #65	; 0x41
   315c2:	5c9b      	ldrb	r3, [r3, r2]
   315c4:	2202      	movs	r2, #2
   315c6:	4013      	ands	r3, r2
   315c8:	b2db      	uxtb	r3, r3
   315ca:	2b00      	cmp	r3, #0
   315cc:	d10a      	bne.n	315e4 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   315ce:	4b11      	ldr	r3, [pc, #68]	; (31614 <_http_client_handle_entity+0x1a0>)
   315d0:	0018      	movs	r0, r3
   315d2:	4b11      	ldr	r3, [pc, #68]	; (31618 <_http_client_handle_entity+0x1a4>)
   315d4:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   315d6:	687b      	ldr	r3, [r7, #4]
   315d8:	2100      	movs	r1, #0
   315da:	0018      	movs	r0, r3
   315dc:	4b0b      	ldr	r3, [pc, #44]	; (3160c <_http_client_handle_entity+0x198>)
   315de:	4798      	blx	r3
					return 0;
   315e0:	2300      	movs	r3, #0
   315e2:	e00e      	b.n	31602 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   315e4:	687b      	ldr	r3, [r7, #4]
   315e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   315e8:	697a      	ldr	r2, [r7, #20]
   315ea:	18d2      	adds	r2, r2, r3
   315ec:	687b      	ldr	r3, [r7, #4]
   315ee:	0011      	movs	r1, r2
   315f0:	0018      	movs	r0, r3
   315f2:	4b07      	ldr	r3, [pc, #28]	; (31610 <_http_client_handle_entity+0x19c>)
   315f4:	4798      	blx	r3
   315f6:	e003      	b.n	31600 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   315f8:	687b      	ldr	r3, [r7, #4]
   315fa:	0018      	movs	r0, r3
   315fc:	4b07      	ldr	r3, [pc, #28]	; (3161c <_http_client_handle_entity+0x1a8>)
   315fe:	4798      	blx	r3
		}
	}

	return 0;
   31600:	2300      	movs	r3, #0
}
   31602:	0018      	movs	r0, r3
   31604:	46bd      	mov	sp, r7
   31606:	b006      	add	sp, #24
   31608:	bd80      	pop	{r7, pc}
   3160a:	46c0      	nop			; (mov r8, r8)
   3160c:	00030639 	.word	0x00030639
   31610:	00031621 	.word	0x00031621
   31614:	00038bc0 	.word	0x00038bc0
   31618:	00033c21 	.word	0x00033c21
   3161c:	00031261 	.word	0x00031261

00031620 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   31620:	b580      	push	{r7, lr}
   31622:	b084      	sub	sp, #16
   31624:	af00      	add	r7, sp, #0
   31626:	6078      	str	r0, [r7, #4]
   31628:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   3162a:	687b      	ldr	r3, [r7, #4]
   3162c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3162e:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   31630:	687b      	ldr	r3, [r7, #4]
   31632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31634:	001a      	movs	r2, r3
   31636:	683b      	ldr	r3, [r7, #0]
   31638:	1ad2      	subs	r2, r2, r3
   3163a:	68fb      	ldr	r3, [r7, #12]
   3163c:	18d3      	adds	r3, r2, r3
   3163e:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   31640:	68bb      	ldr	r3, [r7, #8]
   31642:	2b00      	cmp	r3, #0
   31644:	dd09      	ble.n	3165a <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   31646:	68ba      	ldr	r2, [r7, #8]
   31648:	6839      	ldr	r1, [r7, #0]
   3164a:	68fb      	ldr	r3, [r7, #12]
   3164c:	0018      	movs	r0, r3
   3164e:	4b06      	ldr	r3, [pc, #24]	; (31668 <_http_client_move_buffer+0x48>)
   31650:	4798      	blx	r3
		module->recved_size = remain;
   31652:	68ba      	ldr	r2, [r7, #8]
   31654:	687b      	ldr	r3, [r7, #4]
   31656:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   31658:	e002      	b.n	31660 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   3165a:	687b      	ldr	r3, [r7, #4]
   3165c:	2200      	movs	r2, #0
   3165e:	645a      	str	r2, [r3, #68]	; 0x44
}
   31660:	46c0      	nop			; (mov r8, r8)
   31662:	46bd      	mov	sp, r7
   31664:	b004      	add	sp, #16
   31666:	bd80      	pop	{r7, pc}
   31668:	000339db 	.word	0x000339db

0003166c <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   3166c:	b580      	push	{r7, lr}
   3166e:	b084      	sub	sp, #16
   31670:	af00      	add	r7, sp, #0
   31672:	60f8      	str	r0, [r7, #12]
   31674:	60b9      	str	r1, [r7, #8]
   31676:	607a      	str	r2, [r7, #4]
   31678:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   3167a:	68fb      	ldr	r3, [r7, #12]
   3167c:	687a      	ldr	r2, [r7, #4]
   3167e:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   31680:	68fb      	ldr	r3, [r7, #12]
   31682:	68ba      	ldr	r2, [r7, #8]
   31684:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   31686:	68fb      	ldr	r3, [r7, #12]
   31688:	2200      	movs	r2, #0
   3168a:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   3168c:	68fb      	ldr	r3, [r7, #12]
   3168e:	683a      	ldr	r2, [r7, #0]
   31690:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   31692:	68fb      	ldr	r3, [r7, #12]
   31694:	69ba      	ldr	r2, [r7, #24]
   31696:	60da      	str	r2, [r3, #12]
}
   31698:	46c0      	nop			; (mov r8, r8)
   3169a:	46bd      	mov	sp, r7
   3169c:	b004      	add	sp, #16
   3169e:	bd80      	pop	{r7, pc}

000316a0 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   316a0:	b580      	push	{r7, lr}
   316a2:	b084      	sub	sp, #16
   316a4:	af00      	add	r7, sp, #0
   316a6:	6078      	str	r0, [r7, #4]
   316a8:	000a      	movs	r2, r1
   316aa:	1cfb      	adds	r3, r7, #3
   316ac:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   316ae:	687b      	ldr	r3, [r7, #4]
   316b0:	681a      	ldr	r2, [r3, #0]
   316b2:	687b      	ldr	r3, [r7, #4]
   316b4:	685b      	ldr	r3, [r3, #4]
   316b6:	1ad3      	subs	r3, r2, r3
   316b8:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   316ba:	68fb      	ldr	r3, [r7, #12]
   316bc:	2b00      	cmp	r3, #0
   316be:	dc03      	bgt.n	316c8 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   316c0:	687b      	ldr	r3, [r7, #4]
   316c2:	0018      	movs	r0, r3
   316c4:	4b08      	ldr	r3, [pc, #32]	; (316e8 <stream_writer_send_8+0x48>)
   316c6:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   316c8:	687b      	ldr	r3, [r7, #4]
   316ca:	6919      	ldr	r1, [r3, #16]
   316cc:	687b      	ldr	r3, [r7, #4]
   316ce:	685b      	ldr	r3, [r3, #4]
   316d0:	1c58      	adds	r0, r3, #1
   316d2:	687a      	ldr	r2, [r7, #4]
   316d4:	6050      	str	r0, [r2, #4]
   316d6:	18cb      	adds	r3, r1, r3
   316d8:	1cfa      	adds	r2, r7, #3
   316da:	7812      	ldrb	r2, [r2, #0]
   316dc:	701a      	strb	r2, [r3, #0]
}
   316de:	46c0      	nop			; (mov r8, r8)
   316e0:	46bd      	mov	sp, r7
   316e2:	b004      	add	sp, #16
   316e4:	bd80      	pop	{r7, pc}
   316e6:	46c0      	nop			; (mov r8, r8)
   316e8:	00031729 	.word	0x00031729

000316ec <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   316ec:	b580      	push	{r7, lr}
   316ee:	b084      	sub	sp, #16
   316f0:	af00      	add	r7, sp, #0
   316f2:	60f8      	str	r0, [r7, #12]
   316f4:	60b9      	str	r1, [r7, #8]
   316f6:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   316f8:	e00d      	b.n	31716 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   316fa:	68bb      	ldr	r3, [r7, #8]
   316fc:	781b      	ldrb	r3, [r3, #0]
   316fe:	b25a      	sxtb	r2, r3
   31700:	68fb      	ldr	r3, [r7, #12]
   31702:	0011      	movs	r1, r2
   31704:	0018      	movs	r0, r3
   31706:	4b07      	ldr	r3, [pc, #28]	; (31724 <stream_writer_send_buffer+0x38>)
   31708:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   3170a:	687b      	ldr	r3, [r7, #4]
   3170c:	3b01      	subs	r3, #1
   3170e:	607b      	str	r3, [r7, #4]
   31710:	68bb      	ldr	r3, [r7, #8]
   31712:	3301      	adds	r3, #1
   31714:	60bb      	str	r3, [r7, #8]
   31716:	687b      	ldr	r3, [r7, #4]
   31718:	2b00      	cmp	r3, #0
   3171a:	d1ee      	bne.n	316fa <stream_writer_send_buffer+0xe>
	}
}
   3171c:	46c0      	nop			; (mov r8, r8)
   3171e:	46bd      	mov	sp, r7
   31720:	b004      	add	sp, #16
   31722:	bd80      	pop	{r7, pc}
   31724:	000316a1 	.word	0x000316a1

00031728 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   31728:	b590      	push	{r4, r7, lr}
   3172a:	b083      	sub	sp, #12
   3172c:	af00      	add	r7, sp, #0
   3172e:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   31730:	687b      	ldr	r3, [r7, #4]
   31732:	685b      	ldr	r3, [r3, #4]
   31734:	2b00      	cmp	r3, #0
   31736:	d00c      	beq.n	31752 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   31738:	687b      	ldr	r3, [r7, #4]
   3173a:	689c      	ldr	r4, [r3, #8]
   3173c:	687b      	ldr	r3, [r7, #4]
   3173e:	68d8      	ldr	r0, [r3, #12]
   31740:	687b      	ldr	r3, [r7, #4]
   31742:	6919      	ldr	r1, [r3, #16]
   31744:	687b      	ldr	r3, [r7, #4]
   31746:	685b      	ldr	r3, [r3, #4]
   31748:	001a      	movs	r2, r3
   3174a:	47a0      	blx	r4
		writer->written = 0;
   3174c:	687b      	ldr	r3, [r7, #4]
   3174e:	2200      	movs	r2, #0
   31750:	605a      	str	r2, [r3, #4]
	}
}
   31752:	46c0      	nop			; (mov r8, r8)
   31754:	46bd      	mov	sp, r7
   31756:	b003      	add	sp, #12
   31758:	bd90      	pop	{r4, r7, pc}
	...

0003175c <system_cpu_clock_get_hz>:
{
   3175c:	b580      	push	{r7, lr}
   3175e:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   31760:	2000      	movs	r0, #0
   31762:	4b05      	ldr	r3, [pc, #20]	; (31778 <system_cpu_clock_get_hz+0x1c>)
   31764:	4798      	blx	r3
   31766:	0002      	movs	r2, r0
   31768:	4b04      	ldr	r3, [pc, #16]	; (3177c <system_cpu_clock_get_hz+0x20>)
   3176a:	7a1b      	ldrb	r3, [r3, #8]
   3176c:	b2db      	uxtb	r3, r3
   3176e:	40da      	lsrs	r2, r3
   31770:	0013      	movs	r3, r2
}
   31772:	0018      	movs	r0, r3
   31774:	46bd      	mov	sp, r7
   31776:	bd80      	pop	{r7, pc}
   31778:	0002913d 	.word	0x0002913d
   3177c:	40000400 	.word	0x40000400

00031780 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   31780:	b580      	push	{r7, lr}
   31782:	b084      	sub	sp, #16
   31784:	af00      	add	r7, sp, #0
   31786:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   31788:	687b      	ldr	r3, [r7, #4]
   3178a:	681b      	ldr	r3, [r3, #0]
   3178c:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   3178e:	46c0      	nop			; (mov r8, r8)
   31790:	68fb      	ldr	r3, [r7, #12]
   31792:	689b      	ldr	r3, [r3, #8]
   31794:	2202      	movs	r2, #2
   31796:	4013      	ands	r3, r2
   31798:	d1fa      	bne.n	31790 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   3179a:	68fb      	ldr	r3, [r7, #12]
   3179c:	681b      	ldr	r3, [r3, #0]
   3179e:	2202      	movs	r2, #2
   317a0:	431a      	orrs	r2, r3
   317a2:	68fb      	ldr	r3, [r7, #12]
   317a4:	601a      	str	r2, [r3, #0]
}
   317a6:	46c0      	nop			; (mov r8, r8)
   317a8:	46bd      	mov	sp, r7
   317aa:	b004      	add	sp, #16
   317ac:	bd80      	pop	{r7, pc}
	...

000317b0 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   317b0:	b580      	push	{r7, lr}
   317b2:	b082      	sub	sp, #8
   317b4:	af00      	add	r7, sp, #0
   317b6:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   317b8:	4b04      	ldr	r3, [pc, #16]	; (317cc <sw_timer_tcc_callback+0x1c>)
   317ba:	681b      	ldr	r3, [r3, #0]
   317bc:	1c5a      	adds	r2, r3, #1
   317be:	4b03      	ldr	r3, [pc, #12]	; (317cc <sw_timer_tcc_callback+0x1c>)
   317c0:	601a      	str	r2, [r3, #0]
}
   317c2:	46c0      	nop			; (mov r8, r8)
   317c4:	46bd      	mov	sp, r7
   317c6:	b002      	add	sp, #8
   317c8:	bd80      	pop	{r7, pc}
   317ca:	46c0      	nop			; (mov r8, r8)
   317cc:	20004268 	.word	0x20004268

000317d0 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   317d0:	b580      	push	{r7, lr}
   317d2:	b082      	sub	sp, #8
   317d4:	af00      	add	r7, sp, #0
   317d6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   317d8:	687b      	ldr	r3, [r7, #4]
   317da:	2264      	movs	r2, #100	; 0x64
   317dc:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   317de:	687b      	ldr	r3, [r7, #4]
   317e0:	2200      	movs	r2, #0
   317e2:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   317e4:	687b      	ldr	r3, [r7, #4]
   317e6:	2200      	movs	r2, #0
   317e8:	705a      	strb	r2, [r3, #1]
}
   317ea:	46c0      	nop			; (mov r8, r8)
   317ec:	46bd      	mov	sp, r7
   317ee:	b002      	add	sp, #8
   317f0:	bd80      	pop	{r7, pc}
	...

000317f4 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   317f4:	b590      	push	{r4, r7, lr}
   317f6:	b0b1      	sub	sp, #196	; 0xc4
   317f8:	af00      	add	r7, sp, #0
   317fa:	6078      	str	r0, [r7, #4]
   317fc:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   317fe:	230c      	movs	r3, #12
   31800:	18fb      	adds	r3, r7, r3
   31802:	4a2e      	ldr	r2, [pc, #184]	; (318bc <sw_timer_init+0xc8>)
   31804:	ca13      	ldmia	r2!, {r0, r1, r4}
   31806:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   31808:	683b      	ldr	r3, [r7, #0]
   3180a:	885b      	ldrh	r3, [r3, #2]
   3180c:	001a      	movs	r2, r3
   3180e:	687b      	ldr	r3, [r7, #4]
   31810:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   31812:	687b      	ldr	r3, [r7, #4]
   31814:	3314      	adds	r3, #20
   31816:	22bc      	movs	r2, #188	; 0xbc
   31818:	18ba      	adds	r2, r7, r2
   3181a:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   3181c:	683b      	ldr	r3, [r7, #0]
   3181e:	781b      	ldrb	r3, [r3, #0]
   31820:	001a      	movs	r2, r3
   31822:	230c      	movs	r3, #12
   31824:	18fb      	adds	r3, r7, r3
   31826:	0092      	lsls	r2, r2, #2
   31828:	58d2      	ldr	r2, [r2, r3]
   3182a:	2318      	movs	r3, #24
   3182c:	18fb      	adds	r3, r7, r3
   3182e:	0011      	movs	r1, r2
   31830:	0018      	movs	r0, r3
   31832:	4b23      	ldr	r3, [pc, #140]	; (318c0 <sw_timer_init+0xcc>)
   31834:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   31836:	4b23      	ldr	r3, [pc, #140]	; (318c4 <sw_timer_init+0xd0>)
   31838:	4798      	blx	r3
   3183a:	0004      	movs	r4, r0
   3183c:	683b      	ldr	r3, [r7, #0]
   3183e:	885b      	ldrh	r3, [r3, #2]
   31840:	001a      	movs	r2, r3
   31842:	4b21      	ldr	r3, [pc, #132]	; (318c8 <sw_timer_init+0xd4>)
   31844:	0011      	movs	r1, r2
   31846:	22fa      	movs	r2, #250	; 0xfa
   31848:	0210      	lsls	r0, r2, #8
   3184a:	4798      	blx	r3
   3184c:	0003      	movs	r3, r0
   3184e:	001a      	movs	r2, r3
   31850:	4b1e      	ldr	r3, [pc, #120]	; (318cc <sw_timer_init+0xd8>)
   31852:	0011      	movs	r1, r2
   31854:	0020      	movs	r0, r4
   31856:	4798      	blx	r3
   31858:	0003      	movs	r3, r0
   3185a:	001a      	movs	r2, r3
   3185c:	2318      	movs	r3, #24
   3185e:	18fb      	adds	r3, r7, r3
   31860:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   31862:	2318      	movs	r3, #24
   31864:	18fb      	adds	r3, r7, r3
   31866:	2205      	movs	r2, #5
   31868:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   3186a:	683b      	ldr	r3, [r7, #0]
   3186c:	781b      	ldrb	r3, [r3, #0]
   3186e:	001a      	movs	r2, r3
   31870:	230c      	movs	r3, #12
   31872:	18fb      	adds	r3, r7, r3
   31874:	0092      	lsls	r2, r2, #2
   31876:	58d1      	ldr	r1, [r2, r3]
   31878:	2318      	movs	r3, #24
   3187a:	18fa      	adds	r2, r7, r3
   3187c:	23bc      	movs	r3, #188	; 0xbc
   3187e:	18fb      	adds	r3, r7, r3
   31880:	681b      	ldr	r3, [r3, #0]
   31882:	0018      	movs	r0, r3
   31884:	4b12      	ldr	r3, [pc, #72]	; (318d0 <sw_timer_init+0xdc>)
   31886:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   31888:	683b      	ldr	r3, [r7, #0]
   3188a:	785b      	ldrb	r3, [r3, #1]
   3188c:	3308      	adds	r3, #8
   3188e:	b2da      	uxtb	r2, r3
   31890:	4910      	ldr	r1, [pc, #64]	; (318d4 <sw_timer_init+0xe0>)
   31892:	23bc      	movs	r3, #188	; 0xbc
   31894:	18fb      	adds	r3, r7, r3
   31896:	681b      	ldr	r3, [r3, #0]
   31898:	0018      	movs	r0, r3
   3189a:	4b0f      	ldr	r3, [pc, #60]	; (318d8 <sw_timer_init+0xe4>)
   3189c:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   3189e:	683b      	ldr	r3, [r7, #0]
   318a0:	785b      	ldrb	r3, [r3, #1]
   318a2:	3308      	adds	r3, #8
   318a4:	b2da      	uxtb	r2, r3
   318a6:	23bc      	movs	r3, #188	; 0xbc
   318a8:	18fb      	adds	r3, r7, r3
   318aa:	681b      	ldr	r3, [r3, #0]
   318ac:	0011      	movs	r1, r2
   318ae:	0018      	movs	r0, r3
   318b0:	4b0a      	ldr	r3, [pc, #40]	; (318dc <sw_timer_init+0xe8>)
   318b2:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   318b4:	46c0      	nop			; (mov r8, r8)
   318b6:	46bd      	mov	sp, r7
   318b8:	b031      	add	sp, #196	; 0xc4
   318ba:	bd90      	pop	{r4, r7, pc}
   318bc:	00038c00 	.word	0x00038c00
   318c0:	000296d5 	.word	0x000296d5
   318c4:	0003175d 	.word	0x0003175d
   318c8:	00031e59 	.word	0x00031e59
   318cc:	00031d45 	.word	0x00031d45
   318d0:	00029d31 	.word	0x00029d31
   318d4:	000317b1 	.word	0x000317b1
   318d8:	0002a149 	.word	0x0002a149
   318dc:	0002a189 	.word	0x0002a189

000318e0 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   318e0:	b580      	push	{r7, lr}
   318e2:	b084      	sub	sp, #16
   318e4:	af00      	add	r7, sp, #0
   318e6:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   318e8:	687b      	ldr	r3, [r7, #4]
   318ea:	3314      	adds	r3, #20
   318ec:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   318ee:	68fb      	ldr	r3, [r7, #12]
   318f0:	0018      	movs	r0, r3
   318f2:	4b03      	ldr	r3, [pc, #12]	; (31900 <sw_timer_enable+0x20>)
   318f4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   318f6:	46c0      	nop			; (mov r8, r8)
   318f8:	46bd      	mov	sp, r7
   318fa:	b004      	add	sp, #16
   318fc:	bd80      	pop	{r7, pc}
   318fe:	46c0      	nop			; (mov r8, r8)
   31900:	00031781 	.word	0x00031781

00031904 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   31904:	b580      	push	{r7, lr}
   31906:	b086      	sub	sp, #24
   31908:	af00      	add	r7, sp, #0
   3190a:	60f8      	str	r0, [r7, #12]
   3190c:	60b9      	str	r1, [r7, #8]
   3190e:	607a      	str	r2, [r7, #4]
   31910:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31912:	2300      	movs	r3, #0
   31914:	617b      	str	r3, [r7, #20]
   31916:	e032      	b.n	3197e <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   31918:	68f9      	ldr	r1, [r7, #12]
   3191a:	697a      	ldr	r2, [r7, #20]
   3191c:	0013      	movs	r3, r2
   3191e:	009b      	lsls	r3, r3, #2
   31920:	189b      	adds	r3, r3, r2
   31922:	009b      	lsls	r3, r3, #2
   31924:	5c5b      	ldrb	r3, [r3, r1]
   31926:	07db      	lsls	r3, r3, #31
   31928:	0fdb      	lsrs	r3, r3, #31
   3192a:	b2db      	uxtb	r3, r3
   3192c:	2b00      	cmp	r3, #0
   3192e:	d123      	bne.n	31978 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   31930:	697a      	ldr	r2, [r7, #20]
   31932:	0013      	movs	r3, r2
   31934:	009b      	lsls	r3, r3, #2
   31936:	189b      	adds	r3, r3, r2
   31938:	009b      	lsls	r3, r3, #2
   3193a:	68fa      	ldr	r2, [r7, #12]
   3193c:	18d3      	adds	r3, r2, r3
   3193e:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   31940:	693b      	ldr	r3, [r7, #16]
   31942:	68ba      	ldr	r2, [r7, #8]
   31944:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   31946:	693b      	ldr	r3, [r7, #16]
   31948:	781a      	ldrb	r2, [r3, #0]
   3194a:	2102      	movs	r1, #2
   3194c:	438a      	bics	r2, r1
   3194e:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   31950:	693b      	ldr	r3, [r7, #16]
   31952:	687a      	ldr	r2, [r7, #4]
   31954:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   31956:	68fb      	ldr	r3, [r7, #12]
   31958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3195a:	4b0d      	ldr	r3, [pc, #52]	; (31990 <sw_timer_register_callback+0x8c>)
   3195c:	0011      	movs	r1, r2
   3195e:	6838      	ldr	r0, [r7, #0]
   31960:	4798      	blx	r3
   31962:	0003      	movs	r3, r0
   31964:	001a      	movs	r2, r3
   31966:	693b      	ldr	r3, [r7, #16]
   31968:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   3196a:	693b      	ldr	r3, [r7, #16]
   3196c:	781a      	ldrb	r2, [r3, #0]
   3196e:	2101      	movs	r1, #1
   31970:	430a      	orrs	r2, r1
   31972:	701a      	strb	r2, [r3, #0]
			return index;
   31974:	697b      	ldr	r3, [r7, #20]
   31976:	e007      	b.n	31988 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31978:	697b      	ldr	r3, [r7, #20]
   3197a:	3301      	adds	r3, #1
   3197c:	617b      	str	r3, [r7, #20]
   3197e:	697b      	ldr	r3, [r7, #20]
   31980:	2b00      	cmp	r3, #0
   31982:	ddc9      	ble.n	31918 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   31984:	2301      	movs	r3, #1
   31986:	425b      	negs	r3, r3
}
   31988:	0018      	movs	r0, r3
   3198a:	46bd      	mov	sp, r7
   3198c:	b006      	add	sp, #24
   3198e:	bd80      	pop	{r7, pc}
   31990:	00031d45 	.word	0x00031d45

00031994 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   31994:	b580      	push	{r7, lr}
   31996:	b086      	sub	sp, #24
   31998:	af00      	add	r7, sp, #0
   3199a:	60f8      	str	r0, [r7, #12]
   3199c:	60b9      	str	r1, [r7, #8]
   3199e:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   319a0:	68ba      	ldr	r2, [r7, #8]
   319a2:	0013      	movs	r3, r2
   319a4:	009b      	lsls	r3, r3, #2
   319a6:	189b      	adds	r3, r3, r2
   319a8:	009b      	lsls	r3, r3, #2
   319aa:	68fa      	ldr	r2, [r7, #12]
   319ac:	18d3      	adds	r3, r2, r3
   319ae:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   319b0:	697b      	ldr	r3, [r7, #20]
   319b2:	781a      	ldrb	r2, [r3, #0]
   319b4:	2102      	movs	r1, #2
   319b6:	430a      	orrs	r2, r1
   319b8:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   319ba:	68fb      	ldr	r3, [r7, #12]
   319bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   319be:	4b07      	ldr	r3, [pc, #28]	; (319dc <sw_timer_enable_callback+0x48>)
   319c0:	0011      	movs	r1, r2
   319c2:	6878      	ldr	r0, [r7, #4]
   319c4:	4798      	blx	r3
   319c6:	0003      	movs	r3, r0
   319c8:	001a      	movs	r2, r3
   319ca:	4b05      	ldr	r3, [pc, #20]	; (319e0 <sw_timer_enable_callback+0x4c>)
   319cc:	681b      	ldr	r3, [r3, #0]
   319ce:	18d2      	adds	r2, r2, r3
   319d0:	697b      	ldr	r3, [r7, #20]
   319d2:	611a      	str	r2, [r3, #16]
}
   319d4:	46c0      	nop			; (mov r8, r8)
   319d6:	46bd      	mov	sp, r7
   319d8:	b006      	add	sp, #24
   319da:	bd80      	pop	{r7, pc}
   319dc:	00031d45 	.word	0x00031d45
   319e0:	20004268 	.word	0x20004268

000319e4 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   319e4:	b580      	push	{r7, lr}
   319e6:	b084      	sub	sp, #16
   319e8:	af00      	add	r7, sp, #0
   319ea:	6078      	str	r0, [r7, #4]
   319ec:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   319ee:	683a      	ldr	r2, [r7, #0]
   319f0:	0013      	movs	r3, r2
   319f2:	009b      	lsls	r3, r3, #2
   319f4:	189b      	adds	r3, r3, r2
   319f6:	009b      	lsls	r3, r3, #2
   319f8:	687a      	ldr	r2, [r7, #4]
   319fa:	18d3      	adds	r3, r2, r3
   319fc:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   319fe:	68fb      	ldr	r3, [r7, #12]
   31a00:	781a      	ldrb	r2, [r3, #0]
   31a02:	2102      	movs	r1, #2
   31a04:	438a      	bics	r2, r1
   31a06:	701a      	strb	r2, [r3, #0]
}
   31a08:	46c0      	nop			; (mov r8, r8)
   31a0a:	46bd      	mov	sp, r7
   31a0c:	b004      	add	sp, #16
   31a0e:	bd80      	pop	{r7, pc}

00031a10 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   31a10:	b590      	push	{r4, r7, lr}
   31a12:	b085      	sub	sp, #20
   31a14:	af00      	add	r7, sp, #0
   31a16:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31a18:	2300      	movs	r3, #0
   31a1a:	60fb      	str	r3, [r7, #12]
   31a1c:	e053      	b.n	31ac6 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   31a1e:	6879      	ldr	r1, [r7, #4]
   31a20:	68fa      	ldr	r2, [r7, #12]
   31a22:	0013      	movs	r3, r2
   31a24:	009b      	lsls	r3, r3, #2
   31a26:	189b      	adds	r3, r3, r2
   31a28:	009b      	lsls	r3, r3, #2
   31a2a:	5c5b      	ldrb	r3, [r3, r1]
   31a2c:	07db      	lsls	r3, r3, #31
   31a2e:	0fdb      	lsrs	r3, r3, #31
   31a30:	b2db      	uxtb	r3, r3
   31a32:	2b00      	cmp	r3, #0
   31a34:	d044      	beq.n	31ac0 <sw_timer_task+0xb0>
   31a36:	6879      	ldr	r1, [r7, #4]
   31a38:	68fa      	ldr	r2, [r7, #12]
   31a3a:	0013      	movs	r3, r2
   31a3c:	009b      	lsls	r3, r3, #2
   31a3e:	189b      	adds	r3, r3, r2
   31a40:	009b      	lsls	r3, r3, #2
   31a42:	5c5b      	ldrb	r3, [r3, r1]
   31a44:	079b      	lsls	r3, r3, #30
   31a46:	0fdb      	lsrs	r3, r3, #31
   31a48:	b2db      	uxtb	r3, r3
   31a4a:	2b00      	cmp	r3, #0
   31a4c:	d038      	beq.n	31ac0 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   31a4e:	68fa      	ldr	r2, [r7, #12]
   31a50:	0013      	movs	r3, r2
   31a52:	009b      	lsls	r3, r3, #2
   31a54:	189b      	adds	r3, r3, r2
   31a56:	009b      	lsls	r3, r3, #2
   31a58:	687a      	ldr	r2, [r7, #4]
   31a5a:	18d3      	adds	r3, r2, r3
   31a5c:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   31a5e:	68bb      	ldr	r3, [r7, #8]
   31a60:	691a      	ldr	r2, [r3, #16]
   31a62:	4b1c      	ldr	r3, [pc, #112]	; (31ad4 <sw_timer_task+0xc4>)
   31a64:	681b      	ldr	r3, [r3, #0]
   31a66:	1ad3      	subs	r3, r2, r3
   31a68:	d52a      	bpl.n	31ac0 <sw_timer_task+0xb0>
   31a6a:	68bb      	ldr	r3, [r7, #8]
   31a6c:	781b      	ldrb	r3, [r3, #0]
   31a6e:	2204      	movs	r2, #4
   31a70:	4013      	ands	r3, r2
   31a72:	b2db      	uxtb	r3, r3
   31a74:	2b00      	cmp	r3, #0
   31a76:	d123      	bne.n	31ac0 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   31a78:	68bb      	ldr	r3, [r7, #8]
   31a7a:	781a      	ldrb	r2, [r3, #0]
   31a7c:	2104      	movs	r1, #4
   31a7e:	430a      	orrs	r2, r1
   31a80:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   31a82:	68bb      	ldr	r3, [r7, #8]
   31a84:	68db      	ldr	r3, [r3, #12]
   31a86:	2b00      	cmp	r3, #0
   31a88:	d007      	beq.n	31a9a <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   31a8a:	68bb      	ldr	r3, [r7, #8]
   31a8c:	68da      	ldr	r2, [r3, #12]
   31a8e:	4b11      	ldr	r3, [pc, #68]	; (31ad4 <sw_timer_task+0xc4>)
   31a90:	681b      	ldr	r3, [r3, #0]
   31a92:	18d2      	adds	r2, r2, r3
   31a94:	68bb      	ldr	r3, [r7, #8]
   31a96:	611a      	str	r2, [r3, #16]
   31a98:	e004      	b.n	31aa4 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   31a9a:	68bb      	ldr	r3, [r7, #8]
   31a9c:	781a      	ldrb	r2, [r3, #0]
   31a9e:	2102      	movs	r1, #2
   31aa0:	438a      	bics	r2, r1
   31aa2:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   31aa4:	68bb      	ldr	r3, [r7, #8]
   31aa6:	685c      	ldr	r4, [r3, #4]
   31aa8:	68bb      	ldr	r3, [r7, #8]
   31aaa:	689a      	ldr	r2, [r3, #8]
   31aac:	68bb      	ldr	r3, [r7, #8]
   31aae:	68db      	ldr	r3, [r3, #12]
   31ab0:	68f9      	ldr	r1, [r7, #12]
   31ab2:	6878      	ldr	r0, [r7, #4]
   31ab4:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   31ab6:	68bb      	ldr	r3, [r7, #8]
   31ab8:	781a      	ldrb	r2, [r3, #0]
   31aba:	2104      	movs	r1, #4
   31abc:	438a      	bics	r2, r1
   31abe:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31ac0:	68fb      	ldr	r3, [r7, #12]
   31ac2:	3301      	adds	r3, #1
   31ac4:	60fb      	str	r3, [r7, #12]
   31ac6:	68fb      	ldr	r3, [r7, #12]
   31ac8:	2b00      	cmp	r3, #0
   31aca:	dda8      	ble.n	31a1e <sw_timer_task+0xe>
			}
		}
	}
}
   31acc:	46c0      	nop			; (mov r8, r8)
   31ace:	46bd      	mov	sp, r7
   31ad0:	b005      	add	sp, #20
   31ad2:	bd90      	pop	{r4, r7, pc}
   31ad4:	20004268 	.word	0x20004268

00031ad8 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
   31ad8:	b580      	push	{r7, lr}
   31ada:	af00      	add	r7, sp, #0
	/* Initialize the board. */
	system_init();
   31adc:	4b06      	ldr	r3, [pc, #24]	; (31af8 <main+0x20>)
   31ade:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
   31ae0:	4b06      	ldr	r3, [pc, #24]	; (31afc <main+0x24>)
   31ae2:	4798      	blx	r3

	//Initialize trace capabilities
	 vTraceEnable(TRC_START);
   31ae4:	2001      	movs	r0, #1
   31ae6:	4b06      	ldr	r3, [pc, #24]	; (31b00 <main+0x28>)
   31ae8:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   31aea:	4b06      	ldr	r3, [pc, #24]	; (31b04 <main+0x2c>)
   31aec:	4798      	blx	r3

	return 0; //Will not get here
   31aee:	2300      	movs	r3, #0
}
   31af0:	0018      	movs	r0, r3
   31af2:	46bd      	mov	sp, r7
   31af4:	bd80      	pop	{r7, pc}
   31af6:	46c0      	nop			; (mov r8, r8)
   31af8:	000295c9 	.word	0x000295c9
   31afc:	0001d0d9 	.word	0x0001d0d9
   31b00:	000177a1 	.word	0x000177a1
   31b04:	0001b731 	.word	0x0001b731

00031b08 <vApplicationDaemonTaskStartupHook>:
*					here will be called before other tasks are initilized.
* @param[in]        None
* @return           None
*****************************************************************************/
void vApplicationDaemonTaskStartupHook(void)
{
   31b08:	b580      	push	{r7, lr}
   31b0a:	af00      	add	r7, sp, #0
	SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   31b0c:	4b15      	ldr	r3, [pc, #84]	; (31b64 <vApplicationDaemonTaskStartupHook+0x5c>)
   31b0e:	0018      	movs	r0, r3
   31b10:	4b15      	ldr	r3, [pc, #84]	; (31b68 <vApplicationDaemonTaskStartupHook+0x60>)
   31b12:	4798      	blx	r3

	//Initialize HW that needs FreeRTOS Initialization
	SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   31b14:	4b15      	ldr	r3, [pc, #84]	; (31b6c <vApplicationDaemonTaskStartupHook+0x64>)
   31b16:	0018      	movs	r0, r3
   31b18:	4b13      	ldr	r3, [pc, #76]	; (31b68 <vApplicationDaemonTaskStartupHook+0x60>)
   31b1a:	4798      	blx	r3
	if (I2cInitializeDriver() != STATUS_OK)
   31b1c:	4b14      	ldr	r3, [pc, #80]	; (31b70 <vApplicationDaemonTaskStartupHook+0x68>)
   31b1e:	4798      	blx	r3
   31b20:	1e03      	subs	r3, r0, #0
   31b22:	d004      	beq.n	31b2e <vApplicationDaemonTaskStartupHook+0x26>
	{
		SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   31b24:	4b13      	ldr	r3, [pc, #76]	; (31b74 <vApplicationDaemonTaskStartupHook+0x6c>)
   31b26:	0018      	movs	r0, r3
   31b28:	4b0f      	ldr	r3, [pc, #60]	; (31b68 <vApplicationDaemonTaskStartupHook+0x60>)
   31b2a:	4798      	blx	r3
   31b2c:	e003      	b.n	31b36 <vApplicationDaemonTaskStartupHook+0x2e>
	}
	else
	{
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   31b2e:	4b12      	ldr	r3, [pc, #72]	; (31b78 <vApplicationDaemonTaskStartupHook+0x70>)
   31b30:	0018      	movs	r0, r3
   31b32:	4b0d      	ldr	r3, [pc, #52]	; (31b68 <vApplicationDaemonTaskStartupHook+0x60>)
   31b34:	4798      	blx	r3
	}

	if(0 != InitializeSeesaw())
   31b36:	4b11      	ldr	r3, [pc, #68]	; (31b7c <vApplicationDaemonTaskStartupHook+0x74>)
   31b38:	4798      	blx	r3
   31b3a:	1e03      	subs	r3, r0, #0
   31b3c:	d004      	beq.n	31b48 <vApplicationDaemonTaskStartupHook+0x40>
	{
		SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   31b3e:	4b10      	ldr	r3, [pc, #64]	; (31b80 <vApplicationDaemonTaskStartupHook+0x78>)
   31b40:	0018      	movs	r0, r3
   31b42:	4b09      	ldr	r3, [pc, #36]	; (31b68 <vApplicationDaemonTaskStartupHook+0x60>)
   31b44:	4798      	blx	r3
   31b46:	e003      	b.n	31b50 <vApplicationDaemonTaskStartupHook+0x48>
	}	
	else
	{
		SerialConsoleWriteString("Initialized Seesaw!\r\n");
   31b48:	4b0e      	ldr	r3, [pc, #56]	; (31b84 <vApplicationDaemonTaskStartupHook+0x7c>)
   31b4a:	0018      	movs	r0, r3
   31b4c:	4b06      	ldr	r3, [pc, #24]	; (31b68 <vApplicationDaemonTaskStartupHook+0x60>)
   31b4e:	4798      	blx	r3
// 	{
// 		SerialConsoleWriteString("Could not initialize IMU\r\n");
// 	}


	StartTasks();
   31b50:	4b0d      	ldr	r3, [pc, #52]	; (31b88 <vApplicationDaemonTaskStartupHook+0x80>)
   31b52:	4798      	blx	r3

	vTaskSuspend(daemonTaskHandle);
   31b54:	4b0d      	ldr	r3, [pc, #52]	; (31b8c <vApplicationDaemonTaskStartupHook+0x84>)
   31b56:	681b      	ldr	r3, [r3, #0]
   31b58:	0018      	movs	r0, r3
   31b5a:	4b0d      	ldr	r3, [pc, #52]	; (31b90 <vApplicationDaemonTaskStartupHook+0x88>)
   31b5c:	4798      	blx	r3
}
   31b5e:	46c0      	nop			; (mov r8, r8)
   31b60:	46bd      	mov	sp, r7
   31b62:	bd80      	pop	{r7, pc}
   31b64:	00038c0c 	.word	0x00038c0c
   31b68:	0001d149 	.word	0x0001d149
   31b6c:	00038c30 	.word	0x00038c30
   31b70:	00015f69 	.word	0x00015f69
   31b74:	00038c48 	.word	0x00038c48
   31b78:	00038c6c 	.word	0x00038c6c
   31b7c:	00016399 	.word	0x00016399
   31b80:	00038c88 	.word	0x00038c88
   31b84:	00038ca8 	.word	0x00038ca8
   31b88:	00031b95 	.word	0x00031b95
   31b8c:	20004270 	.word	0x20004270
   31b90:	0001b5d5 	.word	0x0001b5d5

00031b94 <StartTasks>:
* @details
* @param[in]        None
* @return           None
*****************************************************************************/
static void StartTasks(void)
{
   31b94:	b590      	push	{r4, r7, lr}
   31b96:	b083      	sub	sp, #12
   31b98:	af02      	add	r7, sp, #8

	snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   31b9a:	4b44      	ldr	r3, [pc, #272]	; (31cac <StartTasks+0x118>)
   31b9c:	4798      	blx	r3
   31b9e:	0003      	movs	r3, r0
   31ba0:	4a43      	ldr	r2, [pc, #268]	; (31cb0 <StartTasks+0x11c>)
   31ba2:	4844      	ldr	r0, [pc, #272]	; (31cb4 <StartTasks+0x120>)
   31ba4:	2140      	movs	r1, #64	; 0x40
   31ba6:	4c44      	ldr	r4, [pc, #272]	; (31cb8 <StartTasks+0x124>)
   31ba8:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   31baa:	4b42      	ldr	r3, [pc, #264]	; (31cb4 <StartTasks+0x120>)
   31bac:	0018      	movs	r0, r3
   31bae:	4b43      	ldr	r3, [pc, #268]	; (31cbc <StartTasks+0x128>)
   31bb0:	4798      	blx	r3

	//Initialize Tasks here

	if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   31bb2:	2380      	movs	r3, #128	; 0x80
   31bb4:	005a      	lsls	r2, r3, #1
   31bb6:	4942      	ldr	r1, [pc, #264]	; (31cc0 <StartTasks+0x12c>)
   31bb8:	4842      	ldr	r0, [pc, #264]	; (31cc4 <StartTasks+0x130>)
   31bba:	4b43      	ldr	r3, [pc, #268]	; (31cc8 <StartTasks+0x134>)
   31bbc:	9301      	str	r3, [sp, #4]
   31bbe:	2304      	movs	r3, #4
   31bc0:	9300      	str	r3, [sp, #0]
   31bc2:	2300      	movs	r3, #0
   31bc4:	4c41      	ldr	r4, [pc, #260]	; (31ccc <StartTasks+0x138>)
   31bc6:	47a0      	blx	r4
   31bc8:	0003      	movs	r3, r0
   31bca:	2b01      	cmp	r3, #1
   31bcc:	d003      	beq.n	31bd6 <StartTasks+0x42>
		SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   31bce:	4b40      	ldr	r3, [pc, #256]	; (31cd0 <StartTasks+0x13c>)
   31bd0:	0018      	movs	r0, r3
   31bd2:	4b3a      	ldr	r3, [pc, #232]	; (31cbc <StartTasks+0x128>)
   31bd4:	4798      	blx	r3
	}

	snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   31bd6:	4b35      	ldr	r3, [pc, #212]	; (31cac <StartTasks+0x118>)
   31bd8:	4798      	blx	r3
   31bda:	0003      	movs	r3, r0
   31bdc:	4a3d      	ldr	r2, [pc, #244]	; (31cd4 <StartTasks+0x140>)
   31bde:	4835      	ldr	r0, [pc, #212]	; (31cb4 <StartTasks+0x120>)
   31be0:	2140      	movs	r1, #64	; 0x40
   31be2:	4c35      	ldr	r4, [pc, #212]	; (31cb8 <StartTasks+0x124>)
   31be4:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   31be6:	4b33      	ldr	r3, [pc, #204]	; (31cb4 <StartTasks+0x120>)
   31be8:	0018      	movs	r0, r3
   31bea:	4b34      	ldr	r3, [pc, #208]	; (31cbc <StartTasks+0x128>)
   31bec:	4798      	blx	r3


	if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   31bee:	23fa      	movs	r3, #250	; 0xfa
   31bf0:	009a      	lsls	r2, r3, #2
   31bf2:	4939      	ldr	r1, [pc, #228]	; (31cd8 <StartTasks+0x144>)
   31bf4:	4839      	ldr	r0, [pc, #228]	; (31cdc <StartTasks+0x148>)
   31bf6:	4b3a      	ldr	r3, [pc, #232]	; (31ce0 <StartTasks+0x14c>)
   31bf8:	9301      	str	r3, [sp, #4]
   31bfa:	2303      	movs	r3, #3
   31bfc:	9300      	str	r3, [sp, #0]
   31bfe:	2300      	movs	r3, #0
   31c00:	4c32      	ldr	r4, [pc, #200]	; (31ccc <StartTasks+0x138>)
   31c02:	47a0      	blx	r4
   31c04:	0003      	movs	r3, r0
   31c06:	2b01      	cmp	r3, #1
   31c08:	d003      	beq.n	31c12 <StartTasks+0x7e>
		SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   31c0a:	4b36      	ldr	r3, [pc, #216]	; (31ce4 <StartTasks+0x150>)
   31c0c:	0018      	movs	r0, r3
   31c0e:	4b2b      	ldr	r3, [pc, #172]	; (31cbc <StartTasks+0x128>)
   31c10:	4798      	blx	r3
	}
	snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   31c12:	4b26      	ldr	r3, [pc, #152]	; (31cac <StartTasks+0x118>)
   31c14:	4798      	blx	r3
   31c16:	0003      	movs	r3, r0
   31c18:	4a33      	ldr	r2, [pc, #204]	; (31ce8 <StartTasks+0x154>)
   31c1a:	4826      	ldr	r0, [pc, #152]	; (31cb4 <StartTasks+0x120>)
   31c1c:	2140      	movs	r1, #64	; 0x40
   31c1e:	4c26      	ldr	r4, [pc, #152]	; (31cb8 <StartTasks+0x124>)
   31c20:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   31c22:	4b24      	ldr	r3, [pc, #144]	; (31cb4 <StartTasks+0x120>)
   31c24:	0018      	movs	r0, r3
   31c26:	4b25      	ldr	r3, [pc, #148]	; (31cbc <StartTasks+0x128>)
   31c28:	4798      	blx	r3


	if(xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   31c2a:	23c8      	movs	r3, #200	; 0xc8
   31c2c:	005a      	lsls	r2, r3, #1
   31c2e:	492f      	ldr	r1, [pc, #188]	; (31cec <StartTasks+0x158>)
   31c30:	482f      	ldr	r0, [pc, #188]	; (31cf0 <StartTasks+0x15c>)
   31c32:	4b30      	ldr	r3, [pc, #192]	; (31cf4 <StartTasks+0x160>)
   31c34:	9301      	str	r3, [sp, #4]
   31c36:	2302      	movs	r3, #2
   31c38:	9300      	str	r3, [sp, #0]
   31c3a:	2300      	movs	r3, #0
   31c3c:	4c23      	ldr	r4, [pc, #140]	; (31ccc <StartTasks+0x138>)
   31c3e:	47a0      	blx	r4
   31c40:	0003      	movs	r3, r0
   31c42:	2b01      	cmp	r3, #1
   31c44:	d003      	beq.n	31c4e <StartTasks+0xba>
		SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   31c46:	4b2c      	ldr	r3, [pc, #176]	; (31cf8 <StartTasks+0x164>)
   31c48:	0018      	movs	r0, r3
   31c4a:	4b1c      	ldr	r3, [pc, #112]	; (31cbc <StartTasks+0x128>)
   31c4c:	4798      	blx	r3
	}

	snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   31c4e:	4b17      	ldr	r3, [pc, #92]	; (31cac <StartTasks+0x118>)
   31c50:	4798      	blx	r3
   31c52:	0003      	movs	r3, r0
   31c54:	4a29      	ldr	r2, [pc, #164]	; (31cfc <StartTasks+0x168>)
   31c56:	4817      	ldr	r0, [pc, #92]	; (31cb4 <StartTasks+0x120>)
   31c58:	2140      	movs	r1, #64	; 0x40
   31c5a:	4c17      	ldr	r4, [pc, #92]	; (31cb8 <StartTasks+0x124>)
   31c5c:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   31c5e:	4b15      	ldr	r3, [pc, #84]	; (31cb4 <StartTasks+0x120>)
   31c60:	0018      	movs	r0, r3
   31c62:	4b16      	ldr	r3, [pc, #88]	; (31cbc <StartTasks+0x128>)
   31c64:	4798      	blx	r3

	if(xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   31c66:	2380      	movs	r3, #128	; 0x80
   31c68:	005a      	lsls	r2, r3, #1
   31c6a:	4925      	ldr	r1, [pc, #148]	; (31d00 <StartTasks+0x16c>)
   31c6c:	4825      	ldr	r0, [pc, #148]	; (31d04 <StartTasks+0x170>)
   31c6e:	4b26      	ldr	r3, [pc, #152]	; (31d08 <StartTasks+0x174>)
   31c70:	9301      	str	r3, [sp, #4]
   31c72:	2304      	movs	r3, #4
   31c74:	9300      	str	r3, [sp, #0]
   31c76:	2300      	movs	r3, #0
   31c78:	4c14      	ldr	r4, [pc, #80]	; (31ccc <StartTasks+0x138>)
   31c7a:	47a0      	blx	r4
   31c7c:	0003      	movs	r3, r0
   31c7e:	2b01      	cmp	r3, #1
   31c80:	d003      	beq.n	31c8a <StartTasks+0xf6>
		SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   31c82:	4b22      	ldr	r3, [pc, #136]	; (31d0c <StartTasks+0x178>)
   31c84:	0018      	movs	r0, r3
   31c86:	4b0d      	ldr	r3, [pc, #52]	; (31cbc <StartTasks+0x128>)
   31c88:	4798      	blx	r3
	}
	snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   31c8a:	4b08      	ldr	r3, [pc, #32]	; (31cac <StartTasks+0x118>)
   31c8c:	4798      	blx	r3
   31c8e:	0003      	movs	r3, r0
   31c90:	4a1f      	ldr	r2, [pc, #124]	; (31d10 <StartTasks+0x17c>)
   31c92:	4808      	ldr	r0, [pc, #32]	; (31cb4 <StartTasks+0x120>)
   31c94:	2140      	movs	r1, #64	; 0x40
   31c96:	4c08      	ldr	r4, [pc, #32]	; (31cb8 <StartTasks+0x124>)
   31c98:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   31c9a:	4b06      	ldr	r3, [pc, #24]	; (31cb4 <StartTasks+0x120>)
   31c9c:	0018      	movs	r0, r3
   31c9e:	4b07      	ldr	r3, [pc, #28]	; (31cbc <StartTasks+0x128>)
   31ca0:	4798      	blx	r3
}
   31ca2:	46c0      	nop			; (mov r8, r8)
   31ca4:	46bd      	mov	sp, r7
   31ca6:	b001      	add	sp, #4
   31ca8:	bd90      	pop	{r4, r7, pc}
   31caa:	46c0      	nop			; (mov r8, r8)
   31cac:	00019711 	.word	0x00019711
   31cb0:	00038cc0 	.word	0x00038cc0
   31cb4:	2000565c 	.word	0x2000565c
   31cb8:	00033c59 	.word	0x00033c59
   31cbc:	0001d149 	.word	0x0001d149
   31cc0:	00038ce4 	.word	0x00038ce4
   31cc4:	00013ad5 	.word	0x00013ad5
   31cc8:	2000426c 	.word	0x2000426c
   31ccc:	0001b159 	.word	0x0001b159
   31cd0:	00038cf0 	.word	0x00038cf0
   31cd4:	00038d1c 	.word	0x00038d1c
   31cd8:	00038d3c 	.word	0x00038d3c
   31cdc:	00015921 	.word	0x00015921
   31ce0:	20004274 	.word	0x20004274
   31ce4:	00038d48 	.word	0x00038d48
   31ce8:	00038d74 	.word	0x00038d74
   31cec:	00038d94 	.word	0x00038d94
   31cf0:	000141d1 	.word	0x000141d1
   31cf4:	20004278 	.word	0x20004278
   31cf8:	00038d9c 	.word	0x00038d9c
   31cfc:	00038dc8 	.word	0x00038dc8
   31d00:	00038dec 	.word	0x00038dec
   31d04:	00013fe1 	.word	0x00013fe1
   31d08:	2000427c 	.word	0x2000427c
   31d0c:	00038dfc 	.word	0x00038dfc
   31d10:	00038e2c 	.word	0x00038e2c

00031d14 <vApplicationMallocFailedHook>:
// 
// #endif


void vApplicationMallocFailedHook(void)
{
   31d14:	b580      	push	{r7, lr}
   31d16:	af00      	add	r7, sp, #0
	SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   31d18:	4b02      	ldr	r3, [pc, #8]	; (31d24 <vApplicationMallocFailedHook+0x10>)
   31d1a:	0018      	movs	r0, r3
   31d1c:	4b02      	ldr	r3, [pc, #8]	; (31d28 <vApplicationMallocFailedHook+0x14>)
   31d1e:	4798      	blx	r3
	while(1);
   31d20:	e7fe      	b.n	31d20 <vApplicationMallocFailedHook+0xc>
   31d22:	46c0      	nop			; (mov r8, r8)
   31d24:	00038e54 	.word	0x00038e54
   31d28:	0001d149 	.word	0x0001d149

00031d2c <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook(void)
{
   31d2c:	b580      	push	{r7, lr}
   31d2e:	af00      	add	r7, sp, #0
	SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   31d30:	4b02      	ldr	r3, [pc, #8]	; (31d3c <vApplicationStackOverflowHook+0x10>)
   31d32:	0018      	movs	r0, r3
   31d34:	4b02      	ldr	r3, [pc, #8]	; (31d40 <vApplicationStackOverflowHook+0x14>)
   31d36:	4798      	blx	r3
	while(1);
   31d38:	e7fe      	b.n	31d38 <vApplicationStackOverflowHook+0xc>
   31d3a:	46c0      	nop			; (mov r8, r8)
   31d3c:	00038e80 	.word	0x00038e80
   31d40:	0001d149 	.word	0x0001d149

00031d44 <__udivsi3>:
   31d44:	2200      	movs	r2, #0
   31d46:	0843      	lsrs	r3, r0, #1
   31d48:	428b      	cmp	r3, r1
   31d4a:	d374      	bcc.n	31e36 <__udivsi3+0xf2>
   31d4c:	0903      	lsrs	r3, r0, #4
   31d4e:	428b      	cmp	r3, r1
   31d50:	d35f      	bcc.n	31e12 <__udivsi3+0xce>
   31d52:	0a03      	lsrs	r3, r0, #8
   31d54:	428b      	cmp	r3, r1
   31d56:	d344      	bcc.n	31de2 <__udivsi3+0x9e>
   31d58:	0b03      	lsrs	r3, r0, #12
   31d5a:	428b      	cmp	r3, r1
   31d5c:	d328      	bcc.n	31db0 <__udivsi3+0x6c>
   31d5e:	0c03      	lsrs	r3, r0, #16
   31d60:	428b      	cmp	r3, r1
   31d62:	d30d      	bcc.n	31d80 <__udivsi3+0x3c>
   31d64:	22ff      	movs	r2, #255	; 0xff
   31d66:	0209      	lsls	r1, r1, #8
   31d68:	ba12      	rev	r2, r2
   31d6a:	0c03      	lsrs	r3, r0, #16
   31d6c:	428b      	cmp	r3, r1
   31d6e:	d302      	bcc.n	31d76 <__udivsi3+0x32>
   31d70:	1212      	asrs	r2, r2, #8
   31d72:	0209      	lsls	r1, r1, #8
   31d74:	d065      	beq.n	31e42 <__udivsi3+0xfe>
   31d76:	0b03      	lsrs	r3, r0, #12
   31d78:	428b      	cmp	r3, r1
   31d7a:	d319      	bcc.n	31db0 <__udivsi3+0x6c>
   31d7c:	e000      	b.n	31d80 <__udivsi3+0x3c>
   31d7e:	0a09      	lsrs	r1, r1, #8
   31d80:	0bc3      	lsrs	r3, r0, #15
   31d82:	428b      	cmp	r3, r1
   31d84:	d301      	bcc.n	31d8a <__udivsi3+0x46>
   31d86:	03cb      	lsls	r3, r1, #15
   31d88:	1ac0      	subs	r0, r0, r3
   31d8a:	4152      	adcs	r2, r2
   31d8c:	0b83      	lsrs	r3, r0, #14
   31d8e:	428b      	cmp	r3, r1
   31d90:	d301      	bcc.n	31d96 <__udivsi3+0x52>
   31d92:	038b      	lsls	r3, r1, #14
   31d94:	1ac0      	subs	r0, r0, r3
   31d96:	4152      	adcs	r2, r2
   31d98:	0b43      	lsrs	r3, r0, #13
   31d9a:	428b      	cmp	r3, r1
   31d9c:	d301      	bcc.n	31da2 <__udivsi3+0x5e>
   31d9e:	034b      	lsls	r3, r1, #13
   31da0:	1ac0      	subs	r0, r0, r3
   31da2:	4152      	adcs	r2, r2
   31da4:	0b03      	lsrs	r3, r0, #12
   31da6:	428b      	cmp	r3, r1
   31da8:	d301      	bcc.n	31dae <__udivsi3+0x6a>
   31daa:	030b      	lsls	r3, r1, #12
   31dac:	1ac0      	subs	r0, r0, r3
   31dae:	4152      	adcs	r2, r2
   31db0:	0ac3      	lsrs	r3, r0, #11
   31db2:	428b      	cmp	r3, r1
   31db4:	d301      	bcc.n	31dba <__udivsi3+0x76>
   31db6:	02cb      	lsls	r3, r1, #11
   31db8:	1ac0      	subs	r0, r0, r3
   31dba:	4152      	adcs	r2, r2
   31dbc:	0a83      	lsrs	r3, r0, #10
   31dbe:	428b      	cmp	r3, r1
   31dc0:	d301      	bcc.n	31dc6 <__udivsi3+0x82>
   31dc2:	028b      	lsls	r3, r1, #10
   31dc4:	1ac0      	subs	r0, r0, r3
   31dc6:	4152      	adcs	r2, r2
   31dc8:	0a43      	lsrs	r3, r0, #9
   31dca:	428b      	cmp	r3, r1
   31dcc:	d301      	bcc.n	31dd2 <__udivsi3+0x8e>
   31dce:	024b      	lsls	r3, r1, #9
   31dd0:	1ac0      	subs	r0, r0, r3
   31dd2:	4152      	adcs	r2, r2
   31dd4:	0a03      	lsrs	r3, r0, #8
   31dd6:	428b      	cmp	r3, r1
   31dd8:	d301      	bcc.n	31dde <__udivsi3+0x9a>
   31dda:	020b      	lsls	r3, r1, #8
   31ddc:	1ac0      	subs	r0, r0, r3
   31dde:	4152      	adcs	r2, r2
   31de0:	d2cd      	bcs.n	31d7e <__udivsi3+0x3a>
   31de2:	09c3      	lsrs	r3, r0, #7
   31de4:	428b      	cmp	r3, r1
   31de6:	d301      	bcc.n	31dec <__udivsi3+0xa8>
   31de8:	01cb      	lsls	r3, r1, #7
   31dea:	1ac0      	subs	r0, r0, r3
   31dec:	4152      	adcs	r2, r2
   31dee:	0983      	lsrs	r3, r0, #6
   31df0:	428b      	cmp	r3, r1
   31df2:	d301      	bcc.n	31df8 <__udivsi3+0xb4>
   31df4:	018b      	lsls	r3, r1, #6
   31df6:	1ac0      	subs	r0, r0, r3
   31df8:	4152      	adcs	r2, r2
   31dfa:	0943      	lsrs	r3, r0, #5
   31dfc:	428b      	cmp	r3, r1
   31dfe:	d301      	bcc.n	31e04 <__udivsi3+0xc0>
   31e00:	014b      	lsls	r3, r1, #5
   31e02:	1ac0      	subs	r0, r0, r3
   31e04:	4152      	adcs	r2, r2
   31e06:	0903      	lsrs	r3, r0, #4
   31e08:	428b      	cmp	r3, r1
   31e0a:	d301      	bcc.n	31e10 <__udivsi3+0xcc>
   31e0c:	010b      	lsls	r3, r1, #4
   31e0e:	1ac0      	subs	r0, r0, r3
   31e10:	4152      	adcs	r2, r2
   31e12:	08c3      	lsrs	r3, r0, #3
   31e14:	428b      	cmp	r3, r1
   31e16:	d301      	bcc.n	31e1c <__udivsi3+0xd8>
   31e18:	00cb      	lsls	r3, r1, #3
   31e1a:	1ac0      	subs	r0, r0, r3
   31e1c:	4152      	adcs	r2, r2
   31e1e:	0883      	lsrs	r3, r0, #2
   31e20:	428b      	cmp	r3, r1
   31e22:	d301      	bcc.n	31e28 <__udivsi3+0xe4>
   31e24:	008b      	lsls	r3, r1, #2
   31e26:	1ac0      	subs	r0, r0, r3
   31e28:	4152      	adcs	r2, r2
   31e2a:	0843      	lsrs	r3, r0, #1
   31e2c:	428b      	cmp	r3, r1
   31e2e:	d301      	bcc.n	31e34 <__udivsi3+0xf0>
   31e30:	004b      	lsls	r3, r1, #1
   31e32:	1ac0      	subs	r0, r0, r3
   31e34:	4152      	adcs	r2, r2
   31e36:	1a41      	subs	r1, r0, r1
   31e38:	d200      	bcs.n	31e3c <__udivsi3+0xf8>
   31e3a:	4601      	mov	r1, r0
   31e3c:	4152      	adcs	r2, r2
   31e3e:	4610      	mov	r0, r2
   31e40:	4770      	bx	lr
   31e42:	e7ff      	b.n	31e44 <__udivsi3+0x100>
   31e44:	b501      	push	{r0, lr}
   31e46:	2000      	movs	r0, #0
   31e48:	f000 f8f0 	bl	3202c <__aeabi_idiv0>
   31e4c:	bd02      	pop	{r1, pc}
   31e4e:	46c0      	nop			; (mov r8, r8)

00031e50 <__aeabi_uidivmod>:
   31e50:	2900      	cmp	r1, #0
   31e52:	d0f7      	beq.n	31e44 <__udivsi3+0x100>
   31e54:	e776      	b.n	31d44 <__udivsi3>
   31e56:	4770      	bx	lr

00031e58 <__divsi3>:
   31e58:	4603      	mov	r3, r0
   31e5a:	430b      	orrs	r3, r1
   31e5c:	d47f      	bmi.n	31f5e <__divsi3+0x106>
   31e5e:	2200      	movs	r2, #0
   31e60:	0843      	lsrs	r3, r0, #1
   31e62:	428b      	cmp	r3, r1
   31e64:	d374      	bcc.n	31f50 <__divsi3+0xf8>
   31e66:	0903      	lsrs	r3, r0, #4
   31e68:	428b      	cmp	r3, r1
   31e6a:	d35f      	bcc.n	31f2c <__divsi3+0xd4>
   31e6c:	0a03      	lsrs	r3, r0, #8
   31e6e:	428b      	cmp	r3, r1
   31e70:	d344      	bcc.n	31efc <__divsi3+0xa4>
   31e72:	0b03      	lsrs	r3, r0, #12
   31e74:	428b      	cmp	r3, r1
   31e76:	d328      	bcc.n	31eca <__divsi3+0x72>
   31e78:	0c03      	lsrs	r3, r0, #16
   31e7a:	428b      	cmp	r3, r1
   31e7c:	d30d      	bcc.n	31e9a <__divsi3+0x42>
   31e7e:	22ff      	movs	r2, #255	; 0xff
   31e80:	0209      	lsls	r1, r1, #8
   31e82:	ba12      	rev	r2, r2
   31e84:	0c03      	lsrs	r3, r0, #16
   31e86:	428b      	cmp	r3, r1
   31e88:	d302      	bcc.n	31e90 <__divsi3+0x38>
   31e8a:	1212      	asrs	r2, r2, #8
   31e8c:	0209      	lsls	r1, r1, #8
   31e8e:	d065      	beq.n	31f5c <__divsi3+0x104>
   31e90:	0b03      	lsrs	r3, r0, #12
   31e92:	428b      	cmp	r3, r1
   31e94:	d319      	bcc.n	31eca <__divsi3+0x72>
   31e96:	e000      	b.n	31e9a <__divsi3+0x42>
   31e98:	0a09      	lsrs	r1, r1, #8
   31e9a:	0bc3      	lsrs	r3, r0, #15
   31e9c:	428b      	cmp	r3, r1
   31e9e:	d301      	bcc.n	31ea4 <__divsi3+0x4c>
   31ea0:	03cb      	lsls	r3, r1, #15
   31ea2:	1ac0      	subs	r0, r0, r3
   31ea4:	4152      	adcs	r2, r2
   31ea6:	0b83      	lsrs	r3, r0, #14
   31ea8:	428b      	cmp	r3, r1
   31eaa:	d301      	bcc.n	31eb0 <__divsi3+0x58>
   31eac:	038b      	lsls	r3, r1, #14
   31eae:	1ac0      	subs	r0, r0, r3
   31eb0:	4152      	adcs	r2, r2
   31eb2:	0b43      	lsrs	r3, r0, #13
   31eb4:	428b      	cmp	r3, r1
   31eb6:	d301      	bcc.n	31ebc <__divsi3+0x64>
   31eb8:	034b      	lsls	r3, r1, #13
   31eba:	1ac0      	subs	r0, r0, r3
   31ebc:	4152      	adcs	r2, r2
   31ebe:	0b03      	lsrs	r3, r0, #12
   31ec0:	428b      	cmp	r3, r1
   31ec2:	d301      	bcc.n	31ec8 <__divsi3+0x70>
   31ec4:	030b      	lsls	r3, r1, #12
   31ec6:	1ac0      	subs	r0, r0, r3
   31ec8:	4152      	adcs	r2, r2
   31eca:	0ac3      	lsrs	r3, r0, #11
   31ecc:	428b      	cmp	r3, r1
   31ece:	d301      	bcc.n	31ed4 <__divsi3+0x7c>
   31ed0:	02cb      	lsls	r3, r1, #11
   31ed2:	1ac0      	subs	r0, r0, r3
   31ed4:	4152      	adcs	r2, r2
   31ed6:	0a83      	lsrs	r3, r0, #10
   31ed8:	428b      	cmp	r3, r1
   31eda:	d301      	bcc.n	31ee0 <__divsi3+0x88>
   31edc:	028b      	lsls	r3, r1, #10
   31ede:	1ac0      	subs	r0, r0, r3
   31ee0:	4152      	adcs	r2, r2
   31ee2:	0a43      	lsrs	r3, r0, #9
   31ee4:	428b      	cmp	r3, r1
   31ee6:	d301      	bcc.n	31eec <__divsi3+0x94>
   31ee8:	024b      	lsls	r3, r1, #9
   31eea:	1ac0      	subs	r0, r0, r3
   31eec:	4152      	adcs	r2, r2
   31eee:	0a03      	lsrs	r3, r0, #8
   31ef0:	428b      	cmp	r3, r1
   31ef2:	d301      	bcc.n	31ef8 <__divsi3+0xa0>
   31ef4:	020b      	lsls	r3, r1, #8
   31ef6:	1ac0      	subs	r0, r0, r3
   31ef8:	4152      	adcs	r2, r2
   31efa:	d2cd      	bcs.n	31e98 <__divsi3+0x40>
   31efc:	09c3      	lsrs	r3, r0, #7
   31efe:	428b      	cmp	r3, r1
   31f00:	d301      	bcc.n	31f06 <__divsi3+0xae>
   31f02:	01cb      	lsls	r3, r1, #7
   31f04:	1ac0      	subs	r0, r0, r3
   31f06:	4152      	adcs	r2, r2
   31f08:	0983      	lsrs	r3, r0, #6
   31f0a:	428b      	cmp	r3, r1
   31f0c:	d301      	bcc.n	31f12 <__divsi3+0xba>
   31f0e:	018b      	lsls	r3, r1, #6
   31f10:	1ac0      	subs	r0, r0, r3
   31f12:	4152      	adcs	r2, r2
   31f14:	0943      	lsrs	r3, r0, #5
   31f16:	428b      	cmp	r3, r1
   31f18:	d301      	bcc.n	31f1e <__divsi3+0xc6>
   31f1a:	014b      	lsls	r3, r1, #5
   31f1c:	1ac0      	subs	r0, r0, r3
   31f1e:	4152      	adcs	r2, r2
   31f20:	0903      	lsrs	r3, r0, #4
   31f22:	428b      	cmp	r3, r1
   31f24:	d301      	bcc.n	31f2a <__divsi3+0xd2>
   31f26:	010b      	lsls	r3, r1, #4
   31f28:	1ac0      	subs	r0, r0, r3
   31f2a:	4152      	adcs	r2, r2
   31f2c:	08c3      	lsrs	r3, r0, #3
   31f2e:	428b      	cmp	r3, r1
   31f30:	d301      	bcc.n	31f36 <__divsi3+0xde>
   31f32:	00cb      	lsls	r3, r1, #3
   31f34:	1ac0      	subs	r0, r0, r3
   31f36:	4152      	adcs	r2, r2
   31f38:	0883      	lsrs	r3, r0, #2
   31f3a:	428b      	cmp	r3, r1
   31f3c:	d301      	bcc.n	31f42 <__divsi3+0xea>
   31f3e:	008b      	lsls	r3, r1, #2
   31f40:	1ac0      	subs	r0, r0, r3
   31f42:	4152      	adcs	r2, r2
   31f44:	0843      	lsrs	r3, r0, #1
   31f46:	428b      	cmp	r3, r1
   31f48:	d301      	bcc.n	31f4e <__divsi3+0xf6>
   31f4a:	004b      	lsls	r3, r1, #1
   31f4c:	1ac0      	subs	r0, r0, r3
   31f4e:	4152      	adcs	r2, r2
   31f50:	1a41      	subs	r1, r0, r1
   31f52:	d200      	bcs.n	31f56 <__divsi3+0xfe>
   31f54:	4601      	mov	r1, r0
   31f56:	4152      	adcs	r2, r2
   31f58:	4610      	mov	r0, r2
   31f5a:	4770      	bx	lr
   31f5c:	e05d      	b.n	3201a <__divsi3+0x1c2>
   31f5e:	0fca      	lsrs	r2, r1, #31
   31f60:	d000      	beq.n	31f64 <__divsi3+0x10c>
   31f62:	4249      	negs	r1, r1
   31f64:	1003      	asrs	r3, r0, #32
   31f66:	d300      	bcc.n	31f6a <__divsi3+0x112>
   31f68:	4240      	negs	r0, r0
   31f6a:	4053      	eors	r3, r2
   31f6c:	2200      	movs	r2, #0
   31f6e:	469c      	mov	ip, r3
   31f70:	0903      	lsrs	r3, r0, #4
   31f72:	428b      	cmp	r3, r1
   31f74:	d32d      	bcc.n	31fd2 <__divsi3+0x17a>
   31f76:	0a03      	lsrs	r3, r0, #8
   31f78:	428b      	cmp	r3, r1
   31f7a:	d312      	bcc.n	31fa2 <__divsi3+0x14a>
   31f7c:	22fc      	movs	r2, #252	; 0xfc
   31f7e:	0189      	lsls	r1, r1, #6
   31f80:	ba12      	rev	r2, r2
   31f82:	0a03      	lsrs	r3, r0, #8
   31f84:	428b      	cmp	r3, r1
   31f86:	d30c      	bcc.n	31fa2 <__divsi3+0x14a>
   31f88:	0189      	lsls	r1, r1, #6
   31f8a:	1192      	asrs	r2, r2, #6
   31f8c:	428b      	cmp	r3, r1
   31f8e:	d308      	bcc.n	31fa2 <__divsi3+0x14a>
   31f90:	0189      	lsls	r1, r1, #6
   31f92:	1192      	asrs	r2, r2, #6
   31f94:	428b      	cmp	r3, r1
   31f96:	d304      	bcc.n	31fa2 <__divsi3+0x14a>
   31f98:	0189      	lsls	r1, r1, #6
   31f9a:	d03a      	beq.n	32012 <__divsi3+0x1ba>
   31f9c:	1192      	asrs	r2, r2, #6
   31f9e:	e000      	b.n	31fa2 <__divsi3+0x14a>
   31fa0:	0989      	lsrs	r1, r1, #6
   31fa2:	09c3      	lsrs	r3, r0, #7
   31fa4:	428b      	cmp	r3, r1
   31fa6:	d301      	bcc.n	31fac <__divsi3+0x154>
   31fa8:	01cb      	lsls	r3, r1, #7
   31faa:	1ac0      	subs	r0, r0, r3
   31fac:	4152      	adcs	r2, r2
   31fae:	0983      	lsrs	r3, r0, #6
   31fb0:	428b      	cmp	r3, r1
   31fb2:	d301      	bcc.n	31fb8 <__divsi3+0x160>
   31fb4:	018b      	lsls	r3, r1, #6
   31fb6:	1ac0      	subs	r0, r0, r3
   31fb8:	4152      	adcs	r2, r2
   31fba:	0943      	lsrs	r3, r0, #5
   31fbc:	428b      	cmp	r3, r1
   31fbe:	d301      	bcc.n	31fc4 <__divsi3+0x16c>
   31fc0:	014b      	lsls	r3, r1, #5
   31fc2:	1ac0      	subs	r0, r0, r3
   31fc4:	4152      	adcs	r2, r2
   31fc6:	0903      	lsrs	r3, r0, #4
   31fc8:	428b      	cmp	r3, r1
   31fca:	d301      	bcc.n	31fd0 <__divsi3+0x178>
   31fcc:	010b      	lsls	r3, r1, #4
   31fce:	1ac0      	subs	r0, r0, r3
   31fd0:	4152      	adcs	r2, r2
   31fd2:	08c3      	lsrs	r3, r0, #3
   31fd4:	428b      	cmp	r3, r1
   31fd6:	d301      	bcc.n	31fdc <__divsi3+0x184>
   31fd8:	00cb      	lsls	r3, r1, #3
   31fda:	1ac0      	subs	r0, r0, r3
   31fdc:	4152      	adcs	r2, r2
   31fde:	0883      	lsrs	r3, r0, #2
   31fe0:	428b      	cmp	r3, r1
   31fe2:	d301      	bcc.n	31fe8 <__divsi3+0x190>
   31fe4:	008b      	lsls	r3, r1, #2
   31fe6:	1ac0      	subs	r0, r0, r3
   31fe8:	4152      	adcs	r2, r2
   31fea:	d2d9      	bcs.n	31fa0 <__divsi3+0x148>
   31fec:	0843      	lsrs	r3, r0, #1
   31fee:	428b      	cmp	r3, r1
   31ff0:	d301      	bcc.n	31ff6 <__divsi3+0x19e>
   31ff2:	004b      	lsls	r3, r1, #1
   31ff4:	1ac0      	subs	r0, r0, r3
   31ff6:	4152      	adcs	r2, r2
   31ff8:	1a41      	subs	r1, r0, r1
   31ffa:	d200      	bcs.n	31ffe <__divsi3+0x1a6>
   31ffc:	4601      	mov	r1, r0
   31ffe:	4663      	mov	r3, ip
   32000:	4152      	adcs	r2, r2
   32002:	105b      	asrs	r3, r3, #1
   32004:	4610      	mov	r0, r2
   32006:	d301      	bcc.n	3200c <__divsi3+0x1b4>
   32008:	4240      	negs	r0, r0
   3200a:	2b00      	cmp	r3, #0
   3200c:	d500      	bpl.n	32010 <__divsi3+0x1b8>
   3200e:	4249      	negs	r1, r1
   32010:	4770      	bx	lr
   32012:	4663      	mov	r3, ip
   32014:	105b      	asrs	r3, r3, #1
   32016:	d300      	bcc.n	3201a <__divsi3+0x1c2>
   32018:	4240      	negs	r0, r0
   3201a:	b501      	push	{r0, lr}
   3201c:	2000      	movs	r0, #0
   3201e:	f000 f805 	bl	3202c <__aeabi_idiv0>
   32022:	bd02      	pop	{r1, pc}

00032024 <__aeabi_idivmod>:
   32024:	2900      	cmp	r1, #0
   32026:	d0f8      	beq.n	3201a <__divsi3+0x1c2>
   32028:	e716      	b.n	31e58 <__divsi3>
   3202a:	4770      	bx	lr

0003202c <__aeabi_idiv0>:
   3202c:	4770      	bx	lr
   3202e:	46c0      	nop			; (mov r8, r8)

00032030 <__aeabi_lmul>:
   32030:	b5f0      	push	{r4, r5, r6, r7, lr}
   32032:	46ce      	mov	lr, r9
   32034:	4647      	mov	r7, r8
   32036:	0415      	lsls	r5, r2, #16
   32038:	0c2d      	lsrs	r5, r5, #16
   3203a:	002e      	movs	r6, r5
   3203c:	b580      	push	{r7, lr}
   3203e:	0407      	lsls	r7, r0, #16
   32040:	0c14      	lsrs	r4, r2, #16
   32042:	0c3f      	lsrs	r7, r7, #16
   32044:	4699      	mov	r9, r3
   32046:	0c03      	lsrs	r3, r0, #16
   32048:	437e      	muls	r6, r7
   3204a:	435d      	muls	r5, r3
   3204c:	4367      	muls	r7, r4
   3204e:	4363      	muls	r3, r4
   32050:	197f      	adds	r7, r7, r5
   32052:	0c34      	lsrs	r4, r6, #16
   32054:	19e4      	adds	r4, r4, r7
   32056:	469c      	mov	ip, r3
   32058:	42a5      	cmp	r5, r4
   3205a:	d903      	bls.n	32064 <__aeabi_lmul+0x34>
   3205c:	2380      	movs	r3, #128	; 0x80
   3205e:	025b      	lsls	r3, r3, #9
   32060:	4698      	mov	r8, r3
   32062:	44c4      	add	ip, r8
   32064:	464b      	mov	r3, r9
   32066:	4351      	muls	r1, r2
   32068:	4343      	muls	r3, r0
   3206a:	0436      	lsls	r6, r6, #16
   3206c:	0c36      	lsrs	r6, r6, #16
   3206e:	0c25      	lsrs	r5, r4, #16
   32070:	0424      	lsls	r4, r4, #16
   32072:	4465      	add	r5, ip
   32074:	19a4      	adds	r4, r4, r6
   32076:	1859      	adds	r1, r3, r1
   32078:	1949      	adds	r1, r1, r5
   3207a:	0020      	movs	r0, r4
   3207c:	bc0c      	pop	{r2, r3}
   3207e:	4690      	mov	r8, r2
   32080:	4699      	mov	r9, r3
   32082:	bdf0      	pop	{r4, r5, r6, r7, pc}

00032084 <__aeabi_dadd>:
   32084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32086:	4645      	mov	r5, r8
   32088:	46de      	mov	lr, fp
   3208a:	4657      	mov	r7, sl
   3208c:	464e      	mov	r6, r9
   3208e:	030c      	lsls	r4, r1, #12
   32090:	b5e0      	push	{r5, r6, r7, lr}
   32092:	004e      	lsls	r6, r1, #1
   32094:	0fc9      	lsrs	r1, r1, #31
   32096:	4688      	mov	r8, r1
   32098:	000d      	movs	r5, r1
   3209a:	0a61      	lsrs	r1, r4, #9
   3209c:	0f44      	lsrs	r4, r0, #29
   3209e:	430c      	orrs	r4, r1
   320a0:	00c7      	lsls	r7, r0, #3
   320a2:	0319      	lsls	r1, r3, #12
   320a4:	0058      	lsls	r0, r3, #1
   320a6:	0fdb      	lsrs	r3, r3, #31
   320a8:	469b      	mov	fp, r3
   320aa:	0a4b      	lsrs	r3, r1, #9
   320ac:	0f51      	lsrs	r1, r2, #29
   320ae:	430b      	orrs	r3, r1
   320b0:	0d76      	lsrs	r6, r6, #21
   320b2:	0d40      	lsrs	r0, r0, #21
   320b4:	0019      	movs	r1, r3
   320b6:	00d2      	lsls	r2, r2, #3
   320b8:	45d8      	cmp	r8, fp
   320ba:	d100      	bne.n	320be <__aeabi_dadd+0x3a>
   320bc:	e0ae      	b.n	3221c <__aeabi_dadd+0x198>
   320be:	1a35      	subs	r5, r6, r0
   320c0:	2d00      	cmp	r5, #0
   320c2:	dc00      	bgt.n	320c6 <__aeabi_dadd+0x42>
   320c4:	e0f6      	b.n	322b4 <__aeabi_dadd+0x230>
   320c6:	2800      	cmp	r0, #0
   320c8:	d10f      	bne.n	320ea <__aeabi_dadd+0x66>
   320ca:	4313      	orrs	r3, r2
   320cc:	d100      	bne.n	320d0 <__aeabi_dadd+0x4c>
   320ce:	e0db      	b.n	32288 <__aeabi_dadd+0x204>
   320d0:	1e6b      	subs	r3, r5, #1
   320d2:	2b00      	cmp	r3, #0
   320d4:	d000      	beq.n	320d8 <__aeabi_dadd+0x54>
   320d6:	e137      	b.n	32348 <__aeabi_dadd+0x2c4>
   320d8:	1aba      	subs	r2, r7, r2
   320da:	4297      	cmp	r7, r2
   320dc:	41bf      	sbcs	r7, r7
   320de:	1a64      	subs	r4, r4, r1
   320e0:	427f      	negs	r7, r7
   320e2:	1be4      	subs	r4, r4, r7
   320e4:	2601      	movs	r6, #1
   320e6:	0017      	movs	r7, r2
   320e8:	e024      	b.n	32134 <__aeabi_dadd+0xb0>
   320ea:	4bc6      	ldr	r3, [pc, #792]	; (32404 <__aeabi_dadd+0x380>)
   320ec:	429e      	cmp	r6, r3
   320ee:	d04d      	beq.n	3218c <__aeabi_dadd+0x108>
   320f0:	2380      	movs	r3, #128	; 0x80
   320f2:	041b      	lsls	r3, r3, #16
   320f4:	4319      	orrs	r1, r3
   320f6:	2d38      	cmp	r5, #56	; 0x38
   320f8:	dd00      	ble.n	320fc <__aeabi_dadd+0x78>
   320fa:	e107      	b.n	3230c <__aeabi_dadd+0x288>
   320fc:	2d1f      	cmp	r5, #31
   320fe:	dd00      	ble.n	32102 <__aeabi_dadd+0x7e>
   32100:	e138      	b.n	32374 <__aeabi_dadd+0x2f0>
   32102:	2020      	movs	r0, #32
   32104:	1b43      	subs	r3, r0, r5
   32106:	469a      	mov	sl, r3
   32108:	000b      	movs	r3, r1
   3210a:	4650      	mov	r0, sl
   3210c:	4083      	lsls	r3, r0
   3210e:	4699      	mov	r9, r3
   32110:	0013      	movs	r3, r2
   32112:	4648      	mov	r0, r9
   32114:	40eb      	lsrs	r3, r5
   32116:	4318      	orrs	r0, r3
   32118:	0003      	movs	r3, r0
   3211a:	4650      	mov	r0, sl
   3211c:	4082      	lsls	r2, r0
   3211e:	1e50      	subs	r0, r2, #1
   32120:	4182      	sbcs	r2, r0
   32122:	40e9      	lsrs	r1, r5
   32124:	431a      	orrs	r2, r3
   32126:	1aba      	subs	r2, r7, r2
   32128:	1a61      	subs	r1, r4, r1
   3212a:	4297      	cmp	r7, r2
   3212c:	41a4      	sbcs	r4, r4
   3212e:	0017      	movs	r7, r2
   32130:	4264      	negs	r4, r4
   32132:	1b0c      	subs	r4, r1, r4
   32134:	0223      	lsls	r3, r4, #8
   32136:	d562      	bpl.n	321fe <__aeabi_dadd+0x17a>
   32138:	0264      	lsls	r4, r4, #9
   3213a:	0a65      	lsrs	r5, r4, #9
   3213c:	2d00      	cmp	r5, #0
   3213e:	d100      	bne.n	32142 <__aeabi_dadd+0xbe>
   32140:	e0df      	b.n	32302 <__aeabi_dadd+0x27e>
   32142:	0028      	movs	r0, r5
   32144:	f001 fbe4 	bl	33910 <__clzsi2>
   32148:	0003      	movs	r3, r0
   3214a:	3b08      	subs	r3, #8
   3214c:	2b1f      	cmp	r3, #31
   3214e:	dd00      	ble.n	32152 <__aeabi_dadd+0xce>
   32150:	e0d2      	b.n	322f8 <__aeabi_dadd+0x274>
   32152:	2220      	movs	r2, #32
   32154:	003c      	movs	r4, r7
   32156:	1ad2      	subs	r2, r2, r3
   32158:	409d      	lsls	r5, r3
   3215a:	40d4      	lsrs	r4, r2
   3215c:	409f      	lsls	r7, r3
   3215e:	4325      	orrs	r5, r4
   32160:	429e      	cmp	r6, r3
   32162:	dd00      	ble.n	32166 <__aeabi_dadd+0xe2>
   32164:	e0c4      	b.n	322f0 <__aeabi_dadd+0x26c>
   32166:	1b9e      	subs	r6, r3, r6
   32168:	1c73      	adds	r3, r6, #1
   3216a:	2b1f      	cmp	r3, #31
   3216c:	dd00      	ble.n	32170 <__aeabi_dadd+0xec>
   3216e:	e0f1      	b.n	32354 <__aeabi_dadd+0x2d0>
   32170:	2220      	movs	r2, #32
   32172:	0038      	movs	r0, r7
   32174:	0029      	movs	r1, r5
   32176:	1ad2      	subs	r2, r2, r3
   32178:	40d8      	lsrs	r0, r3
   3217a:	4091      	lsls	r1, r2
   3217c:	4097      	lsls	r7, r2
   3217e:	002c      	movs	r4, r5
   32180:	4301      	orrs	r1, r0
   32182:	1e78      	subs	r0, r7, #1
   32184:	4187      	sbcs	r7, r0
   32186:	40dc      	lsrs	r4, r3
   32188:	2600      	movs	r6, #0
   3218a:	430f      	orrs	r7, r1
   3218c:	077b      	lsls	r3, r7, #29
   3218e:	d009      	beq.n	321a4 <__aeabi_dadd+0x120>
   32190:	230f      	movs	r3, #15
   32192:	403b      	ands	r3, r7
   32194:	2b04      	cmp	r3, #4
   32196:	d005      	beq.n	321a4 <__aeabi_dadd+0x120>
   32198:	1d3b      	adds	r3, r7, #4
   3219a:	42bb      	cmp	r3, r7
   3219c:	41bf      	sbcs	r7, r7
   3219e:	427f      	negs	r7, r7
   321a0:	19e4      	adds	r4, r4, r7
   321a2:	001f      	movs	r7, r3
   321a4:	0223      	lsls	r3, r4, #8
   321a6:	d52c      	bpl.n	32202 <__aeabi_dadd+0x17e>
   321a8:	4b96      	ldr	r3, [pc, #600]	; (32404 <__aeabi_dadd+0x380>)
   321aa:	3601      	adds	r6, #1
   321ac:	429e      	cmp	r6, r3
   321ae:	d100      	bne.n	321b2 <__aeabi_dadd+0x12e>
   321b0:	e09a      	b.n	322e8 <__aeabi_dadd+0x264>
   321b2:	4645      	mov	r5, r8
   321b4:	4b94      	ldr	r3, [pc, #592]	; (32408 <__aeabi_dadd+0x384>)
   321b6:	08ff      	lsrs	r7, r7, #3
   321b8:	401c      	ands	r4, r3
   321ba:	0760      	lsls	r0, r4, #29
   321bc:	0576      	lsls	r6, r6, #21
   321be:	0264      	lsls	r4, r4, #9
   321c0:	4307      	orrs	r7, r0
   321c2:	0b24      	lsrs	r4, r4, #12
   321c4:	0d76      	lsrs	r6, r6, #21
   321c6:	2100      	movs	r1, #0
   321c8:	0324      	lsls	r4, r4, #12
   321ca:	0b23      	lsrs	r3, r4, #12
   321cc:	0d0c      	lsrs	r4, r1, #20
   321ce:	4a8f      	ldr	r2, [pc, #572]	; (3240c <__aeabi_dadd+0x388>)
   321d0:	0524      	lsls	r4, r4, #20
   321d2:	431c      	orrs	r4, r3
   321d4:	4014      	ands	r4, r2
   321d6:	0533      	lsls	r3, r6, #20
   321d8:	4323      	orrs	r3, r4
   321da:	005b      	lsls	r3, r3, #1
   321dc:	07ed      	lsls	r5, r5, #31
   321de:	085b      	lsrs	r3, r3, #1
   321e0:	432b      	orrs	r3, r5
   321e2:	0038      	movs	r0, r7
   321e4:	0019      	movs	r1, r3
   321e6:	bc3c      	pop	{r2, r3, r4, r5}
   321e8:	4690      	mov	r8, r2
   321ea:	4699      	mov	r9, r3
   321ec:	46a2      	mov	sl, r4
   321ee:	46ab      	mov	fp, r5
   321f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   321f2:	4664      	mov	r4, ip
   321f4:	4304      	orrs	r4, r0
   321f6:	d100      	bne.n	321fa <__aeabi_dadd+0x176>
   321f8:	e211      	b.n	3261e <__aeabi_dadd+0x59a>
   321fa:	0004      	movs	r4, r0
   321fc:	4667      	mov	r7, ip
   321fe:	077b      	lsls	r3, r7, #29
   32200:	d1c6      	bne.n	32190 <__aeabi_dadd+0x10c>
   32202:	4645      	mov	r5, r8
   32204:	0760      	lsls	r0, r4, #29
   32206:	08ff      	lsrs	r7, r7, #3
   32208:	4307      	orrs	r7, r0
   3220a:	08e4      	lsrs	r4, r4, #3
   3220c:	4b7d      	ldr	r3, [pc, #500]	; (32404 <__aeabi_dadd+0x380>)
   3220e:	429e      	cmp	r6, r3
   32210:	d030      	beq.n	32274 <__aeabi_dadd+0x1f0>
   32212:	0324      	lsls	r4, r4, #12
   32214:	0576      	lsls	r6, r6, #21
   32216:	0b24      	lsrs	r4, r4, #12
   32218:	0d76      	lsrs	r6, r6, #21
   3221a:	e7d4      	b.n	321c6 <__aeabi_dadd+0x142>
   3221c:	1a33      	subs	r3, r6, r0
   3221e:	469a      	mov	sl, r3
   32220:	2b00      	cmp	r3, #0
   32222:	dd78      	ble.n	32316 <__aeabi_dadd+0x292>
   32224:	2800      	cmp	r0, #0
   32226:	d031      	beq.n	3228c <__aeabi_dadd+0x208>
   32228:	4876      	ldr	r0, [pc, #472]	; (32404 <__aeabi_dadd+0x380>)
   3222a:	4286      	cmp	r6, r0
   3222c:	d0ae      	beq.n	3218c <__aeabi_dadd+0x108>
   3222e:	2080      	movs	r0, #128	; 0x80
   32230:	0400      	lsls	r0, r0, #16
   32232:	4301      	orrs	r1, r0
   32234:	4653      	mov	r3, sl
   32236:	2b38      	cmp	r3, #56	; 0x38
   32238:	dc00      	bgt.n	3223c <__aeabi_dadd+0x1b8>
   3223a:	e0e9      	b.n	32410 <__aeabi_dadd+0x38c>
   3223c:	430a      	orrs	r2, r1
   3223e:	1e51      	subs	r1, r2, #1
   32240:	418a      	sbcs	r2, r1
   32242:	2100      	movs	r1, #0
   32244:	19d2      	adds	r2, r2, r7
   32246:	42ba      	cmp	r2, r7
   32248:	41bf      	sbcs	r7, r7
   3224a:	1909      	adds	r1, r1, r4
   3224c:	427c      	negs	r4, r7
   3224e:	0017      	movs	r7, r2
   32250:	190c      	adds	r4, r1, r4
   32252:	0223      	lsls	r3, r4, #8
   32254:	d5d3      	bpl.n	321fe <__aeabi_dadd+0x17a>
   32256:	4b6b      	ldr	r3, [pc, #428]	; (32404 <__aeabi_dadd+0x380>)
   32258:	3601      	adds	r6, #1
   3225a:	429e      	cmp	r6, r3
   3225c:	d100      	bne.n	32260 <__aeabi_dadd+0x1dc>
   3225e:	e13a      	b.n	324d6 <__aeabi_dadd+0x452>
   32260:	2001      	movs	r0, #1
   32262:	4b69      	ldr	r3, [pc, #420]	; (32408 <__aeabi_dadd+0x384>)
   32264:	401c      	ands	r4, r3
   32266:	087b      	lsrs	r3, r7, #1
   32268:	4007      	ands	r7, r0
   3226a:	431f      	orrs	r7, r3
   3226c:	07e0      	lsls	r0, r4, #31
   3226e:	4307      	orrs	r7, r0
   32270:	0864      	lsrs	r4, r4, #1
   32272:	e78b      	b.n	3218c <__aeabi_dadd+0x108>
   32274:	0023      	movs	r3, r4
   32276:	433b      	orrs	r3, r7
   32278:	d100      	bne.n	3227c <__aeabi_dadd+0x1f8>
   3227a:	e1cb      	b.n	32614 <__aeabi_dadd+0x590>
   3227c:	2280      	movs	r2, #128	; 0x80
   3227e:	0312      	lsls	r2, r2, #12
   32280:	4314      	orrs	r4, r2
   32282:	0324      	lsls	r4, r4, #12
   32284:	0b24      	lsrs	r4, r4, #12
   32286:	e79e      	b.n	321c6 <__aeabi_dadd+0x142>
   32288:	002e      	movs	r6, r5
   3228a:	e77f      	b.n	3218c <__aeabi_dadd+0x108>
   3228c:	0008      	movs	r0, r1
   3228e:	4310      	orrs	r0, r2
   32290:	d100      	bne.n	32294 <__aeabi_dadd+0x210>
   32292:	e0b4      	b.n	323fe <__aeabi_dadd+0x37a>
   32294:	1e58      	subs	r0, r3, #1
   32296:	2800      	cmp	r0, #0
   32298:	d000      	beq.n	3229c <__aeabi_dadd+0x218>
   3229a:	e0de      	b.n	3245a <__aeabi_dadd+0x3d6>
   3229c:	18ba      	adds	r2, r7, r2
   3229e:	42ba      	cmp	r2, r7
   322a0:	419b      	sbcs	r3, r3
   322a2:	1864      	adds	r4, r4, r1
   322a4:	425b      	negs	r3, r3
   322a6:	18e4      	adds	r4, r4, r3
   322a8:	0017      	movs	r7, r2
   322aa:	2601      	movs	r6, #1
   322ac:	0223      	lsls	r3, r4, #8
   322ae:	d5a6      	bpl.n	321fe <__aeabi_dadd+0x17a>
   322b0:	2602      	movs	r6, #2
   322b2:	e7d5      	b.n	32260 <__aeabi_dadd+0x1dc>
   322b4:	2d00      	cmp	r5, #0
   322b6:	d16e      	bne.n	32396 <__aeabi_dadd+0x312>
   322b8:	1c70      	adds	r0, r6, #1
   322ba:	0540      	lsls	r0, r0, #21
   322bc:	0d40      	lsrs	r0, r0, #21
   322be:	2801      	cmp	r0, #1
   322c0:	dc00      	bgt.n	322c4 <__aeabi_dadd+0x240>
   322c2:	e0f9      	b.n	324b8 <__aeabi_dadd+0x434>
   322c4:	1ab8      	subs	r0, r7, r2
   322c6:	4684      	mov	ip, r0
   322c8:	4287      	cmp	r7, r0
   322ca:	4180      	sbcs	r0, r0
   322cc:	1ae5      	subs	r5, r4, r3
   322ce:	4240      	negs	r0, r0
   322d0:	1a2d      	subs	r5, r5, r0
   322d2:	0228      	lsls	r0, r5, #8
   322d4:	d400      	bmi.n	322d8 <__aeabi_dadd+0x254>
   322d6:	e089      	b.n	323ec <__aeabi_dadd+0x368>
   322d8:	1bd7      	subs	r7, r2, r7
   322da:	42ba      	cmp	r2, r7
   322dc:	4192      	sbcs	r2, r2
   322de:	1b1c      	subs	r4, r3, r4
   322e0:	4252      	negs	r2, r2
   322e2:	1aa5      	subs	r5, r4, r2
   322e4:	46d8      	mov	r8, fp
   322e6:	e729      	b.n	3213c <__aeabi_dadd+0xb8>
   322e8:	4645      	mov	r5, r8
   322ea:	2400      	movs	r4, #0
   322ec:	2700      	movs	r7, #0
   322ee:	e76a      	b.n	321c6 <__aeabi_dadd+0x142>
   322f0:	4c45      	ldr	r4, [pc, #276]	; (32408 <__aeabi_dadd+0x384>)
   322f2:	1af6      	subs	r6, r6, r3
   322f4:	402c      	ands	r4, r5
   322f6:	e749      	b.n	3218c <__aeabi_dadd+0x108>
   322f8:	003d      	movs	r5, r7
   322fa:	3828      	subs	r0, #40	; 0x28
   322fc:	4085      	lsls	r5, r0
   322fe:	2700      	movs	r7, #0
   32300:	e72e      	b.n	32160 <__aeabi_dadd+0xdc>
   32302:	0038      	movs	r0, r7
   32304:	f001 fb04 	bl	33910 <__clzsi2>
   32308:	3020      	adds	r0, #32
   3230a:	e71d      	b.n	32148 <__aeabi_dadd+0xc4>
   3230c:	430a      	orrs	r2, r1
   3230e:	1e51      	subs	r1, r2, #1
   32310:	418a      	sbcs	r2, r1
   32312:	2100      	movs	r1, #0
   32314:	e707      	b.n	32126 <__aeabi_dadd+0xa2>
   32316:	2b00      	cmp	r3, #0
   32318:	d000      	beq.n	3231c <__aeabi_dadd+0x298>
   3231a:	e0f3      	b.n	32504 <__aeabi_dadd+0x480>
   3231c:	1c70      	adds	r0, r6, #1
   3231e:	0543      	lsls	r3, r0, #21
   32320:	0d5b      	lsrs	r3, r3, #21
   32322:	2b01      	cmp	r3, #1
   32324:	dc00      	bgt.n	32328 <__aeabi_dadd+0x2a4>
   32326:	e0ad      	b.n	32484 <__aeabi_dadd+0x400>
   32328:	4b36      	ldr	r3, [pc, #216]	; (32404 <__aeabi_dadd+0x380>)
   3232a:	4298      	cmp	r0, r3
   3232c:	d100      	bne.n	32330 <__aeabi_dadd+0x2ac>
   3232e:	e0d1      	b.n	324d4 <__aeabi_dadd+0x450>
   32330:	18ba      	adds	r2, r7, r2
   32332:	42ba      	cmp	r2, r7
   32334:	41bf      	sbcs	r7, r7
   32336:	1864      	adds	r4, r4, r1
   32338:	427f      	negs	r7, r7
   3233a:	19e4      	adds	r4, r4, r7
   3233c:	07e7      	lsls	r7, r4, #31
   3233e:	0852      	lsrs	r2, r2, #1
   32340:	4317      	orrs	r7, r2
   32342:	0864      	lsrs	r4, r4, #1
   32344:	0006      	movs	r6, r0
   32346:	e721      	b.n	3218c <__aeabi_dadd+0x108>
   32348:	482e      	ldr	r0, [pc, #184]	; (32404 <__aeabi_dadd+0x380>)
   3234a:	4285      	cmp	r5, r0
   3234c:	d100      	bne.n	32350 <__aeabi_dadd+0x2cc>
   3234e:	e093      	b.n	32478 <__aeabi_dadd+0x3f4>
   32350:	001d      	movs	r5, r3
   32352:	e6d0      	b.n	320f6 <__aeabi_dadd+0x72>
   32354:	0029      	movs	r1, r5
   32356:	3e1f      	subs	r6, #31
   32358:	40f1      	lsrs	r1, r6
   3235a:	2b20      	cmp	r3, #32
   3235c:	d100      	bne.n	32360 <__aeabi_dadd+0x2dc>
   3235e:	e08d      	b.n	3247c <__aeabi_dadd+0x3f8>
   32360:	2240      	movs	r2, #64	; 0x40
   32362:	1ad3      	subs	r3, r2, r3
   32364:	409d      	lsls	r5, r3
   32366:	432f      	orrs	r7, r5
   32368:	1e7d      	subs	r5, r7, #1
   3236a:	41af      	sbcs	r7, r5
   3236c:	2400      	movs	r4, #0
   3236e:	430f      	orrs	r7, r1
   32370:	2600      	movs	r6, #0
   32372:	e744      	b.n	321fe <__aeabi_dadd+0x17a>
   32374:	002b      	movs	r3, r5
   32376:	0008      	movs	r0, r1
   32378:	3b20      	subs	r3, #32
   3237a:	40d8      	lsrs	r0, r3
   3237c:	0003      	movs	r3, r0
   3237e:	2d20      	cmp	r5, #32
   32380:	d100      	bne.n	32384 <__aeabi_dadd+0x300>
   32382:	e07d      	b.n	32480 <__aeabi_dadd+0x3fc>
   32384:	2040      	movs	r0, #64	; 0x40
   32386:	1b45      	subs	r5, r0, r5
   32388:	40a9      	lsls	r1, r5
   3238a:	430a      	orrs	r2, r1
   3238c:	1e51      	subs	r1, r2, #1
   3238e:	418a      	sbcs	r2, r1
   32390:	2100      	movs	r1, #0
   32392:	431a      	orrs	r2, r3
   32394:	e6c7      	b.n	32126 <__aeabi_dadd+0xa2>
   32396:	2e00      	cmp	r6, #0
   32398:	d050      	beq.n	3243c <__aeabi_dadd+0x3b8>
   3239a:	4e1a      	ldr	r6, [pc, #104]	; (32404 <__aeabi_dadd+0x380>)
   3239c:	42b0      	cmp	r0, r6
   3239e:	d057      	beq.n	32450 <__aeabi_dadd+0x3cc>
   323a0:	2680      	movs	r6, #128	; 0x80
   323a2:	426b      	negs	r3, r5
   323a4:	4699      	mov	r9, r3
   323a6:	0436      	lsls	r6, r6, #16
   323a8:	4334      	orrs	r4, r6
   323aa:	464b      	mov	r3, r9
   323ac:	2b38      	cmp	r3, #56	; 0x38
   323ae:	dd00      	ble.n	323b2 <__aeabi_dadd+0x32e>
   323b0:	e0d6      	b.n	32560 <__aeabi_dadd+0x4dc>
   323b2:	2b1f      	cmp	r3, #31
   323b4:	dd00      	ble.n	323b8 <__aeabi_dadd+0x334>
   323b6:	e135      	b.n	32624 <__aeabi_dadd+0x5a0>
   323b8:	2620      	movs	r6, #32
   323ba:	1af5      	subs	r5, r6, r3
   323bc:	0026      	movs	r6, r4
   323be:	40ae      	lsls	r6, r5
   323c0:	46b2      	mov	sl, r6
   323c2:	003e      	movs	r6, r7
   323c4:	40de      	lsrs	r6, r3
   323c6:	46ac      	mov	ip, r5
   323c8:	0035      	movs	r5, r6
   323ca:	4656      	mov	r6, sl
   323cc:	432e      	orrs	r6, r5
   323ce:	4665      	mov	r5, ip
   323d0:	40af      	lsls	r7, r5
   323d2:	1e7d      	subs	r5, r7, #1
   323d4:	41af      	sbcs	r7, r5
   323d6:	40dc      	lsrs	r4, r3
   323d8:	4337      	orrs	r7, r6
   323da:	1bd7      	subs	r7, r2, r7
   323dc:	42ba      	cmp	r2, r7
   323de:	4192      	sbcs	r2, r2
   323e0:	1b0c      	subs	r4, r1, r4
   323e2:	4252      	negs	r2, r2
   323e4:	1aa4      	subs	r4, r4, r2
   323e6:	0006      	movs	r6, r0
   323e8:	46d8      	mov	r8, fp
   323ea:	e6a3      	b.n	32134 <__aeabi_dadd+0xb0>
   323ec:	4664      	mov	r4, ip
   323ee:	4667      	mov	r7, ip
   323f0:	432c      	orrs	r4, r5
   323f2:	d000      	beq.n	323f6 <__aeabi_dadd+0x372>
   323f4:	e6a2      	b.n	3213c <__aeabi_dadd+0xb8>
   323f6:	2500      	movs	r5, #0
   323f8:	2600      	movs	r6, #0
   323fa:	2700      	movs	r7, #0
   323fc:	e706      	b.n	3220c <__aeabi_dadd+0x188>
   323fe:	001e      	movs	r6, r3
   32400:	e6c4      	b.n	3218c <__aeabi_dadd+0x108>
   32402:	46c0      	nop			; (mov r8, r8)
   32404:	000007ff 	.word	0x000007ff
   32408:	ff7fffff 	.word	0xff7fffff
   3240c:	800fffff 	.word	0x800fffff
   32410:	2b1f      	cmp	r3, #31
   32412:	dc63      	bgt.n	324dc <__aeabi_dadd+0x458>
   32414:	2020      	movs	r0, #32
   32416:	1ac3      	subs	r3, r0, r3
   32418:	0008      	movs	r0, r1
   3241a:	4098      	lsls	r0, r3
   3241c:	469c      	mov	ip, r3
   3241e:	4683      	mov	fp, r0
   32420:	4653      	mov	r3, sl
   32422:	0010      	movs	r0, r2
   32424:	40d8      	lsrs	r0, r3
   32426:	0003      	movs	r3, r0
   32428:	4658      	mov	r0, fp
   3242a:	4318      	orrs	r0, r3
   3242c:	4663      	mov	r3, ip
   3242e:	409a      	lsls	r2, r3
   32430:	1e53      	subs	r3, r2, #1
   32432:	419a      	sbcs	r2, r3
   32434:	4653      	mov	r3, sl
   32436:	4302      	orrs	r2, r0
   32438:	40d9      	lsrs	r1, r3
   3243a:	e703      	b.n	32244 <__aeabi_dadd+0x1c0>
   3243c:	0026      	movs	r6, r4
   3243e:	433e      	orrs	r6, r7
   32440:	d006      	beq.n	32450 <__aeabi_dadd+0x3cc>
   32442:	43eb      	mvns	r3, r5
   32444:	4699      	mov	r9, r3
   32446:	2b00      	cmp	r3, #0
   32448:	d0c7      	beq.n	323da <__aeabi_dadd+0x356>
   3244a:	4e94      	ldr	r6, [pc, #592]	; (3269c <__aeabi_dadd+0x618>)
   3244c:	42b0      	cmp	r0, r6
   3244e:	d1ac      	bne.n	323aa <__aeabi_dadd+0x326>
   32450:	000c      	movs	r4, r1
   32452:	0017      	movs	r7, r2
   32454:	0006      	movs	r6, r0
   32456:	46d8      	mov	r8, fp
   32458:	e698      	b.n	3218c <__aeabi_dadd+0x108>
   3245a:	4b90      	ldr	r3, [pc, #576]	; (3269c <__aeabi_dadd+0x618>)
   3245c:	459a      	cmp	sl, r3
   3245e:	d00b      	beq.n	32478 <__aeabi_dadd+0x3f4>
   32460:	4682      	mov	sl, r0
   32462:	e6e7      	b.n	32234 <__aeabi_dadd+0x1b0>
   32464:	2800      	cmp	r0, #0
   32466:	d000      	beq.n	3246a <__aeabi_dadd+0x3e6>
   32468:	e09e      	b.n	325a8 <__aeabi_dadd+0x524>
   3246a:	0018      	movs	r0, r3
   3246c:	4310      	orrs	r0, r2
   3246e:	d100      	bne.n	32472 <__aeabi_dadd+0x3ee>
   32470:	e0e9      	b.n	32646 <__aeabi_dadd+0x5c2>
   32472:	001c      	movs	r4, r3
   32474:	0017      	movs	r7, r2
   32476:	46d8      	mov	r8, fp
   32478:	4e88      	ldr	r6, [pc, #544]	; (3269c <__aeabi_dadd+0x618>)
   3247a:	e687      	b.n	3218c <__aeabi_dadd+0x108>
   3247c:	2500      	movs	r5, #0
   3247e:	e772      	b.n	32366 <__aeabi_dadd+0x2e2>
   32480:	2100      	movs	r1, #0
   32482:	e782      	b.n	3238a <__aeabi_dadd+0x306>
   32484:	0023      	movs	r3, r4
   32486:	433b      	orrs	r3, r7
   32488:	2e00      	cmp	r6, #0
   3248a:	d000      	beq.n	3248e <__aeabi_dadd+0x40a>
   3248c:	e0ab      	b.n	325e6 <__aeabi_dadd+0x562>
   3248e:	2b00      	cmp	r3, #0
   32490:	d100      	bne.n	32494 <__aeabi_dadd+0x410>
   32492:	e0e7      	b.n	32664 <__aeabi_dadd+0x5e0>
   32494:	000b      	movs	r3, r1
   32496:	4313      	orrs	r3, r2
   32498:	d100      	bne.n	3249c <__aeabi_dadd+0x418>
   3249a:	e677      	b.n	3218c <__aeabi_dadd+0x108>
   3249c:	18ba      	adds	r2, r7, r2
   3249e:	42ba      	cmp	r2, r7
   324a0:	41bf      	sbcs	r7, r7
   324a2:	1864      	adds	r4, r4, r1
   324a4:	427f      	negs	r7, r7
   324a6:	19e4      	adds	r4, r4, r7
   324a8:	0223      	lsls	r3, r4, #8
   324aa:	d400      	bmi.n	324ae <__aeabi_dadd+0x42a>
   324ac:	e0f2      	b.n	32694 <__aeabi_dadd+0x610>
   324ae:	4b7c      	ldr	r3, [pc, #496]	; (326a0 <__aeabi_dadd+0x61c>)
   324b0:	0017      	movs	r7, r2
   324b2:	401c      	ands	r4, r3
   324b4:	0006      	movs	r6, r0
   324b6:	e669      	b.n	3218c <__aeabi_dadd+0x108>
   324b8:	0020      	movs	r0, r4
   324ba:	4338      	orrs	r0, r7
   324bc:	2e00      	cmp	r6, #0
   324be:	d1d1      	bne.n	32464 <__aeabi_dadd+0x3e0>
   324c0:	2800      	cmp	r0, #0
   324c2:	d15b      	bne.n	3257c <__aeabi_dadd+0x4f8>
   324c4:	001c      	movs	r4, r3
   324c6:	4314      	orrs	r4, r2
   324c8:	d100      	bne.n	324cc <__aeabi_dadd+0x448>
   324ca:	e0a8      	b.n	3261e <__aeabi_dadd+0x59a>
   324cc:	001c      	movs	r4, r3
   324ce:	0017      	movs	r7, r2
   324d0:	46d8      	mov	r8, fp
   324d2:	e65b      	b.n	3218c <__aeabi_dadd+0x108>
   324d4:	0006      	movs	r6, r0
   324d6:	2400      	movs	r4, #0
   324d8:	2700      	movs	r7, #0
   324da:	e697      	b.n	3220c <__aeabi_dadd+0x188>
   324dc:	4650      	mov	r0, sl
   324de:	000b      	movs	r3, r1
   324e0:	3820      	subs	r0, #32
   324e2:	40c3      	lsrs	r3, r0
   324e4:	4699      	mov	r9, r3
   324e6:	4653      	mov	r3, sl
   324e8:	2b20      	cmp	r3, #32
   324ea:	d100      	bne.n	324ee <__aeabi_dadd+0x46a>
   324ec:	e095      	b.n	3261a <__aeabi_dadd+0x596>
   324ee:	2340      	movs	r3, #64	; 0x40
   324f0:	4650      	mov	r0, sl
   324f2:	1a1b      	subs	r3, r3, r0
   324f4:	4099      	lsls	r1, r3
   324f6:	430a      	orrs	r2, r1
   324f8:	1e51      	subs	r1, r2, #1
   324fa:	418a      	sbcs	r2, r1
   324fc:	464b      	mov	r3, r9
   324fe:	2100      	movs	r1, #0
   32500:	431a      	orrs	r2, r3
   32502:	e69f      	b.n	32244 <__aeabi_dadd+0x1c0>
   32504:	2e00      	cmp	r6, #0
   32506:	d130      	bne.n	3256a <__aeabi_dadd+0x4e6>
   32508:	0026      	movs	r6, r4
   3250a:	433e      	orrs	r6, r7
   3250c:	d067      	beq.n	325de <__aeabi_dadd+0x55a>
   3250e:	43db      	mvns	r3, r3
   32510:	469a      	mov	sl, r3
   32512:	2b00      	cmp	r3, #0
   32514:	d01c      	beq.n	32550 <__aeabi_dadd+0x4cc>
   32516:	4e61      	ldr	r6, [pc, #388]	; (3269c <__aeabi_dadd+0x618>)
   32518:	42b0      	cmp	r0, r6
   3251a:	d060      	beq.n	325de <__aeabi_dadd+0x55a>
   3251c:	4653      	mov	r3, sl
   3251e:	2b38      	cmp	r3, #56	; 0x38
   32520:	dd00      	ble.n	32524 <__aeabi_dadd+0x4a0>
   32522:	e096      	b.n	32652 <__aeabi_dadd+0x5ce>
   32524:	2b1f      	cmp	r3, #31
   32526:	dd00      	ble.n	3252a <__aeabi_dadd+0x4a6>
   32528:	e09f      	b.n	3266a <__aeabi_dadd+0x5e6>
   3252a:	2620      	movs	r6, #32
   3252c:	1af3      	subs	r3, r6, r3
   3252e:	0026      	movs	r6, r4
   32530:	409e      	lsls	r6, r3
   32532:	469c      	mov	ip, r3
   32534:	46b3      	mov	fp, r6
   32536:	4653      	mov	r3, sl
   32538:	003e      	movs	r6, r7
   3253a:	40de      	lsrs	r6, r3
   3253c:	0033      	movs	r3, r6
   3253e:	465e      	mov	r6, fp
   32540:	431e      	orrs	r6, r3
   32542:	4663      	mov	r3, ip
   32544:	409f      	lsls	r7, r3
   32546:	1e7b      	subs	r3, r7, #1
   32548:	419f      	sbcs	r7, r3
   3254a:	4653      	mov	r3, sl
   3254c:	40dc      	lsrs	r4, r3
   3254e:	4337      	orrs	r7, r6
   32550:	18bf      	adds	r7, r7, r2
   32552:	4297      	cmp	r7, r2
   32554:	4192      	sbcs	r2, r2
   32556:	1864      	adds	r4, r4, r1
   32558:	4252      	negs	r2, r2
   3255a:	18a4      	adds	r4, r4, r2
   3255c:	0006      	movs	r6, r0
   3255e:	e678      	b.n	32252 <__aeabi_dadd+0x1ce>
   32560:	4327      	orrs	r7, r4
   32562:	1e7c      	subs	r4, r7, #1
   32564:	41a7      	sbcs	r7, r4
   32566:	2400      	movs	r4, #0
   32568:	e737      	b.n	323da <__aeabi_dadd+0x356>
   3256a:	4e4c      	ldr	r6, [pc, #304]	; (3269c <__aeabi_dadd+0x618>)
   3256c:	42b0      	cmp	r0, r6
   3256e:	d036      	beq.n	325de <__aeabi_dadd+0x55a>
   32570:	2680      	movs	r6, #128	; 0x80
   32572:	425b      	negs	r3, r3
   32574:	0436      	lsls	r6, r6, #16
   32576:	469a      	mov	sl, r3
   32578:	4334      	orrs	r4, r6
   3257a:	e7cf      	b.n	3251c <__aeabi_dadd+0x498>
   3257c:	0018      	movs	r0, r3
   3257e:	4310      	orrs	r0, r2
   32580:	d100      	bne.n	32584 <__aeabi_dadd+0x500>
   32582:	e603      	b.n	3218c <__aeabi_dadd+0x108>
   32584:	1ab8      	subs	r0, r7, r2
   32586:	4684      	mov	ip, r0
   32588:	4567      	cmp	r7, ip
   3258a:	41ad      	sbcs	r5, r5
   3258c:	1ae0      	subs	r0, r4, r3
   3258e:	426d      	negs	r5, r5
   32590:	1b40      	subs	r0, r0, r5
   32592:	0205      	lsls	r5, r0, #8
   32594:	d400      	bmi.n	32598 <__aeabi_dadd+0x514>
   32596:	e62c      	b.n	321f2 <__aeabi_dadd+0x16e>
   32598:	1bd7      	subs	r7, r2, r7
   3259a:	42ba      	cmp	r2, r7
   3259c:	4192      	sbcs	r2, r2
   3259e:	1b1c      	subs	r4, r3, r4
   325a0:	4252      	negs	r2, r2
   325a2:	1aa4      	subs	r4, r4, r2
   325a4:	46d8      	mov	r8, fp
   325a6:	e5f1      	b.n	3218c <__aeabi_dadd+0x108>
   325a8:	0018      	movs	r0, r3
   325aa:	4310      	orrs	r0, r2
   325ac:	d100      	bne.n	325b0 <__aeabi_dadd+0x52c>
   325ae:	e763      	b.n	32478 <__aeabi_dadd+0x3f4>
   325b0:	08f8      	lsrs	r0, r7, #3
   325b2:	0767      	lsls	r7, r4, #29
   325b4:	4307      	orrs	r7, r0
   325b6:	2080      	movs	r0, #128	; 0x80
   325b8:	08e4      	lsrs	r4, r4, #3
   325ba:	0300      	lsls	r0, r0, #12
   325bc:	4204      	tst	r4, r0
   325be:	d008      	beq.n	325d2 <__aeabi_dadd+0x54e>
   325c0:	08dd      	lsrs	r5, r3, #3
   325c2:	4205      	tst	r5, r0
   325c4:	d105      	bne.n	325d2 <__aeabi_dadd+0x54e>
   325c6:	08d2      	lsrs	r2, r2, #3
   325c8:	0759      	lsls	r1, r3, #29
   325ca:	4311      	orrs	r1, r2
   325cc:	000f      	movs	r7, r1
   325ce:	002c      	movs	r4, r5
   325d0:	46d8      	mov	r8, fp
   325d2:	0f7b      	lsrs	r3, r7, #29
   325d4:	00e4      	lsls	r4, r4, #3
   325d6:	431c      	orrs	r4, r3
   325d8:	00ff      	lsls	r7, r7, #3
   325da:	4e30      	ldr	r6, [pc, #192]	; (3269c <__aeabi_dadd+0x618>)
   325dc:	e5d6      	b.n	3218c <__aeabi_dadd+0x108>
   325de:	000c      	movs	r4, r1
   325e0:	0017      	movs	r7, r2
   325e2:	0006      	movs	r6, r0
   325e4:	e5d2      	b.n	3218c <__aeabi_dadd+0x108>
   325e6:	2b00      	cmp	r3, #0
   325e8:	d038      	beq.n	3265c <__aeabi_dadd+0x5d8>
   325ea:	000b      	movs	r3, r1
   325ec:	4313      	orrs	r3, r2
   325ee:	d100      	bne.n	325f2 <__aeabi_dadd+0x56e>
   325f0:	e742      	b.n	32478 <__aeabi_dadd+0x3f4>
   325f2:	08f8      	lsrs	r0, r7, #3
   325f4:	0767      	lsls	r7, r4, #29
   325f6:	4307      	orrs	r7, r0
   325f8:	2080      	movs	r0, #128	; 0x80
   325fa:	08e4      	lsrs	r4, r4, #3
   325fc:	0300      	lsls	r0, r0, #12
   325fe:	4204      	tst	r4, r0
   32600:	d0e7      	beq.n	325d2 <__aeabi_dadd+0x54e>
   32602:	08cb      	lsrs	r3, r1, #3
   32604:	4203      	tst	r3, r0
   32606:	d1e4      	bne.n	325d2 <__aeabi_dadd+0x54e>
   32608:	08d2      	lsrs	r2, r2, #3
   3260a:	0749      	lsls	r1, r1, #29
   3260c:	4311      	orrs	r1, r2
   3260e:	000f      	movs	r7, r1
   32610:	001c      	movs	r4, r3
   32612:	e7de      	b.n	325d2 <__aeabi_dadd+0x54e>
   32614:	2700      	movs	r7, #0
   32616:	2400      	movs	r4, #0
   32618:	e5d5      	b.n	321c6 <__aeabi_dadd+0x142>
   3261a:	2100      	movs	r1, #0
   3261c:	e76b      	b.n	324f6 <__aeabi_dadd+0x472>
   3261e:	2500      	movs	r5, #0
   32620:	2700      	movs	r7, #0
   32622:	e5f3      	b.n	3220c <__aeabi_dadd+0x188>
   32624:	464e      	mov	r6, r9
   32626:	0025      	movs	r5, r4
   32628:	3e20      	subs	r6, #32
   3262a:	40f5      	lsrs	r5, r6
   3262c:	464b      	mov	r3, r9
   3262e:	002e      	movs	r6, r5
   32630:	2b20      	cmp	r3, #32
   32632:	d02d      	beq.n	32690 <__aeabi_dadd+0x60c>
   32634:	2540      	movs	r5, #64	; 0x40
   32636:	1aed      	subs	r5, r5, r3
   32638:	40ac      	lsls	r4, r5
   3263a:	4327      	orrs	r7, r4
   3263c:	1e7c      	subs	r4, r7, #1
   3263e:	41a7      	sbcs	r7, r4
   32640:	2400      	movs	r4, #0
   32642:	4337      	orrs	r7, r6
   32644:	e6c9      	b.n	323da <__aeabi_dadd+0x356>
   32646:	2480      	movs	r4, #128	; 0x80
   32648:	2500      	movs	r5, #0
   3264a:	0324      	lsls	r4, r4, #12
   3264c:	4e13      	ldr	r6, [pc, #76]	; (3269c <__aeabi_dadd+0x618>)
   3264e:	2700      	movs	r7, #0
   32650:	e5dc      	b.n	3220c <__aeabi_dadd+0x188>
   32652:	4327      	orrs	r7, r4
   32654:	1e7c      	subs	r4, r7, #1
   32656:	41a7      	sbcs	r7, r4
   32658:	2400      	movs	r4, #0
   3265a:	e779      	b.n	32550 <__aeabi_dadd+0x4cc>
   3265c:	000c      	movs	r4, r1
   3265e:	0017      	movs	r7, r2
   32660:	4e0e      	ldr	r6, [pc, #56]	; (3269c <__aeabi_dadd+0x618>)
   32662:	e593      	b.n	3218c <__aeabi_dadd+0x108>
   32664:	000c      	movs	r4, r1
   32666:	0017      	movs	r7, r2
   32668:	e590      	b.n	3218c <__aeabi_dadd+0x108>
   3266a:	4656      	mov	r6, sl
   3266c:	0023      	movs	r3, r4
   3266e:	3e20      	subs	r6, #32
   32670:	40f3      	lsrs	r3, r6
   32672:	4699      	mov	r9, r3
   32674:	4653      	mov	r3, sl
   32676:	2b20      	cmp	r3, #32
   32678:	d00e      	beq.n	32698 <__aeabi_dadd+0x614>
   3267a:	2340      	movs	r3, #64	; 0x40
   3267c:	4656      	mov	r6, sl
   3267e:	1b9b      	subs	r3, r3, r6
   32680:	409c      	lsls	r4, r3
   32682:	4327      	orrs	r7, r4
   32684:	1e7c      	subs	r4, r7, #1
   32686:	41a7      	sbcs	r7, r4
   32688:	464b      	mov	r3, r9
   3268a:	2400      	movs	r4, #0
   3268c:	431f      	orrs	r7, r3
   3268e:	e75f      	b.n	32550 <__aeabi_dadd+0x4cc>
   32690:	2400      	movs	r4, #0
   32692:	e7d2      	b.n	3263a <__aeabi_dadd+0x5b6>
   32694:	0017      	movs	r7, r2
   32696:	e5b2      	b.n	321fe <__aeabi_dadd+0x17a>
   32698:	2400      	movs	r4, #0
   3269a:	e7f2      	b.n	32682 <__aeabi_dadd+0x5fe>
   3269c:	000007ff 	.word	0x000007ff
   326a0:	ff7fffff 	.word	0xff7fffff

000326a4 <__aeabi_ddiv>:
   326a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   326a6:	4657      	mov	r7, sl
   326a8:	4645      	mov	r5, r8
   326aa:	46de      	mov	lr, fp
   326ac:	464e      	mov	r6, r9
   326ae:	b5e0      	push	{r5, r6, r7, lr}
   326b0:	004c      	lsls	r4, r1, #1
   326b2:	030e      	lsls	r6, r1, #12
   326b4:	b087      	sub	sp, #28
   326b6:	4683      	mov	fp, r0
   326b8:	4692      	mov	sl, r2
   326ba:	001d      	movs	r5, r3
   326bc:	4680      	mov	r8, r0
   326be:	0b36      	lsrs	r6, r6, #12
   326c0:	0d64      	lsrs	r4, r4, #21
   326c2:	0fcf      	lsrs	r7, r1, #31
   326c4:	2c00      	cmp	r4, #0
   326c6:	d04f      	beq.n	32768 <__aeabi_ddiv+0xc4>
   326c8:	4b6f      	ldr	r3, [pc, #444]	; (32888 <__aeabi_ddiv+0x1e4>)
   326ca:	429c      	cmp	r4, r3
   326cc:	d035      	beq.n	3273a <__aeabi_ddiv+0x96>
   326ce:	2380      	movs	r3, #128	; 0x80
   326d0:	0f42      	lsrs	r2, r0, #29
   326d2:	041b      	lsls	r3, r3, #16
   326d4:	00f6      	lsls	r6, r6, #3
   326d6:	4313      	orrs	r3, r2
   326d8:	4333      	orrs	r3, r6
   326da:	4699      	mov	r9, r3
   326dc:	00c3      	lsls	r3, r0, #3
   326de:	4698      	mov	r8, r3
   326e0:	4b6a      	ldr	r3, [pc, #424]	; (3288c <__aeabi_ddiv+0x1e8>)
   326e2:	2600      	movs	r6, #0
   326e4:	469c      	mov	ip, r3
   326e6:	2300      	movs	r3, #0
   326e8:	4464      	add	r4, ip
   326ea:	9303      	str	r3, [sp, #12]
   326ec:	032b      	lsls	r3, r5, #12
   326ee:	0b1b      	lsrs	r3, r3, #12
   326f0:	469b      	mov	fp, r3
   326f2:	006b      	lsls	r3, r5, #1
   326f4:	0fed      	lsrs	r5, r5, #31
   326f6:	4650      	mov	r0, sl
   326f8:	0d5b      	lsrs	r3, r3, #21
   326fa:	9501      	str	r5, [sp, #4]
   326fc:	d05e      	beq.n	327bc <__aeabi_ddiv+0x118>
   326fe:	4a62      	ldr	r2, [pc, #392]	; (32888 <__aeabi_ddiv+0x1e4>)
   32700:	4293      	cmp	r3, r2
   32702:	d053      	beq.n	327ac <__aeabi_ddiv+0x108>
   32704:	465a      	mov	r2, fp
   32706:	00d1      	lsls	r1, r2, #3
   32708:	2280      	movs	r2, #128	; 0x80
   3270a:	0f40      	lsrs	r0, r0, #29
   3270c:	0412      	lsls	r2, r2, #16
   3270e:	4302      	orrs	r2, r0
   32710:	430a      	orrs	r2, r1
   32712:	4693      	mov	fp, r2
   32714:	4652      	mov	r2, sl
   32716:	00d1      	lsls	r1, r2, #3
   32718:	4a5c      	ldr	r2, [pc, #368]	; (3288c <__aeabi_ddiv+0x1e8>)
   3271a:	4694      	mov	ip, r2
   3271c:	2200      	movs	r2, #0
   3271e:	4463      	add	r3, ip
   32720:	0038      	movs	r0, r7
   32722:	4068      	eors	r0, r5
   32724:	4684      	mov	ip, r0
   32726:	9002      	str	r0, [sp, #8]
   32728:	1ae4      	subs	r4, r4, r3
   3272a:	4316      	orrs	r6, r2
   3272c:	2e0f      	cmp	r6, #15
   3272e:	d900      	bls.n	32732 <__aeabi_ddiv+0x8e>
   32730:	e0b4      	b.n	3289c <__aeabi_ddiv+0x1f8>
   32732:	4b57      	ldr	r3, [pc, #348]	; (32890 <__aeabi_ddiv+0x1ec>)
   32734:	00b6      	lsls	r6, r6, #2
   32736:	599b      	ldr	r3, [r3, r6]
   32738:	469f      	mov	pc, r3
   3273a:	0003      	movs	r3, r0
   3273c:	4333      	orrs	r3, r6
   3273e:	4699      	mov	r9, r3
   32740:	d16c      	bne.n	3281c <__aeabi_ddiv+0x178>
   32742:	2300      	movs	r3, #0
   32744:	4698      	mov	r8, r3
   32746:	3302      	adds	r3, #2
   32748:	2608      	movs	r6, #8
   3274a:	9303      	str	r3, [sp, #12]
   3274c:	e7ce      	b.n	326ec <__aeabi_ddiv+0x48>
   3274e:	46cb      	mov	fp, r9
   32750:	4641      	mov	r1, r8
   32752:	9a03      	ldr	r2, [sp, #12]
   32754:	9701      	str	r7, [sp, #4]
   32756:	2a02      	cmp	r2, #2
   32758:	d165      	bne.n	32826 <__aeabi_ddiv+0x182>
   3275a:	9b01      	ldr	r3, [sp, #4]
   3275c:	4c4a      	ldr	r4, [pc, #296]	; (32888 <__aeabi_ddiv+0x1e4>)
   3275e:	469c      	mov	ip, r3
   32760:	2300      	movs	r3, #0
   32762:	2200      	movs	r2, #0
   32764:	4698      	mov	r8, r3
   32766:	e06b      	b.n	32840 <__aeabi_ddiv+0x19c>
   32768:	0003      	movs	r3, r0
   3276a:	4333      	orrs	r3, r6
   3276c:	4699      	mov	r9, r3
   3276e:	d04e      	beq.n	3280e <__aeabi_ddiv+0x16a>
   32770:	2e00      	cmp	r6, #0
   32772:	d100      	bne.n	32776 <__aeabi_ddiv+0xd2>
   32774:	e1bc      	b.n	32af0 <__aeabi_ddiv+0x44c>
   32776:	0030      	movs	r0, r6
   32778:	f001 f8ca 	bl	33910 <__clzsi2>
   3277c:	0003      	movs	r3, r0
   3277e:	3b0b      	subs	r3, #11
   32780:	2b1c      	cmp	r3, #28
   32782:	dd00      	ble.n	32786 <__aeabi_ddiv+0xe2>
   32784:	e1ac      	b.n	32ae0 <__aeabi_ddiv+0x43c>
   32786:	221d      	movs	r2, #29
   32788:	1ad3      	subs	r3, r2, r3
   3278a:	465a      	mov	r2, fp
   3278c:	0001      	movs	r1, r0
   3278e:	40da      	lsrs	r2, r3
   32790:	3908      	subs	r1, #8
   32792:	408e      	lsls	r6, r1
   32794:	0013      	movs	r3, r2
   32796:	4333      	orrs	r3, r6
   32798:	4699      	mov	r9, r3
   3279a:	465b      	mov	r3, fp
   3279c:	408b      	lsls	r3, r1
   3279e:	4698      	mov	r8, r3
   327a0:	2300      	movs	r3, #0
   327a2:	4c3c      	ldr	r4, [pc, #240]	; (32894 <__aeabi_ddiv+0x1f0>)
   327a4:	2600      	movs	r6, #0
   327a6:	1a24      	subs	r4, r4, r0
   327a8:	9303      	str	r3, [sp, #12]
   327aa:	e79f      	b.n	326ec <__aeabi_ddiv+0x48>
   327ac:	4651      	mov	r1, sl
   327ae:	465a      	mov	r2, fp
   327b0:	4311      	orrs	r1, r2
   327b2:	d129      	bne.n	32808 <__aeabi_ddiv+0x164>
   327b4:	2200      	movs	r2, #0
   327b6:	4693      	mov	fp, r2
   327b8:	3202      	adds	r2, #2
   327ba:	e7b1      	b.n	32720 <__aeabi_ddiv+0x7c>
   327bc:	4659      	mov	r1, fp
   327be:	4301      	orrs	r1, r0
   327c0:	d01e      	beq.n	32800 <__aeabi_ddiv+0x15c>
   327c2:	465b      	mov	r3, fp
   327c4:	2b00      	cmp	r3, #0
   327c6:	d100      	bne.n	327ca <__aeabi_ddiv+0x126>
   327c8:	e19e      	b.n	32b08 <__aeabi_ddiv+0x464>
   327ca:	4658      	mov	r0, fp
   327cc:	f001 f8a0 	bl	33910 <__clzsi2>
   327d0:	0003      	movs	r3, r0
   327d2:	3b0b      	subs	r3, #11
   327d4:	2b1c      	cmp	r3, #28
   327d6:	dd00      	ble.n	327da <__aeabi_ddiv+0x136>
   327d8:	e18f      	b.n	32afa <__aeabi_ddiv+0x456>
   327da:	0002      	movs	r2, r0
   327dc:	4659      	mov	r1, fp
   327de:	3a08      	subs	r2, #8
   327e0:	4091      	lsls	r1, r2
   327e2:	468b      	mov	fp, r1
   327e4:	211d      	movs	r1, #29
   327e6:	1acb      	subs	r3, r1, r3
   327e8:	4651      	mov	r1, sl
   327ea:	40d9      	lsrs	r1, r3
   327ec:	000b      	movs	r3, r1
   327ee:	4659      	mov	r1, fp
   327f0:	430b      	orrs	r3, r1
   327f2:	4651      	mov	r1, sl
   327f4:	469b      	mov	fp, r3
   327f6:	4091      	lsls	r1, r2
   327f8:	4b26      	ldr	r3, [pc, #152]	; (32894 <__aeabi_ddiv+0x1f0>)
   327fa:	2200      	movs	r2, #0
   327fc:	1a1b      	subs	r3, r3, r0
   327fe:	e78f      	b.n	32720 <__aeabi_ddiv+0x7c>
   32800:	2300      	movs	r3, #0
   32802:	2201      	movs	r2, #1
   32804:	469b      	mov	fp, r3
   32806:	e78b      	b.n	32720 <__aeabi_ddiv+0x7c>
   32808:	4651      	mov	r1, sl
   3280a:	2203      	movs	r2, #3
   3280c:	e788      	b.n	32720 <__aeabi_ddiv+0x7c>
   3280e:	2300      	movs	r3, #0
   32810:	4698      	mov	r8, r3
   32812:	3301      	adds	r3, #1
   32814:	2604      	movs	r6, #4
   32816:	2400      	movs	r4, #0
   32818:	9303      	str	r3, [sp, #12]
   3281a:	e767      	b.n	326ec <__aeabi_ddiv+0x48>
   3281c:	2303      	movs	r3, #3
   3281e:	46b1      	mov	r9, r6
   32820:	9303      	str	r3, [sp, #12]
   32822:	260c      	movs	r6, #12
   32824:	e762      	b.n	326ec <__aeabi_ddiv+0x48>
   32826:	2a03      	cmp	r2, #3
   32828:	d100      	bne.n	3282c <__aeabi_ddiv+0x188>
   3282a:	e25c      	b.n	32ce6 <__aeabi_ddiv+0x642>
   3282c:	9b01      	ldr	r3, [sp, #4]
   3282e:	2a01      	cmp	r2, #1
   32830:	d000      	beq.n	32834 <__aeabi_ddiv+0x190>
   32832:	e1e4      	b.n	32bfe <__aeabi_ddiv+0x55a>
   32834:	4013      	ands	r3, r2
   32836:	469c      	mov	ip, r3
   32838:	2300      	movs	r3, #0
   3283a:	2400      	movs	r4, #0
   3283c:	2200      	movs	r2, #0
   3283e:	4698      	mov	r8, r3
   32840:	2100      	movs	r1, #0
   32842:	0312      	lsls	r2, r2, #12
   32844:	0b13      	lsrs	r3, r2, #12
   32846:	0d0a      	lsrs	r2, r1, #20
   32848:	0512      	lsls	r2, r2, #20
   3284a:	431a      	orrs	r2, r3
   3284c:	0523      	lsls	r3, r4, #20
   3284e:	4c12      	ldr	r4, [pc, #72]	; (32898 <__aeabi_ddiv+0x1f4>)
   32850:	4640      	mov	r0, r8
   32852:	4022      	ands	r2, r4
   32854:	4313      	orrs	r3, r2
   32856:	4662      	mov	r2, ip
   32858:	005b      	lsls	r3, r3, #1
   3285a:	07d2      	lsls	r2, r2, #31
   3285c:	085b      	lsrs	r3, r3, #1
   3285e:	4313      	orrs	r3, r2
   32860:	0019      	movs	r1, r3
   32862:	b007      	add	sp, #28
   32864:	bc3c      	pop	{r2, r3, r4, r5}
   32866:	4690      	mov	r8, r2
   32868:	4699      	mov	r9, r3
   3286a:	46a2      	mov	sl, r4
   3286c:	46ab      	mov	fp, r5
   3286e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32870:	2300      	movs	r3, #0
   32872:	2280      	movs	r2, #128	; 0x80
   32874:	469c      	mov	ip, r3
   32876:	0312      	lsls	r2, r2, #12
   32878:	4698      	mov	r8, r3
   3287a:	4c03      	ldr	r4, [pc, #12]	; (32888 <__aeabi_ddiv+0x1e4>)
   3287c:	e7e0      	b.n	32840 <__aeabi_ddiv+0x19c>
   3287e:	2300      	movs	r3, #0
   32880:	4c01      	ldr	r4, [pc, #4]	; (32888 <__aeabi_ddiv+0x1e4>)
   32882:	2200      	movs	r2, #0
   32884:	4698      	mov	r8, r3
   32886:	e7db      	b.n	32840 <__aeabi_ddiv+0x19c>
   32888:	000007ff 	.word	0x000007ff
   3288c:	fffffc01 	.word	0xfffffc01
   32890:	00038ea8 	.word	0x00038ea8
   32894:	fffffc0d 	.word	0xfffffc0d
   32898:	800fffff 	.word	0x800fffff
   3289c:	45d9      	cmp	r9, fp
   3289e:	d900      	bls.n	328a2 <__aeabi_ddiv+0x1fe>
   328a0:	e139      	b.n	32b16 <__aeabi_ddiv+0x472>
   328a2:	d100      	bne.n	328a6 <__aeabi_ddiv+0x202>
   328a4:	e134      	b.n	32b10 <__aeabi_ddiv+0x46c>
   328a6:	2300      	movs	r3, #0
   328a8:	4646      	mov	r6, r8
   328aa:	464d      	mov	r5, r9
   328ac:	469a      	mov	sl, r3
   328ae:	3c01      	subs	r4, #1
   328b0:	465b      	mov	r3, fp
   328b2:	0e0a      	lsrs	r2, r1, #24
   328b4:	021b      	lsls	r3, r3, #8
   328b6:	431a      	orrs	r2, r3
   328b8:	020b      	lsls	r3, r1, #8
   328ba:	0c17      	lsrs	r7, r2, #16
   328bc:	9303      	str	r3, [sp, #12]
   328be:	0413      	lsls	r3, r2, #16
   328c0:	0c1b      	lsrs	r3, r3, #16
   328c2:	0039      	movs	r1, r7
   328c4:	0028      	movs	r0, r5
   328c6:	4690      	mov	r8, r2
   328c8:	9301      	str	r3, [sp, #4]
   328ca:	f7ff fa3b 	bl	31d44 <__udivsi3>
   328ce:	0002      	movs	r2, r0
   328d0:	9b01      	ldr	r3, [sp, #4]
   328d2:	4683      	mov	fp, r0
   328d4:	435a      	muls	r2, r3
   328d6:	0028      	movs	r0, r5
   328d8:	0039      	movs	r1, r7
   328da:	4691      	mov	r9, r2
   328dc:	f7ff fab8 	bl	31e50 <__aeabi_uidivmod>
   328e0:	0c35      	lsrs	r5, r6, #16
   328e2:	0409      	lsls	r1, r1, #16
   328e4:	430d      	orrs	r5, r1
   328e6:	45a9      	cmp	r9, r5
   328e8:	d90d      	bls.n	32906 <__aeabi_ddiv+0x262>
   328ea:	465b      	mov	r3, fp
   328ec:	4445      	add	r5, r8
   328ee:	3b01      	subs	r3, #1
   328f0:	45a8      	cmp	r8, r5
   328f2:	d900      	bls.n	328f6 <__aeabi_ddiv+0x252>
   328f4:	e13a      	b.n	32b6c <__aeabi_ddiv+0x4c8>
   328f6:	45a9      	cmp	r9, r5
   328f8:	d800      	bhi.n	328fc <__aeabi_ddiv+0x258>
   328fa:	e137      	b.n	32b6c <__aeabi_ddiv+0x4c8>
   328fc:	2302      	movs	r3, #2
   328fe:	425b      	negs	r3, r3
   32900:	469c      	mov	ip, r3
   32902:	4445      	add	r5, r8
   32904:	44e3      	add	fp, ip
   32906:	464b      	mov	r3, r9
   32908:	1aeb      	subs	r3, r5, r3
   3290a:	0039      	movs	r1, r7
   3290c:	0018      	movs	r0, r3
   3290e:	9304      	str	r3, [sp, #16]
   32910:	f7ff fa18 	bl	31d44 <__udivsi3>
   32914:	9b01      	ldr	r3, [sp, #4]
   32916:	0005      	movs	r5, r0
   32918:	4343      	muls	r3, r0
   3291a:	0039      	movs	r1, r7
   3291c:	9804      	ldr	r0, [sp, #16]
   3291e:	4699      	mov	r9, r3
   32920:	f7ff fa96 	bl	31e50 <__aeabi_uidivmod>
   32924:	0433      	lsls	r3, r6, #16
   32926:	0409      	lsls	r1, r1, #16
   32928:	0c1b      	lsrs	r3, r3, #16
   3292a:	430b      	orrs	r3, r1
   3292c:	4599      	cmp	r9, r3
   3292e:	d909      	bls.n	32944 <__aeabi_ddiv+0x2a0>
   32930:	4443      	add	r3, r8
   32932:	1e6a      	subs	r2, r5, #1
   32934:	4598      	cmp	r8, r3
   32936:	d900      	bls.n	3293a <__aeabi_ddiv+0x296>
   32938:	e11a      	b.n	32b70 <__aeabi_ddiv+0x4cc>
   3293a:	4599      	cmp	r9, r3
   3293c:	d800      	bhi.n	32940 <__aeabi_ddiv+0x29c>
   3293e:	e117      	b.n	32b70 <__aeabi_ddiv+0x4cc>
   32940:	3d02      	subs	r5, #2
   32942:	4443      	add	r3, r8
   32944:	464a      	mov	r2, r9
   32946:	1a9b      	subs	r3, r3, r2
   32948:	465a      	mov	r2, fp
   3294a:	0412      	lsls	r2, r2, #16
   3294c:	432a      	orrs	r2, r5
   3294e:	9903      	ldr	r1, [sp, #12]
   32950:	4693      	mov	fp, r2
   32952:	0c10      	lsrs	r0, r2, #16
   32954:	0c0a      	lsrs	r2, r1, #16
   32956:	4691      	mov	r9, r2
   32958:	0409      	lsls	r1, r1, #16
   3295a:	465a      	mov	r2, fp
   3295c:	0c09      	lsrs	r1, r1, #16
   3295e:	464e      	mov	r6, r9
   32960:	000d      	movs	r5, r1
   32962:	0412      	lsls	r2, r2, #16
   32964:	0c12      	lsrs	r2, r2, #16
   32966:	4345      	muls	r5, r0
   32968:	9105      	str	r1, [sp, #20]
   3296a:	4351      	muls	r1, r2
   3296c:	4372      	muls	r2, r6
   3296e:	4370      	muls	r0, r6
   32970:	1952      	adds	r2, r2, r5
   32972:	0c0e      	lsrs	r6, r1, #16
   32974:	18b2      	adds	r2, r6, r2
   32976:	4295      	cmp	r5, r2
   32978:	d903      	bls.n	32982 <__aeabi_ddiv+0x2de>
   3297a:	2580      	movs	r5, #128	; 0x80
   3297c:	026d      	lsls	r5, r5, #9
   3297e:	46ac      	mov	ip, r5
   32980:	4460      	add	r0, ip
   32982:	0c15      	lsrs	r5, r2, #16
   32984:	0409      	lsls	r1, r1, #16
   32986:	0412      	lsls	r2, r2, #16
   32988:	0c09      	lsrs	r1, r1, #16
   3298a:	1828      	adds	r0, r5, r0
   3298c:	1852      	adds	r2, r2, r1
   3298e:	4283      	cmp	r3, r0
   32990:	d200      	bcs.n	32994 <__aeabi_ddiv+0x2f0>
   32992:	e0ce      	b.n	32b32 <__aeabi_ddiv+0x48e>
   32994:	d100      	bne.n	32998 <__aeabi_ddiv+0x2f4>
   32996:	e0c8      	b.n	32b2a <__aeabi_ddiv+0x486>
   32998:	1a1d      	subs	r5, r3, r0
   3299a:	4653      	mov	r3, sl
   3299c:	1a9e      	subs	r6, r3, r2
   3299e:	45b2      	cmp	sl, r6
   329a0:	4192      	sbcs	r2, r2
   329a2:	4252      	negs	r2, r2
   329a4:	1aab      	subs	r3, r5, r2
   329a6:	469a      	mov	sl, r3
   329a8:	4598      	cmp	r8, r3
   329aa:	d100      	bne.n	329ae <__aeabi_ddiv+0x30a>
   329ac:	e117      	b.n	32bde <__aeabi_ddiv+0x53a>
   329ae:	0039      	movs	r1, r7
   329b0:	0018      	movs	r0, r3
   329b2:	f7ff f9c7 	bl	31d44 <__udivsi3>
   329b6:	9b01      	ldr	r3, [sp, #4]
   329b8:	0005      	movs	r5, r0
   329ba:	4343      	muls	r3, r0
   329bc:	0039      	movs	r1, r7
   329be:	4650      	mov	r0, sl
   329c0:	9304      	str	r3, [sp, #16]
   329c2:	f7ff fa45 	bl	31e50 <__aeabi_uidivmod>
   329c6:	9804      	ldr	r0, [sp, #16]
   329c8:	040b      	lsls	r3, r1, #16
   329ca:	0c31      	lsrs	r1, r6, #16
   329cc:	4319      	orrs	r1, r3
   329ce:	4288      	cmp	r0, r1
   329d0:	d909      	bls.n	329e6 <__aeabi_ddiv+0x342>
   329d2:	4441      	add	r1, r8
   329d4:	1e6b      	subs	r3, r5, #1
   329d6:	4588      	cmp	r8, r1
   329d8:	d900      	bls.n	329dc <__aeabi_ddiv+0x338>
   329da:	e107      	b.n	32bec <__aeabi_ddiv+0x548>
   329dc:	4288      	cmp	r0, r1
   329de:	d800      	bhi.n	329e2 <__aeabi_ddiv+0x33e>
   329e0:	e104      	b.n	32bec <__aeabi_ddiv+0x548>
   329e2:	3d02      	subs	r5, #2
   329e4:	4441      	add	r1, r8
   329e6:	9b04      	ldr	r3, [sp, #16]
   329e8:	1acb      	subs	r3, r1, r3
   329ea:	0018      	movs	r0, r3
   329ec:	0039      	movs	r1, r7
   329ee:	9304      	str	r3, [sp, #16]
   329f0:	f7ff f9a8 	bl	31d44 <__udivsi3>
   329f4:	9b01      	ldr	r3, [sp, #4]
   329f6:	4682      	mov	sl, r0
   329f8:	4343      	muls	r3, r0
   329fa:	0039      	movs	r1, r7
   329fc:	9804      	ldr	r0, [sp, #16]
   329fe:	9301      	str	r3, [sp, #4]
   32a00:	f7ff fa26 	bl	31e50 <__aeabi_uidivmod>
   32a04:	9801      	ldr	r0, [sp, #4]
   32a06:	040b      	lsls	r3, r1, #16
   32a08:	0431      	lsls	r1, r6, #16
   32a0a:	0c09      	lsrs	r1, r1, #16
   32a0c:	4319      	orrs	r1, r3
   32a0e:	4288      	cmp	r0, r1
   32a10:	d90d      	bls.n	32a2e <__aeabi_ddiv+0x38a>
   32a12:	4653      	mov	r3, sl
   32a14:	4441      	add	r1, r8
   32a16:	3b01      	subs	r3, #1
   32a18:	4588      	cmp	r8, r1
   32a1a:	d900      	bls.n	32a1e <__aeabi_ddiv+0x37a>
   32a1c:	e0e8      	b.n	32bf0 <__aeabi_ddiv+0x54c>
   32a1e:	4288      	cmp	r0, r1
   32a20:	d800      	bhi.n	32a24 <__aeabi_ddiv+0x380>
   32a22:	e0e5      	b.n	32bf0 <__aeabi_ddiv+0x54c>
   32a24:	2302      	movs	r3, #2
   32a26:	425b      	negs	r3, r3
   32a28:	469c      	mov	ip, r3
   32a2a:	4441      	add	r1, r8
   32a2c:	44e2      	add	sl, ip
   32a2e:	9b01      	ldr	r3, [sp, #4]
   32a30:	042d      	lsls	r5, r5, #16
   32a32:	1ace      	subs	r6, r1, r3
   32a34:	4651      	mov	r1, sl
   32a36:	4329      	orrs	r1, r5
   32a38:	9d05      	ldr	r5, [sp, #20]
   32a3a:	464f      	mov	r7, r9
   32a3c:	002a      	movs	r2, r5
   32a3e:	040b      	lsls	r3, r1, #16
   32a40:	0c08      	lsrs	r0, r1, #16
   32a42:	0c1b      	lsrs	r3, r3, #16
   32a44:	435a      	muls	r2, r3
   32a46:	4345      	muls	r5, r0
   32a48:	437b      	muls	r3, r7
   32a4a:	4378      	muls	r0, r7
   32a4c:	195b      	adds	r3, r3, r5
   32a4e:	0c17      	lsrs	r7, r2, #16
   32a50:	18fb      	adds	r3, r7, r3
   32a52:	429d      	cmp	r5, r3
   32a54:	d903      	bls.n	32a5e <__aeabi_ddiv+0x3ba>
   32a56:	2580      	movs	r5, #128	; 0x80
   32a58:	026d      	lsls	r5, r5, #9
   32a5a:	46ac      	mov	ip, r5
   32a5c:	4460      	add	r0, ip
   32a5e:	0c1d      	lsrs	r5, r3, #16
   32a60:	0412      	lsls	r2, r2, #16
   32a62:	041b      	lsls	r3, r3, #16
   32a64:	0c12      	lsrs	r2, r2, #16
   32a66:	1828      	adds	r0, r5, r0
   32a68:	189b      	adds	r3, r3, r2
   32a6a:	4286      	cmp	r6, r0
   32a6c:	d200      	bcs.n	32a70 <__aeabi_ddiv+0x3cc>
   32a6e:	e093      	b.n	32b98 <__aeabi_ddiv+0x4f4>
   32a70:	d100      	bne.n	32a74 <__aeabi_ddiv+0x3d0>
   32a72:	e08e      	b.n	32b92 <__aeabi_ddiv+0x4ee>
   32a74:	2301      	movs	r3, #1
   32a76:	4319      	orrs	r1, r3
   32a78:	4ba0      	ldr	r3, [pc, #640]	; (32cfc <__aeabi_ddiv+0x658>)
   32a7a:	18e3      	adds	r3, r4, r3
   32a7c:	2b00      	cmp	r3, #0
   32a7e:	dc00      	bgt.n	32a82 <__aeabi_ddiv+0x3de>
   32a80:	e099      	b.n	32bb6 <__aeabi_ddiv+0x512>
   32a82:	074a      	lsls	r2, r1, #29
   32a84:	d000      	beq.n	32a88 <__aeabi_ddiv+0x3e4>
   32a86:	e09e      	b.n	32bc6 <__aeabi_ddiv+0x522>
   32a88:	465a      	mov	r2, fp
   32a8a:	01d2      	lsls	r2, r2, #7
   32a8c:	d506      	bpl.n	32a9c <__aeabi_ddiv+0x3f8>
   32a8e:	465a      	mov	r2, fp
   32a90:	4b9b      	ldr	r3, [pc, #620]	; (32d00 <__aeabi_ddiv+0x65c>)
   32a92:	401a      	ands	r2, r3
   32a94:	2380      	movs	r3, #128	; 0x80
   32a96:	4693      	mov	fp, r2
   32a98:	00db      	lsls	r3, r3, #3
   32a9a:	18e3      	adds	r3, r4, r3
   32a9c:	4a99      	ldr	r2, [pc, #612]	; (32d04 <__aeabi_ddiv+0x660>)
   32a9e:	4293      	cmp	r3, r2
   32aa0:	dd68      	ble.n	32b74 <__aeabi_ddiv+0x4d0>
   32aa2:	2301      	movs	r3, #1
   32aa4:	9a02      	ldr	r2, [sp, #8]
   32aa6:	4c98      	ldr	r4, [pc, #608]	; (32d08 <__aeabi_ddiv+0x664>)
   32aa8:	401a      	ands	r2, r3
   32aaa:	2300      	movs	r3, #0
   32aac:	4694      	mov	ip, r2
   32aae:	4698      	mov	r8, r3
   32ab0:	2200      	movs	r2, #0
   32ab2:	e6c5      	b.n	32840 <__aeabi_ddiv+0x19c>
   32ab4:	2280      	movs	r2, #128	; 0x80
   32ab6:	464b      	mov	r3, r9
   32ab8:	0312      	lsls	r2, r2, #12
   32aba:	4213      	tst	r3, r2
   32abc:	d00a      	beq.n	32ad4 <__aeabi_ddiv+0x430>
   32abe:	465b      	mov	r3, fp
   32ac0:	4213      	tst	r3, r2
   32ac2:	d106      	bne.n	32ad2 <__aeabi_ddiv+0x42e>
   32ac4:	431a      	orrs	r2, r3
   32ac6:	0312      	lsls	r2, r2, #12
   32ac8:	0b12      	lsrs	r2, r2, #12
   32aca:	46ac      	mov	ip, r5
   32acc:	4688      	mov	r8, r1
   32ace:	4c8e      	ldr	r4, [pc, #568]	; (32d08 <__aeabi_ddiv+0x664>)
   32ad0:	e6b6      	b.n	32840 <__aeabi_ddiv+0x19c>
   32ad2:	464b      	mov	r3, r9
   32ad4:	431a      	orrs	r2, r3
   32ad6:	0312      	lsls	r2, r2, #12
   32ad8:	0b12      	lsrs	r2, r2, #12
   32ada:	46bc      	mov	ip, r7
   32adc:	4c8a      	ldr	r4, [pc, #552]	; (32d08 <__aeabi_ddiv+0x664>)
   32ade:	e6af      	b.n	32840 <__aeabi_ddiv+0x19c>
   32ae0:	0003      	movs	r3, r0
   32ae2:	465a      	mov	r2, fp
   32ae4:	3b28      	subs	r3, #40	; 0x28
   32ae6:	409a      	lsls	r2, r3
   32ae8:	2300      	movs	r3, #0
   32aea:	4691      	mov	r9, r2
   32aec:	4698      	mov	r8, r3
   32aee:	e657      	b.n	327a0 <__aeabi_ddiv+0xfc>
   32af0:	4658      	mov	r0, fp
   32af2:	f000 ff0d 	bl	33910 <__clzsi2>
   32af6:	3020      	adds	r0, #32
   32af8:	e640      	b.n	3277c <__aeabi_ddiv+0xd8>
   32afa:	0003      	movs	r3, r0
   32afc:	4652      	mov	r2, sl
   32afe:	3b28      	subs	r3, #40	; 0x28
   32b00:	409a      	lsls	r2, r3
   32b02:	2100      	movs	r1, #0
   32b04:	4693      	mov	fp, r2
   32b06:	e677      	b.n	327f8 <__aeabi_ddiv+0x154>
   32b08:	f000 ff02 	bl	33910 <__clzsi2>
   32b0c:	3020      	adds	r0, #32
   32b0e:	e65f      	b.n	327d0 <__aeabi_ddiv+0x12c>
   32b10:	4588      	cmp	r8, r1
   32b12:	d200      	bcs.n	32b16 <__aeabi_ddiv+0x472>
   32b14:	e6c7      	b.n	328a6 <__aeabi_ddiv+0x202>
   32b16:	464b      	mov	r3, r9
   32b18:	07de      	lsls	r6, r3, #31
   32b1a:	085d      	lsrs	r5, r3, #1
   32b1c:	4643      	mov	r3, r8
   32b1e:	085b      	lsrs	r3, r3, #1
   32b20:	431e      	orrs	r6, r3
   32b22:	4643      	mov	r3, r8
   32b24:	07db      	lsls	r3, r3, #31
   32b26:	469a      	mov	sl, r3
   32b28:	e6c2      	b.n	328b0 <__aeabi_ddiv+0x20c>
   32b2a:	2500      	movs	r5, #0
   32b2c:	4592      	cmp	sl, r2
   32b2e:	d300      	bcc.n	32b32 <__aeabi_ddiv+0x48e>
   32b30:	e733      	b.n	3299a <__aeabi_ddiv+0x2f6>
   32b32:	9e03      	ldr	r6, [sp, #12]
   32b34:	4659      	mov	r1, fp
   32b36:	46b4      	mov	ip, r6
   32b38:	44e2      	add	sl, ip
   32b3a:	45b2      	cmp	sl, r6
   32b3c:	41ad      	sbcs	r5, r5
   32b3e:	426d      	negs	r5, r5
   32b40:	4445      	add	r5, r8
   32b42:	18eb      	adds	r3, r5, r3
   32b44:	3901      	subs	r1, #1
   32b46:	4598      	cmp	r8, r3
   32b48:	d207      	bcs.n	32b5a <__aeabi_ddiv+0x4b6>
   32b4a:	4298      	cmp	r0, r3
   32b4c:	d900      	bls.n	32b50 <__aeabi_ddiv+0x4ac>
   32b4e:	e07f      	b.n	32c50 <__aeabi_ddiv+0x5ac>
   32b50:	d100      	bne.n	32b54 <__aeabi_ddiv+0x4b0>
   32b52:	e0bc      	b.n	32cce <__aeabi_ddiv+0x62a>
   32b54:	1a1d      	subs	r5, r3, r0
   32b56:	468b      	mov	fp, r1
   32b58:	e71f      	b.n	3299a <__aeabi_ddiv+0x2f6>
   32b5a:	4598      	cmp	r8, r3
   32b5c:	d1fa      	bne.n	32b54 <__aeabi_ddiv+0x4b0>
   32b5e:	9d03      	ldr	r5, [sp, #12]
   32b60:	4555      	cmp	r5, sl
   32b62:	d9f2      	bls.n	32b4a <__aeabi_ddiv+0x4a6>
   32b64:	4643      	mov	r3, r8
   32b66:	468b      	mov	fp, r1
   32b68:	1a1d      	subs	r5, r3, r0
   32b6a:	e716      	b.n	3299a <__aeabi_ddiv+0x2f6>
   32b6c:	469b      	mov	fp, r3
   32b6e:	e6ca      	b.n	32906 <__aeabi_ddiv+0x262>
   32b70:	0015      	movs	r5, r2
   32b72:	e6e7      	b.n	32944 <__aeabi_ddiv+0x2a0>
   32b74:	465a      	mov	r2, fp
   32b76:	08c9      	lsrs	r1, r1, #3
   32b78:	0752      	lsls	r2, r2, #29
   32b7a:	430a      	orrs	r2, r1
   32b7c:	055b      	lsls	r3, r3, #21
   32b7e:	4690      	mov	r8, r2
   32b80:	0d5c      	lsrs	r4, r3, #21
   32b82:	465a      	mov	r2, fp
   32b84:	2301      	movs	r3, #1
   32b86:	9902      	ldr	r1, [sp, #8]
   32b88:	0252      	lsls	r2, r2, #9
   32b8a:	4019      	ands	r1, r3
   32b8c:	0b12      	lsrs	r2, r2, #12
   32b8e:	468c      	mov	ip, r1
   32b90:	e656      	b.n	32840 <__aeabi_ddiv+0x19c>
   32b92:	2b00      	cmp	r3, #0
   32b94:	d100      	bne.n	32b98 <__aeabi_ddiv+0x4f4>
   32b96:	e76f      	b.n	32a78 <__aeabi_ddiv+0x3d4>
   32b98:	4446      	add	r6, r8
   32b9a:	1e4a      	subs	r2, r1, #1
   32b9c:	45b0      	cmp	r8, r6
   32b9e:	d929      	bls.n	32bf4 <__aeabi_ddiv+0x550>
   32ba0:	0011      	movs	r1, r2
   32ba2:	4286      	cmp	r6, r0
   32ba4:	d000      	beq.n	32ba8 <__aeabi_ddiv+0x504>
   32ba6:	e765      	b.n	32a74 <__aeabi_ddiv+0x3d0>
   32ba8:	9a03      	ldr	r2, [sp, #12]
   32baa:	4293      	cmp	r3, r2
   32bac:	d000      	beq.n	32bb0 <__aeabi_ddiv+0x50c>
   32bae:	e761      	b.n	32a74 <__aeabi_ddiv+0x3d0>
   32bb0:	e762      	b.n	32a78 <__aeabi_ddiv+0x3d4>
   32bb2:	2101      	movs	r1, #1
   32bb4:	4249      	negs	r1, r1
   32bb6:	2001      	movs	r0, #1
   32bb8:	1ac2      	subs	r2, r0, r3
   32bba:	2a38      	cmp	r2, #56	; 0x38
   32bbc:	dd21      	ble.n	32c02 <__aeabi_ddiv+0x55e>
   32bbe:	9b02      	ldr	r3, [sp, #8]
   32bc0:	4003      	ands	r3, r0
   32bc2:	469c      	mov	ip, r3
   32bc4:	e638      	b.n	32838 <__aeabi_ddiv+0x194>
   32bc6:	220f      	movs	r2, #15
   32bc8:	400a      	ands	r2, r1
   32bca:	2a04      	cmp	r2, #4
   32bcc:	d100      	bne.n	32bd0 <__aeabi_ddiv+0x52c>
   32bce:	e75b      	b.n	32a88 <__aeabi_ddiv+0x3e4>
   32bd0:	000a      	movs	r2, r1
   32bd2:	1d11      	adds	r1, r2, #4
   32bd4:	4291      	cmp	r1, r2
   32bd6:	4192      	sbcs	r2, r2
   32bd8:	4252      	negs	r2, r2
   32bda:	4493      	add	fp, r2
   32bdc:	e754      	b.n	32a88 <__aeabi_ddiv+0x3e4>
   32bde:	4b47      	ldr	r3, [pc, #284]	; (32cfc <__aeabi_ddiv+0x658>)
   32be0:	18e3      	adds	r3, r4, r3
   32be2:	2b00      	cmp	r3, #0
   32be4:	dde5      	ble.n	32bb2 <__aeabi_ddiv+0x50e>
   32be6:	2201      	movs	r2, #1
   32be8:	4252      	negs	r2, r2
   32bea:	e7f2      	b.n	32bd2 <__aeabi_ddiv+0x52e>
   32bec:	001d      	movs	r5, r3
   32bee:	e6fa      	b.n	329e6 <__aeabi_ddiv+0x342>
   32bf0:	469a      	mov	sl, r3
   32bf2:	e71c      	b.n	32a2e <__aeabi_ddiv+0x38a>
   32bf4:	42b0      	cmp	r0, r6
   32bf6:	d839      	bhi.n	32c6c <__aeabi_ddiv+0x5c8>
   32bf8:	d06e      	beq.n	32cd8 <__aeabi_ddiv+0x634>
   32bfa:	0011      	movs	r1, r2
   32bfc:	e73a      	b.n	32a74 <__aeabi_ddiv+0x3d0>
   32bfe:	9302      	str	r3, [sp, #8]
   32c00:	e73a      	b.n	32a78 <__aeabi_ddiv+0x3d4>
   32c02:	2a1f      	cmp	r2, #31
   32c04:	dc3c      	bgt.n	32c80 <__aeabi_ddiv+0x5dc>
   32c06:	2320      	movs	r3, #32
   32c08:	1a9b      	subs	r3, r3, r2
   32c0a:	000c      	movs	r4, r1
   32c0c:	4658      	mov	r0, fp
   32c0e:	4099      	lsls	r1, r3
   32c10:	4098      	lsls	r0, r3
   32c12:	1e4b      	subs	r3, r1, #1
   32c14:	4199      	sbcs	r1, r3
   32c16:	465b      	mov	r3, fp
   32c18:	40d4      	lsrs	r4, r2
   32c1a:	40d3      	lsrs	r3, r2
   32c1c:	4320      	orrs	r0, r4
   32c1e:	4308      	orrs	r0, r1
   32c20:	001a      	movs	r2, r3
   32c22:	0743      	lsls	r3, r0, #29
   32c24:	d009      	beq.n	32c3a <__aeabi_ddiv+0x596>
   32c26:	230f      	movs	r3, #15
   32c28:	4003      	ands	r3, r0
   32c2a:	2b04      	cmp	r3, #4
   32c2c:	d005      	beq.n	32c3a <__aeabi_ddiv+0x596>
   32c2e:	0001      	movs	r1, r0
   32c30:	1d08      	adds	r0, r1, #4
   32c32:	4288      	cmp	r0, r1
   32c34:	419b      	sbcs	r3, r3
   32c36:	425b      	negs	r3, r3
   32c38:	18d2      	adds	r2, r2, r3
   32c3a:	0213      	lsls	r3, r2, #8
   32c3c:	d53a      	bpl.n	32cb4 <__aeabi_ddiv+0x610>
   32c3e:	2301      	movs	r3, #1
   32c40:	9a02      	ldr	r2, [sp, #8]
   32c42:	2401      	movs	r4, #1
   32c44:	401a      	ands	r2, r3
   32c46:	2300      	movs	r3, #0
   32c48:	4694      	mov	ip, r2
   32c4a:	4698      	mov	r8, r3
   32c4c:	2200      	movs	r2, #0
   32c4e:	e5f7      	b.n	32840 <__aeabi_ddiv+0x19c>
   32c50:	2102      	movs	r1, #2
   32c52:	4249      	negs	r1, r1
   32c54:	468c      	mov	ip, r1
   32c56:	9d03      	ldr	r5, [sp, #12]
   32c58:	44e3      	add	fp, ip
   32c5a:	46ac      	mov	ip, r5
   32c5c:	44e2      	add	sl, ip
   32c5e:	45aa      	cmp	sl, r5
   32c60:	41ad      	sbcs	r5, r5
   32c62:	426d      	negs	r5, r5
   32c64:	4445      	add	r5, r8
   32c66:	18ed      	adds	r5, r5, r3
   32c68:	1a2d      	subs	r5, r5, r0
   32c6a:	e696      	b.n	3299a <__aeabi_ddiv+0x2f6>
   32c6c:	1e8a      	subs	r2, r1, #2
   32c6e:	9903      	ldr	r1, [sp, #12]
   32c70:	004d      	lsls	r5, r1, #1
   32c72:	428d      	cmp	r5, r1
   32c74:	4189      	sbcs	r1, r1
   32c76:	4249      	negs	r1, r1
   32c78:	4441      	add	r1, r8
   32c7a:	1876      	adds	r6, r6, r1
   32c7c:	9503      	str	r5, [sp, #12]
   32c7e:	e78f      	b.n	32ba0 <__aeabi_ddiv+0x4fc>
   32c80:	201f      	movs	r0, #31
   32c82:	4240      	negs	r0, r0
   32c84:	1ac3      	subs	r3, r0, r3
   32c86:	4658      	mov	r0, fp
   32c88:	40d8      	lsrs	r0, r3
   32c8a:	0003      	movs	r3, r0
   32c8c:	2a20      	cmp	r2, #32
   32c8e:	d028      	beq.n	32ce2 <__aeabi_ddiv+0x63e>
   32c90:	2040      	movs	r0, #64	; 0x40
   32c92:	465d      	mov	r5, fp
   32c94:	1a82      	subs	r2, r0, r2
   32c96:	4095      	lsls	r5, r2
   32c98:	4329      	orrs	r1, r5
   32c9a:	1e4a      	subs	r2, r1, #1
   32c9c:	4191      	sbcs	r1, r2
   32c9e:	4319      	orrs	r1, r3
   32ca0:	2307      	movs	r3, #7
   32ca2:	2200      	movs	r2, #0
   32ca4:	400b      	ands	r3, r1
   32ca6:	d009      	beq.n	32cbc <__aeabi_ddiv+0x618>
   32ca8:	230f      	movs	r3, #15
   32caa:	2200      	movs	r2, #0
   32cac:	400b      	ands	r3, r1
   32cae:	0008      	movs	r0, r1
   32cb0:	2b04      	cmp	r3, #4
   32cb2:	d1bd      	bne.n	32c30 <__aeabi_ddiv+0x58c>
   32cb4:	0001      	movs	r1, r0
   32cb6:	0753      	lsls	r3, r2, #29
   32cb8:	0252      	lsls	r2, r2, #9
   32cba:	0b12      	lsrs	r2, r2, #12
   32cbc:	08c9      	lsrs	r1, r1, #3
   32cbe:	4319      	orrs	r1, r3
   32cc0:	2301      	movs	r3, #1
   32cc2:	4688      	mov	r8, r1
   32cc4:	9902      	ldr	r1, [sp, #8]
   32cc6:	2400      	movs	r4, #0
   32cc8:	4019      	ands	r1, r3
   32cca:	468c      	mov	ip, r1
   32ccc:	e5b8      	b.n	32840 <__aeabi_ddiv+0x19c>
   32cce:	4552      	cmp	r2, sl
   32cd0:	d8be      	bhi.n	32c50 <__aeabi_ddiv+0x5ac>
   32cd2:	468b      	mov	fp, r1
   32cd4:	2500      	movs	r5, #0
   32cd6:	e660      	b.n	3299a <__aeabi_ddiv+0x2f6>
   32cd8:	9d03      	ldr	r5, [sp, #12]
   32cda:	429d      	cmp	r5, r3
   32cdc:	d3c6      	bcc.n	32c6c <__aeabi_ddiv+0x5c8>
   32cde:	0011      	movs	r1, r2
   32ce0:	e762      	b.n	32ba8 <__aeabi_ddiv+0x504>
   32ce2:	2500      	movs	r5, #0
   32ce4:	e7d8      	b.n	32c98 <__aeabi_ddiv+0x5f4>
   32ce6:	2280      	movs	r2, #128	; 0x80
   32ce8:	465b      	mov	r3, fp
   32cea:	0312      	lsls	r2, r2, #12
   32cec:	431a      	orrs	r2, r3
   32cee:	9b01      	ldr	r3, [sp, #4]
   32cf0:	0312      	lsls	r2, r2, #12
   32cf2:	0b12      	lsrs	r2, r2, #12
   32cf4:	469c      	mov	ip, r3
   32cf6:	4688      	mov	r8, r1
   32cf8:	4c03      	ldr	r4, [pc, #12]	; (32d08 <__aeabi_ddiv+0x664>)
   32cfa:	e5a1      	b.n	32840 <__aeabi_ddiv+0x19c>
   32cfc:	000003ff 	.word	0x000003ff
   32d00:	feffffff 	.word	0xfeffffff
   32d04:	000007fe 	.word	0x000007fe
   32d08:	000007ff 	.word	0x000007ff

00032d0c <__aeabi_dmul>:
   32d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   32d0e:	4657      	mov	r7, sl
   32d10:	4645      	mov	r5, r8
   32d12:	46de      	mov	lr, fp
   32d14:	464e      	mov	r6, r9
   32d16:	b5e0      	push	{r5, r6, r7, lr}
   32d18:	030c      	lsls	r4, r1, #12
   32d1a:	4698      	mov	r8, r3
   32d1c:	004e      	lsls	r6, r1, #1
   32d1e:	0b23      	lsrs	r3, r4, #12
   32d20:	b087      	sub	sp, #28
   32d22:	0007      	movs	r7, r0
   32d24:	4692      	mov	sl, r2
   32d26:	469b      	mov	fp, r3
   32d28:	0d76      	lsrs	r6, r6, #21
   32d2a:	0fcd      	lsrs	r5, r1, #31
   32d2c:	2e00      	cmp	r6, #0
   32d2e:	d06b      	beq.n	32e08 <__aeabi_dmul+0xfc>
   32d30:	4b6d      	ldr	r3, [pc, #436]	; (32ee8 <__aeabi_dmul+0x1dc>)
   32d32:	429e      	cmp	r6, r3
   32d34:	d035      	beq.n	32da2 <__aeabi_dmul+0x96>
   32d36:	2480      	movs	r4, #128	; 0x80
   32d38:	465b      	mov	r3, fp
   32d3a:	0f42      	lsrs	r2, r0, #29
   32d3c:	0424      	lsls	r4, r4, #16
   32d3e:	00db      	lsls	r3, r3, #3
   32d40:	4314      	orrs	r4, r2
   32d42:	431c      	orrs	r4, r3
   32d44:	00c3      	lsls	r3, r0, #3
   32d46:	4699      	mov	r9, r3
   32d48:	4b68      	ldr	r3, [pc, #416]	; (32eec <__aeabi_dmul+0x1e0>)
   32d4a:	46a3      	mov	fp, r4
   32d4c:	469c      	mov	ip, r3
   32d4e:	2300      	movs	r3, #0
   32d50:	2700      	movs	r7, #0
   32d52:	4466      	add	r6, ip
   32d54:	9302      	str	r3, [sp, #8]
   32d56:	4643      	mov	r3, r8
   32d58:	031c      	lsls	r4, r3, #12
   32d5a:	005a      	lsls	r2, r3, #1
   32d5c:	0fdb      	lsrs	r3, r3, #31
   32d5e:	4650      	mov	r0, sl
   32d60:	0b24      	lsrs	r4, r4, #12
   32d62:	0d52      	lsrs	r2, r2, #21
   32d64:	4698      	mov	r8, r3
   32d66:	d100      	bne.n	32d6a <__aeabi_dmul+0x5e>
   32d68:	e076      	b.n	32e58 <__aeabi_dmul+0x14c>
   32d6a:	4b5f      	ldr	r3, [pc, #380]	; (32ee8 <__aeabi_dmul+0x1dc>)
   32d6c:	429a      	cmp	r2, r3
   32d6e:	d06d      	beq.n	32e4c <__aeabi_dmul+0x140>
   32d70:	2380      	movs	r3, #128	; 0x80
   32d72:	0f41      	lsrs	r1, r0, #29
   32d74:	041b      	lsls	r3, r3, #16
   32d76:	430b      	orrs	r3, r1
   32d78:	495c      	ldr	r1, [pc, #368]	; (32eec <__aeabi_dmul+0x1e0>)
   32d7a:	00e4      	lsls	r4, r4, #3
   32d7c:	468c      	mov	ip, r1
   32d7e:	431c      	orrs	r4, r3
   32d80:	00c3      	lsls	r3, r0, #3
   32d82:	2000      	movs	r0, #0
   32d84:	4462      	add	r2, ip
   32d86:	4641      	mov	r1, r8
   32d88:	18b6      	adds	r6, r6, r2
   32d8a:	4069      	eors	r1, r5
   32d8c:	1c72      	adds	r2, r6, #1
   32d8e:	9101      	str	r1, [sp, #4]
   32d90:	4694      	mov	ip, r2
   32d92:	4307      	orrs	r7, r0
   32d94:	2f0f      	cmp	r7, #15
   32d96:	d900      	bls.n	32d9a <__aeabi_dmul+0x8e>
   32d98:	e0b0      	b.n	32efc <__aeabi_dmul+0x1f0>
   32d9a:	4a55      	ldr	r2, [pc, #340]	; (32ef0 <__aeabi_dmul+0x1e4>)
   32d9c:	00bf      	lsls	r7, r7, #2
   32d9e:	59d2      	ldr	r2, [r2, r7]
   32da0:	4697      	mov	pc, r2
   32da2:	465b      	mov	r3, fp
   32da4:	4303      	orrs	r3, r0
   32da6:	4699      	mov	r9, r3
   32da8:	d000      	beq.n	32dac <__aeabi_dmul+0xa0>
   32daa:	e087      	b.n	32ebc <__aeabi_dmul+0x1b0>
   32dac:	2300      	movs	r3, #0
   32dae:	469b      	mov	fp, r3
   32db0:	3302      	adds	r3, #2
   32db2:	2708      	movs	r7, #8
   32db4:	9302      	str	r3, [sp, #8]
   32db6:	e7ce      	b.n	32d56 <__aeabi_dmul+0x4a>
   32db8:	4642      	mov	r2, r8
   32dba:	9201      	str	r2, [sp, #4]
   32dbc:	2802      	cmp	r0, #2
   32dbe:	d067      	beq.n	32e90 <__aeabi_dmul+0x184>
   32dc0:	2803      	cmp	r0, #3
   32dc2:	d100      	bne.n	32dc6 <__aeabi_dmul+0xba>
   32dc4:	e20e      	b.n	331e4 <__aeabi_dmul+0x4d8>
   32dc6:	2801      	cmp	r0, #1
   32dc8:	d000      	beq.n	32dcc <__aeabi_dmul+0xc0>
   32dca:	e162      	b.n	33092 <__aeabi_dmul+0x386>
   32dcc:	2300      	movs	r3, #0
   32dce:	2400      	movs	r4, #0
   32dd0:	2200      	movs	r2, #0
   32dd2:	4699      	mov	r9, r3
   32dd4:	9901      	ldr	r1, [sp, #4]
   32dd6:	4001      	ands	r1, r0
   32dd8:	b2cd      	uxtb	r5, r1
   32dda:	2100      	movs	r1, #0
   32ddc:	0312      	lsls	r2, r2, #12
   32dde:	0d0b      	lsrs	r3, r1, #20
   32de0:	0b12      	lsrs	r2, r2, #12
   32de2:	051b      	lsls	r3, r3, #20
   32de4:	4313      	orrs	r3, r2
   32de6:	4a43      	ldr	r2, [pc, #268]	; (32ef4 <__aeabi_dmul+0x1e8>)
   32de8:	0524      	lsls	r4, r4, #20
   32dea:	4013      	ands	r3, r2
   32dec:	431c      	orrs	r4, r3
   32dee:	0064      	lsls	r4, r4, #1
   32df0:	07ed      	lsls	r5, r5, #31
   32df2:	0864      	lsrs	r4, r4, #1
   32df4:	432c      	orrs	r4, r5
   32df6:	4648      	mov	r0, r9
   32df8:	0021      	movs	r1, r4
   32dfa:	b007      	add	sp, #28
   32dfc:	bc3c      	pop	{r2, r3, r4, r5}
   32dfe:	4690      	mov	r8, r2
   32e00:	4699      	mov	r9, r3
   32e02:	46a2      	mov	sl, r4
   32e04:	46ab      	mov	fp, r5
   32e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32e08:	4303      	orrs	r3, r0
   32e0a:	4699      	mov	r9, r3
   32e0c:	d04f      	beq.n	32eae <__aeabi_dmul+0x1a2>
   32e0e:	465b      	mov	r3, fp
   32e10:	2b00      	cmp	r3, #0
   32e12:	d100      	bne.n	32e16 <__aeabi_dmul+0x10a>
   32e14:	e189      	b.n	3312a <__aeabi_dmul+0x41e>
   32e16:	4658      	mov	r0, fp
   32e18:	f000 fd7a 	bl	33910 <__clzsi2>
   32e1c:	0003      	movs	r3, r0
   32e1e:	3b0b      	subs	r3, #11
   32e20:	2b1c      	cmp	r3, #28
   32e22:	dd00      	ble.n	32e26 <__aeabi_dmul+0x11a>
   32e24:	e17a      	b.n	3311c <__aeabi_dmul+0x410>
   32e26:	221d      	movs	r2, #29
   32e28:	1ad3      	subs	r3, r2, r3
   32e2a:	003a      	movs	r2, r7
   32e2c:	0001      	movs	r1, r0
   32e2e:	465c      	mov	r4, fp
   32e30:	40da      	lsrs	r2, r3
   32e32:	3908      	subs	r1, #8
   32e34:	408c      	lsls	r4, r1
   32e36:	0013      	movs	r3, r2
   32e38:	408f      	lsls	r7, r1
   32e3a:	4323      	orrs	r3, r4
   32e3c:	469b      	mov	fp, r3
   32e3e:	46b9      	mov	r9, r7
   32e40:	2300      	movs	r3, #0
   32e42:	4e2d      	ldr	r6, [pc, #180]	; (32ef8 <__aeabi_dmul+0x1ec>)
   32e44:	2700      	movs	r7, #0
   32e46:	1a36      	subs	r6, r6, r0
   32e48:	9302      	str	r3, [sp, #8]
   32e4a:	e784      	b.n	32d56 <__aeabi_dmul+0x4a>
   32e4c:	4653      	mov	r3, sl
   32e4e:	4323      	orrs	r3, r4
   32e50:	d12a      	bne.n	32ea8 <__aeabi_dmul+0x19c>
   32e52:	2400      	movs	r4, #0
   32e54:	2002      	movs	r0, #2
   32e56:	e796      	b.n	32d86 <__aeabi_dmul+0x7a>
   32e58:	4653      	mov	r3, sl
   32e5a:	4323      	orrs	r3, r4
   32e5c:	d020      	beq.n	32ea0 <__aeabi_dmul+0x194>
   32e5e:	2c00      	cmp	r4, #0
   32e60:	d100      	bne.n	32e64 <__aeabi_dmul+0x158>
   32e62:	e157      	b.n	33114 <__aeabi_dmul+0x408>
   32e64:	0020      	movs	r0, r4
   32e66:	f000 fd53 	bl	33910 <__clzsi2>
   32e6a:	0003      	movs	r3, r0
   32e6c:	3b0b      	subs	r3, #11
   32e6e:	2b1c      	cmp	r3, #28
   32e70:	dd00      	ble.n	32e74 <__aeabi_dmul+0x168>
   32e72:	e149      	b.n	33108 <__aeabi_dmul+0x3fc>
   32e74:	211d      	movs	r1, #29
   32e76:	1acb      	subs	r3, r1, r3
   32e78:	4651      	mov	r1, sl
   32e7a:	0002      	movs	r2, r0
   32e7c:	40d9      	lsrs	r1, r3
   32e7e:	4653      	mov	r3, sl
   32e80:	3a08      	subs	r2, #8
   32e82:	4094      	lsls	r4, r2
   32e84:	4093      	lsls	r3, r2
   32e86:	430c      	orrs	r4, r1
   32e88:	4a1b      	ldr	r2, [pc, #108]	; (32ef8 <__aeabi_dmul+0x1ec>)
   32e8a:	1a12      	subs	r2, r2, r0
   32e8c:	2000      	movs	r0, #0
   32e8e:	e77a      	b.n	32d86 <__aeabi_dmul+0x7a>
   32e90:	2501      	movs	r5, #1
   32e92:	9b01      	ldr	r3, [sp, #4]
   32e94:	4c14      	ldr	r4, [pc, #80]	; (32ee8 <__aeabi_dmul+0x1dc>)
   32e96:	401d      	ands	r5, r3
   32e98:	2300      	movs	r3, #0
   32e9a:	2200      	movs	r2, #0
   32e9c:	4699      	mov	r9, r3
   32e9e:	e79c      	b.n	32dda <__aeabi_dmul+0xce>
   32ea0:	2400      	movs	r4, #0
   32ea2:	2200      	movs	r2, #0
   32ea4:	2001      	movs	r0, #1
   32ea6:	e76e      	b.n	32d86 <__aeabi_dmul+0x7a>
   32ea8:	4653      	mov	r3, sl
   32eaa:	2003      	movs	r0, #3
   32eac:	e76b      	b.n	32d86 <__aeabi_dmul+0x7a>
   32eae:	2300      	movs	r3, #0
   32eb0:	469b      	mov	fp, r3
   32eb2:	3301      	adds	r3, #1
   32eb4:	2704      	movs	r7, #4
   32eb6:	2600      	movs	r6, #0
   32eb8:	9302      	str	r3, [sp, #8]
   32eba:	e74c      	b.n	32d56 <__aeabi_dmul+0x4a>
   32ebc:	2303      	movs	r3, #3
   32ebe:	4681      	mov	r9, r0
   32ec0:	270c      	movs	r7, #12
   32ec2:	9302      	str	r3, [sp, #8]
   32ec4:	e747      	b.n	32d56 <__aeabi_dmul+0x4a>
   32ec6:	2280      	movs	r2, #128	; 0x80
   32ec8:	2300      	movs	r3, #0
   32eca:	2500      	movs	r5, #0
   32ecc:	0312      	lsls	r2, r2, #12
   32ece:	4699      	mov	r9, r3
   32ed0:	4c05      	ldr	r4, [pc, #20]	; (32ee8 <__aeabi_dmul+0x1dc>)
   32ed2:	e782      	b.n	32dda <__aeabi_dmul+0xce>
   32ed4:	465c      	mov	r4, fp
   32ed6:	464b      	mov	r3, r9
   32ed8:	9802      	ldr	r0, [sp, #8]
   32eda:	e76f      	b.n	32dbc <__aeabi_dmul+0xb0>
   32edc:	465c      	mov	r4, fp
   32ede:	464b      	mov	r3, r9
   32ee0:	9501      	str	r5, [sp, #4]
   32ee2:	9802      	ldr	r0, [sp, #8]
   32ee4:	e76a      	b.n	32dbc <__aeabi_dmul+0xb0>
   32ee6:	46c0      	nop			; (mov r8, r8)
   32ee8:	000007ff 	.word	0x000007ff
   32eec:	fffffc01 	.word	0xfffffc01
   32ef0:	00038ee8 	.word	0x00038ee8
   32ef4:	800fffff 	.word	0x800fffff
   32ef8:	fffffc0d 	.word	0xfffffc0d
   32efc:	464a      	mov	r2, r9
   32efe:	4649      	mov	r1, r9
   32f00:	0c17      	lsrs	r7, r2, #16
   32f02:	0c1a      	lsrs	r2, r3, #16
   32f04:	041b      	lsls	r3, r3, #16
   32f06:	0c1b      	lsrs	r3, r3, #16
   32f08:	0408      	lsls	r0, r1, #16
   32f0a:	0019      	movs	r1, r3
   32f0c:	0c00      	lsrs	r0, r0, #16
   32f0e:	4341      	muls	r1, r0
   32f10:	0015      	movs	r5, r2
   32f12:	4688      	mov	r8, r1
   32f14:	0019      	movs	r1, r3
   32f16:	437d      	muls	r5, r7
   32f18:	4379      	muls	r1, r7
   32f1a:	9503      	str	r5, [sp, #12]
   32f1c:	4689      	mov	r9, r1
   32f1e:	0029      	movs	r1, r5
   32f20:	0015      	movs	r5, r2
   32f22:	4345      	muls	r5, r0
   32f24:	444d      	add	r5, r9
   32f26:	9502      	str	r5, [sp, #8]
   32f28:	4645      	mov	r5, r8
   32f2a:	0c2d      	lsrs	r5, r5, #16
   32f2c:	46aa      	mov	sl, r5
   32f2e:	9d02      	ldr	r5, [sp, #8]
   32f30:	4455      	add	r5, sl
   32f32:	45a9      	cmp	r9, r5
   32f34:	d906      	bls.n	32f44 <__aeabi_dmul+0x238>
   32f36:	468a      	mov	sl, r1
   32f38:	2180      	movs	r1, #128	; 0x80
   32f3a:	0249      	lsls	r1, r1, #9
   32f3c:	4689      	mov	r9, r1
   32f3e:	44ca      	add	sl, r9
   32f40:	4651      	mov	r1, sl
   32f42:	9103      	str	r1, [sp, #12]
   32f44:	0c29      	lsrs	r1, r5, #16
   32f46:	9104      	str	r1, [sp, #16]
   32f48:	4641      	mov	r1, r8
   32f4a:	0409      	lsls	r1, r1, #16
   32f4c:	042d      	lsls	r5, r5, #16
   32f4e:	0c09      	lsrs	r1, r1, #16
   32f50:	4688      	mov	r8, r1
   32f52:	0029      	movs	r1, r5
   32f54:	0c25      	lsrs	r5, r4, #16
   32f56:	0424      	lsls	r4, r4, #16
   32f58:	4441      	add	r1, r8
   32f5a:	0c24      	lsrs	r4, r4, #16
   32f5c:	9105      	str	r1, [sp, #20]
   32f5e:	0021      	movs	r1, r4
   32f60:	4341      	muls	r1, r0
   32f62:	4688      	mov	r8, r1
   32f64:	0021      	movs	r1, r4
   32f66:	4379      	muls	r1, r7
   32f68:	468a      	mov	sl, r1
   32f6a:	4368      	muls	r0, r5
   32f6c:	4641      	mov	r1, r8
   32f6e:	4450      	add	r0, sl
   32f70:	4681      	mov	r9, r0
   32f72:	0c08      	lsrs	r0, r1, #16
   32f74:	4448      	add	r0, r9
   32f76:	436f      	muls	r7, r5
   32f78:	4582      	cmp	sl, r0
   32f7a:	d903      	bls.n	32f84 <__aeabi_dmul+0x278>
   32f7c:	2180      	movs	r1, #128	; 0x80
   32f7e:	0249      	lsls	r1, r1, #9
   32f80:	4689      	mov	r9, r1
   32f82:	444f      	add	r7, r9
   32f84:	0c01      	lsrs	r1, r0, #16
   32f86:	4689      	mov	r9, r1
   32f88:	0039      	movs	r1, r7
   32f8a:	4449      	add	r1, r9
   32f8c:	9102      	str	r1, [sp, #8]
   32f8e:	4641      	mov	r1, r8
   32f90:	040f      	lsls	r7, r1, #16
   32f92:	9904      	ldr	r1, [sp, #16]
   32f94:	0c3f      	lsrs	r7, r7, #16
   32f96:	4688      	mov	r8, r1
   32f98:	0400      	lsls	r0, r0, #16
   32f9a:	19c0      	adds	r0, r0, r7
   32f9c:	4480      	add	r8, r0
   32f9e:	4641      	mov	r1, r8
   32fa0:	9104      	str	r1, [sp, #16]
   32fa2:	4659      	mov	r1, fp
   32fa4:	0c0f      	lsrs	r7, r1, #16
   32fa6:	0409      	lsls	r1, r1, #16
   32fa8:	0c09      	lsrs	r1, r1, #16
   32faa:	4688      	mov	r8, r1
   32fac:	4359      	muls	r1, r3
   32fae:	468a      	mov	sl, r1
   32fb0:	0039      	movs	r1, r7
   32fb2:	4351      	muls	r1, r2
   32fb4:	4689      	mov	r9, r1
   32fb6:	4641      	mov	r1, r8
   32fb8:	434a      	muls	r2, r1
   32fba:	4651      	mov	r1, sl
   32fbc:	0c09      	lsrs	r1, r1, #16
   32fbe:	468b      	mov	fp, r1
   32fc0:	437b      	muls	r3, r7
   32fc2:	18d2      	adds	r2, r2, r3
   32fc4:	445a      	add	r2, fp
   32fc6:	4293      	cmp	r3, r2
   32fc8:	d903      	bls.n	32fd2 <__aeabi_dmul+0x2c6>
   32fca:	2380      	movs	r3, #128	; 0x80
   32fcc:	025b      	lsls	r3, r3, #9
   32fce:	469b      	mov	fp, r3
   32fd0:	44d9      	add	r9, fp
   32fd2:	4651      	mov	r1, sl
   32fd4:	0409      	lsls	r1, r1, #16
   32fd6:	0c09      	lsrs	r1, r1, #16
   32fd8:	468a      	mov	sl, r1
   32fda:	4641      	mov	r1, r8
   32fdc:	4361      	muls	r1, r4
   32fde:	437c      	muls	r4, r7
   32fe0:	0c13      	lsrs	r3, r2, #16
   32fe2:	0412      	lsls	r2, r2, #16
   32fe4:	444b      	add	r3, r9
   32fe6:	4452      	add	r2, sl
   32fe8:	46a1      	mov	r9, r4
   32fea:	468a      	mov	sl, r1
   32fec:	003c      	movs	r4, r7
   32fee:	4641      	mov	r1, r8
   32ff0:	436c      	muls	r4, r5
   32ff2:	434d      	muls	r5, r1
   32ff4:	4651      	mov	r1, sl
   32ff6:	444d      	add	r5, r9
   32ff8:	0c0f      	lsrs	r7, r1, #16
   32ffa:	197d      	adds	r5, r7, r5
   32ffc:	45a9      	cmp	r9, r5
   32ffe:	d903      	bls.n	33008 <__aeabi_dmul+0x2fc>
   33000:	2180      	movs	r1, #128	; 0x80
   33002:	0249      	lsls	r1, r1, #9
   33004:	4688      	mov	r8, r1
   33006:	4444      	add	r4, r8
   33008:	9f04      	ldr	r7, [sp, #16]
   3300a:	9903      	ldr	r1, [sp, #12]
   3300c:	46b8      	mov	r8, r7
   3300e:	4441      	add	r1, r8
   33010:	468b      	mov	fp, r1
   33012:	4583      	cmp	fp, r0
   33014:	4180      	sbcs	r0, r0
   33016:	4241      	negs	r1, r0
   33018:	4688      	mov	r8, r1
   3301a:	4651      	mov	r1, sl
   3301c:	0408      	lsls	r0, r1, #16
   3301e:	042f      	lsls	r7, r5, #16
   33020:	0c00      	lsrs	r0, r0, #16
   33022:	183f      	adds	r7, r7, r0
   33024:	4658      	mov	r0, fp
   33026:	9902      	ldr	r1, [sp, #8]
   33028:	1810      	adds	r0, r2, r0
   3302a:	4689      	mov	r9, r1
   3302c:	4290      	cmp	r0, r2
   3302e:	4192      	sbcs	r2, r2
   33030:	444f      	add	r7, r9
   33032:	46ba      	mov	sl, r7
   33034:	4252      	negs	r2, r2
   33036:	4699      	mov	r9, r3
   33038:	4693      	mov	fp, r2
   3303a:	44c2      	add	sl, r8
   3303c:	44d1      	add	r9, sl
   3303e:	44cb      	add	fp, r9
   33040:	428f      	cmp	r7, r1
   33042:	41bf      	sbcs	r7, r7
   33044:	45c2      	cmp	sl, r8
   33046:	4189      	sbcs	r1, r1
   33048:	4599      	cmp	r9, r3
   3304a:	419b      	sbcs	r3, r3
   3304c:	4593      	cmp	fp, r2
   3304e:	4192      	sbcs	r2, r2
   33050:	427f      	negs	r7, r7
   33052:	4249      	negs	r1, r1
   33054:	0c2d      	lsrs	r5, r5, #16
   33056:	4252      	negs	r2, r2
   33058:	430f      	orrs	r7, r1
   3305a:	425b      	negs	r3, r3
   3305c:	4313      	orrs	r3, r2
   3305e:	197f      	adds	r7, r7, r5
   33060:	18ff      	adds	r7, r7, r3
   33062:	465b      	mov	r3, fp
   33064:	193c      	adds	r4, r7, r4
   33066:	0ddb      	lsrs	r3, r3, #23
   33068:	9a05      	ldr	r2, [sp, #20]
   3306a:	0264      	lsls	r4, r4, #9
   3306c:	431c      	orrs	r4, r3
   3306e:	0243      	lsls	r3, r0, #9
   33070:	4313      	orrs	r3, r2
   33072:	1e5d      	subs	r5, r3, #1
   33074:	41ab      	sbcs	r3, r5
   33076:	465a      	mov	r2, fp
   33078:	0dc0      	lsrs	r0, r0, #23
   3307a:	4303      	orrs	r3, r0
   3307c:	0252      	lsls	r2, r2, #9
   3307e:	4313      	orrs	r3, r2
   33080:	01e2      	lsls	r2, r4, #7
   33082:	d556      	bpl.n	33132 <__aeabi_dmul+0x426>
   33084:	2001      	movs	r0, #1
   33086:	085a      	lsrs	r2, r3, #1
   33088:	4003      	ands	r3, r0
   3308a:	4313      	orrs	r3, r2
   3308c:	07e2      	lsls	r2, r4, #31
   3308e:	4313      	orrs	r3, r2
   33090:	0864      	lsrs	r4, r4, #1
   33092:	485a      	ldr	r0, [pc, #360]	; (331fc <__aeabi_dmul+0x4f0>)
   33094:	4460      	add	r0, ip
   33096:	2800      	cmp	r0, #0
   33098:	dd4d      	ble.n	33136 <__aeabi_dmul+0x42a>
   3309a:	075a      	lsls	r2, r3, #29
   3309c:	d009      	beq.n	330b2 <__aeabi_dmul+0x3a6>
   3309e:	220f      	movs	r2, #15
   330a0:	401a      	ands	r2, r3
   330a2:	2a04      	cmp	r2, #4
   330a4:	d005      	beq.n	330b2 <__aeabi_dmul+0x3a6>
   330a6:	1d1a      	adds	r2, r3, #4
   330a8:	429a      	cmp	r2, r3
   330aa:	419b      	sbcs	r3, r3
   330ac:	425b      	negs	r3, r3
   330ae:	18e4      	adds	r4, r4, r3
   330b0:	0013      	movs	r3, r2
   330b2:	01e2      	lsls	r2, r4, #7
   330b4:	d504      	bpl.n	330c0 <__aeabi_dmul+0x3b4>
   330b6:	2080      	movs	r0, #128	; 0x80
   330b8:	4a51      	ldr	r2, [pc, #324]	; (33200 <__aeabi_dmul+0x4f4>)
   330ba:	00c0      	lsls	r0, r0, #3
   330bc:	4014      	ands	r4, r2
   330be:	4460      	add	r0, ip
   330c0:	4a50      	ldr	r2, [pc, #320]	; (33204 <__aeabi_dmul+0x4f8>)
   330c2:	4290      	cmp	r0, r2
   330c4:	dd00      	ble.n	330c8 <__aeabi_dmul+0x3bc>
   330c6:	e6e3      	b.n	32e90 <__aeabi_dmul+0x184>
   330c8:	2501      	movs	r5, #1
   330ca:	08db      	lsrs	r3, r3, #3
   330cc:	0762      	lsls	r2, r4, #29
   330ce:	431a      	orrs	r2, r3
   330d0:	0264      	lsls	r4, r4, #9
   330d2:	9b01      	ldr	r3, [sp, #4]
   330d4:	4691      	mov	r9, r2
   330d6:	0b22      	lsrs	r2, r4, #12
   330d8:	0544      	lsls	r4, r0, #21
   330da:	0d64      	lsrs	r4, r4, #21
   330dc:	401d      	ands	r5, r3
   330de:	e67c      	b.n	32dda <__aeabi_dmul+0xce>
   330e0:	2280      	movs	r2, #128	; 0x80
   330e2:	4659      	mov	r1, fp
   330e4:	0312      	lsls	r2, r2, #12
   330e6:	4211      	tst	r1, r2
   330e8:	d008      	beq.n	330fc <__aeabi_dmul+0x3f0>
   330ea:	4214      	tst	r4, r2
   330ec:	d106      	bne.n	330fc <__aeabi_dmul+0x3f0>
   330ee:	4322      	orrs	r2, r4
   330f0:	0312      	lsls	r2, r2, #12
   330f2:	0b12      	lsrs	r2, r2, #12
   330f4:	4645      	mov	r5, r8
   330f6:	4699      	mov	r9, r3
   330f8:	4c43      	ldr	r4, [pc, #268]	; (33208 <__aeabi_dmul+0x4fc>)
   330fa:	e66e      	b.n	32dda <__aeabi_dmul+0xce>
   330fc:	465b      	mov	r3, fp
   330fe:	431a      	orrs	r2, r3
   33100:	0312      	lsls	r2, r2, #12
   33102:	0b12      	lsrs	r2, r2, #12
   33104:	4c40      	ldr	r4, [pc, #256]	; (33208 <__aeabi_dmul+0x4fc>)
   33106:	e668      	b.n	32dda <__aeabi_dmul+0xce>
   33108:	0003      	movs	r3, r0
   3310a:	4654      	mov	r4, sl
   3310c:	3b28      	subs	r3, #40	; 0x28
   3310e:	409c      	lsls	r4, r3
   33110:	2300      	movs	r3, #0
   33112:	e6b9      	b.n	32e88 <__aeabi_dmul+0x17c>
   33114:	f000 fbfc 	bl	33910 <__clzsi2>
   33118:	3020      	adds	r0, #32
   3311a:	e6a6      	b.n	32e6a <__aeabi_dmul+0x15e>
   3311c:	0003      	movs	r3, r0
   3311e:	3b28      	subs	r3, #40	; 0x28
   33120:	409f      	lsls	r7, r3
   33122:	2300      	movs	r3, #0
   33124:	46bb      	mov	fp, r7
   33126:	4699      	mov	r9, r3
   33128:	e68a      	b.n	32e40 <__aeabi_dmul+0x134>
   3312a:	f000 fbf1 	bl	33910 <__clzsi2>
   3312e:	3020      	adds	r0, #32
   33130:	e674      	b.n	32e1c <__aeabi_dmul+0x110>
   33132:	46b4      	mov	ip, r6
   33134:	e7ad      	b.n	33092 <__aeabi_dmul+0x386>
   33136:	2501      	movs	r5, #1
   33138:	1a2a      	subs	r2, r5, r0
   3313a:	2a38      	cmp	r2, #56	; 0x38
   3313c:	dd06      	ble.n	3314c <__aeabi_dmul+0x440>
   3313e:	9b01      	ldr	r3, [sp, #4]
   33140:	2400      	movs	r4, #0
   33142:	401d      	ands	r5, r3
   33144:	2300      	movs	r3, #0
   33146:	2200      	movs	r2, #0
   33148:	4699      	mov	r9, r3
   3314a:	e646      	b.n	32dda <__aeabi_dmul+0xce>
   3314c:	2a1f      	cmp	r2, #31
   3314e:	dc21      	bgt.n	33194 <__aeabi_dmul+0x488>
   33150:	2520      	movs	r5, #32
   33152:	0020      	movs	r0, r4
   33154:	1aad      	subs	r5, r5, r2
   33156:	001e      	movs	r6, r3
   33158:	40ab      	lsls	r3, r5
   3315a:	40a8      	lsls	r0, r5
   3315c:	40d6      	lsrs	r6, r2
   3315e:	1e5d      	subs	r5, r3, #1
   33160:	41ab      	sbcs	r3, r5
   33162:	4330      	orrs	r0, r6
   33164:	4318      	orrs	r0, r3
   33166:	40d4      	lsrs	r4, r2
   33168:	0743      	lsls	r3, r0, #29
   3316a:	d009      	beq.n	33180 <__aeabi_dmul+0x474>
   3316c:	230f      	movs	r3, #15
   3316e:	4003      	ands	r3, r0
   33170:	2b04      	cmp	r3, #4
   33172:	d005      	beq.n	33180 <__aeabi_dmul+0x474>
   33174:	0003      	movs	r3, r0
   33176:	1d18      	adds	r0, r3, #4
   33178:	4298      	cmp	r0, r3
   3317a:	419b      	sbcs	r3, r3
   3317c:	425b      	negs	r3, r3
   3317e:	18e4      	adds	r4, r4, r3
   33180:	0223      	lsls	r3, r4, #8
   33182:	d521      	bpl.n	331c8 <__aeabi_dmul+0x4bc>
   33184:	2501      	movs	r5, #1
   33186:	9b01      	ldr	r3, [sp, #4]
   33188:	2401      	movs	r4, #1
   3318a:	401d      	ands	r5, r3
   3318c:	2300      	movs	r3, #0
   3318e:	2200      	movs	r2, #0
   33190:	4699      	mov	r9, r3
   33192:	e622      	b.n	32dda <__aeabi_dmul+0xce>
   33194:	251f      	movs	r5, #31
   33196:	0021      	movs	r1, r4
   33198:	426d      	negs	r5, r5
   3319a:	1a28      	subs	r0, r5, r0
   3319c:	40c1      	lsrs	r1, r0
   3319e:	0008      	movs	r0, r1
   331a0:	2a20      	cmp	r2, #32
   331a2:	d01d      	beq.n	331e0 <__aeabi_dmul+0x4d4>
   331a4:	355f      	adds	r5, #95	; 0x5f
   331a6:	1aaa      	subs	r2, r5, r2
   331a8:	4094      	lsls	r4, r2
   331aa:	4323      	orrs	r3, r4
   331ac:	1e5c      	subs	r4, r3, #1
   331ae:	41a3      	sbcs	r3, r4
   331b0:	2507      	movs	r5, #7
   331b2:	4303      	orrs	r3, r0
   331b4:	401d      	ands	r5, r3
   331b6:	2200      	movs	r2, #0
   331b8:	2d00      	cmp	r5, #0
   331ba:	d009      	beq.n	331d0 <__aeabi_dmul+0x4c4>
   331bc:	220f      	movs	r2, #15
   331be:	2400      	movs	r4, #0
   331c0:	401a      	ands	r2, r3
   331c2:	0018      	movs	r0, r3
   331c4:	2a04      	cmp	r2, #4
   331c6:	d1d6      	bne.n	33176 <__aeabi_dmul+0x46a>
   331c8:	0003      	movs	r3, r0
   331ca:	0765      	lsls	r5, r4, #29
   331cc:	0264      	lsls	r4, r4, #9
   331ce:	0b22      	lsrs	r2, r4, #12
   331d0:	08db      	lsrs	r3, r3, #3
   331d2:	432b      	orrs	r3, r5
   331d4:	2501      	movs	r5, #1
   331d6:	4699      	mov	r9, r3
   331d8:	9b01      	ldr	r3, [sp, #4]
   331da:	2400      	movs	r4, #0
   331dc:	401d      	ands	r5, r3
   331de:	e5fc      	b.n	32dda <__aeabi_dmul+0xce>
   331e0:	2400      	movs	r4, #0
   331e2:	e7e2      	b.n	331aa <__aeabi_dmul+0x49e>
   331e4:	2280      	movs	r2, #128	; 0x80
   331e6:	2501      	movs	r5, #1
   331e8:	0312      	lsls	r2, r2, #12
   331ea:	4322      	orrs	r2, r4
   331ec:	9901      	ldr	r1, [sp, #4]
   331ee:	0312      	lsls	r2, r2, #12
   331f0:	0b12      	lsrs	r2, r2, #12
   331f2:	400d      	ands	r5, r1
   331f4:	4699      	mov	r9, r3
   331f6:	4c04      	ldr	r4, [pc, #16]	; (33208 <__aeabi_dmul+0x4fc>)
   331f8:	e5ef      	b.n	32dda <__aeabi_dmul+0xce>
   331fa:	46c0      	nop			; (mov r8, r8)
   331fc:	000003ff 	.word	0x000003ff
   33200:	feffffff 	.word	0xfeffffff
   33204:	000007fe 	.word	0x000007fe
   33208:	000007ff 	.word	0x000007ff

0003320c <__aeabi_dsub>:
   3320c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3320e:	4646      	mov	r6, r8
   33210:	46d6      	mov	lr, sl
   33212:	464f      	mov	r7, r9
   33214:	030c      	lsls	r4, r1, #12
   33216:	b5c0      	push	{r6, r7, lr}
   33218:	0fcd      	lsrs	r5, r1, #31
   3321a:	004e      	lsls	r6, r1, #1
   3321c:	0a61      	lsrs	r1, r4, #9
   3321e:	0f44      	lsrs	r4, r0, #29
   33220:	430c      	orrs	r4, r1
   33222:	00c1      	lsls	r1, r0, #3
   33224:	0058      	lsls	r0, r3, #1
   33226:	0d40      	lsrs	r0, r0, #21
   33228:	4684      	mov	ip, r0
   3322a:	468a      	mov	sl, r1
   3322c:	000f      	movs	r7, r1
   3322e:	0319      	lsls	r1, r3, #12
   33230:	0f50      	lsrs	r0, r2, #29
   33232:	0a49      	lsrs	r1, r1, #9
   33234:	4301      	orrs	r1, r0
   33236:	48c6      	ldr	r0, [pc, #792]	; (33550 <__aeabi_dsub+0x344>)
   33238:	0d76      	lsrs	r6, r6, #21
   3323a:	46a8      	mov	r8, r5
   3323c:	0fdb      	lsrs	r3, r3, #31
   3323e:	00d2      	lsls	r2, r2, #3
   33240:	4584      	cmp	ip, r0
   33242:	d100      	bne.n	33246 <__aeabi_dsub+0x3a>
   33244:	e0d8      	b.n	333f8 <__aeabi_dsub+0x1ec>
   33246:	2001      	movs	r0, #1
   33248:	4043      	eors	r3, r0
   3324a:	42ab      	cmp	r3, r5
   3324c:	d100      	bne.n	33250 <__aeabi_dsub+0x44>
   3324e:	e0a6      	b.n	3339e <__aeabi_dsub+0x192>
   33250:	4660      	mov	r0, ip
   33252:	1a35      	subs	r5, r6, r0
   33254:	2d00      	cmp	r5, #0
   33256:	dc00      	bgt.n	3325a <__aeabi_dsub+0x4e>
   33258:	e105      	b.n	33466 <__aeabi_dsub+0x25a>
   3325a:	2800      	cmp	r0, #0
   3325c:	d110      	bne.n	33280 <__aeabi_dsub+0x74>
   3325e:	000b      	movs	r3, r1
   33260:	4313      	orrs	r3, r2
   33262:	d100      	bne.n	33266 <__aeabi_dsub+0x5a>
   33264:	e0d7      	b.n	33416 <__aeabi_dsub+0x20a>
   33266:	1e6b      	subs	r3, r5, #1
   33268:	2b00      	cmp	r3, #0
   3326a:	d000      	beq.n	3326e <__aeabi_dsub+0x62>
   3326c:	e14b      	b.n	33506 <__aeabi_dsub+0x2fa>
   3326e:	4653      	mov	r3, sl
   33270:	1a9f      	subs	r7, r3, r2
   33272:	45ba      	cmp	sl, r7
   33274:	4180      	sbcs	r0, r0
   33276:	1a64      	subs	r4, r4, r1
   33278:	4240      	negs	r0, r0
   3327a:	1a24      	subs	r4, r4, r0
   3327c:	2601      	movs	r6, #1
   3327e:	e01e      	b.n	332be <__aeabi_dsub+0xb2>
   33280:	4bb3      	ldr	r3, [pc, #716]	; (33550 <__aeabi_dsub+0x344>)
   33282:	429e      	cmp	r6, r3
   33284:	d048      	beq.n	33318 <__aeabi_dsub+0x10c>
   33286:	2380      	movs	r3, #128	; 0x80
   33288:	041b      	lsls	r3, r3, #16
   3328a:	4319      	orrs	r1, r3
   3328c:	2d38      	cmp	r5, #56	; 0x38
   3328e:	dd00      	ble.n	33292 <__aeabi_dsub+0x86>
   33290:	e119      	b.n	334c6 <__aeabi_dsub+0x2ba>
   33292:	2d1f      	cmp	r5, #31
   33294:	dd00      	ble.n	33298 <__aeabi_dsub+0x8c>
   33296:	e14c      	b.n	33532 <__aeabi_dsub+0x326>
   33298:	2320      	movs	r3, #32
   3329a:	000f      	movs	r7, r1
   3329c:	1b5b      	subs	r3, r3, r5
   3329e:	0010      	movs	r0, r2
   332a0:	409a      	lsls	r2, r3
   332a2:	409f      	lsls	r7, r3
   332a4:	40e8      	lsrs	r0, r5
   332a6:	1e53      	subs	r3, r2, #1
   332a8:	419a      	sbcs	r2, r3
   332aa:	40e9      	lsrs	r1, r5
   332ac:	4307      	orrs	r7, r0
   332ae:	4317      	orrs	r7, r2
   332b0:	4653      	mov	r3, sl
   332b2:	1bdf      	subs	r7, r3, r7
   332b4:	1a61      	subs	r1, r4, r1
   332b6:	45ba      	cmp	sl, r7
   332b8:	41a4      	sbcs	r4, r4
   332ba:	4264      	negs	r4, r4
   332bc:	1b0c      	subs	r4, r1, r4
   332be:	0223      	lsls	r3, r4, #8
   332c0:	d400      	bmi.n	332c4 <__aeabi_dsub+0xb8>
   332c2:	e0c5      	b.n	33450 <__aeabi_dsub+0x244>
   332c4:	0264      	lsls	r4, r4, #9
   332c6:	0a65      	lsrs	r5, r4, #9
   332c8:	2d00      	cmp	r5, #0
   332ca:	d100      	bne.n	332ce <__aeabi_dsub+0xc2>
   332cc:	e0f6      	b.n	334bc <__aeabi_dsub+0x2b0>
   332ce:	0028      	movs	r0, r5
   332d0:	f000 fb1e 	bl	33910 <__clzsi2>
   332d4:	0003      	movs	r3, r0
   332d6:	3b08      	subs	r3, #8
   332d8:	2b1f      	cmp	r3, #31
   332da:	dd00      	ble.n	332de <__aeabi_dsub+0xd2>
   332dc:	e0e9      	b.n	334b2 <__aeabi_dsub+0x2a6>
   332de:	2220      	movs	r2, #32
   332e0:	003c      	movs	r4, r7
   332e2:	1ad2      	subs	r2, r2, r3
   332e4:	409d      	lsls	r5, r3
   332e6:	40d4      	lsrs	r4, r2
   332e8:	409f      	lsls	r7, r3
   332ea:	4325      	orrs	r5, r4
   332ec:	429e      	cmp	r6, r3
   332ee:	dd00      	ble.n	332f2 <__aeabi_dsub+0xe6>
   332f0:	e0db      	b.n	334aa <__aeabi_dsub+0x29e>
   332f2:	1b9e      	subs	r6, r3, r6
   332f4:	1c73      	adds	r3, r6, #1
   332f6:	2b1f      	cmp	r3, #31
   332f8:	dd00      	ble.n	332fc <__aeabi_dsub+0xf0>
   332fa:	e10a      	b.n	33512 <__aeabi_dsub+0x306>
   332fc:	2220      	movs	r2, #32
   332fe:	0038      	movs	r0, r7
   33300:	1ad2      	subs	r2, r2, r3
   33302:	0029      	movs	r1, r5
   33304:	4097      	lsls	r7, r2
   33306:	002c      	movs	r4, r5
   33308:	4091      	lsls	r1, r2
   3330a:	40d8      	lsrs	r0, r3
   3330c:	1e7a      	subs	r2, r7, #1
   3330e:	4197      	sbcs	r7, r2
   33310:	40dc      	lsrs	r4, r3
   33312:	2600      	movs	r6, #0
   33314:	4301      	orrs	r1, r0
   33316:	430f      	orrs	r7, r1
   33318:	077b      	lsls	r3, r7, #29
   3331a:	d009      	beq.n	33330 <__aeabi_dsub+0x124>
   3331c:	230f      	movs	r3, #15
   3331e:	403b      	ands	r3, r7
   33320:	2b04      	cmp	r3, #4
   33322:	d005      	beq.n	33330 <__aeabi_dsub+0x124>
   33324:	1d3b      	adds	r3, r7, #4
   33326:	42bb      	cmp	r3, r7
   33328:	41bf      	sbcs	r7, r7
   3332a:	427f      	negs	r7, r7
   3332c:	19e4      	adds	r4, r4, r7
   3332e:	001f      	movs	r7, r3
   33330:	0223      	lsls	r3, r4, #8
   33332:	d525      	bpl.n	33380 <__aeabi_dsub+0x174>
   33334:	4b86      	ldr	r3, [pc, #536]	; (33550 <__aeabi_dsub+0x344>)
   33336:	3601      	adds	r6, #1
   33338:	429e      	cmp	r6, r3
   3333a:	d100      	bne.n	3333e <__aeabi_dsub+0x132>
   3333c:	e0af      	b.n	3349e <__aeabi_dsub+0x292>
   3333e:	4b85      	ldr	r3, [pc, #532]	; (33554 <__aeabi_dsub+0x348>)
   33340:	2501      	movs	r5, #1
   33342:	401c      	ands	r4, r3
   33344:	4643      	mov	r3, r8
   33346:	0762      	lsls	r2, r4, #29
   33348:	08ff      	lsrs	r7, r7, #3
   3334a:	0264      	lsls	r4, r4, #9
   3334c:	0576      	lsls	r6, r6, #21
   3334e:	4317      	orrs	r7, r2
   33350:	0b24      	lsrs	r4, r4, #12
   33352:	0d76      	lsrs	r6, r6, #21
   33354:	401d      	ands	r5, r3
   33356:	2100      	movs	r1, #0
   33358:	0324      	lsls	r4, r4, #12
   3335a:	0b23      	lsrs	r3, r4, #12
   3335c:	0d0c      	lsrs	r4, r1, #20
   3335e:	4a7e      	ldr	r2, [pc, #504]	; (33558 <__aeabi_dsub+0x34c>)
   33360:	0524      	lsls	r4, r4, #20
   33362:	431c      	orrs	r4, r3
   33364:	4014      	ands	r4, r2
   33366:	0533      	lsls	r3, r6, #20
   33368:	4323      	orrs	r3, r4
   3336a:	005b      	lsls	r3, r3, #1
   3336c:	07ed      	lsls	r5, r5, #31
   3336e:	085b      	lsrs	r3, r3, #1
   33370:	432b      	orrs	r3, r5
   33372:	0038      	movs	r0, r7
   33374:	0019      	movs	r1, r3
   33376:	bc1c      	pop	{r2, r3, r4}
   33378:	4690      	mov	r8, r2
   3337a:	4699      	mov	r9, r3
   3337c:	46a2      	mov	sl, r4
   3337e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33380:	2501      	movs	r5, #1
   33382:	4643      	mov	r3, r8
   33384:	0762      	lsls	r2, r4, #29
   33386:	08ff      	lsrs	r7, r7, #3
   33388:	4317      	orrs	r7, r2
   3338a:	08e4      	lsrs	r4, r4, #3
   3338c:	401d      	ands	r5, r3
   3338e:	4b70      	ldr	r3, [pc, #448]	; (33550 <__aeabi_dsub+0x344>)
   33390:	429e      	cmp	r6, r3
   33392:	d036      	beq.n	33402 <__aeabi_dsub+0x1f6>
   33394:	0324      	lsls	r4, r4, #12
   33396:	0576      	lsls	r6, r6, #21
   33398:	0b24      	lsrs	r4, r4, #12
   3339a:	0d76      	lsrs	r6, r6, #21
   3339c:	e7db      	b.n	33356 <__aeabi_dsub+0x14a>
   3339e:	4663      	mov	r3, ip
   333a0:	1af3      	subs	r3, r6, r3
   333a2:	2b00      	cmp	r3, #0
   333a4:	dc00      	bgt.n	333a8 <__aeabi_dsub+0x19c>
   333a6:	e094      	b.n	334d2 <__aeabi_dsub+0x2c6>
   333a8:	4660      	mov	r0, ip
   333aa:	2800      	cmp	r0, #0
   333ac:	d035      	beq.n	3341a <__aeabi_dsub+0x20e>
   333ae:	4868      	ldr	r0, [pc, #416]	; (33550 <__aeabi_dsub+0x344>)
   333b0:	4286      	cmp	r6, r0
   333b2:	d0b1      	beq.n	33318 <__aeabi_dsub+0x10c>
   333b4:	2780      	movs	r7, #128	; 0x80
   333b6:	043f      	lsls	r7, r7, #16
   333b8:	4339      	orrs	r1, r7
   333ba:	2b38      	cmp	r3, #56	; 0x38
   333bc:	dc00      	bgt.n	333c0 <__aeabi_dsub+0x1b4>
   333be:	e0fd      	b.n	335bc <__aeabi_dsub+0x3b0>
   333c0:	430a      	orrs	r2, r1
   333c2:	0017      	movs	r7, r2
   333c4:	2100      	movs	r1, #0
   333c6:	1e7a      	subs	r2, r7, #1
   333c8:	4197      	sbcs	r7, r2
   333ca:	4457      	add	r7, sl
   333cc:	4557      	cmp	r7, sl
   333ce:	4180      	sbcs	r0, r0
   333d0:	1909      	adds	r1, r1, r4
   333d2:	4244      	negs	r4, r0
   333d4:	190c      	adds	r4, r1, r4
   333d6:	0223      	lsls	r3, r4, #8
   333d8:	d53a      	bpl.n	33450 <__aeabi_dsub+0x244>
   333da:	4b5d      	ldr	r3, [pc, #372]	; (33550 <__aeabi_dsub+0x344>)
   333dc:	3601      	adds	r6, #1
   333de:	429e      	cmp	r6, r3
   333e0:	d100      	bne.n	333e4 <__aeabi_dsub+0x1d8>
   333e2:	e14b      	b.n	3367c <__aeabi_dsub+0x470>
   333e4:	2201      	movs	r2, #1
   333e6:	4b5b      	ldr	r3, [pc, #364]	; (33554 <__aeabi_dsub+0x348>)
   333e8:	401c      	ands	r4, r3
   333ea:	087b      	lsrs	r3, r7, #1
   333ec:	4017      	ands	r7, r2
   333ee:	431f      	orrs	r7, r3
   333f0:	07e2      	lsls	r2, r4, #31
   333f2:	4317      	orrs	r7, r2
   333f4:	0864      	lsrs	r4, r4, #1
   333f6:	e78f      	b.n	33318 <__aeabi_dsub+0x10c>
   333f8:	0008      	movs	r0, r1
   333fa:	4310      	orrs	r0, r2
   333fc:	d000      	beq.n	33400 <__aeabi_dsub+0x1f4>
   333fe:	e724      	b.n	3324a <__aeabi_dsub+0x3e>
   33400:	e721      	b.n	33246 <__aeabi_dsub+0x3a>
   33402:	0023      	movs	r3, r4
   33404:	433b      	orrs	r3, r7
   33406:	d100      	bne.n	3340a <__aeabi_dsub+0x1fe>
   33408:	e1b9      	b.n	3377e <__aeabi_dsub+0x572>
   3340a:	2280      	movs	r2, #128	; 0x80
   3340c:	0312      	lsls	r2, r2, #12
   3340e:	4314      	orrs	r4, r2
   33410:	0324      	lsls	r4, r4, #12
   33412:	0b24      	lsrs	r4, r4, #12
   33414:	e79f      	b.n	33356 <__aeabi_dsub+0x14a>
   33416:	002e      	movs	r6, r5
   33418:	e77e      	b.n	33318 <__aeabi_dsub+0x10c>
   3341a:	0008      	movs	r0, r1
   3341c:	4310      	orrs	r0, r2
   3341e:	d100      	bne.n	33422 <__aeabi_dsub+0x216>
   33420:	e0ca      	b.n	335b8 <__aeabi_dsub+0x3ac>
   33422:	1e58      	subs	r0, r3, #1
   33424:	4684      	mov	ip, r0
   33426:	2800      	cmp	r0, #0
   33428:	d000      	beq.n	3342c <__aeabi_dsub+0x220>
   3342a:	e0e7      	b.n	335fc <__aeabi_dsub+0x3f0>
   3342c:	4452      	add	r2, sl
   3342e:	4552      	cmp	r2, sl
   33430:	4180      	sbcs	r0, r0
   33432:	1864      	adds	r4, r4, r1
   33434:	4240      	negs	r0, r0
   33436:	1824      	adds	r4, r4, r0
   33438:	0017      	movs	r7, r2
   3343a:	2601      	movs	r6, #1
   3343c:	0223      	lsls	r3, r4, #8
   3343e:	d507      	bpl.n	33450 <__aeabi_dsub+0x244>
   33440:	2602      	movs	r6, #2
   33442:	e7cf      	b.n	333e4 <__aeabi_dsub+0x1d8>
   33444:	4664      	mov	r4, ip
   33446:	432c      	orrs	r4, r5
   33448:	d100      	bne.n	3344c <__aeabi_dsub+0x240>
   3344a:	e1b3      	b.n	337b4 <__aeabi_dsub+0x5a8>
   3344c:	002c      	movs	r4, r5
   3344e:	4667      	mov	r7, ip
   33450:	077b      	lsls	r3, r7, #29
   33452:	d000      	beq.n	33456 <__aeabi_dsub+0x24a>
   33454:	e762      	b.n	3331c <__aeabi_dsub+0x110>
   33456:	0763      	lsls	r3, r4, #29
   33458:	08ff      	lsrs	r7, r7, #3
   3345a:	431f      	orrs	r7, r3
   3345c:	2501      	movs	r5, #1
   3345e:	4643      	mov	r3, r8
   33460:	08e4      	lsrs	r4, r4, #3
   33462:	401d      	ands	r5, r3
   33464:	e793      	b.n	3338e <__aeabi_dsub+0x182>
   33466:	2d00      	cmp	r5, #0
   33468:	d178      	bne.n	3355c <__aeabi_dsub+0x350>
   3346a:	1c75      	adds	r5, r6, #1
   3346c:	056d      	lsls	r5, r5, #21
   3346e:	0d6d      	lsrs	r5, r5, #21
   33470:	2d01      	cmp	r5, #1
   33472:	dc00      	bgt.n	33476 <__aeabi_dsub+0x26a>
   33474:	e0f2      	b.n	3365c <__aeabi_dsub+0x450>
   33476:	4650      	mov	r0, sl
   33478:	1a80      	subs	r0, r0, r2
   3347a:	4582      	cmp	sl, r0
   3347c:	41bf      	sbcs	r7, r7
   3347e:	1a65      	subs	r5, r4, r1
   33480:	427f      	negs	r7, r7
   33482:	1bed      	subs	r5, r5, r7
   33484:	4684      	mov	ip, r0
   33486:	0228      	lsls	r0, r5, #8
   33488:	d400      	bmi.n	3348c <__aeabi_dsub+0x280>
   3348a:	e08c      	b.n	335a6 <__aeabi_dsub+0x39a>
   3348c:	4650      	mov	r0, sl
   3348e:	1a17      	subs	r7, r2, r0
   33490:	42ba      	cmp	r2, r7
   33492:	4192      	sbcs	r2, r2
   33494:	1b0c      	subs	r4, r1, r4
   33496:	4255      	negs	r5, r2
   33498:	1b65      	subs	r5, r4, r5
   3349a:	4698      	mov	r8, r3
   3349c:	e714      	b.n	332c8 <__aeabi_dsub+0xbc>
   3349e:	2501      	movs	r5, #1
   334a0:	4643      	mov	r3, r8
   334a2:	2400      	movs	r4, #0
   334a4:	401d      	ands	r5, r3
   334a6:	2700      	movs	r7, #0
   334a8:	e755      	b.n	33356 <__aeabi_dsub+0x14a>
   334aa:	4c2a      	ldr	r4, [pc, #168]	; (33554 <__aeabi_dsub+0x348>)
   334ac:	1af6      	subs	r6, r6, r3
   334ae:	402c      	ands	r4, r5
   334b0:	e732      	b.n	33318 <__aeabi_dsub+0x10c>
   334b2:	003d      	movs	r5, r7
   334b4:	3828      	subs	r0, #40	; 0x28
   334b6:	4085      	lsls	r5, r0
   334b8:	2700      	movs	r7, #0
   334ba:	e717      	b.n	332ec <__aeabi_dsub+0xe0>
   334bc:	0038      	movs	r0, r7
   334be:	f000 fa27 	bl	33910 <__clzsi2>
   334c2:	3020      	adds	r0, #32
   334c4:	e706      	b.n	332d4 <__aeabi_dsub+0xc8>
   334c6:	430a      	orrs	r2, r1
   334c8:	0017      	movs	r7, r2
   334ca:	2100      	movs	r1, #0
   334cc:	1e7a      	subs	r2, r7, #1
   334ce:	4197      	sbcs	r7, r2
   334d0:	e6ee      	b.n	332b0 <__aeabi_dsub+0xa4>
   334d2:	2b00      	cmp	r3, #0
   334d4:	d000      	beq.n	334d8 <__aeabi_dsub+0x2cc>
   334d6:	e0e5      	b.n	336a4 <__aeabi_dsub+0x498>
   334d8:	1c73      	adds	r3, r6, #1
   334da:	469c      	mov	ip, r3
   334dc:	055b      	lsls	r3, r3, #21
   334de:	0d5b      	lsrs	r3, r3, #21
   334e0:	2b01      	cmp	r3, #1
   334e2:	dc00      	bgt.n	334e6 <__aeabi_dsub+0x2da>
   334e4:	e09f      	b.n	33626 <__aeabi_dsub+0x41a>
   334e6:	4b1a      	ldr	r3, [pc, #104]	; (33550 <__aeabi_dsub+0x344>)
   334e8:	459c      	cmp	ip, r3
   334ea:	d100      	bne.n	334ee <__aeabi_dsub+0x2e2>
   334ec:	e0c5      	b.n	3367a <__aeabi_dsub+0x46e>
   334ee:	4452      	add	r2, sl
   334f0:	4552      	cmp	r2, sl
   334f2:	4180      	sbcs	r0, r0
   334f4:	1864      	adds	r4, r4, r1
   334f6:	4240      	negs	r0, r0
   334f8:	1824      	adds	r4, r4, r0
   334fa:	07e7      	lsls	r7, r4, #31
   334fc:	0852      	lsrs	r2, r2, #1
   334fe:	4317      	orrs	r7, r2
   33500:	0864      	lsrs	r4, r4, #1
   33502:	4666      	mov	r6, ip
   33504:	e708      	b.n	33318 <__aeabi_dsub+0x10c>
   33506:	4812      	ldr	r0, [pc, #72]	; (33550 <__aeabi_dsub+0x344>)
   33508:	4285      	cmp	r5, r0
   3350a:	d100      	bne.n	3350e <__aeabi_dsub+0x302>
   3350c:	e085      	b.n	3361a <__aeabi_dsub+0x40e>
   3350e:	001d      	movs	r5, r3
   33510:	e6bc      	b.n	3328c <__aeabi_dsub+0x80>
   33512:	0029      	movs	r1, r5
   33514:	3e1f      	subs	r6, #31
   33516:	40f1      	lsrs	r1, r6
   33518:	2b20      	cmp	r3, #32
   3351a:	d100      	bne.n	3351e <__aeabi_dsub+0x312>
   3351c:	e07f      	b.n	3361e <__aeabi_dsub+0x412>
   3351e:	2240      	movs	r2, #64	; 0x40
   33520:	1ad3      	subs	r3, r2, r3
   33522:	409d      	lsls	r5, r3
   33524:	432f      	orrs	r7, r5
   33526:	1e7d      	subs	r5, r7, #1
   33528:	41af      	sbcs	r7, r5
   3352a:	2400      	movs	r4, #0
   3352c:	430f      	orrs	r7, r1
   3352e:	2600      	movs	r6, #0
   33530:	e78e      	b.n	33450 <__aeabi_dsub+0x244>
   33532:	002b      	movs	r3, r5
   33534:	000f      	movs	r7, r1
   33536:	3b20      	subs	r3, #32
   33538:	40df      	lsrs	r7, r3
   3353a:	2d20      	cmp	r5, #32
   3353c:	d071      	beq.n	33622 <__aeabi_dsub+0x416>
   3353e:	2340      	movs	r3, #64	; 0x40
   33540:	1b5d      	subs	r5, r3, r5
   33542:	40a9      	lsls	r1, r5
   33544:	430a      	orrs	r2, r1
   33546:	1e51      	subs	r1, r2, #1
   33548:	418a      	sbcs	r2, r1
   3354a:	2100      	movs	r1, #0
   3354c:	4317      	orrs	r7, r2
   3354e:	e6af      	b.n	332b0 <__aeabi_dsub+0xa4>
   33550:	000007ff 	.word	0x000007ff
   33554:	ff7fffff 	.word	0xff7fffff
   33558:	800fffff 	.word	0x800fffff
   3355c:	2e00      	cmp	r6, #0
   3355e:	d03e      	beq.n	335de <__aeabi_dsub+0x3d2>
   33560:	4eb3      	ldr	r6, [pc, #716]	; (33830 <__aeabi_dsub+0x624>)
   33562:	45b4      	cmp	ip, r6
   33564:	d045      	beq.n	335f2 <__aeabi_dsub+0x3e6>
   33566:	2680      	movs	r6, #128	; 0x80
   33568:	0436      	lsls	r6, r6, #16
   3356a:	426d      	negs	r5, r5
   3356c:	4334      	orrs	r4, r6
   3356e:	2d38      	cmp	r5, #56	; 0x38
   33570:	dd00      	ble.n	33574 <__aeabi_dsub+0x368>
   33572:	e0a8      	b.n	336c6 <__aeabi_dsub+0x4ba>
   33574:	2d1f      	cmp	r5, #31
   33576:	dd00      	ble.n	3357a <__aeabi_dsub+0x36e>
   33578:	e11f      	b.n	337ba <__aeabi_dsub+0x5ae>
   3357a:	2620      	movs	r6, #32
   3357c:	0027      	movs	r7, r4
   3357e:	4650      	mov	r0, sl
   33580:	1b76      	subs	r6, r6, r5
   33582:	40b7      	lsls	r7, r6
   33584:	40e8      	lsrs	r0, r5
   33586:	4307      	orrs	r7, r0
   33588:	4650      	mov	r0, sl
   3358a:	40b0      	lsls	r0, r6
   3358c:	1e46      	subs	r6, r0, #1
   3358e:	41b0      	sbcs	r0, r6
   33590:	40ec      	lsrs	r4, r5
   33592:	4338      	orrs	r0, r7
   33594:	1a17      	subs	r7, r2, r0
   33596:	42ba      	cmp	r2, r7
   33598:	4192      	sbcs	r2, r2
   3359a:	1b0c      	subs	r4, r1, r4
   3359c:	4252      	negs	r2, r2
   3359e:	1aa4      	subs	r4, r4, r2
   335a0:	4666      	mov	r6, ip
   335a2:	4698      	mov	r8, r3
   335a4:	e68b      	b.n	332be <__aeabi_dsub+0xb2>
   335a6:	4664      	mov	r4, ip
   335a8:	4667      	mov	r7, ip
   335aa:	432c      	orrs	r4, r5
   335ac:	d000      	beq.n	335b0 <__aeabi_dsub+0x3a4>
   335ae:	e68b      	b.n	332c8 <__aeabi_dsub+0xbc>
   335b0:	2500      	movs	r5, #0
   335b2:	2600      	movs	r6, #0
   335b4:	2700      	movs	r7, #0
   335b6:	e6ea      	b.n	3338e <__aeabi_dsub+0x182>
   335b8:	001e      	movs	r6, r3
   335ba:	e6ad      	b.n	33318 <__aeabi_dsub+0x10c>
   335bc:	2b1f      	cmp	r3, #31
   335be:	dc60      	bgt.n	33682 <__aeabi_dsub+0x476>
   335c0:	2720      	movs	r7, #32
   335c2:	1af8      	subs	r0, r7, r3
   335c4:	000f      	movs	r7, r1
   335c6:	4684      	mov	ip, r0
   335c8:	4087      	lsls	r7, r0
   335ca:	0010      	movs	r0, r2
   335cc:	40d8      	lsrs	r0, r3
   335ce:	4307      	orrs	r7, r0
   335d0:	4660      	mov	r0, ip
   335d2:	4082      	lsls	r2, r0
   335d4:	1e50      	subs	r0, r2, #1
   335d6:	4182      	sbcs	r2, r0
   335d8:	40d9      	lsrs	r1, r3
   335da:	4317      	orrs	r7, r2
   335dc:	e6f5      	b.n	333ca <__aeabi_dsub+0x1be>
   335de:	0026      	movs	r6, r4
   335e0:	4650      	mov	r0, sl
   335e2:	4306      	orrs	r6, r0
   335e4:	d005      	beq.n	335f2 <__aeabi_dsub+0x3e6>
   335e6:	43ed      	mvns	r5, r5
   335e8:	2d00      	cmp	r5, #0
   335ea:	d0d3      	beq.n	33594 <__aeabi_dsub+0x388>
   335ec:	4e90      	ldr	r6, [pc, #576]	; (33830 <__aeabi_dsub+0x624>)
   335ee:	45b4      	cmp	ip, r6
   335f0:	d1bd      	bne.n	3356e <__aeabi_dsub+0x362>
   335f2:	000c      	movs	r4, r1
   335f4:	0017      	movs	r7, r2
   335f6:	4666      	mov	r6, ip
   335f8:	4698      	mov	r8, r3
   335fa:	e68d      	b.n	33318 <__aeabi_dsub+0x10c>
   335fc:	488c      	ldr	r0, [pc, #560]	; (33830 <__aeabi_dsub+0x624>)
   335fe:	4283      	cmp	r3, r0
   33600:	d00b      	beq.n	3361a <__aeabi_dsub+0x40e>
   33602:	4663      	mov	r3, ip
   33604:	e6d9      	b.n	333ba <__aeabi_dsub+0x1ae>
   33606:	2d00      	cmp	r5, #0
   33608:	d000      	beq.n	3360c <__aeabi_dsub+0x400>
   3360a:	e096      	b.n	3373a <__aeabi_dsub+0x52e>
   3360c:	0008      	movs	r0, r1
   3360e:	4310      	orrs	r0, r2
   33610:	d100      	bne.n	33614 <__aeabi_dsub+0x408>
   33612:	e0e2      	b.n	337da <__aeabi_dsub+0x5ce>
   33614:	000c      	movs	r4, r1
   33616:	0017      	movs	r7, r2
   33618:	4698      	mov	r8, r3
   3361a:	4e85      	ldr	r6, [pc, #532]	; (33830 <__aeabi_dsub+0x624>)
   3361c:	e67c      	b.n	33318 <__aeabi_dsub+0x10c>
   3361e:	2500      	movs	r5, #0
   33620:	e780      	b.n	33524 <__aeabi_dsub+0x318>
   33622:	2100      	movs	r1, #0
   33624:	e78e      	b.n	33544 <__aeabi_dsub+0x338>
   33626:	0023      	movs	r3, r4
   33628:	4650      	mov	r0, sl
   3362a:	4303      	orrs	r3, r0
   3362c:	2e00      	cmp	r6, #0
   3362e:	d000      	beq.n	33632 <__aeabi_dsub+0x426>
   33630:	e0a8      	b.n	33784 <__aeabi_dsub+0x578>
   33632:	2b00      	cmp	r3, #0
   33634:	d100      	bne.n	33638 <__aeabi_dsub+0x42c>
   33636:	e0de      	b.n	337f6 <__aeabi_dsub+0x5ea>
   33638:	000b      	movs	r3, r1
   3363a:	4313      	orrs	r3, r2
   3363c:	d100      	bne.n	33640 <__aeabi_dsub+0x434>
   3363e:	e66b      	b.n	33318 <__aeabi_dsub+0x10c>
   33640:	4452      	add	r2, sl
   33642:	4552      	cmp	r2, sl
   33644:	4180      	sbcs	r0, r0
   33646:	1864      	adds	r4, r4, r1
   33648:	4240      	negs	r0, r0
   3364a:	1824      	adds	r4, r4, r0
   3364c:	0017      	movs	r7, r2
   3364e:	0223      	lsls	r3, r4, #8
   33650:	d400      	bmi.n	33654 <__aeabi_dsub+0x448>
   33652:	e6fd      	b.n	33450 <__aeabi_dsub+0x244>
   33654:	4b77      	ldr	r3, [pc, #476]	; (33834 <__aeabi_dsub+0x628>)
   33656:	4666      	mov	r6, ip
   33658:	401c      	ands	r4, r3
   3365a:	e65d      	b.n	33318 <__aeabi_dsub+0x10c>
   3365c:	0025      	movs	r5, r4
   3365e:	4650      	mov	r0, sl
   33660:	4305      	orrs	r5, r0
   33662:	2e00      	cmp	r6, #0
   33664:	d1cf      	bne.n	33606 <__aeabi_dsub+0x3fa>
   33666:	2d00      	cmp	r5, #0
   33668:	d14f      	bne.n	3370a <__aeabi_dsub+0x4fe>
   3366a:	000c      	movs	r4, r1
   3366c:	4314      	orrs	r4, r2
   3366e:	d100      	bne.n	33672 <__aeabi_dsub+0x466>
   33670:	e0a0      	b.n	337b4 <__aeabi_dsub+0x5a8>
   33672:	000c      	movs	r4, r1
   33674:	0017      	movs	r7, r2
   33676:	4698      	mov	r8, r3
   33678:	e64e      	b.n	33318 <__aeabi_dsub+0x10c>
   3367a:	4666      	mov	r6, ip
   3367c:	2400      	movs	r4, #0
   3367e:	2700      	movs	r7, #0
   33680:	e685      	b.n	3338e <__aeabi_dsub+0x182>
   33682:	001f      	movs	r7, r3
   33684:	0008      	movs	r0, r1
   33686:	3f20      	subs	r7, #32
   33688:	40f8      	lsrs	r0, r7
   3368a:	0007      	movs	r7, r0
   3368c:	2b20      	cmp	r3, #32
   3368e:	d100      	bne.n	33692 <__aeabi_dsub+0x486>
   33690:	e08e      	b.n	337b0 <__aeabi_dsub+0x5a4>
   33692:	2040      	movs	r0, #64	; 0x40
   33694:	1ac3      	subs	r3, r0, r3
   33696:	4099      	lsls	r1, r3
   33698:	430a      	orrs	r2, r1
   3369a:	1e51      	subs	r1, r2, #1
   3369c:	418a      	sbcs	r2, r1
   3369e:	2100      	movs	r1, #0
   336a0:	4317      	orrs	r7, r2
   336a2:	e692      	b.n	333ca <__aeabi_dsub+0x1be>
   336a4:	2e00      	cmp	r6, #0
   336a6:	d114      	bne.n	336d2 <__aeabi_dsub+0x4c6>
   336a8:	0026      	movs	r6, r4
   336aa:	4650      	mov	r0, sl
   336ac:	4306      	orrs	r6, r0
   336ae:	d062      	beq.n	33776 <__aeabi_dsub+0x56a>
   336b0:	43db      	mvns	r3, r3
   336b2:	2b00      	cmp	r3, #0
   336b4:	d15c      	bne.n	33770 <__aeabi_dsub+0x564>
   336b6:	1887      	adds	r7, r0, r2
   336b8:	4297      	cmp	r7, r2
   336ba:	4192      	sbcs	r2, r2
   336bc:	1864      	adds	r4, r4, r1
   336be:	4252      	negs	r2, r2
   336c0:	18a4      	adds	r4, r4, r2
   336c2:	4666      	mov	r6, ip
   336c4:	e687      	b.n	333d6 <__aeabi_dsub+0x1ca>
   336c6:	4650      	mov	r0, sl
   336c8:	4320      	orrs	r0, r4
   336ca:	1e44      	subs	r4, r0, #1
   336cc:	41a0      	sbcs	r0, r4
   336ce:	2400      	movs	r4, #0
   336d0:	e760      	b.n	33594 <__aeabi_dsub+0x388>
   336d2:	4e57      	ldr	r6, [pc, #348]	; (33830 <__aeabi_dsub+0x624>)
   336d4:	45b4      	cmp	ip, r6
   336d6:	d04e      	beq.n	33776 <__aeabi_dsub+0x56a>
   336d8:	2680      	movs	r6, #128	; 0x80
   336da:	0436      	lsls	r6, r6, #16
   336dc:	425b      	negs	r3, r3
   336de:	4334      	orrs	r4, r6
   336e0:	2b38      	cmp	r3, #56	; 0x38
   336e2:	dd00      	ble.n	336e6 <__aeabi_dsub+0x4da>
   336e4:	e07f      	b.n	337e6 <__aeabi_dsub+0x5da>
   336e6:	2b1f      	cmp	r3, #31
   336e8:	dd00      	ble.n	336ec <__aeabi_dsub+0x4e0>
   336ea:	e08b      	b.n	33804 <__aeabi_dsub+0x5f8>
   336ec:	2620      	movs	r6, #32
   336ee:	0027      	movs	r7, r4
   336f0:	4650      	mov	r0, sl
   336f2:	1af6      	subs	r6, r6, r3
   336f4:	40b7      	lsls	r7, r6
   336f6:	40d8      	lsrs	r0, r3
   336f8:	4307      	orrs	r7, r0
   336fa:	4650      	mov	r0, sl
   336fc:	40b0      	lsls	r0, r6
   336fe:	1e46      	subs	r6, r0, #1
   33700:	41b0      	sbcs	r0, r6
   33702:	4307      	orrs	r7, r0
   33704:	40dc      	lsrs	r4, r3
   33706:	18bf      	adds	r7, r7, r2
   33708:	e7d6      	b.n	336b8 <__aeabi_dsub+0x4ac>
   3370a:	000d      	movs	r5, r1
   3370c:	4315      	orrs	r5, r2
   3370e:	d100      	bne.n	33712 <__aeabi_dsub+0x506>
   33710:	e602      	b.n	33318 <__aeabi_dsub+0x10c>
   33712:	4650      	mov	r0, sl
   33714:	1a80      	subs	r0, r0, r2
   33716:	4582      	cmp	sl, r0
   33718:	41bf      	sbcs	r7, r7
   3371a:	1a65      	subs	r5, r4, r1
   3371c:	427f      	negs	r7, r7
   3371e:	1bed      	subs	r5, r5, r7
   33720:	4684      	mov	ip, r0
   33722:	0228      	lsls	r0, r5, #8
   33724:	d400      	bmi.n	33728 <__aeabi_dsub+0x51c>
   33726:	e68d      	b.n	33444 <__aeabi_dsub+0x238>
   33728:	4650      	mov	r0, sl
   3372a:	1a17      	subs	r7, r2, r0
   3372c:	42ba      	cmp	r2, r7
   3372e:	4192      	sbcs	r2, r2
   33730:	1b0c      	subs	r4, r1, r4
   33732:	4252      	negs	r2, r2
   33734:	1aa4      	subs	r4, r4, r2
   33736:	4698      	mov	r8, r3
   33738:	e5ee      	b.n	33318 <__aeabi_dsub+0x10c>
   3373a:	000d      	movs	r5, r1
   3373c:	4315      	orrs	r5, r2
   3373e:	d100      	bne.n	33742 <__aeabi_dsub+0x536>
   33740:	e76b      	b.n	3361a <__aeabi_dsub+0x40e>
   33742:	4650      	mov	r0, sl
   33744:	0767      	lsls	r7, r4, #29
   33746:	08c0      	lsrs	r0, r0, #3
   33748:	4307      	orrs	r7, r0
   3374a:	2080      	movs	r0, #128	; 0x80
   3374c:	08e4      	lsrs	r4, r4, #3
   3374e:	0300      	lsls	r0, r0, #12
   33750:	4204      	tst	r4, r0
   33752:	d007      	beq.n	33764 <__aeabi_dsub+0x558>
   33754:	08cd      	lsrs	r5, r1, #3
   33756:	4205      	tst	r5, r0
   33758:	d104      	bne.n	33764 <__aeabi_dsub+0x558>
   3375a:	002c      	movs	r4, r5
   3375c:	4698      	mov	r8, r3
   3375e:	08d7      	lsrs	r7, r2, #3
   33760:	0749      	lsls	r1, r1, #29
   33762:	430f      	orrs	r7, r1
   33764:	0f7b      	lsrs	r3, r7, #29
   33766:	00e4      	lsls	r4, r4, #3
   33768:	431c      	orrs	r4, r3
   3376a:	00ff      	lsls	r7, r7, #3
   3376c:	4e30      	ldr	r6, [pc, #192]	; (33830 <__aeabi_dsub+0x624>)
   3376e:	e5d3      	b.n	33318 <__aeabi_dsub+0x10c>
   33770:	4e2f      	ldr	r6, [pc, #188]	; (33830 <__aeabi_dsub+0x624>)
   33772:	45b4      	cmp	ip, r6
   33774:	d1b4      	bne.n	336e0 <__aeabi_dsub+0x4d4>
   33776:	000c      	movs	r4, r1
   33778:	0017      	movs	r7, r2
   3377a:	4666      	mov	r6, ip
   3377c:	e5cc      	b.n	33318 <__aeabi_dsub+0x10c>
   3377e:	2700      	movs	r7, #0
   33780:	2400      	movs	r4, #0
   33782:	e5e8      	b.n	33356 <__aeabi_dsub+0x14a>
   33784:	2b00      	cmp	r3, #0
   33786:	d039      	beq.n	337fc <__aeabi_dsub+0x5f0>
   33788:	000b      	movs	r3, r1
   3378a:	4313      	orrs	r3, r2
   3378c:	d100      	bne.n	33790 <__aeabi_dsub+0x584>
   3378e:	e744      	b.n	3361a <__aeabi_dsub+0x40e>
   33790:	08c0      	lsrs	r0, r0, #3
   33792:	0767      	lsls	r7, r4, #29
   33794:	4307      	orrs	r7, r0
   33796:	2080      	movs	r0, #128	; 0x80
   33798:	08e4      	lsrs	r4, r4, #3
   3379a:	0300      	lsls	r0, r0, #12
   3379c:	4204      	tst	r4, r0
   3379e:	d0e1      	beq.n	33764 <__aeabi_dsub+0x558>
   337a0:	08cb      	lsrs	r3, r1, #3
   337a2:	4203      	tst	r3, r0
   337a4:	d1de      	bne.n	33764 <__aeabi_dsub+0x558>
   337a6:	08d7      	lsrs	r7, r2, #3
   337a8:	0749      	lsls	r1, r1, #29
   337aa:	430f      	orrs	r7, r1
   337ac:	001c      	movs	r4, r3
   337ae:	e7d9      	b.n	33764 <__aeabi_dsub+0x558>
   337b0:	2100      	movs	r1, #0
   337b2:	e771      	b.n	33698 <__aeabi_dsub+0x48c>
   337b4:	2500      	movs	r5, #0
   337b6:	2700      	movs	r7, #0
   337b8:	e5e9      	b.n	3338e <__aeabi_dsub+0x182>
   337ba:	002e      	movs	r6, r5
   337bc:	0027      	movs	r7, r4
   337be:	3e20      	subs	r6, #32
   337c0:	40f7      	lsrs	r7, r6
   337c2:	2d20      	cmp	r5, #32
   337c4:	d02f      	beq.n	33826 <__aeabi_dsub+0x61a>
   337c6:	2640      	movs	r6, #64	; 0x40
   337c8:	1b75      	subs	r5, r6, r5
   337ca:	40ac      	lsls	r4, r5
   337cc:	4650      	mov	r0, sl
   337ce:	4320      	orrs	r0, r4
   337d0:	1e44      	subs	r4, r0, #1
   337d2:	41a0      	sbcs	r0, r4
   337d4:	2400      	movs	r4, #0
   337d6:	4338      	orrs	r0, r7
   337d8:	e6dc      	b.n	33594 <__aeabi_dsub+0x388>
   337da:	2480      	movs	r4, #128	; 0x80
   337dc:	2500      	movs	r5, #0
   337de:	0324      	lsls	r4, r4, #12
   337e0:	4e13      	ldr	r6, [pc, #76]	; (33830 <__aeabi_dsub+0x624>)
   337e2:	2700      	movs	r7, #0
   337e4:	e5d3      	b.n	3338e <__aeabi_dsub+0x182>
   337e6:	4650      	mov	r0, sl
   337e8:	4320      	orrs	r0, r4
   337ea:	0007      	movs	r7, r0
   337ec:	1e78      	subs	r0, r7, #1
   337ee:	4187      	sbcs	r7, r0
   337f0:	2400      	movs	r4, #0
   337f2:	18bf      	adds	r7, r7, r2
   337f4:	e760      	b.n	336b8 <__aeabi_dsub+0x4ac>
   337f6:	000c      	movs	r4, r1
   337f8:	0017      	movs	r7, r2
   337fa:	e58d      	b.n	33318 <__aeabi_dsub+0x10c>
   337fc:	000c      	movs	r4, r1
   337fe:	0017      	movs	r7, r2
   33800:	4e0b      	ldr	r6, [pc, #44]	; (33830 <__aeabi_dsub+0x624>)
   33802:	e589      	b.n	33318 <__aeabi_dsub+0x10c>
   33804:	001e      	movs	r6, r3
   33806:	0027      	movs	r7, r4
   33808:	3e20      	subs	r6, #32
   3380a:	40f7      	lsrs	r7, r6
   3380c:	2b20      	cmp	r3, #32
   3380e:	d00c      	beq.n	3382a <__aeabi_dsub+0x61e>
   33810:	2640      	movs	r6, #64	; 0x40
   33812:	1af3      	subs	r3, r6, r3
   33814:	409c      	lsls	r4, r3
   33816:	4650      	mov	r0, sl
   33818:	4320      	orrs	r0, r4
   3381a:	1e44      	subs	r4, r0, #1
   3381c:	41a0      	sbcs	r0, r4
   3381e:	4307      	orrs	r7, r0
   33820:	2400      	movs	r4, #0
   33822:	18bf      	adds	r7, r7, r2
   33824:	e748      	b.n	336b8 <__aeabi_dsub+0x4ac>
   33826:	2400      	movs	r4, #0
   33828:	e7d0      	b.n	337cc <__aeabi_dsub+0x5c0>
   3382a:	2400      	movs	r4, #0
   3382c:	e7f3      	b.n	33816 <__aeabi_dsub+0x60a>
   3382e:	46c0      	nop			; (mov r8, r8)
   33830:	000007ff 	.word	0x000007ff
   33834:	ff7fffff 	.word	0xff7fffff

00033838 <__aeabi_d2iz>:
   33838:	b530      	push	{r4, r5, lr}
   3383a:	4d13      	ldr	r5, [pc, #76]	; (33888 <__aeabi_d2iz+0x50>)
   3383c:	030a      	lsls	r2, r1, #12
   3383e:	004b      	lsls	r3, r1, #1
   33840:	0b12      	lsrs	r2, r2, #12
   33842:	0d5b      	lsrs	r3, r3, #21
   33844:	0fc9      	lsrs	r1, r1, #31
   33846:	2400      	movs	r4, #0
   33848:	42ab      	cmp	r3, r5
   3384a:	dd10      	ble.n	3386e <__aeabi_d2iz+0x36>
   3384c:	4c0f      	ldr	r4, [pc, #60]	; (3388c <__aeabi_d2iz+0x54>)
   3384e:	42a3      	cmp	r3, r4
   33850:	dc0f      	bgt.n	33872 <__aeabi_d2iz+0x3a>
   33852:	2480      	movs	r4, #128	; 0x80
   33854:	4d0e      	ldr	r5, [pc, #56]	; (33890 <__aeabi_d2iz+0x58>)
   33856:	0364      	lsls	r4, r4, #13
   33858:	4322      	orrs	r2, r4
   3385a:	1aed      	subs	r5, r5, r3
   3385c:	2d1f      	cmp	r5, #31
   3385e:	dd0b      	ble.n	33878 <__aeabi_d2iz+0x40>
   33860:	480c      	ldr	r0, [pc, #48]	; (33894 <__aeabi_d2iz+0x5c>)
   33862:	1ac3      	subs	r3, r0, r3
   33864:	40da      	lsrs	r2, r3
   33866:	4254      	negs	r4, r2
   33868:	2900      	cmp	r1, #0
   3386a:	d100      	bne.n	3386e <__aeabi_d2iz+0x36>
   3386c:	0014      	movs	r4, r2
   3386e:	0020      	movs	r0, r4
   33870:	bd30      	pop	{r4, r5, pc}
   33872:	4b09      	ldr	r3, [pc, #36]	; (33898 <__aeabi_d2iz+0x60>)
   33874:	18cc      	adds	r4, r1, r3
   33876:	e7fa      	b.n	3386e <__aeabi_d2iz+0x36>
   33878:	4c08      	ldr	r4, [pc, #32]	; (3389c <__aeabi_d2iz+0x64>)
   3387a:	40e8      	lsrs	r0, r5
   3387c:	46a4      	mov	ip, r4
   3387e:	4463      	add	r3, ip
   33880:	409a      	lsls	r2, r3
   33882:	4302      	orrs	r2, r0
   33884:	e7ef      	b.n	33866 <__aeabi_d2iz+0x2e>
   33886:	46c0      	nop			; (mov r8, r8)
   33888:	000003fe 	.word	0x000003fe
   3388c:	0000041d 	.word	0x0000041d
   33890:	00000433 	.word	0x00000433
   33894:	00000413 	.word	0x00000413
   33898:	7fffffff 	.word	0x7fffffff
   3389c:	fffffbed 	.word	0xfffffbed

000338a0 <__aeabi_ui2d>:
   338a0:	b510      	push	{r4, lr}
   338a2:	1e04      	subs	r4, r0, #0
   338a4:	d028      	beq.n	338f8 <__aeabi_ui2d+0x58>
   338a6:	f000 f833 	bl	33910 <__clzsi2>
   338aa:	4b15      	ldr	r3, [pc, #84]	; (33900 <__aeabi_ui2d+0x60>)
   338ac:	4a15      	ldr	r2, [pc, #84]	; (33904 <__aeabi_ui2d+0x64>)
   338ae:	1a1b      	subs	r3, r3, r0
   338b0:	1ad2      	subs	r2, r2, r3
   338b2:	2a1f      	cmp	r2, #31
   338b4:	dd15      	ble.n	338e2 <__aeabi_ui2d+0x42>
   338b6:	4a14      	ldr	r2, [pc, #80]	; (33908 <__aeabi_ui2d+0x68>)
   338b8:	1ad2      	subs	r2, r2, r3
   338ba:	4094      	lsls	r4, r2
   338bc:	2200      	movs	r2, #0
   338be:	0324      	lsls	r4, r4, #12
   338c0:	055b      	lsls	r3, r3, #21
   338c2:	0b24      	lsrs	r4, r4, #12
   338c4:	0d5b      	lsrs	r3, r3, #21
   338c6:	2100      	movs	r1, #0
   338c8:	0010      	movs	r0, r2
   338ca:	0324      	lsls	r4, r4, #12
   338cc:	0d0a      	lsrs	r2, r1, #20
   338ce:	0b24      	lsrs	r4, r4, #12
   338d0:	0512      	lsls	r2, r2, #20
   338d2:	4322      	orrs	r2, r4
   338d4:	4c0d      	ldr	r4, [pc, #52]	; (3390c <__aeabi_ui2d+0x6c>)
   338d6:	051b      	lsls	r3, r3, #20
   338d8:	4022      	ands	r2, r4
   338da:	4313      	orrs	r3, r2
   338dc:	005b      	lsls	r3, r3, #1
   338de:	0859      	lsrs	r1, r3, #1
   338e0:	bd10      	pop	{r4, pc}
   338e2:	0021      	movs	r1, r4
   338e4:	4091      	lsls	r1, r2
   338e6:	000a      	movs	r2, r1
   338e8:	210b      	movs	r1, #11
   338ea:	1a08      	subs	r0, r1, r0
   338ec:	40c4      	lsrs	r4, r0
   338ee:	055b      	lsls	r3, r3, #21
   338f0:	0324      	lsls	r4, r4, #12
   338f2:	0b24      	lsrs	r4, r4, #12
   338f4:	0d5b      	lsrs	r3, r3, #21
   338f6:	e7e6      	b.n	338c6 <__aeabi_ui2d+0x26>
   338f8:	2300      	movs	r3, #0
   338fa:	2400      	movs	r4, #0
   338fc:	2200      	movs	r2, #0
   338fe:	e7e2      	b.n	338c6 <__aeabi_ui2d+0x26>
   33900:	0000041e 	.word	0x0000041e
   33904:	00000433 	.word	0x00000433
   33908:	00000413 	.word	0x00000413
   3390c:	800fffff 	.word	0x800fffff

00033910 <__clzsi2>:
   33910:	211c      	movs	r1, #28
   33912:	2301      	movs	r3, #1
   33914:	041b      	lsls	r3, r3, #16
   33916:	4298      	cmp	r0, r3
   33918:	d301      	bcc.n	3391e <__clzsi2+0xe>
   3391a:	0c00      	lsrs	r0, r0, #16
   3391c:	3910      	subs	r1, #16
   3391e:	0a1b      	lsrs	r3, r3, #8
   33920:	4298      	cmp	r0, r3
   33922:	d301      	bcc.n	33928 <__clzsi2+0x18>
   33924:	0a00      	lsrs	r0, r0, #8
   33926:	3908      	subs	r1, #8
   33928:	091b      	lsrs	r3, r3, #4
   3392a:	4298      	cmp	r0, r3
   3392c:	d301      	bcc.n	33932 <__clzsi2+0x22>
   3392e:	0900      	lsrs	r0, r0, #4
   33930:	3904      	subs	r1, #4
   33932:	a202      	add	r2, pc, #8	; (adr r2, 3393c <__clzsi2+0x2c>)
   33934:	5c10      	ldrb	r0, [r2, r0]
   33936:	1840      	adds	r0, r0, r1
   33938:	4770      	bx	lr
   3393a:	46c0      	nop			; (mov r8, r8)
   3393c:	02020304 	.word	0x02020304
   33940:	01010101 	.word	0x01010101
	...

0003394c <atoi>:
   3394c:	b510      	push	{r4, lr}
   3394e:	220a      	movs	r2, #10
   33950:	2100      	movs	r1, #0
   33952:	f000 fb0d 	bl	33f70 <strtol>
   33956:	bd10      	pop	{r4, pc}

00033958 <__libc_init_array>:
   33958:	b570      	push	{r4, r5, r6, lr}
   3395a:	2600      	movs	r6, #0
   3395c:	4d0c      	ldr	r5, [pc, #48]	; (33990 <__libc_init_array+0x38>)
   3395e:	4c0d      	ldr	r4, [pc, #52]	; (33994 <__libc_init_array+0x3c>)
   33960:	1b64      	subs	r4, r4, r5
   33962:	10a4      	asrs	r4, r4, #2
   33964:	42a6      	cmp	r6, r4
   33966:	d109      	bne.n	3397c <__libc_init_array+0x24>
   33968:	2600      	movs	r6, #0
   3396a:	f005 fbaf 	bl	390cc <_init>
   3396e:	4d0a      	ldr	r5, [pc, #40]	; (33998 <__libc_init_array+0x40>)
   33970:	4c0a      	ldr	r4, [pc, #40]	; (3399c <__libc_init_array+0x44>)
   33972:	1b64      	subs	r4, r4, r5
   33974:	10a4      	asrs	r4, r4, #2
   33976:	42a6      	cmp	r6, r4
   33978:	d105      	bne.n	33986 <__libc_init_array+0x2e>
   3397a:	bd70      	pop	{r4, r5, r6, pc}
   3397c:	00b3      	lsls	r3, r6, #2
   3397e:	58eb      	ldr	r3, [r5, r3]
   33980:	4798      	blx	r3
   33982:	3601      	adds	r6, #1
   33984:	e7ee      	b.n	33964 <__libc_init_array+0xc>
   33986:	00b3      	lsls	r3, r6, #2
   33988:	58eb      	ldr	r3, [r5, r3]
   3398a:	4798      	blx	r3
   3398c:	3601      	adds	r6, #1
   3398e:	e7f2      	b.n	33976 <__libc_init_array+0x1e>
   33990:	000390d8 	.word	0x000390d8
   33994:	000390d8 	.word	0x000390d8
   33998:	000390d8 	.word	0x000390d8
   3399c:	000390dc 	.word	0x000390dc

000339a0 <malloc>:
   339a0:	b510      	push	{r4, lr}
   339a2:	4b03      	ldr	r3, [pc, #12]	; (339b0 <malloc+0x10>)
   339a4:	0001      	movs	r1, r0
   339a6:	6818      	ldr	r0, [r3, #0]
   339a8:	f000 f87c 	bl	33aa4 <_malloc_r>
   339ac:	bd10      	pop	{r4, pc}
   339ae:	46c0      	nop			; (mov r8, r8)
   339b0:	200000d8 	.word	0x200000d8

000339b4 <free>:
   339b4:	b510      	push	{r4, lr}
   339b6:	4b03      	ldr	r3, [pc, #12]	; (339c4 <free+0x10>)
   339b8:	0001      	movs	r1, r0
   339ba:	6818      	ldr	r0, [r3, #0]
   339bc:	f000 f828 	bl	33a10 <_free_r>
   339c0:	bd10      	pop	{r4, pc}
   339c2:	46c0      	nop			; (mov r8, r8)
   339c4:	200000d8 	.word	0x200000d8

000339c8 <memcpy>:
   339c8:	2300      	movs	r3, #0
   339ca:	b510      	push	{r4, lr}
   339cc:	429a      	cmp	r2, r3
   339ce:	d100      	bne.n	339d2 <memcpy+0xa>
   339d0:	bd10      	pop	{r4, pc}
   339d2:	5ccc      	ldrb	r4, [r1, r3]
   339d4:	54c4      	strb	r4, [r0, r3]
   339d6:	3301      	adds	r3, #1
   339d8:	e7f8      	b.n	339cc <memcpy+0x4>

000339da <memmove>:
   339da:	b510      	push	{r4, lr}
   339dc:	4288      	cmp	r0, r1
   339de:	d902      	bls.n	339e6 <memmove+0xc>
   339e0:	188b      	adds	r3, r1, r2
   339e2:	4298      	cmp	r0, r3
   339e4:	d308      	bcc.n	339f8 <memmove+0x1e>
   339e6:	2300      	movs	r3, #0
   339e8:	429a      	cmp	r2, r3
   339ea:	d007      	beq.n	339fc <memmove+0x22>
   339ec:	5ccc      	ldrb	r4, [r1, r3]
   339ee:	54c4      	strb	r4, [r0, r3]
   339f0:	3301      	adds	r3, #1
   339f2:	e7f9      	b.n	339e8 <memmove+0xe>
   339f4:	5c8b      	ldrb	r3, [r1, r2]
   339f6:	5483      	strb	r3, [r0, r2]
   339f8:	3a01      	subs	r2, #1
   339fa:	d2fb      	bcs.n	339f4 <memmove+0x1a>
   339fc:	bd10      	pop	{r4, pc}

000339fe <memset>:
   339fe:	0003      	movs	r3, r0
   33a00:	1882      	adds	r2, r0, r2
   33a02:	4293      	cmp	r3, r2
   33a04:	d100      	bne.n	33a08 <memset+0xa>
   33a06:	4770      	bx	lr
   33a08:	7019      	strb	r1, [r3, #0]
   33a0a:	3301      	adds	r3, #1
   33a0c:	e7f9      	b.n	33a02 <memset+0x4>
	...

00033a10 <_free_r>:
   33a10:	b570      	push	{r4, r5, r6, lr}
   33a12:	0005      	movs	r5, r0
   33a14:	2900      	cmp	r1, #0
   33a16:	d010      	beq.n	33a3a <_free_r+0x2a>
   33a18:	1f0c      	subs	r4, r1, #4
   33a1a:	6823      	ldr	r3, [r4, #0]
   33a1c:	2b00      	cmp	r3, #0
   33a1e:	da00      	bge.n	33a22 <_free_r+0x12>
   33a20:	18e4      	adds	r4, r4, r3
   33a22:	0028      	movs	r0, r5
   33a24:	f000 fdd8 	bl	345d8 <__malloc_lock>
   33a28:	4a1d      	ldr	r2, [pc, #116]	; (33aa0 <_free_r+0x90>)
   33a2a:	6813      	ldr	r3, [r2, #0]
   33a2c:	2b00      	cmp	r3, #0
   33a2e:	d105      	bne.n	33a3c <_free_r+0x2c>
   33a30:	6063      	str	r3, [r4, #4]
   33a32:	6014      	str	r4, [r2, #0]
   33a34:	0028      	movs	r0, r5
   33a36:	f000 fdd0 	bl	345da <__malloc_unlock>
   33a3a:	bd70      	pop	{r4, r5, r6, pc}
   33a3c:	42a3      	cmp	r3, r4
   33a3e:	d909      	bls.n	33a54 <_free_r+0x44>
   33a40:	6821      	ldr	r1, [r4, #0]
   33a42:	1860      	adds	r0, r4, r1
   33a44:	4283      	cmp	r3, r0
   33a46:	d1f3      	bne.n	33a30 <_free_r+0x20>
   33a48:	6818      	ldr	r0, [r3, #0]
   33a4a:	685b      	ldr	r3, [r3, #4]
   33a4c:	1841      	adds	r1, r0, r1
   33a4e:	6021      	str	r1, [r4, #0]
   33a50:	e7ee      	b.n	33a30 <_free_r+0x20>
   33a52:	0013      	movs	r3, r2
   33a54:	685a      	ldr	r2, [r3, #4]
   33a56:	2a00      	cmp	r2, #0
   33a58:	d001      	beq.n	33a5e <_free_r+0x4e>
   33a5a:	42a2      	cmp	r2, r4
   33a5c:	d9f9      	bls.n	33a52 <_free_r+0x42>
   33a5e:	6819      	ldr	r1, [r3, #0]
   33a60:	1858      	adds	r0, r3, r1
   33a62:	42a0      	cmp	r0, r4
   33a64:	d10b      	bne.n	33a7e <_free_r+0x6e>
   33a66:	6820      	ldr	r0, [r4, #0]
   33a68:	1809      	adds	r1, r1, r0
   33a6a:	1858      	adds	r0, r3, r1
   33a6c:	6019      	str	r1, [r3, #0]
   33a6e:	4282      	cmp	r2, r0
   33a70:	d1e0      	bne.n	33a34 <_free_r+0x24>
   33a72:	6810      	ldr	r0, [r2, #0]
   33a74:	6852      	ldr	r2, [r2, #4]
   33a76:	1841      	adds	r1, r0, r1
   33a78:	6019      	str	r1, [r3, #0]
   33a7a:	605a      	str	r2, [r3, #4]
   33a7c:	e7da      	b.n	33a34 <_free_r+0x24>
   33a7e:	42a0      	cmp	r0, r4
   33a80:	d902      	bls.n	33a88 <_free_r+0x78>
   33a82:	230c      	movs	r3, #12
   33a84:	602b      	str	r3, [r5, #0]
   33a86:	e7d5      	b.n	33a34 <_free_r+0x24>
   33a88:	6821      	ldr	r1, [r4, #0]
   33a8a:	1860      	adds	r0, r4, r1
   33a8c:	4282      	cmp	r2, r0
   33a8e:	d103      	bne.n	33a98 <_free_r+0x88>
   33a90:	6810      	ldr	r0, [r2, #0]
   33a92:	6852      	ldr	r2, [r2, #4]
   33a94:	1841      	adds	r1, r0, r1
   33a96:	6021      	str	r1, [r4, #0]
   33a98:	6062      	str	r2, [r4, #4]
   33a9a:	605c      	str	r4, [r3, #4]
   33a9c:	e7ca      	b.n	33a34 <_free_r+0x24>
   33a9e:	46c0      	nop			; (mov r8, r8)
   33aa0:	20004280 	.word	0x20004280

00033aa4 <_malloc_r>:
   33aa4:	2303      	movs	r3, #3
   33aa6:	b570      	push	{r4, r5, r6, lr}
   33aa8:	1ccd      	adds	r5, r1, #3
   33aaa:	439d      	bics	r5, r3
   33aac:	3508      	adds	r5, #8
   33aae:	0006      	movs	r6, r0
   33ab0:	2d0c      	cmp	r5, #12
   33ab2:	d21e      	bcs.n	33af2 <_malloc_r+0x4e>
   33ab4:	250c      	movs	r5, #12
   33ab6:	42a9      	cmp	r1, r5
   33ab8:	d81d      	bhi.n	33af6 <_malloc_r+0x52>
   33aba:	0030      	movs	r0, r6
   33abc:	f000 fd8c 	bl	345d8 <__malloc_lock>
   33ac0:	4a25      	ldr	r2, [pc, #148]	; (33b58 <_malloc_r+0xb4>)
   33ac2:	6814      	ldr	r4, [r2, #0]
   33ac4:	0021      	movs	r1, r4
   33ac6:	2900      	cmp	r1, #0
   33ac8:	d119      	bne.n	33afe <_malloc_r+0x5a>
   33aca:	4c24      	ldr	r4, [pc, #144]	; (33b5c <_malloc_r+0xb8>)
   33acc:	6823      	ldr	r3, [r4, #0]
   33ace:	2b00      	cmp	r3, #0
   33ad0:	d103      	bne.n	33ada <_malloc_r+0x36>
   33ad2:	0030      	movs	r0, r6
   33ad4:	f000 f8ae 	bl	33c34 <_sbrk_r>
   33ad8:	6020      	str	r0, [r4, #0]
   33ada:	0029      	movs	r1, r5
   33adc:	0030      	movs	r0, r6
   33ade:	f000 f8a9 	bl	33c34 <_sbrk_r>
   33ae2:	1c43      	adds	r3, r0, #1
   33ae4:	d12c      	bne.n	33b40 <_malloc_r+0x9c>
   33ae6:	230c      	movs	r3, #12
   33ae8:	0030      	movs	r0, r6
   33aea:	6033      	str	r3, [r6, #0]
   33aec:	f000 fd75 	bl	345da <__malloc_unlock>
   33af0:	e003      	b.n	33afa <_malloc_r+0x56>
   33af2:	2d00      	cmp	r5, #0
   33af4:	dadf      	bge.n	33ab6 <_malloc_r+0x12>
   33af6:	230c      	movs	r3, #12
   33af8:	6033      	str	r3, [r6, #0]
   33afa:	2000      	movs	r0, #0
   33afc:	bd70      	pop	{r4, r5, r6, pc}
   33afe:	680b      	ldr	r3, [r1, #0]
   33b00:	1b5b      	subs	r3, r3, r5
   33b02:	d41a      	bmi.n	33b3a <_malloc_r+0x96>
   33b04:	2b0b      	cmp	r3, #11
   33b06:	d903      	bls.n	33b10 <_malloc_r+0x6c>
   33b08:	600b      	str	r3, [r1, #0]
   33b0a:	18cc      	adds	r4, r1, r3
   33b0c:	6025      	str	r5, [r4, #0]
   33b0e:	e003      	b.n	33b18 <_malloc_r+0x74>
   33b10:	428c      	cmp	r4, r1
   33b12:	d10e      	bne.n	33b32 <_malloc_r+0x8e>
   33b14:	6863      	ldr	r3, [r4, #4]
   33b16:	6013      	str	r3, [r2, #0]
   33b18:	0030      	movs	r0, r6
   33b1a:	f000 fd5e 	bl	345da <__malloc_unlock>
   33b1e:	0020      	movs	r0, r4
   33b20:	2207      	movs	r2, #7
   33b22:	300b      	adds	r0, #11
   33b24:	1d23      	adds	r3, r4, #4
   33b26:	4390      	bics	r0, r2
   33b28:	1ac3      	subs	r3, r0, r3
   33b2a:	d0e7      	beq.n	33afc <_malloc_r+0x58>
   33b2c:	425a      	negs	r2, r3
   33b2e:	50e2      	str	r2, [r4, r3]
   33b30:	e7e4      	b.n	33afc <_malloc_r+0x58>
   33b32:	684b      	ldr	r3, [r1, #4]
   33b34:	6063      	str	r3, [r4, #4]
   33b36:	000c      	movs	r4, r1
   33b38:	e7ee      	b.n	33b18 <_malloc_r+0x74>
   33b3a:	000c      	movs	r4, r1
   33b3c:	6849      	ldr	r1, [r1, #4]
   33b3e:	e7c2      	b.n	33ac6 <_malloc_r+0x22>
   33b40:	2303      	movs	r3, #3
   33b42:	1cc4      	adds	r4, r0, #3
   33b44:	439c      	bics	r4, r3
   33b46:	42a0      	cmp	r0, r4
   33b48:	d0e0      	beq.n	33b0c <_malloc_r+0x68>
   33b4a:	1a21      	subs	r1, r4, r0
   33b4c:	0030      	movs	r0, r6
   33b4e:	f000 f871 	bl	33c34 <_sbrk_r>
   33b52:	1c43      	adds	r3, r0, #1
   33b54:	d1da      	bne.n	33b0c <_malloc_r+0x68>
   33b56:	e7c6      	b.n	33ae6 <_malloc_r+0x42>
   33b58:	20004280 	.word	0x20004280
   33b5c:	20004284 	.word	0x20004284

00033b60 <_puts_r>:
   33b60:	b570      	push	{r4, r5, r6, lr}
   33b62:	0005      	movs	r5, r0
   33b64:	000e      	movs	r6, r1
   33b66:	2800      	cmp	r0, #0
   33b68:	d004      	beq.n	33b74 <_puts_r+0x14>
   33b6a:	6983      	ldr	r3, [r0, #24]
   33b6c:	2b00      	cmp	r3, #0
   33b6e:	d101      	bne.n	33b74 <_puts_r+0x14>
   33b70:	f000 fc0e 	bl	34390 <__sinit>
   33b74:	69ab      	ldr	r3, [r5, #24]
   33b76:	68ac      	ldr	r4, [r5, #8]
   33b78:	2b00      	cmp	r3, #0
   33b7a:	d102      	bne.n	33b82 <_puts_r+0x22>
   33b7c:	0028      	movs	r0, r5
   33b7e:	f000 fc07 	bl	34390 <__sinit>
   33b82:	4b24      	ldr	r3, [pc, #144]	; (33c14 <_puts_r+0xb4>)
   33b84:	429c      	cmp	r4, r3
   33b86:	d10f      	bne.n	33ba8 <_puts_r+0x48>
   33b88:	686c      	ldr	r4, [r5, #4]
   33b8a:	89a3      	ldrh	r3, [r4, #12]
   33b8c:	071b      	lsls	r3, r3, #28
   33b8e:	d502      	bpl.n	33b96 <_puts_r+0x36>
   33b90:	6923      	ldr	r3, [r4, #16]
   33b92:	2b00      	cmp	r3, #0
   33b94:	d120      	bne.n	33bd8 <_puts_r+0x78>
   33b96:	0021      	movs	r1, r4
   33b98:	0028      	movs	r0, r5
   33b9a:	f000 fa8b 	bl	340b4 <__swsetup_r>
   33b9e:	2800      	cmp	r0, #0
   33ba0:	d01a      	beq.n	33bd8 <_puts_r+0x78>
   33ba2:	2001      	movs	r0, #1
   33ba4:	4240      	negs	r0, r0
   33ba6:	bd70      	pop	{r4, r5, r6, pc}
   33ba8:	4b1b      	ldr	r3, [pc, #108]	; (33c18 <_puts_r+0xb8>)
   33baa:	429c      	cmp	r4, r3
   33bac:	d101      	bne.n	33bb2 <_puts_r+0x52>
   33bae:	68ac      	ldr	r4, [r5, #8]
   33bb0:	e7eb      	b.n	33b8a <_puts_r+0x2a>
   33bb2:	4b1a      	ldr	r3, [pc, #104]	; (33c1c <_puts_r+0xbc>)
   33bb4:	429c      	cmp	r4, r3
   33bb6:	d1e8      	bne.n	33b8a <_puts_r+0x2a>
   33bb8:	68ec      	ldr	r4, [r5, #12]
   33bba:	e7e6      	b.n	33b8a <_puts_r+0x2a>
   33bbc:	3b01      	subs	r3, #1
   33bbe:	3601      	adds	r6, #1
   33bc0:	60a3      	str	r3, [r4, #8]
   33bc2:	2b00      	cmp	r3, #0
   33bc4:	da04      	bge.n	33bd0 <_puts_r+0x70>
   33bc6:	69a2      	ldr	r2, [r4, #24]
   33bc8:	4293      	cmp	r3, r2
   33bca:	db16      	blt.n	33bfa <_puts_r+0x9a>
   33bcc:	290a      	cmp	r1, #10
   33bce:	d014      	beq.n	33bfa <_puts_r+0x9a>
   33bd0:	6823      	ldr	r3, [r4, #0]
   33bd2:	1c5a      	adds	r2, r3, #1
   33bd4:	6022      	str	r2, [r4, #0]
   33bd6:	7019      	strb	r1, [r3, #0]
   33bd8:	7831      	ldrb	r1, [r6, #0]
   33bda:	68a3      	ldr	r3, [r4, #8]
   33bdc:	2900      	cmp	r1, #0
   33bde:	d1ed      	bne.n	33bbc <_puts_r+0x5c>
   33be0:	3b01      	subs	r3, #1
   33be2:	60a3      	str	r3, [r4, #8]
   33be4:	2b00      	cmp	r3, #0
   33be6:	da0f      	bge.n	33c08 <_puts_r+0xa8>
   33be8:	0022      	movs	r2, r4
   33bea:	310a      	adds	r1, #10
   33bec:	0028      	movs	r0, r5
   33bee:	f000 fa0b 	bl	34008 <__swbuf_r>
   33bf2:	1c43      	adds	r3, r0, #1
   33bf4:	d0d5      	beq.n	33ba2 <_puts_r+0x42>
   33bf6:	200a      	movs	r0, #10
   33bf8:	e7d5      	b.n	33ba6 <_puts_r+0x46>
   33bfa:	0022      	movs	r2, r4
   33bfc:	0028      	movs	r0, r5
   33bfe:	f000 fa03 	bl	34008 <__swbuf_r>
   33c02:	1c43      	adds	r3, r0, #1
   33c04:	d1e8      	bne.n	33bd8 <_puts_r+0x78>
   33c06:	e7cc      	b.n	33ba2 <_puts_r+0x42>
   33c08:	200a      	movs	r0, #10
   33c0a:	6823      	ldr	r3, [r4, #0]
   33c0c:	1c5a      	adds	r2, r3, #1
   33c0e:	6022      	str	r2, [r4, #0]
   33c10:	7018      	strb	r0, [r3, #0]
   33c12:	e7c8      	b.n	33ba6 <_puts_r+0x46>
   33c14:	00038f4c 	.word	0x00038f4c
   33c18:	00038f6c 	.word	0x00038f6c
   33c1c:	00038f2c 	.word	0x00038f2c

00033c20 <puts>:
   33c20:	b510      	push	{r4, lr}
   33c22:	4b03      	ldr	r3, [pc, #12]	; (33c30 <puts+0x10>)
   33c24:	0001      	movs	r1, r0
   33c26:	6818      	ldr	r0, [r3, #0]
   33c28:	f7ff ff9a 	bl	33b60 <_puts_r>
   33c2c:	bd10      	pop	{r4, pc}
   33c2e:	46c0      	nop			; (mov r8, r8)
   33c30:	200000d8 	.word	0x200000d8

00033c34 <_sbrk_r>:
   33c34:	2300      	movs	r3, #0
   33c36:	b570      	push	{r4, r5, r6, lr}
   33c38:	4c06      	ldr	r4, [pc, #24]	; (33c54 <_sbrk_r+0x20>)
   33c3a:	0005      	movs	r5, r0
   33c3c:	0008      	movs	r0, r1
   33c3e:	6023      	str	r3, [r4, #0]
   33c40:	f7f6 fc5e 	bl	2a500 <_sbrk>
   33c44:	1c43      	adds	r3, r0, #1
   33c46:	d103      	bne.n	33c50 <_sbrk_r+0x1c>
   33c48:	6823      	ldr	r3, [r4, #0]
   33c4a:	2b00      	cmp	r3, #0
   33c4c:	d000      	beq.n	33c50 <_sbrk_r+0x1c>
   33c4e:	602b      	str	r3, [r5, #0]
   33c50:	bd70      	pop	{r4, r5, r6, pc}
   33c52:	46c0      	nop			; (mov r8, r8)
   33c54:	2000569c 	.word	0x2000569c

00033c58 <sniprintf>:
   33c58:	b40c      	push	{r2, r3}
   33c5a:	b530      	push	{r4, r5, lr}
   33c5c:	4b16      	ldr	r3, [pc, #88]	; (33cb8 <sniprintf+0x60>)
   33c5e:	b09d      	sub	sp, #116	; 0x74
   33c60:	1e0c      	subs	r4, r1, #0
   33c62:	681d      	ldr	r5, [r3, #0]
   33c64:	da08      	bge.n	33c78 <sniprintf+0x20>
   33c66:	238b      	movs	r3, #139	; 0x8b
   33c68:	2001      	movs	r0, #1
   33c6a:	602b      	str	r3, [r5, #0]
   33c6c:	4240      	negs	r0, r0
   33c6e:	b01d      	add	sp, #116	; 0x74
   33c70:	bc30      	pop	{r4, r5}
   33c72:	bc08      	pop	{r3}
   33c74:	b002      	add	sp, #8
   33c76:	4718      	bx	r3
   33c78:	2382      	movs	r3, #130	; 0x82
   33c7a:	a902      	add	r1, sp, #8
   33c7c:	009b      	lsls	r3, r3, #2
   33c7e:	818b      	strh	r3, [r1, #12]
   33c80:	2300      	movs	r3, #0
   33c82:	9002      	str	r0, [sp, #8]
   33c84:	6108      	str	r0, [r1, #16]
   33c86:	429c      	cmp	r4, r3
   33c88:	d000      	beq.n	33c8c <sniprintf+0x34>
   33c8a:	1e63      	subs	r3, r4, #1
   33c8c:	608b      	str	r3, [r1, #8]
   33c8e:	614b      	str	r3, [r1, #20]
   33c90:	2301      	movs	r3, #1
   33c92:	425b      	negs	r3, r3
   33c94:	81cb      	strh	r3, [r1, #14]
   33c96:	9a20      	ldr	r2, [sp, #128]	; 0x80
   33c98:	ab21      	add	r3, sp, #132	; 0x84
   33c9a:	0028      	movs	r0, r5
   33c9c:	9301      	str	r3, [sp, #4]
   33c9e:	f000 fcff 	bl	346a0 <_svfiprintf_r>
   33ca2:	1c43      	adds	r3, r0, #1
   33ca4:	da01      	bge.n	33caa <sniprintf+0x52>
   33ca6:	238b      	movs	r3, #139	; 0x8b
   33ca8:	602b      	str	r3, [r5, #0]
   33caa:	2c00      	cmp	r4, #0
   33cac:	d0df      	beq.n	33c6e <sniprintf+0x16>
   33cae:	2300      	movs	r3, #0
   33cb0:	9a02      	ldr	r2, [sp, #8]
   33cb2:	7013      	strb	r3, [r2, #0]
   33cb4:	e7db      	b.n	33c6e <sniprintf+0x16>
   33cb6:	46c0      	nop			; (mov r8, r8)
   33cb8:	200000d8 	.word	0x200000d8

00033cbc <siprintf>:
   33cbc:	b40e      	push	{r1, r2, r3}
   33cbe:	b510      	push	{r4, lr}
   33cc0:	b09d      	sub	sp, #116	; 0x74
   33cc2:	a902      	add	r1, sp, #8
   33cc4:	9002      	str	r0, [sp, #8]
   33cc6:	6108      	str	r0, [r1, #16]
   33cc8:	480b      	ldr	r0, [pc, #44]	; (33cf8 <siprintf+0x3c>)
   33cca:	2482      	movs	r4, #130	; 0x82
   33ccc:	6088      	str	r0, [r1, #8]
   33cce:	6148      	str	r0, [r1, #20]
   33cd0:	2001      	movs	r0, #1
   33cd2:	4240      	negs	r0, r0
   33cd4:	ab1f      	add	r3, sp, #124	; 0x7c
   33cd6:	81c8      	strh	r0, [r1, #14]
   33cd8:	4808      	ldr	r0, [pc, #32]	; (33cfc <siprintf+0x40>)
   33cda:	cb04      	ldmia	r3!, {r2}
   33cdc:	00a4      	lsls	r4, r4, #2
   33cde:	6800      	ldr	r0, [r0, #0]
   33ce0:	9301      	str	r3, [sp, #4]
   33ce2:	818c      	strh	r4, [r1, #12]
   33ce4:	f000 fcdc 	bl	346a0 <_svfiprintf_r>
   33ce8:	2300      	movs	r3, #0
   33cea:	9a02      	ldr	r2, [sp, #8]
   33cec:	7013      	strb	r3, [r2, #0]
   33cee:	b01d      	add	sp, #116	; 0x74
   33cf0:	bc10      	pop	{r4}
   33cf2:	bc08      	pop	{r3}
   33cf4:	b003      	add	sp, #12
   33cf6:	4718      	bx	r3
   33cf8:	7fffffff 	.word	0x7fffffff
   33cfc:	200000d8 	.word	0x200000d8

00033d00 <strcasecmp>:
   33d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33d02:	0007      	movs	r7, r0
   33d04:	000e      	movs	r6, r1
   33d06:	783c      	ldrb	r4, [r7, #0]
   33d08:	f000 fbda 	bl	344c0 <__locale_ctype_ptr>
   33d0c:	2203      	movs	r2, #3
   33d0e:	1900      	adds	r0, r0, r4
   33d10:	7843      	ldrb	r3, [r0, #1]
   33d12:	4013      	ands	r3, r2
   33d14:	2b01      	cmp	r3, #1
   33d16:	d100      	bne.n	33d1a <strcasecmp+0x1a>
   33d18:	3420      	adds	r4, #32
   33d1a:	7835      	ldrb	r5, [r6, #0]
   33d1c:	f000 fbd0 	bl	344c0 <__locale_ctype_ptr>
   33d20:	2203      	movs	r2, #3
   33d22:	1940      	adds	r0, r0, r5
   33d24:	7843      	ldrb	r3, [r0, #1]
   33d26:	4013      	ands	r3, r2
   33d28:	2b01      	cmp	r3, #1
   33d2a:	d100      	bne.n	33d2e <strcasecmp+0x2e>
   33d2c:	3520      	adds	r5, #32
   33d2e:	1b60      	subs	r0, r4, r5
   33d30:	d103      	bne.n	33d3a <strcasecmp+0x3a>
   33d32:	3701      	adds	r7, #1
   33d34:	3601      	adds	r6, #1
   33d36:	2d00      	cmp	r5, #0
   33d38:	d1e5      	bne.n	33d06 <strcasecmp+0x6>
   33d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00033d3c <strcat>:
   33d3c:	0002      	movs	r2, r0
   33d3e:	b510      	push	{r4, lr}
   33d40:	7813      	ldrb	r3, [r2, #0]
   33d42:	2b00      	cmp	r3, #0
   33d44:	d105      	bne.n	33d52 <strcat+0x16>
   33d46:	5ccc      	ldrb	r4, [r1, r3]
   33d48:	54d4      	strb	r4, [r2, r3]
   33d4a:	3301      	adds	r3, #1
   33d4c:	2c00      	cmp	r4, #0
   33d4e:	d1fa      	bne.n	33d46 <strcat+0xa>
   33d50:	bd10      	pop	{r4, pc}
   33d52:	3201      	adds	r2, #1
   33d54:	e7f4      	b.n	33d40 <strcat+0x4>

00033d56 <strcmp>:
   33d56:	7802      	ldrb	r2, [r0, #0]
   33d58:	780b      	ldrb	r3, [r1, #0]
   33d5a:	2a00      	cmp	r2, #0
   33d5c:	d003      	beq.n	33d66 <strcmp+0x10>
   33d5e:	3001      	adds	r0, #1
   33d60:	3101      	adds	r1, #1
   33d62:	429a      	cmp	r2, r3
   33d64:	d0f7      	beq.n	33d56 <strcmp>
   33d66:	1ad0      	subs	r0, r2, r3
   33d68:	4770      	bx	lr

00033d6a <strcpy>:
   33d6a:	1c03      	adds	r3, r0, #0
   33d6c:	780a      	ldrb	r2, [r1, #0]
   33d6e:	3101      	adds	r1, #1
   33d70:	701a      	strb	r2, [r3, #0]
   33d72:	3301      	adds	r3, #1
   33d74:	2a00      	cmp	r2, #0
   33d76:	d1f9      	bne.n	33d6c <strcpy+0x2>
   33d78:	4770      	bx	lr
	...

00033d7c <strdup>:
   33d7c:	b510      	push	{r4, lr}
   33d7e:	4b03      	ldr	r3, [pc, #12]	; (33d8c <strdup+0x10>)
   33d80:	0001      	movs	r1, r0
   33d82:	6818      	ldr	r0, [r3, #0]
   33d84:	f000 f804 	bl	33d90 <_strdup_r>
   33d88:	bd10      	pop	{r4, pc}
   33d8a:	46c0      	nop			; (mov r8, r8)
   33d8c:	200000d8 	.word	0x200000d8

00033d90 <_strdup_r>:
   33d90:	b570      	push	{r4, r5, r6, lr}
   33d92:	0005      	movs	r5, r0
   33d94:	0008      	movs	r0, r1
   33d96:	000e      	movs	r6, r1
   33d98:	f000 f80d 	bl	33db6 <strlen>
   33d9c:	1c44      	adds	r4, r0, #1
   33d9e:	0021      	movs	r1, r4
   33da0:	0028      	movs	r0, r5
   33da2:	f7ff fe7f 	bl	33aa4 <_malloc_r>
   33da6:	1e05      	subs	r5, r0, #0
   33da8:	d003      	beq.n	33db2 <_strdup_r+0x22>
   33daa:	0022      	movs	r2, r4
   33dac:	0031      	movs	r1, r6
   33dae:	f7ff fe0b 	bl	339c8 <memcpy>
   33db2:	0028      	movs	r0, r5
   33db4:	bd70      	pop	{r4, r5, r6, pc}

00033db6 <strlen>:
   33db6:	2300      	movs	r3, #0
   33db8:	5cc2      	ldrb	r2, [r0, r3]
   33dba:	3301      	adds	r3, #1
   33dbc:	2a00      	cmp	r2, #0
   33dbe:	d1fb      	bne.n	33db8 <strlen+0x2>
   33dc0:	1e58      	subs	r0, r3, #1
   33dc2:	4770      	bx	lr

00033dc4 <strncmp>:
   33dc4:	2300      	movs	r3, #0
   33dc6:	b530      	push	{r4, r5, lr}
   33dc8:	429a      	cmp	r2, r3
   33dca:	d00a      	beq.n	33de2 <strncmp+0x1e>
   33dcc:	3a01      	subs	r2, #1
   33dce:	5cc4      	ldrb	r4, [r0, r3]
   33dd0:	5ccd      	ldrb	r5, [r1, r3]
   33dd2:	42ac      	cmp	r4, r5
   33dd4:	d104      	bne.n	33de0 <strncmp+0x1c>
   33dd6:	429a      	cmp	r2, r3
   33dd8:	d002      	beq.n	33de0 <strncmp+0x1c>
   33dda:	3301      	adds	r3, #1
   33ddc:	2c00      	cmp	r4, #0
   33dde:	d1f6      	bne.n	33dce <strncmp+0xa>
   33de0:	1b63      	subs	r3, r4, r5
   33de2:	0018      	movs	r0, r3
   33de4:	bd30      	pop	{r4, r5, pc}

00033de6 <strncpy>:
   33de6:	b570      	push	{r4, r5, r6, lr}
   33de8:	0004      	movs	r4, r0
   33dea:	2a00      	cmp	r2, #0
   33dec:	d100      	bne.n	33df0 <strncpy+0xa>
   33dee:	bd70      	pop	{r4, r5, r6, pc}
   33df0:	780d      	ldrb	r5, [r1, #0]
   33df2:	1e56      	subs	r6, r2, #1
   33df4:	1c63      	adds	r3, r4, #1
   33df6:	7025      	strb	r5, [r4, #0]
   33df8:	3101      	adds	r1, #1
   33dfa:	2d00      	cmp	r5, #0
   33dfc:	d105      	bne.n	33e0a <strncpy+0x24>
   33dfe:	18a4      	adds	r4, r4, r2
   33e00:	429c      	cmp	r4, r3
   33e02:	d0f4      	beq.n	33dee <strncpy+0x8>
   33e04:	701d      	strb	r5, [r3, #0]
   33e06:	3301      	adds	r3, #1
   33e08:	e7fa      	b.n	33e00 <strncpy+0x1a>
   33e0a:	001c      	movs	r4, r3
   33e0c:	0032      	movs	r2, r6
   33e0e:	e7ec      	b.n	33dea <strncpy+0x4>

00033e10 <strrchr>:
   33e10:	b570      	push	{r4, r5, r6, lr}
   33e12:	000d      	movs	r5, r1
   33e14:	2400      	movs	r4, #0
   33e16:	2900      	cmp	r1, #0
   33e18:	d105      	bne.n	33e26 <strrchr+0x16>
   33e1a:	f000 ff19 	bl	34c50 <strchr>
   33e1e:	0004      	movs	r4, r0
   33e20:	e006      	b.n	33e30 <strrchr+0x20>
   33e22:	001c      	movs	r4, r3
   33e24:	1c58      	adds	r0, r3, #1
   33e26:	0029      	movs	r1, r5
   33e28:	f000 ff12 	bl	34c50 <strchr>
   33e2c:	1e03      	subs	r3, r0, #0
   33e2e:	d1f8      	bne.n	33e22 <strrchr+0x12>
   33e30:	0020      	movs	r0, r4
   33e32:	bd70      	pop	{r4, r5, r6, pc}

00033e34 <strstr>:
   33e34:	b510      	push	{r4, lr}
   33e36:	0002      	movs	r2, r0
   33e38:	7800      	ldrb	r0, [r0, #0]
   33e3a:	2800      	cmp	r0, #0
   33e3c:	d104      	bne.n	33e48 <strstr+0x14>
   33e3e:	7809      	ldrb	r1, [r1, #0]
   33e40:	2900      	cmp	r1, #0
   33e42:	d00d      	beq.n	33e60 <strstr+0x2c>
   33e44:	bd10      	pop	{r4, pc}
   33e46:	3201      	adds	r2, #1
   33e48:	7810      	ldrb	r0, [r2, #0]
   33e4a:	2800      	cmp	r0, #0
   33e4c:	d0fa      	beq.n	33e44 <strstr+0x10>
   33e4e:	2300      	movs	r3, #0
   33e50:	5cc8      	ldrb	r0, [r1, r3]
   33e52:	2800      	cmp	r0, #0
   33e54:	d004      	beq.n	33e60 <strstr+0x2c>
   33e56:	5cd4      	ldrb	r4, [r2, r3]
   33e58:	4284      	cmp	r4, r0
   33e5a:	d1f4      	bne.n	33e46 <strstr+0x12>
   33e5c:	3301      	adds	r3, #1
   33e5e:	e7f7      	b.n	33e50 <strstr+0x1c>
   33e60:	0010      	movs	r0, r2
   33e62:	e7ef      	b.n	33e44 <strstr+0x10>

00033e64 <_strtol_l.isra.0>:
   33e64:	b5f0      	push	{r4, r5, r6, r7, lr}
   33e66:	001f      	movs	r7, r3
   33e68:	000e      	movs	r6, r1
   33e6a:	b087      	sub	sp, #28
   33e6c:	9005      	str	r0, [sp, #20]
   33e6e:	9103      	str	r1, [sp, #12]
   33e70:	9202      	str	r2, [sp, #8]
   33e72:	980c      	ldr	r0, [sp, #48]	; 0x30
   33e74:	7834      	ldrb	r4, [r6, #0]
   33e76:	f000 fb20 	bl	344ba <__locale_ctype_ptr_l>
   33e7a:	2208      	movs	r2, #8
   33e7c:	1900      	adds	r0, r0, r4
   33e7e:	7843      	ldrb	r3, [r0, #1]
   33e80:	1c75      	adds	r5, r6, #1
   33e82:	4013      	ands	r3, r2
   33e84:	d10c      	bne.n	33ea0 <_strtol_l.isra.0+0x3c>
   33e86:	2c2d      	cmp	r4, #45	; 0x2d
   33e88:	d10c      	bne.n	33ea4 <_strtol_l.isra.0+0x40>
   33e8a:	3301      	adds	r3, #1
   33e8c:	782c      	ldrb	r4, [r5, #0]
   33e8e:	9301      	str	r3, [sp, #4]
   33e90:	1cb5      	adds	r5, r6, #2
   33e92:	2f00      	cmp	r7, #0
   33e94:	d00c      	beq.n	33eb0 <_strtol_l.isra.0+0x4c>
   33e96:	2f10      	cmp	r7, #16
   33e98:	d114      	bne.n	33ec4 <_strtol_l.isra.0+0x60>
   33e9a:	2c30      	cmp	r4, #48	; 0x30
   33e9c:	d00a      	beq.n	33eb4 <_strtol_l.isra.0+0x50>
   33e9e:	e011      	b.n	33ec4 <_strtol_l.isra.0+0x60>
   33ea0:	002e      	movs	r6, r5
   33ea2:	e7e6      	b.n	33e72 <_strtol_l.isra.0+0xe>
   33ea4:	9301      	str	r3, [sp, #4]
   33ea6:	2c2b      	cmp	r4, #43	; 0x2b
   33ea8:	d1f3      	bne.n	33e92 <_strtol_l.isra.0+0x2e>
   33eaa:	782c      	ldrb	r4, [r5, #0]
   33eac:	1cb5      	adds	r5, r6, #2
   33eae:	e7f0      	b.n	33e92 <_strtol_l.isra.0+0x2e>
   33eb0:	2c30      	cmp	r4, #48	; 0x30
   33eb2:	d12f      	bne.n	33f14 <_strtol_l.isra.0+0xb0>
   33eb4:	2220      	movs	r2, #32
   33eb6:	782b      	ldrb	r3, [r5, #0]
   33eb8:	4393      	bics	r3, r2
   33eba:	2b58      	cmp	r3, #88	; 0x58
   33ebc:	d151      	bne.n	33f62 <_strtol_l.isra.0+0xfe>
   33ebe:	2710      	movs	r7, #16
   33ec0:	786c      	ldrb	r4, [r5, #1]
   33ec2:	3502      	adds	r5, #2
   33ec4:	9b01      	ldr	r3, [sp, #4]
   33ec6:	4a29      	ldr	r2, [pc, #164]	; (33f6c <_strtol_l.isra.0+0x108>)
   33ec8:	0039      	movs	r1, r7
   33eca:	189e      	adds	r6, r3, r2
   33ecc:	0030      	movs	r0, r6
   33ece:	f7fd ffbf 	bl	31e50 <__aeabi_uidivmod>
   33ed2:	0030      	movs	r0, r6
   33ed4:	9104      	str	r1, [sp, #16]
   33ed6:	0039      	movs	r1, r7
   33ed8:	f7fd ff34 	bl	31d44 <__udivsi3>
   33edc:	2101      	movs	r1, #1
   33ede:	2300      	movs	r3, #0
   33ee0:	4249      	negs	r1, r1
   33ee2:	0002      	movs	r2, r0
   33ee4:	468c      	mov	ip, r1
   33ee6:	0018      	movs	r0, r3
   33ee8:	0021      	movs	r1, r4
   33eea:	3930      	subs	r1, #48	; 0x30
   33eec:	2909      	cmp	r1, #9
   33eee:	d813      	bhi.n	33f18 <_strtol_l.isra.0+0xb4>
   33ef0:	000c      	movs	r4, r1
   33ef2:	42a7      	cmp	r7, r4
   33ef4:	dd1c      	ble.n	33f30 <_strtol_l.isra.0+0xcc>
   33ef6:	1c59      	adds	r1, r3, #1
   33ef8:	d009      	beq.n	33f0e <_strtol_l.isra.0+0xaa>
   33efa:	4663      	mov	r3, ip
   33efc:	4282      	cmp	r2, r0
   33efe:	d306      	bcc.n	33f0e <_strtol_l.isra.0+0xaa>
   33f00:	d102      	bne.n	33f08 <_strtol_l.isra.0+0xa4>
   33f02:	9904      	ldr	r1, [sp, #16]
   33f04:	42a1      	cmp	r1, r4
   33f06:	db02      	blt.n	33f0e <_strtol_l.isra.0+0xaa>
   33f08:	2301      	movs	r3, #1
   33f0a:	4378      	muls	r0, r7
   33f0c:	1820      	adds	r0, r4, r0
   33f0e:	782c      	ldrb	r4, [r5, #0]
   33f10:	3501      	adds	r5, #1
   33f12:	e7e9      	b.n	33ee8 <_strtol_l.isra.0+0x84>
   33f14:	270a      	movs	r7, #10
   33f16:	e7d5      	b.n	33ec4 <_strtol_l.isra.0+0x60>
   33f18:	0021      	movs	r1, r4
   33f1a:	3941      	subs	r1, #65	; 0x41
   33f1c:	2919      	cmp	r1, #25
   33f1e:	d801      	bhi.n	33f24 <_strtol_l.isra.0+0xc0>
   33f20:	3c37      	subs	r4, #55	; 0x37
   33f22:	e7e6      	b.n	33ef2 <_strtol_l.isra.0+0x8e>
   33f24:	0021      	movs	r1, r4
   33f26:	3961      	subs	r1, #97	; 0x61
   33f28:	2919      	cmp	r1, #25
   33f2a:	d801      	bhi.n	33f30 <_strtol_l.isra.0+0xcc>
   33f2c:	3c57      	subs	r4, #87	; 0x57
   33f2e:	e7e0      	b.n	33ef2 <_strtol_l.isra.0+0x8e>
   33f30:	1c5a      	adds	r2, r3, #1
   33f32:	d108      	bne.n	33f46 <_strtol_l.isra.0+0xe2>
   33f34:	9a05      	ldr	r2, [sp, #20]
   33f36:	3323      	adds	r3, #35	; 0x23
   33f38:	6013      	str	r3, [r2, #0]
   33f3a:	9b02      	ldr	r3, [sp, #8]
   33f3c:	0030      	movs	r0, r6
   33f3e:	2b00      	cmp	r3, #0
   33f40:	d10b      	bne.n	33f5a <_strtol_l.isra.0+0xf6>
   33f42:	b007      	add	sp, #28
   33f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33f46:	9a01      	ldr	r2, [sp, #4]
   33f48:	2a00      	cmp	r2, #0
   33f4a:	d000      	beq.n	33f4e <_strtol_l.isra.0+0xea>
   33f4c:	4240      	negs	r0, r0
   33f4e:	9a02      	ldr	r2, [sp, #8]
   33f50:	2a00      	cmp	r2, #0
   33f52:	d0f6      	beq.n	33f42 <_strtol_l.isra.0+0xde>
   33f54:	9a03      	ldr	r2, [sp, #12]
   33f56:	2b00      	cmp	r3, #0
   33f58:	d000      	beq.n	33f5c <_strtol_l.isra.0+0xf8>
   33f5a:	1e6a      	subs	r2, r5, #1
   33f5c:	9b02      	ldr	r3, [sp, #8]
   33f5e:	601a      	str	r2, [r3, #0]
   33f60:	e7ef      	b.n	33f42 <_strtol_l.isra.0+0xde>
   33f62:	2430      	movs	r4, #48	; 0x30
   33f64:	2f00      	cmp	r7, #0
   33f66:	d1ad      	bne.n	33ec4 <_strtol_l.isra.0+0x60>
   33f68:	3708      	adds	r7, #8
   33f6a:	e7ab      	b.n	33ec4 <_strtol_l.isra.0+0x60>
   33f6c:	7fffffff 	.word	0x7fffffff

00033f70 <strtol>:
   33f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   33f72:	0013      	movs	r3, r2
   33f74:	4a06      	ldr	r2, [pc, #24]	; (33f90 <strtol+0x20>)
   33f76:	0005      	movs	r5, r0
   33f78:	6810      	ldr	r0, [r2, #0]
   33f7a:	6a04      	ldr	r4, [r0, #32]
   33f7c:	2c00      	cmp	r4, #0
   33f7e:	d100      	bne.n	33f82 <strtol+0x12>
   33f80:	4c04      	ldr	r4, [pc, #16]	; (33f94 <strtol+0x24>)
   33f82:	000a      	movs	r2, r1
   33f84:	9400      	str	r4, [sp, #0]
   33f86:	0029      	movs	r1, r5
   33f88:	f7ff ff6c 	bl	33e64 <_strtol_l.isra.0>
   33f8c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   33f8e:	46c0      	nop			; (mov r8, r8)
   33f90:	200000d8 	.word	0x200000d8
   33f94:	2000013c 	.word	0x2000013c

00033f98 <_vsniprintf_r>:
   33f98:	b530      	push	{r4, r5, lr}
   33f9a:	0014      	movs	r4, r2
   33f9c:	b09b      	sub	sp, #108	; 0x6c
   33f9e:	0005      	movs	r5, r0
   33fa0:	001a      	movs	r2, r3
   33fa2:	2c00      	cmp	r4, #0
   33fa4:	da05      	bge.n	33fb2 <_vsniprintf_r+0x1a>
   33fa6:	238b      	movs	r3, #139	; 0x8b
   33fa8:	6003      	str	r3, [r0, #0]
   33faa:	2001      	movs	r0, #1
   33fac:	4240      	negs	r0, r0
   33fae:	b01b      	add	sp, #108	; 0x6c
   33fb0:	bd30      	pop	{r4, r5, pc}
   33fb2:	2382      	movs	r3, #130	; 0x82
   33fb4:	4668      	mov	r0, sp
   33fb6:	009b      	lsls	r3, r3, #2
   33fb8:	8183      	strh	r3, [r0, #12]
   33fba:	2300      	movs	r3, #0
   33fbc:	9100      	str	r1, [sp, #0]
   33fbe:	9104      	str	r1, [sp, #16]
   33fc0:	429c      	cmp	r4, r3
   33fc2:	d000      	beq.n	33fc6 <_vsniprintf_r+0x2e>
   33fc4:	1e63      	subs	r3, r4, #1
   33fc6:	9302      	str	r3, [sp, #8]
   33fc8:	9305      	str	r3, [sp, #20]
   33fca:	2301      	movs	r3, #1
   33fcc:	4669      	mov	r1, sp
   33fce:	425b      	negs	r3, r3
   33fd0:	81cb      	strh	r3, [r1, #14]
   33fd2:	0028      	movs	r0, r5
   33fd4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   33fd6:	f000 fb63 	bl	346a0 <_svfiprintf_r>
   33fda:	1c43      	adds	r3, r0, #1
   33fdc:	da01      	bge.n	33fe2 <_vsniprintf_r+0x4a>
   33fde:	238b      	movs	r3, #139	; 0x8b
   33fe0:	602b      	str	r3, [r5, #0]
   33fe2:	2c00      	cmp	r4, #0
   33fe4:	d0e3      	beq.n	33fae <_vsniprintf_r+0x16>
   33fe6:	2300      	movs	r3, #0
   33fe8:	9a00      	ldr	r2, [sp, #0]
   33fea:	7013      	strb	r3, [r2, #0]
   33fec:	e7df      	b.n	33fae <_vsniprintf_r+0x16>
	...

00033ff0 <vsniprintf>:
   33ff0:	b507      	push	{r0, r1, r2, lr}
   33ff2:	9300      	str	r3, [sp, #0]
   33ff4:	0013      	movs	r3, r2
   33ff6:	000a      	movs	r2, r1
   33ff8:	0001      	movs	r1, r0
   33ffa:	4802      	ldr	r0, [pc, #8]	; (34004 <vsniprintf+0x14>)
   33ffc:	6800      	ldr	r0, [r0, #0]
   33ffe:	f7ff ffcb 	bl	33f98 <_vsniprintf_r>
   34002:	bd0e      	pop	{r1, r2, r3, pc}
   34004:	200000d8 	.word	0x200000d8

00034008 <__swbuf_r>:
   34008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3400a:	0005      	movs	r5, r0
   3400c:	000e      	movs	r6, r1
   3400e:	0014      	movs	r4, r2
   34010:	2800      	cmp	r0, #0
   34012:	d004      	beq.n	3401e <__swbuf_r+0x16>
   34014:	6983      	ldr	r3, [r0, #24]
   34016:	2b00      	cmp	r3, #0
   34018:	d101      	bne.n	3401e <__swbuf_r+0x16>
   3401a:	f000 f9b9 	bl	34390 <__sinit>
   3401e:	4b22      	ldr	r3, [pc, #136]	; (340a8 <__swbuf_r+0xa0>)
   34020:	429c      	cmp	r4, r3
   34022:	d12d      	bne.n	34080 <__swbuf_r+0x78>
   34024:	686c      	ldr	r4, [r5, #4]
   34026:	69a3      	ldr	r3, [r4, #24]
   34028:	60a3      	str	r3, [r4, #8]
   3402a:	89a3      	ldrh	r3, [r4, #12]
   3402c:	071b      	lsls	r3, r3, #28
   3402e:	d531      	bpl.n	34094 <__swbuf_r+0x8c>
   34030:	6923      	ldr	r3, [r4, #16]
   34032:	2b00      	cmp	r3, #0
   34034:	d02e      	beq.n	34094 <__swbuf_r+0x8c>
   34036:	6823      	ldr	r3, [r4, #0]
   34038:	6922      	ldr	r2, [r4, #16]
   3403a:	b2f7      	uxtb	r7, r6
   3403c:	1a98      	subs	r0, r3, r2
   3403e:	6963      	ldr	r3, [r4, #20]
   34040:	b2f6      	uxtb	r6, r6
   34042:	4298      	cmp	r0, r3
   34044:	db05      	blt.n	34052 <__swbuf_r+0x4a>
   34046:	0021      	movs	r1, r4
   34048:	0028      	movs	r0, r5
   3404a:	f000 f933 	bl	342b4 <_fflush_r>
   3404e:	2800      	cmp	r0, #0
   34050:	d126      	bne.n	340a0 <__swbuf_r+0x98>
   34052:	68a3      	ldr	r3, [r4, #8]
   34054:	3001      	adds	r0, #1
   34056:	3b01      	subs	r3, #1
   34058:	60a3      	str	r3, [r4, #8]
   3405a:	6823      	ldr	r3, [r4, #0]
   3405c:	1c5a      	adds	r2, r3, #1
   3405e:	6022      	str	r2, [r4, #0]
   34060:	701f      	strb	r7, [r3, #0]
   34062:	6963      	ldr	r3, [r4, #20]
   34064:	4298      	cmp	r0, r3
   34066:	d004      	beq.n	34072 <__swbuf_r+0x6a>
   34068:	89a3      	ldrh	r3, [r4, #12]
   3406a:	07db      	lsls	r3, r3, #31
   3406c:	d51a      	bpl.n	340a4 <__swbuf_r+0x9c>
   3406e:	2e0a      	cmp	r6, #10
   34070:	d118      	bne.n	340a4 <__swbuf_r+0x9c>
   34072:	0021      	movs	r1, r4
   34074:	0028      	movs	r0, r5
   34076:	f000 f91d 	bl	342b4 <_fflush_r>
   3407a:	2800      	cmp	r0, #0
   3407c:	d012      	beq.n	340a4 <__swbuf_r+0x9c>
   3407e:	e00f      	b.n	340a0 <__swbuf_r+0x98>
   34080:	4b0a      	ldr	r3, [pc, #40]	; (340ac <__swbuf_r+0xa4>)
   34082:	429c      	cmp	r4, r3
   34084:	d101      	bne.n	3408a <__swbuf_r+0x82>
   34086:	68ac      	ldr	r4, [r5, #8]
   34088:	e7cd      	b.n	34026 <__swbuf_r+0x1e>
   3408a:	4b09      	ldr	r3, [pc, #36]	; (340b0 <__swbuf_r+0xa8>)
   3408c:	429c      	cmp	r4, r3
   3408e:	d1ca      	bne.n	34026 <__swbuf_r+0x1e>
   34090:	68ec      	ldr	r4, [r5, #12]
   34092:	e7c8      	b.n	34026 <__swbuf_r+0x1e>
   34094:	0021      	movs	r1, r4
   34096:	0028      	movs	r0, r5
   34098:	f000 f80c 	bl	340b4 <__swsetup_r>
   3409c:	2800      	cmp	r0, #0
   3409e:	d0ca      	beq.n	34036 <__swbuf_r+0x2e>
   340a0:	2601      	movs	r6, #1
   340a2:	4276      	negs	r6, r6
   340a4:	0030      	movs	r0, r6
   340a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   340a8:	00038f4c 	.word	0x00038f4c
   340ac:	00038f6c 	.word	0x00038f6c
   340b0:	00038f2c 	.word	0x00038f2c

000340b4 <__swsetup_r>:
   340b4:	4b36      	ldr	r3, [pc, #216]	; (34190 <__swsetup_r+0xdc>)
   340b6:	b570      	push	{r4, r5, r6, lr}
   340b8:	681d      	ldr	r5, [r3, #0]
   340ba:	0006      	movs	r6, r0
   340bc:	000c      	movs	r4, r1
   340be:	2d00      	cmp	r5, #0
   340c0:	d005      	beq.n	340ce <__swsetup_r+0x1a>
   340c2:	69ab      	ldr	r3, [r5, #24]
   340c4:	2b00      	cmp	r3, #0
   340c6:	d102      	bne.n	340ce <__swsetup_r+0x1a>
   340c8:	0028      	movs	r0, r5
   340ca:	f000 f961 	bl	34390 <__sinit>
   340ce:	4b31      	ldr	r3, [pc, #196]	; (34194 <__swsetup_r+0xe0>)
   340d0:	429c      	cmp	r4, r3
   340d2:	d10f      	bne.n	340f4 <__swsetup_r+0x40>
   340d4:	686c      	ldr	r4, [r5, #4]
   340d6:	230c      	movs	r3, #12
   340d8:	5ee2      	ldrsh	r2, [r4, r3]
   340da:	b293      	uxth	r3, r2
   340dc:	0719      	lsls	r1, r3, #28
   340de:	d42d      	bmi.n	3413c <__swsetup_r+0x88>
   340e0:	06d9      	lsls	r1, r3, #27
   340e2:	d411      	bmi.n	34108 <__swsetup_r+0x54>
   340e4:	2309      	movs	r3, #9
   340e6:	2001      	movs	r0, #1
   340e8:	6033      	str	r3, [r6, #0]
   340ea:	3337      	adds	r3, #55	; 0x37
   340ec:	4313      	orrs	r3, r2
   340ee:	81a3      	strh	r3, [r4, #12]
   340f0:	4240      	negs	r0, r0
   340f2:	bd70      	pop	{r4, r5, r6, pc}
   340f4:	4b28      	ldr	r3, [pc, #160]	; (34198 <__swsetup_r+0xe4>)
   340f6:	429c      	cmp	r4, r3
   340f8:	d101      	bne.n	340fe <__swsetup_r+0x4a>
   340fa:	68ac      	ldr	r4, [r5, #8]
   340fc:	e7eb      	b.n	340d6 <__swsetup_r+0x22>
   340fe:	4b27      	ldr	r3, [pc, #156]	; (3419c <__swsetup_r+0xe8>)
   34100:	429c      	cmp	r4, r3
   34102:	d1e8      	bne.n	340d6 <__swsetup_r+0x22>
   34104:	68ec      	ldr	r4, [r5, #12]
   34106:	e7e6      	b.n	340d6 <__swsetup_r+0x22>
   34108:	075b      	lsls	r3, r3, #29
   3410a:	d513      	bpl.n	34134 <__swsetup_r+0x80>
   3410c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3410e:	2900      	cmp	r1, #0
   34110:	d008      	beq.n	34124 <__swsetup_r+0x70>
   34112:	0023      	movs	r3, r4
   34114:	3344      	adds	r3, #68	; 0x44
   34116:	4299      	cmp	r1, r3
   34118:	d002      	beq.n	34120 <__swsetup_r+0x6c>
   3411a:	0030      	movs	r0, r6
   3411c:	f7ff fc78 	bl	33a10 <_free_r>
   34120:	2300      	movs	r3, #0
   34122:	6363      	str	r3, [r4, #52]	; 0x34
   34124:	2224      	movs	r2, #36	; 0x24
   34126:	89a3      	ldrh	r3, [r4, #12]
   34128:	4393      	bics	r3, r2
   3412a:	81a3      	strh	r3, [r4, #12]
   3412c:	2300      	movs	r3, #0
   3412e:	6063      	str	r3, [r4, #4]
   34130:	6923      	ldr	r3, [r4, #16]
   34132:	6023      	str	r3, [r4, #0]
   34134:	2308      	movs	r3, #8
   34136:	89a2      	ldrh	r2, [r4, #12]
   34138:	4313      	orrs	r3, r2
   3413a:	81a3      	strh	r3, [r4, #12]
   3413c:	6923      	ldr	r3, [r4, #16]
   3413e:	2b00      	cmp	r3, #0
   34140:	d10b      	bne.n	3415a <__swsetup_r+0xa6>
   34142:	21a0      	movs	r1, #160	; 0xa0
   34144:	2280      	movs	r2, #128	; 0x80
   34146:	89a3      	ldrh	r3, [r4, #12]
   34148:	0089      	lsls	r1, r1, #2
   3414a:	0092      	lsls	r2, r2, #2
   3414c:	400b      	ands	r3, r1
   3414e:	4293      	cmp	r3, r2
   34150:	d003      	beq.n	3415a <__swsetup_r+0xa6>
   34152:	0021      	movs	r1, r4
   34154:	0030      	movs	r0, r6
   34156:	f000 f9e9 	bl	3452c <__smakebuf_r>
   3415a:	2301      	movs	r3, #1
   3415c:	89a2      	ldrh	r2, [r4, #12]
   3415e:	4013      	ands	r3, r2
   34160:	d011      	beq.n	34186 <__swsetup_r+0xd2>
   34162:	2300      	movs	r3, #0
   34164:	60a3      	str	r3, [r4, #8]
   34166:	6963      	ldr	r3, [r4, #20]
   34168:	425b      	negs	r3, r3
   3416a:	61a3      	str	r3, [r4, #24]
   3416c:	2000      	movs	r0, #0
   3416e:	6923      	ldr	r3, [r4, #16]
   34170:	4283      	cmp	r3, r0
   34172:	d1be      	bne.n	340f2 <__swsetup_r+0x3e>
   34174:	230c      	movs	r3, #12
   34176:	5ee2      	ldrsh	r2, [r4, r3]
   34178:	0613      	lsls	r3, r2, #24
   3417a:	d5ba      	bpl.n	340f2 <__swsetup_r+0x3e>
   3417c:	2340      	movs	r3, #64	; 0x40
   3417e:	4313      	orrs	r3, r2
   34180:	81a3      	strh	r3, [r4, #12]
   34182:	3801      	subs	r0, #1
   34184:	e7b5      	b.n	340f2 <__swsetup_r+0x3e>
   34186:	0792      	lsls	r2, r2, #30
   34188:	d400      	bmi.n	3418c <__swsetup_r+0xd8>
   3418a:	6963      	ldr	r3, [r4, #20]
   3418c:	60a3      	str	r3, [r4, #8]
   3418e:	e7ed      	b.n	3416c <__swsetup_r+0xb8>
   34190:	200000d8 	.word	0x200000d8
   34194:	00038f4c 	.word	0x00038f4c
   34198:	00038f6c 	.word	0x00038f6c
   3419c:	00038f2c 	.word	0x00038f2c

000341a0 <__sflush_r>:
   341a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   341a2:	898a      	ldrh	r2, [r1, #12]
   341a4:	0005      	movs	r5, r0
   341a6:	000c      	movs	r4, r1
   341a8:	0713      	lsls	r3, r2, #28
   341aa:	d460      	bmi.n	3426e <__sflush_r+0xce>
   341ac:	684b      	ldr	r3, [r1, #4]
   341ae:	2b00      	cmp	r3, #0
   341b0:	dc04      	bgt.n	341bc <__sflush_r+0x1c>
   341b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   341b4:	2b00      	cmp	r3, #0
   341b6:	dc01      	bgt.n	341bc <__sflush_r+0x1c>
   341b8:	2000      	movs	r0, #0
   341ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   341bc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   341be:	2f00      	cmp	r7, #0
   341c0:	d0fa      	beq.n	341b8 <__sflush_r+0x18>
   341c2:	2300      	movs	r3, #0
   341c4:	682e      	ldr	r6, [r5, #0]
   341c6:	602b      	str	r3, [r5, #0]
   341c8:	2380      	movs	r3, #128	; 0x80
   341ca:	015b      	lsls	r3, r3, #5
   341cc:	401a      	ands	r2, r3
   341ce:	d034      	beq.n	3423a <__sflush_r+0x9a>
   341d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   341d2:	89a3      	ldrh	r3, [r4, #12]
   341d4:	075b      	lsls	r3, r3, #29
   341d6:	d506      	bpl.n	341e6 <__sflush_r+0x46>
   341d8:	6863      	ldr	r3, [r4, #4]
   341da:	1ac0      	subs	r0, r0, r3
   341dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   341de:	2b00      	cmp	r3, #0
   341e0:	d001      	beq.n	341e6 <__sflush_r+0x46>
   341e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   341e4:	1ac0      	subs	r0, r0, r3
   341e6:	0002      	movs	r2, r0
   341e8:	6a21      	ldr	r1, [r4, #32]
   341ea:	2300      	movs	r3, #0
   341ec:	0028      	movs	r0, r5
   341ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   341f0:	47b8      	blx	r7
   341f2:	89a1      	ldrh	r1, [r4, #12]
   341f4:	1c43      	adds	r3, r0, #1
   341f6:	d106      	bne.n	34206 <__sflush_r+0x66>
   341f8:	682b      	ldr	r3, [r5, #0]
   341fa:	2b1d      	cmp	r3, #29
   341fc:	d831      	bhi.n	34262 <__sflush_r+0xc2>
   341fe:	4a2c      	ldr	r2, [pc, #176]	; (342b0 <__sflush_r+0x110>)
   34200:	40da      	lsrs	r2, r3
   34202:	07d3      	lsls	r3, r2, #31
   34204:	d52d      	bpl.n	34262 <__sflush_r+0xc2>
   34206:	2300      	movs	r3, #0
   34208:	6063      	str	r3, [r4, #4]
   3420a:	6923      	ldr	r3, [r4, #16]
   3420c:	6023      	str	r3, [r4, #0]
   3420e:	04cb      	lsls	r3, r1, #19
   34210:	d505      	bpl.n	3421e <__sflush_r+0x7e>
   34212:	1c43      	adds	r3, r0, #1
   34214:	d102      	bne.n	3421c <__sflush_r+0x7c>
   34216:	682b      	ldr	r3, [r5, #0]
   34218:	2b00      	cmp	r3, #0
   3421a:	d100      	bne.n	3421e <__sflush_r+0x7e>
   3421c:	6560      	str	r0, [r4, #84]	; 0x54
   3421e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34220:	602e      	str	r6, [r5, #0]
   34222:	2900      	cmp	r1, #0
   34224:	d0c8      	beq.n	341b8 <__sflush_r+0x18>
   34226:	0023      	movs	r3, r4
   34228:	3344      	adds	r3, #68	; 0x44
   3422a:	4299      	cmp	r1, r3
   3422c:	d002      	beq.n	34234 <__sflush_r+0x94>
   3422e:	0028      	movs	r0, r5
   34230:	f7ff fbee 	bl	33a10 <_free_r>
   34234:	2000      	movs	r0, #0
   34236:	6360      	str	r0, [r4, #52]	; 0x34
   34238:	e7bf      	b.n	341ba <__sflush_r+0x1a>
   3423a:	2301      	movs	r3, #1
   3423c:	6a21      	ldr	r1, [r4, #32]
   3423e:	0028      	movs	r0, r5
   34240:	47b8      	blx	r7
   34242:	1c43      	adds	r3, r0, #1
   34244:	d1c5      	bne.n	341d2 <__sflush_r+0x32>
   34246:	682b      	ldr	r3, [r5, #0]
   34248:	2b00      	cmp	r3, #0
   3424a:	d0c2      	beq.n	341d2 <__sflush_r+0x32>
   3424c:	2b1d      	cmp	r3, #29
   3424e:	d001      	beq.n	34254 <__sflush_r+0xb4>
   34250:	2b16      	cmp	r3, #22
   34252:	d101      	bne.n	34258 <__sflush_r+0xb8>
   34254:	602e      	str	r6, [r5, #0]
   34256:	e7af      	b.n	341b8 <__sflush_r+0x18>
   34258:	2340      	movs	r3, #64	; 0x40
   3425a:	89a2      	ldrh	r2, [r4, #12]
   3425c:	4313      	orrs	r3, r2
   3425e:	81a3      	strh	r3, [r4, #12]
   34260:	e7ab      	b.n	341ba <__sflush_r+0x1a>
   34262:	2340      	movs	r3, #64	; 0x40
   34264:	430b      	orrs	r3, r1
   34266:	2001      	movs	r0, #1
   34268:	81a3      	strh	r3, [r4, #12]
   3426a:	4240      	negs	r0, r0
   3426c:	e7a5      	b.n	341ba <__sflush_r+0x1a>
   3426e:	690f      	ldr	r7, [r1, #16]
   34270:	2f00      	cmp	r7, #0
   34272:	d0a1      	beq.n	341b8 <__sflush_r+0x18>
   34274:	680b      	ldr	r3, [r1, #0]
   34276:	600f      	str	r7, [r1, #0]
   34278:	1bdb      	subs	r3, r3, r7
   3427a:	9301      	str	r3, [sp, #4]
   3427c:	2300      	movs	r3, #0
   3427e:	0792      	lsls	r2, r2, #30
   34280:	d100      	bne.n	34284 <__sflush_r+0xe4>
   34282:	694b      	ldr	r3, [r1, #20]
   34284:	60a3      	str	r3, [r4, #8]
   34286:	9b01      	ldr	r3, [sp, #4]
   34288:	2b00      	cmp	r3, #0
   3428a:	dc00      	bgt.n	3428e <__sflush_r+0xee>
   3428c:	e794      	b.n	341b8 <__sflush_r+0x18>
   3428e:	9b01      	ldr	r3, [sp, #4]
   34290:	003a      	movs	r2, r7
   34292:	6a21      	ldr	r1, [r4, #32]
   34294:	0028      	movs	r0, r5
   34296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   34298:	47b0      	blx	r6
   3429a:	2800      	cmp	r0, #0
   3429c:	dc03      	bgt.n	342a6 <__sflush_r+0x106>
   3429e:	2340      	movs	r3, #64	; 0x40
   342a0:	89a2      	ldrh	r2, [r4, #12]
   342a2:	4313      	orrs	r3, r2
   342a4:	e7df      	b.n	34266 <__sflush_r+0xc6>
   342a6:	9b01      	ldr	r3, [sp, #4]
   342a8:	183f      	adds	r7, r7, r0
   342aa:	1a1b      	subs	r3, r3, r0
   342ac:	9301      	str	r3, [sp, #4]
   342ae:	e7ea      	b.n	34286 <__sflush_r+0xe6>
   342b0:	20400001 	.word	0x20400001

000342b4 <_fflush_r>:
   342b4:	690b      	ldr	r3, [r1, #16]
   342b6:	b570      	push	{r4, r5, r6, lr}
   342b8:	0005      	movs	r5, r0
   342ba:	000c      	movs	r4, r1
   342bc:	2b00      	cmp	r3, #0
   342be:	d101      	bne.n	342c4 <_fflush_r+0x10>
   342c0:	2000      	movs	r0, #0
   342c2:	bd70      	pop	{r4, r5, r6, pc}
   342c4:	2800      	cmp	r0, #0
   342c6:	d004      	beq.n	342d2 <_fflush_r+0x1e>
   342c8:	6983      	ldr	r3, [r0, #24]
   342ca:	2b00      	cmp	r3, #0
   342cc:	d101      	bne.n	342d2 <_fflush_r+0x1e>
   342ce:	f000 f85f 	bl	34390 <__sinit>
   342d2:	4b0b      	ldr	r3, [pc, #44]	; (34300 <_fflush_r+0x4c>)
   342d4:	429c      	cmp	r4, r3
   342d6:	d109      	bne.n	342ec <_fflush_r+0x38>
   342d8:	686c      	ldr	r4, [r5, #4]
   342da:	220c      	movs	r2, #12
   342dc:	5ea3      	ldrsh	r3, [r4, r2]
   342de:	2b00      	cmp	r3, #0
   342e0:	d0ee      	beq.n	342c0 <_fflush_r+0xc>
   342e2:	0021      	movs	r1, r4
   342e4:	0028      	movs	r0, r5
   342e6:	f7ff ff5b 	bl	341a0 <__sflush_r>
   342ea:	e7ea      	b.n	342c2 <_fflush_r+0xe>
   342ec:	4b05      	ldr	r3, [pc, #20]	; (34304 <_fflush_r+0x50>)
   342ee:	429c      	cmp	r4, r3
   342f0:	d101      	bne.n	342f6 <_fflush_r+0x42>
   342f2:	68ac      	ldr	r4, [r5, #8]
   342f4:	e7f1      	b.n	342da <_fflush_r+0x26>
   342f6:	4b04      	ldr	r3, [pc, #16]	; (34308 <_fflush_r+0x54>)
   342f8:	429c      	cmp	r4, r3
   342fa:	d1ee      	bne.n	342da <_fflush_r+0x26>
   342fc:	68ec      	ldr	r4, [r5, #12]
   342fe:	e7ec      	b.n	342da <_fflush_r+0x26>
   34300:	00038f4c 	.word	0x00038f4c
   34304:	00038f6c 	.word	0x00038f6c
   34308:	00038f2c 	.word	0x00038f2c

0003430c <_cleanup_r>:
   3430c:	b510      	push	{r4, lr}
   3430e:	4902      	ldr	r1, [pc, #8]	; (34318 <_cleanup_r+0xc>)
   34310:	f000 f8b2 	bl	34478 <_fwalk_reent>
   34314:	bd10      	pop	{r4, pc}
   34316:	46c0      	nop			; (mov r8, r8)
   34318:	000342b5 	.word	0x000342b5

0003431c <std.isra.0>:
   3431c:	2300      	movs	r3, #0
   3431e:	b510      	push	{r4, lr}
   34320:	0004      	movs	r4, r0
   34322:	6003      	str	r3, [r0, #0]
   34324:	6043      	str	r3, [r0, #4]
   34326:	6083      	str	r3, [r0, #8]
   34328:	8181      	strh	r1, [r0, #12]
   3432a:	6643      	str	r3, [r0, #100]	; 0x64
   3432c:	81c2      	strh	r2, [r0, #14]
   3432e:	6103      	str	r3, [r0, #16]
   34330:	6143      	str	r3, [r0, #20]
   34332:	6183      	str	r3, [r0, #24]
   34334:	0019      	movs	r1, r3
   34336:	2208      	movs	r2, #8
   34338:	305c      	adds	r0, #92	; 0x5c
   3433a:	f7ff fb60 	bl	339fe <memset>
   3433e:	4b05      	ldr	r3, [pc, #20]	; (34354 <std.isra.0+0x38>)
   34340:	6224      	str	r4, [r4, #32]
   34342:	6263      	str	r3, [r4, #36]	; 0x24
   34344:	4b04      	ldr	r3, [pc, #16]	; (34358 <std.isra.0+0x3c>)
   34346:	62a3      	str	r3, [r4, #40]	; 0x28
   34348:	4b04      	ldr	r3, [pc, #16]	; (3435c <std.isra.0+0x40>)
   3434a:	62e3      	str	r3, [r4, #44]	; 0x2c
   3434c:	4b04      	ldr	r3, [pc, #16]	; (34360 <std.isra.0+0x44>)
   3434e:	6323      	str	r3, [r4, #48]	; 0x30
   34350:	bd10      	pop	{r4, pc}
   34352:	46c0      	nop			; (mov r8, r8)
   34354:	00034bb9 	.word	0x00034bb9
   34358:	00034be1 	.word	0x00034be1
   3435c:	00034c19 	.word	0x00034c19
   34360:	00034c45 	.word	0x00034c45

00034364 <__sfmoreglue>:
   34364:	b570      	push	{r4, r5, r6, lr}
   34366:	2568      	movs	r5, #104	; 0x68
   34368:	1e4a      	subs	r2, r1, #1
   3436a:	4355      	muls	r5, r2
   3436c:	000e      	movs	r6, r1
   3436e:	0029      	movs	r1, r5
   34370:	3174      	adds	r1, #116	; 0x74
   34372:	f7ff fb97 	bl	33aa4 <_malloc_r>
   34376:	1e04      	subs	r4, r0, #0
   34378:	d008      	beq.n	3438c <__sfmoreglue+0x28>
   3437a:	2100      	movs	r1, #0
   3437c:	002a      	movs	r2, r5
   3437e:	6001      	str	r1, [r0, #0]
   34380:	6046      	str	r6, [r0, #4]
   34382:	300c      	adds	r0, #12
   34384:	60a0      	str	r0, [r4, #8]
   34386:	3268      	adds	r2, #104	; 0x68
   34388:	f7ff fb39 	bl	339fe <memset>
   3438c:	0020      	movs	r0, r4
   3438e:	bd70      	pop	{r4, r5, r6, pc}

00034390 <__sinit>:
   34390:	6983      	ldr	r3, [r0, #24]
   34392:	b513      	push	{r0, r1, r4, lr}
   34394:	0004      	movs	r4, r0
   34396:	2b00      	cmp	r3, #0
   34398:	d128      	bne.n	343ec <__sinit+0x5c>
   3439a:	6483      	str	r3, [r0, #72]	; 0x48
   3439c:	64c3      	str	r3, [r0, #76]	; 0x4c
   3439e:	6503      	str	r3, [r0, #80]	; 0x50
   343a0:	4b13      	ldr	r3, [pc, #76]	; (343f0 <__sinit+0x60>)
   343a2:	4a14      	ldr	r2, [pc, #80]	; (343f4 <__sinit+0x64>)
   343a4:	681b      	ldr	r3, [r3, #0]
   343a6:	6282      	str	r2, [r0, #40]	; 0x28
   343a8:	9301      	str	r3, [sp, #4]
   343aa:	4298      	cmp	r0, r3
   343ac:	d101      	bne.n	343b2 <__sinit+0x22>
   343ae:	2301      	movs	r3, #1
   343b0:	6183      	str	r3, [r0, #24]
   343b2:	0020      	movs	r0, r4
   343b4:	f000 f820 	bl	343f8 <__sfp>
   343b8:	6060      	str	r0, [r4, #4]
   343ba:	0020      	movs	r0, r4
   343bc:	f000 f81c 	bl	343f8 <__sfp>
   343c0:	60a0      	str	r0, [r4, #8]
   343c2:	0020      	movs	r0, r4
   343c4:	f000 f818 	bl	343f8 <__sfp>
   343c8:	2200      	movs	r2, #0
   343ca:	60e0      	str	r0, [r4, #12]
   343cc:	2104      	movs	r1, #4
   343ce:	6860      	ldr	r0, [r4, #4]
   343d0:	f7ff ffa4 	bl	3431c <std.isra.0>
   343d4:	2201      	movs	r2, #1
   343d6:	2109      	movs	r1, #9
   343d8:	68a0      	ldr	r0, [r4, #8]
   343da:	f7ff ff9f 	bl	3431c <std.isra.0>
   343de:	2202      	movs	r2, #2
   343e0:	2112      	movs	r1, #18
   343e2:	68e0      	ldr	r0, [r4, #12]
   343e4:	f7ff ff9a 	bl	3431c <std.isra.0>
   343e8:	2301      	movs	r3, #1
   343ea:	61a3      	str	r3, [r4, #24]
   343ec:	bd13      	pop	{r0, r1, r4, pc}
   343ee:	46c0      	nop			; (mov r8, r8)
   343f0:	00038f28 	.word	0x00038f28
   343f4:	0003430d 	.word	0x0003430d

000343f8 <__sfp>:
   343f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   343fa:	4b1e      	ldr	r3, [pc, #120]	; (34474 <__sfp+0x7c>)
   343fc:	0007      	movs	r7, r0
   343fe:	681e      	ldr	r6, [r3, #0]
   34400:	69b3      	ldr	r3, [r6, #24]
   34402:	2b00      	cmp	r3, #0
   34404:	d102      	bne.n	3440c <__sfp+0x14>
   34406:	0030      	movs	r0, r6
   34408:	f7ff ffc2 	bl	34390 <__sinit>
   3440c:	3648      	adds	r6, #72	; 0x48
   3440e:	68b4      	ldr	r4, [r6, #8]
   34410:	6873      	ldr	r3, [r6, #4]
   34412:	3b01      	subs	r3, #1
   34414:	d504      	bpl.n	34420 <__sfp+0x28>
   34416:	6833      	ldr	r3, [r6, #0]
   34418:	2b00      	cmp	r3, #0
   3441a:	d007      	beq.n	3442c <__sfp+0x34>
   3441c:	6836      	ldr	r6, [r6, #0]
   3441e:	e7f6      	b.n	3440e <__sfp+0x16>
   34420:	220c      	movs	r2, #12
   34422:	5ea5      	ldrsh	r5, [r4, r2]
   34424:	2d00      	cmp	r5, #0
   34426:	d00d      	beq.n	34444 <__sfp+0x4c>
   34428:	3468      	adds	r4, #104	; 0x68
   3442a:	e7f2      	b.n	34412 <__sfp+0x1a>
   3442c:	2104      	movs	r1, #4
   3442e:	0038      	movs	r0, r7
   34430:	f7ff ff98 	bl	34364 <__sfmoreglue>
   34434:	6030      	str	r0, [r6, #0]
   34436:	2800      	cmp	r0, #0
   34438:	d1f0      	bne.n	3441c <__sfp+0x24>
   3443a:	230c      	movs	r3, #12
   3443c:	0004      	movs	r4, r0
   3443e:	603b      	str	r3, [r7, #0]
   34440:	0020      	movs	r0, r4
   34442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34444:	2301      	movs	r3, #1
   34446:	0020      	movs	r0, r4
   34448:	425b      	negs	r3, r3
   3444a:	81e3      	strh	r3, [r4, #14]
   3444c:	3302      	adds	r3, #2
   3444e:	81a3      	strh	r3, [r4, #12]
   34450:	6665      	str	r5, [r4, #100]	; 0x64
   34452:	6025      	str	r5, [r4, #0]
   34454:	60a5      	str	r5, [r4, #8]
   34456:	6065      	str	r5, [r4, #4]
   34458:	6125      	str	r5, [r4, #16]
   3445a:	6165      	str	r5, [r4, #20]
   3445c:	61a5      	str	r5, [r4, #24]
   3445e:	2208      	movs	r2, #8
   34460:	0029      	movs	r1, r5
   34462:	305c      	adds	r0, #92	; 0x5c
   34464:	f7ff facb 	bl	339fe <memset>
   34468:	6365      	str	r5, [r4, #52]	; 0x34
   3446a:	63a5      	str	r5, [r4, #56]	; 0x38
   3446c:	64a5      	str	r5, [r4, #72]	; 0x48
   3446e:	64e5      	str	r5, [r4, #76]	; 0x4c
   34470:	e7e6      	b.n	34440 <__sfp+0x48>
   34472:	46c0      	nop			; (mov r8, r8)
   34474:	00038f28 	.word	0x00038f28

00034478 <_fwalk_reent>:
   34478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3447a:	0004      	movs	r4, r0
   3447c:	0007      	movs	r7, r0
   3447e:	2600      	movs	r6, #0
   34480:	9101      	str	r1, [sp, #4]
   34482:	3448      	adds	r4, #72	; 0x48
   34484:	2c00      	cmp	r4, #0
   34486:	d101      	bne.n	3448c <_fwalk_reent+0x14>
   34488:	0030      	movs	r0, r6
   3448a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3448c:	6863      	ldr	r3, [r4, #4]
   3448e:	68a5      	ldr	r5, [r4, #8]
   34490:	9300      	str	r3, [sp, #0]
   34492:	9b00      	ldr	r3, [sp, #0]
   34494:	3b01      	subs	r3, #1
   34496:	9300      	str	r3, [sp, #0]
   34498:	d501      	bpl.n	3449e <_fwalk_reent+0x26>
   3449a:	6824      	ldr	r4, [r4, #0]
   3449c:	e7f2      	b.n	34484 <_fwalk_reent+0xc>
   3449e:	89ab      	ldrh	r3, [r5, #12]
   344a0:	2b01      	cmp	r3, #1
   344a2:	d908      	bls.n	344b6 <_fwalk_reent+0x3e>
   344a4:	220e      	movs	r2, #14
   344a6:	5eab      	ldrsh	r3, [r5, r2]
   344a8:	3301      	adds	r3, #1
   344aa:	d004      	beq.n	344b6 <_fwalk_reent+0x3e>
   344ac:	0029      	movs	r1, r5
   344ae:	0038      	movs	r0, r7
   344b0:	9b01      	ldr	r3, [sp, #4]
   344b2:	4798      	blx	r3
   344b4:	4306      	orrs	r6, r0
   344b6:	3568      	adds	r5, #104	; 0x68
   344b8:	e7eb      	b.n	34492 <_fwalk_reent+0x1a>

000344ba <__locale_ctype_ptr_l>:
   344ba:	30ec      	adds	r0, #236	; 0xec
   344bc:	6800      	ldr	r0, [r0, #0]
   344be:	4770      	bx	lr

000344c0 <__locale_ctype_ptr>:
   344c0:	4b04      	ldr	r3, [pc, #16]	; (344d4 <__locale_ctype_ptr+0x14>)
   344c2:	681b      	ldr	r3, [r3, #0]
   344c4:	6a1b      	ldr	r3, [r3, #32]
   344c6:	2b00      	cmp	r3, #0
   344c8:	d100      	bne.n	344cc <__locale_ctype_ptr+0xc>
   344ca:	4b03      	ldr	r3, [pc, #12]	; (344d8 <__locale_ctype_ptr+0x18>)
   344cc:	33ec      	adds	r3, #236	; 0xec
   344ce:	6818      	ldr	r0, [r3, #0]
   344d0:	4770      	bx	lr
   344d2:	46c0      	nop			; (mov r8, r8)
   344d4:	200000d8 	.word	0x200000d8
   344d8:	2000013c 	.word	0x2000013c

000344dc <__swhatbuf_r>:
   344dc:	b570      	push	{r4, r5, r6, lr}
   344de:	000e      	movs	r6, r1
   344e0:	001d      	movs	r5, r3
   344e2:	230e      	movs	r3, #14
   344e4:	5ec9      	ldrsh	r1, [r1, r3]
   344e6:	b090      	sub	sp, #64	; 0x40
   344e8:	0014      	movs	r4, r2
   344ea:	2900      	cmp	r1, #0
   344ec:	da07      	bge.n	344fe <__swhatbuf_r+0x22>
   344ee:	2300      	movs	r3, #0
   344f0:	602b      	str	r3, [r5, #0]
   344f2:	89b3      	ldrh	r3, [r6, #12]
   344f4:	061b      	lsls	r3, r3, #24
   344f6:	d411      	bmi.n	3451c <__swhatbuf_r+0x40>
   344f8:	2380      	movs	r3, #128	; 0x80
   344fa:	00db      	lsls	r3, r3, #3
   344fc:	e00f      	b.n	3451e <__swhatbuf_r+0x42>
   344fe:	aa01      	add	r2, sp, #4
   34500:	f000 fbe6 	bl	34cd0 <_fstat_r>
   34504:	2800      	cmp	r0, #0
   34506:	dbf2      	blt.n	344ee <__swhatbuf_r+0x12>
   34508:	22f0      	movs	r2, #240	; 0xf0
   3450a:	9b02      	ldr	r3, [sp, #8]
   3450c:	0212      	lsls	r2, r2, #8
   3450e:	4013      	ands	r3, r2
   34510:	4a05      	ldr	r2, [pc, #20]	; (34528 <__swhatbuf_r+0x4c>)
   34512:	189b      	adds	r3, r3, r2
   34514:	425a      	negs	r2, r3
   34516:	4153      	adcs	r3, r2
   34518:	602b      	str	r3, [r5, #0]
   3451a:	e7ed      	b.n	344f8 <__swhatbuf_r+0x1c>
   3451c:	2340      	movs	r3, #64	; 0x40
   3451e:	2000      	movs	r0, #0
   34520:	6023      	str	r3, [r4, #0]
   34522:	b010      	add	sp, #64	; 0x40
   34524:	bd70      	pop	{r4, r5, r6, pc}
   34526:	46c0      	nop			; (mov r8, r8)
   34528:	ffffe000 	.word	0xffffe000

0003452c <__smakebuf_r>:
   3452c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3452e:	2602      	movs	r6, #2
   34530:	898b      	ldrh	r3, [r1, #12]
   34532:	0005      	movs	r5, r0
   34534:	000c      	movs	r4, r1
   34536:	4233      	tst	r3, r6
   34538:	d006      	beq.n	34548 <__smakebuf_r+0x1c>
   3453a:	0023      	movs	r3, r4
   3453c:	3347      	adds	r3, #71	; 0x47
   3453e:	6023      	str	r3, [r4, #0]
   34540:	6123      	str	r3, [r4, #16]
   34542:	2301      	movs	r3, #1
   34544:	6163      	str	r3, [r4, #20]
   34546:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   34548:	ab01      	add	r3, sp, #4
   3454a:	466a      	mov	r2, sp
   3454c:	f7ff ffc6 	bl	344dc <__swhatbuf_r>
   34550:	9900      	ldr	r1, [sp, #0]
   34552:	0007      	movs	r7, r0
   34554:	0028      	movs	r0, r5
   34556:	f7ff faa5 	bl	33aa4 <_malloc_r>
   3455a:	2800      	cmp	r0, #0
   3455c:	d108      	bne.n	34570 <__smakebuf_r+0x44>
   3455e:	220c      	movs	r2, #12
   34560:	5ea3      	ldrsh	r3, [r4, r2]
   34562:	059a      	lsls	r2, r3, #22
   34564:	d4ef      	bmi.n	34546 <__smakebuf_r+0x1a>
   34566:	2203      	movs	r2, #3
   34568:	4393      	bics	r3, r2
   3456a:	431e      	orrs	r6, r3
   3456c:	81a6      	strh	r6, [r4, #12]
   3456e:	e7e4      	b.n	3453a <__smakebuf_r+0xe>
   34570:	4b0f      	ldr	r3, [pc, #60]	; (345b0 <__smakebuf_r+0x84>)
   34572:	62ab      	str	r3, [r5, #40]	; 0x28
   34574:	2380      	movs	r3, #128	; 0x80
   34576:	89a2      	ldrh	r2, [r4, #12]
   34578:	6020      	str	r0, [r4, #0]
   3457a:	4313      	orrs	r3, r2
   3457c:	81a3      	strh	r3, [r4, #12]
   3457e:	9b00      	ldr	r3, [sp, #0]
   34580:	6120      	str	r0, [r4, #16]
   34582:	6163      	str	r3, [r4, #20]
   34584:	9b01      	ldr	r3, [sp, #4]
   34586:	2b00      	cmp	r3, #0
   34588:	d00d      	beq.n	345a6 <__smakebuf_r+0x7a>
   3458a:	230e      	movs	r3, #14
   3458c:	5ee1      	ldrsh	r1, [r4, r3]
   3458e:	0028      	movs	r0, r5
   34590:	f000 fbb0 	bl	34cf4 <_isatty_r>
   34594:	2800      	cmp	r0, #0
   34596:	d006      	beq.n	345a6 <__smakebuf_r+0x7a>
   34598:	2203      	movs	r2, #3
   3459a:	89a3      	ldrh	r3, [r4, #12]
   3459c:	4393      	bics	r3, r2
   3459e:	001a      	movs	r2, r3
   345a0:	2301      	movs	r3, #1
   345a2:	4313      	orrs	r3, r2
   345a4:	81a3      	strh	r3, [r4, #12]
   345a6:	89a0      	ldrh	r0, [r4, #12]
   345a8:	4338      	orrs	r0, r7
   345aa:	81a0      	strh	r0, [r4, #12]
   345ac:	e7cb      	b.n	34546 <__smakebuf_r+0x1a>
   345ae:	46c0      	nop			; (mov r8, r8)
   345b0:	0003430d 	.word	0x0003430d

000345b4 <__ascii_mbtowc>:
   345b4:	b082      	sub	sp, #8
   345b6:	2900      	cmp	r1, #0
   345b8:	d100      	bne.n	345bc <__ascii_mbtowc+0x8>
   345ba:	a901      	add	r1, sp, #4
   345bc:	1e10      	subs	r0, r2, #0
   345be:	d006      	beq.n	345ce <__ascii_mbtowc+0x1a>
   345c0:	2b00      	cmp	r3, #0
   345c2:	d006      	beq.n	345d2 <__ascii_mbtowc+0x1e>
   345c4:	7813      	ldrb	r3, [r2, #0]
   345c6:	600b      	str	r3, [r1, #0]
   345c8:	7810      	ldrb	r0, [r2, #0]
   345ca:	1e43      	subs	r3, r0, #1
   345cc:	4198      	sbcs	r0, r3
   345ce:	b002      	add	sp, #8
   345d0:	4770      	bx	lr
   345d2:	2002      	movs	r0, #2
   345d4:	4240      	negs	r0, r0
   345d6:	e7fa      	b.n	345ce <__ascii_mbtowc+0x1a>

000345d8 <__malloc_lock>:
   345d8:	4770      	bx	lr

000345da <__malloc_unlock>:
   345da:	4770      	bx	lr

000345dc <__ssputs_r>:
   345dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   345de:	688e      	ldr	r6, [r1, #8]
   345e0:	b085      	sub	sp, #20
   345e2:	0007      	movs	r7, r0
   345e4:	000c      	movs	r4, r1
   345e6:	9203      	str	r2, [sp, #12]
   345e8:	9301      	str	r3, [sp, #4]
   345ea:	429e      	cmp	r6, r3
   345ec:	d839      	bhi.n	34662 <__ssputs_r+0x86>
   345ee:	2390      	movs	r3, #144	; 0x90
   345f0:	898a      	ldrh	r2, [r1, #12]
   345f2:	00db      	lsls	r3, r3, #3
   345f4:	421a      	tst	r2, r3
   345f6:	d034      	beq.n	34662 <__ssputs_r+0x86>
   345f8:	2503      	movs	r5, #3
   345fa:	6909      	ldr	r1, [r1, #16]
   345fc:	6823      	ldr	r3, [r4, #0]
   345fe:	1a5b      	subs	r3, r3, r1
   34600:	9302      	str	r3, [sp, #8]
   34602:	6963      	ldr	r3, [r4, #20]
   34604:	9802      	ldr	r0, [sp, #8]
   34606:	435d      	muls	r5, r3
   34608:	0feb      	lsrs	r3, r5, #31
   3460a:	195d      	adds	r5, r3, r5
   3460c:	9b01      	ldr	r3, [sp, #4]
   3460e:	106d      	asrs	r5, r5, #1
   34610:	3301      	adds	r3, #1
   34612:	181b      	adds	r3, r3, r0
   34614:	42ab      	cmp	r3, r5
   34616:	d900      	bls.n	3461a <__ssputs_r+0x3e>
   34618:	001d      	movs	r5, r3
   3461a:	0553      	lsls	r3, r2, #21
   3461c:	d532      	bpl.n	34684 <__ssputs_r+0xa8>
   3461e:	0029      	movs	r1, r5
   34620:	0038      	movs	r0, r7
   34622:	f7ff fa3f 	bl	33aa4 <_malloc_r>
   34626:	1e06      	subs	r6, r0, #0
   34628:	d109      	bne.n	3463e <__ssputs_r+0x62>
   3462a:	230c      	movs	r3, #12
   3462c:	603b      	str	r3, [r7, #0]
   3462e:	2340      	movs	r3, #64	; 0x40
   34630:	2001      	movs	r0, #1
   34632:	89a2      	ldrh	r2, [r4, #12]
   34634:	4240      	negs	r0, r0
   34636:	4313      	orrs	r3, r2
   34638:	81a3      	strh	r3, [r4, #12]
   3463a:	b005      	add	sp, #20
   3463c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3463e:	9a02      	ldr	r2, [sp, #8]
   34640:	6921      	ldr	r1, [r4, #16]
   34642:	f7ff f9c1 	bl	339c8 <memcpy>
   34646:	89a3      	ldrh	r3, [r4, #12]
   34648:	4a14      	ldr	r2, [pc, #80]	; (3469c <__ssputs_r+0xc0>)
   3464a:	401a      	ands	r2, r3
   3464c:	2380      	movs	r3, #128	; 0x80
   3464e:	4313      	orrs	r3, r2
   34650:	81a3      	strh	r3, [r4, #12]
   34652:	9b02      	ldr	r3, [sp, #8]
   34654:	6126      	str	r6, [r4, #16]
   34656:	18f6      	adds	r6, r6, r3
   34658:	6026      	str	r6, [r4, #0]
   3465a:	6165      	str	r5, [r4, #20]
   3465c:	9e01      	ldr	r6, [sp, #4]
   3465e:	1aed      	subs	r5, r5, r3
   34660:	60a5      	str	r5, [r4, #8]
   34662:	9b01      	ldr	r3, [sp, #4]
   34664:	42b3      	cmp	r3, r6
   34666:	d200      	bcs.n	3466a <__ssputs_r+0x8e>
   34668:	001e      	movs	r6, r3
   3466a:	0032      	movs	r2, r6
   3466c:	9903      	ldr	r1, [sp, #12]
   3466e:	6820      	ldr	r0, [r4, #0]
   34670:	f7ff f9b3 	bl	339da <memmove>
   34674:	68a3      	ldr	r3, [r4, #8]
   34676:	2000      	movs	r0, #0
   34678:	1b9b      	subs	r3, r3, r6
   3467a:	60a3      	str	r3, [r4, #8]
   3467c:	6823      	ldr	r3, [r4, #0]
   3467e:	199e      	adds	r6, r3, r6
   34680:	6026      	str	r6, [r4, #0]
   34682:	e7da      	b.n	3463a <__ssputs_r+0x5e>
   34684:	002a      	movs	r2, r5
   34686:	0038      	movs	r0, r7
   34688:	f000 fb65 	bl	34d56 <_realloc_r>
   3468c:	1e06      	subs	r6, r0, #0
   3468e:	d1e0      	bne.n	34652 <__ssputs_r+0x76>
   34690:	6921      	ldr	r1, [r4, #16]
   34692:	0038      	movs	r0, r7
   34694:	f7ff f9bc 	bl	33a10 <_free_r>
   34698:	e7c7      	b.n	3462a <__ssputs_r+0x4e>
   3469a:	46c0      	nop			; (mov r8, r8)
   3469c:	fffffb7f 	.word	0xfffffb7f

000346a0 <_svfiprintf_r>:
   346a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   346a2:	b09f      	sub	sp, #124	; 0x7c
   346a4:	9002      	str	r0, [sp, #8]
   346a6:	9305      	str	r3, [sp, #20]
   346a8:	898b      	ldrh	r3, [r1, #12]
   346aa:	000f      	movs	r7, r1
   346ac:	0016      	movs	r6, r2
   346ae:	061b      	lsls	r3, r3, #24
   346b0:	d511      	bpl.n	346d6 <_svfiprintf_r+0x36>
   346b2:	690b      	ldr	r3, [r1, #16]
   346b4:	2b00      	cmp	r3, #0
   346b6:	d10e      	bne.n	346d6 <_svfiprintf_r+0x36>
   346b8:	2140      	movs	r1, #64	; 0x40
   346ba:	f7ff f9f3 	bl	33aa4 <_malloc_r>
   346be:	6038      	str	r0, [r7, #0]
   346c0:	6138      	str	r0, [r7, #16]
   346c2:	2800      	cmp	r0, #0
   346c4:	d105      	bne.n	346d2 <_svfiprintf_r+0x32>
   346c6:	230c      	movs	r3, #12
   346c8:	9a02      	ldr	r2, [sp, #8]
   346ca:	3801      	subs	r0, #1
   346cc:	6013      	str	r3, [r2, #0]
   346ce:	b01f      	add	sp, #124	; 0x7c
   346d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   346d2:	2340      	movs	r3, #64	; 0x40
   346d4:	617b      	str	r3, [r7, #20]
   346d6:	2300      	movs	r3, #0
   346d8:	ad06      	add	r5, sp, #24
   346da:	616b      	str	r3, [r5, #20]
   346dc:	3320      	adds	r3, #32
   346de:	766b      	strb	r3, [r5, #25]
   346e0:	3310      	adds	r3, #16
   346e2:	76ab      	strb	r3, [r5, #26]
   346e4:	0034      	movs	r4, r6
   346e6:	7823      	ldrb	r3, [r4, #0]
   346e8:	2b00      	cmp	r3, #0
   346ea:	d147      	bne.n	3477c <_svfiprintf_r+0xdc>
   346ec:	1ba3      	subs	r3, r4, r6
   346ee:	9304      	str	r3, [sp, #16]
   346f0:	d00d      	beq.n	3470e <_svfiprintf_r+0x6e>
   346f2:	1ba3      	subs	r3, r4, r6
   346f4:	0032      	movs	r2, r6
   346f6:	0039      	movs	r1, r7
   346f8:	9802      	ldr	r0, [sp, #8]
   346fa:	f7ff ff6f 	bl	345dc <__ssputs_r>
   346fe:	1c43      	adds	r3, r0, #1
   34700:	d100      	bne.n	34704 <_svfiprintf_r+0x64>
   34702:	e0b5      	b.n	34870 <_svfiprintf_r+0x1d0>
   34704:	696a      	ldr	r2, [r5, #20]
   34706:	9b04      	ldr	r3, [sp, #16]
   34708:	4694      	mov	ip, r2
   3470a:	4463      	add	r3, ip
   3470c:	616b      	str	r3, [r5, #20]
   3470e:	7823      	ldrb	r3, [r4, #0]
   34710:	2b00      	cmp	r3, #0
   34712:	d100      	bne.n	34716 <_svfiprintf_r+0x76>
   34714:	e0ac      	b.n	34870 <_svfiprintf_r+0x1d0>
   34716:	2201      	movs	r2, #1
   34718:	2300      	movs	r3, #0
   3471a:	4252      	negs	r2, r2
   3471c:	606a      	str	r2, [r5, #4]
   3471e:	a902      	add	r1, sp, #8
   34720:	3254      	adds	r2, #84	; 0x54
   34722:	1852      	adds	r2, r2, r1
   34724:	3401      	adds	r4, #1
   34726:	602b      	str	r3, [r5, #0]
   34728:	60eb      	str	r3, [r5, #12]
   3472a:	60ab      	str	r3, [r5, #8]
   3472c:	7013      	strb	r3, [r2, #0]
   3472e:	65ab      	str	r3, [r5, #88]	; 0x58
   34730:	4e58      	ldr	r6, [pc, #352]	; (34894 <_svfiprintf_r+0x1f4>)
   34732:	2205      	movs	r2, #5
   34734:	7821      	ldrb	r1, [r4, #0]
   34736:	0030      	movs	r0, r6
   34738:	f000 fb02 	bl	34d40 <memchr>
   3473c:	1c62      	adds	r2, r4, #1
   3473e:	2800      	cmp	r0, #0
   34740:	d120      	bne.n	34784 <_svfiprintf_r+0xe4>
   34742:	6829      	ldr	r1, [r5, #0]
   34744:	06cb      	lsls	r3, r1, #27
   34746:	d504      	bpl.n	34752 <_svfiprintf_r+0xb2>
   34748:	2353      	movs	r3, #83	; 0x53
   3474a:	ae02      	add	r6, sp, #8
   3474c:	3020      	adds	r0, #32
   3474e:	199b      	adds	r3, r3, r6
   34750:	7018      	strb	r0, [r3, #0]
   34752:	070b      	lsls	r3, r1, #28
   34754:	d504      	bpl.n	34760 <_svfiprintf_r+0xc0>
   34756:	2353      	movs	r3, #83	; 0x53
   34758:	202b      	movs	r0, #43	; 0x2b
   3475a:	ae02      	add	r6, sp, #8
   3475c:	199b      	adds	r3, r3, r6
   3475e:	7018      	strb	r0, [r3, #0]
   34760:	7823      	ldrb	r3, [r4, #0]
   34762:	2b2a      	cmp	r3, #42	; 0x2a
   34764:	d016      	beq.n	34794 <_svfiprintf_r+0xf4>
   34766:	2000      	movs	r0, #0
   34768:	210a      	movs	r1, #10
   3476a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3476c:	7822      	ldrb	r2, [r4, #0]
   3476e:	3a30      	subs	r2, #48	; 0x30
   34770:	2a09      	cmp	r2, #9
   34772:	d955      	bls.n	34820 <_svfiprintf_r+0x180>
   34774:	2800      	cmp	r0, #0
   34776:	d015      	beq.n	347a4 <_svfiprintf_r+0x104>
   34778:	9309      	str	r3, [sp, #36]	; 0x24
   3477a:	e013      	b.n	347a4 <_svfiprintf_r+0x104>
   3477c:	2b25      	cmp	r3, #37	; 0x25
   3477e:	d0b5      	beq.n	346ec <_svfiprintf_r+0x4c>
   34780:	3401      	adds	r4, #1
   34782:	e7b0      	b.n	346e6 <_svfiprintf_r+0x46>
   34784:	2301      	movs	r3, #1
   34786:	1b80      	subs	r0, r0, r6
   34788:	4083      	lsls	r3, r0
   3478a:	6829      	ldr	r1, [r5, #0]
   3478c:	0014      	movs	r4, r2
   3478e:	430b      	orrs	r3, r1
   34790:	602b      	str	r3, [r5, #0]
   34792:	e7cd      	b.n	34730 <_svfiprintf_r+0x90>
   34794:	9b05      	ldr	r3, [sp, #20]
   34796:	1d18      	adds	r0, r3, #4
   34798:	681b      	ldr	r3, [r3, #0]
   3479a:	9005      	str	r0, [sp, #20]
   3479c:	2b00      	cmp	r3, #0
   3479e:	db39      	blt.n	34814 <_svfiprintf_r+0x174>
   347a0:	9309      	str	r3, [sp, #36]	; 0x24
   347a2:	0014      	movs	r4, r2
   347a4:	7823      	ldrb	r3, [r4, #0]
   347a6:	2b2e      	cmp	r3, #46	; 0x2e
   347a8:	d10b      	bne.n	347c2 <_svfiprintf_r+0x122>
   347aa:	7863      	ldrb	r3, [r4, #1]
   347ac:	1c62      	adds	r2, r4, #1
   347ae:	2b2a      	cmp	r3, #42	; 0x2a
   347b0:	d13e      	bne.n	34830 <_svfiprintf_r+0x190>
   347b2:	9b05      	ldr	r3, [sp, #20]
   347b4:	3402      	adds	r4, #2
   347b6:	1d1a      	adds	r2, r3, #4
   347b8:	681b      	ldr	r3, [r3, #0]
   347ba:	9205      	str	r2, [sp, #20]
   347bc:	2b00      	cmp	r3, #0
   347be:	db34      	blt.n	3482a <_svfiprintf_r+0x18a>
   347c0:	9307      	str	r3, [sp, #28]
   347c2:	4e35      	ldr	r6, [pc, #212]	; (34898 <_svfiprintf_r+0x1f8>)
   347c4:	7821      	ldrb	r1, [r4, #0]
   347c6:	2203      	movs	r2, #3
   347c8:	0030      	movs	r0, r6
   347ca:	f000 fab9 	bl	34d40 <memchr>
   347ce:	2800      	cmp	r0, #0
   347d0:	d006      	beq.n	347e0 <_svfiprintf_r+0x140>
   347d2:	2340      	movs	r3, #64	; 0x40
   347d4:	1b80      	subs	r0, r0, r6
   347d6:	4083      	lsls	r3, r0
   347d8:	682a      	ldr	r2, [r5, #0]
   347da:	3401      	adds	r4, #1
   347dc:	4313      	orrs	r3, r2
   347de:	602b      	str	r3, [r5, #0]
   347e0:	7821      	ldrb	r1, [r4, #0]
   347e2:	2206      	movs	r2, #6
   347e4:	482d      	ldr	r0, [pc, #180]	; (3489c <_svfiprintf_r+0x1fc>)
   347e6:	1c66      	adds	r6, r4, #1
   347e8:	7629      	strb	r1, [r5, #24]
   347ea:	f000 faa9 	bl	34d40 <memchr>
   347ee:	2800      	cmp	r0, #0
   347f0:	d046      	beq.n	34880 <_svfiprintf_r+0x1e0>
   347f2:	4b2b      	ldr	r3, [pc, #172]	; (348a0 <_svfiprintf_r+0x200>)
   347f4:	2b00      	cmp	r3, #0
   347f6:	d12f      	bne.n	34858 <_svfiprintf_r+0x1b8>
   347f8:	6829      	ldr	r1, [r5, #0]
   347fa:	9b05      	ldr	r3, [sp, #20]
   347fc:	2207      	movs	r2, #7
   347fe:	05c9      	lsls	r1, r1, #23
   34800:	d528      	bpl.n	34854 <_svfiprintf_r+0x1b4>
   34802:	189b      	adds	r3, r3, r2
   34804:	4393      	bics	r3, r2
   34806:	3308      	adds	r3, #8
   34808:	9305      	str	r3, [sp, #20]
   3480a:	696b      	ldr	r3, [r5, #20]
   3480c:	9a03      	ldr	r2, [sp, #12]
   3480e:	189b      	adds	r3, r3, r2
   34810:	616b      	str	r3, [r5, #20]
   34812:	e767      	b.n	346e4 <_svfiprintf_r+0x44>
   34814:	425b      	negs	r3, r3
   34816:	60eb      	str	r3, [r5, #12]
   34818:	2302      	movs	r3, #2
   3481a:	430b      	orrs	r3, r1
   3481c:	602b      	str	r3, [r5, #0]
   3481e:	e7c0      	b.n	347a2 <_svfiprintf_r+0x102>
   34820:	434b      	muls	r3, r1
   34822:	3401      	adds	r4, #1
   34824:	189b      	adds	r3, r3, r2
   34826:	2001      	movs	r0, #1
   34828:	e7a0      	b.n	3476c <_svfiprintf_r+0xcc>
   3482a:	2301      	movs	r3, #1
   3482c:	425b      	negs	r3, r3
   3482e:	e7c7      	b.n	347c0 <_svfiprintf_r+0x120>
   34830:	2300      	movs	r3, #0
   34832:	0014      	movs	r4, r2
   34834:	200a      	movs	r0, #10
   34836:	001a      	movs	r2, r3
   34838:	606b      	str	r3, [r5, #4]
   3483a:	7821      	ldrb	r1, [r4, #0]
   3483c:	3930      	subs	r1, #48	; 0x30
   3483e:	2909      	cmp	r1, #9
   34840:	d903      	bls.n	3484a <_svfiprintf_r+0x1aa>
   34842:	2b00      	cmp	r3, #0
   34844:	d0bd      	beq.n	347c2 <_svfiprintf_r+0x122>
   34846:	9207      	str	r2, [sp, #28]
   34848:	e7bb      	b.n	347c2 <_svfiprintf_r+0x122>
   3484a:	4342      	muls	r2, r0
   3484c:	3401      	adds	r4, #1
   3484e:	1852      	adds	r2, r2, r1
   34850:	2301      	movs	r3, #1
   34852:	e7f2      	b.n	3483a <_svfiprintf_r+0x19a>
   34854:	3307      	adds	r3, #7
   34856:	e7d5      	b.n	34804 <_svfiprintf_r+0x164>
   34858:	ab05      	add	r3, sp, #20
   3485a:	9300      	str	r3, [sp, #0]
   3485c:	003a      	movs	r2, r7
   3485e:	4b11      	ldr	r3, [pc, #68]	; (348a4 <_svfiprintf_r+0x204>)
   34860:	0029      	movs	r1, r5
   34862:	9802      	ldr	r0, [sp, #8]
   34864:	e000      	b.n	34868 <_svfiprintf_r+0x1c8>
   34866:	bf00      	nop
   34868:	9003      	str	r0, [sp, #12]
   3486a:	9b03      	ldr	r3, [sp, #12]
   3486c:	3301      	adds	r3, #1
   3486e:	d1cc      	bne.n	3480a <_svfiprintf_r+0x16a>
   34870:	89bb      	ldrh	r3, [r7, #12]
   34872:	980b      	ldr	r0, [sp, #44]	; 0x2c
   34874:	065b      	lsls	r3, r3, #25
   34876:	d400      	bmi.n	3487a <_svfiprintf_r+0x1da>
   34878:	e729      	b.n	346ce <_svfiprintf_r+0x2e>
   3487a:	2001      	movs	r0, #1
   3487c:	4240      	negs	r0, r0
   3487e:	e726      	b.n	346ce <_svfiprintf_r+0x2e>
   34880:	ab05      	add	r3, sp, #20
   34882:	9300      	str	r3, [sp, #0]
   34884:	003a      	movs	r2, r7
   34886:	4b07      	ldr	r3, [pc, #28]	; (348a4 <_svfiprintf_r+0x204>)
   34888:	0029      	movs	r1, r5
   3488a:	9802      	ldr	r0, [sp, #8]
   3488c:	f000 f87a 	bl	34984 <_printf_i>
   34890:	e7ea      	b.n	34868 <_svfiprintf_r+0x1c8>
   34892:	46c0      	nop			; (mov r8, r8)
   34894:	00038f96 	.word	0x00038f96
   34898:	00038f9c 	.word	0x00038f9c
   3489c:	00038fa0 	.word	0x00038fa0
   348a0:	00000000 	.word	0x00000000
   348a4:	000345dd 	.word	0x000345dd

000348a8 <_printf_common>:
   348a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   348aa:	0015      	movs	r5, r2
   348ac:	9301      	str	r3, [sp, #4]
   348ae:	688a      	ldr	r2, [r1, #8]
   348b0:	690b      	ldr	r3, [r1, #16]
   348b2:	9000      	str	r0, [sp, #0]
   348b4:	000c      	movs	r4, r1
   348b6:	4293      	cmp	r3, r2
   348b8:	da00      	bge.n	348bc <_printf_common+0x14>
   348ba:	0013      	movs	r3, r2
   348bc:	0022      	movs	r2, r4
   348be:	602b      	str	r3, [r5, #0]
   348c0:	3243      	adds	r2, #67	; 0x43
   348c2:	7812      	ldrb	r2, [r2, #0]
   348c4:	2a00      	cmp	r2, #0
   348c6:	d001      	beq.n	348cc <_printf_common+0x24>
   348c8:	3301      	adds	r3, #1
   348ca:	602b      	str	r3, [r5, #0]
   348cc:	6823      	ldr	r3, [r4, #0]
   348ce:	069b      	lsls	r3, r3, #26
   348d0:	d502      	bpl.n	348d8 <_printf_common+0x30>
   348d2:	682b      	ldr	r3, [r5, #0]
   348d4:	3302      	adds	r3, #2
   348d6:	602b      	str	r3, [r5, #0]
   348d8:	2706      	movs	r7, #6
   348da:	6823      	ldr	r3, [r4, #0]
   348dc:	401f      	ands	r7, r3
   348de:	d027      	beq.n	34930 <_printf_common+0x88>
   348e0:	0023      	movs	r3, r4
   348e2:	3343      	adds	r3, #67	; 0x43
   348e4:	781b      	ldrb	r3, [r3, #0]
   348e6:	1e5a      	subs	r2, r3, #1
   348e8:	4193      	sbcs	r3, r2
   348ea:	6822      	ldr	r2, [r4, #0]
   348ec:	0692      	lsls	r2, r2, #26
   348ee:	d430      	bmi.n	34952 <_printf_common+0xaa>
   348f0:	0022      	movs	r2, r4
   348f2:	9901      	ldr	r1, [sp, #4]
   348f4:	3243      	adds	r2, #67	; 0x43
   348f6:	9800      	ldr	r0, [sp, #0]
   348f8:	9e08      	ldr	r6, [sp, #32]
   348fa:	47b0      	blx	r6
   348fc:	1c43      	adds	r3, r0, #1
   348fe:	d025      	beq.n	3494c <_printf_common+0xa4>
   34900:	2306      	movs	r3, #6
   34902:	6820      	ldr	r0, [r4, #0]
   34904:	682a      	ldr	r2, [r5, #0]
   34906:	68e1      	ldr	r1, [r4, #12]
   34908:	4003      	ands	r3, r0
   3490a:	2500      	movs	r5, #0
   3490c:	2b04      	cmp	r3, #4
   3490e:	d103      	bne.n	34918 <_printf_common+0x70>
   34910:	1a8d      	subs	r5, r1, r2
   34912:	43eb      	mvns	r3, r5
   34914:	17db      	asrs	r3, r3, #31
   34916:	401d      	ands	r5, r3
   34918:	68a3      	ldr	r3, [r4, #8]
   3491a:	6922      	ldr	r2, [r4, #16]
   3491c:	4293      	cmp	r3, r2
   3491e:	dd01      	ble.n	34924 <_printf_common+0x7c>
   34920:	1a9b      	subs	r3, r3, r2
   34922:	18ed      	adds	r5, r5, r3
   34924:	2700      	movs	r7, #0
   34926:	42bd      	cmp	r5, r7
   34928:	d120      	bne.n	3496c <_printf_common+0xc4>
   3492a:	2000      	movs	r0, #0
   3492c:	e010      	b.n	34950 <_printf_common+0xa8>
   3492e:	3701      	adds	r7, #1
   34930:	68e3      	ldr	r3, [r4, #12]
   34932:	682a      	ldr	r2, [r5, #0]
   34934:	1a9b      	subs	r3, r3, r2
   34936:	429f      	cmp	r7, r3
   34938:	dad2      	bge.n	348e0 <_printf_common+0x38>
   3493a:	0022      	movs	r2, r4
   3493c:	2301      	movs	r3, #1
   3493e:	3219      	adds	r2, #25
   34940:	9901      	ldr	r1, [sp, #4]
   34942:	9800      	ldr	r0, [sp, #0]
   34944:	9e08      	ldr	r6, [sp, #32]
   34946:	47b0      	blx	r6
   34948:	1c43      	adds	r3, r0, #1
   3494a:	d1f0      	bne.n	3492e <_printf_common+0x86>
   3494c:	2001      	movs	r0, #1
   3494e:	4240      	negs	r0, r0
   34950:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34952:	2030      	movs	r0, #48	; 0x30
   34954:	18e1      	adds	r1, r4, r3
   34956:	3143      	adds	r1, #67	; 0x43
   34958:	7008      	strb	r0, [r1, #0]
   3495a:	0021      	movs	r1, r4
   3495c:	1c5a      	adds	r2, r3, #1
   3495e:	3145      	adds	r1, #69	; 0x45
   34960:	7809      	ldrb	r1, [r1, #0]
   34962:	18a2      	adds	r2, r4, r2
   34964:	3243      	adds	r2, #67	; 0x43
   34966:	3302      	adds	r3, #2
   34968:	7011      	strb	r1, [r2, #0]
   3496a:	e7c1      	b.n	348f0 <_printf_common+0x48>
   3496c:	0022      	movs	r2, r4
   3496e:	2301      	movs	r3, #1
   34970:	321a      	adds	r2, #26
   34972:	9901      	ldr	r1, [sp, #4]
   34974:	9800      	ldr	r0, [sp, #0]
   34976:	9e08      	ldr	r6, [sp, #32]
   34978:	47b0      	blx	r6
   3497a:	1c43      	adds	r3, r0, #1
   3497c:	d0e6      	beq.n	3494c <_printf_common+0xa4>
   3497e:	3701      	adds	r7, #1
   34980:	e7d1      	b.n	34926 <_printf_common+0x7e>
	...

00034984 <_printf_i>:
   34984:	b5f0      	push	{r4, r5, r6, r7, lr}
   34986:	b08b      	sub	sp, #44	; 0x2c
   34988:	9206      	str	r2, [sp, #24]
   3498a:	000a      	movs	r2, r1
   3498c:	3243      	adds	r2, #67	; 0x43
   3498e:	9307      	str	r3, [sp, #28]
   34990:	9005      	str	r0, [sp, #20]
   34992:	9204      	str	r2, [sp, #16]
   34994:	7e0a      	ldrb	r2, [r1, #24]
   34996:	000c      	movs	r4, r1
   34998:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3499a:	2a6e      	cmp	r2, #110	; 0x6e
   3499c:	d100      	bne.n	349a0 <_printf_i+0x1c>
   3499e:	e08f      	b.n	34ac0 <_printf_i+0x13c>
   349a0:	d817      	bhi.n	349d2 <_printf_i+0x4e>
   349a2:	2a63      	cmp	r2, #99	; 0x63
   349a4:	d02c      	beq.n	34a00 <_printf_i+0x7c>
   349a6:	d808      	bhi.n	349ba <_printf_i+0x36>
   349a8:	2a00      	cmp	r2, #0
   349aa:	d100      	bne.n	349ae <_printf_i+0x2a>
   349ac:	e099      	b.n	34ae2 <_printf_i+0x15e>
   349ae:	2a58      	cmp	r2, #88	; 0x58
   349b0:	d054      	beq.n	34a5c <_printf_i+0xd8>
   349b2:	0026      	movs	r6, r4
   349b4:	3642      	adds	r6, #66	; 0x42
   349b6:	7032      	strb	r2, [r6, #0]
   349b8:	e029      	b.n	34a0e <_printf_i+0x8a>
   349ba:	2a64      	cmp	r2, #100	; 0x64
   349bc:	d001      	beq.n	349c2 <_printf_i+0x3e>
   349be:	2a69      	cmp	r2, #105	; 0x69
   349c0:	d1f7      	bne.n	349b2 <_printf_i+0x2e>
   349c2:	6821      	ldr	r1, [r4, #0]
   349c4:	681a      	ldr	r2, [r3, #0]
   349c6:	0608      	lsls	r0, r1, #24
   349c8:	d523      	bpl.n	34a12 <_printf_i+0x8e>
   349ca:	1d11      	adds	r1, r2, #4
   349cc:	6019      	str	r1, [r3, #0]
   349ce:	6815      	ldr	r5, [r2, #0]
   349d0:	e025      	b.n	34a1e <_printf_i+0x9a>
   349d2:	2a73      	cmp	r2, #115	; 0x73
   349d4:	d100      	bne.n	349d8 <_printf_i+0x54>
   349d6:	e088      	b.n	34aea <_printf_i+0x166>
   349d8:	d808      	bhi.n	349ec <_printf_i+0x68>
   349da:	2a6f      	cmp	r2, #111	; 0x6f
   349dc:	d029      	beq.n	34a32 <_printf_i+0xae>
   349de:	2a70      	cmp	r2, #112	; 0x70
   349e0:	d1e7      	bne.n	349b2 <_printf_i+0x2e>
   349e2:	2220      	movs	r2, #32
   349e4:	6809      	ldr	r1, [r1, #0]
   349e6:	430a      	orrs	r2, r1
   349e8:	6022      	str	r2, [r4, #0]
   349ea:	e003      	b.n	349f4 <_printf_i+0x70>
   349ec:	2a75      	cmp	r2, #117	; 0x75
   349ee:	d020      	beq.n	34a32 <_printf_i+0xae>
   349f0:	2a78      	cmp	r2, #120	; 0x78
   349f2:	d1de      	bne.n	349b2 <_printf_i+0x2e>
   349f4:	0022      	movs	r2, r4
   349f6:	2178      	movs	r1, #120	; 0x78
   349f8:	3245      	adds	r2, #69	; 0x45
   349fa:	7011      	strb	r1, [r2, #0]
   349fc:	4a6c      	ldr	r2, [pc, #432]	; (34bb0 <_printf_i+0x22c>)
   349fe:	e030      	b.n	34a62 <_printf_i+0xde>
   34a00:	000e      	movs	r6, r1
   34a02:	681a      	ldr	r2, [r3, #0]
   34a04:	3642      	adds	r6, #66	; 0x42
   34a06:	1d11      	adds	r1, r2, #4
   34a08:	6019      	str	r1, [r3, #0]
   34a0a:	6813      	ldr	r3, [r2, #0]
   34a0c:	7033      	strb	r3, [r6, #0]
   34a0e:	2301      	movs	r3, #1
   34a10:	e079      	b.n	34b06 <_printf_i+0x182>
   34a12:	0649      	lsls	r1, r1, #25
   34a14:	d5d9      	bpl.n	349ca <_printf_i+0x46>
   34a16:	1d11      	adds	r1, r2, #4
   34a18:	6019      	str	r1, [r3, #0]
   34a1a:	2300      	movs	r3, #0
   34a1c:	5ed5      	ldrsh	r5, [r2, r3]
   34a1e:	2d00      	cmp	r5, #0
   34a20:	da03      	bge.n	34a2a <_printf_i+0xa6>
   34a22:	232d      	movs	r3, #45	; 0x2d
   34a24:	9a04      	ldr	r2, [sp, #16]
   34a26:	426d      	negs	r5, r5
   34a28:	7013      	strb	r3, [r2, #0]
   34a2a:	4b62      	ldr	r3, [pc, #392]	; (34bb4 <_printf_i+0x230>)
   34a2c:	270a      	movs	r7, #10
   34a2e:	9303      	str	r3, [sp, #12]
   34a30:	e02f      	b.n	34a92 <_printf_i+0x10e>
   34a32:	6820      	ldr	r0, [r4, #0]
   34a34:	6819      	ldr	r1, [r3, #0]
   34a36:	0605      	lsls	r5, r0, #24
   34a38:	d503      	bpl.n	34a42 <_printf_i+0xbe>
   34a3a:	1d08      	adds	r0, r1, #4
   34a3c:	6018      	str	r0, [r3, #0]
   34a3e:	680d      	ldr	r5, [r1, #0]
   34a40:	e005      	b.n	34a4e <_printf_i+0xca>
   34a42:	0640      	lsls	r0, r0, #25
   34a44:	d5f9      	bpl.n	34a3a <_printf_i+0xb6>
   34a46:	680d      	ldr	r5, [r1, #0]
   34a48:	1d08      	adds	r0, r1, #4
   34a4a:	6018      	str	r0, [r3, #0]
   34a4c:	b2ad      	uxth	r5, r5
   34a4e:	4b59      	ldr	r3, [pc, #356]	; (34bb4 <_printf_i+0x230>)
   34a50:	2708      	movs	r7, #8
   34a52:	9303      	str	r3, [sp, #12]
   34a54:	2a6f      	cmp	r2, #111	; 0x6f
   34a56:	d018      	beq.n	34a8a <_printf_i+0x106>
   34a58:	270a      	movs	r7, #10
   34a5a:	e016      	b.n	34a8a <_printf_i+0x106>
   34a5c:	3145      	adds	r1, #69	; 0x45
   34a5e:	700a      	strb	r2, [r1, #0]
   34a60:	4a54      	ldr	r2, [pc, #336]	; (34bb4 <_printf_i+0x230>)
   34a62:	9203      	str	r2, [sp, #12]
   34a64:	681a      	ldr	r2, [r3, #0]
   34a66:	6821      	ldr	r1, [r4, #0]
   34a68:	1d10      	adds	r0, r2, #4
   34a6a:	6018      	str	r0, [r3, #0]
   34a6c:	6815      	ldr	r5, [r2, #0]
   34a6e:	0608      	lsls	r0, r1, #24
   34a70:	d522      	bpl.n	34ab8 <_printf_i+0x134>
   34a72:	07cb      	lsls	r3, r1, #31
   34a74:	d502      	bpl.n	34a7c <_printf_i+0xf8>
   34a76:	2320      	movs	r3, #32
   34a78:	4319      	orrs	r1, r3
   34a7a:	6021      	str	r1, [r4, #0]
   34a7c:	2710      	movs	r7, #16
   34a7e:	2d00      	cmp	r5, #0
   34a80:	d103      	bne.n	34a8a <_printf_i+0x106>
   34a82:	2320      	movs	r3, #32
   34a84:	6822      	ldr	r2, [r4, #0]
   34a86:	439a      	bics	r2, r3
   34a88:	6022      	str	r2, [r4, #0]
   34a8a:	0023      	movs	r3, r4
   34a8c:	2200      	movs	r2, #0
   34a8e:	3343      	adds	r3, #67	; 0x43
   34a90:	701a      	strb	r2, [r3, #0]
   34a92:	6863      	ldr	r3, [r4, #4]
   34a94:	60a3      	str	r3, [r4, #8]
   34a96:	2b00      	cmp	r3, #0
   34a98:	db5c      	blt.n	34b54 <_printf_i+0x1d0>
   34a9a:	2204      	movs	r2, #4
   34a9c:	6821      	ldr	r1, [r4, #0]
   34a9e:	4391      	bics	r1, r2
   34aa0:	6021      	str	r1, [r4, #0]
   34aa2:	2d00      	cmp	r5, #0
   34aa4:	d158      	bne.n	34b58 <_printf_i+0x1d4>
   34aa6:	9e04      	ldr	r6, [sp, #16]
   34aa8:	2b00      	cmp	r3, #0
   34aaa:	d064      	beq.n	34b76 <_printf_i+0x1f2>
   34aac:	0026      	movs	r6, r4
   34aae:	9b03      	ldr	r3, [sp, #12]
   34ab0:	3642      	adds	r6, #66	; 0x42
   34ab2:	781b      	ldrb	r3, [r3, #0]
   34ab4:	7033      	strb	r3, [r6, #0]
   34ab6:	e05e      	b.n	34b76 <_printf_i+0x1f2>
   34ab8:	0648      	lsls	r0, r1, #25
   34aba:	d5da      	bpl.n	34a72 <_printf_i+0xee>
   34abc:	b2ad      	uxth	r5, r5
   34abe:	e7d8      	b.n	34a72 <_printf_i+0xee>
   34ac0:	6809      	ldr	r1, [r1, #0]
   34ac2:	681a      	ldr	r2, [r3, #0]
   34ac4:	0608      	lsls	r0, r1, #24
   34ac6:	d505      	bpl.n	34ad4 <_printf_i+0x150>
   34ac8:	1d11      	adds	r1, r2, #4
   34aca:	6019      	str	r1, [r3, #0]
   34acc:	6813      	ldr	r3, [r2, #0]
   34ace:	6962      	ldr	r2, [r4, #20]
   34ad0:	601a      	str	r2, [r3, #0]
   34ad2:	e006      	b.n	34ae2 <_printf_i+0x15e>
   34ad4:	0649      	lsls	r1, r1, #25
   34ad6:	d5f7      	bpl.n	34ac8 <_printf_i+0x144>
   34ad8:	1d11      	adds	r1, r2, #4
   34ada:	6019      	str	r1, [r3, #0]
   34adc:	6813      	ldr	r3, [r2, #0]
   34ade:	8aa2      	ldrh	r2, [r4, #20]
   34ae0:	801a      	strh	r2, [r3, #0]
   34ae2:	2300      	movs	r3, #0
   34ae4:	9e04      	ldr	r6, [sp, #16]
   34ae6:	6123      	str	r3, [r4, #16]
   34ae8:	e054      	b.n	34b94 <_printf_i+0x210>
   34aea:	681a      	ldr	r2, [r3, #0]
   34aec:	1d11      	adds	r1, r2, #4
   34aee:	6019      	str	r1, [r3, #0]
   34af0:	6816      	ldr	r6, [r2, #0]
   34af2:	2100      	movs	r1, #0
   34af4:	6862      	ldr	r2, [r4, #4]
   34af6:	0030      	movs	r0, r6
   34af8:	f000 f922 	bl	34d40 <memchr>
   34afc:	2800      	cmp	r0, #0
   34afe:	d001      	beq.n	34b04 <_printf_i+0x180>
   34b00:	1b80      	subs	r0, r0, r6
   34b02:	6060      	str	r0, [r4, #4]
   34b04:	6863      	ldr	r3, [r4, #4]
   34b06:	6123      	str	r3, [r4, #16]
   34b08:	2300      	movs	r3, #0
   34b0a:	9a04      	ldr	r2, [sp, #16]
   34b0c:	7013      	strb	r3, [r2, #0]
   34b0e:	e041      	b.n	34b94 <_printf_i+0x210>
   34b10:	6923      	ldr	r3, [r4, #16]
   34b12:	0032      	movs	r2, r6
   34b14:	9906      	ldr	r1, [sp, #24]
   34b16:	9805      	ldr	r0, [sp, #20]
   34b18:	9d07      	ldr	r5, [sp, #28]
   34b1a:	47a8      	blx	r5
   34b1c:	1c43      	adds	r3, r0, #1
   34b1e:	d043      	beq.n	34ba8 <_printf_i+0x224>
   34b20:	6823      	ldr	r3, [r4, #0]
   34b22:	2500      	movs	r5, #0
   34b24:	079b      	lsls	r3, r3, #30
   34b26:	d40f      	bmi.n	34b48 <_printf_i+0x1c4>
   34b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   34b2a:	68e0      	ldr	r0, [r4, #12]
   34b2c:	4298      	cmp	r0, r3
   34b2e:	da3d      	bge.n	34bac <_printf_i+0x228>
   34b30:	0018      	movs	r0, r3
   34b32:	e03b      	b.n	34bac <_printf_i+0x228>
   34b34:	0022      	movs	r2, r4
   34b36:	2301      	movs	r3, #1
   34b38:	3219      	adds	r2, #25
   34b3a:	9906      	ldr	r1, [sp, #24]
   34b3c:	9805      	ldr	r0, [sp, #20]
   34b3e:	9e07      	ldr	r6, [sp, #28]
   34b40:	47b0      	blx	r6
   34b42:	1c43      	adds	r3, r0, #1
   34b44:	d030      	beq.n	34ba8 <_printf_i+0x224>
   34b46:	3501      	adds	r5, #1
   34b48:	68e3      	ldr	r3, [r4, #12]
   34b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   34b4c:	1a9b      	subs	r3, r3, r2
   34b4e:	429d      	cmp	r5, r3
   34b50:	dbf0      	blt.n	34b34 <_printf_i+0x1b0>
   34b52:	e7e9      	b.n	34b28 <_printf_i+0x1a4>
   34b54:	2d00      	cmp	r5, #0
   34b56:	d0a9      	beq.n	34aac <_printf_i+0x128>
   34b58:	9e04      	ldr	r6, [sp, #16]
   34b5a:	0028      	movs	r0, r5
   34b5c:	0039      	movs	r1, r7
   34b5e:	f7fd f977 	bl	31e50 <__aeabi_uidivmod>
   34b62:	9b03      	ldr	r3, [sp, #12]
   34b64:	3e01      	subs	r6, #1
   34b66:	5c5b      	ldrb	r3, [r3, r1]
   34b68:	0028      	movs	r0, r5
   34b6a:	7033      	strb	r3, [r6, #0]
   34b6c:	0039      	movs	r1, r7
   34b6e:	f7fd f8e9 	bl	31d44 <__udivsi3>
   34b72:	1e05      	subs	r5, r0, #0
   34b74:	d1f1      	bne.n	34b5a <_printf_i+0x1d6>
   34b76:	2f08      	cmp	r7, #8
   34b78:	d109      	bne.n	34b8e <_printf_i+0x20a>
   34b7a:	6823      	ldr	r3, [r4, #0]
   34b7c:	07db      	lsls	r3, r3, #31
   34b7e:	d506      	bpl.n	34b8e <_printf_i+0x20a>
   34b80:	6863      	ldr	r3, [r4, #4]
   34b82:	6922      	ldr	r2, [r4, #16]
   34b84:	4293      	cmp	r3, r2
   34b86:	dc02      	bgt.n	34b8e <_printf_i+0x20a>
   34b88:	2330      	movs	r3, #48	; 0x30
   34b8a:	3e01      	subs	r6, #1
   34b8c:	7033      	strb	r3, [r6, #0]
   34b8e:	9b04      	ldr	r3, [sp, #16]
   34b90:	1b9b      	subs	r3, r3, r6
   34b92:	6123      	str	r3, [r4, #16]
   34b94:	9b07      	ldr	r3, [sp, #28]
   34b96:	aa09      	add	r2, sp, #36	; 0x24
   34b98:	9300      	str	r3, [sp, #0]
   34b9a:	0021      	movs	r1, r4
   34b9c:	9b06      	ldr	r3, [sp, #24]
   34b9e:	9805      	ldr	r0, [sp, #20]
   34ba0:	f7ff fe82 	bl	348a8 <_printf_common>
   34ba4:	1c43      	adds	r3, r0, #1
   34ba6:	d1b3      	bne.n	34b10 <_printf_i+0x18c>
   34ba8:	2001      	movs	r0, #1
   34baa:	4240      	negs	r0, r0
   34bac:	b00b      	add	sp, #44	; 0x2c
   34bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34bb0:	00038fb8 	.word	0x00038fb8
   34bb4:	00038fa7 	.word	0x00038fa7

00034bb8 <__sread>:
   34bb8:	b570      	push	{r4, r5, r6, lr}
   34bba:	000c      	movs	r4, r1
   34bbc:	250e      	movs	r5, #14
   34bbe:	5f49      	ldrsh	r1, [r1, r5]
   34bc0:	f000 f8f0 	bl	34da4 <_read_r>
   34bc4:	2800      	cmp	r0, #0
   34bc6:	db03      	blt.n	34bd0 <__sread+0x18>
   34bc8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   34bca:	181b      	adds	r3, r3, r0
   34bcc:	6563      	str	r3, [r4, #84]	; 0x54
   34bce:	bd70      	pop	{r4, r5, r6, pc}
   34bd0:	89a3      	ldrh	r3, [r4, #12]
   34bd2:	4a02      	ldr	r2, [pc, #8]	; (34bdc <__sread+0x24>)
   34bd4:	4013      	ands	r3, r2
   34bd6:	81a3      	strh	r3, [r4, #12]
   34bd8:	e7f9      	b.n	34bce <__sread+0x16>
   34bda:	46c0      	nop			; (mov r8, r8)
   34bdc:	ffffefff 	.word	0xffffefff

00034be0 <__swrite>:
   34be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34be2:	001f      	movs	r7, r3
   34be4:	898b      	ldrh	r3, [r1, #12]
   34be6:	0005      	movs	r5, r0
   34be8:	000c      	movs	r4, r1
   34bea:	0016      	movs	r6, r2
   34bec:	05db      	lsls	r3, r3, #23
   34bee:	d505      	bpl.n	34bfc <__swrite+0x1c>
   34bf0:	230e      	movs	r3, #14
   34bf2:	5ec9      	ldrsh	r1, [r1, r3]
   34bf4:	2200      	movs	r2, #0
   34bf6:	2302      	movs	r3, #2
   34bf8:	f000 f88e 	bl	34d18 <_lseek_r>
   34bfc:	89a3      	ldrh	r3, [r4, #12]
   34bfe:	4a05      	ldr	r2, [pc, #20]	; (34c14 <__swrite+0x34>)
   34c00:	0028      	movs	r0, r5
   34c02:	4013      	ands	r3, r2
   34c04:	81a3      	strh	r3, [r4, #12]
   34c06:	0032      	movs	r2, r6
   34c08:	230e      	movs	r3, #14
   34c0a:	5ee1      	ldrsh	r1, [r4, r3]
   34c0c:	003b      	movs	r3, r7
   34c0e:	f000 f839 	bl	34c84 <_write_r>
   34c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34c14:	ffffefff 	.word	0xffffefff

00034c18 <__sseek>:
   34c18:	b570      	push	{r4, r5, r6, lr}
   34c1a:	000c      	movs	r4, r1
   34c1c:	250e      	movs	r5, #14
   34c1e:	5f49      	ldrsh	r1, [r1, r5]
   34c20:	f000 f87a 	bl	34d18 <_lseek_r>
   34c24:	89a3      	ldrh	r3, [r4, #12]
   34c26:	1c42      	adds	r2, r0, #1
   34c28:	d103      	bne.n	34c32 <__sseek+0x1a>
   34c2a:	4a05      	ldr	r2, [pc, #20]	; (34c40 <__sseek+0x28>)
   34c2c:	4013      	ands	r3, r2
   34c2e:	81a3      	strh	r3, [r4, #12]
   34c30:	bd70      	pop	{r4, r5, r6, pc}
   34c32:	2280      	movs	r2, #128	; 0x80
   34c34:	0152      	lsls	r2, r2, #5
   34c36:	4313      	orrs	r3, r2
   34c38:	81a3      	strh	r3, [r4, #12]
   34c3a:	6560      	str	r0, [r4, #84]	; 0x54
   34c3c:	e7f8      	b.n	34c30 <__sseek+0x18>
   34c3e:	46c0      	nop			; (mov r8, r8)
   34c40:	ffffefff 	.word	0xffffefff

00034c44 <__sclose>:
   34c44:	b510      	push	{r4, lr}
   34c46:	230e      	movs	r3, #14
   34c48:	5ec9      	ldrsh	r1, [r1, r3]
   34c4a:	f000 f82f 	bl	34cac <_close_r>
   34c4e:	bd10      	pop	{r4, pc}

00034c50 <strchr>:
   34c50:	b2c9      	uxtb	r1, r1
   34c52:	7803      	ldrb	r3, [r0, #0]
   34c54:	2b00      	cmp	r3, #0
   34c56:	d004      	beq.n	34c62 <strchr+0x12>
   34c58:	4299      	cmp	r1, r3
   34c5a:	d100      	bne.n	34c5e <strchr+0xe>
   34c5c:	4770      	bx	lr
   34c5e:	3001      	adds	r0, #1
   34c60:	e7f7      	b.n	34c52 <strchr+0x2>
   34c62:	424b      	negs	r3, r1
   34c64:	4159      	adcs	r1, r3
   34c66:	4249      	negs	r1, r1
   34c68:	4008      	ands	r0, r1
   34c6a:	e7f7      	b.n	34c5c <strchr+0xc>

00034c6c <__ascii_wctomb>:
   34c6c:	1e0b      	subs	r3, r1, #0
   34c6e:	d004      	beq.n	34c7a <__ascii_wctomb+0xe>
   34c70:	2aff      	cmp	r2, #255	; 0xff
   34c72:	d904      	bls.n	34c7e <__ascii_wctomb+0x12>
   34c74:	238a      	movs	r3, #138	; 0x8a
   34c76:	6003      	str	r3, [r0, #0]
   34c78:	3b8b      	subs	r3, #139	; 0x8b
   34c7a:	0018      	movs	r0, r3
   34c7c:	4770      	bx	lr
   34c7e:	700a      	strb	r2, [r1, #0]
   34c80:	2301      	movs	r3, #1
   34c82:	e7fa      	b.n	34c7a <__ascii_wctomb+0xe>

00034c84 <_write_r>:
   34c84:	b570      	push	{r4, r5, r6, lr}
   34c86:	0005      	movs	r5, r0
   34c88:	0008      	movs	r0, r1
   34c8a:	0011      	movs	r1, r2
   34c8c:	2200      	movs	r2, #0
   34c8e:	4c06      	ldr	r4, [pc, #24]	; (34ca8 <_write_r+0x24>)
   34c90:	6022      	str	r2, [r4, #0]
   34c92:	001a      	movs	r2, r3
   34c94:	f7f5 fbfe 	bl	2a494 <_write>
   34c98:	1c43      	adds	r3, r0, #1
   34c9a:	d103      	bne.n	34ca4 <_write_r+0x20>
   34c9c:	6823      	ldr	r3, [r4, #0]
   34c9e:	2b00      	cmp	r3, #0
   34ca0:	d000      	beq.n	34ca4 <_write_r+0x20>
   34ca2:	602b      	str	r3, [r5, #0]
   34ca4:	bd70      	pop	{r4, r5, r6, pc}
   34ca6:	46c0      	nop			; (mov r8, r8)
   34ca8:	2000569c 	.word	0x2000569c

00034cac <_close_r>:
   34cac:	2300      	movs	r3, #0
   34cae:	b570      	push	{r4, r5, r6, lr}
   34cb0:	4c06      	ldr	r4, [pc, #24]	; (34ccc <_close_r+0x20>)
   34cb2:	0005      	movs	r5, r0
   34cb4:	0008      	movs	r0, r1
   34cb6:	6023      	str	r3, [r4, #0]
   34cb8:	f7f5 fc40 	bl	2a53c <_close>
   34cbc:	1c43      	adds	r3, r0, #1
   34cbe:	d103      	bne.n	34cc8 <_close_r+0x1c>
   34cc0:	6823      	ldr	r3, [r4, #0]
   34cc2:	2b00      	cmp	r3, #0
   34cc4:	d000      	beq.n	34cc8 <_close_r+0x1c>
   34cc6:	602b      	str	r3, [r5, #0]
   34cc8:	bd70      	pop	{r4, r5, r6, pc}
   34cca:	46c0      	nop			; (mov r8, r8)
   34ccc:	2000569c 	.word	0x2000569c

00034cd0 <_fstat_r>:
   34cd0:	2300      	movs	r3, #0
   34cd2:	b570      	push	{r4, r5, r6, lr}
   34cd4:	4c06      	ldr	r4, [pc, #24]	; (34cf0 <_fstat_r+0x20>)
   34cd6:	0005      	movs	r5, r0
   34cd8:	0008      	movs	r0, r1
   34cda:	0011      	movs	r1, r2
   34cdc:	6023      	str	r3, [r4, #0]
   34cde:	f7f5 fc37 	bl	2a550 <_fstat>
   34ce2:	1c43      	adds	r3, r0, #1
   34ce4:	d103      	bne.n	34cee <_fstat_r+0x1e>
   34ce6:	6823      	ldr	r3, [r4, #0]
   34ce8:	2b00      	cmp	r3, #0
   34cea:	d000      	beq.n	34cee <_fstat_r+0x1e>
   34cec:	602b      	str	r3, [r5, #0]
   34cee:	bd70      	pop	{r4, r5, r6, pc}
   34cf0:	2000569c 	.word	0x2000569c

00034cf4 <_isatty_r>:
   34cf4:	2300      	movs	r3, #0
   34cf6:	b570      	push	{r4, r5, r6, lr}
   34cf8:	4c06      	ldr	r4, [pc, #24]	; (34d14 <_isatty_r+0x20>)
   34cfa:	0005      	movs	r5, r0
   34cfc:	0008      	movs	r0, r1
   34cfe:	6023      	str	r3, [r4, #0]
   34d00:	f7f5 fc34 	bl	2a56c <_isatty>
   34d04:	1c43      	adds	r3, r0, #1
   34d06:	d103      	bne.n	34d10 <_isatty_r+0x1c>
   34d08:	6823      	ldr	r3, [r4, #0]
   34d0a:	2b00      	cmp	r3, #0
   34d0c:	d000      	beq.n	34d10 <_isatty_r+0x1c>
   34d0e:	602b      	str	r3, [r5, #0]
   34d10:	bd70      	pop	{r4, r5, r6, pc}
   34d12:	46c0      	nop			; (mov r8, r8)
   34d14:	2000569c 	.word	0x2000569c

00034d18 <_lseek_r>:
   34d18:	b570      	push	{r4, r5, r6, lr}
   34d1a:	0005      	movs	r5, r0
   34d1c:	0008      	movs	r0, r1
   34d1e:	0011      	movs	r1, r2
   34d20:	2200      	movs	r2, #0
   34d22:	4c06      	ldr	r4, [pc, #24]	; (34d3c <_lseek_r+0x24>)
   34d24:	6022      	str	r2, [r4, #0]
   34d26:	001a      	movs	r2, r3
   34d28:	f7f5 fc29 	bl	2a57e <_lseek>
   34d2c:	1c43      	adds	r3, r0, #1
   34d2e:	d103      	bne.n	34d38 <_lseek_r+0x20>
   34d30:	6823      	ldr	r3, [r4, #0]
   34d32:	2b00      	cmp	r3, #0
   34d34:	d000      	beq.n	34d38 <_lseek_r+0x20>
   34d36:	602b      	str	r3, [r5, #0]
   34d38:	bd70      	pop	{r4, r5, r6, pc}
   34d3a:	46c0      	nop			; (mov r8, r8)
   34d3c:	2000569c 	.word	0x2000569c

00034d40 <memchr>:
   34d40:	b2c9      	uxtb	r1, r1
   34d42:	1882      	adds	r2, r0, r2
   34d44:	4290      	cmp	r0, r2
   34d46:	d101      	bne.n	34d4c <memchr+0xc>
   34d48:	2000      	movs	r0, #0
   34d4a:	4770      	bx	lr
   34d4c:	7803      	ldrb	r3, [r0, #0]
   34d4e:	428b      	cmp	r3, r1
   34d50:	d0fb      	beq.n	34d4a <memchr+0xa>
   34d52:	3001      	adds	r0, #1
   34d54:	e7f6      	b.n	34d44 <memchr+0x4>

00034d56 <_realloc_r>:
   34d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34d58:	0007      	movs	r7, r0
   34d5a:	000d      	movs	r5, r1
   34d5c:	0016      	movs	r6, r2
   34d5e:	2900      	cmp	r1, #0
   34d60:	d105      	bne.n	34d6e <_realloc_r+0x18>
   34d62:	0011      	movs	r1, r2
   34d64:	f7fe fe9e 	bl	33aa4 <_malloc_r>
   34d68:	0004      	movs	r4, r0
   34d6a:	0020      	movs	r0, r4
   34d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34d6e:	2a00      	cmp	r2, #0
   34d70:	d103      	bne.n	34d7a <_realloc_r+0x24>
   34d72:	f7fe fe4d 	bl	33a10 <_free_r>
   34d76:	0034      	movs	r4, r6
   34d78:	e7f7      	b.n	34d6a <_realloc_r+0x14>
   34d7a:	f000 f827 	bl	34dcc <_malloc_usable_size_r>
   34d7e:	002c      	movs	r4, r5
   34d80:	4286      	cmp	r6, r0
   34d82:	d9f2      	bls.n	34d6a <_realloc_r+0x14>
   34d84:	0031      	movs	r1, r6
   34d86:	0038      	movs	r0, r7
   34d88:	f7fe fe8c 	bl	33aa4 <_malloc_r>
   34d8c:	1e04      	subs	r4, r0, #0
   34d8e:	d0ec      	beq.n	34d6a <_realloc_r+0x14>
   34d90:	0029      	movs	r1, r5
   34d92:	0032      	movs	r2, r6
   34d94:	f7fe fe18 	bl	339c8 <memcpy>
   34d98:	0029      	movs	r1, r5
   34d9a:	0038      	movs	r0, r7
   34d9c:	f7fe fe38 	bl	33a10 <_free_r>
   34da0:	e7e3      	b.n	34d6a <_realloc_r+0x14>
	...

00034da4 <_read_r>:
   34da4:	b570      	push	{r4, r5, r6, lr}
   34da6:	0005      	movs	r5, r0
   34da8:	0008      	movs	r0, r1
   34daa:	0011      	movs	r1, r2
   34dac:	2200      	movs	r2, #0
   34dae:	4c06      	ldr	r4, [pc, #24]	; (34dc8 <_read_r+0x24>)
   34db0:	6022      	str	r2, [r4, #0]
   34db2:	001a      	movs	r2, r3
   34db4:	f7f5 fb44 	bl	2a440 <_read>
   34db8:	1c43      	adds	r3, r0, #1
   34dba:	d103      	bne.n	34dc4 <_read_r+0x20>
   34dbc:	6823      	ldr	r3, [r4, #0]
   34dbe:	2b00      	cmp	r3, #0
   34dc0:	d000      	beq.n	34dc4 <_read_r+0x20>
   34dc2:	602b      	str	r3, [r5, #0]
   34dc4:	bd70      	pop	{r4, r5, r6, pc}
   34dc6:	46c0      	nop			; (mov r8, r8)
   34dc8:	2000569c 	.word	0x2000569c

00034dcc <_malloc_usable_size_r>:
   34dcc:	1f0b      	subs	r3, r1, #4
   34dce:	681b      	ldr	r3, [r3, #0]
   34dd0:	1f18      	subs	r0, r3, #4
   34dd2:	2b00      	cmp	r3, #0
   34dd4:	da01      	bge.n	34dda <_malloc_usable_size_r+0xe>
   34dd6:	580b      	ldr	r3, [r1, r0]
   34dd8:	18c0      	adds	r0, r0, r3
   34dda:	4770      	bx	lr
   34ddc:	65657246 	.word	0x65657246
   34de0:	534f5452 	.word	0x534f5452
   34de4:	494c4320 	.word	0x494c4320
   34de8:	540a0d2e 	.word	0x540a0d2e
   34dec:	20657079 	.word	0x20657079
   34df0:	706c6548 	.word	0x706c6548
   34df4:	206f7420 	.word	0x206f7420
   34df8:	77656976 	.word	0x77656976
   34dfc:	6c206120 	.word	0x6c206120
   34e00:	20747369 	.word	0x20747369
   34e04:	7220666f 	.word	0x7220666f
   34e08:	73696765 	.word	0x73696765
   34e0c:	65726574 	.word	0x65726574
   34e10:	6f632064 	.word	0x6f632064
   34e14:	6e616d6d 	.word	0x6e616d6d
   34e18:	0d2e7364 	.word	0x0d2e7364
   34e1c:	0000000a 	.word	0x0000000a
   34e20:	00007766 	.word	0x00007766
   34e24:	203a7766 	.word	0x203a7766
   34e28:	6e776f44 	.word	0x6e776f44
   34e2c:	64616f6c 	.word	0x64616f6c
   34e30:	66206120 	.word	0x66206120
   34e34:	20656c69 	.word	0x20656c69
   34e38:	20646e61 	.word	0x20646e61
   34e3c:	66726570 	.word	0x66726570
   34e40:	206d726f 	.word	0x206d726f
   34e44:	46206e61 	.word	0x46206e61
   34e48:	70752057 	.word	0x70752057
   34e4c:	65746164 	.word	0x65746164
   34e50:	00000a0d 	.word	0x00000a0d
   34e54:	65736572 	.word	0x65736572
   34e58:	00000074 	.word	0x00000074
   34e5c:	65736572 	.word	0x65736572
   34e60:	52203a74 	.word	0x52203a74
   34e64:	74657365 	.word	0x74657365
   34e68:	68742073 	.word	0x68742073
   34e6c:	65642065 	.word	0x65642065
   34e70:	65636976 	.word	0x65636976
   34e74:	00000a0d 	.word	0x00000a0d
   34e78:	0064656c 	.word	0x0064656c
   34e7c:	2064656c 	.word	0x2064656c
   34e80:	79656b5b 	.word	0x79656b5b
   34e84:	5d6d756e 	.word	0x5d6d756e
   34e88:	5b5d525b 	.word	0x5b5d525b
   34e8c:	425b5d47 	.word	0x425b5d47
   34e90:	53203a5d 	.word	0x53203a5d
   34e94:	20737465 	.word	0x20737465
   34e98:	20656874 	.word	0x20656874
   34e9c:	65766967 	.word	0x65766967
   34ea0:	454c206e 	.word	0x454c206e
   34ea4:	6f742044 	.word	0x6f742044
   34ea8:	65687420 	.word	0x65687420
   34eac:	76696720 	.word	0x76696720
   34eb0:	52206e65 	.word	0x52206e65
   34eb4:	422c472c 	.word	0x422c472c
   34eb8:	6c617620 	.word	0x6c617620
   34ebc:	2e736575 	.word	0x2e736575
   34ec0:	00000a0d 	.word	0x00000a0d
   34ec4:	62746567 	.word	0x62746567
   34ec8:	6f747475 	.word	0x6f747475
   34ecc:	0000006e 	.word	0x0000006e
   34ed0:	62746567 	.word	0x62746567
   34ed4:	6f747475 	.word	0x6f747475
   34ed8:	50203a6e 	.word	0x50203a6e
   34edc:	65636f72 	.word	0x65636f72
   34ee0:	73657373 	.word	0x73657373
   34ee4:	646e6120 	.word	0x646e6120
   34ee8:	69727020 	.word	0x69727020
   34eec:	2073746e 	.word	0x2073746e
   34ef0:	20656874 	.word	0x20656874
   34ef4:	4f464946 	.word	0x4f464946
   34ef8:	74756220 	.word	0x74756220
   34efc:	206e6f74 	.word	0x206e6f74
   34f00:	66667562 	.word	0x66667562
   34f04:	66207265 	.word	0x66207265
   34f08:	206d6f72 	.word	0x206d6f72
   34f0c:	20656874 	.word	0x20656874
   34f10:	73656573 	.word	0x73656573
   34f14:	0d2e7761 	.word	0x0d2e7761
   34f18:	0000000a 	.word	0x0000000a
   34f1c:	656d6167 	.word	0x656d6167
   34f20:	00000000 	.word	0x00000000
   34f24:	656d6167 	.word	0x656d6167
   34f28:	6553203a 	.word	0x6553203a
   34f2c:	2073646e 	.word	0x2073646e
   34f30:	6d6d7564 	.word	0x6d6d7564
   34f34:	61672079 	.word	0x61672079
   34f38:	6420656d 	.word	0x6420656d
   34f3c:	0d617461 	.word	0x0d617461
   34f40:	0000000a 	.word	0x0000000a
   34f44:	00736c63 	.word	0x00736c63
   34f48:	3a736c63 	.word	0x3a736c63
   34f4c:	656c4320 	.word	0x656c4320
   34f50:	20737261 	.word	0x20737261
   34f54:	20656874 	.word	0x20656874
   34f58:	6d726574 	.word	0x6d726574
   34f5c:	6c616e69 	.word	0x6c616e69
   34f60:	72637320 	.word	0x72637320
   34f64:	0d6e6565 	.word	0x0d6e6565
   34f68:	0000000a 	.word	0x0000000a
   34f6c:	00000a0d 	.word	0x00000a0d
   34f70:	0000616f 	.word	0x0000616f
   34f74:	325b6325 	.word	0x325b6325
   34f78:	003e0d4b 	.word	0x003e0d4b
   34f7c:	00082008 	.word	0x00082008
   34f80:	325b6325 	.word	0x325b6325
   34f84:	0000004a 	.word	0x0000004a
   34f88:	64757453 	.word	0x64757453
   34f8c:	73746e65 	.word	0x73746e65
   34f90:	206f7420 	.word	0x206f7420
   34f94:	6c6c6966 	.word	0x6c6c6966
   34f98:	74756f20 	.word	0x74756f20
   34f9c:	00000021 	.word	0x00000021
   34fa0:	74747542 	.word	0x74747542
   34fa4:	23206e6f 	.word	0x23206e6f
   34fa8:	69206425 	.word	0x69206425
   34fac:	65722073 	.word	0x65722073
   34fb0:	7361656c 	.word	0x7361656c
   34fb4:	0a0d6465 	.word	0x0a0d6465
   34fb8:	00000000 	.word	0x00000000
   34fbc:	74747542 	.word	0x74747542
   34fc0:	23206e6f 	.word	0x23206e6f
   34fc4:	69206425 	.word	0x69206425
   34fc8:	72702073 	.word	0x72702073
   34fcc:	65737365 	.word	0x65737365
   34fd0:	000a0d64 	.word	0x000a0d64
   34fd4:	6d6d7544 	.word	0x6d6d7544
   34fd8:	61472079 	.word	0x61472079
   34fdc:	4420656d 	.word	0x4420656d
   34fe0:	20617461 	.word	0x20617461
   34fe4:	5454514d 	.word	0x5454514d
   34fe8:	736f5020 	.word	0x736f5020
   34fec:	000a0d74 	.word	0x000a0d74

00034ff0 <xOTAUCommand>:
   34ff0:	00034e20 00034e24 00013dd5 00000000      N..$N...=......

00035000 <xResetCommand>:
   35000:	00034e54 00034e5c 00013df5 00000000     TN..\N...=......

00035010 <xNeotrellisTurnLEDCommand>:
   35010:	00034e78 00034e7c 00013e15 00000004     xN..|N...>......

00035020 <xNeotrellisProcessButtonCommand>:
   35020:	00034ec4 00034ed0 00013e41 00000000     .N...N..A>......

00035030 <xSendDummyGameData>:
   35030:	00034f1c 00034f24 00013f45 00000000     .O..$O..E?......

00035040 <xClearScreen>:
   35040:	00034f44 00034f48 00013d8d 00000000     DO..HO...=......
   35050:	35455345 2d203631 6e6f4320 6c6f7274     ESE516 - Control
   35060:	696e4920 6f432074 0a0d6564 00000000      Init Code......
   35070:	4f525245 6e492052 61697469 697a696c     ERROR Initializi
   35080:	4320676e 72746e6f 44206c6f 20617461     ng Control Data 
   35090:	75657571 0d217365 0000000a 746e6f43     queues!.....Cont
   350a0:	206c6f72 65726854 203a6461 736e6f43     rol Thread: Cons
   350b0:	64656d75 6d616720 61702065 74656b63     umed game packet
   350c0:	000a0d21 746e6f43 206c6f72 65726854     !...Control Thre
   350d0:	203a6461 6c756f43 6f6e2064 65732074     ad: Could not se
   350e0:	6720646e 20656d61 6b636170 0d217465     nd game packet!.
   350f0:	0000000a 54204955 206b7361 72617453     ....UI Task Star
   35100:	21646574 00000000                       ted!....

00035108 <main_mqtt_broker>:
   35108:	6b6f7262 682e7265 6d657669 6f632e71     broker.hivemq.co
   35118:	0000006d 64333025 00000000 72617473     m...%03d....star
   35128:	6f645f74 6f6c6e77 203a6461 20434d4d     t_download: MMC 
   35138:	726f7473 20656761 20746f6e 64616572     storage not read
   35148:	0a0d2e79 00000000 72617473 6f645f74     y.......start_do
   35158:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   35168:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   35178:	0000000a 72617473 6f645f74 6f6c6e77     ....start_downlo
   35188:	203a6461 75716572 20747365 73207369     ad: request is s
   35198:	20746e65 65726c61 2e796461 00000a0d     ent already.....
   351a8:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   351b8:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   351c8:	726c6120 79646165 000a0d2e 72617473      already....star
   351d8:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   351e8:	20676e69 50545448 71657220 74736575     ing HTTP request
   351f8:	0d2e2e2e 0000000a 70747468 2f2f3a73     ........https://
   35208:	2e777777 73616573 6570752e 652e6e6e     www.seas.upenn.e
   35218:	7e2f7564 696a7577 492f687a 622e546f     du/~wujizh/IoT.b
   35228:	00006e69 726f7473 69665f65 705f656c     in..store_file_p
   35238:	656b6361 65203a74 7974706d 74616420     acket: empty dat
   35248:	0a0d2e61 00000000 726f7473 69665f65     a.......store_fi
   35258:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   35268:	656d616e 20736920 61766e69 2e64696c     name is invalid.
   35278:	776f4420 616f6c6e 61632064 6c65636e      Download cancel
   35288:	0d2e6465 0000000a 726f7473 69665f65     ed......store_fi
   35298:	705f656c 656b6361 63203a74 74616572     le_packet: creat
   352a8:	20676e69 656c6966 73255b20 000a0d5d     ing file [%s]...
   352b8:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   352c8:	66203a74 20656c69 61657263 6e6f6974     t: file creation
   352d8:	72726520 2021726f 3a746572 0a0d6425      error! ret:%d..
   352e8:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   352f8:	656b6361 66203a74 20656c69 74697277     acket: file writ
   35308:	72652065 2c726f72 776f6420 616f6c6e     e error, downloa
   35318:	61632064 6c65636e 0d2e6465 0000000a     d canceled......
   35328:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   35338:	72203a74 69656365 5b646576 5d756c25     t: received[%lu]
   35348:	6966202c 7320656c 5b657a69 5d756c25     , file size[%lu]
   35358:	00000a0d 726f7473 69665f65 705f656c     ....store_file_p
   35368:	656b6361 66203a74 20656c69 6e776f64     acket: file down
   35378:	64616f6c 73206465 65636375 75667373     loaded successfu
   35388:	2e796c6c 00000a0d 70747468 696c635f     lly.....http_cli
   35398:	5f746e65 6c6c6163 6b636162 5448203a     ent_callback: HT
   353a8:	63205054 6e65696c 6f732074 74656b63     TP client socket
   353b8:	6e6f6320 7463656e 0d2e6465 0000000a      connected......
   353c8:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   353d8:	6b636162 6572203a 73657571 6f632074     back: request co
   353e8:	656c706d 2e646574 00000a0d 70747468     mpleted.....http
   353f8:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   35408:	6572203a 76696563 72206465 6f707365     : received respo
   35418:	2065736e 64207525 20617461 657a6973     nse %u data size
   35428:	0d752520 0000000a 70747468 696c635f      %u.....http_cli
   35438:	5f746e65 6c6c6163 6b636162 6964203a     ent_callback: di
   35448:	6e6f6373 7463656e 206e6f69 73616572     sconnection reas
   35458:	253a6e6f 000a0d64 6f736572 5f65766c     on:%d...resolve_
   35468:	203a6263 49207325 64612050 73657264     cb: %s IP addres
   35478:	73692073 2e642520 252e6425 64252e64     s is %d.%d.%d.%d
   35488:	0a0d0a0d 00000000 69666977 3a62635f     ........wifi_cb:
   35498:	4d324d20 4649575f 4f435f49 43454e4e      M2M_WIFI_CONNEC
   354a8:	0d444554 0000000a 69666977 3a62635f     TED.....wifi_cb:
   354b8:	4d324d20 4649575f 49445f49 4e4f4353      M2M_WIFI_DISCON
   354c8:	5443454e 0a0d4445 00000000 396a777a     NECTED......zwj9
   354d8:	32303137 72655630 6e6f7a69 00000000     71020Verizon....
   354e8:	6e6e654b 646e4179 6172694b 00000000     KennyAndKira....
   354f8:	69666977 3a62635f 20504920 72646461     wifi_cb: IP addr
   35508:	20737365 25207369 75252e75 2e75252e     ess is %u.%u.%u.
   35518:	0a0d7525 00000000 6f727245 6f632072     %u......Error co
   35528:	63656e6e 676e6974 206f7420 5454514d     nnecting to MQTT
   35538:	6f724220 2172656b 00000a0d 74696e69      Broker!....init
   35548:	6f74735f 65676172 6c70203a 65736165     _storage: please
   35558:	756c7020 6e612067 2f445320 20434d4d      plug an SD/MMC 
   35568:	64726163 206e6920 746f6c73 0d2e2e2e     card in slot....
   35578:	0000000a 74696e69 6f74735f 65676172     ....init_storage
   35588:	4453203a 72614320 6e692064 6c617473     : SD Card instal
   35598:	6166206c 64656c69 000a0d2e 74696e69     l failed....init
   355a8:	6f74735f 65676172 7274203a 6e752079     _storage: try un
   355b8:	67756c70 646e6120 2d657220 67756c70     plug and re-plug
   355c8:	65687420 72616320 0a0d2e64 00000000      the card.......
   355d8:	74696e69 6f74735f 65676172 6f6d203a     init_storage: mo
   355e8:	69746e75 5320676e 61632044 2e2e6472     unting SD card..
   355f8:	000a0d2e 74696e69 6f74735f 65676172     ....init_storage
   35608:	4453203a 72616320 6f6d2064 20746e75     : SD card mount 
   35618:	6c696166 20216465 73657228 29642520     failed! (res %d)
   35628:	00000a0d 74696e69 6f74735f 65676172     ....init_storage
   35638:	4453203a 72616320 6f6d2064 20746e75     : SD card mount 
   35648:	0d2e4b4f 0000000a 666e6f63 72756769     OK......configur
   35658:	74685f65 635f7074 6e65696c 48203a74     e_http_client: H
   35668:	20505454 65696c63 6920746e 6974696e     TTP client initi
   35678:	7a696c61 6f697461 6166206e 64656c69     alization failed
   35688:	72282021 25207365 0a0d2964 00000000     ! (res %d)......
   35698:	25200a0d 00732a2e 74617473 003a7375     .. %.*s.status:.
   356a8:	54530a0d 53555441 63655220 65766965     ..STATUS Receive
   356b8:	0a0d6425 00000000 65530a0d 7320746e     %d........Sent s
   356c8:	75746174 6f742073 6e6f6320 6c6f7274     tatus to control
   356d8:	000a0d21 6167227b 3a22656d 0000005b     !...{"game":[...
   356e8:	61470a0d 6d20656d 61737365 72206567     ..Game message r
   356f8:	69656365 21646576 00000a0d 732a2e25     eceived!....%.*s
   35708:	00000000 61500a0d 64657372 6d6f4320     ......Parsed Com
   35718:	646e616d 0000203a 002c6425 65530a0d     mand: ..%d,...Se
   35728:	7020746e 2079616c 63206f74 72746e6f     nt play to contr
   35738:	0d216c6f 0000000a 61470a0d 6d20656d     ol!.......Game m
   35748:	61737365 72206567 69656365 20646576     essage received 
   35758:	20747562 20746f6e 65646e75 6f747372     but not understo
   35768:	0d21646f 0000000a 203e3e20 00000000     od!..... >> ....
   35778:	4c5f3150 565f4445 6f646f6f 67614d6f     P1_LED_VoodooMag
   35788:	545f6369 00000030 736c6166 00000065     ic_T0...false...
   35798:	65757274 00000000 6f430a0d 63656e6e     true......Connec
   357a8:	676e6974 206f7420 6b6f7242 2e2e7265     ting to Broker..
   357b8:	0000002e 35455345 6f563631 6f6f646f     ....ESE516Voodoo
   357c8:	6967616d 00000063 646f6f76 616d6f6f     magic...voodooma
   357d8:	00636967 5454514d 72452020 20726f72     gic.MQTT  Error 
   357e8:	4f4e202d 6f432054 63656e6e 20646574     - NOT Connected 
   357f8:	62206f74 656b6f72 000a0d72 5454514d     to broker...MQTT
   35808:	6e6f4320 7463656e 74206465 7262206f      Connected to br
   35818:	72656b6f 00000a0d 6e6e6f43 20746365     oker....Connect 
   35828:	6c696166 206f7420 76726573 25287265     fail to server(%
   35838:	20212973 72746572 74692079 74756120     s)! retry it aut
   35848:	74616d6f 6c616369 0d2e796c 0000000a     omatically......
   35858:	475f3150 5f454d41 646f6f56 614d6f6f     P1_GAME_VoodooMa
   35868:	5f636967 00003054 535f3150 73757461     gic_T0..P1_Satus
   35878:	6f6f565f 4d6f6f64 63696761 0030545f     _VoodooMagic_T0.
   35888:	5454514d 6e6f4320 7463656e 0a0d6465     MQTT Connected..
   35898:	00000000 5454514d 6f726220 2072656b     ....MQTT broker 
   358a8:	6c636564 20656e69 72756f79 63636120     decline your acc
   358b8:	21737365 72726520 6320726f 2065646f     ess! error code 
   358c8:	0a0d6425 00000000 5454514d 73696420     %d......MQTT dis
   358d8:	6e6e6f63 65746365 000a0d64 5454514d     connected...MQTT
   358e8:	696e6920 6c616974 74617a69 206e6f69      initialization 
   358f8:	6c696166 202e6465 6f727245 6f632072     failed. Error co
   35908:	69206564 25282073 0a0d2964 00000000     de is (%d)......
   35918:	5454514d 67657220 65747369 61632072     MQTT register ca
   35928:	61626c6c 66206b63 656c6961 45202e64     llback failed. E
   35938:	726f7272 646f6320 73692065 64252820     rror code is (%d
   35948:	000a0d29 4941465b 72205d4c 25207365     )...[FAIL] res %
   35958:	000a0d64 61647055 742e6574 61207478     d...Update.txt a
   35968:	64656464 000a0d21 70553a30 65746164     dded!...0:Update
   35978:	7478742e 00000000 6e6e6f43 65746365     .txt....Connecte
   35988:	6f742064 54514d20 72422054 72656b6f     d to MQTT Broker
   35998:	000a0d21 00006425 00007d5d 00000a0d     !...%d..]}......
   359a8:	475f3250 5f454d41 646f6f56 614d6f6f     P2_GAME_VoodooMa
   359b8:	5f636967 00003054 4f525245 6e492052     gic_T0..ERROR In
   359c8:	61697469 697a696c 5720676e 20696669     itializing Wifi 
   359d8:	61746144 65757120 21736575 00000a0d     Data queues!....
   359e8:	35455345 2d203631 66695720 6e492069     ESE516 - Wifi In
   359f8:	43207469 0d65646f 0000000a 6e69616d     it Code.....main
   35a08:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   35a18:	6c6c6163 72726520 2021726f 73657228     call error! (res
   35a28:	29642520 00000a0d 6e69616d 6f63203a      %d)....main: co
   35a38:	63656e6e 676e6974 206f7420 69466957     nnecting to WiFi
   35a48:	20504120 2e2e7325 000a0d2e 00014c08      AP %s.......L..
   35a58:	00014c14 00014c26 00014c7c 00014c9c     .L..&L..|L...L..

00035a68 <msgBaseGetHWID>:
   35a68:	00000100                                ....

00035a6c <msgNeopixelPin>:
   35a6c:	0003010e                                ....

00035a70 <msgNeopixelSpeed>:
   35a70:	0001020e                                ....

00035a74 <msgNeopixelBufLength>:
   35a74:	3000030e                                ...0

00035a78 <msgKeypadEnableInt>:
   35a78:	00010210                                ....

00035a7c <msgKeypadGetCount>:
   35a7c:	00000410 6f727245 6e692072 61697469     ....Error initia
   35a8c:	697a696c 5320676e 61736565 722f2177     lizing Seesaw!/r
   35a9c:	00006e2f 6f727245 2f722f72 0000006e     /n..Error/r/n...
   35aac:	6e756f46 65532064 77617365 2f722f21     Found Seesaw!/r/
   35abc:	0000006e 6c756f43 6f6e2064 72772074     n...Could not wr
   35acc:	20657469 73656553 70207761 2f216e69     ite Seesaw pin!/
   35adc:	006e2f72 6c756f43 6f6e2064 65732074     r/n.Could not se
   35aec:	65732074 77617365 6f654e20 65786970     t seesaw Neopixe
   35afc:	7073206c 21646565 6e2f722f 00000000     l speed!/r/n....
   35b0c:	6c756f43 6f6e2064 65732074 65732074     Could not set se
   35b1c:	77617365 6f654e20 65786970 756e206c     esaw Neopixel nu
   35b2c:	7265626d 20666f20 69766564 2f736563     mber of devices/
   35b3c:	006e2f72 6f727245 65722072 6e696461     r/n.Error readin
   35b4c:	65532067 77617365 756f6320 2173746e     g Seesaw counts!
   35b5c:	6e2f722f 00000000 00001010 0000050e     /r/n............
   35b6c:	6c756f43 6f6e2064 6e692074 61697469     Could not initia
   35b7c:	657a696c 79654b20 21646170 6e2f722f     lize Keypad!/r/n
   35b8c:	00000000 706c6568 00000000 65680a0d     ....help......he
   35b9c:	0d3a706c 694c200a 20737473 206c6c61     lp:.. Lists all 
   35bac:	20656874 69676572 72657473 63206465     the registered c
   35bbc:	616d6d6f 0d73646e 000a0d0a 6f636e49     ommands.....Inco
   35bcc:	63657272 6f632074 6e616d6d 61702064     rrect command pa
   35bdc:	656d6172 28726574 202e2973 746e4520     rameter(s).  Ent
   35bec:	22207265 706c6568 6f742022 65697620     er "help" to vie
   35bfc:	20612077 7473696c 20666f20 69617661     w a list of avai
   35c0c:	6c62616c 6f632065 6e616d6d 0d2e7364     lable commands..
   35c1c:	000a0d0a 6d6d6f43 20646e61 20746f6e     ....Command not 
   35c2c:	6f636572 73696e67 202e6465 746e4520     recognised.  Ent
   35c3c:	27207265 706c6568 6f742027 65697620     er 'help' to vie
   35c4c:	20612077 7473696c 20666f20 69617661     w a list of avai
   35c5c:	6c62616c 6f632065 6e616d6d 0d2e7364     lable commands..
   35c6c:	000a0d0a                                ....

00035c70 <xHelpCommand>:
   35c70:	00035b90 00035b98 000173b5 00000000     .[...[...s......
   35c80:	61725476 6e456563 656c6261 43525428     vTraceEnable(TRC
   35c90:	4154535f 415f5452 54494157 534f485f     _START_AWAIT_HOS
   35ca0:	6e202954 6120746f 776f6c6c 69206465     T) not allowed i
   35cb0:	6e53206e 68737061 6d20746f 0065646f     n Snapshot mode.
   35cc0:	78656e55 74636570 61206465 6d756772     Unexpected argum
   35cd0:	20746e65 76206f74 63617254 616e4565     ent to vTraceEna
   35ce0:	20656c62 616e7328 6f687370 6f6d2074     ble (snapshot mo
   35cf0:	00296564 74437a54 00006c72 20746f4e     de).TzCtrl..Not 
   35d00:	756f6e65 54206867 204b5341 646e6168     enough TASK hand
   35d10:	2073656c 6e69202d 61657263 54206573     les - increase T
   35d20:	435f4352 4e5f4746 4b534154 206e6920     RC_CFG_NTASK in 
   35d30:	53637274 7370616e 43746f68 69666e6f     trcSnapshotConfi
   35d40:	00682e67 20746f4e 756f6e65 49206867     g.h.Not enough I
   35d50:	68205253 6c646e61 2d207365 636e6920     SR handles - inc
   35d60:	73616572 52542065 46435f43 494e5f47     rease TRC_CFG_NI
   35d70:	69205253 7274206e 616e5363 6f687370     SR in trcSnapsho
   35d80:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   35d90:	756f6e65 53206867 50414d45 45524f48     enough SEMAPHORE
   35da0:	6e616820 73656c64 69202d20 6572636e      handles - incre
   35db0:	20657361 5f435254 5f474643 4d45534e     ase TRC_CFG_NSEM
   35dc0:	4f485041 69204552 7274206e 616e5363     APHORE in trcSna
   35dd0:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   35de0:	20746f4e 756f6e65 4d206867 58455455     Not enough MUTEX
   35df0:	6e616820 73656c64 69202d20 6572636e      handles - incre
   35e00:	20657361 5f435254 5f474643 54554d4e     ase TRC_CFG_NMUT
   35e10:	69205845 7274206e 616e5363 6f687370     EX in trcSnapsho
   35e20:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   35e30:	756f6e65 51206867 45554555 6e616820     enough QUEUE han
   35e40:	73656c64 69202d20 6572636e 20657361     dles - increase 
   35e50:	5f435254 5f474643 4555514e 69204555     TRC_CFG_NQUEUE i
   35e60:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   35e70:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   35e80:	54206867 52454d49 6e616820 73656c64     gh TIMER handles
   35e90:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   35ea0:	5f474643 4d49544e 69205245 7274206e     CFG_NTIMER in tr
   35eb0:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   35ec0:	00000068 20746f4e 756f6e65 45206867     h...Not enough E
   35ed0:	544e4556 554f5247 61682050 656c646e     VENTGROUP handle
   35ee0:	202d2073 72636e69 65736165 43525420     s - increase TRC
   35ef0:	4746435f 56454e5f 47544e45 50554f52     _CFG_NEVENTGROUP
   35f00:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   35f10:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   35f20:	53206867 41455254 4655424d 20524546     gh STREAMBUFFER 
   35f30:	646e6168 2073656c 6e69202d 61657263     handles - increa
   35f40:	54206573 435f4352 4e5f4746 45525453     se TRC_CFG_NSTRE
   35f50:	55424d41 52454646 206e6920 53637274     AMBUFFER in trcS
   35f60:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   35f70:	20746f4e 756f6e65 4d206867 41535345     Not enough MESSA
   35f80:	55424547 52454646 6e616820 73656c64     GEBUFFER handles
   35f90:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   35fa0:	5f474643 53454d4e 45474153 46465542     CFG_NMESSAGEBUFF
   35fb0:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   35fc0:	6e6f4374 2e676966 00000068 547a7370     tConfig.h...pszT
   35fd0:	65636172 45746547 726f7272 646e6148     raceGetErrorHand
   35fe0:	3a73656c 766e4920 64696c61 6a626f20     les: Invalid obj
   35ff0:	63746365 7373616c 00000021 00017ada     ectclass!....z..
   36000:	00017ad2 00017ad6 00017aca 00017ace     .z...z...z...z..
   36010:	00017ade 00017ae2 00017ae6 00017aea     .z...z...z...z..
   36020:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   36030:	64726f63 6e207265 6920746f 6974696e     corder not initi
   36040:	7a696c61 202e6465 20657355 61725476     alized. Use vTra
   36050:	6e456563 656c6261 69202928 6574736e     ceEnable() inste
   36060:	00216461 61747328 70757472 00000029     ad!.(startup)...
   36070:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   36080:	64726f63 6e207265 6920746f 6974696e     corder not initi
   36090:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
   360a0:	45656361 6c62616e 20292865 73726966     aceEnable() firs
   360b0:	00002174 43415254 53415f45 54524553     t!..TRACE_ASSERT
   360c0:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   360d0:	7265706f 73656974 6e49203a 696c6176     operties: Invali
   360e0:	61762064 2065756c 20726f66 646e6168     d value for hand
   360f0:	0000656c 43415254 53415f45 54524553     le..TRACE_ASSERT
   36100:	5478203a 65636172 49746553 72505253     : xTraceSetISRPr
   36110:	7265706f 73656974 616e203a 3d20656d     operties: name =
   36120:	554e203d 00004c4c 61725476 74536563     = NULL..vTraceSt
   36130:	4965726f 65425253 206e6967 6572202d     oreISRBegin - re
   36140:	64726f63 62207265 21797375 65655320     corder busy! See
   36150:	646f6320 6f632065 6e656d6d 00002e74      code comment...
   36160:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   36170:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   36180:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   36190:	6c646e61 4e282065 294c4c55 00000000     andle (NULL)....
   361a0:	43415254 53415f45 54524553 5476203a     TRACE_ASSERT: vT
   361b0:	65636172 726f7453 52534965 69676542     raceStoreISRBegi
   361c0:	49203a6e 6c61766e 49206469 68205253     n: Invalid ISR h
   361d0:	6c646e61 3e282065 53494e20 00002952     andle (> NISR)..
   361e0:	206f6f54 796e616d 73656e20 20646574     Too many nested 
   361f0:	65746e69 70757272 00217374 61725476     interrupts!.vTra
   36200:	74536563 4965726f 6e455253 202d2064     ceStoreISREnd - 
   36210:	6f636572 72656472 73756220 53202179     recorder busy! S
   36220:	63206565 2065646f 6d6d6f63 2e746e65     ee code comment.
   36230:	00000000 616d6e55 65686374 61632064     ....Unmatched ca
   36240:	74206c6c 5476206f 65636172 726f7453     ll to vTraceStor
   36250:	52534965 20646e45 53496e28 74636152     eISREnd (nISRact
   36260:	20657669 30203d3d 7865202c 74636570     ive == 0, expect
   36270:	3e206465 00293020 43415254 53415f45     ed > 0).TRACE_AS
   36280:	54524553 7277203a 49657469 3a38746e     SERT: writeInt8:
   36290:	66756220 20726566 4e203d3d 004c4c55      buffer == NULL.
   362a0:	43415254 53415f45 54524553 7277203a     TRACE_ASSERT: wr
   362b0:	49657469 3631746e 7562203a 72656666     iteInt16: buffer
   362c0:	203d3d20 4c4c554e 00000000 43415254      == NULL....TRAC
   362d0:	53415f45 54524553 7277203a 49657469     E_ASSERT: writeI
   362e0:	3233746e 7562203a 72656666 203d3d20     nt32: buffer == 
   362f0:	4c4c554e 00000000 61725476 72506563     NULL....vTracePr
   36300:	46746e69 54202d20 6d206f6f 20796e61     intF - Too many 
   36310:	75677261 746e656d 6d202c73 31207861     arguments, max 1
   36320:	6c612035 65776f6c 00002164 61725476     5 allowed!..vTra
   36330:	72506563 46746e69 54202d20 6c206f6f     cePrintF - Too l
   36340:	65677261 67726120 6e656d75 202c7374     arge arguments, 
   36350:	2078616d 62203233 20657479 6f6c6c61     max 32 byte allo
   36360:	21646577 00000000 43415254 53415f45     wed!....TRACE_AS
   36370:	54524553 5476203a 65636172 69725056     SERT: vTraceVPri
   36380:	3a46746e 726f6620 5374616d 3d207274     ntF: formatStr =
   36390:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   363a0:	54524553 5478203a 65636172 69676552     SERT: xTraceRegi
   363b0:	72657473 69727453 203a676e 6562616c     sterString: labe
   363c0:	3d3d206c 4c554e20 0000004c 43415254     l == NULL...TRAC
   363d0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   363e0:	74536563 5465726f 526b7361 79646165     ceStoreTaskReady
   363f0:	6e49203a 696c6176 61762064 2065756c     : Invalid value 
   36400:	20726f66 646e6168 0000656c 6f636552     for handle..Reco
   36410:	72656472 73756220 202d2079 68676968     rder busy - high
   36420:	69727020 7469726f 53492079 73752052      priority ISR us
   36430:	20676e69 63737973 3f6c6c61 29312820     ing syscall? (1)
   36440:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   36450:	7270203a 61725476 74536563 4c65726f     : prvTraceStoreL
   36460:	6f50776f 3a726577 766e4920 64696c61     owPower: Invalid
   36470:	616c6620 61762067 0065756c 43415254      flag value.TRAC
   36480:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36490:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   364a0:	65203a6c 65646f63 203d3e20 46467830     l: ecode >= 0xFF
   364b0:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   364c0:	7270203a 61725476 74536563 4b65726f     : prvTraceStoreK
   364d0:	656e7265 6c61436c 6f203a6c 63656a62     ernelCall: objec
   364e0:	616c4374 3e207373 5254203d 5f454341     tClass >= TRACE_
   364f0:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   36500:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36510:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   36520:	49203a6c 6c61766e 76206469 65756c61     l: Invalid value
   36530:	726f6620 6a626f20 4e746365 65626d75      for objectNumbe
   36540:	00000072 6f636552 72656472 73756220     r...Recorder bus
   36550:	202d2079 68676968 69727020 7469726f     y - high priorit
   36560:	53492079 73752052 20676e69 63737973     y ISR using sysc
   36570:	3f6c6c61 29322820 00000000 43415254     all? (2)....TRAC
   36580:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36590:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   365a0:	7469576c 72615068 203a6d61 63747665     lWithParam: evtc
   365b0:	2065646f 30203d3e 00464678 43415254     ode >= 0xFF.TRAC
   365c0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   365d0:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   365e0:	7469576c 72615068 203a6d61 656a626f     lWithParam: obje
   365f0:	6c437463 20737361 54203d3e 45434152     ctClass >= TRACE
   36600:	4c434e5f 45535341 00000053 43415254     _NCLASSES...TRAC
   36610:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36620:	74536563 4b65726f 656e7265 6c61436c     ceStoreKernelCal
   36630:	7469576c 72615068 203a6d61 61766e49     lWithParam: Inva
   36640:	2064696c 756c6176 6f662065 626f2072     lid value for ob
   36650:	7463656a 626d754e 00007265 6f636552     jectNumber..Reco
   36660:	72656472 73756220 202d2079 68676968     rder busy - high
   36670:	69727020 7469726f 53492079 73752052      priority ISR us
   36680:	20676e69 63737973 3f6c6c61 29332820     ing syscall? (3)
   36690:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   366a0:	7270203a 61725476 65476563 72615074     : prvTraceGetPar
   366b0:	203a6d61 61766e49 2064696c 756c6176     am: Invalid valu
   366c0:	6f662065 61702072 5f6d6172 0078616d     e for param_max.
   366d0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   366e0:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   366f0:	6c61436c 7469576c 6d754e68 63697265     lCallWithNumeric
   36700:	61726150 6c6e4f6d 49203a79 6c61766e     ParamOnly: Inval
   36710:	76206469 65756c61 726f6620 74766520     id value for evt
   36720:	65646f63 00000000 6f636552 72656472     code....Recorder
   36730:	73756220 202d2079 68676968 69727020      busy - high pri
   36740:	7469726f 53492079 73752052 20676e69     ority ISR using 
   36750:	63737973 3f6c6c61 29342820 00000000     syscall? (4)....
   36760:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   36770:	61725476 74536563 5465726f 736b7361     vTraceStoreTasks
   36780:	63746977 49203a68 6c61766e 76206469     witch: Invalid v
   36790:	65756c61 726f6620 73617420 61685f6b     alue for task_ha
   367a0:	656c646e 00000000 43415254 53415f45     ndle....TRACE_AS
   367b0:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   367c0:	4f65726f 63656a62 6d614e74 436e4f65     oreObjectNameOnC
   367d0:	65736f6c 6e657645 6f203a74 63656a62     loseEvent: objec
   367e0:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   367f0:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   36800:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36810:	74536563 4f65726f 63656a62 6d614e74     ceStoreObjectNam
   36820:	436e4f65 65736f6c 6e657645 49203a74     eOnCloseEvent: I
   36830:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   36840:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
   36850:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   36860:	4f65726f 63656a62 6f725074 74726570     oreObjectPropert
   36870:	4f736569 6f6c436e 76456573 3a746e65     iesOnCloseEvent:
   36880:	6a626f20 63746365 7373616c 203d3e20      objectclass >= 
   36890:	43415254 434e5f45 5353414c 00005345     TRACE_NCLASSES..
   368a0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   368b0:	61725476 74536563 4f65726f 63656a62     vTraceStoreObjec
   368c0:	6f725074 74726570 4f736569 6f6c436e     tPropertiesOnClo
   368d0:	76456573 3a746e65 766e4920 64696c61     seEvent: Invalid
   368e0:	6c617620 66206575 6820726f 6c646e61      value for handl
   368f0:	00000065 43415254 53415f45 54524553     e...TRACE_ASSERT
   36900:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
   36910:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
   36920:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
   36930:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   36940:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   36950:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
   36960:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
   36970:	76206469 65756c61 726f6620 00646920     id value for id.
   36980:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   36990:	61725476 65476563 69725074 7469726f     vTraceGetPriorit
   369a0:	6f725079 74726570 6f203a79 63656a62     yProperty: objec
   369b0:	616c6374 3e207373 5254203d 5f454341     tclass >= TRACE_
   369c0:	414c434e 53455353 00000000 43415254     NCLASSES....TRAC
   369d0:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   369e0:	65476563 69725074 7469726f 6f725079     ceGetPriorityPro
   369f0:	74726570 49203a79 6c61766e 76206469     perty: Invalid v
   36a00:	65756c61 726f6620 00646920 43415254     alue for id.TRAC
   36a10:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36a20:	65536563 6a624f74 53746365 65746174     ceSetObjectState
   36a30:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   36a40:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   36a50:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   36a60:	61725476 65536563 6a624f74 53746365     vTraceSetObjectS
   36a70:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   36a80:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   36a90:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36aa0:	65476563 6a624f74 53746365 65746174     ceGetObjectState
   36ab0:	626f203a 7463656a 73616c63 3d3e2073     : objectclass >=
   36ac0:	41525420 4e5f4543 53414c43 00534553      TRACE_NCLASSES.
   36ad0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   36ae0:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
   36af0:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   36b00:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   36b10:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   36b20:	65536563 73615474 736e496b 636e6174     ceSetTaskInstanc
   36b30:	6e694665 65687369 49203a64 6c61766e     eFinished: Inval
   36b40:	76206469 65756c61 726f6620 6e616820     id value for han
   36b50:	00656c64 63617254 65522065 64726f63     dle.Trace Record
   36b60:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
   36b70:	69206f74 7865646e 74756f20 65646973     to index outside
   36b80:	65766520 6220746e 65666675 00002172      event buffer!..
   36b90:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   36ba0:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   36bb0:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   36bc0:	6a626f20 63746365 7373616c 00000000      objectclass....
   36bd0:	43415254 53415f45 54524553 6975203a     TRACE_ASSERT: ui
   36be0:	65646e49 4f664f78 63656a62 49203a74     IndexOfObject: I
   36bf0:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   36c00:	6a626f20 68746365 6c646e61 00000065      objecthandle...
   36c10:	656a624f 74207463 656c6261 6f6f6c20     Object table loo
   36c20:	2070756b 68746977 766e6920 64696c61     kup with invalid
   36c30:	6a626f20 20746365 646e6168 6f20656c      object handle o
   36c40:	626f2072 7463656a 616c6320 00217373     r object class!.
   36c50:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   36c60:	61725476 65476563 6a624f74 48746365     vTraceGetObjectH
   36c70:	6c646e61 49203a65 6c61766e 76206469     andle: Invalid v
   36c80:	65756c61 726f6620 6a626f20 63746365     alue for objectc
   36c90:	7373616c 00000000 43415254 53415f45     lass....TRACE_AS
   36ca0:	54524553 7270203a 61725476 72466563     SERT: prvTraceFr
   36cb0:	624f6565 7463656a 646e6148 203a656c     eeObjectHandle: 
   36cc0:	61766e49 2064696c 756c6176 6f662065     Invalid value fo
   36cd0:	626f2072 7463656a 73616c63 00000073     r objectclass...
   36ce0:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   36cf0:	61725476 72466563 624f6565 7463656a     vTraceFreeObject
   36d00:	646e6148 203a656c 61766e49 2064696c     Handle: Invalid 
   36d10:	756c6176 6f662065 61682072 656c646e     value for handle
   36d20:	00000000 65747441 2074706d 66206f74     ....Attempt to f
   36d30:	20656572 65726f6d 6e616820 73656c64     ree more handles
   36d40:	61687420 6c61206e 61636f6c 21646574      than allocated!
   36d50:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   36d60:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
   36d70:	4e746365 3a656d61 6d616e20 3d3d2065     ectName: name ==
   36d80:	4c554e20 0000004c 656c6c49 206c6167      NULL...Illegal 
   36d90:	656a626f 63207463 7373616c 206e6920     object class in 
   36da0:	54767270 65636172 4f746553 63656a62     prvTraceSetObjec
   36db0:	6d614e74 00000065 656c6c49 206c6167     tName...Illegal 
   36dc0:	646e6168 2820656c 69202930 7270206e     handle (0) in pr
   36dd0:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
   36de0:	2e656d61 00000000 43415254 53415f45     ame.....TRACE_AS
   36df0:	54524553 7270203a 61725476 704f6563     SERT: prvTraceOp
   36e00:	79536e65 6c6f626d 616e203a 3d20656d     enSymbol: name =
   36e10:	554e203d 00004c4c 43415254 53415f45     = NULL..TRACE_AS
   36e20:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
   36e30:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
   36e40:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
   36e50:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
   36e60:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
   36e70:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   36e80:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
   36e90:	696c6176 61762064 2065756c 20726f66     valid value for 
   36ea0:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
   36eb0:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
   36ec0:	206e6920 54767270 65636172 44746547      in prvTraceGetD
   36ed0:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
   36ee0:	7270203a 61725476 6f4c6563 70756b6f     : prvTraceLookup
   36ef0:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   36f00:	616e203a 3d20656d 554e203d 00004c4c     : name == NULL..
   36f10:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   36f20:	61725476 6f4c6563 70756b6f 626d7953     vTraceLookupSymb
   36f30:	61546c6f 45656c62 7972746e 656c203a     olTableEntry: le
   36f40:	3d3d206e 00003020 43415254 53415f45     n == 0..TRACE_AS
   36f50:	54524553 7270203a 61725476 72436563     SERT: prvTraceCr
   36f60:	65746165 626d7953 61546c6f 45656c62     eateSymbolTableE
   36f70:	7972746e 616e203a 3d20656d 554e203d     ntry: name == NU
   36f80:	00004c4c 43415254 53415f45 54524553     LL..TRACE_ASSERT
   36f90:	7270203a 61725476 72436563 65746165     : prvTraceCreate
   36fa0:	626d7953 61546c6f 45656c62 7972746e     SymbolTableEntry
   36fb0:	656c203a 3d3d206e 00003020 626d7953     : len == 0..Symb
   36fc0:	74206c6f 656c6261 6c756620 49202e6c     ol table full. I
   36fd0:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   36fe0:	424d5953 545f4c4f 454c4241 5a49535f     SYMBOL_TABLE_SIZ
   36ff0:	6e692045 63727420 666e6f43 682e6769     E in trcConfig.h
   37000:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   37010:	7270203a 61725476 65476563 65684374     : prvTraceGetChe
   37020:	75736b63 70203a6d 656d616e 203d3d20     cksum: pname == 
   37030:	4c4c554e 00000000 43415254 53415f45     NULL....TRACE_AS
   37040:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   37050:	65684374 75736b63 70203a6d 20637263     tChecksum: pcrc 
   37060:	4e203d3d 004c4c55 43415254 53415f45     == NULL.TRACE_AS
   37070:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   37080:	65684374 75736b63 70203a6d 676e656c     tChecksum: pleng
   37090:	3d206874 554e203d 00004c4c 454c4449     th == NULL..IDLE
   370a0:	00000000 20726d54 00637653 0001cb7c     ....Tmr Svc.|...
   370b0:	0001cb7c 0001cb7c 0001cc0a 0001cbd4     |...|...........
   370c0:	0001cbfe 0001cb7c 0001cb7c 0001cc0a     ....|...|.......
   370d0:	0001cbd4                                ....

000370d4 <sd_mmc_trans_units>:
   370d4:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

000370f0 <sd_trans_multipliers>:
   370f0:	00000000 0000000a 0000000c 0000000d     ................
   37100:	0000000f 00000014 00000019 0000001e     ................
   37110:	00000023 00000028 0000002d 00000032     #...(...-...2...
   37120:	00000037 0000003c 00000046 00000050     7...<...F...P...

00037130 <mmc_trans_multipliers>:
   37130:	00000000 0000000a 0000000c 0000000d     ................
   37140:	0000000f 00000014 0000001a 0000001e     ................
   37150:	00000023 00000028 0000002d 00000034     #...(...-...4...
   37160:	00000037 0000003c 00000046 00000050     7...<...F...P...
   37170:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   37180:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   37190:	6320746c 000a646d 0000000d              lt cmd......

0003719c <__FUNCTION__.17101>:
   3719c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   371ac:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   371bc:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   371cc:	0000000d 50504128 52452829 255b2952     ....(APP)(ERR)[%
   371dc:	255b5d73 00005d64 46494828 69614629     s][%d]..(HIF)Fai
   371ec:	6f74206c 6b617720 74207075 63206568     l to wakup the c
   371fc:	0a706968 00000000 66696828 49572029     hip.....(hif) WI
   3720c:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
   3721c:	6220315f 66207375 0a6c6961 00000000     _1 bus fail.....
   3722c:	66696828 64612029 73657264 75622073     (hif) address bu
   3723c:	61662073 000a6c69 66696828 6f432029     s fail..(hif) Co
   3724c:	70757272 20646574 6b636170 53207465     rrupted packet S
   3725c:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   3726c:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   3727c:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   3728c:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   3729c:	65747369 0a646572 00000000 6b6f6353     istered.....Scok
   372ac:	63207465 626c6c61 206b6361 6e207369     et callback is n
   372bc:	7220746f 73696765 65726574 00000a64     ot registered...
   372cc:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   372dc:	20746f6e 69676572 72657473 000a6465     not registered..
   372ec:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   372fc:	6e207369 7220746f 73696765 65726574     is not registere
   3730c:	00000a64 6d676953 61632061 61626c6c     d...Sigma callba
   3731c:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   3732c:	64657265 0000000a 66696828 6e692029     ered....(hif) in
   3733c:	696c6176 72672064 2070756f 000a4449     valid group ID..
   3734c:	66696828 6f682029 61207473 64207070     (hif) host app d
   3735c:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   3736c:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   3737c:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
   3738c:	66696828 61462029 2065736c 65746e69     (hif) False inte
   3739c:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   373ac:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   373bc:	7265746e 74707572 67657220 0000000a     nterrupt reg....
   373cc:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   373dc:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   373ec:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   373fc:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   3740c:	696c6176 72612064 656d7567 000a746e     valid argument..
   3741c:	20505041 75716552 65747365 69532064     APP Requested Si
   3742c:	6920657a 616c2073 72656772 61687420     ze is larger tha
   3743c:	6874206e 65722065 65766963 75622064     n the recived bu
   3744c:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   3745c:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   3746c:	65747365 64412064 73657264 65622073     ested Address be
   3747c:	646e6f79 65687420 63657220 64657669     yond the recived
   3748c:	66756220 20726566 72646461 20737365      buffer address 
   3749c:	20646e61 676e656c 000a6874 20705247     and length..GRp 
   374ac:	6425203f 0000000a 00020d14 00020ce4     ? %d............
   374bc:	00020cdc 00020cf4 00020cec 00020d0c     ................
   374cc:	00020cfc 00020d04                       ........

000374d4 <__FUNCTION__.17969>:
   374d4:	5f666968 646e6573 00000000              hif_send....

000374e0 <__FUNCTION__.17979>:
   374e0:	5f666968 00727369                       hif_isr.

000374e8 <__FUNCTION__.17988>:
   374e8:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

000374f8 <__FUNCTION__.18000>:
   374f8:	5f666968 65636572 00657669              hif_receive.

00037504 <__FUNCTION__.18016>:
   37504:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   37514:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   37524:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   37534:	75252e75 2075252e 000a2022 0000000d     u.%u.%u " ......
   37544:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   37554:	00005d64 20514552 20746f4e 69666564     d]..REQ Not defi
   37564:	2064656e 000a6425 41564e49 2044494c     ned %d..INVALID 
   37574:	4e494f50 0a524554 00000000 41564e49     POINTER.....INVA
   37584:	2044494c 44495353 0000000a 41564e49     LID SSID....INVA
   37594:	2044494c 000a4843 41564e49 2044494c     LID CH..INVALID 
   375a4:	50434844 52455320 20524556 000a5049     DHCP SERVER IP..
   375b4:	41564e49 2044494c 2059454b 45444e49     INVALID KEY INDE
   375c4:	00000a58 41564e49 2044494c 2059454b     X...INVALID KEY 
   375d4:	49525453 5320474e 0a455a49 00000000     STRING SIZE.....
   375e4:	41564e49 2044494c 2059454b 455a4953     INVALID KEY SIZE
   375f4:	0000000a 41564e49 2044494c 20415057     ....INVALID WPA 
   37604:	2059454b 455a4953 0000000a 41564e49     KEY SIZE....INVA
   37614:	2044494c 48545541 49544e45 49544143     LID AUTHENTICATI
   37624:	4d204e4f 0a45444f 00000000 41564e49     ON MODE.....INVA
   37634:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   37644:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   37654:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   37664:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   37674:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   37684:	73747365 72657020 61637320 6c73206e     ests per scan sl
   37694:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   376a4:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   376b4:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   376c4:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   376d4:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   376e4:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   376f4:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   37704:	6e694d20 69726420 20726576 20726576      Min driver ver 
   37714:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   37724:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   37734:	0000000a 303a3431 31333a30 00000000     ....14:00:31....
   37744:	20727041 32203432 00313230 76697244     Apr 24 2021.Driv
   37754:	62207265 746c6975 20746120 25097325     er built at %s.%
   37764:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   37774:	7277616d 65562065 6f697372 00000a6e     mawre Version...
   37784:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   37794:	0000000a 61766e49 2064696c 0a79654b     ....Invalid Key.
   377a4:	00000000 44495353 4e454c20 564e4920     ....SSID LEN INV
   377b4:	44494c41 0000000a 49204843 4c41564e     ALID....CH INVAL
   377c4:	000a4449 61766e49 2064696c 20706557     ID..Invalid Wep 
   377d4:	2079656b 65646e69 64252078 0000000a     key index %d....
   377e4:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   377f4:	676e656c 25206874 00000a64 6f636e49     length %d...Inco
   37804:	63657272 53502074 656b204b 656c2079     rrect PSK key le
   37814:	6874676e 0000000a 65646e75 656e6966     ngth....undefine
   37824:	65732064 79742063 000a6570 5f53505f     d sec type.._PS_
   37834:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
   37844:	6e696665 000a6465 7473694c 63206e65     efined..Listen c
   37854:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
   37864:	6220796c 324d2065 49575f4d 435f4946     ly be M2M_WIFI_C
   37874:	2f315f48 31312f36 00000a20 45574f50     H_1/6/11 ...POWE
   37884:	41532052 25204556 00000a64 41564e49     R SAVE %d...INVA
   37894:	2044494c 414d4f44 4e204e49 0a454d41     LID DOMAIN NAME.
   378a4:	00000000 474e5250 66754220 20726566     ....PRNG Buffer 
   378b4:	65637865 64656465 78616d20 6d756d69     exceeded maximum
   378c4:	7a697320 64252065 20726f20 4c4c554e      size %d or NULL
   378d4:	66754220 0a726566 00000000               Buffer.....

000378e0 <__FUNCTION__.17951>:
   378e0:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

000378ec <__FUNCTION__.17980>:
   378ec:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

000378fc <__FUNCTION__.18011>:
   378fc:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   3790c:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   3791c:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   3792c:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   3793c:	0000000d 6c696146 74206465 6177206f     ....Failed to wa
   3794c:	2070756b 20656874 70696863 0000000a     kup the chip....
   3795c:	50504128 4e492829 00294f46 76697244     (APP)(INFO).Driv
   3796c:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   3797c:	000a786c 6c696166 74206465 6564206f     lx..failed to de
   3798c:	696e692d 6c616974 0a657a69 00000000     -initialize.....

0003799c <__FUNCTION__.17808>:
   3799c:	70696863 6b61775f 00000065              chip_wake...

000379a8 <__FUNCTION__.17857>:
   379a8:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   379b8:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   379c8:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   379d8:	6e69206c 62207469 000a7375 0000000d     l init bus......
   379e8:	50504128 4e492829 00294f46 70696843     (APP)(INFO).Chip
   379f8:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
   37a08:	74206465 6e65206f 656c6261 746e6920     ed to enable int
   37a18:	75727265 2e737470 00000a2e 696d6e5b     errupts.....[nmi
   37a28:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
   37a38:	2074696e 6c696166 0000000a 696d6e5b     nit fail....[nmi
   37a48:	6f747320 203a5d70 20495053 73616c66      stop]: SPI flas
   37a58:	69642068 6c626173 61662065 000a6c69     h disable fail..
   37a68:	696d6e5b 6f747320 203a5d70 6c696166     [nmi stop]: fail
   37a78:	696e6920 75622074 00000a73               init bus...

00037a84 <__FUNCTION__.17855>:
   37a84:	645f6d6e 695f7672 0074696e              nm_drv_init.

00037a90 <__FUNCTION__.17862>:
   37a90:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00037aa0 <crc7_syndrome_table>:
   37aa0:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   37ab0:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   37ac0:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   37ad0:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   37ae0:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   37af0:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   37b00:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   37b10:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   37b20:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   37b30:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   37b40:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   37b50:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   37b60:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   37b70:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   37b80:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   37b90:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   37ba0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   37bb0:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   37bc0:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   37bd0:	73756220 72726520 2e2e726f 00000a2e      bus error......
   37be0:	0000000d 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   37bf0:	656c6961 75622064 72652073 2e726f72     ailed bus error.
   37c00:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   37c10:	656c6961 61642064 72206174 6f707365     ailed data respo
   37c20:	2065736e 64616572 7825202c 20782520     nse read, %x %x 
   37c30:	000a7825 696d6e5b 69707320 46203a5d     %x..[nmi spi]: F
   37c40:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   37c50:	72206573 2c646165 73756220 72726520     se read, bus err
   37c60:	2e2e726f 00000a2e 696d6e5b 69707320     or......[nmi spi
   37c70:	73203a5d 62206970 65666675 69732072     ]: spi buffer si
   37c80:	7420657a 73206f6f 6c6c616d 64252820     ze too small (%d
   37c90:	25282029 000a2964 696d6e5b 69707320     ) (%d)..[nmi spi
   37ca0:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   37cb0:	6e6f7073 202c6573 20646d63 32302528     sponse, cmd (%02
   37cc0:	202c2978 70736572 30252820 0a297832     x), resp (%02x).
   37cd0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   37ce0:	656c6961 6d632064 74732064 20657461     ailed cmd state 
   37cf0:	70736572 65736e6f 61747320 28206574     response state (
   37d00:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   37d10:	45203a5d 726f7272 6164202c 72206174     ]: Error, data r
   37d20:	20646165 70736572 65736e6f 30252820     ead response (%0
   37d30:	0a297832 00000000 696d6e5b 69707320     2x).....[nmi spi
   37d40:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   37d50:	6877206e 72206e65 69646165 6420676e     n when reading d
   37d60:	2e617461 0000000a 696d6e5b 69707320     ata.....[nmi spi
   37d70:	62203a5d 65666675 766f2072 75727265     ]: buffer overru
   37d80:	6877206e 72206e65 69646165 6320676e     n when reading c
   37d90:	0a2e6372 00000000 696d6e5b 69707320     rc......[nmi spi
   37da0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   37db0:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   37dc0:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   37dd0:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   37de0:	62206174 6b636f6c 63726320 61657220     ta block crc rea
   37df0:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   37e00:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   37e10:	656c6961 61642064 72206174 6f707365     ailed data respo
   37e20:	2065736e 64616572 7562202c 72652073     nse read, bus er
   37e30:	2e726f72 000a2e2e 696d6e5b 69707320     ror.....[nmi spi
   37e40:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   37e50:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   37e60:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   37e70:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   37e80:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   37e90:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   37ea0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   37eb0:	61642064 62206174 6b636f6c 69727720     d data block wri
   37ec0:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   37ed0:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   37ee0:	656c6961 61642064 62206174 6b636f6c     ailed data block
   37ef0:	63726320 69727720 202c6574 20737562      crc write, bus 
   37f00:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   37f10:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   37f20:	77202c64 65746972 67657220 30252820     d, write reg (%0
   37f30:	2e297838 000a2e2e 65736552 6e612074     8x).....Reset an
   37f40:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   37f50:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   37f60:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   37f70:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   37f80:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   37f90:	656c6961 6c622064 206b636f 61746164     ailed block data
   37fa0:	69727720 2e2e6574 00000a2e 65736552      write......Rese
   37fb0:	6e612074 65722064 20797274 25206425     t and retry %d %
   37fc0:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   37fd0:	46203a5d 656c6961 6d632064 72202c64     ]: Failed cmd, r
   37fe0:	20646165 20676572 38302528 2e2e2978     ead reg (%08x)..
   37ff0:	00000a2e 65736552 6e612074 65722064     ....Reset and re
   38000:	20797274 25206425 000a786c 696d6e5b     try %d %lx..[nmi
   38010:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   38020:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   38030:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
   38040:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   38050:	6e726574 72206c61 20646165 746f7270     ternal read prot
   38060:	6c6f636f 74697720 52432068 6e6f2043     ocol with CRC on
   38070:	6572202c 69727974 7720676e 20687469     , retyring with 
   38080:	20435243 2e66666f 000a2e2e 696d6e5b     CRC off.....[nmi
   38090:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   380a0:	6e726574 72206c61 20646165 746f7270     ternal read prot
   380b0:	6c6f636f 0a2e2e2e 00000000 696d6e5b     ocol........[nmi
   380c0:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   380d0:	6e726574 77206c61 65746972 6f727020     ternal write pro
   380e0:	6f636f74 6572206c 2e2e2e67 0000000a     tocol reg.......
   380f0:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   38100:	20646d63 64616572 69686320 64692070     cmd read chip id
   38110:	0a2e2e2e 00000000 0002293c 0002293c     ........<)..<)..
   38120:	000229cc 00022890 000228d6 000228f8     .)...(...(...(..
   38130:	0002297e 0002297e 00022a38 00022864     ~)..~)..8*..d(..
   38140:	00022a92 00022a92 00022a92 00022a92     .*...*...*...*..
   38150:	0002291a 00022e9c 00022e9c 00022f24     .)..........$/..
   38160:	00022e00 00022e42 00022e60 00022eda     ....B...`.......
   38170:	00022eda 00022f86 00022dd8 00022fd6     ...../...-.../..
   38180:	00022fd6 00022fd6 00022fd6 00022e7e     ./.../.../..~...

00038190 <__FUNCTION__.17130>:
   38190:	5f697073 00646d63                       spi_cmd.

00038198 <__FUNCTION__.17137>:
   38198:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

000381a8 <__FUNCTION__.17146>:
   381a8:	5f697073 5f646d63 00707372              spi_cmd_rsp.

000381b4 <__FUNCTION__.17179>:
   381b4:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   381c4:	00000000                                ....

000381c8 <__FUNCTION__.17225>:
   381c8:	5f697073 61746164 6972775f 00006574     spi_data_write..

000381d8 <__FUNCTION__.17237>:
   381d8:	5f697073 74697277 65725f65 00000067     spi_write_reg...

000381e8 <__FUNCTION__.17248>:
   381e8:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

000381f8 <__FUNCTION__.17260>:
   381f8:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00038208 <__FUNCTION__.17271>:
   38208:	735f6d6e 725f6970 00646165              nm_spi_read.

00038214 <__FUNCTION__.17292>:
   38214:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   38224:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   38234:	6e657272 253c2074 000a3e64 0000000d     rrent <%d>......
   38244:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   38254:	4449206e 25203d20 000a0d64 6b636f53     n ID = %d...Sock
   38264:	206f7420 656c6564 3c206574 0a3e6425      to delete <%d>.
   38274:	00000000 50504128 52452829 255b2952     ....(APP)(ERR)[%
   38284:	255b5d73 00005d64 20494e53 65637845     s][%d]..SNI Exce
   38294:	20736465 2078614d 676e654c 000a6874     eds Max Length..
   382a4:	6e6b6e55 206e776f 204c5353 6b636f53     Unknown SSL Sock
   382b4:	4f207465 6f697470 6425206e 0000000a     et Option %d....
   382c4:	20746f4e 204c5353 6b636f53 000a7465     Not SSL Socket..
   382d4:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
   382e4:	22302074 00000000                       t 0"....

000382ec <lun_desc>:
   382ec:	0001e599 0001e5f1 0001e63d 0001e689     ........=.......
   382fc:	0001e6b9 0001e73d 0001e7cd 000382d4     ....=...........
   3830c:	42000800 42000c00 42001000 42001400     ...B...B...B...B
   3831c:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
   3832c:	000288ba 00028934 00028934 000288d8     ....4...4.......
   3833c:	000288d2 000288de 000288c0 000288e4     ................
   3834c:	0002891a 00028b1c 00028b6c 00028b6c     ........l...l...
   3835c:	00028b68 00028b0e 00028b2e 00028afe     h...............
   3836c:	00028b40 00028b52 00028bba 00028be8     @...R...........
   3837c:	00028be8 00028be4 00028bb4 00028bc0     ................
   3838c:	00028bae 00028bc6 00028bcc              ............

00038398 <tcc_modules>:
   38398:	42002000 42002400 42002800              . .B.$.B.(.B

000383a4 <_tcc_gclk_ids>:
   383a4:	001b1a1a                                ....

000383a8 <_tcc_apbcmasks>:
   383a8:	00000100 00000200 00000400              ............

000383b4 <_tcc_maxs>:
   383b4:	00ffffff 00ffffff 0000ffff              ............

000383c0 <_tcc_cc_nums>:
   383c0:	00020204                                ....

000383c4 <_tcc_ow_nums>:
   383c4:	00020408                                ....

000383c8 <_tcc_intflag>:
   383c8:	00000001 00000002 00000004 00000008     ................
   383d8:	00001000 00002000 00004000 00008000     ..... ...@......
   383e8:	00010000 00020000 00040000 00080000     ................

000383f8 <LfnOfs>:
   383f8:	07050301 12100e09 1c181614 0000001e     ................
   38408:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   38418:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
   38428:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
   38438:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
   38448:	20205441 00202020                       AT     .

00038450 <excvt.4558>:
   38450:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   38460:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   38470:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   38480:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   38490:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   384a0:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   384b0:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   384c0:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

000384d0 <Tbl>:
   384d0:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   384e0:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   384f0:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   38500:	00d600ff 00f800dc 00d800a3 019200d7     ................
   38510:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   38520:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   38530:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   38540:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   38550:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   38560:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   38570:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   38580:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   38590:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   385a0:	00da00de 00d900db 00dd00fd 00b400af     ................
   385b0:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   385c0:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

000385d0 <tbl_lower.4308>:
   385d0:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   385e0:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   385f0:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   38600:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   38610:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   38620:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   38630:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   38640:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   38650:	01050103 01090107 010d010b 0111010f     ................
   38660:	01150113 01190117 011d011b 0121011f     ..............!.
   38670:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   38680:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   38690:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   386a0:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   386b0:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   386c0:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   386d0:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   386e0:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   386f0:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   38700:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   38710:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   38720:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   38730:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   38740:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   38750:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   38760:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   38770:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   38780:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   38790:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   387a0:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

000387b0 <tbl_upper.4309>:
   387b0:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   387c0:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   387d0:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   387e0:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   387f0:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   38800:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   38810:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   38820:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   38830:	01040102 01080106 010c010a 0110010e     ................
   38840:	01140112 01180116 011c011a 0120011e     .............. .
   38850:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   38860:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   38870:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   38880:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   38890:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   388a0:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   388b0:	03940393 03960395 03980397 039a0399     ................
   388c0:	039c039b 039e039d 03a0039f 03a303a1     ................
   388d0:	03a503a4 03a703a6 03a903a8 041003aa     ................
   388e0:	04120411 04140413 04160415 04180417     ................
   388f0:	041a0419 041c041b 041e041d 0420041f     .............. .
   38900:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   38910:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   38920:	04030402 04050404 04070406 04090408     ................
   38930:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   38940:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   38950:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   38960:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   38970:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   38980:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   38990:	0002df26 0002df26 0002df26 0002ddb4     &...&...&.......
   389a0:	0002df26 0002de9e 0002df26 0002df26     &.......&...&...
   389b0:	0002df26 0002df26 0002df26 0002df26     &...&...&...&...
   389c0:	0002df26 0002df18 4354514d 00000000     &.......MQTC....
   389d0:	00000004 00000000 00000000 00000000     ................
   389e0:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   38a20:	4354514d 00000000 00000004 00000000     MQTC............
	...
   38a38:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   38a78:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   38a88:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   38a98:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   38aa8:	20544547 00000000 54534f50 00000020     GET ....POST ...
   38ab8:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   38ac8:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   38ad8:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   38ae8:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   38af8:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   38b08:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   38b18:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   38b28:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   38b38:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   38b48:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   38b58:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   38b68:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   38b78:	676e654c 203a6874 00000000 33323130     Length: ....0123
   38b88:	37363534 62613938 66656463 6e617254     456789abcdefTran
   38b98:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   38ba8:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   38bb8:	50545448 0000002f 00000d31 0003001a     HTTP/...1.......
   38bc8:	00030014 0003000e 00030008 00030020     ............ ...
   38bd8:	00030002 00030020 0002fffc 0002fff6     .... ...........
   38be8:	00030020 0002fff0 0002fff0 0002ffea      ...............
   38bf8:	0002ffe4 0002ffde 42002000 42002400     ......... .B.$.B
   38c08:	42002800 0a0d0a0d 2d2d2d2d 4553452d     .(.B....-----ESE
   38c18:	20363135 6e69614d 6f725020 6d617267     516 Main Program
   38c28:	2d2d2d2d 000a0d2d 0a0d0a0d 74696e49     -----.......Init
   38c38:	696c6169 4820657a 2e2e2e57 00000a0d     ialize HW.......
   38c48:	6f727245 6e692072 61697469 697a696c     Error initializi
   38c58:	4920676e 44204332 65766972 0a0d2172     ng I2C Driver!..
   38c68:	00000000 74696e49 696c6169 2064657a     ....Initialized 
   38c78:	20433249 76697244 0d217265 0000000a     I2C Driver!.....
   38c88:	6f727245 6e692072 61697469 697a696c     Error initializi
   38c98:	5320676e 61736565 0a0d2177 00000000     ng Seesaw!......
   38ca8:	74696e49 696c6169 2064657a 73656553     Initialized Sees
   38cb8:	0d217761 0000000a 70616548 66656220     aw!.....Heap bef
   38cc8:	2065726f 72617473 676e6974 73617420     ore starting tas
   38cd8:	203a736b 0a0d6425 00000000 5f494c43     ks: %d......CLI_
   38ce8:	4b534154 00000000 3a525245 494c4320     TASK....ERR: CLI
   38cf8:	73617420 6f63206b 20646c75 20746f6e      task could not 
   38d08:	69206562 6974696e 7a696c61 0d216465     be initialized!.
   38d18:	0000000a 70616548 74666120 73207265     ....Heap after s
   38d28:	74726174 20676e69 3a494c43 0d642520     tarting CLI: %d.
   38d38:	0000000a 49464957 5341545f 0000004b     ....WIFI_TASK...
   38d48:	3a525245 46495720 61742049 63206b73     ERR: WIFI task c
   38d58:	646c756f 746f6e20 20656220 74696e69     ould not be init
   38d68:	696c6169 2164657a 00000a0d 70616548     ialized!....Heap
   38d78:	74666120 73207265 74726174 20676e69      after starting 
   38d88:	49464957 6425203a 00000a0d 54204955     WIFI: %d....UI T
   38d98:	006b7361 3a525245 20495520 6b736174     ask.ERR: UI task
   38da8:	756f6320 6e20646c 6220746f 6e692065      could not be in
   38db8:	61697469 657a696c 0a0d2164 00000000     itialized!......
   38dc8:	70616548 74666120 73207265 74726174     Heap after start
   38dd8:	20676e69 54204955 3a6b7361 0d642520     ing UI Task: %d.
   38de8:	0000000a 746e6f43 206c6f72 6b736154     ....Control Task
   38df8:	00000000 3a525245 6e6f4320 6c6f7274     ....ERR: Control
   38e08:	73617420 6f63206b 20646c75 20746f6e      task could not 
   38e18:	69206562 6974696e 7a696c61 0d216465     be initialized!.
   38e28:	0000000a 70616548 74666120 73207265     ....Heap after s
   38e38:	74726174 20676e69 746e6f43 206c6f72     tarting Control 
   38e48:	6b736154 6425203a 00000a0d 6f727245     Task: %d....Erro
   38e58:	6e6f2072 6d656d20 2079726f 6f6c6c61     r on memory allo
   38e68:	69746163 6f206e6f 5246206e 54524545     cation on FREERT
   38e78:	0d21534f 0000000a 6f727245 6e6f2072     OS!.....Error on
   38e88:	61747320 6f206b63 66726576 20776f6c      stack overflow 
   38e98:	46206e6f 52454552 21534f54 00000a0d     on FREERTOS!....
   38ea8:	0003289c 0003287e 00032838 00032756     .(..~(..8(..V'..
   38eb8:	00032838 00032870 00032838 00032756     8(..p(..8(..V'..
   38ec8:	0003287e 0003287e 00032870 00032756     ~(..~(..p(..V'..
   38ed8:	0003274e 0003274e 0003274e 00032ab4     N'..N'..N'...*..
   38ee8:	00032efc 00032dbc 00032dbc 00032db8     .....-...-...-..
   38ef8:	00032ed4 00032ed4 00032ec6 00032db8     .............-..
   38f08:	00032ed4 00032ec6 00032ed4 00032db8     .............-..
   38f18:	00032edc 00032edc 00032edc 000330e0     .............0..

00038f28 <_global_impure_ptr>:
   38f28:	200000dc                                ... 

00038f2c <__sf_fake_stderr>:
	...

00038f4c <__sf_fake_stdin>:
	...

00038f6c <__sf_fake_stdout>:
	...
   38f8c:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   38f9c:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   38fac:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   38fbc:	37363534 62613938 66656463 20200000              456789abcdef.

00038fc9 <_ctype_>:
   38fc9:	20202000 20202020 28282020 20282828     .         ((((( 
   38fd9:	20202020 20202020 20202020 20202020                     
   38fe9:	10108820 10101010 10101010 10101010      ...............
   38ff9:	04040410 04040404 10040404 10101010     ................
   39009:	41411010 41414141 01010101 01010101     ..AAAAAA........
   39019:	01010101 01010101 01010101 10101010     ................
   39029:	42421010 42424242 02020202 02020202     ..BBBBBB........
   39039:	02020202 02020202 02020202 10101010     ................
   39049:	00000020 00000000 00000000 00000000      ...............
	...

000390cc <_init>:
   390cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   390ce:	46c0      	nop			; (mov r8, r8)
   390d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   390d2:	bc08      	pop	{r3}
   390d4:	469e      	mov	lr, r3
   390d6:	4770      	bx	lr

000390d8 <__init_array_start>:
   390d8:	000120dd 	.word	0x000120dd

000390dc <_fini>:
   390dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   390de:	46c0      	nop			; (mov r8, r8)
   390e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   390e2:	bc08      	pop	{r3}
   390e4:	469e      	mov	lr, r3
   390e6:	4770      	bx	lr

000390e8 <__fini_array_start>:
   390e8:	000120b5 	.word	0x000120b5
