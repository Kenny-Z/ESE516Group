
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a2b0  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  0001c2b0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002f60  20000078  0001c328  00010078  2**2
                  ALLOC
  3 .stack        00002000  20002fd8  0001f288  00010078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010078  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   00051804  00000000  00000000  000100f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006b08  00000000  00000000  000618fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000060a6  00000000  00000000  00068405  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000011d0  00000000  00000000  0006e4ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f80  00000000  00000000  0006f67b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000fec0  00000000  00000000  000705fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001d86c  00000000  00000000  000804bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009b7cd  00000000  00000000  0009dd27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004114  00000000  00000000  001394f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	d8 4f 00 20 75 97 01 00 6d 98 01 00 6d 98 01 00     .O. u...m...m...
	...
   1202c:	99 42 01 00 00 00 00 00 00 00 00 00 c1 43 01 00     .B...........C..
   1203c:	09 44 01 00 6d 98 01 00 6d 98 01 00 6d 98 01 00     .D..m...m...m...
   1204c:	a5 74 01 00 d5 70 01 00 6d 98 01 00 6d 98 01 00     .t...p..m...m...
   1205c:	6d 98 01 00 6d 98 01 00 49 7b 01 00 61 7b 01 00     m...m...I{..a{..
   1206c:	79 7b 01 00 91 7b 01 00 a9 7b 01 00 c1 7b 01 00     y{...{...{...{..
   1207c:	bd 96 01 00 d1 96 01 00 e5 96 01 00 d1 3d 01 00     .............=..
   1208c:	e5 3d 01 00 f9 3d 01 00 00 00 00 00 00 00 00 00     .=...=..........
   1209c:	6d 98 01 00 6d 98 01 00 6d 98 01 00 6d 98 01 00     m...m...m...m...
   120ac:	6d 98 01 00 00 00 00 00                             m.......

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000078 	.word	0x20000078
   120d4:	00000000 	.word	0x00000000
   120d8:	0001c2b0 	.word	0x0001c2b0

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	2000007c 	.word	0x2000007c
   12108:	0001c2b0 	.word	0x0001c2b0
   1210c:	0001c2b0 	.word	0x0001c2b0
   12110:	00000000 	.word	0x00000000

00012114 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	69db      	ldr	r3, [r3, #28]
   12126:	2207      	movs	r2, #7
   12128:	4013      	ands	r3, r2
   1212a:	1e5a      	subs	r2, r3, #1
   1212c:	4193      	sbcs	r3, r2
   1212e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   12130:	0018      	movs	r0, r3
   12132:	46bd      	mov	sp, r7
   12134:	b004      	add	sp, #16
   12136:	bd80      	pop	{r7, pc}

00012138 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   12138:	b580      	push	{r7, lr}
   1213a:	b082      	sub	sp, #8
   1213c:	af00      	add	r7, sp, #0
   1213e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   12140:	46c0      	nop			; (mov r8, r8)
   12142:	687b      	ldr	r3, [r7, #4]
   12144:	0018      	movs	r0, r3
   12146:	4b04      	ldr	r3, [pc, #16]	; (12158 <_i2c_master_wait_for_sync+0x20>)
   12148:	4798      	blx	r3
   1214a:	1e03      	subs	r3, r0, #0
   1214c:	d1f9      	bne.n	12142 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   1214e:	46c0      	nop			; (mov r8, r8)
   12150:	46bd      	mov	sp, r7
   12152:	b002      	add	sp, #8
   12154:	bd80      	pop	{r7, pc}
   12156:	46c0      	nop			; (mov r8, r8)
   12158:	00012115 	.word	0x00012115

0001215c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   1215c:	b580      	push	{r7, lr}
   1215e:	b084      	sub	sp, #16
   12160:	af00      	add	r7, sp, #0
   12162:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12164:	687b      	ldr	r3, [r7, #4]
   12166:	681b      	ldr	r3, [r3, #0]
   12168:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   1216a:	68fb      	ldr	r3, [r7, #12]
   1216c:	681b      	ldr	r3, [r3, #0]
   1216e:	011b      	lsls	r3, r3, #4
   12170:	0fdb      	lsrs	r3, r3, #31
   12172:	b2db      	uxtb	r3, r3
   12174:	001a      	movs	r2, r3
   12176:	230b      	movs	r3, #11
   12178:	18fb      	adds	r3, r7, r3
   1217a:	1e51      	subs	r1, r2, #1
   1217c:	418a      	sbcs	r2, r1
   1217e:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12180:	2308      	movs	r3, #8
   12182:	18fb      	adds	r3, r7, r3
   12184:	687a      	ldr	r2, [r7, #4]
   12186:	8b52      	ldrh	r2, [r2, #26]
   12188:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1218a:	687b      	ldr	r3, [r7, #4]
   1218c:	8b9b      	ldrh	r3, [r3, #28]
   1218e:	b29a      	uxth	r2, r3
   12190:	2308      	movs	r3, #8
   12192:	18fb      	adds	r3, r7, r3
   12194:	2108      	movs	r1, #8
   12196:	1879      	adds	r1, r7, r1
   12198:	8809      	ldrh	r1, [r1, #0]
   1219a:	1a8a      	subs	r2, r1, r2
   1219c:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   1219e:	687b      	ldr	r3, [r7, #4]
   121a0:	8b9b      	ldrh	r3, [r3, #28]
   121a2:	b29b      	uxth	r3, r3
   121a4:	3b01      	subs	r3, #1
   121a6:	b29a      	uxth	r2, r3
   121a8:	687b      	ldr	r3, [r7, #4]
   121aa:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   121ac:	230b      	movs	r3, #11
   121ae:	18fb      	adds	r3, r7, r3
   121b0:	781b      	ldrb	r3, [r3, #0]
   121b2:	2b00      	cmp	r3, #0
   121b4:	d010      	beq.n	121d8 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   121b6:	687b      	ldr	r3, [r7, #4]
   121b8:	7adb      	ldrb	r3, [r3, #11]
   121ba:	2b00      	cmp	r3, #0
   121bc:	d01c      	beq.n	121f8 <_i2c_master_read+0x9c>
   121be:	687b      	ldr	r3, [r7, #4]
   121c0:	8b9b      	ldrh	r3, [r3, #28]
   121c2:	b29b      	uxth	r3, r3
   121c4:	2b01      	cmp	r3, #1
   121c6:	d117      	bne.n	121f8 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   121c8:	68fb      	ldr	r3, [r7, #12]
   121ca:	685b      	ldr	r3, [r3, #4]
   121cc:	2280      	movs	r2, #128	; 0x80
   121ce:	02d2      	lsls	r2, r2, #11
   121d0:	431a      	orrs	r2, r3
   121d2:	68fb      	ldr	r3, [r7, #12]
   121d4:	605a      	str	r2, [r3, #4]
   121d6:	e00f      	b.n	121f8 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   121d8:	687b      	ldr	r3, [r7, #4]
   121da:	7adb      	ldrb	r3, [r3, #11]
   121dc:	2b00      	cmp	r3, #0
   121de:	d00b      	beq.n	121f8 <_i2c_master_read+0x9c>
   121e0:	687b      	ldr	r3, [r7, #4]
   121e2:	8b9b      	ldrh	r3, [r3, #28]
   121e4:	b29b      	uxth	r3, r3
   121e6:	2b00      	cmp	r3, #0
   121e8:	d106      	bne.n	121f8 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   121ea:	68fb      	ldr	r3, [r7, #12]
   121ec:	685b      	ldr	r3, [r3, #4]
   121ee:	2280      	movs	r2, #128	; 0x80
   121f0:	02d2      	lsls	r2, r2, #11
   121f2:	431a      	orrs	r2, r3
   121f4:	68fb      	ldr	r3, [r7, #12]
   121f6:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   121f8:	687b      	ldr	r3, [r7, #4]
   121fa:	8b9b      	ldrh	r3, [r3, #28]
   121fc:	b29b      	uxth	r3, r3
   121fe:	2b00      	cmp	r3, #0
   12200:	d10e      	bne.n	12220 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12202:	687b      	ldr	r3, [r7, #4]
   12204:	7a9b      	ldrb	r3, [r3, #10]
   12206:	2b00      	cmp	r3, #0
   12208:	d00a      	beq.n	12220 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1220a:	687b      	ldr	r3, [r7, #4]
   1220c:	0018      	movs	r0, r3
   1220e:	4b0e      	ldr	r3, [pc, #56]	; (12248 <_i2c_master_read+0xec>)
   12210:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12212:	68fb      	ldr	r3, [r7, #12]
   12214:	685b      	ldr	r3, [r3, #4]
   12216:	22c0      	movs	r2, #192	; 0xc0
   12218:	0292      	lsls	r2, r2, #10
   1221a:	431a      	orrs	r2, r3
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   12220:	687b      	ldr	r3, [r7, #4]
   12222:	0018      	movs	r0, r3
   12224:	4b08      	ldr	r3, [pc, #32]	; (12248 <_i2c_master_read+0xec>)
   12226:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   12228:	687b      	ldr	r3, [r7, #4]
   1222a:	6a1a      	ldr	r2, [r3, #32]
   1222c:	2308      	movs	r3, #8
   1222e:	18fb      	adds	r3, r7, r3
   12230:	881b      	ldrh	r3, [r3, #0]
   12232:	18d3      	adds	r3, r2, r3
   12234:	68fa      	ldr	r2, [r7, #12]
   12236:	2128      	movs	r1, #40	; 0x28
   12238:	5c52      	ldrb	r2, [r2, r1]
   1223a:	b2d2      	uxtb	r2, r2
   1223c:	701a      	strb	r2, [r3, #0]
}
   1223e:	46c0      	nop			; (mov r8, r8)
   12240:	46bd      	mov	sp, r7
   12242:	b004      	add	sp, #16
   12244:	bd80      	pop	{r7, pc}
   12246:	46c0      	nop			; (mov r8, r8)
   12248:	00012139 	.word	0x00012139

0001224c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   1224c:	b580      	push	{r7, lr}
   1224e:	b084      	sub	sp, #16
   12250:	af00      	add	r7, sp, #0
   12252:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12254:	687b      	ldr	r3, [r7, #4]
   12256:	681b      	ldr	r3, [r3, #0]
   12258:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   1225a:	68fb      	ldr	r3, [r7, #12]
   1225c:	8b5b      	ldrh	r3, [r3, #26]
   1225e:	b29b      	uxth	r3, r3
   12260:	001a      	movs	r2, r3
   12262:	2304      	movs	r3, #4
   12264:	4013      	ands	r3, r2
   12266:	d004      	beq.n	12272 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   12268:	687b      	ldr	r3, [r7, #4]
   1226a:	2225      	movs	r2, #37	; 0x25
   1226c:	211e      	movs	r1, #30
   1226e:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   12270:	e024      	b.n	122bc <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   12272:	230a      	movs	r3, #10
   12274:	18fb      	adds	r3, r7, r3
   12276:	687a      	ldr	r2, [r7, #4]
   12278:	8b52      	ldrh	r2, [r2, #26]
   1227a:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1227c:	687b      	ldr	r3, [r7, #4]
   1227e:	8b9b      	ldrh	r3, [r3, #28]
   12280:	b29a      	uxth	r2, r3
   12282:	230a      	movs	r3, #10
   12284:	18fb      	adds	r3, r7, r3
   12286:	210a      	movs	r1, #10
   12288:	1879      	adds	r1, r7, r1
   1228a:	8809      	ldrh	r1, [r1, #0]
   1228c:	1a8a      	subs	r2, r1, r2
   1228e:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12290:	687b      	ldr	r3, [r7, #4]
   12292:	8b9b      	ldrh	r3, [r3, #28]
   12294:	b29b      	uxth	r3, r3
   12296:	3b01      	subs	r3, #1
   12298:	b29a      	uxth	r2, r3
   1229a:	687b      	ldr	r3, [r7, #4]
   1229c:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   1229e:	687b      	ldr	r3, [r7, #4]
   122a0:	0018      	movs	r0, r3
   122a2:	4b08      	ldr	r3, [pc, #32]	; (122c4 <_i2c_master_write+0x78>)
   122a4:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   122a6:	687b      	ldr	r3, [r7, #4]
   122a8:	6a1a      	ldr	r2, [r3, #32]
   122aa:	230a      	movs	r3, #10
   122ac:	18fb      	adds	r3, r7, r3
   122ae:	881b      	ldrh	r3, [r3, #0]
   122b0:	18d3      	adds	r3, r2, r3
   122b2:	781b      	ldrb	r3, [r3, #0]
   122b4:	b2d9      	uxtb	r1, r3
   122b6:	68fb      	ldr	r3, [r7, #12]
   122b8:	2228      	movs	r2, #40	; 0x28
   122ba:	5499      	strb	r1, [r3, r2]
}
   122bc:	46bd      	mov	sp, r7
   122be:	b004      	add	sp, #16
   122c0:	bd80      	pop	{r7, pc}
   122c2:	46c0      	nop			; (mov r8, r8)
   122c4:	00012139 	.word	0x00012139

000122c8 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   122c8:	b580      	push	{r7, lr}
   122ca:	b084      	sub	sp, #16
   122cc:	af00      	add	r7, sp, #0
   122ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   122d0:	687b      	ldr	r3, [r7, #4]
   122d2:	681b      	ldr	r3, [r3, #0]
   122d4:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   122d6:	68fb      	ldr	r3, [r7, #12]
   122d8:	7e1b      	ldrb	r3, [r3, #24]
   122da:	b2db      	uxtb	r3, r3
   122dc:	001a      	movs	r2, r3
   122de:	2301      	movs	r3, #1
   122e0:	4013      	ands	r3, r2
   122e2:	d02b      	beq.n	1233c <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   122e4:	68fb      	ldr	r3, [r7, #12]
   122e6:	2201      	movs	r2, #1
   122e8:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   122ea:	68fb      	ldr	r3, [r7, #12]
   122ec:	8b5b      	ldrh	r3, [r3, #26]
   122ee:	b29b      	uxth	r3, r3
   122f0:	001a      	movs	r2, r3
   122f2:	2302      	movs	r3, #2
   122f4:	4013      	ands	r3, r2
   122f6:	d004      	beq.n	12302 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   122f8:	687b      	ldr	r3, [r7, #4]
   122fa:	2225      	movs	r2, #37	; 0x25
   122fc:	2141      	movs	r1, #65	; 0x41
   122fe:	5499      	strb	r1, [r3, r2]
   12300:	e01c      	b.n	1233c <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12302:	68fb      	ldr	r3, [r7, #12]
   12304:	8b5b      	ldrh	r3, [r3, #26]
   12306:	b29b      	uxth	r3, r3
   12308:	001a      	movs	r2, r3
   1230a:	2304      	movs	r3, #4
   1230c:	4013      	ands	r3, r2
   1230e:	d015      	beq.n	1233c <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12310:	687b      	ldr	r3, [r7, #4]
   12312:	2225      	movs	r2, #37	; 0x25
   12314:	2118      	movs	r1, #24
   12316:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   12318:	687b      	ldr	r3, [r7, #4]
   1231a:	2200      	movs	r2, #0
   1231c:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   1231e:	687b      	ldr	r3, [r7, #4]
   12320:	7a9b      	ldrb	r3, [r3, #10]
   12322:	2b00      	cmp	r3, #0
   12324:	d00a      	beq.n	1233c <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   12326:	687b      	ldr	r3, [r7, #4]
   12328:	0018      	movs	r0, r3
   1232a:	4b13      	ldr	r3, [pc, #76]	; (12378 <_i2c_master_async_address_response+0xb0>)
   1232c:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1232e:	68fb      	ldr	r3, [r7, #12]
   12330:	685b      	ldr	r3, [r3, #4]
   12332:	22c0      	movs	r2, #192	; 0xc0
   12334:	0292      	lsls	r2, r2, #10
   12336:	431a      	orrs	r2, r3
   12338:	68fb      	ldr	r3, [r7, #12]
   1233a:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   1233c:	687b      	ldr	r3, [r7, #4]
   1233e:	8b9b      	ldrh	r3, [r3, #28]
   12340:	b29a      	uxth	r2, r3
   12342:	687b      	ldr	r3, [r7, #4]
   12344:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   12346:	687b      	ldr	r3, [r7, #4]
   12348:	2225      	movs	r2, #37	; 0x25
   1234a:	5c9b      	ldrb	r3, [r3, r2]
   1234c:	b2db      	uxtb	r3, r3
   1234e:	2b05      	cmp	r3, #5
   12350:	d10e      	bne.n	12370 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12352:	687b      	ldr	r3, [r7, #4]
   12354:	2224      	movs	r2, #36	; 0x24
   12356:	5c9b      	ldrb	r3, [r3, r2]
   12358:	b2db      	uxtb	r3, r3
   1235a:	2b00      	cmp	r3, #0
   1235c:	d104      	bne.n	12368 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1235e:	687b      	ldr	r3, [r7, #4]
   12360:	0018      	movs	r0, r3
   12362:	4b06      	ldr	r3, [pc, #24]	; (1237c <_i2c_master_async_address_response+0xb4>)
   12364:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   12366:	e003      	b.n	12370 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   12368:	687b      	ldr	r3, [r7, #4]
   1236a:	0018      	movs	r0, r3
   1236c:	4b04      	ldr	r3, [pc, #16]	; (12380 <_i2c_master_async_address_response+0xb8>)
   1236e:	4798      	blx	r3
}
   12370:	46c0      	nop			; (mov r8, r8)
   12372:	46bd      	mov	sp, r7
   12374:	b004      	add	sp, #16
   12376:	bd80      	pop	{r7, pc}
   12378:	00012139 	.word	0x00012139
   1237c:	0001224d 	.word	0x0001224d
   12380:	0001215d 	.word	0x0001215d

00012384 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   12384:	b580      	push	{r7, lr}
   12386:	b084      	sub	sp, #16
   12388:	af00      	add	r7, sp, #0
   1238a:	60f8      	str	r0, [r7, #12]
   1238c:	60b9      	str	r1, [r7, #8]
   1238e:	1dfb      	adds	r3, r7, #7
   12390:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   12392:	1dfb      	adds	r3, r7, #7
   12394:	781b      	ldrb	r3, [r3, #0]
   12396:	68fa      	ldr	r2, [r7, #12]
   12398:	3302      	adds	r3, #2
   1239a:	009b      	lsls	r3, r3, #2
   1239c:	18d3      	adds	r3, r2, r3
   1239e:	3304      	adds	r3, #4
   123a0:	68ba      	ldr	r2, [r7, #8]
   123a2:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   123a4:	68fb      	ldr	r3, [r7, #12]
   123a6:	7e1b      	ldrb	r3, [r3, #24]
   123a8:	b2db      	uxtb	r3, r3
   123aa:	b25a      	sxtb	r2, r3
   123ac:	1dfb      	adds	r3, r7, #7
   123ae:	781b      	ldrb	r3, [r3, #0]
   123b0:	2101      	movs	r1, #1
   123b2:	4099      	lsls	r1, r3
   123b4:	000b      	movs	r3, r1
   123b6:	b25b      	sxtb	r3, r3
   123b8:	4313      	orrs	r3, r2
   123ba:	b25b      	sxtb	r3, r3
   123bc:	b2da      	uxtb	r2, r3
   123be:	68fb      	ldr	r3, [r7, #12]
   123c0:	761a      	strb	r2, [r3, #24]
}
   123c2:	46c0      	nop			; (mov r8, r8)
   123c4:	46bd      	mov	sp, r7
   123c6:	b004      	add	sp, #16
   123c8:	bd80      	pop	{r7, pc}
	...

000123cc <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   123cc:	b590      	push	{r4, r7, lr}
   123ce:	b087      	sub	sp, #28
   123d0:	af00      	add	r7, sp, #0
   123d2:	6078      	str	r0, [r7, #4]
   123d4:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   123d6:	687b      	ldr	r3, [r7, #4]
   123d8:	681b      	ldr	r3, [r3, #0]
   123da:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   123dc:	683b      	ldr	r3, [r7, #0]
   123de:	685a      	ldr	r2, [r3, #4]
   123e0:	687b      	ldr	r3, [r7, #4]
   123e2:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   123e4:	683b      	ldr	r3, [r7, #0]
   123e6:	885a      	ldrh	r2, [r3, #2]
   123e8:	687b      	ldr	r3, [r7, #4]
   123ea:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   123ec:	687b      	ldr	r3, [r7, #4]
   123ee:	2224      	movs	r2, #36	; 0x24
   123f0:	2101      	movs	r1, #1
   123f2:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   123f4:	687b      	ldr	r3, [r7, #4]
   123f6:	2225      	movs	r2, #37	; 0x25
   123f8:	2105      	movs	r1, #5
   123fa:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   123fc:	693b      	ldr	r3, [r7, #16]
   123fe:	681b      	ldr	r3, [r3, #0]
   12400:	011b      	lsls	r3, r3, #4
   12402:	0fdb      	lsrs	r3, r3, #31
   12404:	b2db      	uxtb	r3, r3
   12406:	001a      	movs	r2, r3
   12408:	230f      	movs	r3, #15
   1240a:	18fb      	adds	r3, r7, r3
   1240c:	1e51      	subs	r1, r2, #1
   1240e:	418a      	sbcs	r2, r1
   12410:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12412:	683b      	ldr	r3, [r7, #0]
   12414:	7a5b      	ldrb	r3, [r3, #9]
   12416:	2b00      	cmp	r3, #0
   12418:	d006      	beq.n	12428 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1241a:	683b      	ldr	r3, [r7, #0]
   1241c:	7a9a      	ldrb	r2, [r3, #10]
   1241e:	687b      	ldr	r3, [r7, #4]
   12420:	0011      	movs	r1, r2
   12422:	0018      	movs	r0, r3
   12424:	4b3b      	ldr	r3, [pc, #236]	; (12514 <_i2c_master_read_packet+0x148>)
   12426:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   12428:	230f      	movs	r3, #15
   1242a:	18fb      	adds	r3, r7, r3
   1242c:	781b      	ldrb	r3, [r3, #0]
   1242e:	2b00      	cmp	r3, #0
   12430:	d00b      	beq.n	1244a <_i2c_master_read_packet+0x7e>
   12432:	683b      	ldr	r3, [r7, #0]
   12434:	885b      	ldrh	r3, [r3, #2]
   12436:	2b01      	cmp	r3, #1
   12438:	d107      	bne.n	1244a <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1243a:	693b      	ldr	r3, [r7, #16]
   1243c:	685b      	ldr	r3, [r3, #4]
   1243e:	2280      	movs	r2, #128	; 0x80
   12440:	02d2      	lsls	r2, r2, #11
   12442:	431a      	orrs	r2, r3
   12444:	693b      	ldr	r3, [r7, #16]
   12446:	605a      	str	r2, [r3, #4]
   12448:	e005      	b.n	12456 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   1244a:	693b      	ldr	r3, [r7, #16]
   1244c:	685b      	ldr	r3, [r3, #4]
   1244e:	4a32      	ldr	r2, [pc, #200]	; (12518 <_i2c_master_read_packet+0x14c>)
   12450:	401a      	ands	r2, r3
   12452:	693b      	ldr	r3, [r7, #16]
   12454:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   12456:	683b      	ldr	r3, [r7, #0]
   12458:	7a1b      	ldrb	r3, [r3, #8]
   1245a:	2b00      	cmp	r3, #0
   1245c:	d045      	beq.n	124ea <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1245e:	683b      	ldr	r3, [r7, #0]
   12460:	881b      	ldrh	r3, [r3, #0]
   12462:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12464:	683b      	ldr	r3, [r7, #0]
   12466:	7a5b      	ldrb	r3, [r3, #9]
   12468:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   1246a:	4313      	orrs	r3, r2
   1246c:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1246e:	2380      	movs	r3, #128	; 0x80
   12470:	021b      	lsls	r3, r3, #8
   12472:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   12474:	693b      	ldr	r3, [r7, #16]
   12476:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   12478:	2317      	movs	r3, #23
   1247a:	18fc      	adds	r4, r7, r3
   1247c:	687b      	ldr	r3, [r7, #4]
   1247e:	0018      	movs	r0, r3
   12480:	4b26      	ldr	r3, [pc, #152]	; (1251c <_i2c_master_read_packet+0x150>)
   12482:	4798      	blx	r3
   12484:	0003      	movs	r3, r0
   12486:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12488:	693b      	ldr	r3, [r7, #16]
   1248a:	685b      	ldr	r3, [r3, #4]
   1248c:	4a22      	ldr	r2, [pc, #136]	; (12518 <_i2c_master_read_packet+0x14c>)
   1248e:	401a      	ands	r2, r3
   12490:	693b      	ldr	r3, [r7, #16]
   12492:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   12494:	2317      	movs	r3, #23
   12496:	18fb      	adds	r3, r7, r3
   12498:	781b      	ldrb	r3, [r3, #0]
   1249a:	2b00      	cmp	r3, #0
   1249c:	d107      	bne.n	124ae <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   1249e:	2317      	movs	r3, #23
   124a0:	18fc      	adds	r4, r7, r3
   124a2:	687b      	ldr	r3, [r7, #4]
   124a4:	0018      	movs	r0, r3
   124a6:	4b1e      	ldr	r3, [pc, #120]	; (12520 <_i2c_master_read_packet+0x154>)
   124a8:	4798      	blx	r3
   124aa:	0003      	movs	r3, r0
   124ac:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   124ae:	2317      	movs	r3, #23
   124b0:	18fb      	adds	r3, r7, r3
   124b2:	781b      	ldrb	r3, [r3, #0]
   124b4:	2b00      	cmp	r3, #0
   124b6:	d114      	bne.n	124e2 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   124b8:	693b      	ldr	r3, [r7, #16]
   124ba:	2203      	movs	r2, #3
   124bc:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   124be:	683b      	ldr	r3, [r7, #0]
   124c0:	881b      	ldrh	r3, [r3, #0]
   124c2:	0a1b      	lsrs	r3, r3, #8
   124c4:	b29b      	uxth	r3, r3
   124c6:	2278      	movs	r2, #120	; 0x78
   124c8:	4313      	orrs	r3, r2
   124ca:	b29b      	uxth	r3, r3
   124cc:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   124ce:	683b      	ldr	r3, [r7, #0]
   124d0:	7a5b      	ldrb	r3, [r3, #9]
   124d2:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   124d4:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   124d6:	2201      	movs	r2, #1
   124d8:	4313      	orrs	r3, r2
   124da:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   124dc:	693b      	ldr	r3, [r7, #16]
   124de:	625a      	str	r2, [r3, #36]	; 0x24
   124e0:	e012      	b.n	12508 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   124e2:	2317      	movs	r3, #23
   124e4:	18fb      	adds	r3, r7, r3
   124e6:	781b      	ldrb	r3, [r3, #0]
   124e8:	e00f      	b.n	1250a <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   124ea:	693b      	ldr	r3, [r7, #16]
   124ec:	2203      	movs	r2, #3
   124ee:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   124f0:	683b      	ldr	r3, [r7, #0]
   124f2:	881b      	ldrh	r3, [r3, #0]
   124f4:	005b      	lsls	r3, r3, #1
   124f6:	2201      	movs	r2, #1
   124f8:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   124fa:	683b      	ldr	r3, [r7, #0]
   124fc:	7a5b      	ldrb	r3, [r3, #9]
   124fe:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12500:	4313      	orrs	r3, r2
   12502:	001a      	movs	r2, r3
   12504:	693b      	ldr	r3, [r7, #16]
   12506:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12508:	2300      	movs	r3, #0
}
   1250a:	0018      	movs	r0, r3
   1250c:	46bd      	mov	sp, r7
   1250e:	b007      	add	sp, #28
   12510:	bd90      	pop	{r4, r7, pc}
   12512:	46c0      	nop			; (mov r8, r8)
   12514:	00013d7d 	.word	0x00013d7d
   12518:	fffbffff 	.word	0xfffbffff
   1251c:	00013d1f 	.word	0x00013d1f
   12520:	00013cc1 	.word	0x00013cc1

00012524 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12524:	b580      	push	{r7, lr}
   12526:	b082      	sub	sp, #8
   12528:	af00      	add	r7, sp, #0
   1252a:	6078      	str	r0, [r7, #4]
   1252c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   1252e:	687b      	ldr	r3, [r7, #4]
   12530:	8b9b      	ldrh	r3, [r3, #28]
   12532:	b29b      	uxth	r3, r3
   12534:	2b00      	cmp	r3, #0
   12536:	d001      	beq.n	1253c <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   12538:	2305      	movs	r3, #5
   1253a:	e00c      	b.n	12556 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   1253c:	687b      	ldr	r3, [r7, #4]
   1253e:	2201      	movs	r2, #1
   12540:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12542:	687b      	ldr	r3, [r7, #4]
   12544:	2201      	movs	r2, #1
   12546:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   12548:	683a      	ldr	r2, [r7, #0]
   1254a:	687b      	ldr	r3, [r7, #4]
   1254c:	0011      	movs	r1, r2
   1254e:	0018      	movs	r0, r3
   12550:	4b03      	ldr	r3, [pc, #12]	; (12560 <i2c_master_read_packet_job+0x3c>)
   12552:	4798      	blx	r3
   12554:	0003      	movs	r3, r0
}
   12556:	0018      	movs	r0, r3
   12558:	46bd      	mov	sp, r7
   1255a:	b002      	add	sp, #8
   1255c:	bd80      	pop	{r7, pc}
   1255e:	46c0      	nop			; (mov r8, r8)
   12560:	000123cd 	.word	0x000123cd

00012564 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12564:	b580      	push	{r7, lr}
   12566:	b084      	sub	sp, #16
   12568:	af00      	add	r7, sp, #0
   1256a:	6078      	str	r0, [r7, #4]
   1256c:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1256e:	687b      	ldr	r3, [r7, #4]
   12570:	681b      	ldr	r3, [r3, #0]
   12572:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12574:	683b      	ldr	r3, [r7, #0]
   12576:	7a5b      	ldrb	r3, [r3, #9]
   12578:	2b00      	cmp	r3, #0
   1257a:	d006      	beq.n	1258a <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1257c:	683b      	ldr	r3, [r7, #0]
   1257e:	7a9a      	ldrb	r2, [r3, #10]
   12580:	687b      	ldr	r3, [r7, #4]
   12582:	0011      	movs	r1, r2
   12584:	0018      	movs	r0, r3
   12586:	4b1e      	ldr	r3, [pc, #120]	; (12600 <_i2c_master_write_packet+0x9c>)
   12588:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   1258a:	68fb      	ldr	r3, [r7, #12]
   1258c:	685b      	ldr	r3, [r3, #4]
   1258e:	4a1d      	ldr	r2, [pc, #116]	; (12604 <_i2c_master_write_packet+0xa0>)
   12590:	401a      	ands	r2, r3
   12592:	68fb      	ldr	r3, [r7, #12]
   12594:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   12596:	683b      	ldr	r3, [r7, #0]
   12598:	685a      	ldr	r2, [r3, #4]
   1259a:	687b      	ldr	r3, [r7, #4]
   1259c:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   1259e:	683b      	ldr	r3, [r7, #0]
   125a0:	885a      	ldrh	r2, [r3, #2]
   125a2:	687b      	ldr	r3, [r7, #4]
   125a4:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   125a6:	687b      	ldr	r3, [r7, #4]
   125a8:	2224      	movs	r2, #36	; 0x24
   125aa:	2100      	movs	r1, #0
   125ac:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   125ae:	687b      	ldr	r3, [r7, #4]
   125b0:	2225      	movs	r2, #37	; 0x25
   125b2:	2105      	movs	r1, #5
   125b4:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   125b6:	68fb      	ldr	r3, [r7, #12]
   125b8:	2203      	movs	r2, #3
   125ba:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   125bc:	683b      	ldr	r3, [r7, #0]
   125be:	7a1b      	ldrb	r3, [r3, #8]
   125c0:	2b00      	cmp	r3, #0
   125c2:	d00d      	beq.n	125e0 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   125c4:	683b      	ldr	r3, [r7, #0]
   125c6:	881b      	ldrh	r3, [r3, #0]
   125c8:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   125ca:	683b      	ldr	r3, [r7, #0]
   125cc:	7a5b      	ldrb	r3, [r3, #9]
   125ce:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   125d0:	4313      	orrs	r3, r2
   125d2:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   125d4:	2380      	movs	r3, #128	; 0x80
   125d6:	021b      	lsls	r3, r3, #8
   125d8:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   125da:	68fb      	ldr	r3, [r7, #12]
   125dc:	625a      	str	r2, [r3, #36]	; 0x24
   125de:	e009      	b.n	125f4 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   125e0:	683b      	ldr	r3, [r7, #0]
   125e2:	881b      	ldrh	r3, [r3, #0]
   125e4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   125e6:	683b      	ldr	r3, [r7, #0]
   125e8:	7a5b      	ldrb	r3, [r3, #9]
   125ea:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   125ec:	4313      	orrs	r3, r2
   125ee:	001a      	movs	r2, r3
   125f0:	68fb      	ldr	r3, [r7, #12]
   125f2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   125f4:	2300      	movs	r3, #0
}
   125f6:	0018      	movs	r0, r3
   125f8:	46bd      	mov	sp, r7
   125fa:	b004      	add	sp, #16
   125fc:	bd80      	pop	{r7, pc}
   125fe:	46c0      	nop			; (mov r8, r8)
   12600:	00013d7d 	.word	0x00013d7d
   12604:	fffbffff 	.word	0xfffbffff

00012608 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12608:	b580      	push	{r7, lr}
   1260a:	b082      	sub	sp, #8
   1260c:	af00      	add	r7, sp, #0
   1260e:	6078      	str	r0, [r7, #4]
   12610:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12612:	687b      	ldr	r3, [r7, #4]
   12614:	8b9b      	ldrh	r3, [r3, #28]
   12616:	b29b      	uxth	r3, r3
   12618:	2b00      	cmp	r3, #0
   1261a:	d001      	beq.n	12620 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   1261c:	2305      	movs	r3, #5
   1261e:	e00c      	b.n	1263a <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   12620:	687b      	ldr	r3, [r7, #4]
   12622:	2201      	movs	r2, #1
   12624:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12626:	687b      	ldr	r3, [r7, #4]
   12628:	2201      	movs	r2, #1
   1262a:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   1262c:	683a      	ldr	r2, [r7, #0]
   1262e:	687b      	ldr	r3, [r7, #4]
   12630:	0011      	movs	r1, r2
   12632:	0018      	movs	r0, r3
   12634:	4b03      	ldr	r3, [pc, #12]	; (12644 <i2c_master_write_packet_job+0x3c>)
   12636:	4798      	blx	r3
   12638:	0003      	movs	r3, r0
}
   1263a:	0018      	movs	r0, r3
   1263c:	46bd      	mov	sp, r7
   1263e:	b002      	add	sp, #8
   12640:	bd80      	pop	{r7, pc}
   12642:	46c0      	nop			; (mov r8, r8)
   12644:	00012565 	.word	0x00012565

00012648 <i2c_master_write_packet_job_no_stop>:
 * \retval STATUS_BUSY  If module is currently busy with another
 */
enum status_code i2c_master_write_packet_job_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12648:	b580      	push	{r7, lr}
   1264a:	b082      	sub	sp, #8
   1264c:	af00      	add	r7, sp, #0
   1264e:	6078      	str	r0, [r7, #4]
   12650:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12652:	687b      	ldr	r3, [r7, #4]
   12654:	8b9b      	ldrh	r3, [r3, #28]
   12656:	b29b      	uxth	r3, r3
   12658:	2b00      	cmp	r3, #0
   1265a:	d001      	beq.n	12660 <i2c_master_write_packet_job_no_stop+0x18>
		return STATUS_BUSY;
   1265c:	2305      	movs	r3, #5
   1265e:	e00c      	b.n	1267a <i2c_master_write_packet_job_no_stop+0x32>
	}

	/* Do not send stop condition when done */
	module->send_stop = false;
   12660:	687b      	ldr	r3, [r7, #4]
   12662:	2200      	movs	r2, #0
   12664:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12666:	687b      	ldr	r3, [r7, #4]
   12668:	2201      	movs	r2, #1
   1266a:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   1266c:	683a      	ldr	r2, [r7, #0]
   1266e:	687b      	ldr	r3, [r7, #4]
   12670:	0011      	movs	r1, r2
   12672:	0018      	movs	r0, r3
   12674:	4b03      	ldr	r3, [pc, #12]	; (12684 <i2c_master_write_packet_job_no_stop+0x3c>)
   12676:	4798      	blx	r3
   12678:	0003      	movs	r3, r0
}
   1267a:	0018      	movs	r0, r3
   1267c:	46bd      	mov	sp, r7
   1267e:	b002      	add	sp, #8
   12680:	bd80      	pop	{r7, pc}
   12682:	46c0      	nop			; (mov r8, r8)
   12684:	00012565 	.word	0x00012565

00012688 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12688:	b580      	push	{r7, lr}
   1268a:	b086      	sub	sp, #24
   1268c:	af00      	add	r7, sp, #0
   1268e:	0002      	movs	r2, r0
   12690:	1dfb      	adds	r3, r7, #7
   12692:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   12694:	1dfb      	adds	r3, r7, #7
   12696:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   12698:	4b93      	ldr	r3, [pc, #588]	; (128e8 <_i2c_master_interrupt_handler+0x260>)
   1269a:	0092      	lsls	r2, r2, #2
   1269c:	58d3      	ldr	r3, [r2, r3]
   1269e:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   126a0:	697b      	ldr	r3, [r7, #20]
   126a2:	681b      	ldr	r3, [r3, #0]
   126a4:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   126a6:	693b      	ldr	r3, [r7, #16]
   126a8:	681b      	ldr	r3, [r3, #0]
   126aa:	011b      	lsls	r3, r3, #4
   126ac:	0fdb      	lsrs	r3, r3, #31
   126ae:	b2db      	uxtb	r3, r3
   126b0:	001a      	movs	r2, r3
   126b2:	230f      	movs	r3, #15
   126b4:	18fb      	adds	r3, r7, r3
   126b6:	1e51      	subs	r1, r2, #1
   126b8:	418a      	sbcs	r2, r1
   126ba:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   126bc:	230e      	movs	r3, #14
   126be:	18fb      	adds	r3, r7, r3
   126c0:	697a      	ldr	r2, [r7, #20]
   126c2:	7e52      	ldrb	r2, [r2, #25]
   126c4:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   126c6:	697b      	ldr	r3, [r7, #20]
   126c8:	7e1b      	ldrb	r3, [r3, #24]
   126ca:	b2da      	uxtb	r2, r3
   126cc:	230e      	movs	r3, #14
   126ce:	18fb      	adds	r3, r7, r3
   126d0:	210e      	movs	r1, #14
   126d2:	1879      	adds	r1, r7, r1
   126d4:	7809      	ldrb	r1, [r1, #0]
   126d6:	400a      	ands	r2, r1
   126d8:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   126da:	697b      	ldr	r3, [r7, #20]
   126dc:	8b5b      	ldrh	r3, [r3, #26]
   126de:	b29b      	uxth	r3, r3
   126e0:	2b00      	cmp	r3, #0
   126e2:	d109      	bne.n	126f8 <_i2c_master_interrupt_handler+0x70>
   126e4:	697b      	ldr	r3, [r7, #20]
   126e6:	8b9b      	ldrh	r3, [r3, #28]
   126e8:	b29b      	uxth	r3, r3
   126ea:	2b00      	cmp	r3, #0
   126ec:	d004      	beq.n	126f8 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   126ee:	697b      	ldr	r3, [r7, #20]
   126f0:	0018      	movs	r0, r3
   126f2:	4b7e      	ldr	r3, [pc, #504]	; (128ec <_i2c_master_interrupt_handler+0x264>)
   126f4:	4798      	blx	r3
   126f6:	e070      	b.n	127da <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   126f8:	697b      	ldr	r3, [r7, #20]
   126fa:	8b5b      	ldrh	r3, [r3, #26]
   126fc:	b29b      	uxth	r3, r3
   126fe:	2b00      	cmp	r3, #0
   12700:	d039      	beq.n	12776 <_i2c_master_interrupt_handler+0xee>
   12702:	697b      	ldr	r3, [r7, #20]
   12704:	8b9b      	ldrh	r3, [r3, #28]
   12706:	b29b      	uxth	r3, r3
   12708:	2b00      	cmp	r3, #0
   1270a:	d134      	bne.n	12776 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   1270c:	697b      	ldr	r3, [r7, #20]
   1270e:	2225      	movs	r2, #37	; 0x25
   12710:	5c9b      	ldrb	r3, [r3, r2]
   12712:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12714:	2b05      	cmp	r3, #5
   12716:	d12e      	bne.n	12776 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12718:	697b      	ldr	r3, [r7, #20]
   1271a:	2224      	movs	r2, #36	; 0x24
   1271c:	5c9b      	ldrb	r3, [r3, r2]
   1271e:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12720:	2b00      	cmp	r3, #0
   12722:	d128      	bne.n	12776 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12724:	693b      	ldr	r3, [r7, #16]
   12726:	2203      	movs	r2, #3
   12728:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   1272a:	697b      	ldr	r3, [r7, #20]
   1272c:	2200      	movs	r2, #0
   1272e:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12730:	697b      	ldr	r3, [r7, #20]
   12732:	2225      	movs	r2, #37	; 0x25
   12734:	2100      	movs	r1, #0
   12736:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   12738:	697b      	ldr	r3, [r7, #20]
   1273a:	7a9b      	ldrb	r3, [r3, #10]
   1273c:	2b00      	cmp	r3, #0
   1273e:	d00b      	beq.n	12758 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12740:	697b      	ldr	r3, [r7, #20]
   12742:	0018      	movs	r0, r3
   12744:	4b6a      	ldr	r3, [pc, #424]	; (128f0 <_i2c_master_interrupt_handler+0x268>)
   12746:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12748:	693b      	ldr	r3, [r7, #16]
   1274a:	685b      	ldr	r3, [r3, #4]
   1274c:	22c0      	movs	r2, #192	; 0xc0
   1274e:	0292      	lsls	r2, r2, #10
   12750:	431a      	orrs	r2, r3
   12752:	693b      	ldr	r3, [r7, #16]
   12754:	605a      	str	r2, [r3, #4]
   12756:	e002      	b.n	1275e <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12758:	693b      	ldr	r3, [r7, #16]
   1275a:	2201      	movs	r2, #1
   1275c:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   1275e:	230e      	movs	r3, #14
   12760:	18fb      	adds	r3, r7, r3
   12762:	781b      	ldrb	r3, [r3, #0]
   12764:	2201      	movs	r2, #1
   12766:	4013      	ands	r3, r2
   12768:	d037      	beq.n	127da <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   1276a:	697b      	ldr	r3, [r7, #20]
   1276c:	68db      	ldr	r3, [r3, #12]
   1276e:	697a      	ldr	r2, [r7, #20]
   12770:	0010      	movs	r0, r2
   12772:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12774:	e031      	b.n	127da <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   12776:	697b      	ldr	r3, [r7, #20]
   12778:	8b5b      	ldrh	r3, [r3, #26]
   1277a:	b29b      	uxth	r3, r3
   1277c:	2b00      	cmp	r3, #0
   1277e:	d02c      	beq.n	127da <_i2c_master_interrupt_handler+0x152>
   12780:	697b      	ldr	r3, [r7, #20]
   12782:	8b9b      	ldrh	r3, [r3, #28]
   12784:	b29b      	uxth	r3, r3
   12786:	2b00      	cmp	r3, #0
   12788:	d027      	beq.n	127da <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   1278a:	693b      	ldr	r3, [r7, #16]
   1278c:	8b5b      	ldrh	r3, [r3, #26]
   1278e:	b29b      	uxth	r3, r3
   12790:	001a      	movs	r2, r3
   12792:	2320      	movs	r3, #32
   12794:	4013      	ands	r3, r2
   12796:	d111      	bne.n	127bc <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12798:	230f      	movs	r3, #15
   1279a:	18fb      	adds	r3, r7, r3
   1279c:	781b      	ldrb	r3, [r3, #0]
   1279e:	2201      	movs	r2, #1
   127a0:	4053      	eors	r3, r2
   127a2:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   127a4:	2b00      	cmp	r3, #0
   127a6:	d104      	bne.n	127b2 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   127a8:	697b      	ldr	r3, [r7, #20]
   127aa:	8b9b      	ldrh	r3, [r3, #28]
   127ac:	b29b      	uxth	r3, r3
   127ae:	2b01      	cmp	r3, #1
   127b0:	d004      	beq.n	127bc <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   127b2:	697b      	ldr	r3, [r7, #20]
   127b4:	2225      	movs	r2, #37	; 0x25
   127b6:	2141      	movs	r1, #65	; 0x41
   127b8:	5499      	strb	r1, [r3, r2]
   127ba:	e00e      	b.n	127da <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   127bc:	697b      	ldr	r3, [r7, #20]
   127be:	2224      	movs	r2, #36	; 0x24
   127c0:	5c9b      	ldrb	r3, [r3, r2]
   127c2:	b2db      	uxtb	r3, r3
   127c4:	2b00      	cmp	r3, #0
   127c6:	d104      	bne.n	127d2 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   127c8:	697b      	ldr	r3, [r7, #20]
   127ca:	0018      	movs	r0, r3
   127cc:	4b49      	ldr	r3, [pc, #292]	; (128f4 <_i2c_master_interrupt_handler+0x26c>)
   127ce:	4798      	blx	r3
   127d0:	e003      	b.n	127da <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   127d2:	697b      	ldr	r3, [r7, #20]
   127d4:	0018      	movs	r0, r3
   127d6:	4b48      	ldr	r3, [pc, #288]	; (128f8 <_i2c_master_interrupt_handler+0x270>)
   127d8:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   127da:	697b      	ldr	r3, [r7, #20]
   127dc:	8b5b      	ldrh	r3, [r3, #26]
   127de:	b29b      	uxth	r3, r3
   127e0:	2b00      	cmp	r3, #0
   127e2:	d047      	beq.n	12874 <_i2c_master_interrupt_handler+0x1ec>
   127e4:	697b      	ldr	r3, [r7, #20]
   127e6:	8b9b      	ldrh	r3, [r3, #28]
   127e8:	b29b      	uxth	r3, r3
   127ea:	2b00      	cmp	r3, #0
   127ec:	d142      	bne.n	12874 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   127ee:	697b      	ldr	r3, [r7, #20]
   127f0:	2225      	movs	r2, #37	; 0x25
   127f2:	5c9b      	ldrb	r3, [r3, r2]
   127f4:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   127f6:	2b05      	cmp	r3, #5
   127f8:	d13c      	bne.n	12874 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   127fa:	697b      	ldr	r3, [r7, #20]
   127fc:	2224      	movs	r2, #36	; 0x24
   127fe:	5c9b      	ldrb	r3, [r3, r2]
   12800:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12802:	2b01      	cmp	r3, #1
   12804:	d136      	bne.n	12874 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12806:	693b      	ldr	r3, [r7, #16]
   12808:	7e1b      	ldrb	r3, [r3, #24]
   1280a:	b2db      	uxtb	r3, r3
   1280c:	001a      	movs	r2, r3
   1280e:	2302      	movs	r3, #2
   12810:	4013      	ands	r3, r2
   12812:	d002      	beq.n	1281a <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12814:	693b      	ldr	r3, [r7, #16]
   12816:	2202      	movs	r2, #2
   12818:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   1281a:	693b      	ldr	r3, [r7, #16]
   1281c:	2203      	movs	r2, #3
   1281e:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   12820:	697b      	ldr	r3, [r7, #20]
   12822:	2200      	movs	r2, #0
   12824:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12826:	697b      	ldr	r3, [r7, #20]
   12828:	2225      	movs	r2, #37	; 0x25
   1282a:	2100      	movs	r1, #0
   1282c:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   1282e:	230e      	movs	r3, #14
   12830:	18fb      	adds	r3, r7, r3
   12832:	781b      	ldrb	r3, [r3, #0]
   12834:	2202      	movs	r2, #2
   12836:	4013      	ands	r3, r2
   12838:	d00b      	beq.n	12852 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   1283a:	697b      	ldr	r3, [r7, #20]
   1283c:	2224      	movs	r2, #36	; 0x24
   1283e:	5c9b      	ldrb	r3, [r3, r2]
   12840:	b2db      	uxtb	r3, r3
   12842:	2b01      	cmp	r3, #1
   12844:	d105      	bne.n	12852 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12846:	697b      	ldr	r3, [r7, #20]
   12848:	691b      	ldr	r3, [r3, #16]
   1284a:	697a      	ldr	r2, [r7, #20]
   1284c:	0010      	movs	r0, r2
   1284e:	4798      	blx	r3
   12850:	e010      	b.n	12874 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12852:	230e      	movs	r3, #14
   12854:	18fb      	adds	r3, r7, r3
   12856:	781b      	ldrb	r3, [r3, #0]
   12858:	2201      	movs	r2, #1
   1285a:	4013      	ands	r3, r2
   1285c:	d00a      	beq.n	12874 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   1285e:	697b      	ldr	r3, [r7, #20]
   12860:	2224      	movs	r2, #36	; 0x24
   12862:	5c9b      	ldrb	r3, [r3, r2]
   12864:	b2db      	uxtb	r3, r3
   12866:	2b00      	cmp	r3, #0
   12868:	d104      	bne.n	12874 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   1286a:	697b      	ldr	r3, [r7, #20]
   1286c:	68db      	ldr	r3, [r3, #12]
   1286e:	697a      	ldr	r2, [r7, #20]
   12870:	0010      	movs	r0, r2
   12872:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12874:	697b      	ldr	r3, [r7, #20]
   12876:	2225      	movs	r2, #37	; 0x25
   12878:	5c9b      	ldrb	r3, [r3, r2]
   1287a:	b2db      	uxtb	r3, r3
   1287c:	2b05      	cmp	r3, #5
   1287e:	d02e      	beq.n	128de <_i2c_master_interrupt_handler+0x256>
   12880:	697b      	ldr	r3, [r7, #20]
   12882:	2225      	movs	r2, #37	; 0x25
   12884:	5c9b      	ldrb	r3, [r3, r2]
   12886:	b2db      	uxtb	r3, r3
   12888:	2b00      	cmp	r3, #0
   1288a:	d028      	beq.n	128de <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   1288c:	693b      	ldr	r3, [r7, #16]
   1288e:	2203      	movs	r2, #3
   12890:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12892:	697b      	ldr	r3, [r7, #20]
   12894:	2200      	movs	r2, #0
   12896:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   12898:	697b      	ldr	r3, [r7, #20]
   1289a:	2200      	movs	r2, #0
   1289c:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1289e:	697b      	ldr	r3, [r7, #20]
   128a0:	2225      	movs	r2, #37	; 0x25
   128a2:	5c9b      	ldrb	r3, [r3, r2]
   128a4:	b2db      	uxtb	r3, r3
   128a6:	2b41      	cmp	r3, #65	; 0x41
   128a8:	d00e      	beq.n	128c8 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   128aa:	697b      	ldr	r3, [r7, #20]
   128ac:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   128ae:	2b00      	cmp	r3, #0
   128b0:	d00a      	beq.n	128c8 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   128b2:	697b      	ldr	r3, [r7, #20]
   128b4:	0018      	movs	r0, r3
   128b6:	4b0e      	ldr	r3, [pc, #56]	; (128f0 <_i2c_master_interrupt_handler+0x268>)
   128b8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   128ba:	693b      	ldr	r3, [r7, #16]
   128bc:	685b      	ldr	r3, [r3, #4]
   128be:	22e0      	movs	r2, #224	; 0xe0
   128c0:	02d2      	lsls	r2, r2, #11
   128c2:	431a      	orrs	r2, r3
   128c4:	693b      	ldr	r3, [r7, #16]
   128c6:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   128c8:	230e      	movs	r3, #14
   128ca:	18fb      	adds	r3, r7, r3
   128cc:	781b      	ldrb	r3, [r3, #0]
   128ce:	2204      	movs	r2, #4
   128d0:	4013      	ands	r3, r2
   128d2:	d004      	beq.n	128de <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   128d4:	697b      	ldr	r3, [r7, #20]
   128d6:	695b      	ldr	r3, [r3, #20]
   128d8:	697a      	ldr	r2, [r7, #20]
   128da:	0010      	movs	r0, r2
   128dc:	4798      	blx	r3
		}
	}
}
   128de:	46c0      	nop			; (mov r8, r8)
   128e0:	46bd      	mov	sp, r7
   128e2:	b006      	add	sp, #24
   128e4:	bd80      	pop	{r7, pc}
   128e6:	46c0      	nop			; (mov r8, r8)
   128e8:	20002f70 	.word	0x20002f70
   128ec:	000122c9 	.word	0x000122c9
   128f0:	00012139 	.word	0x00012139
   128f4:	0001224d 	.word	0x0001224d
   128f8:	0001215d 	.word	0x0001215d

000128fc <vCommandConsoleTask>:




void vCommandConsoleTask( void *pvParameters )
{
   128fc:	b580      	push	{r7, lr}
   128fe:	b088      	sub	sp, #32
   12900:	af00      	add	r7, sp, #0
   12902:	6078      	str	r0, [r7, #4]

uint8_t cRxedChar, cInputIndex = 0;
   12904:	231f      	movs	r3, #31
   12906:	18fb      	adds	r3, r7, r3
   12908:	2200      	movs	r2, #0
   1290a:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString( pcWelcomeMessage);
   1290c:	4b40      	ldr	r3, [pc, #256]	; (12a10 <vCommandConsoleTask+0x114>)
   1290e:	0018      	movs	r0, r3
   12910:	4b40      	ldr	r3, [pc, #256]	; (12a14 <vCommandConsoleTask+0x118>)
   12912:	4798      	blx	r3

    for( ;; )
    {
        /* This implementation reads a single character at a time.  Wait in the
        Blocked state until a character is received. */
        int recv = SerialConsoleReadCharacter(&cRxedChar);
   12914:	2313      	movs	r3, #19
   12916:	18fb      	adds	r3, r7, r3
   12918:	0018      	movs	r0, r3
   1291a:	4b3f      	ldr	r3, [pc, #252]	; (12a18 <vCommandConsoleTask+0x11c>)
   1291c:	4798      	blx	r3
   1291e:	0003      	movs	r3, r0
   12920:	61bb      	str	r3, [r7, #24]
		if(recv == -1) //If no characters in the buffer, thread goes to sleep for a while
   12922:	69bb      	ldr	r3, [r7, #24]
   12924:	3301      	adds	r3, #1
   12926:	d103      	bne.n	12930 <vCommandConsoleTask+0x34>
		{
			vTaskDelay( CLI_TASK_DELAY);
   12928:	2096      	movs	r0, #150	; 0x96
   1292a:	4b3c      	ldr	r3, [pc, #240]	; (12a1c <vCommandConsoleTask+0x120>)
   1292c:	4798      	blx	r3
   1292e:	e7f1      	b.n	12914 <vCommandConsoleTask+0x18>
		}else if( cRxedChar == '\n' )
   12930:	2313      	movs	r3, #19
   12932:	18fb      	adds	r3, r7, r3
   12934:	781b      	ldrb	r3, [r3, #0]
   12936:	2b0a      	cmp	r3, #10
   12938:	d121      	bne.n	1297e <vCommandConsoleTask+0x82>
        {
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString("\r\n");
   1293a:	4b39      	ldr	r3, [pc, #228]	; (12a20 <vCommandConsoleTask+0x124>)
   1293c:	0018      	movs	r0, r3
   1293e:	4b35      	ldr	r3, [pc, #212]	; (12a14 <vCommandConsoleTask+0x118>)
   12940:	4798      	blx	r3
            do
            {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
   12942:	4938      	ldr	r1, [pc, #224]	; (12a24 <vCommandConsoleTask+0x128>)
   12944:	4b38      	ldr	r3, [pc, #224]	; (12a28 <vCommandConsoleTask+0x12c>)
   12946:	2264      	movs	r2, #100	; 0x64
   12948:	0018      	movs	r0, r3
   1294a:	4b38      	ldr	r3, [pc, #224]	; (12a2c <vCommandConsoleTask+0x130>)
   1294c:	4798      	blx	r3
   1294e:	0003      	movs	r3, r0
   12950:	617b      	str	r3, [r7, #20]
                              );

                /* Write the output generated by the command interpreter to the
                console. */
				//Ensure it is null terminated
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   12952:	4b34      	ldr	r3, [pc, #208]	; (12a24 <vCommandConsoleTask+0x128>)
   12954:	2263      	movs	r2, #99	; 0x63
   12956:	2100      	movs	r1, #0
   12958:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   1295a:	4b32      	ldr	r3, [pc, #200]	; (12a24 <vCommandConsoleTask+0x128>)
   1295c:	0018      	movs	r0, r3
   1295e:	4b2d      	ldr	r3, [pc, #180]	; (12a14 <vCommandConsoleTask+0x118>)
   12960:	4798      	blx	r3

            } while( xMoreDataToFollow != pdFALSE );
   12962:	697b      	ldr	r3, [r7, #20]
   12964:	2b00      	cmp	r3, #0
   12966:	d1ec      	bne.n	12942 <vCommandConsoleTask+0x46>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   12968:	231f      	movs	r3, #31
   1296a:	18fb      	adds	r3, r7, r3
   1296c:	2200      	movs	r2, #0
   1296e:	701a      	strb	r2, [r3, #0]
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
   12970:	4b2d      	ldr	r3, [pc, #180]	; (12a28 <vCommandConsoleTask+0x12c>)
   12972:	2232      	movs	r2, #50	; 0x32
   12974:	2100      	movs	r1, #0
   12976:	0018      	movs	r0, r3
   12978:	4b2d      	ldr	r3, [pc, #180]	; (12a30 <vCommandConsoleTask+0x134>)
   1297a:	4798      	blx	r3
   1297c:	e7ca      	b.n	12914 <vCommandConsoleTask+0x18>
        {
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            if( cRxedChar == '\r' )
   1297e:	2313      	movs	r3, #19
   12980:	18fb      	adds	r3, r7, r3
   12982:	781b      	ldrb	r3, [r3, #0]
   12984:	2b0d      	cmp	r3, #13
   12986:	d0c5      	beq.n	12914 <vCommandConsoleTask+0x18>
            {
                /* Ignore carriage returns. */
            }
            else if( cRxedChar == ASCII_BACKSPACE || cRxedChar == ASCII_DELETE )
   12988:	2313      	movs	r3, #19
   1298a:	18fb      	adds	r3, r7, r3
   1298c:	781b      	ldrb	r3, [r3, #0]
   1298e:	2b08      	cmp	r3, #8
   12990:	d004      	beq.n	1299c <vCommandConsoleTask+0xa0>
   12992:	2313      	movs	r3, #19
   12994:	18fb      	adds	r3, r7, r3
   12996:	781b      	ldrb	r3, [r3, #0]
   12998:	2b7f      	cmp	r3, #127	; 0x7f
   1299a:	d11c      	bne.n	129d6 <vCommandConsoleTask+0xda>
            {
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
   1299c:	230c      	movs	r3, #12
   1299e:	18fb      	adds	r3, r7, r3
   129a0:	4a24      	ldr	r2, [pc, #144]	; (12a34 <vCommandConsoleTask+0x138>)
   129a2:	6812      	ldr	r2, [r2, #0]
   129a4:	601a      	str	r2, [r3, #0]
				SerialConsoleWriteString(erase);
   129a6:	230c      	movs	r3, #12
   129a8:	18fb      	adds	r3, r7, r3
   129aa:	0018      	movs	r0, r3
   129ac:	4b19      	ldr	r3, [pc, #100]	; (12a14 <vCommandConsoleTask+0x118>)
   129ae:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if( cInputIndex > 0 )
   129b0:	231f      	movs	r3, #31
   129b2:	18fb      	adds	r3, r7, r3
   129b4:	781b      	ldrb	r3, [r3, #0]
   129b6:	2b00      	cmp	r3, #0
   129b8:	d028      	beq.n	12a0c <vCommandConsoleTask+0x110>
                {
                    cInputIndex--;
   129ba:	231f      	movs	r3, #31
   129bc:	18fb      	adds	r3, r7, r3
   129be:	781a      	ldrb	r2, [r3, #0]
   129c0:	231f      	movs	r3, #31
   129c2:	18fb      	adds	r3, r7, r3
   129c4:	3a01      	subs	r2, #1
   129c6:	701a      	strb	r2, [r3, #0]
                    pcInputString[ cInputIndex ] = 0;
   129c8:	231f      	movs	r3, #31
   129ca:	18fb      	adds	r3, r7, r3
   129cc:	781b      	ldrb	r3, [r3, #0]
   129ce:	4a16      	ldr	r2, [pc, #88]	; (12a28 <vCommandConsoleTask+0x12c>)
   129d0:	2100      	movs	r1, #0
   129d2:	54d1      	strb	r1, [r2, r3]
            {
   129d4:	e01a      	b.n	12a0c <vCommandConsoleTask+0x110>
            {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
   129d6:	231f      	movs	r3, #31
   129d8:	18fb      	adds	r3, r7, r3
   129da:	781b      	ldrb	r3, [r3, #0]
   129dc:	2b31      	cmp	r3, #49	; 0x31
   129de:	d80f      	bhi.n	12a00 <vCommandConsoleTask+0x104>
                {
                    pcInputString[ cInputIndex ] = cRxedChar;
   129e0:	231f      	movs	r3, #31
   129e2:	18fb      	adds	r3, r7, r3
   129e4:	781b      	ldrb	r3, [r3, #0]
   129e6:	2213      	movs	r2, #19
   129e8:	18ba      	adds	r2, r7, r2
   129ea:	7812      	ldrb	r2, [r2, #0]
   129ec:	b251      	sxtb	r1, r2
   129ee:	4a0e      	ldr	r2, [pc, #56]	; (12a28 <vCommandConsoleTask+0x12c>)
   129f0:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   129f2:	231f      	movs	r3, #31
   129f4:	18fb      	adds	r3, r7, r3
   129f6:	781a      	ldrb	r2, [r3, #0]
   129f8:	231f      	movs	r3, #31
   129fa:	18fb      	adds	r3, r7, r3
   129fc:	3201      	adds	r2, #1
   129fe:	701a      	strb	r2, [r3, #0]
                }

					//Order Echo
					SerialConsoleWriteString(&cRxedChar);
   12a00:	2313      	movs	r3, #19
   12a02:	18fb      	adds	r3, r7, r3
   12a04:	0018      	movs	r0, r3
   12a06:	4b03      	ldr	r3, [pc, #12]	; (12a14 <vCommandConsoleTask+0x118>)
   12a08:	4798      	blx	r3
   12a0a:	e783      	b.n	12914 <vCommandConsoleTask+0x18>
            {
   12a0c:	46c0      	nop			; (mov r8, r8)
    {
   12a0e:	e781      	b.n	12914 <vCommandConsoleTask+0x18>
   12a10:	0001be0c 	.word	0x0001be0c
   12a14:	00016ba5 	.word	0x00016ba5
   12a18:	00016c41 	.word	0x00016c41
   12a1c:	00015539 	.word	0x00015539
   12a20:	0001be50 	.word	0x0001be50
   12a24:	200000c8 	.word	0x200000c8
   12a28:	20000094 	.word	0x20000094
   12a2c:	00013ec5 	.word	0x00013ec5
   12a30:	0001b573 	.word	0x0001b573
   12a34:	0001be54 	.word	0x0001be54

00012a38 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   12a38:	b580      	push	{r7, lr}
   12a3a:	b082      	sub	sp, #8
   12a3c:	af00      	add	r7, sp, #0
   12a3e:	0002      	movs	r2, r0
   12a40:	1dfb      	adds	r3, r7, #7
   12a42:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12a44:	4b06      	ldr	r3, [pc, #24]	; (12a60 <system_interrupt_enable+0x28>)
   12a46:	1dfa      	adds	r2, r7, #7
   12a48:	7812      	ldrb	r2, [r2, #0]
   12a4a:	0011      	movs	r1, r2
   12a4c:	221f      	movs	r2, #31
   12a4e:	400a      	ands	r2, r1
   12a50:	2101      	movs	r1, #1
   12a52:	4091      	lsls	r1, r2
   12a54:	000a      	movs	r2, r1
   12a56:	601a      	str	r2, [r3, #0]
}
   12a58:	46c0      	nop			; (mov r8, r8)
   12a5a:	46bd      	mov	sp, r7
   12a5c:	b002      	add	sp, #8
   12a5e:	bd80      	pop	{r7, pc}
   12a60:	e000e100 	.word	0xe000e100

00012a64 <i2c_master_is_syncing>:
{
   12a64:	b580      	push	{r7, lr}
   12a66:	b084      	sub	sp, #16
   12a68:	af00      	add	r7, sp, #0
   12a6a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   12a6c:	687b      	ldr	r3, [r7, #4]
   12a6e:	681b      	ldr	r3, [r3, #0]
   12a70:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   12a72:	68fb      	ldr	r3, [r7, #12]
   12a74:	69db      	ldr	r3, [r3, #28]
   12a76:	2207      	movs	r2, #7
   12a78:	4013      	ands	r3, r2
   12a7a:	1e5a      	subs	r2, r3, #1
   12a7c:	4193      	sbcs	r3, r2
   12a7e:	b2db      	uxtb	r3, r3
}
   12a80:	0018      	movs	r0, r3
   12a82:	46bd      	mov	sp, r7
   12a84:	b004      	add	sp, #16
   12a86:	bd80      	pop	{r7, pc}

00012a88 <_i2c_master_wait_for_sync>:
{
   12a88:	b580      	push	{r7, lr}
   12a8a:	b082      	sub	sp, #8
   12a8c:	af00      	add	r7, sp, #0
   12a8e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   12a90:	46c0      	nop			; (mov r8, r8)
   12a92:	687b      	ldr	r3, [r7, #4]
   12a94:	0018      	movs	r0, r3
   12a96:	4b04      	ldr	r3, [pc, #16]	; (12aa8 <_i2c_master_wait_for_sync+0x20>)
   12a98:	4798      	blx	r3
   12a9a:	1e03      	subs	r3, r0, #0
   12a9c:	d1f9      	bne.n	12a92 <_i2c_master_wait_for_sync+0xa>
}
   12a9e:	46c0      	nop			; (mov r8, r8)
   12aa0:	46bd      	mov	sp, r7
   12aa2:	b002      	add	sp, #8
   12aa4:	bd80      	pop	{r7, pc}
   12aa6:	46c0      	nop			; (mov r8, r8)
   12aa8:	00012a65 	.word	0x00012a65

00012aac <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   12aac:	b580      	push	{r7, lr}
   12aae:	b082      	sub	sp, #8
   12ab0:	af00      	add	r7, sp, #0
   12ab2:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   12ab4:	687b      	ldr	r3, [r7, #4]
   12ab6:	2264      	movs	r2, #100	; 0x64
   12ab8:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   12aba:	687b      	ldr	r3, [r7, #4]
   12abc:	4a1b      	ldr	r2, [pc, #108]	; (12b2c <i2c_master_get_config_defaults+0x80>)
   12abe:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   12ac0:	687b      	ldr	r3, [r7, #4]
   12ac2:	2200      	movs	r2, #0
   12ac4:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   12ac6:	687b      	ldr	r3, [r7, #4]
   12ac8:	2200      	movs	r2, #0
   12aca:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   12acc:	687b      	ldr	r3, [r7, #4]
   12ace:	2200      	movs	r2, #0
   12ad0:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   12ad2:	687b      	ldr	r3, [r7, #4]
   12ad4:	2280      	movs	r2, #128	; 0x80
   12ad6:	0392      	lsls	r2, r2, #14
   12ad8:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   12ada:	687b      	ldr	r3, [r7, #4]
   12adc:	2201      	movs	r2, #1
   12ade:	4252      	negs	r2, r2
   12ae0:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   12ae2:	687b      	ldr	r3, [r7, #4]
   12ae4:	2201      	movs	r2, #1
   12ae6:	4252      	negs	r2, r2
   12ae8:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   12aea:	687b      	ldr	r3, [r7, #4]
   12aec:	2200      	movs	r2, #0
   12aee:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   12af0:	687b      	ldr	r3, [r7, #4]
   12af2:	2200      	movs	r2, #0
   12af4:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   12af6:	687b      	ldr	r3, [r7, #4]
   12af8:	2224      	movs	r2, #36	; 0x24
   12afa:	2100      	movs	r1, #0
   12afc:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   12afe:	687b      	ldr	r3, [r7, #4]
   12b00:	2200      	movs	r2, #0
   12b02:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   12b04:	687b      	ldr	r3, [r7, #4]
   12b06:	222c      	movs	r2, #44	; 0x2c
   12b08:	2100      	movs	r1, #0
   12b0a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   12b0c:	687b      	ldr	r3, [r7, #4]
   12b0e:	222d      	movs	r2, #45	; 0x2d
   12b10:	2100      	movs	r1, #0
   12b12:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   12b14:	687b      	ldr	r3, [r7, #4]
   12b16:	222e      	movs	r2, #46	; 0x2e
   12b18:	2100      	movs	r1, #0
   12b1a:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   12b1c:	687b      	ldr	r3, [r7, #4]
   12b1e:	22d7      	movs	r2, #215	; 0xd7
   12b20:	861a      	strh	r2, [r3, #48]	; 0x30
}
   12b22:	46c0      	nop			; (mov r8, r8)
   12b24:	46bd      	mov	sp, r7
   12b26:	b002      	add	sp, #8
   12b28:	bd80      	pop	{r7, pc}
   12b2a:	46c0      	nop			; (mov r8, r8)
   12b2c:	00000d48 	.word	0x00000d48

00012b30 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   12b30:	b580      	push	{r7, lr}
   12b32:	b084      	sub	sp, #16
   12b34:	af00      	add	r7, sp, #0
   12b36:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12b38:	687b      	ldr	r3, [r7, #4]
   12b3a:	681b      	ldr	r3, [r3, #0]
   12b3c:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   12b3e:	2300      	movs	r3, #0
   12b40:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   12b42:	687b      	ldr	r3, [r7, #4]
   12b44:	0018      	movs	r0, r3
   12b46:	4b14      	ldr	r3, [pc, #80]	; (12b98 <i2c_master_enable+0x68>)
   12b48:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   12b4a:	68bb      	ldr	r3, [r7, #8]
   12b4c:	681b      	ldr	r3, [r3, #0]
   12b4e:	2202      	movs	r2, #2
   12b50:	431a      	orrs	r2, r3
   12b52:	68bb      	ldr	r3, [r7, #8]
   12b54:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   12b56:	687b      	ldr	r3, [r7, #4]
   12b58:	681b      	ldr	r3, [r3, #0]
   12b5a:	0018      	movs	r0, r3
   12b5c:	4b0f      	ldr	r3, [pc, #60]	; (12b9c <i2c_master_enable+0x6c>)
   12b5e:	4798      	blx	r3
   12b60:	0003      	movs	r3, r0
   12b62:	0018      	movs	r0, r3
   12b64:	4b0e      	ldr	r3, [pc, #56]	; (12ba0 <i2c_master_enable+0x70>)
   12b66:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   12b68:	e00c      	b.n	12b84 <i2c_master_enable+0x54>
		timeout_counter++;
   12b6a:	68fb      	ldr	r3, [r7, #12]
   12b6c:	3301      	adds	r3, #1
   12b6e:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   12b70:	687b      	ldr	r3, [r7, #4]
   12b72:	88db      	ldrh	r3, [r3, #6]
   12b74:	001a      	movs	r2, r3
   12b76:	68fb      	ldr	r3, [r7, #12]
   12b78:	429a      	cmp	r2, r3
   12b7a:	d803      	bhi.n	12b84 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   12b7c:	68bb      	ldr	r3, [r7, #8]
   12b7e:	2210      	movs	r2, #16
   12b80:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   12b82:	e006      	b.n	12b92 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   12b84:	68bb      	ldr	r3, [r7, #8]
   12b86:	8b5b      	ldrh	r3, [r3, #26]
   12b88:	b29b      	uxth	r3, r3
   12b8a:	001a      	movs	r2, r3
   12b8c:	2310      	movs	r3, #16
   12b8e:	4013      	ands	r3, r2
   12b90:	d0eb      	beq.n	12b6a <i2c_master_enable+0x3a>
		}
	}
}
   12b92:	46bd      	mov	sp, r7
   12b94:	b004      	add	sp, #16
   12b96:	bd80      	pop	{r7, pc}
   12b98:	00012a89 	.word	0x00012a89
   12b9c:	00017b05 	.word	0x00017b05
   12ba0:	00012a39 	.word	0x00012a39

00012ba4 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   12ba4:	b580      	push	{r7, lr}
   12ba6:	b082      	sub	sp, #8
   12ba8:	af00      	add	r7, sp, #0
   12baa:	6078      	str	r0, [r7, #4]
   12bac:	000a      	movs	r2, r1
   12bae:	1cfb      	adds	r3, r7, #3
   12bb0:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   12bb2:	687b      	ldr	r3, [r7, #4]
   12bb4:	7e5b      	ldrb	r3, [r3, #25]
   12bb6:	b2db      	uxtb	r3, r3
   12bb8:	b25a      	sxtb	r2, r3
   12bba:	1cfb      	adds	r3, r7, #3
   12bbc:	781b      	ldrb	r3, [r3, #0]
   12bbe:	2101      	movs	r1, #1
   12bc0:	4099      	lsls	r1, r3
   12bc2:	000b      	movs	r3, r1
   12bc4:	b25b      	sxtb	r3, r3
   12bc6:	4313      	orrs	r3, r2
   12bc8:	b25b      	sxtb	r3, r3
   12bca:	b2da      	uxtb	r2, r3
   12bcc:	687b      	ldr	r3, [r7, #4]
   12bce:	765a      	strb	r2, [r3, #25]
}
   12bd0:	46c0      	nop			; (mov r8, r8)
   12bd2:	46bd      	mov	sp, r7
   12bd4:	b002      	add	sp, #8
   12bd6:	bd80      	pop	{r7, pc}

00012bd8 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
* Forward Declarations
******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   12bd8:	b590      	push	{r4, r7, lr}
   12bda:	b091      	sub	sp, #68	; 0x44
   12bdc:	af00      	add	r7, sp, #0
	int32_t error = STATUS_OK;
   12bde:	2300      	movs	r3, #0
   12be0:	63fb      	str	r3, [r7, #60]	; 0x3c
	status_code_genare_t errCodeAsf = STATUS_OK;
   12be2:	233a      	movs	r3, #58	; 0x3a
   12be4:	18fb      	adds	r3, r7, r3
   12be6:	2200      	movs	r2, #0
   12be8:	701a      	strb	r2, [r3, #0]
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
   12bea:	1d3b      	adds	r3, r7, #4
   12bec:	0018      	movs	r0, r3
   12bee:	4b21      	ldr	r3, [pc, #132]	; (12c74 <I2cDriverConfigureSensorBus+0x9c>)
   12bf0:	4798      	blx	r3
	//config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_400KHZ;
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   12bf2:	1d3b      	adds	r3, r7, #4
   12bf4:	4a20      	ldr	r2, [pc, #128]	; (12c78 <I2cDriverConfigureSensorBus+0xa0>)
   12bf6:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   12bf8:	1d3b      	adds	r3, r7, #4
   12bfa:	4a20      	ldr	r2, [pc, #128]	; (12c7c <I2cDriverConfigureSensorBus+0xa4>)
   12bfc:	621a      	str	r2, [r3, #32]
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 1000;
   12bfe:	1d3b      	adds	r3, r7, #4
   12c00:	22fa      	movs	r2, #250	; 0xfa
   12c02:	0092      	lsls	r2, r2, #2
   12c04:	82da      	strh	r2, [r3, #22]
	/* Initialize and enable device with config. Try three times to initialize */
	
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
   12c06:	233b      	movs	r3, #59	; 0x3b
   12c08:	18fb      	adds	r3, r7, r3
   12c0a:	2203      	movs	r2, #3
   12c0c:	701a      	strb	r2, [r3, #0]
   12c0e:	e01e      	b.n	12c4e <I2cDriverConfigureSensorBus+0x76>
		errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   12c10:	233a      	movs	r3, #58	; 0x3a
   12c12:	18fc      	adds	r4, r7, r3
   12c14:	1d3a      	adds	r2, r7, #4
   12c16:	491a      	ldr	r1, [pc, #104]	; (12c80 <I2cDriverConfigureSensorBus+0xa8>)
   12c18:	4b1a      	ldr	r3, [pc, #104]	; (12c84 <I2cDriverConfigureSensorBus+0xac>)
   12c1a:	0018      	movs	r0, r3
   12c1c:	4b1a      	ldr	r3, [pc, #104]	; (12c88 <I2cDriverConfigureSensorBus+0xb0>)
   12c1e:	4798      	blx	r3
   12c20:	0003      	movs	r3, r0
   12c22:	7023      	strb	r3, [r4, #0]
		if(STATUS_OK == errCodeAsf){
   12c24:	233a      	movs	r3, #58	; 0x3a
   12c26:	18fb      	adds	r3, r7, r3
   12c28:	781b      	ldrb	r3, [r3, #0]
   12c2a:	2b00      	cmp	r3, #0
   12c2c:	d104      	bne.n	12c38 <I2cDriverConfigureSensorBus+0x60>
			error = errCodeAsf;
   12c2e:	233a      	movs	r3, #58	; 0x3a
   12c30:	18fb      	adds	r3, r7, r3
   12c32:	781b      	ldrb	r3, [r3, #0]
   12c34:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
   12c36:	e00f      	b.n	12c58 <I2cDriverConfigureSensorBus+0x80>
			}else{
			i2c_master_reset(&i2cSensorBusInstance);
   12c38:	4b12      	ldr	r3, [pc, #72]	; (12c84 <I2cDriverConfigureSensorBus+0xac>)
   12c3a:	0018      	movs	r0, r3
   12c3c:	4b13      	ldr	r3, [pc, #76]	; (12c8c <I2cDriverConfigureSensorBus+0xb4>)
   12c3e:	4798      	blx	r3
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
   12c40:	233b      	movs	r3, #59	; 0x3b
   12c42:	18fb      	adds	r3, r7, r3
   12c44:	781a      	ldrb	r2, [r3, #0]
   12c46:	233b      	movs	r3, #59	; 0x3b
   12c48:	18fb      	adds	r3, r7, r3
   12c4a:	3a01      	subs	r2, #1
   12c4c:	701a      	strb	r2, [r3, #0]
   12c4e:	233b      	movs	r3, #59	; 0x3b
   12c50:	18fb      	adds	r3, r7, r3
   12c52:	781b      	ldrb	r3, [r3, #0]
   12c54:	2b00      	cmp	r3, #0
   12c56:	d1db      	bne.n	12c10 <I2cDriverConfigureSensorBus+0x38>
		}
	}
	
	if(STATUS_OK != error) goto exit;
   12c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12c5a:	2b00      	cmp	r3, #0
   12c5c:	d104      	bne.n	12c68 <I2cDriverConfigureSensorBus+0x90>
	
	i2c_master_enable(&i2cSensorBusInstance);
   12c5e:	4b09      	ldr	r3, [pc, #36]	; (12c84 <I2cDriverConfigureSensorBus+0xac>)
   12c60:	0018      	movs	r0, r3
   12c62:	4b0b      	ldr	r3, [pc, #44]	; (12c90 <I2cDriverConfigureSensorBus+0xb8>)
   12c64:	4798      	blx	r3
   12c66:	e000      	b.n	12c6a <I2cDriverConfigureSensorBus+0x92>
	if(STATUS_OK != error) goto exit;
   12c68:	46c0      	nop			; (mov r8, r8)
	
	exit:
	return error;
   12c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   12c6c:	0018      	movs	r0, r3
   12c6e:	46bd      	mov	sp, r7
   12c70:	b011      	add	sp, #68	; 0x44
   12c72:	bd90      	pop	{r4, r7, pc}
   12c74:	00012aad 	.word	0x00012aad
   12c78:	00080002 	.word	0x00080002
   12c7c:	00090002 	.word	0x00090002
   12c80:	42000800 	.word	0x42000800
   12c84:	200029fc 	.word	0x200029fc
   12c88:	00013b25 	.word	0x00013b25
   12c8c:	00013c59 	.word	0x00013c59
   12c90:	00012b31 	.word	0x00012b31

00012c94 <I2cSensorsTxComplete>:
				and is currently waiting for a notification that it has finished.
 * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsTxComplete(struct i2c_master_module *const module){
   12c94:	b580      	push	{r7, lr}
   12c96:	b084      	sub	sp, #16
   12c98:	af00      	add	r7, sp, #0
   12c9a:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
   12c9c:	4b0e      	ldr	r3, [pc, #56]	; (12cd8 <I2cSensorsTxComplete+0x44>)
   12c9e:	2200      	movs	r2, #0
   12ca0:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.rxDoneFlag = true;			
   12ca2:	4b0d      	ldr	r3, [pc, #52]	; (12cd8 <I2cSensorsTxComplete+0x44>)
   12ca4:	2201      	movs	r2, #1
   12ca6:	609a      	str	r2, [r3, #8]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   12ca8:	2300      	movs	r3, #0
   12caa:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   12cac:	4b0b      	ldr	r3, [pc, #44]	; (12cdc <I2cSensorsTxComplete+0x48>)
   12cae:	681b      	ldr	r3, [r3, #0]
   12cb0:	220c      	movs	r2, #12
   12cb2:	18ba      	adds	r2, r7, r2
   12cb4:	0011      	movs	r1, r2
   12cb6:	0018      	movs	r0, r3
   12cb8:	4b09      	ldr	r3, [pc, #36]	; (12ce0 <I2cSensorsTxComplete+0x4c>)
   12cba:	4798      	blx	r3
	sensorTransmitError = false;
   12cbc:	4b09      	ldr	r3, [pc, #36]	; (12ce4 <I2cSensorsTxComplete+0x50>)
   12cbe:	2200      	movs	r2, #0
   12cc0:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   12cc2:	68fb      	ldr	r3, [r7, #12]
   12cc4:	2b00      	cmp	r3, #0
   12cc6:	d003      	beq.n	12cd0 <I2cSensorsTxComplete+0x3c>
   12cc8:	4b07      	ldr	r3, [pc, #28]	; (12ce8 <I2cSensorsTxComplete+0x54>)
   12cca:	2280      	movs	r2, #128	; 0x80
   12ccc:	0552      	lsls	r2, r2, #21
   12cce:	601a      	str	r2, [r3, #0]
}
   12cd0:	46c0      	nop			; (mov r8, r8)
   12cd2:	46bd      	mov	sp, r7
   12cd4:	b004      	add	sp, #16
   12cd6:	bd80      	pop	{r7, pc}
   12cd8:	20000130 	.word	0x20000130
   12cdc:	20002a24 	.word	0x20002a24
   12ce0:	00014a59 	.word	0x00014a59
   12ce4:	2000012c 	.word	0x2000012c
   12ce8:	e000ed04 	.word	0xe000ed04

00012cec <I2cSensorsRxComplete>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsRxComplete(struct i2c_master_module *const module){
   12cec:	b580      	push	{r7, lr}
   12cee:	b084      	sub	sp, #16
   12cf0:	af00      	add	r7, sp, #0
   12cf2:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
   12cf4:	4b0e      	ldr	r3, [pc, #56]	; (12d30 <I2cSensorsRxComplete+0x44>)
   12cf6:	2200      	movs	r2, #0
   12cf8:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.rxDoneFlag = true;
   12cfa:	4b0d      	ldr	r3, [pc, #52]	; (12d30 <I2cSensorsRxComplete+0x44>)
   12cfc:	2201      	movs	r2, #1
   12cfe:	609a      	str	r2, [r3, #8]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   12d00:	2300      	movs	r3, #0
   12d02:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   12d04:	4b0b      	ldr	r3, [pc, #44]	; (12d34 <I2cSensorsRxComplete+0x48>)
   12d06:	681b      	ldr	r3, [r3, #0]
   12d08:	220c      	movs	r2, #12
   12d0a:	18ba      	adds	r2, r7, r2
   12d0c:	0011      	movs	r1, r2
   12d0e:	0018      	movs	r0, r3
   12d10:	4b09      	ldr	r3, [pc, #36]	; (12d38 <I2cSensorsRxComplete+0x4c>)
   12d12:	4798      	blx	r3
	sensorTransmitError = false;
   12d14:	4b09      	ldr	r3, [pc, #36]	; (12d3c <I2cSensorsRxComplete+0x50>)
   12d16:	2200      	movs	r2, #0
   12d18:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   12d1a:	68fb      	ldr	r3, [r7, #12]
   12d1c:	2b00      	cmp	r3, #0
   12d1e:	d003      	beq.n	12d28 <I2cSensorsRxComplete+0x3c>
   12d20:	4b07      	ldr	r3, [pc, #28]	; (12d40 <I2cSensorsRxComplete+0x54>)
   12d22:	2280      	movs	r2, #128	; 0x80
   12d24:	0552      	lsls	r2, r2, #21
   12d26:	601a      	str	r2, [r3, #0]
}
   12d28:	46c0      	nop			; (mov r8, r8)
   12d2a:	46bd      	mov	sp, r7
   12d2c:	b004      	add	sp, #16
   12d2e:	bd80      	pop	{r7, pc}
   12d30:	20000130 	.word	0x20000130
   12d34:	20002a24 	.word	0x20002a24
   12d38:	00014a59 	.word	0x00014a59
   12d3c:	2000012c 	.word	0x2000012c
   12d40:	e000ed04 	.word	0xe000ed04

00012d44 <I2cSensorsError>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsError(struct i2c_master_module *const module){
   12d44:	b580      	push	{r7, lr}
   12d46:	b084      	sub	sp, #16
   12d48:	af00      	add	r7, sp, #0
   12d4a:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
   12d4c:	4b0e      	ldr	r3, [pc, #56]	; (12d88 <I2cSensorsError+0x44>)
   12d4e:	2200      	movs	r2, #0
   12d50:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.txDoneFlag = true;
   12d52:	4b0d      	ldr	r3, [pc, #52]	; (12d88 <I2cSensorsError+0x44>)
   12d54:	2201      	movs	r2, #1
   12d56:	605a      	str	r2, [r3, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   12d58:	2300      	movs	r3, #0
   12d5a:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   12d5c:	4b0b      	ldr	r3, [pc, #44]	; (12d8c <I2cSensorsError+0x48>)
   12d5e:	681b      	ldr	r3, [r3, #0]
   12d60:	220c      	movs	r2, #12
   12d62:	18ba      	adds	r2, r7, r2
   12d64:	0011      	movs	r1, r2
   12d66:	0018      	movs	r0, r3
   12d68:	4b09      	ldr	r3, [pc, #36]	; (12d90 <I2cSensorsError+0x4c>)
   12d6a:	4798      	blx	r3
	sensorTransmitError = false;
   12d6c:	4b09      	ldr	r3, [pc, #36]	; (12d94 <I2cSensorsError+0x50>)
   12d6e:	2200      	movs	r2, #0
   12d70:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   12d72:	68fb      	ldr	r3, [r7, #12]
   12d74:	2b00      	cmp	r3, #0
   12d76:	d003      	beq.n	12d80 <I2cSensorsError+0x3c>
   12d78:	4b07      	ldr	r3, [pc, #28]	; (12d98 <I2cSensorsError+0x54>)
   12d7a:	2280      	movs	r2, #128	; 0x80
   12d7c:	0552      	lsls	r2, r2, #21
   12d7e:	601a      	str	r2, [r3, #0]
}
   12d80:	46c0      	nop			; (mov r8, r8)
   12d82:	46bd      	mov	sp, r7
   12d84:	b004      	add	sp, #16
   12d86:	bd80      	pop	{r7, pc}
   12d88:	20000130 	.word	0x20000130
   12d8c:	20002a24 	.word	0x20002a24
   12d90:	00014a59 	.word	0x00014a59
   12d94:	2000012c 	.word	0x2000012c
   12d98:	e000ed04 	.word	0xe000ed04

00012d9c <I2cDriverRegisterSensorBusCallbacks>:



void I2cDriverRegisterSensorBusCallbacks(void)
{
   12d9c:	b580      	push	{r7, lr}
   12d9e:	af00      	add	r7, sp, #0
	/* Register callback function. */
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   12da0:	4911      	ldr	r1, [pc, #68]	; (12de8 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   12da2:	4b12      	ldr	r3, [pc, #72]	; (12dec <I2cDriverRegisterSensorBusCallbacks+0x50>)
   12da4:	2200      	movs	r2, #0
   12da6:	0018      	movs	r0, r3
   12da8:	4b11      	ldr	r3, [pc, #68]	; (12df0 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   12daa:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   12dac:	4b0f      	ldr	r3, [pc, #60]	; (12dec <I2cDriverRegisterSensorBusCallbacks+0x50>)
   12dae:	2100      	movs	r1, #0
   12db0:	0018      	movs	r0, r3
   12db2:	4b10      	ldr	r3, [pc, #64]	; (12df4 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   12db4:	4798      	blx	r3
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   12db6:	4910      	ldr	r1, [pc, #64]	; (12df8 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   12db8:	4b0c      	ldr	r3, [pc, #48]	; (12dec <I2cDriverRegisterSensorBusCallbacks+0x50>)
   12dba:	2201      	movs	r2, #1
   12dbc:	0018      	movs	r0, r3
   12dbe:	4b0c      	ldr	r3, [pc, #48]	; (12df0 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   12dc0:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_READ_COMPLETE);
   12dc2:	4b0a      	ldr	r3, [pc, #40]	; (12dec <I2cDriverRegisterSensorBusCallbacks+0x50>)
   12dc4:	2101      	movs	r1, #1
   12dc6:	0018      	movs	r0, r3
   12dc8:	4b0a      	ldr	r3, [pc, #40]	; (12df4 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   12dca:	4798      	blx	r3
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError,I2C_MASTER_CALLBACK_ERROR);
   12dcc:	490b      	ldr	r1, [pc, #44]	; (12dfc <I2cDriverRegisterSensorBusCallbacks+0x60>)
   12dce:	4b07      	ldr	r3, [pc, #28]	; (12dec <I2cDriverRegisterSensorBusCallbacks+0x50>)
   12dd0:	2202      	movs	r2, #2
   12dd2:	0018      	movs	r0, r3
   12dd4:	4b06      	ldr	r3, [pc, #24]	; (12df0 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   12dd6:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_ERROR);
   12dd8:	4b04      	ldr	r3, [pc, #16]	; (12dec <I2cDriverRegisterSensorBusCallbacks+0x50>)
   12dda:	2102      	movs	r1, #2
   12ddc:	0018      	movs	r0, r3
   12dde:	4b05      	ldr	r3, [pc, #20]	; (12df4 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   12de0:	4798      	blx	r3
}
   12de2:	46c0      	nop			; (mov r8, r8)
   12de4:	46bd      	mov	sp, r7
   12de6:	bd80      	pop	{r7, pc}
   12de8:	00012c95 	.word	0x00012c95
   12dec:	200029fc 	.word	0x200029fc
   12df0:	00012385 	.word	0x00012385
   12df4:	00012ba5 	.word	0x00012ba5
   12df8:	00012ced 	.word	0x00012ced
   12dfc:	00012d45 	.word	0x00012d45

00012e00 <I2cInitializeDriver>:
 * @fn			int32_t I2cInitializeDriver(void)
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note        
 *****************************************************************************/
 int32_t I2cInitializeDriver(void){
   12e00:	b580      	push	{r7, lr}
   12e02:	b082      	sub	sp, #8
   12e04:	af00      	add	r7, sp, #0
	
	int32_t error = STATUS_OK;
   12e06:	2300      	movs	r3, #0
   12e08:	607b      	str	r3, [r7, #4]


	error = I2cDriverConfigureSensorBus();
   12e0a:	4b14      	ldr	r3, [pc, #80]	; (12e5c <I2cInitializeDriver+0x5c>)
   12e0c:	4798      	blx	r3
   12e0e:	0003      	movs	r3, r0
   12e10:	607b      	str	r3, [r7, #4]
	if(STATUS_OK != error) goto exit;
   12e12:	687b      	ldr	r3, [r7, #4]
   12e14:	2b00      	cmp	r3, #0
   12e16:	d11a      	bne.n	12e4e <I2cInitializeDriver+0x4e>
	
	I2cDriverRegisterSensorBusCallbacks();
   12e18:	4b11      	ldr	r3, [pc, #68]	; (12e60 <I2cInitializeDriver+0x60>)
   12e1a:	4798      	blx	r3
	
		
	sensorI2cMutexHandle = xSemaphoreCreateMutex();
   12e1c:	2001      	movs	r0, #1
   12e1e:	4b11      	ldr	r3, [pc, #68]	; (12e64 <I2cInitializeDriver+0x64>)
   12e20:	4798      	blx	r3
   12e22:	0002      	movs	r2, r0
   12e24:	4b10      	ldr	r3, [pc, #64]	; (12e68 <I2cInitializeDriver+0x68>)
   12e26:	601a      	str	r2, [r3, #0]
	
	sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   12e28:	2203      	movs	r2, #3
   12e2a:	2100      	movs	r1, #0
   12e2c:	2001      	movs	r0, #1
   12e2e:	4b0f      	ldr	r3, [pc, #60]	; (12e6c <I2cInitializeDriver+0x6c>)
   12e30:	4798      	blx	r3
   12e32:	0002      	movs	r2, r0
   12e34:	4b0e      	ldr	r3, [pc, #56]	; (12e70 <I2cInitializeDriver+0x70>)
   12e36:	601a      	str	r2, [r3, #0]
	//xSemaphoreGive(sensorI2cSemaphoreHandle);

	
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
   12e38:	4b0b      	ldr	r3, [pc, #44]	; (12e68 <I2cInitializeDriver+0x68>)
   12e3a:	681b      	ldr	r3, [r3, #0]
   12e3c:	2b00      	cmp	r3, #0
   12e3e:	d003      	beq.n	12e48 <I2cInitializeDriver+0x48>
   12e40:	4b0b      	ldr	r3, [pc, #44]	; (12e70 <I2cInitializeDriver+0x70>)
   12e42:	681b      	ldr	r3, [r3, #0]
   12e44:	2b00      	cmp	r3, #0
   12e46:	d103      	bne.n	12e50 <I2cInitializeDriver+0x50>
		error = STATUS_SUSPEND;	//Could not initialize mutex!
   12e48:	2306      	movs	r3, #6
   12e4a:	607b      	str	r3, [r7, #4]
		goto exit;
   12e4c:	e000      	b.n	12e50 <I2cInitializeDriver+0x50>
	if(STATUS_OK != error) goto exit;
   12e4e:	46c0      	nop			; (mov r8, r8)
	}

	exit:
	return error;		
   12e50:	687b      	ldr	r3, [r7, #4]
}
   12e52:	0018      	movs	r0, r3
   12e54:	46bd      	mov	sp, r7
   12e56:	b002      	add	sp, #8
   12e58:	bd80      	pop	{r7, pc}
   12e5a:	46c0      	nop			; (mov r8, r8)
   12e5c:	00012bd9 	.word	0x00012bd9
   12e60:	00012d9d 	.word	0x00012d9d
   12e64:	00014719 	.word	0x00014719
   12e68:	200029f8 	.word	0x200029f8
   12e6c:	00014625 	.word	0x00014625
   12e70:	20002a24 	.word	0x20002a24

00012e74 <I2cWriteData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData(I2C_Data *data){
   12e74:	b590      	push	{r4, r7, lr}
   12e76:	b089      	sub	sp, #36	; 0x24
   12e78:	af00      	add	r7, sp, #0
   12e7a:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
   12e7c:	2300      	movs	r3, #0
   12e7e:	61fb      	str	r3, [r7, #28]
	enum status_code hwError;
	struct i2c_master_module *I2CBusHw = NULL;
   12e80:	2300      	movs	r3, #0
   12e82:	61bb      	str	r3, [r7, #24]
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
   12e84:	2300      	movs	r3, #0
   12e86:	617b      	str	r3, [r7, #20]
	struct i2c_master_packet *readPacket = NULL;
   12e88:	2300      	movs	r3, #0
   12e8a:	613b      	str	r3, [r7, #16]
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   12e8c:	687b      	ldr	r3, [r7, #4]
   12e8e:	2b00      	cmp	r3, #0
   12e90:	d003      	beq.n	12e9a <I2cWriteData+0x26>
   12e92:	687b      	ldr	r3, [r7, #4]
   12e94:	685b      	ldr	r3, [r3, #4]
   12e96:	2b00      	cmp	r3, #0
   12e98:	d103      	bne.n	12ea2 <I2cWriteData+0x2e>
		error = ERR_INVALID_ARG;
   12e9a:	2308      	movs	r3, #8
   12e9c:	425b      	negs	r3, r3
   12e9e:	61fb      	str	r3, [r7, #28]
		goto exit;
   12ea0:	e01f      	b.n	12ee2 <I2cWriteData+0x6e>
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
   12ea2:	687b      	ldr	r3, [r7, #4]
   12ea4:	781b      	ldrb	r3, [r3, #0]
   12ea6:	b29a      	uxth	r2, r3
   12ea8:	4b10      	ldr	r3, [pc, #64]	; (12eec <I2cWriteData+0x78>)
   12eaa:	801a      	strh	r2, [r3, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
   12eac:	687b      	ldr	r3, [r7, #4]
   12eae:	685a      	ldr	r2, [r3, #4]
   12eb0:	4b0e      	ldr	r3, [pc, #56]	; (12eec <I2cWriteData+0x78>)
   12eb2:	605a      	str	r2, [r3, #4]
	sensorPacketWrite.data_length = data->lenOut;
   12eb4:	687b      	ldr	r3, [r7, #4]
   12eb6:	89da      	ldrh	r2, [r3, #14]
   12eb8:	4b0c      	ldr	r3, [pc, #48]	; (12eec <I2cWriteData+0x78>)
   12eba:	805a      	strh	r2, [r3, #2]
	
	//Write

	hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   12ebc:	230f      	movs	r3, #15
   12ebe:	18fc      	adds	r4, r7, r3
   12ec0:	4a0a      	ldr	r2, [pc, #40]	; (12eec <I2cWriteData+0x78>)
   12ec2:	4b0b      	ldr	r3, [pc, #44]	; (12ef0 <I2cWriteData+0x7c>)
   12ec4:	0011      	movs	r1, r2
   12ec6:	0018      	movs	r0, r3
   12ec8:	4b0a      	ldr	r3, [pc, #40]	; (12ef4 <I2cWriteData+0x80>)
   12eca:	4798      	blx	r3
   12ecc:	0003      	movs	r3, r0
   12ece:	7023      	strb	r3, [r4, #0]
	
	if(STATUS_OK != hwError)
   12ed0:	230f      	movs	r3, #15
   12ed2:	18fb      	adds	r3, r7, r3
   12ed4:	781b      	ldrb	r3, [r3, #0]
   12ed6:	2b00      	cmp	r3, #0
   12ed8:	d003      	beq.n	12ee2 <I2cWriteData+0x6e>
	{
		error = ERROR_IO;
   12eda:	2306      	movs	r3, #6
   12edc:	425b      	negs	r3, r3
   12ede:	61fb      	str	r3, [r7, #28]
		goto exit;
   12ee0:	46c0      	nop			; (mov r8, r8)
	}
	
	exit:
	return error;
   12ee2:	69fb      	ldr	r3, [r7, #28]
}
   12ee4:	0018      	movs	r0, r3
   12ee6:	46bd      	mov	sp, r7
   12ee8:	b009      	add	sp, #36	; 0x24
   12eea:	bd90      	pop	{r4, r7, pc}
   12eec:	20002a28 	.word	0x20002a28
   12ef0:	200029fc 	.word	0x200029fc
   12ef4:	00012609 	.word	0x00012609

00012ef8 <I2cWriteData_No_Stop>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData_No_Stop(I2C_Data *data){
   12ef8:	b590      	push	{r4, r7, lr}
   12efa:	b089      	sub	sp, #36	; 0x24
   12efc:	af00      	add	r7, sp, #0
   12efe:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
   12f00:	2300      	movs	r3, #0
   12f02:	61fb      	str	r3, [r7, #28]
	enum status_code hwError;
	struct i2c_master_module *I2CBusHw = NULL;
   12f04:	2300      	movs	r3, #0
   12f06:	61bb      	str	r3, [r7, #24]
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
   12f08:	2300      	movs	r3, #0
   12f0a:	617b      	str	r3, [r7, #20]
	struct i2c_master_packet *readPacket = NULL;
   12f0c:	2300      	movs	r3, #0
   12f0e:	613b      	str	r3, [r7, #16]
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   12f10:	687b      	ldr	r3, [r7, #4]
   12f12:	2b00      	cmp	r3, #0
   12f14:	d003      	beq.n	12f1e <I2cWriteData_No_Stop+0x26>
   12f16:	687b      	ldr	r3, [r7, #4]
   12f18:	685b      	ldr	r3, [r3, #4]
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d103      	bne.n	12f26 <I2cWriteData_No_Stop+0x2e>
		error = ERR_INVALID_ARG;
   12f1e:	2308      	movs	r3, #8
   12f20:	425b      	negs	r3, r3
   12f22:	61fb      	str	r3, [r7, #28]
		goto exit;
   12f24:	e01f      	b.n	12f66 <I2cWriteData_No_Stop+0x6e>
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
   12f26:	687b      	ldr	r3, [r7, #4]
   12f28:	781b      	ldrb	r3, [r3, #0]
   12f2a:	b29a      	uxth	r2, r3
   12f2c:	4b10      	ldr	r3, [pc, #64]	; (12f70 <I2cWriteData_No_Stop+0x78>)
   12f2e:	801a      	strh	r2, [r3, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
   12f30:	687b      	ldr	r3, [r7, #4]
   12f32:	685a      	ldr	r2, [r3, #4]
   12f34:	4b0e      	ldr	r3, [pc, #56]	; (12f70 <I2cWriteData_No_Stop+0x78>)
   12f36:	605a      	str	r2, [r3, #4]
	sensorPacketWrite.data_length = data->lenOut;
   12f38:	687b      	ldr	r3, [r7, #4]
   12f3a:	89da      	ldrh	r2, [r3, #14]
   12f3c:	4b0c      	ldr	r3, [pc, #48]	; (12f70 <I2cWriteData_No_Stop+0x78>)
   12f3e:	805a      	strh	r2, [r3, #2]
	
	//Write

	hwError = i2c_master_write_packet_job_no_stop(&i2cSensorBusInstance, &sensorPacketWrite);
   12f40:	230f      	movs	r3, #15
   12f42:	18fc      	adds	r4, r7, r3
   12f44:	4a0a      	ldr	r2, [pc, #40]	; (12f70 <I2cWriteData_No_Stop+0x78>)
   12f46:	4b0b      	ldr	r3, [pc, #44]	; (12f74 <I2cWriteData_No_Stop+0x7c>)
   12f48:	0011      	movs	r1, r2
   12f4a:	0018      	movs	r0, r3
   12f4c:	4b0a      	ldr	r3, [pc, #40]	; (12f78 <I2cWriteData_No_Stop+0x80>)
   12f4e:	4798      	blx	r3
   12f50:	0003      	movs	r3, r0
   12f52:	7023      	strb	r3, [r4, #0]
	
	if(STATUS_OK != hwError)
   12f54:	230f      	movs	r3, #15
   12f56:	18fb      	adds	r3, r7, r3
   12f58:	781b      	ldrb	r3, [r3, #0]
   12f5a:	2b00      	cmp	r3, #0
   12f5c:	d003      	beq.n	12f66 <I2cWriteData_No_Stop+0x6e>
	{
		error = ERROR_IO;
   12f5e:	2306      	movs	r3, #6
   12f60:	425b      	negs	r3, r3
   12f62:	61fb      	str	r3, [r7, #28]
		goto exit;
   12f64:	46c0      	nop			; (mov r8, r8)
	}
	
	exit:
	return error;
   12f66:	69fb      	ldr	r3, [r7, #28]
}
   12f68:	0018      	movs	r0, r3
   12f6a:	46bd      	mov	sp, r7
   12f6c:	b009      	add	sp, #36	; 0x24
   12f6e:	bd90      	pop	{r4, r7, pc}
   12f70:	20002a28 	.word	0x20002a28
   12f74:	200029fc 	.word	0x200029fc
   12f78:	00012649 	.word	0x00012649

00012f7c <I2cReadData>:
 * @details     
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
int32_t I2cReadData(I2C_Data *data){
   12f7c:	b590      	push	{r4, r7, lr}
   12f7e:	b089      	sub	sp, #36	; 0x24
   12f80:	af00      	add	r7, sp, #0
   12f82:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
   12f84:	2300      	movs	r3, #0
   12f86:	61fb      	str	r3, [r7, #28]
	enum status_code hwError;
	struct i2c_master_module *I2CBusHw = NULL;
   12f88:	2300      	movs	r3, #0
   12f8a:	61bb      	str	r3, [r7, #24]
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
   12f8c:	2300      	movs	r3, #0
   12f8e:	617b      	str	r3, [r7, #20]
	struct i2c_master_packet *readPacket = NULL;
   12f90:	2300      	movs	r3, #0
   12f92:	613b      	str	r3, [r7, #16]
	
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   12f94:	687b      	ldr	r3, [r7, #4]
   12f96:	2b00      	cmp	r3, #0
   12f98:	d003      	beq.n	12fa2 <I2cReadData+0x26>
   12f9a:	687b      	ldr	r3, [r7, #4]
   12f9c:	685b      	ldr	r3, [r3, #4]
   12f9e:	2b00      	cmp	r3, #0
   12fa0:	d103      	bne.n	12faa <I2cReadData+0x2e>
		error = ERR_INVALID_ARG;
   12fa2:	2308      	movs	r3, #8
   12fa4:	425b      	negs	r3, r3
   12fa6:	61fb      	str	r3, [r7, #28]
		goto exit;
   12fa8:	e01f      	b.n	12fea <I2cReadData+0x6e>
	}

	//Prepare to read
	sensorPacketWrite.address = data->address;
   12faa:	687b      	ldr	r3, [r7, #4]
   12fac:	781b      	ldrb	r3, [r3, #0]
   12fae:	b29a      	uxth	r2, r3
   12fb0:	4b10      	ldr	r3, [pc, #64]	; (12ff4 <I2cReadData+0x78>)
   12fb2:	801a      	strh	r2, [r3, #0]
	sensorPacketWrite.data = data->msgIn;
   12fb4:	687b      	ldr	r3, [r7, #4]
   12fb6:	689a      	ldr	r2, [r3, #8]
   12fb8:	4b0e      	ldr	r3, [pc, #56]	; (12ff4 <I2cReadData+0x78>)
   12fba:	605a      	str	r2, [r3, #4]
	sensorPacketWrite.data_length = data->lenIn;
   12fbc:	687b      	ldr	r3, [r7, #4]
   12fbe:	899a      	ldrh	r2, [r3, #12]
   12fc0:	4b0c      	ldr	r3, [pc, #48]	; (12ff4 <I2cReadData+0x78>)
   12fc2:	805a      	strh	r2, [r3, #2]
	
	//Read

	hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   12fc4:	230f      	movs	r3, #15
   12fc6:	18fc      	adds	r4, r7, r3
   12fc8:	4a0a      	ldr	r2, [pc, #40]	; (12ff4 <I2cReadData+0x78>)
   12fca:	4b0b      	ldr	r3, [pc, #44]	; (12ff8 <I2cReadData+0x7c>)
   12fcc:	0011      	movs	r1, r2
   12fce:	0018      	movs	r0, r3
   12fd0:	4b0a      	ldr	r3, [pc, #40]	; (12ffc <I2cReadData+0x80>)
   12fd2:	4798      	blx	r3
   12fd4:	0003      	movs	r3, r0
   12fd6:	7023      	strb	r3, [r4, #0]
	
	if(STATUS_OK != hwError)
   12fd8:	230f      	movs	r3, #15
   12fda:	18fb      	adds	r3, r7, r3
   12fdc:	781b      	ldrb	r3, [r3, #0]
   12fde:	2b00      	cmp	r3, #0
   12fe0:	d003      	beq.n	12fea <I2cReadData+0x6e>
	{
		error = ERROR_IO;
   12fe2:	2306      	movs	r3, #6
   12fe4:	425b      	negs	r3, r3
   12fe6:	61fb      	str	r3, [r7, #28]
		goto exit;
   12fe8:	46c0      	nop			; (mov r8, r8)
	}
	
	exit:
	return error;
   12fea:	69fb      	ldr	r3, [r7, #28]
}
   12fec:	0018      	movs	r0, r3
   12fee:	46bd      	mov	sp, r7
   12ff0:	b009      	add	sp, #36	; 0x24
   12ff2:	bd90      	pop	{r4, r7, pc}
   12ff4:	20002a28 	.word	0x20002a28
   12ff8:	200029fc 	.word	0x200029fc
   12ffc:	00012525 	.word	0x00012525

00013000 <I2cFreeMutex>:
 * @details     
 * @param[out]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (ERROR_NONE) if the bus is ready, (ERROR_NOT_INITIALIZED) if it is busy.
 * @note        STUDENTS TO FILL OUT!
 *****************************************************************************/
int32_t I2cFreeMutex(void){
   13000:	b590      	push	{r4, r7, lr}
   13002:	b083      	sub	sp, #12
   13004:	af00      	add	r7, sp, #0
	
	int32_t error = ERROR_NONE;
   13006:	2300      	movs	r3, #0
   13008:	607b      	str	r3, [r7, #4]
	if(pdTRUE != xSemaphoreGive(sensorI2cMutexHandle))
   1300a:	4b09      	ldr	r3, [pc, #36]	; (13030 <I2cFreeMutex+0x30>)
   1300c:	6818      	ldr	r0, [r3, #0]
   1300e:	2300      	movs	r3, #0
   13010:	2200      	movs	r2, #0
   13012:	2100      	movs	r1, #0
   13014:	4c07      	ldr	r4, [pc, #28]	; (13034 <I2cFreeMutex+0x34>)
   13016:	47a0      	blx	r4
   13018:	0003      	movs	r3, r0
   1301a:	2b01      	cmp	r3, #1
   1301c:	d002      	beq.n	13024 <I2cFreeMutex+0x24>
	{
		error = ERROR_NOT_INITIALIZED;
   1301e:	2314      	movs	r3, #20
   13020:	425b      	negs	r3, r3
   13022:	607b      	str	r3, [r7, #4]
	}
	return error;
   13024:	687b      	ldr	r3, [r7, #4]
}
   13026:	0018      	movs	r0, r3
   13028:	46bd      	mov	sp, r7
   1302a:	b003      	add	sp, #12
   1302c:	bd90      	pop	{r4, r7, pc}
   1302e:	46c0      	nop			; (mov r8, r8)
   13030:	200029f8 	.word	0x200029f8
   13034:	00014759 	.word	0x00014759

00013038 <I2cGetMutex>:
 * @details     
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (ERROR_NONE) if we got the mutex, (ERROR_NOT_READY) if we time out before we got it
 * @note        
 *****************************************************************************/
int32_t I2cGetMutex(TickType_t waitTime){
   13038:	b580      	push	{r7, lr}
   1303a:	b084      	sub	sp, #16
   1303c:	af00      	add	r7, sp, #0
   1303e:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
   13040:	2300      	movs	r3, #0
   13042:	60fb      	str	r3, [r7, #12]
	if(pdTRUE != xSemaphoreTake(sensorI2cMutexHandle, waitTime))
   13044:	4b08      	ldr	r3, [pc, #32]	; (13068 <I2cGetMutex+0x30>)
   13046:	681b      	ldr	r3, [r3, #0]
   13048:	687a      	ldr	r2, [r7, #4]
   1304a:	0011      	movs	r1, r2
   1304c:	0018      	movs	r0, r3
   1304e:	4b07      	ldr	r3, [pc, #28]	; (1306c <I2cGetMutex+0x34>)
   13050:	4798      	blx	r3
   13052:	0003      	movs	r3, r0
   13054:	2b01      	cmp	r3, #1
   13056:	d002      	beq.n	1305e <I2cGetMutex+0x26>
	{
		error = ERROR_NOT_READY;
   13058:	231d      	movs	r3, #29
   1305a:	425b      	negs	r3, r3
   1305c:	60fb      	str	r3, [r7, #12]
	}
	return error;
   1305e:	68fb      	ldr	r3, [r7, #12]
}
   13060:	0018      	movs	r0, r3
   13062:	46bd      	mov	sp, r7
   13064:	b004      	add	sp, #16
   13066:	bd80      	pop	{r7, pc}
   13068:	200029f8 	.word	0x200029f8
   1306c:	00014cf9 	.word	0x00014cf9

00013070 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle){
   13070:	b580      	push	{r7, lr}
   13072:	b084      	sub	sp, #16
   13074:	af00      	add	r7, sp, #0
   13076:	6078      	str	r0, [r7, #4]
	int32_t error = ERROR_NONE;
   13078:	2300      	movs	r3, #0
   1307a:	60fb      	str	r3, [r7, #12]
	*handle = sensorI2cSemaphoreHandle;
   1307c:	4b04      	ldr	r3, [pc, #16]	; (13090 <I2cGetSemaphoreHandle+0x20>)
   1307e:	681a      	ldr	r2, [r3, #0]
   13080:	687b      	ldr	r3, [r7, #4]
   13082:	601a      	str	r2, [r3, #0]
	return error;
   13084:	68fb      	ldr	r3, [r7, #12]
}
   13086:	0018      	movs	r0, r3
   13088:	46bd      	mov	sp, r7
   1308a:	b004      	add	sp, #16
   1308c:	bd80      	pop	{r7, pc}
   1308e:	46c0      	nop			; (mov r8, r8)
   13090:	20002a24 	.word	0x20002a24

00013094 <I2cGetTaskErrorStatus>:
 * @brief       Sets the error state of the latest I2C bus transaction for a given I2C data, which holds which physical I2C bus we are using.
 * @details     This error flag is set to indicate when a I2C transaction has failed on a given I2C bus (encapsulated in the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
 static uint8_t I2cGetTaskErrorStatus(void){
   13094:	b580      	push	{r7, lr}
   13096:	af00      	add	r7, sp, #0
	 return sensorTransmitError;
   13098:	4b02      	ldr	r3, [pc, #8]	; (130a4 <I2cGetTaskErrorStatus+0x10>)
   1309a:	781b      	ldrb	r3, [r3, #0]
 }
   1309c:	0018      	movs	r0, r3
   1309e:	46bd      	mov	sp, r7
   130a0:	bd80      	pop	{r7, pc}
   130a2:	46c0      	nop			; (mov r8, r8)
   130a4:	2000012c 	.word	0x2000012c

000130a8 <I2cSetTaskErrorStatus>:
 * @details     This error flag is set to indicate when a I2C transaction has failed on a given I2C bus (encapsulated in the I2C data structure).
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
 static void I2cSetTaskErrorStatus(uint8_t value){
   130a8:	b580      	push	{r7, lr}
   130aa:	b082      	sub	sp, #8
   130ac:	af00      	add	r7, sp, #0
   130ae:	0002      	movs	r2, r0
   130b0:	1dfb      	adds	r3, r7, #7
   130b2:	701a      	strb	r2, [r3, #0]
	sensorTransmitError = value;
   130b4:	4b03      	ldr	r3, [pc, #12]	; (130c4 <I2cSetTaskErrorStatus+0x1c>)
   130b6:	1dfa      	adds	r2, r7, #7
   130b8:	7812      	ldrb	r2, [r2, #0]
   130ba:	701a      	strb	r2, [r3, #0]
 }
   130bc:	46c0      	nop			; (mov r8, r8)
   130be:	46bd      	mov	sp, r7
   130c0:	b002      	add	sp, #8
   130c2:	bd80      	pop	{r7, pc}
   130c4:	2000012c 	.word	0x2000012c

000130c8 <I2cWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime){
   130c8:	b580      	push	{r7, lr}
   130ca:	b084      	sub	sp, #16
   130cc:	af00      	add	r7, sp, #0
   130ce:	6078      	str	r0, [r7, #4]
   130d0:	6039      	str	r1, [r7, #0]

int32_t error = ERROR_NONE;
   130d2:	2300      	movs	r3, #0
   130d4:	60fb      	str	r3, [r7, #12]
SemaphoreHandle_t semHandle = NULL;
   130d6:	2300      	movs	r3, #0
   130d8:	60bb      	str	r3, [r7, #8]


//---0. Get Mutex
error = 0; //Students to fill out
   130da:	2300      	movs	r3, #0
   130dc:	60fb      	str	r3, [r7, #12]
error = I2cGetMutex(xMaxBlockTime);
   130de:	683b      	ldr	r3, [r7, #0]
   130e0:	0018      	movs	r0, r3
   130e2:	4b26      	ldr	r3, [pc, #152]	; (1317c <I2cWriteDataWait+0xb4>)
   130e4:	4798      	blx	r3
   130e6:	0003      	movs	r3, r0
   130e8:	60fb      	str	r3, [r7, #12]
if(ERROR_NONE != error) goto exit;
   130ea:	68fb      	ldr	r3, [r7, #12]
   130ec:	2b00      	cmp	r3, #0
   130ee:	d136      	bne.n	1315e <I2cWriteDataWait+0x96>


//---1. Get Semaphore Handle
error = I2cGetSemaphoreHandle(&semHandle);
   130f0:	2308      	movs	r3, #8
   130f2:	18fb      	adds	r3, r7, r3
   130f4:	0018      	movs	r0, r3
   130f6:	4b22      	ldr	r3, [pc, #136]	; (13180 <I2cWriteDataWait+0xb8>)
   130f8:	4798      	blx	r3
   130fa:	0003      	movs	r3, r0
   130fc:	60fb      	str	r3, [r7, #12]
if(ERROR_NONE != error) goto exit;
   130fe:	68fb      	ldr	r3, [r7, #12]
   13100:	2b00      	cmp	r3, #0
   13102:	d12e      	bne.n	13162 <I2cWriteDataWait+0x9a>

//---2. Initiate sending data

error = I2cWriteData(data);
   13104:	687b      	ldr	r3, [r7, #4]
   13106:	0018      	movs	r0, r3
   13108:	4b1e      	ldr	r3, [pc, #120]	; (13184 <I2cWriteDataWait+0xbc>)
   1310a:	4798      	blx	r3
   1310c:	0003      	movs	r3, r0
   1310e:	60fb      	str	r3, [r7, #12]
if (ERROR_NONE != error){
   13110:	68fb      	ldr	r3, [r7, #12]
   13112:	2b00      	cmp	r3, #0
   13114:	d128      	bne.n	13168 <I2cWriteDataWait+0xa0>
	goto exitError0;
}

//---2. Wait for binary semaphore to tell us that we are done!
if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   13116:	68bb      	ldr	r3, [r7, #8]
   13118:	683a      	ldr	r2, [r7, #0]
   1311a:	0011      	movs	r1, r2
   1311c:	0018      	movs	r0, r3
   1311e:	4b1a      	ldr	r3, [pc, #104]	; (13188 <I2cWriteDataWait+0xc0>)
   13120:	4798      	blx	r3
   13122:	0003      	movs	r3, r0
   13124:	2b01      	cmp	r3, #1
   13126:	d111      	bne.n	1314c <I2cWriteDataWait+0x84>
	/* The transmission ended as expected. We now delay until the I2C sensor is finished */
	if(I2cGetTaskErrorStatus()){
   13128:	4b18      	ldr	r3, [pc, #96]	; (1318c <I2cWriteDataWait+0xc4>)
   1312a:	4798      	blx	r3
   1312c:	1e03      	subs	r3, r0, #0
   1312e:	d011      	beq.n	13154 <I2cWriteDataWait+0x8c>
		I2cSetTaskErrorStatus(false);
   13130:	2000      	movs	r0, #0
   13132:	4b17      	ldr	r3, [pc, #92]	; (13190 <I2cWriteDataWait+0xc8>)
   13134:	4798      	blx	r3
		if(error != ERROR_NONE){
   13136:	68fb      	ldr	r3, [r7, #12]
   13138:	2b00      	cmp	r3, #0
   1313a:	d003      	beq.n	13144 <I2cWriteDataWait+0x7c>
    		error = ERROR_I2C_HANG_RESET;
   1313c:	2321      	movs	r3, #33	; 0x21
   1313e:	425b      	negs	r3, r3
   13140:	60fb      	str	r3, [r7, #12]
    	}else{
    		error = ERROR_ABORTED;
		}
		goto exitError0;
   13142:	e012      	b.n	1316a <I2cWriteDataWait+0xa2>
    		error = ERROR_ABORTED;
   13144:	2303      	movs	r3, #3
   13146:	425b      	negs	r3, r3
   13148:	60fb      	str	r3, [r7, #12]
		goto exitError0;
   1314a:	e00e      	b.n	1316a <I2cWriteDataWait+0xa2>
	}
}else{
	/* The call to ulTaskNotifyTake() timed out. */
	error = ERR_TIMEOUT;
   1314c:	2303      	movs	r3, #3
   1314e:	425b      	negs	r3, r3
   13150:	60fb      	str	r3, [r7, #12]
	goto exitError0;
   13152:	e00a      	b.n	1316a <I2cWriteDataWait+0xa2>
}

//---8. Release Mutex
error = I2cFreeMutex();
   13154:	4b0f      	ldr	r3, [pc, #60]	; (13194 <I2cWriteDataWait+0xcc>)
   13156:	4798      	blx	r3
   13158:	0003      	movs	r3, r0
   1315a:	60fb      	str	r3, [r7, #12]
   1315c:	e002      	b.n	13164 <I2cWriteDataWait+0x9c>
if(ERROR_NONE != error) goto exit;
   1315e:	46c0      	nop			; (mov r8, r8)
   13160:	e000      	b.n	13164 <I2cWriteDataWait+0x9c>
if(ERROR_NONE != error) goto exit;
   13162:	46c0      	nop			; (mov r8, r8)

exit:
return error;
   13164:	68fb      	ldr	r3, [r7, #12]
   13166:	e005      	b.n	13174 <I2cWriteDataWait+0xac>
	goto exitError0;
   13168:	46c0      	nop			; (mov r8, r8)

exitError0:
error = I2cFreeMutex();
   1316a:	4b0a      	ldr	r3, [pc, #40]	; (13194 <I2cWriteDataWait+0xcc>)
   1316c:	4798      	blx	r3
   1316e:	0003      	movs	r3, r0
   13170:	60fb      	str	r3, [r7, #12]

return error;
   13172:	68fb      	ldr	r3, [r7, #12]

}
   13174:	0018      	movs	r0, r3
   13176:	46bd      	mov	sp, r7
   13178:	b004      	add	sp, #16
   1317a:	bd80      	pop	{r7, pc}
   1317c:	00013039 	.word	0x00013039
   13180:	00013071 	.word	0x00013071
   13184:	00012e75 	.word	0x00012e75
   13188:	00014cf9 	.word	0x00014cf9
   1318c:	00013095 	.word	0x00013095
   13190:	000130a9 	.word	0x000130a9
   13194:	00013001 	.word	0x00013001

00013198 <I2cReadDataWait>:
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
				students to fill!
 *****************************************************************************/
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime){
   13198:	b580      	push	{r7, lr}
   1319a:	b086      	sub	sp, #24
   1319c:	af00      	add	r7, sp, #0
   1319e:	60f8      	str	r0, [r7, #12]
   131a0:	60b9      	str	r1, [r7, #8]
   131a2:	607a      	str	r2, [r7, #4]
	int32_t error = ERROR_NONE;
   131a4:	2300      	movs	r3, #0
   131a6:	617b      	str	r3, [r7, #20]
	SemaphoreHandle_t semHandle = NULL;
   131a8:	2300      	movs	r3, #0
   131aa:	613b      	str	r3, [r7, #16]
	

	//---0. Get Mutex
	//STUDENTS FILL
	error = 0;
   131ac:	2300      	movs	r3, #0
   131ae:	617b      	str	r3, [r7, #20]
	error = I2cGetMutex(xMaxBlockTime);
   131b0:	687b      	ldr	r3, [r7, #4]
   131b2:	0018      	movs	r0, r3
   131b4:	4b38      	ldr	r3, [pc, #224]	; (13298 <I2cReadDataWait+0x100>)
   131b6:	4798      	blx	r3
   131b8:	0003      	movs	r3, r0
   131ba:	617b      	str	r3, [r7, #20]
	if(ERROR_NONE != error) goto exit;
   131bc:	697b      	ldr	r3, [r7, #20]
   131be:	2b00      	cmp	r3, #0
   131c0:	d15b      	bne.n	1327a <I2cReadDataWait+0xe2>
	//---1. Get Semaphore Handle
	error = I2cGetSemaphoreHandle(&semHandle);
   131c2:	2310      	movs	r3, #16
   131c4:	18fb      	adds	r3, r7, r3
   131c6:	0018      	movs	r0, r3
   131c8:	4b34      	ldr	r3, [pc, #208]	; (1329c <I2cReadDataWait+0x104>)
   131ca:	4798      	blx	r3
   131cc:	0003      	movs	r3, r0
   131ce:	617b      	str	r3, [r7, #20]
	if(ERROR_NONE != error) goto exit;
   131d0:	697b      	ldr	r3, [r7, #20]
   131d2:	2b00      	cmp	r3, #0
   131d4:	d153      	bne.n	1327e <I2cReadDataWait+0xe6>
	//---2. Initiate sending data
	error = I2cWriteData_No_Stop(data);
   131d6:	68fb      	ldr	r3, [r7, #12]
   131d8:	0018      	movs	r0, r3
   131da:	4b31      	ldr	r3, [pc, #196]	; (132a0 <I2cReadDataWait+0x108>)
   131dc:	4798      	blx	r3
   131de:	0003      	movs	r3, r0
   131e0:	617b      	str	r3, [r7, #20]
	if (ERROR_NONE != error){
   131e2:	697b      	ldr	r3, [r7, #20]
   131e4:	2b00      	cmp	r3, #0
   131e6:	d14d      	bne.n	13284 <I2cReadDataWait+0xec>
		goto exitError0;
	}
	//---3. Wait for binary semaphore to tell us that we are done!
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   131e8:	693b      	ldr	r3, [r7, #16]
   131ea:	687a      	ldr	r2, [r7, #4]
   131ec:	0011      	movs	r1, r2
   131ee:	0018      	movs	r0, r3
   131f0:	4b2c      	ldr	r3, [pc, #176]	; (132a4 <I2cReadDataWait+0x10c>)
   131f2:	4798      	blx	r3
   131f4:	0003      	movs	r3, r0
   131f6:	2b01      	cmp	r3, #1
   131f8:	d111      	bne.n	1321e <I2cReadDataWait+0x86>
		/* The transmission ended as expected. We now delay until the I2C sensor is finished */
		if(I2cGetTaskErrorStatus()){
   131fa:	4b2b      	ldr	r3, [pc, #172]	; (132a8 <I2cReadDataWait+0x110>)
   131fc:	4798      	blx	r3
   131fe:	1e03      	subs	r3, r0, #0
   13200:	d011      	beq.n	13226 <I2cReadDataWait+0x8e>
			I2cSetTaskErrorStatus(false);
   13202:	2000      	movs	r0, #0
   13204:	4b29      	ldr	r3, [pc, #164]	; (132ac <I2cReadDataWait+0x114>)
   13206:	4798      	blx	r3
			if(error != ERROR_NONE){
   13208:	697b      	ldr	r3, [r7, #20]
   1320a:	2b00      	cmp	r3, #0
   1320c:	d003      	beq.n	13216 <I2cReadDataWait+0x7e>
				error = ERROR_I2C_HANG_RESET;
   1320e:	2321      	movs	r3, #33	; 0x21
   13210:	425b      	negs	r3, r3
   13212:	617b      	str	r3, [r7, #20]
				}else{
				error = ERROR_ABORTED;
			}
			goto exitError0;
   13214:	e037      	b.n	13286 <I2cReadDataWait+0xee>
				error = ERROR_ABORTED;
   13216:	2303      	movs	r3, #3
   13218:	425b      	negs	r3, r3
   1321a:	617b      	str	r3, [r7, #20]
			goto exitError0;
   1321c:	e033      	b.n	13286 <I2cReadDataWait+0xee>
		}
		}else{
		/* The call to ulTaskNotifyTake() timed out. */
		error = ERR_TIMEOUT;
   1321e:	2303      	movs	r3, #3
   13220:	425b      	negs	r3, r3
   13222:	617b      	str	r3, [r7, #20]
		goto exitError0;
   13224:	e02f      	b.n	13286 <I2cReadDataWait+0xee>
	}
	//---6. Initiate Read data //TIP: SEE "I2cReadData", which is analogous to "I2cWriteData"
	error = I2cReadData(data);
   13226:	68fb      	ldr	r3, [r7, #12]
   13228:	0018      	movs	r0, r3
   1322a:	4b21      	ldr	r3, [pc, #132]	; (132b0 <I2cReadDataWait+0x118>)
   1322c:	4798      	blx	r3
   1322e:	0003      	movs	r3, r0
   13230:	617b      	str	r3, [r7, #20]
	//---7. Wait for notification
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   13232:	693b      	ldr	r3, [r7, #16]
   13234:	687a      	ldr	r2, [r7, #4]
   13236:	0011      	movs	r1, r2
   13238:	0018      	movs	r0, r3
   1323a:	4b1a      	ldr	r3, [pc, #104]	; (132a4 <I2cReadDataWait+0x10c>)
   1323c:	4798      	blx	r3
   1323e:	0003      	movs	r3, r0
   13240:	2b01      	cmp	r3, #1
   13242:	d111      	bne.n	13268 <I2cReadDataWait+0xd0>
		/* The transmission ended as expected. We now delay until the I2C sensor is finished */
		if(I2cGetTaskErrorStatus()){
   13244:	4b18      	ldr	r3, [pc, #96]	; (132a8 <I2cReadDataWait+0x110>)
   13246:	4798      	blx	r3
   13248:	1e03      	subs	r3, r0, #0
   1324a:	d011      	beq.n	13270 <I2cReadDataWait+0xd8>
			I2cSetTaskErrorStatus(false);
   1324c:	2000      	movs	r0, #0
   1324e:	4b17      	ldr	r3, [pc, #92]	; (132ac <I2cReadDataWait+0x114>)
   13250:	4798      	blx	r3
			if(error != ERROR_NONE){
   13252:	697b      	ldr	r3, [r7, #20]
   13254:	2b00      	cmp	r3, #0
   13256:	d003      	beq.n	13260 <I2cReadDataWait+0xc8>
				error = ERROR_I2C_HANG_RESET;
   13258:	2321      	movs	r3, #33	; 0x21
   1325a:	425b      	negs	r3, r3
   1325c:	617b      	str	r3, [r7, #20]
				}else{
				error = ERROR_ABORTED;
			}
			goto exitError0;
   1325e:	e012      	b.n	13286 <I2cReadDataWait+0xee>
				error = ERROR_ABORTED;
   13260:	2303      	movs	r3, #3
   13262:	425b      	negs	r3, r3
   13264:	617b      	str	r3, [r7, #20]
			goto exitError0;
   13266:	e00e      	b.n	13286 <I2cReadDataWait+0xee>
		}
		}else{
		/* The call to ulTaskNotifyTake() timed out. */
		error = ERR_TIMEOUT;
   13268:	2303      	movs	r3, #3
   1326a:	425b      	negs	r3, r3
   1326c:	617b      	str	r3, [r7, #20]
		goto exitError0;
   1326e:	e00a      	b.n	13286 <I2cReadDataWait+0xee>
	}	

	
	//---8. Release Mutex
	error = I2cFreeMutex();
   13270:	4b10      	ldr	r3, [pc, #64]	; (132b4 <I2cReadDataWait+0x11c>)
   13272:	4798      	blx	r3
   13274:	0003      	movs	r3, r0
   13276:	617b      	str	r3, [r7, #20]
   13278:	e002      	b.n	13280 <I2cReadDataWait+0xe8>
	if(ERROR_NONE != error) goto exit;
   1327a:	46c0      	nop			; (mov r8, r8)
   1327c:	e000      	b.n	13280 <I2cReadDataWait+0xe8>
	if(ERROR_NONE != error) goto exit;
   1327e:	46c0      	nop			; (mov r8, r8)
	
	exit:
	return error;
   13280:	697b      	ldr	r3, [r7, #20]
   13282:	e005      	b.n	13290 <I2cReadDataWait+0xf8>
		goto exitError0;
   13284:	46c0      	nop			; (mov r8, r8)

	exitError0:
	error = I2cFreeMutex();
   13286:	4b0b      	ldr	r3, [pc, #44]	; (132b4 <I2cReadDataWait+0x11c>)
   13288:	4798      	blx	r3
   1328a:	0003      	movs	r3, r0
   1328c:	617b      	str	r3, [r7, #20]

	return error;
   1328e:	697b      	ldr	r3, [r7, #20]

	
}
   13290:	0018      	movs	r0, r3
   13292:	46bd      	mov	sp, r7
   13294:	b006      	add	sp, #24
   13296:	bd80      	pop	{r7, pc}
   13298:	00013039 	.word	0x00013039
   1329c:	00013071 	.word	0x00013071
   132a0:	00012ef9 	.word	0x00012ef9
   132a4:	00014cf9 	.word	0x00014cf9
   132a8:	00013095 	.word	0x00013095
   132ac:	000130a9 	.word	0x000130a9
   132b0:	00012f7d 	.word	0x00012f7d
   132b4:	00013001 	.word	0x00013001

000132b8 <VEML_Reset>:
* @return		STATUS_OK if ok
* @note
*****************************************************************************/

int32_t VEML_Reset(void)
{
   132b8:	b580      	push	{r7, lr}
   132ba:	b082      	sub	sp, #8
   132bc:	af00      	add	r7, sp, #0
	int32_t error = ERROR_NONE;
   132be:	2300      	movs	r3, #0
   132c0:	607b      	str	r3, [r7, #4]
	//ALS Gain:1
	//Integration time: 100ms
	//Interrupt disable
	//ALS power on
	msgOutlightbuffer[0] = 0x00;
   132c2:	4b21      	ldr	r3, [pc, #132]	; (13348 <VEML_Reset+0x90>)
   132c4:	2200      	movs	r2, #0
   132c6:	701a      	strb	r2, [r3, #0]
	msgOutlightbuffer[1] = 0x00;
   132c8:	4b1f      	ldr	r3, [pc, #124]	; (13348 <VEML_Reset+0x90>)
   132ca:	2200      	movs	r2, #0
   132cc:	705a      	strb	r2, [r3, #1]
	error = platform_write(ALS_CONF, msgOutlightbuffer,VemlWriteByteLen);
   132ce:	4b1e      	ldr	r3, [pc, #120]	; (13348 <VEML_Reset+0x90>)
   132d0:	2202      	movs	r2, #2
   132d2:	0019      	movs	r1, r3
   132d4:	2000      	movs	r0, #0
   132d6:	4b1d      	ldr	r3, [pc, #116]	; (1334c <VEML_Reset+0x94>)
   132d8:	4798      	blx	r3
   132da:	0003      	movs	r3, r0
   132dc:	607b      	str	r3, [r7, #4]
	error = platform_write(ALS_WH, msgOutlightbuffer,VemlWriteByteLen);
   132de:	4b1a      	ldr	r3, [pc, #104]	; (13348 <VEML_Reset+0x90>)
   132e0:	2202      	movs	r2, #2
   132e2:	0019      	movs	r1, r3
   132e4:	2001      	movs	r0, #1
   132e6:	4b19      	ldr	r3, [pc, #100]	; (1334c <VEML_Reset+0x94>)
   132e8:	4798      	blx	r3
   132ea:	0003      	movs	r3, r0
   132ec:	607b      	str	r3, [r7, #4]
	error = platform_write(ALS_WL, msgOutlightbuffer,VemlWriteByteLen);
   132ee:	4b16      	ldr	r3, [pc, #88]	; (13348 <VEML_Reset+0x90>)
   132f0:	2202      	movs	r2, #2
   132f2:	0019      	movs	r1, r3
   132f4:	2002      	movs	r0, #2
   132f6:	4b15      	ldr	r3, [pc, #84]	; (1334c <VEML_Reset+0x94>)
   132f8:	4798      	blx	r3
   132fa:	0003      	movs	r3, r0
   132fc:	607b      	str	r3, [r7, #4]
	error = platform_write(POWER_SAVING, msgOutlightbuffer,VemlWriteByteLen);
   132fe:	4b12      	ldr	r3, [pc, #72]	; (13348 <VEML_Reset+0x90>)
   13300:	2202      	movs	r2, #2
   13302:	0019      	movs	r1, r3
   13304:	2003      	movs	r0, #3
   13306:	4b11      	ldr	r3, [pc, #68]	; (1334c <VEML_Reset+0x94>)
   13308:	4798      	blx	r3
   1330a:	0003      	movs	r3, r0
   1330c:	607b      	str	r3, [r7, #4]
	error = platform_write(ALS, msgOutlightbuffer,VemlWriteByteLen);
   1330e:	4b0e      	ldr	r3, [pc, #56]	; (13348 <VEML_Reset+0x90>)
   13310:	2202      	movs	r2, #2
   13312:	0019      	movs	r1, r3
   13314:	2004      	movs	r0, #4
   13316:	4b0d      	ldr	r3, [pc, #52]	; (1334c <VEML_Reset+0x94>)
   13318:	4798      	blx	r3
   1331a:	0003      	movs	r3, r0
   1331c:	607b      	str	r3, [r7, #4]
	error = platform_write(WHITE, msgOutlightbuffer,VemlWriteByteLen);
   1331e:	4b0a      	ldr	r3, [pc, #40]	; (13348 <VEML_Reset+0x90>)
   13320:	2202      	movs	r2, #2
   13322:	0019      	movs	r1, r3
   13324:	2005      	movs	r0, #5
   13326:	4b09      	ldr	r3, [pc, #36]	; (1334c <VEML_Reset+0x94>)
   13328:	4798      	blx	r3
   1332a:	0003      	movs	r3, r0
   1332c:	607b      	str	r3, [r7, #4]
	error = platform_write(ALS_INT, msgOutlightbuffer,VemlWriteByteLen);
   1332e:	4b06      	ldr	r3, [pc, #24]	; (13348 <VEML_Reset+0x90>)
   13330:	2202      	movs	r2, #2
   13332:	0019      	movs	r1, r3
   13334:	2006      	movs	r0, #6
   13336:	4b05      	ldr	r3, [pc, #20]	; (1334c <VEML_Reset+0x94>)
   13338:	4798      	blx	r3
   1333a:	0003      	movs	r3, r0
   1333c:	607b      	str	r3, [r7, #4]
	return error;
   1333e:	687b      	ldr	r3, [r7, #4]
}
   13340:	0018      	movs	r0, r3
   13342:	46bd      	mov	sp, r7
   13344:	b002      	add	sp, #8
   13346:	bd80      	pop	{r7, pc}
   13348:	20002a54 	.word	0x20002a54
   1334c:	00013401 	.word	0x00013401

00013350 <VEML_Power_On>:
* @return		STATUS_OK if ok
* @note
*****************************************************************************/

int32_t VEML_Power_On(void)
{
   13350:	b580      	push	{r7, lr}
   13352:	b082      	sub	sp, #8
   13354:	af00      	add	r7, sp, #0
	int32_t error = ERROR_NONE;
   13356:	2300      	movs	r3, #0
   13358:	607b      	str	r3, [r7, #4]
	//ALS Gain:1
	//Integration time: 100ms
	//Interrupt disable
	//ALS power on
	msgOutlightbuffer[0] = 0x00;
   1335a:	4b09      	ldr	r3, [pc, #36]	; (13380 <VEML_Power_On+0x30>)
   1335c:	2200      	movs	r2, #0
   1335e:	701a      	strb	r2, [r3, #0]
	msgOutlightbuffer[1] = 0x08;
   13360:	4b07      	ldr	r3, [pc, #28]	; (13380 <VEML_Power_On+0x30>)
   13362:	2208      	movs	r2, #8
   13364:	705a      	strb	r2, [r3, #1]
	error = platform_write(ALS_CONF, msgOutlightbuffer,VemlWriteByteLen);
   13366:	4b06      	ldr	r3, [pc, #24]	; (13380 <VEML_Power_On+0x30>)
   13368:	2202      	movs	r2, #2
   1336a:	0019      	movs	r1, r3
   1336c:	2000      	movs	r0, #0
   1336e:	4b05      	ldr	r3, [pc, #20]	; (13384 <VEML_Power_On+0x34>)
   13370:	4798      	blx	r3
   13372:	0003      	movs	r3, r0
   13374:	607b      	str	r3, [r7, #4]
	return error;
   13376:	687b      	ldr	r3, [r7, #4]
}
   13378:	0018      	movs	r0, r3
   1337a:	46bd      	mov	sp, r7
   1337c:	b002      	add	sp, #8
   1337e:	bd80      	pop	{r7, pc}
   13380:	20002a54 	.word	0x20002a54
   13384:	00013401 	.word	0x00013401

00013388 <VEML_Power_Off>:
* @return		STATUS_OK if ok
* @note
*****************************************************************************/

int32_t VEML_Power_Off(void)
{
   13388:	b580      	push	{r7, lr}
   1338a:	b082      	sub	sp, #8
   1338c:	af00      	add	r7, sp, #0
	int32_t error = ERROR_NONE;
   1338e:	2300      	movs	r3, #0
   13390:	607b      	str	r3, [r7, #4]
	//ALS Gain:1
	//Integration time: 100ms
	//Interrupt disable
	//ALS power on
	msgOutlightbuffer[0] = 0x01;
   13392:	4b09      	ldr	r3, [pc, #36]	; (133b8 <VEML_Power_Off+0x30>)
   13394:	2201      	movs	r2, #1
   13396:	701a      	strb	r2, [r3, #0]
	msgOutlightbuffer[1] = 0x00;
   13398:	4b07      	ldr	r3, [pc, #28]	; (133b8 <VEML_Power_Off+0x30>)
   1339a:	2200      	movs	r2, #0
   1339c:	705a      	strb	r2, [r3, #1]
	error = platform_write(ALS_CONF, msgOutlightbuffer,VemlWriteByteLen);
   1339e:	4b06      	ldr	r3, [pc, #24]	; (133b8 <VEML_Power_Off+0x30>)
   133a0:	2202      	movs	r2, #2
   133a2:	0019      	movs	r1, r3
   133a4:	2000      	movs	r0, #0
   133a6:	4b05      	ldr	r3, [pc, #20]	; (133bc <VEML_Power_Off+0x34>)
   133a8:	4798      	blx	r3
   133aa:	0003      	movs	r3, r0
   133ac:	607b      	str	r3, [r7, #4]
	return error;
   133ae:	687b      	ldr	r3, [r7, #4]
}
   133b0:	0018      	movs	r0, r3
   133b2:	46bd      	mov	sp, r7
   133b4:	b002      	add	sp, #8
   133b6:	bd80      	pop	{r7, pc}
   133b8:	20002a54 	.word	0x20002a54
   133bc:	00013401 	.word	0x00013401

000133c0 <VEML_ReadALSData>:
* @return		STATUS_OK if ok
* @note
*****************************************************************************/

int32_t VEML_ReadALSData(uint32_t * readdata)
{
   133c0:	b580      	push	{r7, lr}
   133c2:	b084      	sub	sp, #16
   133c4:	af00      	add	r7, sp, #0
   133c6:	6078      	str	r0, [r7, #4]
	int32_t error = ERROR_NONE;
   133c8:	2300      	movs	r3, #0
   133ca:	60fb      	str	r3, [r7, #12]
	// Disable power_saving;
	error = platform_read(ALS, msgInlightbuffer,VemlReadByteLen);
   133cc:	4b0a      	ldr	r3, [pc, #40]	; (133f8 <VEML_ReadALSData+0x38>)
   133ce:	2202      	movs	r2, #2
   133d0:	0019      	movs	r1, r3
   133d2:	2004      	movs	r0, #4
   133d4:	4b09      	ldr	r3, [pc, #36]	; (133fc <VEML_ReadALSData+0x3c>)
   133d6:	4798      	blx	r3
   133d8:	0003      	movs	r3, r0
   133da:	60fb      	str	r3, [r7, #12]
	*readdata = (uint32_t)msgInlightbuffer[0] | ((uint32_t)msgInlightbuffer[1] <<8);
   133dc:	4b06      	ldr	r3, [pc, #24]	; (133f8 <VEML_ReadALSData+0x38>)
   133de:	781b      	ldrb	r3, [r3, #0]
   133e0:	001a      	movs	r2, r3
   133e2:	4b05      	ldr	r3, [pc, #20]	; (133f8 <VEML_ReadALSData+0x38>)
   133e4:	785b      	ldrb	r3, [r3, #1]
   133e6:	021b      	lsls	r3, r3, #8
   133e8:	431a      	orrs	r2, r3
   133ea:	687b      	ldr	r3, [r7, #4]
   133ec:	601a      	str	r2, [r3, #0]
	return error;
   133ee:	68fb      	ldr	r3, [r7, #12]
}
   133f0:	0018      	movs	r0, r3
   133f2:	46bd      	mov	sp, r7
   133f4:	b004      	add	sp, #16
   133f6:	bd80      	pop	{r7, pc}
   133f8:	20002a44 	.word	0x20002a44
   133fc:	00013475 	.word	0x00013475

00013400 <platform_write>:
* @return		STATUS_OK if ok
* @note         
*****************************************************************************/

static int32_t platform_write(uint8_t reg, uint8_t *bufp,uint16_t len)
{
   13400:	b580      	push	{r7, lr}
   13402:	b084      	sub	sp, #16
   13404:	af00      	add	r7, sp, #0
   13406:	6039      	str	r1, [r7, #0]
   13408:	0011      	movs	r1, r2
   1340a:	1dfb      	adds	r3, r7, #7
   1340c:	1c02      	adds	r2, r0, #0
   1340e:	701a      	strb	r2, [r3, #0]
   13410:	1d3b      	adds	r3, r7, #4
   13412:	1c0a      	adds	r2, r1, #0
   13414:	801a      	strh	r2, [r3, #0]
	int32_t error = ERROR_NONE;
   13416:	2300      	movs	r3, #0
   13418:	60fb      	str	r3, [r7, #12]
	light_data.address = VEML6030_I2C_ADDR_H;
   1341a:	4b11      	ldr	r3, [pc, #68]	; (13460 <platform_write+0x60>)
   1341c:	2248      	movs	r2, #72	; 0x48
   1341e:	701a      	strb	r2, [r3, #0]
	msgOutlight[0] = reg;
   13420:	4b10      	ldr	r3, [pc, #64]	; (13464 <platform_write+0x64>)
   13422:	1dfa      	adds	r2, r7, #7
   13424:	7812      	ldrb	r2, [r2, #0]
   13426:	701a      	strb	r2, [r3, #0]
	memcpy (msgOutlight+1, bufp, len);
   13428:	480f      	ldr	r0, [pc, #60]	; (13468 <platform_write+0x68>)
   1342a:	1d3b      	adds	r3, r7, #4
   1342c:	881a      	ldrh	r2, [r3, #0]
   1342e:	683b      	ldr	r3, [r7, #0]
   13430:	0019      	movs	r1, r3
   13432:	4b0e      	ldr	r3, [pc, #56]	; (1346c <platform_write+0x6c>)
   13434:	4798      	blx	r3
	light_data.lenOut = len +1;
   13436:	1d3b      	adds	r3, r7, #4
   13438:	881b      	ldrh	r3, [r3, #0]
   1343a:	3301      	adds	r3, #1
   1343c:	b29a      	uxth	r2, r3
   1343e:	4b08      	ldr	r3, [pc, #32]	; (13460 <platform_write+0x60>)
   13440:	81da      	strh	r2, [r3, #14]
	light_data.msgOut = &msgOutlight;
   13442:	4b07      	ldr	r3, [pc, #28]	; (13460 <platform_write+0x60>)
   13444:	4a07      	ldr	r2, [pc, #28]	; (13464 <platform_write+0x64>)
   13446:	605a      	str	r2, [r3, #4]
	error = I2cWriteDataWait(&light_data,100);
   13448:	4b05      	ldr	r3, [pc, #20]	; (13460 <platform_write+0x60>)
   1344a:	2164      	movs	r1, #100	; 0x64
   1344c:	0018      	movs	r0, r3
   1344e:	4b08      	ldr	r3, [pc, #32]	; (13470 <platform_write+0x70>)
   13450:	4798      	blx	r3
   13452:	0003      	movs	r3, r0
   13454:	60fb      	str	r3, [r7, #12]
	return error;
   13456:	68fb      	ldr	r3, [r7, #12]
}
   13458:	0018      	movs	r0, r3
   1345a:	46bd      	mov	sp, r7
   1345c:	b004      	add	sp, #16
   1345e:	bd80      	pop	{r7, pc}
   13460:	20002a34 	.word	0x20002a34
   13464:	20002a48 	.word	0x20002a48
   13468:	20002a49 	.word	0x20002a49
   1346c:	0001b53d 	.word	0x0001b53d
   13470:	000130c9 	.word	0x000130c9

00013474 <platform_read>:
* @param[in]	uint16_t len: number of bytes to send (the register address is not counted)
* @return		STATUS_OK if ok
* @note
*****************************************************************************/
static  int32_t platform_read(uint8_t reg, uint8_t *bufp, uint16_t len)
{
   13474:	b580      	push	{r7, lr}
   13476:	b084      	sub	sp, #16
   13478:	af00      	add	r7, sp, #0
   1347a:	6039      	str	r1, [r7, #0]
   1347c:	0011      	movs	r1, r2
   1347e:	1dfb      	adds	r3, r7, #7
   13480:	1c02      	adds	r2, r0, #0
   13482:	701a      	strb	r2, [r3, #0]
   13484:	1d3b      	adds	r3, r7, #4
   13486:	1c0a      	adds	r2, r1, #0
   13488:	801a      	strh	r2, [r3, #0]
	int32_t error = ERROR_NONE;
   1348a:	2300      	movs	r3, #0
   1348c:	60fb      	str	r3, [r7, #12]
	light_data.address = VEML6030_I2C_ADDR_H;
   1348e:	4b12      	ldr	r3, [pc, #72]	; (134d8 <platform_read+0x64>)
   13490:	2248      	movs	r2, #72	; 0x48
   13492:	701a      	strb	r2, [r3, #0]
	msgOutlight[0] = reg;
   13494:	4b11      	ldr	r3, [pc, #68]	; (134dc <platform_read+0x68>)
   13496:	1dfa      	adds	r2, r7, #7
   13498:	7812      	ldrb	r2, [r2, #0]
   1349a:	701a      	strb	r2, [r3, #0]
	msgOutlight[1] = 0;
   1349c:	4b0f      	ldr	r3, [pc, #60]	; (134dc <platform_read+0x68>)
   1349e:	2200      	movs	r2, #0
   134a0:	705a      	strb	r2, [r3, #1]
	light_data.lenOut = 1;
   134a2:	4b0d      	ldr	r3, [pc, #52]	; (134d8 <platform_read+0x64>)
   134a4:	2201      	movs	r2, #1
   134a6:	81da      	strh	r2, [r3, #14]
	light_data.msgOut = &msgOutlight;
   134a8:	4b0b      	ldr	r3, [pc, #44]	; (134d8 <platform_read+0x64>)
   134aa:	4a0c      	ldr	r2, [pc, #48]	; (134dc <platform_read+0x68>)
   134ac:	605a      	str	r2, [r3, #4]
	light_data.lenIn = len;
   134ae:	4b0a      	ldr	r3, [pc, #40]	; (134d8 <platform_read+0x64>)
   134b0:	1d3a      	adds	r2, r7, #4
   134b2:	8812      	ldrh	r2, [r2, #0]
   134b4:	819a      	strh	r2, [r3, #12]
	light_data.msgIn = bufp;
   134b6:	4b08      	ldr	r3, [pc, #32]	; (134d8 <platform_read+0x64>)
   134b8:	683a      	ldr	r2, [r7, #0]
   134ba:	609a      	str	r2, [r3, #8]
	error = I2cReadDataWait(&light_data, 5, 100);
   134bc:	4b06      	ldr	r3, [pc, #24]	; (134d8 <platform_read+0x64>)
   134be:	2264      	movs	r2, #100	; 0x64
   134c0:	2105      	movs	r1, #5
   134c2:	0018      	movs	r0, r3
   134c4:	4b06      	ldr	r3, [pc, #24]	; (134e0 <platform_read+0x6c>)
   134c6:	4798      	blx	r3
   134c8:	0003      	movs	r3, r0
   134ca:	60fb      	str	r3, [r7, #12]
	return error;
   134cc:	68fb      	ldr	r3, [r7, #12]
   134ce:	0018      	movs	r0, r3
   134d0:	46bd      	mov	sp, r7
   134d2:	b004      	add	sp, #16
   134d4:	bd80      	pop	{r7, pc}
   134d6:	46c0      	nop			; (mov r8, r8)
   134d8:	20002a34 	.word	0x20002a34
   134dc:	20002a48 	.word	0x20002a48
   134e0:	00013199 	.word	0x00013199

000134e4 <vSensorReadTask>:




void vSensorReadTask( void *pvParameters )
{
   134e4:	b580      	push	{r7, lr}
   134e6:	b086      	sub	sp, #24
   134e8:	af00      	add	r7, sp, #0
   134ea:	6078      	str	r0, [r7, #4]

/* The input and output buffers are declared static to keep them off the stack. */
	uint32_t lightdata = 0;
   134ec:	2300      	movs	r3, #0
   134ee:	60fb      	str	r3, [r7, #12]
	uint32_t powersaving = 0;
   134f0:	2300      	movs	r3, #0
   134f2:	617b      	str	r3, [r7, #20]
	uint32_t config = 0;
   134f4:	2300      	movs	r3, #0
   134f6:	613b      	str	r3, [r7, #16]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */
	//VEML_Power_Saving();
	//VEML_Filter_L_Threshold();
	delay_ms(100);
   134f8:	2064      	movs	r0, #100	; 0x64
   134fa:	4b11      	ldr	r3, [pc, #68]	; (13540 <vSensorReadTask+0x5c>)
   134fc:	4798      	blx	r3
	VEML_Reset();
   134fe:	4b11      	ldr	r3, [pc, #68]	; (13544 <vSensorReadTask+0x60>)
   13500:	4798      	blx	r3
	//VEML_Filter_H_Threshold();
	delay_ms(100);
   13502:	2064      	movs	r0, #100	; 0x64
   13504:	4b0e      	ldr	r3, [pc, #56]	; (13540 <vSensorReadTask+0x5c>)
   13506:	4798      	blx	r3
	//VEML_Power_Saving();
	delay_ms(100);
   13508:	2064      	movs	r0, #100	; 0x64
   1350a:	4b0d      	ldr	r3, [pc, #52]	; (13540 <vSensorReadTask+0x5c>)
   1350c:	4798      	blx	r3
    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString( pcWelcomeMessage);
   1350e:	4b0e      	ldr	r3, [pc, #56]	; (13548 <vSensorReadTask+0x64>)
   13510:	0018      	movs	r0, r3
   13512:	4b0e      	ldr	r3, [pc, #56]	; (1354c <vSensorReadTask+0x68>)
   13514:	4798      	blx	r3
	VEML_Power_On();
   13516:	4b0e      	ldr	r3, [pc, #56]	; (13550 <vSensorReadTask+0x6c>)
   13518:	4798      	blx	r3
// 		VEML_Read_Config(&config);
// 		snprintf(sensormsg, 15, "Config:%d\r\n", config);
// 		SerialConsoleWriteString(sensormsg);
// 		VEML_Power_On();
// 		vTaskDelay(1000);
		VEML_Power_On();
   1351a:	4b0d      	ldr	r3, [pc, #52]	; (13550 <vSensorReadTask+0x6c>)
   1351c:	4798      	blx	r3
 		vTaskDelay(200);
   1351e:	20c8      	movs	r0, #200	; 0xc8
   13520:	4b0c      	ldr	r3, [pc, #48]	; (13554 <vSensorReadTask+0x70>)
   13522:	4798      	blx	r3
// 		VEML_Read_Config(&config);
// 		snprintf(sensormsg, 15, "Config:%d\r\n", config);
// 		SerialConsoleWriteString(sensormsg);
/* 		vTaskDelay(500);*/
		VEML_ReadALSData(&lightdata);
   13524:	230c      	movs	r3, #12
   13526:	18fb      	adds	r3, r7, r3
   13528:	0018      	movs	r0, r3
   1352a:	4b0b      	ldr	r3, [pc, #44]	; (13558 <vSensorReadTask+0x74>)
   1352c:	4798      	blx	r3
// 		VEML_Power_Saving();
// 		vTaskDelay(500);
// 		VEML_Read_Power_Saving(&powersaving);
// 		snprintf(sensormsg, 15, "Power saving:%d\r\n", powersaving);
//		SerialConsoleWriteString(sensormsg);
		VEML_Power_Off();
   1352e:	4b0b      	ldr	r3, [pc, #44]	; (1355c <vSensorReadTask+0x78>)
   13530:	4798      	blx	r3

		vTaskDelay(1000);
   13532:	23fa      	movs	r3, #250	; 0xfa
   13534:	009b      	lsls	r3, r3, #2
   13536:	0018      	movs	r0, r3
   13538:	4b06      	ldr	r3, [pc, #24]	; (13554 <vSensorReadTask+0x70>)
   1353a:	4798      	blx	r3
		VEML_Power_On();
   1353c:	e7ed      	b.n	1351a <vSensorReadTask+0x36>
   1353e:	46c0      	nop			; (mov r8, r8)
   13540:	00016df9 	.word	0x00016df9
   13544:	000132b9 	.word	0x000132b9
   13548:	0001be58 	.word	0x0001be58
   1354c:	00016ba5 	.word	0x00016ba5
   13550:	00013351 	.word	0x00013351
   13554:	00015539 	.word	0x00015539
   13558:	000133c1 	.word	0x000133c1
   1355c:	00013389 	.word	0x00013389

00013560 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   13560:	b580      	push	{r7, lr}
   13562:	b082      	sub	sp, #8
   13564:	af00      	add	r7, sp, #0
   13566:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   13568:	687b      	ldr	r3, [r7, #4]
   1356a:	2200      	movs	r2, #0
   1356c:	701a      	strb	r2, [r3, #0]
}
   1356e:	46c0      	nop			; (mov r8, r8)
   13570:	46bd      	mov	sp, r7
   13572:	b002      	add	sp, #8
   13574:	bd80      	pop	{r7, pc}
	...

00013578 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   13578:	b580      	push	{r7, lr}
   1357a:	b082      	sub	sp, #8
   1357c:	af00      	add	r7, sp, #0
   1357e:	0002      	movs	r2, r0
   13580:	6039      	str	r1, [r7, #0]
   13582:	1dfb      	adds	r3, r7, #7
   13584:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13586:	1dfb      	adds	r3, r7, #7
   13588:	781b      	ldrb	r3, [r3, #0]
   1358a:	2b01      	cmp	r3, #1
   1358c:	d00a      	beq.n	135a4 <system_apb_clock_set_mask+0x2c>
   1358e:	2b02      	cmp	r3, #2
   13590:	d00f      	beq.n	135b2 <system_apb_clock_set_mask+0x3a>
   13592:	2b00      	cmp	r3, #0
   13594:	d114      	bne.n	135c0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   13596:	4b0e      	ldr	r3, [pc, #56]	; (135d0 <system_apb_clock_set_mask+0x58>)
   13598:	4a0d      	ldr	r2, [pc, #52]	; (135d0 <system_apb_clock_set_mask+0x58>)
   1359a:	6991      	ldr	r1, [r2, #24]
   1359c:	683a      	ldr	r2, [r7, #0]
   1359e:	430a      	orrs	r2, r1
   135a0:	619a      	str	r2, [r3, #24]
			break;
   135a2:	e00f      	b.n	135c4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   135a4:	4b0a      	ldr	r3, [pc, #40]	; (135d0 <system_apb_clock_set_mask+0x58>)
   135a6:	4a0a      	ldr	r2, [pc, #40]	; (135d0 <system_apb_clock_set_mask+0x58>)
   135a8:	69d1      	ldr	r1, [r2, #28]
   135aa:	683a      	ldr	r2, [r7, #0]
   135ac:	430a      	orrs	r2, r1
   135ae:	61da      	str	r2, [r3, #28]
			break;
   135b0:	e008      	b.n	135c4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   135b2:	4b07      	ldr	r3, [pc, #28]	; (135d0 <system_apb_clock_set_mask+0x58>)
   135b4:	4a06      	ldr	r2, [pc, #24]	; (135d0 <system_apb_clock_set_mask+0x58>)
   135b6:	6a11      	ldr	r1, [r2, #32]
   135b8:	683a      	ldr	r2, [r7, #0]
   135ba:	430a      	orrs	r2, r1
   135bc:	621a      	str	r2, [r3, #32]
			break;
   135be:	e001      	b.n	135c4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   135c0:	2317      	movs	r3, #23
   135c2:	e000      	b.n	135c6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   135c4:	2300      	movs	r3, #0
}
   135c6:	0018      	movs	r0, r3
   135c8:	46bd      	mov	sp, r7
   135ca:	b002      	add	sp, #8
   135cc:	bd80      	pop	{r7, pc}
   135ce:	46c0      	nop			; (mov r8, r8)
   135d0:	40000400 	.word	0x40000400

000135d4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   135d4:	b580      	push	{r7, lr}
   135d6:	b082      	sub	sp, #8
   135d8:	af00      	add	r7, sp, #0
   135da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   135dc:	687b      	ldr	r3, [r7, #4]
   135de:	2280      	movs	r2, #128	; 0x80
   135e0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   135e2:	687b      	ldr	r3, [r7, #4]
   135e4:	2200      	movs	r2, #0
   135e6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   135e8:	687b      	ldr	r3, [r7, #4]
   135ea:	2201      	movs	r2, #1
   135ec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   135ee:	687b      	ldr	r3, [r7, #4]
   135f0:	2200      	movs	r2, #0
   135f2:	70da      	strb	r2, [r3, #3]
}
   135f4:	46c0      	nop			; (mov r8, r8)
   135f6:	46bd      	mov	sp, r7
   135f8:	b002      	add	sp, #8
   135fa:	bd80      	pop	{r7, pc}

000135fc <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   135fc:	b580      	push	{r7, lr}
   135fe:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   13600:	4b05      	ldr	r3, [pc, #20]	; (13618 <system_is_debugger_present+0x1c>)
   13602:	789b      	ldrb	r3, [r3, #2]
   13604:	b2db      	uxtb	r3, r3
   13606:	001a      	movs	r2, r3
   13608:	2302      	movs	r3, #2
   1360a:	4013      	ands	r3, r2
   1360c:	1e5a      	subs	r2, r3, #1
   1360e:	4193      	sbcs	r3, r2
   13610:	b2db      	uxtb	r3, r3
}
   13612:	0018      	movs	r0, r3
   13614:	46bd      	mov	sp, r7
   13616:	bd80      	pop	{r7, pc}
   13618:	41002000 	.word	0x41002000

0001361c <system_interrupt_enter_critical_section>:
{
   1361c:	b580      	push	{r7, lr}
   1361e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   13620:	4b02      	ldr	r3, [pc, #8]	; (1362c <system_interrupt_enter_critical_section+0x10>)
   13622:	4798      	blx	r3
}
   13624:	46c0      	nop			; (mov r8, r8)
   13626:	46bd      	mov	sp, r7
   13628:	bd80      	pop	{r7, pc}
   1362a:	46c0      	nop			; (mov r8, r8)
   1362c:	00016e29 	.word	0x00016e29

00013630 <system_interrupt_leave_critical_section>:
{
   13630:	b580      	push	{r7, lr}
   13632:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   13634:	4b02      	ldr	r3, [pc, #8]	; (13640 <system_interrupt_leave_critical_section+0x10>)
   13636:	4798      	blx	r3
}
   13638:	46c0      	nop			; (mov r8, r8)
   1363a:	46bd      	mov	sp, r7
   1363c:	bd80      	pop	{r7, pc}
   1363e:	46c0      	nop			; (mov r8, r8)
   13640:	00016e7d 	.word	0x00016e7d

00013644 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   13644:	b580      	push	{r7, lr}
   13646:	b082      	sub	sp, #8
   13648:	af00      	add	r7, sp, #0
   1364a:	0002      	movs	r2, r0
   1364c:	1dfb      	adds	r3, r7, #7
   1364e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13650:	4a07      	ldr	r2, [pc, #28]	; (13670 <system_interrupt_disable+0x2c>)
   13652:	1dfb      	adds	r3, r7, #7
   13654:	781b      	ldrb	r3, [r3, #0]
   13656:	0019      	movs	r1, r3
   13658:	231f      	movs	r3, #31
   1365a:	400b      	ands	r3, r1
   1365c:	2101      	movs	r1, #1
   1365e:	4099      	lsls	r1, r3
   13660:	000b      	movs	r3, r1
   13662:	0019      	movs	r1, r3
   13664:	2380      	movs	r3, #128	; 0x80
   13666:	50d1      	str	r1, [r2, r3]
}
   13668:	46c0      	nop			; (mov r8, r8)
   1366a:	46bd      	mov	sp, r7
   1366c:	b002      	add	sp, #8
   1366e:	bd80      	pop	{r7, pc}
   13670:	e000e100 	.word	0xe000e100

00013674 <i2c_master_is_syncing>:
{
   13674:	b580      	push	{r7, lr}
   13676:	b084      	sub	sp, #16
   13678:	af00      	add	r7, sp, #0
   1367a:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   1367c:	687b      	ldr	r3, [r7, #4]
   1367e:	681b      	ldr	r3, [r3, #0]
   13680:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   13682:	68fb      	ldr	r3, [r7, #12]
   13684:	69db      	ldr	r3, [r3, #28]
   13686:	2207      	movs	r2, #7
   13688:	4013      	ands	r3, r2
   1368a:	1e5a      	subs	r2, r3, #1
   1368c:	4193      	sbcs	r3, r2
   1368e:	b2db      	uxtb	r3, r3
}
   13690:	0018      	movs	r0, r3
   13692:	46bd      	mov	sp, r7
   13694:	b004      	add	sp, #16
   13696:	bd80      	pop	{r7, pc}

00013698 <_i2c_master_wait_for_sync>:
{
   13698:	b580      	push	{r7, lr}
   1369a:	b082      	sub	sp, #8
   1369c:	af00      	add	r7, sp, #0
   1369e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   136a0:	46c0      	nop			; (mov r8, r8)
   136a2:	687b      	ldr	r3, [r7, #4]
   136a4:	0018      	movs	r0, r3
   136a6:	4b04      	ldr	r3, [pc, #16]	; (136b8 <_i2c_master_wait_for_sync+0x20>)
   136a8:	4798      	blx	r3
   136aa:	1e03      	subs	r3, r0, #0
   136ac:	d1f9      	bne.n	136a2 <_i2c_master_wait_for_sync+0xa>
}
   136ae:	46c0      	nop			; (mov r8, r8)
   136b0:	46bd      	mov	sp, r7
   136b2:	b002      	add	sp, #8
   136b4:	bd80      	pop	{r7, pc}
   136b6:	46c0      	nop			; (mov r8, r8)
   136b8:	00013675 	.word	0x00013675

000136bc <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   136bc:	b580      	push	{r7, lr}
   136be:	b084      	sub	sp, #16
   136c0:	af00      	add	r7, sp, #0
   136c2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   136c4:	687b      	ldr	r3, [r7, #4]
   136c6:	681b      	ldr	r3, [r3, #0]
   136c8:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   136ca:	687b      	ldr	r3, [r7, #4]
   136cc:	681b      	ldr	r3, [r3, #0]
   136ce:	0018      	movs	r0, r3
   136d0:	4b0d      	ldr	r3, [pc, #52]	; (13708 <i2c_master_disable+0x4c>)
   136d2:	4798      	blx	r3
   136d4:	0003      	movs	r3, r0
   136d6:	0018      	movs	r0, r3
   136d8:	4b0c      	ldr	r3, [pc, #48]	; (1370c <i2c_master_disable+0x50>)
   136da:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   136dc:	687b      	ldr	r3, [r7, #4]
   136de:	0018      	movs	r0, r3
   136e0:	4b0b      	ldr	r3, [pc, #44]	; (13710 <i2c_master_disable+0x54>)
   136e2:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   136e4:	68fb      	ldr	r3, [r7, #12]
   136e6:	2283      	movs	r2, #131	; 0x83
   136e8:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   136ea:	68fb      	ldr	r3, [r7, #12]
   136ec:	2283      	movs	r2, #131	; 0x83
   136ee:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   136f0:	68fb      	ldr	r3, [r7, #12]
   136f2:	681b      	ldr	r3, [r3, #0]
   136f4:	2202      	movs	r2, #2
   136f6:	4393      	bics	r3, r2
   136f8:	001a      	movs	r2, r3
   136fa:	68fb      	ldr	r3, [r7, #12]
   136fc:	601a      	str	r2, [r3, #0]

}
   136fe:	46c0      	nop			; (mov r8, r8)
   13700:	46bd      	mov	sp, r7
   13702:	b004      	add	sp, #16
   13704:	bd80      	pop	{r7, pc}
   13706:	46c0      	nop			; (mov r8, r8)
   13708:	00017b05 	.word	0x00017b05
   1370c:	00013645 	.word	0x00013645
   13710:	00013699 	.word	0x00013699

00013714 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   13714:	b5f0      	push	{r4, r5, r6, r7, lr}
   13716:	b097      	sub	sp, #92	; 0x5c
   13718:	af00      	add	r7, sp, #0
   1371a:	6178      	str	r0, [r7, #20]
   1371c:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   1371e:	2300      	movs	r3, #0
   13720:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   13722:	2300      	movs	r3, #0
   13724:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   13726:	2300      	movs	r3, #0
   13728:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   1372a:	233b      	movs	r3, #59	; 0x3b
   1372c:	2210      	movs	r2, #16
   1372e:	4694      	mov	ip, r2
   13730:	44bc      	add	ip, r7
   13732:	4463      	add	r3, ip
   13734:	2200      	movs	r2, #0
   13736:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13738:	697b      	ldr	r3, [r7, #20]
   1373a:	681b      	ldr	r3, [r3, #0]
   1373c:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   1373e:	697b      	ldr	r3, [r7, #20]
   13740:	681b      	ldr	r3, [r3, #0]
   13742:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   13744:	2323      	movs	r3, #35	; 0x23
   13746:	2210      	movs	r2, #16
   13748:	18ba      	adds	r2, r7, r2
   1374a:	18d4      	adds	r4, r2, r3
   1374c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1374e:	0018      	movs	r0, r3
   13750:	4bc0      	ldr	r3, [pc, #768]	; (13a54 <_i2c_master_set_config+0x340>)
   13752:	4798      	blx	r3
   13754:	0003      	movs	r3, r0
   13756:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   13758:	230c      	movs	r3, #12
   1375a:	2210      	movs	r2, #16
   1375c:	4694      	mov	ip, r2
   1375e:	44bc      	add	ip, r7
   13760:	4463      	add	r3, ip
   13762:	0018      	movs	r0, r3
   13764:	4bbc      	ldr	r3, [pc, #752]	; (13a58 <_i2c_master_set_config+0x344>)
   13766:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   13768:	693b      	ldr	r3, [r7, #16]
   1376a:	69db      	ldr	r3, [r3, #28]
   1376c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   1376e:	693b      	ldr	r3, [r7, #16]
   13770:	6a1b      	ldr	r3, [r3, #32]
   13772:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   13774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13776:	2b00      	cmp	r3, #0
   13778:	d106      	bne.n	13788 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   1377a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1377c:	2100      	movs	r1, #0
   1377e:	0018      	movs	r0, r3
   13780:	4bb6      	ldr	r3, [pc, #728]	; (13a5c <_i2c_master_set_config+0x348>)
   13782:	4798      	blx	r3
   13784:	0003      	movs	r3, r0
   13786:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   13788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1378a:	b2da      	uxtb	r2, r3
   1378c:	230c      	movs	r3, #12
   1378e:	2110      	movs	r1, #16
   13790:	468c      	mov	ip, r1
   13792:	44bc      	add	ip, r7
   13794:	4463      	add	r3, ip
   13796:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   13798:	230c      	movs	r3, #12
   1379a:	2210      	movs	r2, #16
   1379c:	4694      	mov	ip, r2
   1379e:	44bc      	add	ip, r7
   137a0:	4463      	add	r3, ip
   137a2:	2202      	movs	r2, #2
   137a4:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   137a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   137a8:	0c1b      	lsrs	r3, r3, #16
   137aa:	b2db      	uxtb	r3, r3
   137ac:	220c      	movs	r2, #12
   137ae:	2110      	movs	r1, #16
   137b0:	468c      	mov	ip, r1
   137b2:	44bc      	add	ip, r7
   137b4:	4462      	add	r2, ip
   137b6:	0011      	movs	r1, r2
   137b8:	0018      	movs	r0, r3
   137ba:	4ba9      	ldr	r3, [pc, #676]	; (13a60 <_i2c_master_set_config+0x34c>)
   137bc:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   137be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   137c0:	2b00      	cmp	r3, #0
   137c2:	d106      	bne.n	137d2 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   137c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   137c6:	2101      	movs	r1, #1
   137c8:	0018      	movs	r0, r3
   137ca:	4ba4      	ldr	r3, [pc, #656]	; (13a5c <_i2c_master_set_config+0x348>)
   137cc:	4798      	blx	r3
   137ce:	0003      	movs	r3, r0
   137d0:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   137d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   137d4:	b2da      	uxtb	r2, r3
   137d6:	230c      	movs	r3, #12
   137d8:	2110      	movs	r1, #16
   137da:	468c      	mov	ip, r1
   137dc:	44bc      	add	ip, r7
   137de:	4463      	add	r3, ip
   137e0:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   137e2:	230c      	movs	r3, #12
   137e4:	2210      	movs	r2, #16
   137e6:	4694      	mov	ip, r2
   137e8:	44bc      	add	ip, r7
   137ea:	4463      	add	r3, ip
   137ec:	2202      	movs	r2, #2
   137ee:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   137f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   137f2:	0c1b      	lsrs	r3, r3, #16
   137f4:	b2db      	uxtb	r3, r3
   137f6:	220c      	movs	r2, #12
   137f8:	2110      	movs	r1, #16
   137fa:	468c      	mov	ip, r1
   137fc:	44bc      	add	ip, r7
   137fe:	4462      	add	r2, ip
   13800:	0011      	movs	r1, r2
   13802:	0018      	movs	r0, r3
   13804:	4b96      	ldr	r3, [pc, #600]	; (13a60 <_i2c_master_set_config+0x34c>)
   13806:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   13808:	693b      	ldr	r3, [r7, #16]
   1380a:	8a9a      	ldrh	r2, [r3, #20]
   1380c:	697b      	ldr	r3, [r7, #20]
   1380e:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   13810:	693b      	ldr	r3, [r7, #16]
   13812:	8ada      	ldrh	r2, [r3, #22]
   13814:	697b      	ldr	r3, [r7, #20]
   13816:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   13818:	693b      	ldr	r3, [r7, #16]
   1381a:	7e1b      	ldrb	r3, [r3, #24]
   1381c:	2b00      	cmp	r3, #0
   1381e:	d103      	bne.n	13828 <_i2c_master_set_config+0x114>
   13820:	4b90      	ldr	r3, [pc, #576]	; (13a64 <_i2c_master_set_config+0x350>)
   13822:	4798      	blx	r3
   13824:	1e03      	subs	r3, r0, #0
   13826:	d002      	beq.n	1382e <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   13828:	2380      	movs	r3, #128	; 0x80
   1382a:	657b      	str	r3, [r7, #84]	; 0x54
   1382c:	e001      	b.n	13832 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   1382e:	2300      	movs	r3, #0
   13830:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   13832:	693b      	ldr	r3, [r7, #16]
   13834:	691b      	ldr	r3, [r3, #16]
   13836:	2b00      	cmp	r3, #0
   13838:	d004      	beq.n	13844 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   1383a:	693b      	ldr	r3, [r7, #16]
   1383c:	691b      	ldr	r3, [r3, #16]
   1383e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   13840:	4313      	orrs	r3, r2
   13842:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   13844:	693b      	ldr	r3, [r7, #16]
   13846:	689b      	ldr	r3, [r3, #8]
   13848:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1384a:	4313      	orrs	r3, r2
   1384c:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   1384e:	693b      	ldr	r3, [r7, #16]
   13850:	2224      	movs	r2, #36	; 0x24
   13852:	5c9b      	ldrb	r3, [r3, r2]
   13854:	2b00      	cmp	r3, #0
   13856:	d004      	beq.n	13862 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   13858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1385a:	2280      	movs	r2, #128	; 0x80
   1385c:	05d2      	lsls	r2, r2, #23
   1385e:	4313      	orrs	r3, r2
   13860:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   13862:	693b      	ldr	r3, [r7, #16]
   13864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13866:	2b00      	cmp	r3, #0
   13868:	d004      	beq.n	13874 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   1386a:	693b      	ldr	r3, [r7, #16]
   1386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1386e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   13870:	4313      	orrs	r3, r2
   13872:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   13874:	693b      	ldr	r3, [r7, #16]
   13876:	222c      	movs	r2, #44	; 0x2c
   13878:	5c9b      	ldrb	r3, [r3, r2]
   1387a:	2b00      	cmp	r3, #0
   1387c:	d105      	bne.n	1388a <_i2c_master_set_config+0x176>
   1387e:	693b      	ldr	r3, [r7, #16]
   13880:	689a      	ldr	r2, [r3, #8]
   13882:	2380      	movs	r3, #128	; 0x80
   13884:	049b      	lsls	r3, r3, #18
   13886:	429a      	cmp	r2, r3
   13888:	d104      	bne.n	13894 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   1388a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1388c:	2280      	movs	r2, #128	; 0x80
   1388e:	0512      	lsls	r2, r2, #20
   13890:	4313      	orrs	r3, r2
   13892:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   13894:	693b      	ldr	r3, [r7, #16]
   13896:	222d      	movs	r2, #45	; 0x2d
   13898:	5c9b      	ldrb	r3, [r3, r2]
   1389a:	2b00      	cmp	r3, #0
   1389c:	d004      	beq.n	138a8 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   1389e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   138a0:	2280      	movs	r2, #128	; 0x80
   138a2:	0412      	lsls	r2, r2, #16
   138a4:	4313      	orrs	r3, r2
   138a6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   138a8:	693b      	ldr	r3, [r7, #16]
   138aa:	222e      	movs	r2, #46	; 0x2e
   138ac:	5c9b      	ldrb	r3, [r3, r2]
   138ae:	2b00      	cmp	r3, #0
   138b0:	d004      	beq.n	138bc <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   138b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   138b4:	2280      	movs	r2, #128	; 0x80
   138b6:	03d2      	lsls	r2, r2, #15
   138b8:	4313      	orrs	r3, r2
   138ba:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   138bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   138be:	681a      	ldr	r2, [r3, #0]
   138c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   138c2:	431a      	orrs	r2, r3
   138c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   138c6:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   138c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   138ca:	2280      	movs	r2, #128	; 0x80
   138cc:	0052      	lsls	r2, r2, #1
   138ce:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   138d0:	2323      	movs	r3, #35	; 0x23
   138d2:	2210      	movs	r2, #16
   138d4:	4694      	mov	ip, r2
   138d6:	44bc      	add	ip, r7
   138d8:	4463      	add	r3, ip
   138da:	781b      	ldrb	r3, [r3, #0]
   138dc:	3314      	adds	r3, #20
   138de:	b2db      	uxtb	r3, r3
   138e0:	0018      	movs	r0, r3
   138e2:	4b61      	ldr	r3, [pc, #388]	; (13a68 <_i2c_master_set_config+0x354>)
   138e4:	4798      	blx	r3
   138e6:	0003      	movs	r3, r0
   138e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   138ea:	693b      	ldr	r3, [r7, #16]
   138ec:	681b      	ldr	r3, [r3, #0]
   138ee:	22fa      	movs	r2, #250	; 0xfa
   138f0:	0092      	lsls	r2, r2, #2
   138f2:	4353      	muls	r3, r2
   138f4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   138f6:	693b      	ldr	r3, [r7, #16]
   138f8:	685b      	ldr	r3, [r3, #4]
   138fa:	22fa      	movs	r2, #250	; 0xfa
   138fc:	0092      	lsls	r2, r2, #2
   138fe:	4353      	muls	r3, r2
   13900:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   13902:	693b      	ldr	r3, [r7, #16]
   13904:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   13906:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   13908:	4b58      	ldr	r3, [pc, #352]	; (13a6c <_i2c_master_set_config+0x358>)
   1390a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1390c:	4798      	blx	r3
   1390e:	0005      	movs	r5, r0
   13910:	000e      	movs	r6, r1
   13912:	4b56      	ldr	r3, [pc, #344]	; (13a6c <_i2c_master_set_config+0x358>)
   13914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13916:	4798      	blx	r3
   13918:	60b8      	str	r0, [r7, #8]
   1391a:	60f9      	str	r1, [r7, #12]
   1391c:	4b53      	ldr	r3, [pc, #332]	; (13a6c <_i2c_master_set_config+0x358>)
   1391e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13920:	4798      	blx	r3
   13922:	4c53      	ldr	r4, [pc, #332]	; (13a70 <_i2c_master_set_config+0x35c>)
   13924:	4a53      	ldr	r2, [pc, #332]	; (13a74 <_i2c_master_set_config+0x360>)
   13926:	4b54      	ldr	r3, [pc, #336]	; (13a78 <_i2c_master_set_config+0x364>)
   13928:	47a0      	blx	r4
   1392a:	0003      	movs	r3, r0
   1392c:	000c      	movs	r4, r1
   1392e:	603b      	str	r3, [r7, #0]
   13930:	607c      	str	r4, [r7, #4]
   13932:	4b4e      	ldr	r3, [pc, #312]	; (13a6c <_i2c_master_set_config+0x358>)
   13934:	6a38      	ldr	r0, [r7, #32]
   13936:	4798      	blx	r3
   13938:	0002      	movs	r2, r0
   1393a:	000b      	movs	r3, r1
   1393c:	4c4c      	ldr	r4, [pc, #304]	; (13a70 <_i2c_master_set_config+0x35c>)
   1393e:	6838      	ldr	r0, [r7, #0]
   13940:	6879      	ldr	r1, [r7, #4]
   13942:	47a0      	blx	r4
   13944:	0003      	movs	r3, r0
   13946:	000c      	movs	r4, r1
   13948:	0018      	movs	r0, r3
   1394a:	0021      	movs	r1, r4
   1394c:	4c4b      	ldr	r4, [pc, #300]	; (13a7c <_i2c_master_set_config+0x368>)
   1394e:	2200      	movs	r2, #0
   13950:	4b4b      	ldr	r3, [pc, #300]	; (13a80 <_i2c_master_set_config+0x36c>)
   13952:	47a0      	blx	r4
   13954:	0003      	movs	r3, r0
   13956:	000c      	movs	r4, r1
   13958:	001a      	movs	r2, r3
   1395a:	0023      	movs	r3, r4
   1395c:	4c44      	ldr	r4, [pc, #272]	; (13a70 <_i2c_master_set_config+0x35c>)
   1395e:	68b8      	ldr	r0, [r7, #8]
   13960:	68f9      	ldr	r1, [r7, #12]
   13962:	47a0      	blx	r4
   13964:	0003      	movs	r3, r0
   13966:	000c      	movs	r4, r1
   13968:	001a      	movs	r2, r3
   1396a:	0023      	movs	r3, r4
   1396c:	4c45      	ldr	r4, [pc, #276]	; (13a84 <_i2c_master_set_config+0x370>)
   1396e:	0028      	movs	r0, r5
   13970:	0031      	movs	r1, r6
   13972:	47a0      	blx	r4
   13974:	0003      	movs	r3, r0
   13976:	000c      	movs	r4, r1
   13978:	001d      	movs	r5, r3
   1397a:	0026      	movs	r6, r4
   1397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1397e:	005a      	lsls	r2, r3, #1
   13980:	4b3a      	ldr	r3, [pc, #232]	; (13a6c <_i2c_master_set_config+0x358>)
   13982:	0010      	movs	r0, r2
   13984:	4798      	blx	r3
   13986:	0002      	movs	r2, r0
   13988:	000b      	movs	r3, r1
   1398a:	4c3c      	ldr	r4, [pc, #240]	; (13a7c <_i2c_master_set_config+0x368>)
   1398c:	0028      	movs	r0, r5
   1398e:	0031      	movs	r1, r6
   13990:	47a0      	blx	r4
   13992:	0003      	movs	r3, r0
   13994:	000c      	movs	r4, r1
   13996:	0018      	movs	r0, r3
   13998:	0021      	movs	r1, r4
   1399a:	4c3a      	ldr	r4, [pc, #232]	; (13a84 <_i2c_master_set_config+0x370>)
   1399c:	2200      	movs	r2, #0
   1399e:	4b3a      	ldr	r3, [pc, #232]	; (13a88 <_i2c_master_set_config+0x374>)
   139a0:	47a0      	blx	r4
   139a2:	0003      	movs	r3, r0
   139a4:	000c      	movs	r4, r1
   139a6:	001d      	movs	r5, r3
   139a8:	0026      	movs	r6, r4
   139aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   139ac:	005a      	lsls	r2, r3, #1
   139ae:	4b2f      	ldr	r3, [pc, #188]	; (13a6c <_i2c_master_set_config+0x358>)
   139b0:	0010      	movs	r0, r2
   139b2:	4798      	blx	r3
   139b4:	0002      	movs	r2, r0
   139b6:	000b      	movs	r3, r1
   139b8:	4c34      	ldr	r4, [pc, #208]	; (13a8c <_i2c_master_set_config+0x378>)
   139ba:	0028      	movs	r0, r5
   139bc:	0031      	movs	r1, r6
   139be:	47a0      	blx	r4
   139c0:	0003      	movs	r3, r0
   139c2:	000c      	movs	r4, r1
   139c4:	0019      	movs	r1, r3
   139c6:	0022      	movs	r2, r4
   139c8:	4b31      	ldr	r3, [pc, #196]	; (13a90 <_i2c_master_set_config+0x37c>)
   139ca:	0008      	movs	r0, r1
   139cc:	0011      	movs	r1, r2
   139ce:	4798      	blx	r3
   139d0:	0003      	movs	r3, r0
   139d2:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   139d4:	693b      	ldr	r3, [r7, #16]
   139d6:	689a      	ldr	r2, [r3, #8]
   139d8:	2380      	movs	r3, #128	; 0x80
   139da:	049b      	lsls	r3, r3, #18
   139dc:	429a      	cmp	r2, r3
   139de:	d16a      	bne.n	13ab6 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   139e0:	4b22      	ldr	r3, [pc, #136]	; (13a6c <_i2c_master_set_config+0x358>)
   139e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   139e4:	4798      	blx	r3
   139e6:	4c25      	ldr	r4, [pc, #148]	; (13a7c <_i2c_master_set_config+0x368>)
   139e8:	0002      	movs	r2, r0
   139ea:	000b      	movs	r3, r1
   139ec:	47a0      	blx	r4
   139ee:	0003      	movs	r3, r0
   139f0:	000c      	movs	r4, r1
   139f2:	001d      	movs	r5, r3
   139f4:	0026      	movs	r6, r4
   139f6:	4b1d      	ldr	r3, [pc, #116]	; (13a6c <_i2c_master_set_config+0x358>)
   139f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
   139fa:	4798      	blx	r3
   139fc:	4c1c      	ldr	r4, [pc, #112]	; (13a70 <_i2c_master_set_config+0x35c>)
   139fe:	2200      	movs	r2, #0
   13a00:	4b24      	ldr	r3, [pc, #144]	; (13a94 <_i2c_master_set_config+0x380>)
   13a02:	47a0      	blx	r4
   13a04:	0003      	movs	r3, r0
   13a06:	000c      	movs	r4, r1
   13a08:	001a      	movs	r2, r3
   13a0a:	0023      	movs	r3, r4
   13a0c:	4c1f      	ldr	r4, [pc, #124]	; (13a8c <_i2c_master_set_config+0x378>)
   13a0e:	0028      	movs	r0, r5
   13a10:	0031      	movs	r1, r6
   13a12:	47a0      	blx	r4
   13a14:	0003      	movs	r3, r0
   13a16:	000c      	movs	r4, r1
   13a18:	0018      	movs	r0, r3
   13a1a:	0021      	movs	r1, r4
   13a1c:	4c19      	ldr	r4, [pc, #100]	; (13a84 <_i2c_master_set_config+0x370>)
   13a1e:	2200      	movs	r2, #0
   13a20:	4b19      	ldr	r3, [pc, #100]	; (13a88 <_i2c_master_set_config+0x374>)
   13a22:	47a0      	blx	r4
   13a24:	0003      	movs	r3, r0
   13a26:	000c      	movs	r4, r1
   13a28:	0019      	movs	r1, r3
   13a2a:	0022      	movs	r2, r4
   13a2c:	4b18      	ldr	r3, [pc, #96]	; (13a90 <_i2c_master_set_config+0x37c>)
   13a2e:	0008      	movs	r0, r1
   13a30:	0011      	movs	r1, r2
   13a32:	4798      	blx	r3
   13a34:	0003      	movs	r3, r0
   13a36:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   13a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13a3a:	2b00      	cmp	r3, #0
   13a3c:	d02e      	beq.n	13a9c <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   13a3e:	4b16      	ldr	r3, [pc, #88]	; (13a98 <_i2c_master_set_config+0x384>)
   13a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
   13a42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   13a44:	4798      	blx	r3
   13a46:	0003      	movs	r3, r0
   13a48:	1e9a      	subs	r2, r3, #2
   13a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13a4c:	1ad3      	subs	r3, r2, r3
   13a4e:	653b      	str	r3, [r7, #80]	; 0x50
   13a50:	e031      	b.n	13ab6 <_i2c_master_set_config+0x3a2>
   13a52:	46c0      	nop			; (mov r8, r8)
   13a54:	00017a35 	.word	0x00017a35
   13a58:	000135d5 	.word	0x000135d5
   13a5c:	00017879 	.word	0x00017879
   13a60:	00019635 	.word	0x00019635
   13a64:	000135fd 	.word	0x000135fd
   13a68:	000193f9 	.word	0x000193f9
   13a6c:	0001b435 	.word	0x0001b435
   13a70:	0001a8a1 	.word	0x0001a8a1
   13a74:	e826d695 	.word	0xe826d695
   13a78:	3e112e0b 	.word	0x3e112e0b
   13a7c:	00019c19 	.word	0x00019c19
   13a80:	40240000 	.word	0x40240000
   13a84:	0001ada1 	.word	0x0001ada1
   13a88:	3ff00000 	.word	0x3ff00000
   13a8c:	0001a239 	.word	0x0001a239
   13a90:	0001b3cd 	.word	0x0001b3cd
   13a94:	40080000 	.word	0x40080000
   13a98:	00019aad 	.word	0x00019aad
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   13a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13a9e:	005a      	lsls	r2, r3, #1
   13aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13aa2:	18d3      	adds	r3, r2, r3
   13aa4:	1e5a      	subs	r2, r3, #1
   13aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13aa8:	0059      	lsls	r1, r3, #1
   13aaa:	4b1d      	ldr	r3, [pc, #116]	; (13b20 <_i2c_master_set_config+0x40c>)
   13aac:	0010      	movs	r0, r2
   13aae:	4798      	blx	r3
   13ab0:	0003      	movs	r3, r0
   13ab2:	3b01      	subs	r3, #1
   13ab4:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   13ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13ab8:	2bff      	cmp	r3, #255	; 0xff
   13aba:	dc08      	bgt.n	13ace <_i2c_master_set_config+0x3ba>
   13abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13abe:	2b00      	cmp	r3, #0
   13ac0:	db05      	blt.n	13ace <_i2c_master_set_config+0x3ba>
   13ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13ac4:	2bff      	cmp	r3, #255	; 0xff
   13ac6:	dc02      	bgt.n	13ace <_i2c_master_set_config+0x3ba>
   13ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13aca:	2b00      	cmp	r3, #0
   13acc:	da06      	bge.n	13adc <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   13ace:	233b      	movs	r3, #59	; 0x3b
   13ad0:	2210      	movs	r2, #16
   13ad2:	4694      	mov	ip, r2
   13ad4:	44bc      	add	ip, r7
   13ad6:	4463      	add	r3, ip
   13ad8:	2240      	movs	r2, #64	; 0x40
   13ada:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   13adc:	233b      	movs	r3, #59	; 0x3b
   13ade:	2210      	movs	r2, #16
   13ae0:	4694      	mov	ip, r2
   13ae2:	44bc      	add	ip, r7
   13ae4:	4463      	add	r3, ip
   13ae6:	781b      	ldrb	r3, [r3, #0]
   13ae8:	2b40      	cmp	r3, #64	; 0x40
   13aea:	d00e      	beq.n	13b0a <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   13aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13aee:	22ff      	movs	r2, #255	; 0xff
   13af0:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   13af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13af4:	041b      	lsls	r3, r3, #16
   13af6:	0019      	movs	r1, r3
   13af8:	23ff      	movs	r3, #255	; 0xff
   13afa:	041b      	lsls	r3, r3, #16
   13afc:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   13afe:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   13b00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   13b02:	0612      	lsls	r2, r2, #24
   13b04:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   13b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13b08:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   13b0a:	233b      	movs	r3, #59	; 0x3b
   13b0c:	2210      	movs	r2, #16
   13b0e:	4694      	mov	ip, r2
   13b10:	44bc      	add	ip, r7
   13b12:	4463      	add	r3, ip
   13b14:	781b      	ldrb	r3, [r3, #0]
}
   13b16:	0018      	movs	r0, r3
   13b18:	46bd      	mov	sp, r7
   13b1a:	b017      	add	sp, #92	; 0x5c
   13b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13b1e:	46c0      	nop			; (mov r8, r8)
   13b20:	00019aad 	.word	0x00019aad

00013b24 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   13b24:	b590      	push	{r4, r7, lr}
   13b26:	b08b      	sub	sp, #44	; 0x2c
   13b28:	af00      	add	r7, sp, #0
   13b2a:	60f8      	str	r0, [r7, #12]
   13b2c:	60b9      	str	r1, [r7, #8]
   13b2e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   13b30:	68fb      	ldr	r3, [r7, #12]
   13b32:	68ba      	ldr	r2, [r7, #8]
   13b34:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13b36:	68fb      	ldr	r3, [r7, #12]
   13b38:	681b      	ldr	r3, [r3, #0]
   13b3a:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   13b3c:	68fb      	ldr	r3, [r7, #12]
   13b3e:	681b      	ldr	r3, [r3, #0]
   13b40:	0018      	movs	r0, r3
   13b42:	4b3b      	ldr	r3, [pc, #236]	; (13c30 <i2c_master_init+0x10c>)
   13b44:	4798      	blx	r3
   13b46:	0003      	movs	r3, r0
   13b48:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   13b4a:	6a3b      	ldr	r3, [r7, #32]
   13b4c:	3302      	adds	r3, #2
   13b4e:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   13b50:	6a3b      	ldr	r3, [r7, #32]
   13b52:	3314      	adds	r3, #20
   13b54:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   13b56:	2201      	movs	r2, #1
   13b58:	69fb      	ldr	r3, [r7, #28]
   13b5a:	409a      	lsls	r2, r3
   13b5c:	0013      	movs	r3, r2
   13b5e:	0019      	movs	r1, r3
   13b60:	2002      	movs	r0, #2
   13b62:	4b34      	ldr	r3, [pc, #208]	; (13c34 <i2c_master_init+0x110>)
   13b64:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   13b66:	2314      	movs	r3, #20
   13b68:	18fb      	adds	r3, r7, r3
   13b6a:	0018      	movs	r0, r3
   13b6c:	4b32      	ldr	r3, [pc, #200]	; (13c38 <i2c_master_init+0x114>)
   13b6e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   13b70:	687b      	ldr	r3, [r7, #4]
   13b72:	7b1a      	ldrb	r2, [r3, #12]
   13b74:	2314      	movs	r3, #20
   13b76:	18fb      	adds	r3, r7, r3
   13b78:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   13b7a:	69bb      	ldr	r3, [r7, #24]
   13b7c:	b2db      	uxtb	r3, r3
   13b7e:	2214      	movs	r2, #20
   13b80:	18ba      	adds	r2, r7, r2
   13b82:	0011      	movs	r1, r2
   13b84:	0018      	movs	r0, r3
   13b86:	4b2d      	ldr	r3, [pc, #180]	; (13c3c <i2c_master_init+0x118>)
   13b88:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   13b8a:	69bb      	ldr	r3, [r7, #24]
   13b8c:	b2db      	uxtb	r3, r3
   13b8e:	0018      	movs	r0, r3
   13b90:	4b2b      	ldr	r3, [pc, #172]	; (13c40 <i2c_master_init+0x11c>)
   13b92:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   13b94:	687b      	ldr	r3, [r7, #4]
   13b96:	7b1b      	ldrb	r3, [r3, #12]
   13b98:	2100      	movs	r1, #0
   13b9a:	0018      	movs	r0, r3
   13b9c:	4b29      	ldr	r3, [pc, #164]	; (13c44 <i2c_master_init+0x120>)
   13b9e:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   13ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13ba2:	681b      	ldr	r3, [r3, #0]
   13ba4:	2202      	movs	r2, #2
   13ba6:	4013      	ands	r3, r2
   13ba8:	d001      	beq.n	13bae <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   13baa:	231c      	movs	r3, #28
   13bac:	e03b      	b.n	13c26 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   13bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13bb0:	681b      	ldr	r3, [r3, #0]
   13bb2:	2201      	movs	r2, #1
   13bb4:	4013      	ands	r3, r2
   13bb6:	d001      	beq.n	13bbc <i2c_master_init+0x98>
		return STATUS_BUSY;
   13bb8:	2305      	movs	r3, #5
   13bba:	e034      	b.n	13c26 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   13bbc:	68fb      	ldr	r3, [r7, #12]
   13bbe:	681b      	ldr	r3, [r3, #0]
   13bc0:	2217      	movs	r2, #23
   13bc2:	18bc      	adds	r4, r7, r2
   13bc4:	0018      	movs	r0, r3
   13bc6:	4b1a      	ldr	r3, [pc, #104]	; (13c30 <i2c_master_init+0x10c>)
   13bc8:	4798      	blx	r3
   13bca:	0003      	movs	r3, r0
   13bcc:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   13bce:	4a1e      	ldr	r2, [pc, #120]	; (13c48 <i2c_master_init+0x124>)
   13bd0:	2317      	movs	r3, #23
   13bd2:	18fb      	adds	r3, r7, r3
   13bd4:	781b      	ldrb	r3, [r3, #0]
   13bd6:	0011      	movs	r1, r2
   13bd8:	0018      	movs	r0, r3
   13bda:	4b1c      	ldr	r3, [pc, #112]	; (13c4c <i2c_master_init+0x128>)
   13bdc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   13bde:	2317      	movs	r3, #23
   13be0:	18fb      	adds	r3, r7, r3
   13be2:	781a      	ldrb	r2, [r3, #0]
   13be4:	4b1a      	ldr	r3, [pc, #104]	; (13c50 <i2c_master_init+0x12c>)
   13be6:	0092      	lsls	r2, r2, #2
   13be8:	68f9      	ldr	r1, [r7, #12]
   13bea:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   13bec:	68fb      	ldr	r3, [r7, #12]
   13bee:	2200      	movs	r2, #0
   13bf0:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   13bf2:	68fb      	ldr	r3, [r7, #12]
   13bf4:	2200      	movs	r2, #0
   13bf6:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   13bf8:	68fb      	ldr	r3, [r7, #12]
   13bfa:	2200      	movs	r2, #0
   13bfc:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   13bfe:	68fb      	ldr	r3, [r7, #12]
   13c00:	2200      	movs	r2, #0
   13c02:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   13c04:	68fb      	ldr	r3, [r7, #12]
   13c06:	2225      	movs	r2, #37	; 0x25
   13c08:	2100      	movs	r1, #0
   13c0a:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   13c0c:	68fb      	ldr	r3, [r7, #12]
   13c0e:	2200      	movs	r2, #0
   13c10:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   13c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13c14:	2214      	movs	r2, #20
   13c16:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   13c18:	687a      	ldr	r2, [r7, #4]
   13c1a:	68fb      	ldr	r3, [r7, #12]
   13c1c:	0011      	movs	r1, r2
   13c1e:	0018      	movs	r0, r3
   13c20:	4b0c      	ldr	r3, [pc, #48]	; (13c54 <i2c_master_init+0x130>)
   13c22:	4798      	blx	r3
   13c24:	0003      	movs	r3, r0
}
   13c26:	0018      	movs	r0, r3
   13c28:	46bd      	mov	sp, r7
   13c2a:	b00b      	add	sp, #44	; 0x2c
   13c2c:	bd90      	pop	{r4, r7, pc}
   13c2e:	46c0      	nop			; (mov r8, r8)
   13c30:	00017a35 	.word	0x00017a35
   13c34:	00013579 	.word	0x00013579
   13c38:	00013561 	.word	0x00013561
   13c3c:	000192d5 	.word	0x000192d5
   13c40:	00019319 	.word	0x00019319
   13c44:	000177ed 	.word	0x000177ed
   13c48:	00012689 	.word	0x00012689
   13c4c:	00017a99 	.word	0x00017a99
   13c50:	20002f70 	.word	0x20002f70
   13c54:	00013715 	.word	0x00013715

00013c58 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   13c58:	b580      	push	{r7, lr}
   13c5a:	b084      	sub	sp, #16
   13c5c:	af00      	add	r7, sp, #0
   13c5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13c60:	687b      	ldr	r3, [r7, #4]
   13c62:	681b      	ldr	r3, [r3, #0]
   13c64:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   13c66:	687b      	ldr	r3, [r7, #4]
   13c68:	0018      	movs	r0, r3
   13c6a:	4b0f      	ldr	r3, [pc, #60]	; (13ca8 <i2c_master_reset+0x50>)
   13c6c:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   13c6e:	687b      	ldr	r3, [r7, #4]
   13c70:	0018      	movs	r0, r3
   13c72:	4b0e      	ldr	r3, [pc, #56]	; (13cac <i2c_master_reset+0x54>)
   13c74:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   13c76:	4b0e      	ldr	r3, [pc, #56]	; (13cb0 <i2c_master_reset+0x58>)
   13c78:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   13c7a:	687b      	ldr	r3, [r7, #4]
   13c7c:	681b      	ldr	r3, [r3, #0]
   13c7e:	0018      	movs	r0, r3
   13c80:	4b0c      	ldr	r3, [pc, #48]	; (13cb4 <i2c_master_reset+0x5c>)
   13c82:	4798      	blx	r3
   13c84:	0003      	movs	r3, r0
   13c86:	0018      	movs	r0, r3
   13c88:	4b0b      	ldr	r3, [pc, #44]	; (13cb8 <i2c_master_reset+0x60>)
   13c8a:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   13c8c:	4b0b      	ldr	r3, [pc, #44]	; (13cbc <i2c_master_reset+0x64>)
   13c8e:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   13c90:	687b      	ldr	r3, [r7, #4]
   13c92:	0018      	movs	r0, r3
   13c94:	4b04      	ldr	r3, [pc, #16]	; (13ca8 <i2c_master_reset+0x50>)
   13c96:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   13c98:	68fb      	ldr	r3, [r7, #12]
   13c9a:	2201      	movs	r2, #1
   13c9c:	601a      	str	r2, [r3, #0]
}
   13c9e:	46c0      	nop			; (mov r8, r8)
   13ca0:	46bd      	mov	sp, r7
   13ca2:	b004      	add	sp, #16
   13ca4:	bd80      	pop	{r7, pc}
   13ca6:	46c0      	nop			; (mov r8, r8)
   13ca8:	00013699 	.word	0x00013699
   13cac:	000136bd 	.word	0x000136bd
   13cb0:	0001361d 	.word	0x0001361d
   13cb4:	00017b05 	.word	0x00017b05
   13cb8:	00019451 	.word	0x00019451
   13cbc:	00013631 	.word	0x00013631

00013cc0 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   13cc0:	b580      	push	{r7, lr}
   13cc2:	b084      	sub	sp, #16
   13cc4:	af00      	add	r7, sp, #0
   13cc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13cc8:	687b      	ldr	r3, [r7, #4]
   13cca:	681b      	ldr	r3, [r3, #0]
   13ccc:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   13cce:	68fb      	ldr	r3, [r7, #12]
   13cd0:	7e1b      	ldrb	r3, [r3, #24]
   13cd2:	b2db      	uxtb	r3, r3
   13cd4:	001a      	movs	r2, r3
   13cd6:	2302      	movs	r3, #2
   13cd8:	4013      	ands	r3, r2
   13cda:	d00b      	beq.n	13cf4 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13cdc:	68fb      	ldr	r3, [r7, #12]
   13cde:	2202      	movs	r2, #2
   13ce0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   13ce2:	68fb      	ldr	r3, [r7, #12]
   13ce4:	8b5b      	ldrh	r3, [r3, #26]
   13ce6:	b29b      	uxth	r3, r3
   13ce8:	001a      	movs	r2, r3
   13cea:	2302      	movs	r3, #2
   13cec:	4013      	ands	r3, r2
   13cee:	d011      	beq.n	13d14 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   13cf0:	2341      	movs	r3, #65	; 0x41
   13cf2:	e010      	b.n	13d16 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   13cf4:	68fb      	ldr	r3, [r7, #12]
   13cf6:	8b5b      	ldrh	r3, [r3, #26]
   13cf8:	b29b      	uxth	r3, r3
   13cfa:	001a      	movs	r2, r3
   13cfc:	2304      	movs	r3, #4
   13cfe:	4013      	ands	r3, r2
   13d00:	d008      	beq.n	13d14 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13d02:	68fb      	ldr	r3, [r7, #12]
   13d04:	685b      	ldr	r3, [r3, #4]
   13d06:	22c0      	movs	r2, #192	; 0xc0
   13d08:	0292      	lsls	r2, r2, #10
   13d0a:	431a      	orrs	r2, r3
   13d0c:	68fb      	ldr	r3, [r7, #12]
   13d0e:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   13d10:	2318      	movs	r3, #24
   13d12:	e000      	b.n	13d16 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   13d14:	2300      	movs	r3, #0
}
   13d16:	0018      	movs	r0, r3
   13d18:	46bd      	mov	sp, r7
   13d1a:	b004      	add	sp, #16
   13d1c:	bd80      	pop	{r7, pc}

00013d1e <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   13d1e:	b580      	push	{r7, lr}
   13d20:	b084      	sub	sp, #16
   13d22:	af00      	add	r7, sp, #0
   13d24:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13d26:	687b      	ldr	r3, [r7, #4]
   13d28:	681b      	ldr	r3, [r3, #0]
   13d2a:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   13d2c:	230e      	movs	r3, #14
   13d2e:	18fb      	adds	r3, r7, r3
   13d30:	2200      	movs	r2, #0
   13d32:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   13d34:	e00f      	b.n	13d56 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   13d36:	230e      	movs	r3, #14
   13d38:	18fb      	adds	r3, r7, r3
   13d3a:	220e      	movs	r2, #14
   13d3c:	18ba      	adds	r2, r7, r2
   13d3e:	8812      	ldrh	r2, [r2, #0]
   13d40:	3201      	adds	r2, #1
   13d42:	801a      	strh	r2, [r3, #0]
   13d44:	687b      	ldr	r3, [r7, #4]
   13d46:	891b      	ldrh	r3, [r3, #8]
   13d48:	220e      	movs	r2, #14
   13d4a:	18ba      	adds	r2, r7, r2
   13d4c:	8812      	ldrh	r2, [r2, #0]
   13d4e:	429a      	cmp	r2, r3
   13d50:	d301      	bcc.n	13d56 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   13d52:	2312      	movs	r3, #18
   13d54:	e00e      	b.n	13d74 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   13d56:	68bb      	ldr	r3, [r7, #8]
   13d58:	7e1b      	ldrb	r3, [r3, #24]
   13d5a:	b2db      	uxtb	r3, r3
   13d5c:	001a      	movs	r2, r3
   13d5e:	2301      	movs	r3, #1
   13d60:	4013      	ands	r3, r2
   13d62:	d106      	bne.n	13d72 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   13d64:	68bb      	ldr	r3, [r7, #8]
   13d66:	7e1b      	ldrb	r3, [r3, #24]
   13d68:	b2db      	uxtb	r3, r3
   13d6a:	001a      	movs	r2, r3
   13d6c:	2302      	movs	r3, #2
   13d6e:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   13d70:	d0e1      	beq.n	13d36 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   13d72:	2300      	movs	r3, #0
}
   13d74:	0018      	movs	r0, r3
   13d76:	46bd      	mov	sp, r7
   13d78:	b004      	add	sp, #16
   13d7a:	bd80      	pop	{r7, pc}

00013d7c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   13d7c:	b590      	push	{r4, r7, lr}
   13d7e:	b085      	sub	sp, #20
   13d80:	af00      	add	r7, sp, #0
   13d82:	6078      	str	r0, [r7, #4]
   13d84:	000a      	movs	r2, r1
   13d86:	1cfb      	adds	r3, r7, #3
   13d88:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13d8a:	687b      	ldr	r3, [r7, #4]
   13d8c:	681b      	ldr	r3, [r3, #0]
   13d8e:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13d90:	68fb      	ldr	r3, [r7, #12]
   13d92:	685b      	ldr	r3, [r3, #4]
   13d94:	2280      	movs	r2, #128	; 0x80
   13d96:	02d2      	lsls	r2, r2, #11
   13d98:	431a      	orrs	r2, r3
   13d9a:	68fb      	ldr	r3, [r7, #12]
   13d9c:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   13d9e:	1cfb      	adds	r3, r7, #3
   13da0:	781a      	ldrb	r2, [r3, #0]
   13da2:	68fb      	ldr	r3, [r7, #12]
   13da4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   13da6:	230b      	movs	r3, #11
   13da8:	18fc      	adds	r4, r7, r3
   13daa:	687b      	ldr	r3, [r7, #4]
   13dac:	0018      	movs	r0, r3
   13dae:	4b07      	ldr	r3, [pc, #28]	; (13dcc <_i2c_master_send_hs_master_code+0x50>)
   13db0:	4798      	blx	r3
   13db2:	0003      	movs	r3, r0
   13db4:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   13db6:	68fb      	ldr	r3, [r7, #12]
   13db8:	2201      	movs	r2, #1
   13dba:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   13dbc:	230b      	movs	r3, #11
   13dbe:	18fb      	adds	r3, r7, r3
   13dc0:	781b      	ldrb	r3, [r3, #0]
}
   13dc2:	0018      	movs	r0, r3
   13dc4:	46bd      	mov	sp, r7
   13dc6:	b005      	add	sp, #20
   13dc8:	bd90      	pop	{r4, r7, pc}
   13dca:	46c0      	nop			; (mov r8, r8)
   13dcc:	00013d1f 	.word	0x00013d1f

00013dd0 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   13dd0:	b580      	push	{r7, lr}
   13dd2:	af00      	add	r7, sp, #0
   13dd4:	2000      	movs	r0, #0
   13dd6:	4b02      	ldr	r3, [pc, #8]	; (13de0 <TC3_Handler+0x10>)
   13dd8:	4798      	blx	r3
   13dda:	46c0      	nop			; (mov r8, r8)
   13ddc:	46bd      	mov	sp, r7
   13dde:	bd80      	pop	{r7, pc}
   13de0:	00013e0d 	.word	0x00013e0d

00013de4 <TC4_Handler>:
   13de4:	b580      	push	{r7, lr}
   13de6:	af00      	add	r7, sp, #0
   13de8:	2001      	movs	r0, #1
   13dea:	4b02      	ldr	r3, [pc, #8]	; (13df4 <TC4_Handler+0x10>)
   13dec:	4798      	blx	r3
   13dee:	46c0      	nop			; (mov r8, r8)
   13df0:	46bd      	mov	sp, r7
   13df2:	bd80      	pop	{r7, pc}
   13df4:	00013e0d 	.word	0x00013e0d

00013df8 <TC5_Handler>:
   13df8:	b580      	push	{r7, lr}
   13dfa:	af00      	add	r7, sp, #0
   13dfc:	2002      	movs	r0, #2
   13dfe:	4b02      	ldr	r3, [pc, #8]	; (13e08 <TC5_Handler+0x10>)
   13e00:	4798      	blx	r3
   13e02:	46c0      	nop			; (mov r8, r8)
   13e04:	46bd      	mov	sp, r7
   13e06:	bd80      	pop	{r7, pc}
   13e08:	00013e0d 	.word	0x00013e0d

00013e0c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   13e0c:	b580      	push	{r7, lr}
   13e0e:	b084      	sub	sp, #16
   13e10:	af00      	add	r7, sp, #0
   13e12:	0002      	movs	r2, r0
   13e14:	1dfb      	adds	r3, r7, #7
   13e16:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   13e18:	1dfb      	adds	r3, r7, #7
   13e1a:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   13e1c:	4b28      	ldr	r3, [pc, #160]	; (13ec0 <_tc_interrupt_handler+0xb4>)
   13e1e:	0092      	lsls	r2, r2, #2
   13e20:	58d3      	ldr	r3, [r2, r3]
   13e22:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   13e24:	68fb      	ldr	r3, [r7, #12]
   13e26:	681b      	ldr	r3, [r3, #0]
   13e28:	7b9b      	ldrb	r3, [r3, #14]
   13e2a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   13e2c:	68fa      	ldr	r2, [r7, #12]
   13e2e:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   13e30:	4013      	ands	r3, r2
   13e32:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   13e34:	68fb      	ldr	r3, [r7, #12]
   13e36:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   13e38:	230b      	movs	r3, #11
   13e3a:	18fb      	adds	r3, r7, r3
   13e3c:	400a      	ands	r2, r1
   13e3e:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   13e40:	230b      	movs	r3, #11
   13e42:	18fb      	adds	r3, r7, r3
   13e44:	781b      	ldrb	r3, [r3, #0]
   13e46:	2201      	movs	r2, #1
   13e48:	4013      	ands	r3, r2
   13e4a:	d008      	beq.n	13e5e <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   13e4c:	68fb      	ldr	r3, [r7, #12]
   13e4e:	689b      	ldr	r3, [r3, #8]
   13e50:	68fa      	ldr	r2, [r7, #12]
   13e52:	0010      	movs	r0, r2
   13e54:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   13e56:	68fb      	ldr	r3, [r7, #12]
   13e58:	681b      	ldr	r3, [r3, #0]
   13e5a:	2201      	movs	r2, #1
   13e5c:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   13e5e:	230b      	movs	r3, #11
   13e60:	18fb      	adds	r3, r7, r3
   13e62:	781b      	ldrb	r3, [r3, #0]
   13e64:	2202      	movs	r2, #2
   13e66:	4013      	ands	r3, r2
   13e68:	d008      	beq.n	13e7c <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   13e6a:	68fb      	ldr	r3, [r7, #12]
   13e6c:	68db      	ldr	r3, [r3, #12]
   13e6e:	68fa      	ldr	r2, [r7, #12]
   13e70:	0010      	movs	r0, r2
   13e72:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   13e74:	68fb      	ldr	r3, [r7, #12]
   13e76:	681b      	ldr	r3, [r3, #0]
   13e78:	2202      	movs	r2, #2
   13e7a:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   13e7c:	230b      	movs	r3, #11
   13e7e:	18fb      	adds	r3, r7, r3
   13e80:	781b      	ldrb	r3, [r3, #0]
   13e82:	2210      	movs	r2, #16
   13e84:	4013      	ands	r3, r2
   13e86:	d008      	beq.n	13e9a <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   13e88:	68fb      	ldr	r3, [r7, #12]
   13e8a:	691b      	ldr	r3, [r3, #16]
   13e8c:	68fa      	ldr	r2, [r7, #12]
   13e8e:	0010      	movs	r0, r2
   13e90:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   13e92:	68fb      	ldr	r3, [r7, #12]
   13e94:	681b      	ldr	r3, [r3, #0]
   13e96:	2210      	movs	r2, #16
   13e98:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   13e9a:	230b      	movs	r3, #11
   13e9c:	18fb      	adds	r3, r7, r3
   13e9e:	781b      	ldrb	r3, [r3, #0]
   13ea0:	2220      	movs	r2, #32
   13ea2:	4013      	ands	r3, r2
   13ea4:	d008      	beq.n	13eb8 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   13ea6:	68fb      	ldr	r3, [r7, #12]
   13ea8:	695b      	ldr	r3, [r3, #20]
   13eaa:	68fa      	ldr	r2, [r7, #12]
   13eac:	0010      	movs	r0, r2
   13eae:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   13eb0:	68fb      	ldr	r3, [r7, #12]
   13eb2:	681b      	ldr	r3, [r3, #0]
   13eb4:	2220      	movs	r2, #32
   13eb6:	739a      	strb	r2, [r3, #14]
	}
}
   13eb8:	46c0      	nop			; (mov r8, r8)
   13eba:	46bd      	mov	sp, r7
   13ebc:	b004      	add	sp, #16
   13ebe:	bd80      	pop	{r7, pc}
   13ec0:	20002a58 	.word	0x20002a58

00013ec4 <FreeRTOS_CLIProcessCommand>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   13ec4:	b580      	push	{r7, lr}
   13ec6:	b088      	sub	sp, #32
   13ec8:	af00      	add	r7, sp, #0
   13eca:	60f8      	str	r0, [r7, #12]
   13ecc:	60b9      	str	r1, [r7, #8]
   13ece:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   13ed0:	2301      	movs	r3, #1
   13ed2:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   13ed4:	4b3d      	ldr	r3, [pc, #244]	; (13fcc <FreeRTOS_CLIProcessCommand+0x108>)
   13ed6:	681b      	ldr	r3, [r3, #0]
   13ed8:	2b00      	cmp	r3, #0
   13eda:	d144      	bne.n	13f66 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   13edc:	4b3b      	ldr	r3, [pc, #236]	; (13fcc <FreeRTOS_CLIProcessCommand+0x108>)
   13ede:	4a3c      	ldr	r2, [pc, #240]	; (13fd0 <FreeRTOS_CLIProcessCommand+0x10c>)
   13ee0:	601a      	str	r2, [r3, #0]
   13ee2:	e03a      	b.n	13f5a <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   13ee4:	4b39      	ldr	r3, [pc, #228]	; (13fcc <FreeRTOS_CLIProcessCommand+0x108>)
   13ee6:	681b      	ldr	r3, [r3, #0]
   13ee8:	681b      	ldr	r3, [r3, #0]
   13eea:	681b      	ldr	r3, [r3, #0]
   13eec:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   13eee:	69bb      	ldr	r3, [r7, #24]
   13ef0:	0018      	movs	r0, r3
   13ef2:	4b38      	ldr	r3, [pc, #224]	; (13fd4 <FreeRTOS_CLIProcessCommand+0x110>)
   13ef4:	4798      	blx	r3
   13ef6:	0003      	movs	r3, r0
   13ef8:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   13efa:	68fa      	ldr	r2, [r7, #12]
   13efc:	697b      	ldr	r3, [r7, #20]
   13efe:	18d3      	adds	r3, r2, r3
   13f00:	781b      	ldrb	r3, [r3, #0]
   13f02:	2b20      	cmp	r3, #32
   13f04:	d005      	beq.n	13f12 <FreeRTOS_CLIProcessCommand+0x4e>
   13f06:	68fa      	ldr	r2, [r7, #12]
   13f08:	697b      	ldr	r3, [r7, #20]
   13f0a:	18d3      	adds	r3, r2, r3
   13f0c:	781b      	ldrb	r3, [r3, #0]
   13f0e:	2b00      	cmp	r3, #0
   13f10:	d11e      	bne.n	13f50 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   13f12:	697a      	ldr	r2, [r7, #20]
   13f14:	69b9      	ldr	r1, [r7, #24]
   13f16:	68fb      	ldr	r3, [r7, #12]
   13f18:	0018      	movs	r0, r3
   13f1a:	4b2f      	ldr	r3, [pc, #188]	; (13fd8 <FreeRTOS_CLIProcessCommand+0x114>)
   13f1c:	4798      	blx	r3
   13f1e:	1e03      	subs	r3, r0, #0
   13f20:	d116      	bne.n	13f50 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   13f22:	4b2a      	ldr	r3, [pc, #168]	; (13fcc <FreeRTOS_CLIProcessCommand+0x108>)
   13f24:	681b      	ldr	r3, [r3, #0]
   13f26:	681b      	ldr	r3, [r3, #0]
   13f28:	7b1b      	ldrb	r3, [r3, #12]
   13f2a:	b25b      	sxtb	r3, r3
   13f2c:	2b00      	cmp	r3, #0
   13f2e:	db19      	blt.n	13f64 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   13f30:	68fb      	ldr	r3, [r7, #12]
   13f32:	0018      	movs	r0, r3
   13f34:	4b29      	ldr	r3, [pc, #164]	; (13fdc <FreeRTOS_CLIProcessCommand+0x118>)
   13f36:	4798      	blx	r3
   13f38:	0003      	movs	r3, r0
   13f3a:	001a      	movs	r2, r3
   13f3c:	4b23      	ldr	r3, [pc, #140]	; (13fcc <FreeRTOS_CLIProcessCommand+0x108>)
   13f3e:	681b      	ldr	r3, [r3, #0]
   13f40:	681b      	ldr	r3, [r3, #0]
   13f42:	7b1b      	ldrb	r3, [r3, #12]
   13f44:	b25b      	sxtb	r3, r3
   13f46:	429a      	cmp	r2, r3
   13f48:	d00c      	beq.n	13f64 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   13f4a:	2300      	movs	r3, #0
   13f4c:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   13f4e:	e009      	b.n	13f64 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   13f50:	4b1e      	ldr	r3, [pc, #120]	; (13fcc <FreeRTOS_CLIProcessCommand+0x108>)
   13f52:	681b      	ldr	r3, [r3, #0]
   13f54:	685a      	ldr	r2, [r3, #4]
   13f56:	4b1d      	ldr	r3, [pc, #116]	; (13fcc <FreeRTOS_CLIProcessCommand+0x108>)
   13f58:	601a      	str	r2, [r3, #0]
   13f5a:	4b1c      	ldr	r3, [pc, #112]	; (13fcc <FreeRTOS_CLIProcessCommand+0x108>)
   13f5c:	681b      	ldr	r3, [r3, #0]
   13f5e:	2b00      	cmp	r3, #0
   13f60:	d1c0      	bne.n	13ee4 <FreeRTOS_CLIProcessCommand+0x20>
   13f62:	e000      	b.n	13f66 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   13f64:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   13f66:	4b19      	ldr	r3, [pc, #100]	; (13fcc <FreeRTOS_CLIProcessCommand+0x108>)
   13f68:	681b      	ldr	r3, [r3, #0]
   13f6a:	2b00      	cmp	r3, #0
   13f6c:	d00c      	beq.n	13f88 <FreeRTOS_CLIProcessCommand+0xc4>
   13f6e:	69fb      	ldr	r3, [r7, #28]
   13f70:	2b00      	cmp	r3, #0
   13f72:	d109      	bne.n	13f88 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   13f74:	687a      	ldr	r2, [r7, #4]
   13f76:	491a      	ldr	r1, [pc, #104]	; (13fe0 <FreeRTOS_CLIProcessCommand+0x11c>)
   13f78:	68bb      	ldr	r3, [r7, #8]
   13f7a:	0018      	movs	r0, r3
   13f7c:	4b19      	ldr	r3, [pc, #100]	; (13fe4 <FreeRTOS_CLIProcessCommand+0x120>)
   13f7e:	4798      	blx	r3
		pxCommand = NULL;
   13f80:	4b12      	ldr	r3, [pc, #72]	; (13fcc <FreeRTOS_CLIProcessCommand+0x108>)
   13f82:	2200      	movs	r2, #0
   13f84:	601a      	str	r2, [r3, #0]
   13f86:	e01c      	b.n	13fc2 <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   13f88:	4b10      	ldr	r3, [pc, #64]	; (13fcc <FreeRTOS_CLIProcessCommand+0x108>)
   13f8a:	681b      	ldr	r3, [r3, #0]
   13f8c:	2b00      	cmp	r3, #0
   13f8e:	d010      	beq.n	13fb2 <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   13f90:	4b0e      	ldr	r3, [pc, #56]	; (13fcc <FreeRTOS_CLIProcessCommand+0x108>)
   13f92:	681b      	ldr	r3, [r3, #0]
   13f94:	681b      	ldr	r3, [r3, #0]
   13f96:	689b      	ldr	r3, [r3, #8]
   13f98:	68fa      	ldr	r2, [r7, #12]
   13f9a:	6879      	ldr	r1, [r7, #4]
   13f9c:	68b8      	ldr	r0, [r7, #8]
   13f9e:	4798      	blx	r3
   13fa0:	0003      	movs	r3, r0
   13fa2:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   13fa4:	69fb      	ldr	r3, [r7, #28]
   13fa6:	2b00      	cmp	r3, #0
   13fa8:	d10b      	bne.n	13fc2 <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   13faa:	4b08      	ldr	r3, [pc, #32]	; (13fcc <FreeRTOS_CLIProcessCommand+0x108>)
   13fac:	2200      	movs	r2, #0
   13fae:	601a      	str	r2, [r3, #0]
   13fb0:	e007      	b.n	13fc2 <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   13fb2:	687a      	ldr	r2, [r7, #4]
   13fb4:	490c      	ldr	r1, [pc, #48]	; (13fe8 <FreeRTOS_CLIProcessCommand+0x124>)
   13fb6:	68bb      	ldr	r3, [r7, #8]
   13fb8:	0018      	movs	r0, r3
   13fba:	4b0a      	ldr	r3, [pc, #40]	; (13fe4 <FreeRTOS_CLIProcessCommand+0x120>)
   13fbc:	4798      	blx	r3
		xReturn = pdFALSE;
   13fbe:	2300      	movs	r3, #0
   13fc0:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   13fc2:	69fb      	ldr	r3, [r7, #28]
}
   13fc4:	0018      	movs	r0, r3
   13fc6:	46bd      	mov	sp, r7
   13fc8:	b008      	add	sp, #32
   13fca:	bd80      	pop	{r7, pc}
   13fcc:	20000144 	.word	0x20000144
   13fd0:	20000000 	.word	0x20000000
   13fd4:	0001b75d 	.word	0x0001b75d
   13fd8:	0001b76b 	.word	0x0001b76b
   13fdc:	0001404d 	.word	0x0001404d
   13fe0:	0001bea8 	.word	0x0001bea8
   13fe4:	0001b78d 	.word	0x0001b78d
   13fe8:	0001bf00 	.word	0x0001bf00

00013fec <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   13fec:	b580      	push	{r7, lr}
   13fee:	b086      	sub	sp, #24
   13ff0:	af00      	add	r7, sp, #0
   13ff2:	60f8      	str	r0, [r7, #12]
   13ff4:	60b9      	str	r1, [r7, #8]
   13ff6:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   13ff8:	4b11      	ldr	r3, [pc, #68]	; (14040 <prvHelpCommand+0x54>)
   13ffa:	681b      	ldr	r3, [r3, #0]
   13ffc:	2b00      	cmp	r3, #0
   13ffe:	d102      	bne.n	14006 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   14000:	4b0f      	ldr	r3, [pc, #60]	; (14040 <prvHelpCommand+0x54>)
   14002:	4a10      	ldr	r2, [pc, #64]	; (14044 <prvHelpCommand+0x58>)
   14004:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   14006:	4b0e      	ldr	r3, [pc, #56]	; (14040 <prvHelpCommand+0x54>)
   14008:	681b      	ldr	r3, [r3, #0]
   1400a:	681b      	ldr	r3, [r3, #0]
   1400c:	6859      	ldr	r1, [r3, #4]
   1400e:	68ba      	ldr	r2, [r7, #8]
   14010:	68fb      	ldr	r3, [r7, #12]
   14012:	0018      	movs	r0, r3
   14014:	4b0c      	ldr	r3, [pc, #48]	; (14048 <prvHelpCommand+0x5c>)
   14016:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   14018:	4b09      	ldr	r3, [pc, #36]	; (14040 <prvHelpCommand+0x54>)
   1401a:	681b      	ldr	r3, [r3, #0]
   1401c:	685a      	ldr	r2, [r3, #4]
   1401e:	4b08      	ldr	r3, [pc, #32]	; (14040 <prvHelpCommand+0x54>)
   14020:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   14022:	4b07      	ldr	r3, [pc, #28]	; (14040 <prvHelpCommand+0x54>)
   14024:	681b      	ldr	r3, [r3, #0]
   14026:	2b00      	cmp	r3, #0
   14028:	d102      	bne.n	14030 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   1402a:	2300      	movs	r3, #0
   1402c:	617b      	str	r3, [r7, #20]
   1402e:	e001      	b.n	14034 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   14030:	2301      	movs	r3, #1
   14032:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   14034:	697b      	ldr	r3, [r7, #20]
}
   14036:	0018      	movs	r0, r3
   14038:	46bd      	mov	sp, r7
   1403a:	b006      	add	sp, #24
   1403c:	bd80      	pop	{r7, pc}
   1403e:	46c0      	nop			; (mov r8, r8)
   14040:	20000148 	.word	0x20000148
   14044:	20000000 	.word	0x20000000
   14048:	0001b78d 	.word	0x0001b78d

0001404c <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   1404c:	b580      	push	{r7, lr}
   1404e:	b084      	sub	sp, #16
   14050:	af00      	add	r7, sp, #0
   14052:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   14054:	230f      	movs	r3, #15
   14056:	18fb      	adds	r3, r7, r3
   14058:	2200      	movs	r2, #0
   1405a:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   1405c:	2300      	movs	r3, #0
   1405e:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   14060:	e018      	b.n	14094 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   14062:	687b      	ldr	r3, [r7, #4]
   14064:	781b      	ldrb	r3, [r3, #0]
   14066:	2b20      	cmp	r3, #32
   14068:	d10f      	bne.n	1408a <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   1406a:	68bb      	ldr	r3, [r7, #8]
   1406c:	2b01      	cmp	r3, #1
   1406e:	d00e      	beq.n	1408e <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   14070:	230f      	movs	r3, #15
   14072:	18fb      	adds	r3, r7, r3
   14074:	781b      	ldrb	r3, [r3, #0]
   14076:	b25b      	sxtb	r3, r3
   14078:	b2db      	uxtb	r3, r3
   1407a:	3301      	adds	r3, #1
   1407c:	b2da      	uxtb	r2, r3
   1407e:	230f      	movs	r3, #15
   14080:	18fb      	adds	r3, r7, r3
   14082:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   14084:	2301      	movs	r3, #1
   14086:	60bb      	str	r3, [r7, #8]
   14088:	e001      	b.n	1408e <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   1408a:	2300      	movs	r3, #0
   1408c:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   1408e:	687b      	ldr	r3, [r7, #4]
   14090:	3301      	adds	r3, #1
   14092:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   14094:	687b      	ldr	r3, [r7, #4]
   14096:	781b      	ldrb	r3, [r3, #0]
   14098:	2b00      	cmp	r3, #0
   1409a:	d1e2      	bne.n	14062 <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   1409c:	68bb      	ldr	r3, [r7, #8]
   1409e:	2b01      	cmp	r3, #1
   140a0:	d109      	bne.n	140b6 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   140a2:	230f      	movs	r3, #15
   140a4:	18fb      	adds	r3, r7, r3
   140a6:	781b      	ldrb	r3, [r3, #0]
   140a8:	b25b      	sxtb	r3, r3
   140aa:	b2db      	uxtb	r3, r3
   140ac:	3b01      	subs	r3, #1
   140ae:	b2da      	uxtb	r2, r3
   140b0:	230f      	movs	r3, #15
   140b2:	18fb      	adds	r3, r7, r3
   140b4:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   140b6:	230f      	movs	r3, #15
   140b8:	18fb      	adds	r3, r7, r3
   140ba:	781b      	ldrb	r3, [r3, #0]
   140bc:	b25b      	sxtb	r3, r3
}
   140be:	0018      	movs	r0, r3
   140c0:	46bd      	mov	sp, r7
   140c2:	b004      	add	sp, #16
   140c4:	bd80      	pop	{r7, pc}

000140c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   140c6:	b580      	push	{r7, lr}
   140c8:	b082      	sub	sp, #8
   140ca:	af00      	add	r7, sp, #0
   140cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   140ce:	687b      	ldr	r3, [r7, #4]
   140d0:	3308      	adds	r3, #8
   140d2:	001a      	movs	r2, r3
   140d4:	687b      	ldr	r3, [r7, #4]
   140d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   140d8:	687b      	ldr	r3, [r7, #4]
   140da:	2201      	movs	r2, #1
   140dc:	4252      	negs	r2, r2
   140de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   140e0:	687b      	ldr	r3, [r7, #4]
   140e2:	3308      	adds	r3, #8
   140e4:	001a      	movs	r2, r3
   140e6:	687b      	ldr	r3, [r7, #4]
   140e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   140ea:	687b      	ldr	r3, [r7, #4]
   140ec:	3308      	adds	r3, #8
   140ee:	001a      	movs	r2, r3
   140f0:	687b      	ldr	r3, [r7, #4]
   140f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   140f4:	687b      	ldr	r3, [r7, #4]
   140f6:	2200      	movs	r2, #0
   140f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   140fa:	46c0      	nop			; (mov r8, r8)
   140fc:	46bd      	mov	sp, r7
   140fe:	b002      	add	sp, #8
   14100:	bd80      	pop	{r7, pc}

00014102 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   14102:	b580      	push	{r7, lr}
   14104:	b082      	sub	sp, #8
   14106:	af00      	add	r7, sp, #0
   14108:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1410a:	687b      	ldr	r3, [r7, #4]
   1410c:	2200      	movs	r2, #0
   1410e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   14110:	46c0      	nop			; (mov r8, r8)
   14112:	46bd      	mov	sp, r7
   14114:	b002      	add	sp, #8
   14116:	bd80      	pop	{r7, pc}

00014118 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   14118:	b580      	push	{r7, lr}
   1411a:	b084      	sub	sp, #16
   1411c:	af00      	add	r7, sp, #0
   1411e:	6078      	str	r0, [r7, #4]
   14120:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   14122:	687b      	ldr	r3, [r7, #4]
   14124:	685b      	ldr	r3, [r3, #4]
   14126:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   14128:	683b      	ldr	r3, [r7, #0]
   1412a:	68fa      	ldr	r2, [r7, #12]
   1412c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1412e:	68fb      	ldr	r3, [r7, #12]
   14130:	689a      	ldr	r2, [r3, #8]
   14132:	683b      	ldr	r3, [r7, #0]
   14134:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   14136:	68fb      	ldr	r3, [r7, #12]
   14138:	689b      	ldr	r3, [r3, #8]
   1413a:	683a      	ldr	r2, [r7, #0]
   1413c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1413e:	68fb      	ldr	r3, [r7, #12]
   14140:	683a      	ldr	r2, [r7, #0]
   14142:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   14144:	683b      	ldr	r3, [r7, #0]
   14146:	687a      	ldr	r2, [r7, #4]
   14148:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1414a:	687b      	ldr	r3, [r7, #4]
   1414c:	681b      	ldr	r3, [r3, #0]
   1414e:	1c5a      	adds	r2, r3, #1
   14150:	687b      	ldr	r3, [r7, #4]
   14152:	601a      	str	r2, [r3, #0]
}
   14154:	46c0      	nop			; (mov r8, r8)
   14156:	46bd      	mov	sp, r7
   14158:	b004      	add	sp, #16
   1415a:	bd80      	pop	{r7, pc}

0001415c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1415c:	b580      	push	{r7, lr}
   1415e:	b084      	sub	sp, #16
   14160:	af00      	add	r7, sp, #0
   14162:	6078      	str	r0, [r7, #4]
   14164:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   14166:	683b      	ldr	r3, [r7, #0]
   14168:	681b      	ldr	r3, [r3, #0]
   1416a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1416c:	68bb      	ldr	r3, [r7, #8]
   1416e:	3301      	adds	r3, #1
   14170:	d103      	bne.n	1417a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   14172:	687b      	ldr	r3, [r7, #4]
   14174:	691b      	ldr	r3, [r3, #16]
   14176:	60fb      	str	r3, [r7, #12]
   14178:	e00c      	b.n	14194 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1417a:	687b      	ldr	r3, [r7, #4]
   1417c:	3308      	adds	r3, #8
   1417e:	60fb      	str	r3, [r7, #12]
   14180:	e002      	b.n	14188 <vListInsert+0x2c>
   14182:	68fb      	ldr	r3, [r7, #12]
   14184:	685b      	ldr	r3, [r3, #4]
   14186:	60fb      	str	r3, [r7, #12]
   14188:	68fb      	ldr	r3, [r7, #12]
   1418a:	685b      	ldr	r3, [r3, #4]
   1418c:	681a      	ldr	r2, [r3, #0]
   1418e:	68bb      	ldr	r3, [r7, #8]
   14190:	429a      	cmp	r2, r3
   14192:	d9f6      	bls.n	14182 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   14194:	68fb      	ldr	r3, [r7, #12]
   14196:	685a      	ldr	r2, [r3, #4]
   14198:	683b      	ldr	r3, [r7, #0]
   1419a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1419c:	683b      	ldr	r3, [r7, #0]
   1419e:	685b      	ldr	r3, [r3, #4]
   141a0:	683a      	ldr	r2, [r7, #0]
   141a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   141a4:	683b      	ldr	r3, [r7, #0]
   141a6:	68fa      	ldr	r2, [r7, #12]
   141a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   141aa:	68fb      	ldr	r3, [r7, #12]
   141ac:	683a      	ldr	r2, [r7, #0]
   141ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   141b0:	683b      	ldr	r3, [r7, #0]
   141b2:	687a      	ldr	r2, [r7, #4]
   141b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   141b6:	687b      	ldr	r3, [r7, #4]
   141b8:	681b      	ldr	r3, [r3, #0]
   141ba:	1c5a      	adds	r2, r3, #1
   141bc:	687b      	ldr	r3, [r7, #4]
   141be:	601a      	str	r2, [r3, #0]
}
   141c0:	46c0      	nop			; (mov r8, r8)
   141c2:	46bd      	mov	sp, r7
   141c4:	b004      	add	sp, #16
   141c6:	bd80      	pop	{r7, pc}

000141c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   141c8:	b580      	push	{r7, lr}
   141ca:	b084      	sub	sp, #16
   141cc:	af00      	add	r7, sp, #0
   141ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   141d0:	687b      	ldr	r3, [r7, #4]
   141d2:	691b      	ldr	r3, [r3, #16]
   141d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   141d6:	687b      	ldr	r3, [r7, #4]
   141d8:	685b      	ldr	r3, [r3, #4]
   141da:	687a      	ldr	r2, [r7, #4]
   141dc:	6892      	ldr	r2, [r2, #8]
   141de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   141e0:	687b      	ldr	r3, [r7, #4]
   141e2:	689b      	ldr	r3, [r3, #8]
   141e4:	687a      	ldr	r2, [r7, #4]
   141e6:	6852      	ldr	r2, [r2, #4]
   141e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   141ea:	68fb      	ldr	r3, [r7, #12]
   141ec:	685a      	ldr	r2, [r3, #4]
   141ee:	687b      	ldr	r3, [r7, #4]
   141f0:	429a      	cmp	r2, r3
   141f2:	d103      	bne.n	141fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   141f4:	687b      	ldr	r3, [r7, #4]
   141f6:	689a      	ldr	r2, [r3, #8]
   141f8:	68fb      	ldr	r3, [r7, #12]
   141fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   141fc:	687b      	ldr	r3, [r7, #4]
   141fe:	2200      	movs	r2, #0
   14200:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   14202:	68fb      	ldr	r3, [r7, #12]
   14204:	681b      	ldr	r3, [r3, #0]
   14206:	1e5a      	subs	r2, r3, #1
   14208:	68fb      	ldr	r3, [r7, #12]
   1420a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1420c:	68fb      	ldr	r3, [r7, #12]
   1420e:	681b      	ldr	r3, [r3, #0]
}
   14210:	0018      	movs	r0, r3
   14212:	46bd      	mov	sp, r7
   14214:	b004      	add	sp, #16
   14216:	bd80      	pop	{r7, pc}

00014218 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   14218:	b580      	push	{r7, lr}
   1421a:	b084      	sub	sp, #16
   1421c:	af00      	add	r7, sp, #0
   1421e:	60f8      	str	r0, [r7, #12]
   14220:	60b9      	str	r1, [r7, #8]
   14222:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   14224:	68fb      	ldr	r3, [r7, #12]
   14226:	3b04      	subs	r3, #4
   14228:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1422a:	68fb      	ldr	r3, [r7, #12]
   1422c:	2280      	movs	r2, #128	; 0x80
   1422e:	0452      	lsls	r2, r2, #17
   14230:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   14232:	68fb      	ldr	r3, [r7, #12]
   14234:	3b04      	subs	r3, #4
   14236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   14238:	68ba      	ldr	r2, [r7, #8]
   1423a:	68fb      	ldr	r3, [r7, #12]
   1423c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1423e:	68fb      	ldr	r3, [r7, #12]
   14240:	3b04      	subs	r3, #4
   14242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   14244:	4a08      	ldr	r2, [pc, #32]	; (14268 <pxPortInitialiseStack+0x50>)
   14246:	68fb      	ldr	r3, [r7, #12]
   14248:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1424a:	68fb      	ldr	r3, [r7, #12]
   1424c:	3b14      	subs	r3, #20
   1424e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   14250:	687a      	ldr	r2, [r7, #4]
   14252:	68fb      	ldr	r3, [r7, #12]
   14254:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   14256:	68fb      	ldr	r3, [r7, #12]
   14258:	3b20      	subs	r3, #32
   1425a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1425c:	68fb      	ldr	r3, [r7, #12]
}
   1425e:	0018      	movs	r0, r3
   14260:	46bd      	mov	sp, r7
   14262:	b004      	add	sp, #16
   14264:	bd80      	pop	{r7, pc}
   14266:	46c0      	nop			; (mov r8, r8)
   14268:	0001426d 	.word	0x0001426d

0001426c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1426c:	b580      	push	{r7, lr}
   1426e:	b082      	sub	sp, #8
   14270:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   14272:	2300      	movs	r3, #0
   14274:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   14276:	4b07      	ldr	r3, [pc, #28]	; (14294 <prvTaskExitError+0x28>)
   14278:	681b      	ldr	r3, [r3, #0]
   1427a:	3301      	adds	r3, #1
   1427c:	d001      	beq.n	14282 <prvTaskExitError+0x16>
   1427e:	b672      	cpsid	i
   14280:	e7fe      	b.n	14280 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   14282:	b672      	cpsid	i
	while( ulDummy == 0 )
   14284:	46c0      	nop			; (mov r8, r8)
   14286:	687b      	ldr	r3, [r7, #4]
   14288:	2b00      	cmp	r3, #0
   1428a:	d0fc      	beq.n	14286 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1428c:	46c0      	nop			; (mov r8, r8)
   1428e:	46bd      	mov	sp, r7
   14290:	b002      	add	sp, #8
   14292:	bd80      	pop	{r7, pc}
   14294:	20000008 	.word	0x20000008

00014298 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   14298:	b580      	push	{r7, lr}
   1429a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1429c:	46c0      	nop			; (mov r8, r8)
   1429e:	46bd      	mov	sp, r7
   142a0:	bd80      	pop	{r7, pc}
	...

000142b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   142b0:	4a0b      	ldr	r2, [pc, #44]	; (142e0 <pxCurrentTCBConst2>)
   142b2:	6813      	ldr	r3, [r2, #0]
   142b4:	6818      	ldr	r0, [r3, #0]
   142b6:	3020      	adds	r0, #32
   142b8:	f380 8809 	msr	PSP, r0
   142bc:	2002      	movs	r0, #2
   142be:	f380 8814 	msr	CONTROL, r0
   142c2:	f3bf 8f6f 	isb	sy
   142c6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   142c8:	46ae      	mov	lr, r5
   142ca:	bc08      	pop	{r3}
   142cc:	bc04      	pop	{r2}
   142ce:	b662      	cpsie	i
   142d0:	4718      	bx	r3
   142d2:	46c0      	nop			; (mov r8, r8)
   142d4:	46c0      	nop			; (mov r8, r8)
   142d6:	46c0      	nop			; (mov r8, r8)
   142d8:	46c0      	nop			; (mov r8, r8)
   142da:	46c0      	nop			; (mov r8, r8)
   142dc:	46c0      	nop			; (mov r8, r8)
   142de:	46c0      	nop			; (mov r8, r8)

000142e0 <pxCurrentTCBConst2>:
   142e0:	20002864 	.word	0x20002864
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   142e4:	46c0      	nop			; (mov r8, r8)
   142e6:	46c0      	nop			; (mov r8, r8)

000142e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   142e8:	b580      	push	{r7, lr}
   142ea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   142ec:	4b0e      	ldr	r3, [pc, #56]	; (14328 <xPortStartScheduler+0x40>)
   142ee:	4a0e      	ldr	r2, [pc, #56]	; (14328 <xPortStartScheduler+0x40>)
   142f0:	6812      	ldr	r2, [r2, #0]
   142f2:	21ff      	movs	r1, #255	; 0xff
   142f4:	0409      	lsls	r1, r1, #16
   142f6:	430a      	orrs	r2, r1
   142f8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   142fa:	4b0b      	ldr	r3, [pc, #44]	; (14328 <xPortStartScheduler+0x40>)
   142fc:	4a0a      	ldr	r2, [pc, #40]	; (14328 <xPortStartScheduler+0x40>)
   142fe:	6812      	ldr	r2, [r2, #0]
   14300:	21ff      	movs	r1, #255	; 0xff
   14302:	0609      	lsls	r1, r1, #24
   14304:	430a      	orrs	r2, r1
   14306:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   14308:	4b08      	ldr	r3, [pc, #32]	; (1432c <xPortStartScheduler+0x44>)
   1430a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1430c:	4b08      	ldr	r3, [pc, #32]	; (14330 <xPortStartScheduler+0x48>)
   1430e:	2200      	movs	r2, #0
   14310:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   14312:	4b08      	ldr	r3, [pc, #32]	; (14334 <xPortStartScheduler+0x4c>)
   14314:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   14316:	4b08      	ldr	r3, [pc, #32]	; (14338 <xPortStartScheduler+0x50>)
   14318:	4798      	blx	r3
	prvTaskExitError();
   1431a:	4b08      	ldr	r3, [pc, #32]	; (1433c <xPortStartScheduler+0x54>)
   1431c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1431e:	2300      	movs	r3, #0
}
   14320:	0018      	movs	r0, r3
   14322:	46bd      	mov	sp, r7
   14324:	bd80      	pop	{r7, pc}
   14326:	46c0      	nop			; (mov r8, r8)
   14328:	e000ed20 	.word	0xe000ed20
   1432c:	00014449 	.word	0x00014449
   14330:	20000008 	.word	0x20000008
   14334:	000142b1 	.word	0x000142b1
   14338:	000159e1 	.word	0x000159e1
   1433c:	0001426d 	.word	0x0001426d

00014340 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   14340:	b580      	push	{r7, lr}
   14342:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   14344:	4b03      	ldr	r3, [pc, #12]	; (14354 <vPortYield+0x14>)
   14346:	2280      	movs	r2, #128	; 0x80
   14348:	0552      	lsls	r2, r2, #21
   1434a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1434c:	46c0      	nop			; (mov r8, r8)
   1434e:	46bd      	mov	sp, r7
   14350:	bd80      	pop	{r7, pc}
   14352:	46c0      	nop			; (mov r8, r8)
   14354:	e000ed04 	.word	0xe000ed04

00014358 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   14358:	b580      	push	{r7, lr}
   1435a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1435c:	b672      	cpsid	i
    uxCriticalNesting++;
   1435e:	4b06      	ldr	r3, [pc, #24]	; (14378 <vPortEnterCritical+0x20>)
   14360:	681b      	ldr	r3, [r3, #0]
   14362:	1c5a      	adds	r2, r3, #1
   14364:	4b04      	ldr	r3, [pc, #16]	; (14378 <vPortEnterCritical+0x20>)
   14366:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   14368:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1436c:	f3bf 8f6f 	isb	sy
}
   14370:	46c0      	nop			; (mov r8, r8)
   14372:	46bd      	mov	sp, r7
   14374:	bd80      	pop	{r7, pc}
   14376:	46c0      	nop			; (mov r8, r8)
   14378:	20000008 	.word	0x20000008

0001437c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1437c:	b580      	push	{r7, lr}
   1437e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   14380:	4b09      	ldr	r3, [pc, #36]	; (143a8 <vPortExitCritical+0x2c>)
   14382:	681b      	ldr	r3, [r3, #0]
   14384:	2b00      	cmp	r3, #0
   14386:	d101      	bne.n	1438c <vPortExitCritical+0x10>
   14388:	b672      	cpsid	i
   1438a:	e7fe      	b.n	1438a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1438c:	4b06      	ldr	r3, [pc, #24]	; (143a8 <vPortExitCritical+0x2c>)
   1438e:	681b      	ldr	r3, [r3, #0]
   14390:	1e5a      	subs	r2, r3, #1
   14392:	4b05      	ldr	r3, [pc, #20]	; (143a8 <vPortExitCritical+0x2c>)
   14394:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   14396:	4b04      	ldr	r3, [pc, #16]	; (143a8 <vPortExitCritical+0x2c>)
   14398:	681b      	ldr	r3, [r3, #0]
   1439a:	2b00      	cmp	r3, #0
   1439c:	d100      	bne.n	143a0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1439e:	b662      	cpsie	i
    }
}
   143a0:	46c0      	nop			; (mov r8, r8)
   143a2:	46bd      	mov	sp, r7
   143a4:	bd80      	pop	{r7, pc}
   143a6:	46c0      	nop			; (mov r8, r8)
   143a8:	20000008 	.word	0x20000008

000143ac <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   143ac:	f3ef 8010 	mrs	r0, PRIMASK
   143b0:	b672      	cpsid	i
   143b2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   143b4:	46c0      	nop			; (mov r8, r8)
   143b6:	0018      	movs	r0, r3

000143b8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   143b8:	f380 8810 	msr	PRIMASK, r0
   143bc:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   143be:	46c0      	nop			; (mov r8, r8)

000143c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   143c0:	f3ef 8009 	mrs	r0, PSP
   143c4:	4b0e      	ldr	r3, [pc, #56]	; (14400 <pxCurrentTCBConst>)
   143c6:	681a      	ldr	r2, [r3, #0]
   143c8:	3820      	subs	r0, #32
   143ca:	6010      	str	r0, [r2, #0]
   143cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   143ce:	4644      	mov	r4, r8
   143d0:	464d      	mov	r5, r9
   143d2:	4656      	mov	r6, sl
   143d4:	465f      	mov	r7, fp
   143d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   143d8:	b508      	push	{r3, lr}
   143da:	b672      	cpsid	i
   143dc:	f001 fb00 	bl	159e0 <vTaskSwitchContext>
   143e0:	b662      	cpsie	i
   143e2:	bc0c      	pop	{r2, r3}
   143e4:	6811      	ldr	r1, [r2, #0]
   143e6:	6808      	ldr	r0, [r1, #0]
   143e8:	3010      	adds	r0, #16
   143ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   143ec:	46a0      	mov	r8, r4
   143ee:	46a9      	mov	r9, r5
   143f0:	46b2      	mov	sl, r6
   143f2:	46bb      	mov	fp, r7
   143f4:	f380 8809 	msr	PSP, r0
   143f8:	3820      	subs	r0, #32
   143fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   143fc:	4718      	bx	r3
   143fe:	46c0      	nop			; (mov r8, r8)

00014400 <pxCurrentTCBConst>:
   14400:	20002864 	.word	0x20002864
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   14404:	46c0      	nop			; (mov r8, r8)
   14406:	46c0      	nop			; (mov r8, r8)

00014408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   14408:	b580      	push	{r7, lr}
   1440a:	b082      	sub	sp, #8
   1440c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1440e:	4b0a      	ldr	r3, [pc, #40]	; (14438 <SysTick_Handler+0x30>)
   14410:	4798      	blx	r3
   14412:	0003      	movs	r3, r0
   14414:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   14416:	4b09      	ldr	r3, [pc, #36]	; (1443c <SysTick_Handler+0x34>)
   14418:	4798      	blx	r3
   1441a:	1e03      	subs	r3, r0, #0
   1441c:	d003      	beq.n	14426 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1441e:	4b08      	ldr	r3, [pc, #32]	; (14440 <SysTick_Handler+0x38>)
   14420:	2280      	movs	r2, #128	; 0x80
   14422:	0552      	lsls	r2, r2, #21
   14424:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   14426:	687b      	ldr	r3, [r7, #4]
   14428:	0018      	movs	r0, r3
   1442a:	4b06      	ldr	r3, [pc, #24]	; (14444 <SysTick_Handler+0x3c>)
   1442c:	4798      	blx	r3
}
   1442e:	46c0      	nop			; (mov r8, r8)
   14430:	46bd      	mov	sp, r7
   14432:	b002      	add	sp, #8
   14434:	bd80      	pop	{r7, pc}
   14436:	46c0      	nop			; (mov r8, r8)
   14438:	000143ad 	.word	0x000143ad
   1443c:	0001586d 	.word	0x0001586d
   14440:	e000ed04 	.word	0xe000ed04
   14444:	000143b9 	.word	0x000143b9

00014448 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   14448:	b5b0      	push	{r4, r5, r7, lr}
   1444a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1444c:	4b0b      	ldr	r3, [pc, #44]	; (1447c <prvSetupTimerInterrupt+0x34>)
   1444e:	2200      	movs	r2, #0
   14450:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   14452:	4b0b      	ldr	r3, [pc, #44]	; (14480 <prvSetupTimerInterrupt+0x38>)
   14454:	2200      	movs	r2, #0
   14456:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   14458:	4c0a      	ldr	r4, [pc, #40]	; (14484 <prvSetupTimerInterrupt+0x3c>)
   1445a:	2000      	movs	r0, #0
   1445c:	4b0a      	ldr	r3, [pc, #40]	; (14488 <prvSetupTimerInterrupt+0x40>)
   1445e:	4798      	blx	r3
   14460:	4b0a      	ldr	r3, [pc, #40]	; (1448c <prvSetupTimerInterrupt+0x44>)
   14462:	22fa      	movs	r2, #250	; 0xfa
   14464:	0091      	lsls	r1, r2, #2
   14466:	4798      	blx	r3
   14468:	0003      	movs	r3, r0
   1446a:	3b01      	subs	r3, #1
   1446c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1446e:	4b03      	ldr	r3, [pc, #12]	; (1447c <prvSetupTimerInterrupt+0x34>)
   14470:	2207      	movs	r2, #7
   14472:	601a      	str	r2, [r3, #0]
}
   14474:	46c0      	nop			; (mov r8, r8)
   14476:	46bd      	mov	sp, r7
   14478:	bdb0      	pop	{r4, r5, r7, pc}
   1447a:	46c0      	nop			; (mov r8, r8)
   1447c:	e000e010 	.word	0xe000e010
   14480:	e000e018 	.word	0xe000e018
   14484:	e000e014 	.word	0xe000e014
   14488:	000191fd 	.word	0x000191fd
   1448c:	00019aad 	.word	0x00019aad

00014490 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   14490:	b580      	push	{r7, lr}
   14492:	b084      	sub	sp, #16
   14494:	af00      	add	r7, sp, #0
   14496:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   14498:	2300      	movs	r3, #0
   1449a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1449c:	687b      	ldr	r3, [r7, #4]
   1449e:	2207      	movs	r2, #7
   144a0:	4013      	ands	r3, r2
   144a2:	d004      	beq.n	144ae <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   144a4:	687b      	ldr	r3, [r7, #4]
   144a6:	2207      	movs	r2, #7
   144a8:	4393      	bics	r3, r2
   144aa:	3308      	adds	r3, #8
   144ac:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   144ae:	4b19      	ldr	r3, [pc, #100]	; (14514 <pvPortMalloc+0x84>)
   144b0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   144b2:	4b19      	ldr	r3, [pc, #100]	; (14518 <pvPortMalloc+0x88>)
   144b4:	681b      	ldr	r3, [r3, #0]
   144b6:	2b00      	cmp	r3, #0
   144b8:	d105      	bne.n	144c6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   144ba:	4b18      	ldr	r3, [pc, #96]	; (1451c <pvPortMalloc+0x8c>)
   144bc:	2207      	movs	r2, #7
   144be:	4393      	bics	r3, r2
   144c0:	001a      	movs	r2, r3
   144c2:	4b15      	ldr	r3, [pc, #84]	; (14518 <pvPortMalloc+0x88>)
   144c4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   144c6:	4b16      	ldr	r3, [pc, #88]	; (14520 <pvPortMalloc+0x90>)
   144c8:	681a      	ldr	r2, [r3, #0]
   144ca:	687b      	ldr	r3, [r7, #4]
   144cc:	18d3      	adds	r3, r2, r3
   144ce:	4a15      	ldr	r2, [pc, #84]	; (14524 <pvPortMalloc+0x94>)
   144d0:	4293      	cmp	r3, r2
   144d2:	d813      	bhi.n	144fc <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   144d4:	4b12      	ldr	r3, [pc, #72]	; (14520 <pvPortMalloc+0x90>)
   144d6:	681a      	ldr	r2, [r3, #0]
   144d8:	687b      	ldr	r3, [r7, #4]
   144da:	18d2      	adds	r2, r2, r3
   144dc:	4b10      	ldr	r3, [pc, #64]	; (14520 <pvPortMalloc+0x90>)
   144de:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   144e0:	429a      	cmp	r2, r3
   144e2:	d90b      	bls.n	144fc <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   144e4:	4b0c      	ldr	r3, [pc, #48]	; (14518 <pvPortMalloc+0x88>)
   144e6:	681a      	ldr	r2, [r3, #0]
   144e8:	4b0d      	ldr	r3, [pc, #52]	; (14520 <pvPortMalloc+0x90>)
   144ea:	681b      	ldr	r3, [r3, #0]
   144ec:	18d3      	adds	r3, r2, r3
   144ee:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   144f0:	4b0b      	ldr	r3, [pc, #44]	; (14520 <pvPortMalloc+0x90>)
   144f2:	681a      	ldr	r2, [r3, #0]
   144f4:	687b      	ldr	r3, [r7, #4]
   144f6:	18d2      	adds	r2, r2, r3
   144f8:	4b09      	ldr	r3, [pc, #36]	; (14520 <pvPortMalloc+0x90>)
   144fa:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   144fc:	4b0a      	ldr	r3, [pc, #40]	; (14528 <pvPortMalloc+0x98>)
   144fe:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   14500:	68fb      	ldr	r3, [r7, #12]
   14502:	2b00      	cmp	r3, #0
   14504:	d101      	bne.n	1450a <pvPortMalloc+0x7a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   14506:	4b09      	ldr	r3, [pc, #36]	; (1452c <pvPortMalloc+0x9c>)
   14508:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1450a:	68fb      	ldr	r3, [r7, #12]
}
   1450c:	0018      	movs	r0, r3
   1450e:	46bd      	mov	sp, r7
   14510:	b004      	add	sp, #16
   14512:	bd80      	pop	{r7, pc}
   14514:	00015705 	.word	0x00015705
   14518:	20002860 	.word	0x20002860
   1451c:	20000154 	.word	0x20000154
   14520:	2000285c 	.word	0x2000285c
   14524:	00002707 	.word	0x00002707
   14528:	0001571d 	.word	0x0001571d
   1452c:	00019a7d 	.word	0x00019a7d

00014530 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   14530:	b580      	push	{r7, lr}
   14532:	b082      	sub	sp, #8
   14534:	af00      	add	r7, sp, #0
   14536:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   14538:	687b      	ldr	r3, [r7, #4]
   1453a:	2b00      	cmp	r3, #0
   1453c:	d001      	beq.n	14542 <vPortFree+0x12>
   1453e:	b672      	cpsid	i
   14540:	e7fe      	b.n	14540 <vPortFree+0x10>
}
   14542:	46c0      	nop			; (mov r8, r8)
   14544:	46bd      	mov	sp, r7
   14546:	b002      	add	sp, #8
   14548:	bd80      	pop	{r7, pc}
	...

0001454c <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1454c:	b580      	push	{r7, lr}
   1454e:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   14550:	4b03      	ldr	r3, [pc, #12]	; (14560 <xPortGetFreeHeapSize+0x14>)
   14552:	681b      	ldr	r3, [r3, #0]
   14554:	4a03      	ldr	r2, [pc, #12]	; (14564 <xPortGetFreeHeapSize+0x18>)
   14556:	1ad3      	subs	r3, r2, r3
}
   14558:	0018      	movs	r0, r3
   1455a:	46bd      	mov	sp, r7
   1455c:	bd80      	pop	{r7, pc}
   1455e:	46c0      	nop			; (mov r8, r8)
   14560:	2000285c 	.word	0x2000285c
   14564:	00002708 	.word	0x00002708

00014568 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   14568:	b580      	push	{r7, lr}
   1456a:	b084      	sub	sp, #16
   1456c:	af00      	add	r7, sp, #0
   1456e:	6078      	str	r0, [r7, #4]
   14570:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   14572:	687b      	ldr	r3, [r7, #4]
   14574:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   14576:	68fb      	ldr	r3, [r7, #12]
   14578:	2b00      	cmp	r3, #0
   1457a:	d101      	bne.n	14580 <xQueueGenericReset+0x18>
   1457c:	b672      	cpsid	i
   1457e:	e7fe      	b.n	1457e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   14580:	4b23      	ldr	r3, [pc, #140]	; (14610 <xQueueGenericReset+0xa8>)
   14582:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   14584:	68fb      	ldr	r3, [r7, #12]
   14586:	681a      	ldr	r2, [r3, #0]
   14588:	68fb      	ldr	r3, [r7, #12]
   1458a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1458c:	68fb      	ldr	r3, [r7, #12]
   1458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   14590:	434b      	muls	r3, r1
   14592:	18d2      	adds	r2, r2, r3
   14594:	68fb      	ldr	r3, [r7, #12]
   14596:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   14598:	68fb      	ldr	r3, [r7, #12]
   1459a:	2200      	movs	r2, #0
   1459c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1459e:	68fb      	ldr	r3, [r7, #12]
   145a0:	681a      	ldr	r2, [r3, #0]
   145a2:	68fb      	ldr	r3, [r7, #12]
   145a4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   145a6:	68fb      	ldr	r3, [r7, #12]
   145a8:	681a      	ldr	r2, [r3, #0]
   145aa:	68fb      	ldr	r3, [r7, #12]
   145ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   145ae:	1e59      	subs	r1, r3, #1
   145b0:	68fb      	ldr	r3, [r7, #12]
   145b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   145b4:	434b      	muls	r3, r1
   145b6:	18d2      	adds	r2, r2, r3
   145b8:	68fb      	ldr	r3, [r7, #12]
   145ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   145bc:	68fb      	ldr	r3, [r7, #12]
   145be:	2244      	movs	r2, #68	; 0x44
   145c0:	21ff      	movs	r1, #255	; 0xff
   145c2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   145c4:	68fb      	ldr	r3, [r7, #12]
   145c6:	2245      	movs	r2, #69	; 0x45
   145c8:	21ff      	movs	r1, #255	; 0xff
   145ca:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   145cc:	683b      	ldr	r3, [r7, #0]
   145ce:	2b00      	cmp	r3, #0
   145d0:	d10d      	bne.n	145ee <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   145d2:	68fb      	ldr	r3, [r7, #12]
   145d4:	691b      	ldr	r3, [r3, #16]
   145d6:	2b00      	cmp	r3, #0
   145d8:	d013      	beq.n	14602 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   145da:	68fb      	ldr	r3, [r7, #12]
   145dc:	3310      	adds	r3, #16
   145de:	0018      	movs	r0, r3
   145e0:	4b0c      	ldr	r3, [pc, #48]	; (14614 <xQueueGenericReset+0xac>)
   145e2:	4798      	blx	r3
   145e4:	1e03      	subs	r3, r0, #0
   145e6:	d00c      	beq.n	14602 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   145e8:	4b0b      	ldr	r3, [pc, #44]	; (14618 <xQueueGenericReset+0xb0>)
   145ea:	4798      	blx	r3
   145ec:	e009      	b.n	14602 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   145ee:	68fb      	ldr	r3, [r7, #12]
   145f0:	3310      	adds	r3, #16
   145f2:	0018      	movs	r0, r3
   145f4:	4b09      	ldr	r3, [pc, #36]	; (1461c <xQueueGenericReset+0xb4>)
   145f6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   145f8:	68fb      	ldr	r3, [r7, #12]
   145fa:	3324      	adds	r3, #36	; 0x24
   145fc:	0018      	movs	r0, r3
   145fe:	4b07      	ldr	r3, [pc, #28]	; (1461c <xQueueGenericReset+0xb4>)
   14600:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   14602:	4b07      	ldr	r3, [pc, #28]	; (14620 <xQueueGenericReset+0xb8>)
   14604:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   14606:	2301      	movs	r3, #1
}
   14608:	0018      	movs	r0, r3
   1460a:	46bd      	mov	sp, r7
   1460c:	b004      	add	sp, #16
   1460e:	bd80      	pop	{r7, pc}
   14610:	00014359 	.word	0x00014359
   14614:	00015b41 	.word	0x00015b41
   14618:	00014341 	.word	0x00014341
   1461c:	000140c7 	.word	0x000140c7
   14620:	0001437d 	.word	0x0001437d

00014624 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   14624:	b590      	push	{r4, r7, lr}
   14626:	b08b      	sub	sp, #44	; 0x2c
   14628:	af02      	add	r7, sp, #8
   1462a:	60f8      	str	r0, [r7, #12]
   1462c:	60b9      	str	r1, [r7, #8]
   1462e:	1dfb      	adds	r3, r7, #7
   14630:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   14632:	68fb      	ldr	r3, [r7, #12]
   14634:	2b00      	cmp	r3, #0
   14636:	d101      	bne.n	1463c <xQueueGenericCreate+0x18>
   14638:	b672      	cpsid	i
   1463a:	e7fe      	b.n	1463a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1463c:	68bb      	ldr	r3, [r7, #8]
   1463e:	2b00      	cmp	r3, #0
   14640:	d102      	bne.n	14648 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   14642:	2300      	movs	r3, #0
   14644:	61fb      	str	r3, [r7, #28]
   14646:	e003      	b.n	14650 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   14648:	68fb      	ldr	r3, [r7, #12]
   1464a:	68ba      	ldr	r2, [r7, #8]
   1464c:	4353      	muls	r3, r2
   1464e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   14650:	69fb      	ldr	r3, [r7, #28]
   14652:	334c      	adds	r3, #76	; 0x4c
   14654:	0018      	movs	r0, r3
   14656:	4b0c      	ldr	r3, [pc, #48]	; (14688 <xQueueGenericCreate+0x64>)
   14658:	4798      	blx	r3
   1465a:	0003      	movs	r3, r0
   1465c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1465e:	69bb      	ldr	r3, [r7, #24]
   14660:	2b00      	cmp	r3, #0
   14662:	d00c      	beq.n	1467e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   14664:	69bb      	ldr	r3, [r7, #24]
   14666:	334c      	adds	r3, #76	; 0x4c
   14668:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1466a:	1dfb      	adds	r3, r7, #7
   1466c:	781c      	ldrb	r4, [r3, #0]
   1466e:	697a      	ldr	r2, [r7, #20]
   14670:	68b9      	ldr	r1, [r7, #8]
   14672:	68f8      	ldr	r0, [r7, #12]
   14674:	69bb      	ldr	r3, [r7, #24]
   14676:	9300      	str	r3, [sp, #0]
   14678:	0023      	movs	r3, r4
   1467a:	4c04      	ldr	r4, [pc, #16]	; (1468c <xQueueGenericCreate+0x68>)
   1467c:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
   1467e:	69bb      	ldr	r3, [r7, #24]
	}
   14680:	0018      	movs	r0, r3
   14682:	46bd      	mov	sp, r7
   14684:	b009      	add	sp, #36	; 0x24
   14686:	bd90      	pop	{r4, r7, pc}
   14688:	00014491 	.word	0x00014491
   1468c:	00014691 	.word	0x00014691

00014690 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   14690:	b580      	push	{r7, lr}
   14692:	b084      	sub	sp, #16
   14694:	af00      	add	r7, sp, #0
   14696:	60f8      	str	r0, [r7, #12]
   14698:	60b9      	str	r1, [r7, #8]
   1469a:	607a      	str	r2, [r7, #4]
   1469c:	001a      	movs	r2, r3
   1469e:	1cfb      	adds	r3, r7, #3
   146a0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   146a2:	68bb      	ldr	r3, [r7, #8]
   146a4:	2b00      	cmp	r3, #0
   146a6:	d103      	bne.n	146b0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   146a8:	69bb      	ldr	r3, [r7, #24]
   146aa:	69ba      	ldr	r2, [r7, #24]
   146ac:	601a      	str	r2, [r3, #0]
   146ae:	e002      	b.n	146b6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   146b0:	69bb      	ldr	r3, [r7, #24]
   146b2:	687a      	ldr	r2, [r7, #4]
   146b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   146b6:	69bb      	ldr	r3, [r7, #24]
   146b8:	68fa      	ldr	r2, [r7, #12]
   146ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   146bc:	69bb      	ldr	r3, [r7, #24]
   146be:	68ba      	ldr	r2, [r7, #8]
   146c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   146c2:	69bb      	ldr	r3, [r7, #24]
   146c4:	2101      	movs	r1, #1
   146c6:	0018      	movs	r0, r3
   146c8:	4b04      	ldr	r3, [pc, #16]	; (146dc <prvInitialiseNewQueue+0x4c>)
   146ca:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   146cc:	69bb      	ldr	r3, [r7, #24]
   146ce:	2200      	movs	r2, #0
   146d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   146d2:	46c0      	nop			; (mov r8, r8)
   146d4:	46bd      	mov	sp, r7
   146d6:	b004      	add	sp, #16
   146d8:	bd80      	pop	{r7, pc}
   146da:	46c0      	nop			; (mov r8, r8)
   146dc:	00014569 	.word	0x00014569

000146e0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   146e0:	b590      	push	{r4, r7, lr}
   146e2:	b083      	sub	sp, #12
   146e4:	af00      	add	r7, sp, #0
   146e6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   146e8:	687b      	ldr	r3, [r7, #4]
   146ea:	2b00      	cmp	r3, #0
   146ec:	d00e      	beq.n	1470c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   146ee:	687b      	ldr	r3, [r7, #4]
   146f0:	2200      	movs	r2, #0
   146f2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   146f4:	687b      	ldr	r3, [r7, #4]
   146f6:	2200      	movs	r2, #0
   146f8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   146fa:	687b      	ldr	r3, [r7, #4]
   146fc:	2200      	movs	r2, #0
   146fe:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   14700:	6878      	ldr	r0, [r7, #4]
   14702:	2300      	movs	r3, #0
   14704:	2200      	movs	r2, #0
   14706:	2100      	movs	r1, #0
   14708:	4c02      	ldr	r4, [pc, #8]	; (14714 <prvInitialiseMutex+0x34>)
   1470a:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1470c:	46c0      	nop			; (mov r8, r8)
   1470e:	46bd      	mov	sp, r7
   14710:	b003      	add	sp, #12
   14712:	bd90      	pop	{r4, r7, pc}
   14714:	00014759 	.word	0x00014759

00014718 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   14718:	b580      	push	{r7, lr}
   1471a:	b086      	sub	sp, #24
   1471c:	af00      	add	r7, sp, #0
   1471e:	0002      	movs	r2, r0
   14720:	1dfb      	adds	r3, r7, #7
   14722:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   14724:	2301      	movs	r3, #1
   14726:	617b      	str	r3, [r7, #20]
   14728:	2300      	movs	r3, #0
   1472a:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1472c:	1dfb      	adds	r3, r7, #7
   1472e:	781a      	ldrb	r2, [r3, #0]
   14730:	6939      	ldr	r1, [r7, #16]
   14732:	697b      	ldr	r3, [r7, #20]
   14734:	0018      	movs	r0, r3
   14736:	4b06      	ldr	r3, [pc, #24]	; (14750 <xQueueCreateMutex+0x38>)
   14738:	4798      	blx	r3
   1473a:	0003      	movs	r3, r0
   1473c:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1473e:	68fb      	ldr	r3, [r7, #12]
   14740:	0018      	movs	r0, r3
   14742:	4b04      	ldr	r3, [pc, #16]	; (14754 <xQueueCreateMutex+0x3c>)
   14744:	4798      	blx	r3

		return pxNewQueue;
   14746:	68fb      	ldr	r3, [r7, #12]
	}
   14748:	0018      	movs	r0, r3
   1474a:	46bd      	mov	sp, r7
   1474c:	b006      	add	sp, #24
   1474e:	bd80      	pop	{r7, pc}
   14750:	00014625 	.word	0x00014625
   14754:	000146e1 	.word	0x000146e1

00014758 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   14758:	b580      	push	{r7, lr}
   1475a:	b08a      	sub	sp, #40	; 0x28
   1475c:	af00      	add	r7, sp, #0
   1475e:	60f8      	str	r0, [r7, #12]
   14760:	60b9      	str	r1, [r7, #8]
   14762:	607a      	str	r2, [r7, #4]
   14764:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   14766:	2300      	movs	r3, #0
   14768:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1476a:	68fb      	ldr	r3, [r7, #12]
   1476c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1476e:	6a3b      	ldr	r3, [r7, #32]
   14770:	2b00      	cmp	r3, #0
   14772:	d101      	bne.n	14778 <xQueueGenericSend+0x20>
   14774:	b672      	cpsid	i
   14776:	e7fe      	b.n	14776 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   14778:	68bb      	ldr	r3, [r7, #8]
   1477a:	2b00      	cmp	r3, #0
   1477c:	d103      	bne.n	14786 <xQueueGenericSend+0x2e>
   1477e:	6a3b      	ldr	r3, [r7, #32]
   14780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   14782:	2b00      	cmp	r3, #0
   14784:	d101      	bne.n	1478a <xQueueGenericSend+0x32>
   14786:	2301      	movs	r3, #1
   14788:	e000      	b.n	1478c <xQueueGenericSend+0x34>
   1478a:	2300      	movs	r3, #0
   1478c:	2b00      	cmp	r3, #0
   1478e:	d101      	bne.n	14794 <xQueueGenericSend+0x3c>
   14790:	b672      	cpsid	i
   14792:	e7fe      	b.n	14792 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   14794:	683b      	ldr	r3, [r7, #0]
   14796:	2b02      	cmp	r3, #2
   14798:	d103      	bne.n	147a2 <xQueueGenericSend+0x4a>
   1479a:	6a3b      	ldr	r3, [r7, #32]
   1479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1479e:	2b01      	cmp	r3, #1
   147a0:	d101      	bne.n	147a6 <xQueueGenericSend+0x4e>
   147a2:	2301      	movs	r3, #1
   147a4:	e000      	b.n	147a8 <xQueueGenericSend+0x50>
   147a6:	2300      	movs	r3, #0
   147a8:	2b00      	cmp	r3, #0
   147aa:	d101      	bne.n	147b0 <xQueueGenericSend+0x58>
   147ac:	b672      	cpsid	i
   147ae:	e7fe      	b.n	147ae <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   147b0:	4b53      	ldr	r3, [pc, #332]	; (14900 <xQueueGenericSend+0x1a8>)
   147b2:	4798      	blx	r3
   147b4:	1e03      	subs	r3, r0, #0
   147b6:	d102      	bne.n	147be <xQueueGenericSend+0x66>
   147b8:	687b      	ldr	r3, [r7, #4]
   147ba:	2b00      	cmp	r3, #0
   147bc:	d101      	bne.n	147c2 <xQueueGenericSend+0x6a>
   147be:	2301      	movs	r3, #1
   147c0:	e000      	b.n	147c4 <xQueueGenericSend+0x6c>
   147c2:	2300      	movs	r3, #0
   147c4:	2b00      	cmp	r3, #0
   147c6:	d101      	bne.n	147cc <xQueueGenericSend+0x74>
   147c8:	b672      	cpsid	i
   147ca:	e7fe      	b.n	147ca <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   147cc:	4b4d      	ldr	r3, [pc, #308]	; (14904 <xQueueGenericSend+0x1ac>)
   147ce:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   147d0:	6a3b      	ldr	r3, [r7, #32]
   147d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   147d4:	6a3b      	ldr	r3, [r7, #32]
   147d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   147d8:	429a      	cmp	r2, r3
   147da:	d302      	bcc.n	147e2 <xQueueGenericSend+0x8a>
   147dc:	683b      	ldr	r3, [r7, #0]
   147de:	2b02      	cmp	r3, #2
   147e0:	d12d      	bne.n	1483e <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   147e2:	683a      	ldr	r2, [r7, #0]
   147e4:	68b9      	ldr	r1, [r7, #8]
   147e6:	6a3b      	ldr	r3, [r7, #32]
   147e8:	0018      	movs	r0, r3
   147ea:	4b47      	ldr	r3, [pc, #284]	; (14908 <xQueueGenericSend+0x1b0>)
   147ec:	4798      	blx	r3
   147ee:	0003      	movs	r3, r0
   147f0:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   147f2:	6a3b      	ldr	r3, [r7, #32]
   147f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   147f6:	2b00      	cmp	r3, #0
   147f8:	d00a      	beq.n	14810 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   147fa:	683a      	ldr	r2, [r7, #0]
   147fc:	6a3b      	ldr	r3, [r7, #32]
   147fe:	0011      	movs	r1, r2
   14800:	0018      	movs	r0, r3
   14802:	4b42      	ldr	r3, [pc, #264]	; (1490c <xQueueGenericSend+0x1b4>)
   14804:	4798      	blx	r3
   14806:	1e03      	subs	r3, r0, #0
   14808:	d015      	beq.n	14836 <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1480a:	4b41      	ldr	r3, [pc, #260]	; (14910 <xQueueGenericSend+0x1b8>)
   1480c:	4798      	blx	r3
   1480e:	e012      	b.n	14836 <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   14810:	6a3b      	ldr	r3, [r7, #32]
   14812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14814:	2b00      	cmp	r3, #0
   14816:	d009      	beq.n	1482c <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   14818:	6a3b      	ldr	r3, [r7, #32]
   1481a:	3324      	adds	r3, #36	; 0x24
   1481c:	0018      	movs	r0, r3
   1481e:	4b3d      	ldr	r3, [pc, #244]	; (14914 <xQueueGenericSend+0x1bc>)
   14820:	4798      	blx	r3
   14822:	1e03      	subs	r3, r0, #0
   14824:	d007      	beq.n	14836 <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   14826:	4b3a      	ldr	r3, [pc, #232]	; (14910 <xQueueGenericSend+0x1b8>)
   14828:	4798      	blx	r3
   1482a:	e004      	b.n	14836 <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1482c:	69fb      	ldr	r3, [r7, #28]
   1482e:	2b00      	cmp	r3, #0
   14830:	d001      	beq.n	14836 <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   14832:	4b37      	ldr	r3, [pc, #220]	; (14910 <xQueueGenericSend+0x1b8>)
   14834:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   14836:	4b38      	ldr	r3, [pc, #224]	; (14918 <xQueueGenericSend+0x1c0>)
   14838:	4798      	blx	r3
				return pdPASS;
   1483a:	2301      	movs	r3, #1
   1483c:	e05c      	b.n	148f8 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1483e:	687b      	ldr	r3, [r7, #4]
   14840:	2b00      	cmp	r3, #0
   14842:	d103      	bne.n	1484c <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   14844:	4b34      	ldr	r3, [pc, #208]	; (14918 <xQueueGenericSend+0x1c0>)
   14846:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   14848:	2300      	movs	r3, #0
   1484a:	e055      	b.n	148f8 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   1484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1484e:	2b00      	cmp	r3, #0
   14850:	d106      	bne.n	14860 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   14852:	2314      	movs	r3, #20
   14854:	18fb      	adds	r3, r7, r3
   14856:	0018      	movs	r0, r3
   14858:	4b30      	ldr	r3, [pc, #192]	; (1491c <xQueueGenericSend+0x1c4>)
   1485a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1485c:	2301      	movs	r3, #1
   1485e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   14860:	4b2d      	ldr	r3, [pc, #180]	; (14918 <xQueueGenericSend+0x1c0>)
   14862:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   14864:	4b2e      	ldr	r3, [pc, #184]	; (14920 <xQueueGenericSend+0x1c8>)
   14866:	4798      	blx	r3
		prvLockQueue( pxQueue );
   14868:	4b26      	ldr	r3, [pc, #152]	; (14904 <xQueueGenericSend+0x1ac>)
   1486a:	4798      	blx	r3
   1486c:	6a3b      	ldr	r3, [r7, #32]
   1486e:	2244      	movs	r2, #68	; 0x44
   14870:	5c9b      	ldrb	r3, [r3, r2]
   14872:	b25b      	sxtb	r3, r3
   14874:	3301      	adds	r3, #1
   14876:	d103      	bne.n	14880 <xQueueGenericSend+0x128>
   14878:	6a3b      	ldr	r3, [r7, #32]
   1487a:	2244      	movs	r2, #68	; 0x44
   1487c:	2100      	movs	r1, #0
   1487e:	5499      	strb	r1, [r3, r2]
   14880:	6a3b      	ldr	r3, [r7, #32]
   14882:	2245      	movs	r2, #69	; 0x45
   14884:	5c9b      	ldrb	r3, [r3, r2]
   14886:	b25b      	sxtb	r3, r3
   14888:	3301      	adds	r3, #1
   1488a:	d103      	bne.n	14894 <xQueueGenericSend+0x13c>
   1488c:	6a3b      	ldr	r3, [r7, #32]
   1488e:	2245      	movs	r2, #69	; 0x45
   14890:	2100      	movs	r1, #0
   14892:	5499      	strb	r1, [r3, r2]
   14894:	4b20      	ldr	r3, [pc, #128]	; (14918 <xQueueGenericSend+0x1c0>)
   14896:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   14898:	1d3a      	adds	r2, r7, #4
   1489a:	2314      	movs	r3, #20
   1489c:	18fb      	adds	r3, r7, r3
   1489e:	0011      	movs	r1, r2
   148a0:	0018      	movs	r0, r3
   148a2:	4b20      	ldr	r3, [pc, #128]	; (14924 <xQueueGenericSend+0x1cc>)
   148a4:	4798      	blx	r3
   148a6:	1e03      	subs	r3, r0, #0
   148a8:	d11f      	bne.n	148ea <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   148aa:	6a3b      	ldr	r3, [r7, #32]
   148ac:	0018      	movs	r0, r3
   148ae:	4b1e      	ldr	r3, [pc, #120]	; (14928 <xQueueGenericSend+0x1d0>)
   148b0:	4798      	blx	r3
   148b2:	1e03      	subs	r3, r0, #0
   148b4:	d012      	beq.n	148dc <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   148b6:	6a3b      	ldr	r3, [r7, #32]
   148b8:	3310      	adds	r3, #16
   148ba:	687a      	ldr	r2, [r7, #4]
   148bc:	0011      	movs	r1, r2
   148be:	0018      	movs	r0, r3
   148c0:	4b1a      	ldr	r3, [pc, #104]	; (1492c <xQueueGenericSend+0x1d4>)
   148c2:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   148c4:	6a3b      	ldr	r3, [r7, #32]
   148c6:	0018      	movs	r0, r3
   148c8:	4b19      	ldr	r3, [pc, #100]	; (14930 <xQueueGenericSend+0x1d8>)
   148ca:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   148cc:	4b19      	ldr	r3, [pc, #100]	; (14934 <xQueueGenericSend+0x1dc>)
   148ce:	4798      	blx	r3
   148d0:	1e03      	subs	r3, r0, #0
   148d2:	d000      	beq.n	148d6 <xQueueGenericSend+0x17e>
   148d4:	e77a      	b.n	147cc <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   148d6:	4b0e      	ldr	r3, [pc, #56]	; (14910 <xQueueGenericSend+0x1b8>)
   148d8:	4798      	blx	r3
   148da:	e777      	b.n	147cc <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   148dc:	6a3b      	ldr	r3, [r7, #32]
   148de:	0018      	movs	r0, r3
   148e0:	4b13      	ldr	r3, [pc, #76]	; (14930 <xQueueGenericSend+0x1d8>)
   148e2:	4798      	blx	r3
				( void ) xTaskResumeAll();
   148e4:	4b13      	ldr	r3, [pc, #76]	; (14934 <xQueueGenericSend+0x1dc>)
   148e6:	4798      	blx	r3
   148e8:	e770      	b.n	147cc <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   148ea:	6a3b      	ldr	r3, [r7, #32]
   148ec:	0018      	movs	r0, r3
   148ee:	4b10      	ldr	r3, [pc, #64]	; (14930 <xQueueGenericSend+0x1d8>)
   148f0:	4798      	blx	r3
			( void ) xTaskResumeAll();
   148f2:	4b10      	ldr	r3, [pc, #64]	; (14934 <xQueueGenericSend+0x1dc>)
   148f4:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   148f6:	2300      	movs	r3, #0
		}
	}
}
   148f8:	0018      	movs	r0, r3
   148fa:	46bd      	mov	sp, r7
   148fc:	b00a      	add	sp, #40	; 0x28
   148fe:	bd80      	pop	{r7, pc}
   14900:	00015e79 	.word	0x00015e79
   14904:	00014359 	.word	0x00014359
   14908:	00014f19 	.word	0x00014f19
   1490c:	0001521d 	.word	0x0001521d
   14910:	00014341 	.word	0x00014341
   14914:	00015b41 	.word	0x00015b41
   14918:	0001437d 	.word	0x0001437d
   1491c:	00015c01 	.word	0x00015c01
   14920:	00015705 	.word	0x00015705
   14924:	00015c29 	.word	0x00015c29
   14928:	0001516d 	.word	0x0001516d
   1492c:	00015aa9 	.word	0x00015aa9
   14930:	00015049 	.word	0x00015049
   14934:	0001571d 	.word	0x0001571d

00014938 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   14938:	b580      	push	{r7, lr}
   1493a:	b088      	sub	sp, #32
   1493c:	af00      	add	r7, sp, #0
   1493e:	60f8      	str	r0, [r7, #12]
   14940:	60b9      	str	r1, [r7, #8]
   14942:	607a      	str	r2, [r7, #4]
   14944:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   14946:	68fb      	ldr	r3, [r7, #12]
   14948:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1494a:	69bb      	ldr	r3, [r7, #24]
   1494c:	2b00      	cmp	r3, #0
   1494e:	d101      	bne.n	14954 <xQueueGenericSendFromISR+0x1c>
   14950:	b672      	cpsid	i
   14952:	e7fe      	b.n	14952 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   14954:	68bb      	ldr	r3, [r7, #8]
   14956:	2b00      	cmp	r3, #0
   14958:	d103      	bne.n	14962 <xQueueGenericSendFromISR+0x2a>
   1495a:	69bb      	ldr	r3, [r7, #24]
   1495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1495e:	2b00      	cmp	r3, #0
   14960:	d101      	bne.n	14966 <xQueueGenericSendFromISR+0x2e>
   14962:	2301      	movs	r3, #1
   14964:	e000      	b.n	14968 <xQueueGenericSendFromISR+0x30>
   14966:	2300      	movs	r3, #0
   14968:	2b00      	cmp	r3, #0
   1496a:	d101      	bne.n	14970 <xQueueGenericSendFromISR+0x38>
   1496c:	b672      	cpsid	i
   1496e:	e7fe      	b.n	1496e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   14970:	683b      	ldr	r3, [r7, #0]
   14972:	2b02      	cmp	r3, #2
   14974:	d103      	bne.n	1497e <xQueueGenericSendFromISR+0x46>
   14976:	69bb      	ldr	r3, [r7, #24]
   14978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1497a:	2b01      	cmp	r3, #1
   1497c:	d101      	bne.n	14982 <xQueueGenericSendFromISR+0x4a>
   1497e:	2301      	movs	r3, #1
   14980:	e000      	b.n	14984 <xQueueGenericSendFromISR+0x4c>
   14982:	2300      	movs	r3, #0
   14984:	2b00      	cmp	r3, #0
   14986:	d101      	bne.n	1498c <xQueueGenericSendFromISR+0x54>
   14988:	b672      	cpsid	i
   1498a:	e7fe      	b.n	1498a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1498c:	4b2d      	ldr	r3, [pc, #180]	; (14a44 <xQueueGenericSendFromISR+0x10c>)
   1498e:	4798      	blx	r3
   14990:	0003      	movs	r3, r0
   14992:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   14994:	69bb      	ldr	r3, [r7, #24]
   14996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   14998:	69bb      	ldr	r3, [r7, #24]
   1499a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1499c:	429a      	cmp	r2, r3
   1499e:	d302      	bcc.n	149a6 <xQueueGenericSendFromISR+0x6e>
   149a0:	683b      	ldr	r3, [r7, #0]
   149a2:	2b02      	cmp	r3, #2
   149a4:	d142      	bne.n	14a2c <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   149a6:	2313      	movs	r3, #19
   149a8:	18fb      	adds	r3, r7, r3
   149aa:	69ba      	ldr	r2, [r7, #24]
   149ac:	2145      	movs	r1, #69	; 0x45
   149ae:	5c52      	ldrb	r2, [r2, r1]
   149b0:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   149b2:	683a      	ldr	r2, [r7, #0]
   149b4:	68b9      	ldr	r1, [r7, #8]
   149b6:	69bb      	ldr	r3, [r7, #24]
   149b8:	0018      	movs	r0, r3
   149ba:	4b23      	ldr	r3, [pc, #140]	; (14a48 <xQueueGenericSendFromISR+0x110>)
   149bc:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   149be:	2313      	movs	r3, #19
   149c0:	18fb      	adds	r3, r7, r3
   149c2:	781b      	ldrb	r3, [r3, #0]
   149c4:	b25b      	sxtb	r3, r3
   149c6:	3301      	adds	r3, #1
   149c8:	d124      	bne.n	14a14 <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   149ca:	69bb      	ldr	r3, [r7, #24]
   149cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   149ce:	2b00      	cmp	r3, #0
   149d0:	d00e      	beq.n	149f0 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   149d2:	683a      	ldr	r2, [r7, #0]
   149d4:	69bb      	ldr	r3, [r7, #24]
   149d6:	0011      	movs	r1, r2
   149d8:	0018      	movs	r0, r3
   149da:	4b1c      	ldr	r3, [pc, #112]	; (14a4c <xQueueGenericSendFromISR+0x114>)
   149dc:	4798      	blx	r3
   149de:	1e03      	subs	r3, r0, #0
   149e0:	d021      	beq.n	14a26 <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   149e2:	687b      	ldr	r3, [r7, #4]
   149e4:	2b00      	cmp	r3, #0
   149e6:	d01e      	beq.n	14a26 <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   149e8:	687b      	ldr	r3, [r7, #4]
   149ea:	2201      	movs	r2, #1
   149ec:	601a      	str	r2, [r3, #0]
   149ee:	e01a      	b.n	14a26 <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   149f0:	69bb      	ldr	r3, [r7, #24]
   149f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   149f4:	2b00      	cmp	r3, #0
   149f6:	d016      	beq.n	14a26 <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   149f8:	69bb      	ldr	r3, [r7, #24]
   149fa:	3324      	adds	r3, #36	; 0x24
   149fc:	0018      	movs	r0, r3
   149fe:	4b14      	ldr	r3, [pc, #80]	; (14a50 <xQueueGenericSendFromISR+0x118>)
   14a00:	4798      	blx	r3
   14a02:	1e03      	subs	r3, r0, #0
   14a04:	d00f      	beq.n	14a26 <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   14a06:	687b      	ldr	r3, [r7, #4]
   14a08:	2b00      	cmp	r3, #0
   14a0a:	d00c      	beq.n	14a26 <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   14a0c:	687b      	ldr	r3, [r7, #4]
   14a0e:	2201      	movs	r2, #1
   14a10:	601a      	str	r2, [r3, #0]
   14a12:	e008      	b.n	14a26 <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   14a14:	2313      	movs	r3, #19
   14a16:	18fb      	adds	r3, r7, r3
   14a18:	781b      	ldrb	r3, [r3, #0]
   14a1a:	3301      	adds	r3, #1
   14a1c:	b2db      	uxtb	r3, r3
   14a1e:	b259      	sxtb	r1, r3
   14a20:	69bb      	ldr	r3, [r7, #24]
   14a22:	2245      	movs	r2, #69	; 0x45
   14a24:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   14a26:	2301      	movs	r3, #1
   14a28:	61fb      	str	r3, [r7, #28]
		{
   14a2a:	e001      	b.n	14a30 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   14a2c:	2300      	movs	r3, #0
   14a2e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   14a30:	697b      	ldr	r3, [r7, #20]
   14a32:	0018      	movs	r0, r3
   14a34:	4b07      	ldr	r3, [pc, #28]	; (14a54 <xQueueGenericSendFromISR+0x11c>)
   14a36:	4798      	blx	r3

	return xReturn;
   14a38:	69fb      	ldr	r3, [r7, #28]
}
   14a3a:	0018      	movs	r0, r3
   14a3c:	46bd      	mov	sp, r7
   14a3e:	b008      	add	sp, #32
   14a40:	bd80      	pop	{r7, pc}
   14a42:	46c0      	nop			; (mov r8, r8)
   14a44:	000143ad 	.word	0x000143ad
   14a48:	00014f19 	.word	0x00014f19
   14a4c:	0001521d 	.word	0x0001521d
   14a50:	00015b41 	.word	0x00015b41
   14a54:	000143b9 	.word	0x000143b9

00014a58 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
   14a58:	b580      	push	{r7, lr}
   14a5a:	b088      	sub	sp, #32
   14a5c:	af00      	add	r7, sp, #0
   14a5e:	6078      	str	r0, [r7, #4]
   14a60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   14a62:	687b      	ldr	r3, [r7, #4]
   14a64:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   14a66:	69bb      	ldr	r3, [r7, #24]
   14a68:	2b00      	cmp	r3, #0
   14a6a:	d101      	bne.n	14a70 <xQueueGiveFromISR+0x18>
   14a6c:	b672      	cpsid	i
   14a6e:	e7fe      	b.n	14a6e <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   14a70:	69bb      	ldr	r3, [r7, #24]
   14a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   14a74:	2b00      	cmp	r3, #0
   14a76:	d001      	beq.n	14a7c <xQueueGiveFromISR+0x24>
   14a78:	b672      	cpsid	i
   14a7a:	e7fe      	b.n	14a7a <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   14a7c:	69bb      	ldr	r3, [r7, #24]
   14a7e:	681b      	ldr	r3, [r3, #0]
   14a80:	2b00      	cmp	r3, #0
   14a82:	d103      	bne.n	14a8c <xQueueGiveFromISR+0x34>
   14a84:	69bb      	ldr	r3, [r7, #24]
   14a86:	685b      	ldr	r3, [r3, #4]
   14a88:	2b00      	cmp	r3, #0
   14a8a:	d101      	bne.n	14a90 <xQueueGiveFromISR+0x38>
   14a8c:	2301      	movs	r3, #1
   14a8e:	e000      	b.n	14a92 <xQueueGiveFromISR+0x3a>
   14a90:	2300      	movs	r3, #0
   14a92:	2b00      	cmp	r3, #0
   14a94:	d101      	bne.n	14a9a <xQueueGiveFromISR+0x42>
   14a96:	b672      	cpsid	i
   14a98:	e7fe      	b.n	14a98 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   14a9a:	4b2b      	ldr	r3, [pc, #172]	; (14b48 <xQueueGiveFromISR+0xf0>)
   14a9c:	4798      	blx	r3
   14a9e:	0003      	movs	r3, r0
   14aa0:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   14aa2:	69bb      	ldr	r3, [r7, #24]
   14aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   14aa6:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   14aa8:	69bb      	ldr	r3, [r7, #24]
   14aaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   14aac:	693b      	ldr	r3, [r7, #16]
   14aae:	429a      	cmp	r2, r3
   14ab0:	d93f      	bls.n	14b32 <xQueueGiveFromISR+0xda>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   14ab2:	230f      	movs	r3, #15
   14ab4:	18fb      	adds	r3, r7, r3
   14ab6:	69ba      	ldr	r2, [r7, #24]
   14ab8:	2145      	movs	r1, #69	; 0x45
   14aba:	5c52      	ldrb	r2, [r2, r1]
   14abc:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   14abe:	693b      	ldr	r3, [r7, #16]
   14ac0:	1c5a      	adds	r2, r3, #1
   14ac2:	69bb      	ldr	r3, [r7, #24]
   14ac4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   14ac6:	230f      	movs	r3, #15
   14ac8:	18fb      	adds	r3, r7, r3
   14aca:	781b      	ldrb	r3, [r3, #0]
   14acc:	b25b      	sxtb	r3, r3
   14ace:	3301      	adds	r3, #1
   14ad0:	d123      	bne.n	14b1a <xQueueGiveFromISR+0xc2>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   14ad2:	69bb      	ldr	r3, [r7, #24]
   14ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   14ad6:	2b00      	cmp	r3, #0
   14ad8:	d00d      	beq.n	14af6 <xQueueGiveFromISR+0x9e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   14ada:	69bb      	ldr	r3, [r7, #24]
   14adc:	2100      	movs	r1, #0
   14ade:	0018      	movs	r0, r3
   14ae0:	4b1a      	ldr	r3, [pc, #104]	; (14b4c <xQueueGiveFromISR+0xf4>)
   14ae2:	4798      	blx	r3
   14ae4:	1e03      	subs	r3, r0, #0
   14ae6:	d021      	beq.n	14b2c <xQueueGiveFromISR+0xd4>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   14ae8:	683b      	ldr	r3, [r7, #0]
   14aea:	2b00      	cmp	r3, #0
   14aec:	d01e      	beq.n	14b2c <xQueueGiveFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   14aee:	683b      	ldr	r3, [r7, #0]
   14af0:	2201      	movs	r2, #1
   14af2:	601a      	str	r2, [r3, #0]
   14af4:	e01a      	b.n	14b2c <xQueueGiveFromISR+0xd4>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   14af6:	69bb      	ldr	r3, [r7, #24]
   14af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14afa:	2b00      	cmp	r3, #0
   14afc:	d016      	beq.n	14b2c <xQueueGiveFromISR+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   14afe:	69bb      	ldr	r3, [r7, #24]
   14b00:	3324      	adds	r3, #36	; 0x24
   14b02:	0018      	movs	r0, r3
   14b04:	4b12      	ldr	r3, [pc, #72]	; (14b50 <xQueueGiveFromISR+0xf8>)
   14b06:	4798      	blx	r3
   14b08:	1e03      	subs	r3, r0, #0
   14b0a:	d00f      	beq.n	14b2c <xQueueGiveFromISR+0xd4>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   14b0c:	683b      	ldr	r3, [r7, #0]
   14b0e:	2b00      	cmp	r3, #0
   14b10:	d00c      	beq.n	14b2c <xQueueGiveFromISR+0xd4>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   14b12:	683b      	ldr	r3, [r7, #0]
   14b14:	2201      	movs	r2, #1
   14b16:	601a      	str	r2, [r3, #0]
   14b18:	e008      	b.n	14b2c <xQueueGiveFromISR+0xd4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   14b1a:	230f      	movs	r3, #15
   14b1c:	18fb      	adds	r3, r7, r3
   14b1e:	781b      	ldrb	r3, [r3, #0]
   14b20:	3301      	adds	r3, #1
   14b22:	b2db      	uxtb	r3, r3
   14b24:	b259      	sxtb	r1, r3
   14b26:	69bb      	ldr	r3, [r7, #24]
   14b28:	2245      	movs	r2, #69	; 0x45
   14b2a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   14b2c:	2301      	movs	r3, #1
   14b2e:	61fb      	str	r3, [r7, #28]
   14b30:	e001      	b.n	14b36 <xQueueGiveFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   14b32:	2300      	movs	r3, #0
   14b34:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   14b36:	697b      	ldr	r3, [r7, #20]
   14b38:	0018      	movs	r0, r3
   14b3a:	4b06      	ldr	r3, [pc, #24]	; (14b54 <xQueueGiveFromISR+0xfc>)
   14b3c:	4798      	blx	r3

	return xReturn;
   14b3e:	69fb      	ldr	r3, [r7, #28]
}
   14b40:	0018      	movs	r0, r3
   14b42:	46bd      	mov	sp, r7
   14b44:	b008      	add	sp, #32
   14b46:	bd80      	pop	{r7, pc}
   14b48:	000143ad 	.word	0x000143ad
   14b4c:	0001521d 	.word	0x0001521d
   14b50:	00015b41 	.word	0x00015b41
   14b54:	000143b9 	.word	0x000143b9

00014b58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   14b58:	b580      	push	{r7, lr}
   14b5a:	b08a      	sub	sp, #40	; 0x28
   14b5c:	af00      	add	r7, sp, #0
   14b5e:	60f8      	str	r0, [r7, #12]
   14b60:	60b9      	str	r1, [r7, #8]
   14b62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   14b64:	2300      	movs	r3, #0
   14b66:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   14b68:	68fb      	ldr	r3, [r7, #12]
   14b6a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   14b6c:	6a3b      	ldr	r3, [r7, #32]
   14b6e:	2b00      	cmp	r3, #0
   14b70:	d101      	bne.n	14b76 <xQueueReceive+0x1e>
   14b72:	b672      	cpsid	i
   14b74:	e7fe      	b.n	14b74 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   14b76:	68bb      	ldr	r3, [r7, #8]
   14b78:	2b00      	cmp	r3, #0
   14b7a:	d103      	bne.n	14b84 <xQueueReceive+0x2c>
   14b7c:	6a3b      	ldr	r3, [r7, #32]
   14b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   14b80:	2b00      	cmp	r3, #0
   14b82:	d101      	bne.n	14b88 <xQueueReceive+0x30>
   14b84:	2301      	movs	r3, #1
   14b86:	e000      	b.n	14b8a <xQueueReceive+0x32>
   14b88:	2300      	movs	r3, #0
   14b8a:	2b00      	cmp	r3, #0
   14b8c:	d101      	bne.n	14b92 <xQueueReceive+0x3a>
   14b8e:	b672      	cpsid	i
   14b90:	e7fe      	b.n	14b90 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   14b92:	4b4c      	ldr	r3, [pc, #304]	; (14cc4 <xQueueReceive+0x16c>)
   14b94:	4798      	blx	r3
   14b96:	1e03      	subs	r3, r0, #0
   14b98:	d102      	bne.n	14ba0 <xQueueReceive+0x48>
   14b9a:	687b      	ldr	r3, [r7, #4]
   14b9c:	2b00      	cmp	r3, #0
   14b9e:	d101      	bne.n	14ba4 <xQueueReceive+0x4c>
   14ba0:	2301      	movs	r3, #1
   14ba2:	e000      	b.n	14ba6 <xQueueReceive+0x4e>
   14ba4:	2300      	movs	r3, #0
   14ba6:	2b00      	cmp	r3, #0
   14ba8:	d101      	bne.n	14bae <xQueueReceive+0x56>
   14baa:	b672      	cpsid	i
   14bac:	e7fe      	b.n	14bac <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   14bae:	4b46      	ldr	r3, [pc, #280]	; (14cc8 <xQueueReceive+0x170>)
   14bb0:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   14bb2:	6a3b      	ldr	r3, [r7, #32]
   14bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   14bb6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   14bb8:	69fb      	ldr	r3, [r7, #28]
   14bba:	2b00      	cmp	r3, #0
   14bbc:	d01a      	beq.n	14bf4 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   14bbe:	68ba      	ldr	r2, [r7, #8]
   14bc0:	6a3b      	ldr	r3, [r7, #32]
   14bc2:	0011      	movs	r1, r2
   14bc4:	0018      	movs	r0, r3
   14bc6:	4b41      	ldr	r3, [pc, #260]	; (14ccc <xQueueReceive+0x174>)
   14bc8:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   14bca:	69fb      	ldr	r3, [r7, #28]
   14bcc:	1e5a      	subs	r2, r3, #1
   14bce:	6a3b      	ldr	r3, [r7, #32]
   14bd0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   14bd2:	6a3b      	ldr	r3, [r7, #32]
   14bd4:	691b      	ldr	r3, [r3, #16]
   14bd6:	2b00      	cmp	r3, #0
   14bd8:	d008      	beq.n	14bec <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   14bda:	6a3b      	ldr	r3, [r7, #32]
   14bdc:	3310      	adds	r3, #16
   14bde:	0018      	movs	r0, r3
   14be0:	4b3b      	ldr	r3, [pc, #236]	; (14cd0 <xQueueReceive+0x178>)
   14be2:	4798      	blx	r3
   14be4:	1e03      	subs	r3, r0, #0
   14be6:	d001      	beq.n	14bec <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
   14be8:	4b3a      	ldr	r3, [pc, #232]	; (14cd4 <xQueueReceive+0x17c>)
   14bea:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   14bec:	4b3a      	ldr	r3, [pc, #232]	; (14cd8 <xQueueReceive+0x180>)
   14bee:	4798      	blx	r3
				return pdPASS;
   14bf0:	2301      	movs	r3, #1
   14bf2:	e062      	b.n	14cba <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   14bf4:	687b      	ldr	r3, [r7, #4]
   14bf6:	2b00      	cmp	r3, #0
   14bf8:	d103      	bne.n	14c02 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   14bfa:	4b37      	ldr	r3, [pc, #220]	; (14cd8 <xQueueReceive+0x180>)
   14bfc:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   14bfe:	2300      	movs	r3, #0
   14c00:	e05b      	b.n	14cba <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
   14c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14c04:	2b00      	cmp	r3, #0
   14c06:	d106      	bne.n	14c16 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   14c08:	2314      	movs	r3, #20
   14c0a:	18fb      	adds	r3, r7, r3
   14c0c:	0018      	movs	r0, r3
   14c0e:	4b33      	ldr	r3, [pc, #204]	; (14cdc <xQueueReceive+0x184>)
   14c10:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   14c12:	2301      	movs	r3, #1
   14c14:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   14c16:	4b30      	ldr	r3, [pc, #192]	; (14cd8 <xQueueReceive+0x180>)
   14c18:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   14c1a:	4b31      	ldr	r3, [pc, #196]	; (14ce0 <xQueueReceive+0x188>)
   14c1c:	4798      	blx	r3
		prvLockQueue( pxQueue );
   14c1e:	4b2a      	ldr	r3, [pc, #168]	; (14cc8 <xQueueReceive+0x170>)
   14c20:	4798      	blx	r3
   14c22:	6a3b      	ldr	r3, [r7, #32]
   14c24:	2244      	movs	r2, #68	; 0x44
   14c26:	5c9b      	ldrb	r3, [r3, r2]
   14c28:	b25b      	sxtb	r3, r3
   14c2a:	3301      	adds	r3, #1
   14c2c:	d103      	bne.n	14c36 <xQueueReceive+0xde>
   14c2e:	6a3b      	ldr	r3, [r7, #32]
   14c30:	2244      	movs	r2, #68	; 0x44
   14c32:	2100      	movs	r1, #0
   14c34:	5499      	strb	r1, [r3, r2]
   14c36:	6a3b      	ldr	r3, [r7, #32]
   14c38:	2245      	movs	r2, #69	; 0x45
   14c3a:	5c9b      	ldrb	r3, [r3, r2]
   14c3c:	b25b      	sxtb	r3, r3
   14c3e:	3301      	adds	r3, #1
   14c40:	d103      	bne.n	14c4a <xQueueReceive+0xf2>
   14c42:	6a3b      	ldr	r3, [r7, #32]
   14c44:	2245      	movs	r2, #69	; 0x45
   14c46:	2100      	movs	r1, #0
   14c48:	5499      	strb	r1, [r3, r2]
   14c4a:	4b23      	ldr	r3, [pc, #140]	; (14cd8 <xQueueReceive+0x180>)
   14c4c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   14c4e:	1d3a      	adds	r2, r7, #4
   14c50:	2314      	movs	r3, #20
   14c52:	18fb      	adds	r3, r7, r3
   14c54:	0011      	movs	r1, r2
   14c56:	0018      	movs	r0, r3
   14c58:	4b22      	ldr	r3, [pc, #136]	; (14ce4 <xQueueReceive+0x18c>)
   14c5a:	4798      	blx	r3
   14c5c:	1e03      	subs	r3, r0, #0
   14c5e:	d11e      	bne.n	14c9e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   14c60:	6a3b      	ldr	r3, [r7, #32]
   14c62:	0018      	movs	r0, r3
   14c64:	4b20      	ldr	r3, [pc, #128]	; (14ce8 <xQueueReceive+0x190>)
   14c66:	4798      	blx	r3
   14c68:	1e03      	subs	r3, r0, #0
   14c6a:	d011      	beq.n	14c90 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   14c6c:	6a3b      	ldr	r3, [r7, #32]
   14c6e:	3324      	adds	r3, #36	; 0x24
   14c70:	687a      	ldr	r2, [r7, #4]
   14c72:	0011      	movs	r1, r2
   14c74:	0018      	movs	r0, r3
   14c76:	4b1d      	ldr	r3, [pc, #116]	; (14cec <xQueueReceive+0x194>)
   14c78:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   14c7a:	6a3b      	ldr	r3, [r7, #32]
   14c7c:	0018      	movs	r0, r3
   14c7e:	4b1c      	ldr	r3, [pc, #112]	; (14cf0 <xQueueReceive+0x198>)
   14c80:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   14c82:	4b1c      	ldr	r3, [pc, #112]	; (14cf4 <xQueueReceive+0x19c>)
   14c84:	4798      	blx	r3
   14c86:	1e03      	subs	r3, r0, #0
   14c88:	d191      	bne.n	14bae <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   14c8a:	4b12      	ldr	r3, [pc, #72]	; (14cd4 <xQueueReceive+0x17c>)
   14c8c:	4798      	blx	r3
   14c8e:	e78e      	b.n	14bae <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   14c90:	6a3b      	ldr	r3, [r7, #32]
   14c92:	0018      	movs	r0, r3
   14c94:	4b16      	ldr	r3, [pc, #88]	; (14cf0 <xQueueReceive+0x198>)
   14c96:	4798      	blx	r3
				( void ) xTaskResumeAll();
   14c98:	4b16      	ldr	r3, [pc, #88]	; (14cf4 <xQueueReceive+0x19c>)
   14c9a:	4798      	blx	r3
   14c9c:	e787      	b.n	14bae <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   14c9e:	6a3b      	ldr	r3, [r7, #32]
   14ca0:	0018      	movs	r0, r3
   14ca2:	4b13      	ldr	r3, [pc, #76]	; (14cf0 <xQueueReceive+0x198>)
   14ca4:	4798      	blx	r3
			( void ) xTaskResumeAll();
   14ca6:	4b13      	ldr	r3, [pc, #76]	; (14cf4 <xQueueReceive+0x19c>)
   14ca8:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   14caa:	6a3b      	ldr	r3, [r7, #32]
   14cac:	0018      	movs	r0, r3
   14cae:	4b0e      	ldr	r3, [pc, #56]	; (14ce8 <xQueueReceive+0x190>)
   14cb0:	4798      	blx	r3
   14cb2:	1e03      	subs	r3, r0, #0
   14cb4:	d100      	bne.n	14cb8 <xQueueReceive+0x160>
   14cb6:	e77a      	b.n	14bae <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   14cb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   14cba:	0018      	movs	r0, r3
   14cbc:	46bd      	mov	sp, r7
   14cbe:	b00a      	add	sp, #40	; 0x28
   14cc0:	bd80      	pop	{r7, pc}
   14cc2:	46c0      	nop			; (mov r8, r8)
   14cc4:	00015e79 	.word	0x00015e79
   14cc8:	00014359 	.word	0x00014359
   14ccc:	00014ff9 	.word	0x00014ff9
   14cd0:	00015b41 	.word	0x00015b41
   14cd4:	00014341 	.word	0x00014341
   14cd8:	0001437d 	.word	0x0001437d
   14cdc:	00015c01 	.word	0x00015c01
   14ce0:	00015705 	.word	0x00015705
   14ce4:	00015c29 	.word	0x00015c29
   14ce8:	00015139 	.word	0x00015139
   14cec:	00015aa9 	.word	0x00015aa9
   14cf0:	00015049 	.word	0x00015049
   14cf4:	0001571d 	.word	0x0001571d

00014cf8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   14cf8:	b580      	push	{r7, lr}
   14cfa:	b08a      	sub	sp, #40	; 0x28
   14cfc:	af00      	add	r7, sp, #0
   14cfe:	6078      	str	r0, [r7, #4]
   14d00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   14d02:	2300      	movs	r3, #0
   14d04:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   14d06:	687b      	ldr	r3, [r7, #4]
   14d08:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   14d0a:	2300      	movs	r3, #0
   14d0c:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   14d0e:	69fb      	ldr	r3, [r7, #28]
   14d10:	2b00      	cmp	r3, #0
   14d12:	d101      	bne.n	14d18 <xQueueSemaphoreTake+0x20>
   14d14:	b672      	cpsid	i
   14d16:	e7fe      	b.n	14d16 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   14d18:	69fb      	ldr	r3, [r7, #28]
   14d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   14d1c:	2b00      	cmp	r3, #0
   14d1e:	d001      	beq.n	14d24 <xQueueSemaphoreTake+0x2c>
   14d20:	b672      	cpsid	i
   14d22:	e7fe      	b.n	14d22 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   14d24:	4b61      	ldr	r3, [pc, #388]	; (14eac <xQueueSemaphoreTake+0x1b4>)
   14d26:	4798      	blx	r3
   14d28:	1e03      	subs	r3, r0, #0
   14d2a:	d102      	bne.n	14d32 <xQueueSemaphoreTake+0x3a>
   14d2c:	683b      	ldr	r3, [r7, #0]
   14d2e:	2b00      	cmp	r3, #0
   14d30:	d101      	bne.n	14d36 <xQueueSemaphoreTake+0x3e>
   14d32:	2301      	movs	r3, #1
   14d34:	e000      	b.n	14d38 <xQueueSemaphoreTake+0x40>
   14d36:	2300      	movs	r3, #0
   14d38:	2b00      	cmp	r3, #0
   14d3a:	d101      	bne.n	14d40 <xQueueSemaphoreTake+0x48>
   14d3c:	b672      	cpsid	i
   14d3e:	e7fe      	b.n	14d3e <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   14d40:	4b5b      	ldr	r3, [pc, #364]	; (14eb0 <xQueueSemaphoreTake+0x1b8>)
   14d42:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   14d44:	69fb      	ldr	r3, [r7, #28]
   14d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   14d48:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   14d4a:	69bb      	ldr	r3, [r7, #24]
   14d4c:	2b00      	cmp	r3, #0
   14d4e:	d01d      	beq.n	14d8c <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   14d50:	69bb      	ldr	r3, [r7, #24]
   14d52:	1e5a      	subs	r2, r3, #1
   14d54:	69fb      	ldr	r3, [r7, #28]
   14d56:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   14d58:	69fb      	ldr	r3, [r7, #28]
   14d5a:	681b      	ldr	r3, [r3, #0]
   14d5c:	2b00      	cmp	r3, #0
   14d5e:	d104      	bne.n	14d6a <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   14d60:	4b54      	ldr	r3, [pc, #336]	; (14eb4 <xQueueSemaphoreTake+0x1bc>)
   14d62:	4798      	blx	r3
   14d64:	0002      	movs	r2, r0
   14d66:	69fb      	ldr	r3, [r7, #28]
   14d68:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   14d6a:	69fb      	ldr	r3, [r7, #28]
   14d6c:	691b      	ldr	r3, [r3, #16]
   14d6e:	2b00      	cmp	r3, #0
   14d70:	d008      	beq.n	14d84 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   14d72:	69fb      	ldr	r3, [r7, #28]
   14d74:	3310      	adds	r3, #16
   14d76:	0018      	movs	r0, r3
   14d78:	4b4f      	ldr	r3, [pc, #316]	; (14eb8 <xQueueSemaphoreTake+0x1c0>)
   14d7a:	4798      	blx	r3
   14d7c:	1e03      	subs	r3, r0, #0
   14d7e:	d001      	beq.n	14d84 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   14d80:	4b4e      	ldr	r3, [pc, #312]	; (14ebc <xQueueSemaphoreTake+0x1c4>)
   14d82:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   14d84:	4b4e      	ldr	r3, [pc, #312]	; (14ec0 <xQueueSemaphoreTake+0x1c8>)
   14d86:	4798      	blx	r3
				return pdPASS;
   14d88:	2301      	movs	r3, #1
   14d8a:	e08b      	b.n	14ea4 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   14d8c:	683b      	ldr	r3, [r7, #0]
   14d8e:	2b00      	cmp	r3, #0
   14d90:	d108      	bne.n	14da4 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   14d92:	6a3b      	ldr	r3, [r7, #32]
   14d94:	2b00      	cmp	r3, #0
   14d96:	d001      	beq.n	14d9c <xQueueSemaphoreTake+0xa4>
   14d98:	b672      	cpsid	i
   14d9a:	e7fe      	b.n	14d9a <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   14d9c:	4b48      	ldr	r3, [pc, #288]	; (14ec0 <xQueueSemaphoreTake+0x1c8>)
   14d9e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   14da0:	2300      	movs	r3, #0
   14da2:	e07f      	b.n	14ea4 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
   14da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14da6:	2b00      	cmp	r3, #0
   14da8:	d106      	bne.n	14db8 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   14daa:	230c      	movs	r3, #12
   14dac:	18fb      	adds	r3, r7, r3
   14dae:	0018      	movs	r0, r3
   14db0:	4b44      	ldr	r3, [pc, #272]	; (14ec4 <xQueueSemaphoreTake+0x1cc>)
   14db2:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   14db4:	2301      	movs	r3, #1
   14db6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   14db8:	4b41      	ldr	r3, [pc, #260]	; (14ec0 <xQueueSemaphoreTake+0x1c8>)
   14dba:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   14dbc:	4b42      	ldr	r3, [pc, #264]	; (14ec8 <xQueueSemaphoreTake+0x1d0>)
   14dbe:	4798      	blx	r3
		prvLockQueue( pxQueue );
   14dc0:	4b3b      	ldr	r3, [pc, #236]	; (14eb0 <xQueueSemaphoreTake+0x1b8>)
   14dc2:	4798      	blx	r3
   14dc4:	69fb      	ldr	r3, [r7, #28]
   14dc6:	2244      	movs	r2, #68	; 0x44
   14dc8:	5c9b      	ldrb	r3, [r3, r2]
   14dca:	b25b      	sxtb	r3, r3
   14dcc:	3301      	adds	r3, #1
   14dce:	d103      	bne.n	14dd8 <xQueueSemaphoreTake+0xe0>
   14dd0:	69fb      	ldr	r3, [r7, #28]
   14dd2:	2244      	movs	r2, #68	; 0x44
   14dd4:	2100      	movs	r1, #0
   14dd6:	5499      	strb	r1, [r3, r2]
   14dd8:	69fb      	ldr	r3, [r7, #28]
   14dda:	2245      	movs	r2, #69	; 0x45
   14ddc:	5c9b      	ldrb	r3, [r3, r2]
   14dde:	b25b      	sxtb	r3, r3
   14de0:	3301      	adds	r3, #1
   14de2:	d103      	bne.n	14dec <xQueueSemaphoreTake+0xf4>
   14de4:	69fb      	ldr	r3, [r7, #28]
   14de6:	2245      	movs	r2, #69	; 0x45
   14de8:	2100      	movs	r1, #0
   14dea:	5499      	strb	r1, [r3, r2]
   14dec:	4b34      	ldr	r3, [pc, #208]	; (14ec0 <xQueueSemaphoreTake+0x1c8>)
   14dee:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   14df0:	003a      	movs	r2, r7
   14df2:	230c      	movs	r3, #12
   14df4:	18fb      	adds	r3, r7, r3
   14df6:	0011      	movs	r1, r2
   14df8:	0018      	movs	r0, r3
   14dfa:	4b34      	ldr	r3, [pc, #208]	; (14ecc <xQueueSemaphoreTake+0x1d4>)
   14dfc:	4798      	blx	r3
   14dfe:	1e03      	subs	r3, r0, #0
   14e00:	d12e      	bne.n	14e60 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   14e02:	69fb      	ldr	r3, [r7, #28]
   14e04:	0018      	movs	r0, r3
   14e06:	4b32      	ldr	r3, [pc, #200]	; (14ed0 <xQueueSemaphoreTake+0x1d8>)
   14e08:	4798      	blx	r3
   14e0a:	1e03      	subs	r3, r0, #0
   14e0c:	d021      	beq.n	14e52 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   14e0e:	69fb      	ldr	r3, [r7, #28]
   14e10:	681b      	ldr	r3, [r3, #0]
   14e12:	2b00      	cmp	r3, #0
   14e14:	d10a      	bne.n	14e2c <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
   14e16:	4b26      	ldr	r3, [pc, #152]	; (14eb0 <xQueueSemaphoreTake+0x1b8>)
   14e18:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   14e1a:	69fb      	ldr	r3, [r7, #28]
   14e1c:	685b      	ldr	r3, [r3, #4]
   14e1e:	0018      	movs	r0, r3
   14e20:	4b2c      	ldr	r3, [pc, #176]	; (14ed4 <xQueueSemaphoreTake+0x1dc>)
   14e22:	4798      	blx	r3
   14e24:	0003      	movs	r3, r0
   14e26:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   14e28:	4b25      	ldr	r3, [pc, #148]	; (14ec0 <xQueueSemaphoreTake+0x1c8>)
   14e2a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   14e2c:	69fb      	ldr	r3, [r7, #28]
   14e2e:	3324      	adds	r3, #36	; 0x24
   14e30:	683a      	ldr	r2, [r7, #0]
   14e32:	0011      	movs	r1, r2
   14e34:	0018      	movs	r0, r3
   14e36:	4b28      	ldr	r3, [pc, #160]	; (14ed8 <xQueueSemaphoreTake+0x1e0>)
   14e38:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   14e3a:	69fb      	ldr	r3, [r7, #28]
   14e3c:	0018      	movs	r0, r3
   14e3e:	4b27      	ldr	r3, [pc, #156]	; (14edc <xQueueSemaphoreTake+0x1e4>)
   14e40:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   14e42:	4b27      	ldr	r3, [pc, #156]	; (14ee0 <xQueueSemaphoreTake+0x1e8>)
   14e44:	4798      	blx	r3
   14e46:	1e03      	subs	r3, r0, #0
   14e48:	d000      	beq.n	14e4c <xQueueSemaphoreTake+0x154>
   14e4a:	e779      	b.n	14d40 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   14e4c:	4b1b      	ldr	r3, [pc, #108]	; (14ebc <xQueueSemaphoreTake+0x1c4>)
   14e4e:	4798      	blx	r3
   14e50:	e776      	b.n	14d40 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   14e52:	69fb      	ldr	r3, [r7, #28]
   14e54:	0018      	movs	r0, r3
   14e56:	4b21      	ldr	r3, [pc, #132]	; (14edc <xQueueSemaphoreTake+0x1e4>)
   14e58:	4798      	blx	r3
				( void ) xTaskResumeAll();
   14e5a:	4b21      	ldr	r3, [pc, #132]	; (14ee0 <xQueueSemaphoreTake+0x1e8>)
   14e5c:	4798      	blx	r3
   14e5e:	e76f      	b.n	14d40 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   14e60:	69fb      	ldr	r3, [r7, #28]
   14e62:	0018      	movs	r0, r3
   14e64:	4b1d      	ldr	r3, [pc, #116]	; (14edc <xQueueSemaphoreTake+0x1e4>)
   14e66:	4798      	blx	r3
			( void ) xTaskResumeAll();
   14e68:	4b1d      	ldr	r3, [pc, #116]	; (14ee0 <xQueueSemaphoreTake+0x1e8>)
   14e6a:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   14e6c:	69fb      	ldr	r3, [r7, #28]
   14e6e:	0018      	movs	r0, r3
   14e70:	4b17      	ldr	r3, [pc, #92]	; (14ed0 <xQueueSemaphoreTake+0x1d8>)
   14e72:	4798      	blx	r3
   14e74:	1e03      	subs	r3, r0, #0
   14e76:	d100      	bne.n	14e7a <xQueueSemaphoreTake+0x182>
   14e78:	e762      	b.n	14d40 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   14e7a:	6a3b      	ldr	r3, [r7, #32]
   14e7c:	2b00      	cmp	r3, #0
   14e7e:	d010      	beq.n	14ea2 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
   14e80:	4b0b      	ldr	r3, [pc, #44]	; (14eb0 <xQueueSemaphoreTake+0x1b8>)
   14e82:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   14e84:	69fb      	ldr	r3, [r7, #28]
   14e86:	0018      	movs	r0, r3
   14e88:	4b16      	ldr	r3, [pc, #88]	; (14ee4 <xQueueSemaphoreTake+0x1ec>)
   14e8a:	4798      	blx	r3
   14e8c:	0003      	movs	r3, r0
   14e8e:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   14e90:	69fb      	ldr	r3, [r7, #28]
   14e92:	685b      	ldr	r3, [r3, #4]
   14e94:	697a      	ldr	r2, [r7, #20]
   14e96:	0011      	movs	r1, r2
   14e98:	0018      	movs	r0, r3
   14e9a:	4b13      	ldr	r3, [pc, #76]	; (14ee8 <xQueueSemaphoreTake+0x1f0>)
   14e9c:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   14e9e:	4b08      	ldr	r3, [pc, #32]	; (14ec0 <xQueueSemaphoreTake+0x1c8>)
   14ea0:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   14ea2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   14ea4:	0018      	movs	r0, r3
   14ea6:	46bd      	mov	sp, r7
   14ea8:	b00a      	add	sp, #40	; 0x28
   14eaa:	bd80      	pop	{r7, pc}
   14eac:	00015e79 	.word	0x00015e79
   14eb0:	00014359 	.word	0x00014359
   14eb4:	00016145 	.word	0x00016145
   14eb8:	00015b41 	.word	0x00015b41
   14ebc:	00014341 	.word	0x00014341
   14ec0:	0001437d 	.word	0x0001437d
   14ec4:	00015c01 	.word	0x00015c01
   14ec8:	00015705 	.word	0x00015705
   14ecc:	00015c29 	.word	0x00015c29
   14ed0:	00015139 	.word	0x00015139
   14ed4:	00015eb1 	.word	0x00015eb1
   14ed8:	00015aa9 	.word	0x00015aa9
   14edc:	00015049 	.word	0x00015049
   14ee0:	0001571d 	.word	0x0001571d
   14ee4:	00014eed 	.word	0x00014eed
   14ee8:	00016055 	.word	0x00016055

00014eec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   14eec:	b580      	push	{r7, lr}
   14eee:	b084      	sub	sp, #16
   14ef0:	af00      	add	r7, sp, #0
   14ef2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   14ef4:	687b      	ldr	r3, [r7, #4]
   14ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14ef8:	2b00      	cmp	r3, #0
   14efa:	d006      	beq.n	14f0a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   14efc:	687b      	ldr	r3, [r7, #4]
   14efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   14f00:	681b      	ldr	r3, [r3, #0]
   14f02:	2205      	movs	r2, #5
   14f04:	1ad3      	subs	r3, r2, r3
   14f06:	60fb      	str	r3, [r7, #12]
   14f08:	e001      	b.n	14f0e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   14f0a:	2300      	movs	r3, #0
   14f0c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   14f0e:	68fb      	ldr	r3, [r7, #12]
	}
   14f10:	0018      	movs	r0, r3
   14f12:	46bd      	mov	sp, r7
   14f14:	b004      	add	sp, #16
   14f16:	bd80      	pop	{r7, pc}

00014f18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   14f18:	b580      	push	{r7, lr}
   14f1a:	b086      	sub	sp, #24
   14f1c:	af00      	add	r7, sp, #0
   14f1e:	60f8      	str	r0, [r7, #12]
   14f20:	60b9      	str	r1, [r7, #8]
   14f22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   14f24:	2300      	movs	r3, #0
   14f26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   14f28:	68fb      	ldr	r3, [r7, #12]
   14f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   14f2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   14f2e:	68fb      	ldr	r3, [r7, #12]
   14f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   14f32:	2b00      	cmp	r3, #0
   14f34:	d10e      	bne.n	14f54 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   14f36:	68fb      	ldr	r3, [r7, #12]
   14f38:	681b      	ldr	r3, [r3, #0]
   14f3a:	2b00      	cmp	r3, #0
   14f3c:	d14e      	bne.n	14fdc <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   14f3e:	68fb      	ldr	r3, [r7, #12]
   14f40:	685b      	ldr	r3, [r3, #4]
   14f42:	0018      	movs	r0, r3
   14f44:	4b2a      	ldr	r3, [pc, #168]	; (14ff0 <prvCopyDataToQueue+0xd8>)
   14f46:	4798      	blx	r3
   14f48:	0003      	movs	r3, r0
   14f4a:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   14f4c:	68fb      	ldr	r3, [r7, #12]
   14f4e:	2200      	movs	r2, #0
   14f50:	605a      	str	r2, [r3, #4]
   14f52:	e043      	b.n	14fdc <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   14f54:	687b      	ldr	r3, [r7, #4]
   14f56:	2b00      	cmp	r3, #0
   14f58:	d119      	bne.n	14f8e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   14f5a:	68fb      	ldr	r3, [r7, #12]
   14f5c:	6898      	ldr	r0, [r3, #8]
   14f5e:	68fb      	ldr	r3, [r7, #12]
   14f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   14f62:	68bb      	ldr	r3, [r7, #8]
   14f64:	0019      	movs	r1, r3
   14f66:	4b23      	ldr	r3, [pc, #140]	; (14ff4 <prvCopyDataToQueue+0xdc>)
   14f68:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   14f6a:	68fb      	ldr	r3, [r7, #12]
   14f6c:	689a      	ldr	r2, [r3, #8]
   14f6e:	68fb      	ldr	r3, [r7, #12]
   14f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   14f72:	18d2      	adds	r2, r2, r3
   14f74:	68fb      	ldr	r3, [r7, #12]
   14f76:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   14f78:	68fb      	ldr	r3, [r7, #12]
   14f7a:	689a      	ldr	r2, [r3, #8]
   14f7c:	68fb      	ldr	r3, [r7, #12]
   14f7e:	685b      	ldr	r3, [r3, #4]
   14f80:	429a      	cmp	r2, r3
   14f82:	d32b      	bcc.n	14fdc <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   14f84:	68fb      	ldr	r3, [r7, #12]
   14f86:	681a      	ldr	r2, [r3, #0]
   14f88:	68fb      	ldr	r3, [r7, #12]
   14f8a:	609a      	str	r2, [r3, #8]
   14f8c:	e026      	b.n	14fdc <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   14f8e:	68fb      	ldr	r3, [r7, #12]
   14f90:	68d8      	ldr	r0, [r3, #12]
   14f92:	68fb      	ldr	r3, [r7, #12]
   14f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   14f96:	68bb      	ldr	r3, [r7, #8]
   14f98:	0019      	movs	r1, r3
   14f9a:	4b16      	ldr	r3, [pc, #88]	; (14ff4 <prvCopyDataToQueue+0xdc>)
   14f9c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   14f9e:	68fb      	ldr	r3, [r7, #12]
   14fa0:	68da      	ldr	r2, [r3, #12]
   14fa2:	68fb      	ldr	r3, [r7, #12]
   14fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   14fa6:	425b      	negs	r3, r3
   14fa8:	18d2      	adds	r2, r2, r3
   14faa:	68fb      	ldr	r3, [r7, #12]
   14fac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   14fae:	68fb      	ldr	r3, [r7, #12]
   14fb0:	68da      	ldr	r2, [r3, #12]
   14fb2:	68fb      	ldr	r3, [r7, #12]
   14fb4:	681b      	ldr	r3, [r3, #0]
   14fb6:	429a      	cmp	r2, r3
   14fb8:	d207      	bcs.n	14fca <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   14fba:	68fb      	ldr	r3, [r7, #12]
   14fbc:	685a      	ldr	r2, [r3, #4]
   14fbe:	68fb      	ldr	r3, [r7, #12]
   14fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   14fc2:	425b      	negs	r3, r3
   14fc4:	18d2      	adds	r2, r2, r3
   14fc6:	68fb      	ldr	r3, [r7, #12]
   14fc8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   14fca:	687b      	ldr	r3, [r7, #4]
   14fcc:	2b02      	cmp	r3, #2
   14fce:	d105      	bne.n	14fdc <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   14fd0:	693b      	ldr	r3, [r7, #16]
   14fd2:	2b00      	cmp	r3, #0
   14fd4:	d002      	beq.n	14fdc <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   14fd6:	693b      	ldr	r3, [r7, #16]
   14fd8:	3b01      	subs	r3, #1
   14fda:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   14fdc:	693b      	ldr	r3, [r7, #16]
   14fde:	1c5a      	adds	r2, r3, #1
   14fe0:	68fb      	ldr	r3, [r7, #12]
   14fe2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   14fe4:	697b      	ldr	r3, [r7, #20]
}
   14fe6:	0018      	movs	r0, r3
   14fe8:	46bd      	mov	sp, r7
   14fea:	b006      	add	sp, #24
   14fec:	bd80      	pop	{r7, pc}
   14fee:	46c0      	nop			; (mov r8, r8)
   14ff0:	00015f95 	.word	0x00015f95
   14ff4:	0001b53d 	.word	0x0001b53d

00014ff8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   14ff8:	b580      	push	{r7, lr}
   14ffa:	b082      	sub	sp, #8
   14ffc:	af00      	add	r7, sp, #0
   14ffe:	6078      	str	r0, [r7, #4]
   15000:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   15002:	687b      	ldr	r3, [r7, #4]
   15004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15006:	2b00      	cmp	r3, #0
   15008:	d018      	beq.n	1503c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1500a:	687b      	ldr	r3, [r7, #4]
   1500c:	68da      	ldr	r2, [r3, #12]
   1500e:	687b      	ldr	r3, [r7, #4]
   15010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15012:	18d2      	adds	r2, r2, r3
   15014:	687b      	ldr	r3, [r7, #4]
   15016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   15018:	687b      	ldr	r3, [r7, #4]
   1501a:	68da      	ldr	r2, [r3, #12]
   1501c:	687b      	ldr	r3, [r7, #4]
   1501e:	685b      	ldr	r3, [r3, #4]
   15020:	429a      	cmp	r2, r3
   15022:	d303      	bcc.n	1502c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   15024:	687b      	ldr	r3, [r7, #4]
   15026:	681a      	ldr	r2, [r3, #0]
   15028:	687b      	ldr	r3, [r7, #4]
   1502a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1502c:	687b      	ldr	r3, [r7, #4]
   1502e:	68d9      	ldr	r1, [r3, #12]
   15030:	687b      	ldr	r3, [r7, #4]
   15032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   15034:	683b      	ldr	r3, [r7, #0]
   15036:	0018      	movs	r0, r3
   15038:	4b02      	ldr	r3, [pc, #8]	; (15044 <prvCopyDataFromQueue+0x4c>)
   1503a:	4798      	blx	r3
	}
}
   1503c:	46c0      	nop			; (mov r8, r8)
   1503e:	46bd      	mov	sp, r7
   15040:	b002      	add	sp, #8
   15042:	bd80      	pop	{r7, pc}
   15044:	0001b53d 	.word	0x0001b53d

00015048 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   15048:	b580      	push	{r7, lr}
   1504a:	b084      	sub	sp, #16
   1504c:	af00      	add	r7, sp, #0
   1504e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   15050:	4b34      	ldr	r3, [pc, #208]	; (15124 <prvUnlockQueue+0xdc>)
   15052:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   15054:	230f      	movs	r3, #15
   15056:	18fb      	adds	r3, r7, r3
   15058:	687a      	ldr	r2, [r7, #4]
   1505a:	2145      	movs	r1, #69	; 0x45
   1505c:	5c52      	ldrb	r2, [r2, r1]
   1505e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   15060:	e022      	b.n	150a8 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   15062:	687b      	ldr	r3, [r7, #4]
   15064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   15066:	2b00      	cmp	r3, #0
   15068:	d009      	beq.n	1507e <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1506a:	687b      	ldr	r3, [r7, #4]
   1506c:	2100      	movs	r1, #0
   1506e:	0018      	movs	r0, r3
   15070:	4b2d      	ldr	r3, [pc, #180]	; (15128 <prvUnlockQueue+0xe0>)
   15072:	4798      	blx	r3
   15074:	1e03      	subs	r3, r0, #0
   15076:	d00f      	beq.n	15098 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   15078:	4b2c      	ldr	r3, [pc, #176]	; (1512c <prvUnlockQueue+0xe4>)
   1507a:	4798      	blx	r3
   1507c:	e00c      	b.n	15098 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1507e:	687b      	ldr	r3, [r7, #4]
   15080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15082:	2b00      	cmp	r3, #0
   15084:	d017      	beq.n	150b6 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   15086:	687b      	ldr	r3, [r7, #4]
   15088:	3324      	adds	r3, #36	; 0x24
   1508a:	0018      	movs	r0, r3
   1508c:	4b28      	ldr	r3, [pc, #160]	; (15130 <prvUnlockQueue+0xe8>)
   1508e:	4798      	blx	r3
   15090:	1e03      	subs	r3, r0, #0
   15092:	d001      	beq.n	15098 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   15094:	4b25      	ldr	r3, [pc, #148]	; (1512c <prvUnlockQueue+0xe4>)
   15096:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   15098:	230f      	movs	r3, #15
   1509a:	18fb      	adds	r3, r7, r3
   1509c:	781b      	ldrb	r3, [r3, #0]
   1509e:	3b01      	subs	r3, #1
   150a0:	b2da      	uxtb	r2, r3
   150a2:	230f      	movs	r3, #15
   150a4:	18fb      	adds	r3, r7, r3
   150a6:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   150a8:	230f      	movs	r3, #15
   150aa:	18fb      	adds	r3, r7, r3
   150ac:	781b      	ldrb	r3, [r3, #0]
   150ae:	b25b      	sxtb	r3, r3
   150b0:	2b00      	cmp	r3, #0
   150b2:	dcd6      	bgt.n	15062 <prvUnlockQueue+0x1a>
   150b4:	e000      	b.n	150b8 <prvUnlockQueue+0x70>
						break;
   150b6:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   150b8:	687b      	ldr	r3, [r7, #4]
   150ba:	2245      	movs	r2, #69	; 0x45
   150bc:	21ff      	movs	r1, #255	; 0xff
   150be:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   150c0:	4b1c      	ldr	r3, [pc, #112]	; (15134 <prvUnlockQueue+0xec>)
   150c2:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   150c4:	4b17      	ldr	r3, [pc, #92]	; (15124 <prvUnlockQueue+0xdc>)
   150c6:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   150c8:	230e      	movs	r3, #14
   150ca:	18fb      	adds	r3, r7, r3
   150cc:	687a      	ldr	r2, [r7, #4]
   150ce:	2144      	movs	r1, #68	; 0x44
   150d0:	5c52      	ldrb	r2, [r2, r1]
   150d2:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   150d4:	e014      	b.n	15100 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   150d6:	687b      	ldr	r3, [r7, #4]
   150d8:	691b      	ldr	r3, [r3, #16]
   150da:	2b00      	cmp	r3, #0
   150dc:	d017      	beq.n	1510e <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   150de:	687b      	ldr	r3, [r7, #4]
   150e0:	3310      	adds	r3, #16
   150e2:	0018      	movs	r0, r3
   150e4:	4b12      	ldr	r3, [pc, #72]	; (15130 <prvUnlockQueue+0xe8>)
   150e6:	4798      	blx	r3
   150e8:	1e03      	subs	r3, r0, #0
   150ea:	d001      	beq.n	150f0 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   150ec:	4b0f      	ldr	r3, [pc, #60]	; (1512c <prvUnlockQueue+0xe4>)
   150ee:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   150f0:	230e      	movs	r3, #14
   150f2:	18fb      	adds	r3, r7, r3
   150f4:	781b      	ldrb	r3, [r3, #0]
   150f6:	3b01      	subs	r3, #1
   150f8:	b2da      	uxtb	r2, r3
   150fa:	230e      	movs	r3, #14
   150fc:	18fb      	adds	r3, r7, r3
   150fe:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   15100:	230e      	movs	r3, #14
   15102:	18fb      	adds	r3, r7, r3
   15104:	781b      	ldrb	r3, [r3, #0]
   15106:	b25b      	sxtb	r3, r3
   15108:	2b00      	cmp	r3, #0
   1510a:	dce4      	bgt.n	150d6 <prvUnlockQueue+0x8e>
   1510c:	e000      	b.n	15110 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1510e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   15110:	687b      	ldr	r3, [r7, #4]
   15112:	2244      	movs	r2, #68	; 0x44
   15114:	21ff      	movs	r1, #255	; 0xff
   15116:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   15118:	4b06      	ldr	r3, [pc, #24]	; (15134 <prvUnlockQueue+0xec>)
   1511a:	4798      	blx	r3
}
   1511c:	46c0      	nop			; (mov r8, r8)
   1511e:	46bd      	mov	sp, r7
   15120:	b004      	add	sp, #16
   15122:	bd80      	pop	{r7, pc}
   15124:	00014359 	.word	0x00014359
   15128:	0001521d 	.word	0x0001521d
   1512c:	00015cd5 	.word	0x00015cd5
   15130:	00015b41 	.word	0x00015b41
   15134:	0001437d 	.word	0x0001437d

00015138 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   15138:	b580      	push	{r7, lr}
   1513a:	b084      	sub	sp, #16
   1513c:	af00      	add	r7, sp, #0
   1513e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   15140:	4b08      	ldr	r3, [pc, #32]	; (15164 <prvIsQueueEmpty+0x2c>)
   15142:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   15144:	687b      	ldr	r3, [r7, #4]
   15146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15148:	2b00      	cmp	r3, #0
   1514a:	d102      	bne.n	15152 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1514c:	2301      	movs	r3, #1
   1514e:	60fb      	str	r3, [r7, #12]
   15150:	e001      	b.n	15156 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   15152:	2300      	movs	r3, #0
   15154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   15156:	4b04      	ldr	r3, [pc, #16]	; (15168 <prvIsQueueEmpty+0x30>)
   15158:	4798      	blx	r3

	return xReturn;
   1515a:	68fb      	ldr	r3, [r7, #12]
}
   1515c:	0018      	movs	r0, r3
   1515e:	46bd      	mov	sp, r7
   15160:	b004      	add	sp, #16
   15162:	bd80      	pop	{r7, pc}
   15164:	00014359 	.word	0x00014359
   15168:	0001437d 	.word	0x0001437d

0001516c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1516c:	b580      	push	{r7, lr}
   1516e:	b084      	sub	sp, #16
   15170:	af00      	add	r7, sp, #0
   15172:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   15174:	4b09      	ldr	r3, [pc, #36]	; (1519c <prvIsQueueFull+0x30>)
   15176:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   15178:	687b      	ldr	r3, [r7, #4]
   1517a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1517c:	687b      	ldr	r3, [r7, #4]
   1517e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   15180:	429a      	cmp	r2, r3
   15182:	d102      	bne.n	1518a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   15184:	2301      	movs	r3, #1
   15186:	60fb      	str	r3, [r7, #12]
   15188:	e001      	b.n	1518e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1518a:	2300      	movs	r3, #0
   1518c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1518e:	4b04      	ldr	r3, [pc, #16]	; (151a0 <prvIsQueueFull+0x34>)
   15190:	4798      	blx	r3

	return xReturn;
   15192:	68fb      	ldr	r3, [r7, #12]
}
   15194:	0018      	movs	r0, r3
   15196:	46bd      	mov	sp, r7
   15198:	b004      	add	sp, #16
   1519a:	bd80      	pop	{r7, pc}
   1519c:	00014359 	.word	0x00014359
   151a0:	0001437d 	.word	0x0001437d

000151a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   151a4:	b580      	push	{r7, lr}
   151a6:	b086      	sub	sp, #24
   151a8:	af00      	add	r7, sp, #0
   151aa:	60f8      	str	r0, [r7, #12]
   151ac:	60b9      	str	r1, [r7, #8]
   151ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   151b0:	68fb      	ldr	r3, [r7, #12]
   151b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   151b4:	4b15      	ldr	r3, [pc, #84]	; (1520c <vQueueWaitForMessageRestricted+0x68>)
   151b6:	4798      	blx	r3
   151b8:	697b      	ldr	r3, [r7, #20]
   151ba:	2244      	movs	r2, #68	; 0x44
   151bc:	5c9b      	ldrb	r3, [r3, r2]
   151be:	b25b      	sxtb	r3, r3
   151c0:	3301      	adds	r3, #1
   151c2:	d103      	bne.n	151cc <vQueueWaitForMessageRestricted+0x28>
   151c4:	697b      	ldr	r3, [r7, #20]
   151c6:	2244      	movs	r2, #68	; 0x44
   151c8:	2100      	movs	r1, #0
   151ca:	5499      	strb	r1, [r3, r2]
   151cc:	697b      	ldr	r3, [r7, #20]
   151ce:	2245      	movs	r2, #69	; 0x45
   151d0:	5c9b      	ldrb	r3, [r3, r2]
   151d2:	b25b      	sxtb	r3, r3
   151d4:	3301      	adds	r3, #1
   151d6:	d103      	bne.n	151e0 <vQueueWaitForMessageRestricted+0x3c>
   151d8:	697b      	ldr	r3, [r7, #20]
   151da:	2245      	movs	r2, #69	; 0x45
   151dc:	2100      	movs	r1, #0
   151de:	5499      	strb	r1, [r3, r2]
   151e0:	4b0b      	ldr	r3, [pc, #44]	; (15210 <vQueueWaitForMessageRestricted+0x6c>)
   151e2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   151e4:	697b      	ldr	r3, [r7, #20]
   151e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   151e8:	2b00      	cmp	r3, #0
   151ea:	d106      	bne.n	151fa <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   151ec:	697b      	ldr	r3, [r7, #20]
   151ee:	3324      	adds	r3, #36	; 0x24
   151f0:	687a      	ldr	r2, [r7, #4]
   151f2:	68b9      	ldr	r1, [r7, #8]
   151f4:	0018      	movs	r0, r3
   151f6:	4b07      	ldr	r3, [pc, #28]	; (15214 <vQueueWaitForMessageRestricted+0x70>)
   151f8:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   151fa:	697b      	ldr	r3, [r7, #20]
   151fc:	0018      	movs	r0, r3
   151fe:	4b06      	ldr	r3, [pc, #24]	; (15218 <vQueueWaitForMessageRestricted+0x74>)
   15200:	4798      	blx	r3
	}
   15202:	46c0      	nop			; (mov r8, r8)
   15204:	46bd      	mov	sp, r7
   15206:	b006      	add	sp, #24
   15208:	bd80      	pop	{r7, pc}
   1520a:	46c0      	nop			; (mov r8, r8)
   1520c:	00014359 	.word	0x00014359
   15210:	0001437d 	.word	0x0001437d
   15214:	00015aed 	.word	0x00015aed
   15218:	00015049 	.word	0x00015049

0001521c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1521c:	b580      	push	{r7, lr}
   1521e:	b086      	sub	sp, #24
   15220:	af00      	add	r7, sp, #0
   15222:	6078      	str	r0, [r7, #4]
   15224:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   15226:	687b      	ldr	r3, [r7, #4]
   15228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1522a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1522c:	2300      	movs	r3, #0
   1522e:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   15230:	693b      	ldr	r3, [r7, #16]
   15232:	2b00      	cmp	r3, #0
   15234:	d101      	bne.n	1523a <prvNotifyQueueSetContainer+0x1e>
   15236:	b672      	cpsid	i
   15238:	e7fe      	b.n	15238 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1523a:	693b      	ldr	r3, [r7, #16]
   1523c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1523e:	693b      	ldr	r3, [r7, #16]
   15240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   15242:	429a      	cmp	r2, r3
   15244:	d301      	bcc.n	1524a <prvNotifyQueueSetContainer+0x2e>
   15246:	b672      	cpsid	i
   15248:	e7fe      	b.n	15248 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1524a:	693b      	ldr	r3, [r7, #16]
   1524c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1524e:	693b      	ldr	r3, [r7, #16]
   15250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   15252:	429a      	cmp	r2, r3
   15254:	d22a      	bcs.n	152ac <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   15256:	230f      	movs	r3, #15
   15258:	18fb      	adds	r3, r7, r3
   1525a:	693a      	ldr	r2, [r7, #16]
   1525c:	2145      	movs	r1, #69	; 0x45
   1525e:	5c52      	ldrb	r2, [r2, r1]
   15260:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   15262:	683a      	ldr	r2, [r7, #0]
   15264:	1d39      	adds	r1, r7, #4
   15266:	693b      	ldr	r3, [r7, #16]
   15268:	0018      	movs	r0, r3
   1526a:	4b13      	ldr	r3, [pc, #76]	; (152b8 <prvNotifyQueueSetContainer+0x9c>)
   1526c:	4798      	blx	r3
   1526e:	0003      	movs	r3, r0
   15270:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   15272:	230f      	movs	r3, #15
   15274:	18fb      	adds	r3, r7, r3
   15276:	781b      	ldrb	r3, [r3, #0]
   15278:	b25b      	sxtb	r3, r3
   1527a:	3301      	adds	r3, #1
   1527c:	d10d      	bne.n	1529a <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1527e:	693b      	ldr	r3, [r7, #16]
   15280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15282:	2b00      	cmp	r3, #0
   15284:	d012      	beq.n	152ac <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   15286:	693b      	ldr	r3, [r7, #16]
   15288:	3324      	adds	r3, #36	; 0x24
   1528a:	0018      	movs	r0, r3
   1528c:	4b0b      	ldr	r3, [pc, #44]	; (152bc <prvNotifyQueueSetContainer+0xa0>)
   1528e:	4798      	blx	r3
   15290:	1e03      	subs	r3, r0, #0
   15292:	d00b      	beq.n	152ac <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   15294:	2301      	movs	r3, #1
   15296:	617b      	str	r3, [r7, #20]
   15298:	e008      	b.n	152ac <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1529a:	230f      	movs	r3, #15
   1529c:	18fb      	adds	r3, r7, r3
   1529e:	781b      	ldrb	r3, [r3, #0]
   152a0:	3301      	adds	r3, #1
   152a2:	b2db      	uxtb	r3, r3
   152a4:	b259      	sxtb	r1, r3
   152a6:	693b      	ldr	r3, [r7, #16]
   152a8:	2245      	movs	r2, #69	; 0x45
   152aa:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   152ac:	697b      	ldr	r3, [r7, #20]
	}
   152ae:	0018      	movs	r0, r3
   152b0:	46bd      	mov	sp, r7
   152b2:	b006      	add	sp, #24
   152b4:	bd80      	pop	{r7, pc}
   152b6:	46c0      	nop			; (mov r8, r8)
   152b8:	00014f19 	.word	0x00014f19
   152bc:	00015b41 	.word	0x00015b41

000152c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   152c0:	b590      	push	{r4, r7, lr}
   152c2:	b08d      	sub	sp, #52	; 0x34
   152c4:	af04      	add	r7, sp, #16
   152c6:	60f8      	str	r0, [r7, #12]
   152c8:	60b9      	str	r1, [r7, #8]
   152ca:	603b      	str	r3, [r7, #0]
   152cc:	1dbb      	adds	r3, r7, #6
   152ce:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   152d0:	1dbb      	adds	r3, r7, #6
   152d2:	881b      	ldrh	r3, [r3, #0]
   152d4:	009b      	lsls	r3, r3, #2
   152d6:	0018      	movs	r0, r3
   152d8:	4b1d      	ldr	r3, [pc, #116]	; (15350 <xTaskCreate+0x90>)
   152da:	4798      	blx	r3
   152dc:	0003      	movs	r3, r0
   152de:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   152e0:	697b      	ldr	r3, [r7, #20]
   152e2:	2b00      	cmp	r3, #0
   152e4:	d010      	beq.n	15308 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   152e6:	204c      	movs	r0, #76	; 0x4c
   152e8:	4b19      	ldr	r3, [pc, #100]	; (15350 <xTaskCreate+0x90>)
   152ea:	4798      	blx	r3
   152ec:	0003      	movs	r3, r0
   152ee:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   152f0:	69fb      	ldr	r3, [r7, #28]
   152f2:	2b00      	cmp	r3, #0
   152f4:	d003      	beq.n	152fe <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   152f6:	69fb      	ldr	r3, [r7, #28]
   152f8:	697a      	ldr	r2, [r7, #20]
   152fa:	631a      	str	r2, [r3, #48]	; 0x30
   152fc:	e006      	b.n	1530c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   152fe:	697b      	ldr	r3, [r7, #20]
   15300:	0018      	movs	r0, r3
   15302:	4b14      	ldr	r3, [pc, #80]	; (15354 <xTaskCreate+0x94>)
   15304:	4798      	blx	r3
   15306:	e001      	b.n	1530c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   15308:	2300      	movs	r3, #0
   1530a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1530c:	69fb      	ldr	r3, [r7, #28]
   1530e:	2b00      	cmp	r3, #0
   15310:	d016      	beq.n	15340 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   15312:	1dbb      	adds	r3, r7, #6
   15314:	881a      	ldrh	r2, [r3, #0]
   15316:	683c      	ldr	r4, [r7, #0]
   15318:	68b9      	ldr	r1, [r7, #8]
   1531a:	68f8      	ldr	r0, [r7, #12]
   1531c:	2300      	movs	r3, #0
   1531e:	9303      	str	r3, [sp, #12]
   15320:	69fb      	ldr	r3, [r7, #28]
   15322:	9302      	str	r3, [sp, #8]
   15324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15326:	9301      	str	r3, [sp, #4]
   15328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1532a:	9300      	str	r3, [sp, #0]
   1532c:	0023      	movs	r3, r4
   1532e:	4c0a      	ldr	r4, [pc, #40]	; (15358 <xTaskCreate+0x98>)
   15330:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   15332:	69fb      	ldr	r3, [r7, #28]
   15334:	0018      	movs	r0, r3
   15336:	4b09      	ldr	r3, [pc, #36]	; (1535c <xTaskCreate+0x9c>)
   15338:	4798      	blx	r3
			xReturn = pdPASS;
   1533a:	2301      	movs	r3, #1
   1533c:	61bb      	str	r3, [r7, #24]
   1533e:	e002      	b.n	15346 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   15340:	2301      	movs	r3, #1
   15342:	425b      	negs	r3, r3
   15344:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   15346:	69bb      	ldr	r3, [r7, #24]
	}
   15348:	0018      	movs	r0, r3
   1534a:	46bd      	mov	sp, r7
   1534c:	b009      	add	sp, #36	; 0x24
   1534e:	bd90      	pop	{r4, r7, pc}
   15350:	00014491 	.word	0x00014491
   15354:	00014531 	.word	0x00014531
   15358:	00015361 	.word	0x00015361
   1535c:	0001545d 	.word	0x0001545d

00015360 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   15360:	b580      	push	{r7, lr}
   15362:	b086      	sub	sp, #24
   15364:	af00      	add	r7, sp, #0
   15366:	60f8      	str	r0, [r7, #12]
   15368:	60b9      	str	r1, [r7, #8]
   1536a:	607a      	str	r2, [r7, #4]
   1536c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   15372:	687b      	ldr	r3, [r7, #4]
   15374:	4936      	ldr	r1, [pc, #216]	; (15450 <prvInitialiseNewTask+0xf0>)
   15376:	468c      	mov	ip, r1
   15378:	4463      	add	r3, ip
   1537a:	009b      	lsls	r3, r3, #2
   1537c:	18d3      	adds	r3, r2, r3
   1537e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   15380:	693b      	ldr	r3, [r7, #16]
   15382:	2207      	movs	r2, #7
   15384:	4393      	bics	r3, r2
   15386:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   15388:	693b      	ldr	r3, [r7, #16]
   1538a:	2207      	movs	r2, #7
   1538c:	4013      	ands	r3, r2
   1538e:	d001      	beq.n	15394 <prvInitialiseNewTask+0x34>
   15390:	b672      	cpsid	i
   15392:	e7fe      	b.n	15392 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   15394:	2300      	movs	r3, #0
   15396:	617b      	str	r3, [r7, #20]
   15398:	e013      	b.n	153c2 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1539a:	68ba      	ldr	r2, [r7, #8]
   1539c:	697b      	ldr	r3, [r7, #20]
   1539e:	18d3      	adds	r3, r2, r3
   153a0:	7818      	ldrb	r0, [r3, #0]
   153a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   153a4:	2134      	movs	r1, #52	; 0x34
   153a6:	697b      	ldr	r3, [r7, #20]
   153a8:	18d3      	adds	r3, r2, r3
   153aa:	185b      	adds	r3, r3, r1
   153ac:	1c02      	adds	r2, r0, #0
   153ae:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   153b0:	68ba      	ldr	r2, [r7, #8]
   153b2:	697b      	ldr	r3, [r7, #20]
   153b4:	18d3      	adds	r3, r2, r3
   153b6:	781b      	ldrb	r3, [r3, #0]
   153b8:	2b00      	cmp	r3, #0
   153ba:	d006      	beq.n	153ca <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   153bc:	697b      	ldr	r3, [r7, #20]
   153be:	3301      	adds	r3, #1
   153c0:	617b      	str	r3, [r7, #20]
   153c2:	697b      	ldr	r3, [r7, #20]
   153c4:	2b07      	cmp	r3, #7
   153c6:	d9e8      	bls.n	1539a <prvInitialiseNewTask+0x3a>
   153c8:	e000      	b.n	153cc <prvInitialiseNewTask+0x6c>
		{
			break;
   153ca:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   153cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   153ce:	223b      	movs	r2, #59	; 0x3b
   153d0:	2100      	movs	r1, #0
   153d2:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   153d4:	6a3b      	ldr	r3, [r7, #32]
   153d6:	2b04      	cmp	r3, #4
   153d8:	d901      	bls.n	153de <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   153da:	2304      	movs	r3, #4
   153dc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   153de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   153e0:	6a3a      	ldr	r2, [r7, #32]
   153e2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   153e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   153e6:	6a3a      	ldr	r2, [r7, #32]
   153e8:	63da      	str	r2, [r3, #60]	; 0x3c
		pxNewTCB->uxMutexesHeld = 0;
   153ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   153ec:	2200      	movs	r2, #0
   153ee:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   153f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   153f2:	3304      	adds	r3, #4
   153f4:	0018      	movs	r0, r3
   153f6:	4b17      	ldr	r3, [pc, #92]	; (15454 <prvInitialiseNewTask+0xf4>)
   153f8:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   153fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   153fc:	3318      	adds	r3, #24
   153fe:	0018      	movs	r0, r3
   15400:	4b14      	ldr	r3, [pc, #80]	; (15454 <prvInitialiseNewTask+0xf4>)
   15402:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   15404:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15406:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15408:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1540a:	6a3b      	ldr	r3, [r7, #32]
   1540c:	2205      	movs	r2, #5
   1540e:	1ad2      	subs	r2, r2, r3
   15410:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15412:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   15414:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15416:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15418:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1541a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1541c:	2200      	movs	r2, #0
   1541e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   15420:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15422:	2248      	movs	r2, #72	; 0x48
   15424:	2100      	movs	r1, #0
   15426:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   15428:	683a      	ldr	r2, [r7, #0]
   1542a:	68f9      	ldr	r1, [r7, #12]
   1542c:	693b      	ldr	r3, [r7, #16]
   1542e:	0018      	movs	r0, r3
   15430:	4b09      	ldr	r3, [pc, #36]	; (15458 <prvInitialiseNewTask+0xf8>)
   15432:	4798      	blx	r3
   15434:	0002      	movs	r2, r0
   15436:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15438:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1543c:	2b00      	cmp	r3, #0
   1543e:	d002      	beq.n	15446 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   15440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15442:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   15446:	46c0      	nop			; (mov r8, r8)
   15448:	46bd      	mov	sp, r7
   1544a:	b006      	add	sp, #24
   1544c:	bd80      	pop	{r7, pc}
   1544e:	46c0      	nop			; (mov r8, r8)
   15450:	3fffffff 	.word	0x3fffffff
   15454:	00014103 	.word	0x00014103
   15458:	00014219 	.word	0x00014219

0001545c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1545c:	b580      	push	{r7, lr}
   1545e:	b082      	sub	sp, #8
   15460:	af00      	add	r7, sp, #0
   15462:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   15464:	4b29      	ldr	r3, [pc, #164]	; (1550c <prvAddNewTaskToReadyList+0xb0>)
   15466:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   15468:	4b29      	ldr	r3, [pc, #164]	; (15510 <prvAddNewTaskToReadyList+0xb4>)
   1546a:	681b      	ldr	r3, [r3, #0]
   1546c:	1c5a      	adds	r2, r3, #1
   1546e:	4b28      	ldr	r3, [pc, #160]	; (15510 <prvAddNewTaskToReadyList+0xb4>)
   15470:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   15472:	4b28      	ldr	r3, [pc, #160]	; (15514 <prvAddNewTaskToReadyList+0xb8>)
   15474:	681b      	ldr	r3, [r3, #0]
   15476:	2b00      	cmp	r3, #0
   15478:	d109      	bne.n	1548e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1547a:	4b26      	ldr	r3, [pc, #152]	; (15514 <prvAddNewTaskToReadyList+0xb8>)
   1547c:	687a      	ldr	r2, [r7, #4]
   1547e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   15480:	4b23      	ldr	r3, [pc, #140]	; (15510 <prvAddNewTaskToReadyList+0xb4>)
   15482:	681b      	ldr	r3, [r3, #0]
   15484:	2b01      	cmp	r3, #1
   15486:	d110      	bne.n	154aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   15488:	4b23      	ldr	r3, [pc, #140]	; (15518 <prvAddNewTaskToReadyList+0xbc>)
   1548a:	4798      	blx	r3
   1548c:	e00d      	b.n	154aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1548e:	4b23      	ldr	r3, [pc, #140]	; (1551c <prvAddNewTaskToReadyList+0xc0>)
   15490:	681b      	ldr	r3, [r3, #0]
   15492:	2b00      	cmp	r3, #0
   15494:	d109      	bne.n	154aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   15496:	4b1f      	ldr	r3, [pc, #124]	; (15514 <prvAddNewTaskToReadyList+0xb8>)
   15498:	681b      	ldr	r3, [r3, #0]
   1549a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1549c:	687b      	ldr	r3, [r7, #4]
   1549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   154a0:	429a      	cmp	r2, r3
   154a2:	d802      	bhi.n	154aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   154a4:	4b1b      	ldr	r3, [pc, #108]	; (15514 <prvAddNewTaskToReadyList+0xb8>)
   154a6:	687a      	ldr	r2, [r7, #4]
   154a8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   154aa:	4b1d      	ldr	r3, [pc, #116]	; (15520 <prvAddNewTaskToReadyList+0xc4>)
   154ac:	681b      	ldr	r3, [r3, #0]
   154ae:	1c5a      	adds	r2, r3, #1
   154b0:	4b1b      	ldr	r3, [pc, #108]	; (15520 <prvAddNewTaskToReadyList+0xc4>)
   154b2:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   154b4:	687b      	ldr	r3, [r7, #4]
   154b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   154b8:	4b1a      	ldr	r3, [pc, #104]	; (15524 <prvAddNewTaskToReadyList+0xc8>)
   154ba:	681b      	ldr	r3, [r3, #0]
   154bc:	429a      	cmp	r2, r3
   154be:	d903      	bls.n	154c8 <prvAddNewTaskToReadyList+0x6c>
   154c0:	687b      	ldr	r3, [r7, #4]
   154c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   154c4:	4b17      	ldr	r3, [pc, #92]	; (15524 <prvAddNewTaskToReadyList+0xc8>)
   154c6:	601a      	str	r2, [r3, #0]
   154c8:	687b      	ldr	r3, [r7, #4]
   154ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   154cc:	0013      	movs	r3, r2
   154ce:	009b      	lsls	r3, r3, #2
   154d0:	189b      	adds	r3, r3, r2
   154d2:	009b      	lsls	r3, r3, #2
   154d4:	4a14      	ldr	r2, [pc, #80]	; (15528 <prvAddNewTaskToReadyList+0xcc>)
   154d6:	189a      	adds	r2, r3, r2
   154d8:	687b      	ldr	r3, [r7, #4]
   154da:	3304      	adds	r3, #4
   154dc:	0019      	movs	r1, r3
   154de:	0010      	movs	r0, r2
   154e0:	4b12      	ldr	r3, [pc, #72]	; (1552c <prvAddNewTaskToReadyList+0xd0>)
   154e2:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   154e4:	4b12      	ldr	r3, [pc, #72]	; (15530 <prvAddNewTaskToReadyList+0xd4>)
   154e6:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   154e8:	4b0c      	ldr	r3, [pc, #48]	; (1551c <prvAddNewTaskToReadyList+0xc0>)
   154ea:	681b      	ldr	r3, [r3, #0]
   154ec:	2b00      	cmp	r3, #0
   154ee:	d008      	beq.n	15502 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   154f0:	4b08      	ldr	r3, [pc, #32]	; (15514 <prvAddNewTaskToReadyList+0xb8>)
   154f2:	681b      	ldr	r3, [r3, #0]
   154f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   154f6:	687b      	ldr	r3, [r7, #4]
   154f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   154fa:	429a      	cmp	r2, r3
   154fc:	d201      	bcs.n	15502 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
   154fe:	4b0d      	ldr	r3, [pc, #52]	; (15534 <prvAddNewTaskToReadyList+0xd8>)
   15500:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   15502:	46c0      	nop			; (mov r8, r8)
   15504:	46bd      	mov	sp, r7
   15506:	b002      	add	sp, #8
   15508:	bd80      	pop	{r7, pc}
   1550a:	46c0      	nop			; (mov r8, r8)
   1550c:	00014359 	.word	0x00014359
   15510:	2000293c 	.word	0x2000293c
   15514:	20002864 	.word	0x20002864
   15518:	00015d11 	.word	0x00015d11
   1551c:	20002948 	.word	0x20002948
   15520:	20002958 	.word	0x20002958
   15524:	20002944 	.word	0x20002944
   15528:	20002868 	.word	0x20002868
   1552c:	00014119 	.word	0x00014119
   15530:	0001437d 	.word	0x0001437d
   15534:	00014341 	.word	0x00014341

00015538 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   15538:	b580      	push	{r7, lr}
   1553a:	b084      	sub	sp, #16
   1553c:	af00      	add	r7, sp, #0
   1553e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   15540:	2300      	movs	r3, #0
   15542:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   15544:	687b      	ldr	r3, [r7, #4]
   15546:	2b00      	cmp	r3, #0
   15548:	d010      	beq.n	1556c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1554a:	4b0d      	ldr	r3, [pc, #52]	; (15580 <vTaskDelay+0x48>)
   1554c:	681b      	ldr	r3, [r3, #0]
   1554e:	2b00      	cmp	r3, #0
   15550:	d001      	beq.n	15556 <vTaskDelay+0x1e>
   15552:	b672      	cpsid	i
   15554:	e7fe      	b.n	15554 <vTaskDelay+0x1c>
			vTaskSuspendAll();
   15556:	4b0b      	ldr	r3, [pc, #44]	; (15584 <vTaskDelay+0x4c>)
   15558:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1555a:	687b      	ldr	r3, [r7, #4]
   1555c:	2100      	movs	r1, #0
   1555e:	0018      	movs	r0, r3
   15560:	4b09      	ldr	r3, [pc, #36]	; (15588 <vTaskDelay+0x50>)
   15562:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   15564:	4b09      	ldr	r3, [pc, #36]	; (1558c <vTaskDelay+0x54>)
   15566:	4798      	blx	r3
   15568:	0003      	movs	r3, r0
   1556a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1556c:	68fb      	ldr	r3, [r7, #12]
   1556e:	2b00      	cmp	r3, #0
   15570:	d101      	bne.n	15576 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
   15572:	4b07      	ldr	r3, [pc, #28]	; (15590 <vTaskDelay+0x58>)
   15574:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   15576:	46c0      	nop			; (mov r8, r8)
   15578:	46bd      	mov	sp, r7
   1557a:	b004      	add	sp, #16
   1557c:	bd80      	pop	{r7, pc}
   1557e:	46c0      	nop			; (mov r8, r8)
   15580:	20002964 	.word	0x20002964
   15584:	00015705 	.word	0x00015705
   15588:	00016169 	.word	0x00016169
   1558c:	0001571d 	.word	0x0001571d
   15590:	00014341 	.word	0x00014341

00015594 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   15594:	b580      	push	{r7, lr}
   15596:	b084      	sub	sp, #16
   15598:	af00      	add	r7, sp, #0
   1559a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1559c:	4b2b      	ldr	r3, [pc, #172]	; (1564c <vTaskSuspend+0xb8>)
   1559e:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   155a0:	687b      	ldr	r3, [r7, #4]
   155a2:	2b00      	cmp	r3, #0
   155a4:	d102      	bne.n	155ac <vTaskSuspend+0x18>
   155a6:	4b2a      	ldr	r3, [pc, #168]	; (15650 <vTaskSuspend+0xbc>)
   155a8:	681b      	ldr	r3, [r3, #0]
   155aa:	e000      	b.n	155ae <vTaskSuspend+0x1a>
   155ac:	687b      	ldr	r3, [r7, #4]
   155ae:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   155b0:	68fb      	ldr	r3, [r7, #12]
   155b2:	3304      	adds	r3, #4
   155b4:	0018      	movs	r0, r3
   155b6:	4b27      	ldr	r3, [pc, #156]	; (15654 <vTaskSuspend+0xc0>)
   155b8:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   155ba:	68fb      	ldr	r3, [r7, #12]
   155bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   155be:	2b00      	cmp	r3, #0
   155c0:	d004      	beq.n	155cc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   155c2:	68fb      	ldr	r3, [r7, #12]
   155c4:	3318      	adds	r3, #24
   155c6:	0018      	movs	r0, r3
   155c8:	4b22      	ldr	r3, [pc, #136]	; (15654 <vTaskSuspend+0xc0>)
   155ca:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   155cc:	68fb      	ldr	r3, [r7, #12]
   155ce:	1d1a      	adds	r2, r3, #4
   155d0:	4b21      	ldr	r3, [pc, #132]	; (15658 <vTaskSuspend+0xc4>)
   155d2:	0011      	movs	r1, r2
   155d4:	0018      	movs	r0, r3
   155d6:	4b21      	ldr	r3, [pc, #132]	; (1565c <vTaskSuspend+0xc8>)
   155d8:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   155da:	68fb      	ldr	r3, [r7, #12]
   155dc:	2248      	movs	r2, #72	; 0x48
   155de:	5c9b      	ldrb	r3, [r3, r2]
   155e0:	b2db      	uxtb	r3, r3
   155e2:	2b01      	cmp	r3, #1
   155e4:	d103      	bne.n	155ee <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   155e6:	68fb      	ldr	r3, [r7, #12]
   155e8:	2248      	movs	r2, #72	; 0x48
   155ea:	2100      	movs	r1, #0
   155ec:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   155ee:	4b1c      	ldr	r3, [pc, #112]	; (15660 <vTaskSuspend+0xcc>)
   155f0:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   155f2:	4b1c      	ldr	r3, [pc, #112]	; (15664 <vTaskSuspend+0xd0>)
   155f4:	681b      	ldr	r3, [r3, #0]
   155f6:	2b00      	cmp	r3, #0
   155f8:	d005      	beq.n	15606 <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   155fa:	4b14      	ldr	r3, [pc, #80]	; (1564c <vTaskSuspend+0xb8>)
   155fc:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   155fe:	4b1a      	ldr	r3, [pc, #104]	; (15668 <vTaskSuspend+0xd4>)
   15600:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   15602:	4b17      	ldr	r3, [pc, #92]	; (15660 <vTaskSuspend+0xcc>)
   15604:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   15606:	4b12      	ldr	r3, [pc, #72]	; (15650 <vTaskSuspend+0xbc>)
   15608:	681b      	ldr	r3, [r3, #0]
   1560a:	68fa      	ldr	r2, [r7, #12]
   1560c:	429a      	cmp	r2, r3
   1560e:	d118      	bne.n	15642 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
   15610:	4b14      	ldr	r3, [pc, #80]	; (15664 <vTaskSuspend+0xd0>)
   15612:	681b      	ldr	r3, [r3, #0]
   15614:	2b00      	cmp	r3, #0
   15616:	d008      	beq.n	1562a <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   15618:	4b14      	ldr	r3, [pc, #80]	; (1566c <vTaskSuspend+0xd8>)
   1561a:	681b      	ldr	r3, [r3, #0]
   1561c:	2b00      	cmp	r3, #0
   1561e:	d001      	beq.n	15624 <vTaskSuspend+0x90>
   15620:	b672      	cpsid	i
   15622:	e7fe      	b.n	15622 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
   15624:	4b12      	ldr	r3, [pc, #72]	; (15670 <vTaskSuspend+0xdc>)
   15626:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   15628:	e00b      	b.n	15642 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1562a:	4b0b      	ldr	r3, [pc, #44]	; (15658 <vTaskSuspend+0xc4>)
   1562c:	681a      	ldr	r2, [r3, #0]
   1562e:	4b11      	ldr	r3, [pc, #68]	; (15674 <vTaskSuspend+0xe0>)
   15630:	681b      	ldr	r3, [r3, #0]
   15632:	429a      	cmp	r2, r3
   15634:	d103      	bne.n	1563e <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
   15636:	4b06      	ldr	r3, [pc, #24]	; (15650 <vTaskSuspend+0xbc>)
   15638:	2200      	movs	r2, #0
   1563a:	601a      	str	r2, [r3, #0]
	}
   1563c:	e001      	b.n	15642 <vTaskSuspend+0xae>
					vTaskSwitchContext();
   1563e:	4b0e      	ldr	r3, [pc, #56]	; (15678 <vTaskSuspend+0xe4>)
   15640:	4798      	blx	r3
	}
   15642:	46c0      	nop			; (mov r8, r8)
   15644:	46bd      	mov	sp, r7
   15646:	b004      	add	sp, #16
   15648:	bd80      	pop	{r7, pc}
   1564a:	46c0      	nop			; (mov r8, r8)
   1564c:	00014359 	.word	0x00014359
   15650:	20002864 	.word	0x20002864
   15654:	000141c9 	.word	0x000141c9
   15658:	20002928 	.word	0x20002928
   1565c:	00014119 	.word	0x00014119
   15660:	0001437d 	.word	0x0001437d
   15664:	20002948 	.word	0x20002948
   15668:	00015e31 	.word	0x00015e31
   1566c:	20002964 	.word	0x20002964
   15670:	00014341 	.word	0x00014341
   15674:	2000293c 	.word	0x2000293c
   15678:	000159e1 	.word	0x000159e1

0001567c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1567c:	b590      	push	{r4, r7, lr}
   1567e:	b085      	sub	sp, #20
   15680:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   15682:	23fa      	movs	r3, #250	; 0xfa
   15684:	005a      	lsls	r2, r3, #1
   15686:	4916      	ldr	r1, [pc, #88]	; (156e0 <vTaskStartScheduler+0x64>)
   15688:	4816      	ldr	r0, [pc, #88]	; (156e4 <vTaskStartScheduler+0x68>)
   1568a:	4b17      	ldr	r3, [pc, #92]	; (156e8 <vTaskStartScheduler+0x6c>)
   1568c:	9301      	str	r3, [sp, #4]
   1568e:	2300      	movs	r3, #0
   15690:	9300      	str	r3, [sp, #0]
   15692:	2300      	movs	r3, #0
   15694:	4c15      	ldr	r4, [pc, #84]	; (156ec <vTaskStartScheduler+0x70>)
   15696:	47a0      	blx	r4
   15698:	0003      	movs	r3, r0
   1569a:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1569c:	687b      	ldr	r3, [r7, #4]
   1569e:	2b01      	cmp	r3, #1
   156a0:	d103      	bne.n	156aa <vTaskStartScheduler+0x2e>
		{
			xReturn = xTimerCreateTimerTask();
   156a2:	4b13      	ldr	r3, [pc, #76]	; (156f0 <vTaskStartScheduler+0x74>)
   156a4:	4798      	blx	r3
   156a6:	0003      	movs	r3, r0
   156a8:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   156aa:	687b      	ldr	r3, [r7, #4]
   156ac:	2b01      	cmp	r3, #1
   156ae:	d10d      	bne.n	156cc <vTaskStartScheduler+0x50>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   156b0:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   156b2:	4b10      	ldr	r3, [pc, #64]	; (156f4 <vTaskStartScheduler+0x78>)
   156b4:	2201      	movs	r2, #1
   156b6:	4252      	negs	r2, r2
   156b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   156ba:	4b0f      	ldr	r3, [pc, #60]	; (156f8 <vTaskStartScheduler+0x7c>)
   156bc:	2201      	movs	r2, #1
   156be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   156c0:	4b0e      	ldr	r3, [pc, #56]	; (156fc <vTaskStartScheduler+0x80>)
   156c2:	2200      	movs	r2, #0
   156c4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   156c6:	4b0e      	ldr	r3, [pc, #56]	; (15700 <vTaskStartScheduler+0x84>)
   156c8:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   156ca:	e004      	b.n	156d6 <vTaskStartScheduler+0x5a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   156cc:	687b      	ldr	r3, [r7, #4]
   156ce:	3301      	adds	r3, #1
   156d0:	d101      	bne.n	156d6 <vTaskStartScheduler+0x5a>
   156d2:	b672      	cpsid	i
   156d4:	e7fe      	b.n	156d4 <vTaskStartScheduler+0x58>
}
   156d6:	46c0      	nop			; (mov r8, r8)
   156d8:	46bd      	mov	sp, r7
   156da:	b003      	add	sp, #12
   156dc:	bd90      	pop	{r4, r7, pc}
   156de:	46c0      	nop			; (mov r8, r8)
   156e0:	0001bf60 	.word	0x0001bf60
   156e4:	00015ce9 	.word	0x00015ce9
   156e8:	20002960 	.word	0x20002960
   156ec:	000152c1 	.word	0x000152c1
   156f0:	0001621d 	.word	0x0001621d
   156f4:	2000295c 	.word	0x2000295c
   156f8:	20002948 	.word	0x20002948
   156fc:	20002940 	.word	0x20002940
   15700:	000142e9 	.word	0x000142e9

00015704 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   15704:	b580      	push	{r7, lr}
   15706:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   15708:	4b03      	ldr	r3, [pc, #12]	; (15718 <vTaskSuspendAll+0x14>)
   1570a:	681b      	ldr	r3, [r3, #0]
   1570c:	1c5a      	adds	r2, r3, #1
   1570e:	4b02      	ldr	r3, [pc, #8]	; (15718 <vTaskSuspendAll+0x14>)
   15710:	601a      	str	r2, [r3, #0]
}
   15712:	46c0      	nop			; (mov r8, r8)
   15714:	46bd      	mov	sp, r7
   15716:	bd80      	pop	{r7, pc}
   15718:	20002964 	.word	0x20002964

0001571c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1571c:	b580      	push	{r7, lr}
   1571e:	b084      	sub	sp, #16
   15720:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   15722:	2300      	movs	r3, #0
   15724:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   15726:	2300      	movs	r3, #0
   15728:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1572a:	4b3a      	ldr	r3, [pc, #232]	; (15814 <xTaskResumeAll+0xf8>)
   1572c:	681b      	ldr	r3, [r3, #0]
   1572e:	2b00      	cmp	r3, #0
   15730:	d101      	bne.n	15736 <xTaskResumeAll+0x1a>
   15732:	b672      	cpsid	i
   15734:	e7fe      	b.n	15734 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   15736:	4b38      	ldr	r3, [pc, #224]	; (15818 <xTaskResumeAll+0xfc>)
   15738:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1573a:	4b36      	ldr	r3, [pc, #216]	; (15814 <xTaskResumeAll+0xf8>)
   1573c:	681b      	ldr	r3, [r3, #0]
   1573e:	1e5a      	subs	r2, r3, #1
   15740:	4b34      	ldr	r3, [pc, #208]	; (15814 <xTaskResumeAll+0xf8>)
   15742:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   15744:	4b33      	ldr	r3, [pc, #204]	; (15814 <xTaskResumeAll+0xf8>)
   15746:	681b      	ldr	r3, [r3, #0]
   15748:	2b00      	cmp	r3, #0
   1574a:	d15b      	bne.n	15804 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1574c:	4b33      	ldr	r3, [pc, #204]	; (1581c <xTaskResumeAll+0x100>)
   1574e:	681b      	ldr	r3, [r3, #0]
   15750:	2b00      	cmp	r3, #0
   15752:	d057      	beq.n	15804 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   15754:	e02f      	b.n	157b6 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   15756:	4b32      	ldr	r3, [pc, #200]	; (15820 <xTaskResumeAll+0x104>)
   15758:	68db      	ldr	r3, [r3, #12]
   1575a:	68db      	ldr	r3, [r3, #12]
   1575c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1575e:	68fb      	ldr	r3, [r7, #12]
   15760:	3318      	adds	r3, #24
   15762:	0018      	movs	r0, r3
   15764:	4b2f      	ldr	r3, [pc, #188]	; (15824 <xTaskResumeAll+0x108>)
   15766:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   15768:	68fb      	ldr	r3, [r7, #12]
   1576a:	3304      	adds	r3, #4
   1576c:	0018      	movs	r0, r3
   1576e:	4b2d      	ldr	r3, [pc, #180]	; (15824 <xTaskResumeAll+0x108>)
   15770:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   15772:	68fb      	ldr	r3, [r7, #12]
   15774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15776:	4b2c      	ldr	r3, [pc, #176]	; (15828 <xTaskResumeAll+0x10c>)
   15778:	681b      	ldr	r3, [r3, #0]
   1577a:	429a      	cmp	r2, r3
   1577c:	d903      	bls.n	15786 <xTaskResumeAll+0x6a>
   1577e:	68fb      	ldr	r3, [r7, #12]
   15780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15782:	4b29      	ldr	r3, [pc, #164]	; (15828 <xTaskResumeAll+0x10c>)
   15784:	601a      	str	r2, [r3, #0]
   15786:	68fb      	ldr	r3, [r7, #12]
   15788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1578a:	0013      	movs	r3, r2
   1578c:	009b      	lsls	r3, r3, #2
   1578e:	189b      	adds	r3, r3, r2
   15790:	009b      	lsls	r3, r3, #2
   15792:	4a26      	ldr	r2, [pc, #152]	; (1582c <xTaskResumeAll+0x110>)
   15794:	189a      	adds	r2, r3, r2
   15796:	68fb      	ldr	r3, [r7, #12]
   15798:	3304      	adds	r3, #4
   1579a:	0019      	movs	r1, r3
   1579c:	0010      	movs	r0, r2
   1579e:	4b24      	ldr	r3, [pc, #144]	; (15830 <xTaskResumeAll+0x114>)
   157a0:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   157a2:	68fb      	ldr	r3, [r7, #12]
   157a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   157a6:	4b23      	ldr	r3, [pc, #140]	; (15834 <xTaskResumeAll+0x118>)
   157a8:	681b      	ldr	r3, [r3, #0]
   157aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   157ac:	429a      	cmp	r2, r3
   157ae:	d302      	bcc.n	157b6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
   157b0:	4b21      	ldr	r3, [pc, #132]	; (15838 <xTaskResumeAll+0x11c>)
   157b2:	2201      	movs	r2, #1
   157b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   157b6:	4b1a      	ldr	r3, [pc, #104]	; (15820 <xTaskResumeAll+0x104>)
   157b8:	681b      	ldr	r3, [r3, #0]
   157ba:	2b00      	cmp	r3, #0
   157bc:	d1cb      	bne.n	15756 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   157be:	68fb      	ldr	r3, [r7, #12]
   157c0:	2b00      	cmp	r3, #0
   157c2:	d001      	beq.n	157c8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   157c4:	4b1d      	ldr	r3, [pc, #116]	; (1583c <xTaskResumeAll+0x120>)
   157c6:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   157c8:	4b1d      	ldr	r3, [pc, #116]	; (15840 <xTaskResumeAll+0x124>)
   157ca:	681b      	ldr	r3, [r3, #0]
   157cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   157ce:	687b      	ldr	r3, [r7, #4]
   157d0:	2b00      	cmp	r3, #0
   157d2:	d00f      	beq.n	157f4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   157d4:	4b1b      	ldr	r3, [pc, #108]	; (15844 <xTaskResumeAll+0x128>)
   157d6:	4798      	blx	r3
   157d8:	1e03      	subs	r3, r0, #0
   157da:	d002      	beq.n	157e2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
   157dc:	4b16      	ldr	r3, [pc, #88]	; (15838 <xTaskResumeAll+0x11c>)
   157de:	2201      	movs	r2, #1
   157e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   157e2:	687b      	ldr	r3, [r7, #4]
   157e4:	3b01      	subs	r3, #1
   157e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   157e8:	687b      	ldr	r3, [r7, #4]
   157ea:	2b00      	cmp	r3, #0
   157ec:	d1f2      	bne.n	157d4 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
   157ee:	4b14      	ldr	r3, [pc, #80]	; (15840 <xTaskResumeAll+0x124>)
   157f0:	2200      	movs	r2, #0
   157f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   157f4:	4b10      	ldr	r3, [pc, #64]	; (15838 <xTaskResumeAll+0x11c>)
   157f6:	681b      	ldr	r3, [r3, #0]
   157f8:	2b00      	cmp	r3, #0
   157fa:	d003      	beq.n	15804 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   157fc:	2301      	movs	r3, #1
   157fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   15800:	4b11      	ldr	r3, [pc, #68]	; (15848 <xTaskResumeAll+0x12c>)
   15802:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   15804:	4b11      	ldr	r3, [pc, #68]	; (1584c <xTaskResumeAll+0x130>)
   15806:	4798      	blx	r3

	return xAlreadyYielded;
   15808:	68bb      	ldr	r3, [r7, #8]
}
   1580a:	0018      	movs	r0, r3
   1580c:	46bd      	mov	sp, r7
   1580e:	b004      	add	sp, #16
   15810:	bd80      	pop	{r7, pc}
   15812:	46c0      	nop			; (mov r8, r8)
   15814:	20002964 	.word	0x20002964
   15818:	00014359 	.word	0x00014359
   1581c:	2000293c 	.word	0x2000293c
   15820:	200028fc 	.word	0x200028fc
   15824:	000141c9 	.word	0x000141c9
   15828:	20002944 	.word	0x20002944
   1582c:	20002868 	.word	0x20002868
   15830:	00014119 	.word	0x00014119
   15834:	20002864 	.word	0x20002864
   15838:	20002950 	.word	0x20002950
   1583c:	00015e31 	.word	0x00015e31
   15840:	2000294c 	.word	0x2000294c
   15844:	0001586d 	.word	0x0001586d
   15848:	00014341 	.word	0x00014341
   1584c:	0001437d 	.word	0x0001437d

00015850 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   15850:	b580      	push	{r7, lr}
   15852:	b082      	sub	sp, #8
   15854:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   15856:	4b04      	ldr	r3, [pc, #16]	; (15868 <xTaskGetTickCount+0x18>)
   15858:	681b      	ldr	r3, [r3, #0]
   1585a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1585c:	687b      	ldr	r3, [r7, #4]
}
   1585e:	0018      	movs	r0, r3
   15860:	46bd      	mov	sp, r7
   15862:	b002      	add	sp, #8
   15864:	bd80      	pop	{r7, pc}
   15866:	46c0      	nop			; (mov r8, r8)
   15868:	20002940 	.word	0x20002940

0001586c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1586c:	b580      	push	{r7, lr}
   1586e:	b086      	sub	sp, #24
   15870:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   15872:	2300      	movs	r3, #0
   15874:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   15876:	4b4c      	ldr	r3, [pc, #304]	; (159a8 <xTaskIncrementTick+0x13c>)
   15878:	681b      	ldr	r3, [r3, #0]
   1587a:	2b00      	cmp	r3, #0
   1587c:	d000      	beq.n	15880 <xTaskIncrementTick+0x14>
   1587e:	e083      	b.n	15988 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   15880:	4b4a      	ldr	r3, [pc, #296]	; (159ac <xTaskIncrementTick+0x140>)
   15882:	681b      	ldr	r3, [r3, #0]
   15884:	3301      	adds	r3, #1
   15886:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   15888:	4b48      	ldr	r3, [pc, #288]	; (159ac <xTaskIncrementTick+0x140>)
   1588a:	693a      	ldr	r2, [r7, #16]
   1588c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1588e:	693b      	ldr	r3, [r7, #16]
   15890:	2b00      	cmp	r3, #0
   15892:	d117      	bne.n	158c4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
   15894:	4b46      	ldr	r3, [pc, #280]	; (159b0 <xTaskIncrementTick+0x144>)
   15896:	681b      	ldr	r3, [r3, #0]
   15898:	681b      	ldr	r3, [r3, #0]
   1589a:	2b00      	cmp	r3, #0
   1589c:	d001      	beq.n	158a2 <xTaskIncrementTick+0x36>
   1589e:	b672      	cpsid	i
   158a0:	e7fe      	b.n	158a0 <xTaskIncrementTick+0x34>
   158a2:	4b43      	ldr	r3, [pc, #268]	; (159b0 <xTaskIncrementTick+0x144>)
   158a4:	681b      	ldr	r3, [r3, #0]
   158a6:	60fb      	str	r3, [r7, #12]
   158a8:	4b42      	ldr	r3, [pc, #264]	; (159b4 <xTaskIncrementTick+0x148>)
   158aa:	681a      	ldr	r2, [r3, #0]
   158ac:	4b40      	ldr	r3, [pc, #256]	; (159b0 <xTaskIncrementTick+0x144>)
   158ae:	601a      	str	r2, [r3, #0]
   158b0:	4b40      	ldr	r3, [pc, #256]	; (159b4 <xTaskIncrementTick+0x148>)
   158b2:	68fa      	ldr	r2, [r7, #12]
   158b4:	601a      	str	r2, [r3, #0]
   158b6:	4b40      	ldr	r3, [pc, #256]	; (159b8 <xTaskIncrementTick+0x14c>)
   158b8:	681b      	ldr	r3, [r3, #0]
   158ba:	1c5a      	adds	r2, r3, #1
   158bc:	4b3e      	ldr	r3, [pc, #248]	; (159b8 <xTaskIncrementTick+0x14c>)
   158be:	601a      	str	r2, [r3, #0]
   158c0:	4b3e      	ldr	r3, [pc, #248]	; (159bc <xTaskIncrementTick+0x150>)
   158c2:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   158c4:	4b3e      	ldr	r3, [pc, #248]	; (159c0 <xTaskIncrementTick+0x154>)
   158c6:	681b      	ldr	r3, [r3, #0]
   158c8:	693a      	ldr	r2, [r7, #16]
   158ca:	429a      	cmp	r2, r3
   158cc:	d34e      	bcc.n	1596c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   158ce:	4b38      	ldr	r3, [pc, #224]	; (159b0 <xTaskIncrementTick+0x144>)
   158d0:	681b      	ldr	r3, [r3, #0]
   158d2:	681b      	ldr	r3, [r3, #0]
   158d4:	2b00      	cmp	r3, #0
   158d6:	d101      	bne.n	158dc <xTaskIncrementTick+0x70>
   158d8:	2301      	movs	r3, #1
   158da:	e000      	b.n	158de <xTaskIncrementTick+0x72>
   158dc:	2300      	movs	r3, #0
   158de:	2b00      	cmp	r3, #0
   158e0:	d004      	beq.n	158ec <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   158e2:	4b37      	ldr	r3, [pc, #220]	; (159c0 <xTaskIncrementTick+0x154>)
   158e4:	2201      	movs	r2, #1
   158e6:	4252      	negs	r2, r2
   158e8:	601a      	str	r2, [r3, #0]
					break;
   158ea:	e03f      	b.n	1596c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   158ec:	4b30      	ldr	r3, [pc, #192]	; (159b0 <xTaskIncrementTick+0x144>)
   158ee:	681b      	ldr	r3, [r3, #0]
   158f0:	68db      	ldr	r3, [r3, #12]
   158f2:	68db      	ldr	r3, [r3, #12]
   158f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   158f6:	68bb      	ldr	r3, [r7, #8]
   158f8:	685b      	ldr	r3, [r3, #4]
   158fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   158fc:	693a      	ldr	r2, [r7, #16]
   158fe:	687b      	ldr	r3, [r7, #4]
   15900:	429a      	cmp	r2, r3
   15902:	d203      	bcs.n	1590c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   15904:	4b2e      	ldr	r3, [pc, #184]	; (159c0 <xTaskIncrementTick+0x154>)
   15906:	687a      	ldr	r2, [r7, #4]
   15908:	601a      	str	r2, [r3, #0]
						break;
   1590a:	e02f      	b.n	1596c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1590c:	68bb      	ldr	r3, [r7, #8]
   1590e:	3304      	adds	r3, #4
   15910:	0018      	movs	r0, r3
   15912:	4b2c      	ldr	r3, [pc, #176]	; (159c4 <xTaskIncrementTick+0x158>)
   15914:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   15916:	68bb      	ldr	r3, [r7, #8]
   15918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1591a:	2b00      	cmp	r3, #0
   1591c:	d004      	beq.n	15928 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1591e:	68bb      	ldr	r3, [r7, #8]
   15920:	3318      	adds	r3, #24
   15922:	0018      	movs	r0, r3
   15924:	4b27      	ldr	r3, [pc, #156]	; (159c4 <xTaskIncrementTick+0x158>)
   15926:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   15928:	68bb      	ldr	r3, [r7, #8]
   1592a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1592c:	4b26      	ldr	r3, [pc, #152]	; (159c8 <xTaskIncrementTick+0x15c>)
   1592e:	681b      	ldr	r3, [r3, #0]
   15930:	429a      	cmp	r2, r3
   15932:	d903      	bls.n	1593c <xTaskIncrementTick+0xd0>
   15934:	68bb      	ldr	r3, [r7, #8]
   15936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15938:	4b23      	ldr	r3, [pc, #140]	; (159c8 <xTaskIncrementTick+0x15c>)
   1593a:	601a      	str	r2, [r3, #0]
   1593c:	68bb      	ldr	r3, [r7, #8]
   1593e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15940:	0013      	movs	r3, r2
   15942:	009b      	lsls	r3, r3, #2
   15944:	189b      	adds	r3, r3, r2
   15946:	009b      	lsls	r3, r3, #2
   15948:	4a20      	ldr	r2, [pc, #128]	; (159cc <xTaskIncrementTick+0x160>)
   1594a:	189a      	adds	r2, r3, r2
   1594c:	68bb      	ldr	r3, [r7, #8]
   1594e:	3304      	adds	r3, #4
   15950:	0019      	movs	r1, r3
   15952:	0010      	movs	r0, r2
   15954:	4b1e      	ldr	r3, [pc, #120]	; (159d0 <xTaskIncrementTick+0x164>)
   15956:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   15958:	68bb      	ldr	r3, [r7, #8]
   1595a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1595c:	4b1d      	ldr	r3, [pc, #116]	; (159d4 <xTaskIncrementTick+0x168>)
   1595e:	681b      	ldr	r3, [r3, #0]
   15960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15962:	429a      	cmp	r2, r3
   15964:	d3b3      	bcc.n	158ce <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
   15966:	2301      	movs	r3, #1
   15968:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1596a:	e7b0      	b.n	158ce <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1596c:	4b19      	ldr	r3, [pc, #100]	; (159d4 <xTaskIncrementTick+0x168>)
   1596e:	681b      	ldr	r3, [r3, #0]
   15970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15972:	4916      	ldr	r1, [pc, #88]	; (159cc <xTaskIncrementTick+0x160>)
   15974:	0013      	movs	r3, r2
   15976:	009b      	lsls	r3, r3, #2
   15978:	189b      	adds	r3, r3, r2
   1597a:	009b      	lsls	r3, r3, #2
   1597c:	585b      	ldr	r3, [r3, r1]
   1597e:	2b01      	cmp	r3, #1
   15980:	d907      	bls.n	15992 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
   15982:	2301      	movs	r3, #1
   15984:	617b      	str	r3, [r7, #20]
   15986:	e004      	b.n	15992 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   15988:	4b13      	ldr	r3, [pc, #76]	; (159d8 <xTaskIncrementTick+0x16c>)
   1598a:	681b      	ldr	r3, [r3, #0]
   1598c:	1c5a      	adds	r2, r3, #1
   1598e:	4b12      	ldr	r3, [pc, #72]	; (159d8 <xTaskIncrementTick+0x16c>)
   15990:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   15992:	4b12      	ldr	r3, [pc, #72]	; (159dc <xTaskIncrementTick+0x170>)
   15994:	681b      	ldr	r3, [r3, #0]
   15996:	2b00      	cmp	r3, #0
   15998:	d001      	beq.n	1599e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
   1599a:	2301      	movs	r3, #1
   1599c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1599e:	697b      	ldr	r3, [r7, #20]
}
   159a0:	0018      	movs	r0, r3
   159a2:	46bd      	mov	sp, r7
   159a4:	b006      	add	sp, #24
   159a6:	bd80      	pop	{r7, pc}
   159a8:	20002964 	.word	0x20002964
   159ac:	20002940 	.word	0x20002940
   159b0:	200028f4 	.word	0x200028f4
   159b4:	200028f8 	.word	0x200028f8
   159b8:	20002954 	.word	0x20002954
   159bc:	00015e31 	.word	0x00015e31
   159c0:	2000295c 	.word	0x2000295c
   159c4:	000141c9 	.word	0x000141c9
   159c8:	20002944 	.word	0x20002944
   159cc:	20002868 	.word	0x20002868
   159d0:	00014119 	.word	0x00014119
   159d4:	20002864 	.word	0x20002864
   159d8:	2000294c 	.word	0x2000294c
   159dc:	20002950 	.word	0x20002950

000159e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   159e0:	b580      	push	{r7, lr}
   159e2:	b082      	sub	sp, #8
   159e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   159e6:	4b2a      	ldr	r3, [pc, #168]	; (15a90 <vTaskSwitchContext+0xb0>)
   159e8:	681b      	ldr	r3, [r3, #0]
   159ea:	2b00      	cmp	r3, #0
   159ec:	d003      	beq.n	159f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   159ee:	4b29      	ldr	r3, [pc, #164]	; (15a94 <vTaskSwitchContext+0xb4>)
   159f0:	2201      	movs	r2, #1
   159f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   159f4:	e048      	b.n	15a88 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
   159f6:	4b27      	ldr	r3, [pc, #156]	; (15a94 <vTaskSwitchContext+0xb4>)
   159f8:	2200      	movs	r2, #0
   159fa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   159fc:	4b26      	ldr	r3, [pc, #152]	; (15a98 <vTaskSwitchContext+0xb8>)
   159fe:	681b      	ldr	r3, [r3, #0]
   15a00:	681a      	ldr	r2, [r3, #0]
   15a02:	4b25      	ldr	r3, [pc, #148]	; (15a98 <vTaskSwitchContext+0xb8>)
   15a04:	681b      	ldr	r3, [r3, #0]
   15a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   15a08:	429a      	cmp	r2, r3
   15a0a:	d808      	bhi.n	15a1e <vTaskSwitchContext+0x3e>
   15a0c:	4b22      	ldr	r3, [pc, #136]	; (15a98 <vTaskSwitchContext+0xb8>)
   15a0e:	681a      	ldr	r2, [r3, #0]
   15a10:	4b21      	ldr	r3, [pc, #132]	; (15a98 <vTaskSwitchContext+0xb8>)
   15a12:	681b      	ldr	r3, [r3, #0]
   15a14:	3334      	adds	r3, #52	; 0x34
   15a16:	0019      	movs	r1, r3
   15a18:	0010      	movs	r0, r2
   15a1a:	4b20      	ldr	r3, [pc, #128]	; (15a9c <vTaskSwitchContext+0xbc>)
   15a1c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   15a1e:	4b20      	ldr	r3, [pc, #128]	; (15aa0 <vTaskSwitchContext+0xc0>)
   15a20:	681b      	ldr	r3, [r3, #0]
   15a22:	607b      	str	r3, [r7, #4]
   15a24:	e007      	b.n	15a36 <vTaskSwitchContext+0x56>
   15a26:	687b      	ldr	r3, [r7, #4]
   15a28:	2b00      	cmp	r3, #0
   15a2a:	d101      	bne.n	15a30 <vTaskSwitchContext+0x50>
   15a2c:	b672      	cpsid	i
   15a2e:	e7fe      	b.n	15a2e <vTaskSwitchContext+0x4e>
   15a30:	687b      	ldr	r3, [r7, #4]
   15a32:	3b01      	subs	r3, #1
   15a34:	607b      	str	r3, [r7, #4]
   15a36:	491b      	ldr	r1, [pc, #108]	; (15aa4 <vTaskSwitchContext+0xc4>)
   15a38:	687a      	ldr	r2, [r7, #4]
   15a3a:	0013      	movs	r3, r2
   15a3c:	009b      	lsls	r3, r3, #2
   15a3e:	189b      	adds	r3, r3, r2
   15a40:	009b      	lsls	r3, r3, #2
   15a42:	585b      	ldr	r3, [r3, r1]
   15a44:	2b00      	cmp	r3, #0
   15a46:	d0ee      	beq.n	15a26 <vTaskSwitchContext+0x46>
   15a48:	687a      	ldr	r2, [r7, #4]
   15a4a:	0013      	movs	r3, r2
   15a4c:	009b      	lsls	r3, r3, #2
   15a4e:	189b      	adds	r3, r3, r2
   15a50:	009b      	lsls	r3, r3, #2
   15a52:	4a14      	ldr	r2, [pc, #80]	; (15aa4 <vTaskSwitchContext+0xc4>)
   15a54:	189b      	adds	r3, r3, r2
   15a56:	603b      	str	r3, [r7, #0]
   15a58:	683b      	ldr	r3, [r7, #0]
   15a5a:	685b      	ldr	r3, [r3, #4]
   15a5c:	685a      	ldr	r2, [r3, #4]
   15a5e:	683b      	ldr	r3, [r7, #0]
   15a60:	605a      	str	r2, [r3, #4]
   15a62:	683b      	ldr	r3, [r7, #0]
   15a64:	685a      	ldr	r2, [r3, #4]
   15a66:	683b      	ldr	r3, [r7, #0]
   15a68:	3308      	adds	r3, #8
   15a6a:	429a      	cmp	r2, r3
   15a6c:	d104      	bne.n	15a78 <vTaskSwitchContext+0x98>
   15a6e:	683b      	ldr	r3, [r7, #0]
   15a70:	685b      	ldr	r3, [r3, #4]
   15a72:	685a      	ldr	r2, [r3, #4]
   15a74:	683b      	ldr	r3, [r7, #0]
   15a76:	605a      	str	r2, [r3, #4]
   15a78:	683b      	ldr	r3, [r7, #0]
   15a7a:	685b      	ldr	r3, [r3, #4]
   15a7c:	68da      	ldr	r2, [r3, #12]
   15a7e:	4b06      	ldr	r3, [pc, #24]	; (15a98 <vTaskSwitchContext+0xb8>)
   15a80:	601a      	str	r2, [r3, #0]
   15a82:	4b07      	ldr	r3, [pc, #28]	; (15aa0 <vTaskSwitchContext+0xc0>)
   15a84:	687a      	ldr	r2, [r7, #4]
   15a86:	601a      	str	r2, [r3, #0]
}
   15a88:	46c0      	nop			; (mov r8, r8)
   15a8a:	46bd      	mov	sp, r7
   15a8c:	b002      	add	sp, #8
   15a8e:	bd80      	pop	{r7, pc}
   15a90:	20002964 	.word	0x20002964
   15a94:	20002950 	.word	0x20002950
   15a98:	20002864 	.word	0x20002864
   15a9c:	00019a95 	.word	0x00019a95
   15aa0:	20002944 	.word	0x20002944
   15aa4:	20002868 	.word	0x20002868

00015aa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   15aa8:	b580      	push	{r7, lr}
   15aaa:	b082      	sub	sp, #8
   15aac:	af00      	add	r7, sp, #0
   15aae:	6078      	str	r0, [r7, #4]
   15ab0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   15ab2:	687b      	ldr	r3, [r7, #4]
   15ab4:	2b00      	cmp	r3, #0
   15ab6:	d101      	bne.n	15abc <vTaskPlaceOnEventList+0x14>
   15ab8:	b672      	cpsid	i
   15aba:	e7fe      	b.n	15aba <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   15abc:	4b08      	ldr	r3, [pc, #32]	; (15ae0 <vTaskPlaceOnEventList+0x38>)
   15abe:	681b      	ldr	r3, [r3, #0]
   15ac0:	3318      	adds	r3, #24
   15ac2:	001a      	movs	r2, r3
   15ac4:	687b      	ldr	r3, [r7, #4]
   15ac6:	0011      	movs	r1, r2
   15ac8:	0018      	movs	r0, r3
   15aca:	4b06      	ldr	r3, [pc, #24]	; (15ae4 <vTaskPlaceOnEventList+0x3c>)
   15acc:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   15ace:	683b      	ldr	r3, [r7, #0]
   15ad0:	2101      	movs	r1, #1
   15ad2:	0018      	movs	r0, r3
   15ad4:	4b04      	ldr	r3, [pc, #16]	; (15ae8 <vTaskPlaceOnEventList+0x40>)
   15ad6:	4798      	blx	r3
}
   15ad8:	46c0      	nop			; (mov r8, r8)
   15ada:	46bd      	mov	sp, r7
   15adc:	b002      	add	sp, #8
   15ade:	bd80      	pop	{r7, pc}
   15ae0:	20002864 	.word	0x20002864
   15ae4:	0001415d 	.word	0x0001415d
   15ae8:	00016169 	.word	0x00016169

00015aec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   15aec:	b580      	push	{r7, lr}
   15aee:	b084      	sub	sp, #16
   15af0:	af00      	add	r7, sp, #0
   15af2:	60f8      	str	r0, [r7, #12]
   15af4:	60b9      	str	r1, [r7, #8]
   15af6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   15af8:	68fb      	ldr	r3, [r7, #12]
   15afa:	2b00      	cmp	r3, #0
   15afc:	d101      	bne.n	15b02 <vTaskPlaceOnEventListRestricted+0x16>
   15afe:	b672      	cpsid	i
   15b00:	e7fe      	b.n	15b00 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   15b02:	4b0c      	ldr	r3, [pc, #48]	; (15b34 <vTaskPlaceOnEventListRestricted+0x48>)
   15b04:	681b      	ldr	r3, [r3, #0]
   15b06:	3318      	adds	r3, #24
   15b08:	001a      	movs	r2, r3
   15b0a:	68fb      	ldr	r3, [r7, #12]
   15b0c:	0011      	movs	r1, r2
   15b0e:	0018      	movs	r0, r3
   15b10:	4b09      	ldr	r3, [pc, #36]	; (15b38 <vTaskPlaceOnEventListRestricted+0x4c>)
   15b12:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   15b14:	687b      	ldr	r3, [r7, #4]
   15b16:	2b00      	cmp	r3, #0
   15b18:	d002      	beq.n	15b20 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   15b1a:	2301      	movs	r3, #1
   15b1c:	425b      	negs	r3, r3
   15b1e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   15b20:	687a      	ldr	r2, [r7, #4]
   15b22:	68bb      	ldr	r3, [r7, #8]
   15b24:	0011      	movs	r1, r2
   15b26:	0018      	movs	r0, r3
   15b28:	4b04      	ldr	r3, [pc, #16]	; (15b3c <vTaskPlaceOnEventListRestricted+0x50>)
   15b2a:	4798      	blx	r3
	}
   15b2c:	46c0      	nop			; (mov r8, r8)
   15b2e:	46bd      	mov	sp, r7
   15b30:	b004      	add	sp, #16
   15b32:	bd80      	pop	{r7, pc}
   15b34:	20002864 	.word	0x20002864
   15b38:	00014119 	.word	0x00014119
   15b3c:	00016169 	.word	0x00016169

00015b40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   15b40:	b580      	push	{r7, lr}
   15b42:	b084      	sub	sp, #16
   15b44:	af00      	add	r7, sp, #0
   15b46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   15b48:	687b      	ldr	r3, [r7, #4]
   15b4a:	68db      	ldr	r3, [r3, #12]
   15b4c:	68db      	ldr	r3, [r3, #12]
   15b4e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   15b50:	68bb      	ldr	r3, [r7, #8]
   15b52:	2b00      	cmp	r3, #0
   15b54:	d101      	bne.n	15b5a <xTaskRemoveFromEventList+0x1a>
   15b56:	b672      	cpsid	i
   15b58:	e7fe      	b.n	15b58 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   15b5a:	68bb      	ldr	r3, [r7, #8]
   15b5c:	3318      	adds	r3, #24
   15b5e:	0018      	movs	r0, r3
   15b60:	4b1f      	ldr	r3, [pc, #124]	; (15be0 <xTaskRemoveFromEventList+0xa0>)
   15b62:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   15b64:	4b1f      	ldr	r3, [pc, #124]	; (15be4 <xTaskRemoveFromEventList+0xa4>)
   15b66:	681b      	ldr	r3, [r3, #0]
   15b68:	2b00      	cmp	r3, #0
   15b6a:	d11d      	bne.n	15ba8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   15b6c:	68bb      	ldr	r3, [r7, #8]
   15b6e:	3304      	adds	r3, #4
   15b70:	0018      	movs	r0, r3
   15b72:	4b1b      	ldr	r3, [pc, #108]	; (15be0 <xTaskRemoveFromEventList+0xa0>)
   15b74:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   15b76:	68bb      	ldr	r3, [r7, #8]
   15b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15b7a:	4b1b      	ldr	r3, [pc, #108]	; (15be8 <xTaskRemoveFromEventList+0xa8>)
   15b7c:	681b      	ldr	r3, [r3, #0]
   15b7e:	429a      	cmp	r2, r3
   15b80:	d903      	bls.n	15b8a <xTaskRemoveFromEventList+0x4a>
   15b82:	68bb      	ldr	r3, [r7, #8]
   15b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15b86:	4b18      	ldr	r3, [pc, #96]	; (15be8 <xTaskRemoveFromEventList+0xa8>)
   15b88:	601a      	str	r2, [r3, #0]
   15b8a:	68bb      	ldr	r3, [r7, #8]
   15b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15b8e:	0013      	movs	r3, r2
   15b90:	009b      	lsls	r3, r3, #2
   15b92:	189b      	adds	r3, r3, r2
   15b94:	009b      	lsls	r3, r3, #2
   15b96:	4a15      	ldr	r2, [pc, #84]	; (15bec <xTaskRemoveFromEventList+0xac>)
   15b98:	189a      	adds	r2, r3, r2
   15b9a:	68bb      	ldr	r3, [r7, #8]
   15b9c:	3304      	adds	r3, #4
   15b9e:	0019      	movs	r1, r3
   15ba0:	0010      	movs	r0, r2
   15ba2:	4b13      	ldr	r3, [pc, #76]	; (15bf0 <xTaskRemoveFromEventList+0xb0>)
   15ba4:	4798      	blx	r3
   15ba6:	e007      	b.n	15bb8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   15ba8:	68bb      	ldr	r3, [r7, #8]
   15baa:	3318      	adds	r3, #24
   15bac:	001a      	movs	r2, r3
   15bae:	4b11      	ldr	r3, [pc, #68]	; (15bf4 <xTaskRemoveFromEventList+0xb4>)
   15bb0:	0011      	movs	r1, r2
   15bb2:	0018      	movs	r0, r3
   15bb4:	4b0e      	ldr	r3, [pc, #56]	; (15bf0 <xTaskRemoveFromEventList+0xb0>)
   15bb6:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   15bb8:	68bb      	ldr	r3, [r7, #8]
   15bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15bbc:	4b0e      	ldr	r3, [pc, #56]	; (15bf8 <xTaskRemoveFromEventList+0xb8>)
   15bbe:	681b      	ldr	r3, [r3, #0]
   15bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15bc2:	429a      	cmp	r2, r3
   15bc4:	d905      	bls.n	15bd2 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   15bc6:	2301      	movs	r3, #1
   15bc8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   15bca:	4b0c      	ldr	r3, [pc, #48]	; (15bfc <xTaskRemoveFromEventList+0xbc>)
   15bcc:	2201      	movs	r2, #1
   15bce:	601a      	str	r2, [r3, #0]
   15bd0:	e001      	b.n	15bd6 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
   15bd2:	2300      	movs	r3, #0
   15bd4:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   15bd6:	68fb      	ldr	r3, [r7, #12]
}
   15bd8:	0018      	movs	r0, r3
   15bda:	46bd      	mov	sp, r7
   15bdc:	b004      	add	sp, #16
   15bde:	bd80      	pop	{r7, pc}
   15be0:	000141c9 	.word	0x000141c9
   15be4:	20002964 	.word	0x20002964
   15be8:	20002944 	.word	0x20002944
   15bec:	20002868 	.word	0x20002868
   15bf0:	00014119 	.word	0x00014119
   15bf4:	200028fc 	.word	0x200028fc
   15bf8:	20002864 	.word	0x20002864
   15bfc:	20002950 	.word	0x20002950

00015c00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   15c00:	b580      	push	{r7, lr}
   15c02:	b082      	sub	sp, #8
   15c04:	af00      	add	r7, sp, #0
   15c06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   15c08:	4b05      	ldr	r3, [pc, #20]	; (15c20 <vTaskInternalSetTimeOutState+0x20>)
   15c0a:	681a      	ldr	r2, [r3, #0]
   15c0c:	687b      	ldr	r3, [r7, #4]
   15c0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   15c10:	4b04      	ldr	r3, [pc, #16]	; (15c24 <vTaskInternalSetTimeOutState+0x24>)
   15c12:	681a      	ldr	r2, [r3, #0]
   15c14:	687b      	ldr	r3, [r7, #4]
   15c16:	605a      	str	r2, [r3, #4]
}
   15c18:	46c0      	nop			; (mov r8, r8)
   15c1a:	46bd      	mov	sp, r7
   15c1c:	b002      	add	sp, #8
   15c1e:	bd80      	pop	{r7, pc}
   15c20:	20002954 	.word	0x20002954
   15c24:	20002940 	.word	0x20002940

00015c28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   15c28:	b580      	push	{r7, lr}
   15c2a:	b086      	sub	sp, #24
   15c2c:	af00      	add	r7, sp, #0
   15c2e:	6078      	str	r0, [r7, #4]
   15c30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   15c32:	687b      	ldr	r3, [r7, #4]
   15c34:	2b00      	cmp	r3, #0
   15c36:	d101      	bne.n	15c3c <xTaskCheckForTimeOut+0x14>
   15c38:	b672      	cpsid	i
   15c3a:	e7fe      	b.n	15c3a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   15c3c:	683b      	ldr	r3, [r7, #0]
   15c3e:	2b00      	cmp	r3, #0
   15c40:	d101      	bne.n	15c46 <xTaskCheckForTimeOut+0x1e>
   15c42:	b672      	cpsid	i
   15c44:	e7fe      	b.n	15c44 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   15c46:	4b1e      	ldr	r3, [pc, #120]	; (15cc0 <xTaskCheckForTimeOut+0x98>)
   15c48:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   15c4a:	4b1e      	ldr	r3, [pc, #120]	; (15cc4 <xTaskCheckForTimeOut+0x9c>)
   15c4c:	681b      	ldr	r3, [r3, #0]
   15c4e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   15c50:	687b      	ldr	r3, [r7, #4]
   15c52:	685b      	ldr	r3, [r3, #4]
   15c54:	693a      	ldr	r2, [r7, #16]
   15c56:	1ad3      	subs	r3, r2, r3
   15c58:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   15c5a:	683b      	ldr	r3, [r7, #0]
   15c5c:	681b      	ldr	r3, [r3, #0]
   15c5e:	3301      	adds	r3, #1
   15c60:	d102      	bne.n	15c68 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   15c62:	2300      	movs	r3, #0
   15c64:	617b      	str	r3, [r7, #20]
   15c66:	e024      	b.n	15cb2 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   15c68:	687b      	ldr	r3, [r7, #4]
   15c6a:	681a      	ldr	r2, [r3, #0]
   15c6c:	4b16      	ldr	r3, [pc, #88]	; (15cc8 <xTaskCheckForTimeOut+0xa0>)
   15c6e:	681b      	ldr	r3, [r3, #0]
   15c70:	429a      	cmp	r2, r3
   15c72:	d007      	beq.n	15c84 <xTaskCheckForTimeOut+0x5c>
   15c74:	687b      	ldr	r3, [r7, #4]
   15c76:	685a      	ldr	r2, [r3, #4]
   15c78:	693b      	ldr	r3, [r7, #16]
   15c7a:	429a      	cmp	r2, r3
   15c7c:	d802      	bhi.n	15c84 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   15c7e:	2301      	movs	r3, #1
   15c80:	617b      	str	r3, [r7, #20]
   15c82:	e016      	b.n	15cb2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   15c84:	683b      	ldr	r3, [r7, #0]
   15c86:	681a      	ldr	r2, [r3, #0]
   15c88:	68fb      	ldr	r3, [r7, #12]
   15c8a:	429a      	cmp	r2, r3
   15c8c:	d90c      	bls.n	15ca8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   15c8e:	683b      	ldr	r3, [r7, #0]
   15c90:	681a      	ldr	r2, [r3, #0]
   15c92:	68fb      	ldr	r3, [r7, #12]
   15c94:	1ad2      	subs	r2, r2, r3
   15c96:	683b      	ldr	r3, [r7, #0]
   15c98:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   15c9a:	687b      	ldr	r3, [r7, #4]
   15c9c:	0018      	movs	r0, r3
   15c9e:	4b0b      	ldr	r3, [pc, #44]	; (15ccc <xTaskCheckForTimeOut+0xa4>)
   15ca0:	4798      	blx	r3
			xReturn = pdFALSE;
   15ca2:	2300      	movs	r3, #0
   15ca4:	617b      	str	r3, [r7, #20]
   15ca6:	e004      	b.n	15cb2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   15ca8:	683b      	ldr	r3, [r7, #0]
   15caa:	2200      	movs	r2, #0
   15cac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   15cae:	2301      	movs	r3, #1
   15cb0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   15cb2:	4b07      	ldr	r3, [pc, #28]	; (15cd0 <xTaskCheckForTimeOut+0xa8>)
   15cb4:	4798      	blx	r3

	return xReturn;
   15cb6:	697b      	ldr	r3, [r7, #20]
}
   15cb8:	0018      	movs	r0, r3
   15cba:	46bd      	mov	sp, r7
   15cbc:	b006      	add	sp, #24
   15cbe:	bd80      	pop	{r7, pc}
   15cc0:	00014359 	.word	0x00014359
   15cc4:	20002940 	.word	0x20002940
   15cc8:	20002954 	.word	0x20002954
   15ccc:	00015c01 	.word	0x00015c01
   15cd0:	0001437d 	.word	0x0001437d

00015cd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   15cd4:	b580      	push	{r7, lr}
   15cd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   15cd8:	4b02      	ldr	r3, [pc, #8]	; (15ce4 <vTaskMissedYield+0x10>)
   15cda:	2201      	movs	r2, #1
   15cdc:	601a      	str	r2, [r3, #0]
}
   15cde:	46c0      	nop			; (mov r8, r8)
   15ce0:	46bd      	mov	sp, r7
   15ce2:	bd80      	pop	{r7, pc}
   15ce4:	20002950 	.word	0x20002950

00015ce8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   15ce8:	b580      	push	{r7, lr}
   15cea:	b082      	sub	sp, #8
   15cec:	af00      	add	r7, sp, #0
   15cee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   15cf0:	4b04      	ldr	r3, [pc, #16]	; (15d04 <prvIdleTask+0x1c>)
   15cf2:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   15cf4:	4b04      	ldr	r3, [pc, #16]	; (15d08 <prvIdleTask+0x20>)
   15cf6:	681b      	ldr	r3, [r3, #0]
   15cf8:	2b01      	cmp	r3, #1
   15cfa:	d9f9      	bls.n	15cf0 <prvIdleTask+0x8>
			{
				taskYIELD();
   15cfc:	4b03      	ldr	r3, [pc, #12]	; (15d0c <prvIdleTask+0x24>)
   15cfe:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   15d00:	e7f6      	b.n	15cf0 <prvIdleTask+0x8>
   15d02:	46c0      	nop			; (mov r8, r8)
   15d04:	00015d9d 	.word	0x00015d9d
   15d08:	20002868 	.word	0x20002868
   15d0c:	00014341 	.word	0x00014341

00015d10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   15d10:	b580      	push	{r7, lr}
   15d12:	b082      	sub	sp, #8
   15d14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   15d16:	2300      	movs	r3, #0
   15d18:	607b      	str	r3, [r7, #4]
   15d1a:	e00c      	b.n	15d36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   15d1c:	687a      	ldr	r2, [r7, #4]
   15d1e:	0013      	movs	r3, r2
   15d20:	009b      	lsls	r3, r3, #2
   15d22:	189b      	adds	r3, r3, r2
   15d24:	009b      	lsls	r3, r3, #2
   15d26:	4a14      	ldr	r2, [pc, #80]	; (15d78 <prvInitialiseTaskLists+0x68>)
   15d28:	189b      	adds	r3, r3, r2
   15d2a:	0018      	movs	r0, r3
   15d2c:	4b13      	ldr	r3, [pc, #76]	; (15d7c <prvInitialiseTaskLists+0x6c>)
   15d2e:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   15d30:	687b      	ldr	r3, [r7, #4]
   15d32:	3301      	adds	r3, #1
   15d34:	607b      	str	r3, [r7, #4]
   15d36:	687b      	ldr	r3, [r7, #4]
   15d38:	2b04      	cmp	r3, #4
   15d3a:	d9ef      	bls.n	15d1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   15d3c:	4b10      	ldr	r3, [pc, #64]	; (15d80 <prvInitialiseTaskLists+0x70>)
   15d3e:	0018      	movs	r0, r3
   15d40:	4b0e      	ldr	r3, [pc, #56]	; (15d7c <prvInitialiseTaskLists+0x6c>)
   15d42:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   15d44:	4b0f      	ldr	r3, [pc, #60]	; (15d84 <prvInitialiseTaskLists+0x74>)
   15d46:	0018      	movs	r0, r3
   15d48:	4b0c      	ldr	r3, [pc, #48]	; (15d7c <prvInitialiseTaskLists+0x6c>)
   15d4a:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   15d4c:	4b0e      	ldr	r3, [pc, #56]	; (15d88 <prvInitialiseTaskLists+0x78>)
   15d4e:	0018      	movs	r0, r3
   15d50:	4b0a      	ldr	r3, [pc, #40]	; (15d7c <prvInitialiseTaskLists+0x6c>)
   15d52:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   15d54:	4b0d      	ldr	r3, [pc, #52]	; (15d8c <prvInitialiseTaskLists+0x7c>)
   15d56:	0018      	movs	r0, r3
   15d58:	4b08      	ldr	r3, [pc, #32]	; (15d7c <prvInitialiseTaskLists+0x6c>)
   15d5a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   15d5c:	4b0c      	ldr	r3, [pc, #48]	; (15d90 <prvInitialiseTaskLists+0x80>)
   15d5e:	0018      	movs	r0, r3
   15d60:	4b06      	ldr	r3, [pc, #24]	; (15d7c <prvInitialiseTaskLists+0x6c>)
   15d62:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   15d64:	4b0b      	ldr	r3, [pc, #44]	; (15d94 <prvInitialiseTaskLists+0x84>)
   15d66:	4a06      	ldr	r2, [pc, #24]	; (15d80 <prvInitialiseTaskLists+0x70>)
   15d68:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   15d6a:	4b0b      	ldr	r3, [pc, #44]	; (15d98 <prvInitialiseTaskLists+0x88>)
   15d6c:	4a05      	ldr	r2, [pc, #20]	; (15d84 <prvInitialiseTaskLists+0x74>)
   15d6e:	601a      	str	r2, [r3, #0]
}
   15d70:	46c0      	nop			; (mov r8, r8)
   15d72:	46bd      	mov	sp, r7
   15d74:	b002      	add	sp, #8
   15d76:	bd80      	pop	{r7, pc}
   15d78:	20002868 	.word	0x20002868
   15d7c:	000140c7 	.word	0x000140c7
   15d80:	200028cc 	.word	0x200028cc
   15d84:	200028e0 	.word	0x200028e0
   15d88:	200028fc 	.word	0x200028fc
   15d8c:	20002910 	.word	0x20002910
   15d90:	20002928 	.word	0x20002928
   15d94:	200028f4 	.word	0x200028f4
   15d98:	200028f8 	.word	0x200028f8

00015d9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   15d9c:	b580      	push	{r7, lr}
   15d9e:	b082      	sub	sp, #8
   15da0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   15da2:	e01a      	b.n	15dda <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   15da4:	4b11      	ldr	r3, [pc, #68]	; (15dec <prvCheckTasksWaitingTermination+0x50>)
   15da6:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   15da8:	4b11      	ldr	r3, [pc, #68]	; (15df0 <prvCheckTasksWaitingTermination+0x54>)
   15daa:	68db      	ldr	r3, [r3, #12]
   15dac:	68db      	ldr	r3, [r3, #12]
   15dae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   15db0:	687b      	ldr	r3, [r7, #4]
   15db2:	3304      	adds	r3, #4
   15db4:	0018      	movs	r0, r3
   15db6:	4b0f      	ldr	r3, [pc, #60]	; (15df4 <prvCheckTasksWaitingTermination+0x58>)
   15db8:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   15dba:	4b0f      	ldr	r3, [pc, #60]	; (15df8 <prvCheckTasksWaitingTermination+0x5c>)
   15dbc:	681b      	ldr	r3, [r3, #0]
   15dbe:	1e5a      	subs	r2, r3, #1
   15dc0:	4b0d      	ldr	r3, [pc, #52]	; (15df8 <prvCheckTasksWaitingTermination+0x5c>)
   15dc2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   15dc4:	4b0d      	ldr	r3, [pc, #52]	; (15dfc <prvCheckTasksWaitingTermination+0x60>)
   15dc6:	681b      	ldr	r3, [r3, #0]
   15dc8:	1e5a      	subs	r2, r3, #1
   15dca:	4b0c      	ldr	r3, [pc, #48]	; (15dfc <prvCheckTasksWaitingTermination+0x60>)
   15dcc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   15dce:	4b0c      	ldr	r3, [pc, #48]	; (15e00 <prvCheckTasksWaitingTermination+0x64>)
   15dd0:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   15dd2:	687b      	ldr	r3, [r7, #4]
   15dd4:	0018      	movs	r0, r3
   15dd6:	4b0b      	ldr	r3, [pc, #44]	; (15e04 <prvCheckTasksWaitingTermination+0x68>)
   15dd8:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   15dda:	4b08      	ldr	r3, [pc, #32]	; (15dfc <prvCheckTasksWaitingTermination+0x60>)
   15ddc:	681b      	ldr	r3, [r3, #0]
   15dde:	2b00      	cmp	r3, #0
   15de0:	d1e0      	bne.n	15da4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   15de2:	46c0      	nop			; (mov r8, r8)
   15de4:	46bd      	mov	sp, r7
   15de6:	b002      	add	sp, #8
   15de8:	bd80      	pop	{r7, pc}
   15dea:	46c0      	nop			; (mov r8, r8)
   15dec:	00014359 	.word	0x00014359
   15df0:	20002910 	.word	0x20002910
   15df4:	000141c9 	.word	0x000141c9
   15df8:	2000293c 	.word	0x2000293c
   15dfc:	20002924 	.word	0x20002924
   15e00:	0001437d 	.word	0x0001437d
   15e04:	00015e09 	.word	0x00015e09

00015e08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   15e08:	b580      	push	{r7, lr}
   15e0a:	b082      	sub	sp, #8
   15e0c:	af00      	add	r7, sp, #0
   15e0e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   15e10:	687b      	ldr	r3, [r7, #4]
   15e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   15e14:	0018      	movs	r0, r3
   15e16:	4b05      	ldr	r3, [pc, #20]	; (15e2c <prvDeleteTCB+0x24>)
   15e18:	4798      	blx	r3
			vPortFree( pxTCB );
   15e1a:	687b      	ldr	r3, [r7, #4]
   15e1c:	0018      	movs	r0, r3
   15e1e:	4b03      	ldr	r3, [pc, #12]	; (15e2c <prvDeleteTCB+0x24>)
   15e20:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   15e22:	46c0      	nop			; (mov r8, r8)
   15e24:	46bd      	mov	sp, r7
   15e26:	b002      	add	sp, #8
   15e28:	bd80      	pop	{r7, pc}
   15e2a:	46c0      	nop			; (mov r8, r8)
   15e2c:	00014531 	.word	0x00014531

00015e30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   15e30:	b580      	push	{r7, lr}
   15e32:	b082      	sub	sp, #8
   15e34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   15e36:	4b0e      	ldr	r3, [pc, #56]	; (15e70 <prvResetNextTaskUnblockTime+0x40>)
   15e38:	681b      	ldr	r3, [r3, #0]
   15e3a:	681b      	ldr	r3, [r3, #0]
   15e3c:	2b00      	cmp	r3, #0
   15e3e:	d101      	bne.n	15e44 <prvResetNextTaskUnblockTime+0x14>
   15e40:	2301      	movs	r3, #1
   15e42:	e000      	b.n	15e46 <prvResetNextTaskUnblockTime+0x16>
   15e44:	2300      	movs	r3, #0
   15e46:	2b00      	cmp	r3, #0
   15e48:	d004      	beq.n	15e54 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   15e4a:	4b0a      	ldr	r3, [pc, #40]	; (15e74 <prvResetNextTaskUnblockTime+0x44>)
   15e4c:	2201      	movs	r2, #1
   15e4e:	4252      	negs	r2, r2
   15e50:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   15e52:	e008      	b.n	15e66 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   15e54:	4b06      	ldr	r3, [pc, #24]	; (15e70 <prvResetNextTaskUnblockTime+0x40>)
   15e56:	681b      	ldr	r3, [r3, #0]
   15e58:	68db      	ldr	r3, [r3, #12]
   15e5a:	68db      	ldr	r3, [r3, #12]
   15e5c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   15e5e:	687b      	ldr	r3, [r7, #4]
   15e60:	685a      	ldr	r2, [r3, #4]
   15e62:	4b04      	ldr	r3, [pc, #16]	; (15e74 <prvResetNextTaskUnblockTime+0x44>)
   15e64:	601a      	str	r2, [r3, #0]
}
   15e66:	46c0      	nop			; (mov r8, r8)
   15e68:	46bd      	mov	sp, r7
   15e6a:	b002      	add	sp, #8
   15e6c:	bd80      	pop	{r7, pc}
   15e6e:	46c0      	nop			; (mov r8, r8)
   15e70:	200028f4 	.word	0x200028f4
   15e74:	2000295c 	.word	0x2000295c

00015e78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   15e78:	b580      	push	{r7, lr}
   15e7a:	b082      	sub	sp, #8
   15e7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   15e7e:	4b0a      	ldr	r3, [pc, #40]	; (15ea8 <xTaskGetSchedulerState+0x30>)
   15e80:	681b      	ldr	r3, [r3, #0]
   15e82:	2b00      	cmp	r3, #0
   15e84:	d102      	bne.n	15e8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   15e86:	2301      	movs	r3, #1
   15e88:	607b      	str	r3, [r7, #4]
   15e8a:	e008      	b.n	15e9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   15e8c:	4b07      	ldr	r3, [pc, #28]	; (15eac <xTaskGetSchedulerState+0x34>)
   15e8e:	681b      	ldr	r3, [r3, #0]
   15e90:	2b00      	cmp	r3, #0
   15e92:	d102      	bne.n	15e9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   15e94:	2302      	movs	r3, #2
   15e96:	607b      	str	r3, [r7, #4]
   15e98:	e001      	b.n	15e9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   15e9a:	2300      	movs	r3, #0
   15e9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   15e9e:	687b      	ldr	r3, [r7, #4]
	}
   15ea0:	0018      	movs	r0, r3
   15ea2:	46bd      	mov	sp, r7
   15ea4:	b002      	add	sp, #8
   15ea6:	bd80      	pop	{r7, pc}
   15ea8:	20002948 	.word	0x20002948
   15eac:	20002964 	.word	0x20002964

00015eb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   15eb0:	b580      	push	{r7, lr}
   15eb2:	b084      	sub	sp, #16
   15eb4:	af00      	add	r7, sp, #0
   15eb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   15eb8:	687b      	ldr	r3, [r7, #4]
   15eba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   15ebc:	2300      	movs	r3, #0
   15ebe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   15ec0:	687b      	ldr	r3, [r7, #4]
   15ec2:	2b00      	cmp	r3, #0
   15ec4:	d056      	beq.n	15f74 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   15ec6:	68bb      	ldr	r3, [r7, #8]
   15ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15eca:	4b2d      	ldr	r3, [pc, #180]	; (15f80 <xTaskPriorityInherit+0xd0>)
   15ecc:	681b      	ldr	r3, [r3, #0]
   15ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15ed0:	429a      	cmp	r2, r3
   15ed2:	d246      	bcs.n	15f62 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   15ed4:	68bb      	ldr	r3, [r7, #8]
   15ed6:	699b      	ldr	r3, [r3, #24]
   15ed8:	2b00      	cmp	r3, #0
   15eda:	db06      	blt.n	15eea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   15edc:	4b28      	ldr	r3, [pc, #160]	; (15f80 <xTaskPriorityInherit+0xd0>)
   15ede:	681b      	ldr	r3, [r3, #0]
   15ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15ee2:	2205      	movs	r2, #5
   15ee4:	1ad2      	subs	r2, r2, r3
   15ee6:	68bb      	ldr	r3, [r7, #8]
   15ee8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   15eea:	68bb      	ldr	r3, [r7, #8]
   15eec:	6959      	ldr	r1, [r3, #20]
   15eee:	68bb      	ldr	r3, [r7, #8]
   15ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15ef2:	0013      	movs	r3, r2
   15ef4:	009b      	lsls	r3, r3, #2
   15ef6:	189b      	adds	r3, r3, r2
   15ef8:	009b      	lsls	r3, r3, #2
   15efa:	4a22      	ldr	r2, [pc, #136]	; (15f84 <xTaskPriorityInherit+0xd4>)
   15efc:	189b      	adds	r3, r3, r2
   15efe:	4299      	cmp	r1, r3
   15f00:	d101      	bne.n	15f06 <xTaskPriorityInherit+0x56>
   15f02:	2301      	movs	r3, #1
   15f04:	e000      	b.n	15f08 <xTaskPriorityInherit+0x58>
   15f06:	2300      	movs	r3, #0
   15f08:	2b00      	cmp	r3, #0
   15f0a:	d022      	beq.n	15f52 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   15f0c:	68bb      	ldr	r3, [r7, #8]
   15f0e:	3304      	adds	r3, #4
   15f10:	0018      	movs	r0, r3
   15f12:	4b1d      	ldr	r3, [pc, #116]	; (15f88 <xTaskPriorityInherit+0xd8>)
   15f14:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   15f16:	4b1a      	ldr	r3, [pc, #104]	; (15f80 <xTaskPriorityInherit+0xd0>)
   15f18:	681b      	ldr	r3, [r3, #0]
   15f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15f1c:	68bb      	ldr	r3, [r7, #8]
   15f1e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   15f20:	68bb      	ldr	r3, [r7, #8]
   15f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15f24:	4b19      	ldr	r3, [pc, #100]	; (15f8c <xTaskPriorityInherit+0xdc>)
   15f26:	681b      	ldr	r3, [r3, #0]
   15f28:	429a      	cmp	r2, r3
   15f2a:	d903      	bls.n	15f34 <xTaskPriorityInherit+0x84>
   15f2c:	68bb      	ldr	r3, [r7, #8]
   15f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15f30:	4b16      	ldr	r3, [pc, #88]	; (15f8c <xTaskPriorityInherit+0xdc>)
   15f32:	601a      	str	r2, [r3, #0]
   15f34:	68bb      	ldr	r3, [r7, #8]
   15f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15f38:	0013      	movs	r3, r2
   15f3a:	009b      	lsls	r3, r3, #2
   15f3c:	189b      	adds	r3, r3, r2
   15f3e:	009b      	lsls	r3, r3, #2
   15f40:	4a10      	ldr	r2, [pc, #64]	; (15f84 <xTaskPriorityInherit+0xd4>)
   15f42:	189a      	adds	r2, r3, r2
   15f44:	68bb      	ldr	r3, [r7, #8]
   15f46:	3304      	adds	r3, #4
   15f48:	0019      	movs	r1, r3
   15f4a:	0010      	movs	r0, r2
   15f4c:	4b10      	ldr	r3, [pc, #64]	; (15f90 <xTaskPriorityInherit+0xe0>)
   15f4e:	4798      	blx	r3
   15f50:	e004      	b.n	15f5c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   15f52:	4b0b      	ldr	r3, [pc, #44]	; (15f80 <xTaskPriorityInherit+0xd0>)
   15f54:	681b      	ldr	r3, [r3, #0]
   15f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15f58:	68bb      	ldr	r3, [r7, #8]
   15f5a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   15f5c:	2301      	movs	r3, #1
   15f5e:	60fb      	str	r3, [r7, #12]
   15f60:	e008      	b.n	15f74 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   15f62:	68bb      	ldr	r3, [r7, #8]
   15f64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   15f66:	4b06      	ldr	r3, [pc, #24]	; (15f80 <xTaskPriorityInherit+0xd0>)
   15f68:	681b      	ldr	r3, [r3, #0]
   15f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15f6c:	429a      	cmp	r2, r3
   15f6e:	d201      	bcs.n	15f74 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   15f70:	2301      	movs	r3, #1
   15f72:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   15f74:	68fb      	ldr	r3, [r7, #12]
	}
   15f76:	0018      	movs	r0, r3
   15f78:	46bd      	mov	sp, r7
   15f7a:	b004      	add	sp, #16
   15f7c:	bd80      	pop	{r7, pc}
   15f7e:	46c0      	nop			; (mov r8, r8)
   15f80:	20002864 	.word	0x20002864
   15f84:	20002868 	.word	0x20002868
   15f88:	000141c9 	.word	0x000141c9
   15f8c:	20002944 	.word	0x20002944
   15f90:	00014119 	.word	0x00014119

00015f94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   15f94:	b580      	push	{r7, lr}
   15f96:	b084      	sub	sp, #16
   15f98:	af00      	add	r7, sp, #0
   15f9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   15f9c:	687b      	ldr	r3, [r7, #4]
   15f9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   15fa0:	2300      	movs	r3, #0
   15fa2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   15fa4:	687b      	ldr	r3, [r7, #4]
   15fa6:	2b00      	cmp	r3, #0
   15fa8:	d044      	beq.n	16034 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   15faa:	4b25      	ldr	r3, [pc, #148]	; (16040 <xTaskPriorityDisinherit+0xac>)
   15fac:	681b      	ldr	r3, [r3, #0]
   15fae:	68ba      	ldr	r2, [r7, #8]
   15fb0:	429a      	cmp	r2, r3
   15fb2:	d001      	beq.n	15fb8 <xTaskPriorityDisinherit+0x24>
   15fb4:	b672      	cpsid	i
   15fb6:	e7fe      	b.n	15fb6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
   15fb8:	68bb      	ldr	r3, [r7, #8]
   15fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15fbc:	2b00      	cmp	r3, #0
   15fbe:	d101      	bne.n	15fc4 <xTaskPriorityDisinherit+0x30>
   15fc0:	b672      	cpsid	i
   15fc2:	e7fe      	b.n	15fc2 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
   15fc4:	68bb      	ldr	r3, [r7, #8]
   15fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15fc8:	1e5a      	subs	r2, r3, #1
   15fca:	68bb      	ldr	r3, [r7, #8]
   15fcc:	641a      	str	r2, [r3, #64]	; 0x40

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   15fce:	68bb      	ldr	r3, [r7, #8]
   15fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15fd2:	68bb      	ldr	r3, [r7, #8]
   15fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   15fd6:	429a      	cmp	r2, r3
   15fd8:	d02c      	beq.n	16034 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   15fda:	68bb      	ldr	r3, [r7, #8]
   15fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15fde:	2b00      	cmp	r3, #0
   15fe0:	d128      	bne.n	16034 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   15fe2:	68bb      	ldr	r3, [r7, #8]
   15fe4:	3304      	adds	r3, #4
   15fe6:	0018      	movs	r0, r3
   15fe8:	4b16      	ldr	r3, [pc, #88]	; (16044 <xTaskPriorityDisinherit+0xb0>)
   15fea:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   15fec:	68bb      	ldr	r3, [r7, #8]
   15fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   15ff0:	68bb      	ldr	r3, [r7, #8]
   15ff2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   15ff4:	68bb      	ldr	r3, [r7, #8]
   15ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15ff8:	2205      	movs	r2, #5
   15ffa:	1ad2      	subs	r2, r2, r3
   15ffc:	68bb      	ldr	r3, [r7, #8]
   15ffe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   16000:	68bb      	ldr	r3, [r7, #8]
   16002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16004:	4b10      	ldr	r3, [pc, #64]	; (16048 <xTaskPriorityDisinherit+0xb4>)
   16006:	681b      	ldr	r3, [r3, #0]
   16008:	429a      	cmp	r2, r3
   1600a:	d903      	bls.n	16014 <xTaskPriorityDisinherit+0x80>
   1600c:	68bb      	ldr	r3, [r7, #8]
   1600e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16010:	4b0d      	ldr	r3, [pc, #52]	; (16048 <xTaskPriorityDisinherit+0xb4>)
   16012:	601a      	str	r2, [r3, #0]
   16014:	68bb      	ldr	r3, [r7, #8]
   16016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16018:	0013      	movs	r3, r2
   1601a:	009b      	lsls	r3, r3, #2
   1601c:	189b      	adds	r3, r3, r2
   1601e:	009b      	lsls	r3, r3, #2
   16020:	4a0a      	ldr	r2, [pc, #40]	; (1604c <xTaskPriorityDisinherit+0xb8>)
   16022:	189a      	adds	r2, r3, r2
   16024:	68bb      	ldr	r3, [r7, #8]
   16026:	3304      	adds	r3, #4
   16028:	0019      	movs	r1, r3
   1602a:	0010      	movs	r0, r2
   1602c:	4b08      	ldr	r3, [pc, #32]	; (16050 <xTaskPriorityDisinherit+0xbc>)
   1602e:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   16030:	2301      	movs	r3, #1
   16032:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   16034:	68fb      	ldr	r3, [r7, #12]
	}
   16036:	0018      	movs	r0, r3
   16038:	46bd      	mov	sp, r7
   1603a:	b004      	add	sp, #16
   1603c:	bd80      	pop	{r7, pc}
   1603e:	46c0      	nop			; (mov r8, r8)
   16040:	20002864 	.word	0x20002864
   16044:	000141c9 	.word	0x000141c9
   16048:	20002944 	.word	0x20002944
   1604c:	20002868 	.word	0x20002868
   16050:	00014119 	.word	0x00014119

00016054 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   16054:	b580      	push	{r7, lr}
   16056:	b086      	sub	sp, #24
   16058:	af00      	add	r7, sp, #0
   1605a:	6078      	str	r0, [r7, #4]
   1605c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1605e:	687b      	ldr	r3, [r7, #4]
   16060:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   16062:	2301      	movs	r3, #1
   16064:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   16066:	687b      	ldr	r3, [r7, #4]
   16068:	2b00      	cmp	r3, #0
   1606a:	d05d      	beq.n	16128 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1606c:	693b      	ldr	r3, [r7, #16]
   1606e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   16070:	2b00      	cmp	r3, #0
   16072:	d101      	bne.n	16078 <vTaskPriorityDisinheritAfterTimeout+0x24>
   16074:	b672      	cpsid	i
   16076:	e7fe      	b.n	16076 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   16078:	693b      	ldr	r3, [r7, #16]
   1607a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1607c:	683b      	ldr	r3, [r7, #0]
   1607e:	429a      	cmp	r2, r3
   16080:	d202      	bcs.n	16088 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   16082:	683b      	ldr	r3, [r7, #0]
   16084:	617b      	str	r3, [r7, #20]
   16086:	e002      	b.n	1608e <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   16088:	693b      	ldr	r3, [r7, #16]
   1608a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1608c:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1608e:	693b      	ldr	r3, [r7, #16]
   16090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16092:	697b      	ldr	r3, [r7, #20]
   16094:	429a      	cmp	r2, r3
   16096:	d047      	beq.n	16128 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   16098:	693b      	ldr	r3, [r7, #16]
   1609a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1609c:	68fb      	ldr	r3, [r7, #12]
   1609e:	429a      	cmp	r2, r3
   160a0:	d142      	bne.n	16128 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   160a2:	4b23      	ldr	r3, [pc, #140]	; (16130 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   160a4:	681b      	ldr	r3, [r3, #0]
   160a6:	693a      	ldr	r2, [r7, #16]
   160a8:	429a      	cmp	r2, r3
   160aa:	d101      	bne.n	160b0 <vTaskPriorityDisinheritAfterTimeout+0x5c>
   160ac:	b672      	cpsid	i
   160ae:	e7fe      	b.n	160ae <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   160b0:	693b      	ldr	r3, [r7, #16]
   160b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   160b4:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   160b6:	693b      	ldr	r3, [r7, #16]
   160b8:	697a      	ldr	r2, [r7, #20]
   160ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   160bc:	693b      	ldr	r3, [r7, #16]
   160be:	699b      	ldr	r3, [r3, #24]
   160c0:	2b00      	cmp	r3, #0
   160c2:	db04      	blt.n	160ce <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   160c4:	697b      	ldr	r3, [r7, #20]
   160c6:	2205      	movs	r2, #5
   160c8:	1ad2      	subs	r2, r2, r3
   160ca:	693b      	ldr	r3, [r7, #16]
   160cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   160ce:	693b      	ldr	r3, [r7, #16]
   160d0:	6959      	ldr	r1, [r3, #20]
   160d2:	68ba      	ldr	r2, [r7, #8]
   160d4:	0013      	movs	r3, r2
   160d6:	009b      	lsls	r3, r3, #2
   160d8:	189b      	adds	r3, r3, r2
   160da:	009b      	lsls	r3, r3, #2
   160dc:	4a15      	ldr	r2, [pc, #84]	; (16134 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   160de:	189b      	adds	r3, r3, r2
   160e0:	4299      	cmp	r1, r3
   160e2:	d101      	bne.n	160e8 <vTaskPriorityDisinheritAfterTimeout+0x94>
   160e4:	2301      	movs	r3, #1
   160e6:	e000      	b.n	160ea <vTaskPriorityDisinheritAfterTimeout+0x96>
   160e8:	2300      	movs	r3, #0
   160ea:	2b00      	cmp	r3, #0
   160ec:	d01c      	beq.n	16128 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   160ee:	693b      	ldr	r3, [r7, #16]
   160f0:	3304      	adds	r3, #4
   160f2:	0018      	movs	r0, r3
   160f4:	4b10      	ldr	r3, [pc, #64]	; (16138 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
   160f6:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   160f8:	693b      	ldr	r3, [r7, #16]
   160fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   160fc:	4b0f      	ldr	r3, [pc, #60]	; (1613c <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   160fe:	681b      	ldr	r3, [r3, #0]
   16100:	429a      	cmp	r2, r3
   16102:	d903      	bls.n	1610c <vTaskPriorityDisinheritAfterTimeout+0xb8>
   16104:	693b      	ldr	r3, [r7, #16]
   16106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16108:	4b0c      	ldr	r3, [pc, #48]	; (1613c <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   1610a:	601a      	str	r2, [r3, #0]
   1610c:	693b      	ldr	r3, [r7, #16]
   1610e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16110:	0013      	movs	r3, r2
   16112:	009b      	lsls	r3, r3, #2
   16114:	189b      	adds	r3, r3, r2
   16116:	009b      	lsls	r3, r3, #2
   16118:	4a06      	ldr	r2, [pc, #24]	; (16134 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   1611a:	189a      	adds	r2, r3, r2
   1611c:	693b      	ldr	r3, [r7, #16]
   1611e:	3304      	adds	r3, #4
   16120:	0019      	movs	r1, r3
   16122:	0010      	movs	r0, r2
   16124:	4b06      	ldr	r3, [pc, #24]	; (16140 <vTaskPriorityDisinheritAfterTimeout+0xec>)
   16126:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   16128:	46c0      	nop			; (mov r8, r8)
   1612a:	46bd      	mov	sp, r7
   1612c:	b006      	add	sp, #24
   1612e:	bd80      	pop	{r7, pc}
   16130:	20002864 	.word	0x20002864
   16134:	20002868 	.word	0x20002868
   16138:	000141c9 	.word	0x000141c9
   1613c:	20002944 	.word	0x20002944
   16140:	00014119 	.word	0x00014119

00016144 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   16144:	b580      	push	{r7, lr}
   16146:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   16148:	4b06      	ldr	r3, [pc, #24]	; (16164 <pvTaskIncrementMutexHeldCount+0x20>)
   1614a:	681b      	ldr	r3, [r3, #0]
   1614c:	2b00      	cmp	r3, #0
   1614e:	d004      	beq.n	1615a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   16150:	4b04      	ldr	r3, [pc, #16]	; (16164 <pvTaskIncrementMutexHeldCount+0x20>)
   16152:	681b      	ldr	r3, [r3, #0]
   16154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   16156:	3201      	adds	r2, #1
   16158:	641a      	str	r2, [r3, #64]	; 0x40
		}

		return pxCurrentTCB;
   1615a:	4b02      	ldr	r3, [pc, #8]	; (16164 <pvTaskIncrementMutexHeldCount+0x20>)
   1615c:	681b      	ldr	r3, [r3, #0]
	}
   1615e:	0018      	movs	r0, r3
   16160:	46bd      	mov	sp, r7
   16162:	bd80      	pop	{r7, pc}
   16164:	20002864 	.word	0x20002864

00016168 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   16168:	b580      	push	{r7, lr}
   1616a:	b084      	sub	sp, #16
   1616c:	af00      	add	r7, sp, #0
   1616e:	6078      	str	r0, [r7, #4]
   16170:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   16172:	4b21      	ldr	r3, [pc, #132]	; (161f8 <prvAddCurrentTaskToDelayedList+0x90>)
   16174:	681b      	ldr	r3, [r3, #0]
   16176:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   16178:	4b20      	ldr	r3, [pc, #128]	; (161fc <prvAddCurrentTaskToDelayedList+0x94>)
   1617a:	681b      	ldr	r3, [r3, #0]
   1617c:	3304      	adds	r3, #4
   1617e:	0018      	movs	r0, r3
   16180:	4b1f      	ldr	r3, [pc, #124]	; (16200 <prvAddCurrentTaskToDelayedList+0x98>)
   16182:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   16184:	687b      	ldr	r3, [r7, #4]
   16186:	3301      	adds	r3, #1
   16188:	d10b      	bne.n	161a2 <prvAddCurrentTaskToDelayedList+0x3a>
   1618a:	683b      	ldr	r3, [r7, #0]
   1618c:	2b00      	cmp	r3, #0
   1618e:	d008      	beq.n	161a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   16190:	4b1a      	ldr	r3, [pc, #104]	; (161fc <prvAddCurrentTaskToDelayedList+0x94>)
   16192:	681b      	ldr	r3, [r3, #0]
   16194:	1d1a      	adds	r2, r3, #4
   16196:	4b1b      	ldr	r3, [pc, #108]	; (16204 <prvAddCurrentTaskToDelayedList+0x9c>)
   16198:	0011      	movs	r1, r2
   1619a:	0018      	movs	r0, r3
   1619c:	4b1a      	ldr	r3, [pc, #104]	; (16208 <prvAddCurrentTaskToDelayedList+0xa0>)
   1619e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   161a0:	e026      	b.n	161f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   161a2:	68fa      	ldr	r2, [r7, #12]
   161a4:	687b      	ldr	r3, [r7, #4]
   161a6:	18d3      	adds	r3, r2, r3
   161a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   161aa:	4b14      	ldr	r3, [pc, #80]	; (161fc <prvAddCurrentTaskToDelayedList+0x94>)
   161ac:	681b      	ldr	r3, [r3, #0]
   161ae:	68ba      	ldr	r2, [r7, #8]
   161b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   161b2:	68ba      	ldr	r2, [r7, #8]
   161b4:	68fb      	ldr	r3, [r7, #12]
   161b6:	429a      	cmp	r2, r3
   161b8:	d209      	bcs.n	161ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   161ba:	4b14      	ldr	r3, [pc, #80]	; (1620c <prvAddCurrentTaskToDelayedList+0xa4>)
   161bc:	681a      	ldr	r2, [r3, #0]
   161be:	4b0f      	ldr	r3, [pc, #60]	; (161fc <prvAddCurrentTaskToDelayedList+0x94>)
   161c0:	681b      	ldr	r3, [r3, #0]
   161c2:	3304      	adds	r3, #4
   161c4:	0019      	movs	r1, r3
   161c6:	0010      	movs	r0, r2
   161c8:	4b11      	ldr	r3, [pc, #68]	; (16210 <prvAddCurrentTaskToDelayedList+0xa8>)
   161ca:	4798      	blx	r3
}
   161cc:	e010      	b.n	161f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   161ce:	4b11      	ldr	r3, [pc, #68]	; (16214 <prvAddCurrentTaskToDelayedList+0xac>)
   161d0:	681a      	ldr	r2, [r3, #0]
   161d2:	4b0a      	ldr	r3, [pc, #40]	; (161fc <prvAddCurrentTaskToDelayedList+0x94>)
   161d4:	681b      	ldr	r3, [r3, #0]
   161d6:	3304      	adds	r3, #4
   161d8:	0019      	movs	r1, r3
   161da:	0010      	movs	r0, r2
   161dc:	4b0c      	ldr	r3, [pc, #48]	; (16210 <prvAddCurrentTaskToDelayedList+0xa8>)
   161de:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   161e0:	4b0d      	ldr	r3, [pc, #52]	; (16218 <prvAddCurrentTaskToDelayedList+0xb0>)
   161e2:	681b      	ldr	r3, [r3, #0]
   161e4:	68ba      	ldr	r2, [r7, #8]
   161e6:	429a      	cmp	r2, r3
   161e8:	d202      	bcs.n	161f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   161ea:	4b0b      	ldr	r3, [pc, #44]	; (16218 <prvAddCurrentTaskToDelayedList+0xb0>)
   161ec:	68ba      	ldr	r2, [r7, #8]
   161ee:	601a      	str	r2, [r3, #0]
}
   161f0:	46c0      	nop			; (mov r8, r8)
   161f2:	46bd      	mov	sp, r7
   161f4:	b004      	add	sp, #16
   161f6:	bd80      	pop	{r7, pc}
   161f8:	20002940 	.word	0x20002940
   161fc:	20002864 	.word	0x20002864
   16200:	000141c9 	.word	0x000141c9
   16204:	20002928 	.word	0x20002928
   16208:	00014119 	.word	0x00014119
   1620c:	200028f8 	.word	0x200028f8
   16210:	0001415d 	.word	0x0001415d
   16214:	200028f4 	.word	0x200028f4
   16218:	2000295c 	.word	0x2000295c

0001621c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1621c:	b590      	push	{r4, r7, lr}
   1621e:	b085      	sub	sp, #20
   16220:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   16222:	2300      	movs	r3, #0
   16224:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   16226:	4b0e      	ldr	r3, [pc, #56]	; (16260 <xTimerCreateTimerTask+0x44>)
   16228:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1622a:	4b0e      	ldr	r3, [pc, #56]	; (16264 <xTimerCreateTimerTask+0x48>)
   1622c:	681b      	ldr	r3, [r3, #0]
   1622e:	2b00      	cmp	r3, #0
   16230:	d00b      	beq.n	1624a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   16232:	490d      	ldr	r1, [pc, #52]	; (16268 <xTimerCreateTimerTask+0x4c>)
   16234:	480d      	ldr	r0, [pc, #52]	; (1626c <xTimerCreateTimerTask+0x50>)
   16236:	4b0e      	ldr	r3, [pc, #56]	; (16270 <xTimerCreateTimerTask+0x54>)
   16238:	9301      	str	r3, [sp, #4]
   1623a:	2302      	movs	r3, #2
   1623c:	9300      	str	r3, [sp, #0]
   1623e:	2300      	movs	r3, #0
   16240:	2280      	movs	r2, #128	; 0x80
   16242:	4c0c      	ldr	r4, [pc, #48]	; (16274 <xTimerCreateTimerTask+0x58>)
   16244:	47a0      	blx	r4
   16246:	0003      	movs	r3, r0
   16248:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1624a:	687b      	ldr	r3, [r7, #4]
   1624c:	2b00      	cmp	r3, #0
   1624e:	d101      	bne.n	16254 <xTimerCreateTimerTask+0x38>
   16250:	b672      	cpsid	i
   16252:	e7fe      	b.n	16252 <xTimerCreateTimerTask+0x36>
	return xReturn;
   16254:	687b      	ldr	r3, [r7, #4]
}
   16256:	0018      	movs	r0, r3
   16258:	46bd      	mov	sp, r7
   1625a:	b003      	add	sp, #12
   1625c:	bd90      	pop	{r4, r7, pc}
   1625e:	46c0      	nop			; (mov r8, r8)
   16260:	00016765 	.word	0x00016765
   16264:	20002998 	.word	0x20002998
   16268:	0001bf68 	.word	0x0001bf68
   1626c:	0001639d 	.word	0x0001639d
   16270:	2000299c 	.word	0x2000299c
   16274:	000152c1 	.word	0x000152c1

00016278 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   16278:	b590      	push	{r4, r7, lr}
   1627a:	b089      	sub	sp, #36	; 0x24
   1627c:	af00      	add	r7, sp, #0
   1627e:	60f8      	str	r0, [r7, #12]
   16280:	60b9      	str	r1, [r7, #8]
   16282:	607a      	str	r2, [r7, #4]
   16284:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   16286:	2300      	movs	r3, #0
   16288:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1628a:	68fb      	ldr	r3, [r7, #12]
   1628c:	2b00      	cmp	r3, #0
   1628e:	d101      	bne.n	16294 <xTimerGenericCommand+0x1c>
   16290:	b672      	cpsid	i
   16292:	e7fe      	b.n	16292 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   16294:	4b1e      	ldr	r3, [pc, #120]	; (16310 <xTimerGenericCommand+0x98>)
   16296:	681b      	ldr	r3, [r3, #0]
   16298:	2b00      	cmp	r3, #0
   1629a:	d033      	beq.n	16304 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1629c:	2310      	movs	r3, #16
   1629e:	18fb      	adds	r3, r7, r3
   162a0:	68ba      	ldr	r2, [r7, #8]
   162a2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   162a4:	2310      	movs	r3, #16
   162a6:	18fb      	adds	r3, r7, r3
   162a8:	687a      	ldr	r2, [r7, #4]
   162aa:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   162ac:	2310      	movs	r3, #16
   162ae:	18fb      	adds	r3, r7, r3
   162b0:	68fa      	ldr	r2, [r7, #12]
   162b2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   162b4:	68bb      	ldr	r3, [r7, #8]
   162b6:	2b05      	cmp	r3, #5
   162b8:	dc1a      	bgt.n	162f0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   162ba:	4b16      	ldr	r3, [pc, #88]	; (16314 <xTimerGenericCommand+0x9c>)
   162bc:	4798      	blx	r3
   162be:	0003      	movs	r3, r0
   162c0:	2b02      	cmp	r3, #2
   162c2:	d10a      	bne.n	162da <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   162c4:	4b12      	ldr	r3, [pc, #72]	; (16310 <xTimerGenericCommand+0x98>)
   162c6:	6818      	ldr	r0, [r3, #0]
   162c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   162ca:	2310      	movs	r3, #16
   162cc:	18f9      	adds	r1, r7, r3
   162ce:	2300      	movs	r3, #0
   162d0:	4c11      	ldr	r4, [pc, #68]	; (16318 <xTimerGenericCommand+0xa0>)
   162d2:	47a0      	blx	r4
   162d4:	0003      	movs	r3, r0
   162d6:	61fb      	str	r3, [r7, #28]
   162d8:	e014      	b.n	16304 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   162da:	4b0d      	ldr	r3, [pc, #52]	; (16310 <xTimerGenericCommand+0x98>)
   162dc:	6818      	ldr	r0, [r3, #0]
   162de:	2310      	movs	r3, #16
   162e0:	18f9      	adds	r1, r7, r3
   162e2:	2300      	movs	r3, #0
   162e4:	2200      	movs	r2, #0
   162e6:	4c0c      	ldr	r4, [pc, #48]	; (16318 <xTimerGenericCommand+0xa0>)
   162e8:	47a0      	blx	r4
   162ea:	0003      	movs	r3, r0
   162ec:	61fb      	str	r3, [r7, #28]
   162ee:	e009      	b.n	16304 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   162f0:	4b07      	ldr	r3, [pc, #28]	; (16310 <xTimerGenericCommand+0x98>)
   162f2:	6818      	ldr	r0, [r3, #0]
   162f4:	683a      	ldr	r2, [r7, #0]
   162f6:	2310      	movs	r3, #16
   162f8:	18f9      	adds	r1, r7, r3
   162fa:	2300      	movs	r3, #0
   162fc:	4c07      	ldr	r4, [pc, #28]	; (1631c <xTimerGenericCommand+0xa4>)
   162fe:	47a0      	blx	r4
   16300:	0003      	movs	r3, r0
   16302:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   16304:	69fb      	ldr	r3, [r7, #28]
}
   16306:	0018      	movs	r0, r3
   16308:	46bd      	mov	sp, r7
   1630a:	b009      	add	sp, #36	; 0x24
   1630c:	bd90      	pop	{r4, r7, pc}
   1630e:	46c0      	nop			; (mov r8, r8)
   16310:	20002998 	.word	0x20002998
   16314:	00015e79 	.word	0x00015e79
   16318:	00014759 	.word	0x00014759
   1631c:	00014939 	.word	0x00014939

00016320 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   16320:	b590      	push	{r4, r7, lr}
   16322:	b087      	sub	sp, #28
   16324:	af02      	add	r7, sp, #8
   16326:	6078      	str	r0, [r7, #4]
   16328:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1632a:	4b18      	ldr	r3, [pc, #96]	; (1638c <prvProcessExpiredTimer+0x6c>)
   1632c:	681b      	ldr	r3, [r3, #0]
   1632e:	68db      	ldr	r3, [r3, #12]
   16330:	68db      	ldr	r3, [r3, #12]
   16332:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   16334:	68fb      	ldr	r3, [r7, #12]
   16336:	3304      	adds	r3, #4
   16338:	0018      	movs	r0, r3
   1633a:	4b15      	ldr	r3, [pc, #84]	; (16390 <prvProcessExpiredTimer+0x70>)
   1633c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1633e:	68fb      	ldr	r3, [r7, #12]
   16340:	69db      	ldr	r3, [r3, #28]
   16342:	2b01      	cmp	r3, #1
   16344:	d119      	bne.n	1637a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   16346:	68fb      	ldr	r3, [r7, #12]
   16348:	699a      	ldr	r2, [r3, #24]
   1634a:	687b      	ldr	r3, [r7, #4]
   1634c:	18d1      	adds	r1, r2, r3
   1634e:	687b      	ldr	r3, [r7, #4]
   16350:	683a      	ldr	r2, [r7, #0]
   16352:	68f8      	ldr	r0, [r7, #12]
   16354:	4c0f      	ldr	r4, [pc, #60]	; (16394 <prvProcessExpiredTimer+0x74>)
   16356:	47a0      	blx	r4
   16358:	1e03      	subs	r3, r0, #0
   1635a:	d00e      	beq.n	1637a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1635c:	687a      	ldr	r2, [r7, #4]
   1635e:	68f8      	ldr	r0, [r7, #12]
   16360:	2300      	movs	r3, #0
   16362:	9300      	str	r3, [sp, #0]
   16364:	2300      	movs	r3, #0
   16366:	2100      	movs	r1, #0
   16368:	4c0b      	ldr	r4, [pc, #44]	; (16398 <prvProcessExpiredTimer+0x78>)
   1636a:	47a0      	blx	r4
   1636c:	0003      	movs	r3, r0
   1636e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   16370:	68bb      	ldr	r3, [r7, #8]
   16372:	2b00      	cmp	r3, #0
   16374:	d101      	bne.n	1637a <prvProcessExpiredTimer+0x5a>
   16376:	b672      	cpsid	i
   16378:	e7fe      	b.n	16378 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1637a:	68fb      	ldr	r3, [r7, #12]
   1637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1637e:	68fa      	ldr	r2, [r7, #12]
   16380:	0010      	movs	r0, r2
   16382:	4798      	blx	r3
}
   16384:	46c0      	nop			; (mov r8, r8)
   16386:	46bd      	mov	sp, r7
   16388:	b005      	add	sp, #20
   1638a:	bd90      	pop	{r4, r7, pc}
   1638c:	20002990 	.word	0x20002990
   16390:	000141c9 	.word	0x000141c9
   16394:	00016505 	.word	0x00016505
   16398:	00016279 	.word	0x00016279

0001639c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1639c:	b580      	push	{r7, lr}
   1639e:	b084      	sub	sp, #16
   163a0:	af00      	add	r7, sp, #0
   163a2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   163a4:	4b08      	ldr	r3, [pc, #32]	; (163c8 <prvTimerTask+0x2c>)
   163a6:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   163a8:	2308      	movs	r3, #8
   163aa:	18fb      	adds	r3, r7, r3
   163ac:	0018      	movs	r0, r3
   163ae:	4b07      	ldr	r3, [pc, #28]	; (163cc <prvTimerTask+0x30>)
   163b0:	4798      	blx	r3
   163b2:	0003      	movs	r3, r0
   163b4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   163b6:	68ba      	ldr	r2, [r7, #8]
   163b8:	68fb      	ldr	r3, [r7, #12]
   163ba:	0011      	movs	r1, r2
   163bc:	0018      	movs	r0, r3
   163be:	4b04      	ldr	r3, [pc, #16]	; (163d0 <prvTimerTask+0x34>)
   163c0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   163c2:	4b04      	ldr	r3, [pc, #16]	; (163d4 <prvTimerTask+0x38>)
   163c4:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   163c6:	e7ef      	b.n	163a8 <prvTimerTask+0xc>
   163c8:	00019979 	.word	0x00019979
   163cc:	0001647d 	.word	0x0001647d
   163d0:	000163d9 	.word	0x000163d9
   163d4:	0001658d 	.word	0x0001658d

000163d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   163d8:	b580      	push	{r7, lr}
   163da:	b084      	sub	sp, #16
   163dc:	af00      	add	r7, sp, #0
   163de:	6078      	str	r0, [r7, #4]
   163e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   163e2:	4b1e      	ldr	r3, [pc, #120]	; (1645c <prvProcessTimerOrBlockTask+0x84>)
   163e4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   163e6:	2308      	movs	r3, #8
   163e8:	18fb      	adds	r3, r7, r3
   163ea:	0018      	movs	r0, r3
   163ec:	4b1c      	ldr	r3, [pc, #112]	; (16460 <prvProcessTimerOrBlockTask+0x88>)
   163ee:	4798      	blx	r3
   163f0:	0003      	movs	r3, r0
   163f2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   163f4:	68bb      	ldr	r3, [r7, #8]
   163f6:	2b00      	cmp	r3, #0
   163f8:	d129      	bne.n	1644e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   163fa:	683b      	ldr	r3, [r7, #0]
   163fc:	2b00      	cmp	r3, #0
   163fe:	d10c      	bne.n	1641a <prvProcessTimerOrBlockTask+0x42>
   16400:	687a      	ldr	r2, [r7, #4]
   16402:	68fb      	ldr	r3, [r7, #12]
   16404:	429a      	cmp	r2, r3
   16406:	d808      	bhi.n	1641a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   16408:	4b16      	ldr	r3, [pc, #88]	; (16464 <prvProcessTimerOrBlockTask+0x8c>)
   1640a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1640c:	68fa      	ldr	r2, [r7, #12]
   1640e:	687b      	ldr	r3, [r7, #4]
   16410:	0011      	movs	r1, r2
   16412:	0018      	movs	r0, r3
   16414:	4b14      	ldr	r3, [pc, #80]	; (16468 <prvProcessTimerOrBlockTask+0x90>)
   16416:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   16418:	e01b      	b.n	16452 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1641a:	683b      	ldr	r3, [r7, #0]
   1641c:	2b00      	cmp	r3, #0
   1641e:	d006      	beq.n	1642e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   16420:	4b12      	ldr	r3, [pc, #72]	; (1646c <prvProcessTimerOrBlockTask+0x94>)
   16422:	681b      	ldr	r3, [r3, #0]
   16424:	681b      	ldr	r3, [r3, #0]
   16426:	425a      	negs	r2, r3
   16428:	4153      	adcs	r3, r2
   1642a:	b2db      	uxtb	r3, r3
   1642c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1642e:	4b10      	ldr	r3, [pc, #64]	; (16470 <prvProcessTimerOrBlockTask+0x98>)
   16430:	6818      	ldr	r0, [r3, #0]
   16432:	687a      	ldr	r2, [r7, #4]
   16434:	68fb      	ldr	r3, [r7, #12]
   16436:	1ad3      	subs	r3, r2, r3
   16438:	683a      	ldr	r2, [r7, #0]
   1643a:	0019      	movs	r1, r3
   1643c:	4b0d      	ldr	r3, [pc, #52]	; (16474 <prvProcessTimerOrBlockTask+0x9c>)
   1643e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   16440:	4b08      	ldr	r3, [pc, #32]	; (16464 <prvProcessTimerOrBlockTask+0x8c>)
   16442:	4798      	blx	r3
   16444:	1e03      	subs	r3, r0, #0
   16446:	d104      	bne.n	16452 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   16448:	4b0b      	ldr	r3, [pc, #44]	; (16478 <prvProcessTimerOrBlockTask+0xa0>)
   1644a:	4798      	blx	r3
}
   1644c:	e001      	b.n	16452 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1644e:	4b05      	ldr	r3, [pc, #20]	; (16464 <prvProcessTimerOrBlockTask+0x8c>)
   16450:	4798      	blx	r3
}
   16452:	46c0      	nop			; (mov r8, r8)
   16454:	46bd      	mov	sp, r7
   16456:	b004      	add	sp, #16
   16458:	bd80      	pop	{r7, pc}
   1645a:	46c0      	nop			; (mov r8, r8)
   1645c:	00015705 	.word	0x00015705
   16460:	000164bd 	.word	0x000164bd
   16464:	0001571d 	.word	0x0001571d
   16468:	00016321 	.word	0x00016321
   1646c:	20002994 	.word	0x20002994
   16470:	20002998 	.word	0x20002998
   16474:	000151a5 	.word	0x000151a5
   16478:	00014341 	.word	0x00014341

0001647c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1647c:	b580      	push	{r7, lr}
   1647e:	b084      	sub	sp, #16
   16480:	af00      	add	r7, sp, #0
   16482:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   16484:	4b0c      	ldr	r3, [pc, #48]	; (164b8 <prvGetNextExpireTime+0x3c>)
   16486:	681b      	ldr	r3, [r3, #0]
   16488:	681b      	ldr	r3, [r3, #0]
   1648a:	425a      	negs	r2, r3
   1648c:	4153      	adcs	r3, r2
   1648e:	b2db      	uxtb	r3, r3
   16490:	001a      	movs	r2, r3
   16492:	687b      	ldr	r3, [r7, #4]
   16494:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   16496:	687b      	ldr	r3, [r7, #4]
   16498:	681b      	ldr	r3, [r3, #0]
   1649a:	2b00      	cmp	r3, #0
   1649c:	d105      	bne.n	164aa <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1649e:	4b06      	ldr	r3, [pc, #24]	; (164b8 <prvGetNextExpireTime+0x3c>)
   164a0:	681b      	ldr	r3, [r3, #0]
   164a2:	68db      	ldr	r3, [r3, #12]
   164a4:	681b      	ldr	r3, [r3, #0]
   164a6:	60fb      	str	r3, [r7, #12]
   164a8:	e001      	b.n	164ae <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   164aa:	2300      	movs	r3, #0
   164ac:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   164ae:	68fb      	ldr	r3, [r7, #12]
}
   164b0:	0018      	movs	r0, r3
   164b2:	46bd      	mov	sp, r7
   164b4:	b004      	add	sp, #16
   164b6:	bd80      	pop	{r7, pc}
   164b8:	20002990 	.word	0x20002990

000164bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   164bc:	b580      	push	{r7, lr}
   164be:	b084      	sub	sp, #16
   164c0:	af00      	add	r7, sp, #0
   164c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   164c4:	4b0c      	ldr	r3, [pc, #48]	; (164f8 <prvSampleTimeNow+0x3c>)
   164c6:	4798      	blx	r3
   164c8:	0003      	movs	r3, r0
   164ca:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   164cc:	4b0b      	ldr	r3, [pc, #44]	; (164fc <prvSampleTimeNow+0x40>)
   164ce:	681b      	ldr	r3, [r3, #0]
   164d0:	68fa      	ldr	r2, [r7, #12]
   164d2:	429a      	cmp	r2, r3
   164d4:	d205      	bcs.n	164e2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   164d6:	4b0a      	ldr	r3, [pc, #40]	; (16500 <prvSampleTimeNow+0x44>)
   164d8:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   164da:	687b      	ldr	r3, [r7, #4]
   164dc:	2201      	movs	r2, #1
   164de:	601a      	str	r2, [r3, #0]
   164e0:	e002      	b.n	164e8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   164e2:	687b      	ldr	r3, [r7, #4]
   164e4:	2200      	movs	r2, #0
   164e6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   164e8:	4b04      	ldr	r3, [pc, #16]	; (164fc <prvSampleTimeNow+0x40>)
   164ea:	68fa      	ldr	r2, [r7, #12]
   164ec:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   164ee:	68fb      	ldr	r3, [r7, #12]
}
   164f0:	0018      	movs	r0, r3
   164f2:	46bd      	mov	sp, r7
   164f4:	b004      	add	sp, #16
   164f6:	bd80      	pop	{r7, pc}
   164f8:	00015851 	.word	0x00015851
   164fc:	200029a0 	.word	0x200029a0
   16500:	000166a5 	.word	0x000166a5

00016504 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   16504:	b580      	push	{r7, lr}
   16506:	b086      	sub	sp, #24
   16508:	af00      	add	r7, sp, #0
   1650a:	60f8      	str	r0, [r7, #12]
   1650c:	60b9      	str	r1, [r7, #8]
   1650e:	607a      	str	r2, [r7, #4]
   16510:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   16512:	2300      	movs	r3, #0
   16514:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   16516:	68fb      	ldr	r3, [r7, #12]
   16518:	68ba      	ldr	r2, [r7, #8]
   1651a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1651c:	68fb      	ldr	r3, [r7, #12]
   1651e:	68fa      	ldr	r2, [r7, #12]
   16520:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   16522:	68ba      	ldr	r2, [r7, #8]
   16524:	687b      	ldr	r3, [r7, #4]
   16526:	429a      	cmp	r2, r3
   16528:	d812      	bhi.n	16550 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1652a:	687a      	ldr	r2, [r7, #4]
   1652c:	683b      	ldr	r3, [r7, #0]
   1652e:	1ad2      	subs	r2, r2, r3
   16530:	68fb      	ldr	r3, [r7, #12]
   16532:	699b      	ldr	r3, [r3, #24]
   16534:	429a      	cmp	r2, r3
   16536:	d302      	bcc.n	1653e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   16538:	2301      	movs	r3, #1
   1653a:	617b      	str	r3, [r7, #20]
   1653c:	e01b      	b.n	16576 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1653e:	4b10      	ldr	r3, [pc, #64]	; (16580 <prvInsertTimerInActiveList+0x7c>)
   16540:	681a      	ldr	r2, [r3, #0]
   16542:	68fb      	ldr	r3, [r7, #12]
   16544:	3304      	adds	r3, #4
   16546:	0019      	movs	r1, r3
   16548:	0010      	movs	r0, r2
   1654a:	4b0e      	ldr	r3, [pc, #56]	; (16584 <prvInsertTimerInActiveList+0x80>)
   1654c:	4798      	blx	r3
   1654e:	e012      	b.n	16576 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   16550:	687a      	ldr	r2, [r7, #4]
   16552:	683b      	ldr	r3, [r7, #0]
   16554:	429a      	cmp	r2, r3
   16556:	d206      	bcs.n	16566 <prvInsertTimerInActiveList+0x62>
   16558:	68ba      	ldr	r2, [r7, #8]
   1655a:	683b      	ldr	r3, [r7, #0]
   1655c:	429a      	cmp	r2, r3
   1655e:	d302      	bcc.n	16566 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   16560:	2301      	movs	r3, #1
   16562:	617b      	str	r3, [r7, #20]
   16564:	e007      	b.n	16576 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   16566:	4b08      	ldr	r3, [pc, #32]	; (16588 <prvInsertTimerInActiveList+0x84>)
   16568:	681a      	ldr	r2, [r3, #0]
   1656a:	68fb      	ldr	r3, [r7, #12]
   1656c:	3304      	adds	r3, #4
   1656e:	0019      	movs	r1, r3
   16570:	0010      	movs	r0, r2
   16572:	4b04      	ldr	r3, [pc, #16]	; (16584 <prvInsertTimerInActiveList+0x80>)
   16574:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   16576:	697b      	ldr	r3, [r7, #20]
}
   16578:	0018      	movs	r0, r3
   1657a:	46bd      	mov	sp, r7
   1657c:	b006      	add	sp, #24
   1657e:	bd80      	pop	{r7, pc}
   16580:	20002994 	.word	0x20002994
   16584:	0001415d 	.word	0x0001415d
   16588:	20002990 	.word	0x20002990

0001658c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1658c:	b590      	push	{r4, r7, lr}
   1658e:	b08b      	sub	sp, #44	; 0x2c
   16590:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   16592:	e068      	b.n	16666 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   16594:	2308      	movs	r3, #8
   16596:	18fb      	adds	r3, r7, r3
   16598:	681b      	ldr	r3, [r3, #0]
   1659a:	2b00      	cmp	r3, #0
   1659c:	db63      	blt.n	16666 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1659e:	2308      	movs	r3, #8
   165a0:	18fb      	adds	r3, r7, r3
   165a2:	689b      	ldr	r3, [r3, #8]
   165a4:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   165a6:	69fb      	ldr	r3, [r7, #28]
   165a8:	695b      	ldr	r3, [r3, #20]
   165aa:	2b00      	cmp	r3, #0
   165ac:	d004      	beq.n	165b8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   165ae:	69fb      	ldr	r3, [r7, #28]
   165b0:	3304      	adds	r3, #4
   165b2:	0018      	movs	r0, r3
   165b4:	4b33      	ldr	r3, [pc, #204]	; (16684 <prvProcessReceivedCommands+0xf8>)
   165b6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   165b8:	1d3b      	adds	r3, r7, #4
   165ba:	0018      	movs	r0, r3
   165bc:	4b32      	ldr	r3, [pc, #200]	; (16688 <prvProcessReceivedCommands+0xfc>)
   165be:	4798      	blx	r3
   165c0:	0003      	movs	r3, r0
   165c2:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   165c4:	2308      	movs	r3, #8
   165c6:	18fb      	adds	r3, r7, r3
   165c8:	681b      	ldr	r3, [r3, #0]
   165ca:	2b09      	cmp	r3, #9
   165cc:	d84a      	bhi.n	16664 <prvProcessReceivedCommands+0xd8>
   165ce:	009a      	lsls	r2, r3, #2
   165d0:	4b2e      	ldr	r3, [pc, #184]	; (1668c <prvProcessReceivedCommands+0x100>)
   165d2:	18d3      	adds	r3, r2, r3
   165d4:	681b      	ldr	r3, [r3, #0]
   165d6:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   165d8:	2308      	movs	r3, #8
   165da:	18fb      	adds	r3, r7, r3
   165dc:	685a      	ldr	r2, [r3, #4]
   165de:	69fb      	ldr	r3, [r7, #28]
   165e0:	699b      	ldr	r3, [r3, #24]
   165e2:	18d1      	adds	r1, r2, r3
   165e4:	2308      	movs	r3, #8
   165e6:	18fb      	adds	r3, r7, r3
   165e8:	685b      	ldr	r3, [r3, #4]
   165ea:	69ba      	ldr	r2, [r7, #24]
   165ec:	69f8      	ldr	r0, [r7, #28]
   165ee:	4c28      	ldr	r4, [pc, #160]	; (16690 <prvProcessReceivedCommands+0x104>)
   165f0:	47a0      	blx	r4
   165f2:	1e03      	subs	r3, r0, #0
   165f4:	d037      	beq.n	16666 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   165f6:	69fb      	ldr	r3, [r7, #28]
   165f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   165fa:	69fa      	ldr	r2, [r7, #28]
   165fc:	0010      	movs	r0, r2
   165fe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   16600:	69fb      	ldr	r3, [r7, #28]
   16602:	69db      	ldr	r3, [r3, #28]
   16604:	2b01      	cmp	r3, #1
   16606:	d12e      	bne.n	16666 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   16608:	2308      	movs	r3, #8
   1660a:	18fb      	adds	r3, r7, r3
   1660c:	685a      	ldr	r2, [r3, #4]
   1660e:	69fb      	ldr	r3, [r7, #28]
   16610:	699b      	ldr	r3, [r3, #24]
   16612:	18d2      	adds	r2, r2, r3
   16614:	69f8      	ldr	r0, [r7, #28]
   16616:	2300      	movs	r3, #0
   16618:	9300      	str	r3, [sp, #0]
   1661a:	2300      	movs	r3, #0
   1661c:	2100      	movs	r1, #0
   1661e:	4c1d      	ldr	r4, [pc, #116]	; (16694 <prvProcessReceivedCommands+0x108>)
   16620:	47a0      	blx	r4
   16622:	0003      	movs	r3, r0
   16624:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   16626:	697b      	ldr	r3, [r7, #20]
   16628:	2b00      	cmp	r3, #0
   1662a:	d11c      	bne.n	16666 <prvProcessReceivedCommands+0xda>
   1662c:	b672      	cpsid	i
   1662e:	e7fe      	b.n	1662e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   16630:	2308      	movs	r3, #8
   16632:	18fb      	adds	r3, r7, r3
   16634:	685a      	ldr	r2, [r3, #4]
   16636:	69fb      	ldr	r3, [r7, #28]
   16638:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1663a:	69fb      	ldr	r3, [r7, #28]
   1663c:	699b      	ldr	r3, [r3, #24]
   1663e:	2b00      	cmp	r3, #0
   16640:	d101      	bne.n	16646 <prvProcessReceivedCommands+0xba>
   16642:	b672      	cpsid	i
   16644:	e7fe      	b.n	16644 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   16646:	69fb      	ldr	r3, [r7, #28]
   16648:	699a      	ldr	r2, [r3, #24]
   1664a:	69bb      	ldr	r3, [r7, #24]
   1664c:	18d1      	adds	r1, r2, r3
   1664e:	69bb      	ldr	r3, [r7, #24]
   16650:	69ba      	ldr	r2, [r7, #24]
   16652:	69f8      	ldr	r0, [r7, #28]
   16654:	4c0e      	ldr	r4, [pc, #56]	; (16690 <prvProcessReceivedCommands+0x104>)
   16656:	47a0      	blx	r4
					break;
   16658:	e005      	b.n	16666 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1665a:	69fb      	ldr	r3, [r7, #28]
   1665c:	0018      	movs	r0, r3
   1665e:	4b0e      	ldr	r3, [pc, #56]	; (16698 <prvProcessReceivedCommands+0x10c>)
   16660:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   16662:	e000      	b.n	16666 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   16664:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   16666:	4b0d      	ldr	r3, [pc, #52]	; (1669c <prvProcessReceivedCommands+0x110>)
   16668:	681b      	ldr	r3, [r3, #0]
   1666a:	2208      	movs	r2, #8
   1666c:	18b9      	adds	r1, r7, r2
   1666e:	2200      	movs	r2, #0
   16670:	0018      	movs	r0, r3
   16672:	4b0b      	ldr	r3, [pc, #44]	; (166a0 <prvProcessReceivedCommands+0x114>)
   16674:	4798      	blx	r3
   16676:	1e03      	subs	r3, r0, #0
   16678:	d18c      	bne.n	16594 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1667a:	46c0      	nop			; (mov r8, r8)
   1667c:	46bd      	mov	sp, r7
   1667e:	b009      	add	sp, #36	; 0x24
   16680:	bd90      	pop	{r4, r7, pc}
   16682:	46c0      	nop			; (mov r8, r8)
   16684:	000141c9 	.word	0x000141c9
   16688:	000164bd 	.word	0x000164bd
   1668c:	0001bf70 	.word	0x0001bf70
   16690:	00016505 	.word	0x00016505
   16694:	00016279 	.word	0x00016279
   16698:	00014531 	.word	0x00014531
   1669c:	20002998 	.word	0x20002998
   166a0:	00014b59 	.word	0x00014b59

000166a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   166a4:	b590      	push	{r4, r7, lr}
   166a6:	b089      	sub	sp, #36	; 0x24
   166a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   166aa:	e03e      	b.n	1672a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   166ac:	4b28      	ldr	r3, [pc, #160]	; (16750 <prvSwitchTimerLists+0xac>)
   166ae:	681b      	ldr	r3, [r3, #0]
   166b0:	68db      	ldr	r3, [r3, #12]
   166b2:	681b      	ldr	r3, [r3, #0]
   166b4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   166b6:	4b26      	ldr	r3, [pc, #152]	; (16750 <prvSwitchTimerLists+0xac>)
   166b8:	681b      	ldr	r3, [r3, #0]
   166ba:	68db      	ldr	r3, [r3, #12]
   166bc:	68db      	ldr	r3, [r3, #12]
   166be:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   166c0:	693b      	ldr	r3, [r7, #16]
   166c2:	3304      	adds	r3, #4
   166c4:	0018      	movs	r0, r3
   166c6:	4b23      	ldr	r3, [pc, #140]	; (16754 <prvSwitchTimerLists+0xb0>)
   166c8:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   166ca:	693b      	ldr	r3, [r7, #16]
   166cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   166ce:	693a      	ldr	r2, [r7, #16]
   166d0:	0010      	movs	r0, r2
   166d2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   166d4:	693b      	ldr	r3, [r7, #16]
   166d6:	69db      	ldr	r3, [r3, #28]
   166d8:	2b01      	cmp	r3, #1
   166da:	d126      	bne.n	1672a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   166dc:	693b      	ldr	r3, [r7, #16]
   166de:	699a      	ldr	r2, [r3, #24]
   166e0:	697b      	ldr	r3, [r7, #20]
   166e2:	18d3      	adds	r3, r2, r3
   166e4:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   166e6:	68fa      	ldr	r2, [r7, #12]
   166e8:	697b      	ldr	r3, [r7, #20]
   166ea:	429a      	cmp	r2, r3
   166ec:	d90e      	bls.n	1670c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   166ee:	693b      	ldr	r3, [r7, #16]
   166f0:	68fa      	ldr	r2, [r7, #12]
   166f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   166f4:	693b      	ldr	r3, [r7, #16]
   166f6:	693a      	ldr	r2, [r7, #16]
   166f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   166fa:	4b15      	ldr	r3, [pc, #84]	; (16750 <prvSwitchTimerLists+0xac>)
   166fc:	681a      	ldr	r2, [r3, #0]
   166fe:	693b      	ldr	r3, [r7, #16]
   16700:	3304      	adds	r3, #4
   16702:	0019      	movs	r1, r3
   16704:	0010      	movs	r0, r2
   16706:	4b14      	ldr	r3, [pc, #80]	; (16758 <prvSwitchTimerLists+0xb4>)
   16708:	4798      	blx	r3
   1670a:	e00e      	b.n	1672a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1670c:	697a      	ldr	r2, [r7, #20]
   1670e:	6938      	ldr	r0, [r7, #16]
   16710:	2300      	movs	r3, #0
   16712:	9300      	str	r3, [sp, #0]
   16714:	2300      	movs	r3, #0
   16716:	2100      	movs	r1, #0
   16718:	4c10      	ldr	r4, [pc, #64]	; (1675c <prvSwitchTimerLists+0xb8>)
   1671a:	47a0      	blx	r4
   1671c:	0003      	movs	r3, r0
   1671e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   16720:	68bb      	ldr	r3, [r7, #8]
   16722:	2b00      	cmp	r3, #0
   16724:	d101      	bne.n	1672a <prvSwitchTimerLists+0x86>
   16726:	b672      	cpsid	i
   16728:	e7fe      	b.n	16728 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1672a:	4b09      	ldr	r3, [pc, #36]	; (16750 <prvSwitchTimerLists+0xac>)
   1672c:	681b      	ldr	r3, [r3, #0]
   1672e:	681b      	ldr	r3, [r3, #0]
   16730:	2b00      	cmp	r3, #0
   16732:	d1bb      	bne.n	166ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   16734:	4b06      	ldr	r3, [pc, #24]	; (16750 <prvSwitchTimerLists+0xac>)
   16736:	681b      	ldr	r3, [r3, #0]
   16738:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1673a:	4b09      	ldr	r3, [pc, #36]	; (16760 <prvSwitchTimerLists+0xbc>)
   1673c:	681a      	ldr	r2, [r3, #0]
   1673e:	4b04      	ldr	r3, [pc, #16]	; (16750 <prvSwitchTimerLists+0xac>)
   16740:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   16742:	4b07      	ldr	r3, [pc, #28]	; (16760 <prvSwitchTimerLists+0xbc>)
   16744:	687a      	ldr	r2, [r7, #4]
   16746:	601a      	str	r2, [r3, #0]
}
   16748:	46c0      	nop			; (mov r8, r8)
   1674a:	46bd      	mov	sp, r7
   1674c:	b007      	add	sp, #28
   1674e:	bd90      	pop	{r4, r7, pc}
   16750:	20002990 	.word	0x20002990
   16754:	000141c9 	.word	0x000141c9
   16758:	0001415d 	.word	0x0001415d
   1675c:	00016279 	.word	0x00016279
   16760:	20002994 	.word	0x20002994

00016764 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   16764:	b580      	push	{r7, lr}
   16766:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   16768:	4b10      	ldr	r3, [pc, #64]	; (167ac <prvCheckForValidListAndQueue+0x48>)
   1676a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1676c:	4b10      	ldr	r3, [pc, #64]	; (167b0 <prvCheckForValidListAndQueue+0x4c>)
   1676e:	681b      	ldr	r3, [r3, #0]
   16770:	2b00      	cmp	r3, #0
   16772:	d115      	bne.n	167a0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   16774:	4b0f      	ldr	r3, [pc, #60]	; (167b4 <prvCheckForValidListAndQueue+0x50>)
   16776:	0018      	movs	r0, r3
   16778:	4b0f      	ldr	r3, [pc, #60]	; (167b8 <prvCheckForValidListAndQueue+0x54>)
   1677a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1677c:	4b0f      	ldr	r3, [pc, #60]	; (167bc <prvCheckForValidListAndQueue+0x58>)
   1677e:	0018      	movs	r0, r3
   16780:	4b0d      	ldr	r3, [pc, #52]	; (167b8 <prvCheckForValidListAndQueue+0x54>)
   16782:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   16784:	4b0e      	ldr	r3, [pc, #56]	; (167c0 <prvCheckForValidListAndQueue+0x5c>)
   16786:	4a0b      	ldr	r2, [pc, #44]	; (167b4 <prvCheckForValidListAndQueue+0x50>)
   16788:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1678a:	4b0e      	ldr	r3, [pc, #56]	; (167c4 <prvCheckForValidListAndQueue+0x60>)
   1678c:	4a0b      	ldr	r2, [pc, #44]	; (167bc <prvCheckForValidListAndQueue+0x58>)
   1678e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   16790:	2200      	movs	r2, #0
   16792:	210c      	movs	r1, #12
   16794:	2002      	movs	r0, #2
   16796:	4b0c      	ldr	r3, [pc, #48]	; (167c8 <prvCheckForValidListAndQueue+0x64>)
   16798:	4798      	blx	r3
   1679a:	0002      	movs	r2, r0
   1679c:	4b04      	ldr	r3, [pc, #16]	; (167b0 <prvCheckForValidListAndQueue+0x4c>)
   1679e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   167a0:	4b0a      	ldr	r3, [pc, #40]	; (167cc <prvCheckForValidListAndQueue+0x68>)
   167a2:	4798      	blx	r3
}
   167a4:	46c0      	nop			; (mov r8, r8)
   167a6:	46bd      	mov	sp, r7
   167a8:	bd80      	pop	{r7, pc}
   167aa:	46c0      	nop			; (mov r8, r8)
   167ac:	00014359 	.word	0x00014359
   167b0:	20002998 	.word	0x20002998
   167b4:	20002968 	.word	0x20002968
   167b8:	000140c7 	.word	0x000140c7
   167bc:	2000297c 	.word	0x2000297c
   167c0:	20002990 	.word	0x20002990
   167c4:	20002994 	.word	0x20002994
   167c8:	00014625 	.word	0x00014625
   167cc:	0001437d 	.word	0x0001437d

000167d0 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   167d0:	b580      	push	{r7, lr}
   167d2:	b082      	sub	sp, #8
   167d4:	af00      	add	r7, sp, #0
   167d6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   167d8:	687b      	ldr	r3, [r7, #4]
   167da:	7c1b      	ldrb	r3, [r3, #16]
   167dc:	2b00      	cmp	r3, #0
   167de:	d00b      	beq.n	167f8 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   167e0:	687b      	ldr	r3, [r7, #4]
   167e2:	689b      	ldr	r3, [r3, #8]
   167e4:	1c5a      	adds	r2, r3, #1
   167e6:	687b      	ldr	r3, [r7, #4]
   167e8:	68d9      	ldr	r1, [r3, #12]
   167ea:	4b10      	ldr	r3, [pc, #64]	; (1682c <advance_pointer+0x5c>)
   167ec:	0010      	movs	r0, r2
   167ee:	4798      	blx	r3
   167f0:	000b      	movs	r3, r1
   167f2:	001a      	movs	r2, r3
   167f4:	687b      	ldr	r3, [r7, #4]
   167f6:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   167f8:	687b      	ldr	r3, [r7, #4]
   167fa:	685b      	ldr	r3, [r3, #4]
   167fc:	1c5a      	adds	r2, r3, #1
   167fe:	687b      	ldr	r3, [r7, #4]
   16800:	68d9      	ldr	r1, [r3, #12]
   16802:	4b0a      	ldr	r3, [pc, #40]	; (1682c <advance_pointer+0x5c>)
   16804:	0010      	movs	r0, r2
   16806:	4798      	blx	r3
   16808:	000b      	movs	r3, r1
   1680a:	001a      	movs	r2, r3
   1680c:	687b      	ldr	r3, [r7, #4]
   1680e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   16810:	687b      	ldr	r3, [r7, #4]
   16812:	685a      	ldr	r2, [r3, #4]
   16814:	687b      	ldr	r3, [r7, #4]
   16816:	689b      	ldr	r3, [r3, #8]
   16818:	1ad3      	subs	r3, r2, r3
   1681a:	425a      	negs	r2, r3
   1681c:	4153      	adcs	r3, r2
   1681e:	b2da      	uxtb	r2, r3
   16820:	687b      	ldr	r3, [r7, #4]
   16822:	741a      	strb	r2, [r3, #16]
 }
   16824:	46c0      	nop			; (mov r8, r8)
   16826:	46bd      	mov	sp, r7
   16828:	b002      	add	sp, #8
   1682a:	bd80      	pop	{r7, pc}
   1682c:	00019bb9 	.word	0x00019bb9

00016830 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   16830:	b580      	push	{r7, lr}
   16832:	b082      	sub	sp, #8
   16834:	af00      	add	r7, sp, #0
   16836:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   16838:	687b      	ldr	r3, [r7, #4]
   1683a:	2200      	movs	r2, #0
   1683c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1683e:	687b      	ldr	r3, [r7, #4]
   16840:	689b      	ldr	r3, [r3, #8]
   16842:	1c5a      	adds	r2, r3, #1
   16844:	687b      	ldr	r3, [r7, #4]
   16846:	68d9      	ldr	r1, [r3, #12]
   16848:	4b05      	ldr	r3, [pc, #20]	; (16860 <retreat_pointer+0x30>)
   1684a:	0010      	movs	r0, r2
   1684c:	4798      	blx	r3
   1684e:	000b      	movs	r3, r1
   16850:	001a      	movs	r2, r3
   16852:	687b      	ldr	r3, [r7, #4]
   16854:	609a      	str	r2, [r3, #8]
 }
   16856:	46c0      	nop			; (mov r8, r8)
   16858:	46bd      	mov	sp, r7
   1685a:	b002      	add	sp, #8
   1685c:	bd80      	pop	{r7, pc}
   1685e:	46c0      	nop			; (mov r8, r8)
   16860:	00019bb9 	.word	0x00019bb9

00016864 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   16864:	b580      	push	{r7, lr}
   16866:	b084      	sub	sp, #16
   16868:	af00      	add	r7, sp, #0
   1686a:	6078      	str	r0, [r7, #4]
   1686c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1686e:	2014      	movs	r0, #20
   16870:	4b09      	ldr	r3, [pc, #36]	; (16898 <circular_buf_init+0x34>)
   16872:	4798      	blx	r3
   16874:	0003      	movs	r3, r0
   16876:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   16878:	68fb      	ldr	r3, [r7, #12]
   1687a:	687a      	ldr	r2, [r7, #4]
   1687c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1687e:	68fb      	ldr	r3, [r7, #12]
   16880:	683a      	ldr	r2, [r7, #0]
   16882:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   16884:	68fb      	ldr	r3, [r7, #12]
   16886:	0018      	movs	r0, r3
   16888:	4b04      	ldr	r3, [pc, #16]	; (1689c <circular_buf_init+0x38>)
   1688a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1688c:	68fb      	ldr	r3, [r7, #12]
 }
   1688e:	0018      	movs	r0, r3
   16890:	46bd      	mov	sp, r7
   16892:	b004      	add	sp, #16
   16894:	bd80      	pop	{r7, pc}
   16896:	46c0      	nop			; (mov r8, r8)
   16898:	0001b529 	.word	0x0001b529
   1689c:	000168a1 	.word	0x000168a1

000168a0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   168a0:	b580      	push	{r7, lr}
   168a2:	b082      	sub	sp, #8
   168a4:	af00      	add	r7, sp, #0
   168a6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   168a8:	687b      	ldr	r3, [r7, #4]
   168aa:	2200      	movs	r2, #0
   168ac:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   168ae:	687b      	ldr	r3, [r7, #4]
   168b0:	2200      	movs	r2, #0
   168b2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   168b4:	687b      	ldr	r3, [r7, #4]
   168b6:	2200      	movs	r2, #0
   168b8:	741a      	strb	r2, [r3, #16]
 }
   168ba:	46c0      	nop			; (mov r8, r8)
   168bc:	46bd      	mov	sp, r7
   168be:	b002      	add	sp, #8
   168c0:	bd80      	pop	{r7, pc}
	...

000168c4 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   168c4:	b580      	push	{r7, lr}
   168c6:	b082      	sub	sp, #8
   168c8:	af00      	add	r7, sp, #0
   168ca:	6078      	str	r0, [r7, #4]
   168cc:	000a      	movs	r2, r1
   168ce:	1cfb      	adds	r3, r7, #3
   168d0:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   168d2:	687b      	ldr	r3, [r7, #4]
   168d4:	681a      	ldr	r2, [r3, #0]
   168d6:	687b      	ldr	r3, [r7, #4]
   168d8:	685b      	ldr	r3, [r3, #4]
   168da:	18d3      	adds	r3, r2, r3
   168dc:	1cfa      	adds	r2, r7, #3
   168de:	7812      	ldrb	r2, [r2, #0]
   168e0:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   168e2:	687b      	ldr	r3, [r7, #4]
   168e4:	0018      	movs	r0, r3
   168e6:	4b03      	ldr	r3, [pc, #12]	; (168f4 <circular_buf_put+0x30>)
   168e8:	4798      	blx	r3
 }
   168ea:	46c0      	nop			; (mov r8, r8)
   168ec:	46bd      	mov	sp, r7
   168ee:	b002      	add	sp, #8
   168f0:	bd80      	pop	{r7, pc}
   168f2:	46c0      	nop			; (mov r8, r8)
   168f4:	000167d1 	.word	0x000167d1

000168f8 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   168f8:	b580      	push	{r7, lr}
   168fa:	b084      	sub	sp, #16
   168fc:	af00      	add	r7, sp, #0
   168fe:	6078      	str	r0, [r7, #4]
   16900:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   16902:	2301      	movs	r3, #1
   16904:	425b      	negs	r3, r3
   16906:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   16908:	687b      	ldr	r3, [r7, #4]
   1690a:	0018      	movs	r0, r3
   1690c:	4b0d      	ldr	r3, [pc, #52]	; (16944 <circular_buf_get+0x4c>)
   1690e:	4798      	blx	r3
   16910:	0003      	movs	r3, r0
   16912:	001a      	movs	r2, r3
   16914:	2301      	movs	r3, #1
   16916:	4053      	eors	r3, r2
   16918:	b2db      	uxtb	r3, r3
   1691a:	2b00      	cmp	r3, #0
   1691c:	d00d      	beq.n	1693a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1691e:	687b      	ldr	r3, [r7, #4]
   16920:	681a      	ldr	r2, [r3, #0]
   16922:	687b      	ldr	r3, [r7, #4]
   16924:	689b      	ldr	r3, [r3, #8]
   16926:	18d3      	adds	r3, r2, r3
   16928:	781a      	ldrb	r2, [r3, #0]
   1692a:	683b      	ldr	r3, [r7, #0]
   1692c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1692e:	687b      	ldr	r3, [r7, #4]
   16930:	0018      	movs	r0, r3
   16932:	4b05      	ldr	r3, [pc, #20]	; (16948 <circular_buf_get+0x50>)
   16934:	4798      	blx	r3

		 r = 0;
   16936:	2300      	movs	r3, #0
   16938:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1693a:	68fb      	ldr	r3, [r7, #12]
 }
   1693c:	0018      	movs	r0, r3
   1693e:	46bd      	mov	sp, r7
   16940:	b004      	add	sp, #16
   16942:	bd80      	pop	{r7, pc}
   16944:	0001694d 	.word	0x0001694d
   16948:	00016831 	.word	0x00016831

0001694c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1694c:	b580      	push	{r7, lr}
   1694e:	b082      	sub	sp, #8
   16950:	af00      	add	r7, sp, #0
   16952:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   16954:	687b      	ldr	r3, [r7, #4]
   16956:	7c1b      	ldrb	r3, [r3, #16]
   16958:	2201      	movs	r2, #1
   1695a:	4053      	eors	r3, r2
   1695c:	b2db      	uxtb	r3, r3
   1695e:	2b00      	cmp	r3, #0
   16960:	d007      	beq.n	16972 <circular_buf_empty+0x26>
   16962:	687b      	ldr	r3, [r7, #4]
   16964:	685a      	ldr	r2, [r3, #4]
   16966:	687b      	ldr	r3, [r7, #4]
   16968:	689b      	ldr	r3, [r3, #8]
   1696a:	429a      	cmp	r2, r3
   1696c:	d101      	bne.n	16972 <circular_buf_empty+0x26>
   1696e:	2301      	movs	r3, #1
   16970:	e000      	b.n	16974 <circular_buf_empty+0x28>
   16972:	2300      	movs	r3, #0
   16974:	1c1a      	adds	r2, r3, #0
   16976:	2301      	movs	r3, #1
   16978:	4013      	ands	r3, r2
   1697a:	b2db      	uxtb	r3, r3
 }
   1697c:	0018      	movs	r0, r3
   1697e:	46bd      	mov	sp, r7
   16980:	b002      	add	sp, #8
   16982:	bd80      	pop	{r7, pc}

00016984 <system_interrupt_enable>:
{
   16984:	b580      	push	{r7, lr}
   16986:	b082      	sub	sp, #8
   16988:	af00      	add	r7, sp, #0
   1698a:	0002      	movs	r2, r0
   1698c:	1dfb      	adds	r3, r7, #7
   1698e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   16990:	4b06      	ldr	r3, [pc, #24]	; (169ac <system_interrupt_enable+0x28>)
   16992:	1dfa      	adds	r2, r7, #7
   16994:	7812      	ldrb	r2, [r2, #0]
   16996:	0011      	movs	r1, r2
   16998:	221f      	movs	r2, #31
   1699a:	400a      	ands	r2, r1
   1699c:	2101      	movs	r1, #1
   1699e:	4091      	lsls	r1, r2
   169a0:	000a      	movs	r2, r1
   169a2:	601a      	str	r2, [r3, #0]
}
   169a4:	46c0      	nop			; (mov r8, r8)
   169a6:	46bd      	mov	sp, r7
   169a8:	b002      	add	sp, #8
   169aa:	bd80      	pop	{r7, pc}
   169ac:	e000e100 	.word	0xe000e100

000169b0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   169b0:	b580      	push	{r7, lr}
   169b2:	b084      	sub	sp, #16
   169b4:	af00      	add	r7, sp, #0
   169b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   169b8:	687b      	ldr	r3, [r7, #4]
   169ba:	681b      	ldr	r3, [r3, #0]
   169bc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   169be:	68fb      	ldr	r3, [r7, #12]
   169c0:	69db      	ldr	r3, [r3, #28]
   169c2:	1e5a      	subs	r2, r3, #1
   169c4:	4193      	sbcs	r3, r2
   169c6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   169c8:	0018      	movs	r0, r3
   169ca:	46bd      	mov	sp, r7
   169cc:	b004      	add	sp, #16
   169ce:	bd80      	pop	{r7, pc}

000169d0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   169d0:	b580      	push	{r7, lr}
   169d2:	b082      	sub	sp, #8
   169d4:	af00      	add	r7, sp, #0
   169d6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   169d8:	46c0      	nop			; (mov r8, r8)
   169da:	687b      	ldr	r3, [r7, #4]
   169dc:	0018      	movs	r0, r3
   169de:	4b04      	ldr	r3, [pc, #16]	; (169f0 <_usart_wait_for_sync+0x20>)
   169e0:	4798      	blx	r3
   169e2:	1e03      	subs	r3, r0, #0
   169e4:	d1f9      	bne.n	169da <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   169e6:	46c0      	nop			; (mov r8, r8)
   169e8:	46bd      	mov	sp, r7
   169ea:	b002      	add	sp, #8
   169ec:	bd80      	pop	{r7, pc}
   169ee:	46c0      	nop			; (mov r8, r8)
   169f0:	000169b1 	.word	0x000169b1

000169f4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   169f4:	b580      	push	{r7, lr}
   169f6:	b082      	sub	sp, #8
   169f8:	af00      	add	r7, sp, #0
   169fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   169fc:	687b      	ldr	r3, [r7, #4]
   169fe:	2280      	movs	r2, #128	; 0x80
   16a00:	05d2      	lsls	r2, r2, #23
   16a02:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   16a04:	687b      	ldr	r3, [r7, #4]
   16a06:	2200      	movs	r2, #0
   16a08:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   16a0a:	687b      	ldr	r3, [r7, #4]
   16a0c:	22ff      	movs	r2, #255	; 0xff
   16a0e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   16a10:	687b      	ldr	r3, [r7, #4]
   16a12:	2200      	movs	r2, #0
   16a14:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   16a16:	687b      	ldr	r3, [r7, #4]
   16a18:	2200      	movs	r2, #0
   16a1a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   16a1c:	687b      	ldr	r3, [r7, #4]
   16a1e:	2296      	movs	r2, #150	; 0x96
   16a20:	0192      	lsls	r2, r2, #6
   16a22:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   16a24:	687b      	ldr	r3, [r7, #4]
   16a26:	2224      	movs	r2, #36	; 0x24
   16a28:	2101      	movs	r1, #1
   16a2a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   16a2c:	687b      	ldr	r3, [r7, #4]
   16a2e:	2225      	movs	r2, #37	; 0x25
   16a30:	2101      	movs	r1, #1
   16a32:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   16a34:	687b      	ldr	r3, [r7, #4]
   16a36:	2226      	movs	r2, #38	; 0x26
   16a38:	2100      	movs	r1, #0
   16a3a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   16a3c:	687b      	ldr	r3, [r7, #4]
   16a3e:	2227      	movs	r2, #39	; 0x27
   16a40:	2100      	movs	r1, #0
   16a42:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   16a44:	687b      	ldr	r3, [r7, #4]
   16a46:	2200      	movs	r2, #0
   16a48:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   16a4a:	687b      	ldr	r3, [r7, #4]
   16a4c:	2288      	movs	r2, #136	; 0x88
   16a4e:	0352      	lsls	r2, r2, #13
   16a50:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   16a52:	687b      	ldr	r3, [r7, #4]
   16a54:	222c      	movs	r2, #44	; 0x2c
   16a56:	2100      	movs	r1, #0
   16a58:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   16a5a:	687b      	ldr	r3, [r7, #4]
   16a5c:	222d      	movs	r2, #45	; 0x2d
   16a5e:	2100      	movs	r1, #0
   16a60:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   16a62:	687b      	ldr	r3, [r7, #4]
   16a64:	2200      	movs	r2, #0
   16a66:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   16a68:	687b      	ldr	r3, [r7, #4]
   16a6a:	2200      	movs	r2, #0
   16a6c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   16a6e:	687b      	ldr	r3, [r7, #4]
   16a70:	2200      	movs	r2, #0
   16a72:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   16a74:	687b      	ldr	r3, [r7, #4]
   16a76:	2200      	movs	r2, #0
   16a78:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   16a7a:	687b      	ldr	r3, [r7, #4]
   16a7c:	2200      	movs	r2, #0
   16a7e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   16a80:	687b      	ldr	r3, [r7, #4]
   16a82:	2200      	movs	r2, #0
   16a84:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   16a86:	687b      	ldr	r3, [r7, #4]
   16a88:	2200      	movs	r2, #0
   16a8a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   16a8c:	687b      	ldr	r3, [r7, #4]
   16a8e:	2200      	movs	r2, #0
   16a90:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   16a92:	687b      	ldr	r3, [r7, #4]
   16a94:	2200      	movs	r2, #0
   16a96:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   16a98:	687b      	ldr	r3, [r7, #4]
   16a9a:	2200      	movs	r2, #0
   16a9c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   16a9e:	687b      	ldr	r3, [r7, #4]
   16aa0:	2213      	movs	r2, #19
   16aa2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   16aa4:	687b      	ldr	r3, [r7, #4]
   16aa6:	2200      	movs	r2, #0
   16aa8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   16aaa:	46c0      	nop			; (mov r8, r8)
   16aac:	46bd      	mov	sp, r7
   16aae:	b002      	add	sp, #8
   16ab0:	bd80      	pop	{r7, pc}
	...

00016ab4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   16ab4:	b580      	push	{r7, lr}
   16ab6:	b084      	sub	sp, #16
   16ab8:	af00      	add	r7, sp, #0
   16aba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   16abc:	687b      	ldr	r3, [r7, #4]
   16abe:	681b      	ldr	r3, [r3, #0]
   16ac0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   16ac2:	687b      	ldr	r3, [r7, #4]
   16ac4:	681b      	ldr	r3, [r3, #0]
   16ac6:	0018      	movs	r0, r3
   16ac8:	4b09      	ldr	r3, [pc, #36]	; (16af0 <usart_enable+0x3c>)
   16aca:	4798      	blx	r3
   16acc:	0003      	movs	r3, r0
   16ace:	0018      	movs	r0, r3
   16ad0:	4b08      	ldr	r3, [pc, #32]	; (16af4 <usart_enable+0x40>)
   16ad2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   16ad4:	687b      	ldr	r3, [r7, #4]
   16ad6:	0018      	movs	r0, r3
   16ad8:	4b07      	ldr	r3, [pc, #28]	; (16af8 <usart_enable+0x44>)
   16ada:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   16adc:	68fb      	ldr	r3, [r7, #12]
   16ade:	681b      	ldr	r3, [r3, #0]
   16ae0:	2202      	movs	r2, #2
   16ae2:	431a      	orrs	r2, r3
   16ae4:	68fb      	ldr	r3, [r7, #12]
   16ae6:	601a      	str	r2, [r3, #0]
}
   16ae8:	46c0      	nop			; (mov r8, r8)
   16aea:	46bd      	mov	sp, r7
   16aec:	b004      	add	sp, #16
   16aee:	bd80      	pop	{r7, pc}
   16af0:	00017b05 	.word	0x00017b05
   16af4:	00016985 	.word	0x00016985
   16af8:	000169d1 	.word	0x000169d1

00016afc <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   16afc:	b580      	push	{r7, lr}
   16afe:	b082      	sub	sp, #8
   16b00:	af00      	add	r7, sp, #0
   16b02:	6078      	str	r0, [r7, #4]
   16b04:	000a      	movs	r2, r1
   16b06:	1cfb      	adds	r3, r7, #3
   16b08:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   16b0a:	687b      	ldr	r3, [r7, #4]
   16b0c:	2231      	movs	r2, #49	; 0x31
   16b0e:	5c9b      	ldrb	r3, [r3, r2]
   16b10:	b25a      	sxtb	r2, r3
   16b12:	1cfb      	adds	r3, r7, #3
   16b14:	781b      	ldrb	r3, [r3, #0]
   16b16:	2101      	movs	r1, #1
   16b18:	4099      	lsls	r1, r3
   16b1a:	000b      	movs	r3, r1
   16b1c:	b25b      	sxtb	r3, r3
   16b1e:	4313      	orrs	r3, r2
   16b20:	b25b      	sxtb	r3, r3
   16b22:	b2d9      	uxtb	r1, r3
   16b24:	687b      	ldr	r3, [r7, #4]
   16b26:	2231      	movs	r2, #49	; 0x31
   16b28:	5499      	strb	r1, [r3, r2]

}
   16b2a:	46c0      	nop			; (mov r8, r8)
   16b2c:	46bd      	mov	sp, r7
   16b2e:	b002      	add	sp, #8
   16b30:	bd80      	pop	{r7, pc}
	...

00016b34 <InitializeSerialConsole>:
*				asynchronous reads and writes. 
* @note			Call from main once to initialize Hardware.
*****************************************************************************/

void InitializeSerialConsole(void)
{
   16b34:	b580      	push	{r7, lr}
   16b36:	af00      	add	r7, sp, #0

	//Initialize circular buffers for RX and TX
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
   16b38:	2380      	movs	r3, #128	; 0x80
   16b3a:	009a      	lsls	r2, r3, #2
   16b3c:	4b0f      	ldr	r3, [pc, #60]	; (16b7c <InitializeSerialConsole+0x48>)
   16b3e:	0011      	movs	r1, r2
   16b40:	0018      	movs	r0, r3
   16b42:	4b0f      	ldr	r3, [pc, #60]	; (16b80 <InitializeSerialConsole+0x4c>)
   16b44:	4798      	blx	r3
   16b46:	0002      	movs	r2, r0
   16b48:	4b0e      	ldr	r3, [pc, #56]	; (16b84 <InitializeSerialConsole+0x50>)
   16b4a:	601a      	str	r2, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
   16b4c:	2380      	movs	r3, #128	; 0x80
   16b4e:	009a      	lsls	r2, r3, #2
   16b50:	4b0d      	ldr	r3, [pc, #52]	; (16b88 <InitializeSerialConsole+0x54>)
   16b52:	0011      	movs	r1, r2
   16b54:	0018      	movs	r0, r3
   16b56:	4b0a      	ldr	r3, [pc, #40]	; (16b80 <InitializeSerialConsole+0x4c>)
   16b58:	4798      	blx	r3
   16b5a:	0002      	movs	r2, r0
   16b5c:	4b0b      	ldr	r3, [pc, #44]	; (16b8c <InitializeSerialConsole+0x58>)
   16b5e:	601a      	str	r2, [r3, #0]

	//Configure USART and Callbacks
	configure_usart();
   16b60:	4b0b      	ldr	r3, [pc, #44]	; (16b90 <InitializeSerialConsole+0x5c>)
   16b62:	4798      	blx	r3
	configure_usart_callbacks();
   16b64:	4b0b      	ldr	r3, [pc, #44]	; (16b94 <InitializeSerialConsole+0x60>)
   16b66:	4798      	blx	r3
	
	
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
   16b68:	490b      	ldr	r1, [pc, #44]	; (16b98 <InitializeSerialConsole+0x64>)
   16b6a:	4b0c      	ldr	r3, [pc, #48]	; (16b9c <InitializeSerialConsole+0x68>)
   16b6c:	2201      	movs	r2, #1
   16b6e:	0018      	movs	r0, r3
   16b70:	4b0b      	ldr	r3, [pc, #44]	; (16ba0 <InitializeSerialConsole+0x6c>)
   16b72:	4798      	blx	r3

	//Add any other calls you need to do to initialize your Serial Console
}
   16b74:	46c0      	nop			; (mov r8, r8)
   16b76:	46bd      	mov	sp, r7
   16b78:	bd80      	pop	{r7, pc}
   16b7a:	46c0      	nop			; (mov r8, r8)
   16b7c:	20002d20 	.word	0x20002d20
   16b80:	00016865 	.word	0x00016865
   16b84:	20002b18 	.word	0x20002b18
   16b88:	20002b20 	.word	0x20002b20
   16b8c:	20002f24 	.word	0x20002f24
   16b90:	00016c7d 	.word	0x00016c7d
   16b94:	00016cf5 	.word	0x00016cf5
   16b98:	20002b1c 	.word	0x20002b1c
   16b9c:	20002ae4 	.word	0x20002ae4
   16ba0:	000183f9 	.word	0x000183f9

00016ba4 <SerialConsoleWriteString>:
* @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the text send to the uart
* @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be thread safe.
* @note			Use to send a string of characters to the user via UART
*****************************************************************************/
void SerialConsoleWriteString(char * string)
{
   16ba4:	b580      	push	{r7, lr}
   16ba6:	b084      	sub	sp, #16
   16ba8:	af00      	add	r7, sp, #0
   16baa:	6078      	str	r0, [r7, #4]
vTaskSuspendAll();
   16bac:	4b1a      	ldr	r3, [pc, #104]	; (16c18 <SerialConsoleWriteString+0x74>)
   16bae:	4798      	blx	r3
	if(string != NULL)
   16bb0:	687b      	ldr	r3, [r7, #4]
   16bb2:	2b00      	cmp	r3, #0
   16bb4:	d02a      	beq.n	16c0c <SerialConsoleWriteString+0x68>
	{
		for (size_t iter = 0; iter < strlen(string); iter++)
   16bb6:	2300      	movs	r3, #0
   16bb8:	60fb      	str	r3, [r7, #12]
   16bba:	e00b      	b.n	16bd4 <SerialConsoleWriteString+0x30>
		{
			circular_buf_put(cbufTx, string[iter]);
   16bbc:	4b17      	ldr	r3, [pc, #92]	; (16c1c <SerialConsoleWriteString+0x78>)
   16bbe:	6818      	ldr	r0, [r3, #0]
   16bc0:	687a      	ldr	r2, [r7, #4]
   16bc2:	68fb      	ldr	r3, [r7, #12]
   16bc4:	18d3      	adds	r3, r2, r3
   16bc6:	781b      	ldrb	r3, [r3, #0]
   16bc8:	0019      	movs	r1, r3
   16bca:	4b15      	ldr	r3, [pc, #84]	; (16c20 <SerialConsoleWriteString+0x7c>)
   16bcc:	4798      	blx	r3
		for (size_t iter = 0; iter < strlen(string); iter++)
   16bce:	68fb      	ldr	r3, [r7, #12]
   16bd0:	3301      	adds	r3, #1
   16bd2:	60fb      	str	r3, [r7, #12]
   16bd4:	687b      	ldr	r3, [r7, #4]
   16bd6:	0018      	movs	r0, r3
   16bd8:	4b12      	ldr	r3, [pc, #72]	; (16c24 <SerialConsoleWriteString+0x80>)
   16bda:	4798      	blx	r3
   16bdc:	0002      	movs	r2, r0
   16bde:	68fb      	ldr	r3, [r7, #12]
   16be0:	429a      	cmp	r2, r3
   16be2:	d8eb      	bhi.n	16bbc <SerialConsoleWriteString+0x18>
		}

		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
   16be4:	4b10      	ldr	r3, [pc, #64]	; (16c28 <SerialConsoleWriteString+0x84>)
   16be6:	2101      	movs	r1, #1
   16be8:	0018      	movs	r0, r3
   16bea:	4b10      	ldr	r3, [pc, #64]	; (16c2c <SerialConsoleWriteString+0x88>)
   16bec:	4798      	blx	r3
   16bee:	1e03      	subs	r3, r0, #0
   16bf0:	d10c      	bne.n	16c0c <SerialConsoleWriteString+0x68>
		{
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
   16bf2:	4b0a      	ldr	r3, [pc, #40]	; (16c1c <SerialConsoleWriteString+0x78>)
   16bf4:	681b      	ldr	r3, [r3, #0]
   16bf6:	4a0e      	ldr	r2, [pc, #56]	; (16c30 <SerialConsoleWriteString+0x8c>)
   16bf8:	0011      	movs	r1, r2
   16bfa:	0018      	movs	r0, r3
   16bfc:	4b0d      	ldr	r3, [pc, #52]	; (16c34 <SerialConsoleWriteString+0x90>)
   16bfe:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   16c00:	490b      	ldr	r1, [pc, #44]	; (16c30 <SerialConsoleWriteString+0x8c>)
   16c02:	4b09      	ldr	r3, [pc, #36]	; (16c28 <SerialConsoleWriteString+0x84>)
   16c04:	2201      	movs	r2, #1
   16c06:	0018      	movs	r0, r3
   16c08:	4b0b      	ldr	r3, [pc, #44]	; (16c38 <SerialConsoleWriteString+0x94>)
   16c0a:	4798      	blx	r3
		}
	}
xTaskResumeAll();
   16c0c:	4b0b      	ldr	r3, [pc, #44]	; (16c3c <SerialConsoleWriteString+0x98>)
   16c0e:	4798      	blx	r3
}
   16c10:	46c0      	nop			; (mov r8, r8)
   16c12:	46bd      	mov	sp, r7
   16c14:	b004      	add	sp, #16
   16c16:	bd80      	pop	{r7, pc}
   16c18:	00015705 	.word	0x00015705
   16c1c:	20002f24 	.word	0x20002f24
   16c20:	000168c5 	.word	0x000168c5
   16c24:	0001b75d 	.word	0x0001b75d
   16c28:	20002ae4 	.word	0x20002ae4
   16c2c:	00018441 	.word	0x00018441
   16c30:	20002f20 	.word	0x20002f20
   16c34:	000168f9 	.word	0x000168f9
   16c38:	000183b1 	.word	0x000183b1
   16c3c:	0001571d 	.word	0x0001571d

00016c40 <SerialConsoleReadCharacter>:
* @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
* @return		Returns -1 if there are no characters in the buffer
* @note			Use to receive characters from the RX buffer (FIFO)
*****************************************************************************/
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   16c40:	b580      	push	{r7, lr}
   16c42:	b084      	sub	sp, #16
   16c44:	af00      	add	r7, sp, #0
   16c46:	6078      	str	r0, [r7, #4]
	vTaskSuspendAll();
   16c48:	4b08      	ldr	r3, [pc, #32]	; (16c6c <SerialConsoleReadCharacter+0x2c>)
   16c4a:	4798      	blx	r3
	int a = circular_buf_get(cbufRx, (uint8_t*) rxChar);
   16c4c:	4b08      	ldr	r3, [pc, #32]	; (16c70 <SerialConsoleReadCharacter+0x30>)
   16c4e:	681b      	ldr	r3, [r3, #0]
   16c50:	687a      	ldr	r2, [r7, #4]
   16c52:	0011      	movs	r1, r2
   16c54:	0018      	movs	r0, r3
   16c56:	4b07      	ldr	r3, [pc, #28]	; (16c74 <SerialConsoleReadCharacter+0x34>)
   16c58:	4798      	blx	r3
   16c5a:	0003      	movs	r3, r0
   16c5c:	60fb      	str	r3, [r7, #12]
	xTaskResumeAll();
   16c5e:	4b06      	ldr	r3, [pc, #24]	; (16c78 <SerialConsoleReadCharacter+0x38>)
   16c60:	4798      	blx	r3
	return a;
   16c62:	68fb      	ldr	r3, [r7, #12]

}
   16c64:	0018      	movs	r0, r3
   16c66:	46bd      	mov	sp, r7
   16c68:	b004      	add	sp, #16
   16c6a:	bd80      	pop	{r7, pc}
   16c6c:	00015705 	.word	0x00015705
   16c70:	20002b18 	.word	0x20002b18
   16c74:	000168f9 	.word	0x000168f9
   16c78:	0001571d 	.word	0x0001571d

00016c7c <configure_usart>:
* @fn			static void configure_usart(void)
* @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
* @note			
*****************************************************************************/
static void configure_usart(void)
{
   16c7c:	b580      	push	{r7, lr}
   16c7e:	b090      	sub	sp, #64	; 0x40
   16c80:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
   16c82:	003b      	movs	r3, r7
   16c84:	0018      	movs	r0, r3
   16c86:	4b14      	ldr	r3, [pc, #80]	; (16cd8 <configure_usart+0x5c>)
   16c88:	4798      	blx	r3

	config_usart.baudrate    = 115200;
   16c8a:	003b      	movs	r3, r7
   16c8c:	22e1      	movs	r2, #225	; 0xe1
   16c8e:	0252      	lsls	r2, r2, #9
   16c90:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   16c92:	003b      	movs	r3, r7
   16c94:	22c4      	movs	r2, #196	; 0xc4
   16c96:	0392      	lsls	r2, r2, #14
   16c98:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   16c9a:	003b      	movs	r3, r7
   16c9c:	2201      	movs	r2, #1
   16c9e:	4252      	negs	r2, r2
   16ca0:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   16ca2:	003b      	movs	r3, r7
   16ca4:	2201      	movs	r2, #1
   16ca6:	4252      	negs	r2, r2
   16ca8:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   16caa:	003b      	movs	r3, r7
   16cac:	4a0b      	ldr	r2, [pc, #44]	; (16cdc <configure_usart+0x60>)
   16cae:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   16cb0:	003b      	movs	r3, r7
   16cb2:	4a0b      	ldr	r2, [pc, #44]	; (16ce0 <configure_usart+0x64>)
   16cb4:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_instance,
   16cb6:	46c0      	nop			; (mov r8, r8)
   16cb8:	003a      	movs	r2, r7
   16cba:	490a      	ldr	r1, [pc, #40]	; (16ce4 <configure_usart+0x68>)
   16cbc:	4b0a      	ldr	r3, [pc, #40]	; (16ce8 <configure_usart+0x6c>)
   16cbe:	0018      	movs	r0, r3
   16cc0:	4b0a      	ldr	r3, [pc, #40]	; (16cec <configure_usart+0x70>)
   16cc2:	4798      	blx	r3
   16cc4:	1e03      	subs	r3, r0, #0
   16cc6:	d1f7      	bne.n	16cb8 <configure_usart+0x3c>
					  &config_usart) != STATUS_OK) 
	{

	}
	
	usart_enable(&usart_instance);
   16cc8:	4b07      	ldr	r3, [pc, #28]	; (16ce8 <configure_usart+0x6c>)
   16cca:	0018      	movs	r0, r3
   16ccc:	4b08      	ldr	r3, [pc, #32]	; (16cf0 <configure_usart+0x74>)
   16cce:	4798      	blx	r3
}
   16cd0:	46c0      	nop			; (mov r8, r8)
   16cd2:	46bd      	mov	sp, r7
   16cd4:	b010      	add	sp, #64	; 0x40
   16cd6:	bd80      	pop	{r7, pc}
   16cd8:	000169f5 	.word	0x000169f5
   16cdc:	002a0003 	.word	0x002a0003
   16ce0:	002b0003 	.word	0x002b0003
   16ce4:	42001800 	.word	0x42001800
   16ce8:	20002ae4 	.word	0x20002ae4
   16cec:	00017fb5 	.word	0x00017fb5
   16cf0:	00016ab5 	.word	0x00016ab5

00016cf4 <configure_usart_callbacks>:
* @fn			static void configure_usart_callbacks(void)
* @brief		Code to register callbacks
* @note
*****************************************************************************/
static void configure_usart_callbacks(void)
{
   16cf4:	b580      	push	{r7, lr}
   16cf6:	af00      	add	r7, sp, #0
	usart_register_callback(&usart_instance,
   16cf8:	490c      	ldr	r1, [pc, #48]	; (16d2c <configure_usart_callbacks+0x38>)
   16cfa:	4b0d      	ldr	r3, [pc, #52]	; (16d30 <configure_usart_callbacks+0x3c>)
   16cfc:	2200      	movs	r2, #0
   16cfe:	0018      	movs	r0, r3
   16d00:	4b0c      	ldr	r3, [pc, #48]	; (16d34 <configure_usart_callbacks+0x40>)
   16d02:	4798      	blx	r3
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
   16d04:	490c      	ldr	r1, [pc, #48]	; (16d38 <configure_usart_callbacks+0x44>)
   16d06:	4b0a      	ldr	r3, [pc, #40]	; (16d30 <configure_usart_callbacks+0x3c>)
   16d08:	2201      	movs	r2, #1
   16d0a:	0018      	movs	r0, r3
   16d0c:	4b09      	ldr	r3, [pc, #36]	; (16d34 <configure_usart_callbacks+0x40>)
   16d0e:	4798      	blx	r3
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   16d10:	4b07      	ldr	r3, [pc, #28]	; (16d30 <configure_usart_callbacks+0x3c>)
   16d12:	2100      	movs	r1, #0
   16d14:	0018      	movs	r0, r3
   16d16:	4b09      	ldr	r3, [pc, #36]	; (16d3c <configure_usart_callbacks+0x48>)
   16d18:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   16d1a:	4b05      	ldr	r3, [pc, #20]	; (16d30 <configure_usart_callbacks+0x3c>)
   16d1c:	2101      	movs	r1, #1
   16d1e:	0018      	movs	r0, r3
   16d20:	4b06      	ldr	r3, [pc, #24]	; (16d3c <configure_usart_callbacks+0x48>)
   16d22:	4798      	blx	r3
}
   16d24:	46c0      	nop			; (mov r8, r8)
   16d26:	46bd      	mov	sp, r7
   16d28:	bd80      	pop	{r7, pc}
   16d2a:	46c0      	nop			; (mov r8, r8)
   16d2c:	00016d81 	.word	0x00016d81
   16d30:	20002ae4 	.word	0x20002ae4
   16d34:	00018369 	.word	0x00018369
   16d38:	00016d41 	.word	0x00016d41
   16d3c:	00016afd 	.word	0x00016afd

00016d40 <usart_read_callback>:
* @fn			void usart_read_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
   16d40:	b580      	push	{r7, lr}
   16d42:	b082      	sub	sp, #8
   16d44:	af00      	add	r7, sp, #0
   16d46:	6078      	str	r0, [r7, #4]

	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
   16d48:	4b08      	ldr	r3, [pc, #32]	; (16d6c <usart_read_callback+0x2c>)
   16d4a:	681a      	ldr	r2, [r3, #0]
   16d4c:	4b08      	ldr	r3, [pc, #32]	; (16d70 <usart_read_callback+0x30>)
   16d4e:	781b      	ldrb	r3, [r3, #0]
   16d50:	0019      	movs	r1, r3
   16d52:	0010      	movs	r0, r2
   16d54:	4b07      	ldr	r3, [pc, #28]	; (16d74 <usart_read_callback+0x34>)
   16d56:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
   16d58:	4905      	ldr	r1, [pc, #20]	; (16d70 <usart_read_callback+0x30>)
   16d5a:	4b07      	ldr	r3, [pc, #28]	; (16d78 <usart_read_callback+0x38>)
   16d5c:	2201      	movs	r2, #1
   16d5e:	0018      	movs	r0, r3
   16d60:	4b06      	ldr	r3, [pc, #24]	; (16d7c <usart_read_callback+0x3c>)
   16d62:	4798      	blx	r3
	
}
   16d64:	46c0      	nop			; (mov r8, r8)
   16d66:	46bd      	mov	sp, r7
   16d68:	b002      	add	sp, #8
   16d6a:	bd80      	pop	{r7, pc}
   16d6c:	20002b18 	.word	0x20002b18
   16d70:	20002b1c 	.word	0x20002b1c
   16d74:	000168c5 	.word	0x000168c5
   16d78:	20002ae4 	.word	0x20002ae4
   16d7c:	000183f9 	.word	0x000183f9

00016d80 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
   16d80:	b580      	push	{r7, lr}
   16d82:	b082      	sub	sp, #8
   16d84:	af00      	add	r7, sp, #0
   16d86:	6078      	str	r0, [r7, #4]
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
   16d88:	4b09      	ldr	r3, [pc, #36]	; (16db0 <usart_write_callback+0x30>)
   16d8a:	681b      	ldr	r3, [r3, #0]
   16d8c:	4a09      	ldr	r2, [pc, #36]	; (16db4 <usart_write_callback+0x34>)
   16d8e:	0011      	movs	r1, r2
   16d90:	0018      	movs	r0, r3
   16d92:	4b09      	ldr	r3, [pc, #36]	; (16db8 <usart_write_callback+0x38>)
   16d94:	4798      	blx	r3
   16d96:	0003      	movs	r3, r0
   16d98:	3301      	adds	r3, #1
   16d9a:	d005      	beq.n	16da8 <usart_write_callback+0x28>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   16d9c:	4905      	ldr	r1, [pc, #20]	; (16db4 <usart_write_callback+0x34>)
   16d9e:	4b07      	ldr	r3, [pc, #28]	; (16dbc <usart_write_callback+0x3c>)
   16da0:	2201      	movs	r2, #1
   16da2:	0018      	movs	r0, r3
   16da4:	4b06      	ldr	r3, [pc, #24]	; (16dc0 <usart_write_callback+0x40>)
   16da6:	4798      	blx	r3
	}
	
}
   16da8:	46c0      	nop			; (mov r8, r8)
   16daa:	46bd      	mov	sp, r7
   16dac:	b002      	add	sp, #8
   16dae:	bd80      	pop	{r7, pc}
   16db0:	20002f24 	.word	0x20002f24
   16db4:	20002f20 	.word	0x20002f20
   16db8:	000168f9 	.word	0x000168f9
   16dbc:	20002ae4 	.word	0x20002ae4
   16dc0:	000183b1 	.word	0x000183b1

00016dc4 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   16dc4:	b580      	push	{r7, lr}
   16dc6:	b082      	sub	sp, #8
   16dc8:	af00      	add	r7, sp, #0
   16dca:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   16dcc:	687b      	ldr	r3, [r7, #4]
   16dce:	2b00      	cmp	r3, #0
   16dd0:	d00c      	beq.n	16dec <delay_cycles+0x28>
		SysTick->LOAD = n;
   16dd2:	4b08      	ldr	r3, [pc, #32]	; (16df4 <delay_cycles+0x30>)
   16dd4:	687a      	ldr	r2, [r7, #4]
   16dd6:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   16dd8:	4b06      	ldr	r3, [pc, #24]	; (16df4 <delay_cycles+0x30>)
   16dda:	2200      	movs	r2, #0
   16ddc:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   16dde:	46c0      	nop			; (mov r8, r8)
   16de0:	4b04      	ldr	r3, [pc, #16]	; (16df4 <delay_cycles+0x30>)
   16de2:	681a      	ldr	r2, [r3, #0]
   16de4:	2380      	movs	r3, #128	; 0x80
   16de6:	025b      	lsls	r3, r3, #9
   16de8:	4013      	ands	r3, r2
   16dea:	d0f9      	beq.n	16de0 <delay_cycles+0x1c>
		};
	}
}
   16dec:	46c0      	nop			; (mov r8, r8)
   16dee:	46bd      	mov	sp, r7
   16df0:	b002      	add	sp, #8
   16df2:	bd80      	pop	{r7, pc}
   16df4:	e000e010 	.word	0xe000e010

00016df8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   16df8:	b580      	push	{r7, lr}
   16dfa:	b082      	sub	sp, #8
   16dfc:	af00      	add	r7, sp, #0
   16dfe:	6078      	str	r0, [r7, #4]
	while (n--) {
   16e00:	e004      	b.n	16e0c <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   16e02:	4b07      	ldr	r3, [pc, #28]	; (16e20 <delay_cycles_ms+0x28>)
   16e04:	681b      	ldr	r3, [r3, #0]
   16e06:	0018      	movs	r0, r3
   16e08:	4b06      	ldr	r3, [pc, #24]	; (16e24 <delay_cycles_ms+0x2c>)
   16e0a:	4798      	blx	r3
	while (n--) {
   16e0c:	687b      	ldr	r3, [r7, #4]
   16e0e:	1e5a      	subs	r2, r3, #1
   16e10:	607a      	str	r2, [r7, #4]
   16e12:	2b00      	cmp	r3, #0
   16e14:	d1f5      	bne.n	16e02 <delay_cycles_ms+0xa>
	}
}
   16e16:	46c0      	nop			; (mov r8, r8)
   16e18:	46bd      	mov	sp, r7
   16e1a:	b002      	add	sp, #8
   16e1c:	bd80      	pop	{r7, pc}
   16e1e:	46c0      	nop			; (mov r8, r8)
   16e20:	2000000c 	.word	0x2000000c
   16e24:	00016dc5 	.word	0x00016dc5

00016e28 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   16e28:	b580      	push	{r7, lr}
   16e2a:	b082      	sub	sp, #8
   16e2c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   16e2e:	4b10      	ldr	r3, [pc, #64]	; (16e70 <cpu_irq_enter_critical+0x48>)
   16e30:	681b      	ldr	r3, [r3, #0]
   16e32:	2b00      	cmp	r3, #0
   16e34:	d112      	bne.n	16e5c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   16e36:	f3ef 8310 	mrs	r3, PRIMASK
   16e3a:	607b      	str	r3, [r7, #4]
  return(result);
   16e3c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   16e3e:	2b00      	cmp	r3, #0
   16e40:	d109      	bne.n	16e56 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   16e42:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   16e44:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   16e48:	4b0a      	ldr	r3, [pc, #40]	; (16e74 <cpu_irq_enter_critical+0x4c>)
   16e4a:	2200      	movs	r2, #0
   16e4c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   16e4e:	4b0a      	ldr	r3, [pc, #40]	; (16e78 <cpu_irq_enter_critical+0x50>)
   16e50:	2201      	movs	r2, #1
   16e52:	701a      	strb	r2, [r3, #0]
   16e54:	e002      	b.n	16e5c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   16e56:	4b08      	ldr	r3, [pc, #32]	; (16e78 <cpu_irq_enter_critical+0x50>)
   16e58:	2200      	movs	r2, #0
   16e5a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   16e5c:	4b04      	ldr	r3, [pc, #16]	; (16e70 <cpu_irq_enter_critical+0x48>)
   16e5e:	681b      	ldr	r3, [r3, #0]
   16e60:	1c5a      	adds	r2, r3, #1
   16e62:	4b03      	ldr	r3, [pc, #12]	; (16e70 <cpu_irq_enter_critical+0x48>)
   16e64:	601a      	str	r2, [r3, #0]
}
   16e66:	46c0      	nop			; (mov r8, r8)
   16e68:	46bd      	mov	sp, r7
   16e6a:	b002      	add	sp, #8
   16e6c:	bd80      	pop	{r7, pc}
   16e6e:	46c0      	nop			; (mov r8, r8)
   16e70:	200029a4 	.word	0x200029a4
   16e74:	20000010 	.word	0x20000010
   16e78:	200029a8 	.word	0x200029a8

00016e7c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   16e7c:	b580      	push	{r7, lr}
   16e7e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   16e80:	4b0b      	ldr	r3, [pc, #44]	; (16eb0 <cpu_irq_leave_critical+0x34>)
   16e82:	681b      	ldr	r3, [r3, #0]
   16e84:	1e5a      	subs	r2, r3, #1
   16e86:	4b0a      	ldr	r3, [pc, #40]	; (16eb0 <cpu_irq_leave_critical+0x34>)
   16e88:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   16e8a:	4b09      	ldr	r3, [pc, #36]	; (16eb0 <cpu_irq_leave_critical+0x34>)
   16e8c:	681b      	ldr	r3, [r3, #0]
   16e8e:	2b00      	cmp	r3, #0
   16e90:	d10a      	bne.n	16ea8 <cpu_irq_leave_critical+0x2c>
   16e92:	4b08      	ldr	r3, [pc, #32]	; (16eb4 <cpu_irq_leave_critical+0x38>)
   16e94:	781b      	ldrb	r3, [r3, #0]
   16e96:	b2db      	uxtb	r3, r3
   16e98:	2b00      	cmp	r3, #0
   16e9a:	d005      	beq.n	16ea8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   16e9c:	4b06      	ldr	r3, [pc, #24]	; (16eb8 <cpu_irq_leave_critical+0x3c>)
   16e9e:	2201      	movs	r2, #1
   16ea0:	701a      	strb	r2, [r3, #0]
   16ea2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   16ea6:	b662      	cpsie	i
	}
}
   16ea8:	46c0      	nop			; (mov r8, r8)
   16eaa:	46bd      	mov	sp, r7
   16eac:	bd80      	pop	{r7, pc}
   16eae:	46c0      	nop			; (mov r8, r8)
   16eb0:	200029a4 	.word	0x200029a4
   16eb4:	200029a8 	.word	0x200029a8
   16eb8:	20000010 	.word	0x20000010

00016ebc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16ebc:	b580      	push	{r7, lr}
   16ebe:	b084      	sub	sp, #16
   16ec0:	af00      	add	r7, sp, #0
   16ec2:	0002      	movs	r2, r0
   16ec4:	1dfb      	adds	r3, r7, #7
   16ec6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16ec8:	230f      	movs	r3, #15
   16eca:	18fb      	adds	r3, r7, r3
   16ecc:	1dfa      	adds	r2, r7, #7
   16ece:	7812      	ldrb	r2, [r2, #0]
   16ed0:	09d2      	lsrs	r2, r2, #7
   16ed2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16ed4:	230e      	movs	r3, #14
   16ed6:	18fb      	adds	r3, r7, r3
   16ed8:	1dfa      	adds	r2, r7, #7
   16eda:	7812      	ldrb	r2, [r2, #0]
   16edc:	0952      	lsrs	r2, r2, #5
   16ede:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16ee0:	4b0d      	ldr	r3, [pc, #52]	; (16f18 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16ee2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   16ee4:	230f      	movs	r3, #15
   16ee6:	18fb      	adds	r3, r7, r3
   16ee8:	781b      	ldrb	r3, [r3, #0]
   16eea:	2b00      	cmp	r3, #0
   16eec:	d10f      	bne.n	16f0e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16eee:	230f      	movs	r3, #15
   16ef0:	18fb      	adds	r3, r7, r3
   16ef2:	781b      	ldrb	r3, [r3, #0]
   16ef4:	009b      	lsls	r3, r3, #2
   16ef6:	2210      	movs	r2, #16
   16ef8:	4694      	mov	ip, r2
   16efa:	44bc      	add	ip, r7
   16efc:	4463      	add	r3, ip
   16efe:	3b08      	subs	r3, #8
   16f00:	681a      	ldr	r2, [r3, #0]
   16f02:	230e      	movs	r3, #14
   16f04:	18fb      	adds	r3, r7, r3
   16f06:	781b      	ldrb	r3, [r3, #0]
   16f08:	01db      	lsls	r3, r3, #7
   16f0a:	18d3      	adds	r3, r2, r3
   16f0c:	e000      	b.n	16f10 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   16f0e:	2300      	movs	r3, #0
	}
}
   16f10:	0018      	movs	r0, r3
   16f12:	46bd      	mov	sp, r7
   16f14:	b004      	add	sp, #16
   16f16:	bd80      	pop	{r7, pc}
   16f18:	41004400 	.word	0x41004400

00016f1c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16f1c:	b580      	push	{r7, lr}
   16f1e:	b082      	sub	sp, #8
   16f20:	af00      	add	r7, sp, #0
   16f22:	0002      	movs	r2, r0
   16f24:	1dfb      	adds	r3, r7, #7
   16f26:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16f28:	1dfb      	adds	r3, r7, #7
   16f2a:	781b      	ldrb	r3, [r3, #0]
   16f2c:	0018      	movs	r0, r3
   16f2e:	4b03      	ldr	r3, [pc, #12]	; (16f3c <port_get_group_from_gpio_pin+0x20>)
   16f30:	4798      	blx	r3
   16f32:	0003      	movs	r3, r0
}
   16f34:	0018      	movs	r0, r3
   16f36:	46bd      	mov	sp, r7
   16f38:	b002      	add	sp, #8
   16f3a:	bd80      	pop	{r7, pc}
   16f3c:	00016ebd 	.word	0x00016ebd

00016f40 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   16f40:	b580      	push	{r7, lr}
   16f42:	b082      	sub	sp, #8
   16f44:	af00      	add	r7, sp, #0
   16f46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   16f48:	687b      	ldr	r3, [r7, #4]
   16f4a:	2200      	movs	r2, #0
   16f4c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   16f4e:	687b      	ldr	r3, [r7, #4]
   16f50:	2201      	movs	r2, #1
   16f52:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   16f54:	687b      	ldr	r3, [r7, #4]
   16f56:	2200      	movs	r2, #0
   16f58:	709a      	strb	r2, [r3, #2]
}
   16f5a:	46c0      	nop			; (mov r8, r8)
   16f5c:	46bd      	mov	sp, r7
   16f5e:	b002      	add	sp, #8
   16f60:	bd80      	pop	{r7, pc}
	...

00016f64 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   16f64:	b580      	push	{r7, lr}
   16f66:	b084      	sub	sp, #16
   16f68:	af00      	add	r7, sp, #0
   16f6a:	0002      	movs	r2, r0
   16f6c:	1dfb      	adds	r3, r7, #7
   16f6e:	701a      	strb	r2, [r3, #0]
   16f70:	1dbb      	adds	r3, r7, #6
   16f72:	1c0a      	adds	r2, r1, #0
   16f74:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   16f76:	1dfb      	adds	r3, r7, #7
   16f78:	781b      	ldrb	r3, [r3, #0]
   16f7a:	0018      	movs	r0, r3
   16f7c:	4b0d      	ldr	r3, [pc, #52]	; (16fb4 <port_pin_set_output_level+0x50>)
   16f7e:	4798      	blx	r3
   16f80:	0003      	movs	r3, r0
   16f82:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   16f84:	1dfb      	adds	r3, r7, #7
   16f86:	781b      	ldrb	r3, [r3, #0]
   16f88:	221f      	movs	r2, #31
   16f8a:	4013      	ands	r3, r2
   16f8c:	2201      	movs	r2, #1
   16f8e:	409a      	lsls	r2, r3
   16f90:	0013      	movs	r3, r2
   16f92:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   16f94:	1dbb      	adds	r3, r7, #6
   16f96:	781b      	ldrb	r3, [r3, #0]
   16f98:	2b00      	cmp	r3, #0
   16f9a:	d003      	beq.n	16fa4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16f9c:	68fb      	ldr	r3, [r7, #12]
   16f9e:	68ba      	ldr	r2, [r7, #8]
   16fa0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   16fa2:	e002      	b.n	16faa <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   16fa4:	68fb      	ldr	r3, [r7, #12]
   16fa6:	68ba      	ldr	r2, [r7, #8]
   16fa8:	615a      	str	r2, [r3, #20]
}
   16faa:	46c0      	nop			; (mov r8, r8)
   16fac:	46bd      	mov	sp, r7
   16fae:	b004      	add	sp, #16
   16fb0:	bd80      	pop	{r7, pc}
   16fb2:	46c0      	nop			; (mov r8, r8)
   16fb4:	00016f1d 	.word	0x00016f1d

00016fb8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   16fb8:	b580      	push	{r7, lr}
   16fba:	b082      	sub	sp, #8
   16fbc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   16fbe:	1d3b      	adds	r3, r7, #4
   16fc0:	0018      	movs	r0, r3
   16fc2:	4b0e      	ldr	r3, [pc, #56]	; (16ffc <system_board_init+0x44>)
   16fc4:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   16fc6:	1d3b      	adds	r3, r7, #4
   16fc8:	2201      	movs	r2, #1
   16fca:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   16fcc:	1d3b      	adds	r3, r7, #4
   16fce:	0019      	movs	r1, r3
   16fd0:	2017      	movs	r0, #23
   16fd2:	4b0b      	ldr	r3, [pc, #44]	; (17000 <system_board_init+0x48>)
   16fd4:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   16fd6:	2101      	movs	r1, #1
   16fd8:	2017      	movs	r0, #23
   16fda:	4b0a      	ldr	r3, [pc, #40]	; (17004 <system_board_init+0x4c>)
   16fdc:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   16fde:	1d3b      	adds	r3, r7, #4
   16fe0:	2200      	movs	r2, #0
   16fe2:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   16fe4:	1d3b      	adds	r3, r7, #4
   16fe6:	2201      	movs	r2, #1
   16fe8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   16fea:	1d3b      	adds	r3, r7, #4
   16fec:	0019      	movs	r1, r3
   16fee:	2037      	movs	r0, #55	; 0x37
   16ff0:	4b03      	ldr	r3, [pc, #12]	; (17000 <system_board_init+0x48>)
   16ff2:	4798      	blx	r3
}
   16ff4:	46c0      	nop			; (mov r8, r8)
   16ff6:	46bd      	mov	sp, r7
   16ff8:	b002      	add	sp, #8
   16ffa:	bd80      	pop	{r7, pc}
   16ffc:	00016f41 	.word	0x00016f41
   17000:	00017395 	.word	0x00017395
   17004:	00016f65 	.word	0x00016f65

00017008 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   17008:	b580      	push	{r7, lr}
   1700a:	b084      	sub	sp, #16
   1700c:	af00      	add	r7, sp, #0
   1700e:	0002      	movs	r2, r0
   17010:	1dfb      	adds	r3, r7, #7
   17012:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   17014:	230f      	movs	r3, #15
   17016:	18fb      	adds	r3, r7, r3
   17018:	1dfa      	adds	r2, r7, #7
   1701a:	7812      	ldrb	r2, [r2, #0]
   1701c:	0952      	lsrs	r2, r2, #5
   1701e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   17020:	230f      	movs	r3, #15
   17022:	18fb      	adds	r3, r7, r3
   17024:	781b      	ldrb	r3, [r3, #0]
   17026:	2b00      	cmp	r3, #0
   17028:	d10c      	bne.n	17044 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1702a:	4b09      	ldr	r3, [pc, #36]	; (17050 <_extint_get_eic_from_channel+0x48>)
   1702c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   1702e:	230f      	movs	r3, #15
   17030:	18fb      	adds	r3, r7, r3
   17032:	781b      	ldrb	r3, [r3, #0]
   17034:	009b      	lsls	r3, r3, #2
   17036:	2210      	movs	r2, #16
   17038:	4694      	mov	ip, r2
   1703a:	44bc      	add	ip, r7
   1703c:	4463      	add	r3, ip
   1703e:	3b08      	subs	r3, #8
   17040:	681b      	ldr	r3, [r3, #0]
   17042:	e000      	b.n	17046 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   17044:	2300      	movs	r3, #0
	}
}
   17046:	0018      	movs	r0, r3
   17048:	46bd      	mov	sp, r7
   1704a:	b004      	add	sp, #16
   1704c:	bd80      	pop	{r7, pc}
   1704e:	46c0      	nop			; (mov r8, r8)
   17050:	40001800 	.word	0x40001800

00017054 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   17054:	b580      	push	{r7, lr}
   17056:	b084      	sub	sp, #16
   17058:	af00      	add	r7, sp, #0
   1705a:	0002      	movs	r2, r0
   1705c:	1dfb      	adds	r3, r7, #7
   1705e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   17060:	1dfb      	adds	r3, r7, #7
   17062:	781b      	ldrb	r3, [r3, #0]
   17064:	0018      	movs	r0, r3
   17066:	4b0b      	ldr	r3, [pc, #44]	; (17094 <extint_chan_is_detected+0x40>)
   17068:	4798      	blx	r3
   1706a:	0003      	movs	r3, r0
   1706c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   1706e:	1dfb      	adds	r3, r7, #7
   17070:	781b      	ldrb	r3, [r3, #0]
   17072:	221f      	movs	r2, #31
   17074:	4013      	ands	r3, r2
   17076:	2201      	movs	r2, #1
   17078:	409a      	lsls	r2, r3
   1707a:	0013      	movs	r3, r2
   1707c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   1707e:	68fb      	ldr	r3, [r7, #12]
   17080:	691b      	ldr	r3, [r3, #16]
   17082:	68ba      	ldr	r2, [r7, #8]
   17084:	4013      	ands	r3, r2
   17086:	1e5a      	subs	r2, r3, #1
   17088:	4193      	sbcs	r3, r2
   1708a:	b2db      	uxtb	r3, r3
}
   1708c:	0018      	movs	r0, r3
   1708e:	46bd      	mov	sp, r7
   17090:	b004      	add	sp, #16
   17092:	bd80      	pop	{r7, pc}
   17094:	00017009 	.word	0x00017009

00017098 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   17098:	b580      	push	{r7, lr}
   1709a:	b084      	sub	sp, #16
   1709c:	af00      	add	r7, sp, #0
   1709e:	0002      	movs	r2, r0
   170a0:	1dfb      	adds	r3, r7, #7
   170a2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   170a4:	1dfb      	adds	r3, r7, #7
   170a6:	781b      	ldrb	r3, [r3, #0]
   170a8:	0018      	movs	r0, r3
   170aa:	4b09      	ldr	r3, [pc, #36]	; (170d0 <extint_chan_clear_detected+0x38>)
   170ac:	4798      	blx	r3
   170ae:	0003      	movs	r3, r0
   170b0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   170b2:	1dfb      	adds	r3, r7, #7
   170b4:	781b      	ldrb	r3, [r3, #0]
   170b6:	221f      	movs	r2, #31
   170b8:	4013      	ands	r3, r2
   170ba:	2201      	movs	r2, #1
   170bc:	409a      	lsls	r2, r3
   170be:	0013      	movs	r3, r2
   170c0:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   170c2:	68fb      	ldr	r3, [r7, #12]
   170c4:	68ba      	ldr	r2, [r7, #8]
   170c6:	611a      	str	r2, [r3, #16]
}
   170c8:	46c0      	nop			; (mov r8, r8)
   170ca:	46bd      	mov	sp, r7
   170cc:	b004      	add	sp, #16
   170ce:	bd80      	pop	{r7, pc}
   170d0:	00017009 	.word	0x00017009

000170d4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   170d4:	b580      	push	{r7, lr}
   170d6:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   170d8:	4b15      	ldr	r3, [pc, #84]	; (17130 <EIC_Handler+0x5c>)
   170da:	2200      	movs	r2, #0
   170dc:	701a      	strb	r2, [r3, #0]
   170de:	e020      	b.n	17122 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   170e0:	4b13      	ldr	r3, [pc, #76]	; (17130 <EIC_Handler+0x5c>)
   170e2:	781b      	ldrb	r3, [r3, #0]
   170e4:	0018      	movs	r0, r3
   170e6:	4b13      	ldr	r3, [pc, #76]	; (17134 <EIC_Handler+0x60>)
   170e8:	4798      	blx	r3
   170ea:	1e03      	subs	r3, r0, #0
   170ec:	d013      	beq.n	17116 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   170ee:	4b10      	ldr	r3, [pc, #64]	; (17130 <EIC_Handler+0x5c>)
   170f0:	781b      	ldrb	r3, [r3, #0]
   170f2:	0018      	movs	r0, r3
   170f4:	4b10      	ldr	r3, [pc, #64]	; (17138 <EIC_Handler+0x64>)
   170f6:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   170f8:	4b0d      	ldr	r3, [pc, #52]	; (17130 <EIC_Handler+0x5c>)
   170fa:	781b      	ldrb	r3, [r3, #0]
   170fc:	001a      	movs	r2, r3
   170fe:	4b0f      	ldr	r3, [pc, #60]	; (1713c <EIC_Handler+0x68>)
   17100:	0092      	lsls	r2, r2, #2
   17102:	58d3      	ldr	r3, [r2, r3]
   17104:	2b00      	cmp	r3, #0
   17106:	d006      	beq.n	17116 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   17108:	4b09      	ldr	r3, [pc, #36]	; (17130 <EIC_Handler+0x5c>)
   1710a:	781b      	ldrb	r3, [r3, #0]
   1710c:	001a      	movs	r2, r3
   1710e:	4b0b      	ldr	r3, [pc, #44]	; (1713c <EIC_Handler+0x68>)
   17110:	0092      	lsls	r2, r2, #2
   17112:	58d3      	ldr	r3, [r2, r3]
   17114:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   17116:	4b06      	ldr	r3, [pc, #24]	; (17130 <EIC_Handler+0x5c>)
   17118:	781b      	ldrb	r3, [r3, #0]
   1711a:	3301      	adds	r3, #1
   1711c:	b2da      	uxtb	r2, r3
   1711e:	4b04      	ldr	r3, [pc, #16]	; (17130 <EIC_Handler+0x5c>)
   17120:	701a      	strb	r2, [r3, #0]
   17122:	4b03      	ldr	r3, [pc, #12]	; (17130 <EIC_Handler+0x5c>)
   17124:	781b      	ldrb	r3, [r3, #0]
   17126:	2b0f      	cmp	r3, #15
   17128:	d9da      	bls.n	170e0 <EIC_Handler+0xc>
			}
		}
	}
}
   1712a:	46c0      	nop			; (mov r8, r8)
   1712c:	46bd      	mov	sp, r7
   1712e:	bd80      	pop	{r7, pc}
   17130:	20002f28 	.word	0x20002f28
   17134:	00017055 	.word	0x00017055
   17138:	00017099 	.word	0x00017099
   1713c:	20002f2c 	.word	0x20002f2c

00017140 <system_gclk_chan_get_config_defaults>:
{
   17140:	b580      	push	{r7, lr}
   17142:	b082      	sub	sp, #8
   17144:	af00      	add	r7, sp, #0
   17146:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   17148:	687b      	ldr	r3, [r7, #4]
   1714a:	2200      	movs	r2, #0
   1714c:	701a      	strb	r2, [r3, #0]
}
   1714e:	46c0      	nop			; (mov r8, r8)
   17150:	46bd      	mov	sp, r7
   17152:	b002      	add	sp, #8
   17154:	bd80      	pop	{r7, pc}
	...

00017158 <system_apb_clock_set_mask>:
{
   17158:	b580      	push	{r7, lr}
   1715a:	b082      	sub	sp, #8
   1715c:	af00      	add	r7, sp, #0
   1715e:	0002      	movs	r2, r0
   17160:	6039      	str	r1, [r7, #0]
   17162:	1dfb      	adds	r3, r7, #7
   17164:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   17166:	1dfb      	adds	r3, r7, #7
   17168:	781b      	ldrb	r3, [r3, #0]
   1716a:	2b01      	cmp	r3, #1
   1716c:	d00a      	beq.n	17184 <system_apb_clock_set_mask+0x2c>
   1716e:	2b02      	cmp	r3, #2
   17170:	d00f      	beq.n	17192 <system_apb_clock_set_mask+0x3a>
   17172:	2b00      	cmp	r3, #0
   17174:	d114      	bne.n	171a0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   17176:	4b0e      	ldr	r3, [pc, #56]	; (171b0 <system_apb_clock_set_mask+0x58>)
   17178:	4a0d      	ldr	r2, [pc, #52]	; (171b0 <system_apb_clock_set_mask+0x58>)
   1717a:	6991      	ldr	r1, [r2, #24]
   1717c:	683a      	ldr	r2, [r7, #0]
   1717e:	430a      	orrs	r2, r1
   17180:	619a      	str	r2, [r3, #24]
			break;
   17182:	e00f      	b.n	171a4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   17184:	4b0a      	ldr	r3, [pc, #40]	; (171b0 <system_apb_clock_set_mask+0x58>)
   17186:	4a0a      	ldr	r2, [pc, #40]	; (171b0 <system_apb_clock_set_mask+0x58>)
   17188:	69d1      	ldr	r1, [r2, #28]
   1718a:	683a      	ldr	r2, [r7, #0]
   1718c:	430a      	orrs	r2, r1
   1718e:	61da      	str	r2, [r3, #28]
			break;
   17190:	e008      	b.n	171a4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   17192:	4b07      	ldr	r3, [pc, #28]	; (171b0 <system_apb_clock_set_mask+0x58>)
   17194:	4a06      	ldr	r2, [pc, #24]	; (171b0 <system_apb_clock_set_mask+0x58>)
   17196:	6a11      	ldr	r1, [r2, #32]
   17198:	683a      	ldr	r2, [r7, #0]
   1719a:	430a      	orrs	r2, r1
   1719c:	621a      	str	r2, [r3, #32]
			break;
   1719e:	e001      	b.n	171a4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   171a0:	2317      	movs	r3, #23
   171a2:	e000      	b.n	171a6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   171a4:	2300      	movs	r3, #0
}
   171a6:	0018      	movs	r0, r3
   171a8:	46bd      	mov	sp, r7
   171aa:	b002      	add	sp, #8
   171ac:	bd80      	pop	{r7, pc}
   171ae:	46c0      	nop			; (mov r8, r8)
   171b0:	40000400 	.word	0x40000400

000171b4 <system_interrupt_enable>:
{
   171b4:	b580      	push	{r7, lr}
   171b6:	b082      	sub	sp, #8
   171b8:	af00      	add	r7, sp, #0
   171ba:	0002      	movs	r2, r0
   171bc:	1dfb      	adds	r3, r7, #7
   171be:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   171c0:	4b06      	ldr	r3, [pc, #24]	; (171dc <system_interrupt_enable+0x28>)
   171c2:	1dfa      	adds	r2, r7, #7
   171c4:	7812      	ldrb	r2, [r2, #0]
   171c6:	0011      	movs	r1, r2
   171c8:	221f      	movs	r2, #31
   171ca:	400a      	ands	r2, r1
   171cc:	2101      	movs	r1, #1
   171ce:	4091      	lsls	r1, r2
   171d0:	000a      	movs	r2, r1
   171d2:	601a      	str	r2, [r3, #0]
}
   171d4:	46c0      	nop			; (mov r8, r8)
   171d6:	46bd      	mov	sp, r7
   171d8:	b002      	add	sp, #8
   171da:	bd80      	pop	{r7, pc}
   171dc:	e000e100 	.word	0xe000e100

000171e0 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   171e0:	b580      	push	{r7, lr}
   171e2:	b082      	sub	sp, #8
   171e4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   171e6:	4b0f      	ldr	r3, [pc, #60]	; (17224 <extint_is_syncing+0x44>)
   171e8:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   171ea:	2300      	movs	r3, #0
   171ec:	607b      	str	r3, [r7, #4]
   171ee:	e011      	b.n	17214 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   171f0:	687b      	ldr	r3, [r7, #4]
   171f2:	009b      	lsls	r3, r3, #2
   171f4:	2208      	movs	r2, #8
   171f6:	4694      	mov	ip, r2
   171f8:	44bc      	add	ip, r7
   171fa:	4463      	add	r3, ip
   171fc:	3b08      	subs	r3, #8
   171fe:	681b      	ldr	r3, [r3, #0]
   17200:	785b      	ldrb	r3, [r3, #1]
   17202:	b2db      	uxtb	r3, r3
   17204:	b25b      	sxtb	r3, r3
   17206:	2b00      	cmp	r3, #0
   17208:	da01      	bge.n	1720e <extint_is_syncing+0x2e>
			return true;
   1720a:	2301      	movs	r3, #1
   1720c:	e006      	b.n	1721c <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1720e:	687b      	ldr	r3, [r7, #4]
   17210:	3301      	adds	r3, #1
   17212:	607b      	str	r3, [r7, #4]
   17214:	687b      	ldr	r3, [r7, #4]
   17216:	2b00      	cmp	r3, #0
   17218:	d0ea      	beq.n	171f0 <extint_is_syncing+0x10>
		}
	}
	return false;
   1721a:	2300      	movs	r3, #0
}
   1721c:	0018      	movs	r0, r3
   1721e:	46bd      	mov	sp, r7
   17220:	b002      	add	sp, #8
   17222:	bd80      	pop	{r7, pc}
   17224:	40001800 	.word	0x40001800

00017228 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   17228:	b580      	push	{r7, lr}
   1722a:	b084      	sub	sp, #16
   1722c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1722e:	4b2d      	ldr	r3, [pc, #180]	; (172e4 <_system_extint_init+0xbc>)
   17230:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   17232:	2140      	movs	r1, #64	; 0x40
   17234:	2000      	movs	r0, #0
   17236:	4b2c      	ldr	r3, [pc, #176]	; (172e8 <_system_extint_init+0xc0>)
   17238:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1723a:	003b      	movs	r3, r7
   1723c:	0018      	movs	r0, r3
   1723e:	4b2b      	ldr	r3, [pc, #172]	; (172ec <_system_extint_init+0xc4>)
   17240:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   17242:	003b      	movs	r3, r7
   17244:	2200      	movs	r2, #0
   17246:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   17248:	003b      	movs	r3, r7
   1724a:	0019      	movs	r1, r3
   1724c:	2005      	movs	r0, #5
   1724e:	4b28      	ldr	r3, [pc, #160]	; (172f0 <_system_extint_init+0xc8>)
   17250:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   17252:	2005      	movs	r0, #5
   17254:	4b27      	ldr	r3, [pc, #156]	; (172f4 <_system_extint_init+0xcc>)
   17256:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   17258:	2300      	movs	r3, #0
   1725a:	60fb      	str	r3, [r7, #12]
   1725c:	e018      	b.n	17290 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   1725e:	68fb      	ldr	r3, [r7, #12]
   17260:	009b      	lsls	r3, r3, #2
   17262:	2210      	movs	r2, #16
   17264:	4694      	mov	ip, r2
   17266:	44bc      	add	ip, r7
   17268:	4463      	add	r3, ip
   1726a:	3b0c      	subs	r3, #12
   1726c:	681a      	ldr	r2, [r3, #0]
   1726e:	68fb      	ldr	r3, [r7, #12]
   17270:	009b      	lsls	r3, r3, #2
   17272:	2110      	movs	r1, #16
   17274:	468c      	mov	ip, r1
   17276:	44bc      	add	ip, r7
   17278:	4463      	add	r3, ip
   1727a:	3b0c      	subs	r3, #12
   1727c:	681b      	ldr	r3, [r3, #0]
   1727e:	781b      	ldrb	r3, [r3, #0]
   17280:	b2db      	uxtb	r3, r3
   17282:	2101      	movs	r1, #1
   17284:	430b      	orrs	r3, r1
   17286:	b2db      	uxtb	r3, r3
   17288:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1728a:	68fb      	ldr	r3, [r7, #12]
   1728c:	3301      	adds	r3, #1
   1728e:	60fb      	str	r3, [r7, #12]
   17290:	68fb      	ldr	r3, [r7, #12]
   17292:	2b00      	cmp	r3, #0
   17294:	d0e3      	beq.n	1725e <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   17296:	46c0      	nop			; (mov r8, r8)
   17298:	4b17      	ldr	r3, [pc, #92]	; (172f8 <_system_extint_init+0xd0>)
   1729a:	4798      	blx	r3
   1729c:	1e03      	subs	r3, r0, #0
   1729e:	d1fb      	bne.n	17298 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   172a0:	230b      	movs	r3, #11
   172a2:	18fb      	adds	r3, r7, r3
   172a4:	2200      	movs	r2, #0
   172a6:	701a      	strb	r2, [r3, #0]
   172a8:	e00d      	b.n	172c6 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   172aa:	230b      	movs	r3, #11
   172ac:	18fb      	adds	r3, r7, r3
   172ae:	781a      	ldrb	r2, [r3, #0]
   172b0:	4b12      	ldr	r3, [pc, #72]	; (172fc <_system_extint_init+0xd4>)
   172b2:	0092      	lsls	r2, r2, #2
   172b4:	2100      	movs	r1, #0
   172b6:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   172b8:	230b      	movs	r3, #11
   172ba:	18fb      	adds	r3, r7, r3
   172bc:	781a      	ldrb	r2, [r3, #0]
   172be:	230b      	movs	r3, #11
   172c0:	18fb      	adds	r3, r7, r3
   172c2:	3201      	adds	r2, #1
   172c4:	701a      	strb	r2, [r3, #0]
   172c6:	230b      	movs	r3, #11
   172c8:	18fb      	adds	r3, r7, r3
   172ca:	781b      	ldrb	r3, [r3, #0]
   172cc:	2b0f      	cmp	r3, #15
   172ce:	d9ec      	bls.n	172aa <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   172d0:	2004      	movs	r0, #4
   172d2:	4b0b      	ldr	r3, [pc, #44]	; (17300 <_system_extint_init+0xd8>)
   172d4:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   172d6:	4b0b      	ldr	r3, [pc, #44]	; (17304 <_system_extint_init+0xdc>)
   172d8:	4798      	blx	r3
}
   172da:	46c0      	nop			; (mov r8, r8)
   172dc:	46bd      	mov	sp, r7
   172de:	b004      	add	sp, #16
   172e0:	bd80      	pop	{r7, pc}
   172e2:	46c0      	nop			; (mov r8, r8)
   172e4:	40001800 	.word	0x40001800
   172e8:	00017159 	.word	0x00017159
   172ec:	00017141 	.word	0x00017141
   172f0:	000192d5 	.word	0x000192d5
   172f4:	00019319 	.word	0x00019319
   172f8:	000171e1 	.word	0x000171e1
   172fc:	20002f2c 	.word	0x20002f2c
   17300:	000171b5 	.word	0x000171b5
   17304:	00017309 	.word	0x00017309

00017308 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   17308:	b580      	push	{r7, lr}
   1730a:	b082      	sub	sp, #8
   1730c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1730e:	4b15      	ldr	r3, [pc, #84]	; (17364 <_extint_enable+0x5c>)
   17310:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   17312:	2300      	movs	r3, #0
   17314:	607b      	str	r3, [r7, #4]
   17316:	e018      	b.n	1734a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   17318:	687b      	ldr	r3, [r7, #4]
   1731a:	009b      	lsls	r3, r3, #2
   1731c:	2208      	movs	r2, #8
   1731e:	4694      	mov	ip, r2
   17320:	44bc      	add	ip, r7
   17322:	4463      	add	r3, ip
   17324:	3b08      	subs	r3, #8
   17326:	681a      	ldr	r2, [r3, #0]
   17328:	687b      	ldr	r3, [r7, #4]
   1732a:	009b      	lsls	r3, r3, #2
   1732c:	2108      	movs	r1, #8
   1732e:	468c      	mov	ip, r1
   17330:	44bc      	add	ip, r7
   17332:	4463      	add	r3, ip
   17334:	3b08      	subs	r3, #8
   17336:	681b      	ldr	r3, [r3, #0]
   17338:	781b      	ldrb	r3, [r3, #0]
   1733a:	b2db      	uxtb	r3, r3
   1733c:	2102      	movs	r1, #2
   1733e:	430b      	orrs	r3, r1
   17340:	b2db      	uxtb	r3, r3
   17342:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   17344:	687b      	ldr	r3, [r7, #4]
   17346:	3301      	adds	r3, #1
   17348:	607b      	str	r3, [r7, #4]
   1734a:	687b      	ldr	r3, [r7, #4]
   1734c:	2b00      	cmp	r3, #0
   1734e:	d0e3      	beq.n	17318 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   17350:	46c0      	nop			; (mov r8, r8)
   17352:	4b05      	ldr	r3, [pc, #20]	; (17368 <_extint_enable+0x60>)
   17354:	4798      	blx	r3
   17356:	1e03      	subs	r3, r0, #0
   17358:	d1fb      	bne.n	17352 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   1735a:	46c0      	nop			; (mov r8, r8)
   1735c:	46bd      	mov	sp, r7
   1735e:	b002      	add	sp, #8
   17360:	bd80      	pop	{r7, pc}
   17362:	46c0      	nop			; (mov r8, r8)
   17364:	40001800 	.word	0x40001800
   17368:	000171e1 	.word	0x000171e1

0001736c <system_pinmux_get_config_defaults>:
{
   1736c:	b580      	push	{r7, lr}
   1736e:	b082      	sub	sp, #8
   17370:	af00      	add	r7, sp, #0
   17372:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   17374:	687b      	ldr	r3, [r7, #4]
   17376:	2280      	movs	r2, #128	; 0x80
   17378:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1737a:	687b      	ldr	r3, [r7, #4]
   1737c:	2200      	movs	r2, #0
   1737e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   17380:	687b      	ldr	r3, [r7, #4]
   17382:	2201      	movs	r2, #1
   17384:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   17386:	687b      	ldr	r3, [r7, #4]
   17388:	2200      	movs	r2, #0
   1738a:	70da      	strb	r2, [r3, #3]
}
   1738c:	46c0      	nop			; (mov r8, r8)
   1738e:	46bd      	mov	sp, r7
   17390:	b002      	add	sp, #8
   17392:	bd80      	pop	{r7, pc}

00017394 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   17394:	b580      	push	{r7, lr}
   17396:	b084      	sub	sp, #16
   17398:	af00      	add	r7, sp, #0
   1739a:	0002      	movs	r2, r0
   1739c:	6039      	str	r1, [r7, #0]
   1739e:	1dfb      	adds	r3, r7, #7
   173a0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   173a2:	230c      	movs	r3, #12
   173a4:	18fb      	adds	r3, r7, r3
   173a6:	0018      	movs	r0, r3
   173a8:	4b10      	ldr	r3, [pc, #64]	; (173ec <port_pin_set_config+0x58>)
   173aa:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   173ac:	230c      	movs	r3, #12
   173ae:	18fb      	adds	r3, r7, r3
   173b0:	2280      	movs	r2, #128	; 0x80
   173b2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   173b4:	683b      	ldr	r3, [r7, #0]
   173b6:	781a      	ldrb	r2, [r3, #0]
   173b8:	230c      	movs	r3, #12
   173ba:	18fb      	adds	r3, r7, r3
   173bc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   173be:	683b      	ldr	r3, [r7, #0]
   173c0:	785a      	ldrb	r2, [r3, #1]
   173c2:	230c      	movs	r3, #12
   173c4:	18fb      	adds	r3, r7, r3
   173c6:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   173c8:	683b      	ldr	r3, [r7, #0]
   173ca:	789a      	ldrb	r2, [r3, #2]
   173cc:	230c      	movs	r3, #12
   173ce:	18fb      	adds	r3, r7, r3
   173d0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   173d2:	230c      	movs	r3, #12
   173d4:	18fa      	adds	r2, r7, r3
   173d6:	1dfb      	adds	r3, r7, #7
   173d8:	781b      	ldrb	r3, [r3, #0]
   173da:	0011      	movs	r1, r2
   173dc:	0018      	movs	r0, r3
   173de:	4b04      	ldr	r3, [pc, #16]	; (173f0 <port_pin_set_config+0x5c>)
   173e0:	4798      	blx	r3
}
   173e2:	46c0      	nop			; (mov r8, r8)
   173e4:	46bd      	mov	sp, r7
   173e6:	b004      	add	sp, #16
   173e8:	bd80      	pop	{r7, pc}
   173ea:	46c0      	nop			; (mov r8, r8)
   173ec:	0001736d 	.word	0x0001736d
   173f0:	00019635 	.word	0x00019635

000173f4 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   173f4:	b580      	push	{r7, lr}
   173f6:	b086      	sub	sp, #24
   173f8:	af00      	add	r7, sp, #0
   173fa:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   173fc:	4b28      	ldr	r3, [pc, #160]	; (174a0 <_rtc_interrupt_handler+0xac>)
   173fe:	687a      	ldr	r2, [r7, #4]
   17400:	0092      	lsls	r2, r2, #2
   17402:	58d3      	ldr	r3, [r2, r3]
   17404:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   17406:	697b      	ldr	r3, [r7, #20]
   17408:	681b      	ldr	r3, [r3, #0]
   1740a:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   1740c:	230e      	movs	r3, #14
   1740e:	18fb      	adds	r3, r7, r3
   17410:	697a      	ldr	r2, [r7, #20]
   17412:	8a52      	ldrh	r2, [r2, #18]
   17414:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   17416:	697b      	ldr	r3, [r7, #20]
   17418:	8a1b      	ldrh	r3, [r3, #16]
   1741a:	b29a      	uxth	r2, r3
   1741c:	230e      	movs	r3, #14
   1741e:	18fb      	adds	r3, r7, r3
   17420:	210e      	movs	r1, #14
   17422:	1879      	adds	r1, r7, r1
   17424:	8809      	ldrh	r1, [r1, #0]
   17426:	400a      	ands	r2, r1
   17428:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   1742a:	693b      	ldr	r3, [r7, #16]
   1742c:	7a1b      	ldrb	r3, [r3, #8]
   1742e:	b2da      	uxtb	r2, r3
   17430:	230c      	movs	r3, #12
   17432:	18fb      	adds	r3, r7, r3
   17434:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   17436:	693b      	ldr	r3, [r7, #16]
   17438:	79db      	ldrb	r3, [r3, #7]
   1743a:	b2db      	uxtb	r3, r3
   1743c:	b29a      	uxth	r2, r3
   1743e:	230c      	movs	r3, #12
   17440:	18fb      	adds	r3, r7, r3
   17442:	210c      	movs	r1, #12
   17444:	1879      	adds	r1, r7, r1
   17446:	8809      	ldrh	r1, [r1, #0]
   17448:	400a      	ands	r2, r1
   1744a:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   1744c:	230c      	movs	r3, #12
   1744e:	18fb      	adds	r3, r7, r3
   17450:	881b      	ldrh	r3, [r3, #0]
   17452:	2280      	movs	r2, #128	; 0x80
   17454:	4013      	ands	r3, r2
   17456:	d00c      	beq.n	17472 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   17458:	230e      	movs	r3, #14
   1745a:	18fb      	adds	r3, r7, r3
   1745c:	881b      	ldrh	r3, [r3, #0]
   1745e:	2202      	movs	r2, #2
   17460:	4013      	ands	r3, r2
   17462:	d002      	beq.n	1746a <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   17464:	697b      	ldr	r3, [r7, #20]
   17466:	68db      	ldr	r3, [r3, #12]
   17468:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   1746a:	693b      	ldr	r3, [r7, #16]
   1746c:	2280      	movs	r2, #128	; 0x80
   1746e:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   17470:	e011      	b.n	17496 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   17472:	230c      	movs	r3, #12
   17474:	18fb      	adds	r3, r7, r3
   17476:	881b      	ldrh	r3, [r3, #0]
   17478:	2201      	movs	r2, #1
   1747a:	4013      	ands	r3, r2
   1747c:	d00b      	beq.n	17496 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   1747e:	230e      	movs	r3, #14
   17480:	18fb      	adds	r3, r7, r3
   17482:	881b      	ldrh	r3, [r3, #0]
   17484:	2201      	movs	r2, #1
   17486:	4013      	ands	r3, r2
   17488:	d002      	beq.n	17490 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   1748a:	697b      	ldr	r3, [r7, #20]
   1748c:	689b      	ldr	r3, [r3, #8]
   1748e:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   17490:	693b      	ldr	r3, [r7, #16]
   17492:	2201      	movs	r2, #1
   17494:	721a      	strb	r2, [r3, #8]
}
   17496:	46c0      	nop			; (mov r8, r8)
   17498:	46bd      	mov	sp, r7
   1749a:	b006      	add	sp, #24
   1749c:	bd80      	pop	{r7, pc}
   1749e:	46c0      	nop			; (mov r8, r8)
   174a0:	20002f6c 	.word	0x20002f6c

000174a4 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   174a4:	b580      	push	{r7, lr}
   174a6:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   174a8:	2000      	movs	r0, #0
   174aa:	4b02      	ldr	r3, [pc, #8]	; (174b4 <RTC_Handler+0x10>)
   174ac:	4798      	blx	r3
}
   174ae:	46c0      	nop			; (mov r8, r8)
   174b0:	46bd      	mov	sp, r7
   174b2:	bd80      	pop	{r7, pc}
   174b4:	000173f5 	.word	0x000173f5

000174b8 <system_gclk_chan_get_config_defaults>:
{
   174b8:	b580      	push	{r7, lr}
   174ba:	b082      	sub	sp, #8
   174bc:	af00      	add	r7, sp, #0
   174be:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   174c0:	687b      	ldr	r3, [r7, #4]
   174c2:	2200      	movs	r2, #0
   174c4:	701a      	strb	r2, [r3, #0]
}
   174c6:	46c0      	nop			; (mov r8, r8)
   174c8:	46bd      	mov	sp, r7
   174ca:	b002      	add	sp, #8
   174cc:	bd80      	pop	{r7, pc}

000174ce <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   174ce:	b5f0      	push	{r4, r5, r6, r7, lr}
   174d0:	b08d      	sub	sp, #52	; 0x34
   174d2:	af00      	add	r7, sp, #0
   174d4:	60b8      	str	r0, [r7, #8]
   174d6:	60f9      	str	r1, [r7, #12]
   174d8:	603a      	str	r2, [r7, #0]
   174da:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   174dc:	2300      	movs	r3, #0
   174de:	2400      	movs	r4, #0
   174e0:	623b      	str	r3, [r7, #32]
   174e2:	627c      	str	r4, [r7, #36]	; 0x24
   174e4:	2300      	movs	r3, #0
   174e6:	2400      	movs	r4, #0
   174e8:	61bb      	str	r3, [r7, #24]
   174ea:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   174ec:	233f      	movs	r3, #63	; 0x3f
   174ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   174f0:	e053      	b.n	1759a <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   174f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   174f4:	3b20      	subs	r3, #32
   174f6:	2b00      	cmp	r3, #0
   174f8:	db04      	blt.n	17504 <long_division+0x36>
   174fa:	2201      	movs	r2, #1
   174fc:	409a      	lsls	r2, r3
   174fe:	0013      	movs	r3, r2
   17500:	617b      	str	r3, [r7, #20]
   17502:	e00b      	b.n	1751c <long_division+0x4e>
   17504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17506:	2220      	movs	r2, #32
   17508:	1ad3      	subs	r3, r2, r3
   1750a:	2201      	movs	r2, #1
   1750c:	40da      	lsrs	r2, r3
   1750e:	0013      	movs	r3, r2
   17510:	2100      	movs	r1, #0
   17512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   17514:	4091      	lsls	r1, r2
   17516:	000a      	movs	r2, r1
   17518:	4313      	orrs	r3, r2
   1751a:	617b      	str	r3, [r7, #20]
   1751c:	2201      	movs	r2, #1
   1751e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17520:	409a      	lsls	r2, r3
   17522:	0013      	movs	r3, r2
   17524:	613b      	str	r3, [r7, #16]

		r = r << 1;
   17526:	69bb      	ldr	r3, [r7, #24]
   17528:	69fc      	ldr	r4, [r7, #28]
   1752a:	18db      	adds	r3, r3, r3
   1752c:	4164      	adcs	r4, r4
   1752e:	61bb      	str	r3, [r7, #24]
   17530:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   17532:	68bb      	ldr	r3, [r7, #8]
   17534:	693a      	ldr	r2, [r7, #16]
   17536:	401a      	ands	r2, r3
   17538:	0015      	movs	r5, r2
   1753a:	68fb      	ldr	r3, [r7, #12]
   1753c:	697a      	ldr	r2, [r7, #20]
   1753e:	401a      	ands	r2, r3
   17540:	0016      	movs	r6, r2
   17542:	002b      	movs	r3, r5
   17544:	4333      	orrs	r3, r6
   17546:	d007      	beq.n	17558 <long_division+0x8a>
			r |= 0x01;
   17548:	69bb      	ldr	r3, [r7, #24]
   1754a:	2201      	movs	r2, #1
   1754c:	4313      	orrs	r3, r2
   1754e:	61bb      	str	r3, [r7, #24]
   17550:	69fb      	ldr	r3, [r7, #28]
   17552:	2200      	movs	r2, #0
   17554:	4313      	orrs	r3, r2
   17556:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   17558:	687a      	ldr	r2, [r7, #4]
   1755a:	69fb      	ldr	r3, [r7, #28]
   1755c:	429a      	cmp	r2, r3
   1755e:	d819      	bhi.n	17594 <long_division+0xc6>
   17560:	687a      	ldr	r2, [r7, #4]
   17562:	69fb      	ldr	r3, [r7, #28]
   17564:	429a      	cmp	r2, r3
   17566:	d103      	bne.n	17570 <long_division+0xa2>
   17568:	683a      	ldr	r2, [r7, #0]
   1756a:	69bb      	ldr	r3, [r7, #24]
   1756c:	429a      	cmp	r2, r3
   1756e:	d811      	bhi.n	17594 <long_division+0xc6>
			r = r - d;
   17570:	69b9      	ldr	r1, [r7, #24]
   17572:	69fa      	ldr	r2, [r7, #28]
   17574:	683b      	ldr	r3, [r7, #0]
   17576:	687c      	ldr	r4, [r7, #4]
   17578:	1ac9      	subs	r1, r1, r3
   1757a:	41a2      	sbcs	r2, r4
   1757c:	000b      	movs	r3, r1
   1757e:	0014      	movs	r4, r2
   17580:	61bb      	str	r3, [r7, #24]
   17582:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   17584:	6a3a      	ldr	r2, [r7, #32]
   17586:	693b      	ldr	r3, [r7, #16]
   17588:	4313      	orrs	r3, r2
   1758a:	623b      	str	r3, [r7, #32]
   1758c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1758e:	697b      	ldr	r3, [r7, #20]
   17590:	4313      	orrs	r3, r2
   17592:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   17594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17596:	3b01      	subs	r3, #1
   17598:	62fb      	str	r3, [r7, #44]	; 0x2c
   1759a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1759c:	2b00      	cmp	r3, #0
   1759e:	daa8      	bge.n	174f2 <long_division+0x24>
		}
	}

	return q;
   175a0:	6a3b      	ldr	r3, [r7, #32]
   175a2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   175a4:	0018      	movs	r0, r3
   175a6:	0021      	movs	r1, r4
   175a8:	46bd      	mov	sp, r7
   175aa:	b00d      	add	sp, #52	; 0x34
   175ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

000175ae <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   175ae:	b580      	push	{r7, lr}
   175b0:	b086      	sub	sp, #24
   175b2:	af00      	add	r7, sp, #0
   175b4:	60f8      	str	r0, [r7, #12]
   175b6:	60b9      	str	r1, [r7, #8]
   175b8:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   175ba:	2316      	movs	r3, #22
   175bc:	18fb      	adds	r3, r7, r3
   175be:	2200      	movs	r2, #0
   175c0:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   175c2:	68bb      	ldr	r3, [r7, #8]
   175c4:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   175c6:	68bb      	ldr	r3, [r7, #8]
   175c8:	085a      	lsrs	r2, r3, #1
   175ca:	68fb      	ldr	r3, [r7, #12]
   175cc:	429a      	cmp	r2, r3
   175ce:	d201      	bcs.n	175d4 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   175d0:	2340      	movs	r3, #64	; 0x40
   175d2:	e026      	b.n	17622 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   175d4:	68bb      	ldr	r3, [r7, #8]
   175d6:	085b      	lsrs	r3, r3, #1
   175d8:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   175da:	e00a      	b.n	175f2 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   175dc:	693a      	ldr	r2, [r7, #16]
   175de:	68fb      	ldr	r3, [r7, #12]
   175e0:	1ad3      	subs	r3, r2, r3
   175e2:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   175e4:	2316      	movs	r3, #22
   175e6:	18fb      	adds	r3, r7, r3
   175e8:	881a      	ldrh	r2, [r3, #0]
   175ea:	2316      	movs	r3, #22
   175ec:	18fb      	adds	r3, r7, r3
   175ee:	3201      	adds	r2, #1
   175f0:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   175f2:	693a      	ldr	r2, [r7, #16]
   175f4:	68fb      	ldr	r3, [r7, #12]
   175f6:	429a      	cmp	r2, r3
   175f8:	d2f0      	bcs.n	175dc <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   175fa:	2316      	movs	r3, #22
   175fc:	18fb      	adds	r3, r7, r3
   175fe:	2216      	movs	r2, #22
   17600:	18ba      	adds	r2, r7, r2
   17602:	8812      	ldrh	r2, [r2, #0]
   17604:	3a01      	subs	r2, #1
   17606:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   17608:	2316      	movs	r3, #22
   1760a:	18fb      	adds	r3, r7, r3
   1760c:	881b      	ldrh	r3, [r3, #0]
   1760e:	2bff      	cmp	r3, #255	; 0xff
   17610:	d901      	bls.n	17616 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   17612:	2340      	movs	r3, #64	; 0x40
   17614:	e005      	b.n	17622 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   17616:	687b      	ldr	r3, [r7, #4]
   17618:	2216      	movs	r2, #22
   1761a:	18ba      	adds	r2, r7, r2
   1761c:	8812      	ldrh	r2, [r2, #0]
   1761e:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   17620:	2300      	movs	r3, #0
	}
}
   17622:	0018      	movs	r0, r3
   17624:	46bd      	mov	sp, r7
   17626:	b006      	add	sp, #24
   17628:	bd80      	pop	{r7, pc}
	...

0001762c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   1762c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1762e:	b0a1      	sub	sp, #132	; 0x84
   17630:	af00      	add	r7, sp, #0
   17632:	64f8      	str	r0, [r7, #76]	; 0x4c
   17634:	64b9      	str	r1, [r7, #72]	; 0x48
   17636:	647a      	str	r2, [r7, #68]	; 0x44
   17638:	2243      	movs	r2, #67	; 0x43
   1763a:	18ba      	adds	r2, r7, r2
   1763c:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   1763e:	2300      	movs	r3, #0
   17640:	2400      	movs	r4, #0
   17642:	673b      	str	r3, [r7, #112]	; 0x70
   17644:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   17646:	2300      	movs	r3, #0
   17648:	2400      	movs	r4, #0
   1764a:	66bb      	str	r3, [r7, #104]	; 0x68
   1764c:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   1764e:	2300      	movs	r3, #0
   17650:	2400      	movs	r4, #0
   17652:	67bb      	str	r3, [r7, #120]	; 0x78
   17654:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   17656:	2300      	movs	r3, #0
   17658:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1765a:	2358      	movs	r3, #88	; 0x58
   1765c:	2240      	movs	r2, #64	; 0x40
   1765e:	4694      	mov	ip, r2
   17660:	44bc      	add	ip, r7
   17662:	4463      	add	r3, ip
   17664:	781a      	ldrb	r2, [r3, #0]
   17666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17668:	435a      	muls	r2, r3
   1766a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1766c:	429a      	cmp	r2, r3
   1766e:	d901      	bls.n	17674 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   17670:	2340      	movs	r3, #64	; 0x40
   17672:	e0b3      	b.n	177dc <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   17674:	2343      	movs	r3, #67	; 0x43
   17676:	18fb      	adds	r3, r7, r3
   17678:	781b      	ldrb	r3, [r3, #0]
   1767a:	2b00      	cmp	r3, #0
   1767c:	d13d      	bne.n	176fa <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1767e:	2358      	movs	r3, #88	; 0x58
   17680:	2240      	movs	r2, #64	; 0x40
   17682:	4694      	mov	ip, r2
   17684:	44bc      	add	ip, r7
   17686:	4463      	add	r3, ip
   17688:	781b      	ldrb	r3, [r3, #0]
   1768a:	b2db      	uxtb	r3, r3
   1768c:	613b      	str	r3, [r7, #16]
   1768e:	2300      	movs	r3, #0
   17690:	617b      	str	r3, [r7, #20]
   17692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17694:	60bb      	str	r3, [r7, #8]
   17696:	2300      	movs	r3, #0
   17698:	60fb      	str	r3, [r7, #12]
   1769a:	4c52      	ldr	r4, [pc, #328]	; (177e4 <_sercom_get_async_baud_val+0x1b8>)
   1769c:	68ba      	ldr	r2, [r7, #8]
   1769e:	68fb      	ldr	r3, [r7, #12]
   176a0:	6938      	ldr	r0, [r7, #16]
   176a2:	6979      	ldr	r1, [r7, #20]
   176a4:	47a0      	blx	r4
   176a6:	0003      	movs	r3, r0
   176a8:	000c      	movs	r4, r1
   176aa:	001b      	movs	r3, r3
   176ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   176ae:	2300      	movs	r3, #0
   176b0:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   176b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   176b4:	603b      	str	r3, [r7, #0]
   176b6:	2300      	movs	r3, #0
   176b8:	607b      	str	r3, [r7, #4]
   176ba:	6db8      	ldr	r0, [r7, #88]	; 0x58
   176bc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   176be:	683a      	ldr	r2, [r7, #0]
   176c0:	687b      	ldr	r3, [r7, #4]
   176c2:	4c49      	ldr	r4, [pc, #292]	; (177e8 <_sercom_get_async_baud_val+0x1bc>)
   176c4:	47a0      	blx	r4
   176c6:	0003      	movs	r3, r0
   176c8:	000c      	movs	r4, r1
   176ca:	673b      	str	r3, [r7, #112]	; 0x70
   176cc:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   176ce:	2100      	movs	r1, #0
   176d0:	2201      	movs	r2, #1
   176d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   176d4:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   176d6:	1ac9      	subs	r1, r1, r3
   176d8:	41a2      	sbcs	r2, r4
   176da:	000b      	movs	r3, r1
   176dc:	0014      	movs	r4, r2
   176de:	66bb      	str	r3, [r7, #104]	; 0x68
   176e0:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   176e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   176e4:	0c1b      	lsrs	r3, r3, #16
   176e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   176e8:	0416      	lsls	r6, r2, #16
   176ea:	431e      	orrs	r6, r3
   176ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   176ee:	041d      	lsls	r5, r3, #16
   176f0:	0033      	movs	r3, r6
   176f2:	67bb      	str	r3, [r7, #120]	; 0x78
   176f4:	2300      	movs	r3, #0
   176f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   176f8:	e06a      	b.n	177d0 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   176fa:	2343      	movs	r3, #67	; 0x43
   176fc:	18fb      	adds	r3, r7, r3
   176fe:	781b      	ldrb	r3, [r3, #0]
   17700:	2b01      	cmp	r3, #1
   17702:	d165      	bne.n	177d0 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   17704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17706:	633b      	str	r3, [r7, #48]	; 0x30
   17708:	2300      	movs	r3, #0
   1770a:	637b      	str	r3, [r7, #52]	; 0x34
   1770c:	2358      	movs	r3, #88	; 0x58
   1770e:	2240      	movs	r2, #64	; 0x40
   17710:	4694      	mov	ip, r2
   17712:	44bc      	add	ip, r7
   17714:	4463      	add	r3, ip
   17716:	781b      	ldrb	r3, [r3, #0]
   17718:	b2db      	uxtb	r3, r3
   1771a:	62bb      	str	r3, [r7, #40]	; 0x28
   1771c:	2300      	movs	r3, #0
   1771e:	62fb      	str	r3, [r7, #44]	; 0x2c
   17720:	4c30      	ldr	r4, [pc, #192]	; (177e4 <_sercom_get_async_baud_val+0x1b8>)
   17722:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17726:	6b38      	ldr	r0, [r7, #48]	; 0x30
   17728:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1772a:	47a0      	blx	r4
   1772c:	0003      	movs	r3, r0
   1772e:	000c      	movs	r4, r1
   17730:	65bb      	str	r3, [r7, #88]	; 0x58
   17732:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   17734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17736:	623b      	str	r3, [r7, #32]
   17738:	2300      	movs	r3, #0
   1773a:	627b      	str	r3, [r7, #36]	; 0x24
   1773c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1773e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   17740:	001a      	movs	r2, r3
   17742:	0023      	movs	r3, r4
   17744:	6a38      	ldr	r0, [r7, #32]
   17746:	6a79      	ldr	r1, [r7, #36]	; 0x24
   17748:	4c27      	ldr	r4, [pc, #156]	; (177e8 <_sercom_get_async_baud_val+0x1bc>)
   1774a:	47a0      	blx	r4
   1774c:	0003      	movs	r3, r0
   1774e:	000c      	movs	r4, r1
   17750:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   17752:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   17754:	2380      	movs	r3, #128	; 0x80
   17756:	019b      	lsls	r3, r3, #6
   17758:	429a      	cmp	r2, r3
   1775a:	d901      	bls.n	17760 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1775c:	2340      	movs	r3, #64	; 0x40
   1775e:	e03d      	b.n	177dc <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   17760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17762:	61bb      	str	r3, [r7, #24]
   17764:	2300      	movs	r3, #0
   17766:	61fb      	str	r3, [r7, #28]
   17768:	69b9      	ldr	r1, [r7, #24]
   1776a:	69fa      	ldr	r2, [r7, #28]
   1776c:	000b      	movs	r3, r1
   1776e:	0f5b      	lsrs	r3, r3, #29
   17770:	0010      	movs	r0, r2
   17772:	00c0      	lsls	r0, r0, #3
   17774:	63f8      	str	r0, [r7, #60]	; 0x3c
   17776:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   17778:	4318      	orrs	r0, r3
   1777a:	63f8      	str	r0, [r7, #60]	; 0x3c
   1777c:	000b      	movs	r3, r1
   1777e:	00db      	lsls	r3, r3, #3
   17780:	63bb      	str	r3, [r7, #56]	; 0x38
   17782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   17784:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   17786:	001a      	movs	r2, r3
   17788:	0023      	movs	r3, r4
   1778a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1778c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1778e:	4c16      	ldr	r4, [pc, #88]	; (177e8 <_sercom_get_async_baud_val+0x1bc>)
   17790:	47a0      	blx	r4
   17792:	0003      	movs	r3, r0
   17794:	000c      	movs	r4, r1
   17796:	65bb      	str	r3, [r7, #88]	; 0x58
   17798:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   1779a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1779c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1779e:	b2d9      	uxtb	r1, r3
   177a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   177a2:	b2db      	uxtb	r3, r3
   177a4:	00db      	lsls	r3, r3, #3
   177a6:	b2da      	uxtb	r2, r3
   177a8:	2317      	movs	r3, #23
   177aa:	2040      	movs	r0, #64	; 0x40
   177ac:	4684      	mov	ip, r0
   177ae:	44bc      	add	ip, r7
   177b0:	4463      	add	r3, ip
   177b2:	1a8a      	subs	r2, r1, r2
   177b4:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   177b6:	2317      	movs	r3, #23
   177b8:	2240      	movs	r2, #64	; 0x40
   177ba:	4694      	mov	ip, r2
   177bc:	44bc      	add	ip, r7
   177be:	4463      	add	r3, ip
   177c0:	781b      	ldrb	r3, [r3, #0]
   177c2:	035b      	lsls	r3, r3, #13
   177c4:	001a      	movs	r2, r3
   177c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   177c8:	4313      	orrs	r3, r2
   177ca:	67bb      	str	r3, [r7, #120]	; 0x78
   177cc:	2300      	movs	r3, #0
   177ce:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   177d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   177d2:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   177d4:	b29a      	uxth	r2, r3
   177d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   177d8:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   177da:	2300      	movs	r3, #0
}
   177dc:	0018      	movs	r0, r3
   177de:	46bd      	mov	sp, r7
   177e0:	b021      	add	sp, #132	; 0x84
   177e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   177e4:	00019bc5 	.word	0x00019bc5
   177e8:	000174cf 	.word	0x000174cf

000177ec <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   177ec:	b580      	push	{r7, lr}
   177ee:	b084      	sub	sp, #16
   177f0:	af00      	add	r7, sp, #0
   177f2:	0002      	movs	r2, r0
   177f4:	1dfb      	adds	r3, r7, #7
   177f6:	701a      	strb	r2, [r3, #0]
   177f8:	1dbb      	adds	r3, r7, #6
   177fa:	1c0a      	adds	r2, r1, #0
   177fc:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   177fe:	4b1a      	ldr	r3, [pc, #104]	; (17868 <sercom_set_gclk_generator+0x7c>)
   17800:	781b      	ldrb	r3, [r3, #0]
   17802:	2201      	movs	r2, #1
   17804:	4053      	eors	r3, r2
   17806:	b2db      	uxtb	r3, r3
   17808:	2b00      	cmp	r3, #0
   1780a:	d103      	bne.n	17814 <sercom_set_gclk_generator+0x28>
   1780c:	1dbb      	adds	r3, r7, #6
   1780e:	781b      	ldrb	r3, [r3, #0]
   17810:	2b00      	cmp	r3, #0
   17812:	d01b      	beq.n	1784c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   17814:	230c      	movs	r3, #12
   17816:	18fb      	adds	r3, r7, r3
   17818:	0018      	movs	r0, r3
   1781a:	4b14      	ldr	r3, [pc, #80]	; (1786c <sercom_set_gclk_generator+0x80>)
   1781c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   1781e:	230c      	movs	r3, #12
   17820:	18fb      	adds	r3, r7, r3
   17822:	1dfa      	adds	r2, r7, #7
   17824:	7812      	ldrb	r2, [r2, #0]
   17826:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   17828:	230c      	movs	r3, #12
   1782a:	18fb      	adds	r3, r7, r3
   1782c:	0019      	movs	r1, r3
   1782e:	2013      	movs	r0, #19
   17830:	4b0f      	ldr	r3, [pc, #60]	; (17870 <sercom_set_gclk_generator+0x84>)
   17832:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   17834:	2013      	movs	r0, #19
   17836:	4b0f      	ldr	r3, [pc, #60]	; (17874 <sercom_set_gclk_generator+0x88>)
   17838:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   1783a:	4b0b      	ldr	r3, [pc, #44]	; (17868 <sercom_set_gclk_generator+0x7c>)
   1783c:	1dfa      	adds	r2, r7, #7
   1783e:	7812      	ldrb	r2, [r2, #0]
   17840:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   17842:	4b09      	ldr	r3, [pc, #36]	; (17868 <sercom_set_gclk_generator+0x7c>)
   17844:	2201      	movs	r2, #1
   17846:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   17848:	2300      	movs	r3, #0
   1784a:	e008      	b.n	1785e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   1784c:	4b06      	ldr	r3, [pc, #24]	; (17868 <sercom_set_gclk_generator+0x7c>)
   1784e:	785b      	ldrb	r3, [r3, #1]
   17850:	1dfa      	adds	r2, r7, #7
   17852:	7812      	ldrb	r2, [r2, #0]
   17854:	429a      	cmp	r2, r3
   17856:	d101      	bne.n	1785c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   17858:	2300      	movs	r3, #0
   1785a:	e000      	b.n	1785e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   1785c:	231d      	movs	r3, #29
}
   1785e:	0018      	movs	r0, r3
   17860:	46bd      	mov	sp, r7
   17862:	b004      	add	sp, #16
   17864:	bd80      	pop	{r7, pc}
   17866:	46c0      	nop			; (mov r8, r8)
   17868:	200029ac 	.word	0x200029ac
   1786c:	000174b9 	.word	0x000174b9
   17870:	000192d5 	.word	0x000192d5
   17874:	00019319 	.word	0x00019319

00017878 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   17878:	b580      	push	{r7, lr}
   1787a:	b082      	sub	sp, #8
   1787c:	af00      	add	r7, sp, #0
   1787e:	6078      	str	r0, [r7, #4]
   17880:	000a      	movs	r2, r1
   17882:	1cfb      	adds	r3, r7, #3
   17884:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   17886:	687b      	ldr	r3, [r7, #4]
   17888:	4a4d      	ldr	r2, [pc, #308]	; (179c0 <_sercom_get_default_pad+0x148>)
   1788a:	4293      	cmp	r3, r2
   1788c:	d03f      	beq.n	1790e <_sercom_get_default_pad+0x96>
   1788e:	4a4c      	ldr	r2, [pc, #304]	; (179c0 <_sercom_get_default_pad+0x148>)
   17890:	4293      	cmp	r3, r2
   17892:	d806      	bhi.n	178a2 <_sercom_get_default_pad+0x2a>
   17894:	4a4b      	ldr	r2, [pc, #300]	; (179c4 <_sercom_get_default_pad+0x14c>)
   17896:	4293      	cmp	r3, r2
   17898:	d00f      	beq.n	178ba <_sercom_get_default_pad+0x42>
   1789a:	4a4b      	ldr	r2, [pc, #300]	; (179c8 <_sercom_get_default_pad+0x150>)
   1789c:	4293      	cmp	r3, r2
   1789e:	d021      	beq.n	178e4 <_sercom_get_default_pad+0x6c>
   178a0:	e089      	b.n	179b6 <_sercom_get_default_pad+0x13e>
   178a2:	4a4a      	ldr	r2, [pc, #296]	; (179cc <_sercom_get_default_pad+0x154>)
   178a4:	4293      	cmp	r3, r2
   178a6:	d100      	bne.n	178aa <_sercom_get_default_pad+0x32>
   178a8:	e05b      	b.n	17962 <_sercom_get_default_pad+0xea>
   178aa:	4a49      	ldr	r2, [pc, #292]	; (179d0 <_sercom_get_default_pad+0x158>)
   178ac:	4293      	cmp	r3, r2
   178ae:	d100      	bne.n	178b2 <_sercom_get_default_pad+0x3a>
   178b0:	e06c      	b.n	1798c <_sercom_get_default_pad+0x114>
   178b2:	4a48      	ldr	r2, [pc, #288]	; (179d4 <_sercom_get_default_pad+0x15c>)
   178b4:	4293      	cmp	r3, r2
   178b6:	d03f      	beq.n	17938 <_sercom_get_default_pad+0xc0>
   178b8:	e07d      	b.n	179b6 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   178ba:	1cfb      	adds	r3, r7, #3
   178bc:	781b      	ldrb	r3, [r3, #0]
   178be:	2b01      	cmp	r3, #1
   178c0:	d00a      	beq.n	178d8 <_sercom_get_default_pad+0x60>
   178c2:	dc02      	bgt.n	178ca <_sercom_get_default_pad+0x52>
   178c4:	2b00      	cmp	r3, #0
   178c6:	d005      	beq.n	178d4 <_sercom_get_default_pad+0x5c>
   178c8:	e075      	b.n	179b6 <_sercom_get_default_pad+0x13e>
   178ca:	2b02      	cmp	r3, #2
   178cc:	d006      	beq.n	178dc <_sercom_get_default_pad+0x64>
   178ce:	2b03      	cmp	r3, #3
   178d0:	d006      	beq.n	178e0 <_sercom_get_default_pad+0x68>
   178d2:	e070      	b.n	179b6 <_sercom_get_default_pad+0x13e>
   178d4:	4b40      	ldr	r3, [pc, #256]	; (179d8 <_sercom_get_default_pad+0x160>)
   178d6:	e06f      	b.n	179b8 <_sercom_get_default_pad+0x140>
   178d8:	4b40      	ldr	r3, [pc, #256]	; (179dc <_sercom_get_default_pad+0x164>)
   178da:	e06d      	b.n	179b8 <_sercom_get_default_pad+0x140>
   178dc:	4b40      	ldr	r3, [pc, #256]	; (179e0 <_sercom_get_default_pad+0x168>)
   178de:	e06b      	b.n	179b8 <_sercom_get_default_pad+0x140>
   178e0:	4b40      	ldr	r3, [pc, #256]	; (179e4 <_sercom_get_default_pad+0x16c>)
   178e2:	e069      	b.n	179b8 <_sercom_get_default_pad+0x140>
   178e4:	1cfb      	adds	r3, r7, #3
   178e6:	781b      	ldrb	r3, [r3, #0]
   178e8:	2b01      	cmp	r3, #1
   178ea:	d00a      	beq.n	17902 <_sercom_get_default_pad+0x8a>
   178ec:	dc02      	bgt.n	178f4 <_sercom_get_default_pad+0x7c>
   178ee:	2b00      	cmp	r3, #0
   178f0:	d005      	beq.n	178fe <_sercom_get_default_pad+0x86>
   178f2:	e060      	b.n	179b6 <_sercom_get_default_pad+0x13e>
   178f4:	2b02      	cmp	r3, #2
   178f6:	d006      	beq.n	17906 <_sercom_get_default_pad+0x8e>
   178f8:	2b03      	cmp	r3, #3
   178fa:	d006      	beq.n	1790a <_sercom_get_default_pad+0x92>
   178fc:	e05b      	b.n	179b6 <_sercom_get_default_pad+0x13e>
   178fe:	2303      	movs	r3, #3
   17900:	e05a      	b.n	179b8 <_sercom_get_default_pad+0x140>
   17902:	4b39      	ldr	r3, [pc, #228]	; (179e8 <_sercom_get_default_pad+0x170>)
   17904:	e058      	b.n	179b8 <_sercom_get_default_pad+0x140>
   17906:	4b39      	ldr	r3, [pc, #228]	; (179ec <_sercom_get_default_pad+0x174>)
   17908:	e056      	b.n	179b8 <_sercom_get_default_pad+0x140>
   1790a:	4b39      	ldr	r3, [pc, #228]	; (179f0 <_sercom_get_default_pad+0x178>)
   1790c:	e054      	b.n	179b8 <_sercom_get_default_pad+0x140>
   1790e:	1cfb      	adds	r3, r7, #3
   17910:	781b      	ldrb	r3, [r3, #0]
   17912:	2b01      	cmp	r3, #1
   17914:	d00a      	beq.n	1792c <_sercom_get_default_pad+0xb4>
   17916:	dc02      	bgt.n	1791e <_sercom_get_default_pad+0xa6>
   17918:	2b00      	cmp	r3, #0
   1791a:	d005      	beq.n	17928 <_sercom_get_default_pad+0xb0>
   1791c:	e04b      	b.n	179b6 <_sercom_get_default_pad+0x13e>
   1791e:	2b02      	cmp	r3, #2
   17920:	d006      	beq.n	17930 <_sercom_get_default_pad+0xb8>
   17922:	2b03      	cmp	r3, #3
   17924:	d006      	beq.n	17934 <_sercom_get_default_pad+0xbc>
   17926:	e046      	b.n	179b6 <_sercom_get_default_pad+0x13e>
   17928:	4b32      	ldr	r3, [pc, #200]	; (179f4 <_sercom_get_default_pad+0x17c>)
   1792a:	e045      	b.n	179b8 <_sercom_get_default_pad+0x140>
   1792c:	4b32      	ldr	r3, [pc, #200]	; (179f8 <_sercom_get_default_pad+0x180>)
   1792e:	e043      	b.n	179b8 <_sercom_get_default_pad+0x140>
   17930:	4b32      	ldr	r3, [pc, #200]	; (179fc <_sercom_get_default_pad+0x184>)
   17932:	e041      	b.n	179b8 <_sercom_get_default_pad+0x140>
   17934:	4b32      	ldr	r3, [pc, #200]	; (17a00 <_sercom_get_default_pad+0x188>)
   17936:	e03f      	b.n	179b8 <_sercom_get_default_pad+0x140>
   17938:	1cfb      	adds	r3, r7, #3
   1793a:	781b      	ldrb	r3, [r3, #0]
   1793c:	2b01      	cmp	r3, #1
   1793e:	d00a      	beq.n	17956 <_sercom_get_default_pad+0xde>
   17940:	dc02      	bgt.n	17948 <_sercom_get_default_pad+0xd0>
   17942:	2b00      	cmp	r3, #0
   17944:	d005      	beq.n	17952 <_sercom_get_default_pad+0xda>
   17946:	e036      	b.n	179b6 <_sercom_get_default_pad+0x13e>
   17948:	2b02      	cmp	r3, #2
   1794a:	d006      	beq.n	1795a <_sercom_get_default_pad+0xe2>
   1794c:	2b03      	cmp	r3, #3
   1794e:	d006      	beq.n	1795e <_sercom_get_default_pad+0xe6>
   17950:	e031      	b.n	179b6 <_sercom_get_default_pad+0x13e>
   17952:	4b2c      	ldr	r3, [pc, #176]	; (17a04 <_sercom_get_default_pad+0x18c>)
   17954:	e030      	b.n	179b8 <_sercom_get_default_pad+0x140>
   17956:	4b2c      	ldr	r3, [pc, #176]	; (17a08 <_sercom_get_default_pad+0x190>)
   17958:	e02e      	b.n	179b8 <_sercom_get_default_pad+0x140>
   1795a:	4b2c      	ldr	r3, [pc, #176]	; (17a0c <_sercom_get_default_pad+0x194>)
   1795c:	e02c      	b.n	179b8 <_sercom_get_default_pad+0x140>
   1795e:	4b2c      	ldr	r3, [pc, #176]	; (17a10 <_sercom_get_default_pad+0x198>)
   17960:	e02a      	b.n	179b8 <_sercom_get_default_pad+0x140>
   17962:	1cfb      	adds	r3, r7, #3
   17964:	781b      	ldrb	r3, [r3, #0]
   17966:	2b01      	cmp	r3, #1
   17968:	d00a      	beq.n	17980 <_sercom_get_default_pad+0x108>
   1796a:	dc02      	bgt.n	17972 <_sercom_get_default_pad+0xfa>
   1796c:	2b00      	cmp	r3, #0
   1796e:	d005      	beq.n	1797c <_sercom_get_default_pad+0x104>
   17970:	e021      	b.n	179b6 <_sercom_get_default_pad+0x13e>
   17972:	2b02      	cmp	r3, #2
   17974:	d006      	beq.n	17984 <_sercom_get_default_pad+0x10c>
   17976:	2b03      	cmp	r3, #3
   17978:	d006      	beq.n	17988 <_sercom_get_default_pad+0x110>
   1797a:	e01c      	b.n	179b6 <_sercom_get_default_pad+0x13e>
   1797c:	4b25      	ldr	r3, [pc, #148]	; (17a14 <_sercom_get_default_pad+0x19c>)
   1797e:	e01b      	b.n	179b8 <_sercom_get_default_pad+0x140>
   17980:	4b25      	ldr	r3, [pc, #148]	; (17a18 <_sercom_get_default_pad+0x1a0>)
   17982:	e019      	b.n	179b8 <_sercom_get_default_pad+0x140>
   17984:	4b25      	ldr	r3, [pc, #148]	; (17a1c <_sercom_get_default_pad+0x1a4>)
   17986:	e017      	b.n	179b8 <_sercom_get_default_pad+0x140>
   17988:	4b25      	ldr	r3, [pc, #148]	; (17a20 <_sercom_get_default_pad+0x1a8>)
   1798a:	e015      	b.n	179b8 <_sercom_get_default_pad+0x140>
   1798c:	1cfb      	adds	r3, r7, #3
   1798e:	781b      	ldrb	r3, [r3, #0]
   17990:	2b01      	cmp	r3, #1
   17992:	d00a      	beq.n	179aa <_sercom_get_default_pad+0x132>
   17994:	dc02      	bgt.n	1799c <_sercom_get_default_pad+0x124>
   17996:	2b00      	cmp	r3, #0
   17998:	d005      	beq.n	179a6 <_sercom_get_default_pad+0x12e>
   1799a:	e00c      	b.n	179b6 <_sercom_get_default_pad+0x13e>
   1799c:	2b02      	cmp	r3, #2
   1799e:	d006      	beq.n	179ae <_sercom_get_default_pad+0x136>
   179a0:	2b03      	cmp	r3, #3
   179a2:	d006      	beq.n	179b2 <_sercom_get_default_pad+0x13a>
   179a4:	e007      	b.n	179b6 <_sercom_get_default_pad+0x13e>
   179a6:	4b1f      	ldr	r3, [pc, #124]	; (17a24 <_sercom_get_default_pad+0x1ac>)
   179a8:	e006      	b.n	179b8 <_sercom_get_default_pad+0x140>
   179aa:	4b1f      	ldr	r3, [pc, #124]	; (17a28 <_sercom_get_default_pad+0x1b0>)
   179ac:	e004      	b.n	179b8 <_sercom_get_default_pad+0x140>
   179ae:	4b1f      	ldr	r3, [pc, #124]	; (17a2c <_sercom_get_default_pad+0x1b4>)
   179b0:	e002      	b.n	179b8 <_sercom_get_default_pad+0x140>
   179b2:	4b1f      	ldr	r3, [pc, #124]	; (17a30 <_sercom_get_default_pad+0x1b8>)
   179b4:	e000      	b.n	179b8 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   179b6:	2300      	movs	r3, #0
}
   179b8:	0018      	movs	r0, r3
   179ba:	46bd      	mov	sp, r7
   179bc:	b002      	add	sp, #8
   179be:	bd80      	pop	{r7, pc}
   179c0:	42001000 	.word	0x42001000
   179c4:	42000800 	.word	0x42000800
   179c8:	42000c00 	.word	0x42000c00
   179cc:	42001800 	.word	0x42001800
   179d0:	42001c00 	.word	0x42001c00
   179d4:	42001400 	.word	0x42001400
   179d8:	00040003 	.word	0x00040003
   179dc:	00050003 	.word	0x00050003
   179e0:	00060003 	.word	0x00060003
   179e4:	00070003 	.word	0x00070003
   179e8:	00010003 	.word	0x00010003
   179ec:	001e0003 	.word	0x001e0003
   179f0:	001f0003 	.word	0x001f0003
   179f4:	00080003 	.word	0x00080003
   179f8:	00090003 	.word	0x00090003
   179fc:	000a0003 	.word	0x000a0003
   17a00:	000b0003 	.word	0x000b0003
   17a04:	00100003 	.word	0x00100003
   17a08:	00110003 	.word	0x00110003
   17a0c:	00120003 	.word	0x00120003
   17a10:	00130003 	.word	0x00130003
   17a14:	000c0003 	.word	0x000c0003
   17a18:	000d0003 	.word	0x000d0003
   17a1c:	000e0003 	.word	0x000e0003
   17a20:	000f0003 	.word	0x000f0003
   17a24:	00160003 	.word	0x00160003
   17a28:	00170003 	.word	0x00170003
   17a2c:	00180003 	.word	0x00180003
   17a30:	00190003 	.word	0x00190003

00017a34 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   17a34:	b590      	push	{r4, r7, lr}
   17a36:	b08b      	sub	sp, #44	; 0x2c
   17a38:	af00      	add	r7, sp, #0
   17a3a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   17a3c:	230c      	movs	r3, #12
   17a3e:	18fb      	adds	r3, r7, r3
   17a40:	4a0f      	ldr	r2, [pc, #60]	; (17a80 <_sercom_get_sercom_inst_index+0x4c>)
   17a42:	ca13      	ldmia	r2!, {r0, r1, r4}
   17a44:	c313      	stmia	r3!, {r0, r1, r4}
   17a46:	ca13      	ldmia	r2!, {r0, r1, r4}
   17a48:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   17a4a:	2300      	movs	r3, #0
   17a4c:	627b      	str	r3, [r7, #36]	; 0x24
   17a4e:	e00e      	b.n	17a6e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   17a50:	230c      	movs	r3, #12
   17a52:	18fb      	adds	r3, r7, r3
   17a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17a56:	0092      	lsls	r2, r2, #2
   17a58:	58d3      	ldr	r3, [r2, r3]
   17a5a:	001a      	movs	r2, r3
   17a5c:	687b      	ldr	r3, [r7, #4]
   17a5e:	429a      	cmp	r2, r3
   17a60:	d102      	bne.n	17a68 <_sercom_get_sercom_inst_index+0x34>
			return i;
   17a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17a64:	b2db      	uxtb	r3, r3
   17a66:	e006      	b.n	17a76 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   17a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17a6a:	3301      	adds	r3, #1
   17a6c:	627b      	str	r3, [r7, #36]	; 0x24
   17a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17a70:	2b05      	cmp	r3, #5
   17a72:	d9ed      	bls.n	17a50 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   17a74:	2300      	movs	r3, #0
}
   17a76:	0018      	movs	r0, r3
   17a78:	46bd      	mov	sp, r7
   17a7a:	b00b      	add	sp, #44	; 0x2c
   17a7c:	bd90      	pop	{r4, r7, pc}
   17a7e:	46c0      	nop			; (mov r8, r8)
   17a80:	0001bf98 	.word	0x0001bf98

00017a84 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   17a84:	b580      	push	{r7, lr}
   17a86:	b082      	sub	sp, #8
   17a88:	af00      	add	r7, sp, #0
   17a8a:	0002      	movs	r2, r0
   17a8c:	1dfb      	adds	r3, r7, #7
   17a8e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   17a90:	46c0      	nop			; (mov r8, r8)
   17a92:	46bd      	mov	sp, r7
   17a94:	b002      	add	sp, #8
   17a96:	bd80      	pop	{r7, pc}

00017a98 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   17a98:	b580      	push	{r7, lr}
   17a9a:	b084      	sub	sp, #16
   17a9c:	af00      	add	r7, sp, #0
   17a9e:	0002      	movs	r2, r0
   17aa0:	6039      	str	r1, [r7, #0]
   17aa2:	1dfb      	adds	r3, r7, #7
   17aa4:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   17aa6:	4b13      	ldr	r3, [pc, #76]	; (17af4 <_sercom_set_handler+0x5c>)
   17aa8:	781b      	ldrb	r3, [r3, #0]
   17aaa:	2201      	movs	r2, #1
   17aac:	4053      	eors	r3, r2
   17aae:	b2db      	uxtb	r3, r3
   17ab0:	2b00      	cmp	r3, #0
   17ab2:	d015      	beq.n	17ae0 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   17ab4:	2300      	movs	r3, #0
   17ab6:	60fb      	str	r3, [r7, #12]
   17ab8:	e00c      	b.n	17ad4 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   17aba:	4b0f      	ldr	r3, [pc, #60]	; (17af8 <_sercom_set_handler+0x60>)
   17abc:	68fa      	ldr	r2, [r7, #12]
   17abe:	0092      	lsls	r2, r2, #2
   17ac0:	490e      	ldr	r1, [pc, #56]	; (17afc <_sercom_set_handler+0x64>)
   17ac2:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   17ac4:	4b0e      	ldr	r3, [pc, #56]	; (17b00 <_sercom_set_handler+0x68>)
   17ac6:	68fa      	ldr	r2, [r7, #12]
   17ac8:	0092      	lsls	r2, r2, #2
   17aca:	2100      	movs	r1, #0
   17acc:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   17ace:	68fb      	ldr	r3, [r7, #12]
   17ad0:	3301      	adds	r3, #1
   17ad2:	60fb      	str	r3, [r7, #12]
   17ad4:	68fb      	ldr	r3, [r7, #12]
   17ad6:	2b05      	cmp	r3, #5
   17ad8:	d9ef      	bls.n	17aba <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   17ada:	4b06      	ldr	r3, [pc, #24]	; (17af4 <_sercom_set_handler+0x5c>)
   17adc:	2201      	movs	r2, #1
   17ade:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   17ae0:	1dfb      	adds	r3, r7, #7
   17ae2:	781a      	ldrb	r2, [r3, #0]
   17ae4:	4b04      	ldr	r3, [pc, #16]	; (17af8 <_sercom_set_handler+0x60>)
   17ae6:	0092      	lsls	r2, r2, #2
   17ae8:	6839      	ldr	r1, [r7, #0]
   17aea:	50d1      	str	r1, [r2, r3]
}
   17aec:	46c0      	nop			; (mov r8, r8)
   17aee:	46bd      	mov	sp, r7
   17af0:	b004      	add	sp, #16
   17af2:	bd80      	pop	{r7, pc}
   17af4:	200029ae 	.word	0x200029ae
   17af8:	200029b0 	.word	0x200029b0
   17afc:	00017a85 	.word	0x00017a85
   17b00:	20002f70 	.word	0x20002f70

00017b04 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   17b04:	b590      	push	{r4, r7, lr}
   17b06:	b085      	sub	sp, #20
   17b08:	af00      	add	r7, sp, #0
   17b0a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   17b0c:	2308      	movs	r3, #8
   17b0e:	18fb      	adds	r3, r7, r3
   17b10:	4a0b      	ldr	r2, [pc, #44]	; (17b40 <_sercom_get_interrupt_vector+0x3c>)
   17b12:	6811      	ldr	r1, [r2, #0]
   17b14:	6019      	str	r1, [r3, #0]
   17b16:	8892      	ldrh	r2, [r2, #4]
   17b18:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   17b1a:	230f      	movs	r3, #15
   17b1c:	18fc      	adds	r4, r7, r3
   17b1e:	687b      	ldr	r3, [r7, #4]
   17b20:	0018      	movs	r0, r3
   17b22:	4b08      	ldr	r3, [pc, #32]	; (17b44 <_sercom_get_interrupt_vector+0x40>)
   17b24:	4798      	blx	r3
   17b26:	0003      	movs	r3, r0
   17b28:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   17b2a:	230f      	movs	r3, #15
   17b2c:	18fb      	adds	r3, r7, r3
   17b2e:	781b      	ldrb	r3, [r3, #0]
   17b30:	2208      	movs	r2, #8
   17b32:	18ba      	adds	r2, r7, r2
   17b34:	5cd3      	ldrb	r3, [r2, r3]
   17b36:	b25b      	sxtb	r3, r3
}
   17b38:	0018      	movs	r0, r3
   17b3a:	46bd      	mov	sp, r7
   17b3c:	b005      	add	sp, #20
   17b3e:	bd90      	pop	{r4, r7, pc}
   17b40:	0001bfb0 	.word	0x0001bfb0
   17b44:	00017a35 	.word	0x00017a35

00017b48 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   17b48:	b580      	push	{r7, lr}
   17b4a:	af00      	add	r7, sp, #0
   17b4c:	4b03      	ldr	r3, [pc, #12]	; (17b5c <SERCOM0_Handler+0x14>)
   17b4e:	681b      	ldr	r3, [r3, #0]
   17b50:	2000      	movs	r0, #0
   17b52:	4798      	blx	r3
   17b54:	46c0      	nop			; (mov r8, r8)
   17b56:	46bd      	mov	sp, r7
   17b58:	bd80      	pop	{r7, pc}
   17b5a:	46c0      	nop			; (mov r8, r8)
   17b5c:	200029b0 	.word	0x200029b0

00017b60 <SERCOM1_Handler>:
   17b60:	b580      	push	{r7, lr}
   17b62:	af00      	add	r7, sp, #0
   17b64:	4b03      	ldr	r3, [pc, #12]	; (17b74 <SERCOM1_Handler+0x14>)
   17b66:	685b      	ldr	r3, [r3, #4]
   17b68:	2001      	movs	r0, #1
   17b6a:	4798      	blx	r3
   17b6c:	46c0      	nop			; (mov r8, r8)
   17b6e:	46bd      	mov	sp, r7
   17b70:	bd80      	pop	{r7, pc}
   17b72:	46c0      	nop			; (mov r8, r8)
   17b74:	200029b0 	.word	0x200029b0

00017b78 <SERCOM2_Handler>:
   17b78:	b580      	push	{r7, lr}
   17b7a:	af00      	add	r7, sp, #0
   17b7c:	4b03      	ldr	r3, [pc, #12]	; (17b8c <SERCOM2_Handler+0x14>)
   17b7e:	689b      	ldr	r3, [r3, #8]
   17b80:	2002      	movs	r0, #2
   17b82:	4798      	blx	r3
   17b84:	46c0      	nop			; (mov r8, r8)
   17b86:	46bd      	mov	sp, r7
   17b88:	bd80      	pop	{r7, pc}
   17b8a:	46c0      	nop			; (mov r8, r8)
   17b8c:	200029b0 	.word	0x200029b0

00017b90 <SERCOM3_Handler>:
   17b90:	b580      	push	{r7, lr}
   17b92:	af00      	add	r7, sp, #0
   17b94:	4b03      	ldr	r3, [pc, #12]	; (17ba4 <SERCOM3_Handler+0x14>)
   17b96:	68db      	ldr	r3, [r3, #12]
   17b98:	2003      	movs	r0, #3
   17b9a:	4798      	blx	r3
   17b9c:	46c0      	nop			; (mov r8, r8)
   17b9e:	46bd      	mov	sp, r7
   17ba0:	bd80      	pop	{r7, pc}
   17ba2:	46c0      	nop			; (mov r8, r8)
   17ba4:	200029b0 	.word	0x200029b0

00017ba8 <SERCOM4_Handler>:
   17ba8:	b580      	push	{r7, lr}
   17baa:	af00      	add	r7, sp, #0
   17bac:	4b03      	ldr	r3, [pc, #12]	; (17bbc <SERCOM4_Handler+0x14>)
   17bae:	691b      	ldr	r3, [r3, #16]
   17bb0:	2004      	movs	r0, #4
   17bb2:	4798      	blx	r3
   17bb4:	46c0      	nop			; (mov r8, r8)
   17bb6:	46bd      	mov	sp, r7
   17bb8:	bd80      	pop	{r7, pc}
   17bba:	46c0      	nop			; (mov r8, r8)
   17bbc:	200029b0 	.word	0x200029b0

00017bc0 <SERCOM5_Handler>:
   17bc0:	b580      	push	{r7, lr}
   17bc2:	af00      	add	r7, sp, #0
   17bc4:	4b03      	ldr	r3, [pc, #12]	; (17bd4 <SERCOM5_Handler+0x14>)
   17bc6:	695b      	ldr	r3, [r3, #20]
   17bc8:	2005      	movs	r0, #5
   17bca:	4798      	blx	r3
   17bcc:	46c0      	nop			; (mov r8, r8)
   17bce:	46bd      	mov	sp, r7
   17bd0:	bd80      	pop	{r7, pc}
   17bd2:	46c0      	nop			; (mov r8, r8)
   17bd4:	200029b0 	.word	0x200029b0

00017bd8 <system_gclk_chan_get_config_defaults>:
{
   17bd8:	b580      	push	{r7, lr}
   17bda:	b082      	sub	sp, #8
   17bdc:	af00      	add	r7, sp, #0
   17bde:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   17be0:	687b      	ldr	r3, [r7, #4]
   17be2:	2200      	movs	r2, #0
   17be4:	701a      	strb	r2, [r3, #0]
}
   17be6:	46c0      	nop			; (mov r8, r8)
   17be8:	46bd      	mov	sp, r7
   17bea:	b002      	add	sp, #8
   17bec:	bd80      	pop	{r7, pc}
	...

00017bf0 <system_apb_clock_set_mask>:
{
   17bf0:	b580      	push	{r7, lr}
   17bf2:	b082      	sub	sp, #8
   17bf4:	af00      	add	r7, sp, #0
   17bf6:	0002      	movs	r2, r0
   17bf8:	6039      	str	r1, [r7, #0]
   17bfa:	1dfb      	adds	r3, r7, #7
   17bfc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   17bfe:	1dfb      	adds	r3, r7, #7
   17c00:	781b      	ldrb	r3, [r3, #0]
   17c02:	2b01      	cmp	r3, #1
   17c04:	d00a      	beq.n	17c1c <system_apb_clock_set_mask+0x2c>
   17c06:	2b02      	cmp	r3, #2
   17c08:	d00f      	beq.n	17c2a <system_apb_clock_set_mask+0x3a>
   17c0a:	2b00      	cmp	r3, #0
   17c0c:	d114      	bne.n	17c38 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   17c0e:	4b0e      	ldr	r3, [pc, #56]	; (17c48 <system_apb_clock_set_mask+0x58>)
   17c10:	4a0d      	ldr	r2, [pc, #52]	; (17c48 <system_apb_clock_set_mask+0x58>)
   17c12:	6991      	ldr	r1, [r2, #24]
   17c14:	683a      	ldr	r2, [r7, #0]
   17c16:	430a      	orrs	r2, r1
   17c18:	619a      	str	r2, [r3, #24]
			break;
   17c1a:	e00f      	b.n	17c3c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   17c1c:	4b0a      	ldr	r3, [pc, #40]	; (17c48 <system_apb_clock_set_mask+0x58>)
   17c1e:	4a0a      	ldr	r2, [pc, #40]	; (17c48 <system_apb_clock_set_mask+0x58>)
   17c20:	69d1      	ldr	r1, [r2, #28]
   17c22:	683a      	ldr	r2, [r7, #0]
   17c24:	430a      	orrs	r2, r1
   17c26:	61da      	str	r2, [r3, #28]
			break;
   17c28:	e008      	b.n	17c3c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   17c2a:	4b07      	ldr	r3, [pc, #28]	; (17c48 <system_apb_clock_set_mask+0x58>)
   17c2c:	4a06      	ldr	r2, [pc, #24]	; (17c48 <system_apb_clock_set_mask+0x58>)
   17c2e:	6a11      	ldr	r1, [r2, #32]
   17c30:	683a      	ldr	r2, [r7, #0]
   17c32:	430a      	orrs	r2, r1
   17c34:	621a      	str	r2, [r3, #32]
			break;
   17c36:	e001      	b.n	17c3c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   17c38:	2317      	movs	r3, #23
   17c3a:	e000      	b.n	17c3e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   17c3c:	2300      	movs	r3, #0
}
   17c3e:	0018      	movs	r0, r3
   17c40:	46bd      	mov	sp, r7
   17c42:	b002      	add	sp, #8
   17c44:	bd80      	pop	{r7, pc}
   17c46:	46c0      	nop			; (mov r8, r8)
   17c48:	40000400 	.word	0x40000400

00017c4c <system_pinmux_get_config_defaults>:
{
   17c4c:	b580      	push	{r7, lr}
   17c4e:	b082      	sub	sp, #8
   17c50:	af00      	add	r7, sp, #0
   17c52:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   17c54:	687b      	ldr	r3, [r7, #4]
   17c56:	2280      	movs	r2, #128	; 0x80
   17c58:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   17c5a:	687b      	ldr	r3, [r7, #4]
   17c5c:	2200      	movs	r2, #0
   17c5e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   17c60:	687b      	ldr	r3, [r7, #4]
   17c62:	2201      	movs	r2, #1
   17c64:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   17c66:	687b      	ldr	r3, [r7, #4]
   17c68:	2200      	movs	r2, #0
   17c6a:	70da      	strb	r2, [r3, #3]
}
   17c6c:	46c0      	nop			; (mov r8, r8)
   17c6e:	46bd      	mov	sp, r7
   17c70:	b002      	add	sp, #8
   17c72:	bd80      	pop	{r7, pc}

00017c74 <system_is_debugger_present>:
{
   17c74:	b580      	push	{r7, lr}
   17c76:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   17c78:	4b05      	ldr	r3, [pc, #20]	; (17c90 <system_is_debugger_present+0x1c>)
   17c7a:	789b      	ldrb	r3, [r3, #2]
   17c7c:	b2db      	uxtb	r3, r3
   17c7e:	001a      	movs	r2, r3
   17c80:	2302      	movs	r3, #2
   17c82:	4013      	ands	r3, r2
   17c84:	1e5a      	subs	r2, r3, #1
   17c86:	4193      	sbcs	r3, r2
   17c88:	b2db      	uxtb	r3, r3
}
   17c8a:	0018      	movs	r0, r3
   17c8c:	46bd      	mov	sp, r7
   17c8e:	bd80      	pop	{r7, pc}
   17c90:	41002000 	.word	0x41002000

00017c94 <usart_is_syncing>:
{
   17c94:	b580      	push	{r7, lr}
   17c96:	b084      	sub	sp, #16
   17c98:	af00      	add	r7, sp, #0
   17c9a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   17c9c:	687b      	ldr	r3, [r7, #4]
   17c9e:	681b      	ldr	r3, [r3, #0]
   17ca0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   17ca2:	68fb      	ldr	r3, [r7, #12]
   17ca4:	69db      	ldr	r3, [r3, #28]
   17ca6:	1e5a      	subs	r2, r3, #1
   17ca8:	4193      	sbcs	r3, r2
   17caa:	b2db      	uxtb	r3, r3
}
   17cac:	0018      	movs	r0, r3
   17cae:	46bd      	mov	sp, r7
   17cb0:	b004      	add	sp, #16
   17cb2:	bd80      	pop	{r7, pc}

00017cb4 <_usart_wait_for_sync>:
{
   17cb4:	b580      	push	{r7, lr}
   17cb6:	b082      	sub	sp, #8
   17cb8:	af00      	add	r7, sp, #0
   17cba:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   17cbc:	46c0      	nop			; (mov r8, r8)
   17cbe:	687b      	ldr	r3, [r7, #4]
   17cc0:	0018      	movs	r0, r3
   17cc2:	4b04      	ldr	r3, [pc, #16]	; (17cd4 <_usart_wait_for_sync+0x20>)
   17cc4:	4798      	blx	r3
   17cc6:	1e03      	subs	r3, r0, #0
   17cc8:	d1f9      	bne.n	17cbe <_usart_wait_for_sync+0xa>
}
   17cca:	46c0      	nop			; (mov r8, r8)
   17ccc:	46bd      	mov	sp, r7
   17cce:	b002      	add	sp, #8
   17cd0:	bd80      	pop	{r7, pc}
   17cd2:	46c0      	nop			; (mov r8, r8)
   17cd4:	00017c95 	.word	0x00017c95

00017cd8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   17cd8:	b5b0      	push	{r4, r5, r7, lr}
   17cda:	b08c      	sub	sp, #48	; 0x30
   17cdc:	af02      	add	r7, sp, #8
   17cde:	6078      	str	r0, [r7, #4]
   17ce0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   17ce2:	687b      	ldr	r3, [r7, #4]
   17ce4:	681b      	ldr	r3, [r3, #0]
   17ce6:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   17ce8:	687b      	ldr	r3, [r7, #4]
   17cea:	681b      	ldr	r3, [r3, #0]
   17cec:	0018      	movs	r0, r3
   17cee:	4bab      	ldr	r3, [pc, #684]	; (17f9c <_usart_set_config+0x2c4>)
   17cf0:	4798      	blx	r3
   17cf2:	0003      	movs	r3, r0
   17cf4:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   17cf6:	697b      	ldr	r3, [r7, #20]
   17cf8:	3314      	adds	r3, #20
   17cfa:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   17cfc:	2300      	movs	r3, #0
   17cfe:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   17d00:	2300      	movs	r3, #0
   17d02:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   17d04:	230a      	movs	r3, #10
   17d06:	18fb      	adds	r3, r7, r3
   17d08:	2200      	movs	r2, #0
   17d0a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   17d0c:	231f      	movs	r3, #31
   17d0e:	18fb      	adds	r3, r7, r3
   17d10:	2200      	movs	r2, #0
   17d12:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   17d14:	231e      	movs	r3, #30
   17d16:	18fb      	adds	r3, r7, r3
   17d18:	2210      	movs	r2, #16
   17d1a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   17d1c:	683b      	ldr	r3, [r7, #0]
   17d1e:	8a1b      	ldrh	r3, [r3, #16]
   17d20:	2280      	movs	r2, #128	; 0x80
   17d22:	01d2      	lsls	r2, r2, #7
   17d24:	4293      	cmp	r3, r2
   17d26:	d01c      	beq.n	17d62 <_usart_set_config+0x8a>
   17d28:	2280      	movs	r2, #128	; 0x80
   17d2a:	01d2      	lsls	r2, r2, #7
   17d2c:	4293      	cmp	r3, r2
   17d2e:	dc06      	bgt.n	17d3e <_usart_set_config+0x66>
   17d30:	2b00      	cmp	r3, #0
   17d32:	d00d      	beq.n	17d50 <_usart_set_config+0x78>
   17d34:	2280      	movs	r2, #128	; 0x80
   17d36:	0192      	lsls	r2, r2, #6
   17d38:	4293      	cmp	r3, r2
   17d3a:	d024      	beq.n	17d86 <_usart_set_config+0xae>
   17d3c:	e035      	b.n	17daa <_usart_set_config+0xd2>
   17d3e:	22c0      	movs	r2, #192	; 0xc0
   17d40:	01d2      	lsls	r2, r2, #7
   17d42:	4293      	cmp	r3, r2
   17d44:	d028      	beq.n	17d98 <_usart_set_config+0xc0>
   17d46:	2280      	movs	r2, #128	; 0x80
   17d48:	0212      	lsls	r2, r2, #8
   17d4a:	4293      	cmp	r3, r2
   17d4c:	d012      	beq.n	17d74 <_usart_set_config+0x9c>
   17d4e:	e02c      	b.n	17daa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   17d50:	231f      	movs	r3, #31
   17d52:	18fb      	adds	r3, r7, r3
   17d54:	2200      	movs	r2, #0
   17d56:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   17d58:	231e      	movs	r3, #30
   17d5a:	18fb      	adds	r3, r7, r3
   17d5c:	2210      	movs	r2, #16
   17d5e:	701a      	strb	r2, [r3, #0]
			break;
   17d60:	e023      	b.n	17daa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   17d62:	231f      	movs	r3, #31
   17d64:	18fb      	adds	r3, r7, r3
   17d66:	2200      	movs	r2, #0
   17d68:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   17d6a:	231e      	movs	r3, #30
   17d6c:	18fb      	adds	r3, r7, r3
   17d6e:	2208      	movs	r2, #8
   17d70:	701a      	strb	r2, [r3, #0]
			break;
   17d72:	e01a      	b.n	17daa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   17d74:	231f      	movs	r3, #31
   17d76:	18fb      	adds	r3, r7, r3
   17d78:	2200      	movs	r2, #0
   17d7a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   17d7c:	231e      	movs	r3, #30
   17d7e:	18fb      	adds	r3, r7, r3
   17d80:	2203      	movs	r2, #3
   17d82:	701a      	strb	r2, [r3, #0]
			break;
   17d84:	e011      	b.n	17daa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   17d86:	231f      	movs	r3, #31
   17d88:	18fb      	adds	r3, r7, r3
   17d8a:	2201      	movs	r2, #1
   17d8c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   17d8e:	231e      	movs	r3, #30
   17d90:	18fb      	adds	r3, r7, r3
   17d92:	2210      	movs	r2, #16
   17d94:	701a      	strb	r2, [r3, #0]
			break;
   17d96:	e008      	b.n	17daa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   17d98:	231f      	movs	r3, #31
   17d9a:	18fb      	adds	r3, r7, r3
   17d9c:	2201      	movs	r2, #1
   17d9e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   17da0:	231e      	movs	r3, #30
   17da2:	18fb      	adds	r3, r7, r3
   17da4:	2208      	movs	r2, #8
   17da6:	701a      	strb	r2, [r3, #0]
			break;
   17da8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   17daa:	683b      	ldr	r3, [r7, #0]
   17dac:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   17dae:	683b      	ldr	r3, [r7, #0]
   17db0:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   17db2:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   17db4:	683b      	ldr	r3, [r7, #0]
   17db6:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   17db8:	4313      	orrs	r3, r2
		config->sample_rate |
   17dba:	683a      	ldr	r2, [r7, #0]
   17dbc:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   17dbe:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   17dc0:	683a      	ldr	r2, [r7, #0]
   17dc2:	7e12      	ldrb	r2, [r2, #24]
   17dc4:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   17dc6:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   17dc8:	683a      	ldr	r2, [r7, #0]
   17dca:	2126      	movs	r1, #38	; 0x26
   17dcc:	5c52      	ldrb	r2, [r2, r1]
   17dce:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   17dd0:	4313      	orrs	r3, r2
   17dd2:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   17dd4:	231d      	movs	r3, #29
   17dd6:	18fb      	adds	r3, r7, r3
   17dd8:	2200      	movs	r2, #0
   17dda:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   17ddc:	683b      	ldr	r3, [r7, #0]
   17dde:	685b      	ldr	r3, [r3, #4]
   17de0:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   17de2:	68fb      	ldr	r3, [r7, #12]
   17de4:	2b00      	cmp	r3, #0
   17de6:	d01e      	beq.n	17e26 <_usart_set_config+0x14e>
   17de8:	2280      	movs	r2, #128	; 0x80
   17dea:	0552      	lsls	r2, r2, #21
   17dec:	4293      	cmp	r3, r2
   17dee:	d14f      	bne.n	17e90 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   17df0:	683b      	ldr	r3, [r7, #0]
   17df2:	2227      	movs	r2, #39	; 0x27
   17df4:	5c9b      	ldrb	r3, [r3, r2]
   17df6:	2201      	movs	r2, #1
   17df8:	4053      	eors	r3, r2
   17dfa:	b2db      	uxtb	r3, r3
   17dfc:	2b00      	cmp	r3, #0
   17dfe:	d046      	beq.n	17e8e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   17e00:	683b      	ldr	r3, [r7, #0]
   17e02:	6a1d      	ldr	r5, [r3, #32]
   17e04:	693b      	ldr	r3, [r7, #16]
   17e06:	b2db      	uxtb	r3, r3
   17e08:	0018      	movs	r0, r3
   17e0a:	4b65      	ldr	r3, [pc, #404]	; (17fa0 <_usart_set_config+0x2c8>)
   17e0c:	4798      	blx	r3
   17e0e:	0001      	movs	r1, r0
   17e10:	231d      	movs	r3, #29
   17e12:	18fc      	adds	r4, r7, r3
   17e14:	230a      	movs	r3, #10
   17e16:	18fb      	adds	r3, r7, r3
   17e18:	001a      	movs	r2, r3
   17e1a:	0028      	movs	r0, r5
   17e1c:	4b61      	ldr	r3, [pc, #388]	; (17fa4 <_usart_set_config+0x2cc>)
   17e1e:	4798      	blx	r3
   17e20:	0003      	movs	r3, r0
   17e22:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   17e24:	e033      	b.n	17e8e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   17e26:	683b      	ldr	r3, [r7, #0]
   17e28:	2227      	movs	r2, #39	; 0x27
   17e2a:	5c9b      	ldrb	r3, [r3, r2]
   17e2c:	2b00      	cmp	r3, #0
   17e2e:	d014      	beq.n	17e5a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   17e30:	683b      	ldr	r3, [r7, #0]
   17e32:	6a18      	ldr	r0, [r3, #32]
   17e34:	683b      	ldr	r3, [r7, #0]
   17e36:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   17e38:	231d      	movs	r3, #29
   17e3a:	18fc      	adds	r4, r7, r3
   17e3c:	231f      	movs	r3, #31
   17e3e:	18fb      	adds	r3, r7, r3
   17e40:	781d      	ldrb	r5, [r3, #0]
   17e42:	230a      	movs	r3, #10
   17e44:	18fa      	adds	r2, r7, r3
   17e46:	231e      	movs	r3, #30
   17e48:	18fb      	adds	r3, r7, r3
   17e4a:	781b      	ldrb	r3, [r3, #0]
   17e4c:	9300      	str	r3, [sp, #0]
   17e4e:	002b      	movs	r3, r5
   17e50:	4d55      	ldr	r5, [pc, #340]	; (17fa8 <_usart_set_config+0x2d0>)
   17e52:	47a8      	blx	r5
   17e54:	0003      	movs	r3, r0
   17e56:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   17e58:	e01a      	b.n	17e90 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   17e5a:	683b      	ldr	r3, [r7, #0]
   17e5c:	6a1d      	ldr	r5, [r3, #32]
   17e5e:	693b      	ldr	r3, [r7, #16]
   17e60:	b2db      	uxtb	r3, r3
   17e62:	0018      	movs	r0, r3
   17e64:	4b4e      	ldr	r3, [pc, #312]	; (17fa0 <_usart_set_config+0x2c8>)
   17e66:	4798      	blx	r3
				status_code =
   17e68:	231d      	movs	r3, #29
   17e6a:	18fc      	adds	r4, r7, r3
   17e6c:	231f      	movs	r3, #31
   17e6e:	18fb      	adds	r3, r7, r3
   17e70:	7819      	ldrb	r1, [r3, #0]
   17e72:	230a      	movs	r3, #10
   17e74:	18fa      	adds	r2, r7, r3
   17e76:	231e      	movs	r3, #30
   17e78:	18fb      	adds	r3, r7, r3
   17e7a:	781b      	ldrb	r3, [r3, #0]
   17e7c:	9300      	str	r3, [sp, #0]
   17e7e:	000b      	movs	r3, r1
   17e80:	0001      	movs	r1, r0
   17e82:	0028      	movs	r0, r5
   17e84:	4d48      	ldr	r5, [pc, #288]	; (17fa8 <_usart_set_config+0x2d0>)
   17e86:	47a8      	blx	r5
   17e88:	0003      	movs	r3, r0
   17e8a:	7023      	strb	r3, [r4, #0]
			break;
   17e8c:	e000      	b.n	17e90 <_usart_set_config+0x1b8>
			break;
   17e8e:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   17e90:	231d      	movs	r3, #29
   17e92:	18fb      	adds	r3, r7, r3
   17e94:	781b      	ldrb	r3, [r3, #0]
   17e96:	2b00      	cmp	r3, #0
   17e98:	d003      	beq.n	17ea2 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   17e9a:	231d      	movs	r3, #29
   17e9c:	18fb      	adds	r3, r7, r3
   17e9e:	781b      	ldrb	r3, [r3, #0]
   17ea0:	e077      	b.n	17f92 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   17ea2:	683b      	ldr	r3, [r7, #0]
   17ea4:	7e5b      	ldrb	r3, [r3, #25]
   17ea6:	2b00      	cmp	r3, #0
   17ea8:	d003      	beq.n	17eb2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   17eaa:	683b      	ldr	r3, [r7, #0]
   17eac:	7e9a      	ldrb	r2, [r3, #26]
   17eae:	69bb      	ldr	r3, [r7, #24]
   17eb0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   17eb2:	687b      	ldr	r3, [r7, #4]
   17eb4:	0018      	movs	r0, r3
   17eb6:	4b3d      	ldr	r3, [pc, #244]	; (17fac <_usart_set_config+0x2d4>)
   17eb8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   17eba:	230a      	movs	r3, #10
   17ebc:	18fb      	adds	r3, r7, r3
   17ebe:	881a      	ldrh	r2, [r3, #0]
   17ec0:	69bb      	ldr	r3, [r7, #24]
   17ec2:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   17ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17ec6:	68fb      	ldr	r3, [r7, #12]
   17ec8:	4313      	orrs	r3, r2
   17eca:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   17ecc:	683b      	ldr	r3, [r7, #0]
   17ece:	2227      	movs	r2, #39	; 0x27
   17ed0:	5c9b      	ldrb	r3, [r3, r2]
   17ed2:	2201      	movs	r2, #1
   17ed4:	4053      	eors	r3, r2
   17ed6:	b2db      	uxtb	r3, r3
   17ed8:	2b00      	cmp	r3, #0
   17eda:	d003      	beq.n	17ee4 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   17edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17ede:	2204      	movs	r2, #4
   17ee0:	4313      	orrs	r3, r2
   17ee2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   17ee4:	683b      	ldr	r3, [r7, #0]
   17ee6:	7e5b      	ldrb	r3, [r3, #25]
   17ee8:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   17eea:	683b      	ldr	r3, [r7, #0]
   17eec:	7f1b      	ldrb	r3, [r3, #28]
   17eee:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   17ef0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   17ef2:	683b      	ldr	r3, [r7, #0]
   17ef4:	7f5b      	ldrb	r3, [r3, #29]
   17ef6:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   17ef8:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   17efa:	683b      	ldr	r3, [r7, #0]
   17efc:	2124      	movs	r1, #36	; 0x24
   17efe:	5c5b      	ldrb	r3, [r3, r1]
   17f00:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   17f02:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   17f04:	683b      	ldr	r3, [r7, #0]
   17f06:	2125      	movs	r1, #37	; 0x25
   17f08:	5c5b      	ldrb	r3, [r3, r1]
   17f0a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   17f0c:	4313      	orrs	r3, r2
	ctrlb =  
   17f0e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   17f10:	683b      	ldr	r3, [r7, #0]
   17f12:	7a9b      	ldrb	r3, [r3, #10]
   17f14:	001a      	movs	r2, r3
   17f16:	6a3b      	ldr	r3, [r7, #32]
   17f18:	4313      	orrs	r3, r2
   17f1a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   17f1c:	683b      	ldr	r3, [r7, #0]
   17f1e:	7adb      	ldrb	r3, [r3, #11]
   17f20:	001a      	movs	r2, r3
   17f22:	6a3b      	ldr	r3, [r7, #32]
   17f24:	4313      	orrs	r3, r2
   17f26:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   17f28:	683b      	ldr	r3, [r7, #0]
   17f2a:	891b      	ldrh	r3, [r3, #8]
   17f2c:	2bff      	cmp	r3, #255	; 0xff
   17f2e:	d00b      	beq.n	17f48 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   17f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17f32:	2280      	movs	r2, #128	; 0x80
   17f34:	0452      	lsls	r2, r2, #17
   17f36:	4313      	orrs	r3, r2
   17f38:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   17f3a:	683b      	ldr	r3, [r7, #0]
   17f3c:	891b      	ldrh	r3, [r3, #8]
   17f3e:	001a      	movs	r2, r3
   17f40:	6a3b      	ldr	r3, [r7, #32]
   17f42:	4313      	orrs	r3, r2
   17f44:	623b      	str	r3, [r7, #32]
   17f46:	e008      	b.n	17f5a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   17f48:	683b      	ldr	r3, [r7, #0]
   17f4a:	7edb      	ldrb	r3, [r3, #27]
   17f4c:	2b00      	cmp	r3, #0
   17f4e:	d004      	beq.n	17f5a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   17f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17f52:	2280      	movs	r2, #128	; 0x80
   17f54:	04d2      	lsls	r2, r2, #19
   17f56:	4313      	orrs	r3, r2
   17f58:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   17f5a:	683b      	ldr	r3, [r7, #0]
   17f5c:	222c      	movs	r2, #44	; 0x2c
   17f5e:	5c9b      	ldrb	r3, [r3, r2]
   17f60:	2b00      	cmp	r3, #0
   17f62:	d103      	bne.n	17f6c <_usart_set_config+0x294>
   17f64:	4b12      	ldr	r3, [pc, #72]	; (17fb0 <_usart_set_config+0x2d8>)
   17f66:	4798      	blx	r3
   17f68:	1e03      	subs	r3, r0, #0
   17f6a:	d003      	beq.n	17f74 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   17f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17f6e:	2280      	movs	r2, #128	; 0x80
   17f70:	4313      	orrs	r3, r2
   17f72:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   17f74:	687b      	ldr	r3, [r7, #4]
   17f76:	0018      	movs	r0, r3
   17f78:	4b0c      	ldr	r3, [pc, #48]	; (17fac <_usart_set_config+0x2d4>)
   17f7a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   17f7c:	69bb      	ldr	r3, [r7, #24]
   17f7e:	6a3a      	ldr	r2, [r7, #32]
   17f80:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   17f82:	687b      	ldr	r3, [r7, #4]
   17f84:	0018      	movs	r0, r3
   17f86:	4b09      	ldr	r3, [pc, #36]	; (17fac <_usart_set_config+0x2d4>)
   17f88:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   17f8a:	69bb      	ldr	r3, [r7, #24]
   17f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17f8e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   17f90:	2300      	movs	r3, #0
}
   17f92:	0018      	movs	r0, r3
   17f94:	46bd      	mov	sp, r7
   17f96:	b00a      	add	sp, #40	; 0x28
   17f98:	bdb0      	pop	{r4, r5, r7, pc}
   17f9a:	46c0      	nop			; (mov r8, r8)
   17f9c:	00017a35 	.word	0x00017a35
   17fa0:	000193f9 	.word	0x000193f9
   17fa4:	000175af 	.word	0x000175af
   17fa8:	0001762d 	.word	0x0001762d
   17fac:	00017cb5 	.word	0x00017cb5
   17fb0:	00017c75 	.word	0x00017c75

00017fb4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   17fb4:	b590      	push	{r4, r7, lr}
   17fb6:	b093      	sub	sp, #76	; 0x4c
   17fb8:	af00      	add	r7, sp, #0
   17fba:	60f8      	str	r0, [r7, #12]
   17fbc:	60b9      	str	r1, [r7, #8]
   17fbe:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   17fc0:	233b      	movs	r3, #59	; 0x3b
   17fc2:	18fb      	adds	r3, r7, r3
   17fc4:	2200      	movs	r2, #0
   17fc6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   17fc8:	68fb      	ldr	r3, [r7, #12]
   17fca:	68ba      	ldr	r2, [r7, #8]
   17fcc:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   17fce:	68fb      	ldr	r3, [r7, #12]
   17fd0:	681b      	ldr	r3, [r3, #0]
   17fd2:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   17fd4:	68fb      	ldr	r3, [r7, #12]
   17fd6:	681b      	ldr	r3, [r3, #0]
   17fd8:	0018      	movs	r0, r3
   17fda:	4b86      	ldr	r3, [pc, #536]	; (181f4 <usart_init+0x240>)
   17fdc:	4798      	blx	r3
   17fde:	0003      	movs	r3, r0
   17fe0:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   17fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17fe4:	3302      	adds	r3, #2
   17fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   17fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17fea:	3314      	adds	r3, #20
   17fec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   17fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17ff0:	681b      	ldr	r3, [r3, #0]
   17ff2:	2201      	movs	r2, #1
   17ff4:	4013      	ands	r3, r2
   17ff6:	d001      	beq.n	17ffc <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   17ff8:	2305      	movs	r3, #5
   17ffa:	e0f6      	b.n	181ea <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   17ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17ffe:	681b      	ldr	r3, [r3, #0]
   18000:	2202      	movs	r2, #2
   18002:	4013      	ands	r3, r2
   18004:	d001      	beq.n	1800a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   18006:	231c      	movs	r3, #28
   18008:	e0ef      	b.n	181ea <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1800a:	2201      	movs	r2, #1
   1800c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1800e:	409a      	lsls	r2, r3
   18010:	0013      	movs	r3, r2
   18012:	0019      	movs	r1, r3
   18014:	2002      	movs	r0, #2
   18016:	4b78      	ldr	r3, [pc, #480]	; (181f8 <usart_init+0x244>)
   18018:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1801a:	2324      	movs	r3, #36	; 0x24
   1801c:	18fb      	adds	r3, r7, r3
   1801e:	0018      	movs	r0, r3
   18020:	4b76      	ldr	r3, [pc, #472]	; (181fc <usart_init+0x248>)
   18022:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   18024:	687b      	ldr	r3, [r7, #4]
   18026:	222d      	movs	r2, #45	; 0x2d
   18028:	5c9a      	ldrb	r2, [r3, r2]
   1802a:	2324      	movs	r3, #36	; 0x24
   1802c:	18fb      	adds	r3, r7, r3
   1802e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   18030:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18032:	b2db      	uxtb	r3, r3
   18034:	2224      	movs	r2, #36	; 0x24
   18036:	18ba      	adds	r2, r7, r2
   18038:	0011      	movs	r1, r2
   1803a:	0018      	movs	r0, r3
   1803c:	4b70      	ldr	r3, [pc, #448]	; (18200 <usart_init+0x24c>)
   1803e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   18040:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18042:	b2db      	uxtb	r3, r3
   18044:	0018      	movs	r0, r3
   18046:	4b6f      	ldr	r3, [pc, #444]	; (18204 <usart_init+0x250>)
   18048:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1804a:	687b      	ldr	r3, [r7, #4]
   1804c:	222d      	movs	r2, #45	; 0x2d
   1804e:	5c9b      	ldrb	r3, [r3, r2]
   18050:	2100      	movs	r1, #0
   18052:	0018      	movs	r0, r3
   18054:	4b6c      	ldr	r3, [pc, #432]	; (18208 <usart_init+0x254>)
   18056:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   18058:	687b      	ldr	r3, [r7, #4]
   1805a:	7ada      	ldrb	r2, [r3, #11]
   1805c:	68fb      	ldr	r3, [r7, #12]
   1805e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   18060:	687b      	ldr	r3, [r7, #4]
   18062:	2224      	movs	r2, #36	; 0x24
   18064:	5c9a      	ldrb	r2, [r3, r2]
   18066:	68fb      	ldr	r3, [r7, #12]
   18068:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   1806a:	687b      	ldr	r3, [r7, #4]
   1806c:	2225      	movs	r2, #37	; 0x25
   1806e:	5c9a      	ldrb	r2, [r3, r2]
   18070:	68fb      	ldr	r3, [r7, #12]
   18072:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   18074:	687b      	ldr	r3, [r7, #4]
   18076:	7eda      	ldrb	r2, [r3, #27]
   18078:	68fb      	ldr	r3, [r7, #12]
   1807a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   1807c:	687b      	ldr	r3, [r7, #4]
   1807e:	7f1a      	ldrb	r2, [r3, #28]
   18080:	68fb      	ldr	r3, [r7, #12]
   18082:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   18084:	233b      	movs	r3, #59	; 0x3b
   18086:	18fc      	adds	r4, r7, r3
   18088:	687a      	ldr	r2, [r7, #4]
   1808a:	68fb      	ldr	r3, [r7, #12]
   1808c:	0011      	movs	r1, r2
   1808e:	0018      	movs	r0, r3
   18090:	4b5e      	ldr	r3, [pc, #376]	; (1820c <usart_init+0x258>)
   18092:	4798      	blx	r3
   18094:	0003      	movs	r3, r0
   18096:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   18098:	233b      	movs	r3, #59	; 0x3b
   1809a:	18fb      	adds	r3, r7, r3
   1809c:	781b      	ldrb	r3, [r3, #0]
   1809e:	2b00      	cmp	r3, #0
   180a0:	d003      	beq.n	180aa <usart_init+0xf6>
		return status_code;
   180a2:	233b      	movs	r3, #59	; 0x3b
   180a4:	18fb      	adds	r3, r7, r3
   180a6:	781b      	ldrb	r3, [r3, #0]
   180a8:	e09f      	b.n	181ea <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   180aa:	2320      	movs	r3, #32
   180ac:	18fb      	adds	r3, r7, r3
   180ae:	0018      	movs	r0, r3
   180b0:	4b57      	ldr	r3, [pc, #348]	; (18210 <usart_init+0x25c>)
   180b2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   180b4:	2320      	movs	r3, #32
   180b6:	18fb      	adds	r3, r7, r3
   180b8:	2200      	movs	r2, #0
   180ba:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   180bc:	2320      	movs	r3, #32
   180be:	18fb      	adds	r3, r7, r3
   180c0:	2200      	movs	r2, #0
   180c2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   180c4:	687b      	ldr	r3, [r7, #4]
   180c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   180c8:	2310      	movs	r3, #16
   180ca:	18fb      	adds	r3, r7, r3
   180cc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   180ce:	687b      	ldr	r3, [r7, #4]
   180d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   180d2:	2310      	movs	r3, #16
   180d4:	18fb      	adds	r3, r7, r3
   180d6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   180d8:	687b      	ldr	r3, [r7, #4]
   180da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   180dc:	2310      	movs	r3, #16
   180de:	18fb      	adds	r3, r7, r3
   180e0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   180e2:	687b      	ldr	r3, [r7, #4]
   180e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   180e6:	2310      	movs	r3, #16
   180e8:	18fb      	adds	r3, r7, r3
   180ea:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   180ec:	2347      	movs	r3, #71	; 0x47
   180ee:	18fb      	adds	r3, r7, r3
   180f0:	2200      	movs	r2, #0
   180f2:	701a      	strb	r2, [r3, #0]
   180f4:	e02c      	b.n	18150 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   180f6:	2347      	movs	r3, #71	; 0x47
   180f8:	18fb      	adds	r3, r7, r3
   180fa:	781a      	ldrb	r2, [r3, #0]
   180fc:	2310      	movs	r3, #16
   180fe:	18fb      	adds	r3, r7, r3
   18100:	0092      	lsls	r2, r2, #2
   18102:	58d3      	ldr	r3, [r2, r3]
   18104:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   18106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18108:	2b00      	cmp	r3, #0
   1810a:	d109      	bne.n	18120 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1810c:	2347      	movs	r3, #71	; 0x47
   1810e:	18fb      	adds	r3, r7, r3
   18110:	781a      	ldrb	r2, [r3, #0]
   18112:	68bb      	ldr	r3, [r7, #8]
   18114:	0011      	movs	r1, r2
   18116:	0018      	movs	r0, r3
   18118:	4b3e      	ldr	r3, [pc, #248]	; (18214 <usart_init+0x260>)
   1811a:	4798      	blx	r3
   1811c:	0003      	movs	r3, r0
   1811e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   18120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18122:	3301      	adds	r3, #1
   18124:	d00d      	beq.n	18142 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   18126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18128:	b2da      	uxtb	r2, r3
   1812a:	2320      	movs	r3, #32
   1812c:	18fb      	adds	r3, r7, r3
   1812e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   18130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18132:	0c1b      	lsrs	r3, r3, #16
   18134:	b2db      	uxtb	r3, r3
   18136:	2220      	movs	r2, #32
   18138:	18ba      	adds	r2, r7, r2
   1813a:	0011      	movs	r1, r2
   1813c:	0018      	movs	r0, r3
   1813e:	4b36      	ldr	r3, [pc, #216]	; (18218 <usart_init+0x264>)
   18140:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   18142:	2347      	movs	r3, #71	; 0x47
   18144:	18fb      	adds	r3, r7, r3
   18146:	781a      	ldrb	r2, [r3, #0]
   18148:	2347      	movs	r3, #71	; 0x47
   1814a:	18fb      	adds	r3, r7, r3
   1814c:	3201      	adds	r2, #1
   1814e:	701a      	strb	r2, [r3, #0]
   18150:	2347      	movs	r3, #71	; 0x47
   18152:	18fb      	adds	r3, r7, r3
   18154:	781b      	ldrb	r3, [r3, #0]
   18156:	2b03      	cmp	r3, #3
   18158:	d9cd      	bls.n	180f6 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   1815a:	2300      	movs	r3, #0
   1815c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1815e:	e00a      	b.n	18176 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   18160:	68fa      	ldr	r2, [r7, #12]
   18162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18164:	3302      	adds	r3, #2
   18166:	009b      	lsls	r3, r3, #2
   18168:	18d3      	adds	r3, r2, r3
   1816a:	3304      	adds	r3, #4
   1816c:	2200      	movs	r2, #0
   1816e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   18170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18172:	3301      	adds	r3, #1
   18174:	63fb      	str	r3, [r7, #60]	; 0x3c
   18176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18178:	2b05      	cmp	r3, #5
   1817a:	d9f1      	bls.n	18160 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   1817c:	68fb      	ldr	r3, [r7, #12]
   1817e:	2200      	movs	r2, #0
   18180:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   18182:	68fb      	ldr	r3, [r7, #12]
   18184:	2200      	movs	r2, #0
   18186:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   18188:	68fb      	ldr	r3, [r7, #12]
   1818a:	2200      	movs	r2, #0
   1818c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   1818e:	68fb      	ldr	r3, [r7, #12]
   18190:	2200      	movs	r2, #0
   18192:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   18194:	68fb      	ldr	r3, [r7, #12]
   18196:	2230      	movs	r2, #48	; 0x30
   18198:	2100      	movs	r1, #0
   1819a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   1819c:	68fb      	ldr	r3, [r7, #12]
   1819e:	2231      	movs	r2, #49	; 0x31
   181a0:	2100      	movs	r1, #0
   181a2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   181a4:	68fb      	ldr	r3, [r7, #12]
   181a6:	2232      	movs	r2, #50	; 0x32
   181a8:	2100      	movs	r1, #0
   181aa:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   181ac:	68fb      	ldr	r3, [r7, #12]
   181ae:	2233      	movs	r2, #51	; 0x33
   181b0:	2100      	movs	r1, #0
   181b2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   181b4:	68fb      	ldr	r3, [r7, #12]
   181b6:	681b      	ldr	r3, [r3, #0]
   181b8:	2227      	movs	r2, #39	; 0x27
   181ba:	18bc      	adds	r4, r7, r2
   181bc:	0018      	movs	r0, r3
   181be:	4b0d      	ldr	r3, [pc, #52]	; (181f4 <usart_init+0x240>)
   181c0:	4798      	blx	r3
   181c2:	0003      	movs	r3, r0
   181c4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   181c6:	4a15      	ldr	r2, [pc, #84]	; (1821c <usart_init+0x268>)
   181c8:	2327      	movs	r3, #39	; 0x27
   181ca:	18fb      	adds	r3, r7, r3
   181cc:	781b      	ldrb	r3, [r3, #0]
   181ce:	0011      	movs	r1, r2
   181d0:	0018      	movs	r0, r3
   181d2:	4b13      	ldr	r3, [pc, #76]	; (18220 <usart_init+0x26c>)
   181d4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   181d6:	2327      	movs	r3, #39	; 0x27
   181d8:	18fb      	adds	r3, r7, r3
   181da:	781a      	ldrb	r2, [r3, #0]
   181dc:	4b11      	ldr	r3, [pc, #68]	; (18224 <usart_init+0x270>)
   181de:	0092      	lsls	r2, r2, #2
   181e0:	68f9      	ldr	r1, [r7, #12]
   181e2:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   181e4:	233b      	movs	r3, #59	; 0x3b
   181e6:	18fb      	adds	r3, r7, r3
   181e8:	781b      	ldrb	r3, [r3, #0]
}
   181ea:	0018      	movs	r0, r3
   181ec:	46bd      	mov	sp, r7
   181ee:	b013      	add	sp, #76	; 0x4c
   181f0:	bd90      	pop	{r4, r7, pc}
   181f2:	46c0      	nop			; (mov r8, r8)
   181f4:	00017a35 	.word	0x00017a35
   181f8:	00017bf1 	.word	0x00017bf1
   181fc:	00017bd9 	.word	0x00017bd9
   18200:	000192d5 	.word	0x000192d5
   18204:	00019319 	.word	0x00019319
   18208:	000177ed 	.word	0x000177ed
   1820c:	00017cd9 	.word	0x00017cd9
   18210:	00017c4d 	.word	0x00017c4d
   18214:	00017879 	.word	0x00017879
   18218:	00019635 	.word	0x00019635
   1821c:	00018491 	.word	0x00018491
   18220:	00017a99 	.word	0x00017a99
   18224:	20002f70 	.word	0x20002f70

00018228 <system_interrupt_enter_critical_section>:
{
   18228:	b580      	push	{r7, lr}
   1822a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1822c:	4b02      	ldr	r3, [pc, #8]	; (18238 <system_interrupt_enter_critical_section+0x10>)
   1822e:	4798      	blx	r3
}
   18230:	46c0      	nop			; (mov r8, r8)
   18232:	46bd      	mov	sp, r7
   18234:	bd80      	pop	{r7, pc}
   18236:	46c0      	nop			; (mov r8, r8)
   18238:	00016e29 	.word	0x00016e29

0001823c <system_interrupt_leave_critical_section>:
{
   1823c:	b580      	push	{r7, lr}
   1823e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   18240:	4b02      	ldr	r3, [pc, #8]	; (1824c <system_interrupt_leave_critical_section+0x10>)
   18242:	4798      	blx	r3
}
   18244:	46c0      	nop			; (mov r8, r8)
   18246:	46bd      	mov	sp, r7
   18248:	bd80      	pop	{r7, pc}
   1824a:	46c0      	nop			; (mov r8, r8)
   1824c:	00016e7d 	.word	0x00016e7d

00018250 <usart_is_syncing>:
{
   18250:	b580      	push	{r7, lr}
   18252:	b084      	sub	sp, #16
   18254:	af00      	add	r7, sp, #0
   18256:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   18258:	687b      	ldr	r3, [r7, #4]
   1825a:	681b      	ldr	r3, [r3, #0]
   1825c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1825e:	68fb      	ldr	r3, [r7, #12]
   18260:	69db      	ldr	r3, [r3, #28]
   18262:	1e5a      	subs	r2, r3, #1
   18264:	4193      	sbcs	r3, r2
   18266:	b2db      	uxtb	r3, r3
}
   18268:	0018      	movs	r0, r3
   1826a:	46bd      	mov	sp, r7
   1826c:	b004      	add	sp, #16
   1826e:	bd80      	pop	{r7, pc}

00018270 <_usart_wait_for_sync>:
{
   18270:	b580      	push	{r7, lr}
   18272:	b082      	sub	sp, #8
   18274:	af00      	add	r7, sp, #0
   18276:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   18278:	46c0      	nop			; (mov r8, r8)
   1827a:	687b      	ldr	r3, [r7, #4]
   1827c:	0018      	movs	r0, r3
   1827e:	4b04      	ldr	r3, [pc, #16]	; (18290 <_usart_wait_for_sync+0x20>)
   18280:	4798      	blx	r3
   18282:	1e03      	subs	r3, r0, #0
   18284:	d1f9      	bne.n	1827a <_usart_wait_for_sync+0xa>
}
   18286:	46c0      	nop			; (mov r8, r8)
   18288:	46bd      	mov	sp, r7
   1828a:	b002      	add	sp, #8
   1828c:	bd80      	pop	{r7, pc}
   1828e:	46c0      	nop			; (mov r8, r8)
   18290:	00018251 	.word	0x00018251

00018294 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   18294:	b580      	push	{r7, lr}
   18296:	b086      	sub	sp, #24
   18298:	af00      	add	r7, sp, #0
   1829a:	60f8      	str	r0, [r7, #12]
   1829c:	60b9      	str	r1, [r7, #8]
   1829e:	1dbb      	adds	r3, r7, #6
   182a0:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   182a2:	68fb      	ldr	r3, [r7, #12]
   182a4:	681b      	ldr	r3, [r3, #0]
   182a6:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   182a8:	4b0f      	ldr	r3, [pc, #60]	; (182e8 <_usart_write_buffer+0x54>)
   182aa:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   182ac:	68fb      	ldr	r3, [r7, #12]
   182ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   182b0:	b29b      	uxth	r3, r3
   182b2:	2b00      	cmp	r3, #0
   182b4:	d003      	beq.n	182be <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   182b6:	4b0d      	ldr	r3, [pc, #52]	; (182ec <_usart_write_buffer+0x58>)
   182b8:	4798      	blx	r3
		return STATUS_BUSY;
   182ba:	2305      	movs	r3, #5
   182bc:	e010      	b.n	182e0 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   182be:	68fb      	ldr	r3, [r7, #12]
   182c0:	1dba      	adds	r2, r7, #6
   182c2:	8812      	ldrh	r2, [r2, #0]
   182c4:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   182c6:	4b09      	ldr	r3, [pc, #36]	; (182ec <_usart_write_buffer+0x58>)
   182c8:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   182ca:	68fb      	ldr	r3, [r7, #12]
   182cc:	68ba      	ldr	r2, [r7, #8]
   182ce:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   182d0:	68fb      	ldr	r3, [r7, #12]
   182d2:	2233      	movs	r2, #51	; 0x33
   182d4:	2105      	movs	r1, #5
   182d6:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   182d8:	697b      	ldr	r3, [r7, #20]
   182da:	2201      	movs	r2, #1
   182dc:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   182de:	2300      	movs	r3, #0
}
   182e0:	0018      	movs	r0, r3
   182e2:	46bd      	mov	sp, r7
   182e4:	b006      	add	sp, #24
   182e6:	bd80      	pop	{r7, pc}
   182e8:	00018229 	.word	0x00018229
   182ec:	0001823d 	.word	0x0001823d

000182f0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   182f0:	b580      	push	{r7, lr}
   182f2:	b086      	sub	sp, #24
   182f4:	af00      	add	r7, sp, #0
   182f6:	60f8      	str	r0, [r7, #12]
   182f8:	60b9      	str	r1, [r7, #8]
   182fa:	1dbb      	adds	r3, r7, #6
   182fc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   182fe:	68fb      	ldr	r3, [r7, #12]
   18300:	681b      	ldr	r3, [r3, #0]
   18302:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   18304:	4b16      	ldr	r3, [pc, #88]	; (18360 <_usart_read_buffer+0x70>)
   18306:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   18308:	68fb      	ldr	r3, [r7, #12]
   1830a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   1830c:	b29b      	uxth	r3, r3
   1830e:	2b00      	cmp	r3, #0
   18310:	d003      	beq.n	1831a <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   18312:	4b14      	ldr	r3, [pc, #80]	; (18364 <_usart_read_buffer+0x74>)
   18314:	4798      	blx	r3
		return STATUS_BUSY;
   18316:	2305      	movs	r3, #5
   18318:	e01e      	b.n	18358 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   1831a:	68fb      	ldr	r3, [r7, #12]
   1831c:	1dba      	adds	r2, r7, #6
   1831e:	8812      	ldrh	r2, [r2, #0]
   18320:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   18322:	4b10      	ldr	r3, [pc, #64]	; (18364 <_usart_read_buffer+0x74>)
   18324:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   18326:	68fb      	ldr	r3, [r7, #12]
   18328:	68ba      	ldr	r2, [r7, #8]
   1832a:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   1832c:	68fb      	ldr	r3, [r7, #12]
   1832e:	2232      	movs	r2, #50	; 0x32
   18330:	2105      	movs	r1, #5
   18332:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   18334:	697b      	ldr	r3, [r7, #20]
   18336:	2204      	movs	r2, #4
   18338:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   1833a:	68fb      	ldr	r3, [r7, #12]
   1833c:	7a1b      	ldrb	r3, [r3, #8]
   1833e:	2b00      	cmp	r3, #0
   18340:	d002      	beq.n	18348 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   18342:	697b      	ldr	r3, [r7, #20]
   18344:	2220      	movs	r2, #32
   18346:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   18348:	68fb      	ldr	r3, [r7, #12]
   1834a:	7a5b      	ldrb	r3, [r3, #9]
   1834c:	2b00      	cmp	r3, #0
   1834e:	d002      	beq.n	18356 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   18350:	697b      	ldr	r3, [r7, #20]
   18352:	2208      	movs	r2, #8
   18354:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   18356:	2300      	movs	r3, #0
}
   18358:	0018      	movs	r0, r3
   1835a:	46bd      	mov	sp, r7
   1835c:	b006      	add	sp, #24
   1835e:	bd80      	pop	{r7, pc}
   18360:	00018229 	.word	0x00018229
   18364:	0001823d 	.word	0x0001823d

00018368 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   18368:	b580      	push	{r7, lr}
   1836a:	b084      	sub	sp, #16
   1836c:	af00      	add	r7, sp, #0
   1836e:	60f8      	str	r0, [r7, #12]
   18370:	60b9      	str	r1, [r7, #8]
   18372:	1dfb      	adds	r3, r7, #7
   18374:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   18376:	1dfb      	adds	r3, r7, #7
   18378:	781b      	ldrb	r3, [r3, #0]
   1837a:	68fa      	ldr	r2, [r7, #12]
   1837c:	3302      	adds	r3, #2
   1837e:	009b      	lsls	r3, r3, #2
   18380:	18d3      	adds	r3, r2, r3
   18382:	3304      	adds	r3, #4
   18384:	68ba      	ldr	r2, [r7, #8]
   18386:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   18388:	68fb      	ldr	r3, [r7, #12]
   1838a:	2230      	movs	r2, #48	; 0x30
   1838c:	5c9b      	ldrb	r3, [r3, r2]
   1838e:	b25a      	sxtb	r2, r3
   18390:	1dfb      	adds	r3, r7, #7
   18392:	781b      	ldrb	r3, [r3, #0]
   18394:	2101      	movs	r1, #1
   18396:	4099      	lsls	r1, r3
   18398:	000b      	movs	r3, r1
   1839a:	b25b      	sxtb	r3, r3
   1839c:	4313      	orrs	r3, r2
   1839e:	b25b      	sxtb	r3, r3
   183a0:	b2d9      	uxtb	r1, r3
   183a2:	68fb      	ldr	r3, [r7, #12]
   183a4:	2230      	movs	r2, #48	; 0x30
   183a6:	5499      	strb	r1, [r3, r2]
}
   183a8:	46c0      	nop			; (mov r8, r8)
   183aa:	46bd      	mov	sp, r7
   183ac:	b004      	add	sp, #16
   183ae:	bd80      	pop	{r7, pc}

000183b0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   183b0:	b580      	push	{r7, lr}
   183b2:	b084      	sub	sp, #16
   183b4:	af00      	add	r7, sp, #0
   183b6:	60f8      	str	r0, [r7, #12]
   183b8:	60b9      	str	r1, [r7, #8]
   183ba:	1dbb      	adds	r3, r7, #6
   183bc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   183be:	1dbb      	adds	r3, r7, #6
   183c0:	881b      	ldrh	r3, [r3, #0]
   183c2:	2b00      	cmp	r3, #0
   183c4:	d101      	bne.n	183ca <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   183c6:	2317      	movs	r3, #23
   183c8:	e010      	b.n	183ec <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   183ca:	68fb      	ldr	r3, [r7, #12]
   183cc:	79db      	ldrb	r3, [r3, #7]
   183ce:	2201      	movs	r2, #1
   183d0:	4053      	eors	r3, r2
   183d2:	b2db      	uxtb	r3, r3
   183d4:	2b00      	cmp	r3, #0
   183d6:	d001      	beq.n	183dc <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   183d8:	231c      	movs	r3, #28
   183da:	e007      	b.n	183ec <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   183dc:	1dbb      	adds	r3, r7, #6
   183de:	881a      	ldrh	r2, [r3, #0]
   183e0:	68b9      	ldr	r1, [r7, #8]
   183e2:	68fb      	ldr	r3, [r7, #12]
   183e4:	0018      	movs	r0, r3
   183e6:	4b03      	ldr	r3, [pc, #12]	; (183f4 <usart_write_buffer_job+0x44>)
   183e8:	4798      	blx	r3
   183ea:	0003      	movs	r3, r0
}
   183ec:	0018      	movs	r0, r3
   183ee:	46bd      	mov	sp, r7
   183f0:	b004      	add	sp, #16
   183f2:	bd80      	pop	{r7, pc}
   183f4:	00018295 	.word	0x00018295

000183f8 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   183f8:	b580      	push	{r7, lr}
   183fa:	b084      	sub	sp, #16
   183fc:	af00      	add	r7, sp, #0
   183fe:	60f8      	str	r0, [r7, #12]
   18400:	60b9      	str	r1, [r7, #8]
   18402:	1dbb      	adds	r3, r7, #6
   18404:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   18406:	1dbb      	adds	r3, r7, #6
   18408:	881b      	ldrh	r3, [r3, #0]
   1840a:	2b00      	cmp	r3, #0
   1840c:	d101      	bne.n	18412 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   1840e:	2317      	movs	r3, #23
   18410:	e010      	b.n	18434 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   18412:	68fb      	ldr	r3, [r7, #12]
   18414:	799b      	ldrb	r3, [r3, #6]
   18416:	2201      	movs	r2, #1
   18418:	4053      	eors	r3, r2
   1841a:	b2db      	uxtb	r3, r3
   1841c:	2b00      	cmp	r3, #0
   1841e:	d001      	beq.n	18424 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   18420:	231c      	movs	r3, #28
   18422:	e007      	b.n	18434 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   18424:	1dbb      	adds	r3, r7, #6
   18426:	881a      	ldrh	r2, [r3, #0]
   18428:	68b9      	ldr	r1, [r7, #8]
   1842a:	68fb      	ldr	r3, [r7, #12]
   1842c:	0018      	movs	r0, r3
   1842e:	4b03      	ldr	r3, [pc, #12]	; (1843c <usart_read_buffer_job+0x44>)
   18430:	4798      	blx	r3
   18432:	0003      	movs	r3, r0
}
   18434:	0018      	movs	r0, r3
   18436:	46bd      	mov	sp, r7
   18438:	b004      	add	sp, #16
   1843a:	bd80      	pop	{r7, pc}
   1843c:	000182f1 	.word	0x000182f1

00018440 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   18440:	b580      	push	{r7, lr}
   18442:	b084      	sub	sp, #16
   18444:	af00      	add	r7, sp, #0
   18446:	6078      	str	r0, [r7, #4]
   18448:	000a      	movs	r2, r1
   1844a:	1cfb      	adds	r3, r7, #3
   1844c:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   1844e:	1cfb      	adds	r3, r7, #3
   18450:	781b      	ldrb	r3, [r3, #0]
   18452:	2b00      	cmp	r3, #0
   18454:	d002      	beq.n	1845c <usart_get_job_status+0x1c>
   18456:	2b01      	cmp	r3, #1
   18458:	d007      	beq.n	1846a <usart_get_job_status+0x2a>
   1845a:	e00d      	b.n	18478 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   1845c:	230f      	movs	r3, #15
   1845e:	18fb      	adds	r3, r7, r3
   18460:	687a      	ldr	r2, [r7, #4]
   18462:	2132      	movs	r1, #50	; 0x32
   18464:	5c52      	ldrb	r2, [r2, r1]
   18466:	701a      	strb	r2, [r3, #0]
			break;
   18468:	e00b      	b.n	18482 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   1846a:	230f      	movs	r3, #15
   1846c:	18fb      	adds	r3, r7, r3
   1846e:	687a      	ldr	r2, [r7, #4]
   18470:	2133      	movs	r1, #51	; 0x33
   18472:	5c52      	ldrb	r2, [r2, r1]
   18474:	701a      	strb	r2, [r3, #0]
			break;
   18476:	e004      	b.n	18482 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   18478:	230f      	movs	r3, #15
   1847a:	18fb      	adds	r3, r7, r3
   1847c:	2217      	movs	r2, #23
   1847e:	701a      	strb	r2, [r3, #0]
			break;
   18480:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   18482:	230f      	movs	r3, #15
   18484:	18fb      	adds	r3, r7, r3
   18486:	781b      	ldrb	r3, [r3, #0]
}
   18488:	0018      	movs	r0, r3
   1848a:	46bd      	mov	sp, r7
   1848c:	b004      	add	sp, #16
   1848e:	bd80      	pop	{r7, pc}

00018490 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   18490:	b580      	push	{r7, lr}
   18492:	b088      	sub	sp, #32
   18494:	af00      	add	r7, sp, #0
   18496:	0002      	movs	r2, r0
   18498:	1dfb      	adds	r3, r7, #7
   1849a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   1849c:	1dfb      	adds	r3, r7, #7
   1849e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   184a0:	4ba3      	ldr	r3, [pc, #652]	; (18730 <_usart_interrupt_handler+0x2a0>)
   184a2:	0092      	lsls	r2, r2, #2
   184a4:	58d3      	ldr	r3, [r2, r3]
   184a6:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   184a8:	69bb      	ldr	r3, [r7, #24]
   184aa:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   184ac:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   184ae:	69bb      	ldr	r3, [r7, #24]
   184b0:	0018      	movs	r0, r3
   184b2:	4ba0      	ldr	r3, [pc, #640]	; (18734 <_usart_interrupt_handler+0x2a4>)
   184b4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   184b6:	697b      	ldr	r3, [r7, #20]
   184b8:	7e1b      	ldrb	r3, [r3, #24]
   184ba:	b2da      	uxtb	r2, r3
   184bc:	2312      	movs	r3, #18
   184be:	18fb      	adds	r3, r7, r3
   184c0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   184c2:	697b      	ldr	r3, [r7, #20]
   184c4:	7d9b      	ldrb	r3, [r3, #22]
   184c6:	b2db      	uxtb	r3, r3
   184c8:	b29a      	uxth	r2, r3
   184ca:	2312      	movs	r3, #18
   184cc:	18fb      	adds	r3, r7, r3
   184ce:	2112      	movs	r1, #18
   184d0:	1879      	adds	r1, r7, r1
   184d2:	8809      	ldrh	r1, [r1, #0]
   184d4:	400a      	ands	r2, r1
   184d6:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   184d8:	69bb      	ldr	r3, [r7, #24]
   184da:	2230      	movs	r2, #48	; 0x30
   184dc:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   184de:	69ba      	ldr	r2, [r7, #24]
   184e0:	2131      	movs	r1, #49	; 0x31
   184e2:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   184e4:	4013      	ands	r3, r2
   184e6:	b2da      	uxtb	r2, r3
   184e8:	2310      	movs	r3, #16
   184ea:	18fb      	adds	r3, r7, r3
   184ec:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   184ee:	2312      	movs	r3, #18
   184f0:	18fb      	adds	r3, r7, r3
   184f2:	881b      	ldrh	r3, [r3, #0]
   184f4:	2201      	movs	r2, #1
   184f6:	4013      	ands	r3, r2
   184f8:	d044      	beq.n	18584 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   184fa:	69bb      	ldr	r3, [r7, #24]
   184fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   184fe:	b29b      	uxth	r3, r3
   18500:	2b00      	cmp	r3, #0
   18502:	d03c      	beq.n	1857e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   18504:	69bb      	ldr	r3, [r7, #24]
   18506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18508:	781b      	ldrb	r3, [r3, #0]
   1850a:	b2da      	uxtb	r2, r3
   1850c:	231c      	movs	r3, #28
   1850e:	18fb      	adds	r3, r7, r3
   18510:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   18512:	69bb      	ldr	r3, [r7, #24]
   18514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18516:	1c5a      	adds	r2, r3, #1
   18518:	69bb      	ldr	r3, [r7, #24]
   1851a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1851c:	69bb      	ldr	r3, [r7, #24]
   1851e:	795b      	ldrb	r3, [r3, #5]
   18520:	2b01      	cmp	r3, #1
   18522:	d113      	bne.n	1854c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   18524:	69bb      	ldr	r3, [r7, #24]
   18526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18528:	781b      	ldrb	r3, [r3, #0]
   1852a:	b2db      	uxtb	r3, r3
   1852c:	021b      	lsls	r3, r3, #8
   1852e:	b21a      	sxth	r2, r3
   18530:	231c      	movs	r3, #28
   18532:	18fb      	adds	r3, r7, r3
   18534:	2100      	movs	r1, #0
   18536:	5e5b      	ldrsh	r3, [r3, r1]
   18538:	4313      	orrs	r3, r2
   1853a:	b21a      	sxth	r2, r3
   1853c:	231c      	movs	r3, #28
   1853e:	18fb      	adds	r3, r7, r3
   18540:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   18542:	69bb      	ldr	r3, [r7, #24]
   18544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18546:	1c5a      	adds	r2, r3, #1
   18548:	69bb      	ldr	r3, [r7, #24]
   1854a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   1854c:	231c      	movs	r3, #28
   1854e:	18fb      	adds	r3, r7, r3
   18550:	881b      	ldrh	r3, [r3, #0]
   18552:	05db      	lsls	r3, r3, #23
   18554:	0ddb      	lsrs	r3, r3, #23
   18556:	b29a      	uxth	r2, r3
   18558:	697b      	ldr	r3, [r7, #20]
   1855a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   1855c:	69bb      	ldr	r3, [r7, #24]
   1855e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   18560:	b29b      	uxth	r3, r3
   18562:	3b01      	subs	r3, #1
   18564:	b29b      	uxth	r3, r3
   18566:	69ba      	ldr	r2, [r7, #24]
   18568:	1c19      	adds	r1, r3, #0
   1856a:	85d1      	strh	r1, [r2, #46]	; 0x2e
   1856c:	2b00      	cmp	r3, #0
   1856e:	d109      	bne.n	18584 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   18570:	697b      	ldr	r3, [r7, #20]
   18572:	2201      	movs	r2, #1
   18574:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   18576:	697b      	ldr	r3, [r7, #20]
   18578:	2202      	movs	r2, #2
   1857a:	759a      	strb	r2, [r3, #22]
   1857c:	e002      	b.n	18584 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   1857e:	697b      	ldr	r3, [r7, #20]
   18580:	2201      	movs	r2, #1
   18582:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   18584:	2312      	movs	r3, #18
   18586:	18fb      	adds	r3, r7, r3
   18588:	881b      	ldrh	r3, [r3, #0]
   1858a:	2202      	movs	r2, #2
   1858c:	4013      	ands	r3, r2
   1858e:	d011      	beq.n	185b4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   18590:	697b      	ldr	r3, [r7, #20]
   18592:	2202      	movs	r2, #2
   18594:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   18596:	69bb      	ldr	r3, [r7, #24]
   18598:	2233      	movs	r2, #51	; 0x33
   1859a:	2100      	movs	r1, #0
   1859c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   1859e:	2310      	movs	r3, #16
   185a0:	18fb      	adds	r3, r7, r3
   185a2:	881b      	ldrh	r3, [r3, #0]
   185a4:	2201      	movs	r2, #1
   185a6:	4013      	ands	r3, r2
   185a8:	d004      	beq.n	185b4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   185aa:	69bb      	ldr	r3, [r7, #24]
   185ac:	68db      	ldr	r3, [r3, #12]
   185ae:	69ba      	ldr	r2, [r7, #24]
   185b0:	0010      	movs	r0, r2
   185b2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   185b4:	2312      	movs	r3, #18
   185b6:	18fb      	adds	r3, r7, r3
   185b8:	881b      	ldrh	r3, [r3, #0]
   185ba:	2204      	movs	r2, #4
   185bc:	4013      	ands	r3, r2
   185be:	d100      	bne.n	185c2 <_usart_interrupt_handler+0x132>
   185c0:	e0bd      	b.n	1873e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   185c2:	69bb      	ldr	r3, [r7, #24]
   185c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   185c6:	b29b      	uxth	r3, r3
   185c8:	2b00      	cmp	r3, #0
   185ca:	d100      	bne.n	185ce <_usart_interrupt_handler+0x13e>
   185cc:	e0b4      	b.n	18738 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   185ce:	697b      	ldr	r3, [r7, #20]
   185d0:	8b5b      	ldrh	r3, [r3, #26]
   185d2:	b29b      	uxth	r3, r3
   185d4:	b2da      	uxtb	r2, r3
   185d6:	231f      	movs	r3, #31
   185d8:	18fb      	adds	r3, r7, r3
   185da:	213f      	movs	r1, #63	; 0x3f
   185dc:	400a      	ands	r2, r1
   185de:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   185e0:	231f      	movs	r3, #31
   185e2:	18fb      	adds	r3, r7, r3
   185e4:	781b      	ldrb	r3, [r3, #0]
   185e6:	2208      	movs	r2, #8
   185e8:	4013      	ands	r3, r2
   185ea:	d007      	beq.n	185fc <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   185ec:	231f      	movs	r3, #31
   185ee:	18fb      	adds	r3, r7, r3
   185f0:	221f      	movs	r2, #31
   185f2:	18ba      	adds	r2, r7, r2
   185f4:	7812      	ldrb	r2, [r2, #0]
   185f6:	2108      	movs	r1, #8
   185f8:	438a      	bics	r2, r1
   185fa:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   185fc:	231f      	movs	r3, #31
   185fe:	18fb      	adds	r3, r7, r3
   18600:	781b      	ldrb	r3, [r3, #0]
   18602:	2b00      	cmp	r3, #0
   18604:	d050      	beq.n	186a8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   18606:	231f      	movs	r3, #31
   18608:	18fb      	adds	r3, r7, r3
   1860a:	781b      	ldrb	r3, [r3, #0]
   1860c:	2202      	movs	r2, #2
   1860e:	4013      	ands	r3, r2
   18610:	d007      	beq.n	18622 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   18612:	69bb      	ldr	r3, [r7, #24]
   18614:	2232      	movs	r2, #50	; 0x32
   18616:	211a      	movs	r1, #26
   18618:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   1861a:	697b      	ldr	r3, [r7, #20]
   1861c:	2202      	movs	r2, #2
   1861e:	835a      	strh	r2, [r3, #26]
   18620:	e036      	b.n	18690 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   18622:	231f      	movs	r3, #31
   18624:	18fb      	adds	r3, r7, r3
   18626:	781b      	ldrb	r3, [r3, #0]
   18628:	2204      	movs	r2, #4
   1862a:	4013      	ands	r3, r2
   1862c:	d007      	beq.n	1863e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   1862e:	69bb      	ldr	r3, [r7, #24]
   18630:	2232      	movs	r2, #50	; 0x32
   18632:	211e      	movs	r1, #30
   18634:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   18636:	697b      	ldr	r3, [r7, #20]
   18638:	2204      	movs	r2, #4
   1863a:	835a      	strh	r2, [r3, #26]
   1863c:	e028      	b.n	18690 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   1863e:	231f      	movs	r3, #31
   18640:	18fb      	adds	r3, r7, r3
   18642:	781b      	ldrb	r3, [r3, #0]
   18644:	2201      	movs	r2, #1
   18646:	4013      	ands	r3, r2
   18648:	d007      	beq.n	1865a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   1864a:	69bb      	ldr	r3, [r7, #24]
   1864c:	2232      	movs	r2, #50	; 0x32
   1864e:	2113      	movs	r1, #19
   18650:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   18652:	697b      	ldr	r3, [r7, #20]
   18654:	2201      	movs	r2, #1
   18656:	835a      	strh	r2, [r3, #26]
   18658:	e01a      	b.n	18690 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   1865a:	231f      	movs	r3, #31
   1865c:	18fb      	adds	r3, r7, r3
   1865e:	781b      	ldrb	r3, [r3, #0]
   18660:	2210      	movs	r2, #16
   18662:	4013      	ands	r3, r2
   18664:	d007      	beq.n	18676 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   18666:	69bb      	ldr	r3, [r7, #24]
   18668:	2232      	movs	r2, #50	; 0x32
   1866a:	2142      	movs	r1, #66	; 0x42
   1866c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   1866e:	697b      	ldr	r3, [r7, #20]
   18670:	2210      	movs	r2, #16
   18672:	835a      	strh	r2, [r3, #26]
   18674:	e00c      	b.n	18690 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   18676:	231f      	movs	r3, #31
   18678:	18fb      	adds	r3, r7, r3
   1867a:	781b      	ldrb	r3, [r3, #0]
   1867c:	2220      	movs	r2, #32
   1867e:	4013      	ands	r3, r2
   18680:	d006      	beq.n	18690 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   18682:	69bb      	ldr	r3, [r7, #24]
   18684:	2232      	movs	r2, #50	; 0x32
   18686:	2141      	movs	r1, #65	; 0x41
   18688:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   1868a:	697b      	ldr	r3, [r7, #20]
   1868c:	2220      	movs	r2, #32
   1868e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   18690:	2310      	movs	r3, #16
   18692:	18fb      	adds	r3, r7, r3
   18694:	881b      	ldrh	r3, [r3, #0]
   18696:	2204      	movs	r2, #4
   18698:	4013      	ands	r3, r2
				if (callback_status
   1869a:	d050      	beq.n	1873e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   1869c:	69bb      	ldr	r3, [r7, #24]
   1869e:	695b      	ldr	r3, [r3, #20]
   186a0:	69ba      	ldr	r2, [r7, #24]
   186a2:	0010      	movs	r0, r2
   186a4:	4798      	blx	r3
   186a6:	e04a      	b.n	1873e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   186a8:	697b      	ldr	r3, [r7, #20]
   186aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   186ac:	b29a      	uxth	r2, r3
   186ae:	230e      	movs	r3, #14
   186b0:	18fb      	adds	r3, r7, r3
   186b2:	05d2      	lsls	r2, r2, #23
   186b4:	0dd2      	lsrs	r2, r2, #23
   186b6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   186b8:	69bb      	ldr	r3, [r7, #24]
   186ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   186bc:	220e      	movs	r2, #14
   186be:	18ba      	adds	r2, r7, r2
   186c0:	8812      	ldrh	r2, [r2, #0]
   186c2:	b2d2      	uxtb	r2, r2
   186c4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   186c6:	69bb      	ldr	r3, [r7, #24]
   186c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   186ca:	1c5a      	adds	r2, r3, #1
   186cc:	69bb      	ldr	r3, [r7, #24]
   186ce:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   186d0:	69bb      	ldr	r3, [r7, #24]
   186d2:	795b      	ldrb	r3, [r3, #5]
   186d4:	2b01      	cmp	r3, #1
   186d6:	d10d      	bne.n	186f4 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   186d8:	69bb      	ldr	r3, [r7, #24]
   186da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   186dc:	220e      	movs	r2, #14
   186de:	18ba      	adds	r2, r7, r2
   186e0:	8812      	ldrh	r2, [r2, #0]
   186e2:	0a12      	lsrs	r2, r2, #8
   186e4:	b292      	uxth	r2, r2
   186e6:	b2d2      	uxtb	r2, r2
   186e8:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   186ea:	69bb      	ldr	r3, [r7, #24]
   186ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   186ee:	1c5a      	adds	r2, r3, #1
   186f0:	69bb      	ldr	r3, [r7, #24]
   186f2:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   186f4:	69bb      	ldr	r3, [r7, #24]
   186f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   186f8:	b29b      	uxth	r3, r3
   186fa:	3b01      	subs	r3, #1
   186fc:	b29b      	uxth	r3, r3
   186fe:	69ba      	ldr	r2, [r7, #24]
   18700:	1c19      	adds	r1, r3, #0
   18702:	8591      	strh	r1, [r2, #44]	; 0x2c
   18704:	2b00      	cmp	r3, #0
   18706:	d11a      	bne.n	1873e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   18708:	697b      	ldr	r3, [r7, #20]
   1870a:	2204      	movs	r2, #4
   1870c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   1870e:	69bb      	ldr	r3, [r7, #24]
   18710:	2232      	movs	r2, #50	; 0x32
   18712:	2100      	movs	r1, #0
   18714:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   18716:	2310      	movs	r3, #16
   18718:	18fb      	adds	r3, r7, r3
   1871a:	881b      	ldrh	r3, [r3, #0]
   1871c:	2202      	movs	r2, #2
   1871e:	4013      	ands	r3, r2
					if (callback_status
   18720:	d00d      	beq.n	1873e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   18722:	69bb      	ldr	r3, [r7, #24]
   18724:	691b      	ldr	r3, [r3, #16]
   18726:	69ba      	ldr	r2, [r7, #24]
   18728:	0010      	movs	r0, r2
   1872a:	4798      	blx	r3
   1872c:	e007      	b.n	1873e <_usart_interrupt_handler+0x2ae>
   1872e:	46c0      	nop			; (mov r8, r8)
   18730:	20002f70 	.word	0x20002f70
   18734:	00018271 	.word	0x00018271
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   18738:	697b      	ldr	r3, [r7, #20]
   1873a:	2204      	movs	r2, #4
   1873c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   1873e:	2312      	movs	r3, #18
   18740:	18fb      	adds	r3, r7, r3
   18742:	881b      	ldrh	r3, [r3, #0]
   18744:	2210      	movs	r2, #16
   18746:	4013      	ands	r3, r2
   18748:	d010      	beq.n	1876c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   1874a:	697b      	ldr	r3, [r7, #20]
   1874c:	2210      	movs	r2, #16
   1874e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   18750:	697b      	ldr	r3, [r7, #20]
   18752:	2210      	movs	r2, #16
   18754:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   18756:	2310      	movs	r3, #16
   18758:	18fb      	adds	r3, r7, r3
   1875a:	881b      	ldrh	r3, [r3, #0]
   1875c:	2210      	movs	r2, #16
   1875e:	4013      	ands	r3, r2
   18760:	d004      	beq.n	1876c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   18762:	69bb      	ldr	r3, [r7, #24]
   18764:	69db      	ldr	r3, [r3, #28]
   18766:	69ba      	ldr	r2, [r7, #24]
   18768:	0010      	movs	r0, r2
   1876a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   1876c:	2312      	movs	r3, #18
   1876e:	18fb      	adds	r3, r7, r3
   18770:	881b      	ldrh	r3, [r3, #0]
   18772:	2220      	movs	r2, #32
   18774:	4013      	ands	r3, r2
   18776:	d010      	beq.n	1879a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   18778:	697b      	ldr	r3, [r7, #20]
   1877a:	2220      	movs	r2, #32
   1877c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   1877e:	697b      	ldr	r3, [r7, #20]
   18780:	2220      	movs	r2, #32
   18782:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   18784:	2310      	movs	r3, #16
   18786:	18fb      	adds	r3, r7, r3
   18788:	881b      	ldrh	r3, [r3, #0]
   1878a:	2208      	movs	r2, #8
   1878c:	4013      	ands	r3, r2
   1878e:	d004      	beq.n	1879a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   18790:	69bb      	ldr	r3, [r7, #24]
   18792:	699b      	ldr	r3, [r3, #24]
   18794:	69ba      	ldr	r2, [r7, #24]
   18796:	0010      	movs	r0, r2
   18798:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   1879a:	2312      	movs	r3, #18
   1879c:	18fb      	adds	r3, r7, r3
   1879e:	881b      	ldrh	r3, [r3, #0]
   187a0:	2208      	movs	r2, #8
   187a2:	4013      	ands	r3, r2
   187a4:	d010      	beq.n	187c8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   187a6:	697b      	ldr	r3, [r7, #20]
   187a8:	2208      	movs	r2, #8
   187aa:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   187ac:	697b      	ldr	r3, [r7, #20]
   187ae:	2208      	movs	r2, #8
   187b0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   187b2:	2310      	movs	r3, #16
   187b4:	18fb      	adds	r3, r7, r3
   187b6:	881b      	ldrh	r3, [r3, #0]
   187b8:	2220      	movs	r2, #32
   187ba:	4013      	ands	r3, r2
   187bc:	d004      	beq.n	187c8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   187be:	69bb      	ldr	r3, [r7, #24]
   187c0:	6a1b      	ldr	r3, [r3, #32]
   187c2:	69ba      	ldr	r2, [r7, #24]
   187c4:	0010      	movs	r0, r2
   187c6:	4798      	blx	r3
		}
	}
#endif
}
   187c8:	46c0      	nop			; (mov r8, r8)
   187ca:	46bd      	mov	sp, r7
   187cc:	b008      	add	sp, #32
   187ce:	bd80      	pop	{r7, pc}

000187d0 <system_gclk_gen_get_config_defaults>:
{
   187d0:	b580      	push	{r7, lr}
   187d2:	b082      	sub	sp, #8
   187d4:	af00      	add	r7, sp, #0
   187d6:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   187d8:	687b      	ldr	r3, [r7, #4]
   187da:	2201      	movs	r2, #1
   187dc:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   187de:	687b      	ldr	r3, [r7, #4]
   187e0:	2200      	movs	r2, #0
   187e2:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   187e4:	687b      	ldr	r3, [r7, #4]
   187e6:	2206      	movs	r2, #6
   187e8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   187ea:	687b      	ldr	r3, [r7, #4]
   187ec:	2200      	movs	r2, #0
   187ee:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   187f0:	687b      	ldr	r3, [r7, #4]
   187f2:	2200      	movs	r2, #0
   187f4:	725a      	strb	r2, [r3, #9]
}
   187f6:	46c0      	nop			; (mov r8, r8)
   187f8:	46bd      	mov	sp, r7
   187fa:	b002      	add	sp, #8
   187fc:	bd80      	pop	{r7, pc}

000187fe <system_gclk_chan_get_config_defaults>:
{
   187fe:	b580      	push	{r7, lr}
   18800:	b082      	sub	sp, #8
   18802:	af00      	add	r7, sp, #0
   18804:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   18806:	687b      	ldr	r3, [r7, #4]
   18808:	2200      	movs	r2, #0
   1880a:	701a      	strb	r2, [r3, #0]
}
   1880c:	46c0      	nop			; (mov r8, r8)
   1880e:	46bd      	mov	sp, r7
   18810:	b002      	add	sp, #8
   18812:	bd80      	pop	{r7, pc}

00018814 <system_clock_source_osc8m_get_config_defaults>:
{
   18814:	b580      	push	{r7, lr}
   18816:	b082      	sub	sp, #8
   18818:	af00      	add	r7, sp, #0
   1881a:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   1881c:	687b      	ldr	r3, [r7, #4]
   1881e:	2203      	movs	r2, #3
   18820:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   18822:	687b      	ldr	r3, [r7, #4]
   18824:	2200      	movs	r2, #0
   18826:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   18828:	687b      	ldr	r3, [r7, #4]
   1882a:	2201      	movs	r2, #1
   1882c:	709a      	strb	r2, [r3, #2]
}
   1882e:	46c0      	nop			; (mov r8, r8)
   18830:	46bd      	mov	sp, r7
   18832:	b002      	add	sp, #8
   18834:	bd80      	pop	{r7, pc}
	...

00018838 <system_cpu_clock_set_divider>:
{
   18838:	b580      	push	{r7, lr}
   1883a:	b082      	sub	sp, #8
   1883c:	af00      	add	r7, sp, #0
   1883e:	0002      	movs	r2, r0
   18840:	1dfb      	adds	r3, r7, #7
   18842:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   18844:	4a03      	ldr	r2, [pc, #12]	; (18854 <system_cpu_clock_set_divider+0x1c>)
   18846:	1dfb      	adds	r3, r7, #7
   18848:	781b      	ldrb	r3, [r3, #0]
   1884a:	7213      	strb	r3, [r2, #8]
}
   1884c:	46c0      	nop			; (mov r8, r8)
   1884e:	46bd      	mov	sp, r7
   18850:	b002      	add	sp, #8
   18852:	bd80      	pop	{r7, pc}
   18854:	40000400 	.word	0x40000400

00018858 <system_apb_clock_set_divider>:
{
   18858:	b580      	push	{r7, lr}
   1885a:	b082      	sub	sp, #8
   1885c:	af00      	add	r7, sp, #0
   1885e:	0002      	movs	r2, r0
   18860:	1dfb      	adds	r3, r7, #7
   18862:	701a      	strb	r2, [r3, #0]
   18864:	1dbb      	adds	r3, r7, #6
   18866:	1c0a      	adds	r2, r1, #0
   18868:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1886a:	1dfb      	adds	r3, r7, #7
   1886c:	781b      	ldrb	r3, [r3, #0]
   1886e:	2b01      	cmp	r3, #1
   18870:	d008      	beq.n	18884 <system_apb_clock_set_divider+0x2c>
   18872:	2b02      	cmp	r3, #2
   18874:	d00b      	beq.n	1888e <system_apb_clock_set_divider+0x36>
   18876:	2b00      	cmp	r3, #0
   18878:	d10e      	bne.n	18898 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   1887a:	4a0b      	ldr	r2, [pc, #44]	; (188a8 <system_apb_clock_set_divider+0x50>)
   1887c:	1dbb      	adds	r3, r7, #6
   1887e:	781b      	ldrb	r3, [r3, #0]
   18880:	7253      	strb	r3, [r2, #9]
			break;
   18882:	e00b      	b.n	1889c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   18884:	4a08      	ldr	r2, [pc, #32]	; (188a8 <system_apb_clock_set_divider+0x50>)
   18886:	1dbb      	adds	r3, r7, #6
   18888:	781b      	ldrb	r3, [r3, #0]
   1888a:	7293      	strb	r3, [r2, #10]
			break;
   1888c:	e006      	b.n	1889c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   1888e:	4a06      	ldr	r2, [pc, #24]	; (188a8 <system_apb_clock_set_divider+0x50>)
   18890:	1dbb      	adds	r3, r7, #6
   18892:	781b      	ldrb	r3, [r3, #0]
   18894:	72d3      	strb	r3, [r2, #11]
			break;
   18896:	e001      	b.n	1889c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   18898:	2317      	movs	r3, #23
   1889a:	e000      	b.n	1889e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   1889c:	2300      	movs	r3, #0
}
   1889e:	0018      	movs	r0, r3
   188a0:	46bd      	mov	sp, r7
   188a2:	b002      	add	sp, #8
   188a4:	bd80      	pop	{r7, pc}
   188a6:	46c0      	nop			; (mov r8, r8)
   188a8:	40000400 	.word	0x40000400

000188ac <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   188ac:	b580      	push	{r7, lr}
   188ae:	b082      	sub	sp, #8
   188b0:	af00      	add	r7, sp, #0
   188b2:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   188b4:	687b      	ldr	r3, [r7, #4]
   188b6:	2201      	movs	r2, #1
   188b8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   188ba:	687b      	ldr	r3, [r7, #4]
   188bc:	2200      	movs	r2, #0
   188be:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   188c0:	687b      	ldr	r3, [r7, #4]
   188c2:	2200      	movs	r2, #0
   188c4:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   188c6:	687b      	ldr	r3, [r7, #4]
   188c8:	2200      	movs	r2, #0
   188ca:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   188cc:	687b      	ldr	r3, [r7, #4]
   188ce:	2200      	movs	r2, #0
   188d0:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   188d2:	687b      	ldr	r3, [r7, #4]
   188d4:	4a0a      	ldr	r2, [pc, #40]	; (18900 <system_clock_source_dpll_get_config_defaults+0x54>)
   188d6:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   188d8:	687b      	ldr	r3, [r7, #4]
   188da:	2280      	movs	r2, #128	; 0x80
   188dc:	0212      	lsls	r2, r2, #8
   188de:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   188e0:	687b      	ldr	r3, [r7, #4]
   188e2:	2201      	movs	r2, #1
   188e4:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   188e6:	687b      	ldr	r3, [r7, #4]
   188e8:	2200      	movs	r2, #0
   188ea:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   188ec:	687b      	ldr	r3, [r7, #4]
   188ee:	2200      	movs	r2, #0
   188f0:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   188f2:	687b      	ldr	r3, [r7, #4]
   188f4:	2200      	movs	r2, #0
   188f6:	749a      	strb	r2, [r3, #18]
};
   188f8:	46c0      	nop			; (mov r8, r8)
   188fa:	46bd      	mov	sp, r7
   188fc:	b002      	add	sp, #8
   188fe:	bd80      	pop	{r7, pc}
   18900:	02dc6c00 	.word	0x02dc6c00

00018904 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   18904:	b580      	push	{r7, lr}
   18906:	b082      	sub	sp, #8
   18908:	af00      	add	r7, sp, #0
   1890a:	0002      	movs	r2, r0
   1890c:	1dfb      	adds	r3, r7, #7
   1890e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   18910:	4a08      	ldr	r2, [pc, #32]	; (18934 <system_flash_set_waitstates+0x30>)
   18912:	1dfb      	adds	r3, r7, #7
   18914:	781b      	ldrb	r3, [r3, #0]
   18916:	210f      	movs	r1, #15
   18918:	400b      	ands	r3, r1
   1891a:	b2d9      	uxtb	r1, r3
   1891c:	6853      	ldr	r3, [r2, #4]
   1891e:	200f      	movs	r0, #15
   18920:	4001      	ands	r1, r0
   18922:	0049      	lsls	r1, r1, #1
   18924:	201e      	movs	r0, #30
   18926:	4383      	bics	r3, r0
   18928:	430b      	orrs	r3, r1
   1892a:	6053      	str	r3, [r2, #4]
}
   1892c:	46c0      	nop			; (mov r8, r8)
   1892e:	46bd      	mov	sp, r7
   18930:	b002      	add	sp, #8
   18932:	bd80      	pop	{r7, pc}
   18934:	41004000 	.word	0x41004000

00018938 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   18938:	b580      	push	{r7, lr}
   1893a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1893c:	46c0      	nop			; (mov r8, r8)
   1893e:	4b04      	ldr	r3, [pc, #16]	; (18950 <_system_dfll_wait_for_sync+0x18>)
   18940:	68db      	ldr	r3, [r3, #12]
   18942:	2210      	movs	r2, #16
   18944:	4013      	ands	r3, r2
   18946:	d0fa      	beq.n	1893e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   18948:	46c0      	nop			; (mov r8, r8)
   1894a:	46bd      	mov	sp, r7
   1894c:	bd80      	pop	{r7, pc}
   1894e:	46c0      	nop			; (mov r8, r8)
   18950:	40000800 	.word	0x40000800

00018954 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   18954:	b580      	push	{r7, lr}
   18956:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   18958:	4b0c      	ldr	r3, [pc, #48]	; (1898c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1895a:	2202      	movs	r2, #2
   1895c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   1895e:	4b0c      	ldr	r3, [pc, #48]	; (18990 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   18960:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   18962:	4a0a      	ldr	r2, [pc, #40]	; (1898c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   18964:	4b0b      	ldr	r3, [pc, #44]	; (18994 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   18966:	689b      	ldr	r3, [r3, #8]
   18968:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   1896a:	4a08      	ldr	r2, [pc, #32]	; (1898c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1896c:	4b09      	ldr	r3, [pc, #36]	; (18994 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   1896e:	685b      	ldr	r3, [r3, #4]
   18970:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   18972:	4b06      	ldr	r3, [pc, #24]	; (1898c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   18974:	2200      	movs	r2, #0
   18976:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   18978:	4b05      	ldr	r3, [pc, #20]	; (18990 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   1897a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1897c:	4a03      	ldr	r2, [pc, #12]	; (1898c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1897e:	4b05      	ldr	r3, [pc, #20]	; (18994 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   18980:	681b      	ldr	r3, [r3, #0]
   18982:	b29b      	uxth	r3, r3
   18984:	8493      	strh	r3, [r2, #36]	; 0x24
}
   18986:	46c0      	nop			; (mov r8, r8)
   18988:	46bd      	mov	sp, r7
   1898a:	bd80      	pop	{r7, pc}
   1898c:	40000800 	.word	0x40000800
   18990:	00018939 	.word	0x00018939
   18994:	200029c8 	.word	0x200029c8

00018998 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   18998:	b580      	push	{r7, lr}
   1899a:	b082      	sub	sp, #8
   1899c:	af00      	add	r7, sp, #0
   1899e:	0002      	movs	r2, r0
   189a0:	1dfb      	adds	r3, r7, #7
   189a2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   189a4:	1dfb      	adds	r3, r7, #7
   189a6:	781b      	ldrb	r3, [r3, #0]
   189a8:	2b08      	cmp	r3, #8
   189aa:	d841      	bhi.n	18a30 <system_clock_source_get_hz+0x98>
   189ac:	009a      	lsls	r2, r3, #2
   189ae:	4b23      	ldr	r3, [pc, #140]	; (18a3c <system_clock_source_get_hz+0xa4>)
   189b0:	18d3      	adds	r3, r2, r3
   189b2:	681b      	ldr	r3, [r3, #0]
   189b4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   189b6:	4b22      	ldr	r3, [pc, #136]	; (18a40 <system_clock_source_get_hz+0xa8>)
   189b8:	691b      	ldr	r3, [r3, #16]
   189ba:	e03a      	b.n	18a32 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   189bc:	4b21      	ldr	r3, [pc, #132]	; (18a44 <system_clock_source_get_hz+0xac>)
   189be:	6a1b      	ldr	r3, [r3, #32]
   189c0:	059b      	lsls	r3, r3, #22
   189c2:	0f9b      	lsrs	r3, r3, #30
   189c4:	b2db      	uxtb	r3, r3
   189c6:	001a      	movs	r2, r3
   189c8:	4b1f      	ldr	r3, [pc, #124]	; (18a48 <system_clock_source_get_hz+0xb0>)
   189ca:	40d3      	lsrs	r3, r2
   189cc:	e031      	b.n	18a32 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   189ce:	2380      	movs	r3, #128	; 0x80
   189d0:	021b      	lsls	r3, r3, #8
   189d2:	e02e      	b.n	18a32 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   189d4:	2380      	movs	r3, #128	; 0x80
   189d6:	021b      	lsls	r3, r3, #8
   189d8:	e02b      	b.n	18a32 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   189da:	4b19      	ldr	r3, [pc, #100]	; (18a40 <system_clock_source_get_hz+0xa8>)
   189dc:	695b      	ldr	r3, [r3, #20]
   189de:	e028      	b.n	18a32 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   189e0:	4b17      	ldr	r3, [pc, #92]	; (18a40 <system_clock_source_get_hz+0xa8>)
   189e2:	681b      	ldr	r3, [r3, #0]
   189e4:	2202      	movs	r2, #2
   189e6:	4013      	ands	r3, r2
   189e8:	d101      	bne.n	189ee <system_clock_source_get_hz+0x56>
			return 0;
   189ea:	2300      	movs	r3, #0
   189ec:	e021      	b.n	18a32 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   189ee:	4b17      	ldr	r3, [pc, #92]	; (18a4c <system_clock_source_get_hz+0xb4>)
   189f0:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   189f2:	4b13      	ldr	r3, [pc, #76]	; (18a40 <system_clock_source_get_hz+0xa8>)
   189f4:	681b      	ldr	r3, [r3, #0]
   189f6:	2224      	movs	r2, #36	; 0x24
   189f8:	4013      	ands	r3, r2
   189fa:	2b04      	cmp	r3, #4
   189fc:	d109      	bne.n	18a12 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   189fe:	2000      	movs	r0, #0
   18a00:	4b13      	ldr	r3, [pc, #76]	; (18a50 <system_clock_source_get_hz+0xb8>)
   18a02:	4798      	blx	r3
   18a04:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   18a06:	4b0e      	ldr	r3, [pc, #56]	; (18a40 <system_clock_source_get_hz+0xa8>)
   18a08:	689b      	ldr	r3, [r3, #8]
   18a0a:	041b      	lsls	r3, r3, #16
   18a0c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   18a0e:	4353      	muls	r3, r2
   18a10:	e00f      	b.n	18a32 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   18a12:	4b10      	ldr	r3, [pc, #64]	; (18a54 <system_clock_source_get_hz+0xbc>)
   18a14:	e00d      	b.n	18a32 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   18a16:	4a0b      	ldr	r2, [pc, #44]	; (18a44 <system_clock_source_get_hz+0xac>)
   18a18:	2350      	movs	r3, #80	; 0x50
   18a1a:	5cd3      	ldrb	r3, [r2, r3]
   18a1c:	b2db      	uxtb	r3, r3
   18a1e:	001a      	movs	r2, r3
   18a20:	2304      	movs	r3, #4
   18a22:	4013      	ands	r3, r2
   18a24:	d101      	bne.n	18a2a <system_clock_source_get_hz+0x92>
			return 0;
   18a26:	2300      	movs	r3, #0
   18a28:	e003      	b.n	18a32 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   18a2a:	4b05      	ldr	r3, [pc, #20]	; (18a40 <system_clock_source_get_hz+0xa8>)
   18a2c:	68db      	ldr	r3, [r3, #12]
   18a2e:	e000      	b.n	18a32 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   18a30:	2300      	movs	r3, #0
	}
}
   18a32:	0018      	movs	r0, r3
   18a34:	46bd      	mov	sp, r7
   18a36:	b002      	add	sp, #8
   18a38:	bd80      	pop	{r7, pc}
   18a3a:	46c0      	nop			; (mov r8, r8)
   18a3c:	0001bfb8 	.word	0x0001bfb8
   18a40:	200029c8 	.word	0x200029c8
   18a44:	40000800 	.word	0x40000800
   18a48:	007a1200 	.word	0x007a1200
   18a4c:	00018939 	.word	0x00018939
   18a50:	000193f9 	.word	0x000193f9
   18a54:	02dc6c00 	.word	0x02dc6c00

00018a58 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   18a58:	b580      	push	{r7, lr}
   18a5a:	b084      	sub	sp, #16
   18a5c:	af00      	add	r7, sp, #0
   18a5e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   18a60:	4b1a      	ldr	r3, [pc, #104]	; (18acc <system_clock_source_osc8m_set_config+0x74>)
   18a62:	6a1b      	ldr	r3, [r3, #32]
   18a64:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   18a66:	687b      	ldr	r3, [r7, #4]
   18a68:	781b      	ldrb	r3, [r3, #0]
   18a6a:	1c1a      	adds	r2, r3, #0
   18a6c:	2303      	movs	r3, #3
   18a6e:	4013      	ands	r3, r2
   18a70:	b2da      	uxtb	r2, r3
   18a72:	230d      	movs	r3, #13
   18a74:	18fb      	adds	r3, r7, r3
   18a76:	2103      	movs	r1, #3
   18a78:	400a      	ands	r2, r1
   18a7a:	0010      	movs	r0, r2
   18a7c:	781a      	ldrb	r2, [r3, #0]
   18a7e:	2103      	movs	r1, #3
   18a80:	438a      	bics	r2, r1
   18a82:	1c11      	adds	r1, r2, #0
   18a84:	1c02      	adds	r2, r0, #0
   18a86:	430a      	orrs	r2, r1
   18a88:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   18a8a:	687b      	ldr	r3, [r7, #4]
   18a8c:	789a      	ldrb	r2, [r3, #2]
   18a8e:	230c      	movs	r3, #12
   18a90:	18fb      	adds	r3, r7, r3
   18a92:	01d0      	lsls	r0, r2, #7
   18a94:	781a      	ldrb	r2, [r3, #0]
   18a96:	217f      	movs	r1, #127	; 0x7f
   18a98:	400a      	ands	r2, r1
   18a9a:	1c11      	adds	r1, r2, #0
   18a9c:	1c02      	adds	r2, r0, #0
   18a9e:	430a      	orrs	r2, r1
   18aa0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   18aa2:	687b      	ldr	r3, [r7, #4]
   18aa4:	785a      	ldrb	r2, [r3, #1]
   18aa6:	230c      	movs	r3, #12
   18aa8:	18fb      	adds	r3, r7, r3
   18aaa:	2101      	movs	r1, #1
   18aac:	400a      	ands	r2, r1
   18aae:	0190      	lsls	r0, r2, #6
   18ab0:	781a      	ldrb	r2, [r3, #0]
   18ab2:	2140      	movs	r1, #64	; 0x40
   18ab4:	438a      	bics	r2, r1
   18ab6:	1c11      	adds	r1, r2, #0
   18ab8:	1c02      	adds	r2, r0, #0
   18aba:	430a      	orrs	r2, r1
   18abc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   18abe:	4b03      	ldr	r3, [pc, #12]	; (18acc <system_clock_source_osc8m_set_config+0x74>)
   18ac0:	68fa      	ldr	r2, [r7, #12]
   18ac2:	621a      	str	r2, [r3, #32]
}
   18ac4:	46c0      	nop			; (mov r8, r8)
   18ac6:	46bd      	mov	sp, r7
   18ac8:	b004      	add	sp, #16
   18aca:	bd80      	pop	{r7, pc}
   18acc:	40000800 	.word	0x40000800

00018ad0 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   18ad0:	b580      	push	{r7, lr}
   18ad2:	b086      	sub	sp, #24
   18ad4:	af00      	add	r7, sp, #0
   18ad6:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   18ad8:	687b      	ldr	r3, [r7, #4]
   18ada:	68db      	ldr	r3, [r3, #12]
   18adc:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   18ade:	687b      	ldr	r3, [r7, #4]
   18ae0:	7d1b      	ldrb	r3, [r3, #20]
   18ae2:	2b01      	cmp	r3, #1
   18ae4:	d10a      	bne.n	18afc <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   18ae6:	687b      	ldr	r3, [r7, #4]
   18ae8:	8a1b      	ldrh	r3, [r3, #16]
   18aea:	3301      	adds	r3, #1
   18aec:	005b      	lsls	r3, r3, #1
   18aee:	001a      	movs	r2, r3
   18af0:	4b36      	ldr	r3, [pc, #216]	; (18bcc <system_clock_source_dpll_set_config+0xfc>)
   18af2:	0011      	movs	r1, r2
   18af4:	6978      	ldr	r0, [r7, #20]
   18af6:	4798      	blx	r3
   18af8:	0003      	movs	r3, r0
   18afa:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   18afc:	687b      	ldr	r3, [r7, #4]
   18afe:	689b      	ldr	r3, [r3, #8]
   18b00:	011a      	lsls	r2, r3, #4
   18b02:	4b32      	ldr	r3, [pc, #200]	; (18bcc <system_clock_source_dpll_set_config+0xfc>)
   18b04:	6979      	ldr	r1, [r7, #20]
   18b06:	0010      	movs	r0, r2
   18b08:	4798      	blx	r3
   18b0a:	0003      	movs	r3, r0
   18b0c:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   18b0e:	693b      	ldr	r3, [r7, #16]
   18b10:	b2da      	uxtb	r2, r3
   18b12:	230f      	movs	r3, #15
   18b14:	18fb      	adds	r3, r7, r3
   18b16:	210f      	movs	r1, #15
   18b18:	400a      	ands	r2, r1
   18b1a:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   18b1c:	693b      	ldr	r3, [r7, #16]
   18b1e:	091b      	lsrs	r3, r3, #4
   18b20:	3b01      	subs	r3, #1
   18b22:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   18b24:	492a      	ldr	r1, [pc, #168]	; (18bd0 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   18b26:	687b      	ldr	r3, [r7, #4]
   18b28:	781b      	ldrb	r3, [r3, #0]
   18b2a:	01db      	lsls	r3, r3, #7
   18b2c:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   18b2e:	687b      	ldr	r3, [r7, #4]
   18b30:	785b      	ldrb	r3, [r3, #1]
   18b32:	019b      	lsls	r3, r3, #6
   18b34:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   18b36:	4313      	orrs	r3, r2
   18b38:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   18b3a:	2344      	movs	r3, #68	; 0x44
   18b3c:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   18b3e:	4b24      	ldr	r3, [pc, #144]	; (18bd0 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   18b40:	220f      	movs	r2, #15
   18b42:	18ba      	adds	r2, r7, r2
   18b44:	7812      	ldrb	r2, [r2, #0]
   18b46:	0412      	lsls	r2, r2, #16
   18b48:	0011      	movs	r1, r2
   18b4a:	22f0      	movs	r2, #240	; 0xf0
   18b4c:	0312      	lsls	r2, r2, #12
   18b4e:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   18b50:	693a      	ldr	r2, [r7, #16]
   18b52:	0512      	lsls	r2, r2, #20
   18b54:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   18b56:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   18b58:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   18b5a:	4b1d      	ldr	r3, [pc, #116]	; (18bd0 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   18b5c:	687a      	ldr	r2, [r7, #4]
   18b5e:	8a12      	ldrh	r2, [r2, #16]
   18b60:	0412      	lsls	r2, r2, #16
   18b62:	0011      	movs	r1, r2
   18b64:	4a1b      	ldr	r2, [pc, #108]	; (18bd4 <system_clock_source_dpll_set_config+0x104>)
   18b66:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   18b68:	687a      	ldr	r2, [r7, #4]
   18b6a:	7892      	ldrb	r2, [r2, #2]
   18b6c:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   18b6e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   18b70:	687a      	ldr	r2, [r7, #4]
   18b72:	7cd2      	ldrb	r2, [r2, #19]
   18b74:	0212      	lsls	r2, r2, #8
   18b76:	0010      	movs	r0, r2
   18b78:	22e0      	movs	r2, #224	; 0xe0
   18b7a:	00d2      	lsls	r2, r2, #3
   18b7c:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   18b7e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   18b80:	687a      	ldr	r2, [r7, #4]
   18b82:	7d12      	ldrb	r2, [r2, #20]
   18b84:	0112      	lsls	r2, r2, #4
   18b86:	0010      	movs	r0, r2
   18b88:	2230      	movs	r2, #48	; 0x30
   18b8a:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   18b8c:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   18b8e:	687a      	ldr	r2, [r7, #4]
   18b90:	78d2      	ldrb	r2, [r2, #3]
   18b92:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   18b94:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   18b96:	687a      	ldr	r2, [r7, #4]
   18b98:	7912      	ldrb	r2, [r2, #4]
   18b9a:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   18b9c:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   18b9e:	687a      	ldr	r2, [r7, #4]
   18ba0:	7c92      	ldrb	r2, [r2, #18]
   18ba2:	0010      	movs	r0, r2
   18ba4:	2203      	movs	r2, #3
   18ba6:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   18ba8:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   18baa:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   18bac:	693b      	ldr	r3, [r7, #16]
   18bae:	3301      	adds	r3, #1
   18bb0:	011a      	lsls	r2, r3, #4
   18bb2:	230f      	movs	r3, #15
   18bb4:	18fb      	adds	r3, r7, r3
   18bb6:	781b      	ldrb	r3, [r3, #0]
   18bb8:	18d3      	adds	r3, r2, r3
   18bba:	697a      	ldr	r2, [r7, #20]
   18bbc:	4353      	muls	r3, r2
   18bbe:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   18bc0:	4b05      	ldr	r3, [pc, #20]	; (18bd8 <system_clock_source_dpll_set_config+0x108>)
   18bc2:	60da      	str	r2, [r3, #12]
}
   18bc4:	46c0      	nop			; (mov r8, r8)
   18bc6:	46bd      	mov	sp, r7
   18bc8:	b006      	add	sp, #24
   18bca:	bd80      	pop	{r7, pc}
   18bcc:	00019aad 	.word	0x00019aad
   18bd0:	40000800 	.word	0x40000800
   18bd4:	07ff0000 	.word	0x07ff0000
   18bd8:	200029c8 	.word	0x200029c8

00018bdc <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   18bdc:	b580      	push	{r7, lr}
   18bde:	b082      	sub	sp, #8
   18be0:	af00      	add	r7, sp, #0
   18be2:	0002      	movs	r2, r0
   18be4:	1dfb      	adds	r3, r7, #7
   18be6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   18be8:	1dfb      	adds	r3, r7, #7
   18bea:	781b      	ldrb	r3, [r3, #0]
   18bec:	2b08      	cmp	r3, #8
   18bee:	d83b      	bhi.n	18c68 <system_clock_source_enable+0x8c>
   18bf0:	009a      	lsls	r2, r3, #2
   18bf2:	4b21      	ldr	r3, [pc, #132]	; (18c78 <system_clock_source_enable+0x9c>)
   18bf4:	18d3      	adds	r3, r2, r3
   18bf6:	681b      	ldr	r3, [r3, #0]
   18bf8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   18bfa:	4b20      	ldr	r3, [pc, #128]	; (18c7c <system_clock_source_enable+0xa0>)
   18bfc:	4a1f      	ldr	r2, [pc, #124]	; (18c7c <system_clock_source_enable+0xa0>)
   18bfe:	6a12      	ldr	r2, [r2, #32]
   18c00:	2102      	movs	r1, #2
   18c02:	430a      	orrs	r2, r1
   18c04:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   18c06:	2300      	movs	r3, #0
   18c08:	e031      	b.n	18c6e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   18c0a:	4b1c      	ldr	r3, [pc, #112]	; (18c7c <system_clock_source_enable+0xa0>)
   18c0c:	4a1b      	ldr	r2, [pc, #108]	; (18c7c <system_clock_source_enable+0xa0>)
   18c0e:	6992      	ldr	r2, [r2, #24]
   18c10:	2102      	movs	r1, #2
   18c12:	430a      	orrs	r2, r1
   18c14:	619a      	str	r2, [r3, #24]
		break;
   18c16:	e029      	b.n	18c6c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   18c18:	4a18      	ldr	r2, [pc, #96]	; (18c7c <system_clock_source_enable+0xa0>)
   18c1a:	4b18      	ldr	r3, [pc, #96]	; (18c7c <system_clock_source_enable+0xa0>)
   18c1c:	8a1b      	ldrh	r3, [r3, #16]
   18c1e:	b29b      	uxth	r3, r3
   18c20:	2102      	movs	r1, #2
   18c22:	430b      	orrs	r3, r1
   18c24:	b29b      	uxth	r3, r3
   18c26:	8213      	strh	r3, [r2, #16]
		break;
   18c28:	e020      	b.n	18c6c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   18c2a:	4a14      	ldr	r2, [pc, #80]	; (18c7c <system_clock_source_enable+0xa0>)
   18c2c:	4b13      	ldr	r3, [pc, #76]	; (18c7c <system_clock_source_enable+0xa0>)
   18c2e:	8a9b      	ldrh	r3, [r3, #20]
   18c30:	b29b      	uxth	r3, r3
   18c32:	2102      	movs	r1, #2
   18c34:	430b      	orrs	r3, r1
   18c36:	b29b      	uxth	r3, r3
   18c38:	8293      	strh	r3, [r2, #20]
		break;
   18c3a:	e017      	b.n	18c6c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   18c3c:	4b10      	ldr	r3, [pc, #64]	; (18c80 <system_clock_source_enable+0xa4>)
   18c3e:	681b      	ldr	r3, [r3, #0]
   18c40:	2202      	movs	r2, #2
   18c42:	431a      	orrs	r2, r3
   18c44:	4b0e      	ldr	r3, [pc, #56]	; (18c80 <system_clock_source_enable+0xa4>)
   18c46:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   18c48:	4b0e      	ldr	r3, [pc, #56]	; (18c84 <system_clock_source_enable+0xa8>)
   18c4a:	4798      	blx	r3
		break;
   18c4c:	e00e      	b.n	18c6c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   18c4e:	4a0b      	ldr	r2, [pc, #44]	; (18c7c <system_clock_source_enable+0xa0>)
   18c50:	490a      	ldr	r1, [pc, #40]	; (18c7c <system_clock_source_enable+0xa0>)
   18c52:	2344      	movs	r3, #68	; 0x44
   18c54:	5ccb      	ldrb	r3, [r1, r3]
   18c56:	b2db      	uxtb	r3, r3
   18c58:	2102      	movs	r1, #2
   18c5a:	430b      	orrs	r3, r1
   18c5c:	b2d9      	uxtb	r1, r3
   18c5e:	2344      	movs	r3, #68	; 0x44
   18c60:	54d1      	strb	r1, [r2, r3]
		break;
   18c62:	e003      	b.n	18c6c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   18c64:	2300      	movs	r3, #0
   18c66:	e002      	b.n	18c6e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   18c68:	2317      	movs	r3, #23
   18c6a:	e000      	b.n	18c6e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   18c6c:	2300      	movs	r3, #0
}
   18c6e:	0018      	movs	r0, r3
   18c70:	46bd      	mov	sp, r7
   18c72:	b002      	add	sp, #8
   18c74:	bd80      	pop	{r7, pc}
   18c76:	46c0      	nop			; (mov r8, r8)
   18c78:	0001bfdc 	.word	0x0001bfdc
   18c7c:	40000800 	.word	0x40000800
   18c80:	200029c8 	.word	0x200029c8
   18c84:	00018955 	.word	0x00018955

00018c88 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   18c88:	b580      	push	{r7, lr}
   18c8a:	b084      	sub	sp, #16
   18c8c:	af00      	add	r7, sp, #0
   18c8e:	0002      	movs	r2, r0
   18c90:	1dfb      	adds	r3, r7, #7
   18c92:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   18c94:	2300      	movs	r3, #0
   18c96:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   18c98:	1dfb      	adds	r3, r7, #7
   18c9a:	781b      	ldrb	r3, [r3, #0]
   18c9c:	2b08      	cmp	r3, #8
   18c9e:	d821      	bhi.n	18ce4 <system_clock_source_is_ready+0x5c>
   18ca0:	009a      	lsls	r2, r3, #2
   18ca2:	4b18      	ldr	r3, [pc, #96]	; (18d04 <system_clock_source_is_ready+0x7c>)
   18ca4:	18d3      	adds	r3, r2, r3
   18ca6:	681b      	ldr	r3, [r3, #0]
   18ca8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   18caa:	2308      	movs	r3, #8
   18cac:	60fb      	str	r3, [r7, #12]
		break;
   18cae:	e01b      	b.n	18ce8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   18cb0:	2304      	movs	r3, #4
   18cb2:	60fb      	str	r3, [r7, #12]
		break;
   18cb4:	e018      	b.n	18ce8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   18cb6:	2301      	movs	r3, #1
   18cb8:	60fb      	str	r3, [r7, #12]
		break;
   18cba:	e015      	b.n	18ce8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   18cbc:	2302      	movs	r3, #2
   18cbe:	60fb      	str	r3, [r7, #12]
		break;
   18cc0:	e012      	b.n	18ce8 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   18cc2:	2310      	movs	r3, #16
   18cc4:	60fb      	str	r3, [r7, #12]
		}
		break;
   18cc6:	e00f      	b.n	18ce8 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   18cc8:	4a0f      	ldr	r2, [pc, #60]	; (18d08 <system_clock_source_is_ready+0x80>)
   18cca:	2350      	movs	r3, #80	; 0x50
   18ccc:	5cd3      	ldrb	r3, [r2, r3]
   18cce:	b2db      	uxtb	r3, r3
   18cd0:	001a      	movs	r2, r3
   18cd2:	2303      	movs	r3, #3
   18cd4:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   18cd6:	3b03      	subs	r3, #3
   18cd8:	425a      	negs	r2, r3
   18cda:	4153      	adcs	r3, r2
   18cdc:	b2db      	uxtb	r3, r3
   18cde:	e00c      	b.n	18cfa <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   18ce0:	2301      	movs	r3, #1
   18ce2:	e00a      	b.n	18cfa <system_clock_source_is_ready+0x72>

	default:
		return false;
   18ce4:	2300      	movs	r3, #0
   18ce6:	e008      	b.n	18cfa <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   18ce8:	4b07      	ldr	r3, [pc, #28]	; (18d08 <system_clock_source_is_ready+0x80>)
   18cea:	68db      	ldr	r3, [r3, #12]
   18cec:	68fa      	ldr	r2, [r7, #12]
   18cee:	401a      	ands	r2, r3
   18cf0:	68fb      	ldr	r3, [r7, #12]
   18cf2:	1ad3      	subs	r3, r2, r3
   18cf4:	425a      	negs	r2, r3
   18cf6:	4153      	adcs	r3, r2
   18cf8:	b2db      	uxtb	r3, r3
}
   18cfa:	0018      	movs	r0, r3
   18cfc:	46bd      	mov	sp, r7
   18cfe:	b004      	add	sp, #16
   18d00:	bd80      	pop	{r7, pc}
   18d02:	46c0      	nop			; (mov r8, r8)
   18d04:	0001c000 	.word	0x0001c000
   18d08:	40000800 	.word	0x40000800

00018d0c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   18d0c:	b580      	push	{r7, lr}
   18d0e:	b082      	sub	sp, #8
   18d10:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   18d12:	003b      	movs	r3, r7
   18d14:	2203      	movs	r2, #3
   18d16:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   18d18:	2300      	movs	r3, #0
   18d1a:	607b      	str	r3, [r7, #4]
   18d1c:	e009      	b.n	18d32 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   18d1e:	687b      	ldr	r3, [r7, #4]
   18d20:	b2db      	uxtb	r3, r3
   18d22:	003a      	movs	r2, r7
   18d24:	0011      	movs	r1, r2
   18d26:	0018      	movs	r0, r3
   18d28:	4b05      	ldr	r3, [pc, #20]	; (18d40 <_switch_peripheral_gclk+0x34>)
   18d2a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   18d2c:	687b      	ldr	r3, [r7, #4]
   18d2e:	3301      	adds	r3, #1
   18d30:	607b      	str	r3, [r7, #4]
   18d32:	687b      	ldr	r3, [r7, #4]
   18d34:	2b24      	cmp	r3, #36	; 0x24
   18d36:	d9f2      	bls.n	18d1e <_switch_peripheral_gclk+0x12>
	}
}
   18d38:	46c0      	nop			; (mov r8, r8)
   18d3a:	46bd      	mov	sp, r7
   18d3c:	b002      	add	sp, #8
   18d3e:	bd80      	pop	{r7, pc}
   18d40:	000192d5 	.word	0x000192d5

00018d44 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   18d44:	b580      	push	{r7, lr}
   18d46:	b0a6      	sub	sp, #152	; 0x98
   18d48:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   18d4a:	4b83      	ldr	r3, [pc, #524]	; (18f58 <system_clock_init+0x214>)
   18d4c:	22c2      	movs	r2, #194	; 0xc2
   18d4e:	00d2      	lsls	r2, r2, #3
   18d50:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   18d52:	2003      	movs	r0, #3
   18d54:	4b81      	ldr	r3, [pc, #516]	; (18f5c <system_clock_init+0x218>)
   18d56:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   18d58:	4b81      	ldr	r3, [pc, #516]	; (18f60 <system_clock_init+0x21c>)
   18d5a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   18d5c:	2394      	movs	r3, #148	; 0x94
   18d5e:	18fb      	adds	r3, r7, r3
   18d60:	0018      	movs	r0, r3
   18d62:	4b80      	ldr	r3, [pc, #512]	; (18f64 <system_clock_init+0x220>)
   18d64:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   18d66:	2394      	movs	r3, #148	; 0x94
   18d68:	18fb      	adds	r3, r7, r3
   18d6a:	2200      	movs	r2, #0
   18d6c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   18d6e:	2394      	movs	r3, #148	; 0x94
   18d70:	18fb      	adds	r3, r7, r3
   18d72:	2201      	movs	r2, #1
   18d74:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   18d76:	2394      	movs	r3, #148	; 0x94
   18d78:	18fb      	adds	r3, r7, r3
   18d7a:	2200      	movs	r2, #0
   18d7c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   18d7e:	2394      	movs	r3, #148	; 0x94
   18d80:	18fb      	adds	r3, r7, r3
   18d82:	0018      	movs	r0, r3
   18d84:	4b78      	ldr	r3, [pc, #480]	; (18f68 <system_clock_init+0x224>)
   18d86:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   18d88:	2006      	movs	r0, #6
   18d8a:	4b78      	ldr	r3, [pc, #480]	; (18f6c <system_clock_init+0x228>)
   18d8c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   18d8e:	4b78      	ldr	r3, [pc, #480]	; (18f70 <system_clock_init+0x22c>)
   18d90:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   18d92:	2360      	movs	r3, #96	; 0x60
   18d94:	18fb      	adds	r3, r7, r3
   18d96:	0018      	movs	r0, r3
   18d98:	4b76      	ldr	r3, [pc, #472]	; (18f74 <system_clock_init+0x230>)
   18d9a:	4798      	blx	r3
   18d9c:	2360      	movs	r3, #96	; 0x60
   18d9e:	18fb      	adds	r3, r7, r3
   18da0:	2206      	movs	r2, #6
   18da2:	701a      	strb	r2, [r3, #0]
   18da4:	2360      	movs	r3, #96	; 0x60
   18da6:	18fb      	adds	r3, r7, r3
   18da8:	2208      	movs	r2, #8
   18daa:	605a      	str	r2, [r3, #4]
   18dac:	2360      	movs	r3, #96	; 0x60
   18dae:	18fb      	adds	r3, r7, r3
   18db0:	2200      	movs	r2, #0
   18db2:	721a      	strb	r2, [r3, #8]
   18db4:	2360      	movs	r3, #96	; 0x60
   18db6:	18fb      	adds	r3, r7, r3
   18db8:	2200      	movs	r2, #0
   18dba:	725a      	strb	r2, [r3, #9]
   18dbc:	2360      	movs	r3, #96	; 0x60
   18dbe:	18fb      	adds	r3, r7, r3
   18dc0:	0019      	movs	r1, r3
   18dc2:	2001      	movs	r0, #1
   18dc4:	4b6c      	ldr	r3, [pc, #432]	; (18f78 <system_clock_init+0x234>)
   18dc6:	4798      	blx	r3
   18dc8:	2001      	movs	r0, #1
   18dca:	4b6c      	ldr	r3, [pc, #432]	; (18f7c <system_clock_init+0x238>)
   18dcc:	4798      	blx	r3
   18dce:	2354      	movs	r3, #84	; 0x54
   18dd0:	18fb      	adds	r3, r7, r3
   18dd2:	0018      	movs	r0, r3
   18dd4:	4b67      	ldr	r3, [pc, #412]	; (18f74 <system_clock_init+0x230>)
   18dd6:	4798      	blx	r3
   18dd8:	2354      	movs	r3, #84	; 0x54
   18dda:	18fb      	adds	r3, r7, r3
   18ddc:	2203      	movs	r2, #3
   18dde:	701a      	strb	r2, [r3, #0]
   18de0:	2354      	movs	r3, #84	; 0x54
   18de2:	18fb      	adds	r3, r7, r3
   18de4:	2201      	movs	r2, #1
   18de6:	605a      	str	r2, [r3, #4]
   18de8:	2354      	movs	r3, #84	; 0x54
   18dea:	18fb      	adds	r3, r7, r3
   18dec:	2201      	movs	r2, #1
   18dee:	721a      	strb	r2, [r3, #8]
   18df0:	2354      	movs	r3, #84	; 0x54
   18df2:	18fb      	adds	r3, r7, r3
   18df4:	2200      	movs	r2, #0
   18df6:	725a      	strb	r2, [r3, #9]
   18df8:	2354      	movs	r3, #84	; 0x54
   18dfa:	18fb      	adds	r3, r7, r3
   18dfc:	0019      	movs	r1, r3
   18dfe:	2002      	movs	r0, #2
   18e00:	4b5d      	ldr	r3, [pc, #372]	; (18f78 <system_clock_init+0x234>)
   18e02:	4798      	blx	r3
   18e04:	2002      	movs	r0, #2
   18e06:	4b5d      	ldr	r3, [pc, #372]	; (18f7c <system_clock_init+0x238>)
   18e08:	4798      	blx	r3
   18e0a:	233c      	movs	r3, #60	; 0x3c
   18e0c:	18fb      	adds	r3, r7, r3
   18e0e:	0018      	movs	r0, r3
   18e10:	4b58      	ldr	r3, [pc, #352]	; (18f74 <system_clock_init+0x230>)
   18e12:	4798      	blx	r3
   18e14:	233c      	movs	r3, #60	; 0x3c
   18e16:	18fb      	adds	r3, r7, r3
   18e18:	2203      	movs	r2, #3
   18e1a:	701a      	strb	r2, [r3, #0]
   18e1c:	233c      	movs	r3, #60	; 0x3c
   18e1e:	18fb      	adds	r3, r7, r3
   18e20:	2220      	movs	r2, #32
   18e22:	605a      	str	r2, [r3, #4]
   18e24:	233c      	movs	r3, #60	; 0x3c
   18e26:	18fb      	adds	r3, r7, r3
   18e28:	2200      	movs	r2, #0
   18e2a:	721a      	strb	r2, [r3, #8]
   18e2c:	233c      	movs	r3, #60	; 0x3c
   18e2e:	18fb      	adds	r3, r7, r3
   18e30:	2200      	movs	r2, #0
   18e32:	725a      	strb	r2, [r3, #9]
   18e34:	233c      	movs	r3, #60	; 0x3c
   18e36:	18fb      	adds	r3, r7, r3
   18e38:	0019      	movs	r1, r3
   18e3a:	2004      	movs	r0, #4
   18e3c:	4b4e      	ldr	r3, [pc, #312]	; (18f78 <system_clock_init+0x234>)
   18e3e:	4798      	blx	r3
   18e40:	2004      	movs	r0, #4
   18e42:	4b4e      	ldr	r3, [pc, #312]	; (18f7c <system_clock_init+0x238>)
   18e44:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   18e46:	2390      	movs	r3, #144	; 0x90
   18e48:	18fb      	adds	r3, r7, r3
   18e4a:	0018      	movs	r0, r3
   18e4c:	4b4c      	ldr	r3, [pc, #304]	; (18f80 <system_clock_init+0x23c>)
   18e4e:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   18e50:	2390      	movs	r3, #144	; 0x90
   18e52:	18fb      	adds	r3, r7, r3
   18e54:	2201      	movs	r2, #1
   18e56:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   18e58:	2390      	movs	r3, #144	; 0x90
   18e5a:	18fb      	adds	r3, r7, r3
   18e5c:	0019      	movs	r1, r3
   18e5e:	2001      	movs	r0, #1
   18e60:	4b48      	ldr	r3, [pc, #288]	; (18f84 <system_clock_init+0x240>)
   18e62:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   18e64:	2001      	movs	r0, #1
   18e66:	4b48      	ldr	r3, [pc, #288]	; (18f88 <system_clock_init+0x244>)
   18e68:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   18e6a:	2378      	movs	r3, #120	; 0x78
   18e6c:	18fb      	adds	r3, r7, r3
   18e6e:	0018      	movs	r0, r3
   18e70:	4b46      	ldr	r3, [pc, #280]	; (18f8c <system_clock_init+0x248>)
   18e72:	4798      	blx	r3

	dpll_config.on_demand        = false;
   18e74:	2378      	movs	r3, #120	; 0x78
   18e76:	18fb      	adds	r3, r7, r3
   18e78:	2200      	movs	r2, #0
   18e7a:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   18e7c:	2378      	movs	r3, #120	; 0x78
   18e7e:	18fb      	adds	r3, r7, r3
   18e80:	2200      	movs	r2, #0
   18e82:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   18e84:	2378      	movs	r3, #120	; 0x78
   18e86:	18fb      	adds	r3, r7, r3
   18e88:	2200      	movs	r2, #0
   18e8a:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   18e8c:	2378      	movs	r3, #120	; 0x78
   18e8e:	18fb      	adds	r3, r7, r3
   18e90:	2200      	movs	r2, #0
   18e92:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   18e94:	2378      	movs	r3, #120	; 0x78
   18e96:	18fb      	adds	r3, r7, r3
   18e98:	2200      	movs	r2, #0
   18e9a:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   18e9c:	2378      	movs	r3, #120	; 0x78
   18e9e:	18fb      	adds	r3, r7, r3
   18ea0:	2200      	movs	r2, #0
   18ea2:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   18ea4:	2378      	movs	r3, #120	; 0x78
   18ea6:	18fb      	adds	r3, r7, r3
   18ea8:	2200      	movs	r2, #0
   18eaa:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   18eac:	2378      	movs	r3, #120	; 0x78
   18eae:	18fb      	adds	r3, r7, r3
   18eb0:	2202      	movs	r2, #2
   18eb2:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   18eb4:	2378      	movs	r3, #120	; 0x78
   18eb6:	18fb      	adds	r3, r7, r3
   18eb8:	4a35      	ldr	r2, [pc, #212]	; (18f90 <system_clock_init+0x24c>)
   18eba:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   18ebc:	2378      	movs	r3, #120	; 0x78
   18ebe:	18fb      	adds	r3, r7, r3
   18ec0:	2201      	movs	r2, #1
   18ec2:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   18ec4:	2378      	movs	r3, #120	; 0x78
   18ec6:	18fb      	adds	r3, r7, r3
   18ec8:	4a32      	ldr	r2, [pc, #200]	; (18f94 <system_clock_init+0x250>)
   18eca:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   18ecc:	2378      	movs	r3, #120	; 0x78
   18ece:	18fb      	adds	r3, r7, r3
   18ed0:	0018      	movs	r0, r3
   18ed2:	4b31      	ldr	r3, [pc, #196]	; (18f98 <system_clock_init+0x254>)
   18ed4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   18ed6:	2008      	movs	r0, #8
   18ed8:	4b24      	ldr	r3, [pc, #144]	; (18f6c <system_clock_init+0x228>)
   18eda:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   18edc:	46c0      	nop			; (mov r8, r8)
   18ede:	2008      	movs	r0, #8
   18ee0:	4b2e      	ldr	r3, [pc, #184]	; (18f9c <system_clock_init+0x258>)
   18ee2:	4798      	blx	r3
   18ee4:	0003      	movs	r3, r0
   18ee6:	001a      	movs	r2, r3
   18ee8:	2301      	movs	r3, #1
   18eea:	4053      	eors	r3, r2
   18eec:	b2db      	uxtb	r3, r3
   18eee:	2b00      	cmp	r3, #0
   18ef0:	d1f5      	bne.n	18ede <system_clock_init+0x19a>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   18ef2:	4919      	ldr	r1, [pc, #100]	; (18f58 <system_clock_init+0x214>)
   18ef4:	2244      	movs	r2, #68	; 0x44
   18ef6:	5c8b      	ldrb	r3, [r1, r2]
   18ef8:	2080      	movs	r0, #128	; 0x80
   18efa:	4240      	negs	r0, r0
   18efc:	4303      	orrs	r3, r0
   18efe:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   18f00:	2000      	movs	r0, #0
   18f02:	4b27      	ldr	r3, [pc, #156]	; (18fa0 <system_clock_init+0x25c>)
   18f04:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   18f06:	2100      	movs	r1, #0
   18f08:	2000      	movs	r0, #0
   18f0a:	4b26      	ldr	r3, [pc, #152]	; (18fa4 <system_clock_init+0x260>)
   18f0c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   18f0e:	2100      	movs	r1, #0
   18f10:	2001      	movs	r0, #1
   18f12:	4b24      	ldr	r3, [pc, #144]	; (18fa4 <system_clock_init+0x260>)
   18f14:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   18f16:	2100      	movs	r1, #0
   18f18:	2002      	movs	r0, #2
   18f1a:	4b22      	ldr	r3, [pc, #136]	; (18fa4 <system_clock_init+0x260>)
   18f1c:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   18f1e:	003b      	movs	r3, r7
   18f20:	0018      	movs	r0, r3
   18f22:	4b14      	ldr	r3, [pc, #80]	; (18f74 <system_clock_init+0x230>)
   18f24:	4798      	blx	r3
   18f26:	003b      	movs	r3, r7
   18f28:	2208      	movs	r2, #8
   18f2a:	701a      	strb	r2, [r3, #0]
   18f2c:	003b      	movs	r3, r7
   18f2e:	2201      	movs	r2, #1
   18f30:	605a      	str	r2, [r3, #4]
   18f32:	003b      	movs	r3, r7
   18f34:	2200      	movs	r2, #0
   18f36:	721a      	strb	r2, [r3, #8]
   18f38:	003b      	movs	r3, r7
   18f3a:	2201      	movs	r2, #1
   18f3c:	725a      	strb	r2, [r3, #9]
   18f3e:	003b      	movs	r3, r7
   18f40:	0019      	movs	r1, r3
   18f42:	2000      	movs	r0, #0
   18f44:	4b0c      	ldr	r3, [pc, #48]	; (18f78 <system_clock_init+0x234>)
   18f46:	4798      	blx	r3
   18f48:	2000      	movs	r0, #0
   18f4a:	4b0c      	ldr	r3, [pc, #48]	; (18f7c <system_clock_init+0x238>)
   18f4c:	4798      	blx	r3
#endif
}
   18f4e:	46c0      	nop			; (mov r8, r8)
   18f50:	46bd      	mov	sp, r7
   18f52:	b026      	add	sp, #152	; 0x98
   18f54:	bd80      	pop	{r7, pc}
   18f56:	46c0      	nop			; (mov r8, r8)
   18f58:	40000800 	.word	0x40000800
   18f5c:	00018905 	.word	0x00018905
   18f60:	00018d0d 	.word	0x00018d0d
   18f64:	00018815 	.word	0x00018815
   18f68:	00018a59 	.word	0x00018a59
   18f6c:	00018bdd 	.word	0x00018bdd
   18f70:	0001904d 	.word	0x0001904d
   18f74:	000187d1 	.word	0x000187d1
   18f78:	0001907d 	.word	0x0001907d
   18f7c:	000191a1 	.word	0x000191a1
   18f80:	000187ff 	.word	0x000187ff
   18f84:	000192d5 	.word	0x000192d5
   18f88:	00019319 	.word	0x00019319
   18f8c:	000188ad 	.word	0x000188ad
   18f90:	000f4240 	.word	0x000f4240
   18f94:	02dc6c00 	.word	0x02dc6c00
   18f98:	00018ad1 	.word	0x00018ad1
   18f9c:	00018c89 	.word	0x00018c89
   18fa0:	00018839 	.word	0x00018839
   18fa4:	00018859 	.word	0x00018859

00018fa8 <system_apb_clock_set_mask>:
{
   18fa8:	b580      	push	{r7, lr}
   18faa:	b082      	sub	sp, #8
   18fac:	af00      	add	r7, sp, #0
   18fae:	0002      	movs	r2, r0
   18fb0:	6039      	str	r1, [r7, #0]
   18fb2:	1dfb      	adds	r3, r7, #7
   18fb4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   18fb6:	1dfb      	adds	r3, r7, #7
   18fb8:	781b      	ldrb	r3, [r3, #0]
   18fba:	2b01      	cmp	r3, #1
   18fbc:	d00a      	beq.n	18fd4 <system_apb_clock_set_mask+0x2c>
   18fbe:	2b02      	cmp	r3, #2
   18fc0:	d00f      	beq.n	18fe2 <system_apb_clock_set_mask+0x3a>
   18fc2:	2b00      	cmp	r3, #0
   18fc4:	d114      	bne.n	18ff0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   18fc6:	4b0e      	ldr	r3, [pc, #56]	; (19000 <system_apb_clock_set_mask+0x58>)
   18fc8:	4a0d      	ldr	r2, [pc, #52]	; (19000 <system_apb_clock_set_mask+0x58>)
   18fca:	6991      	ldr	r1, [r2, #24]
   18fcc:	683a      	ldr	r2, [r7, #0]
   18fce:	430a      	orrs	r2, r1
   18fd0:	619a      	str	r2, [r3, #24]
			break;
   18fd2:	e00f      	b.n	18ff4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   18fd4:	4b0a      	ldr	r3, [pc, #40]	; (19000 <system_apb_clock_set_mask+0x58>)
   18fd6:	4a0a      	ldr	r2, [pc, #40]	; (19000 <system_apb_clock_set_mask+0x58>)
   18fd8:	69d1      	ldr	r1, [r2, #28]
   18fda:	683a      	ldr	r2, [r7, #0]
   18fdc:	430a      	orrs	r2, r1
   18fde:	61da      	str	r2, [r3, #28]
			break;
   18fe0:	e008      	b.n	18ff4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   18fe2:	4b07      	ldr	r3, [pc, #28]	; (19000 <system_apb_clock_set_mask+0x58>)
   18fe4:	4a06      	ldr	r2, [pc, #24]	; (19000 <system_apb_clock_set_mask+0x58>)
   18fe6:	6a11      	ldr	r1, [r2, #32]
   18fe8:	683a      	ldr	r2, [r7, #0]
   18fea:	430a      	orrs	r2, r1
   18fec:	621a      	str	r2, [r3, #32]
			break;
   18fee:	e001      	b.n	18ff4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   18ff0:	2317      	movs	r3, #23
   18ff2:	e000      	b.n	18ff6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   18ff4:	2300      	movs	r3, #0
}
   18ff6:	0018      	movs	r0, r3
   18ff8:	46bd      	mov	sp, r7
   18ffa:	b002      	add	sp, #8
   18ffc:	bd80      	pop	{r7, pc}
   18ffe:	46c0      	nop			; (mov r8, r8)
   19000:	40000400 	.word	0x40000400

00019004 <system_interrupt_enter_critical_section>:
{
   19004:	b580      	push	{r7, lr}
   19006:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   19008:	4b02      	ldr	r3, [pc, #8]	; (19014 <system_interrupt_enter_critical_section+0x10>)
   1900a:	4798      	blx	r3
}
   1900c:	46c0      	nop			; (mov r8, r8)
   1900e:	46bd      	mov	sp, r7
   19010:	bd80      	pop	{r7, pc}
   19012:	46c0      	nop			; (mov r8, r8)
   19014:	00016e29 	.word	0x00016e29

00019018 <system_interrupt_leave_critical_section>:
{
   19018:	b580      	push	{r7, lr}
   1901a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1901c:	4b02      	ldr	r3, [pc, #8]	; (19028 <system_interrupt_leave_critical_section+0x10>)
   1901e:	4798      	blx	r3
}
   19020:	46c0      	nop			; (mov r8, r8)
   19022:	46bd      	mov	sp, r7
   19024:	bd80      	pop	{r7, pc}
   19026:	46c0      	nop			; (mov r8, r8)
   19028:	00016e7d 	.word	0x00016e7d

0001902c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   1902c:	b580      	push	{r7, lr}
   1902e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   19030:	4b05      	ldr	r3, [pc, #20]	; (19048 <system_gclk_is_syncing+0x1c>)
   19032:	785b      	ldrb	r3, [r3, #1]
   19034:	b2db      	uxtb	r3, r3
   19036:	b25b      	sxtb	r3, r3
   19038:	2b00      	cmp	r3, #0
   1903a:	da01      	bge.n	19040 <system_gclk_is_syncing+0x14>
		return true;
   1903c:	2301      	movs	r3, #1
   1903e:	e000      	b.n	19042 <system_gclk_is_syncing+0x16>
	}

	return false;
   19040:	2300      	movs	r3, #0
}
   19042:	0018      	movs	r0, r3
   19044:	46bd      	mov	sp, r7
   19046:	bd80      	pop	{r7, pc}
   19048:	40000c00 	.word	0x40000c00

0001904c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   1904c:	b580      	push	{r7, lr}
   1904e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   19050:	2108      	movs	r1, #8
   19052:	2000      	movs	r0, #0
   19054:	4b07      	ldr	r3, [pc, #28]	; (19074 <system_gclk_init+0x28>)
   19056:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   19058:	4b07      	ldr	r3, [pc, #28]	; (19078 <system_gclk_init+0x2c>)
   1905a:	2201      	movs	r2, #1
   1905c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   1905e:	46c0      	nop			; (mov r8, r8)
   19060:	4b05      	ldr	r3, [pc, #20]	; (19078 <system_gclk_init+0x2c>)
   19062:	781b      	ldrb	r3, [r3, #0]
   19064:	b2db      	uxtb	r3, r3
   19066:	001a      	movs	r2, r3
   19068:	2301      	movs	r3, #1
   1906a:	4013      	ands	r3, r2
   1906c:	d1f8      	bne.n	19060 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   1906e:	46c0      	nop			; (mov r8, r8)
   19070:	46bd      	mov	sp, r7
   19072:	bd80      	pop	{r7, pc}
   19074:	00018fa9 	.word	0x00018fa9
   19078:	40000c00 	.word	0x40000c00

0001907c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   1907c:	b580      	push	{r7, lr}
   1907e:	b086      	sub	sp, #24
   19080:	af00      	add	r7, sp, #0
   19082:	0002      	movs	r2, r0
   19084:	6039      	str	r1, [r7, #0]
   19086:	1dfb      	adds	r3, r7, #7
   19088:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   1908a:	1dfb      	adds	r3, r7, #7
   1908c:	781b      	ldrb	r3, [r3, #0]
   1908e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   19090:	1dfb      	adds	r3, r7, #7
   19092:	781b      	ldrb	r3, [r3, #0]
   19094:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   19096:	683b      	ldr	r3, [r7, #0]
   19098:	781b      	ldrb	r3, [r3, #0]
   1909a:	021b      	lsls	r3, r3, #8
   1909c:	001a      	movs	r2, r3
   1909e:	697b      	ldr	r3, [r7, #20]
   190a0:	4313      	orrs	r3, r2
   190a2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   190a4:	683b      	ldr	r3, [r7, #0]
   190a6:	785b      	ldrb	r3, [r3, #1]
   190a8:	2b00      	cmp	r3, #0
   190aa:	d004      	beq.n	190b6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   190ac:	697b      	ldr	r3, [r7, #20]
   190ae:	2280      	movs	r2, #128	; 0x80
   190b0:	02d2      	lsls	r2, r2, #11
   190b2:	4313      	orrs	r3, r2
   190b4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   190b6:	683b      	ldr	r3, [r7, #0]
   190b8:	7a5b      	ldrb	r3, [r3, #9]
   190ba:	2b00      	cmp	r3, #0
   190bc:	d004      	beq.n	190c8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   190be:	697b      	ldr	r3, [r7, #20]
   190c0:	2280      	movs	r2, #128	; 0x80
   190c2:	0312      	lsls	r2, r2, #12
   190c4:	4313      	orrs	r3, r2
   190c6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   190c8:	683b      	ldr	r3, [r7, #0]
   190ca:	685b      	ldr	r3, [r3, #4]
   190cc:	2b01      	cmp	r3, #1
   190ce:	d92c      	bls.n	1912a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   190d0:	683b      	ldr	r3, [r7, #0]
   190d2:	685a      	ldr	r2, [r3, #4]
   190d4:	683b      	ldr	r3, [r7, #0]
   190d6:	685b      	ldr	r3, [r3, #4]
   190d8:	3b01      	subs	r3, #1
   190da:	4013      	ands	r3, r2
   190dc:	d11a      	bne.n	19114 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   190de:	2300      	movs	r3, #0
   190e0:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   190e2:	2302      	movs	r3, #2
   190e4:	60bb      	str	r3, [r7, #8]
   190e6:	e005      	b.n	190f4 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   190e8:	68fb      	ldr	r3, [r7, #12]
   190ea:	3301      	adds	r3, #1
   190ec:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   190ee:	68bb      	ldr	r3, [r7, #8]
   190f0:	005b      	lsls	r3, r3, #1
   190f2:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   190f4:	683b      	ldr	r3, [r7, #0]
   190f6:	685a      	ldr	r2, [r3, #4]
   190f8:	68bb      	ldr	r3, [r7, #8]
   190fa:	429a      	cmp	r2, r3
   190fc:	d8f4      	bhi.n	190e8 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   190fe:	68fb      	ldr	r3, [r7, #12]
   19100:	021b      	lsls	r3, r3, #8
   19102:	693a      	ldr	r2, [r7, #16]
   19104:	4313      	orrs	r3, r2
   19106:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   19108:	697b      	ldr	r3, [r7, #20]
   1910a:	2280      	movs	r2, #128	; 0x80
   1910c:	0352      	lsls	r2, r2, #13
   1910e:	4313      	orrs	r3, r2
   19110:	617b      	str	r3, [r7, #20]
   19112:	e00a      	b.n	1912a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   19114:	683b      	ldr	r3, [r7, #0]
   19116:	685b      	ldr	r3, [r3, #4]
   19118:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   1911a:	693a      	ldr	r2, [r7, #16]
   1911c:	4313      	orrs	r3, r2
   1911e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   19120:	697b      	ldr	r3, [r7, #20]
   19122:	2280      	movs	r2, #128	; 0x80
   19124:	0292      	lsls	r2, r2, #10
   19126:	4313      	orrs	r3, r2
   19128:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   1912a:	683b      	ldr	r3, [r7, #0]
   1912c:	7a1b      	ldrb	r3, [r3, #8]
   1912e:	2b00      	cmp	r3, #0
   19130:	d004      	beq.n	1913c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   19132:	697b      	ldr	r3, [r7, #20]
   19134:	2280      	movs	r2, #128	; 0x80
   19136:	0392      	lsls	r2, r2, #14
   19138:	4313      	orrs	r3, r2
   1913a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   1913c:	46c0      	nop			; (mov r8, r8)
   1913e:	4b13      	ldr	r3, [pc, #76]	; (1918c <system_gclk_gen_set_config+0x110>)
   19140:	4798      	blx	r3
   19142:	1e03      	subs	r3, r0, #0
   19144:	d1fb      	bne.n	1913e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   19146:	4b12      	ldr	r3, [pc, #72]	; (19190 <system_gclk_gen_set_config+0x114>)
   19148:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1914a:	4a12      	ldr	r2, [pc, #72]	; (19194 <system_gclk_gen_set_config+0x118>)
   1914c:	1dfb      	adds	r3, r7, #7
   1914e:	781b      	ldrb	r3, [r3, #0]
   19150:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   19152:	46c0      	nop			; (mov r8, r8)
   19154:	4b0d      	ldr	r3, [pc, #52]	; (1918c <system_gclk_gen_set_config+0x110>)
   19156:	4798      	blx	r3
   19158:	1e03      	subs	r3, r0, #0
   1915a:	d1fb      	bne.n	19154 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   1915c:	4b0e      	ldr	r3, [pc, #56]	; (19198 <system_gclk_gen_set_config+0x11c>)
   1915e:	693a      	ldr	r2, [r7, #16]
   19160:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   19162:	46c0      	nop			; (mov r8, r8)
   19164:	4b09      	ldr	r3, [pc, #36]	; (1918c <system_gclk_gen_set_config+0x110>)
   19166:	4798      	blx	r3
   19168:	1e03      	subs	r3, r0, #0
   1916a:	d1fb      	bne.n	19164 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   1916c:	4b0a      	ldr	r3, [pc, #40]	; (19198 <system_gclk_gen_set_config+0x11c>)
   1916e:	4a0a      	ldr	r2, [pc, #40]	; (19198 <system_gclk_gen_set_config+0x11c>)
   19170:	6851      	ldr	r1, [r2, #4]
   19172:	2280      	movs	r2, #128	; 0x80
   19174:	0252      	lsls	r2, r2, #9
   19176:	4011      	ands	r1, r2
   19178:	697a      	ldr	r2, [r7, #20]
   1917a:	430a      	orrs	r2, r1
   1917c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   1917e:	4b07      	ldr	r3, [pc, #28]	; (1919c <system_gclk_gen_set_config+0x120>)
   19180:	4798      	blx	r3
}
   19182:	46c0      	nop			; (mov r8, r8)
   19184:	46bd      	mov	sp, r7
   19186:	b006      	add	sp, #24
   19188:	bd80      	pop	{r7, pc}
   1918a:	46c0      	nop			; (mov r8, r8)
   1918c:	0001902d 	.word	0x0001902d
   19190:	00019005 	.word	0x00019005
   19194:	40000c08 	.word	0x40000c08
   19198:	40000c00 	.word	0x40000c00
   1919c:	00019019 	.word	0x00019019

000191a0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   191a0:	b580      	push	{r7, lr}
   191a2:	b082      	sub	sp, #8
   191a4:	af00      	add	r7, sp, #0
   191a6:	0002      	movs	r2, r0
   191a8:	1dfb      	adds	r3, r7, #7
   191aa:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   191ac:	46c0      	nop			; (mov r8, r8)
   191ae:	4b0e      	ldr	r3, [pc, #56]	; (191e8 <system_gclk_gen_enable+0x48>)
   191b0:	4798      	blx	r3
   191b2:	1e03      	subs	r3, r0, #0
   191b4:	d1fb      	bne.n	191ae <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   191b6:	4b0d      	ldr	r3, [pc, #52]	; (191ec <system_gclk_gen_enable+0x4c>)
   191b8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   191ba:	4a0d      	ldr	r2, [pc, #52]	; (191f0 <system_gclk_gen_enable+0x50>)
   191bc:	1dfb      	adds	r3, r7, #7
   191be:	781b      	ldrb	r3, [r3, #0]
   191c0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   191c2:	46c0      	nop			; (mov r8, r8)
   191c4:	4b08      	ldr	r3, [pc, #32]	; (191e8 <system_gclk_gen_enable+0x48>)
   191c6:	4798      	blx	r3
   191c8:	1e03      	subs	r3, r0, #0
   191ca:	d1fb      	bne.n	191c4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   191cc:	4b09      	ldr	r3, [pc, #36]	; (191f4 <system_gclk_gen_enable+0x54>)
   191ce:	4a09      	ldr	r2, [pc, #36]	; (191f4 <system_gclk_gen_enable+0x54>)
   191d0:	6852      	ldr	r2, [r2, #4]
   191d2:	2180      	movs	r1, #128	; 0x80
   191d4:	0249      	lsls	r1, r1, #9
   191d6:	430a      	orrs	r2, r1
   191d8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   191da:	4b07      	ldr	r3, [pc, #28]	; (191f8 <system_gclk_gen_enable+0x58>)
   191dc:	4798      	blx	r3
}
   191de:	46c0      	nop			; (mov r8, r8)
   191e0:	46bd      	mov	sp, r7
   191e2:	b002      	add	sp, #8
   191e4:	bd80      	pop	{r7, pc}
   191e6:	46c0      	nop			; (mov r8, r8)
   191e8:	0001902d 	.word	0x0001902d
   191ec:	00019005 	.word	0x00019005
   191f0:	40000c04 	.word	0x40000c04
   191f4:	40000c00 	.word	0x40000c00
   191f8:	00019019 	.word	0x00019019

000191fc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   191fc:	b580      	push	{r7, lr}
   191fe:	b086      	sub	sp, #24
   19200:	af00      	add	r7, sp, #0
   19202:	0002      	movs	r2, r0
   19204:	1dfb      	adds	r3, r7, #7
   19206:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   19208:	46c0      	nop			; (mov r8, r8)
   1920a:	4b2a      	ldr	r3, [pc, #168]	; (192b4 <system_gclk_gen_get_hz+0xb8>)
   1920c:	4798      	blx	r3
   1920e:	1e03      	subs	r3, r0, #0
   19210:	d1fb      	bne.n	1920a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   19212:	4b29      	ldr	r3, [pc, #164]	; (192b8 <system_gclk_gen_get_hz+0xbc>)
   19214:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   19216:	4a29      	ldr	r2, [pc, #164]	; (192bc <system_gclk_gen_get_hz+0xc0>)
   19218:	1dfb      	adds	r3, r7, #7
   1921a:	781b      	ldrb	r3, [r3, #0]
   1921c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   1921e:	46c0      	nop			; (mov r8, r8)
   19220:	4b24      	ldr	r3, [pc, #144]	; (192b4 <system_gclk_gen_get_hz+0xb8>)
   19222:	4798      	blx	r3
   19224:	1e03      	subs	r3, r0, #0
   19226:	d1fb      	bne.n	19220 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   19228:	4b25      	ldr	r3, [pc, #148]	; (192c0 <system_gclk_gen_get_hz+0xc4>)
   1922a:	685b      	ldr	r3, [r3, #4]
   1922c:	04db      	lsls	r3, r3, #19
   1922e:	0edb      	lsrs	r3, r3, #27
   19230:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   19232:	0018      	movs	r0, r3
   19234:	4b23      	ldr	r3, [pc, #140]	; (192c4 <system_gclk_gen_get_hz+0xc8>)
   19236:	4798      	blx	r3
   19238:	0003      	movs	r3, r0
   1923a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1923c:	4a1f      	ldr	r2, [pc, #124]	; (192bc <system_gclk_gen_get_hz+0xc0>)
   1923e:	1dfb      	adds	r3, r7, #7
   19240:	781b      	ldrb	r3, [r3, #0]
   19242:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   19244:	4b1e      	ldr	r3, [pc, #120]	; (192c0 <system_gclk_gen_get_hz+0xc4>)
   19246:	685b      	ldr	r3, [r3, #4]
   19248:	02db      	lsls	r3, r3, #11
   1924a:	0fdb      	lsrs	r3, r3, #31
   1924c:	b2da      	uxtb	r2, r3
   1924e:	2313      	movs	r3, #19
   19250:	18fb      	adds	r3, r7, r3
   19252:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   19254:	4a1c      	ldr	r2, [pc, #112]	; (192c8 <system_gclk_gen_get_hz+0xcc>)
   19256:	1dfb      	adds	r3, r7, #7
   19258:	781b      	ldrb	r3, [r3, #0]
   1925a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   1925c:	46c0      	nop			; (mov r8, r8)
   1925e:	4b15      	ldr	r3, [pc, #84]	; (192b4 <system_gclk_gen_get_hz+0xb8>)
   19260:	4798      	blx	r3
   19262:	1e03      	subs	r3, r0, #0
   19264:	d1fb      	bne.n	1925e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   19266:	4b16      	ldr	r3, [pc, #88]	; (192c0 <system_gclk_gen_get_hz+0xc4>)
   19268:	689b      	ldr	r3, [r3, #8]
   1926a:	021b      	lsls	r3, r3, #8
   1926c:	0c1b      	lsrs	r3, r3, #16
   1926e:	b29b      	uxth	r3, r3
   19270:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   19272:	4b16      	ldr	r3, [pc, #88]	; (192cc <system_gclk_gen_get_hz+0xd0>)
   19274:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   19276:	2313      	movs	r3, #19
   19278:	18fb      	adds	r3, r7, r3
   1927a:	781b      	ldrb	r3, [r3, #0]
   1927c:	2b00      	cmp	r3, #0
   1927e:	d109      	bne.n	19294 <system_gclk_gen_get_hz+0x98>
   19280:	68fb      	ldr	r3, [r7, #12]
   19282:	2b01      	cmp	r3, #1
   19284:	d906      	bls.n	19294 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   19286:	4b12      	ldr	r3, [pc, #72]	; (192d0 <system_gclk_gen_get_hz+0xd4>)
   19288:	68f9      	ldr	r1, [r7, #12]
   1928a:	6978      	ldr	r0, [r7, #20]
   1928c:	4798      	blx	r3
   1928e:	0003      	movs	r3, r0
   19290:	617b      	str	r3, [r7, #20]
   19292:	e00a      	b.n	192aa <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   19294:	2313      	movs	r3, #19
   19296:	18fb      	adds	r3, r7, r3
   19298:	781b      	ldrb	r3, [r3, #0]
   1929a:	2b00      	cmp	r3, #0
   1929c:	d005      	beq.n	192aa <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   1929e:	68fb      	ldr	r3, [r7, #12]
   192a0:	3301      	adds	r3, #1
   192a2:	697a      	ldr	r2, [r7, #20]
   192a4:	40da      	lsrs	r2, r3
   192a6:	0013      	movs	r3, r2
   192a8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   192aa:	697b      	ldr	r3, [r7, #20]
}
   192ac:	0018      	movs	r0, r3
   192ae:	46bd      	mov	sp, r7
   192b0:	b006      	add	sp, #24
   192b2:	bd80      	pop	{r7, pc}
   192b4:	0001902d 	.word	0x0001902d
   192b8:	00019005 	.word	0x00019005
   192bc:	40000c04 	.word	0x40000c04
   192c0:	40000c00 	.word	0x40000c00
   192c4:	00018999 	.word	0x00018999
   192c8:	40000c08 	.word	0x40000c08
   192cc:	00019019 	.word	0x00019019
   192d0:	00019aad 	.word	0x00019aad

000192d4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   192d4:	b580      	push	{r7, lr}
   192d6:	b084      	sub	sp, #16
   192d8:	af00      	add	r7, sp, #0
   192da:	0002      	movs	r2, r0
   192dc:	6039      	str	r1, [r7, #0]
   192de:	1dfb      	adds	r3, r7, #7
   192e0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   192e2:	1dfb      	adds	r3, r7, #7
   192e4:	781b      	ldrb	r3, [r3, #0]
   192e6:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   192e8:	683b      	ldr	r3, [r7, #0]
   192ea:	781b      	ldrb	r3, [r3, #0]
   192ec:	021b      	lsls	r3, r3, #8
   192ee:	001a      	movs	r2, r3
   192f0:	68fb      	ldr	r3, [r7, #12]
   192f2:	4313      	orrs	r3, r2
   192f4:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   192f6:	1dfb      	adds	r3, r7, #7
   192f8:	781b      	ldrb	r3, [r3, #0]
   192fa:	0018      	movs	r0, r3
   192fc:	4b04      	ldr	r3, [pc, #16]	; (19310 <system_gclk_chan_set_config+0x3c>)
   192fe:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   19300:	4b04      	ldr	r3, [pc, #16]	; (19314 <system_gclk_chan_set_config+0x40>)
   19302:	68fa      	ldr	r2, [r7, #12]
   19304:	b292      	uxth	r2, r2
   19306:	805a      	strh	r2, [r3, #2]
}
   19308:	46c0      	nop			; (mov r8, r8)
   1930a:	46bd      	mov	sp, r7
   1930c:	b004      	add	sp, #16
   1930e:	bd80      	pop	{r7, pc}
   19310:	00019361 	.word	0x00019361
   19314:	40000c00 	.word	0x40000c00

00019318 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   19318:	b580      	push	{r7, lr}
   1931a:	b082      	sub	sp, #8
   1931c:	af00      	add	r7, sp, #0
   1931e:	0002      	movs	r2, r0
   19320:	1dfb      	adds	r3, r7, #7
   19322:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   19324:	4b0a      	ldr	r3, [pc, #40]	; (19350 <system_gclk_chan_enable+0x38>)
   19326:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   19328:	4a0a      	ldr	r2, [pc, #40]	; (19354 <system_gclk_chan_enable+0x3c>)
   1932a:	1dfb      	adds	r3, r7, #7
   1932c:	781b      	ldrb	r3, [r3, #0]
   1932e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   19330:	4909      	ldr	r1, [pc, #36]	; (19358 <system_gclk_chan_enable+0x40>)
   19332:	4b09      	ldr	r3, [pc, #36]	; (19358 <system_gclk_chan_enable+0x40>)
   19334:	885b      	ldrh	r3, [r3, #2]
   19336:	b29b      	uxth	r3, r3
   19338:	2280      	movs	r2, #128	; 0x80
   1933a:	01d2      	lsls	r2, r2, #7
   1933c:	4313      	orrs	r3, r2
   1933e:	b29b      	uxth	r3, r3
   19340:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   19342:	4b06      	ldr	r3, [pc, #24]	; (1935c <system_gclk_chan_enable+0x44>)
   19344:	4798      	blx	r3
}
   19346:	46c0      	nop			; (mov r8, r8)
   19348:	46bd      	mov	sp, r7
   1934a:	b002      	add	sp, #8
   1934c:	bd80      	pop	{r7, pc}
   1934e:	46c0      	nop			; (mov r8, r8)
   19350:	00019005 	.word	0x00019005
   19354:	40000c02 	.word	0x40000c02
   19358:	40000c00 	.word	0x40000c00
   1935c:	00019019 	.word	0x00019019

00019360 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   19360:	b580      	push	{r7, lr}
   19362:	b084      	sub	sp, #16
   19364:	af00      	add	r7, sp, #0
   19366:	0002      	movs	r2, r0
   19368:	1dfb      	adds	r3, r7, #7
   1936a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   1936c:	4b1c      	ldr	r3, [pc, #112]	; (193e0 <system_gclk_chan_disable+0x80>)
   1936e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   19370:	4a1c      	ldr	r2, [pc, #112]	; (193e4 <system_gclk_chan_disable+0x84>)
   19372:	1dfb      	adds	r3, r7, #7
   19374:	781b      	ldrb	r3, [r3, #0]
   19376:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   19378:	4b1b      	ldr	r3, [pc, #108]	; (193e8 <system_gclk_chan_disable+0x88>)
   1937a:	885b      	ldrh	r3, [r3, #2]
   1937c:	051b      	lsls	r3, r3, #20
   1937e:	0f1b      	lsrs	r3, r3, #28
   19380:	b2db      	uxtb	r3, r3
   19382:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   19384:	4a18      	ldr	r2, [pc, #96]	; (193e8 <system_gclk_chan_disable+0x88>)
   19386:	8853      	ldrh	r3, [r2, #2]
   19388:	4918      	ldr	r1, [pc, #96]	; (193ec <system_gclk_chan_disable+0x8c>)
   1938a:	400b      	ands	r3, r1
   1938c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   1938e:	4a16      	ldr	r2, [pc, #88]	; (193e8 <system_gclk_chan_disable+0x88>)
   19390:	4b15      	ldr	r3, [pc, #84]	; (193e8 <system_gclk_chan_disable+0x88>)
   19392:	885b      	ldrh	r3, [r3, #2]
   19394:	b29b      	uxth	r3, r3
   19396:	4916      	ldr	r1, [pc, #88]	; (193f0 <system_gclk_chan_disable+0x90>)
   19398:	400b      	ands	r3, r1
   1939a:	b29b      	uxth	r3, r3
   1939c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   1939e:	46c0      	nop			; (mov r8, r8)
   193a0:	4b11      	ldr	r3, [pc, #68]	; (193e8 <system_gclk_chan_disable+0x88>)
   193a2:	885b      	ldrh	r3, [r3, #2]
   193a4:	b29b      	uxth	r3, r3
   193a6:	001a      	movs	r2, r3
   193a8:	2380      	movs	r3, #128	; 0x80
   193aa:	01db      	lsls	r3, r3, #7
   193ac:	4013      	ands	r3, r2
   193ae:	d1f7      	bne.n	193a0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   193b0:	4a0d      	ldr	r2, [pc, #52]	; (193e8 <system_gclk_chan_disable+0x88>)
   193b2:	68fb      	ldr	r3, [r7, #12]
   193b4:	b2db      	uxtb	r3, r3
   193b6:	1c19      	adds	r1, r3, #0
   193b8:	230f      	movs	r3, #15
   193ba:	400b      	ands	r3, r1
   193bc:	b2d9      	uxtb	r1, r3
   193be:	8853      	ldrh	r3, [r2, #2]
   193c0:	1c08      	adds	r0, r1, #0
   193c2:	210f      	movs	r1, #15
   193c4:	4001      	ands	r1, r0
   193c6:	0208      	lsls	r0, r1, #8
   193c8:	4908      	ldr	r1, [pc, #32]	; (193ec <system_gclk_chan_disable+0x8c>)
   193ca:	400b      	ands	r3, r1
   193cc:	1c19      	adds	r1, r3, #0
   193ce:	1c03      	adds	r3, r0, #0
   193d0:	430b      	orrs	r3, r1
   193d2:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   193d4:	4b07      	ldr	r3, [pc, #28]	; (193f4 <system_gclk_chan_disable+0x94>)
   193d6:	4798      	blx	r3
}
   193d8:	46c0      	nop			; (mov r8, r8)
   193da:	46bd      	mov	sp, r7
   193dc:	b004      	add	sp, #16
   193de:	bd80      	pop	{r7, pc}
   193e0:	00019005 	.word	0x00019005
   193e4:	40000c02 	.word	0x40000c02
   193e8:	40000c00 	.word	0x40000c00
   193ec:	fffff0ff 	.word	0xfffff0ff
   193f0:	ffffbfff 	.word	0xffffbfff
   193f4:	00019019 	.word	0x00019019

000193f8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   193f8:	b580      	push	{r7, lr}
   193fa:	b084      	sub	sp, #16
   193fc:	af00      	add	r7, sp, #0
   193fe:	0002      	movs	r2, r0
   19400:	1dfb      	adds	r3, r7, #7
   19402:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   19404:	4b0d      	ldr	r3, [pc, #52]	; (1943c <system_gclk_chan_get_hz+0x44>)
   19406:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   19408:	4a0d      	ldr	r2, [pc, #52]	; (19440 <system_gclk_chan_get_hz+0x48>)
   1940a:	1dfb      	adds	r3, r7, #7
   1940c:	781b      	ldrb	r3, [r3, #0]
   1940e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   19410:	4b0c      	ldr	r3, [pc, #48]	; (19444 <system_gclk_chan_get_hz+0x4c>)
   19412:	885b      	ldrh	r3, [r3, #2]
   19414:	051b      	lsls	r3, r3, #20
   19416:	0f1b      	lsrs	r3, r3, #28
   19418:	b2da      	uxtb	r2, r3
   1941a:	230f      	movs	r3, #15
   1941c:	18fb      	adds	r3, r7, r3
   1941e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   19420:	4b09      	ldr	r3, [pc, #36]	; (19448 <system_gclk_chan_get_hz+0x50>)
   19422:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   19424:	230f      	movs	r3, #15
   19426:	18fb      	adds	r3, r7, r3
   19428:	781b      	ldrb	r3, [r3, #0]
   1942a:	0018      	movs	r0, r3
   1942c:	4b07      	ldr	r3, [pc, #28]	; (1944c <system_gclk_chan_get_hz+0x54>)
   1942e:	4798      	blx	r3
   19430:	0003      	movs	r3, r0
}
   19432:	0018      	movs	r0, r3
   19434:	46bd      	mov	sp, r7
   19436:	b004      	add	sp, #16
   19438:	bd80      	pop	{r7, pc}
   1943a:	46c0      	nop			; (mov r8, r8)
   1943c:	00019005 	.word	0x00019005
   19440:	40000c02 	.word	0x40000c02
   19444:	40000c00 	.word	0x40000c00
   19448:	00019019 	.word	0x00019019
   1944c:	000191fd 	.word	0x000191fd

00019450 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   19450:	b580      	push	{r7, lr}
   19452:	b084      	sub	sp, #16
   19454:	af00      	add	r7, sp, #0
   19456:	0002      	movs	r2, r0
   19458:	1dfb      	adds	r3, r7, #7
   1945a:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   1945c:	230f      	movs	r3, #15
   1945e:	18fb      	adds	r3, r7, r3
   19460:	2200      	movs	r2, #0
   19462:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   19464:	1dfb      	adds	r3, r7, #7
   19466:	781b      	ldrb	r3, [r3, #0]
   19468:	2b7f      	cmp	r3, #127	; 0x7f
   1946a:	d80b      	bhi.n	19484 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   1946c:	4a13      	ldr	r2, [pc, #76]	; (194bc <system_interrupt_clear_pending+0x6c>)
   1946e:	1dfb      	adds	r3, r7, #7
   19470:	781b      	ldrb	r3, [r3, #0]
   19472:	b25b      	sxtb	r3, r3
   19474:	2101      	movs	r1, #1
   19476:	4099      	lsls	r1, r3
   19478:	000b      	movs	r3, r1
   1947a:	0019      	movs	r1, r3
   1947c:	23c0      	movs	r3, #192	; 0xc0
   1947e:	005b      	lsls	r3, r3, #1
   19480:	50d1      	str	r1, [r2, r3]
   19482:	e014      	b.n	194ae <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   19484:	1dfb      	adds	r3, r7, #7
   19486:	781b      	ldrb	r3, [r3, #0]
   19488:	b25b      	sxtb	r3, r3
   1948a:	330e      	adds	r3, #14
   1948c:	d101      	bne.n	19492 <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   1948e:	2317      	movs	r3, #23
   19490:	e010      	b.n	194b4 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   19492:	1dfb      	adds	r3, r7, #7
   19494:	781b      	ldrb	r3, [r3, #0]
   19496:	b25b      	sxtb	r3, r3
   19498:	3301      	adds	r3, #1
   1949a:	d104      	bne.n	194a6 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   1949c:	4b08      	ldr	r3, [pc, #32]	; (194c0 <system_interrupt_clear_pending+0x70>)
   1949e:	2280      	movs	r2, #128	; 0x80
   194a0:	0492      	lsls	r2, r2, #18
   194a2:	605a      	str	r2, [r3, #4]
   194a4:	e003      	b.n	194ae <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   194a6:	230f      	movs	r3, #15
   194a8:	18fb      	adds	r3, r7, r3
   194aa:	2217      	movs	r2, #23
   194ac:	701a      	strb	r2, [r3, #0]
	}

	return status;
   194ae:	230f      	movs	r3, #15
   194b0:	18fb      	adds	r3, r7, r3
   194b2:	781b      	ldrb	r3, [r3, #0]
}
   194b4:	0018      	movs	r0, r3
   194b6:	46bd      	mov	sp, r7
   194b8:	b004      	add	sp, #16
   194ba:	bd80      	pop	{r7, pc}
   194bc:	e000e100 	.word	0xe000e100
   194c0:	e000ed00 	.word	0xe000ed00

000194c4 <system_pinmux_get_group_from_gpio_pin>:
{
   194c4:	b580      	push	{r7, lr}
   194c6:	b084      	sub	sp, #16
   194c8:	af00      	add	r7, sp, #0
   194ca:	0002      	movs	r2, r0
   194cc:	1dfb      	adds	r3, r7, #7
   194ce:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   194d0:	230f      	movs	r3, #15
   194d2:	18fb      	adds	r3, r7, r3
   194d4:	1dfa      	adds	r2, r7, #7
   194d6:	7812      	ldrb	r2, [r2, #0]
   194d8:	09d2      	lsrs	r2, r2, #7
   194da:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   194dc:	230e      	movs	r3, #14
   194de:	18fb      	adds	r3, r7, r3
   194e0:	1dfa      	adds	r2, r7, #7
   194e2:	7812      	ldrb	r2, [r2, #0]
   194e4:	0952      	lsrs	r2, r2, #5
   194e6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   194e8:	4b0d      	ldr	r3, [pc, #52]	; (19520 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   194ea:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   194ec:	230f      	movs	r3, #15
   194ee:	18fb      	adds	r3, r7, r3
   194f0:	781b      	ldrb	r3, [r3, #0]
   194f2:	2b00      	cmp	r3, #0
   194f4:	d10f      	bne.n	19516 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   194f6:	230f      	movs	r3, #15
   194f8:	18fb      	adds	r3, r7, r3
   194fa:	781b      	ldrb	r3, [r3, #0]
   194fc:	009b      	lsls	r3, r3, #2
   194fe:	2210      	movs	r2, #16
   19500:	4694      	mov	ip, r2
   19502:	44bc      	add	ip, r7
   19504:	4463      	add	r3, ip
   19506:	3b08      	subs	r3, #8
   19508:	681a      	ldr	r2, [r3, #0]
   1950a:	230e      	movs	r3, #14
   1950c:	18fb      	adds	r3, r7, r3
   1950e:	781b      	ldrb	r3, [r3, #0]
   19510:	01db      	lsls	r3, r3, #7
   19512:	18d3      	adds	r3, r2, r3
   19514:	e000      	b.n	19518 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   19516:	2300      	movs	r3, #0
}
   19518:	0018      	movs	r0, r3
   1951a:	46bd      	mov	sp, r7
   1951c:	b004      	add	sp, #16
   1951e:	bd80      	pop	{r7, pc}
   19520:	41004400 	.word	0x41004400

00019524 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   19524:	b580      	push	{r7, lr}
   19526:	b088      	sub	sp, #32
   19528:	af00      	add	r7, sp, #0
   1952a:	60f8      	str	r0, [r7, #12]
   1952c:	60b9      	str	r1, [r7, #8]
   1952e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   19530:	2300      	movs	r3, #0
   19532:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   19534:	687b      	ldr	r3, [r7, #4]
   19536:	78db      	ldrb	r3, [r3, #3]
   19538:	2201      	movs	r2, #1
   1953a:	4053      	eors	r3, r2
   1953c:	b2db      	uxtb	r3, r3
   1953e:	2b00      	cmp	r3, #0
   19540:	d035      	beq.n	195ae <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   19542:	687b      	ldr	r3, [r7, #4]
   19544:	781b      	ldrb	r3, [r3, #0]
   19546:	2b80      	cmp	r3, #128	; 0x80
   19548:	d00b      	beq.n	19562 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   1954a:	69fb      	ldr	r3, [r7, #28]
   1954c:	2280      	movs	r2, #128	; 0x80
   1954e:	0252      	lsls	r2, r2, #9
   19550:	4313      	orrs	r3, r2
   19552:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   19554:	687b      	ldr	r3, [r7, #4]
   19556:	781b      	ldrb	r3, [r3, #0]
   19558:	061b      	lsls	r3, r3, #24
   1955a:	001a      	movs	r2, r3
   1955c:	69fb      	ldr	r3, [r7, #28]
   1955e:	4313      	orrs	r3, r2
   19560:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   19562:	687b      	ldr	r3, [r7, #4]
   19564:	785b      	ldrb	r3, [r3, #1]
   19566:	2b00      	cmp	r3, #0
   19568:	d003      	beq.n	19572 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   1956a:	687b      	ldr	r3, [r7, #4]
   1956c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1956e:	2b02      	cmp	r3, #2
   19570:	d110      	bne.n	19594 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   19572:	69fb      	ldr	r3, [r7, #28]
   19574:	2280      	movs	r2, #128	; 0x80
   19576:	0292      	lsls	r2, r2, #10
   19578:	4313      	orrs	r3, r2
   1957a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   1957c:	687b      	ldr	r3, [r7, #4]
   1957e:	789b      	ldrb	r3, [r3, #2]
   19580:	2b00      	cmp	r3, #0
   19582:	d004      	beq.n	1958e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   19584:	69fb      	ldr	r3, [r7, #28]
   19586:	2280      	movs	r2, #128	; 0x80
   19588:	02d2      	lsls	r2, r2, #11
   1958a:	4313      	orrs	r3, r2
   1958c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   1958e:	68fb      	ldr	r3, [r7, #12]
   19590:	68ba      	ldr	r2, [r7, #8]
   19592:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   19594:	687b      	ldr	r3, [r7, #4]
   19596:	785b      	ldrb	r3, [r3, #1]
   19598:	2b01      	cmp	r3, #1
   1959a:	d003      	beq.n	195a4 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   1959c:	687b      	ldr	r3, [r7, #4]
   1959e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   195a0:	2b02      	cmp	r3, #2
   195a2:	d107      	bne.n	195b4 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   195a4:	69fb      	ldr	r3, [r7, #28]
   195a6:	4a22      	ldr	r2, [pc, #136]	; (19630 <_system_pinmux_config+0x10c>)
   195a8:	4013      	ands	r3, r2
   195aa:	61fb      	str	r3, [r7, #28]
   195ac:	e002      	b.n	195b4 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   195ae:	68fb      	ldr	r3, [r7, #12]
   195b0:	68ba      	ldr	r2, [r7, #8]
   195b2:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   195b4:	68bb      	ldr	r3, [r7, #8]
   195b6:	041b      	lsls	r3, r3, #16
   195b8:	0c1b      	lsrs	r3, r3, #16
   195ba:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   195bc:	68bb      	ldr	r3, [r7, #8]
   195be:	0c1b      	lsrs	r3, r3, #16
   195c0:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   195c2:	69ba      	ldr	r2, [r7, #24]
   195c4:	69fb      	ldr	r3, [r7, #28]
   195c6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   195c8:	22a0      	movs	r2, #160	; 0xa0
   195ca:	05d2      	lsls	r2, r2, #23
   195cc:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   195ce:	68fb      	ldr	r3, [r7, #12]
   195d0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   195d2:	697a      	ldr	r2, [r7, #20]
   195d4:	69fb      	ldr	r3, [r7, #28]
   195d6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   195d8:	22d0      	movs	r2, #208	; 0xd0
   195da:	0612      	lsls	r2, r2, #24
   195dc:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   195de:	68fb      	ldr	r3, [r7, #12]
   195e0:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   195e2:	687b      	ldr	r3, [r7, #4]
   195e4:	78db      	ldrb	r3, [r3, #3]
   195e6:	2201      	movs	r2, #1
   195e8:	4053      	eors	r3, r2
   195ea:	b2db      	uxtb	r3, r3
   195ec:	2b00      	cmp	r3, #0
   195ee:	d01a      	beq.n	19626 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   195f0:	69fa      	ldr	r2, [r7, #28]
   195f2:	2380      	movs	r3, #128	; 0x80
   195f4:	02db      	lsls	r3, r3, #11
   195f6:	4013      	ands	r3, r2
   195f8:	d00a      	beq.n	19610 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   195fa:	687b      	ldr	r3, [r7, #4]
   195fc:	789b      	ldrb	r3, [r3, #2]
   195fe:	2b01      	cmp	r3, #1
   19600:	d103      	bne.n	1960a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   19602:	68fb      	ldr	r3, [r7, #12]
   19604:	68ba      	ldr	r2, [r7, #8]
   19606:	619a      	str	r2, [r3, #24]
   19608:	e002      	b.n	19610 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   1960a:	68fb      	ldr	r3, [r7, #12]
   1960c:	68ba      	ldr	r2, [r7, #8]
   1960e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   19610:	687b      	ldr	r3, [r7, #4]
   19612:	785b      	ldrb	r3, [r3, #1]
   19614:	2b01      	cmp	r3, #1
   19616:	d003      	beq.n	19620 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   19618:	687b      	ldr	r3, [r7, #4]
   1961a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1961c:	2b02      	cmp	r3, #2
   1961e:	d102      	bne.n	19626 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   19620:	68fb      	ldr	r3, [r7, #12]
   19622:	68ba      	ldr	r2, [r7, #8]
   19624:	609a      	str	r2, [r3, #8]
		}
	}
}
   19626:	46c0      	nop			; (mov r8, r8)
   19628:	46bd      	mov	sp, r7
   1962a:	b008      	add	sp, #32
   1962c:	bd80      	pop	{r7, pc}
   1962e:	46c0      	nop			; (mov r8, r8)
   19630:	fffbffff 	.word	0xfffbffff

00019634 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   19634:	b580      	push	{r7, lr}
   19636:	b084      	sub	sp, #16
   19638:	af00      	add	r7, sp, #0
   1963a:	0002      	movs	r2, r0
   1963c:	6039      	str	r1, [r7, #0]
   1963e:	1dfb      	adds	r3, r7, #7
   19640:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   19642:	1dfb      	adds	r3, r7, #7
   19644:	781b      	ldrb	r3, [r3, #0]
   19646:	0018      	movs	r0, r3
   19648:	4b0a      	ldr	r3, [pc, #40]	; (19674 <system_pinmux_pin_set_config+0x40>)
   1964a:	4798      	blx	r3
   1964c:	0003      	movs	r3, r0
   1964e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   19650:	1dfb      	adds	r3, r7, #7
   19652:	781b      	ldrb	r3, [r3, #0]
   19654:	221f      	movs	r2, #31
   19656:	4013      	ands	r3, r2
   19658:	2201      	movs	r2, #1
   1965a:	409a      	lsls	r2, r3
   1965c:	0013      	movs	r3, r2
   1965e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   19660:	683a      	ldr	r2, [r7, #0]
   19662:	68b9      	ldr	r1, [r7, #8]
   19664:	68fb      	ldr	r3, [r7, #12]
   19666:	0018      	movs	r0, r3
   19668:	4b03      	ldr	r3, [pc, #12]	; (19678 <system_pinmux_pin_set_config+0x44>)
   1966a:	4798      	blx	r3
}
   1966c:	46c0      	nop			; (mov r8, r8)
   1966e:	46bd      	mov	sp, r7
   19670:	b004      	add	sp, #16
   19672:	bd80      	pop	{r7, pc}
   19674:	000194c5 	.word	0x000194c5
   19678:	00019525 	.word	0x00019525

0001967c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   1967c:	b580      	push	{r7, lr}
   1967e:	af00      	add	r7, sp, #0
	return;
   19680:	46c0      	nop			; (mov r8, r8)
}
   19682:	46bd      	mov	sp, r7
   19684:	bd80      	pop	{r7, pc}
	...

00019688 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   19688:	b580      	push	{r7, lr}
   1968a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   1968c:	4b06      	ldr	r3, [pc, #24]	; (196a8 <system_init+0x20>)
   1968e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   19690:	4b06      	ldr	r3, [pc, #24]	; (196ac <system_init+0x24>)
   19692:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   19694:	4b06      	ldr	r3, [pc, #24]	; (196b0 <system_init+0x28>)
   19696:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   19698:	4b06      	ldr	r3, [pc, #24]	; (196b4 <system_init+0x2c>)
   1969a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   1969c:	4b06      	ldr	r3, [pc, #24]	; (196b8 <system_init+0x30>)
   1969e:	4798      	blx	r3
}
   196a0:	46c0      	nop			; (mov r8, r8)
   196a2:	46bd      	mov	sp, r7
   196a4:	bd80      	pop	{r7, pc}
   196a6:	46c0      	nop			; (mov r8, r8)
   196a8:	00018d45 	.word	0x00018d45
   196ac:	00016fb9 	.word	0x00016fb9
   196b0:	0001967d 	.word	0x0001967d
   196b4:	00017229 	.word	0x00017229
   196b8:	0001967d 	.word	0x0001967d

000196bc <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   196bc:	b580      	push	{r7, lr}
   196be:	af00      	add	r7, sp, #0
   196c0:	2000      	movs	r0, #0
   196c2:	4b02      	ldr	r3, [pc, #8]	; (196cc <TCC0_Handler+0x10>)
   196c4:	4798      	blx	r3
   196c6:	46c0      	nop			; (mov r8, r8)
   196c8:	46bd      	mov	sp, r7
   196ca:	bd80      	pop	{r7, pc}
   196cc:	000196f9 	.word	0x000196f9

000196d0 <TCC1_Handler>:
   196d0:	b580      	push	{r7, lr}
   196d2:	af00      	add	r7, sp, #0
   196d4:	2001      	movs	r0, #1
   196d6:	4b02      	ldr	r3, [pc, #8]	; (196e0 <TCC1_Handler+0x10>)
   196d8:	4798      	blx	r3
   196da:	46c0      	nop			; (mov r8, r8)
   196dc:	46bd      	mov	sp, r7
   196de:	bd80      	pop	{r7, pc}
   196e0:	000196f9 	.word	0x000196f9

000196e4 <TCC2_Handler>:
   196e4:	b580      	push	{r7, lr}
   196e6:	af00      	add	r7, sp, #0
   196e8:	2002      	movs	r0, #2
   196ea:	4b02      	ldr	r3, [pc, #8]	; (196f4 <TCC2_Handler+0x10>)
   196ec:	4798      	blx	r3
   196ee:	46c0      	nop			; (mov r8, r8)
   196f0:	46bd      	mov	sp, r7
   196f2:	bd80      	pop	{r7, pc}
   196f4:	000196f9 	.word	0x000196f9

000196f8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   196f8:	b580      	push	{r7, lr}
   196fa:	b086      	sub	sp, #24
   196fc:	af00      	add	r7, sp, #0
   196fe:	0002      	movs	r2, r0
   19700:	1dfb      	adds	r3, r7, #7
   19702:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   19704:	1dfb      	adds	r3, r7, #7
   19706:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   19708:	4b18      	ldr	r3, [pc, #96]	; (1976c <_tcc_interrupt_handler+0x74>)
   1970a:	0092      	lsls	r2, r2, #2
   1970c:	58d3      	ldr	r3, [r2, r3]
   1970e:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   19710:	693b      	ldr	r3, [r7, #16]
   19712:	681b      	ldr	r3, [r3, #0]
   19714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   19716:	693b      	ldr	r3, [r7, #16]
   19718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1971a:	401a      	ands	r2, r3
			module->enable_callback_mask);
   1971c:	693b      	ldr	r3, [r7, #16]
   1971e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   19720:	4013      	ands	r3, r2
   19722:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   19724:	2300      	movs	r3, #0
   19726:	617b      	str	r3, [r7, #20]
   19728:	e019      	b.n	1975e <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1972a:	4b11      	ldr	r3, [pc, #68]	; (19770 <_tcc_interrupt_handler+0x78>)
   1972c:	697a      	ldr	r2, [r7, #20]
   1972e:	0092      	lsls	r2, r2, #2
   19730:	58d3      	ldr	r3, [r2, r3]
   19732:	68fa      	ldr	r2, [r7, #12]
   19734:	4013      	ands	r3, r2
   19736:	d00f      	beq.n	19758 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   19738:	693a      	ldr	r2, [r7, #16]
   1973a:	697b      	ldr	r3, [r7, #20]
   1973c:	009b      	lsls	r3, r3, #2
   1973e:	18d3      	adds	r3, r2, r3
   19740:	3304      	adds	r3, #4
   19742:	681b      	ldr	r3, [r3, #0]
   19744:	693a      	ldr	r2, [r7, #16]
   19746:	0010      	movs	r0, r2
   19748:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   1974a:	693b      	ldr	r3, [r7, #16]
   1974c:	681b      	ldr	r3, [r3, #0]
   1974e:	4a08      	ldr	r2, [pc, #32]	; (19770 <_tcc_interrupt_handler+0x78>)
   19750:	6979      	ldr	r1, [r7, #20]
   19752:	0089      	lsls	r1, r1, #2
   19754:	588a      	ldr	r2, [r1, r2]
   19756:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   19758:	697b      	ldr	r3, [r7, #20]
   1975a:	3301      	adds	r3, #1
   1975c:	617b      	str	r3, [r7, #20]
   1975e:	697b      	ldr	r3, [r7, #20]
   19760:	2b0b      	cmp	r3, #11
   19762:	dde2      	ble.n	1972a <_tcc_interrupt_handler+0x32>
		}
	}
}
   19764:	46c0      	nop			; (mov r8, r8)
   19766:	46bd      	mov	sp, r7
   19768:	b006      	add	sp, #24
   1976a:	bd80      	pop	{r7, pc}
   1976c:	20002f88 	.word	0x20002f88
   19770:	0001c024 	.word	0x0001c024

00019774 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   19774:	b580      	push	{r7, lr}
   19776:	b082      	sub	sp, #8
   19778:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   1977a:	4b2f      	ldr	r3, [pc, #188]	; (19838 <Reset_Handler+0xc4>)
   1977c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   1977e:	4b2f      	ldr	r3, [pc, #188]	; (1983c <Reset_Handler+0xc8>)
   19780:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   19782:	687a      	ldr	r2, [r7, #4]
   19784:	683b      	ldr	r3, [r7, #0]
   19786:	429a      	cmp	r2, r3
   19788:	d00c      	beq.n	197a4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   1978a:	e007      	b.n	1979c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   1978c:	683b      	ldr	r3, [r7, #0]
   1978e:	1d1a      	adds	r2, r3, #4
   19790:	603a      	str	r2, [r7, #0]
   19792:	687a      	ldr	r2, [r7, #4]
   19794:	1d11      	adds	r1, r2, #4
   19796:	6079      	str	r1, [r7, #4]
   19798:	6812      	ldr	r2, [r2, #0]
   1979a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   1979c:	683a      	ldr	r2, [r7, #0]
   1979e:	4b28      	ldr	r3, [pc, #160]	; (19840 <Reset_Handler+0xcc>)
   197a0:	429a      	cmp	r2, r3
   197a2:	d3f3      	bcc.n	1978c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   197a4:	4b27      	ldr	r3, [pc, #156]	; (19844 <Reset_Handler+0xd0>)
   197a6:	603b      	str	r3, [r7, #0]
   197a8:	e004      	b.n	197b4 <Reset_Handler+0x40>
                *pDest++ = 0;
   197aa:	683b      	ldr	r3, [r7, #0]
   197ac:	1d1a      	adds	r2, r3, #4
   197ae:	603a      	str	r2, [r7, #0]
   197b0:	2200      	movs	r2, #0
   197b2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   197b4:	683a      	ldr	r2, [r7, #0]
   197b6:	4b24      	ldr	r3, [pc, #144]	; (19848 <Reset_Handler+0xd4>)
   197b8:	429a      	cmp	r2, r3
   197ba:	d3f6      	bcc.n	197aa <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   197bc:	4b23      	ldr	r3, [pc, #140]	; (1984c <Reset_Handler+0xd8>)
   197be:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   197c0:	4b23      	ldr	r3, [pc, #140]	; (19850 <Reset_Handler+0xdc>)
   197c2:	687a      	ldr	r2, [r7, #4]
   197c4:	21ff      	movs	r1, #255	; 0xff
   197c6:	438a      	bics	r2, r1
   197c8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   197ca:	4a22      	ldr	r2, [pc, #136]	; (19854 <Reset_Handler+0xe0>)
   197cc:	2390      	movs	r3, #144	; 0x90
   197ce:	005b      	lsls	r3, r3, #1
   197d0:	2102      	movs	r1, #2
   197d2:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   197d4:	4a20      	ldr	r2, [pc, #128]	; (19858 <Reset_Handler+0xe4>)
   197d6:	78d3      	ldrb	r3, [r2, #3]
   197d8:	2103      	movs	r1, #3
   197da:	438b      	bics	r3, r1
   197dc:	1c19      	adds	r1, r3, #0
   197de:	2302      	movs	r3, #2
   197e0:	430b      	orrs	r3, r1
   197e2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   197e4:	4a1c      	ldr	r2, [pc, #112]	; (19858 <Reset_Handler+0xe4>)
   197e6:	78d3      	ldrb	r3, [r2, #3]
   197e8:	210c      	movs	r1, #12
   197ea:	438b      	bics	r3, r1
   197ec:	1c19      	adds	r1, r3, #0
   197ee:	2308      	movs	r3, #8
   197f0:	430b      	orrs	r3, r1
   197f2:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   197f4:	4a19      	ldr	r2, [pc, #100]	; (1985c <Reset_Handler+0xe8>)
   197f6:	7b93      	ldrb	r3, [r2, #14]
   197f8:	2130      	movs	r1, #48	; 0x30
   197fa:	438b      	bics	r3, r1
   197fc:	1c19      	adds	r1, r3, #0
   197fe:	2320      	movs	r3, #32
   19800:	430b      	orrs	r3, r1
   19802:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   19804:	4a15      	ldr	r2, [pc, #84]	; (1985c <Reset_Handler+0xe8>)
   19806:	7b93      	ldrb	r3, [r2, #14]
   19808:	210c      	movs	r1, #12
   1980a:	438b      	bics	r3, r1
   1980c:	1c19      	adds	r1, r3, #0
   1980e:	2308      	movs	r3, #8
   19810:	430b      	orrs	r3, r1
   19812:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   19814:	4a11      	ldr	r2, [pc, #68]	; (1985c <Reset_Handler+0xe8>)
   19816:	7b93      	ldrb	r3, [r2, #14]
   19818:	2103      	movs	r1, #3
   1981a:	438b      	bics	r3, r1
   1981c:	1c19      	adds	r1, r3, #0
   1981e:	2302      	movs	r3, #2
   19820:	430b      	orrs	r3, r1
   19822:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   19824:	4a0e      	ldr	r2, [pc, #56]	; (19860 <Reset_Handler+0xec>)
   19826:	6853      	ldr	r3, [r2, #4]
   19828:	2180      	movs	r1, #128	; 0x80
   1982a:	430b      	orrs	r3, r1
   1982c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   1982e:	4b0d      	ldr	r3, [pc, #52]	; (19864 <Reset_Handler+0xf0>)
   19830:	4798      	blx	r3

        /* Branch to main function */
        main();
   19832:	4b0d      	ldr	r3, [pc, #52]	; (19868 <Reset_Handler+0xf4>)
   19834:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   19836:	e7fe      	b.n	19836 <Reset_Handler+0xc2>
   19838:	0001c2b0 	.word	0x0001c2b0
   1983c:	20000000 	.word	0x20000000
   19840:	20000078 	.word	0x20000078
   19844:	20000078 	.word	0x20000078
   19848:	20002fd8 	.word	0x20002fd8
   1984c:	00012000 	.word	0x00012000
   19850:	e000ed00 	.word	0xe000ed00
   19854:	41007000 	.word	0x41007000
   19858:	41005000 	.word	0x41005000
   1985c:	41004800 	.word	0x41004800
   19860:	41004000 	.word	0x41004000
   19864:	0001b4e1 	.word	0x0001b4e1
   19868:	0001994d 	.word	0x0001994d

0001986c <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   1986c:	b580      	push	{r7, lr}
   1986e:	af00      	add	r7, sp, #0
  __asm volatile (
   19870:	2004      	movs	r0, #4
   19872:	4671      	mov	r1, lr
   19874:	4208      	tst	r0, r1
   19876:	d002      	beq.n	1987e <_MSP>
   19878:	f3ef 8009 	mrs	r0, PSP
   1987c:	e001      	b.n	19882 <_HALT>

0001987e <_MSP>:
   1987e:	f3ef 8008 	mrs	r0, MSP

00019882 <_HALT>:
   19882:	6941      	ldr	r1, [r0, #20]
   19884:	e004      	b.n	19890 <HardFault_HandlerC>
   19886:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   19888:	46c0      	nop			; (mov r8, r8)
   1988a:	46bd      	mov	sp, r7
   1988c:	bd80      	pop	{r7, pc}
	...

00019890 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   19890:	b580      	push	{r7, lr}
   19892:	b090      	sub	sp, #64	; 0x40
   19894:	af00      	add	r7, sp, #0
   19896:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   19898:	687b      	ldr	r3, [r7, #4]
   1989a:	681b      	ldr	r3, [r3, #0]
   1989c:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   1989e:	687b      	ldr	r3, [r7, #4]
   198a0:	685b      	ldr	r3, [r3, #4]
   198a2:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   198a4:	687b      	ldr	r3, [r7, #4]
   198a6:	689b      	ldr	r3, [r3, #8]
   198a8:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   198aa:	687b      	ldr	r3, [r7, #4]
   198ac:	68db      	ldr	r3, [r3, #12]
   198ae:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   198b0:	687b      	ldr	r3, [r7, #4]
   198b2:	691b      	ldr	r3, [r3, #16]
   198b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   198b6:	687b      	ldr	r3, [r7, #4]
   198b8:	695b      	ldr	r3, [r3, #20]
   198ba:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   198bc:	687b      	ldr	r3, [r7, #4]
   198be:	699b      	ldr	r3, [r3, #24]
   198c0:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   198c2:	687b      	ldr	r3, [r7, #4]
   198c4:	69db      	ldr	r3, [r3, #28]
   198c6:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   198c8:	4b0b      	ldr	r3, [pc, #44]	; (198f8 <HardFault_HandlerC+0x68>)
   198ca:	681b      	ldr	r3, [r3, #0]
   198cc:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   198ce:	4b0b      	ldr	r3, [pc, #44]	; (198fc <HardFault_HandlerC+0x6c>)
   198d0:	681b      	ldr	r3, [r3, #0]
   198d2:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   198d4:	4b0a      	ldr	r3, [pc, #40]	; (19900 <HardFault_HandlerC+0x70>)
   198d6:	681b      	ldr	r3, [r3, #0]
   198d8:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   198da:	4b0a      	ldr	r3, [pc, #40]	; (19904 <HardFault_HandlerC+0x74>)
   198dc:	681b      	ldr	r3, [r3, #0]
   198de:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   198e0:	4b09      	ldr	r3, [pc, #36]	; (19908 <HardFault_HandlerC+0x78>)
   198e2:	681b      	ldr	r3, [r3, #0]
   198e4:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   198e6:	4b09      	ldr	r3, [pc, #36]	; (1990c <HardFault_HandlerC+0x7c>)
   198e8:	681b      	ldr	r3, [r3, #0]
   198ea:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   198ec:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   198ee:	46c0      	nop			; (mov r8, r8)
   198f0:	46bd      	mov	sp, r7
   198f2:	b010      	add	sp, #64	; 0x40
   198f4:	bd80      	pop	{r7, pc}
   198f6:	46c0      	nop			; (mov r8, r8)
   198f8:	e000ed28 	.word	0xe000ed28
   198fc:	e000ed2c 	.word	0xe000ed2c
   19900:	e000ed30 	.word	0xe000ed30
   19904:	e000ed3c 	.word	0xe000ed3c
   19908:	e000ed34 	.word	0xe000ed34
   1990c:	e000ed38 	.word	0xe000ed38

00019910 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   19910:	b580      	push	{r7, lr}
   19912:	b084      	sub	sp, #16
   19914:	af00      	add	r7, sp, #0
   19916:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   19918:	4b0a      	ldr	r3, [pc, #40]	; (19944 <_sbrk+0x34>)
   1991a:	681b      	ldr	r3, [r3, #0]
   1991c:	2b00      	cmp	r3, #0
   1991e:	d102      	bne.n	19926 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   19920:	4b08      	ldr	r3, [pc, #32]	; (19944 <_sbrk+0x34>)
   19922:	4a09      	ldr	r2, [pc, #36]	; (19948 <_sbrk+0x38>)
   19924:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   19926:	4b07      	ldr	r3, [pc, #28]	; (19944 <_sbrk+0x34>)
   19928:	681b      	ldr	r3, [r3, #0]
   1992a:	60fb      	str	r3, [r7, #12]

	heap += incr;
   1992c:	4b05      	ldr	r3, [pc, #20]	; (19944 <_sbrk+0x34>)
   1992e:	681a      	ldr	r2, [r3, #0]
   19930:	687b      	ldr	r3, [r7, #4]
   19932:	18d2      	adds	r2, r2, r3
   19934:	4b03      	ldr	r3, [pc, #12]	; (19944 <_sbrk+0x34>)
   19936:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   19938:	68fb      	ldr	r3, [r7, #12]
}
   1993a:	0018      	movs	r0, r3
   1993c:	46bd      	mov	sp, r7
   1993e:	b004      	add	sp, #16
   19940:	bd80      	pop	{r7, pc}
   19942:	46c0      	nop			; (mov r8, r8)
   19944:	200029e0 	.word	0x200029e0
   19948:	20004fd8 	.word	0x20004fd8

0001994c <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
   1994c:	b580      	push	{r7, lr}
   1994e:	af00      	add	r7, sp, #0


	/* Initialize the board. */
	system_init();
   19950:	4b05      	ldr	r3, [pc, #20]	; (19968 <main+0x1c>)
   19952:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
   19954:	4b05      	ldr	r3, [pc, #20]	; (1996c <main+0x20>)
   19956:	4798      	blx	r3
	/* Initialize the I2C driver. */
	I2cInitializeDriver();
   19958:	4b05      	ldr	r3, [pc, #20]	; (19970 <main+0x24>)
   1995a:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   1995c:	4b05      	ldr	r3, [pc, #20]	; (19974 <main+0x28>)
   1995e:	4798      	blx	r3


	return 0;
   19960:	2300      	movs	r3, #0
}
   19962:	0018      	movs	r0, r3
   19964:	46bd      	mov	sp, r7
   19966:	bd80      	pop	{r7, pc}
   19968:	00019689 	.word	0x00019689
   1996c:	00016b35 	.word	0x00016b35
   19970:	00012e01 	.word	0x00012e01
   19974:	0001567d 	.word	0x0001567d

00019978 <vApplicationDaemonTaskStartupHook>:
* @param[in]        None
* @return           None
*****************************************************************************/

void vApplicationDaemonTaskStartupHook(void)
{
   19978:	b580      	push	{r7, lr}
   1997a:	af00      	add	r7, sp, #0
// #ifdef BOOT_TEST
// 	TestA(); //Comment me for Test B
// 	//TestB(); //Comment me for Test A
// #endif
	StartTasks();
   1997c:	4b04      	ldr	r3, [pc, #16]	; (19990 <vApplicationDaemonTaskStartupHook+0x18>)
   1997e:	4798      	blx	r3

	vTaskSuspend(daemonTaskHandle);
   19980:	4b04      	ldr	r3, [pc, #16]	; (19994 <vApplicationDaemonTaskStartupHook+0x1c>)
   19982:	681b      	ldr	r3, [r3, #0]
   19984:	0018      	movs	r0, r3
   19986:	4b04      	ldr	r3, [pc, #16]	; (19998 <vApplicationDaemonTaskStartupHook+0x20>)
   19988:	4798      	blx	r3
}
   1998a:	46c0      	nop			; (mov r8, r8)
   1998c:	46bd      	mov	sp, r7
   1998e:	bd80      	pop	{r7, pc}
   19990:	0001999d 	.word	0x0001999d
   19994:	200029e8 	.word	0x200029e8
   19998:	00015595 	.word	0x00015595

0001999c <StartTasks>:
* @details
* @param[in]        None
* @return           None
*****************************************************************************/
static void StartTasks(void)
{
   1999c:	b590      	push	{r4, r7, lr}
   1999e:	b083      	sub	sp, #12
   199a0:	af02      	add	r7, sp, #8
	snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   199a2:	4b26      	ldr	r3, [pc, #152]	; (19a3c <StartTasks+0xa0>)
   199a4:	4798      	blx	r3
   199a6:	0003      	movs	r3, r0
   199a8:	4a25      	ldr	r2, [pc, #148]	; (19a40 <StartTasks+0xa4>)
   199aa:	4826      	ldr	r0, [pc, #152]	; (19a44 <StartTasks+0xa8>)
   199ac:	2140      	movs	r1, #64	; 0x40
   199ae:	4c26      	ldr	r4, [pc, #152]	; (19a48 <StartTasks+0xac>)
   199b0:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   199b2:	4b24      	ldr	r3, [pc, #144]	; (19a44 <StartTasks+0xa8>)
   199b4:	0018      	movs	r0, r3
   199b6:	4b25      	ldr	r3, [pc, #148]	; (19a4c <StartTasks+0xb0>)
   199b8:	4798      	blx	r3

	//Initialize Tasks here

	if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   199ba:	2380      	movs	r3, #128	; 0x80
   199bc:	005a      	lsls	r2, r3, #1
   199be:	4924      	ldr	r1, [pc, #144]	; (19a50 <StartTasks+0xb4>)
   199c0:	4824      	ldr	r0, [pc, #144]	; (19a54 <StartTasks+0xb8>)
   199c2:	4b25      	ldr	r3, [pc, #148]	; (19a58 <StartTasks+0xbc>)
   199c4:	9301      	str	r3, [sp, #4]
   199c6:	2304      	movs	r3, #4
   199c8:	9300      	str	r3, [sp, #0]
   199ca:	2300      	movs	r3, #0
   199cc:	4c23      	ldr	r4, [pc, #140]	; (19a5c <StartTasks+0xc0>)
   199ce:	47a0      	blx	r4
   199d0:	0003      	movs	r3, r0
   199d2:	2b01      	cmp	r3, #1
   199d4:	d003      	beq.n	199de <StartTasks+0x42>
		SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   199d6:	4b22      	ldr	r3, [pc, #136]	; (19a60 <StartTasks+0xc4>)
   199d8:	0018      	movs	r0, r3
   199da:	4b1c      	ldr	r3, [pc, #112]	; (19a4c <StartTasks+0xb0>)
   199dc:	4798      	blx	r3
	}

	snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   199de:	4b17      	ldr	r3, [pc, #92]	; (19a3c <StartTasks+0xa0>)
   199e0:	4798      	blx	r3
   199e2:	0003      	movs	r3, r0
   199e4:	4a1f      	ldr	r2, [pc, #124]	; (19a64 <StartTasks+0xc8>)
   199e6:	4817      	ldr	r0, [pc, #92]	; (19a44 <StartTasks+0xa8>)
   199e8:	2140      	movs	r1, #64	; 0x40
   199ea:	4c17      	ldr	r4, [pc, #92]	; (19a48 <StartTasks+0xac>)
   199ec:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   199ee:	4b15      	ldr	r3, [pc, #84]	; (19a44 <StartTasks+0xa8>)
   199f0:	0018      	movs	r0, r3
   199f2:	4b16      	ldr	r3, [pc, #88]	; (19a4c <StartTasks+0xb0>)
   199f4:	4798      	blx	r3
// 	}
// 
// 	snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
// 	SerialConsoleWriteString(bufferPrint);

	if (xTaskCreate(vSensorReadTask, "LIGHT_TASK", LIGHT_TASK_SIZE, NULL, LIGHTSENSOR_PRIORITY, &SensorReadTaskHandle) != pdPASS) {
   199f6:	2380      	movs	r3, #128	; 0x80
   199f8:	005a      	lsls	r2, r3, #1
   199fa:	491b      	ldr	r1, [pc, #108]	; (19a68 <StartTasks+0xcc>)
   199fc:	481b      	ldr	r0, [pc, #108]	; (19a6c <StartTasks+0xd0>)
   199fe:	4b1c      	ldr	r3, [pc, #112]	; (19a70 <StartTasks+0xd4>)
   19a00:	9301      	str	r3, [sp, #4]
   19a02:	2302      	movs	r3, #2
   19a04:	9300      	str	r3, [sp, #0]
   19a06:	2300      	movs	r3, #0
   19a08:	4c14      	ldr	r4, [pc, #80]	; (19a5c <StartTasks+0xc0>)
   19a0a:	47a0      	blx	r4
   19a0c:	0003      	movs	r3, r0
   19a0e:	2b01      	cmp	r3, #1
   19a10:	d003      	beq.n	19a1a <StartTasks+0x7e>
		SerialConsoleWriteString("ERR: LIGHT task could not be initialized!\r\n");
   19a12:	4b18      	ldr	r3, [pc, #96]	; (19a74 <StartTasks+0xd8>)
   19a14:	0018      	movs	r0, r3
   19a16:	4b0d      	ldr	r3, [pc, #52]	; (19a4c <StartTasks+0xb0>)
   19a18:	4798      	blx	r3
	}

	snprintf(bufferPrint, 64, "Heap after starting LIGHT: %d\r\n", xPortGetFreeHeapSize());
   19a1a:	4b08      	ldr	r3, [pc, #32]	; (19a3c <StartTasks+0xa0>)
   19a1c:	4798      	blx	r3
   19a1e:	0003      	movs	r3, r0
   19a20:	4a15      	ldr	r2, [pc, #84]	; (19a78 <StartTasks+0xdc>)
   19a22:	4808      	ldr	r0, [pc, #32]	; (19a44 <StartTasks+0xa8>)
   19a24:	2140      	movs	r1, #64	; 0x40
   19a26:	4c08      	ldr	r4, [pc, #32]	; (19a48 <StartTasks+0xac>)
   19a28:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   19a2a:	4b06      	ldr	r3, [pc, #24]	; (19a44 <StartTasks+0xa8>)
   19a2c:	0018      	movs	r0, r3
   19a2e:	4b07      	ldr	r3, [pc, #28]	; (19a4c <StartTasks+0xb0>)
   19a30:	4798      	blx	r3
}
   19a32:	46c0      	nop			; (mov r8, r8)
   19a34:	46bd      	mov	sp, r7
   19a36:	b001      	add	sp, #4
   19a38:	bd90      	pop	{r4, r7, pc}
   19a3a:	46c0      	nop			; (mov r8, r8)
   19a3c:	0001454d 	.word	0x0001454d
   19a40:	0001c054 	.word	0x0001c054
   19a44:	20002f94 	.word	0x20002f94
   19a48:	0001b6f9 	.word	0x0001b6f9
   19a4c:	00016ba5 	.word	0x00016ba5
   19a50:	0001c078 	.word	0x0001c078
   19a54:	000128fd 	.word	0x000128fd
   19a58:	200029e4 	.word	0x200029e4
   19a5c:	000152c1 	.word	0x000152c1
   19a60:	0001c084 	.word	0x0001c084
   19a64:	0001c0b0 	.word	0x0001c0b0
   19a68:	0001c0d0 	.word	0x0001c0d0
   19a6c:	000134e5 	.word	0x000134e5
   19a70:	200029ec 	.word	0x200029ec
   19a74:	0001c0dc 	.word	0x0001c0dc
   19a78:	0001c108 	.word	0x0001c108

00019a7c <vApplicationMallocFailedHook>:




void vApplicationMallocFailedHook(void)
{
   19a7c:	b580      	push	{r7, lr}
   19a7e:	af00      	add	r7, sp, #0
SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   19a80:	4b02      	ldr	r3, [pc, #8]	; (19a8c <vApplicationMallocFailedHook+0x10>)
   19a82:	0018      	movs	r0, r3
   19a84:	4b02      	ldr	r3, [pc, #8]	; (19a90 <vApplicationMallocFailedHook+0x14>)
   19a86:	4798      	blx	r3
while(1);
   19a88:	e7fe      	b.n	19a88 <vApplicationMallocFailedHook+0xc>
   19a8a:	46c0      	nop			; (mov r8, r8)
   19a8c:	0001c128 	.word	0x0001c128
   19a90:	00016ba5 	.word	0x00016ba5

00019a94 <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook(void)
{
   19a94:	b580      	push	{r7, lr}
   19a96:	af00      	add	r7, sp, #0
SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   19a98:	4b02      	ldr	r3, [pc, #8]	; (19aa4 <vApplicationStackOverflowHook+0x10>)
   19a9a:	0018      	movs	r0, r3
   19a9c:	4b02      	ldr	r3, [pc, #8]	; (19aa8 <vApplicationStackOverflowHook+0x14>)
   19a9e:	4798      	blx	r3
while(1);
   19aa0:	e7fe      	b.n	19aa0 <vApplicationStackOverflowHook+0xc>
   19aa2:	46c0      	nop			; (mov r8, r8)
   19aa4:	0001c154 	.word	0x0001c154
   19aa8:	00016ba5 	.word	0x00016ba5

00019aac <__udivsi3>:
   19aac:	2200      	movs	r2, #0
   19aae:	0843      	lsrs	r3, r0, #1
   19ab0:	428b      	cmp	r3, r1
   19ab2:	d374      	bcc.n	19b9e <__udivsi3+0xf2>
   19ab4:	0903      	lsrs	r3, r0, #4
   19ab6:	428b      	cmp	r3, r1
   19ab8:	d35f      	bcc.n	19b7a <__udivsi3+0xce>
   19aba:	0a03      	lsrs	r3, r0, #8
   19abc:	428b      	cmp	r3, r1
   19abe:	d344      	bcc.n	19b4a <__udivsi3+0x9e>
   19ac0:	0b03      	lsrs	r3, r0, #12
   19ac2:	428b      	cmp	r3, r1
   19ac4:	d328      	bcc.n	19b18 <__udivsi3+0x6c>
   19ac6:	0c03      	lsrs	r3, r0, #16
   19ac8:	428b      	cmp	r3, r1
   19aca:	d30d      	bcc.n	19ae8 <__udivsi3+0x3c>
   19acc:	22ff      	movs	r2, #255	; 0xff
   19ace:	0209      	lsls	r1, r1, #8
   19ad0:	ba12      	rev	r2, r2
   19ad2:	0c03      	lsrs	r3, r0, #16
   19ad4:	428b      	cmp	r3, r1
   19ad6:	d302      	bcc.n	19ade <__udivsi3+0x32>
   19ad8:	1212      	asrs	r2, r2, #8
   19ada:	0209      	lsls	r1, r1, #8
   19adc:	d065      	beq.n	19baa <__udivsi3+0xfe>
   19ade:	0b03      	lsrs	r3, r0, #12
   19ae0:	428b      	cmp	r3, r1
   19ae2:	d319      	bcc.n	19b18 <__udivsi3+0x6c>
   19ae4:	e000      	b.n	19ae8 <__udivsi3+0x3c>
   19ae6:	0a09      	lsrs	r1, r1, #8
   19ae8:	0bc3      	lsrs	r3, r0, #15
   19aea:	428b      	cmp	r3, r1
   19aec:	d301      	bcc.n	19af2 <__udivsi3+0x46>
   19aee:	03cb      	lsls	r3, r1, #15
   19af0:	1ac0      	subs	r0, r0, r3
   19af2:	4152      	adcs	r2, r2
   19af4:	0b83      	lsrs	r3, r0, #14
   19af6:	428b      	cmp	r3, r1
   19af8:	d301      	bcc.n	19afe <__udivsi3+0x52>
   19afa:	038b      	lsls	r3, r1, #14
   19afc:	1ac0      	subs	r0, r0, r3
   19afe:	4152      	adcs	r2, r2
   19b00:	0b43      	lsrs	r3, r0, #13
   19b02:	428b      	cmp	r3, r1
   19b04:	d301      	bcc.n	19b0a <__udivsi3+0x5e>
   19b06:	034b      	lsls	r3, r1, #13
   19b08:	1ac0      	subs	r0, r0, r3
   19b0a:	4152      	adcs	r2, r2
   19b0c:	0b03      	lsrs	r3, r0, #12
   19b0e:	428b      	cmp	r3, r1
   19b10:	d301      	bcc.n	19b16 <__udivsi3+0x6a>
   19b12:	030b      	lsls	r3, r1, #12
   19b14:	1ac0      	subs	r0, r0, r3
   19b16:	4152      	adcs	r2, r2
   19b18:	0ac3      	lsrs	r3, r0, #11
   19b1a:	428b      	cmp	r3, r1
   19b1c:	d301      	bcc.n	19b22 <__udivsi3+0x76>
   19b1e:	02cb      	lsls	r3, r1, #11
   19b20:	1ac0      	subs	r0, r0, r3
   19b22:	4152      	adcs	r2, r2
   19b24:	0a83      	lsrs	r3, r0, #10
   19b26:	428b      	cmp	r3, r1
   19b28:	d301      	bcc.n	19b2e <__udivsi3+0x82>
   19b2a:	028b      	lsls	r3, r1, #10
   19b2c:	1ac0      	subs	r0, r0, r3
   19b2e:	4152      	adcs	r2, r2
   19b30:	0a43      	lsrs	r3, r0, #9
   19b32:	428b      	cmp	r3, r1
   19b34:	d301      	bcc.n	19b3a <__udivsi3+0x8e>
   19b36:	024b      	lsls	r3, r1, #9
   19b38:	1ac0      	subs	r0, r0, r3
   19b3a:	4152      	adcs	r2, r2
   19b3c:	0a03      	lsrs	r3, r0, #8
   19b3e:	428b      	cmp	r3, r1
   19b40:	d301      	bcc.n	19b46 <__udivsi3+0x9a>
   19b42:	020b      	lsls	r3, r1, #8
   19b44:	1ac0      	subs	r0, r0, r3
   19b46:	4152      	adcs	r2, r2
   19b48:	d2cd      	bcs.n	19ae6 <__udivsi3+0x3a>
   19b4a:	09c3      	lsrs	r3, r0, #7
   19b4c:	428b      	cmp	r3, r1
   19b4e:	d301      	bcc.n	19b54 <__udivsi3+0xa8>
   19b50:	01cb      	lsls	r3, r1, #7
   19b52:	1ac0      	subs	r0, r0, r3
   19b54:	4152      	adcs	r2, r2
   19b56:	0983      	lsrs	r3, r0, #6
   19b58:	428b      	cmp	r3, r1
   19b5a:	d301      	bcc.n	19b60 <__udivsi3+0xb4>
   19b5c:	018b      	lsls	r3, r1, #6
   19b5e:	1ac0      	subs	r0, r0, r3
   19b60:	4152      	adcs	r2, r2
   19b62:	0943      	lsrs	r3, r0, #5
   19b64:	428b      	cmp	r3, r1
   19b66:	d301      	bcc.n	19b6c <__udivsi3+0xc0>
   19b68:	014b      	lsls	r3, r1, #5
   19b6a:	1ac0      	subs	r0, r0, r3
   19b6c:	4152      	adcs	r2, r2
   19b6e:	0903      	lsrs	r3, r0, #4
   19b70:	428b      	cmp	r3, r1
   19b72:	d301      	bcc.n	19b78 <__udivsi3+0xcc>
   19b74:	010b      	lsls	r3, r1, #4
   19b76:	1ac0      	subs	r0, r0, r3
   19b78:	4152      	adcs	r2, r2
   19b7a:	08c3      	lsrs	r3, r0, #3
   19b7c:	428b      	cmp	r3, r1
   19b7e:	d301      	bcc.n	19b84 <__udivsi3+0xd8>
   19b80:	00cb      	lsls	r3, r1, #3
   19b82:	1ac0      	subs	r0, r0, r3
   19b84:	4152      	adcs	r2, r2
   19b86:	0883      	lsrs	r3, r0, #2
   19b88:	428b      	cmp	r3, r1
   19b8a:	d301      	bcc.n	19b90 <__udivsi3+0xe4>
   19b8c:	008b      	lsls	r3, r1, #2
   19b8e:	1ac0      	subs	r0, r0, r3
   19b90:	4152      	adcs	r2, r2
   19b92:	0843      	lsrs	r3, r0, #1
   19b94:	428b      	cmp	r3, r1
   19b96:	d301      	bcc.n	19b9c <__udivsi3+0xf0>
   19b98:	004b      	lsls	r3, r1, #1
   19b9a:	1ac0      	subs	r0, r0, r3
   19b9c:	4152      	adcs	r2, r2
   19b9e:	1a41      	subs	r1, r0, r1
   19ba0:	d200      	bcs.n	19ba4 <__udivsi3+0xf8>
   19ba2:	4601      	mov	r1, r0
   19ba4:	4152      	adcs	r2, r2
   19ba6:	4610      	mov	r0, r2
   19ba8:	4770      	bx	lr
   19baa:	e7ff      	b.n	19bac <__udivsi3+0x100>
   19bac:	b501      	push	{r0, lr}
   19bae:	2000      	movs	r0, #0
   19bb0:	f000 f806 	bl	19bc0 <__aeabi_idiv0>
   19bb4:	bd02      	pop	{r1, pc}
   19bb6:	46c0      	nop			; (mov r8, r8)

00019bb8 <__aeabi_uidivmod>:
   19bb8:	2900      	cmp	r1, #0
   19bba:	d0f7      	beq.n	19bac <__udivsi3+0x100>
   19bbc:	e776      	b.n	19aac <__udivsi3>
   19bbe:	4770      	bx	lr

00019bc0 <__aeabi_idiv0>:
   19bc0:	4770      	bx	lr
   19bc2:	46c0      	nop			; (mov r8, r8)

00019bc4 <__aeabi_lmul>:
   19bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   19bc6:	46ce      	mov	lr, r9
   19bc8:	4647      	mov	r7, r8
   19bca:	0415      	lsls	r5, r2, #16
   19bcc:	0c2d      	lsrs	r5, r5, #16
   19bce:	002e      	movs	r6, r5
   19bd0:	b580      	push	{r7, lr}
   19bd2:	0407      	lsls	r7, r0, #16
   19bd4:	0c14      	lsrs	r4, r2, #16
   19bd6:	0c3f      	lsrs	r7, r7, #16
   19bd8:	4699      	mov	r9, r3
   19bda:	0c03      	lsrs	r3, r0, #16
   19bdc:	437e      	muls	r6, r7
   19bde:	435d      	muls	r5, r3
   19be0:	4367      	muls	r7, r4
   19be2:	4363      	muls	r3, r4
   19be4:	197f      	adds	r7, r7, r5
   19be6:	0c34      	lsrs	r4, r6, #16
   19be8:	19e4      	adds	r4, r4, r7
   19bea:	469c      	mov	ip, r3
   19bec:	42a5      	cmp	r5, r4
   19bee:	d903      	bls.n	19bf8 <__aeabi_lmul+0x34>
   19bf0:	2380      	movs	r3, #128	; 0x80
   19bf2:	025b      	lsls	r3, r3, #9
   19bf4:	4698      	mov	r8, r3
   19bf6:	44c4      	add	ip, r8
   19bf8:	464b      	mov	r3, r9
   19bfa:	4351      	muls	r1, r2
   19bfc:	4343      	muls	r3, r0
   19bfe:	0436      	lsls	r6, r6, #16
   19c00:	0c36      	lsrs	r6, r6, #16
   19c02:	0c25      	lsrs	r5, r4, #16
   19c04:	0424      	lsls	r4, r4, #16
   19c06:	4465      	add	r5, ip
   19c08:	19a4      	adds	r4, r4, r6
   19c0a:	1859      	adds	r1, r3, r1
   19c0c:	1949      	adds	r1, r1, r5
   19c0e:	0020      	movs	r0, r4
   19c10:	bc0c      	pop	{r2, r3}
   19c12:	4690      	mov	r8, r2
   19c14:	4699      	mov	r9, r3
   19c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019c18 <__aeabi_dadd>:
   19c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c1a:	4645      	mov	r5, r8
   19c1c:	46de      	mov	lr, fp
   19c1e:	4657      	mov	r7, sl
   19c20:	464e      	mov	r6, r9
   19c22:	030c      	lsls	r4, r1, #12
   19c24:	b5e0      	push	{r5, r6, r7, lr}
   19c26:	004e      	lsls	r6, r1, #1
   19c28:	0fc9      	lsrs	r1, r1, #31
   19c2a:	4688      	mov	r8, r1
   19c2c:	000d      	movs	r5, r1
   19c2e:	0a61      	lsrs	r1, r4, #9
   19c30:	0f44      	lsrs	r4, r0, #29
   19c32:	430c      	orrs	r4, r1
   19c34:	00c7      	lsls	r7, r0, #3
   19c36:	0319      	lsls	r1, r3, #12
   19c38:	0058      	lsls	r0, r3, #1
   19c3a:	0fdb      	lsrs	r3, r3, #31
   19c3c:	469b      	mov	fp, r3
   19c3e:	0a4b      	lsrs	r3, r1, #9
   19c40:	0f51      	lsrs	r1, r2, #29
   19c42:	430b      	orrs	r3, r1
   19c44:	0d76      	lsrs	r6, r6, #21
   19c46:	0d40      	lsrs	r0, r0, #21
   19c48:	0019      	movs	r1, r3
   19c4a:	00d2      	lsls	r2, r2, #3
   19c4c:	45d8      	cmp	r8, fp
   19c4e:	d100      	bne.n	19c52 <__aeabi_dadd+0x3a>
   19c50:	e0ae      	b.n	19db0 <__aeabi_dadd+0x198>
   19c52:	1a35      	subs	r5, r6, r0
   19c54:	2d00      	cmp	r5, #0
   19c56:	dc00      	bgt.n	19c5a <__aeabi_dadd+0x42>
   19c58:	e0f6      	b.n	19e48 <__aeabi_dadd+0x230>
   19c5a:	2800      	cmp	r0, #0
   19c5c:	d10f      	bne.n	19c7e <__aeabi_dadd+0x66>
   19c5e:	4313      	orrs	r3, r2
   19c60:	d100      	bne.n	19c64 <__aeabi_dadd+0x4c>
   19c62:	e0db      	b.n	19e1c <__aeabi_dadd+0x204>
   19c64:	1e6b      	subs	r3, r5, #1
   19c66:	2b00      	cmp	r3, #0
   19c68:	d000      	beq.n	19c6c <__aeabi_dadd+0x54>
   19c6a:	e137      	b.n	19edc <__aeabi_dadd+0x2c4>
   19c6c:	1aba      	subs	r2, r7, r2
   19c6e:	4297      	cmp	r7, r2
   19c70:	41bf      	sbcs	r7, r7
   19c72:	1a64      	subs	r4, r4, r1
   19c74:	427f      	negs	r7, r7
   19c76:	1be4      	subs	r4, r4, r7
   19c78:	2601      	movs	r6, #1
   19c7a:	0017      	movs	r7, r2
   19c7c:	e024      	b.n	19cc8 <__aeabi_dadd+0xb0>
   19c7e:	4bc6      	ldr	r3, [pc, #792]	; (19f98 <__aeabi_dadd+0x380>)
   19c80:	429e      	cmp	r6, r3
   19c82:	d04d      	beq.n	19d20 <__aeabi_dadd+0x108>
   19c84:	2380      	movs	r3, #128	; 0x80
   19c86:	041b      	lsls	r3, r3, #16
   19c88:	4319      	orrs	r1, r3
   19c8a:	2d38      	cmp	r5, #56	; 0x38
   19c8c:	dd00      	ble.n	19c90 <__aeabi_dadd+0x78>
   19c8e:	e107      	b.n	19ea0 <__aeabi_dadd+0x288>
   19c90:	2d1f      	cmp	r5, #31
   19c92:	dd00      	ble.n	19c96 <__aeabi_dadd+0x7e>
   19c94:	e138      	b.n	19f08 <__aeabi_dadd+0x2f0>
   19c96:	2020      	movs	r0, #32
   19c98:	1b43      	subs	r3, r0, r5
   19c9a:	469a      	mov	sl, r3
   19c9c:	000b      	movs	r3, r1
   19c9e:	4650      	mov	r0, sl
   19ca0:	4083      	lsls	r3, r0
   19ca2:	4699      	mov	r9, r3
   19ca4:	0013      	movs	r3, r2
   19ca6:	4648      	mov	r0, r9
   19ca8:	40eb      	lsrs	r3, r5
   19caa:	4318      	orrs	r0, r3
   19cac:	0003      	movs	r3, r0
   19cae:	4650      	mov	r0, sl
   19cb0:	4082      	lsls	r2, r0
   19cb2:	1e50      	subs	r0, r2, #1
   19cb4:	4182      	sbcs	r2, r0
   19cb6:	40e9      	lsrs	r1, r5
   19cb8:	431a      	orrs	r2, r3
   19cba:	1aba      	subs	r2, r7, r2
   19cbc:	1a61      	subs	r1, r4, r1
   19cbe:	4297      	cmp	r7, r2
   19cc0:	41a4      	sbcs	r4, r4
   19cc2:	0017      	movs	r7, r2
   19cc4:	4264      	negs	r4, r4
   19cc6:	1b0c      	subs	r4, r1, r4
   19cc8:	0223      	lsls	r3, r4, #8
   19cca:	d562      	bpl.n	19d92 <__aeabi_dadd+0x17a>
   19ccc:	0264      	lsls	r4, r4, #9
   19cce:	0a65      	lsrs	r5, r4, #9
   19cd0:	2d00      	cmp	r5, #0
   19cd2:	d100      	bne.n	19cd6 <__aeabi_dadd+0xbe>
   19cd4:	e0df      	b.n	19e96 <__aeabi_dadd+0x27e>
   19cd6:	0028      	movs	r0, r5
   19cd8:	f001 fbe4 	bl	1b4a4 <__clzsi2>
   19cdc:	0003      	movs	r3, r0
   19cde:	3b08      	subs	r3, #8
   19ce0:	2b1f      	cmp	r3, #31
   19ce2:	dd00      	ble.n	19ce6 <__aeabi_dadd+0xce>
   19ce4:	e0d2      	b.n	19e8c <__aeabi_dadd+0x274>
   19ce6:	2220      	movs	r2, #32
   19ce8:	003c      	movs	r4, r7
   19cea:	1ad2      	subs	r2, r2, r3
   19cec:	409d      	lsls	r5, r3
   19cee:	40d4      	lsrs	r4, r2
   19cf0:	409f      	lsls	r7, r3
   19cf2:	4325      	orrs	r5, r4
   19cf4:	429e      	cmp	r6, r3
   19cf6:	dd00      	ble.n	19cfa <__aeabi_dadd+0xe2>
   19cf8:	e0c4      	b.n	19e84 <__aeabi_dadd+0x26c>
   19cfa:	1b9e      	subs	r6, r3, r6
   19cfc:	1c73      	adds	r3, r6, #1
   19cfe:	2b1f      	cmp	r3, #31
   19d00:	dd00      	ble.n	19d04 <__aeabi_dadd+0xec>
   19d02:	e0f1      	b.n	19ee8 <__aeabi_dadd+0x2d0>
   19d04:	2220      	movs	r2, #32
   19d06:	0038      	movs	r0, r7
   19d08:	0029      	movs	r1, r5
   19d0a:	1ad2      	subs	r2, r2, r3
   19d0c:	40d8      	lsrs	r0, r3
   19d0e:	4091      	lsls	r1, r2
   19d10:	4097      	lsls	r7, r2
   19d12:	002c      	movs	r4, r5
   19d14:	4301      	orrs	r1, r0
   19d16:	1e78      	subs	r0, r7, #1
   19d18:	4187      	sbcs	r7, r0
   19d1a:	40dc      	lsrs	r4, r3
   19d1c:	2600      	movs	r6, #0
   19d1e:	430f      	orrs	r7, r1
   19d20:	077b      	lsls	r3, r7, #29
   19d22:	d009      	beq.n	19d38 <__aeabi_dadd+0x120>
   19d24:	230f      	movs	r3, #15
   19d26:	403b      	ands	r3, r7
   19d28:	2b04      	cmp	r3, #4
   19d2a:	d005      	beq.n	19d38 <__aeabi_dadd+0x120>
   19d2c:	1d3b      	adds	r3, r7, #4
   19d2e:	42bb      	cmp	r3, r7
   19d30:	41bf      	sbcs	r7, r7
   19d32:	427f      	negs	r7, r7
   19d34:	19e4      	adds	r4, r4, r7
   19d36:	001f      	movs	r7, r3
   19d38:	0223      	lsls	r3, r4, #8
   19d3a:	d52c      	bpl.n	19d96 <__aeabi_dadd+0x17e>
   19d3c:	4b96      	ldr	r3, [pc, #600]	; (19f98 <__aeabi_dadd+0x380>)
   19d3e:	3601      	adds	r6, #1
   19d40:	429e      	cmp	r6, r3
   19d42:	d100      	bne.n	19d46 <__aeabi_dadd+0x12e>
   19d44:	e09a      	b.n	19e7c <__aeabi_dadd+0x264>
   19d46:	4645      	mov	r5, r8
   19d48:	4b94      	ldr	r3, [pc, #592]	; (19f9c <__aeabi_dadd+0x384>)
   19d4a:	08ff      	lsrs	r7, r7, #3
   19d4c:	401c      	ands	r4, r3
   19d4e:	0760      	lsls	r0, r4, #29
   19d50:	0576      	lsls	r6, r6, #21
   19d52:	0264      	lsls	r4, r4, #9
   19d54:	4307      	orrs	r7, r0
   19d56:	0b24      	lsrs	r4, r4, #12
   19d58:	0d76      	lsrs	r6, r6, #21
   19d5a:	2100      	movs	r1, #0
   19d5c:	0324      	lsls	r4, r4, #12
   19d5e:	0b23      	lsrs	r3, r4, #12
   19d60:	0d0c      	lsrs	r4, r1, #20
   19d62:	4a8f      	ldr	r2, [pc, #572]	; (19fa0 <__aeabi_dadd+0x388>)
   19d64:	0524      	lsls	r4, r4, #20
   19d66:	431c      	orrs	r4, r3
   19d68:	4014      	ands	r4, r2
   19d6a:	0533      	lsls	r3, r6, #20
   19d6c:	4323      	orrs	r3, r4
   19d6e:	005b      	lsls	r3, r3, #1
   19d70:	07ed      	lsls	r5, r5, #31
   19d72:	085b      	lsrs	r3, r3, #1
   19d74:	432b      	orrs	r3, r5
   19d76:	0038      	movs	r0, r7
   19d78:	0019      	movs	r1, r3
   19d7a:	bc3c      	pop	{r2, r3, r4, r5}
   19d7c:	4690      	mov	r8, r2
   19d7e:	4699      	mov	r9, r3
   19d80:	46a2      	mov	sl, r4
   19d82:	46ab      	mov	fp, r5
   19d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19d86:	4664      	mov	r4, ip
   19d88:	4304      	orrs	r4, r0
   19d8a:	d100      	bne.n	19d8e <__aeabi_dadd+0x176>
   19d8c:	e211      	b.n	1a1b2 <__aeabi_dadd+0x59a>
   19d8e:	0004      	movs	r4, r0
   19d90:	4667      	mov	r7, ip
   19d92:	077b      	lsls	r3, r7, #29
   19d94:	d1c6      	bne.n	19d24 <__aeabi_dadd+0x10c>
   19d96:	4645      	mov	r5, r8
   19d98:	0760      	lsls	r0, r4, #29
   19d9a:	08ff      	lsrs	r7, r7, #3
   19d9c:	4307      	orrs	r7, r0
   19d9e:	08e4      	lsrs	r4, r4, #3
   19da0:	4b7d      	ldr	r3, [pc, #500]	; (19f98 <__aeabi_dadd+0x380>)
   19da2:	429e      	cmp	r6, r3
   19da4:	d030      	beq.n	19e08 <__aeabi_dadd+0x1f0>
   19da6:	0324      	lsls	r4, r4, #12
   19da8:	0576      	lsls	r6, r6, #21
   19daa:	0b24      	lsrs	r4, r4, #12
   19dac:	0d76      	lsrs	r6, r6, #21
   19dae:	e7d4      	b.n	19d5a <__aeabi_dadd+0x142>
   19db0:	1a33      	subs	r3, r6, r0
   19db2:	469a      	mov	sl, r3
   19db4:	2b00      	cmp	r3, #0
   19db6:	dd78      	ble.n	19eaa <__aeabi_dadd+0x292>
   19db8:	2800      	cmp	r0, #0
   19dba:	d031      	beq.n	19e20 <__aeabi_dadd+0x208>
   19dbc:	4876      	ldr	r0, [pc, #472]	; (19f98 <__aeabi_dadd+0x380>)
   19dbe:	4286      	cmp	r6, r0
   19dc0:	d0ae      	beq.n	19d20 <__aeabi_dadd+0x108>
   19dc2:	2080      	movs	r0, #128	; 0x80
   19dc4:	0400      	lsls	r0, r0, #16
   19dc6:	4301      	orrs	r1, r0
   19dc8:	4653      	mov	r3, sl
   19dca:	2b38      	cmp	r3, #56	; 0x38
   19dcc:	dc00      	bgt.n	19dd0 <__aeabi_dadd+0x1b8>
   19dce:	e0e9      	b.n	19fa4 <__aeabi_dadd+0x38c>
   19dd0:	430a      	orrs	r2, r1
   19dd2:	1e51      	subs	r1, r2, #1
   19dd4:	418a      	sbcs	r2, r1
   19dd6:	2100      	movs	r1, #0
   19dd8:	19d2      	adds	r2, r2, r7
   19dda:	42ba      	cmp	r2, r7
   19ddc:	41bf      	sbcs	r7, r7
   19dde:	1909      	adds	r1, r1, r4
   19de0:	427c      	negs	r4, r7
   19de2:	0017      	movs	r7, r2
   19de4:	190c      	adds	r4, r1, r4
   19de6:	0223      	lsls	r3, r4, #8
   19de8:	d5d3      	bpl.n	19d92 <__aeabi_dadd+0x17a>
   19dea:	4b6b      	ldr	r3, [pc, #428]	; (19f98 <__aeabi_dadd+0x380>)
   19dec:	3601      	adds	r6, #1
   19dee:	429e      	cmp	r6, r3
   19df0:	d100      	bne.n	19df4 <__aeabi_dadd+0x1dc>
   19df2:	e13a      	b.n	1a06a <__aeabi_dadd+0x452>
   19df4:	2001      	movs	r0, #1
   19df6:	4b69      	ldr	r3, [pc, #420]	; (19f9c <__aeabi_dadd+0x384>)
   19df8:	401c      	ands	r4, r3
   19dfa:	087b      	lsrs	r3, r7, #1
   19dfc:	4007      	ands	r7, r0
   19dfe:	431f      	orrs	r7, r3
   19e00:	07e0      	lsls	r0, r4, #31
   19e02:	4307      	orrs	r7, r0
   19e04:	0864      	lsrs	r4, r4, #1
   19e06:	e78b      	b.n	19d20 <__aeabi_dadd+0x108>
   19e08:	0023      	movs	r3, r4
   19e0a:	433b      	orrs	r3, r7
   19e0c:	d100      	bne.n	19e10 <__aeabi_dadd+0x1f8>
   19e0e:	e1cb      	b.n	1a1a8 <__aeabi_dadd+0x590>
   19e10:	2280      	movs	r2, #128	; 0x80
   19e12:	0312      	lsls	r2, r2, #12
   19e14:	4314      	orrs	r4, r2
   19e16:	0324      	lsls	r4, r4, #12
   19e18:	0b24      	lsrs	r4, r4, #12
   19e1a:	e79e      	b.n	19d5a <__aeabi_dadd+0x142>
   19e1c:	002e      	movs	r6, r5
   19e1e:	e77f      	b.n	19d20 <__aeabi_dadd+0x108>
   19e20:	0008      	movs	r0, r1
   19e22:	4310      	orrs	r0, r2
   19e24:	d100      	bne.n	19e28 <__aeabi_dadd+0x210>
   19e26:	e0b4      	b.n	19f92 <__aeabi_dadd+0x37a>
   19e28:	1e58      	subs	r0, r3, #1
   19e2a:	2800      	cmp	r0, #0
   19e2c:	d000      	beq.n	19e30 <__aeabi_dadd+0x218>
   19e2e:	e0de      	b.n	19fee <__aeabi_dadd+0x3d6>
   19e30:	18ba      	adds	r2, r7, r2
   19e32:	42ba      	cmp	r2, r7
   19e34:	419b      	sbcs	r3, r3
   19e36:	1864      	adds	r4, r4, r1
   19e38:	425b      	negs	r3, r3
   19e3a:	18e4      	adds	r4, r4, r3
   19e3c:	0017      	movs	r7, r2
   19e3e:	2601      	movs	r6, #1
   19e40:	0223      	lsls	r3, r4, #8
   19e42:	d5a6      	bpl.n	19d92 <__aeabi_dadd+0x17a>
   19e44:	2602      	movs	r6, #2
   19e46:	e7d5      	b.n	19df4 <__aeabi_dadd+0x1dc>
   19e48:	2d00      	cmp	r5, #0
   19e4a:	d16e      	bne.n	19f2a <__aeabi_dadd+0x312>
   19e4c:	1c70      	adds	r0, r6, #1
   19e4e:	0540      	lsls	r0, r0, #21
   19e50:	0d40      	lsrs	r0, r0, #21
   19e52:	2801      	cmp	r0, #1
   19e54:	dc00      	bgt.n	19e58 <__aeabi_dadd+0x240>
   19e56:	e0f9      	b.n	1a04c <__aeabi_dadd+0x434>
   19e58:	1ab8      	subs	r0, r7, r2
   19e5a:	4684      	mov	ip, r0
   19e5c:	4287      	cmp	r7, r0
   19e5e:	4180      	sbcs	r0, r0
   19e60:	1ae5      	subs	r5, r4, r3
   19e62:	4240      	negs	r0, r0
   19e64:	1a2d      	subs	r5, r5, r0
   19e66:	0228      	lsls	r0, r5, #8
   19e68:	d400      	bmi.n	19e6c <__aeabi_dadd+0x254>
   19e6a:	e089      	b.n	19f80 <__aeabi_dadd+0x368>
   19e6c:	1bd7      	subs	r7, r2, r7
   19e6e:	42ba      	cmp	r2, r7
   19e70:	4192      	sbcs	r2, r2
   19e72:	1b1c      	subs	r4, r3, r4
   19e74:	4252      	negs	r2, r2
   19e76:	1aa5      	subs	r5, r4, r2
   19e78:	46d8      	mov	r8, fp
   19e7a:	e729      	b.n	19cd0 <__aeabi_dadd+0xb8>
   19e7c:	4645      	mov	r5, r8
   19e7e:	2400      	movs	r4, #0
   19e80:	2700      	movs	r7, #0
   19e82:	e76a      	b.n	19d5a <__aeabi_dadd+0x142>
   19e84:	4c45      	ldr	r4, [pc, #276]	; (19f9c <__aeabi_dadd+0x384>)
   19e86:	1af6      	subs	r6, r6, r3
   19e88:	402c      	ands	r4, r5
   19e8a:	e749      	b.n	19d20 <__aeabi_dadd+0x108>
   19e8c:	003d      	movs	r5, r7
   19e8e:	3828      	subs	r0, #40	; 0x28
   19e90:	4085      	lsls	r5, r0
   19e92:	2700      	movs	r7, #0
   19e94:	e72e      	b.n	19cf4 <__aeabi_dadd+0xdc>
   19e96:	0038      	movs	r0, r7
   19e98:	f001 fb04 	bl	1b4a4 <__clzsi2>
   19e9c:	3020      	adds	r0, #32
   19e9e:	e71d      	b.n	19cdc <__aeabi_dadd+0xc4>
   19ea0:	430a      	orrs	r2, r1
   19ea2:	1e51      	subs	r1, r2, #1
   19ea4:	418a      	sbcs	r2, r1
   19ea6:	2100      	movs	r1, #0
   19ea8:	e707      	b.n	19cba <__aeabi_dadd+0xa2>
   19eaa:	2b00      	cmp	r3, #0
   19eac:	d000      	beq.n	19eb0 <__aeabi_dadd+0x298>
   19eae:	e0f3      	b.n	1a098 <__aeabi_dadd+0x480>
   19eb0:	1c70      	adds	r0, r6, #1
   19eb2:	0543      	lsls	r3, r0, #21
   19eb4:	0d5b      	lsrs	r3, r3, #21
   19eb6:	2b01      	cmp	r3, #1
   19eb8:	dc00      	bgt.n	19ebc <__aeabi_dadd+0x2a4>
   19eba:	e0ad      	b.n	1a018 <__aeabi_dadd+0x400>
   19ebc:	4b36      	ldr	r3, [pc, #216]	; (19f98 <__aeabi_dadd+0x380>)
   19ebe:	4298      	cmp	r0, r3
   19ec0:	d100      	bne.n	19ec4 <__aeabi_dadd+0x2ac>
   19ec2:	e0d1      	b.n	1a068 <__aeabi_dadd+0x450>
   19ec4:	18ba      	adds	r2, r7, r2
   19ec6:	42ba      	cmp	r2, r7
   19ec8:	41bf      	sbcs	r7, r7
   19eca:	1864      	adds	r4, r4, r1
   19ecc:	427f      	negs	r7, r7
   19ece:	19e4      	adds	r4, r4, r7
   19ed0:	07e7      	lsls	r7, r4, #31
   19ed2:	0852      	lsrs	r2, r2, #1
   19ed4:	4317      	orrs	r7, r2
   19ed6:	0864      	lsrs	r4, r4, #1
   19ed8:	0006      	movs	r6, r0
   19eda:	e721      	b.n	19d20 <__aeabi_dadd+0x108>
   19edc:	482e      	ldr	r0, [pc, #184]	; (19f98 <__aeabi_dadd+0x380>)
   19ede:	4285      	cmp	r5, r0
   19ee0:	d100      	bne.n	19ee4 <__aeabi_dadd+0x2cc>
   19ee2:	e093      	b.n	1a00c <__aeabi_dadd+0x3f4>
   19ee4:	001d      	movs	r5, r3
   19ee6:	e6d0      	b.n	19c8a <__aeabi_dadd+0x72>
   19ee8:	0029      	movs	r1, r5
   19eea:	3e1f      	subs	r6, #31
   19eec:	40f1      	lsrs	r1, r6
   19eee:	2b20      	cmp	r3, #32
   19ef0:	d100      	bne.n	19ef4 <__aeabi_dadd+0x2dc>
   19ef2:	e08d      	b.n	1a010 <__aeabi_dadd+0x3f8>
   19ef4:	2240      	movs	r2, #64	; 0x40
   19ef6:	1ad3      	subs	r3, r2, r3
   19ef8:	409d      	lsls	r5, r3
   19efa:	432f      	orrs	r7, r5
   19efc:	1e7d      	subs	r5, r7, #1
   19efe:	41af      	sbcs	r7, r5
   19f00:	2400      	movs	r4, #0
   19f02:	430f      	orrs	r7, r1
   19f04:	2600      	movs	r6, #0
   19f06:	e744      	b.n	19d92 <__aeabi_dadd+0x17a>
   19f08:	002b      	movs	r3, r5
   19f0a:	0008      	movs	r0, r1
   19f0c:	3b20      	subs	r3, #32
   19f0e:	40d8      	lsrs	r0, r3
   19f10:	0003      	movs	r3, r0
   19f12:	2d20      	cmp	r5, #32
   19f14:	d100      	bne.n	19f18 <__aeabi_dadd+0x300>
   19f16:	e07d      	b.n	1a014 <__aeabi_dadd+0x3fc>
   19f18:	2040      	movs	r0, #64	; 0x40
   19f1a:	1b45      	subs	r5, r0, r5
   19f1c:	40a9      	lsls	r1, r5
   19f1e:	430a      	orrs	r2, r1
   19f20:	1e51      	subs	r1, r2, #1
   19f22:	418a      	sbcs	r2, r1
   19f24:	2100      	movs	r1, #0
   19f26:	431a      	orrs	r2, r3
   19f28:	e6c7      	b.n	19cba <__aeabi_dadd+0xa2>
   19f2a:	2e00      	cmp	r6, #0
   19f2c:	d050      	beq.n	19fd0 <__aeabi_dadd+0x3b8>
   19f2e:	4e1a      	ldr	r6, [pc, #104]	; (19f98 <__aeabi_dadd+0x380>)
   19f30:	42b0      	cmp	r0, r6
   19f32:	d057      	beq.n	19fe4 <__aeabi_dadd+0x3cc>
   19f34:	2680      	movs	r6, #128	; 0x80
   19f36:	426b      	negs	r3, r5
   19f38:	4699      	mov	r9, r3
   19f3a:	0436      	lsls	r6, r6, #16
   19f3c:	4334      	orrs	r4, r6
   19f3e:	464b      	mov	r3, r9
   19f40:	2b38      	cmp	r3, #56	; 0x38
   19f42:	dd00      	ble.n	19f46 <__aeabi_dadd+0x32e>
   19f44:	e0d6      	b.n	1a0f4 <__aeabi_dadd+0x4dc>
   19f46:	2b1f      	cmp	r3, #31
   19f48:	dd00      	ble.n	19f4c <__aeabi_dadd+0x334>
   19f4a:	e135      	b.n	1a1b8 <__aeabi_dadd+0x5a0>
   19f4c:	2620      	movs	r6, #32
   19f4e:	1af5      	subs	r5, r6, r3
   19f50:	0026      	movs	r6, r4
   19f52:	40ae      	lsls	r6, r5
   19f54:	46b2      	mov	sl, r6
   19f56:	003e      	movs	r6, r7
   19f58:	40de      	lsrs	r6, r3
   19f5a:	46ac      	mov	ip, r5
   19f5c:	0035      	movs	r5, r6
   19f5e:	4656      	mov	r6, sl
   19f60:	432e      	orrs	r6, r5
   19f62:	4665      	mov	r5, ip
   19f64:	40af      	lsls	r7, r5
   19f66:	1e7d      	subs	r5, r7, #1
   19f68:	41af      	sbcs	r7, r5
   19f6a:	40dc      	lsrs	r4, r3
   19f6c:	4337      	orrs	r7, r6
   19f6e:	1bd7      	subs	r7, r2, r7
   19f70:	42ba      	cmp	r2, r7
   19f72:	4192      	sbcs	r2, r2
   19f74:	1b0c      	subs	r4, r1, r4
   19f76:	4252      	negs	r2, r2
   19f78:	1aa4      	subs	r4, r4, r2
   19f7a:	0006      	movs	r6, r0
   19f7c:	46d8      	mov	r8, fp
   19f7e:	e6a3      	b.n	19cc8 <__aeabi_dadd+0xb0>
   19f80:	4664      	mov	r4, ip
   19f82:	4667      	mov	r7, ip
   19f84:	432c      	orrs	r4, r5
   19f86:	d000      	beq.n	19f8a <__aeabi_dadd+0x372>
   19f88:	e6a2      	b.n	19cd0 <__aeabi_dadd+0xb8>
   19f8a:	2500      	movs	r5, #0
   19f8c:	2600      	movs	r6, #0
   19f8e:	2700      	movs	r7, #0
   19f90:	e706      	b.n	19da0 <__aeabi_dadd+0x188>
   19f92:	001e      	movs	r6, r3
   19f94:	e6c4      	b.n	19d20 <__aeabi_dadd+0x108>
   19f96:	46c0      	nop			; (mov r8, r8)
   19f98:	000007ff 	.word	0x000007ff
   19f9c:	ff7fffff 	.word	0xff7fffff
   19fa0:	800fffff 	.word	0x800fffff
   19fa4:	2b1f      	cmp	r3, #31
   19fa6:	dc63      	bgt.n	1a070 <__aeabi_dadd+0x458>
   19fa8:	2020      	movs	r0, #32
   19faa:	1ac3      	subs	r3, r0, r3
   19fac:	0008      	movs	r0, r1
   19fae:	4098      	lsls	r0, r3
   19fb0:	469c      	mov	ip, r3
   19fb2:	4683      	mov	fp, r0
   19fb4:	4653      	mov	r3, sl
   19fb6:	0010      	movs	r0, r2
   19fb8:	40d8      	lsrs	r0, r3
   19fba:	0003      	movs	r3, r0
   19fbc:	4658      	mov	r0, fp
   19fbe:	4318      	orrs	r0, r3
   19fc0:	4663      	mov	r3, ip
   19fc2:	409a      	lsls	r2, r3
   19fc4:	1e53      	subs	r3, r2, #1
   19fc6:	419a      	sbcs	r2, r3
   19fc8:	4653      	mov	r3, sl
   19fca:	4302      	orrs	r2, r0
   19fcc:	40d9      	lsrs	r1, r3
   19fce:	e703      	b.n	19dd8 <__aeabi_dadd+0x1c0>
   19fd0:	0026      	movs	r6, r4
   19fd2:	433e      	orrs	r6, r7
   19fd4:	d006      	beq.n	19fe4 <__aeabi_dadd+0x3cc>
   19fd6:	43eb      	mvns	r3, r5
   19fd8:	4699      	mov	r9, r3
   19fda:	2b00      	cmp	r3, #0
   19fdc:	d0c7      	beq.n	19f6e <__aeabi_dadd+0x356>
   19fde:	4e94      	ldr	r6, [pc, #592]	; (1a230 <__aeabi_dadd+0x618>)
   19fe0:	42b0      	cmp	r0, r6
   19fe2:	d1ac      	bne.n	19f3e <__aeabi_dadd+0x326>
   19fe4:	000c      	movs	r4, r1
   19fe6:	0017      	movs	r7, r2
   19fe8:	0006      	movs	r6, r0
   19fea:	46d8      	mov	r8, fp
   19fec:	e698      	b.n	19d20 <__aeabi_dadd+0x108>
   19fee:	4b90      	ldr	r3, [pc, #576]	; (1a230 <__aeabi_dadd+0x618>)
   19ff0:	459a      	cmp	sl, r3
   19ff2:	d00b      	beq.n	1a00c <__aeabi_dadd+0x3f4>
   19ff4:	4682      	mov	sl, r0
   19ff6:	e6e7      	b.n	19dc8 <__aeabi_dadd+0x1b0>
   19ff8:	2800      	cmp	r0, #0
   19ffa:	d000      	beq.n	19ffe <__aeabi_dadd+0x3e6>
   19ffc:	e09e      	b.n	1a13c <__aeabi_dadd+0x524>
   19ffe:	0018      	movs	r0, r3
   1a000:	4310      	orrs	r0, r2
   1a002:	d100      	bne.n	1a006 <__aeabi_dadd+0x3ee>
   1a004:	e0e9      	b.n	1a1da <__aeabi_dadd+0x5c2>
   1a006:	001c      	movs	r4, r3
   1a008:	0017      	movs	r7, r2
   1a00a:	46d8      	mov	r8, fp
   1a00c:	4e88      	ldr	r6, [pc, #544]	; (1a230 <__aeabi_dadd+0x618>)
   1a00e:	e687      	b.n	19d20 <__aeabi_dadd+0x108>
   1a010:	2500      	movs	r5, #0
   1a012:	e772      	b.n	19efa <__aeabi_dadd+0x2e2>
   1a014:	2100      	movs	r1, #0
   1a016:	e782      	b.n	19f1e <__aeabi_dadd+0x306>
   1a018:	0023      	movs	r3, r4
   1a01a:	433b      	orrs	r3, r7
   1a01c:	2e00      	cmp	r6, #0
   1a01e:	d000      	beq.n	1a022 <__aeabi_dadd+0x40a>
   1a020:	e0ab      	b.n	1a17a <__aeabi_dadd+0x562>
   1a022:	2b00      	cmp	r3, #0
   1a024:	d100      	bne.n	1a028 <__aeabi_dadd+0x410>
   1a026:	e0e7      	b.n	1a1f8 <__aeabi_dadd+0x5e0>
   1a028:	000b      	movs	r3, r1
   1a02a:	4313      	orrs	r3, r2
   1a02c:	d100      	bne.n	1a030 <__aeabi_dadd+0x418>
   1a02e:	e677      	b.n	19d20 <__aeabi_dadd+0x108>
   1a030:	18ba      	adds	r2, r7, r2
   1a032:	42ba      	cmp	r2, r7
   1a034:	41bf      	sbcs	r7, r7
   1a036:	1864      	adds	r4, r4, r1
   1a038:	427f      	negs	r7, r7
   1a03a:	19e4      	adds	r4, r4, r7
   1a03c:	0223      	lsls	r3, r4, #8
   1a03e:	d400      	bmi.n	1a042 <__aeabi_dadd+0x42a>
   1a040:	e0f2      	b.n	1a228 <__aeabi_dadd+0x610>
   1a042:	4b7c      	ldr	r3, [pc, #496]	; (1a234 <__aeabi_dadd+0x61c>)
   1a044:	0017      	movs	r7, r2
   1a046:	401c      	ands	r4, r3
   1a048:	0006      	movs	r6, r0
   1a04a:	e669      	b.n	19d20 <__aeabi_dadd+0x108>
   1a04c:	0020      	movs	r0, r4
   1a04e:	4338      	orrs	r0, r7
   1a050:	2e00      	cmp	r6, #0
   1a052:	d1d1      	bne.n	19ff8 <__aeabi_dadd+0x3e0>
   1a054:	2800      	cmp	r0, #0
   1a056:	d15b      	bne.n	1a110 <__aeabi_dadd+0x4f8>
   1a058:	001c      	movs	r4, r3
   1a05a:	4314      	orrs	r4, r2
   1a05c:	d100      	bne.n	1a060 <__aeabi_dadd+0x448>
   1a05e:	e0a8      	b.n	1a1b2 <__aeabi_dadd+0x59a>
   1a060:	001c      	movs	r4, r3
   1a062:	0017      	movs	r7, r2
   1a064:	46d8      	mov	r8, fp
   1a066:	e65b      	b.n	19d20 <__aeabi_dadd+0x108>
   1a068:	0006      	movs	r6, r0
   1a06a:	2400      	movs	r4, #0
   1a06c:	2700      	movs	r7, #0
   1a06e:	e697      	b.n	19da0 <__aeabi_dadd+0x188>
   1a070:	4650      	mov	r0, sl
   1a072:	000b      	movs	r3, r1
   1a074:	3820      	subs	r0, #32
   1a076:	40c3      	lsrs	r3, r0
   1a078:	4699      	mov	r9, r3
   1a07a:	4653      	mov	r3, sl
   1a07c:	2b20      	cmp	r3, #32
   1a07e:	d100      	bne.n	1a082 <__aeabi_dadd+0x46a>
   1a080:	e095      	b.n	1a1ae <__aeabi_dadd+0x596>
   1a082:	2340      	movs	r3, #64	; 0x40
   1a084:	4650      	mov	r0, sl
   1a086:	1a1b      	subs	r3, r3, r0
   1a088:	4099      	lsls	r1, r3
   1a08a:	430a      	orrs	r2, r1
   1a08c:	1e51      	subs	r1, r2, #1
   1a08e:	418a      	sbcs	r2, r1
   1a090:	464b      	mov	r3, r9
   1a092:	2100      	movs	r1, #0
   1a094:	431a      	orrs	r2, r3
   1a096:	e69f      	b.n	19dd8 <__aeabi_dadd+0x1c0>
   1a098:	2e00      	cmp	r6, #0
   1a09a:	d130      	bne.n	1a0fe <__aeabi_dadd+0x4e6>
   1a09c:	0026      	movs	r6, r4
   1a09e:	433e      	orrs	r6, r7
   1a0a0:	d067      	beq.n	1a172 <__aeabi_dadd+0x55a>
   1a0a2:	43db      	mvns	r3, r3
   1a0a4:	469a      	mov	sl, r3
   1a0a6:	2b00      	cmp	r3, #0
   1a0a8:	d01c      	beq.n	1a0e4 <__aeabi_dadd+0x4cc>
   1a0aa:	4e61      	ldr	r6, [pc, #388]	; (1a230 <__aeabi_dadd+0x618>)
   1a0ac:	42b0      	cmp	r0, r6
   1a0ae:	d060      	beq.n	1a172 <__aeabi_dadd+0x55a>
   1a0b0:	4653      	mov	r3, sl
   1a0b2:	2b38      	cmp	r3, #56	; 0x38
   1a0b4:	dd00      	ble.n	1a0b8 <__aeabi_dadd+0x4a0>
   1a0b6:	e096      	b.n	1a1e6 <__aeabi_dadd+0x5ce>
   1a0b8:	2b1f      	cmp	r3, #31
   1a0ba:	dd00      	ble.n	1a0be <__aeabi_dadd+0x4a6>
   1a0bc:	e09f      	b.n	1a1fe <__aeabi_dadd+0x5e6>
   1a0be:	2620      	movs	r6, #32
   1a0c0:	1af3      	subs	r3, r6, r3
   1a0c2:	0026      	movs	r6, r4
   1a0c4:	409e      	lsls	r6, r3
   1a0c6:	469c      	mov	ip, r3
   1a0c8:	46b3      	mov	fp, r6
   1a0ca:	4653      	mov	r3, sl
   1a0cc:	003e      	movs	r6, r7
   1a0ce:	40de      	lsrs	r6, r3
   1a0d0:	0033      	movs	r3, r6
   1a0d2:	465e      	mov	r6, fp
   1a0d4:	431e      	orrs	r6, r3
   1a0d6:	4663      	mov	r3, ip
   1a0d8:	409f      	lsls	r7, r3
   1a0da:	1e7b      	subs	r3, r7, #1
   1a0dc:	419f      	sbcs	r7, r3
   1a0de:	4653      	mov	r3, sl
   1a0e0:	40dc      	lsrs	r4, r3
   1a0e2:	4337      	orrs	r7, r6
   1a0e4:	18bf      	adds	r7, r7, r2
   1a0e6:	4297      	cmp	r7, r2
   1a0e8:	4192      	sbcs	r2, r2
   1a0ea:	1864      	adds	r4, r4, r1
   1a0ec:	4252      	negs	r2, r2
   1a0ee:	18a4      	adds	r4, r4, r2
   1a0f0:	0006      	movs	r6, r0
   1a0f2:	e678      	b.n	19de6 <__aeabi_dadd+0x1ce>
   1a0f4:	4327      	orrs	r7, r4
   1a0f6:	1e7c      	subs	r4, r7, #1
   1a0f8:	41a7      	sbcs	r7, r4
   1a0fa:	2400      	movs	r4, #0
   1a0fc:	e737      	b.n	19f6e <__aeabi_dadd+0x356>
   1a0fe:	4e4c      	ldr	r6, [pc, #304]	; (1a230 <__aeabi_dadd+0x618>)
   1a100:	42b0      	cmp	r0, r6
   1a102:	d036      	beq.n	1a172 <__aeabi_dadd+0x55a>
   1a104:	2680      	movs	r6, #128	; 0x80
   1a106:	425b      	negs	r3, r3
   1a108:	0436      	lsls	r6, r6, #16
   1a10a:	469a      	mov	sl, r3
   1a10c:	4334      	orrs	r4, r6
   1a10e:	e7cf      	b.n	1a0b0 <__aeabi_dadd+0x498>
   1a110:	0018      	movs	r0, r3
   1a112:	4310      	orrs	r0, r2
   1a114:	d100      	bne.n	1a118 <__aeabi_dadd+0x500>
   1a116:	e603      	b.n	19d20 <__aeabi_dadd+0x108>
   1a118:	1ab8      	subs	r0, r7, r2
   1a11a:	4684      	mov	ip, r0
   1a11c:	4567      	cmp	r7, ip
   1a11e:	41ad      	sbcs	r5, r5
   1a120:	1ae0      	subs	r0, r4, r3
   1a122:	426d      	negs	r5, r5
   1a124:	1b40      	subs	r0, r0, r5
   1a126:	0205      	lsls	r5, r0, #8
   1a128:	d400      	bmi.n	1a12c <__aeabi_dadd+0x514>
   1a12a:	e62c      	b.n	19d86 <__aeabi_dadd+0x16e>
   1a12c:	1bd7      	subs	r7, r2, r7
   1a12e:	42ba      	cmp	r2, r7
   1a130:	4192      	sbcs	r2, r2
   1a132:	1b1c      	subs	r4, r3, r4
   1a134:	4252      	negs	r2, r2
   1a136:	1aa4      	subs	r4, r4, r2
   1a138:	46d8      	mov	r8, fp
   1a13a:	e5f1      	b.n	19d20 <__aeabi_dadd+0x108>
   1a13c:	0018      	movs	r0, r3
   1a13e:	4310      	orrs	r0, r2
   1a140:	d100      	bne.n	1a144 <__aeabi_dadd+0x52c>
   1a142:	e763      	b.n	1a00c <__aeabi_dadd+0x3f4>
   1a144:	08f8      	lsrs	r0, r7, #3
   1a146:	0767      	lsls	r7, r4, #29
   1a148:	4307      	orrs	r7, r0
   1a14a:	2080      	movs	r0, #128	; 0x80
   1a14c:	08e4      	lsrs	r4, r4, #3
   1a14e:	0300      	lsls	r0, r0, #12
   1a150:	4204      	tst	r4, r0
   1a152:	d008      	beq.n	1a166 <__aeabi_dadd+0x54e>
   1a154:	08dd      	lsrs	r5, r3, #3
   1a156:	4205      	tst	r5, r0
   1a158:	d105      	bne.n	1a166 <__aeabi_dadd+0x54e>
   1a15a:	08d2      	lsrs	r2, r2, #3
   1a15c:	0759      	lsls	r1, r3, #29
   1a15e:	4311      	orrs	r1, r2
   1a160:	000f      	movs	r7, r1
   1a162:	002c      	movs	r4, r5
   1a164:	46d8      	mov	r8, fp
   1a166:	0f7b      	lsrs	r3, r7, #29
   1a168:	00e4      	lsls	r4, r4, #3
   1a16a:	431c      	orrs	r4, r3
   1a16c:	00ff      	lsls	r7, r7, #3
   1a16e:	4e30      	ldr	r6, [pc, #192]	; (1a230 <__aeabi_dadd+0x618>)
   1a170:	e5d6      	b.n	19d20 <__aeabi_dadd+0x108>
   1a172:	000c      	movs	r4, r1
   1a174:	0017      	movs	r7, r2
   1a176:	0006      	movs	r6, r0
   1a178:	e5d2      	b.n	19d20 <__aeabi_dadd+0x108>
   1a17a:	2b00      	cmp	r3, #0
   1a17c:	d038      	beq.n	1a1f0 <__aeabi_dadd+0x5d8>
   1a17e:	000b      	movs	r3, r1
   1a180:	4313      	orrs	r3, r2
   1a182:	d100      	bne.n	1a186 <__aeabi_dadd+0x56e>
   1a184:	e742      	b.n	1a00c <__aeabi_dadd+0x3f4>
   1a186:	08f8      	lsrs	r0, r7, #3
   1a188:	0767      	lsls	r7, r4, #29
   1a18a:	4307      	orrs	r7, r0
   1a18c:	2080      	movs	r0, #128	; 0x80
   1a18e:	08e4      	lsrs	r4, r4, #3
   1a190:	0300      	lsls	r0, r0, #12
   1a192:	4204      	tst	r4, r0
   1a194:	d0e7      	beq.n	1a166 <__aeabi_dadd+0x54e>
   1a196:	08cb      	lsrs	r3, r1, #3
   1a198:	4203      	tst	r3, r0
   1a19a:	d1e4      	bne.n	1a166 <__aeabi_dadd+0x54e>
   1a19c:	08d2      	lsrs	r2, r2, #3
   1a19e:	0749      	lsls	r1, r1, #29
   1a1a0:	4311      	orrs	r1, r2
   1a1a2:	000f      	movs	r7, r1
   1a1a4:	001c      	movs	r4, r3
   1a1a6:	e7de      	b.n	1a166 <__aeabi_dadd+0x54e>
   1a1a8:	2700      	movs	r7, #0
   1a1aa:	2400      	movs	r4, #0
   1a1ac:	e5d5      	b.n	19d5a <__aeabi_dadd+0x142>
   1a1ae:	2100      	movs	r1, #0
   1a1b0:	e76b      	b.n	1a08a <__aeabi_dadd+0x472>
   1a1b2:	2500      	movs	r5, #0
   1a1b4:	2700      	movs	r7, #0
   1a1b6:	e5f3      	b.n	19da0 <__aeabi_dadd+0x188>
   1a1b8:	464e      	mov	r6, r9
   1a1ba:	0025      	movs	r5, r4
   1a1bc:	3e20      	subs	r6, #32
   1a1be:	40f5      	lsrs	r5, r6
   1a1c0:	464b      	mov	r3, r9
   1a1c2:	002e      	movs	r6, r5
   1a1c4:	2b20      	cmp	r3, #32
   1a1c6:	d02d      	beq.n	1a224 <__aeabi_dadd+0x60c>
   1a1c8:	2540      	movs	r5, #64	; 0x40
   1a1ca:	1aed      	subs	r5, r5, r3
   1a1cc:	40ac      	lsls	r4, r5
   1a1ce:	4327      	orrs	r7, r4
   1a1d0:	1e7c      	subs	r4, r7, #1
   1a1d2:	41a7      	sbcs	r7, r4
   1a1d4:	2400      	movs	r4, #0
   1a1d6:	4337      	orrs	r7, r6
   1a1d8:	e6c9      	b.n	19f6e <__aeabi_dadd+0x356>
   1a1da:	2480      	movs	r4, #128	; 0x80
   1a1dc:	2500      	movs	r5, #0
   1a1de:	0324      	lsls	r4, r4, #12
   1a1e0:	4e13      	ldr	r6, [pc, #76]	; (1a230 <__aeabi_dadd+0x618>)
   1a1e2:	2700      	movs	r7, #0
   1a1e4:	e5dc      	b.n	19da0 <__aeabi_dadd+0x188>
   1a1e6:	4327      	orrs	r7, r4
   1a1e8:	1e7c      	subs	r4, r7, #1
   1a1ea:	41a7      	sbcs	r7, r4
   1a1ec:	2400      	movs	r4, #0
   1a1ee:	e779      	b.n	1a0e4 <__aeabi_dadd+0x4cc>
   1a1f0:	000c      	movs	r4, r1
   1a1f2:	0017      	movs	r7, r2
   1a1f4:	4e0e      	ldr	r6, [pc, #56]	; (1a230 <__aeabi_dadd+0x618>)
   1a1f6:	e593      	b.n	19d20 <__aeabi_dadd+0x108>
   1a1f8:	000c      	movs	r4, r1
   1a1fa:	0017      	movs	r7, r2
   1a1fc:	e590      	b.n	19d20 <__aeabi_dadd+0x108>
   1a1fe:	4656      	mov	r6, sl
   1a200:	0023      	movs	r3, r4
   1a202:	3e20      	subs	r6, #32
   1a204:	40f3      	lsrs	r3, r6
   1a206:	4699      	mov	r9, r3
   1a208:	4653      	mov	r3, sl
   1a20a:	2b20      	cmp	r3, #32
   1a20c:	d00e      	beq.n	1a22c <__aeabi_dadd+0x614>
   1a20e:	2340      	movs	r3, #64	; 0x40
   1a210:	4656      	mov	r6, sl
   1a212:	1b9b      	subs	r3, r3, r6
   1a214:	409c      	lsls	r4, r3
   1a216:	4327      	orrs	r7, r4
   1a218:	1e7c      	subs	r4, r7, #1
   1a21a:	41a7      	sbcs	r7, r4
   1a21c:	464b      	mov	r3, r9
   1a21e:	2400      	movs	r4, #0
   1a220:	431f      	orrs	r7, r3
   1a222:	e75f      	b.n	1a0e4 <__aeabi_dadd+0x4cc>
   1a224:	2400      	movs	r4, #0
   1a226:	e7d2      	b.n	1a1ce <__aeabi_dadd+0x5b6>
   1a228:	0017      	movs	r7, r2
   1a22a:	e5b2      	b.n	19d92 <__aeabi_dadd+0x17a>
   1a22c:	2400      	movs	r4, #0
   1a22e:	e7f2      	b.n	1a216 <__aeabi_dadd+0x5fe>
   1a230:	000007ff 	.word	0x000007ff
   1a234:	ff7fffff 	.word	0xff7fffff

0001a238 <__aeabi_ddiv>:
   1a238:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a23a:	4657      	mov	r7, sl
   1a23c:	4645      	mov	r5, r8
   1a23e:	46de      	mov	lr, fp
   1a240:	464e      	mov	r6, r9
   1a242:	b5e0      	push	{r5, r6, r7, lr}
   1a244:	004c      	lsls	r4, r1, #1
   1a246:	030e      	lsls	r6, r1, #12
   1a248:	b087      	sub	sp, #28
   1a24a:	4683      	mov	fp, r0
   1a24c:	4692      	mov	sl, r2
   1a24e:	001d      	movs	r5, r3
   1a250:	4680      	mov	r8, r0
   1a252:	0b36      	lsrs	r6, r6, #12
   1a254:	0d64      	lsrs	r4, r4, #21
   1a256:	0fcf      	lsrs	r7, r1, #31
   1a258:	2c00      	cmp	r4, #0
   1a25a:	d04f      	beq.n	1a2fc <__aeabi_ddiv+0xc4>
   1a25c:	4b6f      	ldr	r3, [pc, #444]	; (1a41c <__aeabi_ddiv+0x1e4>)
   1a25e:	429c      	cmp	r4, r3
   1a260:	d035      	beq.n	1a2ce <__aeabi_ddiv+0x96>
   1a262:	2380      	movs	r3, #128	; 0x80
   1a264:	0f42      	lsrs	r2, r0, #29
   1a266:	041b      	lsls	r3, r3, #16
   1a268:	00f6      	lsls	r6, r6, #3
   1a26a:	4313      	orrs	r3, r2
   1a26c:	4333      	orrs	r3, r6
   1a26e:	4699      	mov	r9, r3
   1a270:	00c3      	lsls	r3, r0, #3
   1a272:	4698      	mov	r8, r3
   1a274:	4b6a      	ldr	r3, [pc, #424]	; (1a420 <__aeabi_ddiv+0x1e8>)
   1a276:	2600      	movs	r6, #0
   1a278:	469c      	mov	ip, r3
   1a27a:	2300      	movs	r3, #0
   1a27c:	4464      	add	r4, ip
   1a27e:	9303      	str	r3, [sp, #12]
   1a280:	032b      	lsls	r3, r5, #12
   1a282:	0b1b      	lsrs	r3, r3, #12
   1a284:	469b      	mov	fp, r3
   1a286:	006b      	lsls	r3, r5, #1
   1a288:	0fed      	lsrs	r5, r5, #31
   1a28a:	4650      	mov	r0, sl
   1a28c:	0d5b      	lsrs	r3, r3, #21
   1a28e:	9501      	str	r5, [sp, #4]
   1a290:	d05e      	beq.n	1a350 <__aeabi_ddiv+0x118>
   1a292:	4a62      	ldr	r2, [pc, #392]	; (1a41c <__aeabi_ddiv+0x1e4>)
   1a294:	4293      	cmp	r3, r2
   1a296:	d053      	beq.n	1a340 <__aeabi_ddiv+0x108>
   1a298:	465a      	mov	r2, fp
   1a29a:	00d1      	lsls	r1, r2, #3
   1a29c:	2280      	movs	r2, #128	; 0x80
   1a29e:	0f40      	lsrs	r0, r0, #29
   1a2a0:	0412      	lsls	r2, r2, #16
   1a2a2:	4302      	orrs	r2, r0
   1a2a4:	430a      	orrs	r2, r1
   1a2a6:	4693      	mov	fp, r2
   1a2a8:	4652      	mov	r2, sl
   1a2aa:	00d1      	lsls	r1, r2, #3
   1a2ac:	4a5c      	ldr	r2, [pc, #368]	; (1a420 <__aeabi_ddiv+0x1e8>)
   1a2ae:	4694      	mov	ip, r2
   1a2b0:	2200      	movs	r2, #0
   1a2b2:	4463      	add	r3, ip
   1a2b4:	0038      	movs	r0, r7
   1a2b6:	4068      	eors	r0, r5
   1a2b8:	4684      	mov	ip, r0
   1a2ba:	9002      	str	r0, [sp, #8]
   1a2bc:	1ae4      	subs	r4, r4, r3
   1a2be:	4316      	orrs	r6, r2
   1a2c0:	2e0f      	cmp	r6, #15
   1a2c2:	d900      	bls.n	1a2c6 <__aeabi_ddiv+0x8e>
   1a2c4:	e0b4      	b.n	1a430 <__aeabi_ddiv+0x1f8>
   1a2c6:	4b57      	ldr	r3, [pc, #348]	; (1a424 <__aeabi_ddiv+0x1ec>)
   1a2c8:	00b6      	lsls	r6, r6, #2
   1a2ca:	599b      	ldr	r3, [r3, r6]
   1a2cc:	469f      	mov	pc, r3
   1a2ce:	0003      	movs	r3, r0
   1a2d0:	4333      	orrs	r3, r6
   1a2d2:	4699      	mov	r9, r3
   1a2d4:	d16c      	bne.n	1a3b0 <__aeabi_ddiv+0x178>
   1a2d6:	2300      	movs	r3, #0
   1a2d8:	4698      	mov	r8, r3
   1a2da:	3302      	adds	r3, #2
   1a2dc:	2608      	movs	r6, #8
   1a2de:	9303      	str	r3, [sp, #12]
   1a2e0:	e7ce      	b.n	1a280 <__aeabi_ddiv+0x48>
   1a2e2:	46cb      	mov	fp, r9
   1a2e4:	4641      	mov	r1, r8
   1a2e6:	9a03      	ldr	r2, [sp, #12]
   1a2e8:	9701      	str	r7, [sp, #4]
   1a2ea:	2a02      	cmp	r2, #2
   1a2ec:	d165      	bne.n	1a3ba <__aeabi_ddiv+0x182>
   1a2ee:	9b01      	ldr	r3, [sp, #4]
   1a2f0:	4c4a      	ldr	r4, [pc, #296]	; (1a41c <__aeabi_ddiv+0x1e4>)
   1a2f2:	469c      	mov	ip, r3
   1a2f4:	2300      	movs	r3, #0
   1a2f6:	2200      	movs	r2, #0
   1a2f8:	4698      	mov	r8, r3
   1a2fa:	e06b      	b.n	1a3d4 <__aeabi_ddiv+0x19c>
   1a2fc:	0003      	movs	r3, r0
   1a2fe:	4333      	orrs	r3, r6
   1a300:	4699      	mov	r9, r3
   1a302:	d04e      	beq.n	1a3a2 <__aeabi_ddiv+0x16a>
   1a304:	2e00      	cmp	r6, #0
   1a306:	d100      	bne.n	1a30a <__aeabi_ddiv+0xd2>
   1a308:	e1bc      	b.n	1a684 <__aeabi_ddiv+0x44c>
   1a30a:	0030      	movs	r0, r6
   1a30c:	f001 f8ca 	bl	1b4a4 <__clzsi2>
   1a310:	0003      	movs	r3, r0
   1a312:	3b0b      	subs	r3, #11
   1a314:	2b1c      	cmp	r3, #28
   1a316:	dd00      	ble.n	1a31a <__aeabi_ddiv+0xe2>
   1a318:	e1ac      	b.n	1a674 <__aeabi_ddiv+0x43c>
   1a31a:	221d      	movs	r2, #29
   1a31c:	1ad3      	subs	r3, r2, r3
   1a31e:	465a      	mov	r2, fp
   1a320:	0001      	movs	r1, r0
   1a322:	40da      	lsrs	r2, r3
   1a324:	3908      	subs	r1, #8
   1a326:	408e      	lsls	r6, r1
   1a328:	0013      	movs	r3, r2
   1a32a:	4333      	orrs	r3, r6
   1a32c:	4699      	mov	r9, r3
   1a32e:	465b      	mov	r3, fp
   1a330:	408b      	lsls	r3, r1
   1a332:	4698      	mov	r8, r3
   1a334:	2300      	movs	r3, #0
   1a336:	4c3c      	ldr	r4, [pc, #240]	; (1a428 <__aeabi_ddiv+0x1f0>)
   1a338:	2600      	movs	r6, #0
   1a33a:	1a24      	subs	r4, r4, r0
   1a33c:	9303      	str	r3, [sp, #12]
   1a33e:	e79f      	b.n	1a280 <__aeabi_ddiv+0x48>
   1a340:	4651      	mov	r1, sl
   1a342:	465a      	mov	r2, fp
   1a344:	4311      	orrs	r1, r2
   1a346:	d129      	bne.n	1a39c <__aeabi_ddiv+0x164>
   1a348:	2200      	movs	r2, #0
   1a34a:	4693      	mov	fp, r2
   1a34c:	3202      	adds	r2, #2
   1a34e:	e7b1      	b.n	1a2b4 <__aeabi_ddiv+0x7c>
   1a350:	4659      	mov	r1, fp
   1a352:	4301      	orrs	r1, r0
   1a354:	d01e      	beq.n	1a394 <__aeabi_ddiv+0x15c>
   1a356:	465b      	mov	r3, fp
   1a358:	2b00      	cmp	r3, #0
   1a35a:	d100      	bne.n	1a35e <__aeabi_ddiv+0x126>
   1a35c:	e19e      	b.n	1a69c <__aeabi_ddiv+0x464>
   1a35e:	4658      	mov	r0, fp
   1a360:	f001 f8a0 	bl	1b4a4 <__clzsi2>
   1a364:	0003      	movs	r3, r0
   1a366:	3b0b      	subs	r3, #11
   1a368:	2b1c      	cmp	r3, #28
   1a36a:	dd00      	ble.n	1a36e <__aeabi_ddiv+0x136>
   1a36c:	e18f      	b.n	1a68e <__aeabi_ddiv+0x456>
   1a36e:	0002      	movs	r2, r0
   1a370:	4659      	mov	r1, fp
   1a372:	3a08      	subs	r2, #8
   1a374:	4091      	lsls	r1, r2
   1a376:	468b      	mov	fp, r1
   1a378:	211d      	movs	r1, #29
   1a37a:	1acb      	subs	r3, r1, r3
   1a37c:	4651      	mov	r1, sl
   1a37e:	40d9      	lsrs	r1, r3
   1a380:	000b      	movs	r3, r1
   1a382:	4659      	mov	r1, fp
   1a384:	430b      	orrs	r3, r1
   1a386:	4651      	mov	r1, sl
   1a388:	469b      	mov	fp, r3
   1a38a:	4091      	lsls	r1, r2
   1a38c:	4b26      	ldr	r3, [pc, #152]	; (1a428 <__aeabi_ddiv+0x1f0>)
   1a38e:	2200      	movs	r2, #0
   1a390:	1a1b      	subs	r3, r3, r0
   1a392:	e78f      	b.n	1a2b4 <__aeabi_ddiv+0x7c>
   1a394:	2300      	movs	r3, #0
   1a396:	2201      	movs	r2, #1
   1a398:	469b      	mov	fp, r3
   1a39a:	e78b      	b.n	1a2b4 <__aeabi_ddiv+0x7c>
   1a39c:	4651      	mov	r1, sl
   1a39e:	2203      	movs	r2, #3
   1a3a0:	e788      	b.n	1a2b4 <__aeabi_ddiv+0x7c>
   1a3a2:	2300      	movs	r3, #0
   1a3a4:	4698      	mov	r8, r3
   1a3a6:	3301      	adds	r3, #1
   1a3a8:	2604      	movs	r6, #4
   1a3aa:	2400      	movs	r4, #0
   1a3ac:	9303      	str	r3, [sp, #12]
   1a3ae:	e767      	b.n	1a280 <__aeabi_ddiv+0x48>
   1a3b0:	2303      	movs	r3, #3
   1a3b2:	46b1      	mov	r9, r6
   1a3b4:	9303      	str	r3, [sp, #12]
   1a3b6:	260c      	movs	r6, #12
   1a3b8:	e762      	b.n	1a280 <__aeabi_ddiv+0x48>
   1a3ba:	2a03      	cmp	r2, #3
   1a3bc:	d100      	bne.n	1a3c0 <__aeabi_ddiv+0x188>
   1a3be:	e25c      	b.n	1a87a <__aeabi_ddiv+0x642>
   1a3c0:	9b01      	ldr	r3, [sp, #4]
   1a3c2:	2a01      	cmp	r2, #1
   1a3c4:	d000      	beq.n	1a3c8 <__aeabi_ddiv+0x190>
   1a3c6:	e1e4      	b.n	1a792 <__aeabi_ddiv+0x55a>
   1a3c8:	4013      	ands	r3, r2
   1a3ca:	469c      	mov	ip, r3
   1a3cc:	2300      	movs	r3, #0
   1a3ce:	2400      	movs	r4, #0
   1a3d0:	2200      	movs	r2, #0
   1a3d2:	4698      	mov	r8, r3
   1a3d4:	2100      	movs	r1, #0
   1a3d6:	0312      	lsls	r2, r2, #12
   1a3d8:	0b13      	lsrs	r3, r2, #12
   1a3da:	0d0a      	lsrs	r2, r1, #20
   1a3dc:	0512      	lsls	r2, r2, #20
   1a3de:	431a      	orrs	r2, r3
   1a3e0:	0523      	lsls	r3, r4, #20
   1a3e2:	4c12      	ldr	r4, [pc, #72]	; (1a42c <__aeabi_ddiv+0x1f4>)
   1a3e4:	4640      	mov	r0, r8
   1a3e6:	4022      	ands	r2, r4
   1a3e8:	4313      	orrs	r3, r2
   1a3ea:	4662      	mov	r2, ip
   1a3ec:	005b      	lsls	r3, r3, #1
   1a3ee:	07d2      	lsls	r2, r2, #31
   1a3f0:	085b      	lsrs	r3, r3, #1
   1a3f2:	4313      	orrs	r3, r2
   1a3f4:	0019      	movs	r1, r3
   1a3f6:	b007      	add	sp, #28
   1a3f8:	bc3c      	pop	{r2, r3, r4, r5}
   1a3fa:	4690      	mov	r8, r2
   1a3fc:	4699      	mov	r9, r3
   1a3fe:	46a2      	mov	sl, r4
   1a400:	46ab      	mov	fp, r5
   1a402:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a404:	2300      	movs	r3, #0
   1a406:	2280      	movs	r2, #128	; 0x80
   1a408:	469c      	mov	ip, r3
   1a40a:	0312      	lsls	r2, r2, #12
   1a40c:	4698      	mov	r8, r3
   1a40e:	4c03      	ldr	r4, [pc, #12]	; (1a41c <__aeabi_ddiv+0x1e4>)
   1a410:	e7e0      	b.n	1a3d4 <__aeabi_ddiv+0x19c>
   1a412:	2300      	movs	r3, #0
   1a414:	4c01      	ldr	r4, [pc, #4]	; (1a41c <__aeabi_ddiv+0x1e4>)
   1a416:	2200      	movs	r2, #0
   1a418:	4698      	mov	r8, r3
   1a41a:	e7db      	b.n	1a3d4 <__aeabi_ddiv+0x19c>
   1a41c:	000007ff 	.word	0x000007ff
   1a420:	fffffc01 	.word	0xfffffc01
   1a424:	0001c17c 	.word	0x0001c17c
   1a428:	fffffc0d 	.word	0xfffffc0d
   1a42c:	800fffff 	.word	0x800fffff
   1a430:	45d9      	cmp	r9, fp
   1a432:	d900      	bls.n	1a436 <__aeabi_ddiv+0x1fe>
   1a434:	e139      	b.n	1a6aa <__aeabi_ddiv+0x472>
   1a436:	d100      	bne.n	1a43a <__aeabi_ddiv+0x202>
   1a438:	e134      	b.n	1a6a4 <__aeabi_ddiv+0x46c>
   1a43a:	2300      	movs	r3, #0
   1a43c:	4646      	mov	r6, r8
   1a43e:	464d      	mov	r5, r9
   1a440:	469a      	mov	sl, r3
   1a442:	3c01      	subs	r4, #1
   1a444:	465b      	mov	r3, fp
   1a446:	0e0a      	lsrs	r2, r1, #24
   1a448:	021b      	lsls	r3, r3, #8
   1a44a:	431a      	orrs	r2, r3
   1a44c:	020b      	lsls	r3, r1, #8
   1a44e:	0c17      	lsrs	r7, r2, #16
   1a450:	9303      	str	r3, [sp, #12]
   1a452:	0413      	lsls	r3, r2, #16
   1a454:	0c1b      	lsrs	r3, r3, #16
   1a456:	0039      	movs	r1, r7
   1a458:	0028      	movs	r0, r5
   1a45a:	4690      	mov	r8, r2
   1a45c:	9301      	str	r3, [sp, #4]
   1a45e:	f7ff fb25 	bl	19aac <__udivsi3>
   1a462:	0002      	movs	r2, r0
   1a464:	9b01      	ldr	r3, [sp, #4]
   1a466:	4683      	mov	fp, r0
   1a468:	435a      	muls	r2, r3
   1a46a:	0028      	movs	r0, r5
   1a46c:	0039      	movs	r1, r7
   1a46e:	4691      	mov	r9, r2
   1a470:	f7ff fba2 	bl	19bb8 <__aeabi_uidivmod>
   1a474:	0c35      	lsrs	r5, r6, #16
   1a476:	0409      	lsls	r1, r1, #16
   1a478:	430d      	orrs	r5, r1
   1a47a:	45a9      	cmp	r9, r5
   1a47c:	d90d      	bls.n	1a49a <__aeabi_ddiv+0x262>
   1a47e:	465b      	mov	r3, fp
   1a480:	4445      	add	r5, r8
   1a482:	3b01      	subs	r3, #1
   1a484:	45a8      	cmp	r8, r5
   1a486:	d900      	bls.n	1a48a <__aeabi_ddiv+0x252>
   1a488:	e13a      	b.n	1a700 <__aeabi_ddiv+0x4c8>
   1a48a:	45a9      	cmp	r9, r5
   1a48c:	d800      	bhi.n	1a490 <__aeabi_ddiv+0x258>
   1a48e:	e137      	b.n	1a700 <__aeabi_ddiv+0x4c8>
   1a490:	2302      	movs	r3, #2
   1a492:	425b      	negs	r3, r3
   1a494:	469c      	mov	ip, r3
   1a496:	4445      	add	r5, r8
   1a498:	44e3      	add	fp, ip
   1a49a:	464b      	mov	r3, r9
   1a49c:	1aeb      	subs	r3, r5, r3
   1a49e:	0039      	movs	r1, r7
   1a4a0:	0018      	movs	r0, r3
   1a4a2:	9304      	str	r3, [sp, #16]
   1a4a4:	f7ff fb02 	bl	19aac <__udivsi3>
   1a4a8:	9b01      	ldr	r3, [sp, #4]
   1a4aa:	0005      	movs	r5, r0
   1a4ac:	4343      	muls	r3, r0
   1a4ae:	0039      	movs	r1, r7
   1a4b0:	9804      	ldr	r0, [sp, #16]
   1a4b2:	4699      	mov	r9, r3
   1a4b4:	f7ff fb80 	bl	19bb8 <__aeabi_uidivmod>
   1a4b8:	0433      	lsls	r3, r6, #16
   1a4ba:	0409      	lsls	r1, r1, #16
   1a4bc:	0c1b      	lsrs	r3, r3, #16
   1a4be:	430b      	orrs	r3, r1
   1a4c0:	4599      	cmp	r9, r3
   1a4c2:	d909      	bls.n	1a4d8 <__aeabi_ddiv+0x2a0>
   1a4c4:	4443      	add	r3, r8
   1a4c6:	1e6a      	subs	r2, r5, #1
   1a4c8:	4598      	cmp	r8, r3
   1a4ca:	d900      	bls.n	1a4ce <__aeabi_ddiv+0x296>
   1a4cc:	e11a      	b.n	1a704 <__aeabi_ddiv+0x4cc>
   1a4ce:	4599      	cmp	r9, r3
   1a4d0:	d800      	bhi.n	1a4d4 <__aeabi_ddiv+0x29c>
   1a4d2:	e117      	b.n	1a704 <__aeabi_ddiv+0x4cc>
   1a4d4:	3d02      	subs	r5, #2
   1a4d6:	4443      	add	r3, r8
   1a4d8:	464a      	mov	r2, r9
   1a4da:	1a9b      	subs	r3, r3, r2
   1a4dc:	465a      	mov	r2, fp
   1a4de:	0412      	lsls	r2, r2, #16
   1a4e0:	432a      	orrs	r2, r5
   1a4e2:	9903      	ldr	r1, [sp, #12]
   1a4e4:	4693      	mov	fp, r2
   1a4e6:	0c10      	lsrs	r0, r2, #16
   1a4e8:	0c0a      	lsrs	r2, r1, #16
   1a4ea:	4691      	mov	r9, r2
   1a4ec:	0409      	lsls	r1, r1, #16
   1a4ee:	465a      	mov	r2, fp
   1a4f0:	0c09      	lsrs	r1, r1, #16
   1a4f2:	464e      	mov	r6, r9
   1a4f4:	000d      	movs	r5, r1
   1a4f6:	0412      	lsls	r2, r2, #16
   1a4f8:	0c12      	lsrs	r2, r2, #16
   1a4fa:	4345      	muls	r5, r0
   1a4fc:	9105      	str	r1, [sp, #20]
   1a4fe:	4351      	muls	r1, r2
   1a500:	4372      	muls	r2, r6
   1a502:	4370      	muls	r0, r6
   1a504:	1952      	adds	r2, r2, r5
   1a506:	0c0e      	lsrs	r6, r1, #16
   1a508:	18b2      	adds	r2, r6, r2
   1a50a:	4295      	cmp	r5, r2
   1a50c:	d903      	bls.n	1a516 <__aeabi_ddiv+0x2de>
   1a50e:	2580      	movs	r5, #128	; 0x80
   1a510:	026d      	lsls	r5, r5, #9
   1a512:	46ac      	mov	ip, r5
   1a514:	4460      	add	r0, ip
   1a516:	0c15      	lsrs	r5, r2, #16
   1a518:	0409      	lsls	r1, r1, #16
   1a51a:	0412      	lsls	r2, r2, #16
   1a51c:	0c09      	lsrs	r1, r1, #16
   1a51e:	1828      	adds	r0, r5, r0
   1a520:	1852      	adds	r2, r2, r1
   1a522:	4283      	cmp	r3, r0
   1a524:	d200      	bcs.n	1a528 <__aeabi_ddiv+0x2f0>
   1a526:	e0ce      	b.n	1a6c6 <__aeabi_ddiv+0x48e>
   1a528:	d100      	bne.n	1a52c <__aeabi_ddiv+0x2f4>
   1a52a:	e0c8      	b.n	1a6be <__aeabi_ddiv+0x486>
   1a52c:	1a1d      	subs	r5, r3, r0
   1a52e:	4653      	mov	r3, sl
   1a530:	1a9e      	subs	r6, r3, r2
   1a532:	45b2      	cmp	sl, r6
   1a534:	4192      	sbcs	r2, r2
   1a536:	4252      	negs	r2, r2
   1a538:	1aab      	subs	r3, r5, r2
   1a53a:	469a      	mov	sl, r3
   1a53c:	4598      	cmp	r8, r3
   1a53e:	d100      	bne.n	1a542 <__aeabi_ddiv+0x30a>
   1a540:	e117      	b.n	1a772 <__aeabi_ddiv+0x53a>
   1a542:	0039      	movs	r1, r7
   1a544:	0018      	movs	r0, r3
   1a546:	f7ff fab1 	bl	19aac <__udivsi3>
   1a54a:	9b01      	ldr	r3, [sp, #4]
   1a54c:	0005      	movs	r5, r0
   1a54e:	4343      	muls	r3, r0
   1a550:	0039      	movs	r1, r7
   1a552:	4650      	mov	r0, sl
   1a554:	9304      	str	r3, [sp, #16]
   1a556:	f7ff fb2f 	bl	19bb8 <__aeabi_uidivmod>
   1a55a:	9804      	ldr	r0, [sp, #16]
   1a55c:	040b      	lsls	r3, r1, #16
   1a55e:	0c31      	lsrs	r1, r6, #16
   1a560:	4319      	orrs	r1, r3
   1a562:	4288      	cmp	r0, r1
   1a564:	d909      	bls.n	1a57a <__aeabi_ddiv+0x342>
   1a566:	4441      	add	r1, r8
   1a568:	1e6b      	subs	r3, r5, #1
   1a56a:	4588      	cmp	r8, r1
   1a56c:	d900      	bls.n	1a570 <__aeabi_ddiv+0x338>
   1a56e:	e107      	b.n	1a780 <__aeabi_ddiv+0x548>
   1a570:	4288      	cmp	r0, r1
   1a572:	d800      	bhi.n	1a576 <__aeabi_ddiv+0x33e>
   1a574:	e104      	b.n	1a780 <__aeabi_ddiv+0x548>
   1a576:	3d02      	subs	r5, #2
   1a578:	4441      	add	r1, r8
   1a57a:	9b04      	ldr	r3, [sp, #16]
   1a57c:	1acb      	subs	r3, r1, r3
   1a57e:	0018      	movs	r0, r3
   1a580:	0039      	movs	r1, r7
   1a582:	9304      	str	r3, [sp, #16]
   1a584:	f7ff fa92 	bl	19aac <__udivsi3>
   1a588:	9b01      	ldr	r3, [sp, #4]
   1a58a:	4682      	mov	sl, r0
   1a58c:	4343      	muls	r3, r0
   1a58e:	0039      	movs	r1, r7
   1a590:	9804      	ldr	r0, [sp, #16]
   1a592:	9301      	str	r3, [sp, #4]
   1a594:	f7ff fb10 	bl	19bb8 <__aeabi_uidivmod>
   1a598:	9801      	ldr	r0, [sp, #4]
   1a59a:	040b      	lsls	r3, r1, #16
   1a59c:	0431      	lsls	r1, r6, #16
   1a59e:	0c09      	lsrs	r1, r1, #16
   1a5a0:	4319      	orrs	r1, r3
   1a5a2:	4288      	cmp	r0, r1
   1a5a4:	d90d      	bls.n	1a5c2 <__aeabi_ddiv+0x38a>
   1a5a6:	4653      	mov	r3, sl
   1a5a8:	4441      	add	r1, r8
   1a5aa:	3b01      	subs	r3, #1
   1a5ac:	4588      	cmp	r8, r1
   1a5ae:	d900      	bls.n	1a5b2 <__aeabi_ddiv+0x37a>
   1a5b0:	e0e8      	b.n	1a784 <__aeabi_ddiv+0x54c>
   1a5b2:	4288      	cmp	r0, r1
   1a5b4:	d800      	bhi.n	1a5b8 <__aeabi_ddiv+0x380>
   1a5b6:	e0e5      	b.n	1a784 <__aeabi_ddiv+0x54c>
   1a5b8:	2302      	movs	r3, #2
   1a5ba:	425b      	negs	r3, r3
   1a5bc:	469c      	mov	ip, r3
   1a5be:	4441      	add	r1, r8
   1a5c0:	44e2      	add	sl, ip
   1a5c2:	9b01      	ldr	r3, [sp, #4]
   1a5c4:	042d      	lsls	r5, r5, #16
   1a5c6:	1ace      	subs	r6, r1, r3
   1a5c8:	4651      	mov	r1, sl
   1a5ca:	4329      	orrs	r1, r5
   1a5cc:	9d05      	ldr	r5, [sp, #20]
   1a5ce:	464f      	mov	r7, r9
   1a5d0:	002a      	movs	r2, r5
   1a5d2:	040b      	lsls	r3, r1, #16
   1a5d4:	0c08      	lsrs	r0, r1, #16
   1a5d6:	0c1b      	lsrs	r3, r3, #16
   1a5d8:	435a      	muls	r2, r3
   1a5da:	4345      	muls	r5, r0
   1a5dc:	437b      	muls	r3, r7
   1a5de:	4378      	muls	r0, r7
   1a5e0:	195b      	adds	r3, r3, r5
   1a5e2:	0c17      	lsrs	r7, r2, #16
   1a5e4:	18fb      	adds	r3, r7, r3
   1a5e6:	429d      	cmp	r5, r3
   1a5e8:	d903      	bls.n	1a5f2 <__aeabi_ddiv+0x3ba>
   1a5ea:	2580      	movs	r5, #128	; 0x80
   1a5ec:	026d      	lsls	r5, r5, #9
   1a5ee:	46ac      	mov	ip, r5
   1a5f0:	4460      	add	r0, ip
   1a5f2:	0c1d      	lsrs	r5, r3, #16
   1a5f4:	0412      	lsls	r2, r2, #16
   1a5f6:	041b      	lsls	r3, r3, #16
   1a5f8:	0c12      	lsrs	r2, r2, #16
   1a5fa:	1828      	adds	r0, r5, r0
   1a5fc:	189b      	adds	r3, r3, r2
   1a5fe:	4286      	cmp	r6, r0
   1a600:	d200      	bcs.n	1a604 <__aeabi_ddiv+0x3cc>
   1a602:	e093      	b.n	1a72c <__aeabi_ddiv+0x4f4>
   1a604:	d100      	bne.n	1a608 <__aeabi_ddiv+0x3d0>
   1a606:	e08e      	b.n	1a726 <__aeabi_ddiv+0x4ee>
   1a608:	2301      	movs	r3, #1
   1a60a:	4319      	orrs	r1, r3
   1a60c:	4ba0      	ldr	r3, [pc, #640]	; (1a890 <__aeabi_ddiv+0x658>)
   1a60e:	18e3      	adds	r3, r4, r3
   1a610:	2b00      	cmp	r3, #0
   1a612:	dc00      	bgt.n	1a616 <__aeabi_ddiv+0x3de>
   1a614:	e099      	b.n	1a74a <__aeabi_ddiv+0x512>
   1a616:	074a      	lsls	r2, r1, #29
   1a618:	d000      	beq.n	1a61c <__aeabi_ddiv+0x3e4>
   1a61a:	e09e      	b.n	1a75a <__aeabi_ddiv+0x522>
   1a61c:	465a      	mov	r2, fp
   1a61e:	01d2      	lsls	r2, r2, #7
   1a620:	d506      	bpl.n	1a630 <__aeabi_ddiv+0x3f8>
   1a622:	465a      	mov	r2, fp
   1a624:	4b9b      	ldr	r3, [pc, #620]	; (1a894 <__aeabi_ddiv+0x65c>)
   1a626:	401a      	ands	r2, r3
   1a628:	2380      	movs	r3, #128	; 0x80
   1a62a:	4693      	mov	fp, r2
   1a62c:	00db      	lsls	r3, r3, #3
   1a62e:	18e3      	adds	r3, r4, r3
   1a630:	4a99      	ldr	r2, [pc, #612]	; (1a898 <__aeabi_ddiv+0x660>)
   1a632:	4293      	cmp	r3, r2
   1a634:	dd68      	ble.n	1a708 <__aeabi_ddiv+0x4d0>
   1a636:	2301      	movs	r3, #1
   1a638:	9a02      	ldr	r2, [sp, #8]
   1a63a:	4c98      	ldr	r4, [pc, #608]	; (1a89c <__aeabi_ddiv+0x664>)
   1a63c:	401a      	ands	r2, r3
   1a63e:	2300      	movs	r3, #0
   1a640:	4694      	mov	ip, r2
   1a642:	4698      	mov	r8, r3
   1a644:	2200      	movs	r2, #0
   1a646:	e6c5      	b.n	1a3d4 <__aeabi_ddiv+0x19c>
   1a648:	2280      	movs	r2, #128	; 0x80
   1a64a:	464b      	mov	r3, r9
   1a64c:	0312      	lsls	r2, r2, #12
   1a64e:	4213      	tst	r3, r2
   1a650:	d00a      	beq.n	1a668 <__aeabi_ddiv+0x430>
   1a652:	465b      	mov	r3, fp
   1a654:	4213      	tst	r3, r2
   1a656:	d106      	bne.n	1a666 <__aeabi_ddiv+0x42e>
   1a658:	431a      	orrs	r2, r3
   1a65a:	0312      	lsls	r2, r2, #12
   1a65c:	0b12      	lsrs	r2, r2, #12
   1a65e:	46ac      	mov	ip, r5
   1a660:	4688      	mov	r8, r1
   1a662:	4c8e      	ldr	r4, [pc, #568]	; (1a89c <__aeabi_ddiv+0x664>)
   1a664:	e6b6      	b.n	1a3d4 <__aeabi_ddiv+0x19c>
   1a666:	464b      	mov	r3, r9
   1a668:	431a      	orrs	r2, r3
   1a66a:	0312      	lsls	r2, r2, #12
   1a66c:	0b12      	lsrs	r2, r2, #12
   1a66e:	46bc      	mov	ip, r7
   1a670:	4c8a      	ldr	r4, [pc, #552]	; (1a89c <__aeabi_ddiv+0x664>)
   1a672:	e6af      	b.n	1a3d4 <__aeabi_ddiv+0x19c>
   1a674:	0003      	movs	r3, r0
   1a676:	465a      	mov	r2, fp
   1a678:	3b28      	subs	r3, #40	; 0x28
   1a67a:	409a      	lsls	r2, r3
   1a67c:	2300      	movs	r3, #0
   1a67e:	4691      	mov	r9, r2
   1a680:	4698      	mov	r8, r3
   1a682:	e657      	b.n	1a334 <__aeabi_ddiv+0xfc>
   1a684:	4658      	mov	r0, fp
   1a686:	f000 ff0d 	bl	1b4a4 <__clzsi2>
   1a68a:	3020      	adds	r0, #32
   1a68c:	e640      	b.n	1a310 <__aeabi_ddiv+0xd8>
   1a68e:	0003      	movs	r3, r0
   1a690:	4652      	mov	r2, sl
   1a692:	3b28      	subs	r3, #40	; 0x28
   1a694:	409a      	lsls	r2, r3
   1a696:	2100      	movs	r1, #0
   1a698:	4693      	mov	fp, r2
   1a69a:	e677      	b.n	1a38c <__aeabi_ddiv+0x154>
   1a69c:	f000 ff02 	bl	1b4a4 <__clzsi2>
   1a6a0:	3020      	adds	r0, #32
   1a6a2:	e65f      	b.n	1a364 <__aeabi_ddiv+0x12c>
   1a6a4:	4588      	cmp	r8, r1
   1a6a6:	d200      	bcs.n	1a6aa <__aeabi_ddiv+0x472>
   1a6a8:	e6c7      	b.n	1a43a <__aeabi_ddiv+0x202>
   1a6aa:	464b      	mov	r3, r9
   1a6ac:	07de      	lsls	r6, r3, #31
   1a6ae:	085d      	lsrs	r5, r3, #1
   1a6b0:	4643      	mov	r3, r8
   1a6b2:	085b      	lsrs	r3, r3, #1
   1a6b4:	431e      	orrs	r6, r3
   1a6b6:	4643      	mov	r3, r8
   1a6b8:	07db      	lsls	r3, r3, #31
   1a6ba:	469a      	mov	sl, r3
   1a6bc:	e6c2      	b.n	1a444 <__aeabi_ddiv+0x20c>
   1a6be:	2500      	movs	r5, #0
   1a6c0:	4592      	cmp	sl, r2
   1a6c2:	d300      	bcc.n	1a6c6 <__aeabi_ddiv+0x48e>
   1a6c4:	e733      	b.n	1a52e <__aeabi_ddiv+0x2f6>
   1a6c6:	9e03      	ldr	r6, [sp, #12]
   1a6c8:	4659      	mov	r1, fp
   1a6ca:	46b4      	mov	ip, r6
   1a6cc:	44e2      	add	sl, ip
   1a6ce:	45b2      	cmp	sl, r6
   1a6d0:	41ad      	sbcs	r5, r5
   1a6d2:	426d      	negs	r5, r5
   1a6d4:	4445      	add	r5, r8
   1a6d6:	18eb      	adds	r3, r5, r3
   1a6d8:	3901      	subs	r1, #1
   1a6da:	4598      	cmp	r8, r3
   1a6dc:	d207      	bcs.n	1a6ee <__aeabi_ddiv+0x4b6>
   1a6de:	4298      	cmp	r0, r3
   1a6e0:	d900      	bls.n	1a6e4 <__aeabi_ddiv+0x4ac>
   1a6e2:	e07f      	b.n	1a7e4 <__aeabi_ddiv+0x5ac>
   1a6e4:	d100      	bne.n	1a6e8 <__aeabi_ddiv+0x4b0>
   1a6e6:	e0bc      	b.n	1a862 <__aeabi_ddiv+0x62a>
   1a6e8:	1a1d      	subs	r5, r3, r0
   1a6ea:	468b      	mov	fp, r1
   1a6ec:	e71f      	b.n	1a52e <__aeabi_ddiv+0x2f6>
   1a6ee:	4598      	cmp	r8, r3
   1a6f0:	d1fa      	bne.n	1a6e8 <__aeabi_ddiv+0x4b0>
   1a6f2:	9d03      	ldr	r5, [sp, #12]
   1a6f4:	4555      	cmp	r5, sl
   1a6f6:	d9f2      	bls.n	1a6de <__aeabi_ddiv+0x4a6>
   1a6f8:	4643      	mov	r3, r8
   1a6fa:	468b      	mov	fp, r1
   1a6fc:	1a1d      	subs	r5, r3, r0
   1a6fe:	e716      	b.n	1a52e <__aeabi_ddiv+0x2f6>
   1a700:	469b      	mov	fp, r3
   1a702:	e6ca      	b.n	1a49a <__aeabi_ddiv+0x262>
   1a704:	0015      	movs	r5, r2
   1a706:	e6e7      	b.n	1a4d8 <__aeabi_ddiv+0x2a0>
   1a708:	465a      	mov	r2, fp
   1a70a:	08c9      	lsrs	r1, r1, #3
   1a70c:	0752      	lsls	r2, r2, #29
   1a70e:	430a      	orrs	r2, r1
   1a710:	055b      	lsls	r3, r3, #21
   1a712:	4690      	mov	r8, r2
   1a714:	0d5c      	lsrs	r4, r3, #21
   1a716:	465a      	mov	r2, fp
   1a718:	2301      	movs	r3, #1
   1a71a:	9902      	ldr	r1, [sp, #8]
   1a71c:	0252      	lsls	r2, r2, #9
   1a71e:	4019      	ands	r1, r3
   1a720:	0b12      	lsrs	r2, r2, #12
   1a722:	468c      	mov	ip, r1
   1a724:	e656      	b.n	1a3d4 <__aeabi_ddiv+0x19c>
   1a726:	2b00      	cmp	r3, #0
   1a728:	d100      	bne.n	1a72c <__aeabi_ddiv+0x4f4>
   1a72a:	e76f      	b.n	1a60c <__aeabi_ddiv+0x3d4>
   1a72c:	4446      	add	r6, r8
   1a72e:	1e4a      	subs	r2, r1, #1
   1a730:	45b0      	cmp	r8, r6
   1a732:	d929      	bls.n	1a788 <__aeabi_ddiv+0x550>
   1a734:	0011      	movs	r1, r2
   1a736:	4286      	cmp	r6, r0
   1a738:	d000      	beq.n	1a73c <__aeabi_ddiv+0x504>
   1a73a:	e765      	b.n	1a608 <__aeabi_ddiv+0x3d0>
   1a73c:	9a03      	ldr	r2, [sp, #12]
   1a73e:	4293      	cmp	r3, r2
   1a740:	d000      	beq.n	1a744 <__aeabi_ddiv+0x50c>
   1a742:	e761      	b.n	1a608 <__aeabi_ddiv+0x3d0>
   1a744:	e762      	b.n	1a60c <__aeabi_ddiv+0x3d4>
   1a746:	2101      	movs	r1, #1
   1a748:	4249      	negs	r1, r1
   1a74a:	2001      	movs	r0, #1
   1a74c:	1ac2      	subs	r2, r0, r3
   1a74e:	2a38      	cmp	r2, #56	; 0x38
   1a750:	dd21      	ble.n	1a796 <__aeabi_ddiv+0x55e>
   1a752:	9b02      	ldr	r3, [sp, #8]
   1a754:	4003      	ands	r3, r0
   1a756:	469c      	mov	ip, r3
   1a758:	e638      	b.n	1a3cc <__aeabi_ddiv+0x194>
   1a75a:	220f      	movs	r2, #15
   1a75c:	400a      	ands	r2, r1
   1a75e:	2a04      	cmp	r2, #4
   1a760:	d100      	bne.n	1a764 <__aeabi_ddiv+0x52c>
   1a762:	e75b      	b.n	1a61c <__aeabi_ddiv+0x3e4>
   1a764:	000a      	movs	r2, r1
   1a766:	1d11      	adds	r1, r2, #4
   1a768:	4291      	cmp	r1, r2
   1a76a:	4192      	sbcs	r2, r2
   1a76c:	4252      	negs	r2, r2
   1a76e:	4493      	add	fp, r2
   1a770:	e754      	b.n	1a61c <__aeabi_ddiv+0x3e4>
   1a772:	4b47      	ldr	r3, [pc, #284]	; (1a890 <__aeabi_ddiv+0x658>)
   1a774:	18e3      	adds	r3, r4, r3
   1a776:	2b00      	cmp	r3, #0
   1a778:	dde5      	ble.n	1a746 <__aeabi_ddiv+0x50e>
   1a77a:	2201      	movs	r2, #1
   1a77c:	4252      	negs	r2, r2
   1a77e:	e7f2      	b.n	1a766 <__aeabi_ddiv+0x52e>
   1a780:	001d      	movs	r5, r3
   1a782:	e6fa      	b.n	1a57a <__aeabi_ddiv+0x342>
   1a784:	469a      	mov	sl, r3
   1a786:	e71c      	b.n	1a5c2 <__aeabi_ddiv+0x38a>
   1a788:	42b0      	cmp	r0, r6
   1a78a:	d839      	bhi.n	1a800 <__aeabi_ddiv+0x5c8>
   1a78c:	d06e      	beq.n	1a86c <__aeabi_ddiv+0x634>
   1a78e:	0011      	movs	r1, r2
   1a790:	e73a      	b.n	1a608 <__aeabi_ddiv+0x3d0>
   1a792:	9302      	str	r3, [sp, #8]
   1a794:	e73a      	b.n	1a60c <__aeabi_ddiv+0x3d4>
   1a796:	2a1f      	cmp	r2, #31
   1a798:	dc3c      	bgt.n	1a814 <__aeabi_ddiv+0x5dc>
   1a79a:	2320      	movs	r3, #32
   1a79c:	1a9b      	subs	r3, r3, r2
   1a79e:	000c      	movs	r4, r1
   1a7a0:	4658      	mov	r0, fp
   1a7a2:	4099      	lsls	r1, r3
   1a7a4:	4098      	lsls	r0, r3
   1a7a6:	1e4b      	subs	r3, r1, #1
   1a7a8:	4199      	sbcs	r1, r3
   1a7aa:	465b      	mov	r3, fp
   1a7ac:	40d4      	lsrs	r4, r2
   1a7ae:	40d3      	lsrs	r3, r2
   1a7b0:	4320      	orrs	r0, r4
   1a7b2:	4308      	orrs	r0, r1
   1a7b4:	001a      	movs	r2, r3
   1a7b6:	0743      	lsls	r3, r0, #29
   1a7b8:	d009      	beq.n	1a7ce <__aeabi_ddiv+0x596>
   1a7ba:	230f      	movs	r3, #15
   1a7bc:	4003      	ands	r3, r0
   1a7be:	2b04      	cmp	r3, #4
   1a7c0:	d005      	beq.n	1a7ce <__aeabi_ddiv+0x596>
   1a7c2:	0001      	movs	r1, r0
   1a7c4:	1d08      	adds	r0, r1, #4
   1a7c6:	4288      	cmp	r0, r1
   1a7c8:	419b      	sbcs	r3, r3
   1a7ca:	425b      	negs	r3, r3
   1a7cc:	18d2      	adds	r2, r2, r3
   1a7ce:	0213      	lsls	r3, r2, #8
   1a7d0:	d53a      	bpl.n	1a848 <__aeabi_ddiv+0x610>
   1a7d2:	2301      	movs	r3, #1
   1a7d4:	9a02      	ldr	r2, [sp, #8]
   1a7d6:	2401      	movs	r4, #1
   1a7d8:	401a      	ands	r2, r3
   1a7da:	2300      	movs	r3, #0
   1a7dc:	4694      	mov	ip, r2
   1a7de:	4698      	mov	r8, r3
   1a7e0:	2200      	movs	r2, #0
   1a7e2:	e5f7      	b.n	1a3d4 <__aeabi_ddiv+0x19c>
   1a7e4:	2102      	movs	r1, #2
   1a7e6:	4249      	negs	r1, r1
   1a7e8:	468c      	mov	ip, r1
   1a7ea:	9d03      	ldr	r5, [sp, #12]
   1a7ec:	44e3      	add	fp, ip
   1a7ee:	46ac      	mov	ip, r5
   1a7f0:	44e2      	add	sl, ip
   1a7f2:	45aa      	cmp	sl, r5
   1a7f4:	41ad      	sbcs	r5, r5
   1a7f6:	426d      	negs	r5, r5
   1a7f8:	4445      	add	r5, r8
   1a7fa:	18ed      	adds	r5, r5, r3
   1a7fc:	1a2d      	subs	r5, r5, r0
   1a7fe:	e696      	b.n	1a52e <__aeabi_ddiv+0x2f6>
   1a800:	1e8a      	subs	r2, r1, #2
   1a802:	9903      	ldr	r1, [sp, #12]
   1a804:	004d      	lsls	r5, r1, #1
   1a806:	428d      	cmp	r5, r1
   1a808:	4189      	sbcs	r1, r1
   1a80a:	4249      	negs	r1, r1
   1a80c:	4441      	add	r1, r8
   1a80e:	1876      	adds	r6, r6, r1
   1a810:	9503      	str	r5, [sp, #12]
   1a812:	e78f      	b.n	1a734 <__aeabi_ddiv+0x4fc>
   1a814:	201f      	movs	r0, #31
   1a816:	4240      	negs	r0, r0
   1a818:	1ac3      	subs	r3, r0, r3
   1a81a:	4658      	mov	r0, fp
   1a81c:	40d8      	lsrs	r0, r3
   1a81e:	0003      	movs	r3, r0
   1a820:	2a20      	cmp	r2, #32
   1a822:	d028      	beq.n	1a876 <__aeabi_ddiv+0x63e>
   1a824:	2040      	movs	r0, #64	; 0x40
   1a826:	465d      	mov	r5, fp
   1a828:	1a82      	subs	r2, r0, r2
   1a82a:	4095      	lsls	r5, r2
   1a82c:	4329      	orrs	r1, r5
   1a82e:	1e4a      	subs	r2, r1, #1
   1a830:	4191      	sbcs	r1, r2
   1a832:	4319      	orrs	r1, r3
   1a834:	2307      	movs	r3, #7
   1a836:	2200      	movs	r2, #0
   1a838:	400b      	ands	r3, r1
   1a83a:	d009      	beq.n	1a850 <__aeabi_ddiv+0x618>
   1a83c:	230f      	movs	r3, #15
   1a83e:	2200      	movs	r2, #0
   1a840:	400b      	ands	r3, r1
   1a842:	0008      	movs	r0, r1
   1a844:	2b04      	cmp	r3, #4
   1a846:	d1bd      	bne.n	1a7c4 <__aeabi_ddiv+0x58c>
   1a848:	0001      	movs	r1, r0
   1a84a:	0753      	lsls	r3, r2, #29
   1a84c:	0252      	lsls	r2, r2, #9
   1a84e:	0b12      	lsrs	r2, r2, #12
   1a850:	08c9      	lsrs	r1, r1, #3
   1a852:	4319      	orrs	r1, r3
   1a854:	2301      	movs	r3, #1
   1a856:	4688      	mov	r8, r1
   1a858:	9902      	ldr	r1, [sp, #8]
   1a85a:	2400      	movs	r4, #0
   1a85c:	4019      	ands	r1, r3
   1a85e:	468c      	mov	ip, r1
   1a860:	e5b8      	b.n	1a3d4 <__aeabi_ddiv+0x19c>
   1a862:	4552      	cmp	r2, sl
   1a864:	d8be      	bhi.n	1a7e4 <__aeabi_ddiv+0x5ac>
   1a866:	468b      	mov	fp, r1
   1a868:	2500      	movs	r5, #0
   1a86a:	e660      	b.n	1a52e <__aeabi_ddiv+0x2f6>
   1a86c:	9d03      	ldr	r5, [sp, #12]
   1a86e:	429d      	cmp	r5, r3
   1a870:	d3c6      	bcc.n	1a800 <__aeabi_ddiv+0x5c8>
   1a872:	0011      	movs	r1, r2
   1a874:	e762      	b.n	1a73c <__aeabi_ddiv+0x504>
   1a876:	2500      	movs	r5, #0
   1a878:	e7d8      	b.n	1a82c <__aeabi_ddiv+0x5f4>
   1a87a:	2280      	movs	r2, #128	; 0x80
   1a87c:	465b      	mov	r3, fp
   1a87e:	0312      	lsls	r2, r2, #12
   1a880:	431a      	orrs	r2, r3
   1a882:	9b01      	ldr	r3, [sp, #4]
   1a884:	0312      	lsls	r2, r2, #12
   1a886:	0b12      	lsrs	r2, r2, #12
   1a888:	469c      	mov	ip, r3
   1a88a:	4688      	mov	r8, r1
   1a88c:	4c03      	ldr	r4, [pc, #12]	; (1a89c <__aeabi_ddiv+0x664>)
   1a88e:	e5a1      	b.n	1a3d4 <__aeabi_ddiv+0x19c>
   1a890:	000003ff 	.word	0x000003ff
   1a894:	feffffff 	.word	0xfeffffff
   1a898:	000007fe 	.word	0x000007fe
   1a89c:	000007ff 	.word	0x000007ff

0001a8a0 <__aeabi_dmul>:
   1a8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a8a2:	4657      	mov	r7, sl
   1a8a4:	4645      	mov	r5, r8
   1a8a6:	46de      	mov	lr, fp
   1a8a8:	464e      	mov	r6, r9
   1a8aa:	b5e0      	push	{r5, r6, r7, lr}
   1a8ac:	030c      	lsls	r4, r1, #12
   1a8ae:	4698      	mov	r8, r3
   1a8b0:	004e      	lsls	r6, r1, #1
   1a8b2:	0b23      	lsrs	r3, r4, #12
   1a8b4:	b087      	sub	sp, #28
   1a8b6:	0007      	movs	r7, r0
   1a8b8:	4692      	mov	sl, r2
   1a8ba:	469b      	mov	fp, r3
   1a8bc:	0d76      	lsrs	r6, r6, #21
   1a8be:	0fcd      	lsrs	r5, r1, #31
   1a8c0:	2e00      	cmp	r6, #0
   1a8c2:	d06b      	beq.n	1a99c <__aeabi_dmul+0xfc>
   1a8c4:	4b6d      	ldr	r3, [pc, #436]	; (1aa7c <__aeabi_dmul+0x1dc>)
   1a8c6:	429e      	cmp	r6, r3
   1a8c8:	d035      	beq.n	1a936 <__aeabi_dmul+0x96>
   1a8ca:	2480      	movs	r4, #128	; 0x80
   1a8cc:	465b      	mov	r3, fp
   1a8ce:	0f42      	lsrs	r2, r0, #29
   1a8d0:	0424      	lsls	r4, r4, #16
   1a8d2:	00db      	lsls	r3, r3, #3
   1a8d4:	4314      	orrs	r4, r2
   1a8d6:	431c      	orrs	r4, r3
   1a8d8:	00c3      	lsls	r3, r0, #3
   1a8da:	4699      	mov	r9, r3
   1a8dc:	4b68      	ldr	r3, [pc, #416]	; (1aa80 <__aeabi_dmul+0x1e0>)
   1a8de:	46a3      	mov	fp, r4
   1a8e0:	469c      	mov	ip, r3
   1a8e2:	2300      	movs	r3, #0
   1a8e4:	2700      	movs	r7, #0
   1a8e6:	4466      	add	r6, ip
   1a8e8:	9302      	str	r3, [sp, #8]
   1a8ea:	4643      	mov	r3, r8
   1a8ec:	031c      	lsls	r4, r3, #12
   1a8ee:	005a      	lsls	r2, r3, #1
   1a8f0:	0fdb      	lsrs	r3, r3, #31
   1a8f2:	4650      	mov	r0, sl
   1a8f4:	0b24      	lsrs	r4, r4, #12
   1a8f6:	0d52      	lsrs	r2, r2, #21
   1a8f8:	4698      	mov	r8, r3
   1a8fa:	d100      	bne.n	1a8fe <__aeabi_dmul+0x5e>
   1a8fc:	e076      	b.n	1a9ec <__aeabi_dmul+0x14c>
   1a8fe:	4b5f      	ldr	r3, [pc, #380]	; (1aa7c <__aeabi_dmul+0x1dc>)
   1a900:	429a      	cmp	r2, r3
   1a902:	d06d      	beq.n	1a9e0 <__aeabi_dmul+0x140>
   1a904:	2380      	movs	r3, #128	; 0x80
   1a906:	0f41      	lsrs	r1, r0, #29
   1a908:	041b      	lsls	r3, r3, #16
   1a90a:	430b      	orrs	r3, r1
   1a90c:	495c      	ldr	r1, [pc, #368]	; (1aa80 <__aeabi_dmul+0x1e0>)
   1a90e:	00e4      	lsls	r4, r4, #3
   1a910:	468c      	mov	ip, r1
   1a912:	431c      	orrs	r4, r3
   1a914:	00c3      	lsls	r3, r0, #3
   1a916:	2000      	movs	r0, #0
   1a918:	4462      	add	r2, ip
   1a91a:	4641      	mov	r1, r8
   1a91c:	18b6      	adds	r6, r6, r2
   1a91e:	4069      	eors	r1, r5
   1a920:	1c72      	adds	r2, r6, #1
   1a922:	9101      	str	r1, [sp, #4]
   1a924:	4694      	mov	ip, r2
   1a926:	4307      	orrs	r7, r0
   1a928:	2f0f      	cmp	r7, #15
   1a92a:	d900      	bls.n	1a92e <__aeabi_dmul+0x8e>
   1a92c:	e0b0      	b.n	1aa90 <__aeabi_dmul+0x1f0>
   1a92e:	4a55      	ldr	r2, [pc, #340]	; (1aa84 <__aeabi_dmul+0x1e4>)
   1a930:	00bf      	lsls	r7, r7, #2
   1a932:	59d2      	ldr	r2, [r2, r7]
   1a934:	4697      	mov	pc, r2
   1a936:	465b      	mov	r3, fp
   1a938:	4303      	orrs	r3, r0
   1a93a:	4699      	mov	r9, r3
   1a93c:	d000      	beq.n	1a940 <__aeabi_dmul+0xa0>
   1a93e:	e087      	b.n	1aa50 <__aeabi_dmul+0x1b0>
   1a940:	2300      	movs	r3, #0
   1a942:	469b      	mov	fp, r3
   1a944:	3302      	adds	r3, #2
   1a946:	2708      	movs	r7, #8
   1a948:	9302      	str	r3, [sp, #8]
   1a94a:	e7ce      	b.n	1a8ea <__aeabi_dmul+0x4a>
   1a94c:	4642      	mov	r2, r8
   1a94e:	9201      	str	r2, [sp, #4]
   1a950:	2802      	cmp	r0, #2
   1a952:	d067      	beq.n	1aa24 <__aeabi_dmul+0x184>
   1a954:	2803      	cmp	r0, #3
   1a956:	d100      	bne.n	1a95a <__aeabi_dmul+0xba>
   1a958:	e20e      	b.n	1ad78 <__aeabi_dmul+0x4d8>
   1a95a:	2801      	cmp	r0, #1
   1a95c:	d000      	beq.n	1a960 <__aeabi_dmul+0xc0>
   1a95e:	e162      	b.n	1ac26 <__aeabi_dmul+0x386>
   1a960:	2300      	movs	r3, #0
   1a962:	2400      	movs	r4, #0
   1a964:	2200      	movs	r2, #0
   1a966:	4699      	mov	r9, r3
   1a968:	9901      	ldr	r1, [sp, #4]
   1a96a:	4001      	ands	r1, r0
   1a96c:	b2cd      	uxtb	r5, r1
   1a96e:	2100      	movs	r1, #0
   1a970:	0312      	lsls	r2, r2, #12
   1a972:	0d0b      	lsrs	r3, r1, #20
   1a974:	0b12      	lsrs	r2, r2, #12
   1a976:	051b      	lsls	r3, r3, #20
   1a978:	4313      	orrs	r3, r2
   1a97a:	4a43      	ldr	r2, [pc, #268]	; (1aa88 <__aeabi_dmul+0x1e8>)
   1a97c:	0524      	lsls	r4, r4, #20
   1a97e:	4013      	ands	r3, r2
   1a980:	431c      	orrs	r4, r3
   1a982:	0064      	lsls	r4, r4, #1
   1a984:	07ed      	lsls	r5, r5, #31
   1a986:	0864      	lsrs	r4, r4, #1
   1a988:	432c      	orrs	r4, r5
   1a98a:	4648      	mov	r0, r9
   1a98c:	0021      	movs	r1, r4
   1a98e:	b007      	add	sp, #28
   1a990:	bc3c      	pop	{r2, r3, r4, r5}
   1a992:	4690      	mov	r8, r2
   1a994:	4699      	mov	r9, r3
   1a996:	46a2      	mov	sl, r4
   1a998:	46ab      	mov	fp, r5
   1a99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a99c:	4303      	orrs	r3, r0
   1a99e:	4699      	mov	r9, r3
   1a9a0:	d04f      	beq.n	1aa42 <__aeabi_dmul+0x1a2>
   1a9a2:	465b      	mov	r3, fp
   1a9a4:	2b00      	cmp	r3, #0
   1a9a6:	d100      	bne.n	1a9aa <__aeabi_dmul+0x10a>
   1a9a8:	e189      	b.n	1acbe <__aeabi_dmul+0x41e>
   1a9aa:	4658      	mov	r0, fp
   1a9ac:	f000 fd7a 	bl	1b4a4 <__clzsi2>
   1a9b0:	0003      	movs	r3, r0
   1a9b2:	3b0b      	subs	r3, #11
   1a9b4:	2b1c      	cmp	r3, #28
   1a9b6:	dd00      	ble.n	1a9ba <__aeabi_dmul+0x11a>
   1a9b8:	e17a      	b.n	1acb0 <__aeabi_dmul+0x410>
   1a9ba:	221d      	movs	r2, #29
   1a9bc:	1ad3      	subs	r3, r2, r3
   1a9be:	003a      	movs	r2, r7
   1a9c0:	0001      	movs	r1, r0
   1a9c2:	465c      	mov	r4, fp
   1a9c4:	40da      	lsrs	r2, r3
   1a9c6:	3908      	subs	r1, #8
   1a9c8:	408c      	lsls	r4, r1
   1a9ca:	0013      	movs	r3, r2
   1a9cc:	408f      	lsls	r7, r1
   1a9ce:	4323      	orrs	r3, r4
   1a9d0:	469b      	mov	fp, r3
   1a9d2:	46b9      	mov	r9, r7
   1a9d4:	2300      	movs	r3, #0
   1a9d6:	4e2d      	ldr	r6, [pc, #180]	; (1aa8c <__aeabi_dmul+0x1ec>)
   1a9d8:	2700      	movs	r7, #0
   1a9da:	1a36      	subs	r6, r6, r0
   1a9dc:	9302      	str	r3, [sp, #8]
   1a9de:	e784      	b.n	1a8ea <__aeabi_dmul+0x4a>
   1a9e0:	4653      	mov	r3, sl
   1a9e2:	4323      	orrs	r3, r4
   1a9e4:	d12a      	bne.n	1aa3c <__aeabi_dmul+0x19c>
   1a9e6:	2400      	movs	r4, #0
   1a9e8:	2002      	movs	r0, #2
   1a9ea:	e796      	b.n	1a91a <__aeabi_dmul+0x7a>
   1a9ec:	4653      	mov	r3, sl
   1a9ee:	4323      	orrs	r3, r4
   1a9f0:	d020      	beq.n	1aa34 <__aeabi_dmul+0x194>
   1a9f2:	2c00      	cmp	r4, #0
   1a9f4:	d100      	bne.n	1a9f8 <__aeabi_dmul+0x158>
   1a9f6:	e157      	b.n	1aca8 <__aeabi_dmul+0x408>
   1a9f8:	0020      	movs	r0, r4
   1a9fa:	f000 fd53 	bl	1b4a4 <__clzsi2>
   1a9fe:	0003      	movs	r3, r0
   1aa00:	3b0b      	subs	r3, #11
   1aa02:	2b1c      	cmp	r3, #28
   1aa04:	dd00      	ble.n	1aa08 <__aeabi_dmul+0x168>
   1aa06:	e149      	b.n	1ac9c <__aeabi_dmul+0x3fc>
   1aa08:	211d      	movs	r1, #29
   1aa0a:	1acb      	subs	r3, r1, r3
   1aa0c:	4651      	mov	r1, sl
   1aa0e:	0002      	movs	r2, r0
   1aa10:	40d9      	lsrs	r1, r3
   1aa12:	4653      	mov	r3, sl
   1aa14:	3a08      	subs	r2, #8
   1aa16:	4094      	lsls	r4, r2
   1aa18:	4093      	lsls	r3, r2
   1aa1a:	430c      	orrs	r4, r1
   1aa1c:	4a1b      	ldr	r2, [pc, #108]	; (1aa8c <__aeabi_dmul+0x1ec>)
   1aa1e:	1a12      	subs	r2, r2, r0
   1aa20:	2000      	movs	r0, #0
   1aa22:	e77a      	b.n	1a91a <__aeabi_dmul+0x7a>
   1aa24:	2501      	movs	r5, #1
   1aa26:	9b01      	ldr	r3, [sp, #4]
   1aa28:	4c14      	ldr	r4, [pc, #80]	; (1aa7c <__aeabi_dmul+0x1dc>)
   1aa2a:	401d      	ands	r5, r3
   1aa2c:	2300      	movs	r3, #0
   1aa2e:	2200      	movs	r2, #0
   1aa30:	4699      	mov	r9, r3
   1aa32:	e79c      	b.n	1a96e <__aeabi_dmul+0xce>
   1aa34:	2400      	movs	r4, #0
   1aa36:	2200      	movs	r2, #0
   1aa38:	2001      	movs	r0, #1
   1aa3a:	e76e      	b.n	1a91a <__aeabi_dmul+0x7a>
   1aa3c:	4653      	mov	r3, sl
   1aa3e:	2003      	movs	r0, #3
   1aa40:	e76b      	b.n	1a91a <__aeabi_dmul+0x7a>
   1aa42:	2300      	movs	r3, #0
   1aa44:	469b      	mov	fp, r3
   1aa46:	3301      	adds	r3, #1
   1aa48:	2704      	movs	r7, #4
   1aa4a:	2600      	movs	r6, #0
   1aa4c:	9302      	str	r3, [sp, #8]
   1aa4e:	e74c      	b.n	1a8ea <__aeabi_dmul+0x4a>
   1aa50:	2303      	movs	r3, #3
   1aa52:	4681      	mov	r9, r0
   1aa54:	270c      	movs	r7, #12
   1aa56:	9302      	str	r3, [sp, #8]
   1aa58:	e747      	b.n	1a8ea <__aeabi_dmul+0x4a>
   1aa5a:	2280      	movs	r2, #128	; 0x80
   1aa5c:	2300      	movs	r3, #0
   1aa5e:	2500      	movs	r5, #0
   1aa60:	0312      	lsls	r2, r2, #12
   1aa62:	4699      	mov	r9, r3
   1aa64:	4c05      	ldr	r4, [pc, #20]	; (1aa7c <__aeabi_dmul+0x1dc>)
   1aa66:	e782      	b.n	1a96e <__aeabi_dmul+0xce>
   1aa68:	465c      	mov	r4, fp
   1aa6a:	464b      	mov	r3, r9
   1aa6c:	9802      	ldr	r0, [sp, #8]
   1aa6e:	e76f      	b.n	1a950 <__aeabi_dmul+0xb0>
   1aa70:	465c      	mov	r4, fp
   1aa72:	464b      	mov	r3, r9
   1aa74:	9501      	str	r5, [sp, #4]
   1aa76:	9802      	ldr	r0, [sp, #8]
   1aa78:	e76a      	b.n	1a950 <__aeabi_dmul+0xb0>
   1aa7a:	46c0      	nop			; (mov r8, r8)
   1aa7c:	000007ff 	.word	0x000007ff
   1aa80:	fffffc01 	.word	0xfffffc01
   1aa84:	0001c1bc 	.word	0x0001c1bc
   1aa88:	800fffff 	.word	0x800fffff
   1aa8c:	fffffc0d 	.word	0xfffffc0d
   1aa90:	464a      	mov	r2, r9
   1aa92:	4649      	mov	r1, r9
   1aa94:	0c17      	lsrs	r7, r2, #16
   1aa96:	0c1a      	lsrs	r2, r3, #16
   1aa98:	041b      	lsls	r3, r3, #16
   1aa9a:	0c1b      	lsrs	r3, r3, #16
   1aa9c:	0408      	lsls	r0, r1, #16
   1aa9e:	0019      	movs	r1, r3
   1aaa0:	0c00      	lsrs	r0, r0, #16
   1aaa2:	4341      	muls	r1, r0
   1aaa4:	0015      	movs	r5, r2
   1aaa6:	4688      	mov	r8, r1
   1aaa8:	0019      	movs	r1, r3
   1aaaa:	437d      	muls	r5, r7
   1aaac:	4379      	muls	r1, r7
   1aaae:	9503      	str	r5, [sp, #12]
   1aab0:	4689      	mov	r9, r1
   1aab2:	0029      	movs	r1, r5
   1aab4:	0015      	movs	r5, r2
   1aab6:	4345      	muls	r5, r0
   1aab8:	444d      	add	r5, r9
   1aaba:	9502      	str	r5, [sp, #8]
   1aabc:	4645      	mov	r5, r8
   1aabe:	0c2d      	lsrs	r5, r5, #16
   1aac0:	46aa      	mov	sl, r5
   1aac2:	9d02      	ldr	r5, [sp, #8]
   1aac4:	4455      	add	r5, sl
   1aac6:	45a9      	cmp	r9, r5
   1aac8:	d906      	bls.n	1aad8 <__aeabi_dmul+0x238>
   1aaca:	468a      	mov	sl, r1
   1aacc:	2180      	movs	r1, #128	; 0x80
   1aace:	0249      	lsls	r1, r1, #9
   1aad0:	4689      	mov	r9, r1
   1aad2:	44ca      	add	sl, r9
   1aad4:	4651      	mov	r1, sl
   1aad6:	9103      	str	r1, [sp, #12]
   1aad8:	0c29      	lsrs	r1, r5, #16
   1aada:	9104      	str	r1, [sp, #16]
   1aadc:	4641      	mov	r1, r8
   1aade:	0409      	lsls	r1, r1, #16
   1aae0:	042d      	lsls	r5, r5, #16
   1aae2:	0c09      	lsrs	r1, r1, #16
   1aae4:	4688      	mov	r8, r1
   1aae6:	0029      	movs	r1, r5
   1aae8:	0c25      	lsrs	r5, r4, #16
   1aaea:	0424      	lsls	r4, r4, #16
   1aaec:	4441      	add	r1, r8
   1aaee:	0c24      	lsrs	r4, r4, #16
   1aaf0:	9105      	str	r1, [sp, #20]
   1aaf2:	0021      	movs	r1, r4
   1aaf4:	4341      	muls	r1, r0
   1aaf6:	4688      	mov	r8, r1
   1aaf8:	0021      	movs	r1, r4
   1aafa:	4379      	muls	r1, r7
   1aafc:	468a      	mov	sl, r1
   1aafe:	4368      	muls	r0, r5
   1ab00:	4641      	mov	r1, r8
   1ab02:	4450      	add	r0, sl
   1ab04:	4681      	mov	r9, r0
   1ab06:	0c08      	lsrs	r0, r1, #16
   1ab08:	4448      	add	r0, r9
   1ab0a:	436f      	muls	r7, r5
   1ab0c:	4582      	cmp	sl, r0
   1ab0e:	d903      	bls.n	1ab18 <__aeabi_dmul+0x278>
   1ab10:	2180      	movs	r1, #128	; 0x80
   1ab12:	0249      	lsls	r1, r1, #9
   1ab14:	4689      	mov	r9, r1
   1ab16:	444f      	add	r7, r9
   1ab18:	0c01      	lsrs	r1, r0, #16
   1ab1a:	4689      	mov	r9, r1
   1ab1c:	0039      	movs	r1, r7
   1ab1e:	4449      	add	r1, r9
   1ab20:	9102      	str	r1, [sp, #8]
   1ab22:	4641      	mov	r1, r8
   1ab24:	040f      	lsls	r7, r1, #16
   1ab26:	9904      	ldr	r1, [sp, #16]
   1ab28:	0c3f      	lsrs	r7, r7, #16
   1ab2a:	4688      	mov	r8, r1
   1ab2c:	0400      	lsls	r0, r0, #16
   1ab2e:	19c0      	adds	r0, r0, r7
   1ab30:	4480      	add	r8, r0
   1ab32:	4641      	mov	r1, r8
   1ab34:	9104      	str	r1, [sp, #16]
   1ab36:	4659      	mov	r1, fp
   1ab38:	0c0f      	lsrs	r7, r1, #16
   1ab3a:	0409      	lsls	r1, r1, #16
   1ab3c:	0c09      	lsrs	r1, r1, #16
   1ab3e:	4688      	mov	r8, r1
   1ab40:	4359      	muls	r1, r3
   1ab42:	468a      	mov	sl, r1
   1ab44:	0039      	movs	r1, r7
   1ab46:	4351      	muls	r1, r2
   1ab48:	4689      	mov	r9, r1
   1ab4a:	4641      	mov	r1, r8
   1ab4c:	434a      	muls	r2, r1
   1ab4e:	4651      	mov	r1, sl
   1ab50:	0c09      	lsrs	r1, r1, #16
   1ab52:	468b      	mov	fp, r1
   1ab54:	437b      	muls	r3, r7
   1ab56:	18d2      	adds	r2, r2, r3
   1ab58:	445a      	add	r2, fp
   1ab5a:	4293      	cmp	r3, r2
   1ab5c:	d903      	bls.n	1ab66 <__aeabi_dmul+0x2c6>
   1ab5e:	2380      	movs	r3, #128	; 0x80
   1ab60:	025b      	lsls	r3, r3, #9
   1ab62:	469b      	mov	fp, r3
   1ab64:	44d9      	add	r9, fp
   1ab66:	4651      	mov	r1, sl
   1ab68:	0409      	lsls	r1, r1, #16
   1ab6a:	0c09      	lsrs	r1, r1, #16
   1ab6c:	468a      	mov	sl, r1
   1ab6e:	4641      	mov	r1, r8
   1ab70:	4361      	muls	r1, r4
   1ab72:	437c      	muls	r4, r7
   1ab74:	0c13      	lsrs	r3, r2, #16
   1ab76:	0412      	lsls	r2, r2, #16
   1ab78:	444b      	add	r3, r9
   1ab7a:	4452      	add	r2, sl
   1ab7c:	46a1      	mov	r9, r4
   1ab7e:	468a      	mov	sl, r1
   1ab80:	003c      	movs	r4, r7
   1ab82:	4641      	mov	r1, r8
   1ab84:	436c      	muls	r4, r5
   1ab86:	434d      	muls	r5, r1
   1ab88:	4651      	mov	r1, sl
   1ab8a:	444d      	add	r5, r9
   1ab8c:	0c0f      	lsrs	r7, r1, #16
   1ab8e:	197d      	adds	r5, r7, r5
   1ab90:	45a9      	cmp	r9, r5
   1ab92:	d903      	bls.n	1ab9c <__aeabi_dmul+0x2fc>
   1ab94:	2180      	movs	r1, #128	; 0x80
   1ab96:	0249      	lsls	r1, r1, #9
   1ab98:	4688      	mov	r8, r1
   1ab9a:	4444      	add	r4, r8
   1ab9c:	9f04      	ldr	r7, [sp, #16]
   1ab9e:	9903      	ldr	r1, [sp, #12]
   1aba0:	46b8      	mov	r8, r7
   1aba2:	4441      	add	r1, r8
   1aba4:	468b      	mov	fp, r1
   1aba6:	4583      	cmp	fp, r0
   1aba8:	4180      	sbcs	r0, r0
   1abaa:	4241      	negs	r1, r0
   1abac:	4688      	mov	r8, r1
   1abae:	4651      	mov	r1, sl
   1abb0:	0408      	lsls	r0, r1, #16
   1abb2:	042f      	lsls	r7, r5, #16
   1abb4:	0c00      	lsrs	r0, r0, #16
   1abb6:	183f      	adds	r7, r7, r0
   1abb8:	4658      	mov	r0, fp
   1abba:	9902      	ldr	r1, [sp, #8]
   1abbc:	1810      	adds	r0, r2, r0
   1abbe:	4689      	mov	r9, r1
   1abc0:	4290      	cmp	r0, r2
   1abc2:	4192      	sbcs	r2, r2
   1abc4:	444f      	add	r7, r9
   1abc6:	46ba      	mov	sl, r7
   1abc8:	4252      	negs	r2, r2
   1abca:	4699      	mov	r9, r3
   1abcc:	4693      	mov	fp, r2
   1abce:	44c2      	add	sl, r8
   1abd0:	44d1      	add	r9, sl
   1abd2:	44cb      	add	fp, r9
   1abd4:	428f      	cmp	r7, r1
   1abd6:	41bf      	sbcs	r7, r7
   1abd8:	45c2      	cmp	sl, r8
   1abda:	4189      	sbcs	r1, r1
   1abdc:	4599      	cmp	r9, r3
   1abde:	419b      	sbcs	r3, r3
   1abe0:	4593      	cmp	fp, r2
   1abe2:	4192      	sbcs	r2, r2
   1abe4:	427f      	negs	r7, r7
   1abe6:	4249      	negs	r1, r1
   1abe8:	0c2d      	lsrs	r5, r5, #16
   1abea:	4252      	negs	r2, r2
   1abec:	430f      	orrs	r7, r1
   1abee:	425b      	negs	r3, r3
   1abf0:	4313      	orrs	r3, r2
   1abf2:	197f      	adds	r7, r7, r5
   1abf4:	18ff      	adds	r7, r7, r3
   1abf6:	465b      	mov	r3, fp
   1abf8:	193c      	adds	r4, r7, r4
   1abfa:	0ddb      	lsrs	r3, r3, #23
   1abfc:	9a05      	ldr	r2, [sp, #20]
   1abfe:	0264      	lsls	r4, r4, #9
   1ac00:	431c      	orrs	r4, r3
   1ac02:	0243      	lsls	r3, r0, #9
   1ac04:	4313      	orrs	r3, r2
   1ac06:	1e5d      	subs	r5, r3, #1
   1ac08:	41ab      	sbcs	r3, r5
   1ac0a:	465a      	mov	r2, fp
   1ac0c:	0dc0      	lsrs	r0, r0, #23
   1ac0e:	4303      	orrs	r3, r0
   1ac10:	0252      	lsls	r2, r2, #9
   1ac12:	4313      	orrs	r3, r2
   1ac14:	01e2      	lsls	r2, r4, #7
   1ac16:	d556      	bpl.n	1acc6 <__aeabi_dmul+0x426>
   1ac18:	2001      	movs	r0, #1
   1ac1a:	085a      	lsrs	r2, r3, #1
   1ac1c:	4003      	ands	r3, r0
   1ac1e:	4313      	orrs	r3, r2
   1ac20:	07e2      	lsls	r2, r4, #31
   1ac22:	4313      	orrs	r3, r2
   1ac24:	0864      	lsrs	r4, r4, #1
   1ac26:	485a      	ldr	r0, [pc, #360]	; (1ad90 <__aeabi_dmul+0x4f0>)
   1ac28:	4460      	add	r0, ip
   1ac2a:	2800      	cmp	r0, #0
   1ac2c:	dd4d      	ble.n	1acca <__aeabi_dmul+0x42a>
   1ac2e:	075a      	lsls	r2, r3, #29
   1ac30:	d009      	beq.n	1ac46 <__aeabi_dmul+0x3a6>
   1ac32:	220f      	movs	r2, #15
   1ac34:	401a      	ands	r2, r3
   1ac36:	2a04      	cmp	r2, #4
   1ac38:	d005      	beq.n	1ac46 <__aeabi_dmul+0x3a6>
   1ac3a:	1d1a      	adds	r2, r3, #4
   1ac3c:	429a      	cmp	r2, r3
   1ac3e:	419b      	sbcs	r3, r3
   1ac40:	425b      	negs	r3, r3
   1ac42:	18e4      	adds	r4, r4, r3
   1ac44:	0013      	movs	r3, r2
   1ac46:	01e2      	lsls	r2, r4, #7
   1ac48:	d504      	bpl.n	1ac54 <__aeabi_dmul+0x3b4>
   1ac4a:	2080      	movs	r0, #128	; 0x80
   1ac4c:	4a51      	ldr	r2, [pc, #324]	; (1ad94 <__aeabi_dmul+0x4f4>)
   1ac4e:	00c0      	lsls	r0, r0, #3
   1ac50:	4014      	ands	r4, r2
   1ac52:	4460      	add	r0, ip
   1ac54:	4a50      	ldr	r2, [pc, #320]	; (1ad98 <__aeabi_dmul+0x4f8>)
   1ac56:	4290      	cmp	r0, r2
   1ac58:	dd00      	ble.n	1ac5c <__aeabi_dmul+0x3bc>
   1ac5a:	e6e3      	b.n	1aa24 <__aeabi_dmul+0x184>
   1ac5c:	2501      	movs	r5, #1
   1ac5e:	08db      	lsrs	r3, r3, #3
   1ac60:	0762      	lsls	r2, r4, #29
   1ac62:	431a      	orrs	r2, r3
   1ac64:	0264      	lsls	r4, r4, #9
   1ac66:	9b01      	ldr	r3, [sp, #4]
   1ac68:	4691      	mov	r9, r2
   1ac6a:	0b22      	lsrs	r2, r4, #12
   1ac6c:	0544      	lsls	r4, r0, #21
   1ac6e:	0d64      	lsrs	r4, r4, #21
   1ac70:	401d      	ands	r5, r3
   1ac72:	e67c      	b.n	1a96e <__aeabi_dmul+0xce>
   1ac74:	2280      	movs	r2, #128	; 0x80
   1ac76:	4659      	mov	r1, fp
   1ac78:	0312      	lsls	r2, r2, #12
   1ac7a:	4211      	tst	r1, r2
   1ac7c:	d008      	beq.n	1ac90 <__aeabi_dmul+0x3f0>
   1ac7e:	4214      	tst	r4, r2
   1ac80:	d106      	bne.n	1ac90 <__aeabi_dmul+0x3f0>
   1ac82:	4322      	orrs	r2, r4
   1ac84:	0312      	lsls	r2, r2, #12
   1ac86:	0b12      	lsrs	r2, r2, #12
   1ac88:	4645      	mov	r5, r8
   1ac8a:	4699      	mov	r9, r3
   1ac8c:	4c43      	ldr	r4, [pc, #268]	; (1ad9c <__aeabi_dmul+0x4fc>)
   1ac8e:	e66e      	b.n	1a96e <__aeabi_dmul+0xce>
   1ac90:	465b      	mov	r3, fp
   1ac92:	431a      	orrs	r2, r3
   1ac94:	0312      	lsls	r2, r2, #12
   1ac96:	0b12      	lsrs	r2, r2, #12
   1ac98:	4c40      	ldr	r4, [pc, #256]	; (1ad9c <__aeabi_dmul+0x4fc>)
   1ac9a:	e668      	b.n	1a96e <__aeabi_dmul+0xce>
   1ac9c:	0003      	movs	r3, r0
   1ac9e:	4654      	mov	r4, sl
   1aca0:	3b28      	subs	r3, #40	; 0x28
   1aca2:	409c      	lsls	r4, r3
   1aca4:	2300      	movs	r3, #0
   1aca6:	e6b9      	b.n	1aa1c <__aeabi_dmul+0x17c>
   1aca8:	f000 fbfc 	bl	1b4a4 <__clzsi2>
   1acac:	3020      	adds	r0, #32
   1acae:	e6a6      	b.n	1a9fe <__aeabi_dmul+0x15e>
   1acb0:	0003      	movs	r3, r0
   1acb2:	3b28      	subs	r3, #40	; 0x28
   1acb4:	409f      	lsls	r7, r3
   1acb6:	2300      	movs	r3, #0
   1acb8:	46bb      	mov	fp, r7
   1acba:	4699      	mov	r9, r3
   1acbc:	e68a      	b.n	1a9d4 <__aeabi_dmul+0x134>
   1acbe:	f000 fbf1 	bl	1b4a4 <__clzsi2>
   1acc2:	3020      	adds	r0, #32
   1acc4:	e674      	b.n	1a9b0 <__aeabi_dmul+0x110>
   1acc6:	46b4      	mov	ip, r6
   1acc8:	e7ad      	b.n	1ac26 <__aeabi_dmul+0x386>
   1acca:	2501      	movs	r5, #1
   1accc:	1a2a      	subs	r2, r5, r0
   1acce:	2a38      	cmp	r2, #56	; 0x38
   1acd0:	dd06      	ble.n	1ace0 <__aeabi_dmul+0x440>
   1acd2:	9b01      	ldr	r3, [sp, #4]
   1acd4:	2400      	movs	r4, #0
   1acd6:	401d      	ands	r5, r3
   1acd8:	2300      	movs	r3, #0
   1acda:	2200      	movs	r2, #0
   1acdc:	4699      	mov	r9, r3
   1acde:	e646      	b.n	1a96e <__aeabi_dmul+0xce>
   1ace0:	2a1f      	cmp	r2, #31
   1ace2:	dc21      	bgt.n	1ad28 <__aeabi_dmul+0x488>
   1ace4:	2520      	movs	r5, #32
   1ace6:	0020      	movs	r0, r4
   1ace8:	1aad      	subs	r5, r5, r2
   1acea:	001e      	movs	r6, r3
   1acec:	40ab      	lsls	r3, r5
   1acee:	40a8      	lsls	r0, r5
   1acf0:	40d6      	lsrs	r6, r2
   1acf2:	1e5d      	subs	r5, r3, #1
   1acf4:	41ab      	sbcs	r3, r5
   1acf6:	4330      	orrs	r0, r6
   1acf8:	4318      	orrs	r0, r3
   1acfa:	40d4      	lsrs	r4, r2
   1acfc:	0743      	lsls	r3, r0, #29
   1acfe:	d009      	beq.n	1ad14 <__aeabi_dmul+0x474>
   1ad00:	230f      	movs	r3, #15
   1ad02:	4003      	ands	r3, r0
   1ad04:	2b04      	cmp	r3, #4
   1ad06:	d005      	beq.n	1ad14 <__aeabi_dmul+0x474>
   1ad08:	0003      	movs	r3, r0
   1ad0a:	1d18      	adds	r0, r3, #4
   1ad0c:	4298      	cmp	r0, r3
   1ad0e:	419b      	sbcs	r3, r3
   1ad10:	425b      	negs	r3, r3
   1ad12:	18e4      	adds	r4, r4, r3
   1ad14:	0223      	lsls	r3, r4, #8
   1ad16:	d521      	bpl.n	1ad5c <__aeabi_dmul+0x4bc>
   1ad18:	2501      	movs	r5, #1
   1ad1a:	9b01      	ldr	r3, [sp, #4]
   1ad1c:	2401      	movs	r4, #1
   1ad1e:	401d      	ands	r5, r3
   1ad20:	2300      	movs	r3, #0
   1ad22:	2200      	movs	r2, #0
   1ad24:	4699      	mov	r9, r3
   1ad26:	e622      	b.n	1a96e <__aeabi_dmul+0xce>
   1ad28:	251f      	movs	r5, #31
   1ad2a:	0021      	movs	r1, r4
   1ad2c:	426d      	negs	r5, r5
   1ad2e:	1a28      	subs	r0, r5, r0
   1ad30:	40c1      	lsrs	r1, r0
   1ad32:	0008      	movs	r0, r1
   1ad34:	2a20      	cmp	r2, #32
   1ad36:	d01d      	beq.n	1ad74 <__aeabi_dmul+0x4d4>
   1ad38:	355f      	adds	r5, #95	; 0x5f
   1ad3a:	1aaa      	subs	r2, r5, r2
   1ad3c:	4094      	lsls	r4, r2
   1ad3e:	4323      	orrs	r3, r4
   1ad40:	1e5c      	subs	r4, r3, #1
   1ad42:	41a3      	sbcs	r3, r4
   1ad44:	2507      	movs	r5, #7
   1ad46:	4303      	orrs	r3, r0
   1ad48:	401d      	ands	r5, r3
   1ad4a:	2200      	movs	r2, #0
   1ad4c:	2d00      	cmp	r5, #0
   1ad4e:	d009      	beq.n	1ad64 <__aeabi_dmul+0x4c4>
   1ad50:	220f      	movs	r2, #15
   1ad52:	2400      	movs	r4, #0
   1ad54:	401a      	ands	r2, r3
   1ad56:	0018      	movs	r0, r3
   1ad58:	2a04      	cmp	r2, #4
   1ad5a:	d1d6      	bne.n	1ad0a <__aeabi_dmul+0x46a>
   1ad5c:	0003      	movs	r3, r0
   1ad5e:	0765      	lsls	r5, r4, #29
   1ad60:	0264      	lsls	r4, r4, #9
   1ad62:	0b22      	lsrs	r2, r4, #12
   1ad64:	08db      	lsrs	r3, r3, #3
   1ad66:	432b      	orrs	r3, r5
   1ad68:	2501      	movs	r5, #1
   1ad6a:	4699      	mov	r9, r3
   1ad6c:	9b01      	ldr	r3, [sp, #4]
   1ad6e:	2400      	movs	r4, #0
   1ad70:	401d      	ands	r5, r3
   1ad72:	e5fc      	b.n	1a96e <__aeabi_dmul+0xce>
   1ad74:	2400      	movs	r4, #0
   1ad76:	e7e2      	b.n	1ad3e <__aeabi_dmul+0x49e>
   1ad78:	2280      	movs	r2, #128	; 0x80
   1ad7a:	2501      	movs	r5, #1
   1ad7c:	0312      	lsls	r2, r2, #12
   1ad7e:	4322      	orrs	r2, r4
   1ad80:	9901      	ldr	r1, [sp, #4]
   1ad82:	0312      	lsls	r2, r2, #12
   1ad84:	0b12      	lsrs	r2, r2, #12
   1ad86:	400d      	ands	r5, r1
   1ad88:	4699      	mov	r9, r3
   1ad8a:	4c04      	ldr	r4, [pc, #16]	; (1ad9c <__aeabi_dmul+0x4fc>)
   1ad8c:	e5ef      	b.n	1a96e <__aeabi_dmul+0xce>
   1ad8e:	46c0      	nop			; (mov r8, r8)
   1ad90:	000003ff 	.word	0x000003ff
   1ad94:	feffffff 	.word	0xfeffffff
   1ad98:	000007fe 	.word	0x000007fe
   1ad9c:	000007ff 	.word	0x000007ff

0001ada0 <__aeabi_dsub>:
   1ada0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ada2:	4646      	mov	r6, r8
   1ada4:	46d6      	mov	lr, sl
   1ada6:	464f      	mov	r7, r9
   1ada8:	030c      	lsls	r4, r1, #12
   1adaa:	b5c0      	push	{r6, r7, lr}
   1adac:	0fcd      	lsrs	r5, r1, #31
   1adae:	004e      	lsls	r6, r1, #1
   1adb0:	0a61      	lsrs	r1, r4, #9
   1adb2:	0f44      	lsrs	r4, r0, #29
   1adb4:	430c      	orrs	r4, r1
   1adb6:	00c1      	lsls	r1, r0, #3
   1adb8:	0058      	lsls	r0, r3, #1
   1adba:	0d40      	lsrs	r0, r0, #21
   1adbc:	4684      	mov	ip, r0
   1adbe:	468a      	mov	sl, r1
   1adc0:	000f      	movs	r7, r1
   1adc2:	0319      	lsls	r1, r3, #12
   1adc4:	0f50      	lsrs	r0, r2, #29
   1adc6:	0a49      	lsrs	r1, r1, #9
   1adc8:	4301      	orrs	r1, r0
   1adca:	48c6      	ldr	r0, [pc, #792]	; (1b0e4 <__aeabi_dsub+0x344>)
   1adcc:	0d76      	lsrs	r6, r6, #21
   1adce:	46a8      	mov	r8, r5
   1add0:	0fdb      	lsrs	r3, r3, #31
   1add2:	00d2      	lsls	r2, r2, #3
   1add4:	4584      	cmp	ip, r0
   1add6:	d100      	bne.n	1adda <__aeabi_dsub+0x3a>
   1add8:	e0d8      	b.n	1af8c <__aeabi_dsub+0x1ec>
   1adda:	2001      	movs	r0, #1
   1addc:	4043      	eors	r3, r0
   1adde:	42ab      	cmp	r3, r5
   1ade0:	d100      	bne.n	1ade4 <__aeabi_dsub+0x44>
   1ade2:	e0a6      	b.n	1af32 <__aeabi_dsub+0x192>
   1ade4:	4660      	mov	r0, ip
   1ade6:	1a35      	subs	r5, r6, r0
   1ade8:	2d00      	cmp	r5, #0
   1adea:	dc00      	bgt.n	1adee <__aeabi_dsub+0x4e>
   1adec:	e105      	b.n	1affa <__aeabi_dsub+0x25a>
   1adee:	2800      	cmp	r0, #0
   1adf0:	d110      	bne.n	1ae14 <__aeabi_dsub+0x74>
   1adf2:	000b      	movs	r3, r1
   1adf4:	4313      	orrs	r3, r2
   1adf6:	d100      	bne.n	1adfa <__aeabi_dsub+0x5a>
   1adf8:	e0d7      	b.n	1afaa <__aeabi_dsub+0x20a>
   1adfa:	1e6b      	subs	r3, r5, #1
   1adfc:	2b00      	cmp	r3, #0
   1adfe:	d000      	beq.n	1ae02 <__aeabi_dsub+0x62>
   1ae00:	e14b      	b.n	1b09a <__aeabi_dsub+0x2fa>
   1ae02:	4653      	mov	r3, sl
   1ae04:	1a9f      	subs	r7, r3, r2
   1ae06:	45ba      	cmp	sl, r7
   1ae08:	4180      	sbcs	r0, r0
   1ae0a:	1a64      	subs	r4, r4, r1
   1ae0c:	4240      	negs	r0, r0
   1ae0e:	1a24      	subs	r4, r4, r0
   1ae10:	2601      	movs	r6, #1
   1ae12:	e01e      	b.n	1ae52 <__aeabi_dsub+0xb2>
   1ae14:	4bb3      	ldr	r3, [pc, #716]	; (1b0e4 <__aeabi_dsub+0x344>)
   1ae16:	429e      	cmp	r6, r3
   1ae18:	d048      	beq.n	1aeac <__aeabi_dsub+0x10c>
   1ae1a:	2380      	movs	r3, #128	; 0x80
   1ae1c:	041b      	lsls	r3, r3, #16
   1ae1e:	4319      	orrs	r1, r3
   1ae20:	2d38      	cmp	r5, #56	; 0x38
   1ae22:	dd00      	ble.n	1ae26 <__aeabi_dsub+0x86>
   1ae24:	e119      	b.n	1b05a <__aeabi_dsub+0x2ba>
   1ae26:	2d1f      	cmp	r5, #31
   1ae28:	dd00      	ble.n	1ae2c <__aeabi_dsub+0x8c>
   1ae2a:	e14c      	b.n	1b0c6 <__aeabi_dsub+0x326>
   1ae2c:	2320      	movs	r3, #32
   1ae2e:	000f      	movs	r7, r1
   1ae30:	1b5b      	subs	r3, r3, r5
   1ae32:	0010      	movs	r0, r2
   1ae34:	409a      	lsls	r2, r3
   1ae36:	409f      	lsls	r7, r3
   1ae38:	40e8      	lsrs	r0, r5
   1ae3a:	1e53      	subs	r3, r2, #1
   1ae3c:	419a      	sbcs	r2, r3
   1ae3e:	40e9      	lsrs	r1, r5
   1ae40:	4307      	orrs	r7, r0
   1ae42:	4317      	orrs	r7, r2
   1ae44:	4653      	mov	r3, sl
   1ae46:	1bdf      	subs	r7, r3, r7
   1ae48:	1a61      	subs	r1, r4, r1
   1ae4a:	45ba      	cmp	sl, r7
   1ae4c:	41a4      	sbcs	r4, r4
   1ae4e:	4264      	negs	r4, r4
   1ae50:	1b0c      	subs	r4, r1, r4
   1ae52:	0223      	lsls	r3, r4, #8
   1ae54:	d400      	bmi.n	1ae58 <__aeabi_dsub+0xb8>
   1ae56:	e0c5      	b.n	1afe4 <__aeabi_dsub+0x244>
   1ae58:	0264      	lsls	r4, r4, #9
   1ae5a:	0a65      	lsrs	r5, r4, #9
   1ae5c:	2d00      	cmp	r5, #0
   1ae5e:	d100      	bne.n	1ae62 <__aeabi_dsub+0xc2>
   1ae60:	e0f6      	b.n	1b050 <__aeabi_dsub+0x2b0>
   1ae62:	0028      	movs	r0, r5
   1ae64:	f000 fb1e 	bl	1b4a4 <__clzsi2>
   1ae68:	0003      	movs	r3, r0
   1ae6a:	3b08      	subs	r3, #8
   1ae6c:	2b1f      	cmp	r3, #31
   1ae6e:	dd00      	ble.n	1ae72 <__aeabi_dsub+0xd2>
   1ae70:	e0e9      	b.n	1b046 <__aeabi_dsub+0x2a6>
   1ae72:	2220      	movs	r2, #32
   1ae74:	003c      	movs	r4, r7
   1ae76:	1ad2      	subs	r2, r2, r3
   1ae78:	409d      	lsls	r5, r3
   1ae7a:	40d4      	lsrs	r4, r2
   1ae7c:	409f      	lsls	r7, r3
   1ae7e:	4325      	orrs	r5, r4
   1ae80:	429e      	cmp	r6, r3
   1ae82:	dd00      	ble.n	1ae86 <__aeabi_dsub+0xe6>
   1ae84:	e0db      	b.n	1b03e <__aeabi_dsub+0x29e>
   1ae86:	1b9e      	subs	r6, r3, r6
   1ae88:	1c73      	adds	r3, r6, #1
   1ae8a:	2b1f      	cmp	r3, #31
   1ae8c:	dd00      	ble.n	1ae90 <__aeabi_dsub+0xf0>
   1ae8e:	e10a      	b.n	1b0a6 <__aeabi_dsub+0x306>
   1ae90:	2220      	movs	r2, #32
   1ae92:	0038      	movs	r0, r7
   1ae94:	1ad2      	subs	r2, r2, r3
   1ae96:	0029      	movs	r1, r5
   1ae98:	4097      	lsls	r7, r2
   1ae9a:	002c      	movs	r4, r5
   1ae9c:	4091      	lsls	r1, r2
   1ae9e:	40d8      	lsrs	r0, r3
   1aea0:	1e7a      	subs	r2, r7, #1
   1aea2:	4197      	sbcs	r7, r2
   1aea4:	40dc      	lsrs	r4, r3
   1aea6:	2600      	movs	r6, #0
   1aea8:	4301      	orrs	r1, r0
   1aeaa:	430f      	orrs	r7, r1
   1aeac:	077b      	lsls	r3, r7, #29
   1aeae:	d009      	beq.n	1aec4 <__aeabi_dsub+0x124>
   1aeb0:	230f      	movs	r3, #15
   1aeb2:	403b      	ands	r3, r7
   1aeb4:	2b04      	cmp	r3, #4
   1aeb6:	d005      	beq.n	1aec4 <__aeabi_dsub+0x124>
   1aeb8:	1d3b      	adds	r3, r7, #4
   1aeba:	42bb      	cmp	r3, r7
   1aebc:	41bf      	sbcs	r7, r7
   1aebe:	427f      	negs	r7, r7
   1aec0:	19e4      	adds	r4, r4, r7
   1aec2:	001f      	movs	r7, r3
   1aec4:	0223      	lsls	r3, r4, #8
   1aec6:	d525      	bpl.n	1af14 <__aeabi_dsub+0x174>
   1aec8:	4b86      	ldr	r3, [pc, #536]	; (1b0e4 <__aeabi_dsub+0x344>)
   1aeca:	3601      	adds	r6, #1
   1aecc:	429e      	cmp	r6, r3
   1aece:	d100      	bne.n	1aed2 <__aeabi_dsub+0x132>
   1aed0:	e0af      	b.n	1b032 <__aeabi_dsub+0x292>
   1aed2:	4b85      	ldr	r3, [pc, #532]	; (1b0e8 <__aeabi_dsub+0x348>)
   1aed4:	2501      	movs	r5, #1
   1aed6:	401c      	ands	r4, r3
   1aed8:	4643      	mov	r3, r8
   1aeda:	0762      	lsls	r2, r4, #29
   1aedc:	08ff      	lsrs	r7, r7, #3
   1aede:	0264      	lsls	r4, r4, #9
   1aee0:	0576      	lsls	r6, r6, #21
   1aee2:	4317      	orrs	r7, r2
   1aee4:	0b24      	lsrs	r4, r4, #12
   1aee6:	0d76      	lsrs	r6, r6, #21
   1aee8:	401d      	ands	r5, r3
   1aeea:	2100      	movs	r1, #0
   1aeec:	0324      	lsls	r4, r4, #12
   1aeee:	0b23      	lsrs	r3, r4, #12
   1aef0:	0d0c      	lsrs	r4, r1, #20
   1aef2:	4a7e      	ldr	r2, [pc, #504]	; (1b0ec <__aeabi_dsub+0x34c>)
   1aef4:	0524      	lsls	r4, r4, #20
   1aef6:	431c      	orrs	r4, r3
   1aef8:	4014      	ands	r4, r2
   1aefa:	0533      	lsls	r3, r6, #20
   1aefc:	4323      	orrs	r3, r4
   1aefe:	005b      	lsls	r3, r3, #1
   1af00:	07ed      	lsls	r5, r5, #31
   1af02:	085b      	lsrs	r3, r3, #1
   1af04:	432b      	orrs	r3, r5
   1af06:	0038      	movs	r0, r7
   1af08:	0019      	movs	r1, r3
   1af0a:	bc1c      	pop	{r2, r3, r4}
   1af0c:	4690      	mov	r8, r2
   1af0e:	4699      	mov	r9, r3
   1af10:	46a2      	mov	sl, r4
   1af12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1af14:	2501      	movs	r5, #1
   1af16:	4643      	mov	r3, r8
   1af18:	0762      	lsls	r2, r4, #29
   1af1a:	08ff      	lsrs	r7, r7, #3
   1af1c:	4317      	orrs	r7, r2
   1af1e:	08e4      	lsrs	r4, r4, #3
   1af20:	401d      	ands	r5, r3
   1af22:	4b70      	ldr	r3, [pc, #448]	; (1b0e4 <__aeabi_dsub+0x344>)
   1af24:	429e      	cmp	r6, r3
   1af26:	d036      	beq.n	1af96 <__aeabi_dsub+0x1f6>
   1af28:	0324      	lsls	r4, r4, #12
   1af2a:	0576      	lsls	r6, r6, #21
   1af2c:	0b24      	lsrs	r4, r4, #12
   1af2e:	0d76      	lsrs	r6, r6, #21
   1af30:	e7db      	b.n	1aeea <__aeabi_dsub+0x14a>
   1af32:	4663      	mov	r3, ip
   1af34:	1af3      	subs	r3, r6, r3
   1af36:	2b00      	cmp	r3, #0
   1af38:	dc00      	bgt.n	1af3c <__aeabi_dsub+0x19c>
   1af3a:	e094      	b.n	1b066 <__aeabi_dsub+0x2c6>
   1af3c:	4660      	mov	r0, ip
   1af3e:	2800      	cmp	r0, #0
   1af40:	d035      	beq.n	1afae <__aeabi_dsub+0x20e>
   1af42:	4868      	ldr	r0, [pc, #416]	; (1b0e4 <__aeabi_dsub+0x344>)
   1af44:	4286      	cmp	r6, r0
   1af46:	d0b1      	beq.n	1aeac <__aeabi_dsub+0x10c>
   1af48:	2780      	movs	r7, #128	; 0x80
   1af4a:	043f      	lsls	r7, r7, #16
   1af4c:	4339      	orrs	r1, r7
   1af4e:	2b38      	cmp	r3, #56	; 0x38
   1af50:	dc00      	bgt.n	1af54 <__aeabi_dsub+0x1b4>
   1af52:	e0fd      	b.n	1b150 <__aeabi_dsub+0x3b0>
   1af54:	430a      	orrs	r2, r1
   1af56:	0017      	movs	r7, r2
   1af58:	2100      	movs	r1, #0
   1af5a:	1e7a      	subs	r2, r7, #1
   1af5c:	4197      	sbcs	r7, r2
   1af5e:	4457      	add	r7, sl
   1af60:	4557      	cmp	r7, sl
   1af62:	4180      	sbcs	r0, r0
   1af64:	1909      	adds	r1, r1, r4
   1af66:	4244      	negs	r4, r0
   1af68:	190c      	adds	r4, r1, r4
   1af6a:	0223      	lsls	r3, r4, #8
   1af6c:	d53a      	bpl.n	1afe4 <__aeabi_dsub+0x244>
   1af6e:	4b5d      	ldr	r3, [pc, #372]	; (1b0e4 <__aeabi_dsub+0x344>)
   1af70:	3601      	adds	r6, #1
   1af72:	429e      	cmp	r6, r3
   1af74:	d100      	bne.n	1af78 <__aeabi_dsub+0x1d8>
   1af76:	e14b      	b.n	1b210 <__aeabi_dsub+0x470>
   1af78:	2201      	movs	r2, #1
   1af7a:	4b5b      	ldr	r3, [pc, #364]	; (1b0e8 <__aeabi_dsub+0x348>)
   1af7c:	401c      	ands	r4, r3
   1af7e:	087b      	lsrs	r3, r7, #1
   1af80:	4017      	ands	r7, r2
   1af82:	431f      	orrs	r7, r3
   1af84:	07e2      	lsls	r2, r4, #31
   1af86:	4317      	orrs	r7, r2
   1af88:	0864      	lsrs	r4, r4, #1
   1af8a:	e78f      	b.n	1aeac <__aeabi_dsub+0x10c>
   1af8c:	0008      	movs	r0, r1
   1af8e:	4310      	orrs	r0, r2
   1af90:	d000      	beq.n	1af94 <__aeabi_dsub+0x1f4>
   1af92:	e724      	b.n	1adde <__aeabi_dsub+0x3e>
   1af94:	e721      	b.n	1adda <__aeabi_dsub+0x3a>
   1af96:	0023      	movs	r3, r4
   1af98:	433b      	orrs	r3, r7
   1af9a:	d100      	bne.n	1af9e <__aeabi_dsub+0x1fe>
   1af9c:	e1b9      	b.n	1b312 <__aeabi_dsub+0x572>
   1af9e:	2280      	movs	r2, #128	; 0x80
   1afa0:	0312      	lsls	r2, r2, #12
   1afa2:	4314      	orrs	r4, r2
   1afa4:	0324      	lsls	r4, r4, #12
   1afa6:	0b24      	lsrs	r4, r4, #12
   1afa8:	e79f      	b.n	1aeea <__aeabi_dsub+0x14a>
   1afaa:	002e      	movs	r6, r5
   1afac:	e77e      	b.n	1aeac <__aeabi_dsub+0x10c>
   1afae:	0008      	movs	r0, r1
   1afb0:	4310      	orrs	r0, r2
   1afb2:	d100      	bne.n	1afb6 <__aeabi_dsub+0x216>
   1afb4:	e0ca      	b.n	1b14c <__aeabi_dsub+0x3ac>
   1afb6:	1e58      	subs	r0, r3, #1
   1afb8:	4684      	mov	ip, r0
   1afba:	2800      	cmp	r0, #0
   1afbc:	d000      	beq.n	1afc0 <__aeabi_dsub+0x220>
   1afbe:	e0e7      	b.n	1b190 <__aeabi_dsub+0x3f0>
   1afc0:	4452      	add	r2, sl
   1afc2:	4552      	cmp	r2, sl
   1afc4:	4180      	sbcs	r0, r0
   1afc6:	1864      	adds	r4, r4, r1
   1afc8:	4240      	negs	r0, r0
   1afca:	1824      	adds	r4, r4, r0
   1afcc:	0017      	movs	r7, r2
   1afce:	2601      	movs	r6, #1
   1afd0:	0223      	lsls	r3, r4, #8
   1afd2:	d507      	bpl.n	1afe4 <__aeabi_dsub+0x244>
   1afd4:	2602      	movs	r6, #2
   1afd6:	e7cf      	b.n	1af78 <__aeabi_dsub+0x1d8>
   1afd8:	4664      	mov	r4, ip
   1afda:	432c      	orrs	r4, r5
   1afdc:	d100      	bne.n	1afe0 <__aeabi_dsub+0x240>
   1afde:	e1b3      	b.n	1b348 <__aeabi_dsub+0x5a8>
   1afe0:	002c      	movs	r4, r5
   1afe2:	4667      	mov	r7, ip
   1afe4:	077b      	lsls	r3, r7, #29
   1afe6:	d000      	beq.n	1afea <__aeabi_dsub+0x24a>
   1afe8:	e762      	b.n	1aeb0 <__aeabi_dsub+0x110>
   1afea:	0763      	lsls	r3, r4, #29
   1afec:	08ff      	lsrs	r7, r7, #3
   1afee:	431f      	orrs	r7, r3
   1aff0:	2501      	movs	r5, #1
   1aff2:	4643      	mov	r3, r8
   1aff4:	08e4      	lsrs	r4, r4, #3
   1aff6:	401d      	ands	r5, r3
   1aff8:	e793      	b.n	1af22 <__aeabi_dsub+0x182>
   1affa:	2d00      	cmp	r5, #0
   1affc:	d178      	bne.n	1b0f0 <__aeabi_dsub+0x350>
   1affe:	1c75      	adds	r5, r6, #1
   1b000:	056d      	lsls	r5, r5, #21
   1b002:	0d6d      	lsrs	r5, r5, #21
   1b004:	2d01      	cmp	r5, #1
   1b006:	dc00      	bgt.n	1b00a <__aeabi_dsub+0x26a>
   1b008:	e0f2      	b.n	1b1f0 <__aeabi_dsub+0x450>
   1b00a:	4650      	mov	r0, sl
   1b00c:	1a80      	subs	r0, r0, r2
   1b00e:	4582      	cmp	sl, r0
   1b010:	41bf      	sbcs	r7, r7
   1b012:	1a65      	subs	r5, r4, r1
   1b014:	427f      	negs	r7, r7
   1b016:	1bed      	subs	r5, r5, r7
   1b018:	4684      	mov	ip, r0
   1b01a:	0228      	lsls	r0, r5, #8
   1b01c:	d400      	bmi.n	1b020 <__aeabi_dsub+0x280>
   1b01e:	e08c      	b.n	1b13a <__aeabi_dsub+0x39a>
   1b020:	4650      	mov	r0, sl
   1b022:	1a17      	subs	r7, r2, r0
   1b024:	42ba      	cmp	r2, r7
   1b026:	4192      	sbcs	r2, r2
   1b028:	1b0c      	subs	r4, r1, r4
   1b02a:	4255      	negs	r5, r2
   1b02c:	1b65      	subs	r5, r4, r5
   1b02e:	4698      	mov	r8, r3
   1b030:	e714      	b.n	1ae5c <__aeabi_dsub+0xbc>
   1b032:	2501      	movs	r5, #1
   1b034:	4643      	mov	r3, r8
   1b036:	2400      	movs	r4, #0
   1b038:	401d      	ands	r5, r3
   1b03a:	2700      	movs	r7, #0
   1b03c:	e755      	b.n	1aeea <__aeabi_dsub+0x14a>
   1b03e:	4c2a      	ldr	r4, [pc, #168]	; (1b0e8 <__aeabi_dsub+0x348>)
   1b040:	1af6      	subs	r6, r6, r3
   1b042:	402c      	ands	r4, r5
   1b044:	e732      	b.n	1aeac <__aeabi_dsub+0x10c>
   1b046:	003d      	movs	r5, r7
   1b048:	3828      	subs	r0, #40	; 0x28
   1b04a:	4085      	lsls	r5, r0
   1b04c:	2700      	movs	r7, #0
   1b04e:	e717      	b.n	1ae80 <__aeabi_dsub+0xe0>
   1b050:	0038      	movs	r0, r7
   1b052:	f000 fa27 	bl	1b4a4 <__clzsi2>
   1b056:	3020      	adds	r0, #32
   1b058:	e706      	b.n	1ae68 <__aeabi_dsub+0xc8>
   1b05a:	430a      	orrs	r2, r1
   1b05c:	0017      	movs	r7, r2
   1b05e:	2100      	movs	r1, #0
   1b060:	1e7a      	subs	r2, r7, #1
   1b062:	4197      	sbcs	r7, r2
   1b064:	e6ee      	b.n	1ae44 <__aeabi_dsub+0xa4>
   1b066:	2b00      	cmp	r3, #0
   1b068:	d000      	beq.n	1b06c <__aeabi_dsub+0x2cc>
   1b06a:	e0e5      	b.n	1b238 <__aeabi_dsub+0x498>
   1b06c:	1c73      	adds	r3, r6, #1
   1b06e:	469c      	mov	ip, r3
   1b070:	055b      	lsls	r3, r3, #21
   1b072:	0d5b      	lsrs	r3, r3, #21
   1b074:	2b01      	cmp	r3, #1
   1b076:	dc00      	bgt.n	1b07a <__aeabi_dsub+0x2da>
   1b078:	e09f      	b.n	1b1ba <__aeabi_dsub+0x41a>
   1b07a:	4b1a      	ldr	r3, [pc, #104]	; (1b0e4 <__aeabi_dsub+0x344>)
   1b07c:	459c      	cmp	ip, r3
   1b07e:	d100      	bne.n	1b082 <__aeabi_dsub+0x2e2>
   1b080:	e0c5      	b.n	1b20e <__aeabi_dsub+0x46e>
   1b082:	4452      	add	r2, sl
   1b084:	4552      	cmp	r2, sl
   1b086:	4180      	sbcs	r0, r0
   1b088:	1864      	adds	r4, r4, r1
   1b08a:	4240      	negs	r0, r0
   1b08c:	1824      	adds	r4, r4, r0
   1b08e:	07e7      	lsls	r7, r4, #31
   1b090:	0852      	lsrs	r2, r2, #1
   1b092:	4317      	orrs	r7, r2
   1b094:	0864      	lsrs	r4, r4, #1
   1b096:	4666      	mov	r6, ip
   1b098:	e708      	b.n	1aeac <__aeabi_dsub+0x10c>
   1b09a:	4812      	ldr	r0, [pc, #72]	; (1b0e4 <__aeabi_dsub+0x344>)
   1b09c:	4285      	cmp	r5, r0
   1b09e:	d100      	bne.n	1b0a2 <__aeabi_dsub+0x302>
   1b0a0:	e085      	b.n	1b1ae <__aeabi_dsub+0x40e>
   1b0a2:	001d      	movs	r5, r3
   1b0a4:	e6bc      	b.n	1ae20 <__aeabi_dsub+0x80>
   1b0a6:	0029      	movs	r1, r5
   1b0a8:	3e1f      	subs	r6, #31
   1b0aa:	40f1      	lsrs	r1, r6
   1b0ac:	2b20      	cmp	r3, #32
   1b0ae:	d100      	bne.n	1b0b2 <__aeabi_dsub+0x312>
   1b0b0:	e07f      	b.n	1b1b2 <__aeabi_dsub+0x412>
   1b0b2:	2240      	movs	r2, #64	; 0x40
   1b0b4:	1ad3      	subs	r3, r2, r3
   1b0b6:	409d      	lsls	r5, r3
   1b0b8:	432f      	orrs	r7, r5
   1b0ba:	1e7d      	subs	r5, r7, #1
   1b0bc:	41af      	sbcs	r7, r5
   1b0be:	2400      	movs	r4, #0
   1b0c0:	430f      	orrs	r7, r1
   1b0c2:	2600      	movs	r6, #0
   1b0c4:	e78e      	b.n	1afe4 <__aeabi_dsub+0x244>
   1b0c6:	002b      	movs	r3, r5
   1b0c8:	000f      	movs	r7, r1
   1b0ca:	3b20      	subs	r3, #32
   1b0cc:	40df      	lsrs	r7, r3
   1b0ce:	2d20      	cmp	r5, #32
   1b0d0:	d071      	beq.n	1b1b6 <__aeabi_dsub+0x416>
   1b0d2:	2340      	movs	r3, #64	; 0x40
   1b0d4:	1b5d      	subs	r5, r3, r5
   1b0d6:	40a9      	lsls	r1, r5
   1b0d8:	430a      	orrs	r2, r1
   1b0da:	1e51      	subs	r1, r2, #1
   1b0dc:	418a      	sbcs	r2, r1
   1b0de:	2100      	movs	r1, #0
   1b0e0:	4317      	orrs	r7, r2
   1b0e2:	e6af      	b.n	1ae44 <__aeabi_dsub+0xa4>
   1b0e4:	000007ff 	.word	0x000007ff
   1b0e8:	ff7fffff 	.word	0xff7fffff
   1b0ec:	800fffff 	.word	0x800fffff
   1b0f0:	2e00      	cmp	r6, #0
   1b0f2:	d03e      	beq.n	1b172 <__aeabi_dsub+0x3d2>
   1b0f4:	4eb3      	ldr	r6, [pc, #716]	; (1b3c4 <__aeabi_dsub+0x624>)
   1b0f6:	45b4      	cmp	ip, r6
   1b0f8:	d045      	beq.n	1b186 <__aeabi_dsub+0x3e6>
   1b0fa:	2680      	movs	r6, #128	; 0x80
   1b0fc:	0436      	lsls	r6, r6, #16
   1b0fe:	426d      	negs	r5, r5
   1b100:	4334      	orrs	r4, r6
   1b102:	2d38      	cmp	r5, #56	; 0x38
   1b104:	dd00      	ble.n	1b108 <__aeabi_dsub+0x368>
   1b106:	e0a8      	b.n	1b25a <__aeabi_dsub+0x4ba>
   1b108:	2d1f      	cmp	r5, #31
   1b10a:	dd00      	ble.n	1b10e <__aeabi_dsub+0x36e>
   1b10c:	e11f      	b.n	1b34e <__aeabi_dsub+0x5ae>
   1b10e:	2620      	movs	r6, #32
   1b110:	0027      	movs	r7, r4
   1b112:	4650      	mov	r0, sl
   1b114:	1b76      	subs	r6, r6, r5
   1b116:	40b7      	lsls	r7, r6
   1b118:	40e8      	lsrs	r0, r5
   1b11a:	4307      	orrs	r7, r0
   1b11c:	4650      	mov	r0, sl
   1b11e:	40b0      	lsls	r0, r6
   1b120:	1e46      	subs	r6, r0, #1
   1b122:	41b0      	sbcs	r0, r6
   1b124:	40ec      	lsrs	r4, r5
   1b126:	4338      	orrs	r0, r7
   1b128:	1a17      	subs	r7, r2, r0
   1b12a:	42ba      	cmp	r2, r7
   1b12c:	4192      	sbcs	r2, r2
   1b12e:	1b0c      	subs	r4, r1, r4
   1b130:	4252      	negs	r2, r2
   1b132:	1aa4      	subs	r4, r4, r2
   1b134:	4666      	mov	r6, ip
   1b136:	4698      	mov	r8, r3
   1b138:	e68b      	b.n	1ae52 <__aeabi_dsub+0xb2>
   1b13a:	4664      	mov	r4, ip
   1b13c:	4667      	mov	r7, ip
   1b13e:	432c      	orrs	r4, r5
   1b140:	d000      	beq.n	1b144 <__aeabi_dsub+0x3a4>
   1b142:	e68b      	b.n	1ae5c <__aeabi_dsub+0xbc>
   1b144:	2500      	movs	r5, #0
   1b146:	2600      	movs	r6, #0
   1b148:	2700      	movs	r7, #0
   1b14a:	e6ea      	b.n	1af22 <__aeabi_dsub+0x182>
   1b14c:	001e      	movs	r6, r3
   1b14e:	e6ad      	b.n	1aeac <__aeabi_dsub+0x10c>
   1b150:	2b1f      	cmp	r3, #31
   1b152:	dc60      	bgt.n	1b216 <__aeabi_dsub+0x476>
   1b154:	2720      	movs	r7, #32
   1b156:	1af8      	subs	r0, r7, r3
   1b158:	000f      	movs	r7, r1
   1b15a:	4684      	mov	ip, r0
   1b15c:	4087      	lsls	r7, r0
   1b15e:	0010      	movs	r0, r2
   1b160:	40d8      	lsrs	r0, r3
   1b162:	4307      	orrs	r7, r0
   1b164:	4660      	mov	r0, ip
   1b166:	4082      	lsls	r2, r0
   1b168:	1e50      	subs	r0, r2, #1
   1b16a:	4182      	sbcs	r2, r0
   1b16c:	40d9      	lsrs	r1, r3
   1b16e:	4317      	orrs	r7, r2
   1b170:	e6f5      	b.n	1af5e <__aeabi_dsub+0x1be>
   1b172:	0026      	movs	r6, r4
   1b174:	4650      	mov	r0, sl
   1b176:	4306      	orrs	r6, r0
   1b178:	d005      	beq.n	1b186 <__aeabi_dsub+0x3e6>
   1b17a:	43ed      	mvns	r5, r5
   1b17c:	2d00      	cmp	r5, #0
   1b17e:	d0d3      	beq.n	1b128 <__aeabi_dsub+0x388>
   1b180:	4e90      	ldr	r6, [pc, #576]	; (1b3c4 <__aeabi_dsub+0x624>)
   1b182:	45b4      	cmp	ip, r6
   1b184:	d1bd      	bne.n	1b102 <__aeabi_dsub+0x362>
   1b186:	000c      	movs	r4, r1
   1b188:	0017      	movs	r7, r2
   1b18a:	4666      	mov	r6, ip
   1b18c:	4698      	mov	r8, r3
   1b18e:	e68d      	b.n	1aeac <__aeabi_dsub+0x10c>
   1b190:	488c      	ldr	r0, [pc, #560]	; (1b3c4 <__aeabi_dsub+0x624>)
   1b192:	4283      	cmp	r3, r0
   1b194:	d00b      	beq.n	1b1ae <__aeabi_dsub+0x40e>
   1b196:	4663      	mov	r3, ip
   1b198:	e6d9      	b.n	1af4e <__aeabi_dsub+0x1ae>
   1b19a:	2d00      	cmp	r5, #0
   1b19c:	d000      	beq.n	1b1a0 <__aeabi_dsub+0x400>
   1b19e:	e096      	b.n	1b2ce <__aeabi_dsub+0x52e>
   1b1a0:	0008      	movs	r0, r1
   1b1a2:	4310      	orrs	r0, r2
   1b1a4:	d100      	bne.n	1b1a8 <__aeabi_dsub+0x408>
   1b1a6:	e0e2      	b.n	1b36e <__aeabi_dsub+0x5ce>
   1b1a8:	000c      	movs	r4, r1
   1b1aa:	0017      	movs	r7, r2
   1b1ac:	4698      	mov	r8, r3
   1b1ae:	4e85      	ldr	r6, [pc, #532]	; (1b3c4 <__aeabi_dsub+0x624>)
   1b1b0:	e67c      	b.n	1aeac <__aeabi_dsub+0x10c>
   1b1b2:	2500      	movs	r5, #0
   1b1b4:	e780      	b.n	1b0b8 <__aeabi_dsub+0x318>
   1b1b6:	2100      	movs	r1, #0
   1b1b8:	e78e      	b.n	1b0d8 <__aeabi_dsub+0x338>
   1b1ba:	0023      	movs	r3, r4
   1b1bc:	4650      	mov	r0, sl
   1b1be:	4303      	orrs	r3, r0
   1b1c0:	2e00      	cmp	r6, #0
   1b1c2:	d000      	beq.n	1b1c6 <__aeabi_dsub+0x426>
   1b1c4:	e0a8      	b.n	1b318 <__aeabi_dsub+0x578>
   1b1c6:	2b00      	cmp	r3, #0
   1b1c8:	d100      	bne.n	1b1cc <__aeabi_dsub+0x42c>
   1b1ca:	e0de      	b.n	1b38a <__aeabi_dsub+0x5ea>
   1b1cc:	000b      	movs	r3, r1
   1b1ce:	4313      	orrs	r3, r2
   1b1d0:	d100      	bne.n	1b1d4 <__aeabi_dsub+0x434>
   1b1d2:	e66b      	b.n	1aeac <__aeabi_dsub+0x10c>
   1b1d4:	4452      	add	r2, sl
   1b1d6:	4552      	cmp	r2, sl
   1b1d8:	4180      	sbcs	r0, r0
   1b1da:	1864      	adds	r4, r4, r1
   1b1dc:	4240      	negs	r0, r0
   1b1de:	1824      	adds	r4, r4, r0
   1b1e0:	0017      	movs	r7, r2
   1b1e2:	0223      	lsls	r3, r4, #8
   1b1e4:	d400      	bmi.n	1b1e8 <__aeabi_dsub+0x448>
   1b1e6:	e6fd      	b.n	1afe4 <__aeabi_dsub+0x244>
   1b1e8:	4b77      	ldr	r3, [pc, #476]	; (1b3c8 <__aeabi_dsub+0x628>)
   1b1ea:	4666      	mov	r6, ip
   1b1ec:	401c      	ands	r4, r3
   1b1ee:	e65d      	b.n	1aeac <__aeabi_dsub+0x10c>
   1b1f0:	0025      	movs	r5, r4
   1b1f2:	4650      	mov	r0, sl
   1b1f4:	4305      	orrs	r5, r0
   1b1f6:	2e00      	cmp	r6, #0
   1b1f8:	d1cf      	bne.n	1b19a <__aeabi_dsub+0x3fa>
   1b1fa:	2d00      	cmp	r5, #0
   1b1fc:	d14f      	bne.n	1b29e <__aeabi_dsub+0x4fe>
   1b1fe:	000c      	movs	r4, r1
   1b200:	4314      	orrs	r4, r2
   1b202:	d100      	bne.n	1b206 <__aeabi_dsub+0x466>
   1b204:	e0a0      	b.n	1b348 <__aeabi_dsub+0x5a8>
   1b206:	000c      	movs	r4, r1
   1b208:	0017      	movs	r7, r2
   1b20a:	4698      	mov	r8, r3
   1b20c:	e64e      	b.n	1aeac <__aeabi_dsub+0x10c>
   1b20e:	4666      	mov	r6, ip
   1b210:	2400      	movs	r4, #0
   1b212:	2700      	movs	r7, #0
   1b214:	e685      	b.n	1af22 <__aeabi_dsub+0x182>
   1b216:	001f      	movs	r7, r3
   1b218:	0008      	movs	r0, r1
   1b21a:	3f20      	subs	r7, #32
   1b21c:	40f8      	lsrs	r0, r7
   1b21e:	0007      	movs	r7, r0
   1b220:	2b20      	cmp	r3, #32
   1b222:	d100      	bne.n	1b226 <__aeabi_dsub+0x486>
   1b224:	e08e      	b.n	1b344 <__aeabi_dsub+0x5a4>
   1b226:	2040      	movs	r0, #64	; 0x40
   1b228:	1ac3      	subs	r3, r0, r3
   1b22a:	4099      	lsls	r1, r3
   1b22c:	430a      	orrs	r2, r1
   1b22e:	1e51      	subs	r1, r2, #1
   1b230:	418a      	sbcs	r2, r1
   1b232:	2100      	movs	r1, #0
   1b234:	4317      	orrs	r7, r2
   1b236:	e692      	b.n	1af5e <__aeabi_dsub+0x1be>
   1b238:	2e00      	cmp	r6, #0
   1b23a:	d114      	bne.n	1b266 <__aeabi_dsub+0x4c6>
   1b23c:	0026      	movs	r6, r4
   1b23e:	4650      	mov	r0, sl
   1b240:	4306      	orrs	r6, r0
   1b242:	d062      	beq.n	1b30a <__aeabi_dsub+0x56a>
   1b244:	43db      	mvns	r3, r3
   1b246:	2b00      	cmp	r3, #0
   1b248:	d15c      	bne.n	1b304 <__aeabi_dsub+0x564>
   1b24a:	1887      	adds	r7, r0, r2
   1b24c:	4297      	cmp	r7, r2
   1b24e:	4192      	sbcs	r2, r2
   1b250:	1864      	adds	r4, r4, r1
   1b252:	4252      	negs	r2, r2
   1b254:	18a4      	adds	r4, r4, r2
   1b256:	4666      	mov	r6, ip
   1b258:	e687      	b.n	1af6a <__aeabi_dsub+0x1ca>
   1b25a:	4650      	mov	r0, sl
   1b25c:	4320      	orrs	r0, r4
   1b25e:	1e44      	subs	r4, r0, #1
   1b260:	41a0      	sbcs	r0, r4
   1b262:	2400      	movs	r4, #0
   1b264:	e760      	b.n	1b128 <__aeabi_dsub+0x388>
   1b266:	4e57      	ldr	r6, [pc, #348]	; (1b3c4 <__aeabi_dsub+0x624>)
   1b268:	45b4      	cmp	ip, r6
   1b26a:	d04e      	beq.n	1b30a <__aeabi_dsub+0x56a>
   1b26c:	2680      	movs	r6, #128	; 0x80
   1b26e:	0436      	lsls	r6, r6, #16
   1b270:	425b      	negs	r3, r3
   1b272:	4334      	orrs	r4, r6
   1b274:	2b38      	cmp	r3, #56	; 0x38
   1b276:	dd00      	ble.n	1b27a <__aeabi_dsub+0x4da>
   1b278:	e07f      	b.n	1b37a <__aeabi_dsub+0x5da>
   1b27a:	2b1f      	cmp	r3, #31
   1b27c:	dd00      	ble.n	1b280 <__aeabi_dsub+0x4e0>
   1b27e:	e08b      	b.n	1b398 <__aeabi_dsub+0x5f8>
   1b280:	2620      	movs	r6, #32
   1b282:	0027      	movs	r7, r4
   1b284:	4650      	mov	r0, sl
   1b286:	1af6      	subs	r6, r6, r3
   1b288:	40b7      	lsls	r7, r6
   1b28a:	40d8      	lsrs	r0, r3
   1b28c:	4307      	orrs	r7, r0
   1b28e:	4650      	mov	r0, sl
   1b290:	40b0      	lsls	r0, r6
   1b292:	1e46      	subs	r6, r0, #1
   1b294:	41b0      	sbcs	r0, r6
   1b296:	4307      	orrs	r7, r0
   1b298:	40dc      	lsrs	r4, r3
   1b29a:	18bf      	adds	r7, r7, r2
   1b29c:	e7d6      	b.n	1b24c <__aeabi_dsub+0x4ac>
   1b29e:	000d      	movs	r5, r1
   1b2a0:	4315      	orrs	r5, r2
   1b2a2:	d100      	bne.n	1b2a6 <__aeabi_dsub+0x506>
   1b2a4:	e602      	b.n	1aeac <__aeabi_dsub+0x10c>
   1b2a6:	4650      	mov	r0, sl
   1b2a8:	1a80      	subs	r0, r0, r2
   1b2aa:	4582      	cmp	sl, r0
   1b2ac:	41bf      	sbcs	r7, r7
   1b2ae:	1a65      	subs	r5, r4, r1
   1b2b0:	427f      	negs	r7, r7
   1b2b2:	1bed      	subs	r5, r5, r7
   1b2b4:	4684      	mov	ip, r0
   1b2b6:	0228      	lsls	r0, r5, #8
   1b2b8:	d400      	bmi.n	1b2bc <__aeabi_dsub+0x51c>
   1b2ba:	e68d      	b.n	1afd8 <__aeabi_dsub+0x238>
   1b2bc:	4650      	mov	r0, sl
   1b2be:	1a17      	subs	r7, r2, r0
   1b2c0:	42ba      	cmp	r2, r7
   1b2c2:	4192      	sbcs	r2, r2
   1b2c4:	1b0c      	subs	r4, r1, r4
   1b2c6:	4252      	negs	r2, r2
   1b2c8:	1aa4      	subs	r4, r4, r2
   1b2ca:	4698      	mov	r8, r3
   1b2cc:	e5ee      	b.n	1aeac <__aeabi_dsub+0x10c>
   1b2ce:	000d      	movs	r5, r1
   1b2d0:	4315      	orrs	r5, r2
   1b2d2:	d100      	bne.n	1b2d6 <__aeabi_dsub+0x536>
   1b2d4:	e76b      	b.n	1b1ae <__aeabi_dsub+0x40e>
   1b2d6:	4650      	mov	r0, sl
   1b2d8:	0767      	lsls	r7, r4, #29
   1b2da:	08c0      	lsrs	r0, r0, #3
   1b2dc:	4307      	orrs	r7, r0
   1b2de:	2080      	movs	r0, #128	; 0x80
   1b2e0:	08e4      	lsrs	r4, r4, #3
   1b2e2:	0300      	lsls	r0, r0, #12
   1b2e4:	4204      	tst	r4, r0
   1b2e6:	d007      	beq.n	1b2f8 <__aeabi_dsub+0x558>
   1b2e8:	08cd      	lsrs	r5, r1, #3
   1b2ea:	4205      	tst	r5, r0
   1b2ec:	d104      	bne.n	1b2f8 <__aeabi_dsub+0x558>
   1b2ee:	002c      	movs	r4, r5
   1b2f0:	4698      	mov	r8, r3
   1b2f2:	08d7      	lsrs	r7, r2, #3
   1b2f4:	0749      	lsls	r1, r1, #29
   1b2f6:	430f      	orrs	r7, r1
   1b2f8:	0f7b      	lsrs	r3, r7, #29
   1b2fa:	00e4      	lsls	r4, r4, #3
   1b2fc:	431c      	orrs	r4, r3
   1b2fe:	00ff      	lsls	r7, r7, #3
   1b300:	4e30      	ldr	r6, [pc, #192]	; (1b3c4 <__aeabi_dsub+0x624>)
   1b302:	e5d3      	b.n	1aeac <__aeabi_dsub+0x10c>
   1b304:	4e2f      	ldr	r6, [pc, #188]	; (1b3c4 <__aeabi_dsub+0x624>)
   1b306:	45b4      	cmp	ip, r6
   1b308:	d1b4      	bne.n	1b274 <__aeabi_dsub+0x4d4>
   1b30a:	000c      	movs	r4, r1
   1b30c:	0017      	movs	r7, r2
   1b30e:	4666      	mov	r6, ip
   1b310:	e5cc      	b.n	1aeac <__aeabi_dsub+0x10c>
   1b312:	2700      	movs	r7, #0
   1b314:	2400      	movs	r4, #0
   1b316:	e5e8      	b.n	1aeea <__aeabi_dsub+0x14a>
   1b318:	2b00      	cmp	r3, #0
   1b31a:	d039      	beq.n	1b390 <__aeabi_dsub+0x5f0>
   1b31c:	000b      	movs	r3, r1
   1b31e:	4313      	orrs	r3, r2
   1b320:	d100      	bne.n	1b324 <__aeabi_dsub+0x584>
   1b322:	e744      	b.n	1b1ae <__aeabi_dsub+0x40e>
   1b324:	08c0      	lsrs	r0, r0, #3
   1b326:	0767      	lsls	r7, r4, #29
   1b328:	4307      	orrs	r7, r0
   1b32a:	2080      	movs	r0, #128	; 0x80
   1b32c:	08e4      	lsrs	r4, r4, #3
   1b32e:	0300      	lsls	r0, r0, #12
   1b330:	4204      	tst	r4, r0
   1b332:	d0e1      	beq.n	1b2f8 <__aeabi_dsub+0x558>
   1b334:	08cb      	lsrs	r3, r1, #3
   1b336:	4203      	tst	r3, r0
   1b338:	d1de      	bne.n	1b2f8 <__aeabi_dsub+0x558>
   1b33a:	08d7      	lsrs	r7, r2, #3
   1b33c:	0749      	lsls	r1, r1, #29
   1b33e:	430f      	orrs	r7, r1
   1b340:	001c      	movs	r4, r3
   1b342:	e7d9      	b.n	1b2f8 <__aeabi_dsub+0x558>
   1b344:	2100      	movs	r1, #0
   1b346:	e771      	b.n	1b22c <__aeabi_dsub+0x48c>
   1b348:	2500      	movs	r5, #0
   1b34a:	2700      	movs	r7, #0
   1b34c:	e5e9      	b.n	1af22 <__aeabi_dsub+0x182>
   1b34e:	002e      	movs	r6, r5
   1b350:	0027      	movs	r7, r4
   1b352:	3e20      	subs	r6, #32
   1b354:	40f7      	lsrs	r7, r6
   1b356:	2d20      	cmp	r5, #32
   1b358:	d02f      	beq.n	1b3ba <__aeabi_dsub+0x61a>
   1b35a:	2640      	movs	r6, #64	; 0x40
   1b35c:	1b75      	subs	r5, r6, r5
   1b35e:	40ac      	lsls	r4, r5
   1b360:	4650      	mov	r0, sl
   1b362:	4320      	orrs	r0, r4
   1b364:	1e44      	subs	r4, r0, #1
   1b366:	41a0      	sbcs	r0, r4
   1b368:	2400      	movs	r4, #0
   1b36a:	4338      	orrs	r0, r7
   1b36c:	e6dc      	b.n	1b128 <__aeabi_dsub+0x388>
   1b36e:	2480      	movs	r4, #128	; 0x80
   1b370:	2500      	movs	r5, #0
   1b372:	0324      	lsls	r4, r4, #12
   1b374:	4e13      	ldr	r6, [pc, #76]	; (1b3c4 <__aeabi_dsub+0x624>)
   1b376:	2700      	movs	r7, #0
   1b378:	e5d3      	b.n	1af22 <__aeabi_dsub+0x182>
   1b37a:	4650      	mov	r0, sl
   1b37c:	4320      	orrs	r0, r4
   1b37e:	0007      	movs	r7, r0
   1b380:	1e78      	subs	r0, r7, #1
   1b382:	4187      	sbcs	r7, r0
   1b384:	2400      	movs	r4, #0
   1b386:	18bf      	adds	r7, r7, r2
   1b388:	e760      	b.n	1b24c <__aeabi_dsub+0x4ac>
   1b38a:	000c      	movs	r4, r1
   1b38c:	0017      	movs	r7, r2
   1b38e:	e58d      	b.n	1aeac <__aeabi_dsub+0x10c>
   1b390:	000c      	movs	r4, r1
   1b392:	0017      	movs	r7, r2
   1b394:	4e0b      	ldr	r6, [pc, #44]	; (1b3c4 <__aeabi_dsub+0x624>)
   1b396:	e589      	b.n	1aeac <__aeabi_dsub+0x10c>
   1b398:	001e      	movs	r6, r3
   1b39a:	0027      	movs	r7, r4
   1b39c:	3e20      	subs	r6, #32
   1b39e:	40f7      	lsrs	r7, r6
   1b3a0:	2b20      	cmp	r3, #32
   1b3a2:	d00c      	beq.n	1b3be <__aeabi_dsub+0x61e>
   1b3a4:	2640      	movs	r6, #64	; 0x40
   1b3a6:	1af3      	subs	r3, r6, r3
   1b3a8:	409c      	lsls	r4, r3
   1b3aa:	4650      	mov	r0, sl
   1b3ac:	4320      	orrs	r0, r4
   1b3ae:	1e44      	subs	r4, r0, #1
   1b3b0:	41a0      	sbcs	r0, r4
   1b3b2:	4307      	orrs	r7, r0
   1b3b4:	2400      	movs	r4, #0
   1b3b6:	18bf      	adds	r7, r7, r2
   1b3b8:	e748      	b.n	1b24c <__aeabi_dsub+0x4ac>
   1b3ba:	2400      	movs	r4, #0
   1b3bc:	e7d0      	b.n	1b360 <__aeabi_dsub+0x5c0>
   1b3be:	2400      	movs	r4, #0
   1b3c0:	e7f3      	b.n	1b3aa <__aeabi_dsub+0x60a>
   1b3c2:	46c0      	nop			; (mov r8, r8)
   1b3c4:	000007ff 	.word	0x000007ff
   1b3c8:	ff7fffff 	.word	0xff7fffff

0001b3cc <__aeabi_d2iz>:
   1b3cc:	b530      	push	{r4, r5, lr}
   1b3ce:	4d13      	ldr	r5, [pc, #76]	; (1b41c <__aeabi_d2iz+0x50>)
   1b3d0:	030a      	lsls	r2, r1, #12
   1b3d2:	004b      	lsls	r3, r1, #1
   1b3d4:	0b12      	lsrs	r2, r2, #12
   1b3d6:	0d5b      	lsrs	r3, r3, #21
   1b3d8:	0fc9      	lsrs	r1, r1, #31
   1b3da:	2400      	movs	r4, #0
   1b3dc:	42ab      	cmp	r3, r5
   1b3de:	dd10      	ble.n	1b402 <__aeabi_d2iz+0x36>
   1b3e0:	4c0f      	ldr	r4, [pc, #60]	; (1b420 <__aeabi_d2iz+0x54>)
   1b3e2:	42a3      	cmp	r3, r4
   1b3e4:	dc0f      	bgt.n	1b406 <__aeabi_d2iz+0x3a>
   1b3e6:	2480      	movs	r4, #128	; 0x80
   1b3e8:	4d0e      	ldr	r5, [pc, #56]	; (1b424 <__aeabi_d2iz+0x58>)
   1b3ea:	0364      	lsls	r4, r4, #13
   1b3ec:	4322      	orrs	r2, r4
   1b3ee:	1aed      	subs	r5, r5, r3
   1b3f0:	2d1f      	cmp	r5, #31
   1b3f2:	dd0b      	ble.n	1b40c <__aeabi_d2iz+0x40>
   1b3f4:	480c      	ldr	r0, [pc, #48]	; (1b428 <__aeabi_d2iz+0x5c>)
   1b3f6:	1ac3      	subs	r3, r0, r3
   1b3f8:	40da      	lsrs	r2, r3
   1b3fa:	4254      	negs	r4, r2
   1b3fc:	2900      	cmp	r1, #0
   1b3fe:	d100      	bne.n	1b402 <__aeabi_d2iz+0x36>
   1b400:	0014      	movs	r4, r2
   1b402:	0020      	movs	r0, r4
   1b404:	bd30      	pop	{r4, r5, pc}
   1b406:	4b09      	ldr	r3, [pc, #36]	; (1b42c <__aeabi_d2iz+0x60>)
   1b408:	18cc      	adds	r4, r1, r3
   1b40a:	e7fa      	b.n	1b402 <__aeabi_d2iz+0x36>
   1b40c:	4c08      	ldr	r4, [pc, #32]	; (1b430 <__aeabi_d2iz+0x64>)
   1b40e:	40e8      	lsrs	r0, r5
   1b410:	46a4      	mov	ip, r4
   1b412:	4463      	add	r3, ip
   1b414:	409a      	lsls	r2, r3
   1b416:	4302      	orrs	r2, r0
   1b418:	e7ef      	b.n	1b3fa <__aeabi_d2iz+0x2e>
   1b41a:	46c0      	nop			; (mov r8, r8)
   1b41c:	000003fe 	.word	0x000003fe
   1b420:	0000041d 	.word	0x0000041d
   1b424:	00000433 	.word	0x00000433
   1b428:	00000413 	.word	0x00000413
   1b42c:	7fffffff 	.word	0x7fffffff
   1b430:	fffffbed 	.word	0xfffffbed

0001b434 <__aeabi_ui2d>:
   1b434:	b510      	push	{r4, lr}
   1b436:	1e04      	subs	r4, r0, #0
   1b438:	d028      	beq.n	1b48c <__aeabi_ui2d+0x58>
   1b43a:	f000 f833 	bl	1b4a4 <__clzsi2>
   1b43e:	4b15      	ldr	r3, [pc, #84]	; (1b494 <__aeabi_ui2d+0x60>)
   1b440:	4a15      	ldr	r2, [pc, #84]	; (1b498 <__aeabi_ui2d+0x64>)
   1b442:	1a1b      	subs	r3, r3, r0
   1b444:	1ad2      	subs	r2, r2, r3
   1b446:	2a1f      	cmp	r2, #31
   1b448:	dd15      	ble.n	1b476 <__aeabi_ui2d+0x42>
   1b44a:	4a14      	ldr	r2, [pc, #80]	; (1b49c <__aeabi_ui2d+0x68>)
   1b44c:	1ad2      	subs	r2, r2, r3
   1b44e:	4094      	lsls	r4, r2
   1b450:	2200      	movs	r2, #0
   1b452:	0324      	lsls	r4, r4, #12
   1b454:	055b      	lsls	r3, r3, #21
   1b456:	0b24      	lsrs	r4, r4, #12
   1b458:	0d5b      	lsrs	r3, r3, #21
   1b45a:	2100      	movs	r1, #0
   1b45c:	0010      	movs	r0, r2
   1b45e:	0324      	lsls	r4, r4, #12
   1b460:	0d0a      	lsrs	r2, r1, #20
   1b462:	0b24      	lsrs	r4, r4, #12
   1b464:	0512      	lsls	r2, r2, #20
   1b466:	4322      	orrs	r2, r4
   1b468:	4c0d      	ldr	r4, [pc, #52]	; (1b4a0 <__aeabi_ui2d+0x6c>)
   1b46a:	051b      	lsls	r3, r3, #20
   1b46c:	4022      	ands	r2, r4
   1b46e:	4313      	orrs	r3, r2
   1b470:	005b      	lsls	r3, r3, #1
   1b472:	0859      	lsrs	r1, r3, #1
   1b474:	bd10      	pop	{r4, pc}
   1b476:	0021      	movs	r1, r4
   1b478:	4091      	lsls	r1, r2
   1b47a:	000a      	movs	r2, r1
   1b47c:	210b      	movs	r1, #11
   1b47e:	1a08      	subs	r0, r1, r0
   1b480:	40c4      	lsrs	r4, r0
   1b482:	055b      	lsls	r3, r3, #21
   1b484:	0324      	lsls	r4, r4, #12
   1b486:	0b24      	lsrs	r4, r4, #12
   1b488:	0d5b      	lsrs	r3, r3, #21
   1b48a:	e7e6      	b.n	1b45a <__aeabi_ui2d+0x26>
   1b48c:	2300      	movs	r3, #0
   1b48e:	2400      	movs	r4, #0
   1b490:	2200      	movs	r2, #0
   1b492:	e7e2      	b.n	1b45a <__aeabi_ui2d+0x26>
   1b494:	0000041e 	.word	0x0000041e
   1b498:	00000433 	.word	0x00000433
   1b49c:	00000413 	.word	0x00000413
   1b4a0:	800fffff 	.word	0x800fffff

0001b4a4 <__clzsi2>:
   1b4a4:	211c      	movs	r1, #28
   1b4a6:	2301      	movs	r3, #1
   1b4a8:	041b      	lsls	r3, r3, #16
   1b4aa:	4298      	cmp	r0, r3
   1b4ac:	d301      	bcc.n	1b4b2 <__clzsi2+0xe>
   1b4ae:	0c00      	lsrs	r0, r0, #16
   1b4b0:	3910      	subs	r1, #16
   1b4b2:	0a1b      	lsrs	r3, r3, #8
   1b4b4:	4298      	cmp	r0, r3
   1b4b6:	d301      	bcc.n	1b4bc <__clzsi2+0x18>
   1b4b8:	0a00      	lsrs	r0, r0, #8
   1b4ba:	3908      	subs	r1, #8
   1b4bc:	091b      	lsrs	r3, r3, #4
   1b4be:	4298      	cmp	r0, r3
   1b4c0:	d301      	bcc.n	1b4c6 <__clzsi2+0x22>
   1b4c2:	0900      	lsrs	r0, r0, #4
   1b4c4:	3904      	subs	r1, #4
   1b4c6:	a202      	add	r2, pc, #8	; (adr r2, 1b4d0 <__clzsi2+0x2c>)
   1b4c8:	5c10      	ldrb	r0, [r2, r0]
   1b4ca:	1840      	adds	r0, r0, r1
   1b4cc:	4770      	bx	lr
   1b4ce:	46c0      	nop			; (mov r8, r8)
   1b4d0:	02020304 	.word	0x02020304
   1b4d4:	01010101 	.word	0x01010101
	...

0001b4e0 <__libc_init_array>:
   1b4e0:	b570      	push	{r4, r5, r6, lr}
   1b4e2:	2600      	movs	r6, #0
   1b4e4:	4d0c      	ldr	r5, [pc, #48]	; (1b518 <__libc_init_array+0x38>)
   1b4e6:	4c0d      	ldr	r4, [pc, #52]	; (1b51c <__libc_init_array+0x3c>)
   1b4e8:	1b64      	subs	r4, r4, r5
   1b4ea:	10a4      	asrs	r4, r4, #2
   1b4ec:	42a6      	cmp	r6, r4
   1b4ee:	d109      	bne.n	1b504 <__libc_init_array+0x24>
   1b4f0:	2600      	movs	r6, #0
   1b4f2:	f000 fecd 	bl	1c290 <_init>
   1b4f6:	4d0a      	ldr	r5, [pc, #40]	; (1b520 <__libc_init_array+0x40>)
   1b4f8:	4c0a      	ldr	r4, [pc, #40]	; (1b524 <__libc_init_array+0x44>)
   1b4fa:	1b64      	subs	r4, r4, r5
   1b4fc:	10a4      	asrs	r4, r4, #2
   1b4fe:	42a6      	cmp	r6, r4
   1b500:	d105      	bne.n	1b50e <__libc_init_array+0x2e>
   1b502:	bd70      	pop	{r4, r5, r6, pc}
   1b504:	00b3      	lsls	r3, r6, #2
   1b506:	58eb      	ldr	r3, [r5, r3]
   1b508:	4798      	blx	r3
   1b50a:	3601      	adds	r6, #1
   1b50c:	e7ee      	b.n	1b4ec <__libc_init_array+0xc>
   1b50e:	00b3      	lsls	r3, r6, #2
   1b510:	58eb      	ldr	r3, [r5, r3]
   1b512:	4798      	blx	r3
   1b514:	3601      	adds	r6, #1
   1b516:	e7f2      	b.n	1b4fe <__libc_init_array+0x1e>
   1b518:	0001c29c 	.word	0x0001c29c
   1b51c:	0001c29c 	.word	0x0001c29c
   1b520:	0001c29c 	.word	0x0001c29c
   1b524:	0001c2a0 	.word	0x0001c2a0

0001b528 <malloc>:
   1b528:	b510      	push	{r4, lr}
   1b52a:	4b03      	ldr	r3, [pc, #12]	; (1b538 <malloc+0x10>)
   1b52c:	0001      	movs	r1, r0
   1b52e:	6818      	ldr	r0, [r3, #0]
   1b530:	f000 f872 	bl	1b618 <_malloc_r>
   1b534:	bd10      	pop	{r4, pc}
   1b536:	46c0      	nop			; (mov r8, r8)
   1b538:	20000014 	.word	0x20000014

0001b53c <memcpy>:
   1b53c:	2300      	movs	r3, #0
   1b53e:	b510      	push	{r4, lr}
   1b540:	429a      	cmp	r2, r3
   1b542:	d100      	bne.n	1b546 <memcpy+0xa>
   1b544:	bd10      	pop	{r4, pc}
   1b546:	5ccc      	ldrb	r4, [r1, r3]
   1b548:	54c4      	strb	r4, [r0, r3]
   1b54a:	3301      	adds	r3, #1
   1b54c:	e7f8      	b.n	1b540 <memcpy+0x4>

0001b54e <memmove>:
   1b54e:	b510      	push	{r4, lr}
   1b550:	4288      	cmp	r0, r1
   1b552:	d902      	bls.n	1b55a <memmove+0xc>
   1b554:	188b      	adds	r3, r1, r2
   1b556:	4298      	cmp	r0, r3
   1b558:	d308      	bcc.n	1b56c <memmove+0x1e>
   1b55a:	2300      	movs	r3, #0
   1b55c:	429a      	cmp	r2, r3
   1b55e:	d007      	beq.n	1b570 <memmove+0x22>
   1b560:	5ccc      	ldrb	r4, [r1, r3]
   1b562:	54c4      	strb	r4, [r0, r3]
   1b564:	3301      	adds	r3, #1
   1b566:	e7f9      	b.n	1b55c <memmove+0xe>
   1b568:	5c8b      	ldrb	r3, [r1, r2]
   1b56a:	5483      	strb	r3, [r0, r2]
   1b56c:	3a01      	subs	r2, #1
   1b56e:	d2fb      	bcs.n	1b568 <memmove+0x1a>
   1b570:	bd10      	pop	{r4, pc}

0001b572 <memset>:
   1b572:	0003      	movs	r3, r0
   1b574:	1882      	adds	r2, r0, r2
   1b576:	4293      	cmp	r3, r2
   1b578:	d100      	bne.n	1b57c <memset+0xa>
   1b57a:	4770      	bx	lr
   1b57c:	7019      	strb	r1, [r3, #0]
   1b57e:	3301      	adds	r3, #1
   1b580:	e7f9      	b.n	1b576 <memset+0x4>
	...

0001b584 <_free_r>:
   1b584:	b570      	push	{r4, r5, r6, lr}
   1b586:	0005      	movs	r5, r0
   1b588:	2900      	cmp	r1, #0
   1b58a:	d010      	beq.n	1b5ae <_free_r+0x2a>
   1b58c:	1f0c      	subs	r4, r1, #4
   1b58e:	6823      	ldr	r3, [r4, #0]
   1b590:	2b00      	cmp	r3, #0
   1b592:	da00      	bge.n	1b596 <_free_r+0x12>
   1b594:	18e4      	adds	r4, r4, r3
   1b596:	0028      	movs	r0, r5
   1b598:	f000 f90d 	bl	1b7b6 <__malloc_lock>
   1b59c:	4a1d      	ldr	r2, [pc, #116]	; (1b614 <_free_r+0x90>)
   1b59e:	6813      	ldr	r3, [r2, #0]
   1b5a0:	2b00      	cmp	r3, #0
   1b5a2:	d105      	bne.n	1b5b0 <_free_r+0x2c>
   1b5a4:	6063      	str	r3, [r4, #4]
   1b5a6:	6014      	str	r4, [r2, #0]
   1b5a8:	0028      	movs	r0, r5
   1b5aa:	f000 f905 	bl	1b7b8 <__malloc_unlock>
   1b5ae:	bd70      	pop	{r4, r5, r6, pc}
   1b5b0:	42a3      	cmp	r3, r4
   1b5b2:	d909      	bls.n	1b5c8 <_free_r+0x44>
   1b5b4:	6821      	ldr	r1, [r4, #0]
   1b5b6:	1860      	adds	r0, r4, r1
   1b5b8:	4283      	cmp	r3, r0
   1b5ba:	d1f3      	bne.n	1b5a4 <_free_r+0x20>
   1b5bc:	6818      	ldr	r0, [r3, #0]
   1b5be:	685b      	ldr	r3, [r3, #4]
   1b5c0:	1841      	adds	r1, r0, r1
   1b5c2:	6021      	str	r1, [r4, #0]
   1b5c4:	e7ee      	b.n	1b5a4 <_free_r+0x20>
   1b5c6:	0013      	movs	r3, r2
   1b5c8:	685a      	ldr	r2, [r3, #4]
   1b5ca:	2a00      	cmp	r2, #0
   1b5cc:	d001      	beq.n	1b5d2 <_free_r+0x4e>
   1b5ce:	42a2      	cmp	r2, r4
   1b5d0:	d9f9      	bls.n	1b5c6 <_free_r+0x42>
   1b5d2:	6819      	ldr	r1, [r3, #0]
   1b5d4:	1858      	adds	r0, r3, r1
   1b5d6:	42a0      	cmp	r0, r4
   1b5d8:	d10b      	bne.n	1b5f2 <_free_r+0x6e>
   1b5da:	6820      	ldr	r0, [r4, #0]
   1b5dc:	1809      	adds	r1, r1, r0
   1b5de:	1858      	adds	r0, r3, r1
   1b5e0:	6019      	str	r1, [r3, #0]
   1b5e2:	4282      	cmp	r2, r0
   1b5e4:	d1e0      	bne.n	1b5a8 <_free_r+0x24>
   1b5e6:	6810      	ldr	r0, [r2, #0]
   1b5e8:	6852      	ldr	r2, [r2, #4]
   1b5ea:	1841      	adds	r1, r0, r1
   1b5ec:	6019      	str	r1, [r3, #0]
   1b5ee:	605a      	str	r2, [r3, #4]
   1b5f0:	e7da      	b.n	1b5a8 <_free_r+0x24>
   1b5f2:	42a0      	cmp	r0, r4
   1b5f4:	d902      	bls.n	1b5fc <_free_r+0x78>
   1b5f6:	230c      	movs	r3, #12
   1b5f8:	602b      	str	r3, [r5, #0]
   1b5fa:	e7d5      	b.n	1b5a8 <_free_r+0x24>
   1b5fc:	6821      	ldr	r1, [r4, #0]
   1b5fe:	1860      	adds	r0, r4, r1
   1b600:	4282      	cmp	r2, r0
   1b602:	d103      	bne.n	1b60c <_free_r+0x88>
   1b604:	6810      	ldr	r0, [r2, #0]
   1b606:	6852      	ldr	r2, [r2, #4]
   1b608:	1841      	adds	r1, r0, r1
   1b60a:	6021      	str	r1, [r4, #0]
   1b60c:	6062      	str	r2, [r4, #4]
   1b60e:	605c      	str	r4, [r3, #4]
   1b610:	e7ca      	b.n	1b5a8 <_free_r+0x24>
   1b612:	46c0      	nop			; (mov r8, r8)
   1b614:	200029f0 	.word	0x200029f0

0001b618 <_malloc_r>:
   1b618:	2303      	movs	r3, #3
   1b61a:	b570      	push	{r4, r5, r6, lr}
   1b61c:	1ccd      	adds	r5, r1, #3
   1b61e:	439d      	bics	r5, r3
   1b620:	3508      	adds	r5, #8
   1b622:	0006      	movs	r6, r0
   1b624:	2d0c      	cmp	r5, #12
   1b626:	d21e      	bcs.n	1b666 <_malloc_r+0x4e>
   1b628:	250c      	movs	r5, #12
   1b62a:	42a9      	cmp	r1, r5
   1b62c:	d81d      	bhi.n	1b66a <_malloc_r+0x52>
   1b62e:	0030      	movs	r0, r6
   1b630:	f000 f8c1 	bl	1b7b6 <__malloc_lock>
   1b634:	4a25      	ldr	r2, [pc, #148]	; (1b6cc <_malloc_r+0xb4>)
   1b636:	6814      	ldr	r4, [r2, #0]
   1b638:	0021      	movs	r1, r4
   1b63a:	2900      	cmp	r1, #0
   1b63c:	d119      	bne.n	1b672 <_malloc_r+0x5a>
   1b63e:	4c24      	ldr	r4, [pc, #144]	; (1b6d0 <_malloc_r+0xb8>)
   1b640:	6823      	ldr	r3, [r4, #0]
   1b642:	2b00      	cmp	r3, #0
   1b644:	d103      	bne.n	1b64e <_malloc_r+0x36>
   1b646:	0030      	movs	r0, r6
   1b648:	f000 f844 	bl	1b6d4 <_sbrk_r>
   1b64c:	6020      	str	r0, [r4, #0]
   1b64e:	0029      	movs	r1, r5
   1b650:	0030      	movs	r0, r6
   1b652:	f000 f83f 	bl	1b6d4 <_sbrk_r>
   1b656:	1c43      	adds	r3, r0, #1
   1b658:	d12c      	bne.n	1b6b4 <_malloc_r+0x9c>
   1b65a:	230c      	movs	r3, #12
   1b65c:	0030      	movs	r0, r6
   1b65e:	6033      	str	r3, [r6, #0]
   1b660:	f000 f8aa 	bl	1b7b8 <__malloc_unlock>
   1b664:	e003      	b.n	1b66e <_malloc_r+0x56>
   1b666:	2d00      	cmp	r5, #0
   1b668:	dadf      	bge.n	1b62a <_malloc_r+0x12>
   1b66a:	230c      	movs	r3, #12
   1b66c:	6033      	str	r3, [r6, #0]
   1b66e:	2000      	movs	r0, #0
   1b670:	bd70      	pop	{r4, r5, r6, pc}
   1b672:	680b      	ldr	r3, [r1, #0]
   1b674:	1b5b      	subs	r3, r3, r5
   1b676:	d41a      	bmi.n	1b6ae <_malloc_r+0x96>
   1b678:	2b0b      	cmp	r3, #11
   1b67a:	d903      	bls.n	1b684 <_malloc_r+0x6c>
   1b67c:	600b      	str	r3, [r1, #0]
   1b67e:	18cc      	adds	r4, r1, r3
   1b680:	6025      	str	r5, [r4, #0]
   1b682:	e003      	b.n	1b68c <_malloc_r+0x74>
   1b684:	428c      	cmp	r4, r1
   1b686:	d10e      	bne.n	1b6a6 <_malloc_r+0x8e>
   1b688:	6863      	ldr	r3, [r4, #4]
   1b68a:	6013      	str	r3, [r2, #0]
   1b68c:	0030      	movs	r0, r6
   1b68e:	f000 f893 	bl	1b7b8 <__malloc_unlock>
   1b692:	0020      	movs	r0, r4
   1b694:	2207      	movs	r2, #7
   1b696:	300b      	adds	r0, #11
   1b698:	1d23      	adds	r3, r4, #4
   1b69a:	4390      	bics	r0, r2
   1b69c:	1ac3      	subs	r3, r0, r3
   1b69e:	d0e7      	beq.n	1b670 <_malloc_r+0x58>
   1b6a0:	425a      	negs	r2, r3
   1b6a2:	50e2      	str	r2, [r4, r3]
   1b6a4:	e7e4      	b.n	1b670 <_malloc_r+0x58>
   1b6a6:	684b      	ldr	r3, [r1, #4]
   1b6a8:	6063      	str	r3, [r4, #4]
   1b6aa:	000c      	movs	r4, r1
   1b6ac:	e7ee      	b.n	1b68c <_malloc_r+0x74>
   1b6ae:	000c      	movs	r4, r1
   1b6b0:	6849      	ldr	r1, [r1, #4]
   1b6b2:	e7c2      	b.n	1b63a <_malloc_r+0x22>
   1b6b4:	2303      	movs	r3, #3
   1b6b6:	1cc4      	adds	r4, r0, #3
   1b6b8:	439c      	bics	r4, r3
   1b6ba:	42a0      	cmp	r0, r4
   1b6bc:	d0e0      	beq.n	1b680 <_malloc_r+0x68>
   1b6be:	1a21      	subs	r1, r4, r0
   1b6c0:	0030      	movs	r0, r6
   1b6c2:	f000 f807 	bl	1b6d4 <_sbrk_r>
   1b6c6:	1c43      	adds	r3, r0, #1
   1b6c8:	d1da      	bne.n	1b680 <_malloc_r+0x68>
   1b6ca:	e7c6      	b.n	1b65a <_malloc_r+0x42>
   1b6cc:	200029f0 	.word	0x200029f0
   1b6d0:	200029f4 	.word	0x200029f4

0001b6d4 <_sbrk_r>:
   1b6d4:	2300      	movs	r3, #0
   1b6d6:	b570      	push	{r4, r5, r6, lr}
   1b6d8:	4c06      	ldr	r4, [pc, #24]	; (1b6f4 <_sbrk_r+0x20>)
   1b6da:	0005      	movs	r5, r0
   1b6dc:	0008      	movs	r0, r1
   1b6de:	6023      	str	r3, [r4, #0]
   1b6e0:	f7fe f916 	bl	19910 <_sbrk>
   1b6e4:	1c43      	adds	r3, r0, #1
   1b6e6:	d103      	bne.n	1b6f0 <_sbrk_r+0x1c>
   1b6e8:	6823      	ldr	r3, [r4, #0]
   1b6ea:	2b00      	cmp	r3, #0
   1b6ec:	d000      	beq.n	1b6f0 <_sbrk_r+0x1c>
   1b6ee:	602b      	str	r3, [r5, #0]
   1b6f0:	bd70      	pop	{r4, r5, r6, pc}
   1b6f2:	46c0      	nop			; (mov r8, r8)
   1b6f4:	20002fd4 	.word	0x20002fd4

0001b6f8 <sniprintf>:
   1b6f8:	b40c      	push	{r2, r3}
   1b6fa:	b530      	push	{r4, r5, lr}
   1b6fc:	4b16      	ldr	r3, [pc, #88]	; (1b758 <sniprintf+0x60>)
   1b6fe:	b09d      	sub	sp, #116	; 0x74
   1b700:	1e0c      	subs	r4, r1, #0
   1b702:	681d      	ldr	r5, [r3, #0]
   1b704:	da08      	bge.n	1b718 <sniprintf+0x20>
   1b706:	238b      	movs	r3, #139	; 0x8b
   1b708:	2001      	movs	r0, #1
   1b70a:	602b      	str	r3, [r5, #0]
   1b70c:	4240      	negs	r0, r0
   1b70e:	b01d      	add	sp, #116	; 0x74
   1b710:	bc30      	pop	{r4, r5}
   1b712:	bc08      	pop	{r3}
   1b714:	b002      	add	sp, #8
   1b716:	4718      	bx	r3
   1b718:	2382      	movs	r3, #130	; 0x82
   1b71a:	a902      	add	r1, sp, #8
   1b71c:	009b      	lsls	r3, r3, #2
   1b71e:	818b      	strh	r3, [r1, #12]
   1b720:	2300      	movs	r3, #0
   1b722:	9002      	str	r0, [sp, #8]
   1b724:	6108      	str	r0, [r1, #16]
   1b726:	429c      	cmp	r4, r3
   1b728:	d000      	beq.n	1b72c <sniprintf+0x34>
   1b72a:	1e63      	subs	r3, r4, #1
   1b72c:	608b      	str	r3, [r1, #8]
   1b72e:	614b      	str	r3, [r1, #20]
   1b730:	2301      	movs	r3, #1
   1b732:	425b      	negs	r3, r3
   1b734:	81cb      	strh	r3, [r1, #14]
   1b736:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1b738:	ab21      	add	r3, sp, #132	; 0x84
   1b73a:	0028      	movs	r0, r5
   1b73c:	9301      	str	r3, [sp, #4]
   1b73e:	f000 f89f 	bl	1b880 <_svfiprintf_r>
   1b742:	1c43      	adds	r3, r0, #1
   1b744:	da01      	bge.n	1b74a <sniprintf+0x52>
   1b746:	238b      	movs	r3, #139	; 0x8b
   1b748:	602b      	str	r3, [r5, #0]
   1b74a:	2c00      	cmp	r4, #0
   1b74c:	d0df      	beq.n	1b70e <sniprintf+0x16>
   1b74e:	2300      	movs	r3, #0
   1b750:	9a02      	ldr	r2, [sp, #8]
   1b752:	7013      	strb	r3, [r2, #0]
   1b754:	e7db      	b.n	1b70e <sniprintf+0x16>
   1b756:	46c0      	nop			; (mov r8, r8)
   1b758:	20000014 	.word	0x20000014

0001b75c <strlen>:
   1b75c:	2300      	movs	r3, #0
   1b75e:	5cc2      	ldrb	r2, [r0, r3]
   1b760:	3301      	adds	r3, #1
   1b762:	2a00      	cmp	r2, #0
   1b764:	d1fb      	bne.n	1b75e <strlen+0x2>
   1b766:	1e58      	subs	r0, r3, #1
   1b768:	4770      	bx	lr

0001b76a <strncmp>:
   1b76a:	2300      	movs	r3, #0
   1b76c:	b530      	push	{r4, r5, lr}
   1b76e:	429a      	cmp	r2, r3
   1b770:	d00a      	beq.n	1b788 <strncmp+0x1e>
   1b772:	3a01      	subs	r2, #1
   1b774:	5cc4      	ldrb	r4, [r0, r3]
   1b776:	5ccd      	ldrb	r5, [r1, r3]
   1b778:	42ac      	cmp	r4, r5
   1b77a:	d104      	bne.n	1b786 <strncmp+0x1c>
   1b77c:	429a      	cmp	r2, r3
   1b77e:	d002      	beq.n	1b786 <strncmp+0x1c>
   1b780:	3301      	adds	r3, #1
   1b782:	2c00      	cmp	r4, #0
   1b784:	d1f6      	bne.n	1b774 <strncmp+0xa>
   1b786:	1b63      	subs	r3, r4, r5
   1b788:	0018      	movs	r0, r3
   1b78a:	bd30      	pop	{r4, r5, pc}

0001b78c <strncpy>:
   1b78c:	b570      	push	{r4, r5, r6, lr}
   1b78e:	0004      	movs	r4, r0
   1b790:	2a00      	cmp	r2, #0
   1b792:	d100      	bne.n	1b796 <strncpy+0xa>
   1b794:	bd70      	pop	{r4, r5, r6, pc}
   1b796:	780d      	ldrb	r5, [r1, #0]
   1b798:	1e56      	subs	r6, r2, #1
   1b79a:	1c63      	adds	r3, r4, #1
   1b79c:	7025      	strb	r5, [r4, #0]
   1b79e:	3101      	adds	r1, #1
   1b7a0:	2d00      	cmp	r5, #0
   1b7a2:	d105      	bne.n	1b7b0 <strncpy+0x24>
   1b7a4:	18a4      	adds	r4, r4, r2
   1b7a6:	429c      	cmp	r4, r3
   1b7a8:	d0f4      	beq.n	1b794 <strncpy+0x8>
   1b7aa:	701d      	strb	r5, [r3, #0]
   1b7ac:	3301      	adds	r3, #1
   1b7ae:	e7fa      	b.n	1b7a6 <strncpy+0x1a>
   1b7b0:	001c      	movs	r4, r3
   1b7b2:	0032      	movs	r2, r6
   1b7b4:	e7ec      	b.n	1b790 <strncpy+0x4>

0001b7b6 <__malloc_lock>:
   1b7b6:	4770      	bx	lr

0001b7b8 <__malloc_unlock>:
   1b7b8:	4770      	bx	lr
	...

0001b7bc <__ssputs_r>:
   1b7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b7be:	688e      	ldr	r6, [r1, #8]
   1b7c0:	b085      	sub	sp, #20
   1b7c2:	0007      	movs	r7, r0
   1b7c4:	000c      	movs	r4, r1
   1b7c6:	9203      	str	r2, [sp, #12]
   1b7c8:	9301      	str	r3, [sp, #4]
   1b7ca:	429e      	cmp	r6, r3
   1b7cc:	d839      	bhi.n	1b842 <__ssputs_r+0x86>
   1b7ce:	2390      	movs	r3, #144	; 0x90
   1b7d0:	898a      	ldrh	r2, [r1, #12]
   1b7d2:	00db      	lsls	r3, r3, #3
   1b7d4:	421a      	tst	r2, r3
   1b7d6:	d034      	beq.n	1b842 <__ssputs_r+0x86>
   1b7d8:	2503      	movs	r5, #3
   1b7da:	6909      	ldr	r1, [r1, #16]
   1b7dc:	6823      	ldr	r3, [r4, #0]
   1b7de:	1a5b      	subs	r3, r3, r1
   1b7e0:	9302      	str	r3, [sp, #8]
   1b7e2:	6963      	ldr	r3, [r4, #20]
   1b7e4:	9802      	ldr	r0, [sp, #8]
   1b7e6:	435d      	muls	r5, r3
   1b7e8:	0feb      	lsrs	r3, r5, #31
   1b7ea:	195d      	adds	r5, r3, r5
   1b7ec:	9b01      	ldr	r3, [sp, #4]
   1b7ee:	106d      	asrs	r5, r5, #1
   1b7f0:	3301      	adds	r3, #1
   1b7f2:	181b      	adds	r3, r3, r0
   1b7f4:	42ab      	cmp	r3, r5
   1b7f6:	d900      	bls.n	1b7fa <__ssputs_r+0x3e>
   1b7f8:	001d      	movs	r5, r3
   1b7fa:	0553      	lsls	r3, r2, #21
   1b7fc:	d532      	bpl.n	1b864 <__ssputs_r+0xa8>
   1b7fe:	0029      	movs	r1, r5
   1b800:	0038      	movs	r0, r7
   1b802:	f7ff ff09 	bl	1b618 <_malloc_r>
   1b806:	1e06      	subs	r6, r0, #0
   1b808:	d109      	bne.n	1b81e <__ssputs_r+0x62>
   1b80a:	230c      	movs	r3, #12
   1b80c:	603b      	str	r3, [r7, #0]
   1b80e:	2340      	movs	r3, #64	; 0x40
   1b810:	2001      	movs	r0, #1
   1b812:	89a2      	ldrh	r2, [r4, #12]
   1b814:	4240      	negs	r0, r0
   1b816:	4313      	orrs	r3, r2
   1b818:	81a3      	strh	r3, [r4, #12]
   1b81a:	b005      	add	sp, #20
   1b81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b81e:	9a02      	ldr	r2, [sp, #8]
   1b820:	6921      	ldr	r1, [r4, #16]
   1b822:	f7ff fe8b 	bl	1b53c <memcpy>
   1b826:	89a3      	ldrh	r3, [r4, #12]
   1b828:	4a14      	ldr	r2, [pc, #80]	; (1b87c <__ssputs_r+0xc0>)
   1b82a:	401a      	ands	r2, r3
   1b82c:	2380      	movs	r3, #128	; 0x80
   1b82e:	4313      	orrs	r3, r2
   1b830:	81a3      	strh	r3, [r4, #12]
   1b832:	9b02      	ldr	r3, [sp, #8]
   1b834:	6126      	str	r6, [r4, #16]
   1b836:	18f6      	adds	r6, r6, r3
   1b838:	6026      	str	r6, [r4, #0]
   1b83a:	6165      	str	r5, [r4, #20]
   1b83c:	9e01      	ldr	r6, [sp, #4]
   1b83e:	1aed      	subs	r5, r5, r3
   1b840:	60a5      	str	r5, [r4, #8]
   1b842:	9b01      	ldr	r3, [sp, #4]
   1b844:	42b3      	cmp	r3, r6
   1b846:	d200      	bcs.n	1b84a <__ssputs_r+0x8e>
   1b848:	001e      	movs	r6, r3
   1b84a:	0032      	movs	r2, r6
   1b84c:	9903      	ldr	r1, [sp, #12]
   1b84e:	6820      	ldr	r0, [r4, #0]
   1b850:	f7ff fe7d 	bl	1b54e <memmove>
   1b854:	68a3      	ldr	r3, [r4, #8]
   1b856:	2000      	movs	r0, #0
   1b858:	1b9b      	subs	r3, r3, r6
   1b85a:	60a3      	str	r3, [r4, #8]
   1b85c:	6823      	ldr	r3, [r4, #0]
   1b85e:	199e      	adds	r6, r3, r6
   1b860:	6026      	str	r6, [r4, #0]
   1b862:	e7da      	b.n	1b81a <__ssputs_r+0x5e>
   1b864:	002a      	movs	r2, r5
   1b866:	0038      	movs	r0, r7
   1b868:	f000 faa1 	bl	1bdae <_realloc_r>
   1b86c:	1e06      	subs	r6, r0, #0
   1b86e:	d1e0      	bne.n	1b832 <__ssputs_r+0x76>
   1b870:	6921      	ldr	r1, [r4, #16]
   1b872:	0038      	movs	r0, r7
   1b874:	f7ff fe86 	bl	1b584 <_free_r>
   1b878:	e7c7      	b.n	1b80a <__ssputs_r+0x4e>
   1b87a:	46c0      	nop			; (mov r8, r8)
   1b87c:	fffffb7f 	.word	0xfffffb7f

0001b880 <_svfiprintf_r>:
   1b880:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b882:	b09f      	sub	sp, #124	; 0x7c
   1b884:	9002      	str	r0, [sp, #8]
   1b886:	9305      	str	r3, [sp, #20]
   1b888:	898b      	ldrh	r3, [r1, #12]
   1b88a:	000f      	movs	r7, r1
   1b88c:	0016      	movs	r6, r2
   1b88e:	061b      	lsls	r3, r3, #24
   1b890:	d511      	bpl.n	1b8b6 <_svfiprintf_r+0x36>
   1b892:	690b      	ldr	r3, [r1, #16]
   1b894:	2b00      	cmp	r3, #0
   1b896:	d10e      	bne.n	1b8b6 <_svfiprintf_r+0x36>
   1b898:	2140      	movs	r1, #64	; 0x40
   1b89a:	f7ff febd 	bl	1b618 <_malloc_r>
   1b89e:	6038      	str	r0, [r7, #0]
   1b8a0:	6138      	str	r0, [r7, #16]
   1b8a2:	2800      	cmp	r0, #0
   1b8a4:	d105      	bne.n	1b8b2 <_svfiprintf_r+0x32>
   1b8a6:	230c      	movs	r3, #12
   1b8a8:	9a02      	ldr	r2, [sp, #8]
   1b8aa:	3801      	subs	r0, #1
   1b8ac:	6013      	str	r3, [r2, #0]
   1b8ae:	b01f      	add	sp, #124	; 0x7c
   1b8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b8b2:	2340      	movs	r3, #64	; 0x40
   1b8b4:	617b      	str	r3, [r7, #20]
   1b8b6:	2300      	movs	r3, #0
   1b8b8:	ad06      	add	r5, sp, #24
   1b8ba:	616b      	str	r3, [r5, #20]
   1b8bc:	3320      	adds	r3, #32
   1b8be:	766b      	strb	r3, [r5, #25]
   1b8c0:	3310      	adds	r3, #16
   1b8c2:	76ab      	strb	r3, [r5, #26]
   1b8c4:	0034      	movs	r4, r6
   1b8c6:	7823      	ldrb	r3, [r4, #0]
   1b8c8:	2b00      	cmp	r3, #0
   1b8ca:	d147      	bne.n	1b95c <_svfiprintf_r+0xdc>
   1b8cc:	1ba3      	subs	r3, r4, r6
   1b8ce:	9304      	str	r3, [sp, #16]
   1b8d0:	d00d      	beq.n	1b8ee <_svfiprintf_r+0x6e>
   1b8d2:	1ba3      	subs	r3, r4, r6
   1b8d4:	0032      	movs	r2, r6
   1b8d6:	0039      	movs	r1, r7
   1b8d8:	9802      	ldr	r0, [sp, #8]
   1b8da:	f7ff ff6f 	bl	1b7bc <__ssputs_r>
   1b8de:	1c43      	adds	r3, r0, #1
   1b8e0:	d100      	bne.n	1b8e4 <_svfiprintf_r+0x64>
   1b8e2:	e0b5      	b.n	1ba50 <_svfiprintf_r+0x1d0>
   1b8e4:	696a      	ldr	r2, [r5, #20]
   1b8e6:	9b04      	ldr	r3, [sp, #16]
   1b8e8:	4694      	mov	ip, r2
   1b8ea:	4463      	add	r3, ip
   1b8ec:	616b      	str	r3, [r5, #20]
   1b8ee:	7823      	ldrb	r3, [r4, #0]
   1b8f0:	2b00      	cmp	r3, #0
   1b8f2:	d100      	bne.n	1b8f6 <_svfiprintf_r+0x76>
   1b8f4:	e0ac      	b.n	1ba50 <_svfiprintf_r+0x1d0>
   1b8f6:	2201      	movs	r2, #1
   1b8f8:	2300      	movs	r3, #0
   1b8fa:	4252      	negs	r2, r2
   1b8fc:	606a      	str	r2, [r5, #4]
   1b8fe:	a902      	add	r1, sp, #8
   1b900:	3254      	adds	r2, #84	; 0x54
   1b902:	1852      	adds	r2, r2, r1
   1b904:	3401      	adds	r4, #1
   1b906:	602b      	str	r3, [r5, #0]
   1b908:	60eb      	str	r3, [r5, #12]
   1b90a:	60ab      	str	r3, [r5, #8]
   1b90c:	7013      	strb	r3, [r2, #0]
   1b90e:	65ab      	str	r3, [r5, #88]	; 0x58
   1b910:	4e58      	ldr	r6, [pc, #352]	; (1ba74 <_svfiprintf_r+0x1f4>)
   1b912:	2205      	movs	r2, #5
   1b914:	7821      	ldrb	r1, [r4, #0]
   1b916:	0030      	movs	r0, r6
   1b918:	f000 fa3e 	bl	1bd98 <memchr>
   1b91c:	1c62      	adds	r2, r4, #1
   1b91e:	2800      	cmp	r0, #0
   1b920:	d120      	bne.n	1b964 <_svfiprintf_r+0xe4>
   1b922:	6829      	ldr	r1, [r5, #0]
   1b924:	06cb      	lsls	r3, r1, #27
   1b926:	d504      	bpl.n	1b932 <_svfiprintf_r+0xb2>
   1b928:	2353      	movs	r3, #83	; 0x53
   1b92a:	ae02      	add	r6, sp, #8
   1b92c:	3020      	adds	r0, #32
   1b92e:	199b      	adds	r3, r3, r6
   1b930:	7018      	strb	r0, [r3, #0]
   1b932:	070b      	lsls	r3, r1, #28
   1b934:	d504      	bpl.n	1b940 <_svfiprintf_r+0xc0>
   1b936:	2353      	movs	r3, #83	; 0x53
   1b938:	202b      	movs	r0, #43	; 0x2b
   1b93a:	ae02      	add	r6, sp, #8
   1b93c:	199b      	adds	r3, r3, r6
   1b93e:	7018      	strb	r0, [r3, #0]
   1b940:	7823      	ldrb	r3, [r4, #0]
   1b942:	2b2a      	cmp	r3, #42	; 0x2a
   1b944:	d016      	beq.n	1b974 <_svfiprintf_r+0xf4>
   1b946:	2000      	movs	r0, #0
   1b948:	210a      	movs	r1, #10
   1b94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b94c:	7822      	ldrb	r2, [r4, #0]
   1b94e:	3a30      	subs	r2, #48	; 0x30
   1b950:	2a09      	cmp	r2, #9
   1b952:	d955      	bls.n	1ba00 <_svfiprintf_r+0x180>
   1b954:	2800      	cmp	r0, #0
   1b956:	d015      	beq.n	1b984 <_svfiprintf_r+0x104>
   1b958:	9309      	str	r3, [sp, #36]	; 0x24
   1b95a:	e013      	b.n	1b984 <_svfiprintf_r+0x104>
   1b95c:	2b25      	cmp	r3, #37	; 0x25
   1b95e:	d0b5      	beq.n	1b8cc <_svfiprintf_r+0x4c>
   1b960:	3401      	adds	r4, #1
   1b962:	e7b0      	b.n	1b8c6 <_svfiprintf_r+0x46>
   1b964:	2301      	movs	r3, #1
   1b966:	1b80      	subs	r0, r0, r6
   1b968:	4083      	lsls	r3, r0
   1b96a:	6829      	ldr	r1, [r5, #0]
   1b96c:	0014      	movs	r4, r2
   1b96e:	430b      	orrs	r3, r1
   1b970:	602b      	str	r3, [r5, #0]
   1b972:	e7cd      	b.n	1b910 <_svfiprintf_r+0x90>
   1b974:	9b05      	ldr	r3, [sp, #20]
   1b976:	1d18      	adds	r0, r3, #4
   1b978:	681b      	ldr	r3, [r3, #0]
   1b97a:	9005      	str	r0, [sp, #20]
   1b97c:	2b00      	cmp	r3, #0
   1b97e:	db39      	blt.n	1b9f4 <_svfiprintf_r+0x174>
   1b980:	9309      	str	r3, [sp, #36]	; 0x24
   1b982:	0014      	movs	r4, r2
   1b984:	7823      	ldrb	r3, [r4, #0]
   1b986:	2b2e      	cmp	r3, #46	; 0x2e
   1b988:	d10b      	bne.n	1b9a2 <_svfiprintf_r+0x122>
   1b98a:	7863      	ldrb	r3, [r4, #1]
   1b98c:	1c62      	adds	r2, r4, #1
   1b98e:	2b2a      	cmp	r3, #42	; 0x2a
   1b990:	d13e      	bne.n	1ba10 <_svfiprintf_r+0x190>
   1b992:	9b05      	ldr	r3, [sp, #20]
   1b994:	3402      	adds	r4, #2
   1b996:	1d1a      	adds	r2, r3, #4
   1b998:	681b      	ldr	r3, [r3, #0]
   1b99a:	9205      	str	r2, [sp, #20]
   1b99c:	2b00      	cmp	r3, #0
   1b99e:	db34      	blt.n	1ba0a <_svfiprintf_r+0x18a>
   1b9a0:	9307      	str	r3, [sp, #28]
   1b9a2:	4e35      	ldr	r6, [pc, #212]	; (1ba78 <_svfiprintf_r+0x1f8>)
   1b9a4:	7821      	ldrb	r1, [r4, #0]
   1b9a6:	2203      	movs	r2, #3
   1b9a8:	0030      	movs	r0, r6
   1b9aa:	f000 f9f5 	bl	1bd98 <memchr>
   1b9ae:	2800      	cmp	r0, #0
   1b9b0:	d006      	beq.n	1b9c0 <_svfiprintf_r+0x140>
   1b9b2:	2340      	movs	r3, #64	; 0x40
   1b9b4:	1b80      	subs	r0, r0, r6
   1b9b6:	4083      	lsls	r3, r0
   1b9b8:	682a      	ldr	r2, [r5, #0]
   1b9ba:	3401      	adds	r4, #1
   1b9bc:	4313      	orrs	r3, r2
   1b9be:	602b      	str	r3, [r5, #0]
   1b9c0:	7821      	ldrb	r1, [r4, #0]
   1b9c2:	2206      	movs	r2, #6
   1b9c4:	482d      	ldr	r0, [pc, #180]	; (1ba7c <_svfiprintf_r+0x1fc>)
   1b9c6:	1c66      	adds	r6, r4, #1
   1b9c8:	7629      	strb	r1, [r5, #24]
   1b9ca:	f000 f9e5 	bl	1bd98 <memchr>
   1b9ce:	2800      	cmp	r0, #0
   1b9d0:	d046      	beq.n	1ba60 <_svfiprintf_r+0x1e0>
   1b9d2:	4b2b      	ldr	r3, [pc, #172]	; (1ba80 <_svfiprintf_r+0x200>)
   1b9d4:	2b00      	cmp	r3, #0
   1b9d6:	d12f      	bne.n	1ba38 <_svfiprintf_r+0x1b8>
   1b9d8:	6829      	ldr	r1, [r5, #0]
   1b9da:	9b05      	ldr	r3, [sp, #20]
   1b9dc:	2207      	movs	r2, #7
   1b9de:	05c9      	lsls	r1, r1, #23
   1b9e0:	d528      	bpl.n	1ba34 <_svfiprintf_r+0x1b4>
   1b9e2:	189b      	adds	r3, r3, r2
   1b9e4:	4393      	bics	r3, r2
   1b9e6:	3308      	adds	r3, #8
   1b9e8:	9305      	str	r3, [sp, #20]
   1b9ea:	696b      	ldr	r3, [r5, #20]
   1b9ec:	9a03      	ldr	r2, [sp, #12]
   1b9ee:	189b      	adds	r3, r3, r2
   1b9f0:	616b      	str	r3, [r5, #20]
   1b9f2:	e767      	b.n	1b8c4 <_svfiprintf_r+0x44>
   1b9f4:	425b      	negs	r3, r3
   1b9f6:	60eb      	str	r3, [r5, #12]
   1b9f8:	2302      	movs	r3, #2
   1b9fa:	430b      	orrs	r3, r1
   1b9fc:	602b      	str	r3, [r5, #0]
   1b9fe:	e7c0      	b.n	1b982 <_svfiprintf_r+0x102>
   1ba00:	434b      	muls	r3, r1
   1ba02:	3401      	adds	r4, #1
   1ba04:	189b      	adds	r3, r3, r2
   1ba06:	2001      	movs	r0, #1
   1ba08:	e7a0      	b.n	1b94c <_svfiprintf_r+0xcc>
   1ba0a:	2301      	movs	r3, #1
   1ba0c:	425b      	negs	r3, r3
   1ba0e:	e7c7      	b.n	1b9a0 <_svfiprintf_r+0x120>
   1ba10:	2300      	movs	r3, #0
   1ba12:	0014      	movs	r4, r2
   1ba14:	200a      	movs	r0, #10
   1ba16:	001a      	movs	r2, r3
   1ba18:	606b      	str	r3, [r5, #4]
   1ba1a:	7821      	ldrb	r1, [r4, #0]
   1ba1c:	3930      	subs	r1, #48	; 0x30
   1ba1e:	2909      	cmp	r1, #9
   1ba20:	d903      	bls.n	1ba2a <_svfiprintf_r+0x1aa>
   1ba22:	2b00      	cmp	r3, #0
   1ba24:	d0bd      	beq.n	1b9a2 <_svfiprintf_r+0x122>
   1ba26:	9207      	str	r2, [sp, #28]
   1ba28:	e7bb      	b.n	1b9a2 <_svfiprintf_r+0x122>
   1ba2a:	4342      	muls	r2, r0
   1ba2c:	3401      	adds	r4, #1
   1ba2e:	1852      	adds	r2, r2, r1
   1ba30:	2301      	movs	r3, #1
   1ba32:	e7f2      	b.n	1ba1a <_svfiprintf_r+0x19a>
   1ba34:	3307      	adds	r3, #7
   1ba36:	e7d5      	b.n	1b9e4 <_svfiprintf_r+0x164>
   1ba38:	ab05      	add	r3, sp, #20
   1ba3a:	9300      	str	r3, [sp, #0]
   1ba3c:	003a      	movs	r2, r7
   1ba3e:	4b11      	ldr	r3, [pc, #68]	; (1ba84 <_svfiprintf_r+0x204>)
   1ba40:	0029      	movs	r1, r5
   1ba42:	9802      	ldr	r0, [sp, #8]
   1ba44:	e000      	b.n	1ba48 <_svfiprintf_r+0x1c8>
   1ba46:	bf00      	nop
   1ba48:	9003      	str	r0, [sp, #12]
   1ba4a:	9b03      	ldr	r3, [sp, #12]
   1ba4c:	3301      	adds	r3, #1
   1ba4e:	d1cc      	bne.n	1b9ea <_svfiprintf_r+0x16a>
   1ba50:	89bb      	ldrh	r3, [r7, #12]
   1ba52:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1ba54:	065b      	lsls	r3, r3, #25
   1ba56:	d400      	bmi.n	1ba5a <_svfiprintf_r+0x1da>
   1ba58:	e729      	b.n	1b8ae <_svfiprintf_r+0x2e>
   1ba5a:	2001      	movs	r0, #1
   1ba5c:	4240      	negs	r0, r0
   1ba5e:	e726      	b.n	1b8ae <_svfiprintf_r+0x2e>
   1ba60:	ab05      	add	r3, sp, #20
   1ba62:	9300      	str	r3, [sp, #0]
   1ba64:	003a      	movs	r2, r7
   1ba66:	4b07      	ldr	r3, [pc, #28]	; (1ba84 <_svfiprintf_r+0x204>)
   1ba68:	0029      	movs	r1, r5
   1ba6a:	9802      	ldr	r0, [sp, #8]
   1ba6c:	f000 f87a 	bl	1bb64 <_printf_i>
   1ba70:	e7ea      	b.n	1ba48 <_svfiprintf_r+0x1c8>
   1ba72:	46c0      	nop			; (mov r8, r8)
   1ba74:	0001c25c 	.word	0x0001c25c
   1ba78:	0001c262 	.word	0x0001c262
   1ba7c:	0001c266 	.word	0x0001c266
   1ba80:	00000000 	.word	0x00000000
   1ba84:	0001b7bd 	.word	0x0001b7bd

0001ba88 <_printf_common>:
   1ba88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ba8a:	0015      	movs	r5, r2
   1ba8c:	9301      	str	r3, [sp, #4]
   1ba8e:	688a      	ldr	r2, [r1, #8]
   1ba90:	690b      	ldr	r3, [r1, #16]
   1ba92:	9000      	str	r0, [sp, #0]
   1ba94:	000c      	movs	r4, r1
   1ba96:	4293      	cmp	r3, r2
   1ba98:	da00      	bge.n	1ba9c <_printf_common+0x14>
   1ba9a:	0013      	movs	r3, r2
   1ba9c:	0022      	movs	r2, r4
   1ba9e:	602b      	str	r3, [r5, #0]
   1baa0:	3243      	adds	r2, #67	; 0x43
   1baa2:	7812      	ldrb	r2, [r2, #0]
   1baa4:	2a00      	cmp	r2, #0
   1baa6:	d001      	beq.n	1baac <_printf_common+0x24>
   1baa8:	3301      	adds	r3, #1
   1baaa:	602b      	str	r3, [r5, #0]
   1baac:	6823      	ldr	r3, [r4, #0]
   1baae:	069b      	lsls	r3, r3, #26
   1bab0:	d502      	bpl.n	1bab8 <_printf_common+0x30>
   1bab2:	682b      	ldr	r3, [r5, #0]
   1bab4:	3302      	adds	r3, #2
   1bab6:	602b      	str	r3, [r5, #0]
   1bab8:	2706      	movs	r7, #6
   1baba:	6823      	ldr	r3, [r4, #0]
   1babc:	401f      	ands	r7, r3
   1babe:	d027      	beq.n	1bb10 <_printf_common+0x88>
   1bac0:	0023      	movs	r3, r4
   1bac2:	3343      	adds	r3, #67	; 0x43
   1bac4:	781b      	ldrb	r3, [r3, #0]
   1bac6:	1e5a      	subs	r2, r3, #1
   1bac8:	4193      	sbcs	r3, r2
   1baca:	6822      	ldr	r2, [r4, #0]
   1bacc:	0692      	lsls	r2, r2, #26
   1bace:	d430      	bmi.n	1bb32 <_printf_common+0xaa>
   1bad0:	0022      	movs	r2, r4
   1bad2:	9901      	ldr	r1, [sp, #4]
   1bad4:	3243      	adds	r2, #67	; 0x43
   1bad6:	9800      	ldr	r0, [sp, #0]
   1bad8:	9e08      	ldr	r6, [sp, #32]
   1bada:	47b0      	blx	r6
   1badc:	1c43      	adds	r3, r0, #1
   1bade:	d025      	beq.n	1bb2c <_printf_common+0xa4>
   1bae0:	2306      	movs	r3, #6
   1bae2:	6820      	ldr	r0, [r4, #0]
   1bae4:	682a      	ldr	r2, [r5, #0]
   1bae6:	68e1      	ldr	r1, [r4, #12]
   1bae8:	4003      	ands	r3, r0
   1baea:	2500      	movs	r5, #0
   1baec:	2b04      	cmp	r3, #4
   1baee:	d103      	bne.n	1baf8 <_printf_common+0x70>
   1baf0:	1a8d      	subs	r5, r1, r2
   1baf2:	43eb      	mvns	r3, r5
   1baf4:	17db      	asrs	r3, r3, #31
   1baf6:	401d      	ands	r5, r3
   1baf8:	68a3      	ldr	r3, [r4, #8]
   1bafa:	6922      	ldr	r2, [r4, #16]
   1bafc:	4293      	cmp	r3, r2
   1bafe:	dd01      	ble.n	1bb04 <_printf_common+0x7c>
   1bb00:	1a9b      	subs	r3, r3, r2
   1bb02:	18ed      	adds	r5, r5, r3
   1bb04:	2700      	movs	r7, #0
   1bb06:	42bd      	cmp	r5, r7
   1bb08:	d120      	bne.n	1bb4c <_printf_common+0xc4>
   1bb0a:	2000      	movs	r0, #0
   1bb0c:	e010      	b.n	1bb30 <_printf_common+0xa8>
   1bb0e:	3701      	adds	r7, #1
   1bb10:	68e3      	ldr	r3, [r4, #12]
   1bb12:	682a      	ldr	r2, [r5, #0]
   1bb14:	1a9b      	subs	r3, r3, r2
   1bb16:	429f      	cmp	r7, r3
   1bb18:	dad2      	bge.n	1bac0 <_printf_common+0x38>
   1bb1a:	0022      	movs	r2, r4
   1bb1c:	2301      	movs	r3, #1
   1bb1e:	3219      	adds	r2, #25
   1bb20:	9901      	ldr	r1, [sp, #4]
   1bb22:	9800      	ldr	r0, [sp, #0]
   1bb24:	9e08      	ldr	r6, [sp, #32]
   1bb26:	47b0      	blx	r6
   1bb28:	1c43      	adds	r3, r0, #1
   1bb2a:	d1f0      	bne.n	1bb0e <_printf_common+0x86>
   1bb2c:	2001      	movs	r0, #1
   1bb2e:	4240      	negs	r0, r0
   1bb30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1bb32:	2030      	movs	r0, #48	; 0x30
   1bb34:	18e1      	adds	r1, r4, r3
   1bb36:	3143      	adds	r1, #67	; 0x43
   1bb38:	7008      	strb	r0, [r1, #0]
   1bb3a:	0021      	movs	r1, r4
   1bb3c:	1c5a      	adds	r2, r3, #1
   1bb3e:	3145      	adds	r1, #69	; 0x45
   1bb40:	7809      	ldrb	r1, [r1, #0]
   1bb42:	18a2      	adds	r2, r4, r2
   1bb44:	3243      	adds	r2, #67	; 0x43
   1bb46:	3302      	adds	r3, #2
   1bb48:	7011      	strb	r1, [r2, #0]
   1bb4a:	e7c1      	b.n	1bad0 <_printf_common+0x48>
   1bb4c:	0022      	movs	r2, r4
   1bb4e:	2301      	movs	r3, #1
   1bb50:	321a      	adds	r2, #26
   1bb52:	9901      	ldr	r1, [sp, #4]
   1bb54:	9800      	ldr	r0, [sp, #0]
   1bb56:	9e08      	ldr	r6, [sp, #32]
   1bb58:	47b0      	blx	r6
   1bb5a:	1c43      	adds	r3, r0, #1
   1bb5c:	d0e6      	beq.n	1bb2c <_printf_common+0xa4>
   1bb5e:	3701      	adds	r7, #1
   1bb60:	e7d1      	b.n	1bb06 <_printf_common+0x7e>
	...

0001bb64 <_printf_i>:
   1bb64:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb66:	b08b      	sub	sp, #44	; 0x2c
   1bb68:	9206      	str	r2, [sp, #24]
   1bb6a:	000a      	movs	r2, r1
   1bb6c:	3243      	adds	r2, #67	; 0x43
   1bb6e:	9307      	str	r3, [sp, #28]
   1bb70:	9005      	str	r0, [sp, #20]
   1bb72:	9204      	str	r2, [sp, #16]
   1bb74:	7e0a      	ldrb	r2, [r1, #24]
   1bb76:	000c      	movs	r4, r1
   1bb78:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bb7a:	2a6e      	cmp	r2, #110	; 0x6e
   1bb7c:	d100      	bne.n	1bb80 <_printf_i+0x1c>
   1bb7e:	e08f      	b.n	1bca0 <_printf_i+0x13c>
   1bb80:	d817      	bhi.n	1bbb2 <_printf_i+0x4e>
   1bb82:	2a63      	cmp	r2, #99	; 0x63
   1bb84:	d02c      	beq.n	1bbe0 <_printf_i+0x7c>
   1bb86:	d808      	bhi.n	1bb9a <_printf_i+0x36>
   1bb88:	2a00      	cmp	r2, #0
   1bb8a:	d100      	bne.n	1bb8e <_printf_i+0x2a>
   1bb8c:	e099      	b.n	1bcc2 <_printf_i+0x15e>
   1bb8e:	2a58      	cmp	r2, #88	; 0x58
   1bb90:	d054      	beq.n	1bc3c <_printf_i+0xd8>
   1bb92:	0026      	movs	r6, r4
   1bb94:	3642      	adds	r6, #66	; 0x42
   1bb96:	7032      	strb	r2, [r6, #0]
   1bb98:	e029      	b.n	1bbee <_printf_i+0x8a>
   1bb9a:	2a64      	cmp	r2, #100	; 0x64
   1bb9c:	d001      	beq.n	1bba2 <_printf_i+0x3e>
   1bb9e:	2a69      	cmp	r2, #105	; 0x69
   1bba0:	d1f7      	bne.n	1bb92 <_printf_i+0x2e>
   1bba2:	6821      	ldr	r1, [r4, #0]
   1bba4:	681a      	ldr	r2, [r3, #0]
   1bba6:	0608      	lsls	r0, r1, #24
   1bba8:	d523      	bpl.n	1bbf2 <_printf_i+0x8e>
   1bbaa:	1d11      	adds	r1, r2, #4
   1bbac:	6019      	str	r1, [r3, #0]
   1bbae:	6815      	ldr	r5, [r2, #0]
   1bbb0:	e025      	b.n	1bbfe <_printf_i+0x9a>
   1bbb2:	2a73      	cmp	r2, #115	; 0x73
   1bbb4:	d100      	bne.n	1bbb8 <_printf_i+0x54>
   1bbb6:	e088      	b.n	1bcca <_printf_i+0x166>
   1bbb8:	d808      	bhi.n	1bbcc <_printf_i+0x68>
   1bbba:	2a6f      	cmp	r2, #111	; 0x6f
   1bbbc:	d029      	beq.n	1bc12 <_printf_i+0xae>
   1bbbe:	2a70      	cmp	r2, #112	; 0x70
   1bbc0:	d1e7      	bne.n	1bb92 <_printf_i+0x2e>
   1bbc2:	2220      	movs	r2, #32
   1bbc4:	6809      	ldr	r1, [r1, #0]
   1bbc6:	430a      	orrs	r2, r1
   1bbc8:	6022      	str	r2, [r4, #0]
   1bbca:	e003      	b.n	1bbd4 <_printf_i+0x70>
   1bbcc:	2a75      	cmp	r2, #117	; 0x75
   1bbce:	d020      	beq.n	1bc12 <_printf_i+0xae>
   1bbd0:	2a78      	cmp	r2, #120	; 0x78
   1bbd2:	d1de      	bne.n	1bb92 <_printf_i+0x2e>
   1bbd4:	0022      	movs	r2, r4
   1bbd6:	2178      	movs	r1, #120	; 0x78
   1bbd8:	3245      	adds	r2, #69	; 0x45
   1bbda:	7011      	strb	r1, [r2, #0]
   1bbdc:	4a6c      	ldr	r2, [pc, #432]	; (1bd90 <_printf_i+0x22c>)
   1bbde:	e030      	b.n	1bc42 <_printf_i+0xde>
   1bbe0:	000e      	movs	r6, r1
   1bbe2:	681a      	ldr	r2, [r3, #0]
   1bbe4:	3642      	adds	r6, #66	; 0x42
   1bbe6:	1d11      	adds	r1, r2, #4
   1bbe8:	6019      	str	r1, [r3, #0]
   1bbea:	6813      	ldr	r3, [r2, #0]
   1bbec:	7033      	strb	r3, [r6, #0]
   1bbee:	2301      	movs	r3, #1
   1bbf0:	e079      	b.n	1bce6 <_printf_i+0x182>
   1bbf2:	0649      	lsls	r1, r1, #25
   1bbf4:	d5d9      	bpl.n	1bbaa <_printf_i+0x46>
   1bbf6:	1d11      	adds	r1, r2, #4
   1bbf8:	6019      	str	r1, [r3, #0]
   1bbfa:	2300      	movs	r3, #0
   1bbfc:	5ed5      	ldrsh	r5, [r2, r3]
   1bbfe:	2d00      	cmp	r5, #0
   1bc00:	da03      	bge.n	1bc0a <_printf_i+0xa6>
   1bc02:	232d      	movs	r3, #45	; 0x2d
   1bc04:	9a04      	ldr	r2, [sp, #16]
   1bc06:	426d      	negs	r5, r5
   1bc08:	7013      	strb	r3, [r2, #0]
   1bc0a:	4b62      	ldr	r3, [pc, #392]	; (1bd94 <_printf_i+0x230>)
   1bc0c:	270a      	movs	r7, #10
   1bc0e:	9303      	str	r3, [sp, #12]
   1bc10:	e02f      	b.n	1bc72 <_printf_i+0x10e>
   1bc12:	6820      	ldr	r0, [r4, #0]
   1bc14:	6819      	ldr	r1, [r3, #0]
   1bc16:	0605      	lsls	r5, r0, #24
   1bc18:	d503      	bpl.n	1bc22 <_printf_i+0xbe>
   1bc1a:	1d08      	adds	r0, r1, #4
   1bc1c:	6018      	str	r0, [r3, #0]
   1bc1e:	680d      	ldr	r5, [r1, #0]
   1bc20:	e005      	b.n	1bc2e <_printf_i+0xca>
   1bc22:	0640      	lsls	r0, r0, #25
   1bc24:	d5f9      	bpl.n	1bc1a <_printf_i+0xb6>
   1bc26:	680d      	ldr	r5, [r1, #0]
   1bc28:	1d08      	adds	r0, r1, #4
   1bc2a:	6018      	str	r0, [r3, #0]
   1bc2c:	b2ad      	uxth	r5, r5
   1bc2e:	4b59      	ldr	r3, [pc, #356]	; (1bd94 <_printf_i+0x230>)
   1bc30:	2708      	movs	r7, #8
   1bc32:	9303      	str	r3, [sp, #12]
   1bc34:	2a6f      	cmp	r2, #111	; 0x6f
   1bc36:	d018      	beq.n	1bc6a <_printf_i+0x106>
   1bc38:	270a      	movs	r7, #10
   1bc3a:	e016      	b.n	1bc6a <_printf_i+0x106>
   1bc3c:	3145      	adds	r1, #69	; 0x45
   1bc3e:	700a      	strb	r2, [r1, #0]
   1bc40:	4a54      	ldr	r2, [pc, #336]	; (1bd94 <_printf_i+0x230>)
   1bc42:	9203      	str	r2, [sp, #12]
   1bc44:	681a      	ldr	r2, [r3, #0]
   1bc46:	6821      	ldr	r1, [r4, #0]
   1bc48:	1d10      	adds	r0, r2, #4
   1bc4a:	6018      	str	r0, [r3, #0]
   1bc4c:	6815      	ldr	r5, [r2, #0]
   1bc4e:	0608      	lsls	r0, r1, #24
   1bc50:	d522      	bpl.n	1bc98 <_printf_i+0x134>
   1bc52:	07cb      	lsls	r3, r1, #31
   1bc54:	d502      	bpl.n	1bc5c <_printf_i+0xf8>
   1bc56:	2320      	movs	r3, #32
   1bc58:	4319      	orrs	r1, r3
   1bc5a:	6021      	str	r1, [r4, #0]
   1bc5c:	2710      	movs	r7, #16
   1bc5e:	2d00      	cmp	r5, #0
   1bc60:	d103      	bne.n	1bc6a <_printf_i+0x106>
   1bc62:	2320      	movs	r3, #32
   1bc64:	6822      	ldr	r2, [r4, #0]
   1bc66:	439a      	bics	r2, r3
   1bc68:	6022      	str	r2, [r4, #0]
   1bc6a:	0023      	movs	r3, r4
   1bc6c:	2200      	movs	r2, #0
   1bc6e:	3343      	adds	r3, #67	; 0x43
   1bc70:	701a      	strb	r2, [r3, #0]
   1bc72:	6863      	ldr	r3, [r4, #4]
   1bc74:	60a3      	str	r3, [r4, #8]
   1bc76:	2b00      	cmp	r3, #0
   1bc78:	db5c      	blt.n	1bd34 <_printf_i+0x1d0>
   1bc7a:	2204      	movs	r2, #4
   1bc7c:	6821      	ldr	r1, [r4, #0]
   1bc7e:	4391      	bics	r1, r2
   1bc80:	6021      	str	r1, [r4, #0]
   1bc82:	2d00      	cmp	r5, #0
   1bc84:	d158      	bne.n	1bd38 <_printf_i+0x1d4>
   1bc86:	9e04      	ldr	r6, [sp, #16]
   1bc88:	2b00      	cmp	r3, #0
   1bc8a:	d064      	beq.n	1bd56 <_printf_i+0x1f2>
   1bc8c:	0026      	movs	r6, r4
   1bc8e:	9b03      	ldr	r3, [sp, #12]
   1bc90:	3642      	adds	r6, #66	; 0x42
   1bc92:	781b      	ldrb	r3, [r3, #0]
   1bc94:	7033      	strb	r3, [r6, #0]
   1bc96:	e05e      	b.n	1bd56 <_printf_i+0x1f2>
   1bc98:	0648      	lsls	r0, r1, #25
   1bc9a:	d5da      	bpl.n	1bc52 <_printf_i+0xee>
   1bc9c:	b2ad      	uxth	r5, r5
   1bc9e:	e7d8      	b.n	1bc52 <_printf_i+0xee>
   1bca0:	6809      	ldr	r1, [r1, #0]
   1bca2:	681a      	ldr	r2, [r3, #0]
   1bca4:	0608      	lsls	r0, r1, #24
   1bca6:	d505      	bpl.n	1bcb4 <_printf_i+0x150>
   1bca8:	1d11      	adds	r1, r2, #4
   1bcaa:	6019      	str	r1, [r3, #0]
   1bcac:	6813      	ldr	r3, [r2, #0]
   1bcae:	6962      	ldr	r2, [r4, #20]
   1bcb0:	601a      	str	r2, [r3, #0]
   1bcb2:	e006      	b.n	1bcc2 <_printf_i+0x15e>
   1bcb4:	0649      	lsls	r1, r1, #25
   1bcb6:	d5f7      	bpl.n	1bca8 <_printf_i+0x144>
   1bcb8:	1d11      	adds	r1, r2, #4
   1bcba:	6019      	str	r1, [r3, #0]
   1bcbc:	6813      	ldr	r3, [r2, #0]
   1bcbe:	8aa2      	ldrh	r2, [r4, #20]
   1bcc0:	801a      	strh	r2, [r3, #0]
   1bcc2:	2300      	movs	r3, #0
   1bcc4:	9e04      	ldr	r6, [sp, #16]
   1bcc6:	6123      	str	r3, [r4, #16]
   1bcc8:	e054      	b.n	1bd74 <_printf_i+0x210>
   1bcca:	681a      	ldr	r2, [r3, #0]
   1bccc:	1d11      	adds	r1, r2, #4
   1bcce:	6019      	str	r1, [r3, #0]
   1bcd0:	6816      	ldr	r6, [r2, #0]
   1bcd2:	2100      	movs	r1, #0
   1bcd4:	6862      	ldr	r2, [r4, #4]
   1bcd6:	0030      	movs	r0, r6
   1bcd8:	f000 f85e 	bl	1bd98 <memchr>
   1bcdc:	2800      	cmp	r0, #0
   1bcde:	d001      	beq.n	1bce4 <_printf_i+0x180>
   1bce0:	1b80      	subs	r0, r0, r6
   1bce2:	6060      	str	r0, [r4, #4]
   1bce4:	6863      	ldr	r3, [r4, #4]
   1bce6:	6123      	str	r3, [r4, #16]
   1bce8:	2300      	movs	r3, #0
   1bcea:	9a04      	ldr	r2, [sp, #16]
   1bcec:	7013      	strb	r3, [r2, #0]
   1bcee:	e041      	b.n	1bd74 <_printf_i+0x210>
   1bcf0:	6923      	ldr	r3, [r4, #16]
   1bcf2:	0032      	movs	r2, r6
   1bcf4:	9906      	ldr	r1, [sp, #24]
   1bcf6:	9805      	ldr	r0, [sp, #20]
   1bcf8:	9d07      	ldr	r5, [sp, #28]
   1bcfa:	47a8      	blx	r5
   1bcfc:	1c43      	adds	r3, r0, #1
   1bcfe:	d043      	beq.n	1bd88 <_printf_i+0x224>
   1bd00:	6823      	ldr	r3, [r4, #0]
   1bd02:	2500      	movs	r5, #0
   1bd04:	079b      	lsls	r3, r3, #30
   1bd06:	d40f      	bmi.n	1bd28 <_printf_i+0x1c4>
   1bd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bd0a:	68e0      	ldr	r0, [r4, #12]
   1bd0c:	4298      	cmp	r0, r3
   1bd0e:	da3d      	bge.n	1bd8c <_printf_i+0x228>
   1bd10:	0018      	movs	r0, r3
   1bd12:	e03b      	b.n	1bd8c <_printf_i+0x228>
   1bd14:	0022      	movs	r2, r4
   1bd16:	2301      	movs	r3, #1
   1bd18:	3219      	adds	r2, #25
   1bd1a:	9906      	ldr	r1, [sp, #24]
   1bd1c:	9805      	ldr	r0, [sp, #20]
   1bd1e:	9e07      	ldr	r6, [sp, #28]
   1bd20:	47b0      	blx	r6
   1bd22:	1c43      	adds	r3, r0, #1
   1bd24:	d030      	beq.n	1bd88 <_printf_i+0x224>
   1bd26:	3501      	adds	r5, #1
   1bd28:	68e3      	ldr	r3, [r4, #12]
   1bd2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1bd2c:	1a9b      	subs	r3, r3, r2
   1bd2e:	429d      	cmp	r5, r3
   1bd30:	dbf0      	blt.n	1bd14 <_printf_i+0x1b0>
   1bd32:	e7e9      	b.n	1bd08 <_printf_i+0x1a4>
   1bd34:	2d00      	cmp	r5, #0
   1bd36:	d0a9      	beq.n	1bc8c <_printf_i+0x128>
   1bd38:	9e04      	ldr	r6, [sp, #16]
   1bd3a:	0028      	movs	r0, r5
   1bd3c:	0039      	movs	r1, r7
   1bd3e:	f7fd ff3b 	bl	19bb8 <__aeabi_uidivmod>
   1bd42:	9b03      	ldr	r3, [sp, #12]
   1bd44:	3e01      	subs	r6, #1
   1bd46:	5c5b      	ldrb	r3, [r3, r1]
   1bd48:	0028      	movs	r0, r5
   1bd4a:	7033      	strb	r3, [r6, #0]
   1bd4c:	0039      	movs	r1, r7
   1bd4e:	f7fd fead 	bl	19aac <__udivsi3>
   1bd52:	1e05      	subs	r5, r0, #0
   1bd54:	d1f1      	bne.n	1bd3a <_printf_i+0x1d6>
   1bd56:	2f08      	cmp	r7, #8
   1bd58:	d109      	bne.n	1bd6e <_printf_i+0x20a>
   1bd5a:	6823      	ldr	r3, [r4, #0]
   1bd5c:	07db      	lsls	r3, r3, #31
   1bd5e:	d506      	bpl.n	1bd6e <_printf_i+0x20a>
   1bd60:	6863      	ldr	r3, [r4, #4]
   1bd62:	6922      	ldr	r2, [r4, #16]
   1bd64:	4293      	cmp	r3, r2
   1bd66:	dc02      	bgt.n	1bd6e <_printf_i+0x20a>
   1bd68:	2330      	movs	r3, #48	; 0x30
   1bd6a:	3e01      	subs	r6, #1
   1bd6c:	7033      	strb	r3, [r6, #0]
   1bd6e:	9b04      	ldr	r3, [sp, #16]
   1bd70:	1b9b      	subs	r3, r3, r6
   1bd72:	6123      	str	r3, [r4, #16]
   1bd74:	9b07      	ldr	r3, [sp, #28]
   1bd76:	aa09      	add	r2, sp, #36	; 0x24
   1bd78:	9300      	str	r3, [sp, #0]
   1bd7a:	0021      	movs	r1, r4
   1bd7c:	9b06      	ldr	r3, [sp, #24]
   1bd7e:	9805      	ldr	r0, [sp, #20]
   1bd80:	f7ff fe82 	bl	1ba88 <_printf_common>
   1bd84:	1c43      	adds	r3, r0, #1
   1bd86:	d1b3      	bne.n	1bcf0 <_printf_i+0x18c>
   1bd88:	2001      	movs	r0, #1
   1bd8a:	4240      	negs	r0, r0
   1bd8c:	b00b      	add	sp, #44	; 0x2c
   1bd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bd90:	0001c27e 	.word	0x0001c27e
   1bd94:	0001c26d 	.word	0x0001c26d

0001bd98 <memchr>:
   1bd98:	b2c9      	uxtb	r1, r1
   1bd9a:	1882      	adds	r2, r0, r2
   1bd9c:	4290      	cmp	r0, r2
   1bd9e:	d101      	bne.n	1bda4 <memchr+0xc>
   1bda0:	2000      	movs	r0, #0
   1bda2:	4770      	bx	lr
   1bda4:	7803      	ldrb	r3, [r0, #0]
   1bda6:	428b      	cmp	r3, r1
   1bda8:	d0fb      	beq.n	1bda2 <memchr+0xa>
   1bdaa:	3001      	adds	r0, #1
   1bdac:	e7f6      	b.n	1bd9c <memchr+0x4>

0001bdae <_realloc_r>:
   1bdae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bdb0:	0007      	movs	r7, r0
   1bdb2:	000d      	movs	r5, r1
   1bdb4:	0016      	movs	r6, r2
   1bdb6:	2900      	cmp	r1, #0
   1bdb8:	d105      	bne.n	1bdc6 <_realloc_r+0x18>
   1bdba:	0011      	movs	r1, r2
   1bdbc:	f7ff fc2c 	bl	1b618 <_malloc_r>
   1bdc0:	0004      	movs	r4, r0
   1bdc2:	0020      	movs	r0, r4
   1bdc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bdc6:	2a00      	cmp	r2, #0
   1bdc8:	d103      	bne.n	1bdd2 <_realloc_r+0x24>
   1bdca:	f7ff fbdb 	bl	1b584 <_free_r>
   1bdce:	0034      	movs	r4, r6
   1bdd0:	e7f7      	b.n	1bdc2 <_realloc_r+0x14>
   1bdd2:	f000 f812 	bl	1bdfa <_malloc_usable_size_r>
   1bdd6:	002c      	movs	r4, r5
   1bdd8:	4286      	cmp	r6, r0
   1bdda:	d9f2      	bls.n	1bdc2 <_realloc_r+0x14>
   1bddc:	0031      	movs	r1, r6
   1bdde:	0038      	movs	r0, r7
   1bde0:	f7ff fc1a 	bl	1b618 <_malloc_r>
   1bde4:	1e04      	subs	r4, r0, #0
   1bde6:	d0ec      	beq.n	1bdc2 <_realloc_r+0x14>
   1bde8:	0029      	movs	r1, r5
   1bdea:	0032      	movs	r2, r6
   1bdec:	f7ff fba6 	bl	1b53c <memcpy>
   1bdf0:	0029      	movs	r1, r5
   1bdf2:	0038      	movs	r0, r7
   1bdf4:	f7ff fbc6 	bl	1b584 <_free_r>
   1bdf8:	e7e3      	b.n	1bdc2 <_realloc_r+0x14>

0001bdfa <_malloc_usable_size_r>:
   1bdfa:	1f0b      	subs	r3, r1, #4
   1bdfc:	681b      	ldr	r3, [r3, #0]
   1bdfe:	1f18      	subs	r0, r3, #4
   1be00:	2b00      	cmp	r3, #0
   1be02:	da01      	bge.n	1be08 <_malloc_usable_size_r+0xe>
   1be04:	580b      	ldr	r3, [r1, r0]
   1be06:	18c0      	adds	r0, r0, r3
   1be08:	4770      	bx	lr
   1be0a:	0000      	movs	r0, r0
   1be0c:	65657246 	.word	0x65657246
   1be10:	534f5452 	.word	0x534f5452
   1be14:	494c4320 	.word	0x494c4320
   1be18:	540a0d2e 	.word	0x540a0d2e
   1be1c:	20657079 	.word	0x20657079
   1be20:	706c6548 	.word	0x706c6548
   1be24:	206f7420 	.word	0x206f7420
   1be28:	77656976 	.word	0x77656976
   1be2c:	6c206120 	.word	0x6c206120
   1be30:	20747369 	.word	0x20747369
   1be34:	7220666f 	.word	0x7220666f
   1be38:	73696765 	.word	0x73696765
   1be3c:	65726574 	.word	0x65726574
   1be40:	6f632064 	.word	0x6f632064
   1be44:	6e616d6d 	.word	0x6e616d6d
   1be48:	0d2e7364 	.word	0x0d2e7364
   1be4c:	0000000a 	.word	0x0000000a
   1be50:	00000a0d 	.word	0x00000a0d
   1be54:	00082008 	.word	0x00082008
   1be58:	65657246 	.word	0x65657246
   1be5c:	534f5452 	.word	0x534f5452
   1be60:	6e655320 	.word	0x6e655320
   1be64:	20726f73 	.word	0x20726f73
   1be68:	6b736154 	.word	0x6b736154
   1be6c:	000a0d2e 	.word	0x000a0d2e
   1be70:	706c6568 	.word	0x706c6568
   1be74:	00000000 	.word	0x00000000
   1be78:	65680a0d 	.word	0x65680a0d
   1be7c:	0d3a706c 	.word	0x0d3a706c
   1be80:	694c200a 	.word	0x694c200a
   1be84:	20737473 	.word	0x20737473
   1be88:	206c6c61 	.word	0x206c6c61
   1be8c:	20656874 	.word	0x20656874
   1be90:	69676572 	.word	0x69676572
   1be94:	72657473 	.word	0x72657473
   1be98:	63206465 	.word	0x63206465
   1be9c:	616d6d6f 	.word	0x616d6d6f
   1bea0:	0d73646e 	.word	0x0d73646e
   1bea4:	000a0d0a 	.word	0x000a0d0a
   1bea8:	6f636e49 	.word	0x6f636e49
   1beac:	63657272 	.word	0x63657272
   1beb0:	6f632074 	.word	0x6f632074
   1beb4:	6e616d6d 	.word	0x6e616d6d
   1beb8:	61702064 	.word	0x61702064
   1bebc:	656d6172 	.word	0x656d6172
   1bec0:	28726574 	.word	0x28726574
   1bec4:	202e2973 	.word	0x202e2973
   1bec8:	746e4520 	.word	0x746e4520
   1becc:	22207265 	.word	0x22207265
   1bed0:	706c6568 	.word	0x706c6568
   1bed4:	6f742022 	.word	0x6f742022
   1bed8:	65697620 	.word	0x65697620
   1bedc:	20612077 	.word	0x20612077
   1bee0:	7473696c 	.word	0x7473696c
   1bee4:	20666f20 	.word	0x20666f20
   1bee8:	69617661 	.word	0x69617661
   1beec:	6c62616c 	.word	0x6c62616c
   1bef0:	6f632065 	.word	0x6f632065
   1bef4:	6e616d6d 	.word	0x6e616d6d
   1bef8:	0d2e7364 	.word	0x0d2e7364
   1befc:	000a0d0a 	.word	0x000a0d0a
   1bf00:	6d6d6f43 	.word	0x6d6d6f43
   1bf04:	20646e61 	.word	0x20646e61
   1bf08:	20746f6e 	.word	0x20746f6e
   1bf0c:	6f636572 	.word	0x6f636572
   1bf10:	73696e67 	.word	0x73696e67
   1bf14:	202e6465 	.word	0x202e6465
   1bf18:	746e4520 	.word	0x746e4520
   1bf1c:	27207265 	.word	0x27207265
   1bf20:	706c6568 	.word	0x706c6568
   1bf24:	6f742027 	.word	0x6f742027
   1bf28:	65697620 	.word	0x65697620
   1bf2c:	20612077 	.word	0x20612077
   1bf30:	7473696c 	.word	0x7473696c
   1bf34:	20666f20 	.word	0x20666f20
   1bf38:	69617661 	.word	0x69617661
   1bf3c:	6c62616c 	.word	0x6c62616c
   1bf40:	6f632065 	.word	0x6f632065
   1bf44:	6e616d6d 	.word	0x6e616d6d
   1bf48:	0d2e7364 	.word	0x0d2e7364
   1bf4c:	000a0d0a 	.word	0x000a0d0a

0001bf50 <xHelpCommand>:
   1bf50:	0001be70 0001be78 00013fed 00000000     p...x....?......
   1bf60:	454c4449 00000000 20726d54 00637653     IDLE....Tmr Svc.
   1bf70:	000165d8 000165d8 000165d8 00016666     .e...e...e..ff..
   1bf80:	00016630 0001665a 000165d8 000165d8     0f..Zf...e...e..
   1bf90:	00016666 00016630 42000800 42000c00     ff..0f.....B...B
   1bfa0:	42001000 42001400 42001800 42001c00     ...B...B...B...B
   1bfb0:	0c0b0a09 00000e0d 000189b6 00018a30     ............0...
   1bfc0:	00018a30 000189d4 000189ce 000189da     0...............
   1bfd0:	000189bc 000189e0 00018a16 00018c18     ................
   1bfe0:	00018c68 00018c68 00018c64 00018c0a     h...h...d.......
   1bff0:	00018c2a 00018bfa 00018c3c 00018c4e     *.......<...N...
   1c000:	00018cb6 00018ce4 00018ce4 00018ce0     ................
   1c010:	00018cb0 00018cbc 00018caa 00018cc2     ................
   1c020:	00018cc8                                ....

0001c024 <_tcc_intflag>:
   1c024:	00000001 00000002 00000004 00000008     ................
   1c034:	00001000 00002000 00004000 00008000     ..... ...@......
   1c044:	00010000 00020000 00040000 00080000     ................
   1c054:	70616548 66656220 2065726f 72617473     Heap before star
   1c064:	676e6974 73617420 203a736b 0a0d6425     ting tasks: %d..
   1c074:	00000000 5f494c43 4b534154 00000000     ....CLI_TASK....
   1c084:	3a525245 494c4320 73617420 6f63206b     ERR: CLI task co
   1c094:	20646c75 20746f6e 69206562 6974696e     uld not be initi
   1c0a4:	7a696c61 0d216465 0000000a 70616548     alized!.....Heap
   1c0b4:	74666120 73207265 74726174 20676e69      after starting 
   1c0c4:	3a494c43 0d642520 0000000a 4847494c     CLI: %d.....LIGH
   1c0d4:	41545f54 00004b53 3a525245 47494c20     T_TASK..ERR: LIG
   1c0e4:	74205448 206b7361 6c756f63 6f6e2064     HT task could no
   1c0f4:	65622074 696e6920 6c616974 64657a69     t be initialized
   1c104:	000a0d21 70616548 74666120 73207265     !...Heap after s
   1c114:	74726174 20676e69 4847494c 25203a54     tarting LIGHT: %
   1c124:	000a0d64 6f727245 6e6f2072 6d656d20     d...Error on mem
   1c134:	2079726f 6f6c6c61 69746163 6f206e6f     ory allocation o
   1c144:	5246206e 54524545 0d21534f 0000000a     n FREERTOS!.....
   1c154:	6f727245 6e6f2072 61747320 6f206b63     Error on stack o
   1c164:	66726576 20776f6c 46206e6f 52454552     verflow on FREER
   1c174:	21534f54 00000a0d 0001a430 0001a412     TOS!....0.......
   1c184:	0001a3cc 0001a2ea 0001a3cc 0001a404     ................
   1c194:	0001a3cc 0001a2ea 0001a412 0001a412     ................
   1c1a4:	0001a404 0001a2ea 0001a2e2 0001a2e2     ................
   1c1b4:	0001a2e2 0001a648 0001aa90 0001a950     ....H.......P...
   1c1c4:	0001a950 0001a94c 0001aa68 0001aa68     P...L...h...h...
   1c1d4:	0001aa5a 0001a94c 0001aa68 0001aa5a     Z...L...h...Z...
   1c1e4:	0001aa68 0001a94c 0001aa70 0001aa70     h...L...p...p...
   1c1f4:	0001aa70 0001ac74                       p...t...

0001c1fc <__sf_fake_stderr>:
	...

0001c21c <__sf_fake_stdin>:
	...

0001c23c <__sf_fake_stdout>:
	...
   1c25c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   1c26c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   1c27c:	31300046 35343332 39383736 64636261     F.0123456789abcd
   1c28c:	00006665                                ef..

0001c290 <_init>:
   1c290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c292:	46c0      	nop			; (mov r8, r8)
   1c294:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1c296:	bc08      	pop	{r3}
   1c298:	469e      	mov	lr, r3
   1c29a:	4770      	bx	lr

0001c29c <__init_array_start>:
   1c29c:	000120dd 	.word	0x000120dd

0001c2a0 <_fini>:
   1c2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c2a2:	46c0      	nop			; (mov r8, r8)
   1c2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1c2a6:	bc08      	pop	{r3}
   1c2a8:	469e      	mov	lr, r3
   1c2aa:	4770      	bx	lr

0001c2ac <__fini_array_start>:
   1c2ac:	000120b5 	.word	0x000120b5
