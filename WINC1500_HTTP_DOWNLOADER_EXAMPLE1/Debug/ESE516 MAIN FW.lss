
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c93c  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001fc  20000000  0001e93c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000317c  200001fc  0001eb38  000101fc  2**2
                  ALLOC
  3 .stack        00002000  20003378  00021cb4  000101fc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000101fc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00010224  2**0
                  CONTENTS, READONLY
  6 .debug_info   00058fe7  00000000  00000000  0001027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007297  00000000  00000000  00069264  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000684e  00000000  00000000  000704fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001320  00000000  00000000  00076d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000010b0  00000000  00000000  00078069  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00011925  00000000  00000000  00079119  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00020537  00000000  00000000  0008aa3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009ccc7  00000000  00000000  000aaf75  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000047ec  00000000  00000000  00147c3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	78 53 00 20 a5 a7 01 00 9d a8 01 00 9d a8 01 00     xS. ............
	...
   1202c:	d5 52 01 00 00 00 00 00 00 00 00 00 f1 53 01 00     .R...........S..
   1203c:	39 54 01 00 9d a8 01 00 9d a8 01 00 9d a8 01 00     9T..............
   1204c:	d5 84 01 00 05 81 01 00 9d a8 01 00 9d a8 01 00     ................
   1205c:	9d a8 01 00 9d a8 01 00 79 8b 01 00 91 8b 01 00     ........y.......
   1206c:	a9 8b 01 00 c1 8b 01 00 d9 8b 01 00 f1 8b 01 00     ................
   1207c:	ed a6 01 00 01 a7 01 00 15 a7 01 00 ed 4c 01 00     .............L..
   1208c:	01 4d 01 00 15 4d 01 00 00 00 00 00 00 00 00 00     .M...M..........
   1209c:	9d a8 01 00 9d a8 01 00 9d a8 01 00 9d a8 01 00     ................
   120ac:	9d a8 01 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	200001fc 	.word	0x200001fc
   120d4:	00000000 	.word	0x00000000
   120d8:	0001e93c 	.word	0x0001e93c

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000200 	.word	0x20000200
   12108:	0001e93c 	.word	0x0001e93c
   1210c:	0001e93c 	.word	0x0001e93c
   12110:	00000000 	.word	0x00000000

00012114 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	69db      	ldr	r3, [r3, #28]
   12126:	2207      	movs	r2, #7
   12128:	4013      	ands	r3, r2
   1212a:	1e5a      	subs	r2, r3, #1
   1212c:	4193      	sbcs	r3, r2
   1212e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   12130:	0018      	movs	r0, r3
   12132:	46bd      	mov	sp, r7
   12134:	b004      	add	sp, #16
   12136:	bd80      	pop	{r7, pc}

00012138 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   12138:	b580      	push	{r7, lr}
   1213a:	b082      	sub	sp, #8
   1213c:	af00      	add	r7, sp, #0
   1213e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   12140:	46c0      	nop			; (mov r8, r8)
   12142:	687b      	ldr	r3, [r7, #4]
   12144:	0018      	movs	r0, r3
   12146:	4b04      	ldr	r3, [pc, #16]	; (12158 <_i2c_master_wait_for_sync+0x20>)
   12148:	4798      	blx	r3
   1214a:	1e03      	subs	r3, r0, #0
   1214c:	d1f9      	bne.n	12142 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   1214e:	46c0      	nop			; (mov r8, r8)
   12150:	46bd      	mov	sp, r7
   12152:	b002      	add	sp, #8
   12154:	bd80      	pop	{r7, pc}
   12156:	46c0      	nop			; (mov r8, r8)
   12158:	00012115 	.word	0x00012115

0001215c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   1215c:	b580      	push	{r7, lr}
   1215e:	b084      	sub	sp, #16
   12160:	af00      	add	r7, sp, #0
   12162:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12164:	687b      	ldr	r3, [r7, #4]
   12166:	681b      	ldr	r3, [r3, #0]
   12168:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   1216a:	68fb      	ldr	r3, [r7, #12]
   1216c:	681b      	ldr	r3, [r3, #0]
   1216e:	011b      	lsls	r3, r3, #4
   12170:	0fdb      	lsrs	r3, r3, #31
   12172:	b2db      	uxtb	r3, r3
   12174:	001a      	movs	r2, r3
   12176:	230b      	movs	r3, #11
   12178:	18fb      	adds	r3, r7, r3
   1217a:	1e51      	subs	r1, r2, #1
   1217c:	418a      	sbcs	r2, r1
   1217e:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12180:	2308      	movs	r3, #8
   12182:	18fb      	adds	r3, r7, r3
   12184:	687a      	ldr	r2, [r7, #4]
   12186:	8b52      	ldrh	r2, [r2, #26]
   12188:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1218a:	687b      	ldr	r3, [r7, #4]
   1218c:	8b9b      	ldrh	r3, [r3, #28]
   1218e:	b29a      	uxth	r2, r3
   12190:	2308      	movs	r3, #8
   12192:	18fb      	adds	r3, r7, r3
   12194:	2108      	movs	r1, #8
   12196:	1879      	adds	r1, r7, r1
   12198:	8809      	ldrh	r1, [r1, #0]
   1219a:	1a8a      	subs	r2, r1, r2
   1219c:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   1219e:	687b      	ldr	r3, [r7, #4]
   121a0:	8b9b      	ldrh	r3, [r3, #28]
   121a2:	b29b      	uxth	r3, r3
   121a4:	3b01      	subs	r3, #1
   121a6:	b29a      	uxth	r2, r3
   121a8:	687b      	ldr	r3, [r7, #4]
   121aa:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   121ac:	230b      	movs	r3, #11
   121ae:	18fb      	adds	r3, r7, r3
   121b0:	781b      	ldrb	r3, [r3, #0]
   121b2:	2b00      	cmp	r3, #0
   121b4:	d010      	beq.n	121d8 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   121b6:	687b      	ldr	r3, [r7, #4]
   121b8:	7adb      	ldrb	r3, [r3, #11]
   121ba:	2b00      	cmp	r3, #0
   121bc:	d01c      	beq.n	121f8 <_i2c_master_read+0x9c>
   121be:	687b      	ldr	r3, [r7, #4]
   121c0:	8b9b      	ldrh	r3, [r3, #28]
   121c2:	b29b      	uxth	r3, r3
   121c4:	2b01      	cmp	r3, #1
   121c6:	d117      	bne.n	121f8 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   121c8:	68fb      	ldr	r3, [r7, #12]
   121ca:	685b      	ldr	r3, [r3, #4]
   121cc:	2280      	movs	r2, #128	; 0x80
   121ce:	02d2      	lsls	r2, r2, #11
   121d0:	431a      	orrs	r2, r3
   121d2:	68fb      	ldr	r3, [r7, #12]
   121d4:	605a      	str	r2, [r3, #4]
   121d6:	e00f      	b.n	121f8 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   121d8:	687b      	ldr	r3, [r7, #4]
   121da:	7adb      	ldrb	r3, [r3, #11]
   121dc:	2b00      	cmp	r3, #0
   121de:	d00b      	beq.n	121f8 <_i2c_master_read+0x9c>
   121e0:	687b      	ldr	r3, [r7, #4]
   121e2:	8b9b      	ldrh	r3, [r3, #28]
   121e4:	b29b      	uxth	r3, r3
   121e6:	2b00      	cmp	r3, #0
   121e8:	d106      	bne.n	121f8 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   121ea:	68fb      	ldr	r3, [r7, #12]
   121ec:	685b      	ldr	r3, [r3, #4]
   121ee:	2280      	movs	r2, #128	; 0x80
   121f0:	02d2      	lsls	r2, r2, #11
   121f2:	431a      	orrs	r2, r3
   121f4:	68fb      	ldr	r3, [r7, #12]
   121f6:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   121f8:	687b      	ldr	r3, [r7, #4]
   121fa:	8b9b      	ldrh	r3, [r3, #28]
   121fc:	b29b      	uxth	r3, r3
   121fe:	2b00      	cmp	r3, #0
   12200:	d10e      	bne.n	12220 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12202:	687b      	ldr	r3, [r7, #4]
   12204:	7a9b      	ldrb	r3, [r3, #10]
   12206:	2b00      	cmp	r3, #0
   12208:	d00a      	beq.n	12220 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1220a:	687b      	ldr	r3, [r7, #4]
   1220c:	0018      	movs	r0, r3
   1220e:	4b0e      	ldr	r3, [pc, #56]	; (12248 <_i2c_master_read+0xec>)
   12210:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12212:	68fb      	ldr	r3, [r7, #12]
   12214:	685b      	ldr	r3, [r3, #4]
   12216:	22c0      	movs	r2, #192	; 0xc0
   12218:	0292      	lsls	r2, r2, #10
   1221a:	431a      	orrs	r2, r3
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   12220:	687b      	ldr	r3, [r7, #4]
   12222:	0018      	movs	r0, r3
   12224:	4b08      	ldr	r3, [pc, #32]	; (12248 <_i2c_master_read+0xec>)
   12226:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   12228:	687b      	ldr	r3, [r7, #4]
   1222a:	6a1a      	ldr	r2, [r3, #32]
   1222c:	2308      	movs	r3, #8
   1222e:	18fb      	adds	r3, r7, r3
   12230:	881b      	ldrh	r3, [r3, #0]
   12232:	18d3      	adds	r3, r2, r3
   12234:	68fa      	ldr	r2, [r7, #12]
   12236:	2128      	movs	r1, #40	; 0x28
   12238:	5c52      	ldrb	r2, [r2, r1]
   1223a:	b2d2      	uxtb	r2, r2
   1223c:	701a      	strb	r2, [r3, #0]
}
   1223e:	46c0      	nop			; (mov r8, r8)
   12240:	46bd      	mov	sp, r7
   12242:	b004      	add	sp, #16
   12244:	bd80      	pop	{r7, pc}
   12246:	46c0      	nop			; (mov r8, r8)
   12248:	00012139 	.word	0x00012139

0001224c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   1224c:	b580      	push	{r7, lr}
   1224e:	b084      	sub	sp, #16
   12250:	af00      	add	r7, sp, #0
   12252:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12254:	687b      	ldr	r3, [r7, #4]
   12256:	681b      	ldr	r3, [r3, #0]
   12258:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   1225a:	68fb      	ldr	r3, [r7, #12]
   1225c:	8b5b      	ldrh	r3, [r3, #26]
   1225e:	b29b      	uxth	r3, r3
   12260:	001a      	movs	r2, r3
   12262:	2304      	movs	r3, #4
   12264:	4013      	ands	r3, r2
   12266:	d004      	beq.n	12272 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   12268:	687b      	ldr	r3, [r7, #4]
   1226a:	2225      	movs	r2, #37	; 0x25
   1226c:	211e      	movs	r1, #30
   1226e:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   12270:	e024      	b.n	122bc <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   12272:	230a      	movs	r3, #10
   12274:	18fb      	adds	r3, r7, r3
   12276:	687a      	ldr	r2, [r7, #4]
   12278:	8b52      	ldrh	r2, [r2, #26]
   1227a:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1227c:	687b      	ldr	r3, [r7, #4]
   1227e:	8b9b      	ldrh	r3, [r3, #28]
   12280:	b29a      	uxth	r2, r3
   12282:	230a      	movs	r3, #10
   12284:	18fb      	adds	r3, r7, r3
   12286:	210a      	movs	r1, #10
   12288:	1879      	adds	r1, r7, r1
   1228a:	8809      	ldrh	r1, [r1, #0]
   1228c:	1a8a      	subs	r2, r1, r2
   1228e:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12290:	687b      	ldr	r3, [r7, #4]
   12292:	8b9b      	ldrh	r3, [r3, #28]
   12294:	b29b      	uxth	r3, r3
   12296:	3b01      	subs	r3, #1
   12298:	b29a      	uxth	r2, r3
   1229a:	687b      	ldr	r3, [r7, #4]
   1229c:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   1229e:	687b      	ldr	r3, [r7, #4]
   122a0:	0018      	movs	r0, r3
   122a2:	4b08      	ldr	r3, [pc, #32]	; (122c4 <_i2c_master_write+0x78>)
   122a4:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   122a6:	687b      	ldr	r3, [r7, #4]
   122a8:	6a1a      	ldr	r2, [r3, #32]
   122aa:	230a      	movs	r3, #10
   122ac:	18fb      	adds	r3, r7, r3
   122ae:	881b      	ldrh	r3, [r3, #0]
   122b0:	18d3      	adds	r3, r2, r3
   122b2:	781b      	ldrb	r3, [r3, #0]
   122b4:	b2d9      	uxtb	r1, r3
   122b6:	68fb      	ldr	r3, [r7, #12]
   122b8:	2228      	movs	r2, #40	; 0x28
   122ba:	5499      	strb	r1, [r3, r2]
}
   122bc:	46bd      	mov	sp, r7
   122be:	b004      	add	sp, #16
   122c0:	bd80      	pop	{r7, pc}
   122c2:	46c0      	nop			; (mov r8, r8)
   122c4:	00012139 	.word	0x00012139

000122c8 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   122c8:	b580      	push	{r7, lr}
   122ca:	b084      	sub	sp, #16
   122cc:	af00      	add	r7, sp, #0
   122ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   122d0:	687b      	ldr	r3, [r7, #4]
   122d2:	681b      	ldr	r3, [r3, #0]
   122d4:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   122d6:	68fb      	ldr	r3, [r7, #12]
   122d8:	7e1b      	ldrb	r3, [r3, #24]
   122da:	b2db      	uxtb	r3, r3
   122dc:	001a      	movs	r2, r3
   122de:	2301      	movs	r3, #1
   122e0:	4013      	ands	r3, r2
   122e2:	d02b      	beq.n	1233c <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   122e4:	68fb      	ldr	r3, [r7, #12]
   122e6:	2201      	movs	r2, #1
   122e8:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   122ea:	68fb      	ldr	r3, [r7, #12]
   122ec:	8b5b      	ldrh	r3, [r3, #26]
   122ee:	b29b      	uxth	r3, r3
   122f0:	001a      	movs	r2, r3
   122f2:	2302      	movs	r3, #2
   122f4:	4013      	ands	r3, r2
   122f6:	d004      	beq.n	12302 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   122f8:	687b      	ldr	r3, [r7, #4]
   122fa:	2225      	movs	r2, #37	; 0x25
   122fc:	2141      	movs	r1, #65	; 0x41
   122fe:	5499      	strb	r1, [r3, r2]
   12300:	e01c      	b.n	1233c <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12302:	68fb      	ldr	r3, [r7, #12]
   12304:	8b5b      	ldrh	r3, [r3, #26]
   12306:	b29b      	uxth	r3, r3
   12308:	001a      	movs	r2, r3
   1230a:	2304      	movs	r3, #4
   1230c:	4013      	ands	r3, r2
   1230e:	d015      	beq.n	1233c <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12310:	687b      	ldr	r3, [r7, #4]
   12312:	2225      	movs	r2, #37	; 0x25
   12314:	2118      	movs	r1, #24
   12316:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   12318:	687b      	ldr	r3, [r7, #4]
   1231a:	2200      	movs	r2, #0
   1231c:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   1231e:	687b      	ldr	r3, [r7, #4]
   12320:	7a9b      	ldrb	r3, [r3, #10]
   12322:	2b00      	cmp	r3, #0
   12324:	d00a      	beq.n	1233c <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   12326:	687b      	ldr	r3, [r7, #4]
   12328:	0018      	movs	r0, r3
   1232a:	4b13      	ldr	r3, [pc, #76]	; (12378 <_i2c_master_async_address_response+0xb0>)
   1232c:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1232e:	68fb      	ldr	r3, [r7, #12]
   12330:	685b      	ldr	r3, [r3, #4]
   12332:	22c0      	movs	r2, #192	; 0xc0
   12334:	0292      	lsls	r2, r2, #10
   12336:	431a      	orrs	r2, r3
   12338:	68fb      	ldr	r3, [r7, #12]
   1233a:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   1233c:	687b      	ldr	r3, [r7, #4]
   1233e:	8b9b      	ldrh	r3, [r3, #28]
   12340:	b29a      	uxth	r2, r3
   12342:	687b      	ldr	r3, [r7, #4]
   12344:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   12346:	687b      	ldr	r3, [r7, #4]
   12348:	2225      	movs	r2, #37	; 0x25
   1234a:	5c9b      	ldrb	r3, [r3, r2]
   1234c:	b2db      	uxtb	r3, r3
   1234e:	2b05      	cmp	r3, #5
   12350:	d10e      	bne.n	12370 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12352:	687b      	ldr	r3, [r7, #4]
   12354:	2224      	movs	r2, #36	; 0x24
   12356:	5c9b      	ldrb	r3, [r3, r2]
   12358:	b2db      	uxtb	r3, r3
   1235a:	2b00      	cmp	r3, #0
   1235c:	d104      	bne.n	12368 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   1235e:	687b      	ldr	r3, [r7, #4]
   12360:	0018      	movs	r0, r3
   12362:	4b06      	ldr	r3, [pc, #24]	; (1237c <_i2c_master_async_address_response+0xb4>)
   12364:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   12366:	e003      	b.n	12370 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   12368:	687b      	ldr	r3, [r7, #4]
   1236a:	0018      	movs	r0, r3
   1236c:	4b04      	ldr	r3, [pc, #16]	; (12380 <_i2c_master_async_address_response+0xb8>)
   1236e:	4798      	blx	r3
}
   12370:	46c0      	nop			; (mov r8, r8)
   12372:	46bd      	mov	sp, r7
   12374:	b004      	add	sp, #16
   12376:	bd80      	pop	{r7, pc}
   12378:	00012139 	.word	0x00012139
   1237c:	0001224d 	.word	0x0001224d
   12380:	0001215d 	.word	0x0001215d

00012384 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   12384:	b580      	push	{r7, lr}
   12386:	b084      	sub	sp, #16
   12388:	af00      	add	r7, sp, #0
   1238a:	60f8      	str	r0, [r7, #12]
   1238c:	60b9      	str	r1, [r7, #8]
   1238e:	1dfb      	adds	r3, r7, #7
   12390:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   12392:	1dfb      	adds	r3, r7, #7
   12394:	781b      	ldrb	r3, [r3, #0]
   12396:	68fa      	ldr	r2, [r7, #12]
   12398:	3302      	adds	r3, #2
   1239a:	009b      	lsls	r3, r3, #2
   1239c:	18d3      	adds	r3, r2, r3
   1239e:	3304      	adds	r3, #4
   123a0:	68ba      	ldr	r2, [r7, #8]
   123a2:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   123a4:	68fb      	ldr	r3, [r7, #12]
   123a6:	7e1b      	ldrb	r3, [r3, #24]
   123a8:	b2db      	uxtb	r3, r3
   123aa:	b25a      	sxtb	r2, r3
   123ac:	1dfb      	adds	r3, r7, #7
   123ae:	781b      	ldrb	r3, [r3, #0]
   123b0:	2101      	movs	r1, #1
   123b2:	4099      	lsls	r1, r3
   123b4:	000b      	movs	r3, r1
   123b6:	b25b      	sxtb	r3, r3
   123b8:	4313      	orrs	r3, r2
   123ba:	b25b      	sxtb	r3, r3
   123bc:	b2da      	uxtb	r2, r3
   123be:	68fb      	ldr	r3, [r7, #12]
   123c0:	761a      	strb	r2, [r3, #24]
}
   123c2:	46c0      	nop			; (mov r8, r8)
   123c4:	46bd      	mov	sp, r7
   123c6:	b004      	add	sp, #16
   123c8:	bd80      	pop	{r7, pc}
	...

000123cc <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   123cc:	b590      	push	{r4, r7, lr}
   123ce:	b087      	sub	sp, #28
   123d0:	af00      	add	r7, sp, #0
   123d2:	6078      	str	r0, [r7, #4]
   123d4:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   123d6:	687b      	ldr	r3, [r7, #4]
   123d8:	681b      	ldr	r3, [r3, #0]
   123da:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   123dc:	683b      	ldr	r3, [r7, #0]
   123de:	685a      	ldr	r2, [r3, #4]
   123e0:	687b      	ldr	r3, [r7, #4]
   123e2:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   123e4:	683b      	ldr	r3, [r7, #0]
   123e6:	885a      	ldrh	r2, [r3, #2]
   123e8:	687b      	ldr	r3, [r7, #4]
   123ea:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   123ec:	687b      	ldr	r3, [r7, #4]
   123ee:	2224      	movs	r2, #36	; 0x24
   123f0:	2101      	movs	r1, #1
   123f2:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   123f4:	687b      	ldr	r3, [r7, #4]
   123f6:	2225      	movs	r2, #37	; 0x25
   123f8:	2105      	movs	r1, #5
   123fa:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   123fc:	693b      	ldr	r3, [r7, #16]
   123fe:	681b      	ldr	r3, [r3, #0]
   12400:	011b      	lsls	r3, r3, #4
   12402:	0fdb      	lsrs	r3, r3, #31
   12404:	b2db      	uxtb	r3, r3
   12406:	001a      	movs	r2, r3
   12408:	230f      	movs	r3, #15
   1240a:	18fb      	adds	r3, r7, r3
   1240c:	1e51      	subs	r1, r2, #1
   1240e:	418a      	sbcs	r2, r1
   12410:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12412:	683b      	ldr	r3, [r7, #0]
   12414:	7a5b      	ldrb	r3, [r3, #9]
   12416:	2b00      	cmp	r3, #0
   12418:	d006      	beq.n	12428 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1241a:	683b      	ldr	r3, [r7, #0]
   1241c:	7a9a      	ldrb	r2, [r3, #10]
   1241e:	687b      	ldr	r3, [r7, #4]
   12420:	0011      	movs	r1, r2
   12422:	0018      	movs	r0, r3
   12424:	4b3b      	ldr	r3, [pc, #236]	; (12514 <_i2c_master_read_packet+0x148>)
   12426:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   12428:	230f      	movs	r3, #15
   1242a:	18fb      	adds	r3, r7, r3
   1242c:	781b      	ldrb	r3, [r3, #0]
   1242e:	2b00      	cmp	r3, #0
   12430:	d00b      	beq.n	1244a <_i2c_master_read_packet+0x7e>
   12432:	683b      	ldr	r3, [r7, #0]
   12434:	885b      	ldrh	r3, [r3, #2]
   12436:	2b01      	cmp	r3, #1
   12438:	d107      	bne.n	1244a <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1243a:	693b      	ldr	r3, [r7, #16]
   1243c:	685b      	ldr	r3, [r3, #4]
   1243e:	2280      	movs	r2, #128	; 0x80
   12440:	02d2      	lsls	r2, r2, #11
   12442:	431a      	orrs	r2, r3
   12444:	693b      	ldr	r3, [r7, #16]
   12446:	605a      	str	r2, [r3, #4]
   12448:	e005      	b.n	12456 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   1244a:	693b      	ldr	r3, [r7, #16]
   1244c:	685b      	ldr	r3, [r3, #4]
   1244e:	4a32      	ldr	r2, [pc, #200]	; (12518 <_i2c_master_read_packet+0x14c>)
   12450:	401a      	ands	r2, r3
   12452:	693b      	ldr	r3, [r7, #16]
   12454:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   12456:	683b      	ldr	r3, [r7, #0]
   12458:	7a1b      	ldrb	r3, [r3, #8]
   1245a:	2b00      	cmp	r3, #0
   1245c:	d045      	beq.n	124ea <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   1245e:	683b      	ldr	r3, [r7, #0]
   12460:	881b      	ldrh	r3, [r3, #0]
   12462:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12464:	683b      	ldr	r3, [r7, #0]
   12466:	7a5b      	ldrb	r3, [r3, #9]
   12468:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   1246a:	4313      	orrs	r3, r2
   1246c:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1246e:	2380      	movs	r3, #128	; 0x80
   12470:	021b      	lsls	r3, r3, #8
   12472:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   12474:	693b      	ldr	r3, [r7, #16]
   12476:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   12478:	2317      	movs	r3, #23
   1247a:	18fc      	adds	r4, r7, r3
   1247c:	687b      	ldr	r3, [r7, #4]
   1247e:	0018      	movs	r0, r3
   12480:	4b26      	ldr	r3, [pc, #152]	; (1251c <_i2c_master_read_packet+0x150>)
   12482:	4798      	blx	r3
   12484:	0003      	movs	r3, r0
   12486:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12488:	693b      	ldr	r3, [r7, #16]
   1248a:	685b      	ldr	r3, [r3, #4]
   1248c:	4a22      	ldr	r2, [pc, #136]	; (12518 <_i2c_master_read_packet+0x14c>)
   1248e:	401a      	ands	r2, r3
   12490:	693b      	ldr	r3, [r7, #16]
   12492:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   12494:	2317      	movs	r3, #23
   12496:	18fb      	adds	r3, r7, r3
   12498:	781b      	ldrb	r3, [r3, #0]
   1249a:	2b00      	cmp	r3, #0
   1249c:	d107      	bne.n	124ae <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   1249e:	2317      	movs	r3, #23
   124a0:	18fc      	adds	r4, r7, r3
   124a2:	687b      	ldr	r3, [r7, #4]
   124a4:	0018      	movs	r0, r3
   124a6:	4b1e      	ldr	r3, [pc, #120]	; (12520 <_i2c_master_read_packet+0x154>)
   124a8:	4798      	blx	r3
   124aa:	0003      	movs	r3, r0
   124ac:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   124ae:	2317      	movs	r3, #23
   124b0:	18fb      	adds	r3, r7, r3
   124b2:	781b      	ldrb	r3, [r3, #0]
   124b4:	2b00      	cmp	r3, #0
   124b6:	d114      	bne.n	124e2 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   124b8:	693b      	ldr	r3, [r7, #16]
   124ba:	2203      	movs	r2, #3
   124bc:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   124be:	683b      	ldr	r3, [r7, #0]
   124c0:	881b      	ldrh	r3, [r3, #0]
   124c2:	0a1b      	lsrs	r3, r3, #8
   124c4:	b29b      	uxth	r3, r3
   124c6:	2278      	movs	r2, #120	; 0x78
   124c8:	4313      	orrs	r3, r2
   124ca:	b29b      	uxth	r3, r3
   124cc:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   124ce:	683b      	ldr	r3, [r7, #0]
   124d0:	7a5b      	ldrb	r3, [r3, #9]
   124d2:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   124d4:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   124d6:	2201      	movs	r2, #1
   124d8:	4313      	orrs	r3, r2
   124da:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   124dc:	693b      	ldr	r3, [r7, #16]
   124de:	625a      	str	r2, [r3, #36]	; 0x24
   124e0:	e012      	b.n	12508 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   124e2:	2317      	movs	r3, #23
   124e4:	18fb      	adds	r3, r7, r3
   124e6:	781b      	ldrb	r3, [r3, #0]
   124e8:	e00f      	b.n	1250a <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   124ea:	693b      	ldr	r3, [r7, #16]
   124ec:	2203      	movs	r2, #3
   124ee:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   124f0:	683b      	ldr	r3, [r7, #0]
   124f2:	881b      	ldrh	r3, [r3, #0]
   124f4:	005b      	lsls	r3, r3, #1
   124f6:	2201      	movs	r2, #1
   124f8:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   124fa:	683b      	ldr	r3, [r7, #0]
   124fc:	7a5b      	ldrb	r3, [r3, #9]
   124fe:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12500:	4313      	orrs	r3, r2
   12502:	001a      	movs	r2, r3
   12504:	693b      	ldr	r3, [r7, #16]
   12506:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12508:	2300      	movs	r3, #0
}
   1250a:	0018      	movs	r0, r3
   1250c:	46bd      	mov	sp, r7
   1250e:	b007      	add	sp, #28
   12510:	bd90      	pop	{r4, r7, pc}
   12512:	46c0      	nop			; (mov r8, r8)
   12514:	00014c99 	.word	0x00014c99
   12518:	fffbffff 	.word	0xfffbffff
   1251c:	00014c3b 	.word	0x00014c3b
   12520:	00014bdd 	.word	0x00014bdd

00012524 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12524:	b580      	push	{r7, lr}
   12526:	b082      	sub	sp, #8
   12528:	af00      	add	r7, sp, #0
   1252a:	6078      	str	r0, [r7, #4]
   1252c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   1252e:	687b      	ldr	r3, [r7, #4]
   12530:	8b9b      	ldrh	r3, [r3, #28]
   12532:	b29b      	uxth	r3, r3
   12534:	2b00      	cmp	r3, #0
   12536:	d001      	beq.n	1253c <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   12538:	2305      	movs	r3, #5
   1253a:	e00c      	b.n	12556 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   1253c:	687b      	ldr	r3, [r7, #4]
   1253e:	2201      	movs	r2, #1
   12540:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12542:	687b      	ldr	r3, [r7, #4]
   12544:	2201      	movs	r2, #1
   12546:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   12548:	683a      	ldr	r2, [r7, #0]
   1254a:	687b      	ldr	r3, [r7, #4]
   1254c:	0011      	movs	r1, r2
   1254e:	0018      	movs	r0, r3
   12550:	4b03      	ldr	r3, [pc, #12]	; (12560 <i2c_master_read_packet_job+0x3c>)
   12552:	4798      	blx	r3
   12554:	0003      	movs	r3, r0
}
   12556:	0018      	movs	r0, r3
   12558:	46bd      	mov	sp, r7
   1255a:	b002      	add	sp, #8
   1255c:	bd80      	pop	{r7, pc}
   1255e:	46c0      	nop			; (mov r8, r8)
   12560:	000123cd 	.word	0x000123cd

00012564 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12564:	b580      	push	{r7, lr}
   12566:	b084      	sub	sp, #16
   12568:	af00      	add	r7, sp, #0
   1256a:	6078      	str	r0, [r7, #4]
   1256c:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1256e:	687b      	ldr	r3, [r7, #4]
   12570:	681b      	ldr	r3, [r3, #0]
   12572:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12574:	683b      	ldr	r3, [r7, #0]
   12576:	7a5b      	ldrb	r3, [r3, #9]
   12578:	2b00      	cmp	r3, #0
   1257a:	d006      	beq.n	1258a <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1257c:	683b      	ldr	r3, [r7, #0]
   1257e:	7a9a      	ldrb	r2, [r3, #10]
   12580:	687b      	ldr	r3, [r7, #4]
   12582:	0011      	movs	r1, r2
   12584:	0018      	movs	r0, r3
   12586:	4b1e      	ldr	r3, [pc, #120]	; (12600 <_i2c_master_write_packet+0x9c>)
   12588:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   1258a:	68fb      	ldr	r3, [r7, #12]
   1258c:	685b      	ldr	r3, [r3, #4]
   1258e:	4a1d      	ldr	r2, [pc, #116]	; (12604 <_i2c_master_write_packet+0xa0>)
   12590:	401a      	ands	r2, r3
   12592:	68fb      	ldr	r3, [r7, #12]
   12594:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   12596:	683b      	ldr	r3, [r7, #0]
   12598:	685a      	ldr	r2, [r3, #4]
   1259a:	687b      	ldr	r3, [r7, #4]
   1259c:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   1259e:	683b      	ldr	r3, [r7, #0]
   125a0:	885a      	ldrh	r2, [r3, #2]
   125a2:	687b      	ldr	r3, [r7, #4]
   125a4:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   125a6:	687b      	ldr	r3, [r7, #4]
   125a8:	2224      	movs	r2, #36	; 0x24
   125aa:	2100      	movs	r1, #0
   125ac:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   125ae:	687b      	ldr	r3, [r7, #4]
   125b0:	2225      	movs	r2, #37	; 0x25
   125b2:	2105      	movs	r1, #5
   125b4:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   125b6:	68fb      	ldr	r3, [r7, #12]
   125b8:	2203      	movs	r2, #3
   125ba:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   125bc:	683b      	ldr	r3, [r7, #0]
   125be:	7a1b      	ldrb	r3, [r3, #8]
   125c0:	2b00      	cmp	r3, #0
   125c2:	d00d      	beq.n	125e0 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   125c4:	683b      	ldr	r3, [r7, #0]
   125c6:	881b      	ldrh	r3, [r3, #0]
   125c8:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   125ca:	683b      	ldr	r3, [r7, #0]
   125cc:	7a5b      	ldrb	r3, [r3, #9]
   125ce:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   125d0:	4313      	orrs	r3, r2
   125d2:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   125d4:	2380      	movs	r3, #128	; 0x80
   125d6:	021b      	lsls	r3, r3, #8
   125d8:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   125da:	68fb      	ldr	r3, [r7, #12]
   125dc:	625a      	str	r2, [r3, #36]	; 0x24
   125de:	e009      	b.n	125f4 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   125e0:	683b      	ldr	r3, [r7, #0]
   125e2:	881b      	ldrh	r3, [r3, #0]
   125e4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   125e6:	683b      	ldr	r3, [r7, #0]
   125e8:	7a5b      	ldrb	r3, [r3, #9]
   125ea:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   125ec:	4313      	orrs	r3, r2
   125ee:	001a      	movs	r2, r3
   125f0:	68fb      	ldr	r3, [r7, #12]
   125f2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   125f4:	2300      	movs	r3, #0
}
   125f6:	0018      	movs	r0, r3
   125f8:	46bd      	mov	sp, r7
   125fa:	b004      	add	sp, #16
   125fc:	bd80      	pop	{r7, pc}
   125fe:	46c0      	nop			; (mov r8, r8)
   12600:	00014c99 	.word	0x00014c99
   12604:	fffbffff 	.word	0xfffbffff

00012608 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12608:	b580      	push	{r7, lr}
   1260a:	b082      	sub	sp, #8
   1260c:	af00      	add	r7, sp, #0
   1260e:	6078      	str	r0, [r7, #4]
   12610:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12612:	687b      	ldr	r3, [r7, #4]
   12614:	8b9b      	ldrh	r3, [r3, #28]
   12616:	b29b      	uxth	r3, r3
   12618:	2b00      	cmp	r3, #0
   1261a:	d001      	beq.n	12620 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   1261c:	2305      	movs	r3, #5
   1261e:	e00c      	b.n	1263a <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   12620:	687b      	ldr	r3, [r7, #4]
   12622:	2201      	movs	r2, #1
   12624:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12626:	687b      	ldr	r3, [r7, #4]
   12628:	2201      	movs	r2, #1
   1262a:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   1262c:	683a      	ldr	r2, [r7, #0]
   1262e:	687b      	ldr	r3, [r7, #4]
   12630:	0011      	movs	r1, r2
   12632:	0018      	movs	r0, r3
   12634:	4b03      	ldr	r3, [pc, #12]	; (12644 <i2c_master_write_packet_job+0x3c>)
   12636:	4798      	blx	r3
   12638:	0003      	movs	r3, r0
}
   1263a:	0018      	movs	r0, r3
   1263c:	46bd      	mov	sp, r7
   1263e:	b002      	add	sp, #8
   12640:	bd80      	pop	{r7, pc}
   12642:	46c0      	nop			; (mov r8, r8)
   12644:	00012565 	.word	0x00012565

00012648 <i2c_master_write_packet_job_no_stop>:
 * \retval STATUS_BUSY  If module is currently busy with another
 */
enum status_code i2c_master_write_packet_job_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12648:	b580      	push	{r7, lr}
   1264a:	b082      	sub	sp, #8
   1264c:	af00      	add	r7, sp, #0
   1264e:	6078      	str	r0, [r7, #4]
   12650:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12652:	687b      	ldr	r3, [r7, #4]
   12654:	8b9b      	ldrh	r3, [r3, #28]
   12656:	b29b      	uxth	r3, r3
   12658:	2b00      	cmp	r3, #0
   1265a:	d001      	beq.n	12660 <i2c_master_write_packet_job_no_stop+0x18>
		return STATUS_BUSY;
   1265c:	2305      	movs	r3, #5
   1265e:	e00c      	b.n	1267a <i2c_master_write_packet_job_no_stop+0x32>
	}

	/* Do not send stop condition when done */
	module->send_stop = false;
   12660:	687b      	ldr	r3, [r7, #4]
   12662:	2200      	movs	r2, #0
   12664:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12666:	687b      	ldr	r3, [r7, #4]
   12668:	2201      	movs	r2, #1
   1266a:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   1266c:	683a      	ldr	r2, [r7, #0]
   1266e:	687b      	ldr	r3, [r7, #4]
   12670:	0011      	movs	r1, r2
   12672:	0018      	movs	r0, r3
   12674:	4b03      	ldr	r3, [pc, #12]	; (12684 <i2c_master_write_packet_job_no_stop+0x3c>)
   12676:	4798      	blx	r3
   12678:	0003      	movs	r3, r0
}
   1267a:	0018      	movs	r0, r3
   1267c:	46bd      	mov	sp, r7
   1267e:	b002      	add	sp, #8
   12680:	bd80      	pop	{r7, pc}
   12682:	46c0      	nop			; (mov r8, r8)
   12684:	00012565 	.word	0x00012565

00012688 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12688:	b580      	push	{r7, lr}
   1268a:	b086      	sub	sp, #24
   1268c:	af00      	add	r7, sp, #0
   1268e:	0002      	movs	r2, r0
   12690:	1dfb      	adds	r3, r7, #7
   12692:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   12694:	1dfb      	adds	r3, r7, #7
   12696:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   12698:	4b93      	ldr	r3, [pc, #588]	; (128e8 <_i2c_master_interrupt_handler+0x260>)
   1269a:	0092      	lsls	r2, r2, #2
   1269c:	58d3      	ldr	r3, [r2, r3]
   1269e:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   126a0:	697b      	ldr	r3, [r7, #20]
   126a2:	681b      	ldr	r3, [r3, #0]
   126a4:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   126a6:	693b      	ldr	r3, [r7, #16]
   126a8:	681b      	ldr	r3, [r3, #0]
   126aa:	011b      	lsls	r3, r3, #4
   126ac:	0fdb      	lsrs	r3, r3, #31
   126ae:	b2db      	uxtb	r3, r3
   126b0:	001a      	movs	r2, r3
   126b2:	230f      	movs	r3, #15
   126b4:	18fb      	adds	r3, r7, r3
   126b6:	1e51      	subs	r1, r2, #1
   126b8:	418a      	sbcs	r2, r1
   126ba:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   126bc:	230e      	movs	r3, #14
   126be:	18fb      	adds	r3, r7, r3
   126c0:	697a      	ldr	r2, [r7, #20]
   126c2:	7e52      	ldrb	r2, [r2, #25]
   126c4:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   126c6:	697b      	ldr	r3, [r7, #20]
   126c8:	7e1b      	ldrb	r3, [r3, #24]
   126ca:	b2da      	uxtb	r2, r3
   126cc:	230e      	movs	r3, #14
   126ce:	18fb      	adds	r3, r7, r3
   126d0:	210e      	movs	r1, #14
   126d2:	1879      	adds	r1, r7, r1
   126d4:	7809      	ldrb	r1, [r1, #0]
   126d6:	400a      	ands	r2, r1
   126d8:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   126da:	697b      	ldr	r3, [r7, #20]
   126dc:	8b5b      	ldrh	r3, [r3, #26]
   126de:	b29b      	uxth	r3, r3
   126e0:	2b00      	cmp	r3, #0
   126e2:	d109      	bne.n	126f8 <_i2c_master_interrupt_handler+0x70>
   126e4:	697b      	ldr	r3, [r7, #20]
   126e6:	8b9b      	ldrh	r3, [r3, #28]
   126e8:	b29b      	uxth	r3, r3
   126ea:	2b00      	cmp	r3, #0
   126ec:	d004      	beq.n	126f8 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   126ee:	697b      	ldr	r3, [r7, #20]
   126f0:	0018      	movs	r0, r3
   126f2:	4b7e      	ldr	r3, [pc, #504]	; (128ec <_i2c_master_interrupt_handler+0x264>)
   126f4:	4798      	blx	r3
   126f6:	e070      	b.n	127da <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   126f8:	697b      	ldr	r3, [r7, #20]
   126fa:	8b5b      	ldrh	r3, [r3, #26]
   126fc:	b29b      	uxth	r3, r3
   126fe:	2b00      	cmp	r3, #0
   12700:	d039      	beq.n	12776 <_i2c_master_interrupt_handler+0xee>
   12702:	697b      	ldr	r3, [r7, #20]
   12704:	8b9b      	ldrh	r3, [r3, #28]
   12706:	b29b      	uxth	r3, r3
   12708:	2b00      	cmp	r3, #0
   1270a:	d134      	bne.n	12776 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   1270c:	697b      	ldr	r3, [r7, #20]
   1270e:	2225      	movs	r2, #37	; 0x25
   12710:	5c9b      	ldrb	r3, [r3, r2]
   12712:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12714:	2b05      	cmp	r3, #5
   12716:	d12e      	bne.n	12776 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12718:	697b      	ldr	r3, [r7, #20]
   1271a:	2224      	movs	r2, #36	; 0x24
   1271c:	5c9b      	ldrb	r3, [r3, r2]
   1271e:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12720:	2b00      	cmp	r3, #0
   12722:	d128      	bne.n	12776 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12724:	693b      	ldr	r3, [r7, #16]
   12726:	2203      	movs	r2, #3
   12728:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   1272a:	697b      	ldr	r3, [r7, #20]
   1272c:	2200      	movs	r2, #0
   1272e:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12730:	697b      	ldr	r3, [r7, #20]
   12732:	2225      	movs	r2, #37	; 0x25
   12734:	2100      	movs	r1, #0
   12736:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   12738:	697b      	ldr	r3, [r7, #20]
   1273a:	7a9b      	ldrb	r3, [r3, #10]
   1273c:	2b00      	cmp	r3, #0
   1273e:	d00b      	beq.n	12758 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12740:	697b      	ldr	r3, [r7, #20]
   12742:	0018      	movs	r0, r3
   12744:	4b6a      	ldr	r3, [pc, #424]	; (128f0 <_i2c_master_interrupt_handler+0x268>)
   12746:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12748:	693b      	ldr	r3, [r7, #16]
   1274a:	685b      	ldr	r3, [r3, #4]
   1274c:	22c0      	movs	r2, #192	; 0xc0
   1274e:	0292      	lsls	r2, r2, #10
   12750:	431a      	orrs	r2, r3
   12752:	693b      	ldr	r3, [r7, #16]
   12754:	605a      	str	r2, [r3, #4]
   12756:	e002      	b.n	1275e <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12758:	693b      	ldr	r3, [r7, #16]
   1275a:	2201      	movs	r2, #1
   1275c:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   1275e:	230e      	movs	r3, #14
   12760:	18fb      	adds	r3, r7, r3
   12762:	781b      	ldrb	r3, [r3, #0]
   12764:	2201      	movs	r2, #1
   12766:	4013      	ands	r3, r2
   12768:	d037      	beq.n	127da <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   1276a:	697b      	ldr	r3, [r7, #20]
   1276c:	68db      	ldr	r3, [r3, #12]
   1276e:	697a      	ldr	r2, [r7, #20]
   12770:	0010      	movs	r0, r2
   12772:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12774:	e031      	b.n	127da <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   12776:	697b      	ldr	r3, [r7, #20]
   12778:	8b5b      	ldrh	r3, [r3, #26]
   1277a:	b29b      	uxth	r3, r3
   1277c:	2b00      	cmp	r3, #0
   1277e:	d02c      	beq.n	127da <_i2c_master_interrupt_handler+0x152>
   12780:	697b      	ldr	r3, [r7, #20]
   12782:	8b9b      	ldrh	r3, [r3, #28]
   12784:	b29b      	uxth	r3, r3
   12786:	2b00      	cmp	r3, #0
   12788:	d027      	beq.n	127da <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   1278a:	693b      	ldr	r3, [r7, #16]
   1278c:	8b5b      	ldrh	r3, [r3, #26]
   1278e:	b29b      	uxth	r3, r3
   12790:	001a      	movs	r2, r3
   12792:	2320      	movs	r3, #32
   12794:	4013      	ands	r3, r2
   12796:	d111      	bne.n	127bc <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12798:	230f      	movs	r3, #15
   1279a:	18fb      	adds	r3, r7, r3
   1279c:	781b      	ldrb	r3, [r3, #0]
   1279e:	2201      	movs	r2, #1
   127a0:	4053      	eors	r3, r2
   127a2:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   127a4:	2b00      	cmp	r3, #0
   127a6:	d104      	bne.n	127b2 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   127a8:	697b      	ldr	r3, [r7, #20]
   127aa:	8b9b      	ldrh	r3, [r3, #28]
   127ac:	b29b      	uxth	r3, r3
   127ae:	2b01      	cmp	r3, #1
   127b0:	d004      	beq.n	127bc <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   127b2:	697b      	ldr	r3, [r7, #20]
   127b4:	2225      	movs	r2, #37	; 0x25
   127b6:	2141      	movs	r1, #65	; 0x41
   127b8:	5499      	strb	r1, [r3, r2]
   127ba:	e00e      	b.n	127da <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   127bc:	697b      	ldr	r3, [r7, #20]
   127be:	2224      	movs	r2, #36	; 0x24
   127c0:	5c9b      	ldrb	r3, [r3, r2]
   127c2:	b2db      	uxtb	r3, r3
   127c4:	2b00      	cmp	r3, #0
   127c6:	d104      	bne.n	127d2 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   127c8:	697b      	ldr	r3, [r7, #20]
   127ca:	0018      	movs	r0, r3
   127cc:	4b49      	ldr	r3, [pc, #292]	; (128f4 <_i2c_master_interrupt_handler+0x26c>)
   127ce:	4798      	blx	r3
   127d0:	e003      	b.n	127da <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   127d2:	697b      	ldr	r3, [r7, #20]
   127d4:	0018      	movs	r0, r3
   127d6:	4b48      	ldr	r3, [pc, #288]	; (128f8 <_i2c_master_interrupt_handler+0x270>)
   127d8:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   127da:	697b      	ldr	r3, [r7, #20]
   127dc:	8b5b      	ldrh	r3, [r3, #26]
   127de:	b29b      	uxth	r3, r3
   127e0:	2b00      	cmp	r3, #0
   127e2:	d047      	beq.n	12874 <_i2c_master_interrupt_handler+0x1ec>
   127e4:	697b      	ldr	r3, [r7, #20]
   127e6:	8b9b      	ldrh	r3, [r3, #28]
   127e8:	b29b      	uxth	r3, r3
   127ea:	2b00      	cmp	r3, #0
   127ec:	d142      	bne.n	12874 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   127ee:	697b      	ldr	r3, [r7, #20]
   127f0:	2225      	movs	r2, #37	; 0x25
   127f2:	5c9b      	ldrb	r3, [r3, r2]
   127f4:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   127f6:	2b05      	cmp	r3, #5
   127f8:	d13c      	bne.n	12874 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   127fa:	697b      	ldr	r3, [r7, #20]
   127fc:	2224      	movs	r2, #36	; 0x24
   127fe:	5c9b      	ldrb	r3, [r3, r2]
   12800:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12802:	2b01      	cmp	r3, #1
   12804:	d136      	bne.n	12874 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12806:	693b      	ldr	r3, [r7, #16]
   12808:	7e1b      	ldrb	r3, [r3, #24]
   1280a:	b2db      	uxtb	r3, r3
   1280c:	001a      	movs	r2, r3
   1280e:	2302      	movs	r3, #2
   12810:	4013      	ands	r3, r2
   12812:	d002      	beq.n	1281a <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12814:	693b      	ldr	r3, [r7, #16]
   12816:	2202      	movs	r2, #2
   12818:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   1281a:	693b      	ldr	r3, [r7, #16]
   1281c:	2203      	movs	r2, #3
   1281e:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   12820:	697b      	ldr	r3, [r7, #20]
   12822:	2200      	movs	r2, #0
   12824:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12826:	697b      	ldr	r3, [r7, #20]
   12828:	2225      	movs	r2, #37	; 0x25
   1282a:	2100      	movs	r1, #0
   1282c:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   1282e:	230e      	movs	r3, #14
   12830:	18fb      	adds	r3, r7, r3
   12832:	781b      	ldrb	r3, [r3, #0]
   12834:	2202      	movs	r2, #2
   12836:	4013      	ands	r3, r2
   12838:	d00b      	beq.n	12852 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   1283a:	697b      	ldr	r3, [r7, #20]
   1283c:	2224      	movs	r2, #36	; 0x24
   1283e:	5c9b      	ldrb	r3, [r3, r2]
   12840:	b2db      	uxtb	r3, r3
   12842:	2b01      	cmp	r3, #1
   12844:	d105      	bne.n	12852 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12846:	697b      	ldr	r3, [r7, #20]
   12848:	691b      	ldr	r3, [r3, #16]
   1284a:	697a      	ldr	r2, [r7, #20]
   1284c:	0010      	movs	r0, r2
   1284e:	4798      	blx	r3
   12850:	e010      	b.n	12874 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12852:	230e      	movs	r3, #14
   12854:	18fb      	adds	r3, r7, r3
   12856:	781b      	ldrb	r3, [r3, #0]
   12858:	2201      	movs	r2, #1
   1285a:	4013      	ands	r3, r2
   1285c:	d00a      	beq.n	12874 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   1285e:	697b      	ldr	r3, [r7, #20]
   12860:	2224      	movs	r2, #36	; 0x24
   12862:	5c9b      	ldrb	r3, [r3, r2]
   12864:	b2db      	uxtb	r3, r3
   12866:	2b00      	cmp	r3, #0
   12868:	d104      	bne.n	12874 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   1286a:	697b      	ldr	r3, [r7, #20]
   1286c:	68db      	ldr	r3, [r3, #12]
   1286e:	697a      	ldr	r2, [r7, #20]
   12870:	0010      	movs	r0, r2
   12872:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12874:	697b      	ldr	r3, [r7, #20]
   12876:	2225      	movs	r2, #37	; 0x25
   12878:	5c9b      	ldrb	r3, [r3, r2]
   1287a:	b2db      	uxtb	r3, r3
   1287c:	2b05      	cmp	r3, #5
   1287e:	d02e      	beq.n	128de <_i2c_master_interrupt_handler+0x256>
   12880:	697b      	ldr	r3, [r7, #20]
   12882:	2225      	movs	r2, #37	; 0x25
   12884:	5c9b      	ldrb	r3, [r3, r2]
   12886:	b2db      	uxtb	r3, r3
   12888:	2b00      	cmp	r3, #0
   1288a:	d028      	beq.n	128de <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   1288c:	693b      	ldr	r3, [r7, #16]
   1288e:	2203      	movs	r2, #3
   12890:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12892:	697b      	ldr	r3, [r7, #20]
   12894:	2200      	movs	r2, #0
   12896:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   12898:	697b      	ldr	r3, [r7, #20]
   1289a:	2200      	movs	r2, #0
   1289c:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   1289e:	697b      	ldr	r3, [r7, #20]
   128a0:	2225      	movs	r2, #37	; 0x25
   128a2:	5c9b      	ldrb	r3, [r3, r2]
   128a4:	b2db      	uxtb	r3, r3
   128a6:	2b41      	cmp	r3, #65	; 0x41
   128a8:	d00e      	beq.n	128c8 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   128aa:	697b      	ldr	r3, [r7, #20]
   128ac:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   128ae:	2b00      	cmp	r3, #0
   128b0:	d00a      	beq.n	128c8 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   128b2:	697b      	ldr	r3, [r7, #20]
   128b4:	0018      	movs	r0, r3
   128b6:	4b0e      	ldr	r3, [pc, #56]	; (128f0 <_i2c_master_interrupt_handler+0x268>)
   128b8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   128ba:	693b      	ldr	r3, [r7, #16]
   128bc:	685b      	ldr	r3, [r3, #4]
   128be:	22e0      	movs	r2, #224	; 0xe0
   128c0:	02d2      	lsls	r2, r2, #11
   128c2:	431a      	orrs	r2, r3
   128c4:	693b      	ldr	r3, [r7, #16]
   128c6:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   128c8:	230e      	movs	r3, #14
   128ca:	18fb      	adds	r3, r7, r3
   128cc:	781b      	ldrb	r3, [r3, #0]
   128ce:	2204      	movs	r2, #4
   128d0:	4013      	ands	r3, r2
   128d2:	d004      	beq.n	128de <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   128d4:	697b      	ldr	r3, [r7, #20]
   128d6:	695b      	ldr	r3, [r3, #20]
   128d8:	697a      	ldr	r2, [r7, #20]
   128da:	0010      	movs	r0, r2
   128dc:	4798      	blx	r3
		}
	}
}
   128de:	46c0      	nop			; (mov r8, r8)
   128e0:	46bd      	mov	sp, r7
   128e2:	b006      	add	sp, #24
   128e4:	bd80      	pop	{r7, pc}
   128e6:	46c0      	nop			; (mov r8, r8)
   128e8:	20003310 	.word	0x20003310
   128ec:	000122c9 	.word	0x000122c9
   128f0:	00012139 	.word	0x00012139
   128f4:	0001224d 	.word	0x0001224d
   128f8:	0001215d 	.word	0x0001215d

000128fc <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   128fc:	b580      	push	{r7, lr}
   128fe:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   12900:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   12904:	4b02      	ldr	r3, [pc, #8]	; (12910 <NVIC_SystemReset+0x14>)
   12906:	4a03      	ldr	r2, [pc, #12]	; (12914 <NVIC_SystemReset+0x18>)
   12908:	60da      	str	r2, [r3, #12]
   1290a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   1290e:	e7fe      	b.n	1290e <NVIC_SystemReset+0x12>
   12910:	e000ed00 	.word	0xe000ed00
   12914:	05fa0004 	.word	0x05fa0004

00012918 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   12918:	b580      	push	{r7, lr}
   1291a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   1291c:	4b02      	ldr	r3, [pc, #8]	; (12928 <system_reset+0x10>)
   1291e:	4798      	blx	r3
}
   12920:	46c0      	nop			; (mov r8, r8)
   12922:	46bd      	mov	sp, r7
   12924:	bd80      	pop	{r7, pc}
   12926:	46c0      	nop			; (mov r8, r8)
   12928:	000128fd 	.word	0x000128fd

0001292c <vCommandConsoleTask>:
/******************************************************************************
* CLI Thread
******************************************************************************/

void vCommandConsoleTask( void *pvParameters )
{
   1292c:	b580      	push	{r7, lr}
   1292e:	b088      	sub	sp, #32
   12930:	af00      	add	r7, sp, #0
   12932:	6078      	str	r0, [r7, #4]
//REGISTER COMMANDS HERE

FreeRTOS_CLIRegisterCommand( &xGetLightDataCommand );
   12934:	4b8e      	ldr	r3, [pc, #568]	; (12b70 <vCommandConsoleTask+0x244>)
   12936:	0018      	movs	r0, r3
   12938:	4b8e      	ldr	r3, [pc, #568]	; (12b74 <vCommandConsoleTask+0x248>)
   1293a:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xClearScreen );
   1293c:	4b8e      	ldr	r3, [pc, #568]	; (12b78 <vCommandConsoleTask+0x24c>)
   1293e:	0018      	movs	r0, r3
   12940:	4b8c      	ldr	r3, [pc, #560]	; (12b74 <vCommandConsoleTask+0x248>)
   12942:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xResetCommand );
   12944:	4b8d      	ldr	r3, [pc, #564]	; (12b7c <vCommandConsoleTask+0x250>)
   12946:	0018      	movs	r0, r3
   12948:	4b8a      	ldr	r3, [pc, #552]	; (12b74 <vCommandConsoleTask+0x248>)
   1294a:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xNeotrellisTurnLEDCommand );
   1294c:	4b8c      	ldr	r3, [pc, #560]	; (12b80 <vCommandConsoleTask+0x254>)
   1294e:	0018      	movs	r0, r3
   12950:	4b88      	ldr	r3, [pc, #544]	; (12b74 <vCommandConsoleTask+0x248>)
   12952:	4798      	blx	r3
FreeRTOS_CLIRegisterCommand( &xOLEDdrawCircleCommand );
   12954:	4b8b      	ldr	r3, [pc, #556]	; (12b84 <vCommandConsoleTask+0x258>)
   12956:	0018      	movs	r0, r3
   12958:	4b86      	ldr	r3, [pc, #536]	; (12b74 <vCommandConsoleTask+0x248>)
   1295a:	4798      	blx	r3

uint8_t cRxedChar[2], cInputIndex = 0;
   1295c:	231f      	movs	r3, #31
   1295e:	18fb      	adds	r3, r7, r3
   12960:	2200      	movs	r2, #0
   12962:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString( pcWelcomeMessage);
   12964:	4b88      	ldr	r3, [pc, #544]	; (12b88 <vCommandConsoleTask+0x25c>)
   12966:	0018      	movs	r0, r3
   12968:	4b88      	ldr	r3, [pc, #544]	; (12b8c <vCommandConsoleTask+0x260>)
   1296a:	4798      	blx	r3

    for( ;; )
    {
        /* This implementation reads a single character at a time.  Wait in the
        Blocked state until a character is received. */
        int recv = SerialConsoleReadCharacter(&cRxedChar);
   1296c:	2310      	movs	r3, #16
   1296e:	18fb      	adds	r3, r7, r3
   12970:	0018      	movs	r0, r3
   12972:	4b87      	ldr	r3, [pc, #540]	; (12b90 <vCommandConsoleTask+0x264>)
   12974:	4798      	blx	r3
   12976:	0003      	movs	r3, r0
   12978:	61bb      	str	r3, [r7, #24]
		if(recv == -1) //If no characters in the buffer, thread goes to sleep for a while
   1297a:	69bb      	ldr	r3, [r7, #24]
   1297c:	3301      	adds	r3, #1
   1297e:	d103      	bne.n	12988 <vCommandConsoleTask+0x5c>
		{
			vTaskDelay( CLI_TASK_DELAY);
   12980:	2096      	movs	r0, #150	; 0x96
   12982:	4b84      	ldr	r3, [pc, #528]	; (12b94 <vCommandConsoleTask+0x268>)
   12984:	4798      	blx	r3
   12986:	e7f1      	b.n	1296c <vCommandConsoleTask+0x40>
		}else if( cRxedChar[0] == '\n' || cRxedChar[0] == '\r'  )
   12988:	2310      	movs	r3, #16
   1298a:	18fb      	adds	r3, r7, r3
   1298c:	781b      	ldrb	r3, [r3, #0]
   1298e:	2b0a      	cmp	r3, #10
   12990:	d004      	beq.n	1299c <vCommandConsoleTask+0x70>
   12992:	2310      	movs	r3, #16
   12994:	18fb      	adds	r3, r7, r3
   12996:	781b      	ldrb	r3, [r3, #0]
   12998:	2b0d      	cmp	r3, #13
   1299a:	d131      	bne.n	12a00 <vCommandConsoleTask+0xd4>
        {
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString("\r\n");
   1299c:	4b7e      	ldr	r3, [pc, #504]	; (12b98 <vCommandConsoleTask+0x26c>)
   1299e:	0018      	movs	r0, r3
   129a0:	4b7a      	ldr	r3, [pc, #488]	; (12b8c <vCommandConsoleTask+0x260>)
   129a2:	4798      	blx	r3
			//Copy for last command
			isEscapeCode = false; pcEscapeCodePos = 0;
   129a4:	4b7d      	ldr	r3, [pc, #500]	; (12b9c <vCommandConsoleTask+0x270>)
   129a6:	2200      	movs	r2, #0
   129a8:	701a      	strb	r2, [r3, #0]
   129aa:	4b7d      	ldr	r3, [pc, #500]	; (12ba0 <vCommandConsoleTask+0x274>)
   129ac:	2200      	movs	r2, #0
   129ae:	701a      	strb	r2, [r3, #0]
			strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI-1);
   129b0:	497c      	ldr	r1, [pc, #496]	; (12ba4 <vCommandConsoleTask+0x278>)
   129b2:	4b7d      	ldr	r3, [pc, #500]	; (12ba8 <vCommandConsoleTask+0x27c>)
   129b4:	2231      	movs	r2, #49	; 0x31
   129b6:	0018      	movs	r0, r3
   129b8:	4b7c      	ldr	r3, [pc, #496]	; (12bac <vCommandConsoleTask+0x280>)
   129ba:	4798      	blx	r3
			pcLastCommand[MAX_INPUT_LENGTH_CLI-1] = 0;	//Ensure null termination
   129bc:	4b7a      	ldr	r3, [pc, #488]	; (12ba8 <vCommandConsoleTask+0x27c>)
   129be:	2231      	movs	r2, #49	; 0x31
   129c0:	2100      	movs	r1, #0
   129c2:	5499      	strb	r1, [r3, r2]
            do
            {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
   129c4:	497a      	ldr	r1, [pc, #488]	; (12bb0 <vCommandConsoleTask+0x284>)
   129c6:	4b77      	ldr	r3, [pc, #476]	; (12ba4 <vCommandConsoleTask+0x278>)
   129c8:	2264      	movs	r2, #100	; 0x64
   129ca:	0018      	movs	r0, r3
   129cc:	4b79      	ldr	r3, [pc, #484]	; (12bb4 <vCommandConsoleTask+0x288>)
   129ce:	4798      	blx	r3
   129d0:	0003      	movs	r3, r0
   129d2:	617b      	str	r3, [r7, #20]
                              );

                /* Write the output generated by the command interpreter to the
                console. */
				//Ensure it is null terminated
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   129d4:	4b76      	ldr	r3, [pc, #472]	; (12bb0 <vCommandConsoleTask+0x284>)
   129d6:	2263      	movs	r2, #99	; 0x63
   129d8:	2100      	movs	r1, #0
   129da:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   129dc:	4b74      	ldr	r3, [pc, #464]	; (12bb0 <vCommandConsoleTask+0x284>)
   129de:	0018      	movs	r0, r3
   129e0:	4b6a      	ldr	r3, [pc, #424]	; (12b8c <vCommandConsoleTask+0x260>)
   129e2:	4798      	blx	r3

            } while( xMoreDataToFollow != pdFALSE );
   129e4:	697b      	ldr	r3, [r7, #20]
   129e6:	2b00      	cmp	r3, #0
   129e8:	d1ec      	bne.n	129c4 <vCommandConsoleTask+0x98>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   129ea:	231f      	movs	r3, #31
   129ec:	18fb      	adds	r3, r7, r3
   129ee:	2200      	movs	r2, #0
   129f0:	701a      	strb	r2, [r3, #0]
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
   129f2:	4b6c      	ldr	r3, [pc, #432]	; (12ba4 <vCommandConsoleTask+0x278>)
   129f4:	2232      	movs	r2, #50	; 0x32
   129f6:	2100      	movs	r1, #0
   129f8:	0018      	movs	r0, r3
   129fa:	4b6f      	ldr	r3, [pc, #444]	; (12bb8 <vCommandConsoleTask+0x28c>)
   129fc:	4798      	blx	r3
   129fe:	e0b6      	b.n	12b6e <vCommandConsoleTask+0x242>
        {
		            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */
		
			if (true == isEscapeCode) {
   12a00:	4b66      	ldr	r3, [pc, #408]	; (12b9c <vCommandConsoleTask+0x270>)
   12a02:	781b      	ldrb	r3, [r3, #0]
   12a04:	2b00      	cmp	r3, #0
   12a06:	d059      	beq.n	12abc <vCommandConsoleTask+0x190>

				if(pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   12a08:	4b65      	ldr	r3, [pc, #404]	; (12ba0 <vCommandConsoleTask+0x274>)
   12a0a:	781b      	ldrb	r3, [r3, #0]
   12a0c:	2b03      	cmp	r3, #3
   12a0e:	d80c      	bhi.n	12a2a <vCommandConsoleTask+0xfe>
					pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   12a10:	4b63      	ldr	r3, [pc, #396]	; (12ba0 <vCommandConsoleTask+0x274>)
   12a12:	781b      	ldrb	r3, [r3, #0]
   12a14:	1c5a      	adds	r2, r3, #1
   12a16:	b2d1      	uxtb	r1, r2
   12a18:	4a61      	ldr	r2, [pc, #388]	; (12ba0 <vCommandConsoleTask+0x274>)
   12a1a:	7011      	strb	r1, [r2, #0]
   12a1c:	001a      	movs	r2, r3
   12a1e:	2310      	movs	r3, #16
   12a20:	18fb      	adds	r3, r7, r3
   12a22:	7819      	ldrb	r1, [r3, #0]
   12a24:	4b65      	ldr	r3, [pc, #404]	; (12bbc <vCommandConsoleTask+0x290>)
   12a26:	5499      	strb	r1, [r3, r2]
   12a28:	e005      	b.n	12a36 <vCommandConsoleTask+0x10a>
				}
				else {
					isEscapeCode = false; pcEscapeCodePos = 0;
   12a2a:	4b5c      	ldr	r3, [pc, #368]	; (12b9c <vCommandConsoleTask+0x270>)
   12a2c:	2200      	movs	r2, #0
   12a2e:	701a      	strb	r2, [r3, #0]
   12a30:	4b5b      	ldr	r3, [pc, #364]	; (12ba0 <vCommandConsoleTask+0x274>)
   12a32:	2200      	movs	r2, #0
   12a34:	701a      	strb	r2, [r3, #0]
				}
			
				if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   12a36:	4b5a      	ldr	r3, [pc, #360]	; (12ba0 <vCommandConsoleTask+0x274>)
   12a38:	781b      	ldrb	r3, [r3, #0]
   12a3a:	2b01      	cmp	r3, #1
   12a3c:	d996      	bls.n	1296c <vCommandConsoleTask+0x40>
				
					// UP ARROW SHOW LAST COMMAND
					if(strcasecmp(pcEscapeCodes, "oa"))	{
   12a3e:	4a60      	ldr	r2, [pc, #384]	; (12bc0 <vCommandConsoleTask+0x294>)
   12a40:	4b5e      	ldr	r3, [pc, #376]	; (12bbc <vCommandConsoleTask+0x290>)
   12a42:	0011      	movs	r1, r2
   12a44:	0018      	movs	r0, r3
   12a46:	4b5f      	ldr	r3, [pc, #380]	; (12bc4 <vCommandConsoleTask+0x298>)
   12a48:	4798      	blx	r3
   12a4a:	1e03      	subs	r3, r0, #0
   12a4c:	d02f      	beq.n	12aae <vCommandConsoleTask+0x182>
                            /// Delete current line and add prompt (">")
                            sprintf(pcInputString, "%c[2K\r>", 27);
   12a4e:	495e      	ldr	r1, [pc, #376]	; (12bc8 <vCommandConsoleTask+0x29c>)
   12a50:	4b54      	ldr	r3, [pc, #336]	; (12ba4 <vCommandConsoleTask+0x278>)
   12a52:	221b      	movs	r2, #27
   12a54:	0018      	movs	r0, r3
   12a56:	4b5d      	ldr	r3, [pc, #372]	; (12bcc <vCommandConsoleTask+0x2a0>)
   12a58:	4798      	blx	r3
				            SerialConsoleWriteString(pcInputString);
   12a5a:	4b52      	ldr	r3, [pc, #328]	; (12ba4 <vCommandConsoleTask+0x278>)
   12a5c:	0018      	movs	r0, r3
   12a5e:	4b4b      	ldr	r3, [pc, #300]	; (12b8c <vCommandConsoleTask+0x260>)
   12a60:	4798      	blx	r3
                            /// Clear input buffer
                            cInputIndex = 0;
   12a62:	231f      	movs	r3, #31
   12a64:	18fb      	adds	r3, r7, r3
   12a66:	2200      	movs	r2, #0
   12a68:	701a      	strb	r2, [r3, #0]
                            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
   12a6a:	4b4e      	ldr	r3, [pc, #312]	; (12ba4 <vCommandConsoleTask+0x278>)
   12a6c:	2232      	movs	r2, #50	; 0x32
   12a6e:	2100      	movs	r1, #0
   12a70:	0018      	movs	r0, r3
   12a72:	4b51      	ldr	r3, [pc, #324]	; (12bb8 <vCommandConsoleTask+0x28c>)
   12a74:	4798      	blx	r3
                        /// Send last command
						strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1); 	
   12a76:	494c      	ldr	r1, [pc, #304]	; (12ba8 <vCommandConsoleTask+0x27c>)
   12a78:	4b4a      	ldr	r3, [pc, #296]	; (12ba4 <vCommandConsoleTask+0x278>)
   12a7a:	2231      	movs	r2, #49	; 0x31
   12a7c:	0018      	movs	r0, r3
   12a7e:	4b4b      	ldr	r3, [pc, #300]	; (12bac <vCommandConsoleTask+0x280>)
   12a80:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   12a82:	4b48      	ldr	r3, [pc, #288]	; (12ba4 <vCommandConsoleTask+0x278>)
   12a84:	0018      	movs	r0, r3
   12a86:	4b52      	ldr	r3, [pc, #328]	; (12bd0 <vCommandConsoleTask+0x2a4>)
   12a88:	4798      	blx	r3
   12a8a:	0003      	movs	r3, r0
   12a8c:	2b30      	cmp	r3, #48	; 0x30
   12a8e:	d806      	bhi.n	12a9e <vCommandConsoleTask+0x172>
   12a90:	4b45      	ldr	r3, [pc, #276]	; (12ba8 <vCommandConsoleTask+0x27c>)
   12a92:	0018      	movs	r0, r3
   12a94:	4b4e      	ldr	r3, [pc, #312]	; (12bd0 <vCommandConsoleTask+0x2a4>)
   12a96:	4798      	blx	r3
   12a98:	0003      	movs	r3, r0
   12a9a:	b2da      	uxtb	r2, r3
   12a9c:	e000      	b.n	12aa0 <vCommandConsoleTask+0x174>
   12a9e:	2231      	movs	r2, #49	; 0x31
   12aa0:	231f      	movs	r3, #31
   12aa2:	18fb      	adds	r3, r7, r3
   12aa4:	701a      	strb	r2, [r3, #0]
						SerialConsoleWriteString(pcInputString);
   12aa6:	4b3f      	ldr	r3, [pc, #252]	; (12ba4 <vCommandConsoleTask+0x278>)
   12aa8:	0018      	movs	r0, r3
   12aaa:	4b38      	ldr	r3, [pc, #224]	; (12b8c <vCommandConsoleTask+0x260>)
   12aac:	4798      	blx	r3
					}
				
					isEscapeCode = false; pcEscapeCodePos = 0;
   12aae:	4b3b      	ldr	r3, [pc, #236]	; (12b9c <vCommandConsoleTask+0x270>)
   12ab0:	2200      	movs	r2, #0
   12ab2:	701a      	strb	r2, [r3, #0]
   12ab4:	4b3a      	ldr	r3, [pc, #232]	; (12ba0 <vCommandConsoleTask+0x274>)
   12ab6:	2200      	movs	r2, #0
   12ab8:	701a      	strb	r2, [r3, #0]
   12aba:	e757      	b.n	1296c <vCommandConsoleTask+0x40>
			}
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if( cRxedChar[0] == '\r' )
   12abc:	2310      	movs	r3, #16
   12abe:	18fb      	adds	r3, r7, r3
   12ac0:	781b      	ldrb	r3, [r3, #0]
   12ac2:	2b0d      	cmp	r3, #13
   12ac4:	d100      	bne.n	12ac8 <vCommandConsoleTask+0x19c>
   12ac6:	e751      	b.n	1296c <vCommandConsoleTask+0x40>
            {
                /* Ignore carriage returns. */
            }
            else if( cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE )
   12ac8:	2310      	movs	r3, #16
   12aca:	18fb      	adds	r3, r7, r3
   12acc:	781b      	ldrb	r3, [r3, #0]
   12ace:	2b08      	cmp	r3, #8
   12ad0:	d004      	beq.n	12adc <vCommandConsoleTask+0x1b0>
   12ad2:	2310      	movs	r3, #16
   12ad4:	18fb      	adds	r3, r7, r3
   12ad6:	781b      	ldrb	r3, [r3, #0]
   12ad8:	2b7f      	cmp	r3, #127	; 0x7f
   12ada:	d11c      	bne.n	12b16 <vCommandConsoleTask+0x1ea>
            {
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
   12adc:	230c      	movs	r3, #12
   12ade:	18fb      	adds	r3, r7, r3
   12ae0:	4a3c      	ldr	r2, [pc, #240]	; (12bd4 <vCommandConsoleTask+0x2a8>)
   12ae2:	6812      	ldr	r2, [r2, #0]
   12ae4:	601a      	str	r2, [r3, #0]
				SerialConsoleWriteString(erase);
   12ae6:	230c      	movs	r3, #12
   12ae8:	18fb      	adds	r3, r7, r3
   12aea:	0018      	movs	r0, r3
   12aec:	4b27      	ldr	r3, [pc, #156]	; (12b8c <vCommandConsoleTask+0x260>)
   12aee:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if( cInputIndex > 0 )
   12af0:	231f      	movs	r3, #31
   12af2:	18fb      	adds	r3, r7, r3
   12af4:	781b      	ldrb	r3, [r3, #0]
   12af6:	2b00      	cmp	r3, #0
   12af8:	d038      	beq.n	12b6c <vCommandConsoleTask+0x240>
                {
                    cInputIndex--;
   12afa:	231f      	movs	r3, #31
   12afc:	18fb      	adds	r3, r7, r3
   12afe:	781a      	ldrb	r2, [r3, #0]
   12b00:	231f      	movs	r3, #31
   12b02:	18fb      	adds	r3, r7, r3
   12b04:	3a01      	subs	r2, #1
   12b06:	701a      	strb	r2, [r3, #0]
                    pcInputString[ cInputIndex ] = 0;
   12b08:	231f      	movs	r3, #31
   12b0a:	18fb      	adds	r3, r7, r3
   12b0c:	781b      	ldrb	r3, [r3, #0]
   12b0e:	4a25      	ldr	r2, [pc, #148]	; (12ba4 <vCommandConsoleTask+0x278>)
   12b10:	2100      	movs	r1, #0
   12b12:	54d1      	strb	r1, [r2, r3]
            {
   12b14:	e02a      	b.n	12b6c <vCommandConsoleTask+0x240>
                }
            }
			// ESC
			else if( cRxedChar[0] == ASCII_ESC) {
   12b16:	2310      	movs	r3, #16
   12b18:	18fb      	adds	r3, r7, r3
   12b1a:	781b      	ldrb	r3, [r3, #0]
   12b1c:	2b1b      	cmp	r3, #27
   12b1e:	d106      	bne.n	12b2e <vCommandConsoleTask+0x202>
				isEscapeCode = true; //Next characters will be code arguments
   12b20:	4b1e      	ldr	r3, [pc, #120]	; (12b9c <vCommandConsoleTask+0x270>)
   12b22:	2201      	movs	r2, #1
   12b24:	701a      	strb	r2, [r3, #0]
				pcEscapeCodePos = 0;
   12b26:	4b1e      	ldr	r3, [pc, #120]	; (12ba0 <vCommandConsoleTask+0x274>)
   12b28:	2200      	movs	r2, #0
   12b2a:	701a      	strb	r2, [r3, #0]
   12b2c:	e71e      	b.n	1296c <vCommandConsoleTask+0x40>
            {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
   12b2e:	231f      	movs	r3, #31
   12b30:	18fb      	adds	r3, r7, r3
   12b32:	781b      	ldrb	r3, [r3, #0]
   12b34:	2b31      	cmp	r3, #49	; 0x31
   12b36:	d80f      	bhi.n	12b58 <vCommandConsoleTask+0x22c>
                {
                    pcInputString[ cInputIndex ] = cRxedChar[0];
   12b38:	231f      	movs	r3, #31
   12b3a:	18fb      	adds	r3, r7, r3
   12b3c:	781b      	ldrb	r3, [r3, #0]
   12b3e:	2210      	movs	r2, #16
   12b40:	18ba      	adds	r2, r7, r2
   12b42:	7812      	ldrb	r2, [r2, #0]
   12b44:	b251      	sxtb	r1, r2
   12b46:	4a17      	ldr	r2, [pc, #92]	; (12ba4 <vCommandConsoleTask+0x278>)
   12b48:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   12b4a:	231f      	movs	r3, #31
   12b4c:	18fb      	adds	r3, r7, r3
   12b4e:	781a      	ldrb	r2, [r3, #0]
   12b50:	231f      	movs	r3, #31
   12b52:	18fb      	adds	r3, r7, r3
   12b54:	3201      	adds	r2, #1
   12b56:	701a      	strb	r2, [r3, #0]
                }

					//Order Echo
					cRxedChar[1] = 0;
   12b58:	2310      	movs	r3, #16
   12b5a:	18fb      	adds	r3, r7, r3
   12b5c:	2200      	movs	r2, #0
   12b5e:	705a      	strb	r2, [r3, #1]
					SerialConsoleWriteString(&cRxedChar[0]);
   12b60:	2310      	movs	r3, #16
   12b62:	18fb      	adds	r3, r7, r3
   12b64:	0018      	movs	r0, r3
   12b66:	4b09      	ldr	r3, [pc, #36]	; (12b8c <vCommandConsoleTask+0x260>)
   12b68:	4798      	blx	r3
   12b6a:	e6ff      	b.n	1296c <vCommandConsoleTask+0x40>
            {
   12b6c:	46c0      	nop			; (mov r8, r8)
    {
   12b6e:	e6fd      	b.n	1296c <vCommandConsoleTask+0x40>
   12b70:	0001d298 	.word	0x0001d298
   12b74:	00014de1 	.word	0x00014de1
   12b78:	0001d2d8 	.word	0x0001d2d8
   12b7c:	0001d2a8 	.word	0x0001d2a8
   12b80:	0001d2b8 	.word	0x0001d2b8
   12b84:	0001d2c8 	.word	0x0001d2c8
   12b88:	0001d088 	.word	0x0001d088
   12b8c:	00017bd5 	.word	0x00017bd5
   12b90:	00017c71 	.word	0x00017c71
   12b94:	00016569 	.word	0x00016569
   12b98:	0001d1fc 	.word	0x0001d1fc
   12b9c:	20000228 	.word	0x20000228
   12ba0:	20000229 	.word	0x20000229
   12ba4:	20000260 	.word	0x20000260
   12ba8:	2000022c 	.word	0x2000022c
   12bac:	0001c875 	.word	0x0001c875
   12bb0:	20000294 	.word	0x20000294
   12bb4:	00014e51 	.word	0x00014e51
   12bb8:	0001c5db 	.word	0x0001c5db
   12bbc:	200002f8 	.word	0x200002f8
   12bc0:	0001d200 	.word	0x0001d200
   12bc4:	0001c809 	.word	0x0001c809
   12bc8:	0001d204 	.word	0x0001d204
   12bcc:	0001c7c5 	.word	0x0001c7c5
   12bd0:	0001c845 	.word	0x0001c845
   12bd4:	0001d20c 	.word	0x0001d20c

00012bd8 <CLI_GetLightData>:
/******************************************************************************
* CLI Functions - Define here
******************************************************************************/
//Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetLightData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12bd8:	b590      	push	{r4, r7, lr}
   12bda:	b087      	sub	sp, #28
   12bdc:	af00      	add	r7, sp, #0
   12bde:	60f8      	str	r0, [r7, #12]
   12be0:	60b9      	str	r1, [r7, #8]
   12be2:	607a      	str	r2, [r7, #4]
	uint32_t light_ALS;
	VEML_ReadALSData(&light_ALS);
   12be4:	2314      	movs	r3, #20
   12be6:	18fb      	adds	r3, r7, r3
   12be8:	0018      	movs	r0, r3
   12bea:	4b06      	ldr	r3, [pc, #24]	; (12c04 <CLI_GetLightData+0x2c>)
   12bec:	4798      	blx	r3
	snprintf(pcWriteBuffer,xWriteBufferLen, "Light ALS: %d", light_ALS);
   12bee:	697b      	ldr	r3, [r7, #20]
   12bf0:	4a05      	ldr	r2, [pc, #20]	; (12c08 <CLI_GetLightData+0x30>)
   12bf2:	68b9      	ldr	r1, [r7, #8]
   12bf4:	68f8      	ldr	r0, [r7, #12]
   12bf6:	4c05      	ldr	r4, [pc, #20]	; (12c0c <CLI_GetLightData+0x34>)
   12bf8:	47a0      	blx	r4
	return pdFALSE;
   12bfa:	2300      	movs	r3, #0
}
   12bfc:	0018      	movs	r0, r3
   12bfe:	46bd      	mov	sp, r7
   12c00:	b007      	add	sp, #28
   12c02:	bd90      	pop	{r4, r7, pc}
   12c04:	000139dd 	.word	0x000139dd
   12c08:	0001d210 	.word	0x0001d210
   12c0c:	0001c761 	.word	0x0001c761

00012c10 <xCliClearTerminalScreen>:
//THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
//SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
//CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen( char *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12c10:	b590      	push	{r4, r7, lr}
   12c12:	b087      	sub	sp, #28
   12c14:	af00      	add	r7, sp, #0
   12c16:	60f8      	str	r0, [r7, #12]
   12c18:	60b9      	str	r1, [r7, #8]
   12c1a:	607a      	str	r2, [r7, #4]
	char clearScreen = ASCII_ESC;
   12c1c:	2317      	movs	r3, #23
   12c1e:	18fb      	adds	r3, r7, r3
   12c20:	221b      	movs	r2, #27
   12c22:	701a      	strb	r2, [r3, #0]
	snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   12c24:	2317      	movs	r3, #23
   12c26:	18fb      	adds	r3, r7, r3
   12c28:	781b      	ldrb	r3, [r3, #0]
   12c2a:	4a08      	ldr	r2, [pc, #32]	; (12c4c <xCliClearTerminalScreen+0x3c>)
   12c2c:	4808      	ldr	r0, [pc, #32]	; (12c50 <xCliClearTerminalScreen+0x40>)
   12c2e:	210f      	movs	r1, #15
   12c30:	4c08      	ldr	r4, [pc, #32]	; (12c54 <xCliClearTerminalScreen+0x44>)
   12c32:	47a0      	blx	r4
	snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   12c34:	4a06      	ldr	r2, [pc, #24]	; (12c50 <xCliClearTerminalScreen+0x40>)
   12c36:	68b9      	ldr	r1, [r7, #8]
   12c38:	68fb      	ldr	r3, [r7, #12]
   12c3a:	0018      	movs	r0, r3
   12c3c:	4b05      	ldr	r3, [pc, #20]	; (12c54 <xCliClearTerminalScreen+0x44>)
   12c3e:	4798      	blx	r3
	return pdFALSE;
   12c40:	2300      	movs	r3, #0
}
   12c42:	0018      	movs	r0, r3
   12c44:	46bd      	mov	sp, r7
   12c46:	b007      	add	sp, #28
   12c48:	bd90      	pop	{r4, r7, pc}
   12c4a:	46c0      	nop			; (mov r8, r8)
   12c4c:	0001d220 	.word	0x0001d220
   12c50:	20000218 	.word	0x20000218
   12c54:	0001c761 	.word	0x0001c761

00012c58 <CLI_ResetDevice>:


//Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12c58:	b580      	push	{r7, lr}
   12c5a:	b084      	sub	sp, #16
   12c5c:	af00      	add	r7, sp, #0
   12c5e:	60f8      	str	r0, [r7, #12]
   12c60:	60b9      	str	r1, [r7, #8]
   12c62:	607a      	str	r2, [r7, #4]
	system_reset();
   12c64:	4b03      	ldr	r3, [pc, #12]	; (12c74 <CLI_ResetDevice+0x1c>)
   12c66:	4798      	blx	r3
	return pdFALSE;
   12c68:	2300      	movs	r3, #0
}
   12c6a:	0018      	movs	r0, r3
   12c6c:	46bd      	mov	sp, r7
   12c6e:	b004      	add	sp, #16
   12c70:	bd80      	pop	{r7, pc}
   12c72:	46c0      	nop			; (mov r8, r8)
   12c74:	00012919 	.word	0x00012919

00012c78 <CLI_NeotrellisSetLed>:
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_NeotrellisSetLed( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   12c78:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c7a:	b093      	sub	sp, #76	; 0x4c
   12c7c:	af04      	add	r7, sp, #16
   12c7e:	60f8      	str	r0, [r7, #12]
   12c80:	60b9      	str	r1, [r7, #8]
   12c82:	607a      	str	r2, [r7, #4]
	int8_t *pcParameter1, *pcParameter2, *pcParameter3, *pcParameter4;
	BaseType_t xParameter1StringLength, xParameter2StringLength, xParameter3StringLength, xParameter4StringLength;
	pcParameter1 = FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameter1StringLength);
   12c84:	231c      	movs	r3, #28
   12c86:	18fa      	adds	r2, r7, r3
   12c88:	687b      	ldr	r3, [r7, #4]
   12c8a:	2101      	movs	r1, #1
   12c8c:	0018      	movs	r0, r3
   12c8e:	4b48      	ldr	r3, [pc, #288]	; (12db0 <CLI_NeotrellisSetLed+0x138>)
   12c90:	4798      	blx	r3
   12c92:	0003      	movs	r3, r0
   12c94:	637b      	str	r3, [r7, #52]	; 0x34
	pcParameter2 = FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameter2StringLength);
   12c96:	2318      	movs	r3, #24
   12c98:	18fa      	adds	r2, r7, r3
   12c9a:	687b      	ldr	r3, [r7, #4]
   12c9c:	2102      	movs	r1, #2
   12c9e:	0018      	movs	r0, r3
   12ca0:	4b43      	ldr	r3, [pc, #268]	; (12db0 <CLI_NeotrellisSetLed+0x138>)
   12ca2:	4798      	blx	r3
   12ca4:	0003      	movs	r3, r0
   12ca6:	633b      	str	r3, [r7, #48]	; 0x30
	pcParameter3 = FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameter3StringLength);
   12ca8:	2314      	movs	r3, #20
   12caa:	18fa      	adds	r2, r7, r3
   12cac:	687b      	ldr	r3, [r7, #4]
   12cae:	2103      	movs	r1, #3
   12cb0:	0018      	movs	r0, r3
   12cb2:	4b3f      	ldr	r3, [pc, #252]	; (12db0 <CLI_NeotrellisSetLed+0x138>)
   12cb4:	4798      	blx	r3
   12cb6:	0003      	movs	r3, r0
   12cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	pcParameter4 = FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameter4StringLength);
   12cba:	2310      	movs	r3, #16
   12cbc:	18fa      	adds	r2, r7, r3
   12cbe:	687b      	ldr	r3, [r7, #4]
   12cc0:	2104      	movs	r1, #4
   12cc2:	0018      	movs	r0, r3
   12cc4:	4b3a      	ldr	r3, [pc, #232]	; (12db0 <CLI_NeotrellisSetLed+0x138>)
   12cc6:	4798      	blx	r3
   12cc8:	0003      	movs	r3, r0
   12cca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Terminate both file names. */
	pcParameter1[ xParameter1StringLength ] = 0x00;
   12ccc:	69fb      	ldr	r3, [r7, #28]
   12cce:	001a      	movs	r2, r3
   12cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12cd2:	189b      	adds	r3, r3, r2
   12cd4:	2200      	movs	r2, #0
   12cd6:	701a      	strb	r2, [r3, #0]
	pcParameter2[ xParameter2StringLength ] = 0x00;
   12cd8:	69bb      	ldr	r3, [r7, #24]
   12cda:	001a      	movs	r2, r3
   12cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12cde:	189b      	adds	r3, r3, r2
   12ce0:	2200      	movs	r2, #0
   12ce2:	701a      	strb	r2, [r3, #0]
	pcParameter3[ xParameter3StringLength ] = 0x00;
   12ce4:	697b      	ldr	r3, [r7, #20]
   12ce6:	001a      	movs	r2, r3
   12ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12cea:	189b      	adds	r3, r3, r2
   12cec:	2200      	movs	r2, #0
   12cee:	701a      	strb	r2, [r3, #0]
	pcParameter4[ xParameter4StringLength ] = 0x00;
   12cf0:	693b      	ldr	r3, [r7, #16]
   12cf2:	001a      	movs	r2, r3
   12cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12cf6:	189b      	adds	r3, r3, r2
   12cf8:	2200      	movs	r2, #0
   12cfa:	701a      	strb	r2, [r3, #0]
	
	uint8_t key_num = atoi(pcParameter1);
   12cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12cfe:	0018      	movs	r0, r3
   12d00:	4b2c      	ldr	r3, [pc, #176]	; (12db4 <CLI_NeotrellisSetLed+0x13c>)
   12d02:	4798      	blx	r3
   12d04:	0002      	movs	r2, r0
   12d06:	2327      	movs	r3, #39	; 0x27
   12d08:	18fb      	adds	r3, r7, r3
   12d0a:	701a      	strb	r2, [r3, #0]
	uint8_t red = atoi(pcParameter2);
   12d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12d0e:	0018      	movs	r0, r3
   12d10:	4b28      	ldr	r3, [pc, #160]	; (12db4 <CLI_NeotrellisSetLed+0x13c>)
   12d12:	4798      	blx	r3
   12d14:	0002      	movs	r2, r0
   12d16:	2326      	movs	r3, #38	; 0x26
   12d18:	18fb      	adds	r3, r7, r3
   12d1a:	701a      	strb	r2, [r3, #0]
	uint8_t green = atoi(pcParameter3);
   12d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12d1e:	0018      	movs	r0, r3
   12d20:	4b24      	ldr	r3, [pc, #144]	; (12db4 <CLI_NeotrellisSetLed+0x13c>)
   12d22:	4798      	blx	r3
   12d24:	0002      	movs	r2, r0
   12d26:	2325      	movs	r3, #37	; 0x25
   12d28:	18fb      	adds	r3, r7, r3
   12d2a:	701a      	strb	r2, [r3, #0]
	uint8_t blue = atoi(pcParameter4);
   12d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12d2e:	0018      	movs	r0, r3
   12d30:	4b20      	ldr	r3, [pc, #128]	; (12db4 <CLI_NeotrellisSetLed+0x13c>)
   12d32:	4798      	blx	r3
   12d34:	0002      	movs	r2, r0
   12d36:	2324      	movs	r3, #36	; 0x24
   12d38:	18fb      	adds	r3, r7, r3
   12d3a:	701a      	strb	r2, [r3, #0]
		
	int32_t error = SeesawSetLed(key_num, red, green, blue);
   12d3c:	2324      	movs	r3, #36	; 0x24
   12d3e:	18fb      	adds	r3, r7, r3
   12d40:	781c      	ldrb	r4, [r3, #0]
   12d42:	2325      	movs	r3, #37	; 0x25
   12d44:	18fb      	adds	r3, r7, r3
   12d46:	781a      	ldrb	r2, [r3, #0]
   12d48:	2326      	movs	r3, #38	; 0x26
   12d4a:	18fb      	adds	r3, r7, r3
   12d4c:	7819      	ldrb	r1, [r3, #0]
   12d4e:	2327      	movs	r3, #39	; 0x27
   12d50:	18fb      	adds	r3, r7, r3
   12d52:	7818      	ldrb	r0, [r3, #0]
   12d54:	0023      	movs	r3, r4
   12d56:	4c18      	ldr	r4, [pc, #96]	; (12db8 <CLI_NeotrellisSetLed+0x140>)
   12d58:	47a0      	blx	r4
   12d5a:	0003      	movs	r3, r0
   12d5c:	623b      	str	r3, [r7, #32]
	if (ERROR_NONE != error)
   12d5e:	6a3b      	ldr	r3, [r7, #32]
   12d60:	2b00      	cmp	r3, #0
   12d62:	d007      	beq.n	12d74 <CLI_NeotrellisSetLed+0xfc>
	{
		snprintf(pcWriteBuffer,xWriteBufferLen, "Neo Error!\r\n");
   12d64:	4a15      	ldr	r2, [pc, #84]	; (12dbc <CLI_NeotrellisSetLed+0x144>)
   12d66:	68b9      	ldr	r1, [r7, #8]
   12d68:	68fb      	ldr	r3, [r7, #12]
   12d6a:	0018      	movs	r0, r3
   12d6c:	4b14      	ldr	r3, [pc, #80]	; (12dc0 <CLI_NeotrellisSetLed+0x148>)
   12d6e:	4798      	blx	r3
		return pdFALSE;		
   12d70:	2300      	movs	r3, #0
   12d72:	e019      	b.n	12da8 <CLI_NeotrellisSetLed+0x130>
	}
	SeesawOrderLedUpdate();
   12d74:	4b13      	ldr	r3, [pc, #76]	; (12dc4 <CLI_NeotrellisSetLed+0x14c>)
   12d76:	4798      	blx	r3
	//Check code SeesawSetLed and SeesawSetLed
	//How do you get parameters? check link in comments!
	//Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
	//return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
	//This function expects 4 arguments inside pcCommandString: keley, R, G, B.
	snprintf(pcWriteBuffer,xWriteBufferLen, "Success! Key:%u R:%u G:%u B:%u\r\n ", key_num, red, green, blue);
   12d78:	2327      	movs	r3, #39	; 0x27
   12d7a:	18fb      	adds	r3, r7, r3
   12d7c:	781e      	ldrb	r6, [r3, #0]
   12d7e:	2326      	movs	r3, #38	; 0x26
   12d80:	18fb      	adds	r3, r7, r3
   12d82:	781b      	ldrb	r3, [r3, #0]
   12d84:	2225      	movs	r2, #37	; 0x25
   12d86:	18ba      	adds	r2, r7, r2
   12d88:	7812      	ldrb	r2, [r2, #0]
   12d8a:	2124      	movs	r1, #36	; 0x24
   12d8c:	1879      	adds	r1, r7, r1
   12d8e:	7809      	ldrb	r1, [r1, #0]
   12d90:	4d0d      	ldr	r5, [pc, #52]	; (12dc8 <CLI_NeotrellisSetLed+0x150>)
   12d92:	68bc      	ldr	r4, [r7, #8]
   12d94:	68f8      	ldr	r0, [r7, #12]
   12d96:	9102      	str	r1, [sp, #8]
   12d98:	9201      	str	r2, [sp, #4]
   12d9a:	9300      	str	r3, [sp, #0]
   12d9c:	0033      	movs	r3, r6
   12d9e:	002a      	movs	r2, r5
   12da0:	0021      	movs	r1, r4
   12da2:	4c07      	ldr	r4, [pc, #28]	; (12dc0 <CLI_NeotrellisSetLed+0x148>)
   12da4:	47a0      	blx	r4
	return pdFALSE;
   12da6:	2300      	movs	r3, #0
}
   12da8:	0018      	movs	r0, r3
   12daa:	46bd      	mov	sp, r7
   12dac:	b00f      	add	sp, #60	; 0x3c
   12dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12db0:	00014f79 	.word	0x00014f79
   12db4:	0001c53d 	.word	0x0001c53d
   12db8:	000137c1 	.word	0x000137c1
   12dbc:	0001d228 	.word	0x0001d228
   12dc0:	0001c761 	.word	0x0001c761
   12dc4:	00013895 	.word	0x00013895
   12dc8:	0001d238 	.word	0x0001d238

00012dcc <CLI_OLEDdrawCircle>:

BaseType_t CLI_OLEDdrawCircle( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString ){
   12dcc:	b590      	push	{r4, r7, lr}
   12dce:	b08b      	sub	sp, #44	; 0x2c
   12dd0:	af02      	add	r7, sp, #8
   12dd2:	60f8      	str	r0, [r7, #12]
   12dd4:	60b9      	str	r1, [r7, #8]
   12dd6:	607a      	str	r2, [r7, #4]
	int error = NULL;
   12dd8:	2300      	movs	r3, #0
   12dda:	61fb      	str	r3, [r7, #28]
	static int8_t *pcParameter1, *pcParameter2, *pcParameter3, *pcParameter4;
	static BaseType_t xParameter1StringLength, xParameter2StringLength, xParameter3StringLength, xParameter4StringLength;
	pcParameter1 = FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameter1StringLength);
   12ddc:	4a49      	ldr	r2, [pc, #292]	; (12f04 <CLI_OLEDdrawCircle+0x138>)
   12dde:	687b      	ldr	r3, [r7, #4]
   12de0:	2101      	movs	r1, #1
   12de2:	0018      	movs	r0, r3
   12de4:	4b48      	ldr	r3, [pc, #288]	; (12f08 <CLI_OLEDdrawCircle+0x13c>)
   12de6:	4798      	blx	r3
   12de8:	0002      	movs	r2, r0
   12dea:	4b48      	ldr	r3, [pc, #288]	; (12f0c <CLI_OLEDdrawCircle+0x140>)
   12dec:	601a      	str	r2, [r3, #0]
	pcParameter2 = FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameter2StringLength);
   12dee:	4a48      	ldr	r2, [pc, #288]	; (12f10 <CLI_OLEDdrawCircle+0x144>)
   12df0:	687b      	ldr	r3, [r7, #4]
   12df2:	2102      	movs	r1, #2
   12df4:	0018      	movs	r0, r3
   12df6:	4b44      	ldr	r3, [pc, #272]	; (12f08 <CLI_OLEDdrawCircle+0x13c>)
   12df8:	4798      	blx	r3
   12dfa:	0002      	movs	r2, r0
   12dfc:	4b45      	ldr	r3, [pc, #276]	; (12f14 <CLI_OLEDdrawCircle+0x148>)
   12dfe:	601a      	str	r2, [r3, #0]
	pcParameter3 = FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameter3StringLength);
   12e00:	4a45      	ldr	r2, [pc, #276]	; (12f18 <CLI_OLEDdrawCircle+0x14c>)
   12e02:	687b      	ldr	r3, [r7, #4]
   12e04:	2103      	movs	r1, #3
   12e06:	0018      	movs	r0, r3
   12e08:	4b3f      	ldr	r3, [pc, #252]	; (12f08 <CLI_OLEDdrawCircle+0x13c>)
   12e0a:	4798      	blx	r3
   12e0c:	0002      	movs	r2, r0
   12e0e:	4b43      	ldr	r3, [pc, #268]	; (12f1c <CLI_OLEDdrawCircle+0x150>)
   12e10:	601a      	str	r2, [r3, #0]
	pcParameter4 = FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameter4StringLength);
   12e12:	4a43      	ldr	r2, [pc, #268]	; (12f20 <CLI_OLEDdrawCircle+0x154>)
   12e14:	687b      	ldr	r3, [r7, #4]
   12e16:	2104      	movs	r1, #4
   12e18:	0018      	movs	r0, r3
   12e1a:	4b3b      	ldr	r3, [pc, #236]	; (12f08 <CLI_OLEDdrawCircle+0x13c>)
   12e1c:	4798      	blx	r3
   12e1e:	0002      	movs	r2, r0
   12e20:	4b40      	ldr	r3, [pc, #256]	; (12f24 <CLI_OLEDdrawCircle+0x158>)
   12e22:	601a      	str	r2, [r3, #0]
	
	/* Terminate both file names. */
	pcParameter1[ xParameter1StringLength ] = 0x00;
   12e24:	4b39      	ldr	r3, [pc, #228]	; (12f0c <CLI_OLEDdrawCircle+0x140>)
   12e26:	681a      	ldr	r2, [r3, #0]
   12e28:	4b36      	ldr	r3, [pc, #216]	; (12f04 <CLI_OLEDdrawCircle+0x138>)
   12e2a:	681b      	ldr	r3, [r3, #0]
   12e2c:	18d3      	adds	r3, r2, r3
   12e2e:	2200      	movs	r2, #0
   12e30:	701a      	strb	r2, [r3, #0]
	pcParameter2[ xParameter2StringLength ] = 0x00;
   12e32:	4b38      	ldr	r3, [pc, #224]	; (12f14 <CLI_OLEDdrawCircle+0x148>)
   12e34:	681a      	ldr	r2, [r3, #0]
   12e36:	4b36      	ldr	r3, [pc, #216]	; (12f10 <CLI_OLEDdrawCircle+0x144>)
   12e38:	681b      	ldr	r3, [r3, #0]
   12e3a:	18d3      	adds	r3, r2, r3
   12e3c:	2200      	movs	r2, #0
   12e3e:	701a      	strb	r2, [r3, #0]
	pcParameter3[ xParameter3StringLength ] = 0x00;
   12e40:	4b36      	ldr	r3, [pc, #216]	; (12f1c <CLI_OLEDdrawCircle+0x150>)
   12e42:	681a      	ldr	r2, [r3, #0]
   12e44:	4b34      	ldr	r3, [pc, #208]	; (12f18 <CLI_OLEDdrawCircle+0x14c>)
   12e46:	681b      	ldr	r3, [r3, #0]
   12e48:	18d3      	adds	r3, r2, r3
   12e4a:	2200      	movs	r2, #0
   12e4c:	701a      	strb	r2, [r3, #0]
	pcParameter4[ xParameter4StringLength ] = 0x00;
   12e4e:	4b35      	ldr	r3, [pc, #212]	; (12f24 <CLI_OLEDdrawCircle+0x158>)
   12e50:	681a      	ldr	r2, [r3, #0]
   12e52:	4b33      	ldr	r3, [pc, #204]	; (12f20 <CLI_OLEDdrawCircle+0x154>)
   12e54:	681b      	ldr	r3, [r3, #0]
   12e56:	18d3      	adds	r3, r2, r3
   12e58:	2200      	movs	r2, #0
   12e5a:	701a      	strb	r2, [r3, #0]

	
	uint8_t x0 = atoi(pcParameter1);
   12e5c:	4b2b      	ldr	r3, [pc, #172]	; (12f0c <CLI_OLEDdrawCircle+0x140>)
   12e5e:	681b      	ldr	r3, [r3, #0]
   12e60:	0018      	movs	r0, r3
   12e62:	4b31      	ldr	r3, [pc, #196]	; (12f28 <CLI_OLEDdrawCircle+0x15c>)
   12e64:	4798      	blx	r3
   12e66:	0002      	movs	r2, r0
   12e68:	231b      	movs	r3, #27
   12e6a:	18fb      	adds	r3, r7, r3
   12e6c:	701a      	strb	r2, [r3, #0]
	uint8_t y0 = atoi(pcParameter2);
   12e6e:	4b29      	ldr	r3, [pc, #164]	; (12f14 <CLI_OLEDdrawCircle+0x148>)
   12e70:	681b      	ldr	r3, [r3, #0]
   12e72:	0018      	movs	r0, r3
   12e74:	4b2c      	ldr	r3, [pc, #176]	; (12f28 <CLI_OLEDdrawCircle+0x15c>)
   12e76:	4798      	blx	r3
   12e78:	0002      	movs	r2, r0
   12e7a:	231a      	movs	r3, #26
   12e7c:	18fb      	adds	r3, r7, r3
   12e7e:	701a      	strb	r2, [r3, #0]
	uint8_t radius = atoi(pcParameter3);
   12e80:	4b26      	ldr	r3, [pc, #152]	; (12f1c <CLI_OLEDdrawCircle+0x150>)
   12e82:	681b      	ldr	r3, [r3, #0]
   12e84:	0018      	movs	r0, r3
   12e86:	4b28      	ldr	r3, [pc, #160]	; (12f28 <CLI_OLEDdrawCircle+0x15c>)
   12e88:	4798      	blx	r3
   12e8a:	0002      	movs	r2, r0
   12e8c:	2319      	movs	r3, #25
   12e8e:	18fb      	adds	r3, r7, r3
   12e90:	701a      	strb	r2, [r3, #0]
	uint8_t color = atoi(pcParameter4);
   12e92:	4b24      	ldr	r3, [pc, #144]	; (12f24 <CLI_OLEDdrawCircle+0x158>)
   12e94:	681b      	ldr	r3, [r3, #0]
   12e96:	0018      	movs	r0, r3
   12e98:	4b23      	ldr	r3, [pc, #140]	; (12f28 <CLI_OLEDdrawCircle+0x15c>)
   12e9a:	4798      	blx	r3
   12e9c:	0002      	movs	r2, r0
   12e9e:	2318      	movs	r3, #24
   12ea0:	18fb      	adds	r3, r7, r3
   12ea2:	701a      	strb	r2, [r3, #0]
	uint8_t mode = 0;
   12ea4:	2317      	movs	r3, #23
   12ea6:	18fb      	adds	r3, r7, r3
   12ea8:	2200      	movs	r2, #0
   12eaa:	701a      	strb	r2, [r3, #0]

	
	MicroOLEDcircle(x0, y0, radius, color, NORM);
   12eac:	2318      	movs	r3, #24
   12eae:	18fb      	adds	r3, r7, r3
   12eb0:	781c      	ldrb	r4, [r3, #0]
   12eb2:	2319      	movs	r3, #25
   12eb4:	18fb      	adds	r3, r7, r3
   12eb6:	781a      	ldrb	r2, [r3, #0]
   12eb8:	231a      	movs	r3, #26
   12eba:	18fb      	adds	r3, r7, r3
   12ebc:	7819      	ldrb	r1, [r3, #0]
   12ebe:	231b      	movs	r3, #27
   12ec0:	18fb      	adds	r3, r7, r3
   12ec2:	7818      	ldrb	r0, [r3, #0]
   12ec4:	2300      	movs	r3, #0
   12ec6:	9300      	str	r3, [sp, #0]
   12ec8:	0023      	movs	r3, r4
   12eca:	4c18      	ldr	r4, [pc, #96]	; (12f2c <CLI_OLEDdrawCircle+0x160>)
   12ecc:	47a0      	blx	r4

	error = MicroOLEDdisplay();
   12ece:	4b18      	ldr	r3, [pc, #96]	; (12f30 <CLI_OLEDdrawCircle+0x164>)
   12ed0:	4798      	blx	r3
   12ed2:	0003      	movs	r3, r0
   12ed4:	61fb      	str	r3, [r7, #28]
	if (ERROR_NONE != error)
   12ed6:	69fb      	ldr	r3, [r7, #28]
   12ed8:	2b00      	cmp	r3, #0
   12eda:	d007      	beq.n	12eec <CLI_OLEDdrawCircle+0x120>
	{
		snprintf(pcWriteBuffer,xWriteBufferLen, "Could not display on OLED!\r\n");
   12edc:	4a15      	ldr	r2, [pc, #84]	; (12f34 <CLI_OLEDdrawCircle+0x168>)
   12ede:	68b9      	ldr	r1, [r7, #8]
   12ee0:	68fb      	ldr	r3, [r7, #12]
   12ee2:	0018      	movs	r0, r3
   12ee4:	4b14      	ldr	r3, [pc, #80]	; (12f38 <CLI_OLEDdrawCircle+0x16c>)
   12ee6:	4798      	blx	r3
		return pdFALSE;
   12ee8:	2300      	movs	r3, #0
   12eea:	e006      	b.n	12efa <CLI_OLEDdrawCircle+0x12e>
	}
	snprintf(pcWriteBuffer,xWriteBufferLen, "Circle Outline is drawn!\r\n");
   12eec:	4a13      	ldr	r2, [pc, #76]	; (12f3c <CLI_OLEDdrawCircle+0x170>)
   12eee:	68b9      	ldr	r1, [r7, #8]
   12ef0:	68fb      	ldr	r3, [r7, #12]
   12ef2:	0018      	movs	r0, r3
   12ef4:	4b10      	ldr	r3, [pc, #64]	; (12f38 <CLI_OLEDdrawCircle+0x16c>)
   12ef6:	4798      	blx	r3
	return pdFALSE;
   12ef8:	2300      	movs	r3, #0
   12efa:	0018      	movs	r0, r3
   12efc:	46bd      	mov	sp, r7
   12efe:	b009      	add	sp, #36	; 0x24
   12f00:	bd90      	pop	{r4, r7, pc}
   12f02:	46c0      	nop			; (mov r8, r8)
   12f04:	200002fc 	.word	0x200002fc
   12f08:	00014f79 	.word	0x00014f79
   12f0c:	20000300 	.word	0x20000300
   12f10:	20000304 	.word	0x20000304
   12f14:	20000308 	.word	0x20000308
   12f18:	2000030c 	.word	0x2000030c
   12f1c:	20000310 	.word	0x20000310
   12f20:	20000314 	.word	0x20000314
   12f24:	20000318 	.word	0x20000318
   12f28:	0001c53d 	.word	0x0001c53d
   12f2c:	00013ead 	.word	0x00013ead
   12f30:	00013db1 	.word	0x00013db1
   12f34:	0001d25c 	.word	0x0001d25c
   12f38:	0001c761 	.word	0x0001c761
   12f3c:	0001d27c 	.word	0x0001d27c

00012f40 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   12f40:	b580      	push	{r7, lr}
   12f42:	b082      	sub	sp, #8
   12f44:	af00      	add	r7, sp, #0
   12f46:	0002      	movs	r2, r0
   12f48:	1dfb      	adds	r3, r7, #7
   12f4a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12f4c:	4b06      	ldr	r3, [pc, #24]	; (12f68 <system_interrupt_enable+0x28>)
   12f4e:	1dfa      	adds	r2, r7, #7
   12f50:	7812      	ldrb	r2, [r2, #0]
   12f52:	0011      	movs	r1, r2
   12f54:	221f      	movs	r2, #31
   12f56:	400a      	ands	r2, r1
   12f58:	2101      	movs	r1, #1
   12f5a:	4091      	lsls	r1, r2
   12f5c:	000a      	movs	r2, r1
   12f5e:	601a      	str	r2, [r3, #0]
}
   12f60:	46c0      	nop			; (mov r8, r8)
   12f62:	46bd      	mov	sp, r7
   12f64:	b002      	add	sp, #8
   12f66:	bd80      	pop	{r7, pc}
   12f68:	e000e100 	.word	0xe000e100

00012f6c <i2c_master_is_syncing>:
{
   12f6c:	b580      	push	{r7, lr}
   12f6e:	b084      	sub	sp, #16
   12f70:	af00      	add	r7, sp, #0
   12f72:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   12f74:	687b      	ldr	r3, [r7, #4]
   12f76:	681b      	ldr	r3, [r3, #0]
   12f78:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   12f7a:	68fb      	ldr	r3, [r7, #12]
   12f7c:	69db      	ldr	r3, [r3, #28]
   12f7e:	2207      	movs	r2, #7
   12f80:	4013      	ands	r3, r2
   12f82:	1e5a      	subs	r2, r3, #1
   12f84:	4193      	sbcs	r3, r2
   12f86:	b2db      	uxtb	r3, r3
}
   12f88:	0018      	movs	r0, r3
   12f8a:	46bd      	mov	sp, r7
   12f8c:	b004      	add	sp, #16
   12f8e:	bd80      	pop	{r7, pc}

00012f90 <_i2c_master_wait_for_sync>:
{
   12f90:	b580      	push	{r7, lr}
   12f92:	b082      	sub	sp, #8
   12f94:	af00      	add	r7, sp, #0
   12f96:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   12f98:	46c0      	nop			; (mov r8, r8)
   12f9a:	687b      	ldr	r3, [r7, #4]
   12f9c:	0018      	movs	r0, r3
   12f9e:	4b04      	ldr	r3, [pc, #16]	; (12fb0 <_i2c_master_wait_for_sync+0x20>)
   12fa0:	4798      	blx	r3
   12fa2:	1e03      	subs	r3, r0, #0
   12fa4:	d1f9      	bne.n	12f9a <_i2c_master_wait_for_sync+0xa>
}
   12fa6:	46c0      	nop			; (mov r8, r8)
   12fa8:	46bd      	mov	sp, r7
   12faa:	b002      	add	sp, #8
   12fac:	bd80      	pop	{r7, pc}
   12fae:	46c0      	nop			; (mov r8, r8)
   12fb0:	00012f6d 	.word	0x00012f6d

00012fb4 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   12fb4:	b580      	push	{r7, lr}
   12fb6:	b082      	sub	sp, #8
   12fb8:	af00      	add	r7, sp, #0
   12fba:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   12fbc:	687b      	ldr	r3, [r7, #4]
   12fbe:	2264      	movs	r2, #100	; 0x64
   12fc0:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   12fc2:	687b      	ldr	r3, [r7, #4]
   12fc4:	4a1b      	ldr	r2, [pc, #108]	; (13034 <i2c_master_get_config_defaults+0x80>)
   12fc6:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   12fc8:	687b      	ldr	r3, [r7, #4]
   12fca:	2200      	movs	r2, #0
   12fcc:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   12fce:	687b      	ldr	r3, [r7, #4]
   12fd0:	2200      	movs	r2, #0
   12fd2:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   12fd4:	687b      	ldr	r3, [r7, #4]
   12fd6:	2200      	movs	r2, #0
   12fd8:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   12fda:	687b      	ldr	r3, [r7, #4]
   12fdc:	2280      	movs	r2, #128	; 0x80
   12fde:	0392      	lsls	r2, r2, #14
   12fe0:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   12fe2:	687b      	ldr	r3, [r7, #4]
   12fe4:	2201      	movs	r2, #1
   12fe6:	4252      	negs	r2, r2
   12fe8:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   12fea:	687b      	ldr	r3, [r7, #4]
   12fec:	2201      	movs	r2, #1
   12fee:	4252      	negs	r2, r2
   12ff0:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   12ff2:	687b      	ldr	r3, [r7, #4]
   12ff4:	2200      	movs	r2, #0
   12ff6:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   12ff8:	687b      	ldr	r3, [r7, #4]
   12ffa:	2200      	movs	r2, #0
   12ffc:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   12ffe:	687b      	ldr	r3, [r7, #4]
   13000:	2224      	movs	r2, #36	; 0x24
   13002:	2100      	movs	r1, #0
   13004:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   13006:	687b      	ldr	r3, [r7, #4]
   13008:	2200      	movs	r2, #0
   1300a:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   1300c:	687b      	ldr	r3, [r7, #4]
   1300e:	222c      	movs	r2, #44	; 0x2c
   13010:	2100      	movs	r1, #0
   13012:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   13014:	687b      	ldr	r3, [r7, #4]
   13016:	222d      	movs	r2, #45	; 0x2d
   13018:	2100      	movs	r1, #0
   1301a:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   1301c:	687b      	ldr	r3, [r7, #4]
   1301e:	222e      	movs	r2, #46	; 0x2e
   13020:	2100      	movs	r1, #0
   13022:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   13024:	687b      	ldr	r3, [r7, #4]
   13026:	22d7      	movs	r2, #215	; 0xd7
   13028:	861a      	strh	r2, [r3, #48]	; 0x30
}
   1302a:	46c0      	nop			; (mov r8, r8)
   1302c:	46bd      	mov	sp, r7
   1302e:	b002      	add	sp, #8
   13030:	bd80      	pop	{r7, pc}
   13032:	46c0      	nop			; (mov r8, r8)
   13034:	00000d48 	.word	0x00000d48

00013038 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   13038:	b580      	push	{r7, lr}
   1303a:	b084      	sub	sp, #16
   1303c:	af00      	add	r7, sp, #0
   1303e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13040:	687b      	ldr	r3, [r7, #4]
   13042:	681b      	ldr	r3, [r3, #0]
   13044:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   13046:	2300      	movs	r3, #0
   13048:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   1304a:	687b      	ldr	r3, [r7, #4]
   1304c:	0018      	movs	r0, r3
   1304e:	4b14      	ldr	r3, [pc, #80]	; (130a0 <i2c_master_enable+0x68>)
   13050:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   13052:	68bb      	ldr	r3, [r7, #8]
   13054:	681b      	ldr	r3, [r3, #0]
   13056:	2202      	movs	r2, #2
   13058:	431a      	orrs	r2, r3
   1305a:	68bb      	ldr	r3, [r7, #8]
   1305c:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1305e:	687b      	ldr	r3, [r7, #4]
   13060:	681b      	ldr	r3, [r3, #0]
   13062:	0018      	movs	r0, r3
   13064:	4b0f      	ldr	r3, [pc, #60]	; (130a4 <i2c_master_enable+0x6c>)
   13066:	4798      	blx	r3
   13068:	0003      	movs	r3, r0
   1306a:	0018      	movs	r0, r3
   1306c:	4b0e      	ldr	r3, [pc, #56]	; (130a8 <i2c_master_enable+0x70>)
   1306e:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   13070:	e00c      	b.n	1308c <i2c_master_enable+0x54>
		timeout_counter++;
   13072:	68fb      	ldr	r3, [r7, #12]
   13074:	3301      	adds	r3, #1
   13076:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   13078:	687b      	ldr	r3, [r7, #4]
   1307a:	88db      	ldrh	r3, [r3, #6]
   1307c:	001a      	movs	r2, r3
   1307e:	68fb      	ldr	r3, [r7, #12]
   13080:	429a      	cmp	r2, r3
   13082:	d803      	bhi.n	1308c <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   13084:	68bb      	ldr	r3, [r7, #8]
   13086:	2210      	movs	r2, #16
   13088:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   1308a:	e006      	b.n	1309a <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   1308c:	68bb      	ldr	r3, [r7, #8]
   1308e:	8b5b      	ldrh	r3, [r3, #26]
   13090:	b29b      	uxth	r3, r3
   13092:	001a      	movs	r2, r3
   13094:	2310      	movs	r3, #16
   13096:	4013      	ands	r3, r2
   13098:	d0eb      	beq.n	13072 <i2c_master_enable+0x3a>
		}
	}
}
   1309a:	46bd      	mov	sp, r7
   1309c:	b004      	add	sp, #16
   1309e:	bd80      	pop	{r7, pc}
   130a0:	00012f91 	.word	0x00012f91
   130a4:	00018b35 	.word	0x00018b35
   130a8:	00012f41 	.word	0x00012f41

000130ac <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   130ac:	b580      	push	{r7, lr}
   130ae:	b082      	sub	sp, #8
   130b0:	af00      	add	r7, sp, #0
   130b2:	6078      	str	r0, [r7, #4]
   130b4:	000a      	movs	r2, r1
   130b6:	1cfb      	adds	r3, r7, #3
   130b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   130ba:	687b      	ldr	r3, [r7, #4]
   130bc:	7e5b      	ldrb	r3, [r3, #25]
   130be:	b2db      	uxtb	r3, r3
   130c0:	b25a      	sxtb	r2, r3
   130c2:	1cfb      	adds	r3, r7, #3
   130c4:	781b      	ldrb	r3, [r3, #0]
   130c6:	2101      	movs	r1, #1
   130c8:	4099      	lsls	r1, r3
   130ca:	000b      	movs	r3, r1
   130cc:	b25b      	sxtb	r3, r3
   130ce:	4313      	orrs	r3, r2
   130d0:	b25b      	sxtb	r3, r3
   130d2:	b2da      	uxtb	r2, r3
   130d4:	687b      	ldr	r3, [r7, #4]
   130d6:	765a      	strb	r2, [r3, #25]
}
   130d8:	46c0      	nop			; (mov r8, r8)
   130da:	46bd      	mov	sp, r7
   130dc:	b002      	add	sp, #8
   130de:	bd80      	pop	{r7, pc}

000130e0 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
* Forward Declarations
******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   130e0:	b590      	push	{r4, r7, lr}
   130e2:	b091      	sub	sp, #68	; 0x44
   130e4:	af00      	add	r7, sp, #0
	int32_t error = STATUS_OK;
   130e6:	2300      	movs	r3, #0
   130e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	status_code_genare_t errCodeAsf = STATUS_OK;
   130ea:	233a      	movs	r3, #58	; 0x3a
   130ec:	18fb      	adds	r3, r7, r3
   130ee:	2200      	movs	r2, #0
   130f0:	701a      	strb	r2, [r3, #0]
	/* Initialize config structure and software module */
	struct i2c_master_config config_i2c_master;
	i2c_master_get_config_defaults(&config_i2c_master);
   130f2:	1d3b      	adds	r3, r7, #4
   130f4:	0018      	movs	r0, r3
   130f6:	4b21      	ldr	r3, [pc, #132]	; (1317c <I2cDriverConfigureSensorBus+0x9c>)
   130f8:	4798      	blx	r3
	//config_i2c_master.baud_rate = I2C_MASTER_BAUD_RATE_400KHZ;
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   130fa:	1d3b      	adds	r3, r7, #4
   130fc:	4a20      	ldr	r2, [pc, #128]	; (13180 <I2cDriverConfigureSensorBus+0xa0>)
   130fe:	61da      	str	r2, [r3, #28]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   13100:	1d3b      	adds	r3, r7, #4
   13102:	4a20      	ldr	r2, [pc, #128]	; (13184 <I2cDriverConfigureSensorBus+0xa4>)
   13104:	621a      	str	r2, [r3, #32]
	/* Change buffer timeout to something longer */
	config_i2c_master.buffer_timeout = 1000;
   13106:	1d3b      	adds	r3, r7, #4
   13108:	22fa      	movs	r2, #250	; 0xfa
   1310a:	0092      	lsls	r2, r2, #2
   1310c:	82da      	strh	r2, [r3, #22]
	/* Initialize and enable device with config. Try three times to initialize */
	
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
   1310e:	233b      	movs	r3, #59	; 0x3b
   13110:	18fb      	adds	r3, r7, r3
   13112:	2203      	movs	r2, #3
   13114:	701a      	strb	r2, [r3, #0]
   13116:	e01e      	b.n	13156 <I2cDriverConfigureSensorBus+0x76>
		errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   13118:	233a      	movs	r3, #58	; 0x3a
   1311a:	18fc      	adds	r4, r7, r3
   1311c:	1d3a      	adds	r2, r7, #4
   1311e:	491a      	ldr	r1, [pc, #104]	; (13188 <I2cDriverConfigureSensorBus+0xa8>)
   13120:	4b1a      	ldr	r3, [pc, #104]	; (1318c <I2cDriverConfigureSensorBus+0xac>)
   13122:	0018      	movs	r0, r3
   13124:	4b1a      	ldr	r3, [pc, #104]	; (13190 <I2cDriverConfigureSensorBus+0xb0>)
   13126:	4798      	blx	r3
   13128:	0003      	movs	r3, r0
   1312a:	7023      	strb	r3, [r4, #0]
		if(STATUS_OK == errCodeAsf){
   1312c:	233a      	movs	r3, #58	; 0x3a
   1312e:	18fb      	adds	r3, r7, r3
   13130:	781b      	ldrb	r3, [r3, #0]
   13132:	2b00      	cmp	r3, #0
   13134:	d104      	bne.n	13140 <I2cDriverConfigureSensorBus+0x60>
			error = errCodeAsf;
   13136:	233a      	movs	r3, #58	; 0x3a
   13138:	18fb      	adds	r3, r7, r3
   1313a:	781b      	ldrb	r3, [r3, #0]
   1313c:	63fb      	str	r3, [r7, #60]	; 0x3c
			break;
   1313e:	e00f      	b.n	13160 <I2cDriverConfigureSensorBus+0x80>
			}else{
			i2c_master_reset(&i2cSensorBusInstance);
   13140:	4b12      	ldr	r3, [pc, #72]	; (1318c <I2cDriverConfigureSensorBus+0xac>)
   13142:	0018      	movs	r0, r3
   13144:	4b13      	ldr	r3, [pc, #76]	; (13194 <I2cDriverConfigureSensorBus+0xb4>)
   13146:	4798      	blx	r3
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
   13148:	233b      	movs	r3, #59	; 0x3b
   1314a:	18fb      	adds	r3, r7, r3
   1314c:	781a      	ldrb	r2, [r3, #0]
   1314e:	233b      	movs	r3, #59	; 0x3b
   13150:	18fb      	adds	r3, r7, r3
   13152:	3a01      	subs	r2, #1
   13154:	701a      	strb	r2, [r3, #0]
   13156:	233b      	movs	r3, #59	; 0x3b
   13158:	18fb      	adds	r3, r7, r3
   1315a:	781b      	ldrb	r3, [r3, #0]
   1315c:	2b00      	cmp	r3, #0
   1315e:	d1db      	bne.n	13118 <I2cDriverConfigureSensorBus+0x38>
		}
	}
	
	if(STATUS_OK != error) goto exit;
   13160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13162:	2b00      	cmp	r3, #0
   13164:	d104      	bne.n	13170 <I2cDriverConfigureSensorBus+0x90>
	
	i2c_master_enable(&i2cSensorBusInstance);
   13166:	4b09      	ldr	r3, [pc, #36]	; (1318c <I2cDriverConfigureSensorBus+0xac>)
   13168:	0018      	movs	r0, r3
   1316a:	4b0b      	ldr	r3, [pc, #44]	; (13198 <I2cDriverConfigureSensorBus+0xb8>)
   1316c:	4798      	blx	r3
   1316e:	e000      	b.n	13172 <I2cDriverConfigureSensorBus+0x92>
	if(STATUS_OK != error) goto exit;
   13170:	46c0      	nop			; (mov r8, r8)
	
	exit:
	return error;
   13172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   13174:	0018      	movs	r0, r3
   13176:	46bd      	mov	sp, r7
   13178:	b011      	add	sp, #68	; 0x44
   1317a:	bd90      	pop	{r4, r7, pc}
   1317c:	00012fb5 	.word	0x00012fb5
   13180:	00080002 	.word	0x00080002
   13184:	00090002 	.word	0x00090002
   13188:	42000800 	.word	0x42000800
   1318c:	20002d7c 	.word	0x20002d7c
   13190:	00014a41 	.word	0x00014a41
   13194:	00014b75 	.word	0x00014b75
   13198:	00013039 	.word	0x00013039

0001319c <I2cSensorsTxComplete>:
				and is currently waiting for a notification that it has finished.
 * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsTxComplete(struct i2c_master_module *const module){
   1319c:	b580      	push	{r7, lr}
   1319e:	b084      	sub	sp, #16
   131a0:	af00      	add	r7, sp, #0
   131a2:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
   131a4:	4b0e      	ldr	r3, [pc, #56]	; (131e0 <I2cSensorsTxComplete+0x44>)
   131a6:	2200      	movs	r2, #0
   131a8:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.rxDoneFlag = true;			
   131aa:	4b0d      	ldr	r3, [pc, #52]	; (131e0 <I2cSensorsTxComplete+0x44>)
   131ac:	2201      	movs	r2, #1
   131ae:	609a      	str	r2, [r3, #8]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   131b0:	2300      	movs	r3, #0
   131b2:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   131b4:	4b0b      	ldr	r3, [pc, #44]	; (131e4 <I2cSensorsTxComplete+0x48>)
   131b6:	681b      	ldr	r3, [r3, #0]
   131b8:	220c      	movs	r2, #12
   131ba:	18ba      	adds	r2, r7, r2
   131bc:	0011      	movs	r1, r2
   131be:	0018      	movs	r0, r3
   131c0:	4b09      	ldr	r3, [pc, #36]	; (131e8 <I2cSensorsTxComplete+0x4c>)
   131c2:	4798      	blx	r3
	sensorTransmitError = false;
   131c4:	4b09      	ldr	r3, [pc, #36]	; (131ec <I2cSensorsTxComplete+0x50>)
   131c6:	2200      	movs	r2, #0
   131c8:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   131ca:	68fb      	ldr	r3, [r7, #12]
   131cc:	2b00      	cmp	r3, #0
   131ce:	d003      	beq.n	131d8 <I2cSensorsTxComplete+0x3c>
   131d0:	4b07      	ldr	r3, [pc, #28]	; (131f0 <I2cSensorsTxComplete+0x54>)
   131d2:	2280      	movs	r2, #128	; 0x80
   131d4:	0552      	lsls	r2, r2, #21
   131d6:	601a      	str	r2, [r3, #0]
}
   131d8:	46c0      	nop			; (mov r8, r8)
   131da:	46bd      	mov	sp, r7
   131dc:	b004      	add	sp, #16
   131de:	bd80      	pop	{r7, pc}
   131e0:	20000320 	.word	0x20000320
   131e4:	20002da4 	.word	0x20002da4
   131e8:	00015a89 	.word	0x00015a89
   131ec:	2000031c 	.word	0x2000031c
   131f0:	e000ed04 	.word	0xe000ed04

000131f4 <I2cSensorsRxComplete>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsRxComplete(struct i2c_master_module *const module){
   131f4:	b580      	push	{r7, lr}
   131f6:	b084      	sub	sp, #16
   131f8:	af00      	add	r7, sp, #0
   131fa:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
   131fc:	4b0e      	ldr	r3, [pc, #56]	; (13238 <I2cSensorsRxComplete+0x44>)
   131fe:	2200      	movs	r2, #0
   13200:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.rxDoneFlag = true;
   13202:	4b0d      	ldr	r3, [pc, #52]	; (13238 <I2cSensorsRxComplete+0x44>)
   13204:	2201      	movs	r2, #1
   13206:	609a      	str	r2, [r3, #8]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13208:	2300      	movs	r3, #0
   1320a:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   1320c:	4b0b      	ldr	r3, [pc, #44]	; (1323c <I2cSensorsRxComplete+0x48>)
   1320e:	681b      	ldr	r3, [r3, #0]
   13210:	220c      	movs	r2, #12
   13212:	18ba      	adds	r2, r7, r2
   13214:	0011      	movs	r1, r2
   13216:	0018      	movs	r0, r3
   13218:	4b09      	ldr	r3, [pc, #36]	; (13240 <I2cSensorsRxComplete+0x4c>)
   1321a:	4798      	blx	r3
	sensorTransmitError = false;
   1321c:	4b09      	ldr	r3, [pc, #36]	; (13244 <I2cSensorsRxComplete+0x50>)
   1321e:	2200      	movs	r2, #0
   13220:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   13222:	68fb      	ldr	r3, [r7, #12]
   13224:	2b00      	cmp	r3, #0
   13226:	d003      	beq.n	13230 <I2cSensorsRxComplete+0x3c>
   13228:	4b07      	ldr	r3, [pc, #28]	; (13248 <I2cSensorsRxComplete+0x54>)
   1322a:	2280      	movs	r2, #128	; 0x80
   1322c:	0552      	lsls	r2, r2, #21
   1322e:	601a      	str	r2, [r3, #0]
}
   13230:	46c0      	nop			; (mov r8, r8)
   13232:	46bd      	mov	sp, r7
   13234:	b004      	add	sp, #16
   13236:	bd80      	pop	{r7, pc}
   13238:	20000320 	.word	0x20000320
   1323c:	20002da4 	.word	0x20002da4
   13240:	00015a89 	.word	0x00015a89
   13244:	2000031c 	.word	0x2000031c
   13248:	e000ed04 	.word	0xe000ed04

0001324c <I2cSensorsError>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsError(struct i2c_master_module *const module){
   1324c:	b580      	push	{r7, lr}
   1324e:	b084      	sub	sp, #16
   13250:	af00      	add	r7, sp, #0
   13252:	6078      	str	r0, [r7, #4]
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
   13254:	4b0e      	ldr	r3, [pc, #56]	; (13290 <I2cSensorsError+0x44>)
   13256:	2200      	movs	r2, #0
   13258:	701a      	strb	r2, [r3, #0]
	I2cSensorBusState.txDoneFlag = true;
   1325a:	4b0d      	ldr	r3, [pc, #52]	; (13290 <I2cSensorsError+0x44>)
   1325c:	2201      	movs	r2, #1
   1325e:	605a      	str	r2, [r3, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13260:	2300      	movs	r3, #0
   13262:	60fb      	str	r3, [r7, #12]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
   13264:	4b0b      	ldr	r3, [pc, #44]	; (13294 <I2cSensorsError+0x48>)
   13266:	681b      	ldr	r3, [r3, #0]
   13268:	220c      	movs	r2, #12
   1326a:	18ba      	adds	r2, r7, r2
   1326c:	0011      	movs	r1, r2
   1326e:	0018      	movs	r0, r3
   13270:	4b09      	ldr	r3, [pc, #36]	; (13298 <I2cSensorsError+0x4c>)
   13272:	4798      	blx	r3
	sensorTransmitError = false;
   13274:	4b09      	ldr	r3, [pc, #36]	; (1329c <I2cSensorsError+0x50>)
   13276:	2200      	movs	r2, #0
   13278:	701a      	strb	r2, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
   1327a:	68fb      	ldr	r3, [r7, #12]
   1327c:	2b00      	cmp	r3, #0
   1327e:	d003      	beq.n	13288 <I2cSensorsError+0x3c>
   13280:	4b07      	ldr	r3, [pc, #28]	; (132a0 <I2cSensorsError+0x54>)
   13282:	2280      	movs	r2, #128	; 0x80
   13284:	0552      	lsls	r2, r2, #21
   13286:	601a      	str	r2, [r3, #0]
}
   13288:	46c0      	nop			; (mov r8, r8)
   1328a:	46bd      	mov	sp, r7
   1328c:	b004      	add	sp, #16
   1328e:	bd80      	pop	{r7, pc}
   13290:	20000320 	.word	0x20000320
   13294:	20002da4 	.word	0x20002da4
   13298:	00015a89 	.word	0x00015a89
   1329c:	2000031c 	.word	0x2000031c
   132a0:	e000ed04 	.word	0xe000ed04

000132a4 <I2cDriverRegisterSensorBusCallbacks>:



void I2cDriverRegisterSensorBusCallbacks(void)
{
   132a4:	b580      	push	{r7, lr}
   132a6:	af00      	add	r7, sp, #0
	/* Register callback function. */
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   132a8:	4911      	ldr	r1, [pc, #68]	; (132f0 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   132aa:	4b12      	ldr	r3, [pc, #72]	; (132f4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   132ac:	2200      	movs	r2, #0
   132ae:	0018      	movs	r0, r3
   132b0:	4b11      	ldr	r3, [pc, #68]	; (132f8 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   132b2:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   132b4:	4b0f      	ldr	r3, [pc, #60]	; (132f4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   132b6:	2100      	movs	r1, #0
   132b8:	0018      	movs	r0, r3
   132ba:	4b10      	ldr	r3, [pc, #64]	; (132fc <I2cDriverRegisterSensorBusCallbacks+0x58>)
   132bc:	4798      	blx	r3
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   132be:	4910      	ldr	r1, [pc, #64]	; (13300 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   132c0:	4b0c      	ldr	r3, [pc, #48]	; (132f4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   132c2:	2201      	movs	r2, #1
   132c4:	0018      	movs	r0, r3
   132c6:	4b0c      	ldr	r3, [pc, #48]	; (132f8 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   132c8:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_READ_COMPLETE);
   132ca:	4b0a      	ldr	r3, [pc, #40]	; (132f4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   132cc:	2101      	movs	r1, #1
   132ce:	0018      	movs	r0, r3
   132d0:	4b0a      	ldr	r3, [pc, #40]	; (132fc <I2cDriverRegisterSensorBusCallbacks+0x58>)
   132d2:	4798      	blx	r3
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError,I2C_MASTER_CALLBACK_ERROR);
   132d4:	490b      	ldr	r1, [pc, #44]	; (13304 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   132d6:	4b07      	ldr	r3, [pc, #28]	; (132f4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   132d8:	2202      	movs	r2, #2
   132da:	0018      	movs	r0, r3
   132dc:	4b06      	ldr	r3, [pc, #24]	; (132f8 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   132de:	4798      	blx	r3
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_ERROR);
   132e0:	4b04      	ldr	r3, [pc, #16]	; (132f4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   132e2:	2102      	movs	r1, #2
   132e4:	0018      	movs	r0, r3
   132e6:	4b05      	ldr	r3, [pc, #20]	; (132fc <I2cDriverRegisterSensorBusCallbacks+0x58>)
   132e8:	4798      	blx	r3
}
   132ea:	46c0      	nop			; (mov r8, r8)
   132ec:	46bd      	mov	sp, r7
   132ee:	bd80      	pop	{r7, pc}
   132f0:	0001319d 	.word	0x0001319d
   132f4:	20002d7c 	.word	0x20002d7c
   132f8:	00012385 	.word	0x00012385
   132fc:	000130ad 	.word	0x000130ad
   13300:	000131f5 	.word	0x000131f5
   13304:	0001324d 	.word	0x0001324d

00013308 <I2cInitializeDriver>:
 * @fn			int32_t I2cInitializeDriver(void)
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note        
 *****************************************************************************/
 int32_t I2cInitializeDriver(void){
   13308:	b580      	push	{r7, lr}
   1330a:	b082      	sub	sp, #8
   1330c:	af00      	add	r7, sp, #0
	
	int32_t error = STATUS_OK;
   1330e:	2300      	movs	r3, #0
   13310:	607b      	str	r3, [r7, #4]


	error = I2cDriverConfigureSensorBus();
   13312:	4b14      	ldr	r3, [pc, #80]	; (13364 <I2cInitializeDriver+0x5c>)
   13314:	4798      	blx	r3
   13316:	0003      	movs	r3, r0
   13318:	607b      	str	r3, [r7, #4]
	if(STATUS_OK != error) goto exit;
   1331a:	687b      	ldr	r3, [r7, #4]
   1331c:	2b00      	cmp	r3, #0
   1331e:	d11a      	bne.n	13356 <I2cInitializeDriver+0x4e>
	
	I2cDriverRegisterSensorBusCallbacks();
   13320:	4b11      	ldr	r3, [pc, #68]	; (13368 <I2cInitializeDriver+0x60>)
   13322:	4798      	blx	r3
	
		
	sensorI2cMutexHandle = xSemaphoreCreateMutex();
   13324:	2001      	movs	r0, #1
   13326:	4b11      	ldr	r3, [pc, #68]	; (1336c <I2cInitializeDriver+0x64>)
   13328:	4798      	blx	r3
   1332a:	0002      	movs	r2, r0
   1332c:	4b10      	ldr	r3, [pc, #64]	; (13370 <I2cInitializeDriver+0x68>)
   1332e:	601a      	str	r2, [r3, #0]
	
	sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   13330:	2203      	movs	r2, #3
   13332:	2100      	movs	r1, #0
   13334:	2001      	movs	r0, #1
   13336:	4b0f      	ldr	r3, [pc, #60]	; (13374 <I2cInitializeDriver+0x6c>)
   13338:	4798      	blx	r3
   1333a:	0002      	movs	r2, r0
   1333c:	4b0e      	ldr	r3, [pc, #56]	; (13378 <I2cInitializeDriver+0x70>)
   1333e:	601a      	str	r2, [r3, #0]
	//xSemaphoreGive(sensorI2cSemaphoreHandle);

	
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
   13340:	4b0b      	ldr	r3, [pc, #44]	; (13370 <I2cInitializeDriver+0x68>)
   13342:	681b      	ldr	r3, [r3, #0]
   13344:	2b00      	cmp	r3, #0
   13346:	d003      	beq.n	13350 <I2cInitializeDriver+0x48>
   13348:	4b0b      	ldr	r3, [pc, #44]	; (13378 <I2cInitializeDriver+0x70>)
   1334a:	681b      	ldr	r3, [r3, #0]
   1334c:	2b00      	cmp	r3, #0
   1334e:	d103      	bne.n	13358 <I2cInitializeDriver+0x50>
		error = STATUS_SUSPEND;	//Could not initialize mutex!
   13350:	2306      	movs	r3, #6
   13352:	607b      	str	r3, [r7, #4]
		goto exit;
   13354:	e000      	b.n	13358 <I2cInitializeDriver+0x50>
	if(STATUS_OK != error) goto exit;
   13356:	46c0      	nop			; (mov r8, r8)
	}

	exit:
	return error;		
   13358:	687b      	ldr	r3, [r7, #4]
}
   1335a:	0018      	movs	r0, r3
   1335c:	46bd      	mov	sp, r7
   1335e:	b002      	add	sp, #8
   13360:	bd80      	pop	{r7, pc}
   13362:	46c0      	nop			; (mov r8, r8)
   13364:	000130e1 	.word	0x000130e1
   13368:	000132a5 	.word	0x000132a5
   1336c:	00015749 	.word	0x00015749
   13370:	20002d78 	.word	0x20002d78
   13374:	00015655 	.word	0x00015655
   13378:	20002da4 	.word	0x20002da4

0001337c <I2cWriteData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData(I2C_Data *data){
   1337c:	b590      	push	{r4, r7, lr}
   1337e:	b089      	sub	sp, #36	; 0x24
   13380:	af00      	add	r7, sp, #0
   13382:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
   13384:	2300      	movs	r3, #0
   13386:	61fb      	str	r3, [r7, #28]
	enum status_code hwError;
	struct i2c_master_module *I2CBusHw = NULL;
   13388:	2300      	movs	r3, #0
   1338a:	61bb      	str	r3, [r7, #24]
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
   1338c:	2300      	movs	r3, #0
   1338e:	617b      	str	r3, [r7, #20]
	struct i2c_master_packet *readPacket = NULL;
   13390:	2300      	movs	r3, #0
   13392:	613b      	str	r3, [r7, #16]
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   13394:	687b      	ldr	r3, [r7, #4]
   13396:	2b00      	cmp	r3, #0
   13398:	d003      	beq.n	133a2 <I2cWriteData+0x26>
   1339a:	687b      	ldr	r3, [r7, #4]
   1339c:	685b      	ldr	r3, [r3, #4]
   1339e:	2b00      	cmp	r3, #0
   133a0:	d103      	bne.n	133aa <I2cWriteData+0x2e>
		error = ERR_INVALID_ARG;
   133a2:	2308      	movs	r3, #8
   133a4:	425b      	negs	r3, r3
   133a6:	61fb      	str	r3, [r7, #28]
		goto exit;
   133a8:	e01f      	b.n	133ea <I2cWriteData+0x6e>
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
   133aa:	687b      	ldr	r3, [r7, #4]
   133ac:	781b      	ldrb	r3, [r3, #0]
   133ae:	b29a      	uxth	r2, r3
   133b0:	4b10      	ldr	r3, [pc, #64]	; (133f4 <I2cWriteData+0x78>)
   133b2:	801a      	strh	r2, [r3, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
   133b4:	687b      	ldr	r3, [r7, #4]
   133b6:	685a      	ldr	r2, [r3, #4]
   133b8:	4b0e      	ldr	r3, [pc, #56]	; (133f4 <I2cWriteData+0x78>)
   133ba:	605a      	str	r2, [r3, #4]
	sensorPacketWrite.data_length = data->lenOut;
   133bc:	687b      	ldr	r3, [r7, #4]
   133be:	89da      	ldrh	r2, [r3, #14]
   133c0:	4b0c      	ldr	r3, [pc, #48]	; (133f4 <I2cWriteData+0x78>)
   133c2:	805a      	strh	r2, [r3, #2]
	
	//Write

	hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   133c4:	230f      	movs	r3, #15
   133c6:	18fc      	adds	r4, r7, r3
   133c8:	4a0a      	ldr	r2, [pc, #40]	; (133f4 <I2cWriteData+0x78>)
   133ca:	4b0b      	ldr	r3, [pc, #44]	; (133f8 <I2cWriteData+0x7c>)
   133cc:	0011      	movs	r1, r2
   133ce:	0018      	movs	r0, r3
   133d0:	4b0a      	ldr	r3, [pc, #40]	; (133fc <I2cWriteData+0x80>)
   133d2:	4798      	blx	r3
   133d4:	0003      	movs	r3, r0
   133d6:	7023      	strb	r3, [r4, #0]
	
	if(STATUS_OK != hwError)
   133d8:	230f      	movs	r3, #15
   133da:	18fb      	adds	r3, r7, r3
   133dc:	781b      	ldrb	r3, [r3, #0]
   133de:	2b00      	cmp	r3, #0
   133e0:	d003      	beq.n	133ea <I2cWriteData+0x6e>
	{
		error = ERROR_IO;
   133e2:	2306      	movs	r3, #6
   133e4:	425b      	negs	r3, r3
   133e6:	61fb      	str	r3, [r7, #28]
		goto exit;
   133e8:	46c0      	nop			; (mov r8, r8)
	}
	
	exit:
	return error;
   133ea:	69fb      	ldr	r3, [r7, #28]
}
   133ec:	0018      	movs	r0, r3
   133ee:	46bd      	mov	sp, r7
   133f0:	b009      	add	sp, #36	; 0x24
   133f2:	bd90      	pop	{r4, r7, pc}
   133f4:	20002da8 	.word	0x20002da8
   133f8:	20002d7c 	.word	0x20002d7c
   133fc:	00012609 	.word	0x00012609

00013400 <I2cWriteData_No_Stop>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData_No_Stop(I2C_Data *data){
   13400:	b590      	push	{r4, r7, lr}
   13402:	b089      	sub	sp, #36	; 0x24
   13404:	af00      	add	r7, sp, #0
   13406:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
   13408:	2300      	movs	r3, #0
   1340a:	61fb      	str	r3, [r7, #28]
	enum status_code hwError;
	struct i2c_master_module *I2CBusHw = NULL;
   1340c:	2300      	movs	r3, #0
   1340e:	61bb      	str	r3, [r7, #24]
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
   13410:	2300      	movs	r3, #0
   13412:	617b      	str	r3, [r7, #20]
	struct i2c_master_packet *readPacket = NULL;
   13414:	2300      	movs	r3, #0
   13416:	613b      	str	r3, [r7, #16]
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   13418:	687b      	ldr	r3, [r7, #4]
   1341a:	2b00      	cmp	r3, #0
   1341c:	d003      	beq.n	13426 <I2cWriteData_No_Stop+0x26>
   1341e:	687b      	ldr	r3, [r7, #4]
   13420:	685b      	ldr	r3, [r3, #4]
   13422:	2b00      	cmp	r3, #0
   13424:	d103      	bne.n	1342e <I2cWriteData_No_Stop+0x2e>
		error = ERR_INVALID_ARG;
   13426:	2308      	movs	r3, #8
   13428:	425b      	negs	r3, r3
   1342a:	61fb      	str	r3, [r7, #28]
		goto exit;
   1342c:	e01f      	b.n	1346e <I2cWriteData_No_Stop+0x6e>
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
   1342e:	687b      	ldr	r3, [r7, #4]
   13430:	781b      	ldrb	r3, [r3, #0]
   13432:	b29a      	uxth	r2, r3
   13434:	4b10      	ldr	r3, [pc, #64]	; (13478 <I2cWriteData_No_Stop+0x78>)
   13436:	801a      	strh	r2, [r3, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
   13438:	687b      	ldr	r3, [r7, #4]
   1343a:	685a      	ldr	r2, [r3, #4]
   1343c:	4b0e      	ldr	r3, [pc, #56]	; (13478 <I2cWriteData_No_Stop+0x78>)
   1343e:	605a      	str	r2, [r3, #4]
	sensorPacketWrite.data_length = data->lenOut;
   13440:	687b      	ldr	r3, [r7, #4]
   13442:	89da      	ldrh	r2, [r3, #14]
   13444:	4b0c      	ldr	r3, [pc, #48]	; (13478 <I2cWriteData_No_Stop+0x78>)
   13446:	805a      	strh	r2, [r3, #2]
	
	//Write

	hwError = i2c_master_write_packet_job_no_stop(&i2cSensorBusInstance, &sensorPacketWrite);
   13448:	230f      	movs	r3, #15
   1344a:	18fc      	adds	r4, r7, r3
   1344c:	4a0a      	ldr	r2, [pc, #40]	; (13478 <I2cWriteData_No_Stop+0x78>)
   1344e:	4b0b      	ldr	r3, [pc, #44]	; (1347c <I2cWriteData_No_Stop+0x7c>)
   13450:	0011      	movs	r1, r2
   13452:	0018      	movs	r0, r3
   13454:	4b0a      	ldr	r3, [pc, #40]	; (13480 <I2cWriteData_No_Stop+0x80>)
   13456:	4798      	blx	r3
   13458:	0003      	movs	r3, r0
   1345a:	7023      	strb	r3, [r4, #0]
	
	if(STATUS_OK != hwError)
   1345c:	230f      	movs	r3, #15
   1345e:	18fb      	adds	r3, r7, r3
   13460:	781b      	ldrb	r3, [r3, #0]
   13462:	2b00      	cmp	r3, #0
   13464:	d003      	beq.n	1346e <I2cWriteData_No_Stop+0x6e>
	{
		error = ERROR_IO;
   13466:	2306      	movs	r3, #6
   13468:	425b      	negs	r3, r3
   1346a:	61fb      	str	r3, [r7, #28]
		goto exit;
   1346c:	46c0      	nop			; (mov r8, r8)
	}
	
	exit:
	return error;
   1346e:	69fb      	ldr	r3, [r7, #28]
}
   13470:	0018      	movs	r0, r3
   13472:	46bd      	mov	sp, r7
   13474:	b009      	add	sp, #36	; 0x24
   13476:	bd90      	pop	{r4, r7, pc}
   13478:	20002da8 	.word	0x20002da8
   1347c:	20002d7c 	.word	0x20002d7c
   13480:	00012649 	.word	0x00012649

00013484 <I2cReadData>:
 * @details     
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
int32_t I2cReadData(I2C_Data *data){
   13484:	b590      	push	{r4, r7, lr}
   13486:	b089      	sub	sp, #36	; 0x24
   13488:	af00      	add	r7, sp, #0
   1348a:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
   1348c:	2300      	movs	r3, #0
   1348e:	61fb      	str	r3, [r7, #28]
	enum status_code hwError;
	struct i2c_master_module *I2CBusHw = NULL;
   13490:	2300      	movs	r3, #0
   13492:	61bb      	str	r3, [r7, #24]
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
   13494:	2300      	movs	r3, #0
   13496:	617b      	str	r3, [r7, #20]
	struct i2c_master_packet *readPacket = NULL;
   13498:	2300      	movs	r3, #0
   1349a:	613b      	str	r3, [r7, #16]
	
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   1349c:	687b      	ldr	r3, [r7, #4]
   1349e:	2b00      	cmp	r3, #0
   134a0:	d003      	beq.n	134aa <I2cReadData+0x26>
   134a2:	687b      	ldr	r3, [r7, #4]
   134a4:	685b      	ldr	r3, [r3, #4]
   134a6:	2b00      	cmp	r3, #0
   134a8:	d103      	bne.n	134b2 <I2cReadData+0x2e>
		error = ERR_INVALID_ARG;
   134aa:	2308      	movs	r3, #8
   134ac:	425b      	negs	r3, r3
   134ae:	61fb      	str	r3, [r7, #28]
		goto exit;
   134b0:	e01f      	b.n	134f2 <I2cReadData+0x6e>
	}

	//Prepare to read
	sensorPacketWrite.address = data->address;
   134b2:	687b      	ldr	r3, [r7, #4]
   134b4:	781b      	ldrb	r3, [r3, #0]
   134b6:	b29a      	uxth	r2, r3
   134b8:	4b10      	ldr	r3, [pc, #64]	; (134fc <I2cReadData+0x78>)
   134ba:	801a      	strh	r2, [r3, #0]
	sensorPacketWrite.data = data->msgIn;
   134bc:	687b      	ldr	r3, [r7, #4]
   134be:	689a      	ldr	r2, [r3, #8]
   134c0:	4b0e      	ldr	r3, [pc, #56]	; (134fc <I2cReadData+0x78>)
   134c2:	605a      	str	r2, [r3, #4]
	sensorPacketWrite.data_length = data->lenIn;
   134c4:	687b      	ldr	r3, [r7, #4]
   134c6:	899a      	ldrh	r2, [r3, #12]
   134c8:	4b0c      	ldr	r3, [pc, #48]	; (134fc <I2cReadData+0x78>)
   134ca:	805a      	strh	r2, [r3, #2]
	
	//Read

	hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   134cc:	230f      	movs	r3, #15
   134ce:	18fc      	adds	r4, r7, r3
   134d0:	4a0a      	ldr	r2, [pc, #40]	; (134fc <I2cReadData+0x78>)
   134d2:	4b0b      	ldr	r3, [pc, #44]	; (13500 <I2cReadData+0x7c>)
   134d4:	0011      	movs	r1, r2
   134d6:	0018      	movs	r0, r3
   134d8:	4b0a      	ldr	r3, [pc, #40]	; (13504 <I2cReadData+0x80>)
   134da:	4798      	blx	r3
   134dc:	0003      	movs	r3, r0
   134de:	7023      	strb	r3, [r4, #0]
	
	if(STATUS_OK != hwError)
   134e0:	230f      	movs	r3, #15
   134e2:	18fb      	adds	r3, r7, r3
   134e4:	781b      	ldrb	r3, [r3, #0]
   134e6:	2b00      	cmp	r3, #0
   134e8:	d003      	beq.n	134f2 <I2cReadData+0x6e>
	{
		error = ERROR_IO;
   134ea:	2306      	movs	r3, #6
   134ec:	425b      	negs	r3, r3
   134ee:	61fb      	str	r3, [r7, #28]
		goto exit;
   134f0:	46c0      	nop			; (mov r8, r8)
	}
	
	exit:
	return error;
   134f2:	69fb      	ldr	r3, [r7, #28]
}
   134f4:	0018      	movs	r0, r3
   134f6:	46bd      	mov	sp, r7
   134f8:	b009      	add	sp, #36	; 0x24
   134fa:	bd90      	pop	{r4, r7, pc}
   134fc:	20002da8 	.word	0x20002da8
   13500:	20002d7c 	.word	0x20002d7c
   13504:	00012525 	.word	0x00012525

00013508 <I2cFreeMutex>:
 * @details     
 * @param[out]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (ERROR_NONE) if the bus is ready, (ERROR_NOT_INITIALIZED) if it is busy.
 * @note        STUDENTS TO FILL OUT!
 *****************************************************************************/
int32_t I2cFreeMutex(void){
   13508:	b590      	push	{r4, r7, lr}
   1350a:	b083      	sub	sp, #12
   1350c:	af00      	add	r7, sp, #0
	
	int32_t error = ERROR_NONE;
   1350e:	2300      	movs	r3, #0
   13510:	607b      	str	r3, [r7, #4]
	if(pdTRUE != xSemaphoreGive(sensorI2cMutexHandle))
   13512:	4b09      	ldr	r3, [pc, #36]	; (13538 <I2cFreeMutex+0x30>)
   13514:	6818      	ldr	r0, [r3, #0]
   13516:	2300      	movs	r3, #0
   13518:	2200      	movs	r2, #0
   1351a:	2100      	movs	r1, #0
   1351c:	4c07      	ldr	r4, [pc, #28]	; (1353c <I2cFreeMutex+0x34>)
   1351e:	47a0      	blx	r4
   13520:	0003      	movs	r3, r0
   13522:	2b01      	cmp	r3, #1
   13524:	d002      	beq.n	1352c <I2cFreeMutex+0x24>
	{
		error = ERROR_NOT_INITIALIZED;
   13526:	2314      	movs	r3, #20
   13528:	425b      	negs	r3, r3
   1352a:	607b      	str	r3, [r7, #4]
	}
	return error;
   1352c:	687b      	ldr	r3, [r7, #4]
}
   1352e:	0018      	movs	r0, r3
   13530:	46bd      	mov	sp, r7
   13532:	b003      	add	sp, #12
   13534:	bd90      	pop	{r4, r7, pc}
   13536:	46c0      	nop			; (mov r8, r8)
   13538:	20002d78 	.word	0x20002d78
   1353c:	00015789 	.word	0x00015789

00013540 <I2cGetMutex>:
 * @details     
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (ERROR_NONE) if we got the mutex, (ERROR_NOT_READY) if we time out before we got it
 * @note        
 *****************************************************************************/
int32_t I2cGetMutex(TickType_t waitTime){
   13540:	b580      	push	{r7, lr}
   13542:	b084      	sub	sp, #16
   13544:	af00      	add	r7, sp, #0
   13546:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
   13548:	2300      	movs	r3, #0
   1354a:	60fb      	str	r3, [r7, #12]
	if(pdTRUE != xSemaphoreTake(sensorI2cMutexHandle, waitTime))
   1354c:	4b08      	ldr	r3, [pc, #32]	; (13570 <I2cGetMutex+0x30>)
   1354e:	681b      	ldr	r3, [r3, #0]
   13550:	687a      	ldr	r2, [r7, #4]
   13552:	0011      	movs	r1, r2
   13554:	0018      	movs	r0, r3
   13556:	4b07      	ldr	r3, [pc, #28]	; (13574 <I2cGetMutex+0x34>)
   13558:	4798      	blx	r3
   1355a:	0003      	movs	r3, r0
   1355c:	2b01      	cmp	r3, #1
   1355e:	d002      	beq.n	13566 <I2cGetMutex+0x26>
	{
		error = ERROR_NOT_READY;
   13560:	231d      	movs	r3, #29
   13562:	425b      	negs	r3, r3
   13564:	60fb      	str	r3, [r7, #12]
	}
	return error;
   13566:	68fb      	ldr	r3, [r7, #12]
}
   13568:	0018      	movs	r0, r3
   1356a:	46bd      	mov	sp, r7
   1356c:	b004      	add	sp, #16
   1356e:	bd80      	pop	{r7, pc}
   13570:	20002d78 	.word	0x20002d78
   13574:	00015d29 	.word	0x00015d29

00013578 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle){
   13578:	b580      	push	{r7, lr}
   1357a:	b084      	sub	sp, #16
   1357c:	af00      	add	r7, sp, #0
   1357e:	6078      	str	r0, [r7, #4]
	int32_t error = ERROR_NONE;
   13580:	2300      	movs	r3, #0
   13582:	60fb      	str	r3, [r7, #12]
	*handle = sensorI2cSemaphoreHandle;
   13584:	4b04      	ldr	r3, [pc, #16]	; (13598 <I2cGetSemaphoreHandle+0x20>)
   13586:	681a      	ldr	r2, [r3, #0]
   13588:	687b      	ldr	r3, [r7, #4]
   1358a:	601a      	str	r2, [r3, #0]
	return error;
   1358c:	68fb      	ldr	r3, [r7, #12]
}
   1358e:	0018      	movs	r0, r3
   13590:	46bd      	mov	sp, r7
   13592:	b004      	add	sp, #16
   13594:	bd80      	pop	{r7, pc}
   13596:	46c0      	nop			; (mov r8, r8)
   13598:	20002da4 	.word	0x20002da4

0001359c <I2cGetTaskErrorStatus>:
 * @brief       Sets the error state of the latest I2C bus transaction for a given I2C data, which holds which physical I2C bus we are using.
 * @details     This error flag is set to indicate when a I2C transaction has failed on a given I2C bus (encapsulated in the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
 static uint8_t I2cGetTaskErrorStatus(void){
   1359c:	b580      	push	{r7, lr}
   1359e:	af00      	add	r7, sp, #0
	 return sensorTransmitError;
   135a0:	4b02      	ldr	r3, [pc, #8]	; (135ac <I2cGetTaskErrorStatus+0x10>)
   135a2:	781b      	ldrb	r3, [r3, #0]
 }
   135a4:	0018      	movs	r0, r3
   135a6:	46bd      	mov	sp, r7
   135a8:	bd80      	pop	{r7, pc}
   135aa:	46c0      	nop			; (mov r8, r8)
   135ac:	2000031c 	.word	0x2000031c

000135b0 <I2cSetTaskErrorStatus>:
 * @details     This error flag is set to indicate when a I2C transaction has failed on a given I2C bus (encapsulated in the I2C data structure).
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
 static void I2cSetTaskErrorStatus(uint8_t value){
   135b0:	b580      	push	{r7, lr}
   135b2:	b082      	sub	sp, #8
   135b4:	af00      	add	r7, sp, #0
   135b6:	0002      	movs	r2, r0
   135b8:	1dfb      	adds	r3, r7, #7
   135ba:	701a      	strb	r2, [r3, #0]
	sensorTransmitError = value;
   135bc:	4b03      	ldr	r3, [pc, #12]	; (135cc <I2cSetTaskErrorStatus+0x1c>)
   135be:	1dfa      	adds	r2, r7, #7
   135c0:	7812      	ldrb	r2, [r2, #0]
   135c2:	701a      	strb	r2, [r3, #0]
 }
   135c4:	46c0      	nop			; (mov r8, r8)
   135c6:	46bd      	mov	sp, r7
   135c8:	b002      	add	sp, #8
   135ca:	bd80      	pop	{r7, pc}
   135cc:	2000031c 	.word	0x2000031c

000135d0 <I2cWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime){
   135d0:	b580      	push	{r7, lr}
   135d2:	b084      	sub	sp, #16
   135d4:	af00      	add	r7, sp, #0
   135d6:	6078      	str	r0, [r7, #4]
   135d8:	6039      	str	r1, [r7, #0]

int32_t error = ERROR_NONE;
   135da:	2300      	movs	r3, #0
   135dc:	60fb      	str	r3, [r7, #12]
SemaphoreHandle_t semHandle = NULL;
   135de:	2300      	movs	r3, #0
   135e0:	60bb      	str	r3, [r7, #8]


//---0. Get Mutex
error = 0; //Students to fill out
   135e2:	2300      	movs	r3, #0
   135e4:	60fb      	str	r3, [r7, #12]
error = I2cGetMutex(xMaxBlockTime);
   135e6:	683b      	ldr	r3, [r7, #0]
   135e8:	0018      	movs	r0, r3
   135ea:	4b26      	ldr	r3, [pc, #152]	; (13684 <I2cWriteDataWait+0xb4>)
   135ec:	4798      	blx	r3
   135ee:	0003      	movs	r3, r0
   135f0:	60fb      	str	r3, [r7, #12]
if(ERROR_NONE != error) goto exit;
   135f2:	68fb      	ldr	r3, [r7, #12]
   135f4:	2b00      	cmp	r3, #0
   135f6:	d136      	bne.n	13666 <I2cWriteDataWait+0x96>


//---1. Get Semaphore Handle
error = I2cGetSemaphoreHandle(&semHandle);
   135f8:	2308      	movs	r3, #8
   135fa:	18fb      	adds	r3, r7, r3
   135fc:	0018      	movs	r0, r3
   135fe:	4b22      	ldr	r3, [pc, #136]	; (13688 <I2cWriteDataWait+0xb8>)
   13600:	4798      	blx	r3
   13602:	0003      	movs	r3, r0
   13604:	60fb      	str	r3, [r7, #12]
if(ERROR_NONE != error) goto exit;
   13606:	68fb      	ldr	r3, [r7, #12]
   13608:	2b00      	cmp	r3, #0
   1360a:	d12e      	bne.n	1366a <I2cWriteDataWait+0x9a>

//---2. Initiate sending data

error = I2cWriteData(data);
   1360c:	687b      	ldr	r3, [r7, #4]
   1360e:	0018      	movs	r0, r3
   13610:	4b1e      	ldr	r3, [pc, #120]	; (1368c <I2cWriteDataWait+0xbc>)
   13612:	4798      	blx	r3
   13614:	0003      	movs	r3, r0
   13616:	60fb      	str	r3, [r7, #12]
if (ERROR_NONE != error){
   13618:	68fb      	ldr	r3, [r7, #12]
   1361a:	2b00      	cmp	r3, #0
   1361c:	d128      	bne.n	13670 <I2cWriteDataWait+0xa0>
	goto exitError0;
}

//---2. Wait for binary semaphore to tell us that we are done!
if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   1361e:	68bb      	ldr	r3, [r7, #8]
   13620:	683a      	ldr	r2, [r7, #0]
   13622:	0011      	movs	r1, r2
   13624:	0018      	movs	r0, r3
   13626:	4b1a      	ldr	r3, [pc, #104]	; (13690 <I2cWriteDataWait+0xc0>)
   13628:	4798      	blx	r3
   1362a:	0003      	movs	r3, r0
   1362c:	2b01      	cmp	r3, #1
   1362e:	d111      	bne.n	13654 <I2cWriteDataWait+0x84>
	/* The transmission ended as expected. We now delay until the I2C sensor is finished */
	if(I2cGetTaskErrorStatus()){
   13630:	4b18      	ldr	r3, [pc, #96]	; (13694 <I2cWriteDataWait+0xc4>)
   13632:	4798      	blx	r3
   13634:	1e03      	subs	r3, r0, #0
   13636:	d011      	beq.n	1365c <I2cWriteDataWait+0x8c>
		I2cSetTaskErrorStatus(false);
   13638:	2000      	movs	r0, #0
   1363a:	4b17      	ldr	r3, [pc, #92]	; (13698 <I2cWriteDataWait+0xc8>)
   1363c:	4798      	blx	r3
		if(error != ERROR_NONE){
   1363e:	68fb      	ldr	r3, [r7, #12]
   13640:	2b00      	cmp	r3, #0
   13642:	d003      	beq.n	1364c <I2cWriteDataWait+0x7c>
    		error = ERROR_I2C_HANG_RESET;
   13644:	2321      	movs	r3, #33	; 0x21
   13646:	425b      	negs	r3, r3
   13648:	60fb      	str	r3, [r7, #12]
    	}else{
    		error = ERROR_ABORTED;
		}
		goto exitError0;
   1364a:	e012      	b.n	13672 <I2cWriteDataWait+0xa2>
    		error = ERROR_ABORTED;
   1364c:	2303      	movs	r3, #3
   1364e:	425b      	negs	r3, r3
   13650:	60fb      	str	r3, [r7, #12]
		goto exitError0;
   13652:	e00e      	b.n	13672 <I2cWriteDataWait+0xa2>
	}
}else{
	/* The call to ulTaskNotifyTake() timed out. */
	error = ERR_TIMEOUT;
   13654:	2303      	movs	r3, #3
   13656:	425b      	negs	r3, r3
   13658:	60fb      	str	r3, [r7, #12]
	goto exitError0;
   1365a:	e00a      	b.n	13672 <I2cWriteDataWait+0xa2>
}

//---8. Release Mutex
error = I2cFreeMutex();
   1365c:	4b0f      	ldr	r3, [pc, #60]	; (1369c <I2cWriteDataWait+0xcc>)
   1365e:	4798      	blx	r3
   13660:	0003      	movs	r3, r0
   13662:	60fb      	str	r3, [r7, #12]
   13664:	e002      	b.n	1366c <I2cWriteDataWait+0x9c>
if(ERROR_NONE != error) goto exit;
   13666:	46c0      	nop			; (mov r8, r8)
   13668:	e000      	b.n	1366c <I2cWriteDataWait+0x9c>
if(ERROR_NONE != error) goto exit;
   1366a:	46c0      	nop			; (mov r8, r8)

exit:
return error;
   1366c:	68fb      	ldr	r3, [r7, #12]
   1366e:	e005      	b.n	1367c <I2cWriteDataWait+0xac>
	goto exitError0;
   13670:	46c0      	nop			; (mov r8, r8)

exitError0:
error = I2cFreeMutex();
   13672:	4b0a      	ldr	r3, [pc, #40]	; (1369c <I2cWriteDataWait+0xcc>)
   13674:	4798      	blx	r3
   13676:	0003      	movs	r3, r0
   13678:	60fb      	str	r3, [r7, #12]

return error;
   1367a:	68fb      	ldr	r3, [r7, #12]

}
   1367c:	0018      	movs	r0, r3
   1367e:	46bd      	mov	sp, r7
   13680:	b004      	add	sp, #16
   13682:	bd80      	pop	{r7, pc}
   13684:	00013541 	.word	0x00013541
   13688:	00013579 	.word	0x00013579
   1368c:	0001337d 	.word	0x0001337d
   13690:	00015d29 	.word	0x00015d29
   13694:	0001359d 	.word	0x0001359d
   13698:	000135b1 	.word	0x000135b1
   1369c:	00013509 	.word	0x00013509

000136a0 <I2cReadDataWait>:
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
				students to fill!
 *****************************************************************************/
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime){
   136a0:	b580      	push	{r7, lr}
   136a2:	b086      	sub	sp, #24
   136a4:	af00      	add	r7, sp, #0
   136a6:	60f8      	str	r0, [r7, #12]
   136a8:	60b9      	str	r1, [r7, #8]
   136aa:	607a      	str	r2, [r7, #4]
	int32_t error = ERROR_NONE;
   136ac:	2300      	movs	r3, #0
   136ae:	617b      	str	r3, [r7, #20]
	SemaphoreHandle_t semHandle = NULL;
   136b0:	2300      	movs	r3, #0
   136b2:	613b      	str	r3, [r7, #16]
	

	//---0. Get Mutex
	//STUDENTS FILL
	error = 0;
   136b4:	2300      	movs	r3, #0
   136b6:	617b      	str	r3, [r7, #20]
	error = I2cGetMutex(xMaxBlockTime);
   136b8:	687b      	ldr	r3, [r7, #4]
   136ba:	0018      	movs	r0, r3
   136bc:	4b38      	ldr	r3, [pc, #224]	; (137a0 <I2cReadDataWait+0x100>)
   136be:	4798      	blx	r3
   136c0:	0003      	movs	r3, r0
   136c2:	617b      	str	r3, [r7, #20]
	if(ERROR_NONE != error) goto exit;
   136c4:	697b      	ldr	r3, [r7, #20]
   136c6:	2b00      	cmp	r3, #0
   136c8:	d15b      	bne.n	13782 <I2cReadDataWait+0xe2>
	//---1. Get Semaphore Handle
	error = I2cGetSemaphoreHandle(&semHandle);
   136ca:	2310      	movs	r3, #16
   136cc:	18fb      	adds	r3, r7, r3
   136ce:	0018      	movs	r0, r3
   136d0:	4b34      	ldr	r3, [pc, #208]	; (137a4 <I2cReadDataWait+0x104>)
   136d2:	4798      	blx	r3
   136d4:	0003      	movs	r3, r0
   136d6:	617b      	str	r3, [r7, #20]
	if(ERROR_NONE != error) goto exit;
   136d8:	697b      	ldr	r3, [r7, #20]
   136da:	2b00      	cmp	r3, #0
   136dc:	d153      	bne.n	13786 <I2cReadDataWait+0xe6>
	//---2. Initiate sending data
	error = I2cWriteData_No_Stop(data);
   136de:	68fb      	ldr	r3, [r7, #12]
   136e0:	0018      	movs	r0, r3
   136e2:	4b31      	ldr	r3, [pc, #196]	; (137a8 <I2cReadDataWait+0x108>)
   136e4:	4798      	blx	r3
   136e6:	0003      	movs	r3, r0
   136e8:	617b      	str	r3, [r7, #20]
	if (ERROR_NONE != error){
   136ea:	697b      	ldr	r3, [r7, #20]
   136ec:	2b00      	cmp	r3, #0
   136ee:	d14d      	bne.n	1378c <I2cReadDataWait+0xec>
		goto exitError0;
	}
	//---3. Wait for binary semaphore to tell us that we are done!
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   136f0:	693b      	ldr	r3, [r7, #16]
   136f2:	687a      	ldr	r2, [r7, #4]
   136f4:	0011      	movs	r1, r2
   136f6:	0018      	movs	r0, r3
   136f8:	4b2c      	ldr	r3, [pc, #176]	; (137ac <I2cReadDataWait+0x10c>)
   136fa:	4798      	blx	r3
   136fc:	0003      	movs	r3, r0
   136fe:	2b01      	cmp	r3, #1
   13700:	d111      	bne.n	13726 <I2cReadDataWait+0x86>
		/* The transmission ended as expected. We now delay until the I2C sensor is finished */
		if(I2cGetTaskErrorStatus()){
   13702:	4b2b      	ldr	r3, [pc, #172]	; (137b0 <I2cReadDataWait+0x110>)
   13704:	4798      	blx	r3
   13706:	1e03      	subs	r3, r0, #0
   13708:	d011      	beq.n	1372e <I2cReadDataWait+0x8e>
			I2cSetTaskErrorStatus(false);
   1370a:	2000      	movs	r0, #0
   1370c:	4b29      	ldr	r3, [pc, #164]	; (137b4 <I2cReadDataWait+0x114>)
   1370e:	4798      	blx	r3
			if(error != ERROR_NONE){
   13710:	697b      	ldr	r3, [r7, #20]
   13712:	2b00      	cmp	r3, #0
   13714:	d003      	beq.n	1371e <I2cReadDataWait+0x7e>
				error = ERROR_I2C_HANG_RESET;
   13716:	2321      	movs	r3, #33	; 0x21
   13718:	425b      	negs	r3, r3
   1371a:	617b      	str	r3, [r7, #20]
				}else{
				error = ERROR_ABORTED;
			}
			goto exitError0;
   1371c:	e037      	b.n	1378e <I2cReadDataWait+0xee>
				error = ERROR_ABORTED;
   1371e:	2303      	movs	r3, #3
   13720:	425b      	negs	r3, r3
   13722:	617b      	str	r3, [r7, #20]
			goto exitError0;
   13724:	e033      	b.n	1378e <I2cReadDataWait+0xee>
		}
		}else{
		/* The call to ulTaskNotifyTake() timed out. */
		error = ERR_TIMEOUT;
   13726:	2303      	movs	r3, #3
   13728:	425b      	negs	r3, r3
   1372a:	617b      	str	r3, [r7, #20]
		goto exitError0;
   1372c:	e02f      	b.n	1378e <I2cReadDataWait+0xee>
	}
	//---6. Initiate Read data //TIP: SEE "I2cReadData", which is analogous to "I2cWriteData"
	error = I2cReadData(data);
   1372e:	68fb      	ldr	r3, [r7, #12]
   13730:	0018      	movs	r0, r3
   13732:	4b21      	ldr	r3, [pc, #132]	; (137b8 <I2cReadDataWait+0x118>)
   13734:	4798      	blx	r3
   13736:	0003      	movs	r3, r0
   13738:	617b      	str	r3, [r7, #20]
	//---7. Wait for notification
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   1373a:	693b      	ldr	r3, [r7, #16]
   1373c:	687a      	ldr	r2, [r7, #4]
   1373e:	0011      	movs	r1, r2
   13740:	0018      	movs	r0, r3
   13742:	4b1a      	ldr	r3, [pc, #104]	; (137ac <I2cReadDataWait+0x10c>)
   13744:	4798      	blx	r3
   13746:	0003      	movs	r3, r0
   13748:	2b01      	cmp	r3, #1
   1374a:	d111      	bne.n	13770 <I2cReadDataWait+0xd0>
		/* The transmission ended as expected. We now delay until the I2C sensor is finished */
		if(I2cGetTaskErrorStatus()){
   1374c:	4b18      	ldr	r3, [pc, #96]	; (137b0 <I2cReadDataWait+0x110>)
   1374e:	4798      	blx	r3
   13750:	1e03      	subs	r3, r0, #0
   13752:	d011      	beq.n	13778 <I2cReadDataWait+0xd8>
			I2cSetTaskErrorStatus(false);
   13754:	2000      	movs	r0, #0
   13756:	4b17      	ldr	r3, [pc, #92]	; (137b4 <I2cReadDataWait+0x114>)
   13758:	4798      	blx	r3
			if(error != ERROR_NONE){
   1375a:	697b      	ldr	r3, [r7, #20]
   1375c:	2b00      	cmp	r3, #0
   1375e:	d003      	beq.n	13768 <I2cReadDataWait+0xc8>
				error = ERROR_I2C_HANG_RESET;
   13760:	2321      	movs	r3, #33	; 0x21
   13762:	425b      	negs	r3, r3
   13764:	617b      	str	r3, [r7, #20]
				}else{
				error = ERROR_ABORTED;
			}
			goto exitError0;
   13766:	e012      	b.n	1378e <I2cReadDataWait+0xee>
				error = ERROR_ABORTED;
   13768:	2303      	movs	r3, #3
   1376a:	425b      	negs	r3, r3
   1376c:	617b      	str	r3, [r7, #20]
			goto exitError0;
   1376e:	e00e      	b.n	1378e <I2cReadDataWait+0xee>
		}
		}else{
		/* The call to ulTaskNotifyTake() timed out. */
		error = ERR_TIMEOUT;
   13770:	2303      	movs	r3, #3
   13772:	425b      	negs	r3, r3
   13774:	617b      	str	r3, [r7, #20]
		goto exitError0;
   13776:	e00a      	b.n	1378e <I2cReadDataWait+0xee>
	}	

	
	//---8. Release Mutex
	error = I2cFreeMutex();
   13778:	4b10      	ldr	r3, [pc, #64]	; (137bc <I2cReadDataWait+0x11c>)
   1377a:	4798      	blx	r3
   1377c:	0003      	movs	r3, r0
   1377e:	617b      	str	r3, [r7, #20]
   13780:	e002      	b.n	13788 <I2cReadDataWait+0xe8>
	if(ERROR_NONE != error) goto exit;
   13782:	46c0      	nop			; (mov r8, r8)
   13784:	e000      	b.n	13788 <I2cReadDataWait+0xe8>
	if(ERROR_NONE != error) goto exit;
   13786:	46c0      	nop			; (mov r8, r8)
	
	exit:
	return error;
   13788:	697b      	ldr	r3, [r7, #20]
   1378a:	e005      	b.n	13798 <I2cReadDataWait+0xf8>
		goto exitError0;
   1378c:	46c0      	nop			; (mov r8, r8)

	exitError0:
	error = I2cFreeMutex();
   1378e:	4b0b      	ldr	r3, [pc, #44]	; (137bc <I2cReadDataWait+0x11c>)
   13790:	4798      	blx	r3
   13792:	0003      	movs	r3, r0
   13794:	617b      	str	r3, [r7, #20]

	return error;
   13796:	697b      	ldr	r3, [r7, #20]

	
}
   13798:	0018      	movs	r0, r3
   1379a:	46bd      	mov	sp, r7
   1379c:	b006      	add	sp, #24
   1379e:	bd80      	pop	{r7, pc}
   137a0:	00013541 	.word	0x00013541
   137a4:	00013579 	.word	0x00013579
   137a8:	00013401 	.word	0x00013401
   137ac:	00015d29 	.word	0x00015d29
   137b0:	0001359d 	.word	0x0001359d
   137b4:	000135b1 	.word	0x000135b1
   137b8:	00013485 	.word	0x00013485
   137bc:	00013509 	.word	0x00013509

000137c0 <SeesawSetLed>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
	FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*****************************************************************************/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   137c0:	b5b0      	push	{r4, r5, r7, lr}
   137c2:	b088      	sub	sp, #32
   137c4:	af00      	add	r7, sp, #0
   137c6:	0005      	movs	r5, r0
   137c8:	000c      	movs	r4, r1
   137ca:	0010      	movs	r0, r2
   137cc:	0019      	movs	r1, r3
   137ce:	1dfb      	adds	r3, r7, #7
   137d0:	1c2a      	adds	r2, r5, #0
   137d2:	701a      	strb	r2, [r3, #0]
   137d4:	1dbb      	adds	r3, r7, #6
   137d6:	1c22      	adds	r2, r4, #0
   137d8:	701a      	strb	r2, [r3, #0]
   137da:	1d7b      	adds	r3, r7, #5
   137dc:	1c02      	adds	r2, r0, #0
   137de:	701a      	strb	r2, [r3, #0]
   137e0:	1d3b      	adds	r3, r7, #4
   137e2:	1c0a      	adds	r2, r1, #0
   137e4:	701a      	strb	r2, [r3, #0]
	uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   137e6:	2310      	movs	r3, #16
   137e8:	18fb      	adds	r3, r7, r3
   137ea:	220e      	movs	r2, #14
   137ec:	701a      	strb	r2, [r3, #0]
   137ee:	2310      	movs	r3, #16
   137f0:	18fb      	adds	r3, r7, r3
   137f2:	2204      	movs	r2, #4
   137f4:	705a      	strb	r2, [r3, #1]
   137f6:	2310      	movs	r3, #16
   137f8:	18fb      	adds	r3, r7, r3
   137fa:	2200      	movs	r2, #0
   137fc:	709a      	strb	r2, [r3, #2]
   137fe:	2310      	movs	r3, #16
   13800:	18fb      	adds	r3, r7, r3
   13802:	2200      	movs	r2, #0
   13804:	70da      	strb	r2, [r3, #3]
   13806:	2310      	movs	r3, #16
   13808:	18fb      	adds	r3, r7, r3
   1380a:	1d7a      	adds	r2, r7, #5
   1380c:	7812      	ldrb	r2, [r2, #0]
   1380e:	711a      	strb	r2, [r3, #4]
   13810:	2310      	movs	r3, #16
   13812:	18fb      	adds	r3, r7, r3
   13814:	1dba      	adds	r2, r7, #6
   13816:	7812      	ldrb	r2, [r2, #0]
   13818:	715a      	strb	r2, [r3, #5]
   1381a:	2310      	movs	r3, #16
   1381c:	18fb      	adds	r3, r7, r3
   1381e:	1d3a      	adds	r2, r7, #4
   13820:	7812      	ldrb	r2, [r2, #0]
   13822:	719a      	strb	r2, [r3, #6]
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   13824:	230c      	movs	r3, #12
   13826:	18fb      	adds	r3, r7, r3
   13828:	4a17      	ldr	r2, [pc, #92]	; (13888 <SeesawSetLed+0xc8>)
   1382a:	8812      	ldrh	r2, [r2, #0]
   1382c:	801a      	strh	r2, [r3, #0]

	uint16_t offset = 3 * key; //RGB LED
   1382e:	1dfb      	adds	r3, r7, #7
   13830:	781b      	ldrb	r3, [r3, #0]
   13832:	b29b      	uxth	r3, r3
   13834:	221e      	movs	r2, #30
   13836:	18ba      	adds	r2, r7, r2
   13838:	1c19      	adds	r1, r3, #0
   1383a:	1c0b      	adds	r3, r1, #0
   1383c:	18db      	adds	r3, r3, r3
   1383e:	185b      	adds	r3, r3, r1
   13840:	8013      	strh	r3, [r2, #0]
	write_buffer1[2] = (offset >> 8);
   13842:	231e      	movs	r3, #30
   13844:	18fb      	adds	r3, r7, r3
   13846:	881b      	ldrh	r3, [r3, #0]
   13848:	0a1b      	lsrs	r3, r3, #8
   1384a:	b29b      	uxth	r3, r3
   1384c:	b2da      	uxtb	r2, r3
   1384e:	2310      	movs	r3, #16
   13850:	18fb      	adds	r3, r7, r3
   13852:	709a      	strb	r2, [r3, #2]
	write_buffer1[3] = (offset);
   13854:	231e      	movs	r3, #30
   13856:	18fb      	adds	r3, r7, r3
   13858:	881b      	ldrh	r3, [r3, #0]
   1385a:	b2da      	uxtb	r2, r3
   1385c:	2310      	movs	r3, #16
   1385e:	18fb      	adds	r3, r7, r3
   13860:	70da      	strb	r2, [r3, #3]

	seesawData.msgOut = &write_buffer1;
   13862:	4b0a      	ldr	r3, [pc, #40]	; (1388c <SeesawSetLed+0xcc>)
   13864:	2210      	movs	r2, #16
   13866:	18ba      	adds	r2, r7, r2
   13868:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(write_buffer1);
   1386a:	4b08      	ldr	r3, [pc, #32]	; (1388c <SeesawSetLed+0xcc>)
   1386c:	2207      	movs	r2, #7
   1386e:	81da      	strh	r2, [r3, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
   13870:	4b06      	ldr	r3, [pc, #24]	; (1388c <SeesawSetLed+0xcc>)
   13872:	2164      	movs	r1, #100	; 0x64
   13874:	0018      	movs	r0, r3
   13876:	4b06      	ldr	r3, [pc, #24]	; (13890 <SeesawSetLed+0xd0>)
   13878:	4798      	blx	r3
   1387a:	0003      	movs	r3, r0
   1387c:	61bb      	str	r3, [r7, #24]
	return error;
   1387e:	69bb      	ldr	r3, [r7, #24]

}
   13880:	0018      	movs	r0, r3
   13882:	46bd      	mov	sp, r7
   13884:	b008      	add	sp, #32
   13886:	bdb0      	pop	{r4, r5, r7, pc}
   13888:	0001d3d0 	.word	0x0001d3d0
   1388c:	20002db4 	.word	0x20002db4
   13890:	000135d1 	.word	0x000135d1

00013894 <SeesawOrderLedUpdate>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*****************************************************************************/
int32_t SeesawOrderLedUpdate(void)
{
   13894:	b580      	push	{r7, lr}
   13896:	b082      	sub	sp, #8
   13898:	af00      	add	r7, sp, #0
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   1389a:	003b      	movs	r3, r7
   1389c:	4a0a      	ldr	r2, [pc, #40]	; (138c8 <SeesawOrderLedUpdate+0x34>)
   1389e:	8812      	ldrh	r2, [r2, #0]
   138a0:	801a      	strh	r2, [r3, #0]

	seesawData.msgOut = &orderBuffer;
   138a2:	4b0a      	ldr	r3, [pc, #40]	; (138cc <SeesawOrderLedUpdate+0x38>)
   138a4:	003a      	movs	r2, r7
   138a6:	605a      	str	r2, [r3, #4]
	seesawData.lenOut = sizeof(orderBuffer);
   138a8:	4b08      	ldr	r3, [pc, #32]	; (138cc <SeesawOrderLedUpdate+0x38>)
   138aa:	2202      	movs	r2, #2
   138ac:	81da      	strh	r2, [r3, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
   138ae:	4b07      	ldr	r3, [pc, #28]	; (138cc <SeesawOrderLedUpdate+0x38>)
   138b0:	2164      	movs	r1, #100	; 0x64
   138b2:	0018      	movs	r0, r3
   138b4:	4b06      	ldr	r3, [pc, #24]	; (138d0 <SeesawOrderLedUpdate+0x3c>)
   138b6:	4798      	blx	r3
   138b8:	0003      	movs	r3, r0
   138ba:	607b      	str	r3, [r7, #4]
	return error;
   138bc:	687b      	ldr	r3, [r7, #4]
}
   138be:	0018      	movs	r0, r3
   138c0:	46bd      	mov	sp, r7
   138c2:	b002      	add	sp, #8
   138c4:	bd80      	pop	{r7, pc}
   138c6:	46c0      	nop			; (mov r8, r8)
   138c8:	0001d3d0 	.word	0x0001d3d0
   138cc:	20002db4 	.word	0x20002db4
   138d0:	000135d1 	.word	0x000135d1

000138d4 <VEML_Reset>:
* @return		STATUS_OK if ok
* @note
*****************************************************************************/

int32_t VEML_Reset(void)
{
   138d4:	b580      	push	{r7, lr}
   138d6:	b082      	sub	sp, #8
   138d8:	af00      	add	r7, sp, #0
	int32_t error = ERROR_NONE;
   138da:	2300      	movs	r3, #0
   138dc:	607b      	str	r3, [r7, #4]
	//ALS Gain:1
	//Integration time: 100ms
	//Interrupt disable
	//ALS power on
	msgOutlightbuffer[0] = 0x00;
   138de:	4b21      	ldr	r3, [pc, #132]	; (13964 <VEML_Reset+0x90>)
   138e0:	2200      	movs	r2, #0
   138e2:	701a      	strb	r2, [r3, #0]
	msgOutlightbuffer[1] = 0x00;
   138e4:	4b1f      	ldr	r3, [pc, #124]	; (13964 <VEML_Reset+0x90>)
   138e6:	2200      	movs	r2, #0
   138e8:	705a      	strb	r2, [r3, #1]
	error = platform_write(ALS_CONF, msgOutlightbuffer,VemlWriteByteLen);
   138ea:	4b1e      	ldr	r3, [pc, #120]	; (13964 <VEML_Reset+0x90>)
   138ec:	2202      	movs	r2, #2
   138ee:	0019      	movs	r1, r3
   138f0:	2000      	movs	r0, #0
   138f2:	4b1d      	ldr	r3, [pc, #116]	; (13968 <VEML_Reset+0x94>)
   138f4:	4798      	blx	r3
   138f6:	0003      	movs	r3, r0
   138f8:	607b      	str	r3, [r7, #4]
	error = platform_write(ALS_WH, msgOutlightbuffer,VemlWriteByteLen);
   138fa:	4b1a      	ldr	r3, [pc, #104]	; (13964 <VEML_Reset+0x90>)
   138fc:	2202      	movs	r2, #2
   138fe:	0019      	movs	r1, r3
   13900:	2001      	movs	r0, #1
   13902:	4b19      	ldr	r3, [pc, #100]	; (13968 <VEML_Reset+0x94>)
   13904:	4798      	blx	r3
   13906:	0003      	movs	r3, r0
   13908:	607b      	str	r3, [r7, #4]
	error = platform_write(ALS_WL, msgOutlightbuffer,VemlWriteByteLen);
   1390a:	4b16      	ldr	r3, [pc, #88]	; (13964 <VEML_Reset+0x90>)
   1390c:	2202      	movs	r2, #2
   1390e:	0019      	movs	r1, r3
   13910:	2002      	movs	r0, #2
   13912:	4b15      	ldr	r3, [pc, #84]	; (13968 <VEML_Reset+0x94>)
   13914:	4798      	blx	r3
   13916:	0003      	movs	r3, r0
   13918:	607b      	str	r3, [r7, #4]
	error = platform_write(POWER_SAVING, msgOutlightbuffer,VemlWriteByteLen);
   1391a:	4b12      	ldr	r3, [pc, #72]	; (13964 <VEML_Reset+0x90>)
   1391c:	2202      	movs	r2, #2
   1391e:	0019      	movs	r1, r3
   13920:	2003      	movs	r0, #3
   13922:	4b11      	ldr	r3, [pc, #68]	; (13968 <VEML_Reset+0x94>)
   13924:	4798      	blx	r3
   13926:	0003      	movs	r3, r0
   13928:	607b      	str	r3, [r7, #4]
	error = platform_write(ALS, msgOutlightbuffer,VemlWriteByteLen);
   1392a:	4b0e      	ldr	r3, [pc, #56]	; (13964 <VEML_Reset+0x90>)
   1392c:	2202      	movs	r2, #2
   1392e:	0019      	movs	r1, r3
   13930:	2004      	movs	r0, #4
   13932:	4b0d      	ldr	r3, [pc, #52]	; (13968 <VEML_Reset+0x94>)
   13934:	4798      	blx	r3
   13936:	0003      	movs	r3, r0
   13938:	607b      	str	r3, [r7, #4]
	error = platform_write(WHITE, msgOutlightbuffer,VemlWriteByteLen);
   1393a:	4b0a      	ldr	r3, [pc, #40]	; (13964 <VEML_Reset+0x90>)
   1393c:	2202      	movs	r2, #2
   1393e:	0019      	movs	r1, r3
   13940:	2005      	movs	r0, #5
   13942:	4b09      	ldr	r3, [pc, #36]	; (13968 <VEML_Reset+0x94>)
   13944:	4798      	blx	r3
   13946:	0003      	movs	r3, r0
   13948:	607b      	str	r3, [r7, #4]
	error = platform_write(ALS_INT, msgOutlightbuffer,VemlWriteByteLen);
   1394a:	4b06      	ldr	r3, [pc, #24]	; (13964 <VEML_Reset+0x90>)
   1394c:	2202      	movs	r2, #2
   1394e:	0019      	movs	r1, r3
   13950:	2006      	movs	r0, #6
   13952:	4b05      	ldr	r3, [pc, #20]	; (13968 <VEML_Reset+0x94>)
   13954:	4798      	blx	r3
   13956:	0003      	movs	r3, r0
   13958:	607b      	str	r3, [r7, #4]
	return error;
   1395a:	687b      	ldr	r3, [r7, #4]
}
   1395c:	0018      	movs	r0, r3
   1395e:	46bd      	mov	sp, r7
   13960:	b002      	add	sp, #8
   13962:	bd80      	pop	{r7, pc}
   13964:	20002de4 	.word	0x20002de4
   13968:	00013a1d 	.word	0x00013a1d

0001396c <VEML_Power_On>:
* @return		STATUS_OK if ok
* @note
*****************************************************************************/

int32_t VEML_Power_On(void)
{
   1396c:	b580      	push	{r7, lr}
   1396e:	b082      	sub	sp, #8
   13970:	af00      	add	r7, sp, #0
	int32_t error = ERROR_NONE;
   13972:	2300      	movs	r3, #0
   13974:	607b      	str	r3, [r7, #4]
	//ALS Gain:1
	//Integration time: 100ms
	//Interrupt disable
	//ALS power on
	msgOutlightbuffer[0] = 0x00;
   13976:	4b09      	ldr	r3, [pc, #36]	; (1399c <VEML_Power_On+0x30>)
   13978:	2200      	movs	r2, #0
   1397a:	701a      	strb	r2, [r3, #0]
	msgOutlightbuffer[1] = 0x08;
   1397c:	4b07      	ldr	r3, [pc, #28]	; (1399c <VEML_Power_On+0x30>)
   1397e:	2208      	movs	r2, #8
   13980:	705a      	strb	r2, [r3, #1]
	error = platform_write(ALS_CONF, msgOutlightbuffer,VemlWriteByteLen);
   13982:	4b06      	ldr	r3, [pc, #24]	; (1399c <VEML_Power_On+0x30>)
   13984:	2202      	movs	r2, #2
   13986:	0019      	movs	r1, r3
   13988:	2000      	movs	r0, #0
   1398a:	4b05      	ldr	r3, [pc, #20]	; (139a0 <VEML_Power_On+0x34>)
   1398c:	4798      	blx	r3
   1398e:	0003      	movs	r3, r0
   13990:	607b      	str	r3, [r7, #4]
	return error;
   13992:	687b      	ldr	r3, [r7, #4]
}
   13994:	0018      	movs	r0, r3
   13996:	46bd      	mov	sp, r7
   13998:	b002      	add	sp, #8
   1399a:	bd80      	pop	{r7, pc}
   1399c:	20002de4 	.word	0x20002de4
   139a0:	00013a1d 	.word	0x00013a1d

000139a4 <VEML_Power_Off>:
* @return		STATUS_OK if ok
* @note
*****************************************************************************/

int32_t VEML_Power_Off(void)
{
   139a4:	b580      	push	{r7, lr}
   139a6:	b082      	sub	sp, #8
   139a8:	af00      	add	r7, sp, #0
	int32_t error = ERROR_NONE;
   139aa:	2300      	movs	r3, #0
   139ac:	607b      	str	r3, [r7, #4]
	//ALS Gain:1
	//Integration time: 100ms
	//Interrupt disable
	//ALS power on
	msgOutlightbuffer[0] = 0x01;
   139ae:	4b09      	ldr	r3, [pc, #36]	; (139d4 <VEML_Power_Off+0x30>)
   139b0:	2201      	movs	r2, #1
   139b2:	701a      	strb	r2, [r3, #0]
	msgOutlightbuffer[1] = 0x00;
   139b4:	4b07      	ldr	r3, [pc, #28]	; (139d4 <VEML_Power_Off+0x30>)
   139b6:	2200      	movs	r2, #0
   139b8:	705a      	strb	r2, [r3, #1]
	error = platform_write(ALS_CONF, msgOutlightbuffer,VemlWriteByteLen);
   139ba:	4b06      	ldr	r3, [pc, #24]	; (139d4 <VEML_Power_Off+0x30>)
   139bc:	2202      	movs	r2, #2
   139be:	0019      	movs	r1, r3
   139c0:	2000      	movs	r0, #0
   139c2:	4b05      	ldr	r3, [pc, #20]	; (139d8 <VEML_Power_Off+0x34>)
   139c4:	4798      	blx	r3
   139c6:	0003      	movs	r3, r0
   139c8:	607b      	str	r3, [r7, #4]
	return error;
   139ca:	687b      	ldr	r3, [r7, #4]
}
   139cc:	0018      	movs	r0, r3
   139ce:	46bd      	mov	sp, r7
   139d0:	b002      	add	sp, #8
   139d2:	bd80      	pop	{r7, pc}
   139d4:	20002de4 	.word	0x20002de4
   139d8:	00013a1d 	.word	0x00013a1d

000139dc <VEML_ReadALSData>:
* @return		STATUS_OK if ok
* @note
*****************************************************************************/

int32_t VEML_ReadALSData(uint32_t * readdata)
{
   139dc:	b580      	push	{r7, lr}
   139de:	b084      	sub	sp, #16
   139e0:	af00      	add	r7, sp, #0
   139e2:	6078      	str	r0, [r7, #4]
	int32_t error = ERROR_NONE;
   139e4:	2300      	movs	r3, #0
   139e6:	60fb      	str	r3, [r7, #12]
	// Disable power_saving;
	error = platform_read(ALS, msgInlightbuffer,VemlReadByteLen);
   139e8:	4b0a      	ldr	r3, [pc, #40]	; (13a14 <VEML_ReadALSData+0x38>)
   139ea:	2202      	movs	r2, #2
   139ec:	0019      	movs	r1, r3
   139ee:	2004      	movs	r0, #4
   139f0:	4b09      	ldr	r3, [pc, #36]	; (13a18 <VEML_ReadALSData+0x3c>)
   139f2:	4798      	blx	r3
   139f4:	0003      	movs	r3, r0
   139f6:	60fb      	str	r3, [r7, #12]
	*readdata = (uint32_t)msgInlightbuffer[0] | ((uint32_t)msgInlightbuffer[1] <<8);
   139f8:	4b06      	ldr	r3, [pc, #24]	; (13a14 <VEML_ReadALSData+0x38>)
   139fa:	781b      	ldrb	r3, [r3, #0]
   139fc:	001a      	movs	r2, r3
   139fe:	4b05      	ldr	r3, [pc, #20]	; (13a14 <VEML_ReadALSData+0x38>)
   13a00:	785b      	ldrb	r3, [r3, #1]
   13a02:	021b      	lsls	r3, r3, #8
   13a04:	431a      	orrs	r2, r3
   13a06:	687b      	ldr	r3, [r7, #4]
   13a08:	601a      	str	r2, [r3, #0]
	return error;
   13a0a:	68fb      	ldr	r3, [r7, #12]
}
   13a0c:	0018      	movs	r0, r3
   13a0e:	46bd      	mov	sp, r7
   13a10:	b004      	add	sp, #16
   13a12:	bd80      	pop	{r7, pc}
   13a14:	20002dd4 	.word	0x20002dd4
   13a18:	00013a91 	.word	0x00013a91

00013a1c <platform_write>:
* @return		STATUS_OK if ok
* @note         
*****************************************************************************/

static int32_t platform_write(uint8_t reg, uint8_t *bufp,uint16_t len)
{
   13a1c:	b580      	push	{r7, lr}
   13a1e:	b084      	sub	sp, #16
   13a20:	af00      	add	r7, sp, #0
   13a22:	6039      	str	r1, [r7, #0]
   13a24:	0011      	movs	r1, r2
   13a26:	1dfb      	adds	r3, r7, #7
   13a28:	1c02      	adds	r2, r0, #0
   13a2a:	701a      	strb	r2, [r3, #0]
   13a2c:	1d3b      	adds	r3, r7, #4
   13a2e:	1c0a      	adds	r2, r1, #0
   13a30:	801a      	strh	r2, [r3, #0]
	int32_t error = ERROR_NONE;
   13a32:	2300      	movs	r3, #0
   13a34:	60fb      	str	r3, [r7, #12]
	light_data.address = VEML6030_I2C_ADDR_H;
   13a36:	4b11      	ldr	r3, [pc, #68]	; (13a7c <platform_write+0x60>)
   13a38:	2248      	movs	r2, #72	; 0x48
   13a3a:	701a      	strb	r2, [r3, #0]
	msgOutlight[0] = reg;
   13a3c:	4b10      	ldr	r3, [pc, #64]	; (13a80 <platform_write+0x64>)
   13a3e:	1dfa      	adds	r2, r7, #7
   13a40:	7812      	ldrb	r2, [r2, #0]
   13a42:	701a      	strb	r2, [r3, #0]
	memcpy (msgOutlight+1, bufp, len);
   13a44:	480f      	ldr	r0, [pc, #60]	; (13a84 <platform_write+0x68>)
   13a46:	1d3b      	adds	r3, r7, #4
   13a48:	881a      	ldrh	r2, [r3, #0]
   13a4a:	683b      	ldr	r3, [r7, #0]
   13a4c:	0019      	movs	r1, r3
   13a4e:	4b0e      	ldr	r3, [pc, #56]	; (13a88 <platform_write+0x6c>)
   13a50:	4798      	blx	r3
	light_data.lenOut = len +1;
   13a52:	1d3b      	adds	r3, r7, #4
   13a54:	881b      	ldrh	r3, [r3, #0]
   13a56:	3301      	adds	r3, #1
   13a58:	b29a      	uxth	r2, r3
   13a5a:	4b08      	ldr	r3, [pc, #32]	; (13a7c <platform_write+0x60>)
   13a5c:	81da      	strh	r2, [r3, #14]
	light_data.msgOut = &msgOutlight;
   13a5e:	4b07      	ldr	r3, [pc, #28]	; (13a7c <platform_write+0x60>)
   13a60:	4a07      	ldr	r2, [pc, #28]	; (13a80 <platform_write+0x64>)
   13a62:	605a      	str	r2, [r3, #4]
	error = I2cWriteDataWait(&light_data,100);
   13a64:	4b05      	ldr	r3, [pc, #20]	; (13a7c <platform_write+0x60>)
   13a66:	2164      	movs	r1, #100	; 0x64
   13a68:	0018      	movs	r0, r3
   13a6a:	4b08      	ldr	r3, [pc, #32]	; (13a8c <platform_write+0x70>)
   13a6c:	4798      	blx	r3
   13a6e:	0003      	movs	r3, r0
   13a70:	60fb      	str	r3, [r7, #12]
	return error;
   13a72:	68fb      	ldr	r3, [r7, #12]
}
   13a74:	0018      	movs	r0, r3
   13a76:	46bd      	mov	sp, r7
   13a78:	b004      	add	sp, #16
   13a7a:	bd80      	pop	{r7, pc}
   13a7c:	20002dc4 	.word	0x20002dc4
   13a80:	20002dd8 	.word	0x20002dd8
   13a84:	20002dd9 	.word	0x20002dd9
   13a88:	0001c5a5 	.word	0x0001c5a5
   13a8c:	000135d1 	.word	0x000135d1

00013a90 <platform_read>:
* @param[in]	uint16_t len: number of bytes to send (the register address is not counted)
* @return		STATUS_OK if ok
* @note
*****************************************************************************/
static  int32_t platform_read(uint8_t reg, uint8_t *bufp, uint16_t len)
{
   13a90:	b580      	push	{r7, lr}
   13a92:	b084      	sub	sp, #16
   13a94:	af00      	add	r7, sp, #0
   13a96:	6039      	str	r1, [r7, #0]
   13a98:	0011      	movs	r1, r2
   13a9a:	1dfb      	adds	r3, r7, #7
   13a9c:	1c02      	adds	r2, r0, #0
   13a9e:	701a      	strb	r2, [r3, #0]
   13aa0:	1d3b      	adds	r3, r7, #4
   13aa2:	1c0a      	adds	r2, r1, #0
   13aa4:	801a      	strh	r2, [r3, #0]
	int32_t error = ERROR_NONE;
   13aa6:	2300      	movs	r3, #0
   13aa8:	60fb      	str	r3, [r7, #12]
	light_data.address = VEML6030_I2C_ADDR_H;
   13aaa:	4b12      	ldr	r3, [pc, #72]	; (13af4 <platform_read+0x64>)
   13aac:	2248      	movs	r2, #72	; 0x48
   13aae:	701a      	strb	r2, [r3, #0]
	msgOutlight[0] = reg;
   13ab0:	4b11      	ldr	r3, [pc, #68]	; (13af8 <platform_read+0x68>)
   13ab2:	1dfa      	adds	r2, r7, #7
   13ab4:	7812      	ldrb	r2, [r2, #0]
   13ab6:	701a      	strb	r2, [r3, #0]
	msgOutlight[1] = 0;
   13ab8:	4b0f      	ldr	r3, [pc, #60]	; (13af8 <platform_read+0x68>)
   13aba:	2200      	movs	r2, #0
   13abc:	705a      	strb	r2, [r3, #1]
	light_data.lenOut = 1;
   13abe:	4b0d      	ldr	r3, [pc, #52]	; (13af4 <platform_read+0x64>)
   13ac0:	2201      	movs	r2, #1
   13ac2:	81da      	strh	r2, [r3, #14]
	light_data.msgOut = &msgOutlight;
   13ac4:	4b0b      	ldr	r3, [pc, #44]	; (13af4 <platform_read+0x64>)
   13ac6:	4a0c      	ldr	r2, [pc, #48]	; (13af8 <platform_read+0x68>)
   13ac8:	605a      	str	r2, [r3, #4]
	light_data.lenIn = len;
   13aca:	4b0a      	ldr	r3, [pc, #40]	; (13af4 <platform_read+0x64>)
   13acc:	1d3a      	adds	r2, r7, #4
   13ace:	8812      	ldrh	r2, [r2, #0]
   13ad0:	819a      	strh	r2, [r3, #12]
	light_data.msgIn = bufp;
   13ad2:	4b08      	ldr	r3, [pc, #32]	; (13af4 <platform_read+0x64>)
   13ad4:	683a      	ldr	r2, [r7, #0]
   13ad6:	609a      	str	r2, [r3, #8]
	error = I2cReadDataWait(&light_data, 5, 100);
   13ad8:	4b06      	ldr	r3, [pc, #24]	; (13af4 <platform_read+0x64>)
   13ada:	2264      	movs	r2, #100	; 0x64
   13adc:	2105      	movs	r1, #5
   13ade:	0018      	movs	r0, r3
   13ae0:	4b06      	ldr	r3, [pc, #24]	; (13afc <platform_read+0x6c>)
   13ae2:	4798      	blx	r3
   13ae4:	0003      	movs	r3, r0
   13ae6:	60fb      	str	r3, [r7, #12]
	return error;
   13ae8:	68fb      	ldr	r3, [r7, #12]
   13aea:	0018      	movs	r0, r3
   13aec:	46bd      	mov	sp, r7
   13aee:	b004      	add	sp, #16
   13af0:	bd80      	pop	{r7, pc}
   13af2:	46c0      	nop			; (mov r8, r8)
   13af4:	20002dc4 	.word	0x20002dc4
   13af8:	20002dd8 	.word	0x20002dd8
   13afc:	000136a1 	.word	0x000136a1

00013b00 <InitializeOLEDdriver>:
                				
* @return		Returns 0 if no errors.
* @note         
*****************************************************************************/
int InitializeOLEDdriver(void)
{
   13b00:	b580      	push	{r7, lr}
   13b02:	b082      	sub	sp, #8
   13b04:	af00      	add	r7, sp, #0
	// default 5x7 font
	MicroOLEDsetFontType(0);
   13b06:	2000      	movs	r0, #0
   13b08:	4b3b      	ldr	r3, [pc, #236]	; (13bf8 <InitializeOLEDdriver+0xf8>)
   13b0a:	4798      	blx	r3
	MicroOLEDsetColor(WHITE);
   13b0c:	2001      	movs	r0, #1
   13b0e:	4b3b      	ldr	r3, [pc, #236]	; (13bfc <InitializeOLEDdriver+0xfc>)
   13b10:	4798      	blx	r3
	MicroOLEDsetDrawMode(NORM);
   13b12:	2000      	movs	r0, #0
   13b14:	4b3a      	ldr	r3, [pc, #232]	; (13c00 <InitializeOLEDdriver+0x100>)
   13b16:	4798      	blx	r3
	MicroOLEDsetCursor(0, 0);
   13b18:	2100      	movs	r1, #0
   13b1a:	2000      	movs	r0, #0
   13b1c:	4b39      	ldr	r3, [pc, #228]	; (13c04 <InitializeOLEDdriver+0x104>)
   13b1e:	4798      	blx	r3

	// Display Init sequence for 64x48 OLED module
	int error = MicroOLEDcommand(DISPLAYOFF); // 0xAE
   13b20:	20ae      	movs	r0, #174	; 0xae
   13b22:	4b39      	ldr	r3, [pc, #228]	; (13c08 <InitializeOLEDdriver+0x108>)
   13b24:	4798      	blx	r3
   13b26:	0003      	movs	r3, r0
   13b28:	607b      	str	r3, [r7, #4]
	if(ERROR_NONE != error)
   13b2a:	687b      	ldr	r3, [r7, #4]
   13b2c:	2b00      	cmp	r3, #0
   13b2e:	d004      	beq.n	13b3a <InitializeOLEDdriver+0x3a>
	{
		SerialConsoleWriteString("Error initializing OLED!\r\n");
   13b30:	4b36      	ldr	r3, [pc, #216]	; (13c0c <InitializeOLEDdriver+0x10c>)
   13b32:	0018      	movs	r0, r3
   13b34:	4b36      	ldr	r3, [pc, #216]	; (13c10 <InitializeOLEDdriver+0x110>)
   13b36:	4798      	blx	r3
   13b38:	e003      	b.n	13b42 <InitializeOLEDdriver+0x42>
	}
	else
	{
		SerialConsoleWriteString("OLED Turned off!\r\n");
   13b3a:	4b36      	ldr	r3, [pc, #216]	; (13c14 <InitializeOLEDdriver+0x114>)
   13b3c:	0018      	movs	r0, r3
   13b3e:	4b34      	ldr	r3, [pc, #208]	; (13c10 <InitializeOLEDdriver+0x110>)
   13b40:	4798      	blx	r3
	}

	error = MicroOLEDcommand(SETDISPLAYCLOCKDIV); // 0xD5
   13b42:	20d5      	movs	r0, #213	; 0xd5
   13b44:	4b30      	ldr	r3, [pc, #192]	; (13c08 <InitializeOLEDdriver+0x108>)
   13b46:	4798      	blx	r3
   13b48:	0003      	movs	r3, r0
   13b4a:	607b      	str	r3, [r7, #4]
	if(ERROR_NONE != error)
   13b4c:	687b      	ldr	r3, [r7, #4]
   13b4e:	2b00      	cmp	r3, #0
   13b50:	d004      	beq.n	13b5c <InitializeOLEDdriver+0x5c>
	{
		SerialConsoleWriteString("Error initializing OLED clock!\r\n");
   13b52:	4b31      	ldr	r3, [pc, #196]	; (13c18 <InitializeOLEDdriver+0x118>)
   13b54:	0018      	movs	r0, r3
   13b56:	4b2e      	ldr	r3, [pc, #184]	; (13c10 <InitializeOLEDdriver+0x110>)
   13b58:	4798      	blx	r3
   13b5a:	e003      	b.n	13b64 <InitializeOLEDdriver+0x64>
	}
	else
	{
		SerialConsoleWriteString("OLED clock set!\r\n");
   13b5c:	4b2f      	ldr	r3, [pc, #188]	; (13c1c <InitializeOLEDdriver+0x11c>)
   13b5e:	0018      	movs	r0, r3
   13b60:	4b2b      	ldr	r3, [pc, #172]	; (13c10 <InitializeOLEDdriver+0x110>)
   13b62:	4798      	blx	r3
	}
	MicroOLEDcommand(0x80);				 // the suggested ratio 0x80
   13b64:	2080      	movs	r0, #128	; 0x80
   13b66:	4b28      	ldr	r3, [pc, #160]	; (13c08 <InitializeOLEDdriver+0x108>)
   13b68:	4798      	blx	r3

	MicroOLEDcommand(SETMULTIPLEX); // 0xA8
   13b6a:	20a8      	movs	r0, #168	; 0xa8
   13b6c:	4b26      	ldr	r3, [pc, #152]	; (13c08 <InitializeOLEDdriver+0x108>)
   13b6e:	4798      	blx	r3
	MicroOLEDcommand(0x2F);
   13b70:	202f      	movs	r0, #47	; 0x2f
   13b72:	4b25      	ldr	r3, [pc, #148]	; (13c08 <InitializeOLEDdriver+0x108>)
   13b74:	4798      	blx	r3

	MicroOLEDcommand(SETDISPLAYOFFSET); // 0xD3
   13b76:	20d3      	movs	r0, #211	; 0xd3
   13b78:	4b23      	ldr	r3, [pc, #140]	; (13c08 <InitializeOLEDdriver+0x108>)
   13b7a:	4798      	blx	r3
	MicroOLEDcommand(0x0);			   // no offset
   13b7c:	2000      	movs	r0, #0
   13b7e:	4b22      	ldr	r3, [pc, #136]	; (13c08 <InitializeOLEDdriver+0x108>)
   13b80:	4798      	blx	r3

	MicroOLEDcommand(SETSTARTLINE | 0x0); // line #0
   13b82:	2040      	movs	r0, #64	; 0x40
   13b84:	4b20      	ldr	r3, [pc, #128]	; (13c08 <InitializeOLEDdriver+0x108>)
   13b86:	4798      	blx	r3

	MicroOLEDcommand(CHARGEPUMP); // enable charge pump
   13b88:	208d      	movs	r0, #141	; 0x8d
   13b8a:	4b1f      	ldr	r3, [pc, #124]	; (13c08 <InitializeOLEDdriver+0x108>)
   13b8c:	4798      	blx	r3
	MicroOLEDcommand(0x14);
   13b8e:	2014      	movs	r0, #20
   13b90:	4b1d      	ldr	r3, [pc, #116]	; (13c08 <InitializeOLEDdriver+0x108>)
   13b92:	4798      	blx	r3

	MicroOLEDcommand(NORMALDISPLAY);		 // 0xA6
   13b94:	20a6      	movs	r0, #166	; 0xa6
   13b96:	4b1c      	ldr	r3, [pc, #112]	; (13c08 <InitializeOLEDdriver+0x108>)
   13b98:	4798      	blx	r3
	MicroOLEDcommand(DISPLAYALLONRESUME); // 0xA4
   13b9a:	20a4      	movs	r0, #164	; 0xa4
   13b9c:	4b1a      	ldr	r3, [pc, #104]	; (13c08 <InitializeOLEDdriver+0x108>)
   13b9e:	4798      	blx	r3

	MicroOLEDcommand(SEGREMAP | 0x1);
   13ba0:	20a1      	movs	r0, #161	; 0xa1
   13ba2:	4b19      	ldr	r3, [pc, #100]	; (13c08 <InitializeOLEDdriver+0x108>)
   13ba4:	4798      	blx	r3
	MicroOLEDcommand(COMSCANDEC);
   13ba6:	20c8      	movs	r0, #200	; 0xc8
   13ba8:	4b17      	ldr	r3, [pc, #92]	; (13c08 <InitializeOLEDdriver+0x108>)
   13baa:	4798      	blx	r3

	MicroOLEDcommand(SETCOMPINS); // 0xDA
   13bac:	20da      	movs	r0, #218	; 0xda
   13bae:	4b16      	ldr	r3, [pc, #88]	; (13c08 <InitializeOLEDdriver+0x108>)
   13bb0:	4798      	blx	r3
	MicroOLEDcommand(0x12);
   13bb2:	2012      	movs	r0, #18
   13bb4:	4b14      	ldr	r3, [pc, #80]	; (13c08 <InitializeOLEDdriver+0x108>)
   13bb6:	4798      	blx	r3

	MicroOLEDcommand(SETCONTRAST); // 0x81
   13bb8:	2081      	movs	r0, #129	; 0x81
   13bba:	4b13      	ldr	r3, [pc, #76]	; (13c08 <InitializeOLEDdriver+0x108>)
   13bbc:	4798      	blx	r3
	MicroOLEDcommand(0x8F);
   13bbe:	208f      	movs	r0, #143	; 0x8f
   13bc0:	4b11      	ldr	r3, [pc, #68]	; (13c08 <InitializeOLEDdriver+0x108>)
   13bc2:	4798      	blx	r3

	MicroOLEDcommand(SETPRECHARGE); // 0xd9
   13bc4:	20d9      	movs	r0, #217	; 0xd9
   13bc6:	4b10      	ldr	r3, [pc, #64]	; (13c08 <InitializeOLEDdriver+0x108>)
   13bc8:	4798      	blx	r3
	MicroOLEDcommand(0xF1);
   13bca:	20f1      	movs	r0, #241	; 0xf1
   13bcc:	4b0e      	ldr	r3, [pc, #56]	; (13c08 <InitializeOLEDdriver+0x108>)
   13bce:	4798      	blx	r3

	MicroOLEDcommand(SETVCOMDESELECT); // 0xDB
   13bd0:	20db      	movs	r0, #219	; 0xdb
   13bd2:	4b0d      	ldr	r3, [pc, #52]	; (13c08 <InitializeOLEDdriver+0x108>)
   13bd4:	4798      	blx	r3
	MicroOLEDcommand(0x40);
   13bd6:	2040      	movs	r0, #64	; 0x40
   13bd8:	4b0b      	ldr	r3, [pc, #44]	; (13c08 <InitializeOLEDdriver+0x108>)
   13bda:	4798      	blx	r3

	MicroOLEDcommand(DISPLAYON); //--turn on oled panel
   13bdc:	20af      	movs	r0, #175	; 0xaf
   13bde:	4b0a      	ldr	r3, [pc, #40]	; (13c08 <InitializeOLEDdriver+0x108>)
   13be0:	4798      	blx	r3
	error = MicroOLEDclear(ALL);			// Erase hardware memory inside the OLED controller to avoid random data in memory.
   13be2:	2001      	movs	r0, #1
   13be4:	4b0e      	ldr	r3, [pc, #56]	; (13c20 <InitializeOLEDdriver+0x120>)
   13be6:	4798      	blx	r3
   13be8:	0003      	movs	r3, r0
   13bea:	607b      	str	r3, [r7, #4]
	return error;
   13bec:	687b      	ldr	r3, [r7, #4]
}
   13bee:	0018      	movs	r0, r3
   13bf0:	46bd      	mov	sp, r7
   13bf2:	b002      	add	sp, #8
   13bf4:	bd80      	pop	{r7, pc}
   13bf6:	46c0      	nop			; (mov r8, r8)
   13bf8:	00014301 	.word	0x00014301
   13bfc:	000143dd 	.word	0x000143dd
   13c00:	000142ad 	.word	0x000142ad
   13c04:	000142cd 	.word	0x000142cd
   13c08:	00013c25 	.word	0x00013c25
   13c0c:	0001e330 	.word	0x0001e330
   13c10:	00017bd5 	.word	0x00017bd5
   13c14:	0001e34c 	.word	0x0001e34c
   13c18:	0001e360 	.word	0x0001e360
   13c1c:	0001e384 	.word	0x0001e384
   13c20:	00013cd5 	.word	0x00013cd5

00013c24 <MicroOLEDcommand>:
	For I2C  we use the write functions
	defined in hardware.cpp to send the data.
*/

int MicroOLEDcommand(uint8_t c)
{
   13c24:	b580      	push	{r7, lr}
   13c26:	b084      	sub	sp, #16
   13c28:	af00      	add	r7, sp, #0
   13c2a:	0002      	movs	r2, r0
   13c2c:	1dfb      	adds	r3, r7, #7
   13c2e:	701a      	strb	r2, [r3, #0]
	// Write to our address, make sure it knows we're sending a
	// command:
	uint8_t msg[2]={I2C_COMMAND,c};
   13c30:	2308      	movs	r3, #8
   13c32:	18fb      	adds	r3, r7, r3
   13c34:	2200      	movs	r2, #0
   13c36:	701a      	strb	r2, [r3, #0]
   13c38:	2308      	movs	r3, #8
   13c3a:	18fb      	adds	r3, r7, r3
   13c3c:	1dfa      	adds	r2, r7, #7
   13c3e:	7812      	ldrb	r2, [r2, #0]
   13c40:	705a      	strb	r2, [r3, #1]
	OLEDData.address = OLED_I2C_ADDRESS_SA0_1;
   13c42:	4b0c      	ldr	r3, [pc, #48]	; (13c74 <MicroOLEDcommand+0x50>)
   13c44:	223d      	movs	r2, #61	; 0x3d
   13c46:	701a      	strb	r2, [r3, #0]
	OLEDData.msgOut = &msg;
   13c48:	4b0a      	ldr	r3, [pc, #40]	; (13c74 <MicroOLEDcommand+0x50>)
   13c4a:	2208      	movs	r2, #8
   13c4c:	18ba      	adds	r2, r7, r2
   13c4e:	605a      	str	r2, [r3, #4]
	OLEDData.lenOut = sizeof(msg);
   13c50:	4b08      	ldr	r3, [pc, #32]	; (13c74 <MicroOLEDcommand+0x50>)
   13c52:	2202      	movs	r2, #2
   13c54:	81da      	strh	r2, [r3, #14]
	OLEDData.lenIn = 0;
   13c56:	4b07      	ldr	r3, [pc, #28]	; (13c74 <MicroOLEDcommand+0x50>)
   13c58:	2200      	movs	r2, #0
   13c5a:	819a      	strh	r2, [r3, #12]
	int error = I2cWriteDataWait(&OLEDData, 100);
   13c5c:	4b05      	ldr	r3, [pc, #20]	; (13c74 <MicroOLEDcommand+0x50>)
   13c5e:	2164      	movs	r1, #100	; 0x64
   13c60:	0018      	movs	r0, r3
   13c62:	4b05      	ldr	r3, [pc, #20]	; (13c78 <MicroOLEDcommand+0x54>)
   13c64:	4798      	blx	r3
   13c66:	0003      	movs	r3, r0
   13c68:	60fb      	str	r3, [r7, #12]
	return error;
   13c6a:	68fb      	ldr	r3, [r7, #12]

}
   13c6c:	0018      	movs	r0, r3
   13c6e:	46bd      	mov	sp, r7
   13c70:	b004      	add	sp, #16
   13c72:	bd80      	pop	{r7, pc}
   13c74:	20002de8 	.word	0x20002de8
   13c78:	000135d1 	.word	0x000135d1

00013c7c <MicroOLEDdata>:
	For SPI we set the DC and CS pins here, and call spiTransfer(byte)
	to send the data. For I2C and Parallel we use the write functions
	defined in hardware.cpp to send the data.
*/
int MicroOLEDdata(uint8_t c)
{
   13c7c:	b580      	push	{r7, lr}
   13c7e:	b084      	sub	sp, #16
   13c80:	af00      	add	r7, sp, #0
   13c82:	0002      	movs	r2, r0
   13c84:	1dfb      	adds	r3, r7, #7
   13c86:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2]={I2C_DATA,c};
   13c88:	2308      	movs	r3, #8
   13c8a:	18fb      	adds	r3, r7, r3
   13c8c:	2240      	movs	r2, #64	; 0x40
   13c8e:	701a      	strb	r2, [r3, #0]
   13c90:	2308      	movs	r3, #8
   13c92:	18fb      	adds	r3, r7, r3
   13c94:	1dfa      	adds	r2, r7, #7
   13c96:	7812      	ldrb	r2, [r2, #0]
   13c98:	705a      	strb	r2, [r3, #1]
	OLEDData.address = OLED_I2C_ADDRESS_SA0_1;
   13c9a:	4b0c      	ldr	r3, [pc, #48]	; (13ccc <MicroOLEDdata+0x50>)
   13c9c:	223d      	movs	r2, #61	; 0x3d
   13c9e:	701a      	strb	r2, [r3, #0]
	OLEDData.msgOut = &msg;
   13ca0:	4b0a      	ldr	r3, [pc, #40]	; (13ccc <MicroOLEDdata+0x50>)
   13ca2:	2208      	movs	r2, #8
   13ca4:	18ba      	adds	r2, r7, r2
   13ca6:	605a      	str	r2, [r3, #4]
	OLEDData.lenOut = sizeof(msg);
   13ca8:	4b08      	ldr	r3, [pc, #32]	; (13ccc <MicroOLEDdata+0x50>)
   13caa:	2202      	movs	r2, #2
   13cac:	81da      	strh	r2, [r3, #14]
	OLEDData.lenIn = 0;
   13cae:	4b07      	ldr	r3, [pc, #28]	; (13ccc <MicroOLEDdata+0x50>)
   13cb0:	2200      	movs	r2, #0
   13cb2:	819a      	strh	r2, [r3, #12]
	int error = I2cWriteDataWait(&OLEDData, 100);
   13cb4:	4b05      	ldr	r3, [pc, #20]	; (13ccc <MicroOLEDdata+0x50>)
   13cb6:	2164      	movs	r1, #100	; 0x64
   13cb8:	0018      	movs	r0, r3
   13cba:	4b05      	ldr	r3, [pc, #20]	; (13cd0 <MicroOLEDdata+0x54>)
   13cbc:	4798      	blx	r3
   13cbe:	0003      	movs	r3, r0
   13cc0:	60fb      	str	r3, [r7, #12]
	return error;
   13cc2:	68fb      	ldr	r3, [r7, #12]
	
}
   13cc4:	0018      	movs	r0, r3
   13cc6:	46bd      	mov	sp, r7
   13cc8:	b004      	add	sp, #16
   13cca:	bd80      	pop	{r7, pc}
   13ccc:	20002de8 	.word	0x20002de8
   13cd0:	000135d1 	.word	0x000135d1

00013cd4 <MicroOLEDclear>:

/** \brief Clear screen buffer or SSD1306's memory.
    To clear GDRAM inside the LCD controller, pass in the variable mode = ALL and to clear screen page buffer pass in the variable mode = PAGE.
*/
int MicroOLEDclear(uint8_t mode)
{
   13cd4:	b580      	push	{r7, lr}
   13cd6:	b0a6      	sub	sp, #152	; 0x98
   13cd8:	af00      	add	r7, sp, #0
   13cda:	0002      	movs	r2, r0
   13cdc:	1dfb      	adds	r3, r7, #7
   13cde:	701a      	strb	r2, [r3, #0]
	//	uint8_t page=6, col=0x40;
int error = NULL;
   13ce0:	2300      	movs	r3, #0
   13ce2:	2294      	movs	r2, #148	; 0x94
   13ce4:	18ba      	adds	r2, r7, r2
   13ce6:	6013      	str	r3, [r2, #0]
	if (mode == ALL)
   13ce8:	1dfb      	adds	r3, r7, #7
   13cea:	781b      	ldrb	r3, [r3, #0]
   13cec:	2b01      	cmp	r3, #1
   13cee:	d143      	bne.n	13d78 <MicroOLEDclear+0xa4>
	{
		for (int i = 0; i < 8; i++)
   13cf0:	2300      	movs	r3, #0
   13cf2:	2290      	movs	r2, #144	; 0x90
   13cf4:	18ba      	adds	r2, r7, r2
   13cf6:	6013      	str	r3, [r2, #0]
   13cf8:	e038      	b.n	13d6c <MicroOLEDclear+0x98>
		{
			MicroOLEDsetPageAddress(i);
   13cfa:	2390      	movs	r3, #144	; 0x90
   13cfc:	18fb      	adds	r3, r7, r3
   13cfe:	681b      	ldr	r3, [r3, #0]
   13d00:	b2db      	uxtb	r3, r3
   13d02:	0018      	movs	r0, r3
   13d04:	4b24      	ldr	r3, [pc, #144]	; (13d98 <MicroOLEDclear+0xc4>)
   13d06:	4798      	blx	r3
			MicroOLEDsetColumnAddress(0);
   13d08:	2000      	movs	r0, #0
   13d0a:	4b24      	ldr	r3, [pc, #144]	; (13d9c <MicroOLEDclear+0xc8>)
   13d0c:	4798      	blx	r3
			uint8_t zeros[0x80];
			memset(zeros, 0, 0x80);
   13d0e:	230c      	movs	r3, #12
   13d10:	18fb      	adds	r3, r7, r3
   13d12:	2280      	movs	r2, #128	; 0x80
   13d14:	2100      	movs	r1, #0
   13d16:	0018      	movs	r0, r3
   13d18:	4b21      	ldr	r3, [pc, #132]	; (13da0 <MicroOLEDclear+0xcc>)
   13d1a:	4798      	blx	r3
			for (int j = 0; j < 0x80; j++)
   13d1c:	2300      	movs	r3, #0
   13d1e:	228c      	movs	r2, #140	; 0x8c
   13d20:	18ba      	adds	r2, r7, r2
   13d22:	6013      	str	r3, [r2, #0]
   13d24:	e016      	b.n	13d54 <MicroOLEDclear+0x80>
			{
				error= MicroOLEDdata(0);
   13d26:	2000      	movs	r0, #0
   13d28:	4b1e      	ldr	r3, [pc, #120]	; (13da4 <MicroOLEDclear+0xd0>)
   13d2a:	4798      	blx	r3
   13d2c:	0003      	movs	r3, r0
   13d2e:	2294      	movs	r2, #148	; 0x94
   13d30:	18ba      	adds	r2, r7, r2
   13d32:	6013      	str	r3, [r2, #0]
				if (ERROR_NONE != error){
   13d34:	2394      	movs	r3, #148	; 0x94
   13d36:	18fb      	adds	r3, r7, r3
   13d38:	681b      	ldr	r3, [r3, #0]
   13d3a:	2b00      	cmp	r3, #0
   13d3c:	d003      	beq.n	13d46 <MicroOLEDclear+0x72>
					return error;
   13d3e:	2394      	movs	r3, #148	; 0x94
   13d40:	18fb      	adds	r3, r7, r3
   13d42:	681b      	ldr	r3, [r3, #0]
   13d44:	e024      	b.n	13d90 <MicroOLEDclear+0xbc>
			for (int j = 0; j < 0x80; j++)
   13d46:	238c      	movs	r3, #140	; 0x8c
   13d48:	18fb      	adds	r3, r7, r3
   13d4a:	681b      	ldr	r3, [r3, #0]
   13d4c:	3301      	adds	r3, #1
   13d4e:	228c      	movs	r2, #140	; 0x8c
   13d50:	18ba      	adds	r2, r7, r2
   13d52:	6013      	str	r3, [r2, #0]
   13d54:	238c      	movs	r3, #140	; 0x8c
   13d56:	18fb      	adds	r3, r7, r3
   13d58:	681b      	ldr	r3, [r3, #0]
   13d5a:	2b7f      	cmp	r3, #127	; 0x7f
   13d5c:	dde3      	ble.n	13d26 <MicroOLEDclear+0x52>
		for (int i = 0; i < 8; i++)
   13d5e:	2390      	movs	r3, #144	; 0x90
   13d60:	18fb      	adds	r3, r7, r3
   13d62:	681b      	ldr	r3, [r3, #0]
   13d64:	3301      	adds	r3, #1
   13d66:	2290      	movs	r2, #144	; 0x90
   13d68:	18ba      	adds	r2, r7, r2
   13d6a:	6013      	str	r3, [r2, #0]
   13d6c:	2390      	movs	r3, #144	; 0x90
   13d6e:	18fb      	adds	r3, r7, r3
   13d70:	681b      	ldr	r3, [r3, #0]
   13d72:	2b07      	cmp	r3, #7
   13d74:	ddc1      	ble.n	13cfa <MicroOLEDclear+0x26>
   13d76:	e008      	b.n	13d8a <MicroOLEDclear+0xb6>
			
		}
	}
	else
	{
		memset(screenmemory, 0, 384); // (64 x 48) / 8 = 384
   13d78:	23c0      	movs	r3, #192	; 0xc0
   13d7a:	005a      	lsls	r2, r3, #1
   13d7c:	4b0a      	ldr	r3, [pc, #40]	; (13da8 <MicroOLEDclear+0xd4>)
   13d7e:	2100      	movs	r1, #0
   13d80:	0018      	movs	r0, r3
   13d82:	4b07      	ldr	r3, [pc, #28]	; (13da0 <MicroOLEDclear+0xcc>)
   13d84:	4798      	blx	r3
		MicroOLEDdisplay();
   13d86:	4b09      	ldr	r3, [pc, #36]	; (13dac <MicroOLEDclear+0xd8>)
   13d88:	4798      	blx	r3
	}
	return error;
   13d8a:	2394      	movs	r3, #148	; 0x94
   13d8c:	18fb      	adds	r3, r7, r3
   13d8e:	681b      	ldr	r3, [r3, #0]
}
   13d90:	0018      	movs	r0, r3
   13d92:	46bd      	mov	sp, r7
   13d94:	b026      	add	sp, #152	; 0x98
   13d96:	bd80      	pop	{r7, pc}
   13d98:	00013e3d 	.word	0x00013e3d
   13d9c:	00013e6d 	.word	0x00013e6d
   13da0:	0001c5db 	.word	0x0001c5db
   13da4:	00013c7d 	.word	0x00013c7d
   13da8:	20000334 	.word	0x20000334
   13dac:	00013db1 	.word	0x00013db1

00013db0 <MicroOLEDdisplay>:

/** \brief Transfer display memory.
    Bulk move the screen buffer to the SSD1306 controller's memory so that images/graphics drawn on the screen buffer will be displayed on the OLED.
*/
int MicroOLEDdisplay(void)
{
   13db0:	b580      	push	{r7, lr}
   13db2:	b082      	sub	sp, #8
   13db4:	af00      	add	r7, sp, #0
	uint8_t i, j;
int error = NULL;
   13db6:	2300      	movs	r3, #0
   13db8:	603b      	str	r3, [r7, #0]
	for (i = 0; i < 6; i++)
   13dba:	1dfb      	adds	r3, r7, #7
   13dbc:	2200      	movs	r2, #0
   13dbe:	701a      	strb	r2, [r3, #0]
   13dc0:	e02b      	b.n	13e1a <MicroOLEDdisplay+0x6a>
	{
		MicroOLEDsetPageAddress(i);
   13dc2:	1dfb      	adds	r3, r7, #7
   13dc4:	781b      	ldrb	r3, [r3, #0]
   13dc6:	0018      	movs	r0, r3
   13dc8:	4b18      	ldr	r3, [pc, #96]	; (13e2c <MicroOLEDdisplay+0x7c>)
   13dca:	4798      	blx	r3
		MicroOLEDsetColumnAddress(0);
   13dcc:	2000      	movs	r0, #0
   13dce:	4b18      	ldr	r3, [pc, #96]	; (13e30 <MicroOLEDdisplay+0x80>)
   13dd0:	4798      	blx	r3
		for (j = 0; j < 0x40; j++)
   13dd2:	1dbb      	adds	r3, r7, #6
   13dd4:	2200      	movs	r2, #0
   13dd6:	701a      	strb	r2, [r3, #0]
   13dd8:	e016      	b.n	13e08 <MicroOLEDdisplay+0x58>
		{
			error= MicroOLEDdata(screenmemory[i * 0x40 + j]);
   13dda:	1dfb      	adds	r3, r7, #7
   13ddc:	781b      	ldrb	r3, [r3, #0]
   13dde:	019a      	lsls	r2, r3, #6
   13de0:	1dbb      	adds	r3, r7, #6
   13de2:	781b      	ldrb	r3, [r3, #0]
   13de4:	18d3      	adds	r3, r2, r3
   13de6:	4a13      	ldr	r2, [pc, #76]	; (13e34 <MicroOLEDdisplay+0x84>)
   13de8:	5cd3      	ldrb	r3, [r2, r3]
   13dea:	0018      	movs	r0, r3
   13dec:	4b12      	ldr	r3, [pc, #72]	; (13e38 <MicroOLEDdisplay+0x88>)
   13dee:	4798      	blx	r3
   13df0:	0003      	movs	r3, r0
   13df2:	603b      	str	r3, [r7, #0]
			if (ERROR_NONE != error){
   13df4:	683b      	ldr	r3, [r7, #0]
   13df6:	2b00      	cmp	r3, #0
   13df8:	d001      	beq.n	13dfe <MicroOLEDdisplay+0x4e>
				return error;
   13dfa:	683b      	ldr	r3, [r7, #0]
   13dfc:	e012      	b.n	13e24 <MicroOLEDdisplay+0x74>
		for (j = 0; j < 0x40; j++)
   13dfe:	1dbb      	adds	r3, r7, #6
   13e00:	781a      	ldrb	r2, [r3, #0]
   13e02:	1dbb      	adds	r3, r7, #6
   13e04:	3201      	adds	r2, #1
   13e06:	701a      	strb	r2, [r3, #0]
   13e08:	1dbb      	adds	r3, r7, #6
   13e0a:	781b      	ldrb	r3, [r3, #0]
   13e0c:	2b3f      	cmp	r3, #63	; 0x3f
   13e0e:	d9e4      	bls.n	13dda <MicroOLEDdisplay+0x2a>
	for (i = 0; i < 6; i++)
   13e10:	1dfb      	adds	r3, r7, #7
   13e12:	781a      	ldrb	r2, [r3, #0]
   13e14:	1dfb      	adds	r3, r7, #7
   13e16:	3201      	adds	r2, #1
   13e18:	701a      	strb	r2, [r3, #0]
   13e1a:	1dfb      	adds	r3, r7, #7
   13e1c:	781b      	ldrb	r3, [r3, #0]
   13e1e:	2b05      	cmp	r3, #5
   13e20:	d9cf      	bls.n	13dc2 <MicroOLEDdisplay+0x12>
			}
		}
	}
	return error;
   13e22:	683b      	ldr	r3, [r7, #0]
}
   13e24:	0018      	movs	r0, r3
   13e26:	46bd      	mov	sp, r7
   13e28:	b002      	add	sp, #8
   13e2a:	bd80      	pop	{r7, pc}
   13e2c:	00013e3d 	.word	0x00013e3d
   13e30:	00013e6d 	.word	0x00013e6d
   13e34:	20000334 	.word	0x20000334
   13e38:	00013c7d 	.word	0x00013c7d

00013e3c <MicroOLEDsetPageAddress>:

/** \brief Set SSD1306 page address.
    Send page address command and address to the SSD1306 OLED controller.
*/
void MicroOLEDsetPageAddress(uint8_t add)
{
   13e3c:	b580      	push	{r7, lr}
   13e3e:	b082      	sub	sp, #8
   13e40:	af00      	add	r7, sp, #0
   13e42:	0002      	movs	r2, r0
   13e44:	1dfb      	adds	r3, r7, #7
   13e46:	701a      	strb	r2, [r3, #0]
	add = 0xb0 | add;
   13e48:	1dfb      	adds	r3, r7, #7
   13e4a:	1dfa      	adds	r2, r7, #7
   13e4c:	7812      	ldrb	r2, [r2, #0]
   13e4e:	2150      	movs	r1, #80	; 0x50
   13e50:	4249      	negs	r1, r1
   13e52:	430a      	orrs	r2, r1
   13e54:	701a      	strb	r2, [r3, #0]
	MicroOLEDcommand(add);
   13e56:	1dfb      	adds	r3, r7, #7
   13e58:	781b      	ldrb	r3, [r3, #0]
   13e5a:	0018      	movs	r0, r3
   13e5c:	4b02      	ldr	r3, [pc, #8]	; (13e68 <MicroOLEDsetPageAddress+0x2c>)
   13e5e:	4798      	blx	r3
	return;
   13e60:	46c0      	nop			; (mov r8, r8)
}
   13e62:	46bd      	mov	sp, r7
   13e64:	b002      	add	sp, #8
   13e66:	bd80      	pop	{r7, pc}
   13e68:	00013c25 	.word	0x00013c25

00013e6c <MicroOLEDsetColumnAddress>:

/** \brief Set SSD1306 column address.
    Send column address command and address to the SSD1306 OLED controller.
*/
void MicroOLEDsetColumnAddress(uint8_t add)
{
   13e6c:	b580      	push	{r7, lr}
   13e6e:	b082      	sub	sp, #8
   13e70:	af00      	add	r7, sp, #0
   13e72:	0002      	movs	r2, r0
   13e74:	1dfb      	adds	r3, r7, #7
   13e76:	701a      	strb	r2, [r3, #0]
	MicroOLEDcommand((0x10 | (add >> 4)) + 0x02);
   13e78:	1dfb      	adds	r3, r7, #7
   13e7a:	781b      	ldrb	r3, [r3, #0]
   13e7c:	091b      	lsrs	r3, r3, #4
   13e7e:	b2db      	uxtb	r3, r3
   13e80:	2210      	movs	r2, #16
   13e82:	4313      	orrs	r3, r2
   13e84:	b2db      	uxtb	r3, r3
   13e86:	3302      	adds	r3, #2
   13e88:	b2db      	uxtb	r3, r3
   13e8a:	0018      	movs	r0, r3
   13e8c:	4b06      	ldr	r3, [pc, #24]	; (13ea8 <MicroOLEDsetColumnAddress+0x3c>)
   13e8e:	4798      	blx	r3
	MicroOLEDcommand((0x0f & add));
   13e90:	1dfb      	adds	r3, r7, #7
   13e92:	781b      	ldrb	r3, [r3, #0]
   13e94:	220f      	movs	r2, #15
   13e96:	4013      	ands	r3, r2
   13e98:	b2db      	uxtb	r3, r3
   13e9a:	0018      	movs	r0, r3
   13e9c:	4b02      	ldr	r3, [pc, #8]	; (13ea8 <MicroOLEDsetColumnAddress+0x3c>)
   13e9e:	4798      	blx	r3
	return;
   13ea0:	46c0      	nop			; (mov r8, r8)
}
   13ea2:	46bd      	mov	sp, r7
   13ea4:	b002      	add	sp, #8
   13ea6:	bd80      	pop	{r7, pc}
   13ea8:	00013c25 	.word	0x00013c25

00013eac <MicroOLEDcircle>:

/*
Draw circle with radius using color and mode at x,y of the screen buffer.
*/
void MicroOLEDcircle(uint8_t x0, uint8_t y0, uint8_t radius, uint8_t color, uint8_t mode)
{
   13eac:	b5b0      	push	{r4, r5, r7, lr}
   13eae:	b084      	sub	sp, #16
   13eb0:	af00      	add	r7, sp, #0
   13eb2:	0005      	movs	r5, r0
   13eb4:	000c      	movs	r4, r1
   13eb6:	0010      	movs	r0, r2
   13eb8:	0019      	movs	r1, r3
   13eba:	1dfb      	adds	r3, r7, #7
   13ebc:	1c2a      	adds	r2, r5, #0
   13ebe:	701a      	strb	r2, [r3, #0]
   13ec0:	1dbb      	adds	r3, r7, #6
   13ec2:	1c22      	adds	r2, r4, #0
   13ec4:	701a      	strb	r2, [r3, #0]
   13ec6:	1d7b      	adds	r3, r7, #5
   13ec8:	1c02      	adds	r2, r0, #0
   13eca:	701a      	strb	r2, [r3, #0]
   13ecc:	1d3b      	adds	r3, r7, #4
   13ece:	1c0a      	adds	r2, r1, #0
   13ed0:	701a      	strb	r2, [r3, #0]

	//TODO - find a way to check for no overlapping of pixels so that XOR draw mode will work perfectly
	int8_t f = 1 - radius;
   13ed2:	1d7b      	adds	r3, r7, #5
   13ed4:	781b      	ldrb	r3, [r3, #0]
   13ed6:	2201      	movs	r2, #1
   13ed8:	1ad3      	subs	r3, r2, r3
   13eda:	b2da      	uxtb	r2, r3
   13edc:	230f      	movs	r3, #15
   13ede:	18fb      	adds	r3, r7, r3
   13ee0:	701a      	strb	r2, [r3, #0]
	int8_t ddF_x = 1;
   13ee2:	230e      	movs	r3, #14
   13ee4:	18fb      	adds	r3, r7, r3
   13ee6:	2201      	movs	r2, #1
   13ee8:	701a      	strb	r2, [r3, #0]
	int8_t ddF_y = -2 * radius;
   13eea:	1d7b      	adds	r3, r7, #5
   13eec:	781b      	ldrb	r3, [r3, #0]
   13eee:	1c1a      	adds	r2, r3, #0
   13ef0:	01d2      	lsls	r2, r2, #7
   13ef2:	1ad3      	subs	r3, r2, r3
   13ef4:	18db      	adds	r3, r3, r3
   13ef6:	b2da      	uxtb	r2, r3
   13ef8:	230d      	movs	r3, #13
   13efa:	18fb      	adds	r3, r7, r3
   13efc:	701a      	strb	r2, [r3, #0]
	int8_t x = 0;
   13efe:	230c      	movs	r3, #12
   13f00:	18fb      	adds	r3, r7, r3
   13f02:	2200      	movs	r2, #0
   13f04:	701a      	strb	r2, [r3, #0]
	int8_t y = radius;
   13f06:	230b      	movs	r3, #11
   13f08:	18fb      	adds	r3, r7, r3
   13f0a:	1d7a      	adds	r2, r7, #5
   13f0c:	7812      	ldrb	r2, [r2, #0]
   13f0e:	701a      	strb	r2, [r3, #0]

	MicroOLEDpixel(x0, y0 + radius, color, mode);
   13f10:	1dba      	adds	r2, r7, #6
   13f12:	1d7b      	adds	r3, r7, #5
   13f14:	7812      	ldrb	r2, [r2, #0]
   13f16:	781b      	ldrb	r3, [r3, #0]
   13f18:	18d3      	adds	r3, r2, r3
   13f1a:	b2d9      	uxtb	r1, r3
   13f1c:	2320      	movs	r3, #32
   13f1e:	18fb      	adds	r3, r7, r3
   13f20:	781c      	ldrb	r4, [r3, #0]
   13f22:	1d3b      	adds	r3, r7, #4
   13f24:	781a      	ldrb	r2, [r3, #0]
   13f26:	1dfb      	adds	r3, r7, #7
   13f28:	7818      	ldrb	r0, [r3, #0]
   13f2a:	0023      	movs	r3, r4
   13f2c:	4c98      	ldr	r4, [pc, #608]	; (14190 <MicroOLEDcircle+0x2e4>)
   13f2e:	47a0      	blx	r4
	MicroOLEDpixel(x0, y0 - radius, color, mode);
   13f30:	1dba      	adds	r2, r7, #6
   13f32:	1d7b      	adds	r3, r7, #5
   13f34:	7812      	ldrb	r2, [r2, #0]
   13f36:	781b      	ldrb	r3, [r3, #0]
   13f38:	1ad3      	subs	r3, r2, r3
   13f3a:	b2d9      	uxtb	r1, r3
   13f3c:	2320      	movs	r3, #32
   13f3e:	18fb      	adds	r3, r7, r3
   13f40:	781c      	ldrb	r4, [r3, #0]
   13f42:	1d3b      	adds	r3, r7, #4
   13f44:	781a      	ldrb	r2, [r3, #0]
   13f46:	1dfb      	adds	r3, r7, #7
   13f48:	7818      	ldrb	r0, [r3, #0]
   13f4a:	0023      	movs	r3, r4
   13f4c:	4c90      	ldr	r4, [pc, #576]	; (14190 <MicroOLEDcircle+0x2e4>)
   13f4e:	47a0      	blx	r4
	MicroOLEDpixel(x0 + radius, y0, color, mode);
   13f50:	1dfa      	adds	r2, r7, #7
   13f52:	1d7b      	adds	r3, r7, #5
   13f54:	7812      	ldrb	r2, [r2, #0]
   13f56:	781b      	ldrb	r3, [r3, #0]
   13f58:	18d3      	adds	r3, r2, r3
   13f5a:	b2d8      	uxtb	r0, r3
   13f5c:	2320      	movs	r3, #32
   13f5e:	18fb      	adds	r3, r7, r3
   13f60:	781c      	ldrb	r4, [r3, #0]
   13f62:	1d3b      	adds	r3, r7, #4
   13f64:	781a      	ldrb	r2, [r3, #0]
   13f66:	1dbb      	adds	r3, r7, #6
   13f68:	7819      	ldrb	r1, [r3, #0]
   13f6a:	0023      	movs	r3, r4
   13f6c:	4c88      	ldr	r4, [pc, #544]	; (14190 <MicroOLEDcircle+0x2e4>)
   13f6e:	47a0      	blx	r4
	MicroOLEDpixel(x0 - radius, y0, color, mode);
   13f70:	1dfa      	adds	r2, r7, #7
   13f72:	1d7b      	adds	r3, r7, #5
   13f74:	7812      	ldrb	r2, [r2, #0]
   13f76:	781b      	ldrb	r3, [r3, #0]
   13f78:	1ad3      	subs	r3, r2, r3
   13f7a:	b2d8      	uxtb	r0, r3
   13f7c:	2320      	movs	r3, #32
   13f7e:	18fb      	adds	r3, r7, r3
   13f80:	781c      	ldrb	r4, [r3, #0]
   13f82:	1d3b      	adds	r3, r7, #4
   13f84:	781a      	ldrb	r2, [r3, #0]
   13f86:	1dbb      	adds	r3, r7, #6
   13f88:	7819      	ldrb	r1, [r3, #0]
   13f8a:	0023      	movs	r3, r4
   13f8c:	4c80      	ldr	r4, [pc, #512]	; (14190 <MicroOLEDcircle+0x2e4>)
   13f8e:	47a0      	blx	r4

	while (x < y)
   13f90:	e0ee      	b.n	14170 <MicroOLEDcircle+0x2c4>
	{
		if (f >= 0)
   13f92:	230f      	movs	r3, #15
   13f94:	18fb      	adds	r3, r7, r3
   13f96:	781b      	ldrb	r3, [r3, #0]
   13f98:	2b7f      	cmp	r3, #127	; 0x7f
   13f9a:	d81c      	bhi.n	13fd6 <MicroOLEDcircle+0x12a>
		{
			y--;
   13f9c:	230b      	movs	r3, #11
   13f9e:	18fb      	adds	r3, r7, r3
   13fa0:	781b      	ldrb	r3, [r3, #0]
   13fa2:	b25b      	sxtb	r3, r3
   13fa4:	b2db      	uxtb	r3, r3
   13fa6:	3b01      	subs	r3, #1
   13fa8:	b2da      	uxtb	r2, r3
   13faa:	230b      	movs	r3, #11
   13fac:	18fb      	adds	r3, r7, r3
   13fae:	701a      	strb	r2, [r3, #0]
			ddF_y += 2;
   13fb0:	230d      	movs	r3, #13
   13fb2:	18fb      	adds	r3, r7, r3
   13fb4:	781b      	ldrb	r3, [r3, #0]
   13fb6:	3302      	adds	r3, #2
   13fb8:	b2da      	uxtb	r2, r3
   13fba:	230d      	movs	r3, #13
   13fbc:	18fb      	adds	r3, r7, r3
   13fbe:	701a      	strb	r2, [r3, #0]
			f += ddF_y;
   13fc0:	230f      	movs	r3, #15
   13fc2:	18fb      	adds	r3, r7, r3
   13fc4:	781a      	ldrb	r2, [r3, #0]
   13fc6:	230d      	movs	r3, #13
   13fc8:	18fb      	adds	r3, r7, r3
   13fca:	781b      	ldrb	r3, [r3, #0]
   13fcc:	18d3      	adds	r3, r2, r3
   13fce:	b2da      	uxtb	r2, r3
   13fd0:	230f      	movs	r3, #15
   13fd2:	18fb      	adds	r3, r7, r3
   13fd4:	701a      	strb	r2, [r3, #0]
		}
		x++;
   13fd6:	230c      	movs	r3, #12
   13fd8:	18fb      	adds	r3, r7, r3
   13fda:	781b      	ldrb	r3, [r3, #0]
   13fdc:	b25b      	sxtb	r3, r3
   13fde:	b2db      	uxtb	r3, r3
   13fe0:	3301      	adds	r3, #1
   13fe2:	b2da      	uxtb	r2, r3
   13fe4:	230c      	movs	r3, #12
   13fe6:	18fb      	adds	r3, r7, r3
   13fe8:	701a      	strb	r2, [r3, #0]
		ddF_x += 2;
   13fea:	230e      	movs	r3, #14
   13fec:	18fb      	adds	r3, r7, r3
   13fee:	781b      	ldrb	r3, [r3, #0]
   13ff0:	3302      	adds	r3, #2
   13ff2:	b2da      	uxtb	r2, r3
   13ff4:	230e      	movs	r3, #14
   13ff6:	18fb      	adds	r3, r7, r3
   13ff8:	701a      	strb	r2, [r3, #0]
		f += ddF_x;
   13ffa:	230f      	movs	r3, #15
   13ffc:	18fb      	adds	r3, r7, r3
   13ffe:	781a      	ldrb	r2, [r3, #0]
   14000:	230e      	movs	r3, #14
   14002:	18fb      	adds	r3, r7, r3
   14004:	781b      	ldrb	r3, [r3, #0]
   14006:	18d3      	adds	r3, r2, r3
   14008:	b2da      	uxtb	r2, r3
   1400a:	230f      	movs	r3, #15
   1400c:	18fb      	adds	r3, r7, r3
   1400e:	701a      	strb	r2, [r3, #0]

		MicroOLEDpixel(x0 + x, y0 + y, color, mode);
   14010:	230c      	movs	r3, #12
   14012:	18fb      	adds	r3, r7, r3
   14014:	781a      	ldrb	r2, [r3, #0]
   14016:	1dfb      	adds	r3, r7, #7
   14018:	781b      	ldrb	r3, [r3, #0]
   1401a:	18d3      	adds	r3, r2, r3
   1401c:	b2d8      	uxtb	r0, r3
   1401e:	230b      	movs	r3, #11
   14020:	18fb      	adds	r3, r7, r3
   14022:	781a      	ldrb	r2, [r3, #0]
   14024:	1dbb      	adds	r3, r7, #6
   14026:	781b      	ldrb	r3, [r3, #0]
   14028:	18d3      	adds	r3, r2, r3
   1402a:	b2d9      	uxtb	r1, r3
   1402c:	2320      	movs	r3, #32
   1402e:	18fb      	adds	r3, r7, r3
   14030:	781c      	ldrb	r4, [r3, #0]
   14032:	1d3b      	adds	r3, r7, #4
   14034:	781a      	ldrb	r2, [r3, #0]
   14036:	0023      	movs	r3, r4
   14038:	4c55      	ldr	r4, [pc, #340]	; (14190 <MicroOLEDcircle+0x2e4>)
   1403a:	47a0      	blx	r4
		MicroOLEDpixel(x0 - x, y0 + y, color, mode);
   1403c:	230c      	movs	r3, #12
   1403e:	18fb      	adds	r3, r7, r3
   14040:	781b      	ldrb	r3, [r3, #0]
   14042:	1dfa      	adds	r2, r7, #7
   14044:	7812      	ldrb	r2, [r2, #0]
   14046:	1ad3      	subs	r3, r2, r3
   14048:	b2d8      	uxtb	r0, r3
   1404a:	230b      	movs	r3, #11
   1404c:	18fb      	adds	r3, r7, r3
   1404e:	781a      	ldrb	r2, [r3, #0]
   14050:	1dbb      	adds	r3, r7, #6
   14052:	781b      	ldrb	r3, [r3, #0]
   14054:	18d3      	adds	r3, r2, r3
   14056:	b2d9      	uxtb	r1, r3
   14058:	2320      	movs	r3, #32
   1405a:	18fb      	adds	r3, r7, r3
   1405c:	781c      	ldrb	r4, [r3, #0]
   1405e:	1d3b      	adds	r3, r7, #4
   14060:	781a      	ldrb	r2, [r3, #0]
   14062:	0023      	movs	r3, r4
   14064:	4c4a      	ldr	r4, [pc, #296]	; (14190 <MicroOLEDcircle+0x2e4>)
   14066:	47a0      	blx	r4
		MicroOLEDpixel(x0 + x, y0 - y, color, mode);
   14068:	230c      	movs	r3, #12
   1406a:	18fb      	adds	r3, r7, r3
   1406c:	781a      	ldrb	r2, [r3, #0]
   1406e:	1dfb      	adds	r3, r7, #7
   14070:	781b      	ldrb	r3, [r3, #0]
   14072:	18d3      	adds	r3, r2, r3
   14074:	b2d8      	uxtb	r0, r3
   14076:	230b      	movs	r3, #11
   14078:	18fb      	adds	r3, r7, r3
   1407a:	781b      	ldrb	r3, [r3, #0]
   1407c:	1dba      	adds	r2, r7, #6
   1407e:	7812      	ldrb	r2, [r2, #0]
   14080:	1ad3      	subs	r3, r2, r3
   14082:	b2d9      	uxtb	r1, r3
   14084:	2320      	movs	r3, #32
   14086:	18fb      	adds	r3, r7, r3
   14088:	781c      	ldrb	r4, [r3, #0]
   1408a:	1d3b      	adds	r3, r7, #4
   1408c:	781a      	ldrb	r2, [r3, #0]
   1408e:	0023      	movs	r3, r4
   14090:	4c3f      	ldr	r4, [pc, #252]	; (14190 <MicroOLEDcircle+0x2e4>)
   14092:	47a0      	blx	r4
		MicroOLEDpixel(x0 - x, y0 - y, color, mode);
   14094:	230c      	movs	r3, #12
   14096:	18fb      	adds	r3, r7, r3
   14098:	781b      	ldrb	r3, [r3, #0]
   1409a:	1dfa      	adds	r2, r7, #7
   1409c:	7812      	ldrb	r2, [r2, #0]
   1409e:	1ad3      	subs	r3, r2, r3
   140a0:	b2d8      	uxtb	r0, r3
   140a2:	230b      	movs	r3, #11
   140a4:	18fb      	adds	r3, r7, r3
   140a6:	781b      	ldrb	r3, [r3, #0]
   140a8:	1dba      	adds	r2, r7, #6
   140aa:	7812      	ldrb	r2, [r2, #0]
   140ac:	1ad3      	subs	r3, r2, r3
   140ae:	b2d9      	uxtb	r1, r3
   140b0:	2320      	movs	r3, #32
   140b2:	18fb      	adds	r3, r7, r3
   140b4:	781c      	ldrb	r4, [r3, #0]
   140b6:	1d3b      	adds	r3, r7, #4
   140b8:	781a      	ldrb	r2, [r3, #0]
   140ba:	0023      	movs	r3, r4
   140bc:	4c34      	ldr	r4, [pc, #208]	; (14190 <MicroOLEDcircle+0x2e4>)
   140be:	47a0      	blx	r4
		MicroOLEDpixel(x0 + y, y0 + x, color, mode);
   140c0:	230b      	movs	r3, #11
   140c2:	18fb      	adds	r3, r7, r3
   140c4:	781a      	ldrb	r2, [r3, #0]
   140c6:	1dfb      	adds	r3, r7, #7
   140c8:	781b      	ldrb	r3, [r3, #0]
   140ca:	18d3      	adds	r3, r2, r3
   140cc:	b2d8      	uxtb	r0, r3
   140ce:	230c      	movs	r3, #12
   140d0:	18fb      	adds	r3, r7, r3
   140d2:	781a      	ldrb	r2, [r3, #0]
   140d4:	1dbb      	adds	r3, r7, #6
   140d6:	781b      	ldrb	r3, [r3, #0]
   140d8:	18d3      	adds	r3, r2, r3
   140da:	b2d9      	uxtb	r1, r3
   140dc:	2320      	movs	r3, #32
   140de:	18fb      	adds	r3, r7, r3
   140e0:	781c      	ldrb	r4, [r3, #0]
   140e2:	1d3b      	adds	r3, r7, #4
   140e4:	781a      	ldrb	r2, [r3, #0]
   140e6:	0023      	movs	r3, r4
   140e8:	4c29      	ldr	r4, [pc, #164]	; (14190 <MicroOLEDcircle+0x2e4>)
   140ea:	47a0      	blx	r4
		MicroOLEDpixel(x0 - y, y0 + x, color, mode);
   140ec:	230b      	movs	r3, #11
   140ee:	18fb      	adds	r3, r7, r3
   140f0:	781b      	ldrb	r3, [r3, #0]
   140f2:	1dfa      	adds	r2, r7, #7
   140f4:	7812      	ldrb	r2, [r2, #0]
   140f6:	1ad3      	subs	r3, r2, r3
   140f8:	b2d8      	uxtb	r0, r3
   140fa:	230c      	movs	r3, #12
   140fc:	18fb      	adds	r3, r7, r3
   140fe:	781a      	ldrb	r2, [r3, #0]
   14100:	1dbb      	adds	r3, r7, #6
   14102:	781b      	ldrb	r3, [r3, #0]
   14104:	18d3      	adds	r3, r2, r3
   14106:	b2d9      	uxtb	r1, r3
   14108:	2320      	movs	r3, #32
   1410a:	18fb      	adds	r3, r7, r3
   1410c:	781c      	ldrb	r4, [r3, #0]
   1410e:	1d3b      	adds	r3, r7, #4
   14110:	781a      	ldrb	r2, [r3, #0]
   14112:	0023      	movs	r3, r4
   14114:	4c1e      	ldr	r4, [pc, #120]	; (14190 <MicroOLEDcircle+0x2e4>)
   14116:	47a0      	blx	r4
		MicroOLEDpixel(x0 + y, y0 - x, color, mode);
   14118:	230b      	movs	r3, #11
   1411a:	18fb      	adds	r3, r7, r3
   1411c:	781a      	ldrb	r2, [r3, #0]
   1411e:	1dfb      	adds	r3, r7, #7
   14120:	781b      	ldrb	r3, [r3, #0]
   14122:	18d3      	adds	r3, r2, r3
   14124:	b2d8      	uxtb	r0, r3
   14126:	230c      	movs	r3, #12
   14128:	18fb      	adds	r3, r7, r3
   1412a:	781b      	ldrb	r3, [r3, #0]
   1412c:	1dba      	adds	r2, r7, #6
   1412e:	7812      	ldrb	r2, [r2, #0]
   14130:	1ad3      	subs	r3, r2, r3
   14132:	b2d9      	uxtb	r1, r3
   14134:	2320      	movs	r3, #32
   14136:	18fb      	adds	r3, r7, r3
   14138:	781c      	ldrb	r4, [r3, #0]
   1413a:	1d3b      	adds	r3, r7, #4
   1413c:	781a      	ldrb	r2, [r3, #0]
   1413e:	0023      	movs	r3, r4
   14140:	4c13      	ldr	r4, [pc, #76]	; (14190 <MicroOLEDcircle+0x2e4>)
   14142:	47a0      	blx	r4
		MicroOLEDpixel(x0 - y, y0 - x, color, mode);
   14144:	230b      	movs	r3, #11
   14146:	18fb      	adds	r3, r7, r3
   14148:	781b      	ldrb	r3, [r3, #0]
   1414a:	1dfa      	adds	r2, r7, #7
   1414c:	7812      	ldrb	r2, [r2, #0]
   1414e:	1ad3      	subs	r3, r2, r3
   14150:	b2d8      	uxtb	r0, r3
   14152:	230c      	movs	r3, #12
   14154:	18fb      	adds	r3, r7, r3
   14156:	781b      	ldrb	r3, [r3, #0]
   14158:	1dba      	adds	r2, r7, #6
   1415a:	7812      	ldrb	r2, [r2, #0]
   1415c:	1ad3      	subs	r3, r2, r3
   1415e:	b2d9      	uxtb	r1, r3
   14160:	2320      	movs	r3, #32
   14162:	18fb      	adds	r3, r7, r3
   14164:	781c      	ldrb	r4, [r3, #0]
   14166:	1d3b      	adds	r3, r7, #4
   14168:	781a      	ldrb	r2, [r3, #0]
   1416a:	0023      	movs	r3, r4
   1416c:	4c08      	ldr	r4, [pc, #32]	; (14190 <MicroOLEDcircle+0x2e4>)
   1416e:	47a0      	blx	r4
	while (x < y)
   14170:	230c      	movs	r3, #12
   14172:	18fa      	adds	r2, r7, r3
   14174:	230b      	movs	r3, #11
   14176:	18fb      	adds	r3, r7, r3
   14178:	7812      	ldrb	r2, [r2, #0]
   1417a:	b252      	sxtb	r2, r2
   1417c:	781b      	ldrb	r3, [r3, #0]
   1417e:	b25b      	sxtb	r3, r3
   14180:	429a      	cmp	r2, r3
   14182:	da00      	bge.n	14186 <MicroOLEDcircle+0x2da>
   14184:	e705      	b.n	13f92 <MicroOLEDcircle+0xe6>
	}
}
   14186:	46c0      	nop			; (mov r8, r8)
   14188:	46bd      	mov	sp, r7
   1418a:	b004      	add	sp, #16
   1418c:	bdb0      	pop	{r4, r5, r7, pc}
   1418e:	46c0      	nop			; (mov r8, r8)
   14190:	00014195 	.word	0x00014195

00014194 <MicroOLEDpixel>:

/** \brief Draw pixel with color and mode.
Draw color pixel in the screen buffer's x,y position with NORM or XOR draw mode.
*/
void MicroOLEDpixel(uint8_t x, uint8_t y, uint8_t color, uint8_t mode)
{
   14194:	b5b0      	push	{r4, r5, r7, lr}
   14196:	b082      	sub	sp, #8
   14198:	af00      	add	r7, sp, #0
   1419a:	0005      	movs	r5, r0
   1419c:	000c      	movs	r4, r1
   1419e:	0010      	movs	r0, r2
   141a0:	0019      	movs	r1, r3
   141a2:	1dfb      	adds	r3, r7, #7
   141a4:	1c2a      	adds	r2, r5, #0
   141a6:	701a      	strb	r2, [r3, #0]
   141a8:	1dbb      	adds	r3, r7, #6
   141aa:	1c22      	adds	r2, r4, #0
   141ac:	701a      	strb	r2, [r3, #0]
   141ae:	1d7b      	adds	r3, r7, #5
   141b0:	1c02      	adds	r2, r0, #0
   141b2:	701a      	strb	r2, [r3, #0]
   141b4:	1d3b      	adds	r3, r7, #4
   141b6:	1c0a      	adds	r2, r1, #0
   141b8:	701a      	strb	r2, [r3, #0]
	if ((x < 0) || (x >= LCDWIDTH) || (y < 0) || (y >= LCDHEIGHT))
   141ba:	1dfb      	adds	r3, r7, #7
   141bc:	781b      	ldrb	r3, [r3, #0]
   141be:	2b3f      	cmp	r3, #63	; 0x3f
   141c0:	d86e      	bhi.n	142a0 <MicroOLEDpixel+0x10c>
   141c2:	1dbb      	adds	r3, r7, #6
   141c4:	781b      	ldrb	r3, [r3, #0]
   141c6:	2b2f      	cmp	r3, #47	; 0x2f
   141c8:	d86a      	bhi.n	142a0 <MicroOLEDpixel+0x10c>
	return;

	if (mode == XOR)
   141ca:	1d3b      	adds	r3, r7, #4
   141cc:	781b      	ldrb	r3, [r3, #0]
   141ce:	2b01      	cmp	r3, #1
   141d0:	d122      	bne.n	14218 <MicroOLEDpixel+0x84>
	{
		if (color == WHITE)
   141d2:	1d7b      	adds	r3, r7, #5
   141d4:	781b      	ldrb	r3, [r3, #0]
   141d6:	2b01      	cmp	r3, #1
   141d8:	d163      	bne.n	142a2 <MicroOLEDpixel+0x10e>
		screenmemory[x + (y / 8) * LCDWIDTH] ^= _BV((y % 8));
   141da:	1dfb      	adds	r3, r7, #7
   141dc:	781a      	ldrb	r2, [r3, #0]
   141de:	1dbb      	adds	r3, r7, #6
   141e0:	781b      	ldrb	r3, [r3, #0]
   141e2:	08db      	lsrs	r3, r3, #3
   141e4:	b2d8      	uxtb	r0, r3
   141e6:	0003      	movs	r3, r0
   141e8:	019b      	lsls	r3, r3, #6
   141ea:	18d3      	adds	r3, r2, r3
   141ec:	1dfa      	adds	r2, r7, #7
   141ee:	7811      	ldrb	r1, [r2, #0]
   141f0:	0002      	movs	r2, r0
   141f2:	0192      	lsls	r2, r2, #6
   141f4:	188a      	adds	r2, r1, r2
   141f6:	492c      	ldr	r1, [pc, #176]	; (142a8 <MicroOLEDpixel+0x114>)
   141f8:	5c8a      	ldrb	r2, [r1, r2]
   141fa:	b251      	sxtb	r1, r2
   141fc:	1dba      	adds	r2, r7, #6
   141fe:	7812      	ldrb	r2, [r2, #0]
   14200:	2007      	movs	r0, #7
   14202:	4002      	ands	r2, r0
   14204:	2001      	movs	r0, #1
   14206:	4090      	lsls	r0, r2
   14208:	0002      	movs	r2, r0
   1420a:	b252      	sxtb	r2, r2
   1420c:	404a      	eors	r2, r1
   1420e:	b252      	sxtb	r2, r2
   14210:	b2d1      	uxtb	r1, r2
   14212:	4a25      	ldr	r2, [pc, #148]	; (142a8 <MicroOLEDpixel+0x114>)
   14214:	54d1      	strb	r1, [r2, r3]
   14216:	e044      	b.n	142a2 <MicroOLEDpixel+0x10e>
	}
	else
	{
		if (color == WHITE)
   14218:	1d7b      	adds	r3, r7, #5
   1421a:	781b      	ldrb	r3, [r3, #0]
   1421c:	2b01      	cmp	r3, #1
   1421e:	d11e      	bne.n	1425e <MicroOLEDpixel+0xca>
		screenmemory[x + (y / 8) * LCDWIDTH] |= _BV((y % 8));
   14220:	1dfb      	adds	r3, r7, #7
   14222:	781a      	ldrb	r2, [r3, #0]
   14224:	1dbb      	adds	r3, r7, #6
   14226:	781b      	ldrb	r3, [r3, #0]
   14228:	08db      	lsrs	r3, r3, #3
   1422a:	b2d8      	uxtb	r0, r3
   1422c:	0003      	movs	r3, r0
   1422e:	019b      	lsls	r3, r3, #6
   14230:	18d3      	adds	r3, r2, r3
   14232:	1dfa      	adds	r2, r7, #7
   14234:	7811      	ldrb	r1, [r2, #0]
   14236:	0002      	movs	r2, r0
   14238:	0192      	lsls	r2, r2, #6
   1423a:	188a      	adds	r2, r1, r2
   1423c:	491a      	ldr	r1, [pc, #104]	; (142a8 <MicroOLEDpixel+0x114>)
   1423e:	5c8a      	ldrb	r2, [r1, r2]
   14240:	b251      	sxtb	r1, r2
   14242:	1dba      	adds	r2, r7, #6
   14244:	7812      	ldrb	r2, [r2, #0]
   14246:	2007      	movs	r0, #7
   14248:	4002      	ands	r2, r0
   1424a:	2001      	movs	r0, #1
   1424c:	4090      	lsls	r0, r2
   1424e:	0002      	movs	r2, r0
   14250:	b252      	sxtb	r2, r2
   14252:	430a      	orrs	r2, r1
   14254:	b252      	sxtb	r2, r2
   14256:	b2d1      	uxtb	r1, r2
   14258:	4a13      	ldr	r2, [pc, #76]	; (142a8 <MicroOLEDpixel+0x114>)
   1425a:	54d1      	strb	r1, [r2, r3]
   1425c:	e021      	b.n	142a2 <MicroOLEDpixel+0x10e>
		else
		screenmemory[x + (y / 8) * LCDWIDTH] &= ~_BV((y % 8));
   1425e:	1dfb      	adds	r3, r7, #7
   14260:	781a      	ldrb	r2, [r3, #0]
   14262:	1dbb      	adds	r3, r7, #6
   14264:	781b      	ldrb	r3, [r3, #0]
   14266:	08db      	lsrs	r3, r3, #3
   14268:	b2d8      	uxtb	r0, r3
   1426a:	0003      	movs	r3, r0
   1426c:	019b      	lsls	r3, r3, #6
   1426e:	18d3      	adds	r3, r2, r3
   14270:	1dfa      	adds	r2, r7, #7
   14272:	7811      	ldrb	r1, [r2, #0]
   14274:	0002      	movs	r2, r0
   14276:	0192      	lsls	r2, r2, #6
   14278:	188a      	adds	r2, r1, r2
   1427a:	490b      	ldr	r1, [pc, #44]	; (142a8 <MicroOLEDpixel+0x114>)
   1427c:	5c8a      	ldrb	r2, [r1, r2]
   1427e:	b252      	sxtb	r2, r2
   14280:	1db9      	adds	r1, r7, #6
   14282:	7809      	ldrb	r1, [r1, #0]
   14284:	2007      	movs	r0, #7
   14286:	4001      	ands	r1, r0
   14288:	2001      	movs	r0, #1
   1428a:	4088      	lsls	r0, r1
   1428c:	0001      	movs	r1, r0
   1428e:	b249      	sxtb	r1, r1
   14290:	43c9      	mvns	r1, r1
   14292:	b249      	sxtb	r1, r1
   14294:	400a      	ands	r2, r1
   14296:	b252      	sxtb	r2, r2
   14298:	b2d1      	uxtb	r1, r2
   1429a:	4a03      	ldr	r2, [pc, #12]	; (142a8 <MicroOLEDpixel+0x114>)
   1429c:	54d1      	strb	r1, [r2, r3]
   1429e:	e000      	b.n	142a2 <MicroOLEDpixel+0x10e>
	return;
   142a0:	46c0      	nop			; (mov r8, r8)
	}
}
   142a2:	46bd      	mov	sp, r7
   142a4:	b002      	add	sp, #8
   142a6:	bdb0      	pop	{r4, r5, r7, pc}
   142a8:	20000334 	.word	0x20000334

000142ac <MicroOLEDsetDrawMode>:

/** \brief Set draw mode.
    Set current draw mode with NORM or XOR.
*/
void MicroOLEDsetDrawMode(uint8_t mode)
{
   142ac:	b580      	push	{r7, lr}
   142ae:	b082      	sub	sp, #8
   142b0:	af00      	add	r7, sp, #0
   142b2:	0002      	movs	r2, r0
   142b4:	1dfb      	adds	r3, r7, #7
   142b6:	701a      	strb	r2, [r3, #0]
	drawMode = mode;
   142b8:	4b03      	ldr	r3, [pc, #12]	; (142c8 <MicroOLEDsetDrawMode+0x1c>)
   142ba:	1dfa      	adds	r2, r7, #7
   142bc:	7812      	ldrb	r2, [r2, #0]
   142be:	701a      	strb	r2, [r3, #0]
}
   142c0:	46c0      	nop			; (mov r8, r8)
   142c2:	46bd      	mov	sp, r7
   142c4:	b002      	add	sp, #8
   142c6:	bd80      	pop	{r7, pc}
   142c8:	20002d75 	.word	0x20002d75

000142cc <MicroOLEDsetCursor>:

/** \brief Set cursor position.
MicroOLED's cursor position to x,y.
*/
void MicroOLEDsetCursor(uint8_t x, uint8_t y)
{
   142cc:	b580      	push	{r7, lr}
   142ce:	b082      	sub	sp, #8
   142d0:	af00      	add	r7, sp, #0
   142d2:	0002      	movs	r2, r0
   142d4:	1dfb      	adds	r3, r7, #7
   142d6:	701a      	strb	r2, [r3, #0]
   142d8:	1dbb      	adds	r3, r7, #6
   142da:	1c0a      	adds	r2, r1, #0
   142dc:	701a      	strb	r2, [r3, #0]
	cursorX = x;
   142de:	4b06      	ldr	r3, [pc, #24]	; (142f8 <MicroOLEDsetCursor+0x2c>)
   142e0:	1dfa      	adds	r2, r7, #7
   142e2:	7812      	ldrb	r2, [r2, #0]
   142e4:	701a      	strb	r2, [r3, #0]
	cursorY = y;
   142e6:	4b05      	ldr	r3, [pc, #20]	; (142fc <MicroOLEDsetCursor+0x30>)
   142e8:	1dba      	adds	r2, r7, #6
   142ea:	7812      	ldrb	r2, [r2, #0]
   142ec:	701a      	strb	r2, [r3, #0]
}
   142ee:	46c0      	nop			; (mov r8, r8)
   142f0:	46bd      	mov	sp, r7
   142f2:	b002      	add	sp, #8
   142f4:	bd80      	pop	{r7, pc}
   142f6:	46c0      	nop			; (mov r8, r8)
   142f8:	20002d6c 	.word	0x20002d6c
   142fc:	20002d71 	.word	0x20002d71

00014300 <MicroOLEDsetFontType>:

/** \brief Set font type.
    Set the current font type number, ie changing to different fonts base on the type provided.
*/
uint8_t MicroOLEDsetFontType(uint8_t type)
{
   14300:	b580      	push	{r7, lr}
   14302:	b082      	sub	sp, #8
   14304:	af00      	add	r7, sp, #0
   14306:	0002      	movs	r2, r0
   14308:	1dfb      	adds	r3, r7, #7
   1430a:	701a      	strb	r2, [r3, #0]
    if ((type >= MAXFONTS) || (fontsPointer[type] == NULL))
   1430c:	1dfb      	adds	r3, r7, #7
   1430e:	781b      	ldrb	r3, [r3, #0]
   14310:	2b04      	cmp	r3, #4
   14312:	d806      	bhi.n	14322 <MicroOLEDsetFontType+0x22>
   14314:	1dfb      	adds	r3, r7, #7
   14316:	781a      	ldrb	r2, [r3, #0]
   14318:	4b29      	ldr	r3, [pc, #164]	; (143c0 <MicroOLEDsetFontType+0xc0>)
   1431a:	0092      	lsls	r2, r2, #2
   1431c:	58d3      	ldr	r3, [r2, r3]
   1431e:	2b00      	cmp	r3, #0
   14320:	d101      	bne.n	14326 <MicroOLEDsetFontType+0x26>
        return false;
   14322:	2300      	movs	r3, #0
   14324:	e048      	b.n	143b8 <MicroOLEDsetFontType+0xb8>

	fontType = type;
   14326:	4b27      	ldr	r3, [pc, #156]	; (143c4 <MicroOLEDsetFontType+0xc4>)
   14328:	1dfa      	adds	r2, r7, #7
   1432a:	7812      	ldrb	r2, [r2, #0]
   1432c:	701a      	strb	r2, [r3, #0]
	fontWidth = *(fontsPointer[fontType] + 0);
   1432e:	4b25      	ldr	r3, [pc, #148]	; (143c4 <MicroOLEDsetFontType+0xc4>)
   14330:	781b      	ldrb	r3, [r3, #0]
   14332:	001a      	movs	r2, r3
   14334:	4b22      	ldr	r3, [pc, #136]	; (143c0 <MicroOLEDsetFontType+0xc0>)
   14336:	0092      	lsls	r2, r2, #2
   14338:	58d3      	ldr	r3, [r2, r3]
   1433a:	681b      	ldr	r3, [r3, #0]
   1433c:	b2da      	uxtb	r2, r3
   1433e:	4b22      	ldr	r3, [pc, #136]	; (143c8 <MicroOLEDsetFontType+0xc8>)
   14340:	701a      	strb	r2, [r3, #0]
	fontHeight = *(fontsPointer[fontType] + 1);
   14342:	4b20      	ldr	r3, [pc, #128]	; (143c4 <MicroOLEDsetFontType+0xc4>)
   14344:	781b      	ldrb	r3, [r3, #0]
   14346:	001a      	movs	r2, r3
   14348:	4b1d      	ldr	r3, [pc, #116]	; (143c0 <MicroOLEDsetFontType+0xc0>)
   1434a:	0092      	lsls	r2, r2, #2
   1434c:	58d3      	ldr	r3, [r2, r3]
   1434e:	3304      	adds	r3, #4
   14350:	681b      	ldr	r3, [r3, #0]
   14352:	b2da      	uxtb	r2, r3
   14354:	4b1d      	ldr	r3, [pc, #116]	; (143cc <MicroOLEDsetFontType+0xcc>)
   14356:	701a      	strb	r2, [r3, #0]
	fontStartChar = *(fontsPointer[fontType] + 2);
   14358:	4b1a      	ldr	r3, [pc, #104]	; (143c4 <MicroOLEDsetFontType+0xc4>)
   1435a:	781b      	ldrb	r3, [r3, #0]
   1435c:	001a      	movs	r2, r3
   1435e:	4b18      	ldr	r3, [pc, #96]	; (143c0 <MicroOLEDsetFontType+0xc0>)
   14360:	0092      	lsls	r2, r2, #2
   14362:	58d3      	ldr	r3, [r2, r3]
   14364:	3308      	adds	r3, #8
   14366:	681b      	ldr	r3, [r3, #0]
   14368:	b2da      	uxtb	r2, r3
   1436a:	4b19      	ldr	r3, [pc, #100]	; (143d0 <MicroOLEDsetFontType+0xd0>)
   1436c:	701a      	strb	r2, [r3, #0]
	fontTotalChar = *(fontsPointer[fontType] + 3);
   1436e:	4b15      	ldr	r3, [pc, #84]	; (143c4 <MicroOLEDsetFontType+0xc4>)
   14370:	781b      	ldrb	r3, [r3, #0]
   14372:	001a      	movs	r2, r3
   14374:	4b12      	ldr	r3, [pc, #72]	; (143c0 <MicroOLEDsetFontType+0xc0>)
   14376:	0092      	lsls	r2, r2, #2
   14378:	58d3      	ldr	r3, [r2, r3]
   1437a:	330c      	adds	r3, #12
   1437c:	681b      	ldr	r3, [r3, #0]
   1437e:	b2da      	uxtb	r2, r3
   14380:	4b14      	ldr	r3, [pc, #80]	; (143d4 <MicroOLEDsetFontType+0xd4>)
   14382:	701a      	strb	r2, [r3, #0]
	fontMapWidth = (*(fontsPointer[fontType] + 4) * 100) + *(fontsPointer[fontType] + 5); // two bytes values into integer 16
   14384:	4b0f      	ldr	r3, [pc, #60]	; (143c4 <MicroOLEDsetFontType+0xc4>)
   14386:	781b      	ldrb	r3, [r3, #0]
   14388:	001a      	movs	r2, r3
   1438a:	4b0d      	ldr	r3, [pc, #52]	; (143c0 <MicroOLEDsetFontType+0xc0>)
   1438c:	0092      	lsls	r2, r2, #2
   1438e:	58d3      	ldr	r3, [r2, r3]
   14390:	3310      	adds	r3, #16
   14392:	681b      	ldr	r3, [r3, #0]
   14394:	b29b      	uxth	r3, r3
   14396:	2264      	movs	r2, #100	; 0x64
   14398:	4353      	muls	r3, r2
   1439a:	b29a      	uxth	r2, r3
   1439c:	4b09      	ldr	r3, [pc, #36]	; (143c4 <MicroOLEDsetFontType+0xc4>)
   1439e:	781b      	ldrb	r3, [r3, #0]
   143a0:	0019      	movs	r1, r3
   143a2:	4b07      	ldr	r3, [pc, #28]	; (143c0 <MicroOLEDsetFontType+0xc0>)
   143a4:	0089      	lsls	r1, r1, #2
   143a6:	58cb      	ldr	r3, [r1, r3]
   143a8:	3314      	adds	r3, #20
   143aa:	681b      	ldr	r3, [r3, #0]
   143ac:	b29b      	uxth	r3, r3
   143ae:	18d3      	adds	r3, r2, r3
   143b0:	b29a      	uxth	r2, r3
   143b2:	4b09      	ldr	r3, [pc, #36]	; (143d8 <MicroOLEDsetFontType+0xd8>)
   143b4:	801a      	strh	r2, [r3, #0]
	return true;
   143b6:	2301      	movs	r3, #1
}
   143b8:	0018      	movs	r0, r3
   143ba:	46bd      	mov	sp, r7
   143bc:	b002      	add	sp, #8
   143be:	bd80      	pop	{r7, pc}
   143c0:	20000000 	.word	0x20000000
   143c4:	20002d69 	.word	0x20002d69
   143c8:	20002d6b 	.word	0x20002d6b
   143cc:	20002d6a 	.word	0x20002d6a
   143d0:	20002d68 	.word	0x20002d68
   143d4:	20002d76 	.word	0x20002d76
   143d8:	20002d6e 	.word	0x20002d6e

000143dc <MicroOLEDsetColor>:

/** \brief Set color.
    Set the current draw's color. Only WHITE and BLACK available.
*/
void MicroOLEDsetColor(uint8_t color)
{
   143dc:	b580      	push	{r7, lr}
   143de:	b082      	sub	sp, #8
   143e0:	af00      	add	r7, sp, #0
   143e2:	0002      	movs	r2, r0
   143e4:	1dfb      	adds	r3, r7, #7
   143e6:	701a      	strb	r2, [r3, #0]
	foreColor = color;
   143e8:	4b03      	ldr	r3, [pc, #12]	; (143f8 <MicroOLEDsetColor+0x1c>)
   143ea:	1dfa      	adds	r2, r7, #7
   143ec:	7812      	ldrb	r2, [r2, #0]
   143ee:	701a      	strb	r2, [r3, #0]
}
   143f0:	46c0      	nop			; (mov r8, r8)
   143f2:	46bd      	mov	sp, r7
   143f4:	b002      	add	sp, #8
   143f6:	bd80      	pop	{r7, pc}
   143f8:	20002d70 	.word	0x20002d70

000143fc <vSensorReadTask>:




void vSensorReadTask( void *pvParameters )
{
   143fc:	b580      	push	{r7, lr}
   143fe:	b086      	sub	sp, #24
   14400:	af00      	add	r7, sp, #0
   14402:	6078      	str	r0, [r7, #4]

/* The input and output buffers are declared static to keep them off the stack. */
	uint32_t lightdata = 0;
   14404:	2300      	movs	r3, #0
   14406:	60fb      	str	r3, [r7, #12]
	uint32_t powersaving = 0;
   14408:	2300      	movs	r3, #0
   1440a:	617b      	str	r3, [r7, #20]
	uint32_t config = 0;
   1440c:	2300      	movs	r3, #0
   1440e:	613b      	str	r3, [r7, #16]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */
	//VEML_Power_Saving();
	//VEML_Filter_L_Threshold();
	delay_ms(100);
   14410:	2064      	movs	r0, #100	; 0x64
   14412:	4b11      	ldr	r3, [pc, #68]	; (14458 <vSensorReadTask+0x5c>)
   14414:	4798      	blx	r3
	VEML_Reset();
   14416:	4b11      	ldr	r3, [pc, #68]	; (1445c <vSensorReadTask+0x60>)
   14418:	4798      	blx	r3
	//VEML_Filter_H_Threshold();
	delay_ms(100);
   1441a:	2064      	movs	r0, #100	; 0x64
   1441c:	4b0e      	ldr	r3, [pc, #56]	; (14458 <vSensorReadTask+0x5c>)
   1441e:	4798      	blx	r3
	//VEML_Power_Saving();
	delay_ms(100);
   14420:	2064      	movs	r0, #100	; 0x64
   14422:	4b0d      	ldr	r3, [pc, #52]	; (14458 <vSensorReadTask+0x5c>)
   14424:	4798      	blx	r3
    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString( pcWelcomeMessage);
   14426:	4b0e      	ldr	r3, [pc, #56]	; (14460 <vSensorReadTask+0x64>)
   14428:	0018      	movs	r0, r3
   1442a:	4b0e      	ldr	r3, [pc, #56]	; (14464 <vSensorReadTask+0x68>)
   1442c:	4798      	blx	r3
	VEML_Power_On();
   1442e:	4b0e      	ldr	r3, [pc, #56]	; (14468 <vSensorReadTask+0x6c>)
   14430:	4798      	blx	r3
// 		VEML_Power_Off();
// 		vTaskDelay(500);
// 		VEML_Read_Config(&config);
// 		snprintf(sensormsg, 15, "Config:%d\r\n", config);
// 		SerialConsoleWriteString(sensormsg);
		VEML_Power_On();
   14432:	4b0d      	ldr	r3, [pc, #52]	; (14468 <vSensorReadTask+0x6c>)
   14434:	4798      	blx	r3
		vTaskDelay(1000);
   14436:	23fa      	movs	r3, #250	; 0xfa
   14438:	009b      	lsls	r3, r3, #2
   1443a:	0018      	movs	r0, r3
   1443c:	4b0b      	ldr	r3, [pc, #44]	; (1446c <vSensorReadTask+0x70>)
   1443e:	4798      	blx	r3
//  		vTaskDelay(200);
// 		VEML_Read_Config(&config);
// 		snprintf(sensormsg, 15, "Config:%d\r\n", config);
// 		SerialConsoleWriteString(sensormsg);
/* 		vTaskDelay(500);*/
		VEML_ReadALSData(&lightdata);
   14440:	230c      	movs	r3, #12
   14442:	18fb      	adds	r3, r7, r3
   14444:	0018      	movs	r0, r3
   14446:	4b0a      	ldr	r3, [pc, #40]	; (14470 <vSensorReadTask+0x74>)
   14448:	4798      	blx	r3
// 		VEML_Power_Saving();
// 		vTaskDelay(500);
// 		VEML_Read_Power_Saving(&powersaving);
// 		snprintf(sensormsg, 15, "Power saving:%d\r\n", powersaving);
// 		SerialConsoleWriteString(sensormsg);
		VEML_Power_Off();
   1444a:	4b0a      	ldr	r3, [pc, #40]	; (14474 <vSensorReadTask+0x78>)
   1444c:	4798      	blx	r3

		vTaskDelay(5000);
   1444e:	4b0a      	ldr	r3, [pc, #40]	; (14478 <vSensorReadTask+0x7c>)
   14450:	0018      	movs	r0, r3
   14452:	4b06      	ldr	r3, [pc, #24]	; (1446c <vSensorReadTask+0x70>)
   14454:	4798      	blx	r3
		VEML_Power_On();
   14456:	e7ec      	b.n	14432 <vSensorReadTask+0x36>
   14458:	00017e29 	.word	0x00017e29
   1445c:	000138d5 	.word	0x000138d5
   14460:	0001e398 	.word	0x0001e398
   14464:	00017bd5 	.word	0x00017bd5
   14468:	0001396d 	.word	0x0001396d
   1446c:	00016569 	.word	0x00016569
   14470:	000139dd 	.word	0x000139dd
   14474:	000139a5 	.word	0x000139a5
   14478:	00001388 	.word	0x00001388

0001447c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   1447c:	b580      	push	{r7, lr}
   1447e:	b082      	sub	sp, #8
   14480:	af00      	add	r7, sp, #0
   14482:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   14484:	687b      	ldr	r3, [r7, #4]
   14486:	2200      	movs	r2, #0
   14488:	701a      	strb	r2, [r3, #0]
}
   1448a:	46c0      	nop			; (mov r8, r8)
   1448c:	46bd      	mov	sp, r7
   1448e:	b002      	add	sp, #8
   14490:	bd80      	pop	{r7, pc}
	...

00014494 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   14494:	b580      	push	{r7, lr}
   14496:	b082      	sub	sp, #8
   14498:	af00      	add	r7, sp, #0
   1449a:	0002      	movs	r2, r0
   1449c:	6039      	str	r1, [r7, #0]
   1449e:	1dfb      	adds	r3, r7, #7
   144a0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   144a2:	1dfb      	adds	r3, r7, #7
   144a4:	781b      	ldrb	r3, [r3, #0]
   144a6:	2b01      	cmp	r3, #1
   144a8:	d00a      	beq.n	144c0 <system_apb_clock_set_mask+0x2c>
   144aa:	2b02      	cmp	r3, #2
   144ac:	d00f      	beq.n	144ce <system_apb_clock_set_mask+0x3a>
   144ae:	2b00      	cmp	r3, #0
   144b0:	d114      	bne.n	144dc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   144b2:	4b0e      	ldr	r3, [pc, #56]	; (144ec <system_apb_clock_set_mask+0x58>)
   144b4:	4a0d      	ldr	r2, [pc, #52]	; (144ec <system_apb_clock_set_mask+0x58>)
   144b6:	6991      	ldr	r1, [r2, #24]
   144b8:	683a      	ldr	r2, [r7, #0]
   144ba:	430a      	orrs	r2, r1
   144bc:	619a      	str	r2, [r3, #24]
			break;
   144be:	e00f      	b.n	144e0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   144c0:	4b0a      	ldr	r3, [pc, #40]	; (144ec <system_apb_clock_set_mask+0x58>)
   144c2:	4a0a      	ldr	r2, [pc, #40]	; (144ec <system_apb_clock_set_mask+0x58>)
   144c4:	69d1      	ldr	r1, [r2, #28]
   144c6:	683a      	ldr	r2, [r7, #0]
   144c8:	430a      	orrs	r2, r1
   144ca:	61da      	str	r2, [r3, #28]
			break;
   144cc:	e008      	b.n	144e0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   144ce:	4b07      	ldr	r3, [pc, #28]	; (144ec <system_apb_clock_set_mask+0x58>)
   144d0:	4a06      	ldr	r2, [pc, #24]	; (144ec <system_apb_clock_set_mask+0x58>)
   144d2:	6a11      	ldr	r1, [r2, #32]
   144d4:	683a      	ldr	r2, [r7, #0]
   144d6:	430a      	orrs	r2, r1
   144d8:	621a      	str	r2, [r3, #32]
			break;
   144da:	e001      	b.n	144e0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   144dc:	2317      	movs	r3, #23
   144de:	e000      	b.n	144e2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   144e0:	2300      	movs	r3, #0
}
   144e2:	0018      	movs	r0, r3
   144e4:	46bd      	mov	sp, r7
   144e6:	b002      	add	sp, #8
   144e8:	bd80      	pop	{r7, pc}
   144ea:	46c0      	nop			; (mov r8, r8)
   144ec:	40000400 	.word	0x40000400

000144f0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   144f0:	b580      	push	{r7, lr}
   144f2:	b082      	sub	sp, #8
   144f4:	af00      	add	r7, sp, #0
   144f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   144f8:	687b      	ldr	r3, [r7, #4]
   144fa:	2280      	movs	r2, #128	; 0x80
   144fc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   144fe:	687b      	ldr	r3, [r7, #4]
   14500:	2200      	movs	r2, #0
   14502:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   14504:	687b      	ldr	r3, [r7, #4]
   14506:	2201      	movs	r2, #1
   14508:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1450a:	687b      	ldr	r3, [r7, #4]
   1450c:	2200      	movs	r2, #0
   1450e:	70da      	strb	r2, [r3, #3]
}
   14510:	46c0      	nop			; (mov r8, r8)
   14512:	46bd      	mov	sp, r7
   14514:	b002      	add	sp, #8
   14516:	bd80      	pop	{r7, pc}

00014518 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   14518:	b580      	push	{r7, lr}
   1451a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   1451c:	4b05      	ldr	r3, [pc, #20]	; (14534 <system_is_debugger_present+0x1c>)
   1451e:	789b      	ldrb	r3, [r3, #2]
   14520:	b2db      	uxtb	r3, r3
   14522:	001a      	movs	r2, r3
   14524:	2302      	movs	r3, #2
   14526:	4013      	ands	r3, r2
   14528:	1e5a      	subs	r2, r3, #1
   1452a:	4193      	sbcs	r3, r2
   1452c:	b2db      	uxtb	r3, r3
}
   1452e:	0018      	movs	r0, r3
   14530:	46bd      	mov	sp, r7
   14532:	bd80      	pop	{r7, pc}
   14534:	41002000 	.word	0x41002000

00014538 <system_interrupt_enter_critical_section>:
{
   14538:	b580      	push	{r7, lr}
   1453a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1453c:	4b02      	ldr	r3, [pc, #8]	; (14548 <system_interrupt_enter_critical_section+0x10>)
   1453e:	4798      	blx	r3
}
   14540:	46c0      	nop			; (mov r8, r8)
   14542:	46bd      	mov	sp, r7
   14544:	bd80      	pop	{r7, pc}
   14546:	46c0      	nop			; (mov r8, r8)
   14548:	00017e59 	.word	0x00017e59

0001454c <system_interrupt_leave_critical_section>:
{
   1454c:	b580      	push	{r7, lr}
   1454e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   14550:	4b02      	ldr	r3, [pc, #8]	; (1455c <system_interrupt_leave_critical_section+0x10>)
   14552:	4798      	blx	r3
}
   14554:	46c0      	nop			; (mov r8, r8)
   14556:	46bd      	mov	sp, r7
   14558:	bd80      	pop	{r7, pc}
   1455a:	46c0      	nop			; (mov r8, r8)
   1455c:	00017ead 	.word	0x00017ead

00014560 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   14560:	b580      	push	{r7, lr}
   14562:	b082      	sub	sp, #8
   14564:	af00      	add	r7, sp, #0
   14566:	0002      	movs	r2, r0
   14568:	1dfb      	adds	r3, r7, #7
   1456a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1456c:	4a07      	ldr	r2, [pc, #28]	; (1458c <system_interrupt_disable+0x2c>)
   1456e:	1dfb      	adds	r3, r7, #7
   14570:	781b      	ldrb	r3, [r3, #0]
   14572:	0019      	movs	r1, r3
   14574:	231f      	movs	r3, #31
   14576:	400b      	ands	r3, r1
   14578:	2101      	movs	r1, #1
   1457a:	4099      	lsls	r1, r3
   1457c:	000b      	movs	r3, r1
   1457e:	0019      	movs	r1, r3
   14580:	2380      	movs	r3, #128	; 0x80
   14582:	50d1      	str	r1, [r2, r3]
}
   14584:	46c0      	nop			; (mov r8, r8)
   14586:	46bd      	mov	sp, r7
   14588:	b002      	add	sp, #8
   1458a:	bd80      	pop	{r7, pc}
   1458c:	e000e100 	.word	0xe000e100

00014590 <i2c_master_is_syncing>:
{
   14590:	b580      	push	{r7, lr}
   14592:	b084      	sub	sp, #16
   14594:	af00      	add	r7, sp, #0
   14596:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   14598:	687b      	ldr	r3, [r7, #4]
   1459a:	681b      	ldr	r3, [r3, #0]
   1459c:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1459e:	68fb      	ldr	r3, [r7, #12]
   145a0:	69db      	ldr	r3, [r3, #28]
   145a2:	2207      	movs	r2, #7
   145a4:	4013      	ands	r3, r2
   145a6:	1e5a      	subs	r2, r3, #1
   145a8:	4193      	sbcs	r3, r2
   145aa:	b2db      	uxtb	r3, r3
}
   145ac:	0018      	movs	r0, r3
   145ae:	46bd      	mov	sp, r7
   145b0:	b004      	add	sp, #16
   145b2:	bd80      	pop	{r7, pc}

000145b4 <_i2c_master_wait_for_sync>:
{
   145b4:	b580      	push	{r7, lr}
   145b6:	b082      	sub	sp, #8
   145b8:	af00      	add	r7, sp, #0
   145ba:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   145bc:	46c0      	nop			; (mov r8, r8)
   145be:	687b      	ldr	r3, [r7, #4]
   145c0:	0018      	movs	r0, r3
   145c2:	4b04      	ldr	r3, [pc, #16]	; (145d4 <_i2c_master_wait_for_sync+0x20>)
   145c4:	4798      	blx	r3
   145c6:	1e03      	subs	r3, r0, #0
   145c8:	d1f9      	bne.n	145be <_i2c_master_wait_for_sync+0xa>
}
   145ca:	46c0      	nop			; (mov r8, r8)
   145cc:	46bd      	mov	sp, r7
   145ce:	b002      	add	sp, #8
   145d0:	bd80      	pop	{r7, pc}
   145d2:	46c0      	nop			; (mov r8, r8)
   145d4:	00014591 	.word	0x00014591

000145d8 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   145d8:	b580      	push	{r7, lr}
   145da:	b084      	sub	sp, #16
   145dc:	af00      	add	r7, sp, #0
   145de:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   145e0:	687b      	ldr	r3, [r7, #4]
   145e2:	681b      	ldr	r3, [r3, #0]
   145e4:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   145e6:	687b      	ldr	r3, [r7, #4]
   145e8:	681b      	ldr	r3, [r3, #0]
   145ea:	0018      	movs	r0, r3
   145ec:	4b0d      	ldr	r3, [pc, #52]	; (14624 <i2c_master_disable+0x4c>)
   145ee:	4798      	blx	r3
   145f0:	0003      	movs	r3, r0
   145f2:	0018      	movs	r0, r3
   145f4:	4b0c      	ldr	r3, [pc, #48]	; (14628 <i2c_master_disable+0x50>)
   145f6:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   145f8:	687b      	ldr	r3, [r7, #4]
   145fa:	0018      	movs	r0, r3
   145fc:	4b0b      	ldr	r3, [pc, #44]	; (1462c <i2c_master_disable+0x54>)
   145fe:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   14600:	68fb      	ldr	r3, [r7, #12]
   14602:	2283      	movs	r2, #131	; 0x83
   14604:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   14606:	68fb      	ldr	r3, [r7, #12]
   14608:	2283      	movs	r2, #131	; 0x83
   1460a:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   1460c:	68fb      	ldr	r3, [r7, #12]
   1460e:	681b      	ldr	r3, [r3, #0]
   14610:	2202      	movs	r2, #2
   14612:	4393      	bics	r3, r2
   14614:	001a      	movs	r2, r3
   14616:	68fb      	ldr	r3, [r7, #12]
   14618:	601a      	str	r2, [r3, #0]

}
   1461a:	46c0      	nop			; (mov r8, r8)
   1461c:	46bd      	mov	sp, r7
   1461e:	b004      	add	sp, #16
   14620:	bd80      	pop	{r7, pc}
   14622:	46c0      	nop			; (mov r8, r8)
   14624:	00018b35 	.word	0x00018b35
   14628:	00014561 	.word	0x00014561
   1462c:	000145b5 	.word	0x000145b5

00014630 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   14630:	b5f0      	push	{r4, r5, r6, r7, lr}
   14632:	b097      	sub	sp, #92	; 0x5c
   14634:	af00      	add	r7, sp, #0
   14636:	6178      	str	r0, [r7, #20]
   14638:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   1463a:	2300      	movs	r3, #0
   1463c:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   1463e:	2300      	movs	r3, #0
   14640:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   14642:	2300      	movs	r3, #0
   14644:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   14646:	233b      	movs	r3, #59	; 0x3b
   14648:	2210      	movs	r2, #16
   1464a:	4694      	mov	ip, r2
   1464c:	44bc      	add	ip, r7
   1464e:	4463      	add	r3, ip
   14650:	2200      	movs	r2, #0
   14652:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14654:	697b      	ldr	r3, [r7, #20]
   14656:	681b      	ldr	r3, [r3, #0]
   14658:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   1465a:	697b      	ldr	r3, [r7, #20]
   1465c:	681b      	ldr	r3, [r3, #0]
   1465e:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   14660:	2323      	movs	r3, #35	; 0x23
   14662:	2210      	movs	r2, #16
   14664:	18ba      	adds	r2, r7, r2
   14666:	18d4      	adds	r4, r2, r3
   14668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1466a:	0018      	movs	r0, r3
   1466c:	4bc0      	ldr	r3, [pc, #768]	; (14970 <_i2c_master_set_config+0x340>)
   1466e:	4798      	blx	r3
   14670:	0003      	movs	r3, r0
   14672:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   14674:	230c      	movs	r3, #12
   14676:	2210      	movs	r2, #16
   14678:	4694      	mov	ip, r2
   1467a:	44bc      	add	ip, r7
   1467c:	4463      	add	r3, ip
   1467e:	0018      	movs	r0, r3
   14680:	4bbc      	ldr	r3, [pc, #752]	; (14974 <_i2c_master_set_config+0x344>)
   14682:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   14684:	693b      	ldr	r3, [r7, #16]
   14686:	69db      	ldr	r3, [r3, #28]
   14688:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   1468a:	693b      	ldr	r3, [r7, #16]
   1468c:	6a1b      	ldr	r3, [r3, #32]
   1468e:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   14690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14692:	2b00      	cmp	r3, #0
   14694:	d106      	bne.n	146a4 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   14696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14698:	2100      	movs	r1, #0
   1469a:	0018      	movs	r0, r3
   1469c:	4bb6      	ldr	r3, [pc, #728]	; (14978 <_i2c_master_set_config+0x348>)
   1469e:	4798      	blx	r3
   146a0:	0003      	movs	r3, r0
   146a2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   146a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   146a6:	b2da      	uxtb	r2, r3
   146a8:	230c      	movs	r3, #12
   146aa:	2110      	movs	r1, #16
   146ac:	468c      	mov	ip, r1
   146ae:	44bc      	add	ip, r7
   146b0:	4463      	add	r3, ip
   146b2:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   146b4:	230c      	movs	r3, #12
   146b6:	2210      	movs	r2, #16
   146b8:	4694      	mov	ip, r2
   146ba:	44bc      	add	ip, r7
   146bc:	4463      	add	r3, ip
   146be:	2202      	movs	r2, #2
   146c0:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   146c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   146c4:	0c1b      	lsrs	r3, r3, #16
   146c6:	b2db      	uxtb	r3, r3
   146c8:	220c      	movs	r2, #12
   146ca:	2110      	movs	r1, #16
   146cc:	468c      	mov	ip, r1
   146ce:	44bc      	add	ip, r7
   146d0:	4462      	add	r2, ip
   146d2:	0011      	movs	r1, r2
   146d4:	0018      	movs	r0, r3
   146d6:	4ba9      	ldr	r3, [pc, #676]	; (1497c <_i2c_master_set_config+0x34c>)
   146d8:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   146da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   146dc:	2b00      	cmp	r3, #0
   146de:	d106      	bne.n	146ee <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   146e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   146e2:	2101      	movs	r1, #1
   146e4:	0018      	movs	r0, r3
   146e6:	4ba4      	ldr	r3, [pc, #656]	; (14978 <_i2c_master_set_config+0x348>)
   146e8:	4798      	blx	r3
   146ea:	0003      	movs	r3, r0
   146ec:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   146ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   146f0:	b2da      	uxtb	r2, r3
   146f2:	230c      	movs	r3, #12
   146f4:	2110      	movs	r1, #16
   146f6:	468c      	mov	ip, r1
   146f8:	44bc      	add	ip, r7
   146fa:	4463      	add	r3, ip
   146fc:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   146fe:	230c      	movs	r3, #12
   14700:	2210      	movs	r2, #16
   14702:	4694      	mov	ip, r2
   14704:	44bc      	add	ip, r7
   14706:	4463      	add	r3, ip
   14708:	2202      	movs	r2, #2
   1470a:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   1470c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1470e:	0c1b      	lsrs	r3, r3, #16
   14710:	b2db      	uxtb	r3, r3
   14712:	220c      	movs	r2, #12
   14714:	2110      	movs	r1, #16
   14716:	468c      	mov	ip, r1
   14718:	44bc      	add	ip, r7
   1471a:	4462      	add	r2, ip
   1471c:	0011      	movs	r1, r2
   1471e:	0018      	movs	r0, r3
   14720:	4b96      	ldr	r3, [pc, #600]	; (1497c <_i2c_master_set_config+0x34c>)
   14722:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   14724:	693b      	ldr	r3, [r7, #16]
   14726:	8a9a      	ldrh	r2, [r3, #20]
   14728:	697b      	ldr	r3, [r7, #20]
   1472a:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   1472c:	693b      	ldr	r3, [r7, #16]
   1472e:	8ada      	ldrh	r2, [r3, #22]
   14730:	697b      	ldr	r3, [r7, #20]
   14732:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   14734:	693b      	ldr	r3, [r7, #16]
   14736:	7e1b      	ldrb	r3, [r3, #24]
   14738:	2b00      	cmp	r3, #0
   1473a:	d103      	bne.n	14744 <_i2c_master_set_config+0x114>
   1473c:	4b90      	ldr	r3, [pc, #576]	; (14980 <_i2c_master_set_config+0x350>)
   1473e:	4798      	blx	r3
   14740:	1e03      	subs	r3, r0, #0
   14742:	d002      	beq.n	1474a <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   14744:	2380      	movs	r3, #128	; 0x80
   14746:	657b      	str	r3, [r7, #84]	; 0x54
   14748:	e001      	b.n	1474e <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   1474a:	2300      	movs	r3, #0
   1474c:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   1474e:	693b      	ldr	r3, [r7, #16]
   14750:	691b      	ldr	r3, [r3, #16]
   14752:	2b00      	cmp	r3, #0
   14754:	d004      	beq.n	14760 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   14756:	693b      	ldr	r3, [r7, #16]
   14758:	691b      	ldr	r3, [r3, #16]
   1475a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1475c:	4313      	orrs	r3, r2
   1475e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   14760:	693b      	ldr	r3, [r7, #16]
   14762:	689b      	ldr	r3, [r3, #8]
   14764:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   14766:	4313      	orrs	r3, r2
   14768:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   1476a:	693b      	ldr	r3, [r7, #16]
   1476c:	2224      	movs	r2, #36	; 0x24
   1476e:	5c9b      	ldrb	r3, [r3, r2]
   14770:	2b00      	cmp	r3, #0
   14772:	d004      	beq.n	1477e <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   14774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   14776:	2280      	movs	r2, #128	; 0x80
   14778:	05d2      	lsls	r2, r2, #23
   1477a:	4313      	orrs	r3, r2
   1477c:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   1477e:	693b      	ldr	r3, [r7, #16]
   14780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14782:	2b00      	cmp	r3, #0
   14784:	d004      	beq.n	14790 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   14786:	693b      	ldr	r3, [r7, #16]
   14788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1478a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1478c:	4313      	orrs	r3, r2
   1478e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   14790:	693b      	ldr	r3, [r7, #16]
   14792:	222c      	movs	r2, #44	; 0x2c
   14794:	5c9b      	ldrb	r3, [r3, r2]
   14796:	2b00      	cmp	r3, #0
   14798:	d105      	bne.n	147a6 <_i2c_master_set_config+0x176>
   1479a:	693b      	ldr	r3, [r7, #16]
   1479c:	689a      	ldr	r2, [r3, #8]
   1479e:	2380      	movs	r3, #128	; 0x80
   147a0:	049b      	lsls	r3, r3, #18
   147a2:	429a      	cmp	r2, r3
   147a4:	d104      	bne.n	147b0 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   147a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   147a8:	2280      	movs	r2, #128	; 0x80
   147aa:	0512      	lsls	r2, r2, #20
   147ac:	4313      	orrs	r3, r2
   147ae:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   147b0:	693b      	ldr	r3, [r7, #16]
   147b2:	222d      	movs	r2, #45	; 0x2d
   147b4:	5c9b      	ldrb	r3, [r3, r2]
   147b6:	2b00      	cmp	r3, #0
   147b8:	d004      	beq.n	147c4 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   147ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   147bc:	2280      	movs	r2, #128	; 0x80
   147be:	0412      	lsls	r2, r2, #16
   147c0:	4313      	orrs	r3, r2
   147c2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   147c4:	693b      	ldr	r3, [r7, #16]
   147c6:	222e      	movs	r2, #46	; 0x2e
   147c8:	5c9b      	ldrb	r3, [r3, r2]
   147ca:	2b00      	cmp	r3, #0
   147cc:	d004      	beq.n	147d8 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   147ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   147d0:	2280      	movs	r2, #128	; 0x80
   147d2:	03d2      	lsls	r2, r2, #15
   147d4:	4313      	orrs	r3, r2
   147d6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   147d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   147da:	681a      	ldr	r2, [r3, #0]
   147dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   147de:	431a      	orrs	r2, r3
   147e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   147e2:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   147e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   147e6:	2280      	movs	r2, #128	; 0x80
   147e8:	0052      	lsls	r2, r2, #1
   147ea:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   147ec:	2323      	movs	r3, #35	; 0x23
   147ee:	2210      	movs	r2, #16
   147f0:	4694      	mov	ip, r2
   147f2:	44bc      	add	ip, r7
   147f4:	4463      	add	r3, ip
   147f6:	781b      	ldrb	r3, [r3, #0]
   147f8:	3314      	adds	r3, #20
   147fa:	b2db      	uxtb	r3, r3
   147fc:	0018      	movs	r0, r3
   147fe:	4b61      	ldr	r3, [pc, #388]	; (14984 <_i2c_master_set_config+0x354>)
   14800:	4798      	blx	r3
   14802:	0003      	movs	r3, r0
   14804:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   14806:	693b      	ldr	r3, [r7, #16]
   14808:	681b      	ldr	r3, [r3, #0]
   1480a:	22fa      	movs	r2, #250	; 0xfa
   1480c:	0092      	lsls	r2, r2, #2
   1480e:	4353      	muls	r3, r2
   14810:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   14812:	693b      	ldr	r3, [r7, #16]
   14814:	685b      	ldr	r3, [r3, #4]
   14816:	22fa      	movs	r2, #250	; 0xfa
   14818:	0092      	lsls	r2, r2, #2
   1481a:	4353      	muls	r3, r2
   1481c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   1481e:	693b      	ldr	r3, [r7, #16]
   14820:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   14822:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   14824:	4b58      	ldr	r3, [pc, #352]	; (14988 <_i2c_master_set_config+0x358>)
   14826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14828:	4798      	blx	r3
   1482a:	0005      	movs	r5, r0
   1482c:	000e      	movs	r6, r1
   1482e:	4b56      	ldr	r3, [pc, #344]	; (14988 <_i2c_master_set_config+0x358>)
   14830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   14832:	4798      	blx	r3
   14834:	60b8      	str	r0, [r7, #8]
   14836:	60f9      	str	r1, [r7, #12]
   14838:	4b53      	ldr	r3, [pc, #332]	; (14988 <_i2c_master_set_config+0x358>)
   1483a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1483c:	4798      	blx	r3
   1483e:	4c53      	ldr	r4, [pc, #332]	; (1498c <_i2c_master_set_config+0x35c>)
   14840:	4a53      	ldr	r2, [pc, #332]	; (14990 <_i2c_master_set_config+0x360>)
   14842:	4b54      	ldr	r3, [pc, #336]	; (14994 <_i2c_master_set_config+0x364>)
   14844:	47a0      	blx	r4
   14846:	0003      	movs	r3, r0
   14848:	000c      	movs	r4, r1
   1484a:	603b      	str	r3, [r7, #0]
   1484c:	607c      	str	r4, [r7, #4]
   1484e:	4b4e      	ldr	r3, [pc, #312]	; (14988 <_i2c_master_set_config+0x358>)
   14850:	6a38      	ldr	r0, [r7, #32]
   14852:	4798      	blx	r3
   14854:	0002      	movs	r2, r0
   14856:	000b      	movs	r3, r1
   14858:	4c4c      	ldr	r4, [pc, #304]	; (1498c <_i2c_master_set_config+0x35c>)
   1485a:	6838      	ldr	r0, [r7, #0]
   1485c:	6879      	ldr	r1, [r7, #4]
   1485e:	47a0      	blx	r4
   14860:	0003      	movs	r3, r0
   14862:	000c      	movs	r4, r1
   14864:	0018      	movs	r0, r3
   14866:	0021      	movs	r1, r4
   14868:	4c4b      	ldr	r4, [pc, #300]	; (14998 <_i2c_master_set_config+0x368>)
   1486a:	2200      	movs	r2, #0
   1486c:	4b4b      	ldr	r3, [pc, #300]	; (1499c <_i2c_master_set_config+0x36c>)
   1486e:	47a0      	blx	r4
   14870:	0003      	movs	r3, r0
   14872:	000c      	movs	r4, r1
   14874:	001a      	movs	r2, r3
   14876:	0023      	movs	r3, r4
   14878:	4c44      	ldr	r4, [pc, #272]	; (1498c <_i2c_master_set_config+0x35c>)
   1487a:	68b8      	ldr	r0, [r7, #8]
   1487c:	68f9      	ldr	r1, [r7, #12]
   1487e:	47a0      	blx	r4
   14880:	0003      	movs	r3, r0
   14882:	000c      	movs	r4, r1
   14884:	001a      	movs	r2, r3
   14886:	0023      	movs	r3, r4
   14888:	4c45      	ldr	r4, [pc, #276]	; (149a0 <_i2c_master_set_config+0x370>)
   1488a:	0028      	movs	r0, r5
   1488c:	0031      	movs	r1, r6
   1488e:	47a0      	blx	r4
   14890:	0003      	movs	r3, r0
   14892:	000c      	movs	r4, r1
   14894:	001d      	movs	r5, r3
   14896:	0026      	movs	r6, r4
   14898:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1489a:	005a      	lsls	r2, r3, #1
   1489c:	4b3a      	ldr	r3, [pc, #232]	; (14988 <_i2c_master_set_config+0x358>)
   1489e:	0010      	movs	r0, r2
   148a0:	4798      	blx	r3
   148a2:	0002      	movs	r2, r0
   148a4:	000b      	movs	r3, r1
   148a6:	4c3c      	ldr	r4, [pc, #240]	; (14998 <_i2c_master_set_config+0x368>)
   148a8:	0028      	movs	r0, r5
   148aa:	0031      	movs	r1, r6
   148ac:	47a0      	blx	r4
   148ae:	0003      	movs	r3, r0
   148b0:	000c      	movs	r4, r1
   148b2:	0018      	movs	r0, r3
   148b4:	0021      	movs	r1, r4
   148b6:	4c3a      	ldr	r4, [pc, #232]	; (149a0 <_i2c_master_set_config+0x370>)
   148b8:	2200      	movs	r2, #0
   148ba:	4b3a      	ldr	r3, [pc, #232]	; (149a4 <_i2c_master_set_config+0x374>)
   148bc:	47a0      	blx	r4
   148be:	0003      	movs	r3, r0
   148c0:	000c      	movs	r4, r1
   148c2:	001d      	movs	r5, r3
   148c4:	0026      	movs	r6, r4
   148c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   148c8:	005a      	lsls	r2, r3, #1
   148ca:	4b2f      	ldr	r3, [pc, #188]	; (14988 <_i2c_master_set_config+0x358>)
   148cc:	0010      	movs	r0, r2
   148ce:	4798      	blx	r3
   148d0:	0002      	movs	r2, r0
   148d2:	000b      	movs	r3, r1
   148d4:	4c34      	ldr	r4, [pc, #208]	; (149a8 <_i2c_master_set_config+0x378>)
   148d6:	0028      	movs	r0, r5
   148d8:	0031      	movs	r1, r6
   148da:	47a0      	blx	r4
   148dc:	0003      	movs	r3, r0
   148de:	000c      	movs	r4, r1
   148e0:	0019      	movs	r1, r3
   148e2:	0022      	movs	r2, r4
   148e4:	4b31      	ldr	r3, [pc, #196]	; (149ac <_i2c_master_set_config+0x37c>)
   148e6:	0008      	movs	r0, r1
   148e8:	0011      	movs	r1, r2
   148ea:	4798      	blx	r3
   148ec:	0003      	movs	r3, r0
   148ee:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   148f0:	693b      	ldr	r3, [r7, #16]
   148f2:	689a      	ldr	r2, [r3, #8]
   148f4:	2380      	movs	r3, #128	; 0x80
   148f6:	049b      	lsls	r3, r3, #18
   148f8:	429a      	cmp	r2, r3
   148fa:	d16a      	bne.n	149d2 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   148fc:	4b22      	ldr	r3, [pc, #136]	; (14988 <_i2c_master_set_config+0x358>)
   148fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14900:	4798      	blx	r3
   14902:	4c25      	ldr	r4, [pc, #148]	; (14998 <_i2c_master_set_config+0x368>)
   14904:	0002      	movs	r2, r0
   14906:	000b      	movs	r3, r1
   14908:	47a0      	blx	r4
   1490a:	0003      	movs	r3, r0
   1490c:	000c      	movs	r4, r1
   1490e:	001d      	movs	r5, r3
   14910:	0026      	movs	r6, r4
   14912:	4b1d      	ldr	r3, [pc, #116]	; (14988 <_i2c_master_set_config+0x358>)
   14914:	6a78      	ldr	r0, [r7, #36]	; 0x24
   14916:	4798      	blx	r3
   14918:	4c1c      	ldr	r4, [pc, #112]	; (1498c <_i2c_master_set_config+0x35c>)
   1491a:	2200      	movs	r2, #0
   1491c:	4b24      	ldr	r3, [pc, #144]	; (149b0 <_i2c_master_set_config+0x380>)
   1491e:	47a0      	blx	r4
   14920:	0003      	movs	r3, r0
   14922:	000c      	movs	r4, r1
   14924:	001a      	movs	r2, r3
   14926:	0023      	movs	r3, r4
   14928:	4c1f      	ldr	r4, [pc, #124]	; (149a8 <_i2c_master_set_config+0x378>)
   1492a:	0028      	movs	r0, r5
   1492c:	0031      	movs	r1, r6
   1492e:	47a0      	blx	r4
   14930:	0003      	movs	r3, r0
   14932:	000c      	movs	r4, r1
   14934:	0018      	movs	r0, r3
   14936:	0021      	movs	r1, r4
   14938:	4c19      	ldr	r4, [pc, #100]	; (149a0 <_i2c_master_set_config+0x370>)
   1493a:	2200      	movs	r2, #0
   1493c:	4b19      	ldr	r3, [pc, #100]	; (149a4 <_i2c_master_set_config+0x374>)
   1493e:	47a0      	blx	r4
   14940:	0003      	movs	r3, r0
   14942:	000c      	movs	r4, r1
   14944:	0019      	movs	r1, r3
   14946:	0022      	movs	r2, r4
   14948:	4b18      	ldr	r3, [pc, #96]	; (149ac <_i2c_master_set_config+0x37c>)
   1494a:	0008      	movs	r0, r1
   1494c:	0011      	movs	r1, r2
   1494e:	4798      	blx	r3
   14950:	0003      	movs	r3, r0
   14952:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   14954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14956:	2b00      	cmp	r3, #0
   14958:	d02e      	beq.n	149b8 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   1495a:	4b16      	ldr	r3, [pc, #88]	; (149b4 <_i2c_master_set_config+0x384>)
   1495c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1495e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14960:	4798      	blx	r3
   14962:	0003      	movs	r3, r0
   14964:	1e9a      	subs	r2, r3, #2
   14966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14968:	1ad3      	subs	r3, r2, r3
   1496a:	653b      	str	r3, [r7, #80]	; 0x50
   1496c:	e031      	b.n	149d2 <_i2c_master_set_config+0x3a2>
   1496e:	46c0      	nop			; (mov r8, r8)
   14970:	00018a65 	.word	0x00018a65
   14974:	000144f1 	.word	0x000144f1
   14978:	000188a9 	.word	0x000188a9
   1497c:	0001a665 	.word	0x0001a665
   14980:	00014519 	.word	0x00014519
   14984:	0001a429 	.word	0x0001a429
   14988:	0001c491 	.word	0x0001c491
   1498c:	0001b8fd 	.word	0x0001b8fd
   14990:	e826d695 	.word	0xe826d695
   14994:	3e112e0b 	.word	0x3e112e0b
   14998:	0001ac75 	.word	0x0001ac75
   1499c:	40240000 	.word	0x40240000
   149a0:	0001bdfd 	.word	0x0001bdfd
   149a4:	3ff00000 	.word	0x3ff00000
   149a8:	0001b295 	.word	0x0001b295
   149ac:	0001c429 	.word	0x0001c429
   149b0:	40080000 	.word	0x40080000
   149b4:	0001ab09 	.word	0x0001ab09
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   149b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   149ba:	005a      	lsls	r2, r3, #1
   149bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   149be:	18d3      	adds	r3, r2, r3
   149c0:	1e5a      	subs	r2, r3, #1
   149c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   149c4:	0059      	lsls	r1, r3, #1
   149c6:	4b1d      	ldr	r3, [pc, #116]	; (14a3c <_i2c_master_set_config+0x40c>)
   149c8:	0010      	movs	r0, r2
   149ca:	4798      	blx	r3
   149cc:	0003      	movs	r3, r0
   149ce:	3b01      	subs	r3, #1
   149d0:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   149d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   149d4:	2bff      	cmp	r3, #255	; 0xff
   149d6:	dc08      	bgt.n	149ea <_i2c_master_set_config+0x3ba>
   149d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   149da:	2b00      	cmp	r3, #0
   149dc:	db05      	blt.n	149ea <_i2c_master_set_config+0x3ba>
   149de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   149e0:	2bff      	cmp	r3, #255	; 0xff
   149e2:	dc02      	bgt.n	149ea <_i2c_master_set_config+0x3ba>
   149e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   149e6:	2b00      	cmp	r3, #0
   149e8:	da06      	bge.n	149f8 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   149ea:	233b      	movs	r3, #59	; 0x3b
   149ec:	2210      	movs	r2, #16
   149ee:	4694      	mov	ip, r2
   149f0:	44bc      	add	ip, r7
   149f2:	4463      	add	r3, ip
   149f4:	2240      	movs	r2, #64	; 0x40
   149f6:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   149f8:	233b      	movs	r3, #59	; 0x3b
   149fa:	2210      	movs	r2, #16
   149fc:	4694      	mov	ip, r2
   149fe:	44bc      	add	ip, r7
   14a00:	4463      	add	r3, ip
   14a02:	781b      	ldrb	r3, [r3, #0]
   14a04:	2b40      	cmp	r3, #64	; 0x40
   14a06:	d00e      	beq.n	14a26 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   14a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14a0a:	22ff      	movs	r2, #255	; 0xff
   14a0c:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   14a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   14a10:	041b      	lsls	r3, r3, #16
   14a12:	0019      	movs	r1, r3
   14a14:	23ff      	movs	r3, #255	; 0xff
   14a16:	041b      	lsls	r3, r3, #16
   14a18:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   14a1a:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   14a1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   14a1e:	0612      	lsls	r2, r2, #24
   14a20:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   14a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14a24:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   14a26:	233b      	movs	r3, #59	; 0x3b
   14a28:	2210      	movs	r2, #16
   14a2a:	4694      	mov	ip, r2
   14a2c:	44bc      	add	ip, r7
   14a2e:	4463      	add	r3, ip
   14a30:	781b      	ldrb	r3, [r3, #0]
}
   14a32:	0018      	movs	r0, r3
   14a34:	46bd      	mov	sp, r7
   14a36:	b017      	add	sp, #92	; 0x5c
   14a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14a3a:	46c0      	nop			; (mov r8, r8)
   14a3c:	0001ab09 	.word	0x0001ab09

00014a40 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   14a40:	b590      	push	{r4, r7, lr}
   14a42:	b08b      	sub	sp, #44	; 0x2c
   14a44:	af00      	add	r7, sp, #0
   14a46:	60f8      	str	r0, [r7, #12]
   14a48:	60b9      	str	r1, [r7, #8]
   14a4a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   14a4c:	68fb      	ldr	r3, [r7, #12]
   14a4e:	68ba      	ldr	r2, [r7, #8]
   14a50:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14a52:	68fb      	ldr	r3, [r7, #12]
   14a54:	681b      	ldr	r3, [r3, #0]
   14a56:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   14a58:	68fb      	ldr	r3, [r7, #12]
   14a5a:	681b      	ldr	r3, [r3, #0]
   14a5c:	0018      	movs	r0, r3
   14a5e:	4b3b      	ldr	r3, [pc, #236]	; (14b4c <i2c_master_init+0x10c>)
   14a60:	4798      	blx	r3
   14a62:	0003      	movs	r3, r0
   14a64:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   14a66:	6a3b      	ldr	r3, [r7, #32]
   14a68:	3302      	adds	r3, #2
   14a6a:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   14a6c:	6a3b      	ldr	r3, [r7, #32]
   14a6e:	3314      	adds	r3, #20
   14a70:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   14a72:	2201      	movs	r2, #1
   14a74:	69fb      	ldr	r3, [r7, #28]
   14a76:	409a      	lsls	r2, r3
   14a78:	0013      	movs	r3, r2
   14a7a:	0019      	movs	r1, r3
   14a7c:	2002      	movs	r0, #2
   14a7e:	4b34      	ldr	r3, [pc, #208]	; (14b50 <i2c_master_init+0x110>)
   14a80:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   14a82:	2314      	movs	r3, #20
   14a84:	18fb      	adds	r3, r7, r3
   14a86:	0018      	movs	r0, r3
   14a88:	4b32      	ldr	r3, [pc, #200]	; (14b54 <i2c_master_init+0x114>)
   14a8a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   14a8c:	687b      	ldr	r3, [r7, #4]
   14a8e:	7b1a      	ldrb	r2, [r3, #12]
   14a90:	2314      	movs	r3, #20
   14a92:	18fb      	adds	r3, r7, r3
   14a94:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   14a96:	69bb      	ldr	r3, [r7, #24]
   14a98:	b2db      	uxtb	r3, r3
   14a9a:	2214      	movs	r2, #20
   14a9c:	18ba      	adds	r2, r7, r2
   14a9e:	0011      	movs	r1, r2
   14aa0:	0018      	movs	r0, r3
   14aa2:	4b2d      	ldr	r3, [pc, #180]	; (14b58 <i2c_master_init+0x118>)
   14aa4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   14aa6:	69bb      	ldr	r3, [r7, #24]
   14aa8:	b2db      	uxtb	r3, r3
   14aaa:	0018      	movs	r0, r3
   14aac:	4b2b      	ldr	r3, [pc, #172]	; (14b5c <i2c_master_init+0x11c>)
   14aae:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   14ab0:	687b      	ldr	r3, [r7, #4]
   14ab2:	7b1b      	ldrb	r3, [r3, #12]
   14ab4:	2100      	movs	r1, #0
   14ab6:	0018      	movs	r0, r3
   14ab8:	4b29      	ldr	r3, [pc, #164]	; (14b60 <i2c_master_init+0x120>)
   14aba:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   14abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14abe:	681b      	ldr	r3, [r3, #0]
   14ac0:	2202      	movs	r2, #2
   14ac2:	4013      	ands	r3, r2
   14ac4:	d001      	beq.n	14aca <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   14ac6:	231c      	movs	r3, #28
   14ac8:	e03b      	b.n	14b42 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   14aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14acc:	681b      	ldr	r3, [r3, #0]
   14ace:	2201      	movs	r2, #1
   14ad0:	4013      	ands	r3, r2
   14ad2:	d001      	beq.n	14ad8 <i2c_master_init+0x98>
		return STATUS_BUSY;
   14ad4:	2305      	movs	r3, #5
   14ad6:	e034      	b.n	14b42 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   14ad8:	68fb      	ldr	r3, [r7, #12]
   14ada:	681b      	ldr	r3, [r3, #0]
   14adc:	2217      	movs	r2, #23
   14ade:	18bc      	adds	r4, r7, r2
   14ae0:	0018      	movs	r0, r3
   14ae2:	4b1a      	ldr	r3, [pc, #104]	; (14b4c <i2c_master_init+0x10c>)
   14ae4:	4798      	blx	r3
   14ae6:	0003      	movs	r3, r0
   14ae8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   14aea:	4a1e      	ldr	r2, [pc, #120]	; (14b64 <i2c_master_init+0x124>)
   14aec:	2317      	movs	r3, #23
   14aee:	18fb      	adds	r3, r7, r3
   14af0:	781b      	ldrb	r3, [r3, #0]
   14af2:	0011      	movs	r1, r2
   14af4:	0018      	movs	r0, r3
   14af6:	4b1c      	ldr	r3, [pc, #112]	; (14b68 <i2c_master_init+0x128>)
   14af8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   14afa:	2317      	movs	r3, #23
   14afc:	18fb      	adds	r3, r7, r3
   14afe:	781a      	ldrb	r2, [r3, #0]
   14b00:	4b1a      	ldr	r3, [pc, #104]	; (14b6c <i2c_master_init+0x12c>)
   14b02:	0092      	lsls	r2, r2, #2
   14b04:	68f9      	ldr	r1, [r7, #12]
   14b06:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   14b08:	68fb      	ldr	r3, [r7, #12]
   14b0a:	2200      	movs	r2, #0
   14b0c:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   14b0e:	68fb      	ldr	r3, [r7, #12]
   14b10:	2200      	movs	r2, #0
   14b12:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   14b14:	68fb      	ldr	r3, [r7, #12]
   14b16:	2200      	movs	r2, #0
   14b18:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   14b1a:	68fb      	ldr	r3, [r7, #12]
   14b1c:	2200      	movs	r2, #0
   14b1e:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   14b20:	68fb      	ldr	r3, [r7, #12]
   14b22:	2225      	movs	r2, #37	; 0x25
   14b24:	2100      	movs	r1, #0
   14b26:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   14b28:	68fb      	ldr	r3, [r7, #12]
   14b2a:	2200      	movs	r2, #0
   14b2c:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   14b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14b30:	2214      	movs	r2, #20
   14b32:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   14b34:	687a      	ldr	r2, [r7, #4]
   14b36:	68fb      	ldr	r3, [r7, #12]
   14b38:	0011      	movs	r1, r2
   14b3a:	0018      	movs	r0, r3
   14b3c:	4b0c      	ldr	r3, [pc, #48]	; (14b70 <i2c_master_init+0x130>)
   14b3e:	4798      	blx	r3
   14b40:	0003      	movs	r3, r0
}
   14b42:	0018      	movs	r0, r3
   14b44:	46bd      	mov	sp, r7
   14b46:	b00b      	add	sp, #44	; 0x2c
   14b48:	bd90      	pop	{r4, r7, pc}
   14b4a:	46c0      	nop			; (mov r8, r8)
   14b4c:	00018a65 	.word	0x00018a65
   14b50:	00014495 	.word	0x00014495
   14b54:	0001447d 	.word	0x0001447d
   14b58:	0001a305 	.word	0x0001a305
   14b5c:	0001a349 	.word	0x0001a349
   14b60:	0001881d 	.word	0x0001881d
   14b64:	00012689 	.word	0x00012689
   14b68:	00018ac9 	.word	0x00018ac9
   14b6c:	20003310 	.word	0x20003310
   14b70:	00014631 	.word	0x00014631

00014b74 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   14b74:	b580      	push	{r7, lr}
   14b76:	b084      	sub	sp, #16
   14b78:	af00      	add	r7, sp, #0
   14b7a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14b7c:	687b      	ldr	r3, [r7, #4]
   14b7e:	681b      	ldr	r3, [r3, #0]
   14b80:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   14b82:	687b      	ldr	r3, [r7, #4]
   14b84:	0018      	movs	r0, r3
   14b86:	4b0f      	ldr	r3, [pc, #60]	; (14bc4 <i2c_master_reset+0x50>)
   14b88:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   14b8a:	687b      	ldr	r3, [r7, #4]
   14b8c:	0018      	movs	r0, r3
   14b8e:	4b0e      	ldr	r3, [pc, #56]	; (14bc8 <i2c_master_reset+0x54>)
   14b90:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   14b92:	4b0e      	ldr	r3, [pc, #56]	; (14bcc <i2c_master_reset+0x58>)
   14b94:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   14b96:	687b      	ldr	r3, [r7, #4]
   14b98:	681b      	ldr	r3, [r3, #0]
   14b9a:	0018      	movs	r0, r3
   14b9c:	4b0c      	ldr	r3, [pc, #48]	; (14bd0 <i2c_master_reset+0x5c>)
   14b9e:	4798      	blx	r3
   14ba0:	0003      	movs	r3, r0
   14ba2:	0018      	movs	r0, r3
   14ba4:	4b0b      	ldr	r3, [pc, #44]	; (14bd4 <i2c_master_reset+0x60>)
   14ba6:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   14ba8:	4b0b      	ldr	r3, [pc, #44]	; (14bd8 <i2c_master_reset+0x64>)
   14baa:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   14bac:	687b      	ldr	r3, [r7, #4]
   14bae:	0018      	movs	r0, r3
   14bb0:	4b04      	ldr	r3, [pc, #16]	; (14bc4 <i2c_master_reset+0x50>)
   14bb2:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   14bb4:	68fb      	ldr	r3, [r7, #12]
   14bb6:	2201      	movs	r2, #1
   14bb8:	601a      	str	r2, [r3, #0]
}
   14bba:	46c0      	nop			; (mov r8, r8)
   14bbc:	46bd      	mov	sp, r7
   14bbe:	b004      	add	sp, #16
   14bc0:	bd80      	pop	{r7, pc}
   14bc2:	46c0      	nop			; (mov r8, r8)
   14bc4:	000145b5 	.word	0x000145b5
   14bc8:	000145d9 	.word	0x000145d9
   14bcc:	00014539 	.word	0x00014539
   14bd0:	00018b35 	.word	0x00018b35
   14bd4:	0001a481 	.word	0x0001a481
   14bd8:	0001454d 	.word	0x0001454d

00014bdc <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   14bdc:	b580      	push	{r7, lr}
   14bde:	b084      	sub	sp, #16
   14be0:	af00      	add	r7, sp, #0
   14be2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14be4:	687b      	ldr	r3, [r7, #4]
   14be6:	681b      	ldr	r3, [r3, #0]
   14be8:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   14bea:	68fb      	ldr	r3, [r7, #12]
   14bec:	7e1b      	ldrb	r3, [r3, #24]
   14bee:	b2db      	uxtb	r3, r3
   14bf0:	001a      	movs	r2, r3
   14bf2:	2302      	movs	r3, #2
   14bf4:	4013      	ands	r3, r2
   14bf6:	d00b      	beq.n	14c10 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   14bf8:	68fb      	ldr	r3, [r7, #12]
   14bfa:	2202      	movs	r2, #2
   14bfc:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   14bfe:	68fb      	ldr	r3, [r7, #12]
   14c00:	8b5b      	ldrh	r3, [r3, #26]
   14c02:	b29b      	uxth	r3, r3
   14c04:	001a      	movs	r2, r3
   14c06:	2302      	movs	r3, #2
   14c08:	4013      	ands	r3, r2
   14c0a:	d011      	beq.n	14c30 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   14c0c:	2341      	movs	r3, #65	; 0x41
   14c0e:	e010      	b.n	14c32 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   14c10:	68fb      	ldr	r3, [r7, #12]
   14c12:	8b5b      	ldrh	r3, [r3, #26]
   14c14:	b29b      	uxth	r3, r3
   14c16:	001a      	movs	r2, r3
   14c18:	2304      	movs	r3, #4
   14c1a:	4013      	ands	r3, r2
   14c1c:	d008      	beq.n	14c30 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   14c1e:	68fb      	ldr	r3, [r7, #12]
   14c20:	685b      	ldr	r3, [r3, #4]
   14c22:	22c0      	movs	r2, #192	; 0xc0
   14c24:	0292      	lsls	r2, r2, #10
   14c26:	431a      	orrs	r2, r3
   14c28:	68fb      	ldr	r3, [r7, #12]
   14c2a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   14c2c:	2318      	movs	r3, #24
   14c2e:	e000      	b.n	14c32 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   14c30:	2300      	movs	r3, #0
}
   14c32:	0018      	movs	r0, r3
   14c34:	46bd      	mov	sp, r7
   14c36:	b004      	add	sp, #16
   14c38:	bd80      	pop	{r7, pc}

00014c3a <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   14c3a:	b580      	push	{r7, lr}
   14c3c:	b084      	sub	sp, #16
   14c3e:	af00      	add	r7, sp, #0
   14c40:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14c42:	687b      	ldr	r3, [r7, #4]
   14c44:	681b      	ldr	r3, [r3, #0]
   14c46:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   14c48:	230e      	movs	r3, #14
   14c4a:	18fb      	adds	r3, r7, r3
   14c4c:	2200      	movs	r2, #0
   14c4e:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   14c50:	e00f      	b.n	14c72 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   14c52:	230e      	movs	r3, #14
   14c54:	18fb      	adds	r3, r7, r3
   14c56:	220e      	movs	r2, #14
   14c58:	18ba      	adds	r2, r7, r2
   14c5a:	8812      	ldrh	r2, [r2, #0]
   14c5c:	3201      	adds	r2, #1
   14c5e:	801a      	strh	r2, [r3, #0]
   14c60:	687b      	ldr	r3, [r7, #4]
   14c62:	891b      	ldrh	r3, [r3, #8]
   14c64:	220e      	movs	r2, #14
   14c66:	18ba      	adds	r2, r7, r2
   14c68:	8812      	ldrh	r2, [r2, #0]
   14c6a:	429a      	cmp	r2, r3
   14c6c:	d301      	bcc.n	14c72 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   14c6e:	2312      	movs	r3, #18
   14c70:	e00e      	b.n	14c90 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   14c72:	68bb      	ldr	r3, [r7, #8]
   14c74:	7e1b      	ldrb	r3, [r3, #24]
   14c76:	b2db      	uxtb	r3, r3
   14c78:	001a      	movs	r2, r3
   14c7a:	2301      	movs	r3, #1
   14c7c:	4013      	ands	r3, r2
   14c7e:	d106      	bne.n	14c8e <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   14c80:	68bb      	ldr	r3, [r7, #8]
   14c82:	7e1b      	ldrb	r3, [r3, #24]
   14c84:	b2db      	uxtb	r3, r3
   14c86:	001a      	movs	r2, r3
   14c88:	2302      	movs	r3, #2
   14c8a:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   14c8c:	d0e1      	beq.n	14c52 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   14c8e:	2300      	movs	r3, #0
}
   14c90:	0018      	movs	r0, r3
   14c92:	46bd      	mov	sp, r7
   14c94:	b004      	add	sp, #16
   14c96:	bd80      	pop	{r7, pc}

00014c98 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   14c98:	b590      	push	{r4, r7, lr}
   14c9a:	b085      	sub	sp, #20
   14c9c:	af00      	add	r7, sp, #0
   14c9e:	6078      	str	r0, [r7, #4]
   14ca0:	000a      	movs	r2, r1
   14ca2:	1cfb      	adds	r3, r7, #3
   14ca4:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14ca6:	687b      	ldr	r3, [r7, #4]
   14ca8:	681b      	ldr	r3, [r3, #0]
   14caa:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   14cac:	68fb      	ldr	r3, [r7, #12]
   14cae:	685b      	ldr	r3, [r3, #4]
   14cb0:	2280      	movs	r2, #128	; 0x80
   14cb2:	02d2      	lsls	r2, r2, #11
   14cb4:	431a      	orrs	r2, r3
   14cb6:	68fb      	ldr	r3, [r7, #12]
   14cb8:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   14cba:	1cfb      	adds	r3, r7, #3
   14cbc:	781a      	ldrb	r2, [r3, #0]
   14cbe:	68fb      	ldr	r3, [r7, #12]
   14cc0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   14cc2:	230b      	movs	r3, #11
   14cc4:	18fc      	adds	r4, r7, r3
   14cc6:	687b      	ldr	r3, [r7, #4]
   14cc8:	0018      	movs	r0, r3
   14cca:	4b07      	ldr	r3, [pc, #28]	; (14ce8 <_i2c_master_send_hs_master_code+0x50>)
   14ccc:	4798      	blx	r3
   14cce:	0003      	movs	r3, r0
   14cd0:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   14cd2:	68fb      	ldr	r3, [r7, #12]
   14cd4:	2201      	movs	r2, #1
   14cd6:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   14cd8:	230b      	movs	r3, #11
   14cda:	18fb      	adds	r3, r7, r3
   14cdc:	781b      	ldrb	r3, [r3, #0]
}
   14cde:	0018      	movs	r0, r3
   14ce0:	46bd      	mov	sp, r7
   14ce2:	b005      	add	sp, #20
   14ce4:	bd90      	pop	{r4, r7, pc}
   14ce6:	46c0      	nop			; (mov r8, r8)
   14ce8:	00014c3b 	.word	0x00014c3b

00014cec <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   14cec:	b580      	push	{r7, lr}
   14cee:	af00      	add	r7, sp, #0
   14cf0:	2000      	movs	r0, #0
   14cf2:	4b02      	ldr	r3, [pc, #8]	; (14cfc <TC3_Handler+0x10>)
   14cf4:	4798      	blx	r3
   14cf6:	46c0      	nop			; (mov r8, r8)
   14cf8:	46bd      	mov	sp, r7
   14cfa:	bd80      	pop	{r7, pc}
   14cfc:	00014d29 	.word	0x00014d29

00014d00 <TC4_Handler>:
   14d00:	b580      	push	{r7, lr}
   14d02:	af00      	add	r7, sp, #0
   14d04:	2001      	movs	r0, #1
   14d06:	4b02      	ldr	r3, [pc, #8]	; (14d10 <TC4_Handler+0x10>)
   14d08:	4798      	blx	r3
   14d0a:	46c0      	nop			; (mov r8, r8)
   14d0c:	46bd      	mov	sp, r7
   14d0e:	bd80      	pop	{r7, pc}
   14d10:	00014d29 	.word	0x00014d29

00014d14 <TC5_Handler>:
   14d14:	b580      	push	{r7, lr}
   14d16:	af00      	add	r7, sp, #0
   14d18:	2002      	movs	r0, #2
   14d1a:	4b02      	ldr	r3, [pc, #8]	; (14d24 <TC5_Handler+0x10>)
   14d1c:	4798      	blx	r3
   14d1e:	46c0      	nop			; (mov r8, r8)
   14d20:	46bd      	mov	sp, r7
   14d22:	bd80      	pop	{r7, pc}
   14d24:	00014d29 	.word	0x00014d29

00014d28 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   14d28:	b580      	push	{r7, lr}
   14d2a:	b084      	sub	sp, #16
   14d2c:	af00      	add	r7, sp, #0
   14d2e:	0002      	movs	r2, r0
   14d30:	1dfb      	adds	r3, r7, #7
   14d32:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   14d34:	1dfb      	adds	r3, r7, #7
   14d36:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   14d38:	4b28      	ldr	r3, [pc, #160]	; (14ddc <_tc_interrupt_handler+0xb4>)
   14d3a:	0092      	lsls	r2, r2, #2
   14d3c:	58d3      	ldr	r3, [r2, r3]
   14d3e:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   14d40:	68fb      	ldr	r3, [r7, #12]
   14d42:	681b      	ldr	r3, [r3, #0]
   14d44:	7b9b      	ldrb	r3, [r3, #14]
   14d46:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   14d48:	68fa      	ldr	r2, [r7, #12]
   14d4a:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   14d4c:	4013      	ands	r3, r2
   14d4e:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   14d50:	68fb      	ldr	r3, [r7, #12]
   14d52:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   14d54:	230b      	movs	r3, #11
   14d56:	18fb      	adds	r3, r7, r3
   14d58:	400a      	ands	r2, r1
   14d5a:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   14d5c:	230b      	movs	r3, #11
   14d5e:	18fb      	adds	r3, r7, r3
   14d60:	781b      	ldrb	r3, [r3, #0]
   14d62:	2201      	movs	r2, #1
   14d64:	4013      	ands	r3, r2
   14d66:	d008      	beq.n	14d7a <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   14d68:	68fb      	ldr	r3, [r7, #12]
   14d6a:	689b      	ldr	r3, [r3, #8]
   14d6c:	68fa      	ldr	r2, [r7, #12]
   14d6e:	0010      	movs	r0, r2
   14d70:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   14d72:	68fb      	ldr	r3, [r7, #12]
   14d74:	681b      	ldr	r3, [r3, #0]
   14d76:	2201      	movs	r2, #1
   14d78:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   14d7a:	230b      	movs	r3, #11
   14d7c:	18fb      	adds	r3, r7, r3
   14d7e:	781b      	ldrb	r3, [r3, #0]
   14d80:	2202      	movs	r2, #2
   14d82:	4013      	ands	r3, r2
   14d84:	d008      	beq.n	14d98 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   14d86:	68fb      	ldr	r3, [r7, #12]
   14d88:	68db      	ldr	r3, [r3, #12]
   14d8a:	68fa      	ldr	r2, [r7, #12]
   14d8c:	0010      	movs	r0, r2
   14d8e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   14d90:	68fb      	ldr	r3, [r7, #12]
   14d92:	681b      	ldr	r3, [r3, #0]
   14d94:	2202      	movs	r2, #2
   14d96:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   14d98:	230b      	movs	r3, #11
   14d9a:	18fb      	adds	r3, r7, r3
   14d9c:	781b      	ldrb	r3, [r3, #0]
   14d9e:	2210      	movs	r2, #16
   14da0:	4013      	ands	r3, r2
   14da2:	d008      	beq.n	14db6 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   14da4:	68fb      	ldr	r3, [r7, #12]
   14da6:	691b      	ldr	r3, [r3, #16]
   14da8:	68fa      	ldr	r2, [r7, #12]
   14daa:	0010      	movs	r0, r2
   14dac:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   14dae:	68fb      	ldr	r3, [r7, #12]
   14db0:	681b      	ldr	r3, [r3, #0]
   14db2:	2210      	movs	r2, #16
   14db4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   14db6:	230b      	movs	r3, #11
   14db8:	18fb      	adds	r3, r7, r3
   14dba:	781b      	ldrb	r3, [r3, #0]
   14dbc:	2220      	movs	r2, #32
   14dbe:	4013      	ands	r3, r2
   14dc0:	d008      	beq.n	14dd4 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   14dc2:	68fb      	ldr	r3, [r7, #12]
   14dc4:	695b      	ldr	r3, [r3, #20]
   14dc6:	68fa      	ldr	r2, [r7, #12]
   14dc8:	0010      	movs	r0, r2
   14dca:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   14dcc:	68fb      	ldr	r3, [r7, #12]
   14dce:	681b      	ldr	r3, [r3, #0]
   14dd0:	2220      	movs	r2, #32
   14dd2:	739a      	strb	r2, [r3, #14]
	}
}
   14dd4:	46c0      	nop			; (mov r8, r8)
   14dd6:	46bd      	mov	sp, r7
   14dd8:	b004      	add	sp, #16
   14dda:	bd80      	pop	{r7, pc}
   14ddc:	20002df8 	.word	0x20002df8

00014de0 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   14de0:	b580      	push	{r7, lr}
   14de2:	b084      	sub	sp, #16
   14de4:	af00      	add	r7, sp, #0
   14de6:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   14de8:	2300      	movs	r3, #0
   14dea:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   14dec:	687b      	ldr	r3, [r7, #4]
   14dee:	2b00      	cmp	r3, #0
   14df0:	d101      	bne.n	14df6 <FreeRTOS_CLIRegisterCommand+0x16>
   14df2:	b672      	cpsid	i
   14df4:	e7fe      	b.n	14df4 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   14df6:	2008      	movs	r0, #8
   14df8:	4b11      	ldr	r3, [pc, #68]	; (14e40 <FreeRTOS_CLIRegisterCommand+0x60>)
   14dfa:	4798      	blx	r3
   14dfc:	0003      	movs	r3, r0
   14dfe:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   14e00:	68bb      	ldr	r3, [r7, #8]
   14e02:	2b00      	cmp	r3, #0
   14e04:	d101      	bne.n	14e0a <FreeRTOS_CLIRegisterCommand+0x2a>
   14e06:	b672      	cpsid	i
   14e08:	e7fe      	b.n	14e08 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   14e0a:	68bb      	ldr	r3, [r7, #8]
   14e0c:	2b00      	cmp	r3, #0
   14e0e:	d012      	beq.n	14e36 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   14e10:	4b0c      	ldr	r3, [pc, #48]	; (14e44 <FreeRTOS_CLIRegisterCommand+0x64>)
   14e12:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   14e14:	68bb      	ldr	r3, [r7, #8]
   14e16:	687a      	ldr	r2, [r7, #4]
   14e18:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   14e1a:	68bb      	ldr	r3, [r7, #8]
   14e1c:	2200      	movs	r2, #0
   14e1e:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   14e20:	4b09      	ldr	r3, [pc, #36]	; (14e48 <FreeRTOS_CLIRegisterCommand+0x68>)
   14e22:	681b      	ldr	r3, [r3, #0]
   14e24:	68ba      	ldr	r2, [r7, #8]
   14e26:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   14e28:	4b07      	ldr	r3, [pc, #28]	; (14e48 <FreeRTOS_CLIRegisterCommand+0x68>)
   14e2a:	68ba      	ldr	r2, [r7, #8]
   14e2c:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   14e2e:	4b07      	ldr	r3, [pc, #28]	; (14e4c <FreeRTOS_CLIRegisterCommand+0x6c>)
   14e30:	4798      	blx	r3

		xReturn = pdPASS;
   14e32:	2301      	movs	r3, #1
   14e34:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   14e36:	68fb      	ldr	r3, [r7, #12]
}
   14e38:	0018      	movs	r0, r3
   14e3a:	46bd      	mov	sp, r7
   14e3c:	b004      	add	sp, #16
   14e3e:	bd80      	pop	{r7, pc}
   14e40:	000154c1 	.word	0x000154c1
   14e44:	00015389 	.word	0x00015389
   14e48:	2000001c 	.word	0x2000001c
   14e4c:	000153ad 	.word	0x000153ad

00014e50 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   14e50:	b580      	push	{r7, lr}
   14e52:	b088      	sub	sp, #32
   14e54:	af00      	add	r7, sp, #0
   14e56:	60f8      	str	r0, [r7, #12]
   14e58:	60b9      	str	r1, [r7, #8]
   14e5a:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   14e5c:	2301      	movs	r3, #1
   14e5e:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   14e60:	4b3d      	ldr	r3, [pc, #244]	; (14f58 <FreeRTOS_CLIProcessCommand+0x108>)
   14e62:	681b      	ldr	r3, [r3, #0]
   14e64:	2b00      	cmp	r3, #0
   14e66:	d144      	bne.n	14ef2 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   14e68:	4b3b      	ldr	r3, [pc, #236]	; (14f58 <FreeRTOS_CLIProcessCommand+0x108>)
   14e6a:	4a3c      	ldr	r2, [pc, #240]	; (14f5c <FreeRTOS_CLIProcessCommand+0x10c>)
   14e6c:	601a      	str	r2, [r3, #0]
   14e6e:	e03a      	b.n	14ee6 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   14e70:	4b39      	ldr	r3, [pc, #228]	; (14f58 <FreeRTOS_CLIProcessCommand+0x108>)
   14e72:	681b      	ldr	r3, [r3, #0]
   14e74:	681b      	ldr	r3, [r3, #0]
   14e76:	681b      	ldr	r3, [r3, #0]
   14e78:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   14e7a:	69bb      	ldr	r3, [r7, #24]
   14e7c:	0018      	movs	r0, r3
   14e7e:	4b38      	ldr	r3, [pc, #224]	; (14f60 <FreeRTOS_CLIProcessCommand+0x110>)
   14e80:	4798      	blx	r3
   14e82:	0003      	movs	r3, r0
   14e84:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   14e86:	68fa      	ldr	r2, [r7, #12]
   14e88:	697b      	ldr	r3, [r7, #20]
   14e8a:	18d3      	adds	r3, r2, r3
   14e8c:	781b      	ldrb	r3, [r3, #0]
   14e8e:	2b20      	cmp	r3, #32
   14e90:	d005      	beq.n	14e9e <FreeRTOS_CLIProcessCommand+0x4e>
   14e92:	68fa      	ldr	r2, [r7, #12]
   14e94:	697b      	ldr	r3, [r7, #20]
   14e96:	18d3      	adds	r3, r2, r3
   14e98:	781b      	ldrb	r3, [r3, #0]
   14e9a:	2b00      	cmp	r3, #0
   14e9c:	d11e      	bne.n	14edc <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   14e9e:	697a      	ldr	r2, [r7, #20]
   14ea0:	69b9      	ldr	r1, [r7, #24]
   14ea2:	68fb      	ldr	r3, [r7, #12]
   14ea4:	0018      	movs	r0, r3
   14ea6:	4b2f      	ldr	r3, [pc, #188]	; (14f64 <FreeRTOS_CLIProcessCommand+0x114>)
   14ea8:	4798      	blx	r3
   14eaa:	1e03      	subs	r3, r0, #0
   14eac:	d116      	bne.n	14edc <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   14eae:	4b2a      	ldr	r3, [pc, #168]	; (14f58 <FreeRTOS_CLIProcessCommand+0x108>)
   14eb0:	681b      	ldr	r3, [r3, #0]
   14eb2:	681b      	ldr	r3, [r3, #0]
   14eb4:	7b1b      	ldrb	r3, [r3, #12]
   14eb6:	b25b      	sxtb	r3, r3
   14eb8:	2b00      	cmp	r3, #0
   14eba:	db19      	blt.n	14ef0 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   14ebc:	68fb      	ldr	r3, [r7, #12]
   14ebe:	0018      	movs	r0, r3
   14ec0:	4b29      	ldr	r3, [pc, #164]	; (14f68 <FreeRTOS_CLIProcessCommand+0x118>)
   14ec2:	4798      	blx	r3
   14ec4:	0003      	movs	r3, r0
   14ec6:	001a      	movs	r2, r3
   14ec8:	4b23      	ldr	r3, [pc, #140]	; (14f58 <FreeRTOS_CLIProcessCommand+0x108>)
   14eca:	681b      	ldr	r3, [r3, #0]
   14ecc:	681b      	ldr	r3, [r3, #0]
   14ece:	7b1b      	ldrb	r3, [r3, #12]
   14ed0:	b25b      	sxtb	r3, r3
   14ed2:	429a      	cmp	r2, r3
   14ed4:	d00c      	beq.n	14ef0 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   14ed6:	2300      	movs	r3, #0
   14ed8:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   14eda:	e009      	b.n	14ef0 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   14edc:	4b1e      	ldr	r3, [pc, #120]	; (14f58 <FreeRTOS_CLIProcessCommand+0x108>)
   14ede:	681b      	ldr	r3, [r3, #0]
   14ee0:	685a      	ldr	r2, [r3, #4]
   14ee2:	4b1d      	ldr	r3, [pc, #116]	; (14f58 <FreeRTOS_CLIProcessCommand+0x108>)
   14ee4:	601a      	str	r2, [r3, #0]
   14ee6:	4b1c      	ldr	r3, [pc, #112]	; (14f58 <FreeRTOS_CLIProcessCommand+0x108>)
   14ee8:	681b      	ldr	r3, [r3, #0]
   14eea:	2b00      	cmp	r3, #0
   14eec:	d1c0      	bne.n	14e70 <FreeRTOS_CLIProcessCommand+0x20>
   14eee:	e000      	b.n	14ef2 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   14ef0:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   14ef2:	4b19      	ldr	r3, [pc, #100]	; (14f58 <FreeRTOS_CLIProcessCommand+0x108>)
   14ef4:	681b      	ldr	r3, [r3, #0]
   14ef6:	2b00      	cmp	r3, #0
   14ef8:	d00c      	beq.n	14f14 <FreeRTOS_CLIProcessCommand+0xc4>
   14efa:	69fb      	ldr	r3, [r7, #28]
   14efc:	2b00      	cmp	r3, #0
   14efe:	d109      	bne.n	14f14 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   14f00:	687a      	ldr	r2, [r7, #4]
   14f02:	491a      	ldr	r1, [pc, #104]	; (14f6c <FreeRTOS_CLIProcessCommand+0x11c>)
   14f04:	68bb      	ldr	r3, [r7, #8]
   14f06:	0018      	movs	r0, r3
   14f08:	4b19      	ldr	r3, [pc, #100]	; (14f70 <FreeRTOS_CLIProcessCommand+0x120>)
   14f0a:	4798      	blx	r3
		pxCommand = NULL;
   14f0c:	4b12      	ldr	r3, [pc, #72]	; (14f58 <FreeRTOS_CLIProcessCommand+0x108>)
   14f0e:	2200      	movs	r2, #0
   14f10:	601a      	str	r2, [r3, #0]
   14f12:	e01c      	b.n	14f4e <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   14f14:	4b10      	ldr	r3, [pc, #64]	; (14f58 <FreeRTOS_CLIProcessCommand+0x108>)
   14f16:	681b      	ldr	r3, [r3, #0]
   14f18:	2b00      	cmp	r3, #0
   14f1a:	d010      	beq.n	14f3e <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   14f1c:	4b0e      	ldr	r3, [pc, #56]	; (14f58 <FreeRTOS_CLIProcessCommand+0x108>)
   14f1e:	681b      	ldr	r3, [r3, #0]
   14f20:	681b      	ldr	r3, [r3, #0]
   14f22:	689b      	ldr	r3, [r3, #8]
   14f24:	68fa      	ldr	r2, [r7, #12]
   14f26:	6879      	ldr	r1, [r7, #4]
   14f28:	68b8      	ldr	r0, [r7, #8]
   14f2a:	4798      	blx	r3
   14f2c:	0003      	movs	r3, r0
   14f2e:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   14f30:	69fb      	ldr	r3, [r7, #28]
   14f32:	2b00      	cmp	r3, #0
   14f34:	d10b      	bne.n	14f4e <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   14f36:	4b08      	ldr	r3, [pc, #32]	; (14f58 <FreeRTOS_CLIProcessCommand+0x108>)
   14f38:	2200      	movs	r2, #0
   14f3a:	601a      	str	r2, [r3, #0]
   14f3c:	e007      	b.n	14f4e <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   14f3e:	687a      	ldr	r2, [r7, #4]
   14f40:	490c      	ldr	r1, [pc, #48]	; (14f74 <FreeRTOS_CLIProcessCommand+0x124>)
   14f42:	68bb      	ldr	r3, [r7, #8]
   14f44:	0018      	movs	r0, r3
   14f46:	4b0a      	ldr	r3, [pc, #40]	; (14f70 <FreeRTOS_CLIProcessCommand+0x120>)
   14f48:	4798      	blx	r3
		xReturn = pdFALSE;
   14f4a:	2300      	movs	r3, #0
   14f4c:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   14f4e:	69fb      	ldr	r3, [r7, #28]
}
   14f50:	0018      	movs	r0, r3
   14f52:	46bd      	mov	sp, r7
   14f54:	b008      	add	sp, #32
   14f56:	bd80      	pop	{r7, pc}
   14f58:	200004b4 	.word	0x200004b4
   14f5c:	20000014 	.word	0x20000014
   14f60:	0001c845 	.word	0x0001c845
   14f64:	0001c853 	.word	0x0001c853
   14f68:	00015089 	.word	0x00015089
   14f6c:	0001e3e8 	.word	0x0001e3e8
   14f70:	0001c875 	.word	0x0001c875
   14f74:	0001e440 	.word	0x0001e440

00014f78 <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
   14f78:	b580      	push	{r7, lr}
   14f7a:	b086      	sub	sp, #24
   14f7c:	af00      	add	r7, sp, #0
   14f7e:	60f8      	str	r0, [r7, #12]
   14f80:	60b9      	str	r1, [r7, #8]
   14f82:	607a      	str	r2, [r7, #4]
UBaseType_t uxParametersFound = 0;
   14f84:	2300      	movs	r3, #0
   14f86:	617b      	str	r3, [r7, #20]
const char *pcReturn = NULL;
   14f88:	2300      	movs	r3, #0
   14f8a:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
   14f8c:	687b      	ldr	r3, [r7, #4]
   14f8e:	2200      	movs	r2, #0
   14f90:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
   14f92:	e03b      	b.n	1500c <FreeRTOS_CLIGetParameter+0x94>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
   14f94:	68fb      	ldr	r3, [r7, #12]
   14f96:	3301      	adds	r3, #1
   14f98:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   14f9a:	68fb      	ldr	r3, [r7, #12]
   14f9c:	781b      	ldrb	r3, [r3, #0]
   14f9e:	2b00      	cmp	r3, #0
   14fa0:	d007      	beq.n	14fb2 <FreeRTOS_CLIGetParameter+0x3a>
   14fa2:	68fb      	ldr	r3, [r7, #12]
   14fa4:	781b      	ldrb	r3, [r3, #0]
   14fa6:	2b20      	cmp	r3, #32
   14fa8:	d1f4      	bne.n	14f94 <FreeRTOS_CLIGetParameter+0x1c>
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
   14faa:	e002      	b.n	14fb2 <FreeRTOS_CLIGetParameter+0x3a>
		{
			pcCommandString++;
   14fac:	68fb      	ldr	r3, [r7, #12]
   14fae:	3301      	adds	r3, #1
   14fb0:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
   14fb2:	68fb      	ldr	r3, [r7, #12]
   14fb4:	781b      	ldrb	r3, [r3, #0]
   14fb6:	2b00      	cmp	r3, #0
   14fb8:	d003      	beq.n	14fc2 <FreeRTOS_CLIGetParameter+0x4a>
   14fba:	68fb      	ldr	r3, [r7, #12]
   14fbc:	781b      	ldrb	r3, [r3, #0]
   14fbe:	2b20      	cmp	r3, #32
   14fc0:	d0f4      	beq.n	14fac <FreeRTOS_CLIGetParameter+0x34>
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
   14fc2:	68fb      	ldr	r3, [r7, #12]
   14fc4:	781b      	ldrb	r3, [r3, #0]
   14fc6:	2b00      	cmp	r3, #0
   14fc8:	d025      	beq.n	15016 <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
   14fca:	697b      	ldr	r3, [r7, #20]
   14fcc:	3301      	adds	r3, #1
   14fce:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
   14fd0:	697a      	ldr	r2, [r7, #20]
   14fd2:	68bb      	ldr	r3, [r7, #8]
   14fd4:	429a      	cmp	r2, r3
   14fd6:	d119      	bne.n	1500c <FreeRTOS_CLIGetParameter+0x94>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
   14fd8:	68fb      	ldr	r3, [r7, #12]
   14fda:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   14fdc:	e007      	b.n	14fee <FreeRTOS_CLIGetParameter+0x76>
				{
					( *pxParameterStringLength )++;
   14fde:	687b      	ldr	r3, [r7, #4]
   14fe0:	681b      	ldr	r3, [r3, #0]
   14fe2:	1c5a      	adds	r2, r3, #1
   14fe4:	687b      	ldr	r3, [r7, #4]
   14fe6:	601a      	str	r2, [r3, #0]
					pcCommandString++;
   14fe8:	68fb      	ldr	r3, [r7, #12]
   14fea:	3301      	adds	r3, #1
   14fec:	60fb      	str	r3, [r7, #12]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   14fee:	68fb      	ldr	r3, [r7, #12]
   14ff0:	781b      	ldrb	r3, [r3, #0]
   14ff2:	2b00      	cmp	r3, #0
   14ff4:	d003      	beq.n	14ffe <FreeRTOS_CLIGetParameter+0x86>
   14ff6:	68fb      	ldr	r3, [r7, #12]
   14ff8:	781b      	ldrb	r3, [r3, #0]
   14ffa:	2b20      	cmp	r3, #32
   14ffc:	d1ef      	bne.n	14fde <FreeRTOS_CLIGetParameter+0x66>
				}

				if( *pxParameterStringLength == 0 )
   14ffe:	687b      	ldr	r3, [r7, #4]
   15000:	681b      	ldr	r3, [r3, #0]
   15002:	2b00      	cmp	r3, #0
   15004:	d109      	bne.n	1501a <FreeRTOS_CLIGetParameter+0xa2>
				{
					pcReturn = NULL;
   15006:	2300      	movs	r3, #0
   15008:	613b      	str	r3, [r7, #16]
				}

				break;
   1500a:	e006      	b.n	1501a <FreeRTOS_CLIGetParameter+0xa2>
	while( uxParametersFound < uxWantedParameter )
   1500c:	697a      	ldr	r2, [r7, #20]
   1500e:	68bb      	ldr	r3, [r7, #8]
   15010:	429a      	cmp	r2, r3
   15012:	d3c2      	bcc.n	14f9a <FreeRTOS_CLIGetParameter+0x22>
   15014:	e002      	b.n	1501c <FreeRTOS_CLIGetParameter+0xa4>
			}
		}
		else
		{
			break;
   15016:	46c0      	nop			; (mov r8, r8)
   15018:	e000      	b.n	1501c <FreeRTOS_CLIGetParameter+0xa4>
				break;
   1501a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return pcReturn;
   1501c:	693b      	ldr	r3, [r7, #16]
}
   1501e:	0018      	movs	r0, r3
   15020:	46bd      	mov	sp, r7
   15022:	b006      	add	sp, #24
   15024:	bd80      	pop	{r7, pc}
	...

00015028 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   15028:	b580      	push	{r7, lr}
   1502a:	b086      	sub	sp, #24
   1502c:	af00      	add	r7, sp, #0
   1502e:	60f8      	str	r0, [r7, #12]
   15030:	60b9      	str	r1, [r7, #8]
   15032:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   15034:	4b11      	ldr	r3, [pc, #68]	; (1507c <prvHelpCommand+0x54>)
   15036:	681b      	ldr	r3, [r3, #0]
   15038:	2b00      	cmp	r3, #0
   1503a:	d102      	bne.n	15042 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   1503c:	4b0f      	ldr	r3, [pc, #60]	; (1507c <prvHelpCommand+0x54>)
   1503e:	4a10      	ldr	r2, [pc, #64]	; (15080 <prvHelpCommand+0x58>)
   15040:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   15042:	4b0e      	ldr	r3, [pc, #56]	; (1507c <prvHelpCommand+0x54>)
   15044:	681b      	ldr	r3, [r3, #0]
   15046:	681b      	ldr	r3, [r3, #0]
   15048:	6859      	ldr	r1, [r3, #4]
   1504a:	68ba      	ldr	r2, [r7, #8]
   1504c:	68fb      	ldr	r3, [r7, #12]
   1504e:	0018      	movs	r0, r3
   15050:	4b0c      	ldr	r3, [pc, #48]	; (15084 <prvHelpCommand+0x5c>)
   15052:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   15054:	4b09      	ldr	r3, [pc, #36]	; (1507c <prvHelpCommand+0x54>)
   15056:	681b      	ldr	r3, [r3, #0]
   15058:	685a      	ldr	r2, [r3, #4]
   1505a:	4b08      	ldr	r3, [pc, #32]	; (1507c <prvHelpCommand+0x54>)
   1505c:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   1505e:	4b07      	ldr	r3, [pc, #28]	; (1507c <prvHelpCommand+0x54>)
   15060:	681b      	ldr	r3, [r3, #0]
   15062:	2b00      	cmp	r3, #0
   15064:	d102      	bne.n	1506c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   15066:	2300      	movs	r3, #0
   15068:	617b      	str	r3, [r7, #20]
   1506a:	e001      	b.n	15070 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   1506c:	2301      	movs	r3, #1
   1506e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   15070:	697b      	ldr	r3, [r7, #20]
}
   15072:	0018      	movs	r0, r3
   15074:	46bd      	mov	sp, r7
   15076:	b006      	add	sp, #24
   15078:	bd80      	pop	{r7, pc}
   1507a:	46c0      	nop			; (mov r8, r8)
   1507c:	200004b8 	.word	0x200004b8
   15080:	20000014 	.word	0x20000014
   15084:	0001c875 	.word	0x0001c875

00015088 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   15088:	b580      	push	{r7, lr}
   1508a:	b084      	sub	sp, #16
   1508c:	af00      	add	r7, sp, #0
   1508e:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   15090:	230f      	movs	r3, #15
   15092:	18fb      	adds	r3, r7, r3
   15094:	2200      	movs	r2, #0
   15096:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   15098:	2300      	movs	r3, #0
   1509a:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   1509c:	e018      	b.n	150d0 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   1509e:	687b      	ldr	r3, [r7, #4]
   150a0:	781b      	ldrb	r3, [r3, #0]
   150a2:	2b20      	cmp	r3, #32
   150a4:	d10f      	bne.n	150c6 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   150a6:	68bb      	ldr	r3, [r7, #8]
   150a8:	2b01      	cmp	r3, #1
   150aa:	d00e      	beq.n	150ca <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   150ac:	230f      	movs	r3, #15
   150ae:	18fb      	adds	r3, r7, r3
   150b0:	781b      	ldrb	r3, [r3, #0]
   150b2:	b25b      	sxtb	r3, r3
   150b4:	b2db      	uxtb	r3, r3
   150b6:	3301      	adds	r3, #1
   150b8:	b2da      	uxtb	r2, r3
   150ba:	230f      	movs	r3, #15
   150bc:	18fb      	adds	r3, r7, r3
   150be:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   150c0:	2301      	movs	r3, #1
   150c2:	60bb      	str	r3, [r7, #8]
   150c4:	e001      	b.n	150ca <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   150c6:	2300      	movs	r3, #0
   150c8:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   150ca:	687b      	ldr	r3, [r7, #4]
   150cc:	3301      	adds	r3, #1
   150ce:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   150d0:	687b      	ldr	r3, [r7, #4]
   150d2:	781b      	ldrb	r3, [r3, #0]
   150d4:	2b00      	cmp	r3, #0
   150d6:	d1e2      	bne.n	1509e <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   150d8:	68bb      	ldr	r3, [r7, #8]
   150da:	2b01      	cmp	r3, #1
   150dc:	d109      	bne.n	150f2 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   150de:	230f      	movs	r3, #15
   150e0:	18fb      	adds	r3, r7, r3
   150e2:	781b      	ldrb	r3, [r3, #0]
   150e4:	b25b      	sxtb	r3, r3
   150e6:	b2db      	uxtb	r3, r3
   150e8:	3b01      	subs	r3, #1
   150ea:	b2da      	uxtb	r2, r3
   150ec:	230f      	movs	r3, #15
   150ee:	18fb      	adds	r3, r7, r3
   150f0:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   150f2:	230f      	movs	r3, #15
   150f4:	18fb      	adds	r3, r7, r3
   150f6:	781b      	ldrb	r3, [r3, #0]
   150f8:	b25b      	sxtb	r3, r3
}
   150fa:	0018      	movs	r0, r3
   150fc:	46bd      	mov	sp, r7
   150fe:	b004      	add	sp, #16
   15100:	bd80      	pop	{r7, pc}

00015102 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   15102:	b580      	push	{r7, lr}
   15104:	b082      	sub	sp, #8
   15106:	af00      	add	r7, sp, #0
   15108:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1510a:	687b      	ldr	r3, [r7, #4]
   1510c:	3308      	adds	r3, #8
   1510e:	001a      	movs	r2, r3
   15110:	687b      	ldr	r3, [r7, #4]
   15112:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   15114:	687b      	ldr	r3, [r7, #4]
   15116:	2201      	movs	r2, #1
   15118:	4252      	negs	r2, r2
   1511a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1511c:	687b      	ldr	r3, [r7, #4]
   1511e:	3308      	adds	r3, #8
   15120:	001a      	movs	r2, r3
   15122:	687b      	ldr	r3, [r7, #4]
   15124:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   15126:	687b      	ldr	r3, [r7, #4]
   15128:	3308      	adds	r3, #8
   1512a:	001a      	movs	r2, r3
   1512c:	687b      	ldr	r3, [r7, #4]
   1512e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   15130:	687b      	ldr	r3, [r7, #4]
   15132:	2200      	movs	r2, #0
   15134:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   15136:	46c0      	nop			; (mov r8, r8)
   15138:	46bd      	mov	sp, r7
   1513a:	b002      	add	sp, #8
   1513c:	bd80      	pop	{r7, pc}

0001513e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1513e:	b580      	push	{r7, lr}
   15140:	b082      	sub	sp, #8
   15142:	af00      	add	r7, sp, #0
   15144:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   15146:	687b      	ldr	r3, [r7, #4]
   15148:	2200      	movs	r2, #0
   1514a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1514c:	46c0      	nop			; (mov r8, r8)
   1514e:	46bd      	mov	sp, r7
   15150:	b002      	add	sp, #8
   15152:	bd80      	pop	{r7, pc}

00015154 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   15154:	b580      	push	{r7, lr}
   15156:	b084      	sub	sp, #16
   15158:	af00      	add	r7, sp, #0
   1515a:	6078      	str	r0, [r7, #4]
   1515c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1515e:	687b      	ldr	r3, [r7, #4]
   15160:	685b      	ldr	r3, [r3, #4]
   15162:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   15164:	683b      	ldr	r3, [r7, #0]
   15166:	68fa      	ldr	r2, [r7, #12]
   15168:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1516a:	68fb      	ldr	r3, [r7, #12]
   1516c:	689a      	ldr	r2, [r3, #8]
   1516e:	683b      	ldr	r3, [r7, #0]
   15170:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   15172:	68fb      	ldr	r3, [r7, #12]
   15174:	689b      	ldr	r3, [r3, #8]
   15176:	683a      	ldr	r2, [r7, #0]
   15178:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1517a:	68fb      	ldr	r3, [r7, #12]
   1517c:	683a      	ldr	r2, [r7, #0]
   1517e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   15180:	683b      	ldr	r3, [r7, #0]
   15182:	687a      	ldr	r2, [r7, #4]
   15184:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   15186:	687b      	ldr	r3, [r7, #4]
   15188:	681b      	ldr	r3, [r3, #0]
   1518a:	1c5a      	adds	r2, r3, #1
   1518c:	687b      	ldr	r3, [r7, #4]
   1518e:	601a      	str	r2, [r3, #0]
}
   15190:	46c0      	nop			; (mov r8, r8)
   15192:	46bd      	mov	sp, r7
   15194:	b004      	add	sp, #16
   15196:	bd80      	pop	{r7, pc}

00015198 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   15198:	b580      	push	{r7, lr}
   1519a:	b084      	sub	sp, #16
   1519c:	af00      	add	r7, sp, #0
   1519e:	6078      	str	r0, [r7, #4]
   151a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   151a2:	683b      	ldr	r3, [r7, #0]
   151a4:	681b      	ldr	r3, [r3, #0]
   151a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   151a8:	68bb      	ldr	r3, [r7, #8]
   151aa:	3301      	adds	r3, #1
   151ac:	d103      	bne.n	151b6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   151ae:	687b      	ldr	r3, [r7, #4]
   151b0:	691b      	ldr	r3, [r3, #16]
   151b2:	60fb      	str	r3, [r7, #12]
   151b4:	e00c      	b.n	151d0 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   151b6:	687b      	ldr	r3, [r7, #4]
   151b8:	3308      	adds	r3, #8
   151ba:	60fb      	str	r3, [r7, #12]
   151bc:	e002      	b.n	151c4 <vListInsert+0x2c>
   151be:	68fb      	ldr	r3, [r7, #12]
   151c0:	685b      	ldr	r3, [r3, #4]
   151c2:	60fb      	str	r3, [r7, #12]
   151c4:	68fb      	ldr	r3, [r7, #12]
   151c6:	685b      	ldr	r3, [r3, #4]
   151c8:	681a      	ldr	r2, [r3, #0]
   151ca:	68bb      	ldr	r3, [r7, #8]
   151cc:	429a      	cmp	r2, r3
   151ce:	d9f6      	bls.n	151be <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   151d0:	68fb      	ldr	r3, [r7, #12]
   151d2:	685a      	ldr	r2, [r3, #4]
   151d4:	683b      	ldr	r3, [r7, #0]
   151d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   151d8:	683b      	ldr	r3, [r7, #0]
   151da:	685b      	ldr	r3, [r3, #4]
   151dc:	683a      	ldr	r2, [r7, #0]
   151de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   151e0:	683b      	ldr	r3, [r7, #0]
   151e2:	68fa      	ldr	r2, [r7, #12]
   151e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   151e6:	68fb      	ldr	r3, [r7, #12]
   151e8:	683a      	ldr	r2, [r7, #0]
   151ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   151ec:	683b      	ldr	r3, [r7, #0]
   151ee:	687a      	ldr	r2, [r7, #4]
   151f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   151f2:	687b      	ldr	r3, [r7, #4]
   151f4:	681b      	ldr	r3, [r3, #0]
   151f6:	1c5a      	adds	r2, r3, #1
   151f8:	687b      	ldr	r3, [r7, #4]
   151fa:	601a      	str	r2, [r3, #0]
}
   151fc:	46c0      	nop			; (mov r8, r8)
   151fe:	46bd      	mov	sp, r7
   15200:	b004      	add	sp, #16
   15202:	bd80      	pop	{r7, pc}

00015204 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   15204:	b580      	push	{r7, lr}
   15206:	b084      	sub	sp, #16
   15208:	af00      	add	r7, sp, #0
   1520a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1520c:	687b      	ldr	r3, [r7, #4]
   1520e:	691b      	ldr	r3, [r3, #16]
   15210:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   15212:	687b      	ldr	r3, [r7, #4]
   15214:	685b      	ldr	r3, [r3, #4]
   15216:	687a      	ldr	r2, [r7, #4]
   15218:	6892      	ldr	r2, [r2, #8]
   1521a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1521c:	687b      	ldr	r3, [r7, #4]
   1521e:	689b      	ldr	r3, [r3, #8]
   15220:	687a      	ldr	r2, [r7, #4]
   15222:	6852      	ldr	r2, [r2, #4]
   15224:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   15226:	68fb      	ldr	r3, [r7, #12]
   15228:	685a      	ldr	r2, [r3, #4]
   1522a:	687b      	ldr	r3, [r7, #4]
   1522c:	429a      	cmp	r2, r3
   1522e:	d103      	bne.n	15238 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   15230:	687b      	ldr	r3, [r7, #4]
   15232:	689a      	ldr	r2, [r3, #8]
   15234:	68fb      	ldr	r3, [r7, #12]
   15236:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   15238:	687b      	ldr	r3, [r7, #4]
   1523a:	2200      	movs	r2, #0
   1523c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1523e:	68fb      	ldr	r3, [r7, #12]
   15240:	681b      	ldr	r3, [r3, #0]
   15242:	1e5a      	subs	r2, r3, #1
   15244:	68fb      	ldr	r3, [r7, #12]
   15246:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   15248:	68fb      	ldr	r3, [r7, #12]
   1524a:	681b      	ldr	r3, [r3, #0]
}
   1524c:	0018      	movs	r0, r3
   1524e:	46bd      	mov	sp, r7
   15250:	b004      	add	sp, #16
   15252:	bd80      	pop	{r7, pc}

00015254 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   15254:	b580      	push	{r7, lr}
   15256:	b084      	sub	sp, #16
   15258:	af00      	add	r7, sp, #0
   1525a:	60f8      	str	r0, [r7, #12]
   1525c:	60b9      	str	r1, [r7, #8]
   1525e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   15260:	68fb      	ldr	r3, [r7, #12]
   15262:	3b04      	subs	r3, #4
   15264:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   15266:	68fb      	ldr	r3, [r7, #12]
   15268:	2280      	movs	r2, #128	; 0x80
   1526a:	0452      	lsls	r2, r2, #17
   1526c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1526e:	68fb      	ldr	r3, [r7, #12]
   15270:	3b04      	subs	r3, #4
   15272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   15274:	68ba      	ldr	r2, [r7, #8]
   15276:	68fb      	ldr	r3, [r7, #12]
   15278:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1527a:	68fb      	ldr	r3, [r7, #12]
   1527c:	3b04      	subs	r3, #4
   1527e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   15280:	4a08      	ldr	r2, [pc, #32]	; (152a4 <pxPortInitialiseStack+0x50>)
   15282:	68fb      	ldr	r3, [r7, #12]
   15284:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   15286:	68fb      	ldr	r3, [r7, #12]
   15288:	3b14      	subs	r3, #20
   1528a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1528c:	687a      	ldr	r2, [r7, #4]
   1528e:	68fb      	ldr	r3, [r7, #12]
   15290:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   15292:	68fb      	ldr	r3, [r7, #12]
   15294:	3b20      	subs	r3, #32
   15296:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   15298:	68fb      	ldr	r3, [r7, #12]
}
   1529a:	0018      	movs	r0, r3
   1529c:	46bd      	mov	sp, r7
   1529e:	b004      	add	sp, #16
   152a0:	bd80      	pop	{r7, pc}
   152a2:	46c0      	nop			; (mov r8, r8)
   152a4:	000152a9 	.word	0x000152a9

000152a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   152a8:	b580      	push	{r7, lr}
   152aa:	b082      	sub	sp, #8
   152ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   152ae:	2300      	movs	r3, #0
   152b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   152b2:	4b07      	ldr	r3, [pc, #28]	; (152d0 <prvTaskExitError+0x28>)
   152b4:	681b      	ldr	r3, [r3, #0]
   152b6:	3301      	adds	r3, #1
   152b8:	d001      	beq.n	152be <prvTaskExitError+0x16>
   152ba:	b672      	cpsid	i
   152bc:	e7fe      	b.n	152bc <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   152be:	b672      	cpsid	i
	while( ulDummy == 0 )
   152c0:	46c0      	nop			; (mov r8, r8)
   152c2:	687b      	ldr	r3, [r7, #4]
   152c4:	2b00      	cmp	r3, #0
   152c6:	d0fc      	beq.n	152c2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   152c8:	46c0      	nop			; (mov r8, r8)
   152ca:	46bd      	mov	sp, r7
   152cc:	b002      	add	sp, #8
   152ce:	bd80      	pop	{r7, pc}
   152d0:	20000020 	.word	0x20000020

000152d4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   152d4:	b580      	push	{r7, lr}
   152d6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   152d8:	46c0      	nop			; (mov r8, r8)
   152da:	46bd      	mov	sp, r7
   152dc:	bd80      	pop	{r7, pc}
	...

000152e0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   152e0:	4a0b      	ldr	r2, [pc, #44]	; (15310 <pxCurrentTCBConst2>)
   152e2:	6813      	ldr	r3, [r2, #0]
   152e4:	6818      	ldr	r0, [r3, #0]
   152e6:	3020      	adds	r0, #32
   152e8:	f380 8809 	msr	PSP, r0
   152ec:	2002      	movs	r0, #2
   152ee:	f380 8814 	msr	CONTROL, r0
   152f2:	f3bf 8f6f 	isb	sy
   152f6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   152f8:	46ae      	mov	lr, r5
   152fa:	bc08      	pop	{r3}
   152fc:	bc04      	pop	{r2}
   152fe:	b662      	cpsie	i
   15300:	4718      	bx	r3
   15302:	46c0      	nop			; (mov r8, r8)
   15304:	46c0      	nop			; (mov r8, r8)
   15306:	46c0      	nop			; (mov r8, r8)
   15308:	46c0      	nop			; (mov r8, r8)
   1530a:	46c0      	nop			; (mov r8, r8)
   1530c:	46c0      	nop			; (mov r8, r8)
   1530e:	46c0      	nop			; (mov r8, r8)

00015310 <pxCurrentTCBConst2>:
   15310:	20002bd4 	.word	0x20002bd4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   15314:	46c0      	nop			; (mov r8, r8)
   15316:	46c0      	nop			; (mov r8, r8)

00015318 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   15318:	b580      	push	{r7, lr}
   1531a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1531c:	4b0e      	ldr	r3, [pc, #56]	; (15358 <xPortStartScheduler+0x40>)
   1531e:	4a0e      	ldr	r2, [pc, #56]	; (15358 <xPortStartScheduler+0x40>)
   15320:	6812      	ldr	r2, [r2, #0]
   15322:	21ff      	movs	r1, #255	; 0xff
   15324:	0409      	lsls	r1, r1, #16
   15326:	430a      	orrs	r2, r1
   15328:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1532a:	4b0b      	ldr	r3, [pc, #44]	; (15358 <xPortStartScheduler+0x40>)
   1532c:	4a0a      	ldr	r2, [pc, #40]	; (15358 <xPortStartScheduler+0x40>)
   1532e:	6812      	ldr	r2, [r2, #0]
   15330:	21ff      	movs	r1, #255	; 0xff
   15332:	0609      	lsls	r1, r1, #24
   15334:	430a      	orrs	r2, r1
   15336:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   15338:	4b08      	ldr	r3, [pc, #32]	; (1535c <xPortStartScheduler+0x44>)
   1533a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1533c:	4b08      	ldr	r3, [pc, #32]	; (15360 <xPortStartScheduler+0x48>)
   1533e:	2200      	movs	r2, #0
   15340:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   15342:	4b08      	ldr	r3, [pc, #32]	; (15364 <xPortStartScheduler+0x4c>)
   15344:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   15346:	4b08      	ldr	r3, [pc, #32]	; (15368 <xPortStartScheduler+0x50>)
   15348:	4798      	blx	r3
	prvTaskExitError();
   1534a:	4b08      	ldr	r3, [pc, #32]	; (1536c <xPortStartScheduler+0x54>)
   1534c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1534e:	2300      	movs	r3, #0
}
   15350:	0018      	movs	r0, r3
   15352:	46bd      	mov	sp, r7
   15354:	bd80      	pop	{r7, pc}
   15356:	46c0      	nop			; (mov r8, r8)
   15358:	e000ed20 	.word	0xe000ed20
   1535c:	00015479 	.word	0x00015479
   15360:	20000020 	.word	0x20000020
   15364:	000152e1 	.word	0x000152e1
   15368:	00016a11 	.word	0x00016a11
   1536c:	000152a9 	.word	0x000152a9

00015370 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   15370:	b580      	push	{r7, lr}
   15372:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   15374:	4b03      	ldr	r3, [pc, #12]	; (15384 <vPortYield+0x14>)
   15376:	2280      	movs	r2, #128	; 0x80
   15378:	0552      	lsls	r2, r2, #21
   1537a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1537c:	46c0      	nop			; (mov r8, r8)
   1537e:	46bd      	mov	sp, r7
   15380:	bd80      	pop	{r7, pc}
   15382:	46c0      	nop			; (mov r8, r8)
   15384:	e000ed04 	.word	0xe000ed04

00015388 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   15388:	b580      	push	{r7, lr}
   1538a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1538c:	b672      	cpsid	i
    uxCriticalNesting++;
   1538e:	4b06      	ldr	r3, [pc, #24]	; (153a8 <vPortEnterCritical+0x20>)
   15390:	681b      	ldr	r3, [r3, #0]
   15392:	1c5a      	adds	r2, r3, #1
   15394:	4b04      	ldr	r3, [pc, #16]	; (153a8 <vPortEnterCritical+0x20>)
   15396:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   15398:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1539c:	f3bf 8f6f 	isb	sy
}
   153a0:	46c0      	nop			; (mov r8, r8)
   153a2:	46bd      	mov	sp, r7
   153a4:	bd80      	pop	{r7, pc}
   153a6:	46c0      	nop			; (mov r8, r8)
   153a8:	20000020 	.word	0x20000020

000153ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   153ac:	b580      	push	{r7, lr}
   153ae:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   153b0:	4b09      	ldr	r3, [pc, #36]	; (153d8 <vPortExitCritical+0x2c>)
   153b2:	681b      	ldr	r3, [r3, #0]
   153b4:	2b00      	cmp	r3, #0
   153b6:	d101      	bne.n	153bc <vPortExitCritical+0x10>
   153b8:	b672      	cpsid	i
   153ba:	e7fe      	b.n	153ba <vPortExitCritical+0xe>
    uxCriticalNesting--;
   153bc:	4b06      	ldr	r3, [pc, #24]	; (153d8 <vPortExitCritical+0x2c>)
   153be:	681b      	ldr	r3, [r3, #0]
   153c0:	1e5a      	subs	r2, r3, #1
   153c2:	4b05      	ldr	r3, [pc, #20]	; (153d8 <vPortExitCritical+0x2c>)
   153c4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   153c6:	4b04      	ldr	r3, [pc, #16]	; (153d8 <vPortExitCritical+0x2c>)
   153c8:	681b      	ldr	r3, [r3, #0]
   153ca:	2b00      	cmp	r3, #0
   153cc:	d100      	bne.n	153d0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   153ce:	b662      	cpsie	i
    }
}
   153d0:	46c0      	nop			; (mov r8, r8)
   153d2:	46bd      	mov	sp, r7
   153d4:	bd80      	pop	{r7, pc}
   153d6:	46c0      	nop			; (mov r8, r8)
   153d8:	20000020 	.word	0x20000020

000153dc <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   153dc:	f3ef 8010 	mrs	r0, PRIMASK
   153e0:	b672      	cpsid	i
   153e2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   153e4:	46c0      	nop			; (mov r8, r8)
   153e6:	0018      	movs	r0, r3

000153e8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   153e8:	f380 8810 	msr	PRIMASK, r0
   153ec:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   153ee:	46c0      	nop			; (mov r8, r8)

000153f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   153f0:	f3ef 8009 	mrs	r0, PSP
   153f4:	4b0e      	ldr	r3, [pc, #56]	; (15430 <pxCurrentTCBConst>)
   153f6:	681a      	ldr	r2, [r3, #0]
   153f8:	3820      	subs	r0, #32
   153fa:	6010      	str	r0, [r2, #0]
   153fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   153fe:	4644      	mov	r4, r8
   15400:	464d      	mov	r5, r9
   15402:	4656      	mov	r6, sl
   15404:	465f      	mov	r7, fp
   15406:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   15408:	b508      	push	{r3, lr}
   1540a:	b672      	cpsid	i
   1540c:	f001 fb00 	bl	16a10 <vTaskSwitchContext>
   15410:	b662      	cpsie	i
   15412:	bc0c      	pop	{r2, r3}
   15414:	6811      	ldr	r1, [r2, #0]
   15416:	6808      	ldr	r0, [r1, #0]
   15418:	3010      	adds	r0, #16
   1541a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1541c:	46a0      	mov	r8, r4
   1541e:	46a9      	mov	r9, r5
   15420:	46b2      	mov	sl, r6
   15422:	46bb      	mov	fp, r7
   15424:	f380 8809 	msr	PSP, r0
   15428:	3820      	subs	r0, #32
   1542a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1542c:	4718      	bx	r3
   1542e:	46c0      	nop			; (mov r8, r8)

00015430 <pxCurrentTCBConst>:
   15430:	20002bd4 	.word	0x20002bd4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   15434:	46c0      	nop			; (mov r8, r8)
   15436:	46c0      	nop			; (mov r8, r8)

00015438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   15438:	b580      	push	{r7, lr}
   1543a:	b082      	sub	sp, #8
   1543c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1543e:	4b0a      	ldr	r3, [pc, #40]	; (15468 <SysTick_Handler+0x30>)
   15440:	4798      	blx	r3
   15442:	0003      	movs	r3, r0
   15444:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   15446:	4b09      	ldr	r3, [pc, #36]	; (1546c <SysTick_Handler+0x34>)
   15448:	4798      	blx	r3
   1544a:	1e03      	subs	r3, r0, #0
   1544c:	d003      	beq.n	15456 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1544e:	4b08      	ldr	r3, [pc, #32]	; (15470 <SysTick_Handler+0x38>)
   15450:	2280      	movs	r2, #128	; 0x80
   15452:	0552      	lsls	r2, r2, #21
   15454:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   15456:	687b      	ldr	r3, [r7, #4]
   15458:	0018      	movs	r0, r3
   1545a:	4b06      	ldr	r3, [pc, #24]	; (15474 <SysTick_Handler+0x3c>)
   1545c:	4798      	blx	r3
}
   1545e:	46c0      	nop			; (mov r8, r8)
   15460:	46bd      	mov	sp, r7
   15462:	b002      	add	sp, #8
   15464:	bd80      	pop	{r7, pc}
   15466:	46c0      	nop			; (mov r8, r8)
   15468:	000153dd 	.word	0x000153dd
   1546c:	0001689d 	.word	0x0001689d
   15470:	e000ed04 	.word	0xe000ed04
   15474:	000153e9 	.word	0x000153e9

00015478 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   15478:	b5b0      	push	{r4, r5, r7, lr}
   1547a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1547c:	4b0b      	ldr	r3, [pc, #44]	; (154ac <prvSetupTimerInterrupt+0x34>)
   1547e:	2200      	movs	r2, #0
   15480:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   15482:	4b0b      	ldr	r3, [pc, #44]	; (154b0 <prvSetupTimerInterrupt+0x38>)
   15484:	2200      	movs	r2, #0
   15486:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   15488:	4c0a      	ldr	r4, [pc, #40]	; (154b4 <prvSetupTimerInterrupt+0x3c>)
   1548a:	2000      	movs	r0, #0
   1548c:	4b0a      	ldr	r3, [pc, #40]	; (154b8 <prvSetupTimerInterrupt+0x40>)
   1548e:	4798      	blx	r3
   15490:	4b0a      	ldr	r3, [pc, #40]	; (154bc <prvSetupTimerInterrupt+0x44>)
   15492:	22fa      	movs	r2, #250	; 0xfa
   15494:	0091      	lsls	r1, r2, #2
   15496:	4798      	blx	r3
   15498:	0003      	movs	r3, r0
   1549a:	3b01      	subs	r3, #1
   1549c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1549e:	4b03      	ldr	r3, [pc, #12]	; (154ac <prvSetupTimerInterrupt+0x34>)
   154a0:	2207      	movs	r2, #7
   154a2:	601a      	str	r2, [r3, #0]
}
   154a4:	46c0      	nop			; (mov r8, r8)
   154a6:	46bd      	mov	sp, r7
   154a8:	bdb0      	pop	{r4, r5, r7, pc}
   154aa:	46c0      	nop			; (mov r8, r8)
   154ac:	e000e010 	.word	0xe000e010
   154b0:	e000e018 	.word	0xe000e018
   154b4:	e000e014 	.word	0xe000e014
   154b8:	0001a22d 	.word	0x0001a22d
   154bc:	0001ab09 	.word	0x0001ab09

000154c0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   154c0:	b580      	push	{r7, lr}
   154c2:	b084      	sub	sp, #16
   154c4:	af00      	add	r7, sp, #0
   154c6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   154c8:	2300      	movs	r3, #0
   154ca:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   154cc:	687b      	ldr	r3, [r7, #4]
   154ce:	2207      	movs	r2, #7
   154d0:	4013      	ands	r3, r2
   154d2:	d004      	beq.n	154de <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   154d4:	687b      	ldr	r3, [r7, #4]
   154d6:	2207      	movs	r2, #7
   154d8:	4393      	bics	r3, r2
   154da:	3308      	adds	r3, #8
   154dc:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   154de:	4b19      	ldr	r3, [pc, #100]	; (15544 <pvPortMalloc+0x84>)
   154e0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   154e2:	4b19      	ldr	r3, [pc, #100]	; (15548 <pvPortMalloc+0x88>)
   154e4:	681b      	ldr	r3, [r3, #0]
   154e6:	2b00      	cmp	r3, #0
   154e8:	d105      	bne.n	154f6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   154ea:	4b18      	ldr	r3, [pc, #96]	; (1554c <pvPortMalloc+0x8c>)
   154ec:	2207      	movs	r2, #7
   154ee:	4393      	bics	r3, r2
   154f0:	001a      	movs	r2, r3
   154f2:	4b15      	ldr	r3, [pc, #84]	; (15548 <pvPortMalloc+0x88>)
   154f4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   154f6:	4b16      	ldr	r3, [pc, #88]	; (15550 <pvPortMalloc+0x90>)
   154f8:	681a      	ldr	r2, [r3, #0]
   154fa:	687b      	ldr	r3, [r7, #4]
   154fc:	18d3      	adds	r3, r2, r3
   154fe:	4a15      	ldr	r2, [pc, #84]	; (15554 <pvPortMalloc+0x94>)
   15500:	4293      	cmp	r3, r2
   15502:	d813      	bhi.n	1552c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   15504:	4b12      	ldr	r3, [pc, #72]	; (15550 <pvPortMalloc+0x90>)
   15506:	681a      	ldr	r2, [r3, #0]
   15508:	687b      	ldr	r3, [r7, #4]
   1550a:	18d2      	adds	r2, r2, r3
   1550c:	4b10      	ldr	r3, [pc, #64]	; (15550 <pvPortMalloc+0x90>)
   1550e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   15510:	429a      	cmp	r2, r3
   15512:	d90b      	bls.n	1552c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   15514:	4b0c      	ldr	r3, [pc, #48]	; (15548 <pvPortMalloc+0x88>)
   15516:	681a      	ldr	r2, [r3, #0]
   15518:	4b0d      	ldr	r3, [pc, #52]	; (15550 <pvPortMalloc+0x90>)
   1551a:	681b      	ldr	r3, [r3, #0]
   1551c:	18d3      	adds	r3, r2, r3
   1551e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   15520:	4b0b      	ldr	r3, [pc, #44]	; (15550 <pvPortMalloc+0x90>)
   15522:	681a      	ldr	r2, [r3, #0]
   15524:	687b      	ldr	r3, [r7, #4]
   15526:	18d2      	adds	r2, r2, r3
   15528:	4b09      	ldr	r3, [pc, #36]	; (15550 <pvPortMalloc+0x90>)
   1552a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   1552c:	4b0a      	ldr	r3, [pc, #40]	; (15558 <pvPortMalloc+0x98>)
   1552e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   15530:	68fb      	ldr	r3, [r7, #12]
   15532:	2b00      	cmp	r3, #0
   15534:	d101      	bne.n	1553a <pvPortMalloc+0x7a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   15536:	4b09      	ldr	r3, [pc, #36]	; (1555c <pvPortMalloc+0x9c>)
   15538:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1553a:	68fb      	ldr	r3, [r7, #12]
}
   1553c:	0018      	movs	r0, r3
   1553e:	46bd      	mov	sp, r7
   15540:	b004      	add	sp, #16
   15542:	bd80      	pop	{r7, pc}
   15544:	00016735 	.word	0x00016735
   15548:	20002bd0 	.word	0x20002bd0
   1554c:	200004c4 	.word	0x200004c4
   15550:	20002bcc 	.word	0x20002bcc
   15554:	00002707 	.word	0x00002707
   15558:	0001674d 	.word	0x0001674d
   1555c:	0001aad9 	.word	0x0001aad9

00015560 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   15560:	b580      	push	{r7, lr}
   15562:	b082      	sub	sp, #8
   15564:	af00      	add	r7, sp, #0
   15566:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   15568:	687b      	ldr	r3, [r7, #4]
   1556a:	2b00      	cmp	r3, #0
   1556c:	d001      	beq.n	15572 <vPortFree+0x12>
   1556e:	b672      	cpsid	i
   15570:	e7fe      	b.n	15570 <vPortFree+0x10>
}
   15572:	46c0      	nop			; (mov r8, r8)
   15574:	46bd      	mov	sp, r7
   15576:	b002      	add	sp, #8
   15578:	bd80      	pop	{r7, pc}
	...

0001557c <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1557c:	b580      	push	{r7, lr}
   1557e:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   15580:	4b03      	ldr	r3, [pc, #12]	; (15590 <xPortGetFreeHeapSize+0x14>)
   15582:	681b      	ldr	r3, [r3, #0]
   15584:	4a03      	ldr	r2, [pc, #12]	; (15594 <xPortGetFreeHeapSize+0x18>)
   15586:	1ad3      	subs	r3, r2, r3
}
   15588:	0018      	movs	r0, r3
   1558a:	46bd      	mov	sp, r7
   1558c:	bd80      	pop	{r7, pc}
   1558e:	46c0      	nop			; (mov r8, r8)
   15590:	20002bcc 	.word	0x20002bcc
   15594:	00002708 	.word	0x00002708

00015598 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   15598:	b580      	push	{r7, lr}
   1559a:	b084      	sub	sp, #16
   1559c:	af00      	add	r7, sp, #0
   1559e:	6078      	str	r0, [r7, #4]
   155a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   155a2:	687b      	ldr	r3, [r7, #4]
   155a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   155a6:	68fb      	ldr	r3, [r7, #12]
   155a8:	2b00      	cmp	r3, #0
   155aa:	d101      	bne.n	155b0 <xQueueGenericReset+0x18>
   155ac:	b672      	cpsid	i
   155ae:	e7fe      	b.n	155ae <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   155b0:	4b23      	ldr	r3, [pc, #140]	; (15640 <xQueueGenericReset+0xa8>)
   155b2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   155b4:	68fb      	ldr	r3, [r7, #12]
   155b6:	681a      	ldr	r2, [r3, #0]
   155b8:	68fb      	ldr	r3, [r7, #12]
   155ba:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   155bc:	68fb      	ldr	r3, [r7, #12]
   155be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   155c0:	434b      	muls	r3, r1
   155c2:	18d2      	adds	r2, r2, r3
   155c4:	68fb      	ldr	r3, [r7, #12]
   155c6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   155c8:	68fb      	ldr	r3, [r7, #12]
   155ca:	2200      	movs	r2, #0
   155cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   155ce:	68fb      	ldr	r3, [r7, #12]
   155d0:	681a      	ldr	r2, [r3, #0]
   155d2:	68fb      	ldr	r3, [r7, #12]
   155d4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   155d6:	68fb      	ldr	r3, [r7, #12]
   155d8:	681a      	ldr	r2, [r3, #0]
   155da:	68fb      	ldr	r3, [r7, #12]
   155dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   155de:	1e59      	subs	r1, r3, #1
   155e0:	68fb      	ldr	r3, [r7, #12]
   155e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   155e4:	434b      	muls	r3, r1
   155e6:	18d2      	adds	r2, r2, r3
   155e8:	68fb      	ldr	r3, [r7, #12]
   155ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   155ec:	68fb      	ldr	r3, [r7, #12]
   155ee:	2244      	movs	r2, #68	; 0x44
   155f0:	21ff      	movs	r1, #255	; 0xff
   155f2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   155f4:	68fb      	ldr	r3, [r7, #12]
   155f6:	2245      	movs	r2, #69	; 0x45
   155f8:	21ff      	movs	r1, #255	; 0xff
   155fa:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   155fc:	683b      	ldr	r3, [r7, #0]
   155fe:	2b00      	cmp	r3, #0
   15600:	d10d      	bne.n	1561e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   15602:	68fb      	ldr	r3, [r7, #12]
   15604:	691b      	ldr	r3, [r3, #16]
   15606:	2b00      	cmp	r3, #0
   15608:	d013      	beq.n	15632 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1560a:	68fb      	ldr	r3, [r7, #12]
   1560c:	3310      	adds	r3, #16
   1560e:	0018      	movs	r0, r3
   15610:	4b0c      	ldr	r3, [pc, #48]	; (15644 <xQueueGenericReset+0xac>)
   15612:	4798      	blx	r3
   15614:	1e03      	subs	r3, r0, #0
   15616:	d00c      	beq.n	15632 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   15618:	4b0b      	ldr	r3, [pc, #44]	; (15648 <xQueueGenericReset+0xb0>)
   1561a:	4798      	blx	r3
   1561c:	e009      	b.n	15632 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1561e:	68fb      	ldr	r3, [r7, #12]
   15620:	3310      	adds	r3, #16
   15622:	0018      	movs	r0, r3
   15624:	4b09      	ldr	r3, [pc, #36]	; (1564c <xQueueGenericReset+0xb4>)
   15626:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   15628:	68fb      	ldr	r3, [r7, #12]
   1562a:	3324      	adds	r3, #36	; 0x24
   1562c:	0018      	movs	r0, r3
   1562e:	4b07      	ldr	r3, [pc, #28]	; (1564c <xQueueGenericReset+0xb4>)
   15630:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   15632:	4b07      	ldr	r3, [pc, #28]	; (15650 <xQueueGenericReset+0xb8>)
   15634:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   15636:	2301      	movs	r3, #1
}
   15638:	0018      	movs	r0, r3
   1563a:	46bd      	mov	sp, r7
   1563c:	b004      	add	sp, #16
   1563e:	bd80      	pop	{r7, pc}
   15640:	00015389 	.word	0x00015389
   15644:	00016b71 	.word	0x00016b71
   15648:	00015371 	.word	0x00015371
   1564c:	00015103 	.word	0x00015103
   15650:	000153ad 	.word	0x000153ad

00015654 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   15654:	b590      	push	{r4, r7, lr}
   15656:	b08b      	sub	sp, #44	; 0x2c
   15658:	af02      	add	r7, sp, #8
   1565a:	60f8      	str	r0, [r7, #12]
   1565c:	60b9      	str	r1, [r7, #8]
   1565e:	1dfb      	adds	r3, r7, #7
   15660:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   15662:	68fb      	ldr	r3, [r7, #12]
   15664:	2b00      	cmp	r3, #0
   15666:	d101      	bne.n	1566c <xQueueGenericCreate+0x18>
   15668:	b672      	cpsid	i
   1566a:	e7fe      	b.n	1566a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1566c:	68bb      	ldr	r3, [r7, #8]
   1566e:	2b00      	cmp	r3, #0
   15670:	d102      	bne.n	15678 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   15672:	2300      	movs	r3, #0
   15674:	61fb      	str	r3, [r7, #28]
   15676:	e003      	b.n	15680 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   15678:	68fb      	ldr	r3, [r7, #12]
   1567a:	68ba      	ldr	r2, [r7, #8]
   1567c:	4353      	muls	r3, r2
   1567e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   15680:	69fb      	ldr	r3, [r7, #28]
   15682:	334c      	adds	r3, #76	; 0x4c
   15684:	0018      	movs	r0, r3
   15686:	4b0c      	ldr	r3, [pc, #48]	; (156b8 <xQueueGenericCreate+0x64>)
   15688:	4798      	blx	r3
   1568a:	0003      	movs	r3, r0
   1568c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1568e:	69bb      	ldr	r3, [r7, #24]
   15690:	2b00      	cmp	r3, #0
   15692:	d00c      	beq.n	156ae <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   15694:	69bb      	ldr	r3, [r7, #24]
   15696:	334c      	adds	r3, #76	; 0x4c
   15698:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1569a:	1dfb      	adds	r3, r7, #7
   1569c:	781c      	ldrb	r4, [r3, #0]
   1569e:	697a      	ldr	r2, [r7, #20]
   156a0:	68b9      	ldr	r1, [r7, #8]
   156a2:	68f8      	ldr	r0, [r7, #12]
   156a4:	69bb      	ldr	r3, [r7, #24]
   156a6:	9300      	str	r3, [sp, #0]
   156a8:	0023      	movs	r3, r4
   156aa:	4c04      	ldr	r4, [pc, #16]	; (156bc <xQueueGenericCreate+0x68>)
   156ac:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
   156ae:	69bb      	ldr	r3, [r7, #24]
	}
   156b0:	0018      	movs	r0, r3
   156b2:	46bd      	mov	sp, r7
   156b4:	b009      	add	sp, #36	; 0x24
   156b6:	bd90      	pop	{r4, r7, pc}
   156b8:	000154c1 	.word	0x000154c1
   156bc:	000156c1 	.word	0x000156c1

000156c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   156c0:	b580      	push	{r7, lr}
   156c2:	b084      	sub	sp, #16
   156c4:	af00      	add	r7, sp, #0
   156c6:	60f8      	str	r0, [r7, #12]
   156c8:	60b9      	str	r1, [r7, #8]
   156ca:	607a      	str	r2, [r7, #4]
   156cc:	001a      	movs	r2, r3
   156ce:	1cfb      	adds	r3, r7, #3
   156d0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   156d2:	68bb      	ldr	r3, [r7, #8]
   156d4:	2b00      	cmp	r3, #0
   156d6:	d103      	bne.n	156e0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   156d8:	69bb      	ldr	r3, [r7, #24]
   156da:	69ba      	ldr	r2, [r7, #24]
   156dc:	601a      	str	r2, [r3, #0]
   156de:	e002      	b.n	156e6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   156e0:	69bb      	ldr	r3, [r7, #24]
   156e2:	687a      	ldr	r2, [r7, #4]
   156e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   156e6:	69bb      	ldr	r3, [r7, #24]
   156e8:	68fa      	ldr	r2, [r7, #12]
   156ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   156ec:	69bb      	ldr	r3, [r7, #24]
   156ee:	68ba      	ldr	r2, [r7, #8]
   156f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   156f2:	69bb      	ldr	r3, [r7, #24]
   156f4:	2101      	movs	r1, #1
   156f6:	0018      	movs	r0, r3
   156f8:	4b04      	ldr	r3, [pc, #16]	; (1570c <prvInitialiseNewQueue+0x4c>)
   156fa:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   156fc:	69bb      	ldr	r3, [r7, #24]
   156fe:	2200      	movs	r2, #0
   15700:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
   15702:	46c0      	nop			; (mov r8, r8)
   15704:	46bd      	mov	sp, r7
   15706:	b004      	add	sp, #16
   15708:	bd80      	pop	{r7, pc}
   1570a:	46c0      	nop			; (mov r8, r8)
   1570c:	00015599 	.word	0x00015599

00015710 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   15710:	b590      	push	{r4, r7, lr}
   15712:	b083      	sub	sp, #12
   15714:	af00      	add	r7, sp, #0
   15716:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   15718:	687b      	ldr	r3, [r7, #4]
   1571a:	2b00      	cmp	r3, #0
   1571c:	d00e      	beq.n	1573c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1571e:	687b      	ldr	r3, [r7, #4]
   15720:	2200      	movs	r2, #0
   15722:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   15724:	687b      	ldr	r3, [r7, #4]
   15726:	2200      	movs	r2, #0
   15728:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1572a:	687b      	ldr	r3, [r7, #4]
   1572c:	2200      	movs	r2, #0
   1572e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   15730:	6878      	ldr	r0, [r7, #4]
   15732:	2300      	movs	r3, #0
   15734:	2200      	movs	r2, #0
   15736:	2100      	movs	r1, #0
   15738:	4c02      	ldr	r4, [pc, #8]	; (15744 <prvInitialiseMutex+0x34>)
   1573a:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1573c:	46c0      	nop			; (mov r8, r8)
   1573e:	46bd      	mov	sp, r7
   15740:	b003      	add	sp, #12
   15742:	bd90      	pop	{r4, r7, pc}
   15744:	00015789 	.word	0x00015789

00015748 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   15748:	b580      	push	{r7, lr}
   1574a:	b086      	sub	sp, #24
   1574c:	af00      	add	r7, sp, #0
   1574e:	0002      	movs	r2, r0
   15750:	1dfb      	adds	r3, r7, #7
   15752:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   15754:	2301      	movs	r3, #1
   15756:	617b      	str	r3, [r7, #20]
   15758:	2300      	movs	r3, #0
   1575a:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1575c:	1dfb      	adds	r3, r7, #7
   1575e:	781a      	ldrb	r2, [r3, #0]
   15760:	6939      	ldr	r1, [r7, #16]
   15762:	697b      	ldr	r3, [r7, #20]
   15764:	0018      	movs	r0, r3
   15766:	4b06      	ldr	r3, [pc, #24]	; (15780 <xQueueCreateMutex+0x38>)
   15768:	4798      	blx	r3
   1576a:	0003      	movs	r3, r0
   1576c:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1576e:	68fb      	ldr	r3, [r7, #12]
   15770:	0018      	movs	r0, r3
   15772:	4b04      	ldr	r3, [pc, #16]	; (15784 <xQueueCreateMutex+0x3c>)
   15774:	4798      	blx	r3

		return pxNewQueue;
   15776:	68fb      	ldr	r3, [r7, #12]
	}
   15778:	0018      	movs	r0, r3
   1577a:	46bd      	mov	sp, r7
   1577c:	b006      	add	sp, #24
   1577e:	bd80      	pop	{r7, pc}
   15780:	00015655 	.word	0x00015655
   15784:	00015711 	.word	0x00015711

00015788 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   15788:	b580      	push	{r7, lr}
   1578a:	b08a      	sub	sp, #40	; 0x28
   1578c:	af00      	add	r7, sp, #0
   1578e:	60f8      	str	r0, [r7, #12]
   15790:	60b9      	str	r1, [r7, #8]
   15792:	607a      	str	r2, [r7, #4]
   15794:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   15796:	2300      	movs	r3, #0
   15798:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1579a:	68fb      	ldr	r3, [r7, #12]
   1579c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1579e:	6a3b      	ldr	r3, [r7, #32]
   157a0:	2b00      	cmp	r3, #0
   157a2:	d101      	bne.n	157a8 <xQueueGenericSend+0x20>
   157a4:	b672      	cpsid	i
   157a6:	e7fe      	b.n	157a6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   157a8:	68bb      	ldr	r3, [r7, #8]
   157aa:	2b00      	cmp	r3, #0
   157ac:	d103      	bne.n	157b6 <xQueueGenericSend+0x2e>
   157ae:	6a3b      	ldr	r3, [r7, #32]
   157b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   157b2:	2b00      	cmp	r3, #0
   157b4:	d101      	bne.n	157ba <xQueueGenericSend+0x32>
   157b6:	2301      	movs	r3, #1
   157b8:	e000      	b.n	157bc <xQueueGenericSend+0x34>
   157ba:	2300      	movs	r3, #0
   157bc:	2b00      	cmp	r3, #0
   157be:	d101      	bne.n	157c4 <xQueueGenericSend+0x3c>
   157c0:	b672      	cpsid	i
   157c2:	e7fe      	b.n	157c2 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   157c4:	683b      	ldr	r3, [r7, #0]
   157c6:	2b02      	cmp	r3, #2
   157c8:	d103      	bne.n	157d2 <xQueueGenericSend+0x4a>
   157ca:	6a3b      	ldr	r3, [r7, #32]
   157cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   157ce:	2b01      	cmp	r3, #1
   157d0:	d101      	bne.n	157d6 <xQueueGenericSend+0x4e>
   157d2:	2301      	movs	r3, #1
   157d4:	e000      	b.n	157d8 <xQueueGenericSend+0x50>
   157d6:	2300      	movs	r3, #0
   157d8:	2b00      	cmp	r3, #0
   157da:	d101      	bne.n	157e0 <xQueueGenericSend+0x58>
   157dc:	b672      	cpsid	i
   157de:	e7fe      	b.n	157de <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   157e0:	4b53      	ldr	r3, [pc, #332]	; (15930 <xQueueGenericSend+0x1a8>)
   157e2:	4798      	blx	r3
   157e4:	1e03      	subs	r3, r0, #0
   157e6:	d102      	bne.n	157ee <xQueueGenericSend+0x66>
   157e8:	687b      	ldr	r3, [r7, #4]
   157ea:	2b00      	cmp	r3, #0
   157ec:	d101      	bne.n	157f2 <xQueueGenericSend+0x6a>
   157ee:	2301      	movs	r3, #1
   157f0:	e000      	b.n	157f4 <xQueueGenericSend+0x6c>
   157f2:	2300      	movs	r3, #0
   157f4:	2b00      	cmp	r3, #0
   157f6:	d101      	bne.n	157fc <xQueueGenericSend+0x74>
   157f8:	b672      	cpsid	i
   157fa:	e7fe      	b.n	157fa <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   157fc:	4b4d      	ldr	r3, [pc, #308]	; (15934 <xQueueGenericSend+0x1ac>)
   157fe:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   15800:	6a3b      	ldr	r3, [r7, #32]
   15802:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   15804:	6a3b      	ldr	r3, [r7, #32]
   15806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   15808:	429a      	cmp	r2, r3
   1580a:	d302      	bcc.n	15812 <xQueueGenericSend+0x8a>
   1580c:	683b      	ldr	r3, [r7, #0]
   1580e:	2b02      	cmp	r3, #2
   15810:	d12d      	bne.n	1586e <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   15812:	683a      	ldr	r2, [r7, #0]
   15814:	68b9      	ldr	r1, [r7, #8]
   15816:	6a3b      	ldr	r3, [r7, #32]
   15818:	0018      	movs	r0, r3
   1581a:	4b47      	ldr	r3, [pc, #284]	; (15938 <xQueueGenericSend+0x1b0>)
   1581c:	4798      	blx	r3
   1581e:	0003      	movs	r3, r0
   15820:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   15822:	6a3b      	ldr	r3, [r7, #32]
   15824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   15826:	2b00      	cmp	r3, #0
   15828:	d00a      	beq.n	15840 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1582a:	683a      	ldr	r2, [r7, #0]
   1582c:	6a3b      	ldr	r3, [r7, #32]
   1582e:	0011      	movs	r1, r2
   15830:	0018      	movs	r0, r3
   15832:	4b42      	ldr	r3, [pc, #264]	; (1593c <xQueueGenericSend+0x1b4>)
   15834:	4798      	blx	r3
   15836:	1e03      	subs	r3, r0, #0
   15838:	d015      	beq.n	15866 <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1583a:	4b41      	ldr	r3, [pc, #260]	; (15940 <xQueueGenericSend+0x1b8>)
   1583c:	4798      	blx	r3
   1583e:	e012      	b.n	15866 <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   15840:	6a3b      	ldr	r3, [r7, #32]
   15842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15844:	2b00      	cmp	r3, #0
   15846:	d009      	beq.n	1585c <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   15848:	6a3b      	ldr	r3, [r7, #32]
   1584a:	3324      	adds	r3, #36	; 0x24
   1584c:	0018      	movs	r0, r3
   1584e:	4b3d      	ldr	r3, [pc, #244]	; (15944 <xQueueGenericSend+0x1bc>)
   15850:	4798      	blx	r3
   15852:	1e03      	subs	r3, r0, #0
   15854:	d007      	beq.n	15866 <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   15856:	4b3a      	ldr	r3, [pc, #232]	; (15940 <xQueueGenericSend+0x1b8>)
   15858:	4798      	blx	r3
   1585a:	e004      	b.n	15866 <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1585c:	69fb      	ldr	r3, [r7, #28]
   1585e:	2b00      	cmp	r3, #0
   15860:	d001      	beq.n	15866 <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   15862:	4b37      	ldr	r3, [pc, #220]	; (15940 <xQueueGenericSend+0x1b8>)
   15864:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   15866:	4b38      	ldr	r3, [pc, #224]	; (15948 <xQueueGenericSend+0x1c0>)
   15868:	4798      	blx	r3
				return pdPASS;
   1586a:	2301      	movs	r3, #1
   1586c:	e05c      	b.n	15928 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1586e:	687b      	ldr	r3, [r7, #4]
   15870:	2b00      	cmp	r3, #0
   15872:	d103      	bne.n	1587c <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   15874:	4b34      	ldr	r3, [pc, #208]	; (15948 <xQueueGenericSend+0x1c0>)
   15876:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   15878:	2300      	movs	r3, #0
   1587a:	e055      	b.n	15928 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
   1587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1587e:	2b00      	cmp	r3, #0
   15880:	d106      	bne.n	15890 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   15882:	2314      	movs	r3, #20
   15884:	18fb      	adds	r3, r7, r3
   15886:	0018      	movs	r0, r3
   15888:	4b30      	ldr	r3, [pc, #192]	; (1594c <xQueueGenericSend+0x1c4>)
   1588a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1588c:	2301      	movs	r3, #1
   1588e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   15890:	4b2d      	ldr	r3, [pc, #180]	; (15948 <xQueueGenericSend+0x1c0>)
   15892:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   15894:	4b2e      	ldr	r3, [pc, #184]	; (15950 <xQueueGenericSend+0x1c8>)
   15896:	4798      	blx	r3
		prvLockQueue( pxQueue );
   15898:	4b26      	ldr	r3, [pc, #152]	; (15934 <xQueueGenericSend+0x1ac>)
   1589a:	4798      	blx	r3
   1589c:	6a3b      	ldr	r3, [r7, #32]
   1589e:	2244      	movs	r2, #68	; 0x44
   158a0:	5c9b      	ldrb	r3, [r3, r2]
   158a2:	b25b      	sxtb	r3, r3
   158a4:	3301      	adds	r3, #1
   158a6:	d103      	bne.n	158b0 <xQueueGenericSend+0x128>
   158a8:	6a3b      	ldr	r3, [r7, #32]
   158aa:	2244      	movs	r2, #68	; 0x44
   158ac:	2100      	movs	r1, #0
   158ae:	5499      	strb	r1, [r3, r2]
   158b0:	6a3b      	ldr	r3, [r7, #32]
   158b2:	2245      	movs	r2, #69	; 0x45
   158b4:	5c9b      	ldrb	r3, [r3, r2]
   158b6:	b25b      	sxtb	r3, r3
   158b8:	3301      	adds	r3, #1
   158ba:	d103      	bne.n	158c4 <xQueueGenericSend+0x13c>
   158bc:	6a3b      	ldr	r3, [r7, #32]
   158be:	2245      	movs	r2, #69	; 0x45
   158c0:	2100      	movs	r1, #0
   158c2:	5499      	strb	r1, [r3, r2]
   158c4:	4b20      	ldr	r3, [pc, #128]	; (15948 <xQueueGenericSend+0x1c0>)
   158c6:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   158c8:	1d3a      	adds	r2, r7, #4
   158ca:	2314      	movs	r3, #20
   158cc:	18fb      	adds	r3, r7, r3
   158ce:	0011      	movs	r1, r2
   158d0:	0018      	movs	r0, r3
   158d2:	4b20      	ldr	r3, [pc, #128]	; (15954 <xQueueGenericSend+0x1cc>)
   158d4:	4798      	blx	r3
   158d6:	1e03      	subs	r3, r0, #0
   158d8:	d11f      	bne.n	1591a <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   158da:	6a3b      	ldr	r3, [r7, #32]
   158dc:	0018      	movs	r0, r3
   158de:	4b1e      	ldr	r3, [pc, #120]	; (15958 <xQueueGenericSend+0x1d0>)
   158e0:	4798      	blx	r3
   158e2:	1e03      	subs	r3, r0, #0
   158e4:	d012      	beq.n	1590c <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   158e6:	6a3b      	ldr	r3, [r7, #32]
   158e8:	3310      	adds	r3, #16
   158ea:	687a      	ldr	r2, [r7, #4]
   158ec:	0011      	movs	r1, r2
   158ee:	0018      	movs	r0, r3
   158f0:	4b1a      	ldr	r3, [pc, #104]	; (1595c <xQueueGenericSend+0x1d4>)
   158f2:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   158f4:	6a3b      	ldr	r3, [r7, #32]
   158f6:	0018      	movs	r0, r3
   158f8:	4b19      	ldr	r3, [pc, #100]	; (15960 <xQueueGenericSend+0x1d8>)
   158fa:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   158fc:	4b19      	ldr	r3, [pc, #100]	; (15964 <xQueueGenericSend+0x1dc>)
   158fe:	4798      	blx	r3
   15900:	1e03      	subs	r3, r0, #0
   15902:	d000      	beq.n	15906 <xQueueGenericSend+0x17e>
   15904:	e77a      	b.n	157fc <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   15906:	4b0e      	ldr	r3, [pc, #56]	; (15940 <xQueueGenericSend+0x1b8>)
   15908:	4798      	blx	r3
   1590a:	e777      	b.n	157fc <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1590c:	6a3b      	ldr	r3, [r7, #32]
   1590e:	0018      	movs	r0, r3
   15910:	4b13      	ldr	r3, [pc, #76]	; (15960 <xQueueGenericSend+0x1d8>)
   15912:	4798      	blx	r3
				( void ) xTaskResumeAll();
   15914:	4b13      	ldr	r3, [pc, #76]	; (15964 <xQueueGenericSend+0x1dc>)
   15916:	4798      	blx	r3
   15918:	e770      	b.n	157fc <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1591a:	6a3b      	ldr	r3, [r7, #32]
   1591c:	0018      	movs	r0, r3
   1591e:	4b10      	ldr	r3, [pc, #64]	; (15960 <xQueueGenericSend+0x1d8>)
   15920:	4798      	blx	r3
			( void ) xTaskResumeAll();
   15922:	4b10      	ldr	r3, [pc, #64]	; (15964 <xQueueGenericSend+0x1dc>)
   15924:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   15926:	2300      	movs	r3, #0
		}
	}
}
   15928:	0018      	movs	r0, r3
   1592a:	46bd      	mov	sp, r7
   1592c:	b00a      	add	sp, #40	; 0x28
   1592e:	bd80      	pop	{r7, pc}
   15930:	00016ea9 	.word	0x00016ea9
   15934:	00015389 	.word	0x00015389
   15938:	00015f49 	.word	0x00015f49
   1593c:	0001624d 	.word	0x0001624d
   15940:	00015371 	.word	0x00015371
   15944:	00016b71 	.word	0x00016b71
   15948:	000153ad 	.word	0x000153ad
   1594c:	00016c31 	.word	0x00016c31
   15950:	00016735 	.word	0x00016735
   15954:	00016c59 	.word	0x00016c59
   15958:	0001619d 	.word	0x0001619d
   1595c:	00016ad9 	.word	0x00016ad9
   15960:	00016079 	.word	0x00016079
   15964:	0001674d 	.word	0x0001674d

00015968 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   15968:	b580      	push	{r7, lr}
   1596a:	b088      	sub	sp, #32
   1596c:	af00      	add	r7, sp, #0
   1596e:	60f8      	str	r0, [r7, #12]
   15970:	60b9      	str	r1, [r7, #8]
   15972:	607a      	str	r2, [r7, #4]
   15974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   15976:	68fb      	ldr	r3, [r7, #12]
   15978:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1597a:	69bb      	ldr	r3, [r7, #24]
   1597c:	2b00      	cmp	r3, #0
   1597e:	d101      	bne.n	15984 <xQueueGenericSendFromISR+0x1c>
   15980:	b672      	cpsid	i
   15982:	e7fe      	b.n	15982 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   15984:	68bb      	ldr	r3, [r7, #8]
   15986:	2b00      	cmp	r3, #0
   15988:	d103      	bne.n	15992 <xQueueGenericSendFromISR+0x2a>
   1598a:	69bb      	ldr	r3, [r7, #24]
   1598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1598e:	2b00      	cmp	r3, #0
   15990:	d101      	bne.n	15996 <xQueueGenericSendFromISR+0x2e>
   15992:	2301      	movs	r3, #1
   15994:	e000      	b.n	15998 <xQueueGenericSendFromISR+0x30>
   15996:	2300      	movs	r3, #0
   15998:	2b00      	cmp	r3, #0
   1599a:	d101      	bne.n	159a0 <xQueueGenericSendFromISR+0x38>
   1599c:	b672      	cpsid	i
   1599e:	e7fe      	b.n	1599e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   159a0:	683b      	ldr	r3, [r7, #0]
   159a2:	2b02      	cmp	r3, #2
   159a4:	d103      	bne.n	159ae <xQueueGenericSendFromISR+0x46>
   159a6:	69bb      	ldr	r3, [r7, #24]
   159a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   159aa:	2b01      	cmp	r3, #1
   159ac:	d101      	bne.n	159b2 <xQueueGenericSendFromISR+0x4a>
   159ae:	2301      	movs	r3, #1
   159b0:	e000      	b.n	159b4 <xQueueGenericSendFromISR+0x4c>
   159b2:	2300      	movs	r3, #0
   159b4:	2b00      	cmp	r3, #0
   159b6:	d101      	bne.n	159bc <xQueueGenericSendFromISR+0x54>
   159b8:	b672      	cpsid	i
   159ba:	e7fe      	b.n	159ba <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   159bc:	4b2d      	ldr	r3, [pc, #180]	; (15a74 <xQueueGenericSendFromISR+0x10c>)
   159be:	4798      	blx	r3
   159c0:	0003      	movs	r3, r0
   159c2:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   159c4:	69bb      	ldr	r3, [r7, #24]
   159c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   159c8:	69bb      	ldr	r3, [r7, #24]
   159ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   159cc:	429a      	cmp	r2, r3
   159ce:	d302      	bcc.n	159d6 <xQueueGenericSendFromISR+0x6e>
   159d0:	683b      	ldr	r3, [r7, #0]
   159d2:	2b02      	cmp	r3, #2
   159d4:	d142      	bne.n	15a5c <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   159d6:	2313      	movs	r3, #19
   159d8:	18fb      	adds	r3, r7, r3
   159da:	69ba      	ldr	r2, [r7, #24]
   159dc:	2145      	movs	r1, #69	; 0x45
   159de:	5c52      	ldrb	r2, [r2, r1]
   159e0:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   159e2:	683a      	ldr	r2, [r7, #0]
   159e4:	68b9      	ldr	r1, [r7, #8]
   159e6:	69bb      	ldr	r3, [r7, #24]
   159e8:	0018      	movs	r0, r3
   159ea:	4b23      	ldr	r3, [pc, #140]	; (15a78 <xQueueGenericSendFromISR+0x110>)
   159ec:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   159ee:	2313      	movs	r3, #19
   159f0:	18fb      	adds	r3, r7, r3
   159f2:	781b      	ldrb	r3, [r3, #0]
   159f4:	b25b      	sxtb	r3, r3
   159f6:	3301      	adds	r3, #1
   159f8:	d124      	bne.n	15a44 <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   159fa:	69bb      	ldr	r3, [r7, #24]
   159fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   159fe:	2b00      	cmp	r3, #0
   15a00:	d00e      	beq.n	15a20 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   15a02:	683a      	ldr	r2, [r7, #0]
   15a04:	69bb      	ldr	r3, [r7, #24]
   15a06:	0011      	movs	r1, r2
   15a08:	0018      	movs	r0, r3
   15a0a:	4b1c      	ldr	r3, [pc, #112]	; (15a7c <xQueueGenericSendFromISR+0x114>)
   15a0c:	4798      	blx	r3
   15a0e:	1e03      	subs	r3, r0, #0
   15a10:	d021      	beq.n	15a56 <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   15a12:	687b      	ldr	r3, [r7, #4]
   15a14:	2b00      	cmp	r3, #0
   15a16:	d01e      	beq.n	15a56 <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   15a18:	687b      	ldr	r3, [r7, #4]
   15a1a:	2201      	movs	r2, #1
   15a1c:	601a      	str	r2, [r3, #0]
   15a1e:	e01a      	b.n	15a56 <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   15a20:	69bb      	ldr	r3, [r7, #24]
   15a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15a24:	2b00      	cmp	r3, #0
   15a26:	d016      	beq.n	15a56 <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   15a28:	69bb      	ldr	r3, [r7, #24]
   15a2a:	3324      	adds	r3, #36	; 0x24
   15a2c:	0018      	movs	r0, r3
   15a2e:	4b14      	ldr	r3, [pc, #80]	; (15a80 <xQueueGenericSendFromISR+0x118>)
   15a30:	4798      	blx	r3
   15a32:	1e03      	subs	r3, r0, #0
   15a34:	d00f      	beq.n	15a56 <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   15a36:	687b      	ldr	r3, [r7, #4]
   15a38:	2b00      	cmp	r3, #0
   15a3a:	d00c      	beq.n	15a56 <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   15a3c:	687b      	ldr	r3, [r7, #4]
   15a3e:	2201      	movs	r2, #1
   15a40:	601a      	str	r2, [r3, #0]
   15a42:	e008      	b.n	15a56 <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   15a44:	2313      	movs	r3, #19
   15a46:	18fb      	adds	r3, r7, r3
   15a48:	781b      	ldrb	r3, [r3, #0]
   15a4a:	3301      	adds	r3, #1
   15a4c:	b2db      	uxtb	r3, r3
   15a4e:	b259      	sxtb	r1, r3
   15a50:	69bb      	ldr	r3, [r7, #24]
   15a52:	2245      	movs	r2, #69	; 0x45
   15a54:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   15a56:	2301      	movs	r3, #1
   15a58:	61fb      	str	r3, [r7, #28]
		{
   15a5a:	e001      	b.n	15a60 <xQueueGenericSendFromISR+0xf8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   15a5c:	2300      	movs	r3, #0
   15a5e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   15a60:	697b      	ldr	r3, [r7, #20]
   15a62:	0018      	movs	r0, r3
   15a64:	4b07      	ldr	r3, [pc, #28]	; (15a84 <xQueueGenericSendFromISR+0x11c>)
   15a66:	4798      	blx	r3

	return xReturn;
   15a68:	69fb      	ldr	r3, [r7, #28]
}
   15a6a:	0018      	movs	r0, r3
   15a6c:	46bd      	mov	sp, r7
   15a6e:	b008      	add	sp, #32
   15a70:	bd80      	pop	{r7, pc}
   15a72:	46c0      	nop			; (mov r8, r8)
   15a74:	000153dd 	.word	0x000153dd
   15a78:	00015f49 	.word	0x00015f49
   15a7c:	0001624d 	.word	0x0001624d
   15a80:	00016b71 	.word	0x00016b71
   15a84:	000153e9 	.word	0x000153e9

00015a88 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
   15a88:	b580      	push	{r7, lr}
   15a8a:	b088      	sub	sp, #32
   15a8c:	af00      	add	r7, sp, #0
   15a8e:	6078      	str	r0, [r7, #4]
   15a90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   15a92:	687b      	ldr	r3, [r7, #4]
   15a94:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   15a96:	69bb      	ldr	r3, [r7, #24]
   15a98:	2b00      	cmp	r3, #0
   15a9a:	d101      	bne.n	15aa0 <xQueueGiveFromISR+0x18>
   15a9c:	b672      	cpsid	i
   15a9e:	e7fe      	b.n	15a9e <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   15aa0:	69bb      	ldr	r3, [r7, #24]
   15aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15aa4:	2b00      	cmp	r3, #0
   15aa6:	d001      	beq.n	15aac <xQueueGiveFromISR+0x24>
   15aa8:	b672      	cpsid	i
   15aaa:	e7fe      	b.n	15aaa <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   15aac:	69bb      	ldr	r3, [r7, #24]
   15aae:	681b      	ldr	r3, [r3, #0]
   15ab0:	2b00      	cmp	r3, #0
   15ab2:	d103      	bne.n	15abc <xQueueGiveFromISR+0x34>
   15ab4:	69bb      	ldr	r3, [r7, #24]
   15ab6:	685b      	ldr	r3, [r3, #4]
   15ab8:	2b00      	cmp	r3, #0
   15aba:	d101      	bne.n	15ac0 <xQueueGiveFromISR+0x38>
   15abc:	2301      	movs	r3, #1
   15abe:	e000      	b.n	15ac2 <xQueueGiveFromISR+0x3a>
   15ac0:	2300      	movs	r3, #0
   15ac2:	2b00      	cmp	r3, #0
   15ac4:	d101      	bne.n	15aca <xQueueGiveFromISR+0x42>
   15ac6:	b672      	cpsid	i
   15ac8:	e7fe      	b.n	15ac8 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   15aca:	4b2b      	ldr	r3, [pc, #172]	; (15b78 <xQueueGiveFromISR+0xf0>)
   15acc:	4798      	blx	r3
   15ace:	0003      	movs	r3, r0
   15ad0:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   15ad2:	69bb      	ldr	r3, [r7, #24]
   15ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15ad6:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   15ad8:	69bb      	ldr	r3, [r7, #24]
   15ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   15adc:	693b      	ldr	r3, [r7, #16]
   15ade:	429a      	cmp	r2, r3
   15ae0:	d93f      	bls.n	15b62 <xQueueGiveFromISR+0xda>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   15ae2:	230f      	movs	r3, #15
   15ae4:	18fb      	adds	r3, r7, r3
   15ae6:	69ba      	ldr	r2, [r7, #24]
   15ae8:	2145      	movs	r1, #69	; 0x45
   15aea:	5c52      	ldrb	r2, [r2, r1]
   15aec:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   15aee:	693b      	ldr	r3, [r7, #16]
   15af0:	1c5a      	adds	r2, r3, #1
   15af2:	69bb      	ldr	r3, [r7, #24]
   15af4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   15af6:	230f      	movs	r3, #15
   15af8:	18fb      	adds	r3, r7, r3
   15afa:	781b      	ldrb	r3, [r3, #0]
   15afc:	b25b      	sxtb	r3, r3
   15afe:	3301      	adds	r3, #1
   15b00:	d123      	bne.n	15b4a <xQueueGiveFromISR+0xc2>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   15b02:	69bb      	ldr	r3, [r7, #24]
   15b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   15b06:	2b00      	cmp	r3, #0
   15b08:	d00d      	beq.n	15b26 <xQueueGiveFromISR+0x9e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   15b0a:	69bb      	ldr	r3, [r7, #24]
   15b0c:	2100      	movs	r1, #0
   15b0e:	0018      	movs	r0, r3
   15b10:	4b1a      	ldr	r3, [pc, #104]	; (15b7c <xQueueGiveFromISR+0xf4>)
   15b12:	4798      	blx	r3
   15b14:	1e03      	subs	r3, r0, #0
   15b16:	d021      	beq.n	15b5c <xQueueGiveFromISR+0xd4>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   15b18:	683b      	ldr	r3, [r7, #0]
   15b1a:	2b00      	cmp	r3, #0
   15b1c:	d01e      	beq.n	15b5c <xQueueGiveFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   15b1e:	683b      	ldr	r3, [r7, #0]
   15b20:	2201      	movs	r2, #1
   15b22:	601a      	str	r2, [r3, #0]
   15b24:	e01a      	b.n	15b5c <xQueueGiveFromISR+0xd4>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   15b26:	69bb      	ldr	r3, [r7, #24]
   15b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15b2a:	2b00      	cmp	r3, #0
   15b2c:	d016      	beq.n	15b5c <xQueueGiveFromISR+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   15b2e:	69bb      	ldr	r3, [r7, #24]
   15b30:	3324      	adds	r3, #36	; 0x24
   15b32:	0018      	movs	r0, r3
   15b34:	4b12      	ldr	r3, [pc, #72]	; (15b80 <xQueueGiveFromISR+0xf8>)
   15b36:	4798      	blx	r3
   15b38:	1e03      	subs	r3, r0, #0
   15b3a:	d00f      	beq.n	15b5c <xQueueGiveFromISR+0xd4>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   15b3c:	683b      	ldr	r3, [r7, #0]
   15b3e:	2b00      	cmp	r3, #0
   15b40:	d00c      	beq.n	15b5c <xQueueGiveFromISR+0xd4>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   15b42:	683b      	ldr	r3, [r7, #0]
   15b44:	2201      	movs	r2, #1
   15b46:	601a      	str	r2, [r3, #0]
   15b48:	e008      	b.n	15b5c <xQueueGiveFromISR+0xd4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   15b4a:	230f      	movs	r3, #15
   15b4c:	18fb      	adds	r3, r7, r3
   15b4e:	781b      	ldrb	r3, [r3, #0]
   15b50:	3301      	adds	r3, #1
   15b52:	b2db      	uxtb	r3, r3
   15b54:	b259      	sxtb	r1, r3
   15b56:	69bb      	ldr	r3, [r7, #24]
   15b58:	2245      	movs	r2, #69	; 0x45
   15b5a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   15b5c:	2301      	movs	r3, #1
   15b5e:	61fb      	str	r3, [r7, #28]
   15b60:	e001      	b.n	15b66 <xQueueGiveFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   15b62:	2300      	movs	r3, #0
   15b64:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   15b66:	697b      	ldr	r3, [r7, #20]
   15b68:	0018      	movs	r0, r3
   15b6a:	4b06      	ldr	r3, [pc, #24]	; (15b84 <xQueueGiveFromISR+0xfc>)
   15b6c:	4798      	blx	r3

	return xReturn;
   15b6e:	69fb      	ldr	r3, [r7, #28]
}
   15b70:	0018      	movs	r0, r3
   15b72:	46bd      	mov	sp, r7
   15b74:	b008      	add	sp, #32
   15b76:	bd80      	pop	{r7, pc}
   15b78:	000153dd 	.word	0x000153dd
   15b7c:	0001624d 	.word	0x0001624d
   15b80:	00016b71 	.word	0x00016b71
   15b84:	000153e9 	.word	0x000153e9

00015b88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   15b88:	b580      	push	{r7, lr}
   15b8a:	b08a      	sub	sp, #40	; 0x28
   15b8c:	af00      	add	r7, sp, #0
   15b8e:	60f8      	str	r0, [r7, #12]
   15b90:	60b9      	str	r1, [r7, #8]
   15b92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   15b94:	2300      	movs	r3, #0
   15b96:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   15b98:	68fb      	ldr	r3, [r7, #12]
   15b9a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   15b9c:	6a3b      	ldr	r3, [r7, #32]
   15b9e:	2b00      	cmp	r3, #0
   15ba0:	d101      	bne.n	15ba6 <xQueueReceive+0x1e>
   15ba2:	b672      	cpsid	i
   15ba4:	e7fe      	b.n	15ba4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   15ba6:	68bb      	ldr	r3, [r7, #8]
   15ba8:	2b00      	cmp	r3, #0
   15baa:	d103      	bne.n	15bb4 <xQueueReceive+0x2c>
   15bac:	6a3b      	ldr	r3, [r7, #32]
   15bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15bb0:	2b00      	cmp	r3, #0
   15bb2:	d101      	bne.n	15bb8 <xQueueReceive+0x30>
   15bb4:	2301      	movs	r3, #1
   15bb6:	e000      	b.n	15bba <xQueueReceive+0x32>
   15bb8:	2300      	movs	r3, #0
   15bba:	2b00      	cmp	r3, #0
   15bbc:	d101      	bne.n	15bc2 <xQueueReceive+0x3a>
   15bbe:	b672      	cpsid	i
   15bc0:	e7fe      	b.n	15bc0 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   15bc2:	4b4c      	ldr	r3, [pc, #304]	; (15cf4 <xQueueReceive+0x16c>)
   15bc4:	4798      	blx	r3
   15bc6:	1e03      	subs	r3, r0, #0
   15bc8:	d102      	bne.n	15bd0 <xQueueReceive+0x48>
   15bca:	687b      	ldr	r3, [r7, #4]
   15bcc:	2b00      	cmp	r3, #0
   15bce:	d101      	bne.n	15bd4 <xQueueReceive+0x4c>
   15bd0:	2301      	movs	r3, #1
   15bd2:	e000      	b.n	15bd6 <xQueueReceive+0x4e>
   15bd4:	2300      	movs	r3, #0
   15bd6:	2b00      	cmp	r3, #0
   15bd8:	d101      	bne.n	15bde <xQueueReceive+0x56>
   15bda:	b672      	cpsid	i
   15bdc:	e7fe      	b.n	15bdc <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   15bde:	4b46      	ldr	r3, [pc, #280]	; (15cf8 <xQueueReceive+0x170>)
   15be0:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   15be2:	6a3b      	ldr	r3, [r7, #32]
   15be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15be6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   15be8:	69fb      	ldr	r3, [r7, #28]
   15bea:	2b00      	cmp	r3, #0
   15bec:	d01a      	beq.n	15c24 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   15bee:	68ba      	ldr	r2, [r7, #8]
   15bf0:	6a3b      	ldr	r3, [r7, #32]
   15bf2:	0011      	movs	r1, r2
   15bf4:	0018      	movs	r0, r3
   15bf6:	4b41      	ldr	r3, [pc, #260]	; (15cfc <xQueueReceive+0x174>)
   15bf8:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   15bfa:	69fb      	ldr	r3, [r7, #28]
   15bfc:	1e5a      	subs	r2, r3, #1
   15bfe:	6a3b      	ldr	r3, [r7, #32]
   15c00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   15c02:	6a3b      	ldr	r3, [r7, #32]
   15c04:	691b      	ldr	r3, [r3, #16]
   15c06:	2b00      	cmp	r3, #0
   15c08:	d008      	beq.n	15c1c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   15c0a:	6a3b      	ldr	r3, [r7, #32]
   15c0c:	3310      	adds	r3, #16
   15c0e:	0018      	movs	r0, r3
   15c10:	4b3b      	ldr	r3, [pc, #236]	; (15d00 <xQueueReceive+0x178>)
   15c12:	4798      	blx	r3
   15c14:	1e03      	subs	r3, r0, #0
   15c16:	d001      	beq.n	15c1c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
   15c18:	4b3a      	ldr	r3, [pc, #232]	; (15d04 <xQueueReceive+0x17c>)
   15c1a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   15c1c:	4b3a      	ldr	r3, [pc, #232]	; (15d08 <xQueueReceive+0x180>)
   15c1e:	4798      	blx	r3
				return pdPASS;
   15c20:	2301      	movs	r3, #1
   15c22:	e062      	b.n	15cea <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   15c24:	687b      	ldr	r3, [r7, #4]
   15c26:	2b00      	cmp	r3, #0
   15c28:	d103      	bne.n	15c32 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   15c2a:	4b37      	ldr	r3, [pc, #220]	; (15d08 <xQueueReceive+0x180>)
   15c2c:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   15c2e:	2300      	movs	r3, #0
   15c30:	e05b      	b.n	15cea <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
   15c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15c34:	2b00      	cmp	r3, #0
   15c36:	d106      	bne.n	15c46 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   15c38:	2314      	movs	r3, #20
   15c3a:	18fb      	adds	r3, r7, r3
   15c3c:	0018      	movs	r0, r3
   15c3e:	4b33      	ldr	r3, [pc, #204]	; (15d0c <xQueueReceive+0x184>)
   15c40:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   15c42:	2301      	movs	r3, #1
   15c44:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   15c46:	4b30      	ldr	r3, [pc, #192]	; (15d08 <xQueueReceive+0x180>)
   15c48:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   15c4a:	4b31      	ldr	r3, [pc, #196]	; (15d10 <xQueueReceive+0x188>)
   15c4c:	4798      	blx	r3
		prvLockQueue( pxQueue );
   15c4e:	4b2a      	ldr	r3, [pc, #168]	; (15cf8 <xQueueReceive+0x170>)
   15c50:	4798      	blx	r3
   15c52:	6a3b      	ldr	r3, [r7, #32]
   15c54:	2244      	movs	r2, #68	; 0x44
   15c56:	5c9b      	ldrb	r3, [r3, r2]
   15c58:	b25b      	sxtb	r3, r3
   15c5a:	3301      	adds	r3, #1
   15c5c:	d103      	bne.n	15c66 <xQueueReceive+0xde>
   15c5e:	6a3b      	ldr	r3, [r7, #32]
   15c60:	2244      	movs	r2, #68	; 0x44
   15c62:	2100      	movs	r1, #0
   15c64:	5499      	strb	r1, [r3, r2]
   15c66:	6a3b      	ldr	r3, [r7, #32]
   15c68:	2245      	movs	r2, #69	; 0x45
   15c6a:	5c9b      	ldrb	r3, [r3, r2]
   15c6c:	b25b      	sxtb	r3, r3
   15c6e:	3301      	adds	r3, #1
   15c70:	d103      	bne.n	15c7a <xQueueReceive+0xf2>
   15c72:	6a3b      	ldr	r3, [r7, #32]
   15c74:	2245      	movs	r2, #69	; 0x45
   15c76:	2100      	movs	r1, #0
   15c78:	5499      	strb	r1, [r3, r2]
   15c7a:	4b23      	ldr	r3, [pc, #140]	; (15d08 <xQueueReceive+0x180>)
   15c7c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   15c7e:	1d3a      	adds	r2, r7, #4
   15c80:	2314      	movs	r3, #20
   15c82:	18fb      	adds	r3, r7, r3
   15c84:	0011      	movs	r1, r2
   15c86:	0018      	movs	r0, r3
   15c88:	4b22      	ldr	r3, [pc, #136]	; (15d14 <xQueueReceive+0x18c>)
   15c8a:	4798      	blx	r3
   15c8c:	1e03      	subs	r3, r0, #0
   15c8e:	d11e      	bne.n	15cce <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   15c90:	6a3b      	ldr	r3, [r7, #32]
   15c92:	0018      	movs	r0, r3
   15c94:	4b20      	ldr	r3, [pc, #128]	; (15d18 <xQueueReceive+0x190>)
   15c96:	4798      	blx	r3
   15c98:	1e03      	subs	r3, r0, #0
   15c9a:	d011      	beq.n	15cc0 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   15c9c:	6a3b      	ldr	r3, [r7, #32]
   15c9e:	3324      	adds	r3, #36	; 0x24
   15ca0:	687a      	ldr	r2, [r7, #4]
   15ca2:	0011      	movs	r1, r2
   15ca4:	0018      	movs	r0, r3
   15ca6:	4b1d      	ldr	r3, [pc, #116]	; (15d1c <xQueueReceive+0x194>)
   15ca8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   15caa:	6a3b      	ldr	r3, [r7, #32]
   15cac:	0018      	movs	r0, r3
   15cae:	4b1c      	ldr	r3, [pc, #112]	; (15d20 <xQueueReceive+0x198>)
   15cb0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   15cb2:	4b1c      	ldr	r3, [pc, #112]	; (15d24 <xQueueReceive+0x19c>)
   15cb4:	4798      	blx	r3
   15cb6:	1e03      	subs	r3, r0, #0
   15cb8:	d191      	bne.n	15bde <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   15cba:	4b12      	ldr	r3, [pc, #72]	; (15d04 <xQueueReceive+0x17c>)
   15cbc:	4798      	blx	r3
   15cbe:	e78e      	b.n	15bde <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   15cc0:	6a3b      	ldr	r3, [r7, #32]
   15cc2:	0018      	movs	r0, r3
   15cc4:	4b16      	ldr	r3, [pc, #88]	; (15d20 <xQueueReceive+0x198>)
   15cc6:	4798      	blx	r3
				( void ) xTaskResumeAll();
   15cc8:	4b16      	ldr	r3, [pc, #88]	; (15d24 <xQueueReceive+0x19c>)
   15cca:	4798      	blx	r3
   15ccc:	e787      	b.n	15bde <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   15cce:	6a3b      	ldr	r3, [r7, #32]
   15cd0:	0018      	movs	r0, r3
   15cd2:	4b13      	ldr	r3, [pc, #76]	; (15d20 <xQueueReceive+0x198>)
   15cd4:	4798      	blx	r3
			( void ) xTaskResumeAll();
   15cd6:	4b13      	ldr	r3, [pc, #76]	; (15d24 <xQueueReceive+0x19c>)
   15cd8:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   15cda:	6a3b      	ldr	r3, [r7, #32]
   15cdc:	0018      	movs	r0, r3
   15cde:	4b0e      	ldr	r3, [pc, #56]	; (15d18 <xQueueReceive+0x190>)
   15ce0:	4798      	blx	r3
   15ce2:	1e03      	subs	r3, r0, #0
   15ce4:	d100      	bne.n	15ce8 <xQueueReceive+0x160>
   15ce6:	e77a      	b.n	15bde <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   15ce8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   15cea:	0018      	movs	r0, r3
   15cec:	46bd      	mov	sp, r7
   15cee:	b00a      	add	sp, #40	; 0x28
   15cf0:	bd80      	pop	{r7, pc}
   15cf2:	46c0      	nop			; (mov r8, r8)
   15cf4:	00016ea9 	.word	0x00016ea9
   15cf8:	00015389 	.word	0x00015389
   15cfc:	00016029 	.word	0x00016029
   15d00:	00016b71 	.word	0x00016b71
   15d04:	00015371 	.word	0x00015371
   15d08:	000153ad 	.word	0x000153ad
   15d0c:	00016c31 	.word	0x00016c31
   15d10:	00016735 	.word	0x00016735
   15d14:	00016c59 	.word	0x00016c59
   15d18:	00016169 	.word	0x00016169
   15d1c:	00016ad9 	.word	0x00016ad9
   15d20:	00016079 	.word	0x00016079
   15d24:	0001674d 	.word	0x0001674d

00015d28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   15d28:	b580      	push	{r7, lr}
   15d2a:	b08a      	sub	sp, #40	; 0x28
   15d2c:	af00      	add	r7, sp, #0
   15d2e:	6078      	str	r0, [r7, #4]
   15d30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   15d32:	2300      	movs	r3, #0
   15d34:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   15d36:	687b      	ldr	r3, [r7, #4]
   15d38:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   15d3a:	2300      	movs	r3, #0
   15d3c:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   15d3e:	69fb      	ldr	r3, [r7, #28]
   15d40:	2b00      	cmp	r3, #0
   15d42:	d101      	bne.n	15d48 <xQueueSemaphoreTake+0x20>
   15d44:	b672      	cpsid	i
   15d46:	e7fe      	b.n	15d46 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   15d48:	69fb      	ldr	r3, [r7, #28]
   15d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15d4c:	2b00      	cmp	r3, #0
   15d4e:	d001      	beq.n	15d54 <xQueueSemaphoreTake+0x2c>
   15d50:	b672      	cpsid	i
   15d52:	e7fe      	b.n	15d52 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   15d54:	4b61      	ldr	r3, [pc, #388]	; (15edc <xQueueSemaphoreTake+0x1b4>)
   15d56:	4798      	blx	r3
   15d58:	1e03      	subs	r3, r0, #0
   15d5a:	d102      	bne.n	15d62 <xQueueSemaphoreTake+0x3a>
   15d5c:	683b      	ldr	r3, [r7, #0]
   15d5e:	2b00      	cmp	r3, #0
   15d60:	d101      	bne.n	15d66 <xQueueSemaphoreTake+0x3e>
   15d62:	2301      	movs	r3, #1
   15d64:	e000      	b.n	15d68 <xQueueSemaphoreTake+0x40>
   15d66:	2300      	movs	r3, #0
   15d68:	2b00      	cmp	r3, #0
   15d6a:	d101      	bne.n	15d70 <xQueueSemaphoreTake+0x48>
   15d6c:	b672      	cpsid	i
   15d6e:	e7fe      	b.n	15d6e <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   15d70:	4b5b      	ldr	r3, [pc, #364]	; (15ee0 <xQueueSemaphoreTake+0x1b8>)
   15d72:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   15d74:	69fb      	ldr	r3, [r7, #28]
   15d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15d78:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   15d7a:	69bb      	ldr	r3, [r7, #24]
   15d7c:	2b00      	cmp	r3, #0
   15d7e:	d01d      	beq.n	15dbc <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   15d80:	69bb      	ldr	r3, [r7, #24]
   15d82:	1e5a      	subs	r2, r3, #1
   15d84:	69fb      	ldr	r3, [r7, #28]
   15d86:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   15d88:	69fb      	ldr	r3, [r7, #28]
   15d8a:	681b      	ldr	r3, [r3, #0]
   15d8c:	2b00      	cmp	r3, #0
   15d8e:	d104      	bne.n	15d9a <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   15d90:	4b54      	ldr	r3, [pc, #336]	; (15ee4 <xQueueSemaphoreTake+0x1bc>)
   15d92:	4798      	blx	r3
   15d94:	0002      	movs	r2, r0
   15d96:	69fb      	ldr	r3, [r7, #28]
   15d98:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   15d9a:	69fb      	ldr	r3, [r7, #28]
   15d9c:	691b      	ldr	r3, [r3, #16]
   15d9e:	2b00      	cmp	r3, #0
   15da0:	d008      	beq.n	15db4 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   15da2:	69fb      	ldr	r3, [r7, #28]
   15da4:	3310      	adds	r3, #16
   15da6:	0018      	movs	r0, r3
   15da8:	4b4f      	ldr	r3, [pc, #316]	; (15ee8 <xQueueSemaphoreTake+0x1c0>)
   15daa:	4798      	blx	r3
   15dac:	1e03      	subs	r3, r0, #0
   15dae:	d001      	beq.n	15db4 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   15db0:	4b4e      	ldr	r3, [pc, #312]	; (15eec <xQueueSemaphoreTake+0x1c4>)
   15db2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   15db4:	4b4e      	ldr	r3, [pc, #312]	; (15ef0 <xQueueSemaphoreTake+0x1c8>)
   15db6:	4798      	blx	r3
				return pdPASS;
   15db8:	2301      	movs	r3, #1
   15dba:	e08b      	b.n	15ed4 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   15dbc:	683b      	ldr	r3, [r7, #0]
   15dbe:	2b00      	cmp	r3, #0
   15dc0:	d108      	bne.n	15dd4 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   15dc2:	6a3b      	ldr	r3, [r7, #32]
   15dc4:	2b00      	cmp	r3, #0
   15dc6:	d001      	beq.n	15dcc <xQueueSemaphoreTake+0xa4>
   15dc8:	b672      	cpsid	i
   15dca:	e7fe      	b.n	15dca <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   15dcc:	4b48      	ldr	r3, [pc, #288]	; (15ef0 <xQueueSemaphoreTake+0x1c8>)
   15dce:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   15dd0:	2300      	movs	r3, #0
   15dd2:	e07f      	b.n	15ed4 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
   15dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15dd6:	2b00      	cmp	r3, #0
   15dd8:	d106      	bne.n	15de8 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   15dda:	230c      	movs	r3, #12
   15ddc:	18fb      	adds	r3, r7, r3
   15dde:	0018      	movs	r0, r3
   15de0:	4b44      	ldr	r3, [pc, #272]	; (15ef4 <xQueueSemaphoreTake+0x1cc>)
   15de2:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   15de4:	2301      	movs	r3, #1
   15de6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   15de8:	4b41      	ldr	r3, [pc, #260]	; (15ef0 <xQueueSemaphoreTake+0x1c8>)
   15dea:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   15dec:	4b42      	ldr	r3, [pc, #264]	; (15ef8 <xQueueSemaphoreTake+0x1d0>)
   15dee:	4798      	blx	r3
		prvLockQueue( pxQueue );
   15df0:	4b3b      	ldr	r3, [pc, #236]	; (15ee0 <xQueueSemaphoreTake+0x1b8>)
   15df2:	4798      	blx	r3
   15df4:	69fb      	ldr	r3, [r7, #28]
   15df6:	2244      	movs	r2, #68	; 0x44
   15df8:	5c9b      	ldrb	r3, [r3, r2]
   15dfa:	b25b      	sxtb	r3, r3
   15dfc:	3301      	adds	r3, #1
   15dfe:	d103      	bne.n	15e08 <xQueueSemaphoreTake+0xe0>
   15e00:	69fb      	ldr	r3, [r7, #28]
   15e02:	2244      	movs	r2, #68	; 0x44
   15e04:	2100      	movs	r1, #0
   15e06:	5499      	strb	r1, [r3, r2]
   15e08:	69fb      	ldr	r3, [r7, #28]
   15e0a:	2245      	movs	r2, #69	; 0x45
   15e0c:	5c9b      	ldrb	r3, [r3, r2]
   15e0e:	b25b      	sxtb	r3, r3
   15e10:	3301      	adds	r3, #1
   15e12:	d103      	bne.n	15e1c <xQueueSemaphoreTake+0xf4>
   15e14:	69fb      	ldr	r3, [r7, #28]
   15e16:	2245      	movs	r2, #69	; 0x45
   15e18:	2100      	movs	r1, #0
   15e1a:	5499      	strb	r1, [r3, r2]
   15e1c:	4b34      	ldr	r3, [pc, #208]	; (15ef0 <xQueueSemaphoreTake+0x1c8>)
   15e1e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   15e20:	003a      	movs	r2, r7
   15e22:	230c      	movs	r3, #12
   15e24:	18fb      	adds	r3, r7, r3
   15e26:	0011      	movs	r1, r2
   15e28:	0018      	movs	r0, r3
   15e2a:	4b34      	ldr	r3, [pc, #208]	; (15efc <xQueueSemaphoreTake+0x1d4>)
   15e2c:	4798      	blx	r3
   15e2e:	1e03      	subs	r3, r0, #0
   15e30:	d12e      	bne.n	15e90 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   15e32:	69fb      	ldr	r3, [r7, #28]
   15e34:	0018      	movs	r0, r3
   15e36:	4b32      	ldr	r3, [pc, #200]	; (15f00 <xQueueSemaphoreTake+0x1d8>)
   15e38:	4798      	blx	r3
   15e3a:	1e03      	subs	r3, r0, #0
   15e3c:	d021      	beq.n	15e82 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   15e3e:	69fb      	ldr	r3, [r7, #28]
   15e40:	681b      	ldr	r3, [r3, #0]
   15e42:	2b00      	cmp	r3, #0
   15e44:	d10a      	bne.n	15e5c <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
   15e46:	4b26      	ldr	r3, [pc, #152]	; (15ee0 <xQueueSemaphoreTake+0x1b8>)
   15e48:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   15e4a:	69fb      	ldr	r3, [r7, #28]
   15e4c:	685b      	ldr	r3, [r3, #4]
   15e4e:	0018      	movs	r0, r3
   15e50:	4b2c      	ldr	r3, [pc, #176]	; (15f04 <xQueueSemaphoreTake+0x1dc>)
   15e52:	4798      	blx	r3
   15e54:	0003      	movs	r3, r0
   15e56:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   15e58:	4b25      	ldr	r3, [pc, #148]	; (15ef0 <xQueueSemaphoreTake+0x1c8>)
   15e5a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   15e5c:	69fb      	ldr	r3, [r7, #28]
   15e5e:	3324      	adds	r3, #36	; 0x24
   15e60:	683a      	ldr	r2, [r7, #0]
   15e62:	0011      	movs	r1, r2
   15e64:	0018      	movs	r0, r3
   15e66:	4b28      	ldr	r3, [pc, #160]	; (15f08 <xQueueSemaphoreTake+0x1e0>)
   15e68:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   15e6a:	69fb      	ldr	r3, [r7, #28]
   15e6c:	0018      	movs	r0, r3
   15e6e:	4b27      	ldr	r3, [pc, #156]	; (15f0c <xQueueSemaphoreTake+0x1e4>)
   15e70:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   15e72:	4b27      	ldr	r3, [pc, #156]	; (15f10 <xQueueSemaphoreTake+0x1e8>)
   15e74:	4798      	blx	r3
   15e76:	1e03      	subs	r3, r0, #0
   15e78:	d000      	beq.n	15e7c <xQueueSemaphoreTake+0x154>
   15e7a:	e779      	b.n	15d70 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   15e7c:	4b1b      	ldr	r3, [pc, #108]	; (15eec <xQueueSemaphoreTake+0x1c4>)
   15e7e:	4798      	blx	r3
   15e80:	e776      	b.n	15d70 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   15e82:	69fb      	ldr	r3, [r7, #28]
   15e84:	0018      	movs	r0, r3
   15e86:	4b21      	ldr	r3, [pc, #132]	; (15f0c <xQueueSemaphoreTake+0x1e4>)
   15e88:	4798      	blx	r3
				( void ) xTaskResumeAll();
   15e8a:	4b21      	ldr	r3, [pc, #132]	; (15f10 <xQueueSemaphoreTake+0x1e8>)
   15e8c:	4798      	blx	r3
   15e8e:	e76f      	b.n	15d70 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   15e90:	69fb      	ldr	r3, [r7, #28]
   15e92:	0018      	movs	r0, r3
   15e94:	4b1d      	ldr	r3, [pc, #116]	; (15f0c <xQueueSemaphoreTake+0x1e4>)
   15e96:	4798      	blx	r3
			( void ) xTaskResumeAll();
   15e98:	4b1d      	ldr	r3, [pc, #116]	; (15f10 <xQueueSemaphoreTake+0x1e8>)
   15e9a:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   15e9c:	69fb      	ldr	r3, [r7, #28]
   15e9e:	0018      	movs	r0, r3
   15ea0:	4b17      	ldr	r3, [pc, #92]	; (15f00 <xQueueSemaphoreTake+0x1d8>)
   15ea2:	4798      	blx	r3
   15ea4:	1e03      	subs	r3, r0, #0
   15ea6:	d100      	bne.n	15eaa <xQueueSemaphoreTake+0x182>
   15ea8:	e762      	b.n	15d70 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   15eaa:	6a3b      	ldr	r3, [r7, #32]
   15eac:	2b00      	cmp	r3, #0
   15eae:	d010      	beq.n	15ed2 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
   15eb0:	4b0b      	ldr	r3, [pc, #44]	; (15ee0 <xQueueSemaphoreTake+0x1b8>)
   15eb2:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   15eb4:	69fb      	ldr	r3, [r7, #28]
   15eb6:	0018      	movs	r0, r3
   15eb8:	4b16      	ldr	r3, [pc, #88]	; (15f14 <xQueueSemaphoreTake+0x1ec>)
   15eba:	4798      	blx	r3
   15ebc:	0003      	movs	r3, r0
   15ebe:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   15ec0:	69fb      	ldr	r3, [r7, #28]
   15ec2:	685b      	ldr	r3, [r3, #4]
   15ec4:	697a      	ldr	r2, [r7, #20]
   15ec6:	0011      	movs	r1, r2
   15ec8:	0018      	movs	r0, r3
   15eca:	4b13      	ldr	r3, [pc, #76]	; (15f18 <xQueueSemaphoreTake+0x1f0>)
   15ecc:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   15ece:	4b08      	ldr	r3, [pc, #32]	; (15ef0 <xQueueSemaphoreTake+0x1c8>)
   15ed0:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
   15ed2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   15ed4:	0018      	movs	r0, r3
   15ed6:	46bd      	mov	sp, r7
   15ed8:	b00a      	add	sp, #40	; 0x28
   15eda:	bd80      	pop	{r7, pc}
   15edc:	00016ea9 	.word	0x00016ea9
   15ee0:	00015389 	.word	0x00015389
   15ee4:	00017175 	.word	0x00017175
   15ee8:	00016b71 	.word	0x00016b71
   15eec:	00015371 	.word	0x00015371
   15ef0:	000153ad 	.word	0x000153ad
   15ef4:	00016c31 	.word	0x00016c31
   15ef8:	00016735 	.word	0x00016735
   15efc:	00016c59 	.word	0x00016c59
   15f00:	00016169 	.word	0x00016169
   15f04:	00016ee1 	.word	0x00016ee1
   15f08:	00016ad9 	.word	0x00016ad9
   15f0c:	00016079 	.word	0x00016079
   15f10:	0001674d 	.word	0x0001674d
   15f14:	00015f1d 	.word	0x00015f1d
   15f18:	00017085 	.word	0x00017085

00015f1c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   15f1c:	b580      	push	{r7, lr}
   15f1e:	b084      	sub	sp, #16
   15f20:	af00      	add	r7, sp, #0
   15f22:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   15f24:	687b      	ldr	r3, [r7, #4]
   15f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15f28:	2b00      	cmp	r3, #0
   15f2a:	d006      	beq.n	15f3a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   15f2c:	687b      	ldr	r3, [r7, #4]
   15f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   15f30:	681b      	ldr	r3, [r3, #0]
   15f32:	2205      	movs	r2, #5
   15f34:	1ad3      	subs	r3, r2, r3
   15f36:	60fb      	str	r3, [r7, #12]
   15f38:	e001      	b.n	15f3e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   15f3a:	2300      	movs	r3, #0
   15f3c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   15f3e:	68fb      	ldr	r3, [r7, #12]
	}
   15f40:	0018      	movs	r0, r3
   15f42:	46bd      	mov	sp, r7
   15f44:	b004      	add	sp, #16
   15f46:	bd80      	pop	{r7, pc}

00015f48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   15f48:	b580      	push	{r7, lr}
   15f4a:	b086      	sub	sp, #24
   15f4c:	af00      	add	r7, sp, #0
   15f4e:	60f8      	str	r0, [r7, #12]
   15f50:	60b9      	str	r1, [r7, #8]
   15f52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   15f54:	2300      	movs	r3, #0
   15f56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   15f58:	68fb      	ldr	r3, [r7, #12]
   15f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15f5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   15f5e:	68fb      	ldr	r3, [r7, #12]
   15f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15f62:	2b00      	cmp	r3, #0
   15f64:	d10e      	bne.n	15f84 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   15f66:	68fb      	ldr	r3, [r7, #12]
   15f68:	681b      	ldr	r3, [r3, #0]
   15f6a:	2b00      	cmp	r3, #0
   15f6c:	d14e      	bne.n	1600c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   15f6e:	68fb      	ldr	r3, [r7, #12]
   15f70:	685b      	ldr	r3, [r3, #4]
   15f72:	0018      	movs	r0, r3
   15f74:	4b2a      	ldr	r3, [pc, #168]	; (16020 <prvCopyDataToQueue+0xd8>)
   15f76:	4798      	blx	r3
   15f78:	0003      	movs	r3, r0
   15f7a:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   15f7c:	68fb      	ldr	r3, [r7, #12]
   15f7e:	2200      	movs	r2, #0
   15f80:	605a      	str	r2, [r3, #4]
   15f82:	e043      	b.n	1600c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   15f84:	687b      	ldr	r3, [r7, #4]
   15f86:	2b00      	cmp	r3, #0
   15f88:	d119      	bne.n	15fbe <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   15f8a:	68fb      	ldr	r3, [r7, #12]
   15f8c:	6898      	ldr	r0, [r3, #8]
   15f8e:	68fb      	ldr	r3, [r7, #12]
   15f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   15f92:	68bb      	ldr	r3, [r7, #8]
   15f94:	0019      	movs	r1, r3
   15f96:	4b23      	ldr	r3, [pc, #140]	; (16024 <prvCopyDataToQueue+0xdc>)
   15f98:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   15f9a:	68fb      	ldr	r3, [r7, #12]
   15f9c:	689a      	ldr	r2, [r3, #8]
   15f9e:	68fb      	ldr	r3, [r7, #12]
   15fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15fa2:	18d2      	adds	r2, r2, r3
   15fa4:	68fb      	ldr	r3, [r7, #12]
   15fa6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   15fa8:	68fb      	ldr	r3, [r7, #12]
   15faa:	689a      	ldr	r2, [r3, #8]
   15fac:	68fb      	ldr	r3, [r7, #12]
   15fae:	685b      	ldr	r3, [r3, #4]
   15fb0:	429a      	cmp	r2, r3
   15fb2:	d32b      	bcc.n	1600c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   15fb4:	68fb      	ldr	r3, [r7, #12]
   15fb6:	681a      	ldr	r2, [r3, #0]
   15fb8:	68fb      	ldr	r3, [r7, #12]
   15fba:	609a      	str	r2, [r3, #8]
   15fbc:	e026      	b.n	1600c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   15fbe:	68fb      	ldr	r3, [r7, #12]
   15fc0:	68d8      	ldr	r0, [r3, #12]
   15fc2:	68fb      	ldr	r3, [r7, #12]
   15fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   15fc6:	68bb      	ldr	r3, [r7, #8]
   15fc8:	0019      	movs	r1, r3
   15fca:	4b16      	ldr	r3, [pc, #88]	; (16024 <prvCopyDataToQueue+0xdc>)
   15fcc:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   15fce:	68fb      	ldr	r3, [r7, #12]
   15fd0:	68da      	ldr	r2, [r3, #12]
   15fd2:	68fb      	ldr	r3, [r7, #12]
   15fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15fd6:	425b      	negs	r3, r3
   15fd8:	18d2      	adds	r2, r2, r3
   15fda:	68fb      	ldr	r3, [r7, #12]
   15fdc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   15fde:	68fb      	ldr	r3, [r7, #12]
   15fe0:	68da      	ldr	r2, [r3, #12]
   15fe2:	68fb      	ldr	r3, [r7, #12]
   15fe4:	681b      	ldr	r3, [r3, #0]
   15fe6:	429a      	cmp	r2, r3
   15fe8:	d207      	bcs.n	15ffa <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   15fea:	68fb      	ldr	r3, [r7, #12]
   15fec:	685a      	ldr	r2, [r3, #4]
   15fee:	68fb      	ldr	r3, [r7, #12]
   15ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15ff2:	425b      	negs	r3, r3
   15ff4:	18d2      	adds	r2, r2, r3
   15ff6:	68fb      	ldr	r3, [r7, #12]
   15ff8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   15ffa:	687b      	ldr	r3, [r7, #4]
   15ffc:	2b02      	cmp	r3, #2
   15ffe:	d105      	bne.n	1600c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   16000:	693b      	ldr	r3, [r7, #16]
   16002:	2b00      	cmp	r3, #0
   16004:	d002      	beq.n	1600c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   16006:	693b      	ldr	r3, [r7, #16]
   16008:	3b01      	subs	r3, #1
   1600a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1600c:	693b      	ldr	r3, [r7, #16]
   1600e:	1c5a      	adds	r2, r3, #1
   16010:	68fb      	ldr	r3, [r7, #12]
   16012:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   16014:	697b      	ldr	r3, [r7, #20]
}
   16016:	0018      	movs	r0, r3
   16018:	46bd      	mov	sp, r7
   1601a:	b006      	add	sp, #24
   1601c:	bd80      	pop	{r7, pc}
   1601e:	46c0      	nop			; (mov r8, r8)
   16020:	00016fc5 	.word	0x00016fc5
   16024:	0001c5a5 	.word	0x0001c5a5

00016028 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   16028:	b580      	push	{r7, lr}
   1602a:	b082      	sub	sp, #8
   1602c:	af00      	add	r7, sp, #0
   1602e:	6078      	str	r0, [r7, #4]
   16030:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   16032:	687b      	ldr	r3, [r7, #4]
   16034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   16036:	2b00      	cmp	r3, #0
   16038:	d018      	beq.n	1606c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1603a:	687b      	ldr	r3, [r7, #4]
   1603c:	68da      	ldr	r2, [r3, #12]
   1603e:	687b      	ldr	r3, [r7, #4]
   16040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   16042:	18d2      	adds	r2, r2, r3
   16044:	687b      	ldr	r3, [r7, #4]
   16046:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   16048:	687b      	ldr	r3, [r7, #4]
   1604a:	68da      	ldr	r2, [r3, #12]
   1604c:	687b      	ldr	r3, [r7, #4]
   1604e:	685b      	ldr	r3, [r3, #4]
   16050:	429a      	cmp	r2, r3
   16052:	d303      	bcc.n	1605c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   16054:	687b      	ldr	r3, [r7, #4]
   16056:	681a      	ldr	r2, [r3, #0]
   16058:	687b      	ldr	r3, [r7, #4]
   1605a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1605c:	687b      	ldr	r3, [r7, #4]
   1605e:	68d9      	ldr	r1, [r3, #12]
   16060:	687b      	ldr	r3, [r7, #4]
   16062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   16064:	683b      	ldr	r3, [r7, #0]
   16066:	0018      	movs	r0, r3
   16068:	4b02      	ldr	r3, [pc, #8]	; (16074 <prvCopyDataFromQueue+0x4c>)
   1606a:	4798      	blx	r3
	}
}
   1606c:	46c0      	nop			; (mov r8, r8)
   1606e:	46bd      	mov	sp, r7
   16070:	b002      	add	sp, #8
   16072:	bd80      	pop	{r7, pc}
   16074:	0001c5a5 	.word	0x0001c5a5

00016078 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   16078:	b580      	push	{r7, lr}
   1607a:	b084      	sub	sp, #16
   1607c:	af00      	add	r7, sp, #0
   1607e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   16080:	4b34      	ldr	r3, [pc, #208]	; (16154 <prvUnlockQueue+0xdc>)
   16082:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   16084:	230f      	movs	r3, #15
   16086:	18fb      	adds	r3, r7, r3
   16088:	687a      	ldr	r2, [r7, #4]
   1608a:	2145      	movs	r1, #69	; 0x45
   1608c:	5c52      	ldrb	r2, [r2, r1]
   1608e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   16090:	e022      	b.n	160d8 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   16092:	687b      	ldr	r3, [r7, #4]
   16094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   16096:	2b00      	cmp	r3, #0
   16098:	d009      	beq.n	160ae <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1609a:	687b      	ldr	r3, [r7, #4]
   1609c:	2100      	movs	r1, #0
   1609e:	0018      	movs	r0, r3
   160a0:	4b2d      	ldr	r3, [pc, #180]	; (16158 <prvUnlockQueue+0xe0>)
   160a2:	4798      	blx	r3
   160a4:	1e03      	subs	r3, r0, #0
   160a6:	d00f      	beq.n	160c8 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   160a8:	4b2c      	ldr	r3, [pc, #176]	; (1615c <prvUnlockQueue+0xe4>)
   160aa:	4798      	blx	r3
   160ac:	e00c      	b.n	160c8 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   160ae:	687b      	ldr	r3, [r7, #4]
   160b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   160b2:	2b00      	cmp	r3, #0
   160b4:	d017      	beq.n	160e6 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   160b6:	687b      	ldr	r3, [r7, #4]
   160b8:	3324      	adds	r3, #36	; 0x24
   160ba:	0018      	movs	r0, r3
   160bc:	4b28      	ldr	r3, [pc, #160]	; (16160 <prvUnlockQueue+0xe8>)
   160be:	4798      	blx	r3
   160c0:	1e03      	subs	r3, r0, #0
   160c2:	d001      	beq.n	160c8 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   160c4:	4b25      	ldr	r3, [pc, #148]	; (1615c <prvUnlockQueue+0xe4>)
   160c6:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   160c8:	230f      	movs	r3, #15
   160ca:	18fb      	adds	r3, r7, r3
   160cc:	781b      	ldrb	r3, [r3, #0]
   160ce:	3b01      	subs	r3, #1
   160d0:	b2da      	uxtb	r2, r3
   160d2:	230f      	movs	r3, #15
   160d4:	18fb      	adds	r3, r7, r3
   160d6:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   160d8:	230f      	movs	r3, #15
   160da:	18fb      	adds	r3, r7, r3
   160dc:	781b      	ldrb	r3, [r3, #0]
   160de:	b25b      	sxtb	r3, r3
   160e0:	2b00      	cmp	r3, #0
   160e2:	dcd6      	bgt.n	16092 <prvUnlockQueue+0x1a>
   160e4:	e000      	b.n	160e8 <prvUnlockQueue+0x70>
						break;
   160e6:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   160e8:	687b      	ldr	r3, [r7, #4]
   160ea:	2245      	movs	r2, #69	; 0x45
   160ec:	21ff      	movs	r1, #255	; 0xff
   160ee:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   160f0:	4b1c      	ldr	r3, [pc, #112]	; (16164 <prvUnlockQueue+0xec>)
   160f2:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   160f4:	4b17      	ldr	r3, [pc, #92]	; (16154 <prvUnlockQueue+0xdc>)
   160f6:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   160f8:	230e      	movs	r3, #14
   160fa:	18fb      	adds	r3, r7, r3
   160fc:	687a      	ldr	r2, [r7, #4]
   160fe:	2144      	movs	r1, #68	; 0x44
   16100:	5c52      	ldrb	r2, [r2, r1]
   16102:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   16104:	e014      	b.n	16130 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   16106:	687b      	ldr	r3, [r7, #4]
   16108:	691b      	ldr	r3, [r3, #16]
   1610a:	2b00      	cmp	r3, #0
   1610c:	d017      	beq.n	1613e <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1610e:	687b      	ldr	r3, [r7, #4]
   16110:	3310      	adds	r3, #16
   16112:	0018      	movs	r0, r3
   16114:	4b12      	ldr	r3, [pc, #72]	; (16160 <prvUnlockQueue+0xe8>)
   16116:	4798      	blx	r3
   16118:	1e03      	subs	r3, r0, #0
   1611a:	d001      	beq.n	16120 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1611c:	4b0f      	ldr	r3, [pc, #60]	; (1615c <prvUnlockQueue+0xe4>)
   1611e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   16120:	230e      	movs	r3, #14
   16122:	18fb      	adds	r3, r7, r3
   16124:	781b      	ldrb	r3, [r3, #0]
   16126:	3b01      	subs	r3, #1
   16128:	b2da      	uxtb	r2, r3
   1612a:	230e      	movs	r3, #14
   1612c:	18fb      	adds	r3, r7, r3
   1612e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   16130:	230e      	movs	r3, #14
   16132:	18fb      	adds	r3, r7, r3
   16134:	781b      	ldrb	r3, [r3, #0]
   16136:	b25b      	sxtb	r3, r3
   16138:	2b00      	cmp	r3, #0
   1613a:	dce4      	bgt.n	16106 <prvUnlockQueue+0x8e>
   1613c:	e000      	b.n	16140 <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1613e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   16140:	687b      	ldr	r3, [r7, #4]
   16142:	2244      	movs	r2, #68	; 0x44
   16144:	21ff      	movs	r1, #255	; 0xff
   16146:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   16148:	4b06      	ldr	r3, [pc, #24]	; (16164 <prvUnlockQueue+0xec>)
   1614a:	4798      	blx	r3
}
   1614c:	46c0      	nop			; (mov r8, r8)
   1614e:	46bd      	mov	sp, r7
   16150:	b004      	add	sp, #16
   16152:	bd80      	pop	{r7, pc}
   16154:	00015389 	.word	0x00015389
   16158:	0001624d 	.word	0x0001624d
   1615c:	00016d05 	.word	0x00016d05
   16160:	00016b71 	.word	0x00016b71
   16164:	000153ad 	.word	0x000153ad

00016168 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   16168:	b580      	push	{r7, lr}
   1616a:	b084      	sub	sp, #16
   1616c:	af00      	add	r7, sp, #0
   1616e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   16170:	4b08      	ldr	r3, [pc, #32]	; (16194 <prvIsQueueEmpty+0x2c>)
   16172:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   16174:	687b      	ldr	r3, [r7, #4]
   16176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16178:	2b00      	cmp	r3, #0
   1617a:	d102      	bne.n	16182 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1617c:	2301      	movs	r3, #1
   1617e:	60fb      	str	r3, [r7, #12]
   16180:	e001      	b.n	16186 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   16182:	2300      	movs	r3, #0
   16184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   16186:	4b04      	ldr	r3, [pc, #16]	; (16198 <prvIsQueueEmpty+0x30>)
   16188:	4798      	blx	r3

	return xReturn;
   1618a:	68fb      	ldr	r3, [r7, #12]
}
   1618c:	0018      	movs	r0, r3
   1618e:	46bd      	mov	sp, r7
   16190:	b004      	add	sp, #16
   16192:	bd80      	pop	{r7, pc}
   16194:	00015389 	.word	0x00015389
   16198:	000153ad 	.word	0x000153ad

0001619c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1619c:	b580      	push	{r7, lr}
   1619e:	b084      	sub	sp, #16
   161a0:	af00      	add	r7, sp, #0
   161a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   161a4:	4b09      	ldr	r3, [pc, #36]	; (161cc <prvIsQueueFull+0x30>)
   161a6:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   161a8:	687b      	ldr	r3, [r7, #4]
   161aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   161ac:	687b      	ldr	r3, [r7, #4]
   161ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   161b0:	429a      	cmp	r2, r3
   161b2:	d102      	bne.n	161ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   161b4:	2301      	movs	r3, #1
   161b6:	60fb      	str	r3, [r7, #12]
   161b8:	e001      	b.n	161be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   161ba:	2300      	movs	r3, #0
   161bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   161be:	4b04      	ldr	r3, [pc, #16]	; (161d0 <prvIsQueueFull+0x34>)
   161c0:	4798      	blx	r3

	return xReturn;
   161c2:	68fb      	ldr	r3, [r7, #12]
}
   161c4:	0018      	movs	r0, r3
   161c6:	46bd      	mov	sp, r7
   161c8:	b004      	add	sp, #16
   161ca:	bd80      	pop	{r7, pc}
   161cc:	00015389 	.word	0x00015389
   161d0:	000153ad 	.word	0x000153ad

000161d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   161d4:	b580      	push	{r7, lr}
   161d6:	b086      	sub	sp, #24
   161d8:	af00      	add	r7, sp, #0
   161da:	60f8      	str	r0, [r7, #12]
   161dc:	60b9      	str	r1, [r7, #8]
   161de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   161e0:	68fb      	ldr	r3, [r7, #12]
   161e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   161e4:	4b15      	ldr	r3, [pc, #84]	; (1623c <vQueueWaitForMessageRestricted+0x68>)
   161e6:	4798      	blx	r3
   161e8:	697b      	ldr	r3, [r7, #20]
   161ea:	2244      	movs	r2, #68	; 0x44
   161ec:	5c9b      	ldrb	r3, [r3, r2]
   161ee:	b25b      	sxtb	r3, r3
   161f0:	3301      	adds	r3, #1
   161f2:	d103      	bne.n	161fc <vQueueWaitForMessageRestricted+0x28>
   161f4:	697b      	ldr	r3, [r7, #20]
   161f6:	2244      	movs	r2, #68	; 0x44
   161f8:	2100      	movs	r1, #0
   161fa:	5499      	strb	r1, [r3, r2]
   161fc:	697b      	ldr	r3, [r7, #20]
   161fe:	2245      	movs	r2, #69	; 0x45
   16200:	5c9b      	ldrb	r3, [r3, r2]
   16202:	b25b      	sxtb	r3, r3
   16204:	3301      	adds	r3, #1
   16206:	d103      	bne.n	16210 <vQueueWaitForMessageRestricted+0x3c>
   16208:	697b      	ldr	r3, [r7, #20]
   1620a:	2245      	movs	r2, #69	; 0x45
   1620c:	2100      	movs	r1, #0
   1620e:	5499      	strb	r1, [r3, r2]
   16210:	4b0b      	ldr	r3, [pc, #44]	; (16240 <vQueueWaitForMessageRestricted+0x6c>)
   16212:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   16214:	697b      	ldr	r3, [r7, #20]
   16216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16218:	2b00      	cmp	r3, #0
   1621a:	d106      	bne.n	1622a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1621c:	697b      	ldr	r3, [r7, #20]
   1621e:	3324      	adds	r3, #36	; 0x24
   16220:	687a      	ldr	r2, [r7, #4]
   16222:	68b9      	ldr	r1, [r7, #8]
   16224:	0018      	movs	r0, r3
   16226:	4b07      	ldr	r3, [pc, #28]	; (16244 <vQueueWaitForMessageRestricted+0x70>)
   16228:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1622a:	697b      	ldr	r3, [r7, #20]
   1622c:	0018      	movs	r0, r3
   1622e:	4b06      	ldr	r3, [pc, #24]	; (16248 <vQueueWaitForMessageRestricted+0x74>)
   16230:	4798      	blx	r3
	}
   16232:	46c0      	nop			; (mov r8, r8)
   16234:	46bd      	mov	sp, r7
   16236:	b006      	add	sp, #24
   16238:	bd80      	pop	{r7, pc}
   1623a:	46c0      	nop			; (mov r8, r8)
   1623c:	00015389 	.word	0x00015389
   16240:	000153ad 	.word	0x000153ad
   16244:	00016b1d 	.word	0x00016b1d
   16248:	00016079 	.word	0x00016079

0001624c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1624c:	b580      	push	{r7, lr}
   1624e:	b086      	sub	sp, #24
   16250:	af00      	add	r7, sp, #0
   16252:	6078      	str	r0, [r7, #4]
   16254:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   16256:	687b      	ldr	r3, [r7, #4]
   16258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1625a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1625c:	2300      	movs	r3, #0
   1625e:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   16260:	693b      	ldr	r3, [r7, #16]
   16262:	2b00      	cmp	r3, #0
   16264:	d101      	bne.n	1626a <prvNotifyQueueSetContainer+0x1e>
   16266:	b672      	cpsid	i
   16268:	e7fe      	b.n	16268 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1626a:	693b      	ldr	r3, [r7, #16]
   1626c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1626e:	693b      	ldr	r3, [r7, #16]
   16270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16272:	429a      	cmp	r2, r3
   16274:	d301      	bcc.n	1627a <prvNotifyQueueSetContainer+0x2e>
   16276:	b672      	cpsid	i
   16278:	e7fe      	b.n	16278 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1627a:	693b      	ldr	r3, [r7, #16]
   1627c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1627e:	693b      	ldr	r3, [r7, #16]
   16280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   16282:	429a      	cmp	r2, r3
   16284:	d22a      	bcs.n	162dc <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   16286:	230f      	movs	r3, #15
   16288:	18fb      	adds	r3, r7, r3
   1628a:	693a      	ldr	r2, [r7, #16]
   1628c:	2145      	movs	r1, #69	; 0x45
   1628e:	5c52      	ldrb	r2, [r2, r1]
   16290:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   16292:	683a      	ldr	r2, [r7, #0]
   16294:	1d39      	adds	r1, r7, #4
   16296:	693b      	ldr	r3, [r7, #16]
   16298:	0018      	movs	r0, r3
   1629a:	4b13      	ldr	r3, [pc, #76]	; (162e8 <prvNotifyQueueSetContainer+0x9c>)
   1629c:	4798      	blx	r3
   1629e:	0003      	movs	r3, r0
   162a0:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   162a2:	230f      	movs	r3, #15
   162a4:	18fb      	adds	r3, r7, r3
   162a6:	781b      	ldrb	r3, [r3, #0]
   162a8:	b25b      	sxtb	r3, r3
   162aa:	3301      	adds	r3, #1
   162ac:	d10d      	bne.n	162ca <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   162ae:	693b      	ldr	r3, [r7, #16]
   162b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   162b2:	2b00      	cmp	r3, #0
   162b4:	d012      	beq.n	162dc <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   162b6:	693b      	ldr	r3, [r7, #16]
   162b8:	3324      	adds	r3, #36	; 0x24
   162ba:	0018      	movs	r0, r3
   162bc:	4b0b      	ldr	r3, [pc, #44]	; (162ec <prvNotifyQueueSetContainer+0xa0>)
   162be:	4798      	blx	r3
   162c0:	1e03      	subs	r3, r0, #0
   162c2:	d00b      	beq.n	162dc <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   162c4:	2301      	movs	r3, #1
   162c6:	617b      	str	r3, [r7, #20]
   162c8:	e008      	b.n	162dc <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   162ca:	230f      	movs	r3, #15
   162cc:	18fb      	adds	r3, r7, r3
   162ce:	781b      	ldrb	r3, [r3, #0]
   162d0:	3301      	adds	r3, #1
   162d2:	b2db      	uxtb	r3, r3
   162d4:	b259      	sxtb	r1, r3
   162d6:	693b      	ldr	r3, [r7, #16]
   162d8:	2245      	movs	r2, #69	; 0x45
   162da:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   162dc:	697b      	ldr	r3, [r7, #20]
	}
   162de:	0018      	movs	r0, r3
   162e0:	46bd      	mov	sp, r7
   162e2:	b006      	add	sp, #24
   162e4:	bd80      	pop	{r7, pc}
   162e6:	46c0      	nop			; (mov r8, r8)
   162e8:	00015f49 	.word	0x00015f49
   162ec:	00016b71 	.word	0x00016b71

000162f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   162f0:	b590      	push	{r4, r7, lr}
   162f2:	b08d      	sub	sp, #52	; 0x34
   162f4:	af04      	add	r7, sp, #16
   162f6:	60f8      	str	r0, [r7, #12]
   162f8:	60b9      	str	r1, [r7, #8]
   162fa:	603b      	str	r3, [r7, #0]
   162fc:	1dbb      	adds	r3, r7, #6
   162fe:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   16300:	1dbb      	adds	r3, r7, #6
   16302:	881b      	ldrh	r3, [r3, #0]
   16304:	009b      	lsls	r3, r3, #2
   16306:	0018      	movs	r0, r3
   16308:	4b1d      	ldr	r3, [pc, #116]	; (16380 <xTaskCreate+0x90>)
   1630a:	4798      	blx	r3
   1630c:	0003      	movs	r3, r0
   1630e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   16310:	697b      	ldr	r3, [r7, #20]
   16312:	2b00      	cmp	r3, #0
   16314:	d010      	beq.n	16338 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   16316:	204c      	movs	r0, #76	; 0x4c
   16318:	4b19      	ldr	r3, [pc, #100]	; (16380 <xTaskCreate+0x90>)
   1631a:	4798      	blx	r3
   1631c:	0003      	movs	r3, r0
   1631e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   16320:	69fb      	ldr	r3, [r7, #28]
   16322:	2b00      	cmp	r3, #0
   16324:	d003      	beq.n	1632e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   16326:	69fb      	ldr	r3, [r7, #28]
   16328:	697a      	ldr	r2, [r7, #20]
   1632a:	631a      	str	r2, [r3, #48]	; 0x30
   1632c:	e006      	b.n	1633c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1632e:	697b      	ldr	r3, [r7, #20]
   16330:	0018      	movs	r0, r3
   16332:	4b14      	ldr	r3, [pc, #80]	; (16384 <xTaskCreate+0x94>)
   16334:	4798      	blx	r3
   16336:	e001      	b.n	1633c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   16338:	2300      	movs	r3, #0
   1633a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1633c:	69fb      	ldr	r3, [r7, #28]
   1633e:	2b00      	cmp	r3, #0
   16340:	d016      	beq.n	16370 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   16342:	1dbb      	adds	r3, r7, #6
   16344:	881a      	ldrh	r2, [r3, #0]
   16346:	683c      	ldr	r4, [r7, #0]
   16348:	68b9      	ldr	r1, [r7, #8]
   1634a:	68f8      	ldr	r0, [r7, #12]
   1634c:	2300      	movs	r3, #0
   1634e:	9303      	str	r3, [sp, #12]
   16350:	69fb      	ldr	r3, [r7, #28]
   16352:	9302      	str	r3, [sp, #8]
   16354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16356:	9301      	str	r3, [sp, #4]
   16358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1635a:	9300      	str	r3, [sp, #0]
   1635c:	0023      	movs	r3, r4
   1635e:	4c0a      	ldr	r4, [pc, #40]	; (16388 <xTaskCreate+0x98>)
   16360:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   16362:	69fb      	ldr	r3, [r7, #28]
   16364:	0018      	movs	r0, r3
   16366:	4b09      	ldr	r3, [pc, #36]	; (1638c <xTaskCreate+0x9c>)
   16368:	4798      	blx	r3
			xReturn = pdPASS;
   1636a:	2301      	movs	r3, #1
   1636c:	61bb      	str	r3, [r7, #24]
   1636e:	e002      	b.n	16376 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   16370:	2301      	movs	r3, #1
   16372:	425b      	negs	r3, r3
   16374:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   16376:	69bb      	ldr	r3, [r7, #24]
	}
   16378:	0018      	movs	r0, r3
   1637a:	46bd      	mov	sp, r7
   1637c:	b009      	add	sp, #36	; 0x24
   1637e:	bd90      	pop	{r4, r7, pc}
   16380:	000154c1 	.word	0x000154c1
   16384:	00015561 	.word	0x00015561
   16388:	00016391 	.word	0x00016391
   1638c:	0001648d 	.word	0x0001648d

00016390 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   16390:	b580      	push	{r7, lr}
   16392:	b086      	sub	sp, #24
   16394:	af00      	add	r7, sp, #0
   16396:	60f8      	str	r0, [r7, #12]
   16398:	60b9      	str	r1, [r7, #8]
   1639a:	607a      	str	r2, [r7, #4]
   1639c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   163a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   163a2:	687b      	ldr	r3, [r7, #4]
   163a4:	4936      	ldr	r1, [pc, #216]	; (16480 <prvInitialiseNewTask+0xf0>)
   163a6:	468c      	mov	ip, r1
   163a8:	4463      	add	r3, ip
   163aa:	009b      	lsls	r3, r3, #2
   163ac:	18d3      	adds	r3, r2, r3
   163ae:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   163b0:	693b      	ldr	r3, [r7, #16]
   163b2:	2207      	movs	r2, #7
   163b4:	4393      	bics	r3, r2
   163b6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   163b8:	693b      	ldr	r3, [r7, #16]
   163ba:	2207      	movs	r2, #7
   163bc:	4013      	ands	r3, r2
   163be:	d001      	beq.n	163c4 <prvInitialiseNewTask+0x34>
   163c0:	b672      	cpsid	i
   163c2:	e7fe      	b.n	163c2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   163c4:	2300      	movs	r3, #0
   163c6:	617b      	str	r3, [r7, #20]
   163c8:	e013      	b.n	163f2 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   163ca:	68ba      	ldr	r2, [r7, #8]
   163cc:	697b      	ldr	r3, [r7, #20]
   163ce:	18d3      	adds	r3, r2, r3
   163d0:	7818      	ldrb	r0, [r3, #0]
   163d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   163d4:	2134      	movs	r1, #52	; 0x34
   163d6:	697b      	ldr	r3, [r7, #20]
   163d8:	18d3      	adds	r3, r2, r3
   163da:	185b      	adds	r3, r3, r1
   163dc:	1c02      	adds	r2, r0, #0
   163de:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   163e0:	68ba      	ldr	r2, [r7, #8]
   163e2:	697b      	ldr	r3, [r7, #20]
   163e4:	18d3      	adds	r3, r2, r3
   163e6:	781b      	ldrb	r3, [r3, #0]
   163e8:	2b00      	cmp	r3, #0
   163ea:	d006      	beq.n	163fa <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   163ec:	697b      	ldr	r3, [r7, #20]
   163ee:	3301      	adds	r3, #1
   163f0:	617b      	str	r3, [r7, #20]
   163f2:	697b      	ldr	r3, [r7, #20]
   163f4:	2b07      	cmp	r3, #7
   163f6:	d9e8      	bls.n	163ca <prvInitialiseNewTask+0x3a>
   163f8:	e000      	b.n	163fc <prvInitialiseNewTask+0x6c>
		{
			break;
   163fa:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   163fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   163fe:	223b      	movs	r2, #59	; 0x3b
   16400:	2100      	movs	r1, #0
   16402:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   16404:	6a3b      	ldr	r3, [r7, #32]
   16406:	2b04      	cmp	r3, #4
   16408:	d901      	bls.n	1640e <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1640a:	2304      	movs	r3, #4
   1640c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1640e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16410:	6a3a      	ldr	r2, [r7, #32]
   16412:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   16414:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16416:	6a3a      	ldr	r2, [r7, #32]
   16418:	63da      	str	r2, [r3, #60]	; 0x3c
		pxNewTCB->uxMutexesHeld = 0;
   1641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1641c:	2200      	movs	r2, #0
   1641e:	641a      	str	r2, [r3, #64]	; 0x40
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   16420:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16422:	3304      	adds	r3, #4
   16424:	0018      	movs	r0, r3
   16426:	4b17      	ldr	r3, [pc, #92]	; (16484 <prvInitialiseNewTask+0xf4>)
   16428:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1642c:	3318      	adds	r3, #24
   1642e:	0018      	movs	r0, r3
   16430:	4b14      	ldr	r3, [pc, #80]	; (16484 <prvInitialiseNewTask+0xf4>)
   16432:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   16434:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16436:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16438:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1643a:	6a3b      	ldr	r3, [r7, #32]
   1643c:	2205      	movs	r2, #5
   1643e:	1ad2      	subs	r2, r2, r3
   16440:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16442:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   16444:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16446:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16448:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1644c:	2200      	movs	r2, #0
   1644e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   16450:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16452:	2248      	movs	r2, #72	; 0x48
   16454:	2100      	movs	r1, #0
   16456:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   16458:	683a      	ldr	r2, [r7, #0]
   1645a:	68f9      	ldr	r1, [r7, #12]
   1645c:	693b      	ldr	r3, [r7, #16]
   1645e:	0018      	movs	r0, r3
   16460:	4b09      	ldr	r3, [pc, #36]	; (16488 <prvInitialiseNewTask+0xf8>)
   16462:	4798      	blx	r3
   16464:	0002      	movs	r2, r0
   16466:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16468:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1646c:	2b00      	cmp	r3, #0
   1646e:	d002      	beq.n	16476 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   16470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16472:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   16476:	46c0      	nop			; (mov r8, r8)
   16478:	46bd      	mov	sp, r7
   1647a:	b006      	add	sp, #24
   1647c:	bd80      	pop	{r7, pc}
   1647e:	46c0      	nop			; (mov r8, r8)
   16480:	3fffffff 	.word	0x3fffffff
   16484:	0001513f 	.word	0x0001513f
   16488:	00015255 	.word	0x00015255

0001648c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1648c:	b580      	push	{r7, lr}
   1648e:	b082      	sub	sp, #8
   16490:	af00      	add	r7, sp, #0
   16492:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   16494:	4b29      	ldr	r3, [pc, #164]	; (1653c <prvAddNewTaskToReadyList+0xb0>)
   16496:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   16498:	4b29      	ldr	r3, [pc, #164]	; (16540 <prvAddNewTaskToReadyList+0xb4>)
   1649a:	681b      	ldr	r3, [r3, #0]
   1649c:	1c5a      	adds	r2, r3, #1
   1649e:	4b28      	ldr	r3, [pc, #160]	; (16540 <prvAddNewTaskToReadyList+0xb4>)
   164a0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   164a2:	4b28      	ldr	r3, [pc, #160]	; (16544 <prvAddNewTaskToReadyList+0xb8>)
   164a4:	681b      	ldr	r3, [r3, #0]
   164a6:	2b00      	cmp	r3, #0
   164a8:	d109      	bne.n	164be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   164aa:	4b26      	ldr	r3, [pc, #152]	; (16544 <prvAddNewTaskToReadyList+0xb8>)
   164ac:	687a      	ldr	r2, [r7, #4]
   164ae:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   164b0:	4b23      	ldr	r3, [pc, #140]	; (16540 <prvAddNewTaskToReadyList+0xb4>)
   164b2:	681b      	ldr	r3, [r3, #0]
   164b4:	2b01      	cmp	r3, #1
   164b6:	d110      	bne.n	164da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   164b8:	4b23      	ldr	r3, [pc, #140]	; (16548 <prvAddNewTaskToReadyList+0xbc>)
   164ba:	4798      	blx	r3
   164bc:	e00d      	b.n	164da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   164be:	4b23      	ldr	r3, [pc, #140]	; (1654c <prvAddNewTaskToReadyList+0xc0>)
   164c0:	681b      	ldr	r3, [r3, #0]
   164c2:	2b00      	cmp	r3, #0
   164c4:	d109      	bne.n	164da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   164c6:	4b1f      	ldr	r3, [pc, #124]	; (16544 <prvAddNewTaskToReadyList+0xb8>)
   164c8:	681b      	ldr	r3, [r3, #0]
   164ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   164cc:	687b      	ldr	r3, [r7, #4]
   164ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   164d0:	429a      	cmp	r2, r3
   164d2:	d802      	bhi.n	164da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   164d4:	4b1b      	ldr	r3, [pc, #108]	; (16544 <prvAddNewTaskToReadyList+0xb8>)
   164d6:	687a      	ldr	r2, [r7, #4]
   164d8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   164da:	4b1d      	ldr	r3, [pc, #116]	; (16550 <prvAddNewTaskToReadyList+0xc4>)
   164dc:	681b      	ldr	r3, [r3, #0]
   164de:	1c5a      	adds	r2, r3, #1
   164e0:	4b1b      	ldr	r3, [pc, #108]	; (16550 <prvAddNewTaskToReadyList+0xc4>)
   164e2:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
   164e4:	687b      	ldr	r3, [r7, #4]
   164e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   164e8:	4b1a      	ldr	r3, [pc, #104]	; (16554 <prvAddNewTaskToReadyList+0xc8>)
   164ea:	681b      	ldr	r3, [r3, #0]
   164ec:	429a      	cmp	r2, r3
   164ee:	d903      	bls.n	164f8 <prvAddNewTaskToReadyList+0x6c>
   164f0:	687b      	ldr	r3, [r7, #4]
   164f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   164f4:	4b17      	ldr	r3, [pc, #92]	; (16554 <prvAddNewTaskToReadyList+0xc8>)
   164f6:	601a      	str	r2, [r3, #0]
   164f8:	687b      	ldr	r3, [r7, #4]
   164fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   164fc:	0013      	movs	r3, r2
   164fe:	009b      	lsls	r3, r3, #2
   16500:	189b      	adds	r3, r3, r2
   16502:	009b      	lsls	r3, r3, #2
   16504:	4a14      	ldr	r2, [pc, #80]	; (16558 <prvAddNewTaskToReadyList+0xcc>)
   16506:	189a      	adds	r2, r3, r2
   16508:	687b      	ldr	r3, [r7, #4]
   1650a:	3304      	adds	r3, #4
   1650c:	0019      	movs	r1, r3
   1650e:	0010      	movs	r0, r2
   16510:	4b12      	ldr	r3, [pc, #72]	; (1655c <prvAddNewTaskToReadyList+0xd0>)
   16512:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   16514:	4b12      	ldr	r3, [pc, #72]	; (16560 <prvAddNewTaskToReadyList+0xd4>)
   16516:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   16518:	4b0c      	ldr	r3, [pc, #48]	; (1654c <prvAddNewTaskToReadyList+0xc0>)
   1651a:	681b      	ldr	r3, [r3, #0]
   1651c:	2b00      	cmp	r3, #0
   1651e:	d008      	beq.n	16532 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   16520:	4b08      	ldr	r3, [pc, #32]	; (16544 <prvAddNewTaskToReadyList+0xb8>)
   16522:	681b      	ldr	r3, [r3, #0]
   16524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16526:	687b      	ldr	r3, [r7, #4]
   16528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1652a:	429a      	cmp	r2, r3
   1652c:	d201      	bcs.n	16532 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1652e:	4b0d      	ldr	r3, [pc, #52]	; (16564 <prvAddNewTaskToReadyList+0xd8>)
   16530:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   16532:	46c0      	nop			; (mov r8, r8)
   16534:	46bd      	mov	sp, r7
   16536:	b002      	add	sp, #8
   16538:	bd80      	pop	{r7, pc}
   1653a:	46c0      	nop			; (mov r8, r8)
   1653c:	00015389 	.word	0x00015389
   16540:	20002cac 	.word	0x20002cac
   16544:	20002bd4 	.word	0x20002bd4
   16548:	00016d41 	.word	0x00016d41
   1654c:	20002cb8 	.word	0x20002cb8
   16550:	20002cc8 	.word	0x20002cc8
   16554:	20002cb4 	.word	0x20002cb4
   16558:	20002bd8 	.word	0x20002bd8
   1655c:	00015155 	.word	0x00015155
   16560:	000153ad 	.word	0x000153ad
   16564:	00015371 	.word	0x00015371

00016568 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   16568:	b580      	push	{r7, lr}
   1656a:	b084      	sub	sp, #16
   1656c:	af00      	add	r7, sp, #0
   1656e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   16570:	2300      	movs	r3, #0
   16572:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   16574:	687b      	ldr	r3, [r7, #4]
   16576:	2b00      	cmp	r3, #0
   16578:	d010      	beq.n	1659c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1657a:	4b0d      	ldr	r3, [pc, #52]	; (165b0 <vTaskDelay+0x48>)
   1657c:	681b      	ldr	r3, [r3, #0]
   1657e:	2b00      	cmp	r3, #0
   16580:	d001      	beq.n	16586 <vTaskDelay+0x1e>
   16582:	b672      	cpsid	i
   16584:	e7fe      	b.n	16584 <vTaskDelay+0x1c>
			vTaskSuspendAll();
   16586:	4b0b      	ldr	r3, [pc, #44]	; (165b4 <vTaskDelay+0x4c>)
   16588:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1658a:	687b      	ldr	r3, [r7, #4]
   1658c:	2100      	movs	r1, #0
   1658e:	0018      	movs	r0, r3
   16590:	4b09      	ldr	r3, [pc, #36]	; (165b8 <vTaskDelay+0x50>)
   16592:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   16594:	4b09      	ldr	r3, [pc, #36]	; (165bc <vTaskDelay+0x54>)
   16596:	4798      	blx	r3
   16598:	0003      	movs	r3, r0
   1659a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1659c:	68fb      	ldr	r3, [r7, #12]
   1659e:	2b00      	cmp	r3, #0
   165a0:	d101      	bne.n	165a6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
   165a2:	4b07      	ldr	r3, [pc, #28]	; (165c0 <vTaskDelay+0x58>)
   165a4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   165a6:	46c0      	nop			; (mov r8, r8)
   165a8:	46bd      	mov	sp, r7
   165aa:	b004      	add	sp, #16
   165ac:	bd80      	pop	{r7, pc}
   165ae:	46c0      	nop			; (mov r8, r8)
   165b0:	20002cd4 	.word	0x20002cd4
   165b4:	00016735 	.word	0x00016735
   165b8:	00017199 	.word	0x00017199
   165bc:	0001674d 	.word	0x0001674d
   165c0:	00015371 	.word	0x00015371

000165c4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   165c4:	b580      	push	{r7, lr}
   165c6:	b084      	sub	sp, #16
   165c8:	af00      	add	r7, sp, #0
   165ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   165cc:	4b2b      	ldr	r3, [pc, #172]	; (1667c <vTaskSuspend+0xb8>)
   165ce:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   165d0:	687b      	ldr	r3, [r7, #4]
   165d2:	2b00      	cmp	r3, #0
   165d4:	d102      	bne.n	165dc <vTaskSuspend+0x18>
   165d6:	4b2a      	ldr	r3, [pc, #168]	; (16680 <vTaskSuspend+0xbc>)
   165d8:	681b      	ldr	r3, [r3, #0]
   165da:	e000      	b.n	165de <vTaskSuspend+0x1a>
   165dc:	687b      	ldr	r3, [r7, #4]
   165de:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   165e0:	68fb      	ldr	r3, [r7, #12]
   165e2:	3304      	adds	r3, #4
   165e4:	0018      	movs	r0, r3
   165e6:	4b27      	ldr	r3, [pc, #156]	; (16684 <vTaskSuspend+0xc0>)
   165e8:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   165ea:	68fb      	ldr	r3, [r7, #12]
   165ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   165ee:	2b00      	cmp	r3, #0
   165f0:	d004      	beq.n	165fc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   165f2:	68fb      	ldr	r3, [r7, #12]
   165f4:	3318      	adds	r3, #24
   165f6:	0018      	movs	r0, r3
   165f8:	4b22      	ldr	r3, [pc, #136]	; (16684 <vTaskSuspend+0xc0>)
   165fa:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   165fc:	68fb      	ldr	r3, [r7, #12]
   165fe:	1d1a      	adds	r2, r3, #4
   16600:	4b21      	ldr	r3, [pc, #132]	; (16688 <vTaskSuspend+0xc4>)
   16602:	0011      	movs	r1, r2
   16604:	0018      	movs	r0, r3
   16606:	4b21      	ldr	r3, [pc, #132]	; (1668c <vTaskSuspend+0xc8>)
   16608:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1660a:	68fb      	ldr	r3, [r7, #12]
   1660c:	2248      	movs	r2, #72	; 0x48
   1660e:	5c9b      	ldrb	r3, [r3, r2]
   16610:	b2db      	uxtb	r3, r3
   16612:	2b01      	cmp	r3, #1
   16614:	d103      	bne.n	1661e <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   16616:	68fb      	ldr	r3, [r7, #12]
   16618:	2248      	movs	r2, #72	; 0x48
   1661a:	2100      	movs	r1, #0
   1661c:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1661e:	4b1c      	ldr	r3, [pc, #112]	; (16690 <vTaskSuspend+0xcc>)
   16620:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   16622:	4b1c      	ldr	r3, [pc, #112]	; (16694 <vTaskSuspend+0xd0>)
   16624:	681b      	ldr	r3, [r3, #0]
   16626:	2b00      	cmp	r3, #0
   16628:	d005      	beq.n	16636 <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1662a:	4b14      	ldr	r3, [pc, #80]	; (1667c <vTaskSuspend+0xb8>)
   1662c:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1662e:	4b1a      	ldr	r3, [pc, #104]	; (16698 <vTaskSuspend+0xd4>)
   16630:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   16632:	4b17      	ldr	r3, [pc, #92]	; (16690 <vTaskSuspend+0xcc>)
   16634:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   16636:	4b12      	ldr	r3, [pc, #72]	; (16680 <vTaskSuspend+0xbc>)
   16638:	681b      	ldr	r3, [r3, #0]
   1663a:	68fa      	ldr	r2, [r7, #12]
   1663c:	429a      	cmp	r2, r3
   1663e:	d118      	bne.n	16672 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
   16640:	4b14      	ldr	r3, [pc, #80]	; (16694 <vTaskSuspend+0xd0>)
   16642:	681b      	ldr	r3, [r3, #0]
   16644:	2b00      	cmp	r3, #0
   16646:	d008      	beq.n	1665a <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   16648:	4b14      	ldr	r3, [pc, #80]	; (1669c <vTaskSuspend+0xd8>)
   1664a:	681b      	ldr	r3, [r3, #0]
   1664c:	2b00      	cmp	r3, #0
   1664e:	d001      	beq.n	16654 <vTaskSuspend+0x90>
   16650:	b672      	cpsid	i
   16652:	e7fe      	b.n	16652 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
   16654:	4b12      	ldr	r3, [pc, #72]	; (166a0 <vTaskSuspend+0xdc>)
   16656:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   16658:	e00b      	b.n	16672 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1665a:	4b0b      	ldr	r3, [pc, #44]	; (16688 <vTaskSuspend+0xc4>)
   1665c:	681a      	ldr	r2, [r3, #0]
   1665e:	4b11      	ldr	r3, [pc, #68]	; (166a4 <vTaskSuspend+0xe0>)
   16660:	681b      	ldr	r3, [r3, #0]
   16662:	429a      	cmp	r2, r3
   16664:	d103      	bne.n	1666e <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
   16666:	4b06      	ldr	r3, [pc, #24]	; (16680 <vTaskSuspend+0xbc>)
   16668:	2200      	movs	r2, #0
   1666a:	601a      	str	r2, [r3, #0]
	}
   1666c:	e001      	b.n	16672 <vTaskSuspend+0xae>
					vTaskSwitchContext();
   1666e:	4b0e      	ldr	r3, [pc, #56]	; (166a8 <vTaskSuspend+0xe4>)
   16670:	4798      	blx	r3
	}
   16672:	46c0      	nop			; (mov r8, r8)
   16674:	46bd      	mov	sp, r7
   16676:	b004      	add	sp, #16
   16678:	bd80      	pop	{r7, pc}
   1667a:	46c0      	nop			; (mov r8, r8)
   1667c:	00015389 	.word	0x00015389
   16680:	20002bd4 	.word	0x20002bd4
   16684:	00015205 	.word	0x00015205
   16688:	20002c98 	.word	0x20002c98
   1668c:	00015155 	.word	0x00015155
   16690:	000153ad 	.word	0x000153ad
   16694:	20002cb8 	.word	0x20002cb8
   16698:	00016e61 	.word	0x00016e61
   1669c:	20002cd4 	.word	0x20002cd4
   166a0:	00015371 	.word	0x00015371
   166a4:	20002cac 	.word	0x20002cac
   166a8:	00016a11 	.word	0x00016a11

000166ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   166ac:	b590      	push	{r4, r7, lr}
   166ae:	b085      	sub	sp, #20
   166b0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   166b2:	23fa      	movs	r3, #250	; 0xfa
   166b4:	005a      	lsls	r2, r3, #1
   166b6:	4916      	ldr	r1, [pc, #88]	; (16710 <vTaskStartScheduler+0x64>)
   166b8:	4816      	ldr	r0, [pc, #88]	; (16714 <vTaskStartScheduler+0x68>)
   166ba:	4b17      	ldr	r3, [pc, #92]	; (16718 <vTaskStartScheduler+0x6c>)
   166bc:	9301      	str	r3, [sp, #4]
   166be:	2300      	movs	r3, #0
   166c0:	9300      	str	r3, [sp, #0]
   166c2:	2300      	movs	r3, #0
   166c4:	4c15      	ldr	r4, [pc, #84]	; (1671c <vTaskStartScheduler+0x70>)
   166c6:	47a0      	blx	r4
   166c8:	0003      	movs	r3, r0
   166ca:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   166cc:	687b      	ldr	r3, [r7, #4]
   166ce:	2b01      	cmp	r3, #1
   166d0:	d103      	bne.n	166da <vTaskStartScheduler+0x2e>
		{
			xReturn = xTimerCreateTimerTask();
   166d2:	4b13      	ldr	r3, [pc, #76]	; (16720 <vTaskStartScheduler+0x74>)
   166d4:	4798      	blx	r3
   166d6:	0003      	movs	r3, r0
   166d8:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   166da:	687b      	ldr	r3, [r7, #4]
   166dc:	2b01      	cmp	r3, #1
   166de:	d10d      	bne.n	166fc <vTaskStartScheduler+0x50>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   166e0:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   166e2:	4b10      	ldr	r3, [pc, #64]	; (16724 <vTaskStartScheduler+0x78>)
   166e4:	2201      	movs	r2, #1
   166e6:	4252      	negs	r2, r2
   166e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   166ea:	4b0f      	ldr	r3, [pc, #60]	; (16728 <vTaskStartScheduler+0x7c>)
   166ec:	2201      	movs	r2, #1
   166ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   166f0:	4b0e      	ldr	r3, [pc, #56]	; (1672c <vTaskStartScheduler+0x80>)
   166f2:	2200      	movs	r2, #0
   166f4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   166f6:	4b0e      	ldr	r3, [pc, #56]	; (16730 <vTaskStartScheduler+0x84>)
   166f8:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   166fa:	e004      	b.n	16706 <vTaskStartScheduler+0x5a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   166fc:	687b      	ldr	r3, [r7, #4]
   166fe:	3301      	adds	r3, #1
   16700:	d101      	bne.n	16706 <vTaskStartScheduler+0x5a>
   16702:	b672      	cpsid	i
   16704:	e7fe      	b.n	16704 <vTaskStartScheduler+0x58>
}
   16706:	46c0      	nop			; (mov r8, r8)
   16708:	46bd      	mov	sp, r7
   1670a:	b003      	add	sp, #12
   1670c:	bd90      	pop	{r4, r7, pc}
   1670e:	46c0      	nop			; (mov r8, r8)
   16710:	0001e4a0 	.word	0x0001e4a0
   16714:	00016d19 	.word	0x00016d19
   16718:	20002cd0 	.word	0x20002cd0
   1671c:	000162f1 	.word	0x000162f1
   16720:	0001724d 	.word	0x0001724d
   16724:	20002ccc 	.word	0x20002ccc
   16728:	20002cb8 	.word	0x20002cb8
   1672c:	20002cb0 	.word	0x20002cb0
   16730:	00015319 	.word	0x00015319

00016734 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   16734:	b580      	push	{r7, lr}
   16736:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   16738:	4b03      	ldr	r3, [pc, #12]	; (16748 <vTaskSuspendAll+0x14>)
   1673a:	681b      	ldr	r3, [r3, #0]
   1673c:	1c5a      	adds	r2, r3, #1
   1673e:	4b02      	ldr	r3, [pc, #8]	; (16748 <vTaskSuspendAll+0x14>)
   16740:	601a      	str	r2, [r3, #0]
}
   16742:	46c0      	nop			; (mov r8, r8)
   16744:	46bd      	mov	sp, r7
   16746:	bd80      	pop	{r7, pc}
   16748:	20002cd4 	.word	0x20002cd4

0001674c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1674c:	b580      	push	{r7, lr}
   1674e:	b084      	sub	sp, #16
   16750:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   16752:	2300      	movs	r3, #0
   16754:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   16756:	2300      	movs	r3, #0
   16758:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1675a:	4b3a      	ldr	r3, [pc, #232]	; (16844 <xTaskResumeAll+0xf8>)
   1675c:	681b      	ldr	r3, [r3, #0]
   1675e:	2b00      	cmp	r3, #0
   16760:	d101      	bne.n	16766 <xTaskResumeAll+0x1a>
   16762:	b672      	cpsid	i
   16764:	e7fe      	b.n	16764 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   16766:	4b38      	ldr	r3, [pc, #224]	; (16848 <xTaskResumeAll+0xfc>)
   16768:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1676a:	4b36      	ldr	r3, [pc, #216]	; (16844 <xTaskResumeAll+0xf8>)
   1676c:	681b      	ldr	r3, [r3, #0]
   1676e:	1e5a      	subs	r2, r3, #1
   16770:	4b34      	ldr	r3, [pc, #208]	; (16844 <xTaskResumeAll+0xf8>)
   16772:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   16774:	4b33      	ldr	r3, [pc, #204]	; (16844 <xTaskResumeAll+0xf8>)
   16776:	681b      	ldr	r3, [r3, #0]
   16778:	2b00      	cmp	r3, #0
   1677a:	d15b      	bne.n	16834 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1677c:	4b33      	ldr	r3, [pc, #204]	; (1684c <xTaskResumeAll+0x100>)
   1677e:	681b      	ldr	r3, [r3, #0]
   16780:	2b00      	cmp	r3, #0
   16782:	d057      	beq.n	16834 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   16784:	e02f      	b.n	167e6 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   16786:	4b32      	ldr	r3, [pc, #200]	; (16850 <xTaskResumeAll+0x104>)
   16788:	68db      	ldr	r3, [r3, #12]
   1678a:	68db      	ldr	r3, [r3, #12]
   1678c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1678e:	68fb      	ldr	r3, [r7, #12]
   16790:	3318      	adds	r3, #24
   16792:	0018      	movs	r0, r3
   16794:	4b2f      	ldr	r3, [pc, #188]	; (16854 <xTaskResumeAll+0x108>)
   16796:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   16798:	68fb      	ldr	r3, [r7, #12]
   1679a:	3304      	adds	r3, #4
   1679c:	0018      	movs	r0, r3
   1679e:	4b2d      	ldr	r3, [pc, #180]	; (16854 <xTaskResumeAll+0x108>)
   167a0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   167a2:	68fb      	ldr	r3, [r7, #12]
   167a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   167a6:	4b2c      	ldr	r3, [pc, #176]	; (16858 <xTaskResumeAll+0x10c>)
   167a8:	681b      	ldr	r3, [r3, #0]
   167aa:	429a      	cmp	r2, r3
   167ac:	d903      	bls.n	167b6 <xTaskResumeAll+0x6a>
   167ae:	68fb      	ldr	r3, [r7, #12]
   167b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   167b2:	4b29      	ldr	r3, [pc, #164]	; (16858 <xTaskResumeAll+0x10c>)
   167b4:	601a      	str	r2, [r3, #0]
   167b6:	68fb      	ldr	r3, [r7, #12]
   167b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   167ba:	0013      	movs	r3, r2
   167bc:	009b      	lsls	r3, r3, #2
   167be:	189b      	adds	r3, r3, r2
   167c0:	009b      	lsls	r3, r3, #2
   167c2:	4a26      	ldr	r2, [pc, #152]	; (1685c <xTaskResumeAll+0x110>)
   167c4:	189a      	adds	r2, r3, r2
   167c6:	68fb      	ldr	r3, [r7, #12]
   167c8:	3304      	adds	r3, #4
   167ca:	0019      	movs	r1, r3
   167cc:	0010      	movs	r0, r2
   167ce:	4b24      	ldr	r3, [pc, #144]	; (16860 <xTaskResumeAll+0x114>)
   167d0:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   167d2:	68fb      	ldr	r3, [r7, #12]
   167d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   167d6:	4b23      	ldr	r3, [pc, #140]	; (16864 <xTaskResumeAll+0x118>)
   167d8:	681b      	ldr	r3, [r3, #0]
   167da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   167dc:	429a      	cmp	r2, r3
   167de:	d302      	bcc.n	167e6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
   167e0:	4b21      	ldr	r3, [pc, #132]	; (16868 <xTaskResumeAll+0x11c>)
   167e2:	2201      	movs	r2, #1
   167e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   167e6:	4b1a      	ldr	r3, [pc, #104]	; (16850 <xTaskResumeAll+0x104>)
   167e8:	681b      	ldr	r3, [r3, #0]
   167ea:	2b00      	cmp	r3, #0
   167ec:	d1cb      	bne.n	16786 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   167ee:	68fb      	ldr	r3, [r7, #12]
   167f0:	2b00      	cmp	r3, #0
   167f2:	d001      	beq.n	167f8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   167f4:	4b1d      	ldr	r3, [pc, #116]	; (1686c <xTaskResumeAll+0x120>)
   167f6:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   167f8:	4b1d      	ldr	r3, [pc, #116]	; (16870 <xTaskResumeAll+0x124>)
   167fa:	681b      	ldr	r3, [r3, #0]
   167fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   167fe:	687b      	ldr	r3, [r7, #4]
   16800:	2b00      	cmp	r3, #0
   16802:	d00f      	beq.n	16824 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   16804:	4b1b      	ldr	r3, [pc, #108]	; (16874 <xTaskResumeAll+0x128>)
   16806:	4798      	blx	r3
   16808:	1e03      	subs	r3, r0, #0
   1680a:	d002      	beq.n	16812 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
   1680c:	4b16      	ldr	r3, [pc, #88]	; (16868 <xTaskResumeAll+0x11c>)
   1680e:	2201      	movs	r2, #1
   16810:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   16812:	687b      	ldr	r3, [r7, #4]
   16814:	3b01      	subs	r3, #1
   16816:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   16818:	687b      	ldr	r3, [r7, #4]
   1681a:	2b00      	cmp	r3, #0
   1681c:	d1f2      	bne.n	16804 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
   1681e:	4b14      	ldr	r3, [pc, #80]	; (16870 <xTaskResumeAll+0x124>)
   16820:	2200      	movs	r2, #0
   16822:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   16824:	4b10      	ldr	r3, [pc, #64]	; (16868 <xTaskResumeAll+0x11c>)
   16826:	681b      	ldr	r3, [r3, #0]
   16828:	2b00      	cmp	r3, #0
   1682a:	d003      	beq.n	16834 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1682c:	2301      	movs	r3, #1
   1682e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   16830:	4b11      	ldr	r3, [pc, #68]	; (16878 <xTaskResumeAll+0x12c>)
   16832:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   16834:	4b11      	ldr	r3, [pc, #68]	; (1687c <xTaskResumeAll+0x130>)
   16836:	4798      	blx	r3

	return xAlreadyYielded;
   16838:	68bb      	ldr	r3, [r7, #8]
}
   1683a:	0018      	movs	r0, r3
   1683c:	46bd      	mov	sp, r7
   1683e:	b004      	add	sp, #16
   16840:	bd80      	pop	{r7, pc}
   16842:	46c0      	nop			; (mov r8, r8)
   16844:	20002cd4 	.word	0x20002cd4
   16848:	00015389 	.word	0x00015389
   1684c:	20002cac 	.word	0x20002cac
   16850:	20002c6c 	.word	0x20002c6c
   16854:	00015205 	.word	0x00015205
   16858:	20002cb4 	.word	0x20002cb4
   1685c:	20002bd8 	.word	0x20002bd8
   16860:	00015155 	.word	0x00015155
   16864:	20002bd4 	.word	0x20002bd4
   16868:	20002cc0 	.word	0x20002cc0
   1686c:	00016e61 	.word	0x00016e61
   16870:	20002cbc 	.word	0x20002cbc
   16874:	0001689d 	.word	0x0001689d
   16878:	00015371 	.word	0x00015371
   1687c:	000153ad 	.word	0x000153ad

00016880 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   16880:	b580      	push	{r7, lr}
   16882:	b082      	sub	sp, #8
   16884:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   16886:	4b04      	ldr	r3, [pc, #16]	; (16898 <xTaskGetTickCount+0x18>)
   16888:	681b      	ldr	r3, [r3, #0]
   1688a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1688c:	687b      	ldr	r3, [r7, #4]
}
   1688e:	0018      	movs	r0, r3
   16890:	46bd      	mov	sp, r7
   16892:	b002      	add	sp, #8
   16894:	bd80      	pop	{r7, pc}
   16896:	46c0      	nop			; (mov r8, r8)
   16898:	20002cb0 	.word	0x20002cb0

0001689c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1689c:	b580      	push	{r7, lr}
   1689e:	b086      	sub	sp, #24
   168a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   168a2:	2300      	movs	r3, #0
   168a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   168a6:	4b4c      	ldr	r3, [pc, #304]	; (169d8 <xTaskIncrementTick+0x13c>)
   168a8:	681b      	ldr	r3, [r3, #0]
   168aa:	2b00      	cmp	r3, #0
   168ac:	d000      	beq.n	168b0 <xTaskIncrementTick+0x14>
   168ae:	e083      	b.n	169b8 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   168b0:	4b4a      	ldr	r3, [pc, #296]	; (169dc <xTaskIncrementTick+0x140>)
   168b2:	681b      	ldr	r3, [r3, #0]
   168b4:	3301      	adds	r3, #1
   168b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   168b8:	4b48      	ldr	r3, [pc, #288]	; (169dc <xTaskIncrementTick+0x140>)
   168ba:	693a      	ldr	r2, [r7, #16]
   168bc:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   168be:	693b      	ldr	r3, [r7, #16]
   168c0:	2b00      	cmp	r3, #0
   168c2:	d117      	bne.n	168f4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
   168c4:	4b46      	ldr	r3, [pc, #280]	; (169e0 <xTaskIncrementTick+0x144>)
   168c6:	681b      	ldr	r3, [r3, #0]
   168c8:	681b      	ldr	r3, [r3, #0]
   168ca:	2b00      	cmp	r3, #0
   168cc:	d001      	beq.n	168d2 <xTaskIncrementTick+0x36>
   168ce:	b672      	cpsid	i
   168d0:	e7fe      	b.n	168d0 <xTaskIncrementTick+0x34>
   168d2:	4b43      	ldr	r3, [pc, #268]	; (169e0 <xTaskIncrementTick+0x144>)
   168d4:	681b      	ldr	r3, [r3, #0]
   168d6:	60fb      	str	r3, [r7, #12]
   168d8:	4b42      	ldr	r3, [pc, #264]	; (169e4 <xTaskIncrementTick+0x148>)
   168da:	681a      	ldr	r2, [r3, #0]
   168dc:	4b40      	ldr	r3, [pc, #256]	; (169e0 <xTaskIncrementTick+0x144>)
   168de:	601a      	str	r2, [r3, #0]
   168e0:	4b40      	ldr	r3, [pc, #256]	; (169e4 <xTaskIncrementTick+0x148>)
   168e2:	68fa      	ldr	r2, [r7, #12]
   168e4:	601a      	str	r2, [r3, #0]
   168e6:	4b40      	ldr	r3, [pc, #256]	; (169e8 <xTaskIncrementTick+0x14c>)
   168e8:	681b      	ldr	r3, [r3, #0]
   168ea:	1c5a      	adds	r2, r3, #1
   168ec:	4b3e      	ldr	r3, [pc, #248]	; (169e8 <xTaskIncrementTick+0x14c>)
   168ee:	601a      	str	r2, [r3, #0]
   168f0:	4b3e      	ldr	r3, [pc, #248]	; (169ec <xTaskIncrementTick+0x150>)
   168f2:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   168f4:	4b3e      	ldr	r3, [pc, #248]	; (169f0 <xTaskIncrementTick+0x154>)
   168f6:	681b      	ldr	r3, [r3, #0]
   168f8:	693a      	ldr	r2, [r7, #16]
   168fa:	429a      	cmp	r2, r3
   168fc:	d34e      	bcc.n	1699c <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   168fe:	4b38      	ldr	r3, [pc, #224]	; (169e0 <xTaskIncrementTick+0x144>)
   16900:	681b      	ldr	r3, [r3, #0]
   16902:	681b      	ldr	r3, [r3, #0]
   16904:	2b00      	cmp	r3, #0
   16906:	d101      	bne.n	1690c <xTaskIncrementTick+0x70>
   16908:	2301      	movs	r3, #1
   1690a:	e000      	b.n	1690e <xTaskIncrementTick+0x72>
   1690c:	2300      	movs	r3, #0
   1690e:	2b00      	cmp	r3, #0
   16910:	d004      	beq.n	1691c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   16912:	4b37      	ldr	r3, [pc, #220]	; (169f0 <xTaskIncrementTick+0x154>)
   16914:	2201      	movs	r2, #1
   16916:	4252      	negs	r2, r2
   16918:	601a      	str	r2, [r3, #0]
					break;
   1691a:	e03f      	b.n	1699c <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1691c:	4b30      	ldr	r3, [pc, #192]	; (169e0 <xTaskIncrementTick+0x144>)
   1691e:	681b      	ldr	r3, [r3, #0]
   16920:	68db      	ldr	r3, [r3, #12]
   16922:	68db      	ldr	r3, [r3, #12]
   16924:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   16926:	68bb      	ldr	r3, [r7, #8]
   16928:	685b      	ldr	r3, [r3, #4]
   1692a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1692c:	693a      	ldr	r2, [r7, #16]
   1692e:	687b      	ldr	r3, [r7, #4]
   16930:	429a      	cmp	r2, r3
   16932:	d203      	bcs.n	1693c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   16934:	4b2e      	ldr	r3, [pc, #184]	; (169f0 <xTaskIncrementTick+0x154>)
   16936:	687a      	ldr	r2, [r7, #4]
   16938:	601a      	str	r2, [r3, #0]
						break;
   1693a:	e02f      	b.n	1699c <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1693c:	68bb      	ldr	r3, [r7, #8]
   1693e:	3304      	adds	r3, #4
   16940:	0018      	movs	r0, r3
   16942:	4b2c      	ldr	r3, [pc, #176]	; (169f4 <xTaskIncrementTick+0x158>)
   16944:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   16946:	68bb      	ldr	r3, [r7, #8]
   16948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1694a:	2b00      	cmp	r3, #0
   1694c:	d004      	beq.n	16958 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1694e:	68bb      	ldr	r3, [r7, #8]
   16950:	3318      	adds	r3, #24
   16952:	0018      	movs	r0, r3
   16954:	4b27      	ldr	r3, [pc, #156]	; (169f4 <xTaskIncrementTick+0x158>)
   16956:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   16958:	68bb      	ldr	r3, [r7, #8]
   1695a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1695c:	4b26      	ldr	r3, [pc, #152]	; (169f8 <xTaskIncrementTick+0x15c>)
   1695e:	681b      	ldr	r3, [r3, #0]
   16960:	429a      	cmp	r2, r3
   16962:	d903      	bls.n	1696c <xTaskIncrementTick+0xd0>
   16964:	68bb      	ldr	r3, [r7, #8]
   16966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16968:	4b23      	ldr	r3, [pc, #140]	; (169f8 <xTaskIncrementTick+0x15c>)
   1696a:	601a      	str	r2, [r3, #0]
   1696c:	68bb      	ldr	r3, [r7, #8]
   1696e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16970:	0013      	movs	r3, r2
   16972:	009b      	lsls	r3, r3, #2
   16974:	189b      	adds	r3, r3, r2
   16976:	009b      	lsls	r3, r3, #2
   16978:	4a20      	ldr	r2, [pc, #128]	; (169fc <xTaskIncrementTick+0x160>)
   1697a:	189a      	adds	r2, r3, r2
   1697c:	68bb      	ldr	r3, [r7, #8]
   1697e:	3304      	adds	r3, #4
   16980:	0019      	movs	r1, r3
   16982:	0010      	movs	r0, r2
   16984:	4b1e      	ldr	r3, [pc, #120]	; (16a00 <xTaskIncrementTick+0x164>)
   16986:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   16988:	68bb      	ldr	r3, [r7, #8]
   1698a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1698c:	4b1d      	ldr	r3, [pc, #116]	; (16a04 <xTaskIncrementTick+0x168>)
   1698e:	681b      	ldr	r3, [r3, #0]
   16990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16992:	429a      	cmp	r2, r3
   16994:	d3b3      	bcc.n	168fe <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
   16996:	2301      	movs	r3, #1
   16998:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1699a:	e7b0      	b.n	168fe <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1699c:	4b19      	ldr	r3, [pc, #100]	; (16a04 <xTaskIncrementTick+0x168>)
   1699e:	681b      	ldr	r3, [r3, #0]
   169a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   169a2:	4916      	ldr	r1, [pc, #88]	; (169fc <xTaskIncrementTick+0x160>)
   169a4:	0013      	movs	r3, r2
   169a6:	009b      	lsls	r3, r3, #2
   169a8:	189b      	adds	r3, r3, r2
   169aa:	009b      	lsls	r3, r3, #2
   169ac:	585b      	ldr	r3, [r3, r1]
   169ae:	2b01      	cmp	r3, #1
   169b0:	d907      	bls.n	169c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
   169b2:	2301      	movs	r3, #1
   169b4:	617b      	str	r3, [r7, #20]
   169b6:	e004      	b.n	169c2 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   169b8:	4b13      	ldr	r3, [pc, #76]	; (16a08 <xTaskIncrementTick+0x16c>)
   169ba:	681b      	ldr	r3, [r3, #0]
   169bc:	1c5a      	adds	r2, r3, #1
   169be:	4b12      	ldr	r3, [pc, #72]	; (16a08 <xTaskIncrementTick+0x16c>)
   169c0:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   169c2:	4b12      	ldr	r3, [pc, #72]	; (16a0c <xTaskIncrementTick+0x170>)
   169c4:	681b      	ldr	r3, [r3, #0]
   169c6:	2b00      	cmp	r3, #0
   169c8:	d001      	beq.n	169ce <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
   169ca:	2301      	movs	r3, #1
   169cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   169ce:	697b      	ldr	r3, [r7, #20]
}
   169d0:	0018      	movs	r0, r3
   169d2:	46bd      	mov	sp, r7
   169d4:	b006      	add	sp, #24
   169d6:	bd80      	pop	{r7, pc}
   169d8:	20002cd4 	.word	0x20002cd4
   169dc:	20002cb0 	.word	0x20002cb0
   169e0:	20002c64 	.word	0x20002c64
   169e4:	20002c68 	.word	0x20002c68
   169e8:	20002cc4 	.word	0x20002cc4
   169ec:	00016e61 	.word	0x00016e61
   169f0:	20002ccc 	.word	0x20002ccc
   169f4:	00015205 	.word	0x00015205
   169f8:	20002cb4 	.word	0x20002cb4
   169fc:	20002bd8 	.word	0x20002bd8
   16a00:	00015155 	.word	0x00015155
   16a04:	20002bd4 	.word	0x20002bd4
   16a08:	20002cbc 	.word	0x20002cbc
   16a0c:	20002cc0 	.word	0x20002cc0

00016a10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   16a10:	b580      	push	{r7, lr}
   16a12:	b082      	sub	sp, #8
   16a14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   16a16:	4b2a      	ldr	r3, [pc, #168]	; (16ac0 <vTaskSwitchContext+0xb0>)
   16a18:	681b      	ldr	r3, [r3, #0]
   16a1a:	2b00      	cmp	r3, #0
   16a1c:	d003      	beq.n	16a26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   16a1e:	4b29      	ldr	r3, [pc, #164]	; (16ac4 <vTaskSwitchContext+0xb4>)
   16a20:	2201      	movs	r2, #1
   16a22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   16a24:	e048      	b.n	16ab8 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
   16a26:	4b27      	ldr	r3, [pc, #156]	; (16ac4 <vTaskSwitchContext+0xb4>)
   16a28:	2200      	movs	r2, #0
   16a2a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   16a2c:	4b26      	ldr	r3, [pc, #152]	; (16ac8 <vTaskSwitchContext+0xb8>)
   16a2e:	681b      	ldr	r3, [r3, #0]
   16a30:	681a      	ldr	r2, [r3, #0]
   16a32:	4b25      	ldr	r3, [pc, #148]	; (16ac8 <vTaskSwitchContext+0xb8>)
   16a34:	681b      	ldr	r3, [r3, #0]
   16a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16a38:	429a      	cmp	r2, r3
   16a3a:	d808      	bhi.n	16a4e <vTaskSwitchContext+0x3e>
   16a3c:	4b22      	ldr	r3, [pc, #136]	; (16ac8 <vTaskSwitchContext+0xb8>)
   16a3e:	681a      	ldr	r2, [r3, #0]
   16a40:	4b21      	ldr	r3, [pc, #132]	; (16ac8 <vTaskSwitchContext+0xb8>)
   16a42:	681b      	ldr	r3, [r3, #0]
   16a44:	3334      	adds	r3, #52	; 0x34
   16a46:	0019      	movs	r1, r3
   16a48:	0010      	movs	r0, r2
   16a4a:	4b20      	ldr	r3, [pc, #128]	; (16acc <vTaskSwitchContext+0xbc>)
   16a4c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   16a4e:	4b20      	ldr	r3, [pc, #128]	; (16ad0 <vTaskSwitchContext+0xc0>)
   16a50:	681b      	ldr	r3, [r3, #0]
   16a52:	607b      	str	r3, [r7, #4]
   16a54:	e007      	b.n	16a66 <vTaskSwitchContext+0x56>
   16a56:	687b      	ldr	r3, [r7, #4]
   16a58:	2b00      	cmp	r3, #0
   16a5a:	d101      	bne.n	16a60 <vTaskSwitchContext+0x50>
   16a5c:	b672      	cpsid	i
   16a5e:	e7fe      	b.n	16a5e <vTaskSwitchContext+0x4e>
   16a60:	687b      	ldr	r3, [r7, #4]
   16a62:	3b01      	subs	r3, #1
   16a64:	607b      	str	r3, [r7, #4]
   16a66:	491b      	ldr	r1, [pc, #108]	; (16ad4 <vTaskSwitchContext+0xc4>)
   16a68:	687a      	ldr	r2, [r7, #4]
   16a6a:	0013      	movs	r3, r2
   16a6c:	009b      	lsls	r3, r3, #2
   16a6e:	189b      	adds	r3, r3, r2
   16a70:	009b      	lsls	r3, r3, #2
   16a72:	585b      	ldr	r3, [r3, r1]
   16a74:	2b00      	cmp	r3, #0
   16a76:	d0ee      	beq.n	16a56 <vTaskSwitchContext+0x46>
   16a78:	687a      	ldr	r2, [r7, #4]
   16a7a:	0013      	movs	r3, r2
   16a7c:	009b      	lsls	r3, r3, #2
   16a7e:	189b      	adds	r3, r3, r2
   16a80:	009b      	lsls	r3, r3, #2
   16a82:	4a14      	ldr	r2, [pc, #80]	; (16ad4 <vTaskSwitchContext+0xc4>)
   16a84:	189b      	adds	r3, r3, r2
   16a86:	603b      	str	r3, [r7, #0]
   16a88:	683b      	ldr	r3, [r7, #0]
   16a8a:	685b      	ldr	r3, [r3, #4]
   16a8c:	685a      	ldr	r2, [r3, #4]
   16a8e:	683b      	ldr	r3, [r7, #0]
   16a90:	605a      	str	r2, [r3, #4]
   16a92:	683b      	ldr	r3, [r7, #0]
   16a94:	685a      	ldr	r2, [r3, #4]
   16a96:	683b      	ldr	r3, [r7, #0]
   16a98:	3308      	adds	r3, #8
   16a9a:	429a      	cmp	r2, r3
   16a9c:	d104      	bne.n	16aa8 <vTaskSwitchContext+0x98>
   16a9e:	683b      	ldr	r3, [r7, #0]
   16aa0:	685b      	ldr	r3, [r3, #4]
   16aa2:	685a      	ldr	r2, [r3, #4]
   16aa4:	683b      	ldr	r3, [r7, #0]
   16aa6:	605a      	str	r2, [r3, #4]
   16aa8:	683b      	ldr	r3, [r7, #0]
   16aaa:	685b      	ldr	r3, [r3, #4]
   16aac:	68da      	ldr	r2, [r3, #12]
   16aae:	4b06      	ldr	r3, [pc, #24]	; (16ac8 <vTaskSwitchContext+0xb8>)
   16ab0:	601a      	str	r2, [r3, #0]
   16ab2:	4b07      	ldr	r3, [pc, #28]	; (16ad0 <vTaskSwitchContext+0xc0>)
   16ab4:	687a      	ldr	r2, [r7, #4]
   16ab6:	601a      	str	r2, [r3, #0]
}
   16ab8:	46c0      	nop			; (mov r8, r8)
   16aba:	46bd      	mov	sp, r7
   16abc:	b002      	add	sp, #8
   16abe:	bd80      	pop	{r7, pc}
   16ac0:	20002cd4 	.word	0x20002cd4
   16ac4:	20002cc0 	.word	0x20002cc0
   16ac8:	20002bd4 	.word	0x20002bd4
   16acc:	0001aaf1 	.word	0x0001aaf1
   16ad0:	20002cb4 	.word	0x20002cb4
   16ad4:	20002bd8 	.word	0x20002bd8

00016ad8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   16ad8:	b580      	push	{r7, lr}
   16ada:	b082      	sub	sp, #8
   16adc:	af00      	add	r7, sp, #0
   16ade:	6078      	str	r0, [r7, #4]
   16ae0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   16ae2:	687b      	ldr	r3, [r7, #4]
   16ae4:	2b00      	cmp	r3, #0
   16ae6:	d101      	bne.n	16aec <vTaskPlaceOnEventList+0x14>
   16ae8:	b672      	cpsid	i
   16aea:	e7fe      	b.n	16aea <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   16aec:	4b08      	ldr	r3, [pc, #32]	; (16b10 <vTaskPlaceOnEventList+0x38>)
   16aee:	681b      	ldr	r3, [r3, #0]
   16af0:	3318      	adds	r3, #24
   16af2:	001a      	movs	r2, r3
   16af4:	687b      	ldr	r3, [r7, #4]
   16af6:	0011      	movs	r1, r2
   16af8:	0018      	movs	r0, r3
   16afa:	4b06      	ldr	r3, [pc, #24]	; (16b14 <vTaskPlaceOnEventList+0x3c>)
   16afc:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   16afe:	683b      	ldr	r3, [r7, #0]
   16b00:	2101      	movs	r1, #1
   16b02:	0018      	movs	r0, r3
   16b04:	4b04      	ldr	r3, [pc, #16]	; (16b18 <vTaskPlaceOnEventList+0x40>)
   16b06:	4798      	blx	r3
}
   16b08:	46c0      	nop			; (mov r8, r8)
   16b0a:	46bd      	mov	sp, r7
   16b0c:	b002      	add	sp, #8
   16b0e:	bd80      	pop	{r7, pc}
   16b10:	20002bd4 	.word	0x20002bd4
   16b14:	00015199 	.word	0x00015199
   16b18:	00017199 	.word	0x00017199

00016b1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   16b1c:	b580      	push	{r7, lr}
   16b1e:	b084      	sub	sp, #16
   16b20:	af00      	add	r7, sp, #0
   16b22:	60f8      	str	r0, [r7, #12]
   16b24:	60b9      	str	r1, [r7, #8]
   16b26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   16b28:	68fb      	ldr	r3, [r7, #12]
   16b2a:	2b00      	cmp	r3, #0
   16b2c:	d101      	bne.n	16b32 <vTaskPlaceOnEventListRestricted+0x16>
   16b2e:	b672      	cpsid	i
   16b30:	e7fe      	b.n	16b30 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   16b32:	4b0c      	ldr	r3, [pc, #48]	; (16b64 <vTaskPlaceOnEventListRestricted+0x48>)
   16b34:	681b      	ldr	r3, [r3, #0]
   16b36:	3318      	adds	r3, #24
   16b38:	001a      	movs	r2, r3
   16b3a:	68fb      	ldr	r3, [r7, #12]
   16b3c:	0011      	movs	r1, r2
   16b3e:	0018      	movs	r0, r3
   16b40:	4b09      	ldr	r3, [pc, #36]	; (16b68 <vTaskPlaceOnEventListRestricted+0x4c>)
   16b42:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   16b44:	687b      	ldr	r3, [r7, #4]
   16b46:	2b00      	cmp	r3, #0
   16b48:	d002      	beq.n	16b50 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   16b4a:	2301      	movs	r3, #1
   16b4c:	425b      	negs	r3, r3
   16b4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   16b50:	687a      	ldr	r2, [r7, #4]
   16b52:	68bb      	ldr	r3, [r7, #8]
   16b54:	0011      	movs	r1, r2
   16b56:	0018      	movs	r0, r3
   16b58:	4b04      	ldr	r3, [pc, #16]	; (16b6c <vTaskPlaceOnEventListRestricted+0x50>)
   16b5a:	4798      	blx	r3
	}
   16b5c:	46c0      	nop			; (mov r8, r8)
   16b5e:	46bd      	mov	sp, r7
   16b60:	b004      	add	sp, #16
   16b62:	bd80      	pop	{r7, pc}
   16b64:	20002bd4 	.word	0x20002bd4
   16b68:	00015155 	.word	0x00015155
   16b6c:	00017199 	.word	0x00017199

00016b70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   16b70:	b580      	push	{r7, lr}
   16b72:	b084      	sub	sp, #16
   16b74:	af00      	add	r7, sp, #0
   16b76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   16b78:	687b      	ldr	r3, [r7, #4]
   16b7a:	68db      	ldr	r3, [r3, #12]
   16b7c:	68db      	ldr	r3, [r3, #12]
   16b7e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   16b80:	68bb      	ldr	r3, [r7, #8]
   16b82:	2b00      	cmp	r3, #0
   16b84:	d101      	bne.n	16b8a <xTaskRemoveFromEventList+0x1a>
   16b86:	b672      	cpsid	i
   16b88:	e7fe      	b.n	16b88 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   16b8a:	68bb      	ldr	r3, [r7, #8]
   16b8c:	3318      	adds	r3, #24
   16b8e:	0018      	movs	r0, r3
   16b90:	4b1f      	ldr	r3, [pc, #124]	; (16c10 <xTaskRemoveFromEventList+0xa0>)
   16b92:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   16b94:	4b1f      	ldr	r3, [pc, #124]	; (16c14 <xTaskRemoveFromEventList+0xa4>)
   16b96:	681b      	ldr	r3, [r3, #0]
   16b98:	2b00      	cmp	r3, #0
   16b9a:	d11d      	bne.n	16bd8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   16b9c:	68bb      	ldr	r3, [r7, #8]
   16b9e:	3304      	adds	r3, #4
   16ba0:	0018      	movs	r0, r3
   16ba2:	4b1b      	ldr	r3, [pc, #108]	; (16c10 <xTaskRemoveFromEventList+0xa0>)
   16ba4:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   16ba6:	68bb      	ldr	r3, [r7, #8]
   16ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16baa:	4b1b      	ldr	r3, [pc, #108]	; (16c18 <xTaskRemoveFromEventList+0xa8>)
   16bac:	681b      	ldr	r3, [r3, #0]
   16bae:	429a      	cmp	r2, r3
   16bb0:	d903      	bls.n	16bba <xTaskRemoveFromEventList+0x4a>
   16bb2:	68bb      	ldr	r3, [r7, #8]
   16bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16bb6:	4b18      	ldr	r3, [pc, #96]	; (16c18 <xTaskRemoveFromEventList+0xa8>)
   16bb8:	601a      	str	r2, [r3, #0]
   16bba:	68bb      	ldr	r3, [r7, #8]
   16bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16bbe:	0013      	movs	r3, r2
   16bc0:	009b      	lsls	r3, r3, #2
   16bc2:	189b      	adds	r3, r3, r2
   16bc4:	009b      	lsls	r3, r3, #2
   16bc6:	4a15      	ldr	r2, [pc, #84]	; (16c1c <xTaskRemoveFromEventList+0xac>)
   16bc8:	189a      	adds	r2, r3, r2
   16bca:	68bb      	ldr	r3, [r7, #8]
   16bcc:	3304      	adds	r3, #4
   16bce:	0019      	movs	r1, r3
   16bd0:	0010      	movs	r0, r2
   16bd2:	4b13      	ldr	r3, [pc, #76]	; (16c20 <xTaskRemoveFromEventList+0xb0>)
   16bd4:	4798      	blx	r3
   16bd6:	e007      	b.n	16be8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   16bd8:	68bb      	ldr	r3, [r7, #8]
   16bda:	3318      	adds	r3, #24
   16bdc:	001a      	movs	r2, r3
   16bde:	4b11      	ldr	r3, [pc, #68]	; (16c24 <xTaskRemoveFromEventList+0xb4>)
   16be0:	0011      	movs	r1, r2
   16be2:	0018      	movs	r0, r3
   16be4:	4b0e      	ldr	r3, [pc, #56]	; (16c20 <xTaskRemoveFromEventList+0xb0>)
   16be6:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   16be8:	68bb      	ldr	r3, [r7, #8]
   16bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16bec:	4b0e      	ldr	r3, [pc, #56]	; (16c28 <xTaskRemoveFromEventList+0xb8>)
   16bee:	681b      	ldr	r3, [r3, #0]
   16bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16bf2:	429a      	cmp	r2, r3
   16bf4:	d905      	bls.n	16c02 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   16bf6:	2301      	movs	r3, #1
   16bf8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   16bfa:	4b0c      	ldr	r3, [pc, #48]	; (16c2c <xTaskRemoveFromEventList+0xbc>)
   16bfc:	2201      	movs	r2, #1
   16bfe:	601a      	str	r2, [r3, #0]
   16c00:	e001      	b.n	16c06 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
   16c02:	2300      	movs	r3, #0
   16c04:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   16c06:	68fb      	ldr	r3, [r7, #12]
}
   16c08:	0018      	movs	r0, r3
   16c0a:	46bd      	mov	sp, r7
   16c0c:	b004      	add	sp, #16
   16c0e:	bd80      	pop	{r7, pc}
   16c10:	00015205 	.word	0x00015205
   16c14:	20002cd4 	.word	0x20002cd4
   16c18:	20002cb4 	.word	0x20002cb4
   16c1c:	20002bd8 	.word	0x20002bd8
   16c20:	00015155 	.word	0x00015155
   16c24:	20002c6c 	.word	0x20002c6c
   16c28:	20002bd4 	.word	0x20002bd4
   16c2c:	20002cc0 	.word	0x20002cc0

00016c30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   16c30:	b580      	push	{r7, lr}
   16c32:	b082      	sub	sp, #8
   16c34:	af00      	add	r7, sp, #0
   16c36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   16c38:	4b05      	ldr	r3, [pc, #20]	; (16c50 <vTaskInternalSetTimeOutState+0x20>)
   16c3a:	681a      	ldr	r2, [r3, #0]
   16c3c:	687b      	ldr	r3, [r7, #4]
   16c3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   16c40:	4b04      	ldr	r3, [pc, #16]	; (16c54 <vTaskInternalSetTimeOutState+0x24>)
   16c42:	681a      	ldr	r2, [r3, #0]
   16c44:	687b      	ldr	r3, [r7, #4]
   16c46:	605a      	str	r2, [r3, #4]
}
   16c48:	46c0      	nop			; (mov r8, r8)
   16c4a:	46bd      	mov	sp, r7
   16c4c:	b002      	add	sp, #8
   16c4e:	bd80      	pop	{r7, pc}
   16c50:	20002cc4 	.word	0x20002cc4
   16c54:	20002cb0 	.word	0x20002cb0

00016c58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   16c58:	b580      	push	{r7, lr}
   16c5a:	b086      	sub	sp, #24
   16c5c:	af00      	add	r7, sp, #0
   16c5e:	6078      	str	r0, [r7, #4]
   16c60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   16c62:	687b      	ldr	r3, [r7, #4]
   16c64:	2b00      	cmp	r3, #0
   16c66:	d101      	bne.n	16c6c <xTaskCheckForTimeOut+0x14>
   16c68:	b672      	cpsid	i
   16c6a:	e7fe      	b.n	16c6a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   16c6c:	683b      	ldr	r3, [r7, #0]
   16c6e:	2b00      	cmp	r3, #0
   16c70:	d101      	bne.n	16c76 <xTaskCheckForTimeOut+0x1e>
   16c72:	b672      	cpsid	i
   16c74:	e7fe      	b.n	16c74 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   16c76:	4b1e      	ldr	r3, [pc, #120]	; (16cf0 <xTaskCheckForTimeOut+0x98>)
   16c78:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   16c7a:	4b1e      	ldr	r3, [pc, #120]	; (16cf4 <xTaskCheckForTimeOut+0x9c>)
   16c7c:	681b      	ldr	r3, [r3, #0]
   16c7e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   16c80:	687b      	ldr	r3, [r7, #4]
   16c82:	685b      	ldr	r3, [r3, #4]
   16c84:	693a      	ldr	r2, [r7, #16]
   16c86:	1ad3      	subs	r3, r2, r3
   16c88:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   16c8a:	683b      	ldr	r3, [r7, #0]
   16c8c:	681b      	ldr	r3, [r3, #0]
   16c8e:	3301      	adds	r3, #1
   16c90:	d102      	bne.n	16c98 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   16c92:	2300      	movs	r3, #0
   16c94:	617b      	str	r3, [r7, #20]
   16c96:	e024      	b.n	16ce2 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   16c98:	687b      	ldr	r3, [r7, #4]
   16c9a:	681a      	ldr	r2, [r3, #0]
   16c9c:	4b16      	ldr	r3, [pc, #88]	; (16cf8 <xTaskCheckForTimeOut+0xa0>)
   16c9e:	681b      	ldr	r3, [r3, #0]
   16ca0:	429a      	cmp	r2, r3
   16ca2:	d007      	beq.n	16cb4 <xTaskCheckForTimeOut+0x5c>
   16ca4:	687b      	ldr	r3, [r7, #4]
   16ca6:	685a      	ldr	r2, [r3, #4]
   16ca8:	693b      	ldr	r3, [r7, #16]
   16caa:	429a      	cmp	r2, r3
   16cac:	d802      	bhi.n	16cb4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   16cae:	2301      	movs	r3, #1
   16cb0:	617b      	str	r3, [r7, #20]
   16cb2:	e016      	b.n	16ce2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   16cb4:	683b      	ldr	r3, [r7, #0]
   16cb6:	681a      	ldr	r2, [r3, #0]
   16cb8:	68fb      	ldr	r3, [r7, #12]
   16cba:	429a      	cmp	r2, r3
   16cbc:	d90c      	bls.n	16cd8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   16cbe:	683b      	ldr	r3, [r7, #0]
   16cc0:	681a      	ldr	r2, [r3, #0]
   16cc2:	68fb      	ldr	r3, [r7, #12]
   16cc4:	1ad2      	subs	r2, r2, r3
   16cc6:	683b      	ldr	r3, [r7, #0]
   16cc8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   16cca:	687b      	ldr	r3, [r7, #4]
   16ccc:	0018      	movs	r0, r3
   16cce:	4b0b      	ldr	r3, [pc, #44]	; (16cfc <xTaskCheckForTimeOut+0xa4>)
   16cd0:	4798      	blx	r3
			xReturn = pdFALSE;
   16cd2:	2300      	movs	r3, #0
   16cd4:	617b      	str	r3, [r7, #20]
   16cd6:	e004      	b.n	16ce2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   16cd8:	683b      	ldr	r3, [r7, #0]
   16cda:	2200      	movs	r2, #0
   16cdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   16cde:	2301      	movs	r3, #1
   16ce0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   16ce2:	4b07      	ldr	r3, [pc, #28]	; (16d00 <xTaskCheckForTimeOut+0xa8>)
   16ce4:	4798      	blx	r3

	return xReturn;
   16ce6:	697b      	ldr	r3, [r7, #20]
}
   16ce8:	0018      	movs	r0, r3
   16cea:	46bd      	mov	sp, r7
   16cec:	b006      	add	sp, #24
   16cee:	bd80      	pop	{r7, pc}
   16cf0:	00015389 	.word	0x00015389
   16cf4:	20002cb0 	.word	0x20002cb0
   16cf8:	20002cc4 	.word	0x20002cc4
   16cfc:	00016c31 	.word	0x00016c31
   16d00:	000153ad 	.word	0x000153ad

00016d04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   16d04:	b580      	push	{r7, lr}
   16d06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   16d08:	4b02      	ldr	r3, [pc, #8]	; (16d14 <vTaskMissedYield+0x10>)
   16d0a:	2201      	movs	r2, #1
   16d0c:	601a      	str	r2, [r3, #0]
}
   16d0e:	46c0      	nop			; (mov r8, r8)
   16d10:	46bd      	mov	sp, r7
   16d12:	bd80      	pop	{r7, pc}
   16d14:	20002cc0 	.word	0x20002cc0

00016d18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   16d18:	b580      	push	{r7, lr}
   16d1a:	b082      	sub	sp, #8
   16d1c:	af00      	add	r7, sp, #0
   16d1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   16d20:	4b04      	ldr	r3, [pc, #16]	; (16d34 <prvIdleTask+0x1c>)
   16d22:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   16d24:	4b04      	ldr	r3, [pc, #16]	; (16d38 <prvIdleTask+0x20>)
   16d26:	681b      	ldr	r3, [r3, #0]
   16d28:	2b01      	cmp	r3, #1
   16d2a:	d9f9      	bls.n	16d20 <prvIdleTask+0x8>
			{
				taskYIELD();
   16d2c:	4b03      	ldr	r3, [pc, #12]	; (16d3c <prvIdleTask+0x24>)
   16d2e:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   16d30:	e7f6      	b.n	16d20 <prvIdleTask+0x8>
   16d32:	46c0      	nop			; (mov r8, r8)
   16d34:	00016dcd 	.word	0x00016dcd
   16d38:	20002bd8 	.word	0x20002bd8
   16d3c:	00015371 	.word	0x00015371

00016d40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   16d40:	b580      	push	{r7, lr}
   16d42:	b082      	sub	sp, #8
   16d44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   16d46:	2300      	movs	r3, #0
   16d48:	607b      	str	r3, [r7, #4]
   16d4a:	e00c      	b.n	16d66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   16d4c:	687a      	ldr	r2, [r7, #4]
   16d4e:	0013      	movs	r3, r2
   16d50:	009b      	lsls	r3, r3, #2
   16d52:	189b      	adds	r3, r3, r2
   16d54:	009b      	lsls	r3, r3, #2
   16d56:	4a14      	ldr	r2, [pc, #80]	; (16da8 <prvInitialiseTaskLists+0x68>)
   16d58:	189b      	adds	r3, r3, r2
   16d5a:	0018      	movs	r0, r3
   16d5c:	4b13      	ldr	r3, [pc, #76]	; (16dac <prvInitialiseTaskLists+0x6c>)
   16d5e:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   16d60:	687b      	ldr	r3, [r7, #4]
   16d62:	3301      	adds	r3, #1
   16d64:	607b      	str	r3, [r7, #4]
   16d66:	687b      	ldr	r3, [r7, #4]
   16d68:	2b04      	cmp	r3, #4
   16d6a:	d9ef      	bls.n	16d4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   16d6c:	4b10      	ldr	r3, [pc, #64]	; (16db0 <prvInitialiseTaskLists+0x70>)
   16d6e:	0018      	movs	r0, r3
   16d70:	4b0e      	ldr	r3, [pc, #56]	; (16dac <prvInitialiseTaskLists+0x6c>)
   16d72:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   16d74:	4b0f      	ldr	r3, [pc, #60]	; (16db4 <prvInitialiseTaskLists+0x74>)
   16d76:	0018      	movs	r0, r3
   16d78:	4b0c      	ldr	r3, [pc, #48]	; (16dac <prvInitialiseTaskLists+0x6c>)
   16d7a:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   16d7c:	4b0e      	ldr	r3, [pc, #56]	; (16db8 <prvInitialiseTaskLists+0x78>)
   16d7e:	0018      	movs	r0, r3
   16d80:	4b0a      	ldr	r3, [pc, #40]	; (16dac <prvInitialiseTaskLists+0x6c>)
   16d82:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   16d84:	4b0d      	ldr	r3, [pc, #52]	; (16dbc <prvInitialiseTaskLists+0x7c>)
   16d86:	0018      	movs	r0, r3
   16d88:	4b08      	ldr	r3, [pc, #32]	; (16dac <prvInitialiseTaskLists+0x6c>)
   16d8a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   16d8c:	4b0c      	ldr	r3, [pc, #48]	; (16dc0 <prvInitialiseTaskLists+0x80>)
   16d8e:	0018      	movs	r0, r3
   16d90:	4b06      	ldr	r3, [pc, #24]	; (16dac <prvInitialiseTaskLists+0x6c>)
   16d92:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   16d94:	4b0b      	ldr	r3, [pc, #44]	; (16dc4 <prvInitialiseTaskLists+0x84>)
   16d96:	4a06      	ldr	r2, [pc, #24]	; (16db0 <prvInitialiseTaskLists+0x70>)
   16d98:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   16d9a:	4b0b      	ldr	r3, [pc, #44]	; (16dc8 <prvInitialiseTaskLists+0x88>)
   16d9c:	4a05      	ldr	r2, [pc, #20]	; (16db4 <prvInitialiseTaskLists+0x74>)
   16d9e:	601a      	str	r2, [r3, #0]
}
   16da0:	46c0      	nop			; (mov r8, r8)
   16da2:	46bd      	mov	sp, r7
   16da4:	b002      	add	sp, #8
   16da6:	bd80      	pop	{r7, pc}
   16da8:	20002bd8 	.word	0x20002bd8
   16dac:	00015103 	.word	0x00015103
   16db0:	20002c3c 	.word	0x20002c3c
   16db4:	20002c50 	.word	0x20002c50
   16db8:	20002c6c 	.word	0x20002c6c
   16dbc:	20002c80 	.word	0x20002c80
   16dc0:	20002c98 	.word	0x20002c98
   16dc4:	20002c64 	.word	0x20002c64
   16dc8:	20002c68 	.word	0x20002c68

00016dcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   16dcc:	b580      	push	{r7, lr}
   16dce:	b082      	sub	sp, #8
   16dd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   16dd2:	e01a      	b.n	16e0a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   16dd4:	4b11      	ldr	r3, [pc, #68]	; (16e1c <prvCheckTasksWaitingTermination+0x50>)
   16dd6:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   16dd8:	4b11      	ldr	r3, [pc, #68]	; (16e20 <prvCheckTasksWaitingTermination+0x54>)
   16dda:	68db      	ldr	r3, [r3, #12]
   16ddc:	68db      	ldr	r3, [r3, #12]
   16dde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   16de0:	687b      	ldr	r3, [r7, #4]
   16de2:	3304      	adds	r3, #4
   16de4:	0018      	movs	r0, r3
   16de6:	4b0f      	ldr	r3, [pc, #60]	; (16e24 <prvCheckTasksWaitingTermination+0x58>)
   16de8:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   16dea:	4b0f      	ldr	r3, [pc, #60]	; (16e28 <prvCheckTasksWaitingTermination+0x5c>)
   16dec:	681b      	ldr	r3, [r3, #0]
   16dee:	1e5a      	subs	r2, r3, #1
   16df0:	4b0d      	ldr	r3, [pc, #52]	; (16e28 <prvCheckTasksWaitingTermination+0x5c>)
   16df2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   16df4:	4b0d      	ldr	r3, [pc, #52]	; (16e2c <prvCheckTasksWaitingTermination+0x60>)
   16df6:	681b      	ldr	r3, [r3, #0]
   16df8:	1e5a      	subs	r2, r3, #1
   16dfa:	4b0c      	ldr	r3, [pc, #48]	; (16e2c <prvCheckTasksWaitingTermination+0x60>)
   16dfc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   16dfe:	4b0c      	ldr	r3, [pc, #48]	; (16e30 <prvCheckTasksWaitingTermination+0x64>)
   16e00:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   16e02:	687b      	ldr	r3, [r7, #4]
   16e04:	0018      	movs	r0, r3
   16e06:	4b0b      	ldr	r3, [pc, #44]	; (16e34 <prvCheckTasksWaitingTermination+0x68>)
   16e08:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   16e0a:	4b08      	ldr	r3, [pc, #32]	; (16e2c <prvCheckTasksWaitingTermination+0x60>)
   16e0c:	681b      	ldr	r3, [r3, #0]
   16e0e:	2b00      	cmp	r3, #0
   16e10:	d1e0      	bne.n	16dd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   16e12:	46c0      	nop			; (mov r8, r8)
   16e14:	46bd      	mov	sp, r7
   16e16:	b002      	add	sp, #8
   16e18:	bd80      	pop	{r7, pc}
   16e1a:	46c0      	nop			; (mov r8, r8)
   16e1c:	00015389 	.word	0x00015389
   16e20:	20002c80 	.word	0x20002c80
   16e24:	00015205 	.word	0x00015205
   16e28:	20002cac 	.word	0x20002cac
   16e2c:	20002c94 	.word	0x20002c94
   16e30:	000153ad 	.word	0x000153ad
   16e34:	00016e39 	.word	0x00016e39

00016e38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   16e38:	b580      	push	{r7, lr}
   16e3a:	b082      	sub	sp, #8
   16e3c:	af00      	add	r7, sp, #0
   16e3e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   16e40:	687b      	ldr	r3, [r7, #4]
   16e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   16e44:	0018      	movs	r0, r3
   16e46:	4b05      	ldr	r3, [pc, #20]	; (16e5c <prvDeleteTCB+0x24>)
   16e48:	4798      	blx	r3
			vPortFree( pxTCB );
   16e4a:	687b      	ldr	r3, [r7, #4]
   16e4c:	0018      	movs	r0, r3
   16e4e:	4b03      	ldr	r3, [pc, #12]	; (16e5c <prvDeleteTCB+0x24>)
   16e50:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   16e52:	46c0      	nop			; (mov r8, r8)
   16e54:	46bd      	mov	sp, r7
   16e56:	b002      	add	sp, #8
   16e58:	bd80      	pop	{r7, pc}
   16e5a:	46c0      	nop			; (mov r8, r8)
   16e5c:	00015561 	.word	0x00015561

00016e60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   16e60:	b580      	push	{r7, lr}
   16e62:	b082      	sub	sp, #8
   16e64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   16e66:	4b0e      	ldr	r3, [pc, #56]	; (16ea0 <prvResetNextTaskUnblockTime+0x40>)
   16e68:	681b      	ldr	r3, [r3, #0]
   16e6a:	681b      	ldr	r3, [r3, #0]
   16e6c:	2b00      	cmp	r3, #0
   16e6e:	d101      	bne.n	16e74 <prvResetNextTaskUnblockTime+0x14>
   16e70:	2301      	movs	r3, #1
   16e72:	e000      	b.n	16e76 <prvResetNextTaskUnblockTime+0x16>
   16e74:	2300      	movs	r3, #0
   16e76:	2b00      	cmp	r3, #0
   16e78:	d004      	beq.n	16e84 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   16e7a:	4b0a      	ldr	r3, [pc, #40]	; (16ea4 <prvResetNextTaskUnblockTime+0x44>)
   16e7c:	2201      	movs	r2, #1
   16e7e:	4252      	negs	r2, r2
   16e80:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   16e82:	e008      	b.n	16e96 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   16e84:	4b06      	ldr	r3, [pc, #24]	; (16ea0 <prvResetNextTaskUnblockTime+0x40>)
   16e86:	681b      	ldr	r3, [r3, #0]
   16e88:	68db      	ldr	r3, [r3, #12]
   16e8a:	68db      	ldr	r3, [r3, #12]
   16e8c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   16e8e:	687b      	ldr	r3, [r7, #4]
   16e90:	685a      	ldr	r2, [r3, #4]
   16e92:	4b04      	ldr	r3, [pc, #16]	; (16ea4 <prvResetNextTaskUnblockTime+0x44>)
   16e94:	601a      	str	r2, [r3, #0]
}
   16e96:	46c0      	nop			; (mov r8, r8)
   16e98:	46bd      	mov	sp, r7
   16e9a:	b002      	add	sp, #8
   16e9c:	bd80      	pop	{r7, pc}
   16e9e:	46c0      	nop			; (mov r8, r8)
   16ea0:	20002c64 	.word	0x20002c64
   16ea4:	20002ccc 	.word	0x20002ccc

00016ea8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   16ea8:	b580      	push	{r7, lr}
   16eaa:	b082      	sub	sp, #8
   16eac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   16eae:	4b0a      	ldr	r3, [pc, #40]	; (16ed8 <xTaskGetSchedulerState+0x30>)
   16eb0:	681b      	ldr	r3, [r3, #0]
   16eb2:	2b00      	cmp	r3, #0
   16eb4:	d102      	bne.n	16ebc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   16eb6:	2301      	movs	r3, #1
   16eb8:	607b      	str	r3, [r7, #4]
   16eba:	e008      	b.n	16ece <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   16ebc:	4b07      	ldr	r3, [pc, #28]	; (16edc <xTaskGetSchedulerState+0x34>)
   16ebe:	681b      	ldr	r3, [r3, #0]
   16ec0:	2b00      	cmp	r3, #0
   16ec2:	d102      	bne.n	16eca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   16ec4:	2302      	movs	r3, #2
   16ec6:	607b      	str	r3, [r7, #4]
   16ec8:	e001      	b.n	16ece <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   16eca:	2300      	movs	r3, #0
   16ecc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   16ece:	687b      	ldr	r3, [r7, #4]
	}
   16ed0:	0018      	movs	r0, r3
   16ed2:	46bd      	mov	sp, r7
   16ed4:	b002      	add	sp, #8
   16ed6:	bd80      	pop	{r7, pc}
   16ed8:	20002cb8 	.word	0x20002cb8
   16edc:	20002cd4 	.word	0x20002cd4

00016ee0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   16ee0:	b580      	push	{r7, lr}
   16ee2:	b084      	sub	sp, #16
   16ee4:	af00      	add	r7, sp, #0
   16ee6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   16ee8:	687b      	ldr	r3, [r7, #4]
   16eea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   16eec:	2300      	movs	r3, #0
   16eee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   16ef0:	687b      	ldr	r3, [r7, #4]
   16ef2:	2b00      	cmp	r3, #0
   16ef4:	d056      	beq.n	16fa4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   16ef6:	68bb      	ldr	r3, [r7, #8]
   16ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16efa:	4b2d      	ldr	r3, [pc, #180]	; (16fb0 <xTaskPriorityInherit+0xd0>)
   16efc:	681b      	ldr	r3, [r3, #0]
   16efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16f00:	429a      	cmp	r2, r3
   16f02:	d246      	bcs.n	16f92 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   16f04:	68bb      	ldr	r3, [r7, #8]
   16f06:	699b      	ldr	r3, [r3, #24]
   16f08:	2b00      	cmp	r3, #0
   16f0a:	db06      	blt.n	16f1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   16f0c:	4b28      	ldr	r3, [pc, #160]	; (16fb0 <xTaskPriorityInherit+0xd0>)
   16f0e:	681b      	ldr	r3, [r3, #0]
   16f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16f12:	2205      	movs	r2, #5
   16f14:	1ad2      	subs	r2, r2, r3
   16f16:	68bb      	ldr	r3, [r7, #8]
   16f18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   16f1a:	68bb      	ldr	r3, [r7, #8]
   16f1c:	6959      	ldr	r1, [r3, #20]
   16f1e:	68bb      	ldr	r3, [r7, #8]
   16f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16f22:	0013      	movs	r3, r2
   16f24:	009b      	lsls	r3, r3, #2
   16f26:	189b      	adds	r3, r3, r2
   16f28:	009b      	lsls	r3, r3, #2
   16f2a:	4a22      	ldr	r2, [pc, #136]	; (16fb4 <xTaskPriorityInherit+0xd4>)
   16f2c:	189b      	adds	r3, r3, r2
   16f2e:	4299      	cmp	r1, r3
   16f30:	d101      	bne.n	16f36 <xTaskPriorityInherit+0x56>
   16f32:	2301      	movs	r3, #1
   16f34:	e000      	b.n	16f38 <xTaskPriorityInherit+0x58>
   16f36:	2300      	movs	r3, #0
   16f38:	2b00      	cmp	r3, #0
   16f3a:	d022      	beq.n	16f82 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   16f3c:	68bb      	ldr	r3, [r7, #8]
   16f3e:	3304      	adds	r3, #4
   16f40:	0018      	movs	r0, r3
   16f42:	4b1d      	ldr	r3, [pc, #116]	; (16fb8 <xTaskPriorityInherit+0xd8>)
   16f44:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   16f46:	4b1a      	ldr	r3, [pc, #104]	; (16fb0 <xTaskPriorityInherit+0xd0>)
   16f48:	681b      	ldr	r3, [r3, #0]
   16f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16f4c:	68bb      	ldr	r3, [r7, #8]
   16f4e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   16f50:	68bb      	ldr	r3, [r7, #8]
   16f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16f54:	4b19      	ldr	r3, [pc, #100]	; (16fbc <xTaskPriorityInherit+0xdc>)
   16f56:	681b      	ldr	r3, [r3, #0]
   16f58:	429a      	cmp	r2, r3
   16f5a:	d903      	bls.n	16f64 <xTaskPriorityInherit+0x84>
   16f5c:	68bb      	ldr	r3, [r7, #8]
   16f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16f60:	4b16      	ldr	r3, [pc, #88]	; (16fbc <xTaskPriorityInherit+0xdc>)
   16f62:	601a      	str	r2, [r3, #0]
   16f64:	68bb      	ldr	r3, [r7, #8]
   16f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16f68:	0013      	movs	r3, r2
   16f6a:	009b      	lsls	r3, r3, #2
   16f6c:	189b      	adds	r3, r3, r2
   16f6e:	009b      	lsls	r3, r3, #2
   16f70:	4a10      	ldr	r2, [pc, #64]	; (16fb4 <xTaskPriorityInherit+0xd4>)
   16f72:	189a      	adds	r2, r3, r2
   16f74:	68bb      	ldr	r3, [r7, #8]
   16f76:	3304      	adds	r3, #4
   16f78:	0019      	movs	r1, r3
   16f7a:	0010      	movs	r0, r2
   16f7c:	4b10      	ldr	r3, [pc, #64]	; (16fc0 <xTaskPriorityInherit+0xe0>)
   16f7e:	4798      	blx	r3
   16f80:	e004      	b.n	16f8c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   16f82:	4b0b      	ldr	r3, [pc, #44]	; (16fb0 <xTaskPriorityInherit+0xd0>)
   16f84:	681b      	ldr	r3, [r3, #0]
   16f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   16f88:	68bb      	ldr	r3, [r7, #8]
   16f8a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   16f8c:	2301      	movs	r3, #1
   16f8e:	60fb      	str	r3, [r7, #12]
   16f90:	e008      	b.n	16fa4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   16f92:	68bb      	ldr	r3, [r7, #8]
   16f94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   16f96:	4b06      	ldr	r3, [pc, #24]	; (16fb0 <xTaskPriorityInherit+0xd0>)
   16f98:	681b      	ldr	r3, [r3, #0]
   16f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16f9c:	429a      	cmp	r2, r3
   16f9e:	d201      	bcs.n	16fa4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   16fa0:	2301      	movs	r3, #1
   16fa2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   16fa4:	68fb      	ldr	r3, [r7, #12]
	}
   16fa6:	0018      	movs	r0, r3
   16fa8:	46bd      	mov	sp, r7
   16faa:	b004      	add	sp, #16
   16fac:	bd80      	pop	{r7, pc}
   16fae:	46c0      	nop			; (mov r8, r8)
   16fb0:	20002bd4 	.word	0x20002bd4
   16fb4:	20002bd8 	.word	0x20002bd8
   16fb8:	00015205 	.word	0x00015205
   16fbc:	20002cb4 	.word	0x20002cb4
   16fc0:	00015155 	.word	0x00015155

00016fc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   16fc4:	b580      	push	{r7, lr}
   16fc6:	b084      	sub	sp, #16
   16fc8:	af00      	add	r7, sp, #0
   16fca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   16fcc:	687b      	ldr	r3, [r7, #4]
   16fce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   16fd0:	2300      	movs	r3, #0
   16fd2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   16fd4:	687b      	ldr	r3, [r7, #4]
   16fd6:	2b00      	cmp	r3, #0
   16fd8:	d044      	beq.n	17064 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   16fda:	4b25      	ldr	r3, [pc, #148]	; (17070 <xTaskPriorityDisinherit+0xac>)
   16fdc:	681b      	ldr	r3, [r3, #0]
   16fde:	68ba      	ldr	r2, [r7, #8]
   16fe0:	429a      	cmp	r2, r3
   16fe2:	d001      	beq.n	16fe8 <xTaskPriorityDisinherit+0x24>
   16fe4:	b672      	cpsid	i
   16fe6:	e7fe      	b.n	16fe6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
   16fe8:	68bb      	ldr	r3, [r7, #8]
   16fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   16fec:	2b00      	cmp	r3, #0
   16fee:	d101      	bne.n	16ff4 <xTaskPriorityDisinherit+0x30>
   16ff0:	b672      	cpsid	i
   16ff2:	e7fe      	b.n	16ff2 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
   16ff4:	68bb      	ldr	r3, [r7, #8]
   16ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   16ff8:	1e5a      	subs	r2, r3, #1
   16ffa:	68bb      	ldr	r3, [r7, #8]
   16ffc:	641a      	str	r2, [r3, #64]	; 0x40

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   16ffe:	68bb      	ldr	r3, [r7, #8]
   17000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   17002:	68bb      	ldr	r3, [r7, #8]
   17004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   17006:	429a      	cmp	r2, r3
   17008:	d02c      	beq.n	17064 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1700a:	68bb      	ldr	r3, [r7, #8]
   1700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1700e:	2b00      	cmp	r3, #0
   17010:	d128      	bne.n	17064 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   17012:	68bb      	ldr	r3, [r7, #8]
   17014:	3304      	adds	r3, #4
   17016:	0018      	movs	r0, r3
   17018:	4b16      	ldr	r3, [pc, #88]	; (17074 <xTaskPriorityDisinherit+0xb0>)
   1701a:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1701c:	68bb      	ldr	r3, [r7, #8]
   1701e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   17020:	68bb      	ldr	r3, [r7, #8]
   17022:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   17024:	68bb      	ldr	r3, [r7, #8]
   17026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17028:	2205      	movs	r2, #5
   1702a:	1ad2      	subs	r2, r2, r3
   1702c:	68bb      	ldr	r3, [r7, #8]
   1702e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   17030:	68bb      	ldr	r3, [r7, #8]
   17032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   17034:	4b10      	ldr	r3, [pc, #64]	; (17078 <xTaskPriorityDisinherit+0xb4>)
   17036:	681b      	ldr	r3, [r3, #0]
   17038:	429a      	cmp	r2, r3
   1703a:	d903      	bls.n	17044 <xTaskPriorityDisinherit+0x80>
   1703c:	68bb      	ldr	r3, [r7, #8]
   1703e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   17040:	4b0d      	ldr	r3, [pc, #52]	; (17078 <xTaskPriorityDisinherit+0xb4>)
   17042:	601a      	str	r2, [r3, #0]
   17044:	68bb      	ldr	r3, [r7, #8]
   17046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   17048:	0013      	movs	r3, r2
   1704a:	009b      	lsls	r3, r3, #2
   1704c:	189b      	adds	r3, r3, r2
   1704e:	009b      	lsls	r3, r3, #2
   17050:	4a0a      	ldr	r2, [pc, #40]	; (1707c <xTaskPriorityDisinherit+0xb8>)
   17052:	189a      	adds	r2, r3, r2
   17054:	68bb      	ldr	r3, [r7, #8]
   17056:	3304      	adds	r3, #4
   17058:	0019      	movs	r1, r3
   1705a:	0010      	movs	r0, r2
   1705c:	4b08      	ldr	r3, [pc, #32]	; (17080 <xTaskPriorityDisinherit+0xbc>)
   1705e:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   17060:	2301      	movs	r3, #1
   17062:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   17064:	68fb      	ldr	r3, [r7, #12]
	}
   17066:	0018      	movs	r0, r3
   17068:	46bd      	mov	sp, r7
   1706a:	b004      	add	sp, #16
   1706c:	bd80      	pop	{r7, pc}
   1706e:	46c0      	nop			; (mov r8, r8)
   17070:	20002bd4 	.word	0x20002bd4
   17074:	00015205 	.word	0x00015205
   17078:	20002cb4 	.word	0x20002cb4
   1707c:	20002bd8 	.word	0x20002bd8
   17080:	00015155 	.word	0x00015155

00017084 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   17084:	b580      	push	{r7, lr}
   17086:	b086      	sub	sp, #24
   17088:	af00      	add	r7, sp, #0
   1708a:	6078      	str	r0, [r7, #4]
   1708c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1708e:	687b      	ldr	r3, [r7, #4]
   17090:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   17092:	2301      	movs	r3, #1
   17094:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   17096:	687b      	ldr	r3, [r7, #4]
   17098:	2b00      	cmp	r3, #0
   1709a:	d05d      	beq.n	17158 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1709c:	693b      	ldr	r3, [r7, #16]
   1709e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   170a0:	2b00      	cmp	r3, #0
   170a2:	d101      	bne.n	170a8 <vTaskPriorityDisinheritAfterTimeout+0x24>
   170a4:	b672      	cpsid	i
   170a6:	e7fe      	b.n	170a6 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   170a8:	693b      	ldr	r3, [r7, #16]
   170aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   170ac:	683b      	ldr	r3, [r7, #0]
   170ae:	429a      	cmp	r2, r3
   170b0:	d202      	bcs.n	170b8 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   170b2:	683b      	ldr	r3, [r7, #0]
   170b4:	617b      	str	r3, [r7, #20]
   170b6:	e002      	b.n	170be <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   170b8:	693b      	ldr	r3, [r7, #16]
   170ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   170bc:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   170be:	693b      	ldr	r3, [r7, #16]
   170c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   170c2:	697b      	ldr	r3, [r7, #20]
   170c4:	429a      	cmp	r2, r3
   170c6:	d047      	beq.n	17158 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   170c8:	693b      	ldr	r3, [r7, #16]
   170ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   170cc:	68fb      	ldr	r3, [r7, #12]
   170ce:	429a      	cmp	r2, r3
   170d0:	d142      	bne.n	17158 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   170d2:	4b23      	ldr	r3, [pc, #140]	; (17160 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
   170d4:	681b      	ldr	r3, [r3, #0]
   170d6:	693a      	ldr	r2, [r7, #16]
   170d8:	429a      	cmp	r2, r3
   170da:	d101      	bne.n	170e0 <vTaskPriorityDisinheritAfterTimeout+0x5c>
   170dc:	b672      	cpsid	i
   170de:	e7fe      	b.n	170de <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   170e0:	693b      	ldr	r3, [r7, #16]
   170e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   170e4:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   170e6:	693b      	ldr	r3, [r7, #16]
   170e8:	697a      	ldr	r2, [r7, #20]
   170ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   170ec:	693b      	ldr	r3, [r7, #16]
   170ee:	699b      	ldr	r3, [r3, #24]
   170f0:	2b00      	cmp	r3, #0
   170f2:	db04      	blt.n	170fe <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   170f4:	697b      	ldr	r3, [r7, #20]
   170f6:	2205      	movs	r2, #5
   170f8:	1ad2      	subs	r2, r2, r3
   170fa:	693b      	ldr	r3, [r7, #16]
   170fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   170fe:	693b      	ldr	r3, [r7, #16]
   17100:	6959      	ldr	r1, [r3, #20]
   17102:	68ba      	ldr	r2, [r7, #8]
   17104:	0013      	movs	r3, r2
   17106:	009b      	lsls	r3, r3, #2
   17108:	189b      	adds	r3, r3, r2
   1710a:	009b      	lsls	r3, r3, #2
   1710c:	4a15      	ldr	r2, [pc, #84]	; (17164 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   1710e:	189b      	adds	r3, r3, r2
   17110:	4299      	cmp	r1, r3
   17112:	d101      	bne.n	17118 <vTaskPriorityDisinheritAfterTimeout+0x94>
   17114:	2301      	movs	r3, #1
   17116:	e000      	b.n	1711a <vTaskPriorityDisinheritAfterTimeout+0x96>
   17118:	2300      	movs	r3, #0
   1711a:	2b00      	cmp	r3, #0
   1711c:	d01c      	beq.n	17158 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1711e:	693b      	ldr	r3, [r7, #16]
   17120:	3304      	adds	r3, #4
   17122:	0018      	movs	r0, r3
   17124:	4b10      	ldr	r3, [pc, #64]	; (17168 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
   17126:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   17128:	693b      	ldr	r3, [r7, #16]
   1712a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1712c:	4b0f      	ldr	r3, [pc, #60]	; (1716c <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   1712e:	681b      	ldr	r3, [r3, #0]
   17130:	429a      	cmp	r2, r3
   17132:	d903      	bls.n	1713c <vTaskPriorityDisinheritAfterTimeout+0xb8>
   17134:	693b      	ldr	r3, [r7, #16]
   17136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   17138:	4b0c      	ldr	r3, [pc, #48]	; (1716c <vTaskPriorityDisinheritAfterTimeout+0xe8>)
   1713a:	601a      	str	r2, [r3, #0]
   1713c:	693b      	ldr	r3, [r7, #16]
   1713e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   17140:	0013      	movs	r3, r2
   17142:	009b      	lsls	r3, r3, #2
   17144:	189b      	adds	r3, r3, r2
   17146:	009b      	lsls	r3, r3, #2
   17148:	4a06      	ldr	r2, [pc, #24]	; (17164 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
   1714a:	189a      	adds	r2, r3, r2
   1714c:	693b      	ldr	r3, [r7, #16]
   1714e:	3304      	adds	r3, #4
   17150:	0019      	movs	r1, r3
   17152:	0010      	movs	r0, r2
   17154:	4b06      	ldr	r3, [pc, #24]	; (17170 <vTaskPriorityDisinheritAfterTimeout+0xec>)
   17156:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   17158:	46c0      	nop			; (mov r8, r8)
   1715a:	46bd      	mov	sp, r7
   1715c:	b006      	add	sp, #24
   1715e:	bd80      	pop	{r7, pc}
   17160:	20002bd4 	.word	0x20002bd4
   17164:	20002bd8 	.word	0x20002bd8
   17168:	00015205 	.word	0x00015205
   1716c:	20002cb4 	.word	0x20002cb4
   17170:	00015155 	.word	0x00015155

00017174 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   17174:	b580      	push	{r7, lr}
   17176:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   17178:	4b06      	ldr	r3, [pc, #24]	; (17194 <pvTaskIncrementMutexHeldCount+0x20>)
   1717a:	681b      	ldr	r3, [r3, #0]
   1717c:	2b00      	cmp	r3, #0
   1717e:	d004      	beq.n	1718a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   17180:	4b04      	ldr	r3, [pc, #16]	; (17194 <pvTaskIncrementMutexHeldCount+0x20>)
   17182:	681b      	ldr	r3, [r3, #0]
   17184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   17186:	3201      	adds	r2, #1
   17188:	641a      	str	r2, [r3, #64]	; 0x40
		}

		return pxCurrentTCB;
   1718a:	4b02      	ldr	r3, [pc, #8]	; (17194 <pvTaskIncrementMutexHeldCount+0x20>)
   1718c:	681b      	ldr	r3, [r3, #0]
	}
   1718e:	0018      	movs	r0, r3
   17190:	46bd      	mov	sp, r7
   17192:	bd80      	pop	{r7, pc}
   17194:	20002bd4 	.word	0x20002bd4

00017198 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   17198:	b580      	push	{r7, lr}
   1719a:	b084      	sub	sp, #16
   1719c:	af00      	add	r7, sp, #0
   1719e:	6078      	str	r0, [r7, #4]
   171a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   171a2:	4b21      	ldr	r3, [pc, #132]	; (17228 <prvAddCurrentTaskToDelayedList+0x90>)
   171a4:	681b      	ldr	r3, [r3, #0]
   171a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   171a8:	4b20      	ldr	r3, [pc, #128]	; (1722c <prvAddCurrentTaskToDelayedList+0x94>)
   171aa:	681b      	ldr	r3, [r3, #0]
   171ac:	3304      	adds	r3, #4
   171ae:	0018      	movs	r0, r3
   171b0:	4b1f      	ldr	r3, [pc, #124]	; (17230 <prvAddCurrentTaskToDelayedList+0x98>)
   171b2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   171b4:	687b      	ldr	r3, [r7, #4]
   171b6:	3301      	adds	r3, #1
   171b8:	d10b      	bne.n	171d2 <prvAddCurrentTaskToDelayedList+0x3a>
   171ba:	683b      	ldr	r3, [r7, #0]
   171bc:	2b00      	cmp	r3, #0
   171be:	d008      	beq.n	171d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   171c0:	4b1a      	ldr	r3, [pc, #104]	; (1722c <prvAddCurrentTaskToDelayedList+0x94>)
   171c2:	681b      	ldr	r3, [r3, #0]
   171c4:	1d1a      	adds	r2, r3, #4
   171c6:	4b1b      	ldr	r3, [pc, #108]	; (17234 <prvAddCurrentTaskToDelayedList+0x9c>)
   171c8:	0011      	movs	r1, r2
   171ca:	0018      	movs	r0, r3
   171cc:	4b1a      	ldr	r3, [pc, #104]	; (17238 <prvAddCurrentTaskToDelayedList+0xa0>)
   171ce:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   171d0:	e026      	b.n	17220 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   171d2:	68fa      	ldr	r2, [r7, #12]
   171d4:	687b      	ldr	r3, [r7, #4]
   171d6:	18d3      	adds	r3, r2, r3
   171d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   171da:	4b14      	ldr	r3, [pc, #80]	; (1722c <prvAddCurrentTaskToDelayedList+0x94>)
   171dc:	681b      	ldr	r3, [r3, #0]
   171de:	68ba      	ldr	r2, [r7, #8]
   171e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   171e2:	68ba      	ldr	r2, [r7, #8]
   171e4:	68fb      	ldr	r3, [r7, #12]
   171e6:	429a      	cmp	r2, r3
   171e8:	d209      	bcs.n	171fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   171ea:	4b14      	ldr	r3, [pc, #80]	; (1723c <prvAddCurrentTaskToDelayedList+0xa4>)
   171ec:	681a      	ldr	r2, [r3, #0]
   171ee:	4b0f      	ldr	r3, [pc, #60]	; (1722c <prvAddCurrentTaskToDelayedList+0x94>)
   171f0:	681b      	ldr	r3, [r3, #0]
   171f2:	3304      	adds	r3, #4
   171f4:	0019      	movs	r1, r3
   171f6:	0010      	movs	r0, r2
   171f8:	4b11      	ldr	r3, [pc, #68]	; (17240 <prvAddCurrentTaskToDelayedList+0xa8>)
   171fa:	4798      	blx	r3
}
   171fc:	e010      	b.n	17220 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   171fe:	4b11      	ldr	r3, [pc, #68]	; (17244 <prvAddCurrentTaskToDelayedList+0xac>)
   17200:	681a      	ldr	r2, [r3, #0]
   17202:	4b0a      	ldr	r3, [pc, #40]	; (1722c <prvAddCurrentTaskToDelayedList+0x94>)
   17204:	681b      	ldr	r3, [r3, #0]
   17206:	3304      	adds	r3, #4
   17208:	0019      	movs	r1, r3
   1720a:	0010      	movs	r0, r2
   1720c:	4b0c      	ldr	r3, [pc, #48]	; (17240 <prvAddCurrentTaskToDelayedList+0xa8>)
   1720e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   17210:	4b0d      	ldr	r3, [pc, #52]	; (17248 <prvAddCurrentTaskToDelayedList+0xb0>)
   17212:	681b      	ldr	r3, [r3, #0]
   17214:	68ba      	ldr	r2, [r7, #8]
   17216:	429a      	cmp	r2, r3
   17218:	d202      	bcs.n	17220 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1721a:	4b0b      	ldr	r3, [pc, #44]	; (17248 <prvAddCurrentTaskToDelayedList+0xb0>)
   1721c:	68ba      	ldr	r2, [r7, #8]
   1721e:	601a      	str	r2, [r3, #0]
}
   17220:	46c0      	nop			; (mov r8, r8)
   17222:	46bd      	mov	sp, r7
   17224:	b004      	add	sp, #16
   17226:	bd80      	pop	{r7, pc}
   17228:	20002cb0 	.word	0x20002cb0
   1722c:	20002bd4 	.word	0x20002bd4
   17230:	00015205 	.word	0x00015205
   17234:	20002c98 	.word	0x20002c98
   17238:	00015155 	.word	0x00015155
   1723c:	20002c68 	.word	0x20002c68
   17240:	00015199 	.word	0x00015199
   17244:	20002c64 	.word	0x20002c64
   17248:	20002ccc 	.word	0x20002ccc

0001724c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1724c:	b590      	push	{r4, r7, lr}
   1724e:	b085      	sub	sp, #20
   17250:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   17252:	2300      	movs	r3, #0
   17254:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   17256:	4b0e      	ldr	r3, [pc, #56]	; (17290 <xTimerCreateTimerTask+0x44>)
   17258:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1725a:	4b0e      	ldr	r3, [pc, #56]	; (17294 <xTimerCreateTimerTask+0x48>)
   1725c:	681b      	ldr	r3, [r3, #0]
   1725e:	2b00      	cmp	r3, #0
   17260:	d00b      	beq.n	1727a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   17262:	490d      	ldr	r1, [pc, #52]	; (17298 <xTimerCreateTimerTask+0x4c>)
   17264:	480d      	ldr	r0, [pc, #52]	; (1729c <xTimerCreateTimerTask+0x50>)
   17266:	4b0e      	ldr	r3, [pc, #56]	; (172a0 <xTimerCreateTimerTask+0x54>)
   17268:	9301      	str	r3, [sp, #4]
   1726a:	2302      	movs	r3, #2
   1726c:	9300      	str	r3, [sp, #0]
   1726e:	2300      	movs	r3, #0
   17270:	2280      	movs	r2, #128	; 0x80
   17272:	4c0c      	ldr	r4, [pc, #48]	; (172a4 <xTimerCreateTimerTask+0x58>)
   17274:	47a0      	blx	r4
   17276:	0003      	movs	r3, r0
   17278:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1727a:	687b      	ldr	r3, [r7, #4]
   1727c:	2b00      	cmp	r3, #0
   1727e:	d101      	bne.n	17284 <xTimerCreateTimerTask+0x38>
   17280:	b672      	cpsid	i
   17282:	e7fe      	b.n	17282 <xTimerCreateTimerTask+0x36>
	return xReturn;
   17284:	687b      	ldr	r3, [r7, #4]
}
   17286:	0018      	movs	r0, r3
   17288:	46bd      	mov	sp, r7
   1728a:	b003      	add	sp, #12
   1728c:	bd90      	pop	{r4, r7, pc}
   1728e:	46c0      	nop			; (mov r8, r8)
   17290:	00017795 	.word	0x00017795
   17294:	20002d08 	.word	0x20002d08
   17298:	0001e4a8 	.word	0x0001e4a8
   1729c:	000173cd 	.word	0x000173cd
   172a0:	20002d0c 	.word	0x20002d0c
   172a4:	000162f1 	.word	0x000162f1

000172a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   172a8:	b590      	push	{r4, r7, lr}
   172aa:	b089      	sub	sp, #36	; 0x24
   172ac:	af00      	add	r7, sp, #0
   172ae:	60f8      	str	r0, [r7, #12]
   172b0:	60b9      	str	r1, [r7, #8]
   172b2:	607a      	str	r2, [r7, #4]
   172b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   172b6:	2300      	movs	r3, #0
   172b8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   172ba:	68fb      	ldr	r3, [r7, #12]
   172bc:	2b00      	cmp	r3, #0
   172be:	d101      	bne.n	172c4 <xTimerGenericCommand+0x1c>
   172c0:	b672      	cpsid	i
   172c2:	e7fe      	b.n	172c2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   172c4:	4b1e      	ldr	r3, [pc, #120]	; (17340 <xTimerGenericCommand+0x98>)
   172c6:	681b      	ldr	r3, [r3, #0]
   172c8:	2b00      	cmp	r3, #0
   172ca:	d033      	beq.n	17334 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   172cc:	2310      	movs	r3, #16
   172ce:	18fb      	adds	r3, r7, r3
   172d0:	68ba      	ldr	r2, [r7, #8]
   172d2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   172d4:	2310      	movs	r3, #16
   172d6:	18fb      	adds	r3, r7, r3
   172d8:	687a      	ldr	r2, [r7, #4]
   172da:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   172dc:	2310      	movs	r3, #16
   172de:	18fb      	adds	r3, r7, r3
   172e0:	68fa      	ldr	r2, [r7, #12]
   172e2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   172e4:	68bb      	ldr	r3, [r7, #8]
   172e6:	2b05      	cmp	r3, #5
   172e8:	dc1a      	bgt.n	17320 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   172ea:	4b16      	ldr	r3, [pc, #88]	; (17344 <xTimerGenericCommand+0x9c>)
   172ec:	4798      	blx	r3
   172ee:	0003      	movs	r3, r0
   172f0:	2b02      	cmp	r3, #2
   172f2:	d10a      	bne.n	1730a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   172f4:	4b12      	ldr	r3, [pc, #72]	; (17340 <xTimerGenericCommand+0x98>)
   172f6:	6818      	ldr	r0, [r3, #0]
   172f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   172fa:	2310      	movs	r3, #16
   172fc:	18f9      	adds	r1, r7, r3
   172fe:	2300      	movs	r3, #0
   17300:	4c11      	ldr	r4, [pc, #68]	; (17348 <xTimerGenericCommand+0xa0>)
   17302:	47a0      	blx	r4
   17304:	0003      	movs	r3, r0
   17306:	61fb      	str	r3, [r7, #28]
   17308:	e014      	b.n	17334 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1730a:	4b0d      	ldr	r3, [pc, #52]	; (17340 <xTimerGenericCommand+0x98>)
   1730c:	6818      	ldr	r0, [r3, #0]
   1730e:	2310      	movs	r3, #16
   17310:	18f9      	adds	r1, r7, r3
   17312:	2300      	movs	r3, #0
   17314:	2200      	movs	r2, #0
   17316:	4c0c      	ldr	r4, [pc, #48]	; (17348 <xTimerGenericCommand+0xa0>)
   17318:	47a0      	blx	r4
   1731a:	0003      	movs	r3, r0
   1731c:	61fb      	str	r3, [r7, #28]
   1731e:	e009      	b.n	17334 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   17320:	4b07      	ldr	r3, [pc, #28]	; (17340 <xTimerGenericCommand+0x98>)
   17322:	6818      	ldr	r0, [r3, #0]
   17324:	683a      	ldr	r2, [r7, #0]
   17326:	2310      	movs	r3, #16
   17328:	18f9      	adds	r1, r7, r3
   1732a:	2300      	movs	r3, #0
   1732c:	4c07      	ldr	r4, [pc, #28]	; (1734c <xTimerGenericCommand+0xa4>)
   1732e:	47a0      	blx	r4
   17330:	0003      	movs	r3, r0
   17332:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   17334:	69fb      	ldr	r3, [r7, #28]
}
   17336:	0018      	movs	r0, r3
   17338:	46bd      	mov	sp, r7
   1733a:	b009      	add	sp, #36	; 0x24
   1733c:	bd90      	pop	{r4, r7, pc}
   1733e:	46c0      	nop			; (mov r8, r8)
   17340:	20002d08 	.word	0x20002d08
   17344:	00016ea9 	.word	0x00016ea9
   17348:	00015789 	.word	0x00015789
   1734c:	00015969 	.word	0x00015969

00017350 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   17350:	b590      	push	{r4, r7, lr}
   17352:	b087      	sub	sp, #28
   17354:	af02      	add	r7, sp, #8
   17356:	6078      	str	r0, [r7, #4]
   17358:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1735a:	4b18      	ldr	r3, [pc, #96]	; (173bc <prvProcessExpiredTimer+0x6c>)
   1735c:	681b      	ldr	r3, [r3, #0]
   1735e:	68db      	ldr	r3, [r3, #12]
   17360:	68db      	ldr	r3, [r3, #12]
   17362:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   17364:	68fb      	ldr	r3, [r7, #12]
   17366:	3304      	adds	r3, #4
   17368:	0018      	movs	r0, r3
   1736a:	4b15      	ldr	r3, [pc, #84]	; (173c0 <prvProcessExpiredTimer+0x70>)
   1736c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1736e:	68fb      	ldr	r3, [r7, #12]
   17370:	69db      	ldr	r3, [r3, #28]
   17372:	2b01      	cmp	r3, #1
   17374:	d119      	bne.n	173aa <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   17376:	68fb      	ldr	r3, [r7, #12]
   17378:	699a      	ldr	r2, [r3, #24]
   1737a:	687b      	ldr	r3, [r7, #4]
   1737c:	18d1      	adds	r1, r2, r3
   1737e:	687b      	ldr	r3, [r7, #4]
   17380:	683a      	ldr	r2, [r7, #0]
   17382:	68f8      	ldr	r0, [r7, #12]
   17384:	4c0f      	ldr	r4, [pc, #60]	; (173c4 <prvProcessExpiredTimer+0x74>)
   17386:	47a0      	blx	r4
   17388:	1e03      	subs	r3, r0, #0
   1738a:	d00e      	beq.n	173aa <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1738c:	687a      	ldr	r2, [r7, #4]
   1738e:	68f8      	ldr	r0, [r7, #12]
   17390:	2300      	movs	r3, #0
   17392:	9300      	str	r3, [sp, #0]
   17394:	2300      	movs	r3, #0
   17396:	2100      	movs	r1, #0
   17398:	4c0b      	ldr	r4, [pc, #44]	; (173c8 <prvProcessExpiredTimer+0x78>)
   1739a:	47a0      	blx	r4
   1739c:	0003      	movs	r3, r0
   1739e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   173a0:	68bb      	ldr	r3, [r7, #8]
   173a2:	2b00      	cmp	r3, #0
   173a4:	d101      	bne.n	173aa <prvProcessExpiredTimer+0x5a>
   173a6:	b672      	cpsid	i
   173a8:	e7fe      	b.n	173a8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   173aa:	68fb      	ldr	r3, [r7, #12]
   173ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   173ae:	68fa      	ldr	r2, [r7, #12]
   173b0:	0010      	movs	r0, r2
   173b2:	4798      	blx	r3
}
   173b4:	46c0      	nop			; (mov r8, r8)
   173b6:	46bd      	mov	sp, r7
   173b8:	b005      	add	sp, #20
   173ba:	bd90      	pop	{r4, r7, pc}
   173bc:	20002d00 	.word	0x20002d00
   173c0:	00015205 	.word	0x00015205
   173c4:	00017535 	.word	0x00017535
   173c8:	000172a9 	.word	0x000172a9

000173cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   173cc:	b580      	push	{r7, lr}
   173ce:	b084      	sub	sp, #16
   173d0:	af00      	add	r7, sp, #0
   173d2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   173d4:	4b08      	ldr	r3, [pc, #32]	; (173f8 <prvTimerTask+0x2c>)
   173d6:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   173d8:	2308      	movs	r3, #8
   173da:	18fb      	adds	r3, r7, r3
   173dc:	0018      	movs	r0, r3
   173de:	4b07      	ldr	r3, [pc, #28]	; (173fc <prvTimerTask+0x30>)
   173e0:	4798      	blx	r3
   173e2:	0003      	movs	r3, r0
   173e4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   173e6:	68ba      	ldr	r2, [r7, #8]
   173e8:	68fb      	ldr	r3, [r7, #12]
   173ea:	0011      	movs	r1, r2
   173ec:	0018      	movs	r0, r3
   173ee:	4b04      	ldr	r3, [pc, #16]	; (17400 <prvTimerTask+0x34>)
   173f0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   173f2:	4b04      	ldr	r3, [pc, #16]	; (17404 <prvTimerTask+0x38>)
   173f4:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   173f6:	e7ef      	b.n	173d8 <prvTimerTask+0xc>
   173f8:	0001a9a9 	.word	0x0001a9a9
   173fc:	000174ad 	.word	0x000174ad
   17400:	00017409 	.word	0x00017409
   17404:	000175bd 	.word	0x000175bd

00017408 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   17408:	b580      	push	{r7, lr}
   1740a:	b084      	sub	sp, #16
   1740c:	af00      	add	r7, sp, #0
   1740e:	6078      	str	r0, [r7, #4]
   17410:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   17412:	4b1e      	ldr	r3, [pc, #120]	; (1748c <prvProcessTimerOrBlockTask+0x84>)
   17414:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   17416:	2308      	movs	r3, #8
   17418:	18fb      	adds	r3, r7, r3
   1741a:	0018      	movs	r0, r3
   1741c:	4b1c      	ldr	r3, [pc, #112]	; (17490 <prvProcessTimerOrBlockTask+0x88>)
   1741e:	4798      	blx	r3
   17420:	0003      	movs	r3, r0
   17422:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   17424:	68bb      	ldr	r3, [r7, #8]
   17426:	2b00      	cmp	r3, #0
   17428:	d129      	bne.n	1747e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1742a:	683b      	ldr	r3, [r7, #0]
   1742c:	2b00      	cmp	r3, #0
   1742e:	d10c      	bne.n	1744a <prvProcessTimerOrBlockTask+0x42>
   17430:	687a      	ldr	r2, [r7, #4]
   17432:	68fb      	ldr	r3, [r7, #12]
   17434:	429a      	cmp	r2, r3
   17436:	d808      	bhi.n	1744a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   17438:	4b16      	ldr	r3, [pc, #88]	; (17494 <prvProcessTimerOrBlockTask+0x8c>)
   1743a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1743c:	68fa      	ldr	r2, [r7, #12]
   1743e:	687b      	ldr	r3, [r7, #4]
   17440:	0011      	movs	r1, r2
   17442:	0018      	movs	r0, r3
   17444:	4b14      	ldr	r3, [pc, #80]	; (17498 <prvProcessTimerOrBlockTask+0x90>)
   17446:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   17448:	e01b      	b.n	17482 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1744a:	683b      	ldr	r3, [r7, #0]
   1744c:	2b00      	cmp	r3, #0
   1744e:	d006      	beq.n	1745e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   17450:	4b12      	ldr	r3, [pc, #72]	; (1749c <prvProcessTimerOrBlockTask+0x94>)
   17452:	681b      	ldr	r3, [r3, #0]
   17454:	681b      	ldr	r3, [r3, #0]
   17456:	425a      	negs	r2, r3
   17458:	4153      	adcs	r3, r2
   1745a:	b2db      	uxtb	r3, r3
   1745c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1745e:	4b10      	ldr	r3, [pc, #64]	; (174a0 <prvProcessTimerOrBlockTask+0x98>)
   17460:	6818      	ldr	r0, [r3, #0]
   17462:	687a      	ldr	r2, [r7, #4]
   17464:	68fb      	ldr	r3, [r7, #12]
   17466:	1ad3      	subs	r3, r2, r3
   17468:	683a      	ldr	r2, [r7, #0]
   1746a:	0019      	movs	r1, r3
   1746c:	4b0d      	ldr	r3, [pc, #52]	; (174a4 <prvProcessTimerOrBlockTask+0x9c>)
   1746e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   17470:	4b08      	ldr	r3, [pc, #32]	; (17494 <prvProcessTimerOrBlockTask+0x8c>)
   17472:	4798      	blx	r3
   17474:	1e03      	subs	r3, r0, #0
   17476:	d104      	bne.n	17482 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   17478:	4b0b      	ldr	r3, [pc, #44]	; (174a8 <prvProcessTimerOrBlockTask+0xa0>)
   1747a:	4798      	blx	r3
}
   1747c:	e001      	b.n	17482 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1747e:	4b05      	ldr	r3, [pc, #20]	; (17494 <prvProcessTimerOrBlockTask+0x8c>)
   17480:	4798      	blx	r3
}
   17482:	46c0      	nop			; (mov r8, r8)
   17484:	46bd      	mov	sp, r7
   17486:	b004      	add	sp, #16
   17488:	bd80      	pop	{r7, pc}
   1748a:	46c0      	nop			; (mov r8, r8)
   1748c:	00016735 	.word	0x00016735
   17490:	000174ed 	.word	0x000174ed
   17494:	0001674d 	.word	0x0001674d
   17498:	00017351 	.word	0x00017351
   1749c:	20002d04 	.word	0x20002d04
   174a0:	20002d08 	.word	0x20002d08
   174a4:	000161d5 	.word	0x000161d5
   174a8:	00015371 	.word	0x00015371

000174ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   174ac:	b580      	push	{r7, lr}
   174ae:	b084      	sub	sp, #16
   174b0:	af00      	add	r7, sp, #0
   174b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   174b4:	4b0c      	ldr	r3, [pc, #48]	; (174e8 <prvGetNextExpireTime+0x3c>)
   174b6:	681b      	ldr	r3, [r3, #0]
   174b8:	681b      	ldr	r3, [r3, #0]
   174ba:	425a      	negs	r2, r3
   174bc:	4153      	adcs	r3, r2
   174be:	b2db      	uxtb	r3, r3
   174c0:	001a      	movs	r2, r3
   174c2:	687b      	ldr	r3, [r7, #4]
   174c4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   174c6:	687b      	ldr	r3, [r7, #4]
   174c8:	681b      	ldr	r3, [r3, #0]
   174ca:	2b00      	cmp	r3, #0
   174cc:	d105      	bne.n	174da <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   174ce:	4b06      	ldr	r3, [pc, #24]	; (174e8 <prvGetNextExpireTime+0x3c>)
   174d0:	681b      	ldr	r3, [r3, #0]
   174d2:	68db      	ldr	r3, [r3, #12]
   174d4:	681b      	ldr	r3, [r3, #0]
   174d6:	60fb      	str	r3, [r7, #12]
   174d8:	e001      	b.n	174de <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   174da:	2300      	movs	r3, #0
   174dc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   174de:	68fb      	ldr	r3, [r7, #12]
}
   174e0:	0018      	movs	r0, r3
   174e2:	46bd      	mov	sp, r7
   174e4:	b004      	add	sp, #16
   174e6:	bd80      	pop	{r7, pc}
   174e8:	20002d00 	.word	0x20002d00

000174ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   174ec:	b580      	push	{r7, lr}
   174ee:	b084      	sub	sp, #16
   174f0:	af00      	add	r7, sp, #0
   174f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   174f4:	4b0c      	ldr	r3, [pc, #48]	; (17528 <prvSampleTimeNow+0x3c>)
   174f6:	4798      	blx	r3
   174f8:	0003      	movs	r3, r0
   174fa:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   174fc:	4b0b      	ldr	r3, [pc, #44]	; (1752c <prvSampleTimeNow+0x40>)
   174fe:	681b      	ldr	r3, [r3, #0]
   17500:	68fa      	ldr	r2, [r7, #12]
   17502:	429a      	cmp	r2, r3
   17504:	d205      	bcs.n	17512 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   17506:	4b0a      	ldr	r3, [pc, #40]	; (17530 <prvSampleTimeNow+0x44>)
   17508:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1750a:	687b      	ldr	r3, [r7, #4]
   1750c:	2201      	movs	r2, #1
   1750e:	601a      	str	r2, [r3, #0]
   17510:	e002      	b.n	17518 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   17512:	687b      	ldr	r3, [r7, #4]
   17514:	2200      	movs	r2, #0
   17516:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   17518:	4b04      	ldr	r3, [pc, #16]	; (1752c <prvSampleTimeNow+0x40>)
   1751a:	68fa      	ldr	r2, [r7, #12]
   1751c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1751e:	68fb      	ldr	r3, [r7, #12]
}
   17520:	0018      	movs	r0, r3
   17522:	46bd      	mov	sp, r7
   17524:	b004      	add	sp, #16
   17526:	bd80      	pop	{r7, pc}
   17528:	00016881 	.word	0x00016881
   1752c:	20002d10 	.word	0x20002d10
   17530:	000176d5 	.word	0x000176d5

00017534 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   17534:	b580      	push	{r7, lr}
   17536:	b086      	sub	sp, #24
   17538:	af00      	add	r7, sp, #0
   1753a:	60f8      	str	r0, [r7, #12]
   1753c:	60b9      	str	r1, [r7, #8]
   1753e:	607a      	str	r2, [r7, #4]
   17540:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   17542:	2300      	movs	r3, #0
   17544:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   17546:	68fb      	ldr	r3, [r7, #12]
   17548:	68ba      	ldr	r2, [r7, #8]
   1754a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1754c:	68fb      	ldr	r3, [r7, #12]
   1754e:	68fa      	ldr	r2, [r7, #12]
   17550:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   17552:	68ba      	ldr	r2, [r7, #8]
   17554:	687b      	ldr	r3, [r7, #4]
   17556:	429a      	cmp	r2, r3
   17558:	d812      	bhi.n	17580 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1755a:	687a      	ldr	r2, [r7, #4]
   1755c:	683b      	ldr	r3, [r7, #0]
   1755e:	1ad2      	subs	r2, r2, r3
   17560:	68fb      	ldr	r3, [r7, #12]
   17562:	699b      	ldr	r3, [r3, #24]
   17564:	429a      	cmp	r2, r3
   17566:	d302      	bcc.n	1756e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   17568:	2301      	movs	r3, #1
   1756a:	617b      	str	r3, [r7, #20]
   1756c:	e01b      	b.n	175a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1756e:	4b10      	ldr	r3, [pc, #64]	; (175b0 <prvInsertTimerInActiveList+0x7c>)
   17570:	681a      	ldr	r2, [r3, #0]
   17572:	68fb      	ldr	r3, [r7, #12]
   17574:	3304      	adds	r3, #4
   17576:	0019      	movs	r1, r3
   17578:	0010      	movs	r0, r2
   1757a:	4b0e      	ldr	r3, [pc, #56]	; (175b4 <prvInsertTimerInActiveList+0x80>)
   1757c:	4798      	blx	r3
   1757e:	e012      	b.n	175a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   17580:	687a      	ldr	r2, [r7, #4]
   17582:	683b      	ldr	r3, [r7, #0]
   17584:	429a      	cmp	r2, r3
   17586:	d206      	bcs.n	17596 <prvInsertTimerInActiveList+0x62>
   17588:	68ba      	ldr	r2, [r7, #8]
   1758a:	683b      	ldr	r3, [r7, #0]
   1758c:	429a      	cmp	r2, r3
   1758e:	d302      	bcc.n	17596 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   17590:	2301      	movs	r3, #1
   17592:	617b      	str	r3, [r7, #20]
   17594:	e007      	b.n	175a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   17596:	4b08      	ldr	r3, [pc, #32]	; (175b8 <prvInsertTimerInActiveList+0x84>)
   17598:	681a      	ldr	r2, [r3, #0]
   1759a:	68fb      	ldr	r3, [r7, #12]
   1759c:	3304      	adds	r3, #4
   1759e:	0019      	movs	r1, r3
   175a0:	0010      	movs	r0, r2
   175a2:	4b04      	ldr	r3, [pc, #16]	; (175b4 <prvInsertTimerInActiveList+0x80>)
   175a4:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   175a6:	697b      	ldr	r3, [r7, #20]
}
   175a8:	0018      	movs	r0, r3
   175aa:	46bd      	mov	sp, r7
   175ac:	b006      	add	sp, #24
   175ae:	bd80      	pop	{r7, pc}
   175b0:	20002d04 	.word	0x20002d04
   175b4:	00015199 	.word	0x00015199
   175b8:	20002d00 	.word	0x20002d00

000175bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   175bc:	b590      	push	{r4, r7, lr}
   175be:	b08b      	sub	sp, #44	; 0x2c
   175c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   175c2:	e068      	b.n	17696 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   175c4:	2308      	movs	r3, #8
   175c6:	18fb      	adds	r3, r7, r3
   175c8:	681b      	ldr	r3, [r3, #0]
   175ca:	2b00      	cmp	r3, #0
   175cc:	db63      	blt.n	17696 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   175ce:	2308      	movs	r3, #8
   175d0:	18fb      	adds	r3, r7, r3
   175d2:	689b      	ldr	r3, [r3, #8]
   175d4:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   175d6:	69fb      	ldr	r3, [r7, #28]
   175d8:	695b      	ldr	r3, [r3, #20]
   175da:	2b00      	cmp	r3, #0
   175dc:	d004      	beq.n	175e8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   175de:	69fb      	ldr	r3, [r7, #28]
   175e0:	3304      	adds	r3, #4
   175e2:	0018      	movs	r0, r3
   175e4:	4b33      	ldr	r3, [pc, #204]	; (176b4 <prvProcessReceivedCommands+0xf8>)
   175e6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   175e8:	1d3b      	adds	r3, r7, #4
   175ea:	0018      	movs	r0, r3
   175ec:	4b32      	ldr	r3, [pc, #200]	; (176b8 <prvProcessReceivedCommands+0xfc>)
   175ee:	4798      	blx	r3
   175f0:	0003      	movs	r3, r0
   175f2:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   175f4:	2308      	movs	r3, #8
   175f6:	18fb      	adds	r3, r7, r3
   175f8:	681b      	ldr	r3, [r3, #0]
   175fa:	2b09      	cmp	r3, #9
   175fc:	d84a      	bhi.n	17694 <prvProcessReceivedCommands+0xd8>
   175fe:	009a      	lsls	r2, r3, #2
   17600:	4b2e      	ldr	r3, [pc, #184]	; (176bc <prvProcessReceivedCommands+0x100>)
   17602:	18d3      	adds	r3, r2, r3
   17604:	681b      	ldr	r3, [r3, #0]
   17606:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   17608:	2308      	movs	r3, #8
   1760a:	18fb      	adds	r3, r7, r3
   1760c:	685a      	ldr	r2, [r3, #4]
   1760e:	69fb      	ldr	r3, [r7, #28]
   17610:	699b      	ldr	r3, [r3, #24]
   17612:	18d1      	adds	r1, r2, r3
   17614:	2308      	movs	r3, #8
   17616:	18fb      	adds	r3, r7, r3
   17618:	685b      	ldr	r3, [r3, #4]
   1761a:	69ba      	ldr	r2, [r7, #24]
   1761c:	69f8      	ldr	r0, [r7, #28]
   1761e:	4c28      	ldr	r4, [pc, #160]	; (176c0 <prvProcessReceivedCommands+0x104>)
   17620:	47a0      	blx	r4
   17622:	1e03      	subs	r3, r0, #0
   17624:	d037      	beq.n	17696 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   17626:	69fb      	ldr	r3, [r7, #28]
   17628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1762a:	69fa      	ldr	r2, [r7, #28]
   1762c:	0010      	movs	r0, r2
   1762e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   17630:	69fb      	ldr	r3, [r7, #28]
   17632:	69db      	ldr	r3, [r3, #28]
   17634:	2b01      	cmp	r3, #1
   17636:	d12e      	bne.n	17696 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   17638:	2308      	movs	r3, #8
   1763a:	18fb      	adds	r3, r7, r3
   1763c:	685a      	ldr	r2, [r3, #4]
   1763e:	69fb      	ldr	r3, [r7, #28]
   17640:	699b      	ldr	r3, [r3, #24]
   17642:	18d2      	adds	r2, r2, r3
   17644:	69f8      	ldr	r0, [r7, #28]
   17646:	2300      	movs	r3, #0
   17648:	9300      	str	r3, [sp, #0]
   1764a:	2300      	movs	r3, #0
   1764c:	2100      	movs	r1, #0
   1764e:	4c1d      	ldr	r4, [pc, #116]	; (176c4 <prvProcessReceivedCommands+0x108>)
   17650:	47a0      	blx	r4
   17652:	0003      	movs	r3, r0
   17654:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   17656:	697b      	ldr	r3, [r7, #20]
   17658:	2b00      	cmp	r3, #0
   1765a:	d11c      	bne.n	17696 <prvProcessReceivedCommands+0xda>
   1765c:	b672      	cpsid	i
   1765e:	e7fe      	b.n	1765e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   17660:	2308      	movs	r3, #8
   17662:	18fb      	adds	r3, r7, r3
   17664:	685a      	ldr	r2, [r3, #4]
   17666:	69fb      	ldr	r3, [r7, #28]
   17668:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1766a:	69fb      	ldr	r3, [r7, #28]
   1766c:	699b      	ldr	r3, [r3, #24]
   1766e:	2b00      	cmp	r3, #0
   17670:	d101      	bne.n	17676 <prvProcessReceivedCommands+0xba>
   17672:	b672      	cpsid	i
   17674:	e7fe      	b.n	17674 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   17676:	69fb      	ldr	r3, [r7, #28]
   17678:	699a      	ldr	r2, [r3, #24]
   1767a:	69bb      	ldr	r3, [r7, #24]
   1767c:	18d1      	adds	r1, r2, r3
   1767e:	69bb      	ldr	r3, [r7, #24]
   17680:	69ba      	ldr	r2, [r7, #24]
   17682:	69f8      	ldr	r0, [r7, #28]
   17684:	4c0e      	ldr	r4, [pc, #56]	; (176c0 <prvProcessReceivedCommands+0x104>)
   17686:	47a0      	blx	r4
					break;
   17688:	e005      	b.n	17696 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1768a:	69fb      	ldr	r3, [r7, #28]
   1768c:	0018      	movs	r0, r3
   1768e:	4b0e      	ldr	r3, [pc, #56]	; (176c8 <prvProcessReceivedCommands+0x10c>)
   17690:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   17692:	e000      	b.n	17696 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   17694:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   17696:	4b0d      	ldr	r3, [pc, #52]	; (176cc <prvProcessReceivedCommands+0x110>)
   17698:	681b      	ldr	r3, [r3, #0]
   1769a:	2208      	movs	r2, #8
   1769c:	18b9      	adds	r1, r7, r2
   1769e:	2200      	movs	r2, #0
   176a0:	0018      	movs	r0, r3
   176a2:	4b0b      	ldr	r3, [pc, #44]	; (176d0 <prvProcessReceivedCommands+0x114>)
   176a4:	4798      	blx	r3
   176a6:	1e03      	subs	r3, r0, #0
   176a8:	d18c      	bne.n	175c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   176aa:	46c0      	nop			; (mov r8, r8)
   176ac:	46bd      	mov	sp, r7
   176ae:	b009      	add	sp, #36	; 0x24
   176b0:	bd90      	pop	{r4, r7, pc}
   176b2:	46c0      	nop			; (mov r8, r8)
   176b4:	00015205 	.word	0x00015205
   176b8:	000174ed 	.word	0x000174ed
   176bc:	0001e4b0 	.word	0x0001e4b0
   176c0:	00017535 	.word	0x00017535
   176c4:	000172a9 	.word	0x000172a9
   176c8:	00015561 	.word	0x00015561
   176cc:	20002d08 	.word	0x20002d08
   176d0:	00015b89 	.word	0x00015b89

000176d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   176d4:	b590      	push	{r4, r7, lr}
   176d6:	b089      	sub	sp, #36	; 0x24
   176d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   176da:	e03e      	b.n	1775a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   176dc:	4b28      	ldr	r3, [pc, #160]	; (17780 <prvSwitchTimerLists+0xac>)
   176de:	681b      	ldr	r3, [r3, #0]
   176e0:	68db      	ldr	r3, [r3, #12]
   176e2:	681b      	ldr	r3, [r3, #0]
   176e4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   176e6:	4b26      	ldr	r3, [pc, #152]	; (17780 <prvSwitchTimerLists+0xac>)
   176e8:	681b      	ldr	r3, [r3, #0]
   176ea:	68db      	ldr	r3, [r3, #12]
   176ec:	68db      	ldr	r3, [r3, #12]
   176ee:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   176f0:	693b      	ldr	r3, [r7, #16]
   176f2:	3304      	adds	r3, #4
   176f4:	0018      	movs	r0, r3
   176f6:	4b23      	ldr	r3, [pc, #140]	; (17784 <prvSwitchTimerLists+0xb0>)
   176f8:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   176fa:	693b      	ldr	r3, [r7, #16]
   176fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   176fe:	693a      	ldr	r2, [r7, #16]
   17700:	0010      	movs	r0, r2
   17702:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   17704:	693b      	ldr	r3, [r7, #16]
   17706:	69db      	ldr	r3, [r3, #28]
   17708:	2b01      	cmp	r3, #1
   1770a:	d126      	bne.n	1775a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1770c:	693b      	ldr	r3, [r7, #16]
   1770e:	699a      	ldr	r2, [r3, #24]
   17710:	697b      	ldr	r3, [r7, #20]
   17712:	18d3      	adds	r3, r2, r3
   17714:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   17716:	68fa      	ldr	r2, [r7, #12]
   17718:	697b      	ldr	r3, [r7, #20]
   1771a:	429a      	cmp	r2, r3
   1771c:	d90e      	bls.n	1773c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1771e:	693b      	ldr	r3, [r7, #16]
   17720:	68fa      	ldr	r2, [r7, #12]
   17722:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   17724:	693b      	ldr	r3, [r7, #16]
   17726:	693a      	ldr	r2, [r7, #16]
   17728:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1772a:	4b15      	ldr	r3, [pc, #84]	; (17780 <prvSwitchTimerLists+0xac>)
   1772c:	681a      	ldr	r2, [r3, #0]
   1772e:	693b      	ldr	r3, [r7, #16]
   17730:	3304      	adds	r3, #4
   17732:	0019      	movs	r1, r3
   17734:	0010      	movs	r0, r2
   17736:	4b14      	ldr	r3, [pc, #80]	; (17788 <prvSwitchTimerLists+0xb4>)
   17738:	4798      	blx	r3
   1773a:	e00e      	b.n	1775a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1773c:	697a      	ldr	r2, [r7, #20]
   1773e:	6938      	ldr	r0, [r7, #16]
   17740:	2300      	movs	r3, #0
   17742:	9300      	str	r3, [sp, #0]
   17744:	2300      	movs	r3, #0
   17746:	2100      	movs	r1, #0
   17748:	4c10      	ldr	r4, [pc, #64]	; (1778c <prvSwitchTimerLists+0xb8>)
   1774a:	47a0      	blx	r4
   1774c:	0003      	movs	r3, r0
   1774e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   17750:	68bb      	ldr	r3, [r7, #8]
   17752:	2b00      	cmp	r3, #0
   17754:	d101      	bne.n	1775a <prvSwitchTimerLists+0x86>
   17756:	b672      	cpsid	i
   17758:	e7fe      	b.n	17758 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1775a:	4b09      	ldr	r3, [pc, #36]	; (17780 <prvSwitchTimerLists+0xac>)
   1775c:	681b      	ldr	r3, [r3, #0]
   1775e:	681b      	ldr	r3, [r3, #0]
   17760:	2b00      	cmp	r3, #0
   17762:	d1bb      	bne.n	176dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   17764:	4b06      	ldr	r3, [pc, #24]	; (17780 <prvSwitchTimerLists+0xac>)
   17766:	681b      	ldr	r3, [r3, #0]
   17768:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1776a:	4b09      	ldr	r3, [pc, #36]	; (17790 <prvSwitchTimerLists+0xbc>)
   1776c:	681a      	ldr	r2, [r3, #0]
   1776e:	4b04      	ldr	r3, [pc, #16]	; (17780 <prvSwitchTimerLists+0xac>)
   17770:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   17772:	4b07      	ldr	r3, [pc, #28]	; (17790 <prvSwitchTimerLists+0xbc>)
   17774:	687a      	ldr	r2, [r7, #4]
   17776:	601a      	str	r2, [r3, #0]
}
   17778:	46c0      	nop			; (mov r8, r8)
   1777a:	46bd      	mov	sp, r7
   1777c:	b007      	add	sp, #28
   1777e:	bd90      	pop	{r4, r7, pc}
   17780:	20002d00 	.word	0x20002d00
   17784:	00015205 	.word	0x00015205
   17788:	00015199 	.word	0x00015199
   1778c:	000172a9 	.word	0x000172a9
   17790:	20002d04 	.word	0x20002d04

00017794 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   17794:	b580      	push	{r7, lr}
   17796:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   17798:	4b10      	ldr	r3, [pc, #64]	; (177dc <prvCheckForValidListAndQueue+0x48>)
   1779a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1779c:	4b10      	ldr	r3, [pc, #64]	; (177e0 <prvCheckForValidListAndQueue+0x4c>)
   1779e:	681b      	ldr	r3, [r3, #0]
   177a0:	2b00      	cmp	r3, #0
   177a2:	d115      	bne.n	177d0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   177a4:	4b0f      	ldr	r3, [pc, #60]	; (177e4 <prvCheckForValidListAndQueue+0x50>)
   177a6:	0018      	movs	r0, r3
   177a8:	4b0f      	ldr	r3, [pc, #60]	; (177e8 <prvCheckForValidListAndQueue+0x54>)
   177aa:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   177ac:	4b0f      	ldr	r3, [pc, #60]	; (177ec <prvCheckForValidListAndQueue+0x58>)
   177ae:	0018      	movs	r0, r3
   177b0:	4b0d      	ldr	r3, [pc, #52]	; (177e8 <prvCheckForValidListAndQueue+0x54>)
   177b2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   177b4:	4b0e      	ldr	r3, [pc, #56]	; (177f0 <prvCheckForValidListAndQueue+0x5c>)
   177b6:	4a0b      	ldr	r2, [pc, #44]	; (177e4 <prvCheckForValidListAndQueue+0x50>)
   177b8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   177ba:	4b0e      	ldr	r3, [pc, #56]	; (177f4 <prvCheckForValidListAndQueue+0x60>)
   177bc:	4a0b      	ldr	r2, [pc, #44]	; (177ec <prvCheckForValidListAndQueue+0x58>)
   177be:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   177c0:	2200      	movs	r2, #0
   177c2:	210c      	movs	r1, #12
   177c4:	2002      	movs	r0, #2
   177c6:	4b0c      	ldr	r3, [pc, #48]	; (177f8 <prvCheckForValidListAndQueue+0x64>)
   177c8:	4798      	blx	r3
   177ca:	0002      	movs	r2, r0
   177cc:	4b04      	ldr	r3, [pc, #16]	; (177e0 <prvCheckForValidListAndQueue+0x4c>)
   177ce:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   177d0:	4b0a      	ldr	r3, [pc, #40]	; (177fc <prvCheckForValidListAndQueue+0x68>)
   177d2:	4798      	blx	r3
}
   177d4:	46c0      	nop			; (mov r8, r8)
   177d6:	46bd      	mov	sp, r7
   177d8:	bd80      	pop	{r7, pc}
   177da:	46c0      	nop			; (mov r8, r8)
   177dc:	00015389 	.word	0x00015389
   177e0:	20002d08 	.word	0x20002d08
   177e4:	20002cd8 	.word	0x20002cd8
   177e8:	00015103 	.word	0x00015103
   177ec:	20002cec 	.word	0x20002cec
   177f0:	20002d00 	.word	0x20002d00
   177f4:	20002d04 	.word	0x20002d04
   177f8:	00015655 	.word	0x00015655
   177fc:	000153ad 	.word	0x000153ad

00017800 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   17800:	b580      	push	{r7, lr}
   17802:	b082      	sub	sp, #8
   17804:	af00      	add	r7, sp, #0
   17806:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   17808:	687b      	ldr	r3, [r7, #4]
   1780a:	7c1b      	ldrb	r3, [r3, #16]
   1780c:	2b00      	cmp	r3, #0
   1780e:	d00b      	beq.n	17828 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   17810:	687b      	ldr	r3, [r7, #4]
   17812:	689b      	ldr	r3, [r3, #8]
   17814:	1c5a      	adds	r2, r3, #1
   17816:	687b      	ldr	r3, [r7, #4]
   17818:	68d9      	ldr	r1, [r3, #12]
   1781a:	4b10      	ldr	r3, [pc, #64]	; (1785c <advance_pointer+0x5c>)
   1781c:	0010      	movs	r0, r2
   1781e:	4798      	blx	r3
   17820:	000b      	movs	r3, r1
   17822:	001a      	movs	r2, r3
   17824:	687b      	ldr	r3, [r7, #4]
   17826:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   17828:	687b      	ldr	r3, [r7, #4]
   1782a:	685b      	ldr	r3, [r3, #4]
   1782c:	1c5a      	adds	r2, r3, #1
   1782e:	687b      	ldr	r3, [r7, #4]
   17830:	68d9      	ldr	r1, [r3, #12]
   17832:	4b0a      	ldr	r3, [pc, #40]	; (1785c <advance_pointer+0x5c>)
   17834:	0010      	movs	r0, r2
   17836:	4798      	blx	r3
   17838:	000b      	movs	r3, r1
   1783a:	001a      	movs	r2, r3
   1783c:	687b      	ldr	r3, [r7, #4]
   1783e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   17840:	687b      	ldr	r3, [r7, #4]
   17842:	685a      	ldr	r2, [r3, #4]
   17844:	687b      	ldr	r3, [r7, #4]
   17846:	689b      	ldr	r3, [r3, #8]
   17848:	1ad3      	subs	r3, r2, r3
   1784a:	425a      	negs	r2, r3
   1784c:	4153      	adcs	r3, r2
   1784e:	b2da      	uxtb	r2, r3
   17850:	687b      	ldr	r3, [r7, #4]
   17852:	741a      	strb	r2, [r3, #16]
 }
   17854:	46c0      	nop			; (mov r8, r8)
   17856:	46bd      	mov	sp, r7
   17858:	b002      	add	sp, #8
   1785a:	bd80      	pop	{r7, pc}
   1785c:	0001ac15 	.word	0x0001ac15

00017860 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   17860:	b580      	push	{r7, lr}
   17862:	b082      	sub	sp, #8
   17864:	af00      	add	r7, sp, #0
   17866:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   17868:	687b      	ldr	r3, [r7, #4]
   1786a:	2200      	movs	r2, #0
   1786c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1786e:	687b      	ldr	r3, [r7, #4]
   17870:	689b      	ldr	r3, [r3, #8]
   17872:	1c5a      	adds	r2, r3, #1
   17874:	687b      	ldr	r3, [r7, #4]
   17876:	68d9      	ldr	r1, [r3, #12]
   17878:	4b05      	ldr	r3, [pc, #20]	; (17890 <retreat_pointer+0x30>)
   1787a:	0010      	movs	r0, r2
   1787c:	4798      	blx	r3
   1787e:	000b      	movs	r3, r1
   17880:	001a      	movs	r2, r3
   17882:	687b      	ldr	r3, [r7, #4]
   17884:	609a      	str	r2, [r3, #8]
 }
   17886:	46c0      	nop			; (mov r8, r8)
   17888:	46bd      	mov	sp, r7
   1788a:	b002      	add	sp, #8
   1788c:	bd80      	pop	{r7, pc}
   1788e:	46c0      	nop			; (mov r8, r8)
   17890:	0001ac15 	.word	0x0001ac15

00017894 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   17894:	b580      	push	{r7, lr}
   17896:	b084      	sub	sp, #16
   17898:	af00      	add	r7, sp, #0
   1789a:	6078      	str	r0, [r7, #4]
   1789c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1789e:	2014      	movs	r0, #20
   178a0:	4b09      	ldr	r3, [pc, #36]	; (178c8 <circular_buf_init+0x34>)
   178a2:	4798      	blx	r3
   178a4:	0003      	movs	r3, r0
   178a6:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   178a8:	68fb      	ldr	r3, [r7, #12]
   178aa:	687a      	ldr	r2, [r7, #4]
   178ac:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   178ae:	68fb      	ldr	r3, [r7, #12]
   178b0:	683a      	ldr	r2, [r7, #0]
   178b2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   178b4:	68fb      	ldr	r3, [r7, #12]
   178b6:	0018      	movs	r0, r3
   178b8:	4b04      	ldr	r3, [pc, #16]	; (178cc <circular_buf_init+0x38>)
   178ba:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   178bc:	68fb      	ldr	r3, [r7, #12]
 }
   178be:	0018      	movs	r0, r3
   178c0:	46bd      	mov	sp, r7
   178c2:	b004      	add	sp, #16
   178c4:	bd80      	pop	{r7, pc}
   178c6:	46c0      	nop			; (mov r8, r8)
   178c8:	0001c591 	.word	0x0001c591
   178cc:	000178d1 	.word	0x000178d1

000178d0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   178d0:	b580      	push	{r7, lr}
   178d2:	b082      	sub	sp, #8
   178d4:	af00      	add	r7, sp, #0
   178d6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   178d8:	687b      	ldr	r3, [r7, #4]
   178da:	2200      	movs	r2, #0
   178dc:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   178de:	687b      	ldr	r3, [r7, #4]
   178e0:	2200      	movs	r2, #0
   178e2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   178e4:	687b      	ldr	r3, [r7, #4]
   178e6:	2200      	movs	r2, #0
   178e8:	741a      	strb	r2, [r3, #16]
 }
   178ea:	46c0      	nop			; (mov r8, r8)
   178ec:	46bd      	mov	sp, r7
   178ee:	b002      	add	sp, #8
   178f0:	bd80      	pop	{r7, pc}
	...

000178f4 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   178f4:	b580      	push	{r7, lr}
   178f6:	b082      	sub	sp, #8
   178f8:	af00      	add	r7, sp, #0
   178fa:	6078      	str	r0, [r7, #4]
   178fc:	000a      	movs	r2, r1
   178fe:	1cfb      	adds	r3, r7, #3
   17900:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   17902:	687b      	ldr	r3, [r7, #4]
   17904:	681a      	ldr	r2, [r3, #0]
   17906:	687b      	ldr	r3, [r7, #4]
   17908:	685b      	ldr	r3, [r3, #4]
   1790a:	18d3      	adds	r3, r2, r3
   1790c:	1cfa      	adds	r2, r7, #3
   1790e:	7812      	ldrb	r2, [r2, #0]
   17910:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   17912:	687b      	ldr	r3, [r7, #4]
   17914:	0018      	movs	r0, r3
   17916:	4b03      	ldr	r3, [pc, #12]	; (17924 <circular_buf_put+0x30>)
   17918:	4798      	blx	r3
 }
   1791a:	46c0      	nop			; (mov r8, r8)
   1791c:	46bd      	mov	sp, r7
   1791e:	b002      	add	sp, #8
   17920:	bd80      	pop	{r7, pc}
   17922:	46c0      	nop			; (mov r8, r8)
   17924:	00017801 	.word	0x00017801

00017928 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   17928:	b580      	push	{r7, lr}
   1792a:	b084      	sub	sp, #16
   1792c:	af00      	add	r7, sp, #0
   1792e:	6078      	str	r0, [r7, #4]
   17930:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   17932:	2301      	movs	r3, #1
   17934:	425b      	negs	r3, r3
   17936:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   17938:	687b      	ldr	r3, [r7, #4]
   1793a:	0018      	movs	r0, r3
   1793c:	4b0d      	ldr	r3, [pc, #52]	; (17974 <circular_buf_get+0x4c>)
   1793e:	4798      	blx	r3
   17940:	0003      	movs	r3, r0
   17942:	001a      	movs	r2, r3
   17944:	2301      	movs	r3, #1
   17946:	4053      	eors	r3, r2
   17948:	b2db      	uxtb	r3, r3
   1794a:	2b00      	cmp	r3, #0
   1794c:	d00d      	beq.n	1796a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1794e:	687b      	ldr	r3, [r7, #4]
   17950:	681a      	ldr	r2, [r3, #0]
   17952:	687b      	ldr	r3, [r7, #4]
   17954:	689b      	ldr	r3, [r3, #8]
   17956:	18d3      	adds	r3, r2, r3
   17958:	781a      	ldrb	r2, [r3, #0]
   1795a:	683b      	ldr	r3, [r7, #0]
   1795c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1795e:	687b      	ldr	r3, [r7, #4]
   17960:	0018      	movs	r0, r3
   17962:	4b05      	ldr	r3, [pc, #20]	; (17978 <circular_buf_get+0x50>)
   17964:	4798      	blx	r3

		 r = 0;
   17966:	2300      	movs	r3, #0
   17968:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1796a:	68fb      	ldr	r3, [r7, #12]
 }
   1796c:	0018      	movs	r0, r3
   1796e:	46bd      	mov	sp, r7
   17970:	b004      	add	sp, #16
   17972:	bd80      	pop	{r7, pc}
   17974:	0001797d 	.word	0x0001797d
   17978:	00017861 	.word	0x00017861

0001797c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1797c:	b580      	push	{r7, lr}
   1797e:	b082      	sub	sp, #8
   17980:	af00      	add	r7, sp, #0
   17982:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   17984:	687b      	ldr	r3, [r7, #4]
   17986:	7c1b      	ldrb	r3, [r3, #16]
   17988:	2201      	movs	r2, #1
   1798a:	4053      	eors	r3, r2
   1798c:	b2db      	uxtb	r3, r3
   1798e:	2b00      	cmp	r3, #0
   17990:	d007      	beq.n	179a2 <circular_buf_empty+0x26>
   17992:	687b      	ldr	r3, [r7, #4]
   17994:	685a      	ldr	r2, [r3, #4]
   17996:	687b      	ldr	r3, [r7, #4]
   17998:	689b      	ldr	r3, [r3, #8]
   1799a:	429a      	cmp	r2, r3
   1799c:	d101      	bne.n	179a2 <circular_buf_empty+0x26>
   1799e:	2301      	movs	r3, #1
   179a0:	e000      	b.n	179a4 <circular_buf_empty+0x28>
   179a2:	2300      	movs	r3, #0
   179a4:	1c1a      	adds	r2, r3, #0
   179a6:	2301      	movs	r3, #1
   179a8:	4013      	ands	r3, r2
   179aa:	b2db      	uxtb	r3, r3
 }
   179ac:	0018      	movs	r0, r3
   179ae:	46bd      	mov	sp, r7
   179b0:	b002      	add	sp, #8
   179b2:	bd80      	pop	{r7, pc}

000179b4 <system_interrupt_enable>:
{
   179b4:	b580      	push	{r7, lr}
   179b6:	b082      	sub	sp, #8
   179b8:	af00      	add	r7, sp, #0
   179ba:	0002      	movs	r2, r0
   179bc:	1dfb      	adds	r3, r7, #7
   179be:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   179c0:	4b06      	ldr	r3, [pc, #24]	; (179dc <system_interrupt_enable+0x28>)
   179c2:	1dfa      	adds	r2, r7, #7
   179c4:	7812      	ldrb	r2, [r2, #0]
   179c6:	0011      	movs	r1, r2
   179c8:	221f      	movs	r2, #31
   179ca:	400a      	ands	r2, r1
   179cc:	2101      	movs	r1, #1
   179ce:	4091      	lsls	r1, r2
   179d0:	000a      	movs	r2, r1
   179d2:	601a      	str	r2, [r3, #0]
}
   179d4:	46c0      	nop			; (mov r8, r8)
   179d6:	46bd      	mov	sp, r7
   179d8:	b002      	add	sp, #8
   179da:	bd80      	pop	{r7, pc}
   179dc:	e000e100 	.word	0xe000e100

000179e0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   179e0:	b580      	push	{r7, lr}
   179e2:	b084      	sub	sp, #16
   179e4:	af00      	add	r7, sp, #0
   179e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   179e8:	687b      	ldr	r3, [r7, #4]
   179ea:	681b      	ldr	r3, [r3, #0]
   179ec:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   179ee:	68fb      	ldr	r3, [r7, #12]
   179f0:	69db      	ldr	r3, [r3, #28]
   179f2:	1e5a      	subs	r2, r3, #1
   179f4:	4193      	sbcs	r3, r2
   179f6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   179f8:	0018      	movs	r0, r3
   179fa:	46bd      	mov	sp, r7
   179fc:	b004      	add	sp, #16
   179fe:	bd80      	pop	{r7, pc}

00017a00 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   17a00:	b580      	push	{r7, lr}
   17a02:	b082      	sub	sp, #8
   17a04:	af00      	add	r7, sp, #0
   17a06:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   17a08:	46c0      	nop			; (mov r8, r8)
   17a0a:	687b      	ldr	r3, [r7, #4]
   17a0c:	0018      	movs	r0, r3
   17a0e:	4b04      	ldr	r3, [pc, #16]	; (17a20 <_usart_wait_for_sync+0x20>)
   17a10:	4798      	blx	r3
   17a12:	1e03      	subs	r3, r0, #0
   17a14:	d1f9      	bne.n	17a0a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   17a16:	46c0      	nop			; (mov r8, r8)
   17a18:	46bd      	mov	sp, r7
   17a1a:	b002      	add	sp, #8
   17a1c:	bd80      	pop	{r7, pc}
   17a1e:	46c0      	nop			; (mov r8, r8)
   17a20:	000179e1 	.word	0x000179e1

00017a24 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   17a24:	b580      	push	{r7, lr}
   17a26:	b082      	sub	sp, #8
   17a28:	af00      	add	r7, sp, #0
   17a2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   17a2c:	687b      	ldr	r3, [r7, #4]
   17a2e:	2280      	movs	r2, #128	; 0x80
   17a30:	05d2      	lsls	r2, r2, #23
   17a32:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   17a34:	687b      	ldr	r3, [r7, #4]
   17a36:	2200      	movs	r2, #0
   17a38:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   17a3a:	687b      	ldr	r3, [r7, #4]
   17a3c:	22ff      	movs	r2, #255	; 0xff
   17a3e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   17a40:	687b      	ldr	r3, [r7, #4]
   17a42:	2200      	movs	r2, #0
   17a44:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   17a46:	687b      	ldr	r3, [r7, #4]
   17a48:	2200      	movs	r2, #0
   17a4a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   17a4c:	687b      	ldr	r3, [r7, #4]
   17a4e:	2296      	movs	r2, #150	; 0x96
   17a50:	0192      	lsls	r2, r2, #6
   17a52:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   17a54:	687b      	ldr	r3, [r7, #4]
   17a56:	2224      	movs	r2, #36	; 0x24
   17a58:	2101      	movs	r1, #1
   17a5a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   17a5c:	687b      	ldr	r3, [r7, #4]
   17a5e:	2225      	movs	r2, #37	; 0x25
   17a60:	2101      	movs	r1, #1
   17a62:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   17a64:	687b      	ldr	r3, [r7, #4]
   17a66:	2226      	movs	r2, #38	; 0x26
   17a68:	2100      	movs	r1, #0
   17a6a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   17a6c:	687b      	ldr	r3, [r7, #4]
   17a6e:	2227      	movs	r2, #39	; 0x27
   17a70:	2100      	movs	r1, #0
   17a72:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   17a74:	687b      	ldr	r3, [r7, #4]
   17a76:	2200      	movs	r2, #0
   17a78:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   17a7a:	687b      	ldr	r3, [r7, #4]
   17a7c:	2288      	movs	r2, #136	; 0x88
   17a7e:	0352      	lsls	r2, r2, #13
   17a80:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   17a82:	687b      	ldr	r3, [r7, #4]
   17a84:	222c      	movs	r2, #44	; 0x2c
   17a86:	2100      	movs	r1, #0
   17a88:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   17a8a:	687b      	ldr	r3, [r7, #4]
   17a8c:	222d      	movs	r2, #45	; 0x2d
   17a8e:	2100      	movs	r1, #0
   17a90:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   17a92:	687b      	ldr	r3, [r7, #4]
   17a94:	2200      	movs	r2, #0
   17a96:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   17a98:	687b      	ldr	r3, [r7, #4]
   17a9a:	2200      	movs	r2, #0
   17a9c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   17a9e:	687b      	ldr	r3, [r7, #4]
   17aa0:	2200      	movs	r2, #0
   17aa2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   17aa4:	687b      	ldr	r3, [r7, #4]
   17aa6:	2200      	movs	r2, #0
   17aa8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   17aaa:	687b      	ldr	r3, [r7, #4]
   17aac:	2200      	movs	r2, #0
   17aae:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   17ab0:	687b      	ldr	r3, [r7, #4]
   17ab2:	2200      	movs	r2, #0
   17ab4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   17ab6:	687b      	ldr	r3, [r7, #4]
   17ab8:	2200      	movs	r2, #0
   17aba:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   17abc:	687b      	ldr	r3, [r7, #4]
   17abe:	2200      	movs	r2, #0
   17ac0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   17ac2:	687b      	ldr	r3, [r7, #4]
   17ac4:	2200      	movs	r2, #0
   17ac6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   17ac8:	687b      	ldr	r3, [r7, #4]
   17aca:	2200      	movs	r2, #0
   17acc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   17ace:	687b      	ldr	r3, [r7, #4]
   17ad0:	2213      	movs	r2, #19
   17ad2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   17ad4:	687b      	ldr	r3, [r7, #4]
   17ad6:	2200      	movs	r2, #0
   17ad8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   17ada:	46c0      	nop			; (mov r8, r8)
   17adc:	46bd      	mov	sp, r7
   17ade:	b002      	add	sp, #8
   17ae0:	bd80      	pop	{r7, pc}
	...

00017ae4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   17ae4:	b580      	push	{r7, lr}
   17ae6:	b084      	sub	sp, #16
   17ae8:	af00      	add	r7, sp, #0
   17aea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   17aec:	687b      	ldr	r3, [r7, #4]
   17aee:	681b      	ldr	r3, [r3, #0]
   17af0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   17af2:	687b      	ldr	r3, [r7, #4]
   17af4:	681b      	ldr	r3, [r3, #0]
   17af6:	0018      	movs	r0, r3
   17af8:	4b09      	ldr	r3, [pc, #36]	; (17b20 <usart_enable+0x3c>)
   17afa:	4798      	blx	r3
   17afc:	0003      	movs	r3, r0
   17afe:	0018      	movs	r0, r3
   17b00:	4b08      	ldr	r3, [pc, #32]	; (17b24 <usart_enable+0x40>)
   17b02:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   17b04:	687b      	ldr	r3, [r7, #4]
   17b06:	0018      	movs	r0, r3
   17b08:	4b07      	ldr	r3, [pc, #28]	; (17b28 <usart_enable+0x44>)
   17b0a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   17b0c:	68fb      	ldr	r3, [r7, #12]
   17b0e:	681b      	ldr	r3, [r3, #0]
   17b10:	2202      	movs	r2, #2
   17b12:	431a      	orrs	r2, r3
   17b14:	68fb      	ldr	r3, [r7, #12]
   17b16:	601a      	str	r2, [r3, #0]
}
   17b18:	46c0      	nop			; (mov r8, r8)
   17b1a:	46bd      	mov	sp, r7
   17b1c:	b004      	add	sp, #16
   17b1e:	bd80      	pop	{r7, pc}
   17b20:	00018b35 	.word	0x00018b35
   17b24:	000179b5 	.word	0x000179b5
   17b28:	00017a01 	.word	0x00017a01

00017b2c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   17b2c:	b580      	push	{r7, lr}
   17b2e:	b082      	sub	sp, #8
   17b30:	af00      	add	r7, sp, #0
   17b32:	6078      	str	r0, [r7, #4]
   17b34:	000a      	movs	r2, r1
   17b36:	1cfb      	adds	r3, r7, #3
   17b38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   17b3a:	687b      	ldr	r3, [r7, #4]
   17b3c:	2231      	movs	r2, #49	; 0x31
   17b3e:	5c9b      	ldrb	r3, [r3, r2]
   17b40:	b25a      	sxtb	r2, r3
   17b42:	1cfb      	adds	r3, r7, #3
   17b44:	781b      	ldrb	r3, [r3, #0]
   17b46:	2101      	movs	r1, #1
   17b48:	4099      	lsls	r1, r3
   17b4a:	000b      	movs	r3, r1
   17b4c:	b25b      	sxtb	r3, r3
   17b4e:	4313      	orrs	r3, r2
   17b50:	b25b      	sxtb	r3, r3
   17b52:	b2d9      	uxtb	r1, r3
   17b54:	687b      	ldr	r3, [r7, #4]
   17b56:	2231      	movs	r2, #49	; 0x31
   17b58:	5499      	strb	r1, [r3, r2]

}
   17b5a:	46c0      	nop			; (mov r8, r8)
   17b5c:	46bd      	mov	sp, r7
   17b5e:	b002      	add	sp, #8
   17b60:	bd80      	pop	{r7, pc}
	...

00017b64 <InitializeSerialConsole>:
*				asynchronous reads and writes. 
* @note			Call from main once to initialize Hardware.
*****************************************************************************/

void InitializeSerialConsole(void)
{
   17b64:	b580      	push	{r7, lr}
   17b66:	af00      	add	r7, sp, #0

	//Initialize circular buffers for RX and TX
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
   17b68:	2380      	movs	r3, #128	; 0x80
   17b6a:	009a      	lsls	r2, r3, #2
   17b6c:	4b0f      	ldr	r3, [pc, #60]	; (17bac <InitializeSerialConsole+0x48>)
   17b6e:	0011      	movs	r1, r2
   17b70:	0018      	movs	r0, r3
   17b72:	4b0f      	ldr	r3, [pc, #60]	; (17bb0 <InitializeSerialConsole+0x4c>)
   17b74:	4798      	blx	r3
   17b76:	0002      	movs	r2, r0
   17b78:	4b0e      	ldr	r3, [pc, #56]	; (17bb4 <InitializeSerialConsole+0x50>)
   17b7a:	601a      	str	r2, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
   17b7c:	2380      	movs	r3, #128	; 0x80
   17b7e:	009a      	lsls	r2, r3, #2
   17b80:	4b0d      	ldr	r3, [pc, #52]	; (17bb8 <InitializeSerialConsole+0x54>)
   17b82:	0011      	movs	r1, r2
   17b84:	0018      	movs	r0, r3
   17b86:	4b0a      	ldr	r3, [pc, #40]	; (17bb0 <InitializeSerialConsole+0x4c>)
   17b88:	4798      	blx	r3
   17b8a:	0002      	movs	r2, r0
   17b8c:	4b0b      	ldr	r3, [pc, #44]	; (17bbc <InitializeSerialConsole+0x58>)
   17b8e:	601a      	str	r2, [r3, #0]

	//Configure USART and Callbacks
	configure_usart();
   17b90:	4b0b      	ldr	r3, [pc, #44]	; (17bc0 <InitializeSerialConsole+0x5c>)
   17b92:	4798      	blx	r3
	configure_usart_callbacks();
   17b94:	4b0b      	ldr	r3, [pc, #44]	; (17bc4 <InitializeSerialConsole+0x60>)
   17b96:	4798      	blx	r3
	
	
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
   17b98:	490b      	ldr	r1, [pc, #44]	; (17bc8 <InitializeSerialConsole+0x64>)
   17b9a:	4b0c      	ldr	r3, [pc, #48]	; (17bcc <InitializeSerialConsole+0x68>)
   17b9c:	2201      	movs	r2, #1
   17b9e:	0018      	movs	r0, r3
   17ba0:	4b0b      	ldr	r3, [pc, #44]	; (17bd0 <InitializeSerialConsole+0x6c>)
   17ba2:	4798      	blx	r3

	//Add any other calls you need to do to initialize your Serial Console
}
   17ba4:	46c0      	nop			; (mov r8, r8)
   17ba6:	46bd      	mov	sp, r7
   17ba8:	bd80      	pop	{r7, pc}
   17baa:	46c0      	nop			; (mov r8, r8)
   17bac:	200030c0 	.word	0x200030c0
   17bb0:	00017895 	.word	0x00017895
   17bb4:	20002eb8 	.word	0x20002eb8
   17bb8:	20002ec0 	.word	0x20002ec0
   17bbc:	200032c4 	.word	0x200032c4
   17bc0:	00017cad 	.word	0x00017cad
   17bc4:	00017d25 	.word	0x00017d25
   17bc8:	20002ebc 	.word	0x20002ebc
   17bcc:	20002e84 	.word	0x20002e84
   17bd0:	00019429 	.word	0x00019429

00017bd4 <SerialConsoleWriteString>:
* @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the text send to the uart
* @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be thread safe.
* @note			Use to send a string of characters to the user via UART
*****************************************************************************/
void SerialConsoleWriteString(char * string)
{
   17bd4:	b580      	push	{r7, lr}
   17bd6:	b084      	sub	sp, #16
   17bd8:	af00      	add	r7, sp, #0
   17bda:	6078      	str	r0, [r7, #4]
vTaskSuspendAll();
   17bdc:	4b1a      	ldr	r3, [pc, #104]	; (17c48 <SerialConsoleWriteString+0x74>)
   17bde:	4798      	blx	r3
	if(string != NULL)
   17be0:	687b      	ldr	r3, [r7, #4]
   17be2:	2b00      	cmp	r3, #0
   17be4:	d02a      	beq.n	17c3c <SerialConsoleWriteString+0x68>
	{
		for (size_t iter = 0; iter < strlen(string); iter++)
   17be6:	2300      	movs	r3, #0
   17be8:	60fb      	str	r3, [r7, #12]
   17bea:	e00b      	b.n	17c04 <SerialConsoleWriteString+0x30>
		{
			circular_buf_put(cbufTx, string[iter]);
   17bec:	4b17      	ldr	r3, [pc, #92]	; (17c4c <SerialConsoleWriteString+0x78>)
   17bee:	6818      	ldr	r0, [r3, #0]
   17bf0:	687a      	ldr	r2, [r7, #4]
   17bf2:	68fb      	ldr	r3, [r7, #12]
   17bf4:	18d3      	adds	r3, r2, r3
   17bf6:	781b      	ldrb	r3, [r3, #0]
   17bf8:	0019      	movs	r1, r3
   17bfa:	4b15      	ldr	r3, [pc, #84]	; (17c50 <SerialConsoleWriteString+0x7c>)
   17bfc:	4798      	blx	r3
		for (size_t iter = 0; iter < strlen(string); iter++)
   17bfe:	68fb      	ldr	r3, [r7, #12]
   17c00:	3301      	adds	r3, #1
   17c02:	60fb      	str	r3, [r7, #12]
   17c04:	687b      	ldr	r3, [r7, #4]
   17c06:	0018      	movs	r0, r3
   17c08:	4b12      	ldr	r3, [pc, #72]	; (17c54 <SerialConsoleWriteString+0x80>)
   17c0a:	4798      	blx	r3
   17c0c:	0002      	movs	r2, r0
   17c0e:	68fb      	ldr	r3, [r7, #12]
   17c10:	429a      	cmp	r2, r3
   17c12:	d8eb      	bhi.n	17bec <SerialConsoleWriteString+0x18>
		}

		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
   17c14:	4b10      	ldr	r3, [pc, #64]	; (17c58 <SerialConsoleWriteString+0x84>)
   17c16:	2101      	movs	r1, #1
   17c18:	0018      	movs	r0, r3
   17c1a:	4b10      	ldr	r3, [pc, #64]	; (17c5c <SerialConsoleWriteString+0x88>)
   17c1c:	4798      	blx	r3
   17c1e:	1e03      	subs	r3, r0, #0
   17c20:	d10c      	bne.n	17c3c <SerialConsoleWriteString+0x68>
		{
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
   17c22:	4b0a      	ldr	r3, [pc, #40]	; (17c4c <SerialConsoleWriteString+0x78>)
   17c24:	681b      	ldr	r3, [r3, #0]
   17c26:	4a0e      	ldr	r2, [pc, #56]	; (17c60 <SerialConsoleWriteString+0x8c>)
   17c28:	0011      	movs	r1, r2
   17c2a:	0018      	movs	r0, r3
   17c2c:	4b0d      	ldr	r3, [pc, #52]	; (17c64 <SerialConsoleWriteString+0x90>)
   17c2e:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   17c30:	490b      	ldr	r1, [pc, #44]	; (17c60 <SerialConsoleWriteString+0x8c>)
   17c32:	4b09      	ldr	r3, [pc, #36]	; (17c58 <SerialConsoleWriteString+0x84>)
   17c34:	2201      	movs	r2, #1
   17c36:	0018      	movs	r0, r3
   17c38:	4b0b      	ldr	r3, [pc, #44]	; (17c68 <SerialConsoleWriteString+0x94>)
   17c3a:	4798      	blx	r3
		}
	}
xTaskResumeAll();
   17c3c:	4b0b      	ldr	r3, [pc, #44]	; (17c6c <SerialConsoleWriteString+0x98>)
   17c3e:	4798      	blx	r3
}
   17c40:	46c0      	nop			; (mov r8, r8)
   17c42:	46bd      	mov	sp, r7
   17c44:	b004      	add	sp, #16
   17c46:	bd80      	pop	{r7, pc}
   17c48:	00016735 	.word	0x00016735
   17c4c:	200032c4 	.word	0x200032c4
   17c50:	000178f5 	.word	0x000178f5
   17c54:	0001c845 	.word	0x0001c845
   17c58:	20002e84 	.word	0x20002e84
   17c5c:	00019471 	.word	0x00019471
   17c60:	200032c0 	.word	0x200032c0
   17c64:	00017929 	.word	0x00017929
   17c68:	000193e1 	.word	0x000193e1
   17c6c:	0001674d 	.word	0x0001674d

00017c70 <SerialConsoleReadCharacter>:
* @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
* @return		Returns -1 if there are no characters in the buffer
* @note			Use to receive characters from the RX buffer (FIFO)
*****************************************************************************/
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   17c70:	b580      	push	{r7, lr}
   17c72:	b084      	sub	sp, #16
   17c74:	af00      	add	r7, sp, #0
   17c76:	6078      	str	r0, [r7, #4]
	vTaskSuspendAll();
   17c78:	4b08      	ldr	r3, [pc, #32]	; (17c9c <SerialConsoleReadCharacter+0x2c>)
   17c7a:	4798      	blx	r3
	int a = circular_buf_get(cbufRx, (uint8_t*) rxChar);
   17c7c:	4b08      	ldr	r3, [pc, #32]	; (17ca0 <SerialConsoleReadCharacter+0x30>)
   17c7e:	681b      	ldr	r3, [r3, #0]
   17c80:	687a      	ldr	r2, [r7, #4]
   17c82:	0011      	movs	r1, r2
   17c84:	0018      	movs	r0, r3
   17c86:	4b07      	ldr	r3, [pc, #28]	; (17ca4 <SerialConsoleReadCharacter+0x34>)
   17c88:	4798      	blx	r3
   17c8a:	0003      	movs	r3, r0
   17c8c:	60fb      	str	r3, [r7, #12]
	xTaskResumeAll();
   17c8e:	4b06      	ldr	r3, [pc, #24]	; (17ca8 <SerialConsoleReadCharacter+0x38>)
   17c90:	4798      	blx	r3
	return a;
   17c92:	68fb      	ldr	r3, [r7, #12]

}
   17c94:	0018      	movs	r0, r3
   17c96:	46bd      	mov	sp, r7
   17c98:	b004      	add	sp, #16
   17c9a:	bd80      	pop	{r7, pc}
   17c9c:	00016735 	.word	0x00016735
   17ca0:	20002eb8 	.word	0x20002eb8
   17ca4:	00017929 	.word	0x00017929
   17ca8:	0001674d 	.word	0x0001674d

00017cac <configure_usart>:
* @fn			static void configure_usart(void)
* @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
* @note			
*****************************************************************************/
static void configure_usart(void)
{
   17cac:	b580      	push	{r7, lr}
   17cae:	b090      	sub	sp, #64	; 0x40
   17cb0:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
   17cb2:	003b      	movs	r3, r7
   17cb4:	0018      	movs	r0, r3
   17cb6:	4b14      	ldr	r3, [pc, #80]	; (17d08 <configure_usart+0x5c>)
   17cb8:	4798      	blx	r3

	config_usart.baudrate    = 115200;
   17cba:	003b      	movs	r3, r7
   17cbc:	22e1      	movs	r2, #225	; 0xe1
   17cbe:	0252      	lsls	r2, r2, #9
   17cc0:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   17cc2:	003b      	movs	r3, r7
   17cc4:	22c4      	movs	r2, #196	; 0xc4
   17cc6:	0392      	lsls	r2, r2, #14
   17cc8:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   17cca:	003b      	movs	r3, r7
   17ccc:	2201      	movs	r2, #1
   17cce:	4252      	negs	r2, r2
   17cd0:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   17cd2:	003b      	movs	r3, r7
   17cd4:	2201      	movs	r2, #1
   17cd6:	4252      	negs	r2, r2
   17cd8:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   17cda:	003b      	movs	r3, r7
   17cdc:	4a0b      	ldr	r2, [pc, #44]	; (17d0c <configure_usart+0x60>)
   17cde:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   17ce0:	003b      	movs	r3, r7
   17ce2:	4a0b      	ldr	r2, [pc, #44]	; (17d10 <configure_usart+0x64>)
   17ce4:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_instance,
   17ce6:	46c0      	nop			; (mov r8, r8)
   17ce8:	003a      	movs	r2, r7
   17cea:	490a      	ldr	r1, [pc, #40]	; (17d14 <configure_usart+0x68>)
   17cec:	4b0a      	ldr	r3, [pc, #40]	; (17d18 <configure_usart+0x6c>)
   17cee:	0018      	movs	r0, r3
   17cf0:	4b0a      	ldr	r3, [pc, #40]	; (17d1c <configure_usart+0x70>)
   17cf2:	4798      	blx	r3
   17cf4:	1e03      	subs	r3, r0, #0
   17cf6:	d1f7      	bne.n	17ce8 <configure_usart+0x3c>
					  &config_usart) != STATUS_OK) 
	{

	}
	
	usart_enable(&usart_instance);
   17cf8:	4b07      	ldr	r3, [pc, #28]	; (17d18 <configure_usart+0x6c>)
   17cfa:	0018      	movs	r0, r3
   17cfc:	4b08      	ldr	r3, [pc, #32]	; (17d20 <configure_usart+0x74>)
   17cfe:	4798      	blx	r3
}
   17d00:	46c0      	nop			; (mov r8, r8)
   17d02:	46bd      	mov	sp, r7
   17d04:	b010      	add	sp, #64	; 0x40
   17d06:	bd80      	pop	{r7, pc}
   17d08:	00017a25 	.word	0x00017a25
   17d0c:	002a0003 	.word	0x002a0003
   17d10:	002b0003 	.word	0x002b0003
   17d14:	42001800 	.word	0x42001800
   17d18:	20002e84 	.word	0x20002e84
   17d1c:	00018fe5 	.word	0x00018fe5
   17d20:	00017ae5 	.word	0x00017ae5

00017d24 <configure_usart_callbacks>:
* @fn			static void configure_usart_callbacks(void)
* @brief		Code to register callbacks
* @note
*****************************************************************************/
static void configure_usart_callbacks(void)
{
   17d24:	b580      	push	{r7, lr}
   17d26:	af00      	add	r7, sp, #0
	usart_register_callback(&usart_instance,
   17d28:	490c      	ldr	r1, [pc, #48]	; (17d5c <configure_usart_callbacks+0x38>)
   17d2a:	4b0d      	ldr	r3, [pc, #52]	; (17d60 <configure_usart_callbacks+0x3c>)
   17d2c:	2200      	movs	r2, #0
   17d2e:	0018      	movs	r0, r3
   17d30:	4b0c      	ldr	r3, [pc, #48]	; (17d64 <configure_usart_callbacks+0x40>)
   17d32:	4798      	blx	r3
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
   17d34:	490c      	ldr	r1, [pc, #48]	; (17d68 <configure_usart_callbacks+0x44>)
   17d36:	4b0a      	ldr	r3, [pc, #40]	; (17d60 <configure_usart_callbacks+0x3c>)
   17d38:	2201      	movs	r2, #1
   17d3a:	0018      	movs	r0, r3
   17d3c:	4b09      	ldr	r3, [pc, #36]	; (17d64 <configure_usart_callbacks+0x40>)
   17d3e:	4798      	blx	r3
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   17d40:	4b07      	ldr	r3, [pc, #28]	; (17d60 <configure_usart_callbacks+0x3c>)
   17d42:	2100      	movs	r1, #0
   17d44:	0018      	movs	r0, r3
   17d46:	4b09      	ldr	r3, [pc, #36]	; (17d6c <configure_usart_callbacks+0x48>)
   17d48:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   17d4a:	4b05      	ldr	r3, [pc, #20]	; (17d60 <configure_usart_callbacks+0x3c>)
   17d4c:	2101      	movs	r1, #1
   17d4e:	0018      	movs	r0, r3
   17d50:	4b06      	ldr	r3, [pc, #24]	; (17d6c <configure_usart_callbacks+0x48>)
   17d52:	4798      	blx	r3
}
   17d54:	46c0      	nop			; (mov r8, r8)
   17d56:	46bd      	mov	sp, r7
   17d58:	bd80      	pop	{r7, pc}
   17d5a:	46c0      	nop			; (mov r8, r8)
   17d5c:	00017db1 	.word	0x00017db1
   17d60:	20002e84 	.word	0x20002e84
   17d64:	00019399 	.word	0x00019399
   17d68:	00017d71 	.word	0x00017d71
   17d6c:	00017b2d 	.word	0x00017b2d

00017d70 <usart_read_callback>:
* @fn			void usart_read_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
   17d70:	b580      	push	{r7, lr}
   17d72:	b082      	sub	sp, #8
   17d74:	af00      	add	r7, sp, #0
   17d76:	6078      	str	r0, [r7, #4]

	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
   17d78:	4b08      	ldr	r3, [pc, #32]	; (17d9c <usart_read_callback+0x2c>)
   17d7a:	681a      	ldr	r2, [r3, #0]
   17d7c:	4b08      	ldr	r3, [pc, #32]	; (17da0 <usart_read_callback+0x30>)
   17d7e:	781b      	ldrb	r3, [r3, #0]
   17d80:	0019      	movs	r1, r3
   17d82:	0010      	movs	r0, r2
   17d84:	4b07      	ldr	r3, [pc, #28]	; (17da4 <usart_read_callback+0x34>)
   17d86:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
   17d88:	4905      	ldr	r1, [pc, #20]	; (17da0 <usart_read_callback+0x30>)
   17d8a:	4b07      	ldr	r3, [pc, #28]	; (17da8 <usart_read_callback+0x38>)
   17d8c:	2201      	movs	r2, #1
   17d8e:	0018      	movs	r0, r3
   17d90:	4b06      	ldr	r3, [pc, #24]	; (17dac <usart_read_callback+0x3c>)
   17d92:	4798      	blx	r3
	
}
   17d94:	46c0      	nop			; (mov r8, r8)
   17d96:	46bd      	mov	sp, r7
   17d98:	b002      	add	sp, #8
   17d9a:	bd80      	pop	{r7, pc}
   17d9c:	20002eb8 	.word	0x20002eb8
   17da0:	20002ebc 	.word	0x20002ebc
   17da4:	000178f5 	.word	0x000178f5
   17da8:	20002e84 	.word	0x20002e84
   17dac:	00019429 	.word	0x00019429

00017db0 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
   17db0:	b580      	push	{r7, lr}
   17db2:	b082      	sub	sp, #8
   17db4:	af00      	add	r7, sp, #0
   17db6:	6078      	str	r0, [r7, #4]
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
   17db8:	4b09      	ldr	r3, [pc, #36]	; (17de0 <usart_write_callback+0x30>)
   17dba:	681b      	ldr	r3, [r3, #0]
   17dbc:	4a09      	ldr	r2, [pc, #36]	; (17de4 <usart_write_callback+0x34>)
   17dbe:	0011      	movs	r1, r2
   17dc0:	0018      	movs	r0, r3
   17dc2:	4b09      	ldr	r3, [pc, #36]	; (17de8 <usart_write_callback+0x38>)
   17dc4:	4798      	blx	r3
   17dc6:	0003      	movs	r3, r0
   17dc8:	3301      	adds	r3, #1
   17dca:	d005      	beq.n	17dd8 <usart_write_callback+0x28>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
   17dcc:	4905      	ldr	r1, [pc, #20]	; (17de4 <usart_write_callback+0x34>)
   17dce:	4b07      	ldr	r3, [pc, #28]	; (17dec <usart_write_callback+0x3c>)
   17dd0:	2201      	movs	r2, #1
   17dd2:	0018      	movs	r0, r3
   17dd4:	4b06      	ldr	r3, [pc, #24]	; (17df0 <usart_write_callback+0x40>)
   17dd6:	4798      	blx	r3
	}
	
}
   17dd8:	46c0      	nop			; (mov r8, r8)
   17dda:	46bd      	mov	sp, r7
   17ddc:	b002      	add	sp, #8
   17dde:	bd80      	pop	{r7, pc}
   17de0:	200032c4 	.word	0x200032c4
   17de4:	200032c0 	.word	0x200032c0
   17de8:	00017929 	.word	0x00017929
   17dec:	20002e84 	.word	0x20002e84
   17df0:	000193e1 	.word	0x000193e1

00017df4 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   17df4:	b580      	push	{r7, lr}
   17df6:	b082      	sub	sp, #8
   17df8:	af00      	add	r7, sp, #0
   17dfa:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   17dfc:	687b      	ldr	r3, [r7, #4]
   17dfe:	2b00      	cmp	r3, #0
   17e00:	d00c      	beq.n	17e1c <delay_cycles+0x28>
		SysTick->LOAD = n;
   17e02:	4b08      	ldr	r3, [pc, #32]	; (17e24 <delay_cycles+0x30>)
   17e04:	687a      	ldr	r2, [r7, #4]
   17e06:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   17e08:	4b06      	ldr	r3, [pc, #24]	; (17e24 <delay_cycles+0x30>)
   17e0a:	2200      	movs	r2, #0
   17e0c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   17e0e:	46c0      	nop			; (mov r8, r8)
   17e10:	4b04      	ldr	r3, [pc, #16]	; (17e24 <delay_cycles+0x30>)
   17e12:	681a      	ldr	r2, [r3, #0]
   17e14:	2380      	movs	r3, #128	; 0x80
   17e16:	025b      	lsls	r3, r3, #9
   17e18:	4013      	ands	r3, r2
   17e1a:	d0f9      	beq.n	17e10 <delay_cycles+0x1c>
		};
	}
}
   17e1c:	46c0      	nop			; (mov r8, r8)
   17e1e:	46bd      	mov	sp, r7
   17e20:	b002      	add	sp, #8
   17e22:	bd80      	pop	{r7, pc}
   17e24:	e000e010 	.word	0xe000e010

00017e28 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   17e28:	b580      	push	{r7, lr}
   17e2a:	b082      	sub	sp, #8
   17e2c:	af00      	add	r7, sp, #0
   17e2e:	6078      	str	r0, [r7, #4]
	while (n--) {
   17e30:	e004      	b.n	17e3c <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   17e32:	4b07      	ldr	r3, [pc, #28]	; (17e50 <delay_cycles_ms+0x28>)
   17e34:	681b      	ldr	r3, [r3, #0]
   17e36:	0018      	movs	r0, r3
   17e38:	4b06      	ldr	r3, [pc, #24]	; (17e54 <delay_cycles_ms+0x2c>)
   17e3a:	4798      	blx	r3
	while (n--) {
   17e3c:	687b      	ldr	r3, [r7, #4]
   17e3e:	1e5a      	subs	r2, r3, #1
   17e40:	607a      	str	r2, [r7, #4]
   17e42:	2b00      	cmp	r3, #0
   17e44:	d1f5      	bne.n	17e32 <delay_cycles_ms+0xa>
	}
}
   17e46:	46c0      	nop			; (mov r8, r8)
   17e48:	46bd      	mov	sp, r7
   17e4a:	b002      	add	sp, #8
   17e4c:	bd80      	pop	{r7, pc}
   17e4e:	46c0      	nop			; (mov r8, r8)
   17e50:	20000024 	.word	0x20000024
   17e54:	00017df5 	.word	0x00017df5

00017e58 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   17e58:	b580      	push	{r7, lr}
   17e5a:	b082      	sub	sp, #8
   17e5c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   17e5e:	4b10      	ldr	r3, [pc, #64]	; (17ea0 <cpu_irq_enter_critical+0x48>)
   17e60:	681b      	ldr	r3, [r3, #0]
   17e62:	2b00      	cmp	r3, #0
   17e64:	d112      	bne.n	17e8c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17e66:	f3ef 8310 	mrs	r3, PRIMASK
   17e6a:	607b      	str	r3, [r7, #4]
  return(result);
   17e6c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   17e6e:	2b00      	cmp	r3, #0
   17e70:	d109      	bne.n	17e86 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   17e72:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   17e74:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   17e78:	4b0a      	ldr	r3, [pc, #40]	; (17ea4 <cpu_irq_enter_critical+0x4c>)
   17e7a:	2200      	movs	r2, #0
   17e7c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   17e7e:	4b0a      	ldr	r3, [pc, #40]	; (17ea8 <cpu_irq_enter_critical+0x50>)
   17e80:	2201      	movs	r2, #1
   17e82:	701a      	strb	r2, [r3, #0]
   17e84:	e002      	b.n	17e8c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   17e86:	4b08      	ldr	r3, [pc, #32]	; (17ea8 <cpu_irq_enter_critical+0x50>)
   17e88:	2200      	movs	r2, #0
   17e8a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   17e8c:	4b04      	ldr	r3, [pc, #16]	; (17ea0 <cpu_irq_enter_critical+0x48>)
   17e8e:	681b      	ldr	r3, [r3, #0]
   17e90:	1c5a      	adds	r2, r3, #1
   17e92:	4b03      	ldr	r3, [pc, #12]	; (17ea0 <cpu_irq_enter_critical+0x48>)
   17e94:	601a      	str	r2, [r3, #0]
}
   17e96:	46c0      	nop			; (mov r8, r8)
   17e98:	46bd      	mov	sp, r7
   17e9a:	b002      	add	sp, #8
   17e9c:	bd80      	pop	{r7, pc}
   17e9e:	46c0      	nop			; (mov r8, r8)
   17ea0:	20002d14 	.word	0x20002d14
   17ea4:	20000028 	.word	0x20000028
   17ea8:	20002d18 	.word	0x20002d18

00017eac <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   17eac:	b580      	push	{r7, lr}
   17eae:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   17eb0:	4b0b      	ldr	r3, [pc, #44]	; (17ee0 <cpu_irq_leave_critical+0x34>)
   17eb2:	681b      	ldr	r3, [r3, #0]
   17eb4:	1e5a      	subs	r2, r3, #1
   17eb6:	4b0a      	ldr	r3, [pc, #40]	; (17ee0 <cpu_irq_leave_critical+0x34>)
   17eb8:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   17eba:	4b09      	ldr	r3, [pc, #36]	; (17ee0 <cpu_irq_leave_critical+0x34>)
   17ebc:	681b      	ldr	r3, [r3, #0]
   17ebe:	2b00      	cmp	r3, #0
   17ec0:	d10a      	bne.n	17ed8 <cpu_irq_leave_critical+0x2c>
   17ec2:	4b08      	ldr	r3, [pc, #32]	; (17ee4 <cpu_irq_leave_critical+0x38>)
   17ec4:	781b      	ldrb	r3, [r3, #0]
   17ec6:	b2db      	uxtb	r3, r3
   17ec8:	2b00      	cmp	r3, #0
   17eca:	d005      	beq.n	17ed8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   17ecc:	4b06      	ldr	r3, [pc, #24]	; (17ee8 <cpu_irq_leave_critical+0x3c>)
   17ece:	2201      	movs	r2, #1
   17ed0:	701a      	strb	r2, [r3, #0]
   17ed2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   17ed6:	b662      	cpsie	i
	}
}
   17ed8:	46c0      	nop			; (mov r8, r8)
   17eda:	46bd      	mov	sp, r7
   17edc:	bd80      	pop	{r7, pc}
   17ede:	46c0      	nop			; (mov r8, r8)
   17ee0:	20002d14 	.word	0x20002d14
   17ee4:	20002d18 	.word	0x20002d18
   17ee8:	20000028 	.word	0x20000028

00017eec <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   17eec:	b580      	push	{r7, lr}
   17eee:	b084      	sub	sp, #16
   17ef0:	af00      	add	r7, sp, #0
   17ef2:	0002      	movs	r2, r0
   17ef4:	1dfb      	adds	r3, r7, #7
   17ef6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   17ef8:	230f      	movs	r3, #15
   17efa:	18fb      	adds	r3, r7, r3
   17efc:	1dfa      	adds	r2, r7, #7
   17efe:	7812      	ldrb	r2, [r2, #0]
   17f00:	09d2      	lsrs	r2, r2, #7
   17f02:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   17f04:	230e      	movs	r3, #14
   17f06:	18fb      	adds	r3, r7, r3
   17f08:	1dfa      	adds	r2, r7, #7
   17f0a:	7812      	ldrb	r2, [r2, #0]
   17f0c:	0952      	lsrs	r2, r2, #5
   17f0e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   17f10:	4b0d      	ldr	r3, [pc, #52]	; (17f48 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   17f12:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   17f14:	230f      	movs	r3, #15
   17f16:	18fb      	adds	r3, r7, r3
   17f18:	781b      	ldrb	r3, [r3, #0]
   17f1a:	2b00      	cmp	r3, #0
   17f1c:	d10f      	bne.n	17f3e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   17f1e:	230f      	movs	r3, #15
   17f20:	18fb      	adds	r3, r7, r3
   17f22:	781b      	ldrb	r3, [r3, #0]
   17f24:	009b      	lsls	r3, r3, #2
   17f26:	2210      	movs	r2, #16
   17f28:	4694      	mov	ip, r2
   17f2a:	44bc      	add	ip, r7
   17f2c:	4463      	add	r3, ip
   17f2e:	3b08      	subs	r3, #8
   17f30:	681a      	ldr	r2, [r3, #0]
   17f32:	230e      	movs	r3, #14
   17f34:	18fb      	adds	r3, r7, r3
   17f36:	781b      	ldrb	r3, [r3, #0]
   17f38:	01db      	lsls	r3, r3, #7
   17f3a:	18d3      	adds	r3, r2, r3
   17f3c:	e000      	b.n	17f40 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   17f3e:	2300      	movs	r3, #0
	}
}
   17f40:	0018      	movs	r0, r3
   17f42:	46bd      	mov	sp, r7
   17f44:	b004      	add	sp, #16
   17f46:	bd80      	pop	{r7, pc}
   17f48:	41004400 	.word	0x41004400

00017f4c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   17f4c:	b580      	push	{r7, lr}
   17f4e:	b082      	sub	sp, #8
   17f50:	af00      	add	r7, sp, #0
   17f52:	0002      	movs	r2, r0
   17f54:	1dfb      	adds	r3, r7, #7
   17f56:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   17f58:	1dfb      	adds	r3, r7, #7
   17f5a:	781b      	ldrb	r3, [r3, #0]
   17f5c:	0018      	movs	r0, r3
   17f5e:	4b03      	ldr	r3, [pc, #12]	; (17f6c <port_get_group_from_gpio_pin+0x20>)
   17f60:	4798      	blx	r3
   17f62:	0003      	movs	r3, r0
}
   17f64:	0018      	movs	r0, r3
   17f66:	46bd      	mov	sp, r7
   17f68:	b002      	add	sp, #8
   17f6a:	bd80      	pop	{r7, pc}
   17f6c:	00017eed 	.word	0x00017eed

00017f70 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   17f70:	b580      	push	{r7, lr}
   17f72:	b082      	sub	sp, #8
   17f74:	af00      	add	r7, sp, #0
   17f76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   17f78:	687b      	ldr	r3, [r7, #4]
   17f7a:	2200      	movs	r2, #0
   17f7c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   17f7e:	687b      	ldr	r3, [r7, #4]
   17f80:	2201      	movs	r2, #1
   17f82:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   17f84:	687b      	ldr	r3, [r7, #4]
   17f86:	2200      	movs	r2, #0
   17f88:	709a      	strb	r2, [r3, #2]
}
   17f8a:	46c0      	nop			; (mov r8, r8)
   17f8c:	46bd      	mov	sp, r7
   17f8e:	b002      	add	sp, #8
   17f90:	bd80      	pop	{r7, pc}
	...

00017f94 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   17f94:	b580      	push	{r7, lr}
   17f96:	b084      	sub	sp, #16
   17f98:	af00      	add	r7, sp, #0
   17f9a:	0002      	movs	r2, r0
   17f9c:	1dfb      	adds	r3, r7, #7
   17f9e:	701a      	strb	r2, [r3, #0]
   17fa0:	1dbb      	adds	r3, r7, #6
   17fa2:	1c0a      	adds	r2, r1, #0
   17fa4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   17fa6:	1dfb      	adds	r3, r7, #7
   17fa8:	781b      	ldrb	r3, [r3, #0]
   17faa:	0018      	movs	r0, r3
   17fac:	4b0d      	ldr	r3, [pc, #52]	; (17fe4 <port_pin_set_output_level+0x50>)
   17fae:	4798      	blx	r3
   17fb0:	0003      	movs	r3, r0
   17fb2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   17fb4:	1dfb      	adds	r3, r7, #7
   17fb6:	781b      	ldrb	r3, [r3, #0]
   17fb8:	221f      	movs	r2, #31
   17fba:	4013      	ands	r3, r2
   17fbc:	2201      	movs	r2, #1
   17fbe:	409a      	lsls	r2, r3
   17fc0:	0013      	movs	r3, r2
   17fc2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   17fc4:	1dbb      	adds	r3, r7, #6
   17fc6:	781b      	ldrb	r3, [r3, #0]
   17fc8:	2b00      	cmp	r3, #0
   17fca:	d003      	beq.n	17fd4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   17fcc:	68fb      	ldr	r3, [r7, #12]
   17fce:	68ba      	ldr	r2, [r7, #8]
   17fd0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   17fd2:	e002      	b.n	17fda <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   17fd4:	68fb      	ldr	r3, [r7, #12]
   17fd6:	68ba      	ldr	r2, [r7, #8]
   17fd8:	615a      	str	r2, [r3, #20]
}
   17fda:	46c0      	nop			; (mov r8, r8)
   17fdc:	46bd      	mov	sp, r7
   17fde:	b004      	add	sp, #16
   17fe0:	bd80      	pop	{r7, pc}
   17fe2:	46c0      	nop			; (mov r8, r8)
   17fe4:	00017f4d 	.word	0x00017f4d

00017fe8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   17fe8:	b580      	push	{r7, lr}
   17fea:	b082      	sub	sp, #8
   17fec:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   17fee:	1d3b      	adds	r3, r7, #4
   17ff0:	0018      	movs	r0, r3
   17ff2:	4b0e      	ldr	r3, [pc, #56]	; (1802c <system_board_init+0x44>)
   17ff4:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   17ff6:	1d3b      	adds	r3, r7, #4
   17ff8:	2201      	movs	r2, #1
   17ffa:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   17ffc:	1d3b      	adds	r3, r7, #4
   17ffe:	0019      	movs	r1, r3
   18000:	2017      	movs	r0, #23
   18002:	4b0b      	ldr	r3, [pc, #44]	; (18030 <system_board_init+0x48>)
   18004:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   18006:	2101      	movs	r1, #1
   18008:	2017      	movs	r0, #23
   1800a:	4b0a      	ldr	r3, [pc, #40]	; (18034 <system_board_init+0x4c>)
   1800c:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1800e:	1d3b      	adds	r3, r7, #4
   18010:	2200      	movs	r2, #0
   18012:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   18014:	1d3b      	adds	r3, r7, #4
   18016:	2201      	movs	r2, #1
   18018:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   1801a:	1d3b      	adds	r3, r7, #4
   1801c:	0019      	movs	r1, r3
   1801e:	2037      	movs	r0, #55	; 0x37
   18020:	4b03      	ldr	r3, [pc, #12]	; (18030 <system_board_init+0x48>)
   18022:	4798      	blx	r3
}
   18024:	46c0      	nop			; (mov r8, r8)
   18026:	46bd      	mov	sp, r7
   18028:	b002      	add	sp, #8
   1802a:	bd80      	pop	{r7, pc}
   1802c:	00017f71 	.word	0x00017f71
   18030:	000183c5 	.word	0x000183c5
   18034:	00017f95 	.word	0x00017f95

00018038 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   18038:	b580      	push	{r7, lr}
   1803a:	b084      	sub	sp, #16
   1803c:	af00      	add	r7, sp, #0
   1803e:	0002      	movs	r2, r0
   18040:	1dfb      	adds	r3, r7, #7
   18042:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   18044:	230f      	movs	r3, #15
   18046:	18fb      	adds	r3, r7, r3
   18048:	1dfa      	adds	r2, r7, #7
   1804a:	7812      	ldrb	r2, [r2, #0]
   1804c:	0952      	lsrs	r2, r2, #5
   1804e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   18050:	230f      	movs	r3, #15
   18052:	18fb      	adds	r3, r7, r3
   18054:	781b      	ldrb	r3, [r3, #0]
   18056:	2b00      	cmp	r3, #0
   18058:	d10c      	bne.n	18074 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1805a:	4b09      	ldr	r3, [pc, #36]	; (18080 <_extint_get_eic_from_channel+0x48>)
   1805c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   1805e:	230f      	movs	r3, #15
   18060:	18fb      	adds	r3, r7, r3
   18062:	781b      	ldrb	r3, [r3, #0]
   18064:	009b      	lsls	r3, r3, #2
   18066:	2210      	movs	r2, #16
   18068:	4694      	mov	ip, r2
   1806a:	44bc      	add	ip, r7
   1806c:	4463      	add	r3, ip
   1806e:	3b08      	subs	r3, #8
   18070:	681b      	ldr	r3, [r3, #0]
   18072:	e000      	b.n	18076 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   18074:	2300      	movs	r3, #0
	}
}
   18076:	0018      	movs	r0, r3
   18078:	46bd      	mov	sp, r7
   1807a:	b004      	add	sp, #16
   1807c:	bd80      	pop	{r7, pc}
   1807e:	46c0      	nop			; (mov r8, r8)
   18080:	40001800 	.word	0x40001800

00018084 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   18084:	b580      	push	{r7, lr}
   18086:	b084      	sub	sp, #16
   18088:	af00      	add	r7, sp, #0
   1808a:	0002      	movs	r2, r0
   1808c:	1dfb      	adds	r3, r7, #7
   1808e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   18090:	1dfb      	adds	r3, r7, #7
   18092:	781b      	ldrb	r3, [r3, #0]
   18094:	0018      	movs	r0, r3
   18096:	4b0b      	ldr	r3, [pc, #44]	; (180c4 <extint_chan_is_detected+0x40>)
   18098:	4798      	blx	r3
   1809a:	0003      	movs	r3, r0
   1809c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   1809e:	1dfb      	adds	r3, r7, #7
   180a0:	781b      	ldrb	r3, [r3, #0]
   180a2:	221f      	movs	r2, #31
   180a4:	4013      	ands	r3, r2
   180a6:	2201      	movs	r2, #1
   180a8:	409a      	lsls	r2, r3
   180aa:	0013      	movs	r3, r2
   180ac:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   180ae:	68fb      	ldr	r3, [r7, #12]
   180b0:	691b      	ldr	r3, [r3, #16]
   180b2:	68ba      	ldr	r2, [r7, #8]
   180b4:	4013      	ands	r3, r2
   180b6:	1e5a      	subs	r2, r3, #1
   180b8:	4193      	sbcs	r3, r2
   180ba:	b2db      	uxtb	r3, r3
}
   180bc:	0018      	movs	r0, r3
   180be:	46bd      	mov	sp, r7
   180c0:	b004      	add	sp, #16
   180c2:	bd80      	pop	{r7, pc}
   180c4:	00018039 	.word	0x00018039

000180c8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   180c8:	b580      	push	{r7, lr}
   180ca:	b084      	sub	sp, #16
   180cc:	af00      	add	r7, sp, #0
   180ce:	0002      	movs	r2, r0
   180d0:	1dfb      	adds	r3, r7, #7
   180d2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   180d4:	1dfb      	adds	r3, r7, #7
   180d6:	781b      	ldrb	r3, [r3, #0]
   180d8:	0018      	movs	r0, r3
   180da:	4b09      	ldr	r3, [pc, #36]	; (18100 <extint_chan_clear_detected+0x38>)
   180dc:	4798      	blx	r3
   180de:	0003      	movs	r3, r0
   180e0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   180e2:	1dfb      	adds	r3, r7, #7
   180e4:	781b      	ldrb	r3, [r3, #0]
   180e6:	221f      	movs	r2, #31
   180e8:	4013      	ands	r3, r2
   180ea:	2201      	movs	r2, #1
   180ec:	409a      	lsls	r2, r3
   180ee:	0013      	movs	r3, r2
   180f0:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   180f2:	68fb      	ldr	r3, [r7, #12]
   180f4:	68ba      	ldr	r2, [r7, #8]
   180f6:	611a      	str	r2, [r3, #16]
}
   180f8:	46c0      	nop			; (mov r8, r8)
   180fa:	46bd      	mov	sp, r7
   180fc:	b004      	add	sp, #16
   180fe:	bd80      	pop	{r7, pc}
   18100:	00018039 	.word	0x00018039

00018104 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   18104:	b580      	push	{r7, lr}
   18106:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   18108:	4b15      	ldr	r3, [pc, #84]	; (18160 <EIC_Handler+0x5c>)
   1810a:	2200      	movs	r2, #0
   1810c:	701a      	strb	r2, [r3, #0]
   1810e:	e020      	b.n	18152 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   18110:	4b13      	ldr	r3, [pc, #76]	; (18160 <EIC_Handler+0x5c>)
   18112:	781b      	ldrb	r3, [r3, #0]
   18114:	0018      	movs	r0, r3
   18116:	4b13      	ldr	r3, [pc, #76]	; (18164 <EIC_Handler+0x60>)
   18118:	4798      	blx	r3
   1811a:	1e03      	subs	r3, r0, #0
   1811c:	d013      	beq.n	18146 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   1811e:	4b10      	ldr	r3, [pc, #64]	; (18160 <EIC_Handler+0x5c>)
   18120:	781b      	ldrb	r3, [r3, #0]
   18122:	0018      	movs	r0, r3
   18124:	4b10      	ldr	r3, [pc, #64]	; (18168 <EIC_Handler+0x64>)
   18126:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   18128:	4b0d      	ldr	r3, [pc, #52]	; (18160 <EIC_Handler+0x5c>)
   1812a:	781b      	ldrb	r3, [r3, #0]
   1812c:	001a      	movs	r2, r3
   1812e:	4b0f      	ldr	r3, [pc, #60]	; (1816c <EIC_Handler+0x68>)
   18130:	0092      	lsls	r2, r2, #2
   18132:	58d3      	ldr	r3, [r2, r3]
   18134:	2b00      	cmp	r3, #0
   18136:	d006      	beq.n	18146 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   18138:	4b09      	ldr	r3, [pc, #36]	; (18160 <EIC_Handler+0x5c>)
   1813a:	781b      	ldrb	r3, [r3, #0]
   1813c:	001a      	movs	r2, r3
   1813e:	4b0b      	ldr	r3, [pc, #44]	; (1816c <EIC_Handler+0x68>)
   18140:	0092      	lsls	r2, r2, #2
   18142:	58d3      	ldr	r3, [r2, r3]
   18144:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   18146:	4b06      	ldr	r3, [pc, #24]	; (18160 <EIC_Handler+0x5c>)
   18148:	781b      	ldrb	r3, [r3, #0]
   1814a:	3301      	adds	r3, #1
   1814c:	b2da      	uxtb	r2, r3
   1814e:	4b04      	ldr	r3, [pc, #16]	; (18160 <EIC_Handler+0x5c>)
   18150:	701a      	strb	r2, [r3, #0]
   18152:	4b03      	ldr	r3, [pc, #12]	; (18160 <EIC_Handler+0x5c>)
   18154:	781b      	ldrb	r3, [r3, #0]
   18156:	2b0f      	cmp	r3, #15
   18158:	d9da      	bls.n	18110 <EIC_Handler+0xc>
			}
		}
	}
}
   1815a:	46c0      	nop			; (mov r8, r8)
   1815c:	46bd      	mov	sp, r7
   1815e:	bd80      	pop	{r7, pc}
   18160:	200032c8 	.word	0x200032c8
   18164:	00018085 	.word	0x00018085
   18168:	000180c9 	.word	0x000180c9
   1816c:	200032cc 	.word	0x200032cc

00018170 <system_gclk_chan_get_config_defaults>:
{
   18170:	b580      	push	{r7, lr}
   18172:	b082      	sub	sp, #8
   18174:	af00      	add	r7, sp, #0
   18176:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   18178:	687b      	ldr	r3, [r7, #4]
   1817a:	2200      	movs	r2, #0
   1817c:	701a      	strb	r2, [r3, #0]
}
   1817e:	46c0      	nop			; (mov r8, r8)
   18180:	46bd      	mov	sp, r7
   18182:	b002      	add	sp, #8
   18184:	bd80      	pop	{r7, pc}
	...

00018188 <system_apb_clock_set_mask>:
{
   18188:	b580      	push	{r7, lr}
   1818a:	b082      	sub	sp, #8
   1818c:	af00      	add	r7, sp, #0
   1818e:	0002      	movs	r2, r0
   18190:	6039      	str	r1, [r7, #0]
   18192:	1dfb      	adds	r3, r7, #7
   18194:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   18196:	1dfb      	adds	r3, r7, #7
   18198:	781b      	ldrb	r3, [r3, #0]
   1819a:	2b01      	cmp	r3, #1
   1819c:	d00a      	beq.n	181b4 <system_apb_clock_set_mask+0x2c>
   1819e:	2b02      	cmp	r3, #2
   181a0:	d00f      	beq.n	181c2 <system_apb_clock_set_mask+0x3a>
   181a2:	2b00      	cmp	r3, #0
   181a4:	d114      	bne.n	181d0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   181a6:	4b0e      	ldr	r3, [pc, #56]	; (181e0 <system_apb_clock_set_mask+0x58>)
   181a8:	4a0d      	ldr	r2, [pc, #52]	; (181e0 <system_apb_clock_set_mask+0x58>)
   181aa:	6991      	ldr	r1, [r2, #24]
   181ac:	683a      	ldr	r2, [r7, #0]
   181ae:	430a      	orrs	r2, r1
   181b0:	619a      	str	r2, [r3, #24]
			break;
   181b2:	e00f      	b.n	181d4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   181b4:	4b0a      	ldr	r3, [pc, #40]	; (181e0 <system_apb_clock_set_mask+0x58>)
   181b6:	4a0a      	ldr	r2, [pc, #40]	; (181e0 <system_apb_clock_set_mask+0x58>)
   181b8:	69d1      	ldr	r1, [r2, #28]
   181ba:	683a      	ldr	r2, [r7, #0]
   181bc:	430a      	orrs	r2, r1
   181be:	61da      	str	r2, [r3, #28]
			break;
   181c0:	e008      	b.n	181d4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   181c2:	4b07      	ldr	r3, [pc, #28]	; (181e0 <system_apb_clock_set_mask+0x58>)
   181c4:	4a06      	ldr	r2, [pc, #24]	; (181e0 <system_apb_clock_set_mask+0x58>)
   181c6:	6a11      	ldr	r1, [r2, #32]
   181c8:	683a      	ldr	r2, [r7, #0]
   181ca:	430a      	orrs	r2, r1
   181cc:	621a      	str	r2, [r3, #32]
			break;
   181ce:	e001      	b.n	181d4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   181d0:	2317      	movs	r3, #23
   181d2:	e000      	b.n	181d6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   181d4:	2300      	movs	r3, #0
}
   181d6:	0018      	movs	r0, r3
   181d8:	46bd      	mov	sp, r7
   181da:	b002      	add	sp, #8
   181dc:	bd80      	pop	{r7, pc}
   181de:	46c0      	nop			; (mov r8, r8)
   181e0:	40000400 	.word	0x40000400

000181e4 <system_interrupt_enable>:
{
   181e4:	b580      	push	{r7, lr}
   181e6:	b082      	sub	sp, #8
   181e8:	af00      	add	r7, sp, #0
   181ea:	0002      	movs	r2, r0
   181ec:	1dfb      	adds	r3, r7, #7
   181ee:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   181f0:	4b06      	ldr	r3, [pc, #24]	; (1820c <system_interrupt_enable+0x28>)
   181f2:	1dfa      	adds	r2, r7, #7
   181f4:	7812      	ldrb	r2, [r2, #0]
   181f6:	0011      	movs	r1, r2
   181f8:	221f      	movs	r2, #31
   181fa:	400a      	ands	r2, r1
   181fc:	2101      	movs	r1, #1
   181fe:	4091      	lsls	r1, r2
   18200:	000a      	movs	r2, r1
   18202:	601a      	str	r2, [r3, #0]
}
   18204:	46c0      	nop			; (mov r8, r8)
   18206:	46bd      	mov	sp, r7
   18208:	b002      	add	sp, #8
   1820a:	bd80      	pop	{r7, pc}
   1820c:	e000e100 	.word	0xe000e100

00018210 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   18210:	b580      	push	{r7, lr}
   18212:	b082      	sub	sp, #8
   18214:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   18216:	4b0f      	ldr	r3, [pc, #60]	; (18254 <extint_is_syncing+0x44>)
   18218:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1821a:	2300      	movs	r3, #0
   1821c:	607b      	str	r3, [r7, #4]
   1821e:	e011      	b.n	18244 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   18220:	687b      	ldr	r3, [r7, #4]
   18222:	009b      	lsls	r3, r3, #2
   18224:	2208      	movs	r2, #8
   18226:	4694      	mov	ip, r2
   18228:	44bc      	add	ip, r7
   1822a:	4463      	add	r3, ip
   1822c:	3b08      	subs	r3, #8
   1822e:	681b      	ldr	r3, [r3, #0]
   18230:	785b      	ldrb	r3, [r3, #1]
   18232:	b2db      	uxtb	r3, r3
   18234:	b25b      	sxtb	r3, r3
   18236:	2b00      	cmp	r3, #0
   18238:	da01      	bge.n	1823e <extint_is_syncing+0x2e>
			return true;
   1823a:	2301      	movs	r3, #1
   1823c:	e006      	b.n	1824c <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   1823e:	687b      	ldr	r3, [r7, #4]
   18240:	3301      	adds	r3, #1
   18242:	607b      	str	r3, [r7, #4]
   18244:	687b      	ldr	r3, [r7, #4]
   18246:	2b00      	cmp	r3, #0
   18248:	d0ea      	beq.n	18220 <extint_is_syncing+0x10>
		}
	}
	return false;
   1824a:	2300      	movs	r3, #0
}
   1824c:	0018      	movs	r0, r3
   1824e:	46bd      	mov	sp, r7
   18250:	b002      	add	sp, #8
   18252:	bd80      	pop	{r7, pc}
   18254:	40001800 	.word	0x40001800

00018258 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   18258:	b580      	push	{r7, lr}
   1825a:	b084      	sub	sp, #16
   1825c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1825e:	4b2d      	ldr	r3, [pc, #180]	; (18314 <_system_extint_init+0xbc>)
   18260:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   18262:	2140      	movs	r1, #64	; 0x40
   18264:	2000      	movs	r0, #0
   18266:	4b2c      	ldr	r3, [pc, #176]	; (18318 <_system_extint_init+0xc0>)
   18268:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1826a:	003b      	movs	r3, r7
   1826c:	0018      	movs	r0, r3
   1826e:	4b2b      	ldr	r3, [pc, #172]	; (1831c <_system_extint_init+0xc4>)
   18270:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   18272:	003b      	movs	r3, r7
   18274:	2200      	movs	r2, #0
   18276:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   18278:	003b      	movs	r3, r7
   1827a:	0019      	movs	r1, r3
   1827c:	2005      	movs	r0, #5
   1827e:	4b28      	ldr	r3, [pc, #160]	; (18320 <_system_extint_init+0xc8>)
   18280:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   18282:	2005      	movs	r0, #5
   18284:	4b27      	ldr	r3, [pc, #156]	; (18324 <_system_extint_init+0xcc>)
   18286:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   18288:	2300      	movs	r3, #0
   1828a:	60fb      	str	r3, [r7, #12]
   1828c:	e018      	b.n	182c0 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   1828e:	68fb      	ldr	r3, [r7, #12]
   18290:	009b      	lsls	r3, r3, #2
   18292:	2210      	movs	r2, #16
   18294:	4694      	mov	ip, r2
   18296:	44bc      	add	ip, r7
   18298:	4463      	add	r3, ip
   1829a:	3b0c      	subs	r3, #12
   1829c:	681a      	ldr	r2, [r3, #0]
   1829e:	68fb      	ldr	r3, [r7, #12]
   182a0:	009b      	lsls	r3, r3, #2
   182a2:	2110      	movs	r1, #16
   182a4:	468c      	mov	ip, r1
   182a6:	44bc      	add	ip, r7
   182a8:	4463      	add	r3, ip
   182aa:	3b0c      	subs	r3, #12
   182ac:	681b      	ldr	r3, [r3, #0]
   182ae:	781b      	ldrb	r3, [r3, #0]
   182b0:	b2db      	uxtb	r3, r3
   182b2:	2101      	movs	r1, #1
   182b4:	430b      	orrs	r3, r1
   182b6:	b2db      	uxtb	r3, r3
   182b8:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   182ba:	68fb      	ldr	r3, [r7, #12]
   182bc:	3301      	adds	r3, #1
   182be:	60fb      	str	r3, [r7, #12]
   182c0:	68fb      	ldr	r3, [r7, #12]
   182c2:	2b00      	cmp	r3, #0
   182c4:	d0e3      	beq.n	1828e <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   182c6:	46c0      	nop			; (mov r8, r8)
   182c8:	4b17      	ldr	r3, [pc, #92]	; (18328 <_system_extint_init+0xd0>)
   182ca:	4798      	blx	r3
   182cc:	1e03      	subs	r3, r0, #0
   182ce:	d1fb      	bne.n	182c8 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   182d0:	230b      	movs	r3, #11
   182d2:	18fb      	adds	r3, r7, r3
   182d4:	2200      	movs	r2, #0
   182d6:	701a      	strb	r2, [r3, #0]
   182d8:	e00d      	b.n	182f6 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   182da:	230b      	movs	r3, #11
   182dc:	18fb      	adds	r3, r7, r3
   182de:	781a      	ldrb	r2, [r3, #0]
   182e0:	4b12      	ldr	r3, [pc, #72]	; (1832c <_system_extint_init+0xd4>)
   182e2:	0092      	lsls	r2, r2, #2
   182e4:	2100      	movs	r1, #0
   182e6:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   182e8:	230b      	movs	r3, #11
   182ea:	18fb      	adds	r3, r7, r3
   182ec:	781a      	ldrb	r2, [r3, #0]
   182ee:	230b      	movs	r3, #11
   182f0:	18fb      	adds	r3, r7, r3
   182f2:	3201      	adds	r2, #1
   182f4:	701a      	strb	r2, [r3, #0]
   182f6:	230b      	movs	r3, #11
   182f8:	18fb      	adds	r3, r7, r3
   182fa:	781b      	ldrb	r3, [r3, #0]
   182fc:	2b0f      	cmp	r3, #15
   182fe:	d9ec      	bls.n	182da <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   18300:	2004      	movs	r0, #4
   18302:	4b0b      	ldr	r3, [pc, #44]	; (18330 <_system_extint_init+0xd8>)
   18304:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   18306:	4b0b      	ldr	r3, [pc, #44]	; (18334 <_system_extint_init+0xdc>)
   18308:	4798      	blx	r3
}
   1830a:	46c0      	nop			; (mov r8, r8)
   1830c:	46bd      	mov	sp, r7
   1830e:	b004      	add	sp, #16
   18310:	bd80      	pop	{r7, pc}
   18312:	46c0      	nop			; (mov r8, r8)
   18314:	40001800 	.word	0x40001800
   18318:	00018189 	.word	0x00018189
   1831c:	00018171 	.word	0x00018171
   18320:	0001a305 	.word	0x0001a305
   18324:	0001a349 	.word	0x0001a349
   18328:	00018211 	.word	0x00018211
   1832c:	200032cc 	.word	0x200032cc
   18330:	000181e5 	.word	0x000181e5
   18334:	00018339 	.word	0x00018339

00018338 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   18338:	b580      	push	{r7, lr}
   1833a:	b082      	sub	sp, #8
   1833c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   1833e:	4b15      	ldr	r3, [pc, #84]	; (18394 <_extint_enable+0x5c>)
   18340:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   18342:	2300      	movs	r3, #0
   18344:	607b      	str	r3, [r7, #4]
   18346:	e018      	b.n	1837a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   18348:	687b      	ldr	r3, [r7, #4]
   1834a:	009b      	lsls	r3, r3, #2
   1834c:	2208      	movs	r2, #8
   1834e:	4694      	mov	ip, r2
   18350:	44bc      	add	ip, r7
   18352:	4463      	add	r3, ip
   18354:	3b08      	subs	r3, #8
   18356:	681a      	ldr	r2, [r3, #0]
   18358:	687b      	ldr	r3, [r7, #4]
   1835a:	009b      	lsls	r3, r3, #2
   1835c:	2108      	movs	r1, #8
   1835e:	468c      	mov	ip, r1
   18360:	44bc      	add	ip, r7
   18362:	4463      	add	r3, ip
   18364:	3b08      	subs	r3, #8
   18366:	681b      	ldr	r3, [r3, #0]
   18368:	781b      	ldrb	r3, [r3, #0]
   1836a:	b2db      	uxtb	r3, r3
   1836c:	2102      	movs	r1, #2
   1836e:	430b      	orrs	r3, r1
   18370:	b2db      	uxtb	r3, r3
   18372:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   18374:	687b      	ldr	r3, [r7, #4]
   18376:	3301      	adds	r3, #1
   18378:	607b      	str	r3, [r7, #4]
   1837a:	687b      	ldr	r3, [r7, #4]
   1837c:	2b00      	cmp	r3, #0
   1837e:	d0e3      	beq.n	18348 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   18380:	46c0      	nop			; (mov r8, r8)
   18382:	4b05      	ldr	r3, [pc, #20]	; (18398 <_extint_enable+0x60>)
   18384:	4798      	blx	r3
   18386:	1e03      	subs	r3, r0, #0
   18388:	d1fb      	bne.n	18382 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   1838a:	46c0      	nop			; (mov r8, r8)
   1838c:	46bd      	mov	sp, r7
   1838e:	b002      	add	sp, #8
   18390:	bd80      	pop	{r7, pc}
   18392:	46c0      	nop			; (mov r8, r8)
   18394:	40001800 	.word	0x40001800
   18398:	00018211 	.word	0x00018211

0001839c <system_pinmux_get_config_defaults>:
{
   1839c:	b580      	push	{r7, lr}
   1839e:	b082      	sub	sp, #8
   183a0:	af00      	add	r7, sp, #0
   183a2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   183a4:	687b      	ldr	r3, [r7, #4]
   183a6:	2280      	movs	r2, #128	; 0x80
   183a8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   183aa:	687b      	ldr	r3, [r7, #4]
   183ac:	2200      	movs	r2, #0
   183ae:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   183b0:	687b      	ldr	r3, [r7, #4]
   183b2:	2201      	movs	r2, #1
   183b4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   183b6:	687b      	ldr	r3, [r7, #4]
   183b8:	2200      	movs	r2, #0
   183ba:	70da      	strb	r2, [r3, #3]
}
   183bc:	46c0      	nop			; (mov r8, r8)
   183be:	46bd      	mov	sp, r7
   183c0:	b002      	add	sp, #8
   183c2:	bd80      	pop	{r7, pc}

000183c4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   183c4:	b580      	push	{r7, lr}
   183c6:	b084      	sub	sp, #16
   183c8:	af00      	add	r7, sp, #0
   183ca:	0002      	movs	r2, r0
   183cc:	6039      	str	r1, [r7, #0]
   183ce:	1dfb      	adds	r3, r7, #7
   183d0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   183d2:	230c      	movs	r3, #12
   183d4:	18fb      	adds	r3, r7, r3
   183d6:	0018      	movs	r0, r3
   183d8:	4b10      	ldr	r3, [pc, #64]	; (1841c <port_pin_set_config+0x58>)
   183da:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   183dc:	230c      	movs	r3, #12
   183de:	18fb      	adds	r3, r7, r3
   183e0:	2280      	movs	r2, #128	; 0x80
   183e2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   183e4:	683b      	ldr	r3, [r7, #0]
   183e6:	781a      	ldrb	r2, [r3, #0]
   183e8:	230c      	movs	r3, #12
   183ea:	18fb      	adds	r3, r7, r3
   183ec:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   183ee:	683b      	ldr	r3, [r7, #0]
   183f0:	785a      	ldrb	r2, [r3, #1]
   183f2:	230c      	movs	r3, #12
   183f4:	18fb      	adds	r3, r7, r3
   183f6:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   183f8:	683b      	ldr	r3, [r7, #0]
   183fa:	789a      	ldrb	r2, [r3, #2]
   183fc:	230c      	movs	r3, #12
   183fe:	18fb      	adds	r3, r7, r3
   18400:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   18402:	230c      	movs	r3, #12
   18404:	18fa      	adds	r2, r7, r3
   18406:	1dfb      	adds	r3, r7, #7
   18408:	781b      	ldrb	r3, [r3, #0]
   1840a:	0011      	movs	r1, r2
   1840c:	0018      	movs	r0, r3
   1840e:	4b04      	ldr	r3, [pc, #16]	; (18420 <port_pin_set_config+0x5c>)
   18410:	4798      	blx	r3
}
   18412:	46c0      	nop			; (mov r8, r8)
   18414:	46bd      	mov	sp, r7
   18416:	b004      	add	sp, #16
   18418:	bd80      	pop	{r7, pc}
   1841a:	46c0      	nop			; (mov r8, r8)
   1841c:	0001839d 	.word	0x0001839d
   18420:	0001a665 	.word	0x0001a665

00018424 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   18424:	b580      	push	{r7, lr}
   18426:	b086      	sub	sp, #24
   18428:	af00      	add	r7, sp, #0
   1842a:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   1842c:	4b28      	ldr	r3, [pc, #160]	; (184d0 <_rtc_interrupt_handler+0xac>)
   1842e:	687a      	ldr	r2, [r7, #4]
   18430:	0092      	lsls	r2, r2, #2
   18432:	58d3      	ldr	r3, [r2, r3]
   18434:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   18436:	697b      	ldr	r3, [r7, #20]
   18438:	681b      	ldr	r3, [r3, #0]
   1843a:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   1843c:	230e      	movs	r3, #14
   1843e:	18fb      	adds	r3, r7, r3
   18440:	697a      	ldr	r2, [r7, #20]
   18442:	8a52      	ldrh	r2, [r2, #18]
   18444:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   18446:	697b      	ldr	r3, [r7, #20]
   18448:	8a1b      	ldrh	r3, [r3, #16]
   1844a:	b29a      	uxth	r2, r3
   1844c:	230e      	movs	r3, #14
   1844e:	18fb      	adds	r3, r7, r3
   18450:	210e      	movs	r1, #14
   18452:	1879      	adds	r1, r7, r1
   18454:	8809      	ldrh	r1, [r1, #0]
   18456:	400a      	ands	r2, r1
   18458:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   1845a:	693b      	ldr	r3, [r7, #16]
   1845c:	7a1b      	ldrb	r3, [r3, #8]
   1845e:	b2da      	uxtb	r2, r3
   18460:	230c      	movs	r3, #12
   18462:	18fb      	adds	r3, r7, r3
   18464:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   18466:	693b      	ldr	r3, [r7, #16]
   18468:	79db      	ldrb	r3, [r3, #7]
   1846a:	b2db      	uxtb	r3, r3
   1846c:	b29a      	uxth	r2, r3
   1846e:	230c      	movs	r3, #12
   18470:	18fb      	adds	r3, r7, r3
   18472:	210c      	movs	r1, #12
   18474:	1879      	adds	r1, r7, r1
   18476:	8809      	ldrh	r1, [r1, #0]
   18478:	400a      	ands	r2, r1
   1847a:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   1847c:	230c      	movs	r3, #12
   1847e:	18fb      	adds	r3, r7, r3
   18480:	881b      	ldrh	r3, [r3, #0]
   18482:	2280      	movs	r2, #128	; 0x80
   18484:	4013      	ands	r3, r2
   18486:	d00c      	beq.n	184a2 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   18488:	230e      	movs	r3, #14
   1848a:	18fb      	adds	r3, r7, r3
   1848c:	881b      	ldrh	r3, [r3, #0]
   1848e:	2202      	movs	r2, #2
   18490:	4013      	ands	r3, r2
   18492:	d002      	beq.n	1849a <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   18494:	697b      	ldr	r3, [r7, #20]
   18496:	68db      	ldr	r3, [r3, #12]
   18498:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   1849a:	693b      	ldr	r3, [r7, #16]
   1849c:	2280      	movs	r2, #128	; 0x80
   1849e:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   184a0:	e011      	b.n	184c6 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   184a2:	230c      	movs	r3, #12
   184a4:	18fb      	adds	r3, r7, r3
   184a6:	881b      	ldrh	r3, [r3, #0]
   184a8:	2201      	movs	r2, #1
   184aa:	4013      	ands	r3, r2
   184ac:	d00b      	beq.n	184c6 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   184ae:	230e      	movs	r3, #14
   184b0:	18fb      	adds	r3, r7, r3
   184b2:	881b      	ldrh	r3, [r3, #0]
   184b4:	2201      	movs	r2, #1
   184b6:	4013      	ands	r3, r2
   184b8:	d002      	beq.n	184c0 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   184ba:	697b      	ldr	r3, [r7, #20]
   184bc:	689b      	ldr	r3, [r3, #8]
   184be:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   184c0:	693b      	ldr	r3, [r7, #16]
   184c2:	2201      	movs	r2, #1
   184c4:	721a      	strb	r2, [r3, #8]
}
   184c6:	46c0      	nop			; (mov r8, r8)
   184c8:	46bd      	mov	sp, r7
   184ca:	b006      	add	sp, #24
   184cc:	bd80      	pop	{r7, pc}
   184ce:	46c0      	nop			; (mov r8, r8)
   184d0:	2000330c 	.word	0x2000330c

000184d4 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   184d4:	b580      	push	{r7, lr}
   184d6:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   184d8:	2000      	movs	r0, #0
   184da:	4b02      	ldr	r3, [pc, #8]	; (184e4 <RTC_Handler+0x10>)
   184dc:	4798      	blx	r3
}
   184de:	46c0      	nop			; (mov r8, r8)
   184e0:	46bd      	mov	sp, r7
   184e2:	bd80      	pop	{r7, pc}
   184e4:	00018425 	.word	0x00018425

000184e8 <system_gclk_chan_get_config_defaults>:
{
   184e8:	b580      	push	{r7, lr}
   184ea:	b082      	sub	sp, #8
   184ec:	af00      	add	r7, sp, #0
   184ee:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   184f0:	687b      	ldr	r3, [r7, #4]
   184f2:	2200      	movs	r2, #0
   184f4:	701a      	strb	r2, [r3, #0]
}
   184f6:	46c0      	nop			; (mov r8, r8)
   184f8:	46bd      	mov	sp, r7
   184fa:	b002      	add	sp, #8
   184fc:	bd80      	pop	{r7, pc}

000184fe <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   184fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   18500:	b08d      	sub	sp, #52	; 0x34
   18502:	af00      	add	r7, sp, #0
   18504:	60b8      	str	r0, [r7, #8]
   18506:	60f9      	str	r1, [r7, #12]
   18508:	603a      	str	r2, [r7, #0]
   1850a:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   1850c:	2300      	movs	r3, #0
   1850e:	2400      	movs	r4, #0
   18510:	623b      	str	r3, [r7, #32]
   18512:	627c      	str	r4, [r7, #36]	; 0x24
   18514:	2300      	movs	r3, #0
   18516:	2400      	movs	r4, #0
   18518:	61bb      	str	r3, [r7, #24]
   1851a:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   1851c:	233f      	movs	r3, #63	; 0x3f
   1851e:	62fb      	str	r3, [r7, #44]	; 0x2c
   18520:	e053      	b.n	185ca <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   18522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18524:	3b20      	subs	r3, #32
   18526:	2b00      	cmp	r3, #0
   18528:	db04      	blt.n	18534 <long_division+0x36>
   1852a:	2201      	movs	r2, #1
   1852c:	409a      	lsls	r2, r3
   1852e:	0013      	movs	r3, r2
   18530:	617b      	str	r3, [r7, #20]
   18532:	e00b      	b.n	1854c <long_division+0x4e>
   18534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18536:	2220      	movs	r2, #32
   18538:	1ad3      	subs	r3, r2, r3
   1853a:	2201      	movs	r2, #1
   1853c:	40da      	lsrs	r2, r3
   1853e:	0013      	movs	r3, r2
   18540:	2100      	movs	r1, #0
   18542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   18544:	4091      	lsls	r1, r2
   18546:	000a      	movs	r2, r1
   18548:	4313      	orrs	r3, r2
   1854a:	617b      	str	r3, [r7, #20]
   1854c:	2201      	movs	r2, #1
   1854e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18550:	409a      	lsls	r2, r3
   18552:	0013      	movs	r3, r2
   18554:	613b      	str	r3, [r7, #16]

		r = r << 1;
   18556:	69bb      	ldr	r3, [r7, #24]
   18558:	69fc      	ldr	r4, [r7, #28]
   1855a:	18db      	adds	r3, r3, r3
   1855c:	4164      	adcs	r4, r4
   1855e:	61bb      	str	r3, [r7, #24]
   18560:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   18562:	68bb      	ldr	r3, [r7, #8]
   18564:	693a      	ldr	r2, [r7, #16]
   18566:	401a      	ands	r2, r3
   18568:	0015      	movs	r5, r2
   1856a:	68fb      	ldr	r3, [r7, #12]
   1856c:	697a      	ldr	r2, [r7, #20]
   1856e:	401a      	ands	r2, r3
   18570:	0016      	movs	r6, r2
   18572:	002b      	movs	r3, r5
   18574:	4333      	orrs	r3, r6
   18576:	d007      	beq.n	18588 <long_division+0x8a>
			r |= 0x01;
   18578:	69bb      	ldr	r3, [r7, #24]
   1857a:	2201      	movs	r2, #1
   1857c:	4313      	orrs	r3, r2
   1857e:	61bb      	str	r3, [r7, #24]
   18580:	69fb      	ldr	r3, [r7, #28]
   18582:	2200      	movs	r2, #0
   18584:	4313      	orrs	r3, r2
   18586:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   18588:	687a      	ldr	r2, [r7, #4]
   1858a:	69fb      	ldr	r3, [r7, #28]
   1858c:	429a      	cmp	r2, r3
   1858e:	d819      	bhi.n	185c4 <long_division+0xc6>
   18590:	687a      	ldr	r2, [r7, #4]
   18592:	69fb      	ldr	r3, [r7, #28]
   18594:	429a      	cmp	r2, r3
   18596:	d103      	bne.n	185a0 <long_division+0xa2>
   18598:	683a      	ldr	r2, [r7, #0]
   1859a:	69bb      	ldr	r3, [r7, #24]
   1859c:	429a      	cmp	r2, r3
   1859e:	d811      	bhi.n	185c4 <long_division+0xc6>
			r = r - d;
   185a0:	69b9      	ldr	r1, [r7, #24]
   185a2:	69fa      	ldr	r2, [r7, #28]
   185a4:	683b      	ldr	r3, [r7, #0]
   185a6:	687c      	ldr	r4, [r7, #4]
   185a8:	1ac9      	subs	r1, r1, r3
   185aa:	41a2      	sbcs	r2, r4
   185ac:	000b      	movs	r3, r1
   185ae:	0014      	movs	r4, r2
   185b0:	61bb      	str	r3, [r7, #24]
   185b2:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   185b4:	6a3a      	ldr	r2, [r7, #32]
   185b6:	693b      	ldr	r3, [r7, #16]
   185b8:	4313      	orrs	r3, r2
   185ba:	623b      	str	r3, [r7, #32]
   185bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   185be:	697b      	ldr	r3, [r7, #20]
   185c0:	4313      	orrs	r3, r2
   185c2:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   185c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   185c6:	3b01      	subs	r3, #1
   185c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   185ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   185cc:	2b00      	cmp	r3, #0
   185ce:	daa8      	bge.n	18522 <long_division+0x24>
		}
	}

	return q;
   185d0:	6a3b      	ldr	r3, [r7, #32]
   185d2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   185d4:	0018      	movs	r0, r3
   185d6:	0021      	movs	r1, r4
   185d8:	46bd      	mov	sp, r7
   185da:	b00d      	add	sp, #52	; 0x34
   185dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000185de <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   185de:	b580      	push	{r7, lr}
   185e0:	b086      	sub	sp, #24
   185e2:	af00      	add	r7, sp, #0
   185e4:	60f8      	str	r0, [r7, #12]
   185e6:	60b9      	str	r1, [r7, #8]
   185e8:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   185ea:	2316      	movs	r3, #22
   185ec:	18fb      	adds	r3, r7, r3
   185ee:	2200      	movs	r2, #0
   185f0:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   185f2:	68bb      	ldr	r3, [r7, #8]
   185f4:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   185f6:	68bb      	ldr	r3, [r7, #8]
   185f8:	085a      	lsrs	r2, r3, #1
   185fa:	68fb      	ldr	r3, [r7, #12]
   185fc:	429a      	cmp	r2, r3
   185fe:	d201      	bcs.n	18604 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   18600:	2340      	movs	r3, #64	; 0x40
   18602:	e026      	b.n	18652 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   18604:	68bb      	ldr	r3, [r7, #8]
   18606:	085b      	lsrs	r3, r3, #1
   18608:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   1860a:	e00a      	b.n	18622 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   1860c:	693a      	ldr	r2, [r7, #16]
   1860e:	68fb      	ldr	r3, [r7, #12]
   18610:	1ad3      	subs	r3, r2, r3
   18612:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   18614:	2316      	movs	r3, #22
   18616:	18fb      	adds	r3, r7, r3
   18618:	881a      	ldrh	r2, [r3, #0]
   1861a:	2316      	movs	r3, #22
   1861c:	18fb      	adds	r3, r7, r3
   1861e:	3201      	adds	r2, #1
   18620:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   18622:	693a      	ldr	r2, [r7, #16]
   18624:	68fb      	ldr	r3, [r7, #12]
   18626:	429a      	cmp	r2, r3
   18628:	d2f0      	bcs.n	1860c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   1862a:	2316      	movs	r3, #22
   1862c:	18fb      	adds	r3, r7, r3
   1862e:	2216      	movs	r2, #22
   18630:	18ba      	adds	r2, r7, r2
   18632:	8812      	ldrh	r2, [r2, #0]
   18634:	3a01      	subs	r2, #1
   18636:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   18638:	2316      	movs	r3, #22
   1863a:	18fb      	adds	r3, r7, r3
   1863c:	881b      	ldrh	r3, [r3, #0]
   1863e:	2bff      	cmp	r3, #255	; 0xff
   18640:	d901      	bls.n	18646 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   18642:	2340      	movs	r3, #64	; 0x40
   18644:	e005      	b.n	18652 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   18646:	687b      	ldr	r3, [r7, #4]
   18648:	2216      	movs	r2, #22
   1864a:	18ba      	adds	r2, r7, r2
   1864c:	8812      	ldrh	r2, [r2, #0]
   1864e:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   18650:	2300      	movs	r3, #0
	}
}
   18652:	0018      	movs	r0, r3
   18654:	46bd      	mov	sp, r7
   18656:	b006      	add	sp, #24
   18658:	bd80      	pop	{r7, pc}
	...

0001865c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   1865c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1865e:	b0a1      	sub	sp, #132	; 0x84
   18660:	af00      	add	r7, sp, #0
   18662:	64f8      	str	r0, [r7, #76]	; 0x4c
   18664:	64b9      	str	r1, [r7, #72]	; 0x48
   18666:	647a      	str	r2, [r7, #68]	; 0x44
   18668:	2243      	movs	r2, #67	; 0x43
   1866a:	18ba      	adds	r2, r7, r2
   1866c:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   1866e:	2300      	movs	r3, #0
   18670:	2400      	movs	r4, #0
   18672:	673b      	str	r3, [r7, #112]	; 0x70
   18674:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   18676:	2300      	movs	r3, #0
   18678:	2400      	movs	r4, #0
   1867a:	66bb      	str	r3, [r7, #104]	; 0x68
   1867c:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   1867e:	2300      	movs	r3, #0
   18680:	2400      	movs	r4, #0
   18682:	67bb      	str	r3, [r7, #120]	; 0x78
   18684:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   18686:	2300      	movs	r3, #0
   18688:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1868a:	2358      	movs	r3, #88	; 0x58
   1868c:	2240      	movs	r2, #64	; 0x40
   1868e:	4694      	mov	ip, r2
   18690:	44bc      	add	ip, r7
   18692:	4463      	add	r3, ip
   18694:	781a      	ldrb	r2, [r3, #0]
   18696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18698:	435a      	muls	r2, r3
   1869a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1869c:	429a      	cmp	r2, r3
   1869e:	d901      	bls.n	186a4 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   186a0:	2340      	movs	r3, #64	; 0x40
   186a2:	e0b3      	b.n	1880c <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   186a4:	2343      	movs	r3, #67	; 0x43
   186a6:	18fb      	adds	r3, r7, r3
   186a8:	781b      	ldrb	r3, [r3, #0]
   186aa:	2b00      	cmp	r3, #0
   186ac:	d13d      	bne.n	1872a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   186ae:	2358      	movs	r3, #88	; 0x58
   186b0:	2240      	movs	r2, #64	; 0x40
   186b2:	4694      	mov	ip, r2
   186b4:	44bc      	add	ip, r7
   186b6:	4463      	add	r3, ip
   186b8:	781b      	ldrb	r3, [r3, #0]
   186ba:	b2db      	uxtb	r3, r3
   186bc:	613b      	str	r3, [r7, #16]
   186be:	2300      	movs	r3, #0
   186c0:	617b      	str	r3, [r7, #20]
   186c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   186c4:	60bb      	str	r3, [r7, #8]
   186c6:	2300      	movs	r3, #0
   186c8:	60fb      	str	r3, [r7, #12]
   186ca:	4c52      	ldr	r4, [pc, #328]	; (18814 <_sercom_get_async_baud_val+0x1b8>)
   186cc:	68ba      	ldr	r2, [r7, #8]
   186ce:	68fb      	ldr	r3, [r7, #12]
   186d0:	6938      	ldr	r0, [r7, #16]
   186d2:	6979      	ldr	r1, [r7, #20]
   186d4:	47a0      	blx	r4
   186d6:	0003      	movs	r3, r0
   186d8:	000c      	movs	r4, r1
   186da:	001b      	movs	r3, r3
   186dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   186de:	2300      	movs	r3, #0
   186e0:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   186e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   186e4:	603b      	str	r3, [r7, #0]
   186e6:	2300      	movs	r3, #0
   186e8:	607b      	str	r3, [r7, #4]
   186ea:	6db8      	ldr	r0, [r7, #88]	; 0x58
   186ec:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   186ee:	683a      	ldr	r2, [r7, #0]
   186f0:	687b      	ldr	r3, [r7, #4]
   186f2:	4c49      	ldr	r4, [pc, #292]	; (18818 <_sercom_get_async_baud_val+0x1bc>)
   186f4:	47a0      	blx	r4
   186f6:	0003      	movs	r3, r0
   186f8:	000c      	movs	r4, r1
   186fa:	673b      	str	r3, [r7, #112]	; 0x70
   186fc:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   186fe:	2100      	movs	r1, #0
   18700:	2201      	movs	r2, #1
   18702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   18704:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   18706:	1ac9      	subs	r1, r1, r3
   18708:	41a2      	sbcs	r2, r4
   1870a:	000b      	movs	r3, r1
   1870c:	0014      	movs	r4, r2
   1870e:	66bb      	str	r3, [r7, #104]	; 0x68
   18710:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   18712:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   18714:	0c1b      	lsrs	r3, r3, #16
   18716:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   18718:	0416      	lsls	r6, r2, #16
   1871a:	431e      	orrs	r6, r3
   1871c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1871e:	041d      	lsls	r5, r3, #16
   18720:	0033      	movs	r3, r6
   18722:	67bb      	str	r3, [r7, #120]	; 0x78
   18724:	2300      	movs	r3, #0
   18726:	67fb      	str	r3, [r7, #124]	; 0x7c
   18728:	e06a      	b.n	18800 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1872a:	2343      	movs	r3, #67	; 0x43
   1872c:	18fb      	adds	r3, r7, r3
   1872e:	781b      	ldrb	r3, [r3, #0]
   18730:	2b01      	cmp	r3, #1
   18732:	d165      	bne.n	18800 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   18734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18736:	633b      	str	r3, [r7, #48]	; 0x30
   18738:	2300      	movs	r3, #0
   1873a:	637b      	str	r3, [r7, #52]	; 0x34
   1873c:	2358      	movs	r3, #88	; 0x58
   1873e:	2240      	movs	r2, #64	; 0x40
   18740:	4694      	mov	ip, r2
   18742:	44bc      	add	ip, r7
   18744:	4463      	add	r3, ip
   18746:	781b      	ldrb	r3, [r3, #0]
   18748:	b2db      	uxtb	r3, r3
   1874a:	62bb      	str	r3, [r7, #40]	; 0x28
   1874c:	2300      	movs	r3, #0
   1874e:	62fb      	str	r3, [r7, #44]	; 0x2c
   18750:	4c30      	ldr	r4, [pc, #192]	; (18814 <_sercom_get_async_baud_val+0x1b8>)
   18752:	6aba      	ldr	r2, [r7, #40]	; 0x28
   18754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18756:	6b38      	ldr	r0, [r7, #48]	; 0x30
   18758:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1875a:	47a0      	blx	r4
   1875c:	0003      	movs	r3, r0
   1875e:	000c      	movs	r4, r1
   18760:	65bb      	str	r3, [r7, #88]	; 0x58
   18762:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   18764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18766:	623b      	str	r3, [r7, #32]
   18768:	2300      	movs	r3, #0
   1876a:	627b      	str	r3, [r7, #36]	; 0x24
   1876c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1876e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   18770:	001a      	movs	r2, r3
   18772:	0023      	movs	r3, r4
   18774:	6a38      	ldr	r0, [r7, #32]
   18776:	6a79      	ldr	r1, [r7, #36]	; 0x24
   18778:	4c27      	ldr	r4, [pc, #156]	; (18818 <_sercom_get_async_baud_val+0x1bc>)
   1877a:	47a0      	blx	r4
   1877c:	0003      	movs	r3, r0
   1877e:	000c      	movs	r4, r1
   18780:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   18782:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   18784:	2380      	movs	r3, #128	; 0x80
   18786:	019b      	lsls	r3, r3, #6
   18788:	429a      	cmp	r2, r3
   1878a:	d901      	bls.n	18790 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1878c:	2340      	movs	r3, #64	; 0x40
   1878e:	e03d      	b.n	1880c <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   18790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18792:	61bb      	str	r3, [r7, #24]
   18794:	2300      	movs	r3, #0
   18796:	61fb      	str	r3, [r7, #28]
   18798:	69b9      	ldr	r1, [r7, #24]
   1879a:	69fa      	ldr	r2, [r7, #28]
   1879c:	000b      	movs	r3, r1
   1879e:	0f5b      	lsrs	r3, r3, #29
   187a0:	0010      	movs	r0, r2
   187a2:	00c0      	lsls	r0, r0, #3
   187a4:	63f8      	str	r0, [r7, #60]	; 0x3c
   187a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   187a8:	4318      	orrs	r0, r3
   187aa:	63f8      	str	r0, [r7, #60]	; 0x3c
   187ac:	000b      	movs	r3, r1
   187ae:	00db      	lsls	r3, r3, #3
   187b0:	63bb      	str	r3, [r7, #56]	; 0x38
   187b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   187b4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   187b6:	001a      	movs	r2, r3
   187b8:	0023      	movs	r3, r4
   187ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   187bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   187be:	4c16      	ldr	r4, [pc, #88]	; (18818 <_sercom_get_async_baud_val+0x1bc>)
   187c0:	47a0      	blx	r4
   187c2:	0003      	movs	r3, r0
   187c4:	000c      	movs	r4, r1
   187c6:	65bb      	str	r3, [r7, #88]	; 0x58
   187c8:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   187ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   187cc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   187ce:	b2d9      	uxtb	r1, r3
   187d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   187d2:	b2db      	uxtb	r3, r3
   187d4:	00db      	lsls	r3, r3, #3
   187d6:	b2da      	uxtb	r2, r3
   187d8:	2317      	movs	r3, #23
   187da:	2040      	movs	r0, #64	; 0x40
   187dc:	4684      	mov	ip, r0
   187de:	44bc      	add	ip, r7
   187e0:	4463      	add	r3, ip
   187e2:	1a8a      	subs	r2, r1, r2
   187e4:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   187e6:	2317      	movs	r3, #23
   187e8:	2240      	movs	r2, #64	; 0x40
   187ea:	4694      	mov	ip, r2
   187ec:	44bc      	add	ip, r7
   187ee:	4463      	add	r3, ip
   187f0:	781b      	ldrb	r3, [r3, #0]
   187f2:	035b      	lsls	r3, r3, #13
   187f4:	001a      	movs	r2, r3
   187f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   187f8:	4313      	orrs	r3, r2
   187fa:	67bb      	str	r3, [r7, #120]	; 0x78
   187fc:	2300      	movs	r3, #0
   187fe:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   18800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   18802:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   18804:	b29a      	uxth	r2, r3
   18806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18808:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   1880a:	2300      	movs	r3, #0
}
   1880c:	0018      	movs	r0, r3
   1880e:	46bd      	mov	sp, r7
   18810:	b021      	add	sp, #132	; 0x84
   18812:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18814:	0001ac21 	.word	0x0001ac21
   18818:	000184ff 	.word	0x000184ff

0001881c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   1881c:	b580      	push	{r7, lr}
   1881e:	b084      	sub	sp, #16
   18820:	af00      	add	r7, sp, #0
   18822:	0002      	movs	r2, r0
   18824:	1dfb      	adds	r3, r7, #7
   18826:	701a      	strb	r2, [r3, #0]
   18828:	1dbb      	adds	r3, r7, #6
   1882a:	1c0a      	adds	r2, r1, #0
   1882c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   1882e:	4b1a      	ldr	r3, [pc, #104]	; (18898 <sercom_set_gclk_generator+0x7c>)
   18830:	781b      	ldrb	r3, [r3, #0]
   18832:	2201      	movs	r2, #1
   18834:	4053      	eors	r3, r2
   18836:	b2db      	uxtb	r3, r3
   18838:	2b00      	cmp	r3, #0
   1883a:	d103      	bne.n	18844 <sercom_set_gclk_generator+0x28>
   1883c:	1dbb      	adds	r3, r7, #6
   1883e:	781b      	ldrb	r3, [r3, #0]
   18840:	2b00      	cmp	r3, #0
   18842:	d01b      	beq.n	1887c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   18844:	230c      	movs	r3, #12
   18846:	18fb      	adds	r3, r7, r3
   18848:	0018      	movs	r0, r3
   1884a:	4b14      	ldr	r3, [pc, #80]	; (1889c <sercom_set_gclk_generator+0x80>)
   1884c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   1884e:	230c      	movs	r3, #12
   18850:	18fb      	adds	r3, r7, r3
   18852:	1dfa      	adds	r2, r7, #7
   18854:	7812      	ldrb	r2, [r2, #0]
   18856:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   18858:	230c      	movs	r3, #12
   1885a:	18fb      	adds	r3, r7, r3
   1885c:	0019      	movs	r1, r3
   1885e:	2013      	movs	r0, #19
   18860:	4b0f      	ldr	r3, [pc, #60]	; (188a0 <sercom_set_gclk_generator+0x84>)
   18862:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   18864:	2013      	movs	r0, #19
   18866:	4b0f      	ldr	r3, [pc, #60]	; (188a4 <sercom_set_gclk_generator+0x88>)
   18868:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   1886a:	4b0b      	ldr	r3, [pc, #44]	; (18898 <sercom_set_gclk_generator+0x7c>)
   1886c:	1dfa      	adds	r2, r7, #7
   1886e:	7812      	ldrb	r2, [r2, #0]
   18870:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   18872:	4b09      	ldr	r3, [pc, #36]	; (18898 <sercom_set_gclk_generator+0x7c>)
   18874:	2201      	movs	r2, #1
   18876:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   18878:	2300      	movs	r3, #0
   1887a:	e008      	b.n	1888e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   1887c:	4b06      	ldr	r3, [pc, #24]	; (18898 <sercom_set_gclk_generator+0x7c>)
   1887e:	785b      	ldrb	r3, [r3, #1]
   18880:	1dfa      	adds	r2, r7, #7
   18882:	7812      	ldrb	r2, [r2, #0]
   18884:	429a      	cmp	r2, r3
   18886:	d101      	bne.n	1888c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   18888:	2300      	movs	r3, #0
   1888a:	e000      	b.n	1888e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   1888c:	231d      	movs	r3, #29
}
   1888e:	0018      	movs	r0, r3
   18890:	46bd      	mov	sp, r7
   18892:	b004      	add	sp, #16
   18894:	bd80      	pop	{r7, pc}
   18896:	46c0      	nop			; (mov r8, r8)
   18898:	20002d1c 	.word	0x20002d1c
   1889c:	000184e9 	.word	0x000184e9
   188a0:	0001a305 	.word	0x0001a305
   188a4:	0001a349 	.word	0x0001a349

000188a8 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   188a8:	b580      	push	{r7, lr}
   188aa:	b082      	sub	sp, #8
   188ac:	af00      	add	r7, sp, #0
   188ae:	6078      	str	r0, [r7, #4]
   188b0:	000a      	movs	r2, r1
   188b2:	1cfb      	adds	r3, r7, #3
   188b4:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   188b6:	687b      	ldr	r3, [r7, #4]
   188b8:	4a4d      	ldr	r2, [pc, #308]	; (189f0 <_sercom_get_default_pad+0x148>)
   188ba:	4293      	cmp	r3, r2
   188bc:	d03f      	beq.n	1893e <_sercom_get_default_pad+0x96>
   188be:	4a4c      	ldr	r2, [pc, #304]	; (189f0 <_sercom_get_default_pad+0x148>)
   188c0:	4293      	cmp	r3, r2
   188c2:	d806      	bhi.n	188d2 <_sercom_get_default_pad+0x2a>
   188c4:	4a4b      	ldr	r2, [pc, #300]	; (189f4 <_sercom_get_default_pad+0x14c>)
   188c6:	4293      	cmp	r3, r2
   188c8:	d00f      	beq.n	188ea <_sercom_get_default_pad+0x42>
   188ca:	4a4b      	ldr	r2, [pc, #300]	; (189f8 <_sercom_get_default_pad+0x150>)
   188cc:	4293      	cmp	r3, r2
   188ce:	d021      	beq.n	18914 <_sercom_get_default_pad+0x6c>
   188d0:	e089      	b.n	189e6 <_sercom_get_default_pad+0x13e>
   188d2:	4a4a      	ldr	r2, [pc, #296]	; (189fc <_sercom_get_default_pad+0x154>)
   188d4:	4293      	cmp	r3, r2
   188d6:	d100      	bne.n	188da <_sercom_get_default_pad+0x32>
   188d8:	e05b      	b.n	18992 <_sercom_get_default_pad+0xea>
   188da:	4a49      	ldr	r2, [pc, #292]	; (18a00 <_sercom_get_default_pad+0x158>)
   188dc:	4293      	cmp	r3, r2
   188de:	d100      	bne.n	188e2 <_sercom_get_default_pad+0x3a>
   188e0:	e06c      	b.n	189bc <_sercom_get_default_pad+0x114>
   188e2:	4a48      	ldr	r2, [pc, #288]	; (18a04 <_sercom_get_default_pad+0x15c>)
   188e4:	4293      	cmp	r3, r2
   188e6:	d03f      	beq.n	18968 <_sercom_get_default_pad+0xc0>
   188e8:	e07d      	b.n	189e6 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   188ea:	1cfb      	adds	r3, r7, #3
   188ec:	781b      	ldrb	r3, [r3, #0]
   188ee:	2b01      	cmp	r3, #1
   188f0:	d00a      	beq.n	18908 <_sercom_get_default_pad+0x60>
   188f2:	dc02      	bgt.n	188fa <_sercom_get_default_pad+0x52>
   188f4:	2b00      	cmp	r3, #0
   188f6:	d005      	beq.n	18904 <_sercom_get_default_pad+0x5c>
   188f8:	e075      	b.n	189e6 <_sercom_get_default_pad+0x13e>
   188fa:	2b02      	cmp	r3, #2
   188fc:	d006      	beq.n	1890c <_sercom_get_default_pad+0x64>
   188fe:	2b03      	cmp	r3, #3
   18900:	d006      	beq.n	18910 <_sercom_get_default_pad+0x68>
   18902:	e070      	b.n	189e6 <_sercom_get_default_pad+0x13e>
   18904:	4b40      	ldr	r3, [pc, #256]	; (18a08 <_sercom_get_default_pad+0x160>)
   18906:	e06f      	b.n	189e8 <_sercom_get_default_pad+0x140>
   18908:	4b40      	ldr	r3, [pc, #256]	; (18a0c <_sercom_get_default_pad+0x164>)
   1890a:	e06d      	b.n	189e8 <_sercom_get_default_pad+0x140>
   1890c:	4b40      	ldr	r3, [pc, #256]	; (18a10 <_sercom_get_default_pad+0x168>)
   1890e:	e06b      	b.n	189e8 <_sercom_get_default_pad+0x140>
   18910:	4b40      	ldr	r3, [pc, #256]	; (18a14 <_sercom_get_default_pad+0x16c>)
   18912:	e069      	b.n	189e8 <_sercom_get_default_pad+0x140>
   18914:	1cfb      	adds	r3, r7, #3
   18916:	781b      	ldrb	r3, [r3, #0]
   18918:	2b01      	cmp	r3, #1
   1891a:	d00a      	beq.n	18932 <_sercom_get_default_pad+0x8a>
   1891c:	dc02      	bgt.n	18924 <_sercom_get_default_pad+0x7c>
   1891e:	2b00      	cmp	r3, #0
   18920:	d005      	beq.n	1892e <_sercom_get_default_pad+0x86>
   18922:	e060      	b.n	189e6 <_sercom_get_default_pad+0x13e>
   18924:	2b02      	cmp	r3, #2
   18926:	d006      	beq.n	18936 <_sercom_get_default_pad+0x8e>
   18928:	2b03      	cmp	r3, #3
   1892a:	d006      	beq.n	1893a <_sercom_get_default_pad+0x92>
   1892c:	e05b      	b.n	189e6 <_sercom_get_default_pad+0x13e>
   1892e:	2303      	movs	r3, #3
   18930:	e05a      	b.n	189e8 <_sercom_get_default_pad+0x140>
   18932:	4b39      	ldr	r3, [pc, #228]	; (18a18 <_sercom_get_default_pad+0x170>)
   18934:	e058      	b.n	189e8 <_sercom_get_default_pad+0x140>
   18936:	4b39      	ldr	r3, [pc, #228]	; (18a1c <_sercom_get_default_pad+0x174>)
   18938:	e056      	b.n	189e8 <_sercom_get_default_pad+0x140>
   1893a:	4b39      	ldr	r3, [pc, #228]	; (18a20 <_sercom_get_default_pad+0x178>)
   1893c:	e054      	b.n	189e8 <_sercom_get_default_pad+0x140>
   1893e:	1cfb      	adds	r3, r7, #3
   18940:	781b      	ldrb	r3, [r3, #0]
   18942:	2b01      	cmp	r3, #1
   18944:	d00a      	beq.n	1895c <_sercom_get_default_pad+0xb4>
   18946:	dc02      	bgt.n	1894e <_sercom_get_default_pad+0xa6>
   18948:	2b00      	cmp	r3, #0
   1894a:	d005      	beq.n	18958 <_sercom_get_default_pad+0xb0>
   1894c:	e04b      	b.n	189e6 <_sercom_get_default_pad+0x13e>
   1894e:	2b02      	cmp	r3, #2
   18950:	d006      	beq.n	18960 <_sercom_get_default_pad+0xb8>
   18952:	2b03      	cmp	r3, #3
   18954:	d006      	beq.n	18964 <_sercom_get_default_pad+0xbc>
   18956:	e046      	b.n	189e6 <_sercom_get_default_pad+0x13e>
   18958:	4b32      	ldr	r3, [pc, #200]	; (18a24 <_sercom_get_default_pad+0x17c>)
   1895a:	e045      	b.n	189e8 <_sercom_get_default_pad+0x140>
   1895c:	4b32      	ldr	r3, [pc, #200]	; (18a28 <_sercom_get_default_pad+0x180>)
   1895e:	e043      	b.n	189e8 <_sercom_get_default_pad+0x140>
   18960:	4b32      	ldr	r3, [pc, #200]	; (18a2c <_sercom_get_default_pad+0x184>)
   18962:	e041      	b.n	189e8 <_sercom_get_default_pad+0x140>
   18964:	4b32      	ldr	r3, [pc, #200]	; (18a30 <_sercom_get_default_pad+0x188>)
   18966:	e03f      	b.n	189e8 <_sercom_get_default_pad+0x140>
   18968:	1cfb      	adds	r3, r7, #3
   1896a:	781b      	ldrb	r3, [r3, #0]
   1896c:	2b01      	cmp	r3, #1
   1896e:	d00a      	beq.n	18986 <_sercom_get_default_pad+0xde>
   18970:	dc02      	bgt.n	18978 <_sercom_get_default_pad+0xd0>
   18972:	2b00      	cmp	r3, #0
   18974:	d005      	beq.n	18982 <_sercom_get_default_pad+0xda>
   18976:	e036      	b.n	189e6 <_sercom_get_default_pad+0x13e>
   18978:	2b02      	cmp	r3, #2
   1897a:	d006      	beq.n	1898a <_sercom_get_default_pad+0xe2>
   1897c:	2b03      	cmp	r3, #3
   1897e:	d006      	beq.n	1898e <_sercom_get_default_pad+0xe6>
   18980:	e031      	b.n	189e6 <_sercom_get_default_pad+0x13e>
   18982:	4b2c      	ldr	r3, [pc, #176]	; (18a34 <_sercom_get_default_pad+0x18c>)
   18984:	e030      	b.n	189e8 <_sercom_get_default_pad+0x140>
   18986:	4b2c      	ldr	r3, [pc, #176]	; (18a38 <_sercom_get_default_pad+0x190>)
   18988:	e02e      	b.n	189e8 <_sercom_get_default_pad+0x140>
   1898a:	4b2c      	ldr	r3, [pc, #176]	; (18a3c <_sercom_get_default_pad+0x194>)
   1898c:	e02c      	b.n	189e8 <_sercom_get_default_pad+0x140>
   1898e:	4b2c      	ldr	r3, [pc, #176]	; (18a40 <_sercom_get_default_pad+0x198>)
   18990:	e02a      	b.n	189e8 <_sercom_get_default_pad+0x140>
   18992:	1cfb      	adds	r3, r7, #3
   18994:	781b      	ldrb	r3, [r3, #0]
   18996:	2b01      	cmp	r3, #1
   18998:	d00a      	beq.n	189b0 <_sercom_get_default_pad+0x108>
   1899a:	dc02      	bgt.n	189a2 <_sercom_get_default_pad+0xfa>
   1899c:	2b00      	cmp	r3, #0
   1899e:	d005      	beq.n	189ac <_sercom_get_default_pad+0x104>
   189a0:	e021      	b.n	189e6 <_sercom_get_default_pad+0x13e>
   189a2:	2b02      	cmp	r3, #2
   189a4:	d006      	beq.n	189b4 <_sercom_get_default_pad+0x10c>
   189a6:	2b03      	cmp	r3, #3
   189a8:	d006      	beq.n	189b8 <_sercom_get_default_pad+0x110>
   189aa:	e01c      	b.n	189e6 <_sercom_get_default_pad+0x13e>
   189ac:	4b25      	ldr	r3, [pc, #148]	; (18a44 <_sercom_get_default_pad+0x19c>)
   189ae:	e01b      	b.n	189e8 <_sercom_get_default_pad+0x140>
   189b0:	4b25      	ldr	r3, [pc, #148]	; (18a48 <_sercom_get_default_pad+0x1a0>)
   189b2:	e019      	b.n	189e8 <_sercom_get_default_pad+0x140>
   189b4:	4b25      	ldr	r3, [pc, #148]	; (18a4c <_sercom_get_default_pad+0x1a4>)
   189b6:	e017      	b.n	189e8 <_sercom_get_default_pad+0x140>
   189b8:	4b25      	ldr	r3, [pc, #148]	; (18a50 <_sercom_get_default_pad+0x1a8>)
   189ba:	e015      	b.n	189e8 <_sercom_get_default_pad+0x140>
   189bc:	1cfb      	adds	r3, r7, #3
   189be:	781b      	ldrb	r3, [r3, #0]
   189c0:	2b01      	cmp	r3, #1
   189c2:	d00a      	beq.n	189da <_sercom_get_default_pad+0x132>
   189c4:	dc02      	bgt.n	189cc <_sercom_get_default_pad+0x124>
   189c6:	2b00      	cmp	r3, #0
   189c8:	d005      	beq.n	189d6 <_sercom_get_default_pad+0x12e>
   189ca:	e00c      	b.n	189e6 <_sercom_get_default_pad+0x13e>
   189cc:	2b02      	cmp	r3, #2
   189ce:	d006      	beq.n	189de <_sercom_get_default_pad+0x136>
   189d0:	2b03      	cmp	r3, #3
   189d2:	d006      	beq.n	189e2 <_sercom_get_default_pad+0x13a>
   189d4:	e007      	b.n	189e6 <_sercom_get_default_pad+0x13e>
   189d6:	4b1f      	ldr	r3, [pc, #124]	; (18a54 <_sercom_get_default_pad+0x1ac>)
   189d8:	e006      	b.n	189e8 <_sercom_get_default_pad+0x140>
   189da:	4b1f      	ldr	r3, [pc, #124]	; (18a58 <_sercom_get_default_pad+0x1b0>)
   189dc:	e004      	b.n	189e8 <_sercom_get_default_pad+0x140>
   189de:	4b1f      	ldr	r3, [pc, #124]	; (18a5c <_sercom_get_default_pad+0x1b4>)
   189e0:	e002      	b.n	189e8 <_sercom_get_default_pad+0x140>
   189e2:	4b1f      	ldr	r3, [pc, #124]	; (18a60 <_sercom_get_default_pad+0x1b8>)
   189e4:	e000      	b.n	189e8 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   189e6:	2300      	movs	r3, #0
}
   189e8:	0018      	movs	r0, r3
   189ea:	46bd      	mov	sp, r7
   189ec:	b002      	add	sp, #8
   189ee:	bd80      	pop	{r7, pc}
   189f0:	42001000 	.word	0x42001000
   189f4:	42000800 	.word	0x42000800
   189f8:	42000c00 	.word	0x42000c00
   189fc:	42001800 	.word	0x42001800
   18a00:	42001c00 	.word	0x42001c00
   18a04:	42001400 	.word	0x42001400
   18a08:	00040003 	.word	0x00040003
   18a0c:	00050003 	.word	0x00050003
   18a10:	00060003 	.word	0x00060003
   18a14:	00070003 	.word	0x00070003
   18a18:	00010003 	.word	0x00010003
   18a1c:	001e0003 	.word	0x001e0003
   18a20:	001f0003 	.word	0x001f0003
   18a24:	00080003 	.word	0x00080003
   18a28:	00090003 	.word	0x00090003
   18a2c:	000a0003 	.word	0x000a0003
   18a30:	000b0003 	.word	0x000b0003
   18a34:	00100003 	.word	0x00100003
   18a38:	00110003 	.word	0x00110003
   18a3c:	00120003 	.word	0x00120003
   18a40:	00130003 	.word	0x00130003
   18a44:	000c0003 	.word	0x000c0003
   18a48:	000d0003 	.word	0x000d0003
   18a4c:	000e0003 	.word	0x000e0003
   18a50:	000f0003 	.word	0x000f0003
   18a54:	00160003 	.word	0x00160003
   18a58:	00170003 	.word	0x00170003
   18a5c:	00180003 	.word	0x00180003
   18a60:	00190003 	.word	0x00190003

00018a64 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   18a64:	b590      	push	{r4, r7, lr}
   18a66:	b08b      	sub	sp, #44	; 0x2c
   18a68:	af00      	add	r7, sp, #0
   18a6a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   18a6c:	230c      	movs	r3, #12
   18a6e:	18fb      	adds	r3, r7, r3
   18a70:	4a0f      	ldr	r2, [pc, #60]	; (18ab0 <_sercom_get_sercom_inst_index+0x4c>)
   18a72:	ca13      	ldmia	r2!, {r0, r1, r4}
   18a74:	c313      	stmia	r3!, {r0, r1, r4}
   18a76:	ca13      	ldmia	r2!, {r0, r1, r4}
   18a78:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   18a7a:	2300      	movs	r3, #0
   18a7c:	627b      	str	r3, [r7, #36]	; 0x24
   18a7e:	e00e      	b.n	18a9e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   18a80:	230c      	movs	r3, #12
   18a82:	18fb      	adds	r3, r7, r3
   18a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18a86:	0092      	lsls	r2, r2, #2
   18a88:	58d3      	ldr	r3, [r2, r3]
   18a8a:	001a      	movs	r2, r3
   18a8c:	687b      	ldr	r3, [r7, #4]
   18a8e:	429a      	cmp	r2, r3
   18a90:	d102      	bne.n	18a98 <_sercom_get_sercom_inst_index+0x34>
			return i;
   18a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18a94:	b2db      	uxtb	r3, r3
   18a96:	e006      	b.n	18aa6 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   18a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18a9a:	3301      	adds	r3, #1
   18a9c:	627b      	str	r3, [r7, #36]	; 0x24
   18a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18aa0:	2b05      	cmp	r3, #5
   18aa2:	d9ed      	bls.n	18a80 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   18aa4:	2300      	movs	r3, #0
}
   18aa6:	0018      	movs	r0, r3
   18aa8:	46bd      	mov	sp, r7
   18aaa:	b00b      	add	sp, #44	; 0x2c
   18aac:	bd90      	pop	{r4, r7, pc}
   18aae:	46c0      	nop			; (mov r8, r8)
   18ab0:	0001e4d8 	.word	0x0001e4d8

00018ab4 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   18ab4:	b580      	push	{r7, lr}
   18ab6:	b082      	sub	sp, #8
   18ab8:	af00      	add	r7, sp, #0
   18aba:	0002      	movs	r2, r0
   18abc:	1dfb      	adds	r3, r7, #7
   18abe:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   18ac0:	46c0      	nop			; (mov r8, r8)
   18ac2:	46bd      	mov	sp, r7
   18ac4:	b002      	add	sp, #8
   18ac6:	bd80      	pop	{r7, pc}

00018ac8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   18ac8:	b580      	push	{r7, lr}
   18aca:	b084      	sub	sp, #16
   18acc:	af00      	add	r7, sp, #0
   18ace:	0002      	movs	r2, r0
   18ad0:	6039      	str	r1, [r7, #0]
   18ad2:	1dfb      	adds	r3, r7, #7
   18ad4:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   18ad6:	4b13      	ldr	r3, [pc, #76]	; (18b24 <_sercom_set_handler+0x5c>)
   18ad8:	781b      	ldrb	r3, [r3, #0]
   18ada:	2201      	movs	r2, #1
   18adc:	4053      	eors	r3, r2
   18ade:	b2db      	uxtb	r3, r3
   18ae0:	2b00      	cmp	r3, #0
   18ae2:	d015      	beq.n	18b10 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   18ae4:	2300      	movs	r3, #0
   18ae6:	60fb      	str	r3, [r7, #12]
   18ae8:	e00c      	b.n	18b04 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   18aea:	4b0f      	ldr	r3, [pc, #60]	; (18b28 <_sercom_set_handler+0x60>)
   18aec:	68fa      	ldr	r2, [r7, #12]
   18aee:	0092      	lsls	r2, r2, #2
   18af0:	490e      	ldr	r1, [pc, #56]	; (18b2c <_sercom_set_handler+0x64>)
   18af2:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   18af4:	4b0e      	ldr	r3, [pc, #56]	; (18b30 <_sercom_set_handler+0x68>)
   18af6:	68fa      	ldr	r2, [r7, #12]
   18af8:	0092      	lsls	r2, r2, #2
   18afa:	2100      	movs	r1, #0
   18afc:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   18afe:	68fb      	ldr	r3, [r7, #12]
   18b00:	3301      	adds	r3, #1
   18b02:	60fb      	str	r3, [r7, #12]
   18b04:	68fb      	ldr	r3, [r7, #12]
   18b06:	2b05      	cmp	r3, #5
   18b08:	d9ef      	bls.n	18aea <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   18b0a:	4b06      	ldr	r3, [pc, #24]	; (18b24 <_sercom_set_handler+0x5c>)
   18b0c:	2201      	movs	r2, #1
   18b0e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   18b10:	1dfb      	adds	r3, r7, #7
   18b12:	781a      	ldrb	r2, [r3, #0]
   18b14:	4b04      	ldr	r3, [pc, #16]	; (18b28 <_sercom_set_handler+0x60>)
   18b16:	0092      	lsls	r2, r2, #2
   18b18:	6839      	ldr	r1, [r7, #0]
   18b1a:	50d1      	str	r1, [r2, r3]
}
   18b1c:	46c0      	nop			; (mov r8, r8)
   18b1e:	46bd      	mov	sp, r7
   18b20:	b004      	add	sp, #16
   18b22:	bd80      	pop	{r7, pc}
   18b24:	20002d1e 	.word	0x20002d1e
   18b28:	20002d20 	.word	0x20002d20
   18b2c:	00018ab5 	.word	0x00018ab5
   18b30:	20003310 	.word	0x20003310

00018b34 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   18b34:	b590      	push	{r4, r7, lr}
   18b36:	b085      	sub	sp, #20
   18b38:	af00      	add	r7, sp, #0
   18b3a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   18b3c:	2308      	movs	r3, #8
   18b3e:	18fb      	adds	r3, r7, r3
   18b40:	4a0b      	ldr	r2, [pc, #44]	; (18b70 <_sercom_get_interrupt_vector+0x3c>)
   18b42:	6811      	ldr	r1, [r2, #0]
   18b44:	6019      	str	r1, [r3, #0]
   18b46:	8892      	ldrh	r2, [r2, #4]
   18b48:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   18b4a:	230f      	movs	r3, #15
   18b4c:	18fc      	adds	r4, r7, r3
   18b4e:	687b      	ldr	r3, [r7, #4]
   18b50:	0018      	movs	r0, r3
   18b52:	4b08      	ldr	r3, [pc, #32]	; (18b74 <_sercom_get_interrupt_vector+0x40>)
   18b54:	4798      	blx	r3
   18b56:	0003      	movs	r3, r0
   18b58:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   18b5a:	230f      	movs	r3, #15
   18b5c:	18fb      	adds	r3, r7, r3
   18b5e:	781b      	ldrb	r3, [r3, #0]
   18b60:	2208      	movs	r2, #8
   18b62:	18ba      	adds	r2, r7, r2
   18b64:	5cd3      	ldrb	r3, [r2, r3]
   18b66:	b25b      	sxtb	r3, r3
}
   18b68:	0018      	movs	r0, r3
   18b6a:	46bd      	mov	sp, r7
   18b6c:	b005      	add	sp, #20
   18b6e:	bd90      	pop	{r4, r7, pc}
   18b70:	0001e4f0 	.word	0x0001e4f0
   18b74:	00018a65 	.word	0x00018a65

00018b78 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   18b78:	b580      	push	{r7, lr}
   18b7a:	af00      	add	r7, sp, #0
   18b7c:	4b03      	ldr	r3, [pc, #12]	; (18b8c <SERCOM0_Handler+0x14>)
   18b7e:	681b      	ldr	r3, [r3, #0]
   18b80:	2000      	movs	r0, #0
   18b82:	4798      	blx	r3
   18b84:	46c0      	nop			; (mov r8, r8)
   18b86:	46bd      	mov	sp, r7
   18b88:	bd80      	pop	{r7, pc}
   18b8a:	46c0      	nop			; (mov r8, r8)
   18b8c:	20002d20 	.word	0x20002d20

00018b90 <SERCOM1_Handler>:
   18b90:	b580      	push	{r7, lr}
   18b92:	af00      	add	r7, sp, #0
   18b94:	4b03      	ldr	r3, [pc, #12]	; (18ba4 <SERCOM1_Handler+0x14>)
   18b96:	685b      	ldr	r3, [r3, #4]
   18b98:	2001      	movs	r0, #1
   18b9a:	4798      	blx	r3
   18b9c:	46c0      	nop			; (mov r8, r8)
   18b9e:	46bd      	mov	sp, r7
   18ba0:	bd80      	pop	{r7, pc}
   18ba2:	46c0      	nop			; (mov r8, r8)
   18ba4:	20002d20 	.word	0x20002d20

00018ba8 <SERCOM2_Handler>:
   18ba8:	b580      	push	{r7, lr}
   18baa:	af00      	add	r7, sp, #0
   18bac:	4b03      	ldr	r3, [pc, #12]	; (18bbc <SERCOM2_Handler+0x14>)
   18bae:	689b      	ldr	r3, [r3, #8]
   18bb0:	2002      	movs	r0, #2
   18bb2:	4798      	blx	r3
   18bb4:	46c0      	nop			; (mov r8, r8)
   18bb6:	46bd      	mov	sp, r7
   18bb8:	bd80      	pop	{r7, pc}
   18bba:	46c0      	nop			; (mov r8, r8)
   18bbc:	20002d20 	.word	0x20002d20

00018bc0 <SERCOM3_Handler>:
   18bc0:	b580      	push	{r7, lr}
   18bc2:	af00      	add	r7, sp, #0
   18bc4:	4b03      	ldr	r3, [pc, #12]	; (18bd4 <SERCOM3_Handler+0x14>)
   18bc6:	68db      	ldr	r3, [r3, #12]
   18bc8:	2003      	movs	r0, #3
   18bca:	4798      	blx	r3
   18bcc:	46c0      	nop			; (mov r8, r8)
   18bce:	46bd      	mov	sp, r7
   18bd0:	bd80      	pop	{r7, pc}
   18bd2:	46c0      	nop			; (mov r8, r8)
   18bd4:	20002d20 	.word	0x20002d20

00018bd8 <SERCOM4_Handler>:
   18bd8:	b580      	push	{r7, lr}
   18bda:	af00      	add	r7, sp, #0
   18bdc:	4b03      	ldr	r3, [pc, #12]	; (18bec <SERCOM4_Handler+0x14>)
   18bde:	691b      	ldr	r3, [r3, #16]
   18be0:	2004      	movs	r0, #4
   18be2:	4798      	blx	r3
   18be4:	46c0      	nop			; (mov r8, r8)
   18be6:	46bd      	mov	sp, r7
   18be8:	bd80      	pop	{r7, pc}
   18bea:	46c0      	nop			; (mov r8, r8)
   18bec:	20002d20 	.word	0x20002d20

00018bf0 <SERCOM5_Handler>:
   18bf0:	b580      	push	{r7, lr}
   18bf2:	af00      	add	r7, sp, #0
   18bf4:	4b03      	ldr	r3, [pc, #12]	; (18c04 <SERCOM5_Handler+0x14>)
   18bf6:	695b      	ldr	r3, [r3, #20]
   18bf8:	2005      	movs	r0, #5
   18bfa:	4798      	blx	r3
   18bfc:	46c0      	nop			; (mov r8, r8)
   18bfe:	46bd      	mov	sp, r7
   18c00:	bd80      	pop	{r7, pc}
   18c02:	46c0      	nop			; (mov r8, r8)
   18c04:	20002d20 	.word	0x20002d20

00018c08 <system_gclk_chan_get_config_defaults>:
{
   18c08:	b580      	push	{r7, lr}
   18c0a:	b082      	sub	sp, #8
   18c0c:	af00      	add	r7, sp, #0
   18c0e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   18c10:	687b      	ldr	r3, [r7, #4]
   18c12:	2200      	movs	r2, #0
   18c14:	701a      	strb	r2, [r3, #0]
}
   18c16:	46c0      	nop			; (mov r8, r8)
   18c18:	46bd      	mov	sp, r7
   18c1a:	b002      	add	sp, #8
   18c1c:	bd80      	pop	{r7, pc}
	...

00018c20 <system_apb_clock_set_mask>:
{
   18c20:	b580      	push	{r7, lr}
   18c22:	b082      	sub	sp, #8
   18c24:	af00      	add	r7, sp, #0
   18c26:	0002      	movs	r2, r0
   18c28:	6039      	str	r1, [r7, #0]
   18c2a:	1dfb      	adds	r3, r7, #7
   18c2c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   18c2e:	1dfb      	adds	r3, r7, #7
   18c30:	781b      	ldrb	r3, [r3, #0]
   18c32:	2b01      	cmp	r3, #1
   18c34:	d00a      	beq.n	18c4c <system_apb_clock_set_mask+0x2c>
   18c36:	2b02      	cmp	r3, #2
   18c38:	d00f      	beq.n	18c5a <system_apb_clock_set_mask+0x3a>
   18c3a:	2b00      	cmp	r3, #0
   18c3c:	d114      	bne.n	18c68 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   18c3e:	4b0e      	ldr	r3, [pc, #56]	; (18c78 <system_apb_clock_set_mask+0x58>)
   18c40:	4a0d      	ldr	r2, [pc, #52]	; (18c78 <system_apb_clock_set_mask+0x58>)
   18c42:	6991      	ldr	r1, [r2, #24]
   18c44:	683a      	ldr	r2, [r7, #0]
   18c46:	430a      	orrs	r2, r1
   18c48:	619a      	str	r2, [r3, #24]
			break;
   18c4a:	e00f      	b.n	18c6c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   18c4c:	4b0a      	ldr	r3, [pc, #40]	; (18c78 <system_apb_clock_set_mask+0x58>)
   18c4e:	4a0a      	ldr	r2, [pc, #40]	; (18c78 <system_apb_clock_set_mask+0x58>)
   18c50:	69d1      	ldr	r1, [r2, #28]
   18c52:	683a      	ldr	r2, [r7, #0]
   18c54:	430a      	orrs	r2, r1
   18c56:	61da      	str	r2, [r3, #28]
			break;
   18c58:	e008      	b.n	18c6c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   18c5a:	4b07      	ldr	r3, [pc, #28]	; (18c78 <system_apb_clock_set_mask+0x58>)
   18c5c:	4a06      	ldr	r2, [pc, #24]	; (18c78 <system_apb_clock_set_mask+0x58>)
   18c5e:	6a11      	ldr	r1, [r2, #32]
   18c60:	683a      	ldr	r2, [r7, #0]
   18c62:	430a      	orrs	r2, r1
   18c64:	621a      	str	r2, [r3, #32]
			break;
   18c66:	e001      	b.n	18c6c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   18c68:	2317      	movs	r3, #23
   18c6a:	e000      	b.n	18c6e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   18c6c:	2300      	movs	r3, #0
}
   18c6e:	0018      	movs	r0, r3
   18c70:	46bd      	mov	sp, r7
   18c72:	b002      	add	sp, #8
   18c74:	bd80      	pop	{r7, pc}
   18c76:	46c0      	nop			; (mov r8, r8)
   18c78:	40000400 	.word	0x40000400

00018c7c <system_pinmux_get_config_defaults>:
{
   18c7c:	b580      	push	{r7, lr}
   18c7e:	b082      	sub	sp, #8
   18c80:	af00      	add	r7, sp, #0
   18c82:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   18c84:	687b      	ldr	r3, [r7, #4]
   18c86:	2280      	movs	r2, #128	; 0x80
   18c88:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   18c8a:	687b      	ldr	r3, [r7, #4]
   18c8c:	2200      	movs	r2, #0
   18c8e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   18c90:	687b      	ldr	r3, [r7, #4]
   18c92:	2201      	movs	r2, #1
   18c94:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   18c96:	687b      	ldr	r3, [r7, #4]
   18c98:	2200      	movs	r2, #0
   18c9a:	70da      	strb	r2, [r3, #3]
}
   18c9c:	46c0      	nop			; (mov r8, r8)
   18c9e:	46bd      	mov	sp, r7
   18ca0:	b002      	add	sp, #8
   18ca2:	bd80      	pop	{r7, pc}

00018ca4 <system_is_debugger_present>:
{
   18ca4:	b580      	push	{r7, lr}
   18ca6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   18ca8:	4b05      	ldr	r3, [pc, #20]	; (18cc0 <system_is_debugger_present+0x1c>)
   18caa:	789b      	ldrb	r3, [r3, #2]
   18cac:	b2db      	uxtb	r3, r3
   18cae:	001a      	movs	r2, r3
   18cb0:	2302      	movs	r3, #2
   18cb2:	4013      	ands	r3, r2
   18cb4:	1e5a      	subs	r2, r3, #1
   18cb6:	4193      	sbcs	r3, r2
   18cb8:	b2db      	uxtb	r3, r3
}
   18cba:	0018      	movs	r0, r3
   18cbc:	46bd      	mov	sp, r7
   18cbe:	bd80      	pop	{r7, pc}
   18cc0:	41002000 	.word	0x41002000

00018cc4 <usart_is_syncing>:
{
   18cc4:	b580      	push	{r7, lr}
   18cc6:	b084      	sub	sp, #16
   18cc8:	af00      	add	r7, sp, #0
   18cca:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   18ccc:	687b      	ldr	r3, [r7, #4]
   18cce:	681b      	ldr	r3, [r3, #0]
   18cd0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   18cd2:	68fb      	ldr	r3, [r7, #12]
   18cd4:	69db      	ldr	r3, [r3, #28]
   18cd6:	1e5a      	subs	r2, r3, #1
   18cd8:	4193      	sbcs	r3, r2
   18cda:	b2db      	uxtb	r3, r3
}
   18cdc:	0018      	movs	r0, r3
   18cde:	46bd      	mov	sp, r7
   18ce0:	b004      	add	sp, #16
   18ce2:	bd80      	pop	{r7, pc}

00018ce4 <_usart_wait_for_sync>:
{
   18ce4:	b580      	push	{r7, lr}
   18ce6:	b082      	sub	sp, #8
   18ce8:	af00      	add	r7, sp, #0
   18cea:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   18cec:	46c0      	nop			; (mov r8, r8)
   18cee:	687b      	ldr	r3, [r7, #4]
   18cf0:	0018      	movs	r0, r3
   18cf2:	4b04      	ldr	r3, [pc, #16]	; (18d04 <_usart_wait_for_sync+0x20>)
   18cf4:	4798      	blx	r3
   18cf6:	1e03      	subs	r3, r0, #0
   18cf8:	d1f9      	bne.n	18cee <_usart_wait_for_sync+0xa>
}
   18cfa:	46c0      	nop			; (mov r8, r8)
   18cfc:	46bd      	mov	sp, r7
   18cfe:	b002      	add	sp, #8
   18d00:	bd80      	pop	{r7, pc}
   18d02:	46c0      	nop			; (mov r8, r8)
   18d04:	00018cc5 	.word	0x00018cc5

00018d08 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   18d08:	b5b0      	push	{r4, r5, r7, lr}
   18d0a:	b08c      	sub	sp, #48	; 0x30
   18d0c:	af02      	add	r7, sp, #8
   18d0e:	6078      	str	r0, [r7, #4]
   18d10:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   18d12:	687b      	ldr	r3, [r7, #4]
   18d14:	681b      	ldr	r3, [r3, #0]
   18d16:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   18d18:	687b      	ldr	r3, [r7, #4]
   18d1a:	681b      	ldr	r3, [r3, #0]
   18d1c:	0018      	movs	r0, r3
   18d1e:	4bab      	ldr	r3, [pc, #684]	; (18fcc <_usart_set_config+0x2c4>)
   18d20:	4798      	blx	r3
   18d22:	0003      	movs	r3, r0
   18d24:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   18d26:	697b      	ldr	r3, [r7, #20]
   18d28:	3314      	adds	r3, #20
   18d2a:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   18d2c:	2300      	movs	r3, #0
   18d2e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   18d30:	2300      	movs	r3, #0
   18d32:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   18d34:	230a      	movs	r3, #10
   18d36:	18fb      	adds	r3, r7, r3
   18d38:	2200      	movs	r2, #0
   18d3a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   18d3c:	231f      	movs	r3, #31
   18d3e:	18fb      	adds	r3, r7, r3
   18d40:	2200      	movs	r2, #0
   18d42:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   18d44:	231e      	movs	r3, #30
   18d46:	18fb      	adds	r3, r7, r3
   18d48:	2210      	movs	r2, #16
   18d4a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   18d4c:	683b      	ldr	r3, [r7, #0]
   18d4e:	8a1b      	ldrh	r3, [r3, #16]
   18d50:	2280      	movs	r2, #128	; 0x80
   18d52:	01d2      	lsls	r2, r2, #7
   18d54:	4293      	cmp	r3, r2
   18d56:	d01c      	beq.n	18d92 <_usart_set_config+0x8a>
   18d58:	2280      	movs	r2, #128	; 0x80
   18d5a:	01d2      	lsls	r2, r2, #7
   18d5c:	4293      	cmp	r3, r2
   18d5e:	dc06      	bgt.n	18d6e <_usart_set_config+0x66>
   18d60:	2b00      	cmp	r3, #0
   18d62:	d00d      	beq.n	18d80 <_usart_set_config+0x78>
   18d64:	2280      	movs	r2, #128	; 0x80
   18d66:	0192      	lsls	r2, r2, #6
   18d68:	4293      	cmp	r3, r2
   18d6a:	d024      	beq.n	18db6 <_usart_set_config+0xae>
   18d6c:	e035      	b.n	18dda <_usart_set_config+0xd2>
   18d6e:	22c0      	movs	r2, #192	; 0xc0
   18d70:	01d2      	lsls	r2, r2, #7
   18d72:	4293      	cmp	r3, r2
   18d74:	d028      	beq.n	18dc8 <_usart_set_config+0xc0>
   18d76:	2280      	movs	r2, #128	; 0x80
   18d78:	0212      	lsls	r2, r2, #8
   18d7a:	4293      	cmp	r3, r2
   18d7c:	d012      	beq.n	18da4 <_usart_set_config+0x9c>
   18d7e:	e02c      	b.n	18dda <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   18d80:	231f      	movs	r3, #31
   18d82:	18fb      	adds	r3, r7, r3
   18d84:	2200      	movs	r2, #0
   18d86:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   18d88:	231e      	movs	r3, #30
   18d8a:	18fb      	adds	r3, r7, r3
   18d8c:	2210      	movs	r2, #16
   18d8e:	701a      	strb	r2, [r3, #0]
			break;
   18d90:	e023      	b.n	18dda <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   18d92:	231f      	movs	r3, #31
   18d94:	18fb      	adds	r3, r7, r3
   18d96:	2200      	movs	r2, #0
   18d98:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   18d9a:	231e      	movs	r3, #30
   18d9c:	18fb      	adds	r3, r7, r3
   18d9e:	2208      	movs	r2, #8
   18da0:	701a      	strb	r2, [r3, #0]
			break;
   18da2:	e01a      	b.n	18dda <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   18da4:	231f      	movs	r3, #31
   18da6:	18fb      	adds	r3, r7, r3
   18da8:	2200      	movs	r2, #0
   18daa:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   18dac:	231e      	movs	r3, #30
   18dae:	18fb      	adds	r3, r7, r3
   18db0:	2203      	movs	r2, #3
   18db2:	701a      	strb	r2, [r3, #0]
			break;
   18db4:	e011      	b.n	18dda <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   18db6:	231f      	movs	r3, #31
   18db8:	18fb      	adds	r3, r7, r3
   18dba:	2201      	movs	r2, #1
   18dbc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   18dbe:	231e      	movs	r3, #30
   18dc0:	18fb      	adds	r3, r7, r3
   18dc2:	2210      	movs	r2, #16
   18dc4:	701a      	strb	r2, [r3, #0]
			break;
   18dc6:	e008      	b.n	18dda <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   18dc8:	231f      	movs	r3, #31
   18dca:	18fb      	adds	r3, r7, r3
   18dcc:	2201      	movs	r2, #1
   18dce:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   18dd0:	231e      	movs	r3, #30
   18dd2:	18fb      	adds	r3, r7, r3
   18dd4:	2208      	movs	r2, #8
   18dd6:	701a      	strb	r2, [r3, #0]
			break;
   18dd8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   18dda:	683b      	ldr	r3, [r7, #0]
   18ddc:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   18dde:	683b      	ldr	r3, [r7, #0]
   18de0:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   18de2:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   18de4:	683b      	ldr	r3, [r7, #0]
   18de6:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   18de8:	4313      	orrs	r3, r2
		config->sample_rate |
   18dea:	683a      	ldr	r2, [r7, #0]
   18dec:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   18dee:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   18df0:	683a      	ldr	r2, [r7, #0]
   18df2:	7e12      	ldrb	r2, [r2, #24]
   18df4:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   18df6:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   18df8:	683a      	ldr	r2, [r7, #0]
   18dfa:	2126      	movs	r1, #38	; 0x26
   18dfc:	5c52      	ldrb	r2, [r2, r1]
   18dfe:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   18e00:	4313      	orrs	r3, r2
   18e02:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   18e04:	231d      	movs	r3, #29
   18e06:	18fb      	adds	r3, r7, r3
   18e08:	2200      	movs	r2, #0
   18e0a:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   18e0c:	683b      	ldr	r3, [r7, #0]
   18e0e:	685b      	ldr	r3, [r3, #4]
   18e10:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   18e12:	68fb      	ldr	r3, [r7, #12]
   18e14:	2b00      	cmp	r3, #0
   18e16:	d01e      	beq.n	18e56 <_usart_set_config+0x14e>
   18e18:	2280      	movs	r2, #128	; 0x80
   18e1a:	0552      	lsls	r2, r2, #21
   18e1c:	4293      	cmp	r3, r2
   18e1e:	d14f      	bne.n	18ec0 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   18e20:	683b      	ldr	r3, [r7, #0]
   18e22:	2227      	movs	r2, #39	; 0x27
   18e24:	5c9b      	ldrb	r3, [r3, r2]
   18e26:	2201      	movs	r2, #1
   18e28:	4053      	eors	r3, r2
   18e2a:	b2db      	uxtb	r3, r3
   18e2c:	2b00      	cmp	r3, #0
   18e2e:	d046      	beq.n	18ebe <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   18e30:	683b      	ldr	r3, [r7, #0]
   18e32:	6a1d      	ldr	r5, [r3, #32]
   18e34:	693b      	ldr	r3, [r7, #16]
   18e36:	b2db      	uxtb	r3, r3
   18e38:	0018      	movs	r0, r3
   18e3a:	4b65      	ldr	r3, [pc, #404]	; (18fd0 <_usart_set_config+0x2c8>)
   18e3c:	4798      	blx	r3
   18e3e:	0001      	movs	r1, r0
   18e40:	231d      	movs	r3, #29
   18e42:	18fc      	adds	r4, r7, r3
   18e44:	230a      	movs	r3, #10
   18e46:	18fb      	adds	r3, r7, r3
   18e48:	001a      	movs	r2, r3
   18e4a:	0028      	movs	r0, r5
   18e4c:	4b61      	ldr	r3, [pc, #388]	; (18fd4 <_usart_set_config+0x2cc>)
   18e4e:	4798      	blx	r3
   18e50:	0003      	movs	r3, r0
   18e52:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   18e54:	e033      	b.n	18ebe <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   18e56:	683b      	ldr	r3, [r7, #0]
   18e58:	2227      	movs	r2, #39	; 0x27
   18e5a:	5c9b      	ldrb	r3, [r3, r2]
   18e5c:	2b00      	cmp	r3, #0
   18e5e:	d014      	beq.n	18e8a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   18e60:	683b      	ldr	r3, [r7, #0]
   18e62:	6a18      	ldr	r0, [r3, #32]
   18e64:	683b      	ldr	r3, [r7, #0]
   18e66:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   18e68:	231d      	movs	r3, #29
   18e6a:	18fc      	adds	r4, r7, r3
   18e6c:	231f      	movs	r3, #31
   18e6e:	18fb      	adds	r3, r7, r3
   18e70:	781d      	ldrb	r5, [r3, #0]
   18e72:	230a      	movs	r3, #10
   18e74:	18fa      	adds	r2, r7, r3
   18e76:	231e      	movs	r3, #30
   18e78:	18fb      	adds	r3, r7, r3
   18e7a:	781b      	ldrb	r3, [r3, #0]
   18e7c:	9300      	str	r3, [sp, #0]
   18e7e:	002b      	movs	r3, r5
   18e80:	4d55      	ldr	r5, [pc, #340]	; (18fd8 <_usart_set_config+0x2d0>)
   18e82:	47a8      	blx	r5
   18e84:	0003      	movs	r3, r0
   18e86:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   18e88:	e01a      	b.n	18ec0 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   18e8a:	683b      	ldr	r3, [r7, #0]
   18e8c:	6a1d      	ldr	r5, [r3, #32]
   18e8e:	693b      	ldr	r3, [r7, #16]
   18e90:	b2db      	uxtb	r3, r3
   18e92:	0018      	movs	r0, r3
   18e94:	4b4e      	ldr	r3, [pc, #312]	; (18fd0 <_usart_set_config+0x2c8>)
   18e96:	4798      	blx	r3
				status_code =
   18e98:	231d      	movs	r3, #29
   18e9a:	18fc      	adds	r4, r7, r3
   18e9c:	231f      	movs	r3, #31
   18e9e:	18fb      	adds	r3, r7, r3
   18ea0:	7819      	ldrb	r1, [r3, #0]
   18ea2:	230a      	movs	r3, #10
   18ea4:	18fa      	adds	r2, r7, r3
   18ea6:	231e      	movs	r3, #30
   18ea8:	18fb      	adds	r3, r7, r3
   18eaa:	781b      	ldrb	r3, [r3, #0]
   18eac:	9300      	str	r3, [sp, #0]
   18eae:	000b      	movs	r3, r1
   18eb0:	0001      	movs	r1, r0
   18eb2:	0028      	movs	r0, r5
   18eb4:	4d48      	ldr	r5, [pc, #288]	; (18fd8 <_usart_set_config+0x2d0>)
   18eb6:	47a8      	blx	r5
   18eb8:	0003      	movs	r3, r0
   18eba:	7023      	strb	r3, [r4, #0]
			break;
   18ebc:	e000      	b.n	18ec0 <_usart_set_config+0x1b8>
			break;
   18ebe:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   18ec0:	231d      	movs	r3, #29
   18ec2:	18fb      	adds	r3, r7, r3
   18ec4:	781b      	ldrb	r3, [r3, #0]
   18ec6:	2b00      	cmp	r3, #0
   18ec8:	d003      	beq.n	18ed2 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   18eca:	231d      	movs	r3, #29
   18ecc:	18fb      	adds	r3, r7, r3
   18ece:	781b      	ldrb	r3, [r3, #0]
   18ed0:	e077      	b.n	18fc2 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   18ed2:	683b      	ldr	r3, [r7, #0]
   18ed4:	7e5b      	ldrb	r3, [r3, #25]
   18ed6:	2b00      	cmp	r3, #0
   18ed8:	d003      	beq.n	18ee2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   18eda:	683b      	ldr	r3, [r7, #0]
   18edc:	7e9a      	ldrb	r2, [r3, #26]
   18ede:	69bb      	ldr	r3, [r7, #24]
   18ee0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   18ee2:	687b      	ldr	r3, [r7, #4]
   18ee4:	0018      	movs	r0, r3
   18ee6:	4b3d      	ldr	r3, [pc, #244]	; (18fdc <_usart_set_config+0x2d4>)
   18ee8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   18eea:	230a      	movs	r3, #10
   18eec:	18fb      	adds	r3, r7, r3
   18eee:	881a      	ldrh	r2, [r3, #0]
   18ef0:	69bb      	ldr	r3, [r7, #24]
   18ef2:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   18ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18ef6:	68fb      	ldr	r3, [r7, #12]
   18ef8:	4313      	orrs	r3, r2
   18efa:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   18efc:	683b      	ldr	r3, [r7, #0]
   18efe:	2227      	movs	r2, #39	; 0x27
   18f00:	5c9b      	ldrb	r3, [r3, r2]
   18f02:	2201      	movs	r2, #1
   18f04:	4053      	eors	r3, r2
   18f06:	b2db      	uxtb	r3, r3
   18f08:	2b00      	cmp	r3, #0
   18f0a:	d003      	beq.n	18f14 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   18f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18f0e:	2204      	movs	r2, #4
   18f10:	4313      	orrs	r3, r2
   18f12:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   18f14:	683b      	ldr	r3, [r7, #0]
   18f16:	7e5b      	ldrb	r3, [r3, #25]
   18f18:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   18f1a:	683b      	ldr	r3, [r7, #0]
   18f1c:	7f1b      	ldrb	r3, [r3, #28]
   18f1e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   18f20:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   18f22:	683b      	ldr	r3, [r7, #0]
   18f24:	7f5b      	ldrb	r3, [r3, #29]
   18f26:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   18f28:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   18f2a:	683b      	ldr	r3, [r7, #0]
   18f2c:	2124      	movs	r1, #36	; 0x24
   18f2e:	5c5b      	ldrb	r3, [r3, r1]
   18f30:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   18f32:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   18f34:	683b      	ldr	r3, [r7, #0]
   18f36:	2125      	movs	r1, #37	; 0x25
   18f38:	5c5b      	ldrb	r3, [r3, r1]
   18f3a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   18f3c:	4313      	orrs	r3, r2
	ctrlb =  
   18f3e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   18f40:	683b      	ldr	r3, [r7, #0]
   18f42:	7a9b      	ldrb	r3, [r3, #10]
   18f44:	001a      	movs	r2, r3
   18f46:	6a3b      	ldr	r3, [r7, #32]
   18f48:	4313      	orrs	r3, r2
   18f4a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   18f4c:	683b      	ldr	r3, [r7, #0]
   18f4e:	7adb      	ldrb	r3, [r3, #11]
   18f50:	001a      	movs	r2, r3
   18f52:	6a3b      	ldr	r3, [r7, #32]
   18f54:	4313      	orrs	r3, r2
   18f56:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   18f58:	683b      	ldr	r3, [r7, #0]
   18f5a:	891b      	ldrh	r3, [r3, #8]
   18f5c:	2bff      	cmp	r3, #255	; 0xff
   18f5e:	d00b      	beq.n	18f78 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   18f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18f62:	2280      	movs	r2, #128	; 0x80
   18f64:	0452      	lsls	r2, r2, #17
   18f66:	4313      	orrs	r3, r2
   18f68:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   18f6a:	683b      	ldr	r3, [r7, #0]
   18f6c:	891b      	ldrh	r3, [r3, #8]
   18f6e:	001a      	movs	r2, r3
   18f70:	6a3b      	ldr	r3, [r7, #32]
   18f72:	4313      	orrs	r3, r2
   18f74:	623b      	str	r3, [r7, #32]
   18f76:	e008      	b.n	18f8a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   18f78:	683b      	ldr	r3, [r7, #0]
   18f7a:	7edb      	ldrb	r3, [r3, #27]
   18f7c:	2b00      	cmp	r3, #0
   18f7e:	d004      	beq.n	18f8a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   18f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18f82:	2280      	movs	r2, #128	; 0x80
   18f84:	04d2      	lsls	r2, r2, #19
   18f86:	4313      	orrs	r3, r2
   18f88:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   18f8a:	683b      	ldr	r3, [r7, #0]
   18f8c:	222c      	movs	r2, #44	; 0x2c
   18f8e:	5c9b      	ldrb	r3, [r3, r2]
   18f90:	2b00      	cmp	r3, #0
   18f92:	d103      	bne.n	18f9c <_usart_set_config+0x294>
   18f94:	4b12      	ldr	r3, [pc, #72]	; (18fe0 <_usart_set_config+0x2d8>)
   18f96:	4798      	blx	r3
   18f98:	1e03      	subs	r3, r0, #0
   18f9a:	d003      	beq.n	18fa4 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   18f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18f9e:	2280      	movs	r2, #128	; 0x80
   18fa0:	4313      	orrs	r3, r2
   18fa2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   18fa4:	687b      	ldr	r3, [r7, #4]
   18fa6:	0018      	movs	r0, r3
   18fa8:	4b0c      	ldr	r3, [pc, #48]	; (18fdc <_usart_set_config+0x2d4>)
   18faa:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   18fac:	69bb      	ldr	r3, [r7, #24]
   18fae:	6a3a      	ldr	r2, [r7, #32]
   18fb0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   18fb2:	687b      	ldr	r3, [r7, #4]
   18fb4:	0018      	movs	r0, r3
   18fb6:	4b09      	ldr	r3, [pc, #36]	; (18fdc <_usart_set_config+0x2d4>)
   18fb8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   18fba:	69bb      	ldr	r3, [r7, #24]
   18fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   18fbe:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   18fc0:	2300      	movs	r3, #0
}
   18fc2:	0018      	movs	r0, r3
   18fc4:	46bd      	mov	sp, r7
   18fc6:	b00a      	add	sp, #40	; 0x28
   18fc8:	bdb0      	pop	{r4, r5, r7, pc}
   18fca:	46c0      	nop			; (mov r8, r8)
   18fcc:	00018a65 	.word	0x00018a65
   18fd0:	0001a429 	.word	0x0001a429
   18fd4:	000185df 	.word	0x000185df
   18fd8:	0001865d 	.word	0x0001865d
   18fdc:	00018ce5 	.word	0x00018ce5
   18fe0:	00018ca5 	.word	0x00018ca5

00018fe4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   18fe4:	b590      	push	{r4, r7, lr}
   18fe6:	b093      	sub	sp, #76	; 0x4c
   18fe8:	af00      	add	r7, sp, #0
   18fea:	60f8      	str	r0, [r7, #12]
   18fec:	60b9      	str	r1, [r7, #8]
   18fee:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   18ff0:	233b      	movs	r3, #59	; 0x3b
   18ff2:	18fb      	adds	r3, r7, r3
   18ff4:	2200      	movs	r2, #0
   18ff6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   18ff8:	68fb      	ldr	r3, [r7, #12]
   18ffa:	68ba      	ldr	r2, [r7, #8]
   18ffc:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   18ffe:	68fb      	ldr	r3, [r7, #12]
   19000:	681b      	ldr	r3, [r3, #0]
   19002:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   19004:	68fb      	ldr	r3, [r7, #12]
   19006:	681b      	ldr	r3, [r3, #0]
   19008:	0018      	movs	r0, r3
   1900a:	4b86      	ldr	r3, [pc, #536]	; (19224 <usart_init+0x240>)
   1900c:	4798      	blx	r3
   1900e:	0003      	movs	r3, r0
   19010:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   19012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   19014:	3302      	adds	r3, #2
   19016:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   19018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1901a:	3314      	adds	r3, #20
   1901c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   1901e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   19020:	681b      	ldr	r3, [r3, #0]
   19022:	2201      	movs	r2, #1
   19024:	4013      	ands	r3, r2
   19026:	d001      	beq.n	1902c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   19028:	2305      	movs	r3, #5
   1902a:	e0f6      	b.n	1921a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   1902c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1902e:	681b      	ldr	r3, [r3, #0]
   19030:	2202      	movs	r2, #2
   19032:	4013      	ands	r3, r2
   19034:	d001      	beq.n	1903a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   19036:	231c      	movs	r3, #28
   19038:	e0ef      	b.n	1921a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1903a:	2201      	movs	r2, #1
   1903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1903e:	409a      	lsls	r2, r3
   19040:	0013      	movs	r3, r2
   19042:	0019      	movs	r1, r3
   19044:	2002      	movs	r0, #2
   19046:	4b78      	ldr	r3, [pc, #480]	; (19228 <usart_init+0x244>)
   19048:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1904a:	2324      	movs	r3, #36	; 0x24
   1904c:	18fb      	adds	r3, r7, r3
   1904e:	0018      	movs	r0, r3
   19050:	4b76      	ldr	r3, [pc, #472]	; (1922c <usart_init+0x248>)
   19052:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   19054:	687b      	ldr	r3, [r7, #4]
   19056:	222d      	movs	r2, #45	; 0x2d
   19058:	5c9a      	ldrb	r2, [r3, r2]
   1905a:	2324      	movs	r3, #36	; 0x24
   1905c:	18fb      	adds	r3, r7, r3
   1905e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   19060:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19062:	b2db      	uxtb	r3, r3
   19064:	2224      	movs	r2, #36	; 0x24
   19066:	18ba      	adds	r2, r7, r2
   19068:	0011      	movs	r1, r2
   1906a:	0018      	movs	r0, r3
   1906c:	4b70      	ldr	r3, [pc, #448]	; (19230 <usart_init+0x24c>)
   1906e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   19070:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19072:	b2db      	uxtb	r3, r3
   19074:	0018      	movs	r0, r3
   19076:	4b6f      	ldr	r3, [pc, #444]	; (19234 <usart_init+0x250>)
   19078:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1907a:	687b      	ldr	r3, [r7, #4]
   1907c:	222d      	movs	r2, #45	; 0x2d
   1907e:	5c9b      	ldrb	r3, [r3, r2]
   19080:	2100      	movs	r1, #0
   19082:	0018      	movs	r0, r3
   19084:	4b6c      	ldr	r3, [pc, #432]	; (19238 <usart_init+0x254>)
   19086:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   19088:	687b      	ldr	r3, [r7, #4]
   1908a:	7ada      	ldrb	r2, [r3, #11]
   1908c:	68fb      	ldr	r3, [r7, #12]
   1908e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   19090:	687b      	ldr	r3, [r7, #4]
   19092:	2224      	movs	r2, #36	; 0x24
   19094:	5c9a      	ldrb	r2, [r3, r2]
   19096:	68fb      	ldr	r3, [r7, #12]
   19098:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   1909a:	687b      	ldr	r3, [r7, #4]
   1909c:	2225      	movs	r2, #37	; 0x25
   1909e:	5c9a      	ldrb	r2, [r3, r2]
   190a0:	68fb      	ldr	r3, [r7, #12]
   190a2:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   190a4:	687b      	ldr	r3, [r7, #4]
   190a6:	7eda      	ldrb	r2, [r3, #27]
   190a8:	68fb      	ldr	r3, [r7, #12]
   190aa:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   190ac:	687b      	ldr	r3, [r7, #4]
   190ae:	7f1a      	ldrb	r2, [r3, #28]
   190b0:	68fb      	ldr	r3, [r7, #12]
   190b2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   190b4:	233b      	movs	r3, #59	; 0x3b
   190b6:	18fc      	adds	r4, r7, r3
   190b8:	687a      	ldr	r2, [r7, #4]
   190ba:	68fb      	ldr	r3, [r7, #12]
   190bc:	0011      	movs	r1, r2
   190be:	0018      	movs	r0, r3
   190c0:	4b5e      	ldr	r3, [pc, #376]	; (1923c <usart_init+0x258>)
   190c2:	4798      	blx	r3
   190c4:	0003      	movs	r3, r0
   190c6:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   190c8:	233b      	movs	r3, #59	; 0x3b
   190ca:	18fb      	adds	r3, r7, r3
   190cc:	781b      	ldrb	r3, [r3, #0]
   190ce:	2b00      	cmp	r3, #0
   190d0:	d003      	beq.n	190da <usart_init+0xf6>
		return status_code;
   190d2:	233b      	movs	r3, #59	; 0x3b
   190d4:	18fb      	adds	r3, r7, r3
   190d6:	781b      	ldrb	r3, [r3, #0]
   190d8:	e09f      	b.n	1921a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   190da:	2320      	movs	r3, #32
   190dc:	18fb      	adds	r3, r7, r3
   190de:	0018      	movs	r0, r3
   190e0:	4b57      	ldr	r3, [pc, #348]	; (19240 <usart_init+0x25c>)
   190e2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   190e4:	2320      	movs	r3, #32
   190e6:	18fb      	adds	r3, r7, r3
   190e8:	2200      	movs	r2, #0
   190ea:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   190ec:	2320      	movs	r3, #32
   190ee:	18fb      	adds	r3, r7, r3
   190f0:	2200      	movs	r2, #0
   190f2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   190f4:	687b      	ldr	r3, [r7, #4]
   190f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   190f8:	2310      	movs	r3, #16
   190fa:	18fb      	adds	r3, r7, r3
   190fc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   190fe:	687b      	ldr	r3, [r7, #4]
   19100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   19102:	2310      	movs	r3, #16
   19104:	18fb      	adds	r3, r7, r3
   19106:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   19108:	687b      	ldr	r3, [r7, #4]
   1910a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   1910c:	2310      	movs	r3, #16
   1910e:	18fb      	adds	r3, r7, r3
   19110:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   19112:	687b      	ldr	r3, [r7, #4]
   19114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   19116:	2310      	movs	r3, #16
   19118:	18fb      	adds	r3, r7, r3
   1911a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   1911c:	2347      	movs	r3, #71	; 0x47
   1911e:	18fb      	adds	r3, r7, r3
   19120:	2200      	movs	r2, #0
   19122:	701a      	strb	r2, [r3, #0]
   19124:	e02c      	b.n	19180 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   19126:	2347      	movs	r3, #71	; 0x47
   19128:	18fb      	adds	r3, r7, r3
   1912a:	781a      	ldrb	r2, [r3, #0]
   1912c:	2310      	movs	r3, #16
   1912e:	18fb      	adds	r3, r7, r3
   19130:	0092      	lsls	r2, r2, #2
   19132:	58d3      	ldr	r3, [r2, r3]
   19134:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   19136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19138:	2b00      	cmp	r3, #0
   1913a:	d109      	bne.n	19150 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   1913c:	2347      	movs	r3, #71	; 0x47
   1913e:	18fb      	adds	r3, r7, r3
   19140:	781a      	ldrb	r2, [r3, #0]
   19142:	68bb      	ldr	r3, [r7, #8]
   19144:	0011      	movs	r1, r2
   19146:	0018      	movs	r0, r3
   19148:	4b3e      	ldr	r3, [pc, #248]	; (19244 <usart_init+0x260>)
   1914a:	4798      	blx	r3
   1914c:	0003      	movs	r3, r0
   1914e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   19150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19152:	3301      	adds	r3, #1
   19154:	d00d      	beq.n	19172 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   19156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19158:	b2da      	uxtb	r2, r3
   1915a:	2320      	movs	r3, #32
   1915c:	18fb      	adds	r3, r7, r3
   1915e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   19160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   19162:	0c1b      	lsrs	r3, r3, #16
   19164:	b2db      	uxtb	r3, r3
   19166:	2220      	movs	r2, #32
   19168:	18ba      	adds	r2, r7, r2
   1916a:	0011      	movs	r1, r2
   1916c:	0018      	movs	r0, r3
   1916e:	4b36      	ldr	r3, [pc, #216]	; (19248 <usart_init+0x264>)
   19170:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   19172:	2347      	movs	r3, #71	; 0x47
   19174:	18fb      	adds	r3, r7, r3
   19176:	781a      	ldrb	r2, [r3, #0]
   19178:	2347      	movs	r3, #71	; 0x47
   1917a:	18fb      	adds	r3, r7, r3
   1917c:	3201      	adds	r2, #1
   1917e:	701a      	strb	r2, [r3, #0]
   19180:	2347      	movs	r3, #71	; 0x47
   19182:	18fb      	adds	r3, r7, r3
   19184:	781b      	ldrb	r3, [r3, #0]
   19186:	2b03      	cmp	r3, #3
   19188:	d9cd      	bls.n	19126 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   1918a:	2300      	movs	r3, #0
   1918c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1918e:	e00a      	b.n	191a6 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   19190:	68fa      	ldr	r2, [r7, #12]
   19192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   19194:	3302      	adds	r3, #2
   19196:	009b      	lsls	r3, r3, #2
   19198:	18d3      	adds	r3, r2, r3
   1919a:	3304      	adds	r3, #4
   1919c:	2200      	movs	r2, #0
   1919e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   191a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   191a2:	3301      	adds	r3, #1
   191a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   191a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   191a8:	2b05      	cmp	r3, #5
   191aa:	d9f1      	bls.n	19190 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   191ac:	68fb      	ldr	r3, [r7, #12]
   191ae:	2200      	movs	r2, #0
   191b0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   191b2:	68fb      	ldr	r3, [r7, #12]
   191b4:	2200      	movs	r2, #0
   191b6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   191b8:	68fb      	ldr	r3, [r7, #12]
   191ba:	2200      	movs	r2, #0
   191bc:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   191be:	68fb      	ldr	r3, [r7, #12]
   191c0:	2200      	movs	r2, #0
   191c2:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   191c4:	68fb      	ldr	r3, [r7, #12]
   191c6:	2230      	movs	r2, #48	; 0x30
   191c8:	2100      	movs	r1, #0
   191ca:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   191cc:	68fb      	ldr	r3, [r7, #12]
   191ce:	2231      	movs	r2, #49	; 0x31
   191d0:	2100      	movs	r1, #0
   191d2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   191d4:	68fb      	ldr	r3, [r7, #12]
   191d6:	2232      	movs	r2, #50	; 0x32
   191d8:	2100      	movs	r1, #0
   191da:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   191dc:	68fb      	ldr	r3, [r7, #12]
   191de:	2233      	movs	r2, #51	; 0x33
   191e0:	2100      	movs	r1, #0
   191e2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   191e4:	68fb      	ldr	r3, [r7, #12]
   191e6:	681b      	ldr	r3, [r3, #0]
   191e8:	2227      	movs	r2, #39	; 0x27
   191ea:	18bc      	adds	r4, r7, r2
   191ec:	0018      	movs	r0, r3
   191ee:	4b0d      	ldr	r3, [pc, #52]	; (19224 <usart_init+0x240>)
   191f0:	4798      	blx	r3
   191f2:	0003      	movs	r3, r0
   191f4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   191f6:	4a15      	ldr	r2, [pc, #84]	; (1924c <usart_init+0x268>)
   191f8:	2327      	movs	r3, #39	; 0x27
   191fa:	18fb      	adds	r3, r7, r3
   191fc:	781b      	ldrb	r3, [r3, #0]
   191fe:	0011      	movs	r1, r2
   19200:	0018      	movs	r0, r3
   19202:	4b13      	ldr	r3, [pc, #76]	; (19250 <usart_init+0x26c>)
   19204:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   19206:	2327      	movs	r3, #39	; 0x27
   19208:	18fb      	adds	r3, r7, r3
   1920a:	781a      	ldrb	r2, [r3, #0]
   1920c:	4b11      	ldr	r3, [pc, #68]	; (19254 <usart_init+0x270>)
   1920e:	0092      	lsls	r2, r2, #2
   19210:	68f9      	ldr	r1, [r7, #12]
   19212:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   19214:	233b      	movs	r3, #59	; 0x3b
   19216:	18fb      	adds	r3, r7, r3
   19218:	781b      	ldrb	r3, [r3, #0]
}
   1921a:	0018      	movs	r0, r3
   1921c:	46bd      	mov	sp, r7
   1921e:	b013      	add	sp, #76	; 0x4c
   19220:	bd90      	pop	{r4, r7, pc}
   19222:	46c0      	nop			; (mov r8, r8)
   19224:	00018a65 	.word	0x00018a65
   19228:	00018c21 	.word	0x00018c21
   1922c:	00018c09 	.word	0x00018c09
   19230:	0001a305 	.word	0x0001a305
   19234:	0001a349 	.word	0x0001a349
   19238:	0001881d 	.word	0x0001881d
   1923c:	00018d09 	.word	0x00018d09
   19240:	00018c7d 	.word	0x00018c7d
   19244:	000188a9 	.word	0x000188a9
   19248:	0001a665 	.word	0x0001a665
   1924c:	000194c1 	.word	0x000194c1
   19250:	00018ac9 	.word	0x00018ac9
   19254:	20003310 	.word	0x20003310

00019258 <system_interrupt_enter_critical_section>:
{
   19258:	b580      	push	{r7, lr}
   1925a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1925c:	4b02      	ldr	r3, [pc, #8]	; (19268 <system_interrupt_enter_critical_section+0x10>)
   1925e:	4798      	blx	r3
}
   19260:	46c0      	nop			; (mov r8, r8)
   19262:	46bd      	mov	sp, r7
   19264:	bd80      	pop	{r7, pc}
   19266:	46c0      	nop			; (mov r8, r8)
   19268:	00017e59 	.word	0x00017e59

0001926c <system_interrupt_leave_critical_section>:
{
   1926c:	b580      	push	{r7, lr}
   1926e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   19270:	4b02      	ldr	r3, [pc, #8]	; (1927c <system_interrupt_leave_critical_section+0x10>)
   19272:	4798      	blx	r3
}
   19274:	46c0      	nop			; (mov r8, r8)
   19276:	46bd      	mov	sp, r7
   19278:	bd80      	pop	{r7, pc}
   1927a:	46c0      	nop			; (mov r8, r8)
   1927c:	00017ead 	.word	0x00017ead

00019280 <usart_is_syncing>:
{
   19280:	b580      	push	{r7, lr}
   19282:	b084      	sub	sp, #16
   19284:	af00      	add	r7, sp, #0
   19286:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   19288:	687b      	ldr	r3, [r7, #4]
   1928a:	681b      	ldr	r3, [r3, #0]
   1928c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1928e:	68fb      	ldr	r3, [r7, #12]
   19290:	69db      	ldr	r3, [r3, #28]
   19292:	1e5a      	subs	r2, r3, #1
   19294:	4193      	sbcs	r3, r2
   19296:	b2db      	uxtb	r3, r3
}
   19298:	0018      	movs	r0, r3
   1929a:	46bd      	mov	sp, r7
   1929c:	b004      	add	sp, #16
   1929e:	bd80      	pop	{r7, pc}

000192a0 <_usart_wait_for_sync>:
{
   192a0:	b580      	push	{r7, lr}
   192a2:	b082      	sub	sp, #8
   192a4:	af00      	add	r7, sp, #0
   192a6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   192a8:	46c0      	nop			; (mov r8, r8)
   192aa:	687b      	ldr	r3, [r7, #4]
   192ac:	0018      	movs	r0, r3
   192ae:	4b04      	ldr	r3, [pc, #16]	; (192c0 <_usart_wait_for_sync+0x20>)
   192b0:	4798      	blx	r3
   192b2:	1e03      	subs	r3, r0, #0
   192b4:	d1f9      	bne.n	192aa <_usart_wait_for_sync+0xa>
}
   192b6:	46c0      	nop			; (mov r8, r8)
   192b8:	46bd      	mov	sp, r7
   192ba:	b002      	add	sp, #8
   192bc:	bd80      	pop	{r7, pc}
   192be:	46c0      	nop			; (mov r8, r8)
   192c0:	00019281 	.word	0x00019281

000192c4 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   192c4:	b580      	push	{r7, lr}
   192c6:	b086      	sub	sp, #24
   192c8:	af00      	add	r7, sp, #0
   192ca:	60f8      	str	r0, [r7, #12]
   192cc:	60b9      	str	r1, [r7, #8]
   192ce:	1dbb      	adds	r3, r7, #6
   192d0:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   192d2:	68fb      	ldr	r3, [r7, #12]
   192d4:	681b      	ldr	r3, [r3, #0]
   192d6:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   192d8:	4b0f      	ldr	r3, [pc, #60]	; (19318 <_usart_write_buffer+0x54>)
   192da:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   192dc:	68fb      	ldr	r3, [r7, #12]
   192de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   192e0:	b29b      	uxth	r3, r3
   192e2:	2b00      	cmp	r3, #0
   192e4:	d003      	beq.n	192ee <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   192e6:	4b0d      	ldr	r3, [pc, #52]	; (1931c <_usart_write_buffer+0x58>)
   192e8:	4798      	blx	r3
		return STATUS_BUSY;
   192ea:	2305      	movs	r3, #5
   192ec:	e010      	b.n	19310 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   192ee:	68fb      	ldr	r3, [r7, #12]
   192f0:	1dba      	adds	r2, r7, #6
   192f2:	8812      	ldrh	r2, [r2, #0]
   192f4:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   192f6:	4b09      	ldr	r3, [pc, #36]	; (1931c <_usart_write_buffer+0x58>)
   192f8:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   192fa:	68fb      	ldr	r3, [r7, #12]
   192fc:	68ba      	ldr	r2, [r7, #8]
   192fe:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   19300:	68fb      	ldr	r3, [r7, #12]
   19302:	2233      	movs	r2, #51	; 0x33
   19304:	2105      	movs	r1, #5
   19306:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   19308:	697b      	ldr	r3, [r7, #20]
   1930a:	2201      	movs	r2, #1
   1930c:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   1930e:	2300      	movs	r3, #0
}
   19310:	0018      	movs	r0, r3
   19312:	46bd      	mov	sp, r7
   19314:	b006      	add	sp, #24
   19316:	bd80      	pop	{r7, pc}
   19318:	00019259 	.word	0x00019259
   1931c:	0001926d 	.word	0x0001926d

00019320 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   19320:	b580      	push	{r7, lr}
   19322:	b086      	sub	sp, #24
   19324:	af00      	add	r7, sp, #0
   19326:	60f8      	str	r0, [r7, #12]
   19328:	60b9      	str	r1, [r7, #8]
   1932a:	1dbb      	adds	r3, r7, #6
   1932c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1932e:	68fb      	ldr	r3, [r7, #12]
   19330:	681b      	ldr	r3, [r3, #0]
   19332:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   19334:	4b16      	ldr	r3, [pc, #88]	; (19390 <_usart_read_buffer+0x70>)
   19336:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   19338:	68fb      	ldr	r3, [r7, #12]
   1933a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   1933c:	b29b      	uxth	r3, r3
   1933e:	2b00      	cmp	r3, #0
   19340:	d003      	beq.n	1934a <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   19342:	4b14      	ldr	r3, [pc, #80]	; (19394 <_usart_read_buffer+0x74>)
   19344:	4798      	blx	r3
		return STATUS_BUSY;
   19346:	2305      	movs	r3, #5
   19348:	e01e      	b.n	19388 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   1934a:	68fb      	ldr	r3, [r7, #12]
   1934c:	1dba      	adds	r2, r7, #6
   1934e:	8812      	ldrh	r2, [r2, #0]
   19350:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   19352:	4b10      	ldr	r3, [pc, #64]	; (19394 <_usart_read_buffer+0x74>)
   19354:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   19356:	68fb      	ldr	r3, [r7, #12]
   19358:	68ba      	ldr	r2, [r7, #8]
   1935a:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   1935c:	68fb      	ldr	r3, [r7, #12]
   1935e:	2232      	movs	r2, #50	; 0x32
   19360:	2105      	movs	r1, #5
   19362:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   19364:	697b      	ldr	r3, [r7, #20]
   19366:	2204      	movs	r2, #4
   19368:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   1936a:	68fb      	ldr	r3, [r7, #12]
   1936c:	7a1b      	ldrb	r3, [r3, #8]
   1936e:	2b00      	cmp	r3, #0
   19370:	d002      	beq.n	19378 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   19372:	697b      	ldr	r3, [r7, #20]
   19374:	2220      	movs	r2, #32
   19376:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   19378:	68fb      	ldr	r3, [r7, #12]
   1937a:	7a5b      	ldrb	r3, [r3, #9]
   1937c:	2b00      	cmp	r3, #0
   1937e:	d002      	beq.n	19386 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   19380:	697b      	ldr	r3, [r7, #20]
   19382:	2208      	movs	r2, #8
   19384:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   19386:	2300      	movs	r3, #0
}
   19388:	0018      	movs	r0, r3
   1938a:	46bd      	mov	sp, r7
   1938c:	b006      	add	sp, #24
   1938e:	bd80      	pop	{r7, pc}
   19390:	00019259 	.word	0x00019259
   19394:	0001926d 	.word	0x0001926d

00019398 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   19398:	b580      	push	{r7, lr}
   1939a:	b084      	sub	sp, #16
   1939c:	af00      	add	r7, sp, #0
   1939e:	60f8      	str	r0, [r7, #12]
   193a0:	60b9      	str	r1, [r7, #8]
   193a2:	1dfb      	adds	r3, r7, #7
   193a4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   193a6:	1dfb      	adds	r3, r7, #7
   193a8:	781b      	ldrb	r3, [r3, #0]
   193aa:	68fa      	ldr	r2, [r7, #12]
   193ac:	3302      	adds	r3, #2
   193ae:	009b      	lsls	r3, r3, #2
   193b0:	18d3      	adds	r3, r2, r3
   193b2:	3304      	adds	r3, #4
   193b4:	68ba      	ldr	r2, [r7, #8]
   193b6:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   193b8:	68fb      	ldr	r3, [r7, #12]
   193ba:	2230      	movs	r2, #48	; 0x30
   193bc:	5c9b      	ldrb	r3, [r3, r2]
   193be:	b25a      	sxtb	r2, r3
   193c0:	1dfb      	adds	r3, r7, #7
   193c2:	781b      	ldrb	r3, [r3, #0]
   193c4:	2101      	movs	r1, #1
   193c6:	4099      	lsls	r1, r3
   193c8:	000b      	movs	r3, r1
   193ca:	b25b      	sxtb	r3, r3
   193cc:	4313      	orrs	r3, r2
   193ce:	b25b      	sxtb	r3, r3
   193d0:	b2d9      	uxtb	r1, r3
   193d2:	68fb      	ldr	r3, [r7, #12]
   193d4:	2230      	movs	r2, #48	; 0x30
   193d6:	5499      	strb	r1, [r3, r2]
}
   193d8:	46c0      	nop			; (mov r8, r8)
   193da:	46bd      	mov	sp, r7
   193dc:	b004      	add	sp, #16
   193de:	bd80      	pop	{r7, pc}

000193e0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   193e0:	b580      	push	{r7, lr}
   193e2:	b084      	sub	sp, #16
   193e4:	af00      	add	r7, sp, #0
   193e6:	60f8      	str	r0, [r7, #12]
   193e8:	60b9      	str	r1, [r7, #8]
   193ea:	1dbb      	adds	r3, r7, #6
   193ec:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   193ee:	1dbb      	adds	r3, r7, #6
   193f0:	881b      	ldrh	r3, [r3, #0]
   193f2:	2b00      	cmp	r3, #0
   193f4:	d101      	bne.n	193fa <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   193f6:	2317      	movs	r3, #23
   193f8:	e010      	b.n	1941c <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   193fa:	68fb      	ldr	r3, [r7, #12]
   193fc:	79db      	ldrb	r3, [r3, #7]
   193fe:	2201      	movs	r2, #1
   19400:	4053      	eors	r3, r2
   19402:	b2db      	uxtb	r3, r3
   19404:	2b00      	cmp	r3, #0
   19406:	d001      	beq.n	1940c <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   19408:	231c      	movs	r3, #28
   1940a:	e007      	b.n	1941c <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   1940c:	1dbb      	adds	r3, r7, #6
   1940e:	881a      	ldrh	r2, [r3, #0]
   19410:	68b9      	ldr	r1, [r7, #8]
   19412:	68fb      	ldr	r3, [r7, #12]
   19414:	0018      	movs	r0, r3
   19416:	4b03      	ldr	r3, [pc, #12]	; (19424 <usart_write_buffer_job+0x44>)
   19418:	4798      	blx	r3
   1941a:	0003      	movs	r3, r0
}
   1941c:	0018      	movs	r0, r3
   1941e:	46bd      	mov	sp, r7
   19420:	b004      	add	sp, #16
   19422:	bd80      	pop	{r7, pc}
   19424:	000192c5 	.word	0x000192c5

00019428 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   19428:	b580      	push	{r7, lr}
   1942a:	b084      	sub	sp, #16
   1942c:	af00      	add	r7, sp, #0
   1942e:	60f8      	str	r0, [r7, #12]
   19430:	60b9      	str	r1, [r7, #8]
   19432:	1dbb      	adds	r3, r7, #6
   19434:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   19436:	1dbb      	adds	r3, r7, #6
   19438:	881b      	ldrh	r3, [r3, #0]
   1943a:	2b00      	cmp	r3, #0
   1943c:	d101      	bne.n	19442 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   1943e:	2317      	movs	r3, #23
   19440:	e010      	b.n	19464 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   19442:	68fb      	ldr	r3, [r7, #12]
   19444:	799b      	ldrb	r3, [r3, #6]
   19446:	2201      	movs	r2, #1
   19448:	4053      	eors	r3, r2
   1944a:	b2db      	uxtb	r3, r3
   1944c:	2b00      	cmp	r3, #0
   1944e:	d001      	beq.n	19454 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   19450:	231c      	movs	r3, #28
   19452:	e007      	b.n	19464 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   19454:	1dbb      	adds	r3, r7, #6
   19456:	881a      	ldrh	r2, [r3, #0]
   19458:	68b9      	ldr	r1, [r7, #8]
   1945a:	68fb      	ldr	r3, [r7, #12]
   1945c:	0018      	movs	r0, r3
   1945e:	4b03      	ldr	r3, [pc, #12]	; (1946c <usart_read_buffer_job+0x44>)
   19460:	4798      	blx	r3
   19462:	0003      	movs	r3, r0
}
   19464:	0018      	movs	r0, r3
   19466:	46bd      	mov	sp, r7
   19468:	b004      	add	sp, #16
   1946a:	bd80      	pop	{r7, pc}
   1946c:	00019321 	.word	0x00019321

00019470 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   19470:	b580      	push	{r7, lr}
   19472:	b084      	sub	sp, #16
   19474:	af00      	add	r7, sp, #0
   19476:	6078      	str	r0, [r7, #4]
   19478:	000a      	movs	r2, r1
   1947a:	1cfb      	adds	r3, r7, #3
   1947c:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   1947e:	1cfb      	adds	r3, r7, #3
   19480:	781b      	ldrb	r3, [r3, #0]
   19482:	2b00      	cmp	r3, #0
   19484:	d002      	beq.n	1948c <usart_get_job_status+0x1c>
   19486:	2b01      	cmp	r3, #1
   19488:	d007      	beq.n	1949a <usart_get_job_status+0x2a>
   1948a:	e00d      	b.n	194a8 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   1948c:	230f      	movs	r3, #15
   1948e:	18fb      	adds	r3, r7, r3
   19490:	687a      	ldr	r2, [r7, #4]
   19492:	2132      	movs	r1, #50	; 0x32
   19494:	5c52      	ldrb	r2, [r2, r1]
   19496:	701a      	strb	r2, [r3, #0]
			break;
   19498:	e00b      	b.n	194b2 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   1949a:	230f      	movs	r3, #15
   1949c:	18fb      	adds	r3, r7, r3
   1949e:	687a      	ldr	r2, [r7, #4]
   194a0:	2133      	movs	r1, #51	; 0x33
   194a2:	5c52      	ldrb	r2, [r2, r1]
   194a4:	701a      	strb	r2, [r3, #0]
			break;
   194a6:	e004      	b.n	194b2 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   194a8:	230f      	movs	r3, #15
   194aa:	18fb      	adds	r3, r7, r3
   194ac:	2217      	movs	r2, #23
   194ae:	701a      	strb	r2, [r3, #0]
			break;
   194b0:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   194b2:	230f      	movs	r3, #15
   194b4:	18fb      	adds	r3, r7, r3
   194b6:	781b      	ldrb	r3, [r3, #0]
}
   194b8:	0018      	movs	r0, r3
   194ba:	46bd      	mov	sp, r7
   194bc:	b004      	add	sp, #16
   194be:	bd80      	pop	{r7, pc}

000194c0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   194c0:	b580      	push	{r7, lr}
   194c2:	b088      	sub	sp, #32
   194c4:	af00      	add	r7, sp, #0
   194c6:	0002      	movs	r2, r0
   194c8:	1dfb      	adds	r3, r7, #7
   194ca:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   194cc:	1dfb      	adds	r3, r7, #7
   194ce:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   194d0:	4ba3      	ldr	r3, [pc, #652]	; (19760 <_usart_interrupt_handler+0x2a0>)
   194d2:	0092      	lsls	r2, r2, #2
   194d4:	58d3      	ldr	r3, [r2, r3]
   194d6:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   194d8:	69bb      	ldr	r3, [r7, #24]
   194da:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   194dc:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   194de:	69bb      	ldr	r3, [r7, #24]
   194e0:	0018      	movs	r0, r3
   194e2:	4ba0      	ldr	r3, [pc, #640]	; (19764 <_usart_interrupt_handler+0x2a4>)
   194e4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   194e6:	697b      	ldr	r3, [r7, #20]
   194e8:	7e1b      	ldrb	r3, [r3, #24]
   194ea:	b2da      	uxtb	r2, r3
   194ec:	2312      	movs	r3, #18
   194ee:	18fb      	adds	r3, r7, r3
   194f0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   194f2:	697b      	ldr	r3, [r7, #20]
   194f4:	7d9b      	ldrb	r3, [r3, #22]
   194f6:	b2db      	uxtb	r3, r3
   194f8:	b29a      	uxth	r2, r3
   194fa:	2312      	movs	r3, #18
   194fc:	18fb      	adds	r3, r7, r3
   194fe:	2112      	movs	r1, #18
   19500:	1879      	adds	r1, r7, r1
   19502:	8809      	ldrh	r1, [r1, #0]
   19504:	400a      	ands	r2, r1
   19506:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   19508:	69bb      	ldr	r3, [r7, #24]
   1950a:	2230      	movs	r2, #48	; 0x30
   1950c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   1950e:	69ba      	ldr	r2, [r7, #24]
   19510:	2131      	movs	r1, #49	; 0x31
   19512:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   19514:	4013      	ands	r3, r2
   19516:	b2da      	uxtb	r2, r3
   19518:	2310      	movs	r3, #16
   1951a:	18fb      	adds	r3, r7, r3
   1951c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   1951e:	2312      	movs	r3, #18
   19520:	18fb      	adds	r3, r7, r3
   19522:	881b      	ldrh	r3, [r3, #0]
   19524:	2201      	movs	r2, #1
   19526:	4013      	ands	r3, r2
   19528:	d044      	beq.n	195b4 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   1952a:	69bb      	ldr	r3, [r7, #24]
   1952c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   1952e:	b29b      	uxth	r3, r3
   19530:	2b00      	cmp	r3, #0
   19532:	d03c      	beq.n	195ae <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   19534:	69bb      	ldr	r3, [r7, #24]
   19536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19538:	781b      	ldrb	r3, [r3, #0]
   1953a:	b2da      	uxtb	r2, r3
   1953c:	231c      	movs	r3, #28
   1953e:	18fb      	adds	r3, r7, r3
   19540:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   19542:	69bb      	ldr	r3, [r7, #24]
   19544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19546:	1c5a      	adds	r2, r3, #1
   19548:	69bb      	ldr	r3, [r7, #24]
   1954a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1954c:	69bb      	ldr	r3, [r7, #24]
   1954e:	795b      	ldrb	r3, [r3, #5]
   19550:	2b01      	cmp	r3, #1
   19552:	d113      	bne.n	1957c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   19554:	69bb      	ldr	r3, [r7, #24]
   19556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19558:	781b      	ldrb	r3, [r3, #0]
   1955a:	b2db      	uxtb	r3, r3
   1955c:	021b      	lsls	r3, r3, #8
   1955e:	b21a      	sxth	r2, r3
   19560:	231c      	movs	r3, #28
   19562:	18fb      	adds	r3, r7, r3
   19564:	2100      	movs	r1, #0
   19566:	5e5b      	ldrsh	r3, [r3, r1]
   19568:	4313      	orrs	r3, r2
   1956a:	b21a      	sxth	r2, r3
   1956c:	231c      	movs	r3, #28
   1956e:	18fb      	adds	r3, r7, r3
   19570:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   19572:	69bb      	ldr	r3, [r7, #24]
   19574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19576:	1c5a      	adds	r2, r3, #1
   19578:	69bb      	ldr	r3, [r7, #24]
   1957a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   1957c:	231c      	movs	r3, #28
   1957e:	18fb      	adds	r3, r7, r3
   19580:	881b      	ldrh	r3, [r3, #0]
   19582:	05db      	lsls	r3, r3, #23
   19584:	0ddb      	lsrs	r3, r3, #23
   19586:	b29a      	uxth	r2, r3
   19588:	697b      	ldr	r3, [r7, #20]
   1958a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   1958c:	69bb      	ldr	r3, [r7, #24]
   1958e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   19590:	b29b      	uxth	r3, r3
   19592:	3b01      	subs	r3, #1
   19594:	b29b      	uxth	r3, r3
   19596:	69ba      	ldr	r2, [r7, #24]
   19598:	1c19      	adds	r1, r3, #0
   1959a:	85d1      	strh	r1, [r2, #46]	; 0x2e
   1959c:	2b00      	cmp	r3, #0
   1959e:	d109      	bne.n	195b4 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   195a0:	697b      	ldr	r3, [r7, #20]
   195a2:	2201      	movs	r2, #1
   195a4:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   195a6:	697b      	ldr	r3, [r7, #20]
   195a8:	2202      	movs	r2, #2
   195aa:	759a      	strb	r2, [r3, #22]
   195ac:	e002      	b.n	195b4 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   195ae:	697b      	ldr	r3, [r7, #20]
   195b0:	2201      	movs	r2, #1
   195b2:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   195b4:	2312      	movs	r3, #18
   195b6:	18fb      	adds	r3, r7, r3
   195b8:	881b      	ldrh	r3, [r3, #0]
   195ba:	2202      	movs	r2, #2
   195bc:	4013      	ands	r3, r2
   195be:	d011      	beq.n	195e4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   195c0:	697b      	ldr	r3, [r7, #20]
   195c2:	2202      	movs	r2, #2
   195c4:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   195c6:	69bb      	ldr	r3, [r7, #24]
   195c8:	2233      	movs	r2, #51	; 0x33
   195ca:	2100      	movs	r1, #0
   195cc:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   195ce:	2310      	movs	r3, #16
   195d0:	18fb      	adds	r3, r7, r3
   195d2:	881b      	ldrh	r3, [r3, #0]
   195d4:	2201      	movs	r2, #1
   195d6:	4013      	ands	r3, r2
   195d8:	d004      	beq.n	195e4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   195da:	69bb      	ldr	r3, [r7, #24]
   195dc:	68db      	ldr	r3, [r3, #12]
   195de:	69ba      	ldr	r2, [r7, #24]
   195e0:	0010      	movs	r0, r2
   195e2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   195e4:	2312      	movs	r3, #18
   195e6:	18fb      	adds	r3, r7, r3
   195e8:	881b      	ldrh	r3, [r3, #0]
   195ea:	2204      	movs	r2, #4
   195ec:	4013      	ands	r3, r2
   195ee:	d100      	bne.n	195f2 <_usart_interrupt_handler+0x132>
   195f0:	e0bd      	b.n	1976e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   195f2:	69bb      	ldr	r3, [r7, #24]
   195f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   195f6:	b29b      	uxth	r3, r3
   195f8:	2b00      	cmp	r3, #0
   195fa:	d100      	bne.n	195fe <_usart_interrupt_handler+0x13e>
   195fc:	e0b4      	b.n	19768 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   195fe:	697b      	ldr	r3, [r7, #20]
   19600:	8b5b      	ldrh	r3, [r3, #26]
   19602:	b29b      	uxth	r3, r3
   19604:	b2da      	uxtb	r2, r3
   19606:	231f      	movs	r3, #31
   19608:	18fb      	adds	r3, r7, r3
   1960a:	213f      	movs	r1, #63	; 0x3f
   1960c:	400a      	ands	r2, r1
   1960e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   19610:	231f      	movs	r3, #31
   19612:	18fb      	adds	r3, r7, r3
   19614:	781b      	ldrb	r3, [r3, #0]
   19616:	2208      	movs	r2, #8
   19618:	4013      	ands	r3, r2
   1961a:	d007      	beq.n	1962c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   1961c:	231f      	movs	r3, #31
   1961e:	18fb      	adds	r3, r7, r3
   19620:	221f      	movs	r2, #31
   19622:	18ba      	adds	r2, r7, r2
   19624:	7812      	ldrb	r2, [r2, #0]
   19626:	2108      	movs	r1, #8
   19628:	438a      	bics	r2, r1
   1962a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   1962c:	231f      	movs	r3, #31
   1962e:	18fb      	adds	r3, r7, r3
   19630:	781b      	ldrb	r3, [r3, #0]
   19632:	2b00      	cmp	r3, #0
   19634:	d050      	beq.n	196d8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   19636:	231f      	movs	r3, #31
   19638:	18fb      	adds	r3, r7, r3
   1963a:	781b      	ldrb	r3, [r3, #0]
   1963c:	2202      	movs	r2, #2
   1963e:	4013      	ands	r3, r2
   19640:	d007      	beq.n	19652 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   19642:	69bb      	ldr	r3, [r7, #24]
   19644:	2232      	movs	r2, #50	; 0x32
   19646:	211a      	movs	r1, #26
   19648:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   1964a:	697b      	ldr	r3, [r7, #20]
   1964c:	2202      	movs	r2, #2
   1964e:	835a      	strh	r2, [r3, #26]
   19650:	e036      	b.n	196c0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   19652:	231f      	movs	r3, #31
   19654:	18fb      	adds	r3, r7, r3
   19656:	781b      	ldrb	r3, [r3, #0]
   19658:	2204      	movs	r2, #4
   1965a:	4013      	ands	r3, r2
   1965c:	d007      	beq.n	1966e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   1965e:	69bb      	ldr	r3, [r7, #24]
   19660:	2232      	movs	r2, #50	; 0x32
   19662:	211e      	movs	r1, #30
   19664:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   19666:	697b      	ldr	r3, [r7, #20]
   19668:	2204      	movs	r2, #4
   1966a:	835a      	strh	r2, [r3, #26]
   1966c:	e028      	b.n	196c0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   1966e:	231f      	movs	r3, #31
   19670:	18fb      	adds	r3, r7, r3
   19672:	781b      	ldrb	r3, [r3, #0]
   19674:	2201      	movs	r2, #1
   19676:	4013      	ands	r3, r2
   19678:	d007      	beq.n	1968a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   1967a:	69bb      	ldr	r3, [r7, #24]
   1967c:	2232      	movs	r2, #50	; 0x32
   1967e:	2113      	movs	r1, #19
   19680:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   19682:	697b      	ldr	r3, [r7, #20]
   19684:	2201      	movs	r2, #1
   19686:	835a      	strh	r2, [r3, #26]
   19688:	e01a      	b.n	196c0 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   1968a:	231f      	movs	r3, #31
   1968c:	18fb      	adds	r3, r7, r3
   1968e:	781b      	ldrb	r3, [r3, #0]
   19690:	2210      	movs	r2, #16
   19692:	4013      	ands	r3, r2
   19694:	d007      	beq.n	196a6 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   19696:	69bb      	ldr	r3, [r7, #24]
   19698:	2232      	movs	r2, #50	; 0x32
   1969a:	2142      	movs	r1, #66	; 0x42
   1969c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   1969e:	697b      	ldr	r3, [r7, #20]
   196a0:	2210      	movs	r2, #16
   196a2:	835a      	strh	r2, [r3, #26]
   196a4:	e00c      	b.n	196c0 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   196a6:	231f      	movs	r3, #31
   196a8:	18fb      	adds	r3, r7, r3
   196aa:	781b      	ldrb	r3, [r3, #0]
   196ac:	2220      	movs	r2, #32
   196ae:	4013      	ands	r3, r2
   196b0:	d006      	beq.n	196c0 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   196b2:	69bb      	ldr	r3, [r7, #24]
   196b4:	2232      	movs	r2, #50	; 0x32
   196b6:	2141      	movs	r1, #65	; 0x41
   196b8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   196ba:	697b      	ldr	r3, [r7, #20]
   196bc:	2220      	movs	r2, #32
   196be:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   196c0:	2310      	movs	r3, #16
   196c2:	18fb      	adds	r3, r7, r3
   196c4:	881b      	ldrh	r3, [r3, #0]
   196c6:	2204      	movs	r2, #4
   196c8:	4013      	ands	r3, r2
				if (callback_status
   196ca:	d050      	beq.n	1976e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   196cc:	69bb      	ldr	r3, [r7, #24]
   196ce:	695b      	ldr	r3, [r3, #20]
   196d0:	69ba      	ldr	r2, [r7, #24]
   196d2:	0010      	movs	r0, r2
   196d4:	4798      	blx	r3
   196d6:	e04a      	b.n	1976e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   196d8:	697b      	ldr	r3, [r7, #20]
   196da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   196dc:	b29a      	uxth	r2, r3
   196de:	230e      	movs	r3, #14
   196e0:	18fb      	adds	r3, r7, r3
   196e2:	05d2      	lsls	r2, r2, #23
   196e4:	0dd2      	lsrs	r2, r2, #23
   196e6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   196e8:	69bb      	ldr	r3, [r7, #24]
   196ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   196ec:	220e      	movs	r2, #14
   196ee:	18ba      	adds	r2, r7, r2
   196f0:	8812      	ldrh	r2, [r2, #0]
   196f2:	b2d2      	uxtb	r2, r2
   196f4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   196f6:	69bb      	ldr	r3, [r7, #24]
   196f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   196fa:	1c5a      	adds	r2, r3, #1
   196fc:	69bb      	ldr	r3, [r7, #24]
   196fe:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   19700:	69bb      	ldr	r3, [r7, #24]
   19702:	795b      	ldrb	r3, [r3, #5]
   19704:	2b01      	cmp	r3, #1
   19706:	d10d      	bne.n	19724 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   19708:	69bb      	ldr	r3, [r7, #24]
   1970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1970c:	220e      	movs	r2, #14
   1970e:	18ba      	adds	r2, r7, r2
   19710:	8812      	ldrh	r2, [r2, #0]
   19712:	0a12      	lsrs	r2, r2, #8
   19714:	b292      	uxth	r2, r2
   19716:	b2d2      	uxtb	r2, r2
   19718:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   1971a:	69bb      	ldr	r3, [r7, #24]
   1971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1971e:	1c5a      	adds	r2, r3, #1
   19720:	69bb      	ldr	r3, [r7, #24]
   19722:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   19724:	69bb      	ldr	r3, [r7, #24]
   19726:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   19728:	b29b      	uxth	r3, r3
   1972a:	3b01      	subs	r3, #1
   1972c:	b29b      	uxth	r3, r3
   1972e:	69ba      	ldr	r2, [r7, #24]
   19730:	1c19      	adds	r1, r3, #0
   19732:	8591      	strh	r1, [r2, #44]	; 0x2c
   19734:	2b00      	cmp	r3, #0
   19736:	d11a      	bne.n	1976e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   19738:	697b      	ldr	r3, [r7, #20]
   1973a:	2204      	movs	r2, #4
   1973c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   1973e:	69bb      	ldr	r3, [r7, #24]
   19740:	2232      	movs	r2, #50	; 0x32
   19742:	2100      	movs	r1, #0
   19744:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   19746:	2310      	movs	r3, #16
   19748:	18fb      	adds	r3, r7, r3
   1974a:	881b      	ldrh	r3, [r3, #0]
   1974c:	2202      	movs	r2, #2
   1974e:	4013      	ands	r3, r2
					if (callback_status
   19750:	d00d      	beq.n	1976e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   19752:	69bb      	ldr	r3, [r7, #24]
   19754:	691b      	ldr	r3, [r3, #16]
   19756:	69ba      	ldr	r2, [r7, #24]
   19758:	0010      	movs	r0, r2
   1975a:	4798      	blx	r3
   1975c:	e007      	b.n	1976e <_usart_interrupt_handler+0x2ae>
   1975e:	46c0      	nop			; (mov r8, r8)
   19760:	20003310 	.word	0x20003310
   19764:	000192a1 	.word	0x000192a1
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   19768:	697b      	ldr	r3, [r7, #20]
   1976a:	2204      	movs	r2, #4
   1976c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   1976e:	2312      	movs	r3, #18
   19770:	18fb      	adds	r3, r7, r3
   19772:	881b      	ldrh	r3, [r3, #0]
   19774:	2210      	movs	r2, #16
   19776:	4013      	ands	r3, r2
   19778:	d010      	beq.n	1979c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   1977a:	697b      	ldr	r3, [r7, #20]
   1977c:	2210      	movs	r2, #16
   1977e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   19780:	697b      	ldr	r3, [r7, #20]
   19782:	2210      	movs	r2, #16
   19784:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   19786:	2310      	movs	r3, #16
   19788:	18fb      	adds	r3, r7, r3
   1978a:	881b      	ldrh	r3, [r3, #0]
   1978c:	2210      	movs	r2, #16
   1978e:	4013      	ands	r3, r2
   19790:	d004      	beq.n	1979c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   19792:	69bb      	ldr	r3, [r7, #24]
   19794:	69db      	ldr	r3, [r3, #28]
   19796:	69ba      	ldr	r2, [r7, #24]
   19798:	0010      	movs	r0, r2
   1979a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   1979c:	2312      	movs	r3, #18
   1979e:	18fb      	adds	r3, r7, r3
   197a0:	881b      	ldrh	r3, [r3, #0]
   197a2:	2220      	movs	r2, #32
   197a4:	4013      	ands	r3, r2
   197a6:	d010      	beq.n	197ca <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   197a8:	697b      	ldr	r3, [r7, #20]
   197aa:	2220      	movs	r2, #32
   197ac:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   197ae:	697b      	ldr	r3, [r7, #20]
   197b0:	2220      	movs	r2, #32
   197b2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   197b4:	2310      	movs	r3, #16
   197b6:	18fb      	adds	r3, r7, r3
   197b8:	881b      	ldrh	r3, [r3, #0]
   197ba:	2208      	movs	r2, #8
   197bc:	4013      	ands	r3, r2
   197be:	d004      	beq.n	197ca <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   197c0:	69bb      	ldr	r3, [r7, #24]
   197c2:	699b      	ldr	r3, [r3, #24]
   197c4:	69ba      	ldr	r2, [r7, #24]
   197c6:	0010      	movs	r0, r2
   197c8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   197ca:	2312      	movs	r3, #18
   197cc:	18fb      	adds	r3, r7, r3
   197ce:	881b      	ldrh	r3, [r3, #0]
   197d0:	2208      	movs	r2, #8
   197d2:	4013      	ands	r3, r2
   197d4:	d010      	beq.n	197f8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   197d6:	697b      	ldr	r3, [r7, #20]
   197d8:	2208      	movs	r2, #8
   197da:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   197dc:	697b      	ldr	r3, [r7, #20]
   197de:	2208      	movs	r2, #8
   197e0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   197e2:	2310      	movs	r3, #16
   197e4:	18fb      	adds	r3, r7, r3
   197e6:	881b      	ldrh	r3, [r3, #0]
   197e8:	2220      	movs	r2, #32
   197ea:	4013      	ands	r3, r2
   197ec:	d004      	beq.n	197f8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   197ee:	69bb      	ldr	r3, [r7, #24]
   197f0:	6a1b      	ldr	r3, [r3, #32]
   197f2:	69ba      	ldr	r2, [r7, #24]
   197f4:	0010      	movs	r0, r2
   197f6:	4798      	blx	r3
		}
	}
#endif
}
   197f8:	46c0      	nop			; (mov r8, r8)
   197fa:	46bd      	mov	sp, r7
   197fc:	b008      	add	sp, #32
   197fe:	bd80      	pop	{r7, pc}

00019800 <system_gclk_gen_get_config_defaults>:
{
   19800:	b580      	push	{r7, lr}
   19802:	b082      	sub	sp, #8
   19804:	af00      	add	r7, sp, #0
   19806:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   19808:	687b      	ldr	r3, [r7, #4]
   1980a:	2201      	movs	r2, #1
   1980c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   1980e:	687b      	ldr	r3, [r7, #4]
   19810:	2200      	movs	r2, #0
   19812:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   19814:	687b      	ldr	r3, [r7, #4]
   19816:	2206      	movs	r2, #6
   19818:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   1981a:	687b      	ldr	r3, [r7, #4]
   1981c:	2200      	movs	r2, #0
   1981e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   19820:	687b      	ldr	r3, [r7, #4]
   19822:	2200      	movs	r2, #0
   19824:	725a      	strb	r2, [r3, #9]
}
   19826:	46c0      	nop			; (mov r8, r8)
   19828:	46bd      	mov	sp, r7
   1982a:	b002      	add	sp, #8
   1982c:	bd80      	pop	{r7, pc}

0001982e <system_gclk_chan_get_config_defaults>:
{
   1982e:	b580      	push	{r7, lr}
   19830:	b082      	sub	sp, #8
   19832:	af00      	add	r7, sp, #0
   19834:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   19836:	687b      	ldr	r3, [r7, #4]
   19838:	2200      	movs	r2, #0
   1983a:	701a      	strb	r2, [r3, #0]
}
   1983c:	46c0      	nop			; (mov r8, r8)
   1983e:	46bd      	mov	sp, r7
   19840:	b002      	add	sp, #8
   19842:	bd80      	pop	{r7, pc}

00019844 <system_clock_source_osc8m_get_config_defaults>:
{
   19844:	b580      	push	{r7, lr}
   19846:	b082      	sub	sp, #8
   19848:	af00      	add	r7, sp, #0
   1984a:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   1984c:	687b      	ldr	r3, [r7, #4]
   1984e:	2203      	movs	r2, #3
   19850:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   19852:	687b      	ldr	r3, [r7, #4]
   19854:	2200      	movs	r2, #0
   19856:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   19858:	687b      	ldr	r3, [r7, #4]
   1985a:	2201      	movs	r2, #1
   1985c:	709a      	strb	r2, [r3, #2]
}
   1985e:	46c0      	nop			; (mov r8, r8)
   19860:	46bd      	mov	sp, r7
   19862:	b002      	add	sp, #8
   19864:	bd80      	pop	{r7, pc}
	...

00019868 <system_cpu_clock_set_divider>:
{
   19868:	b580      	push	{r7, lr}
   1986a:	b082      	sub	sp, #8
   1986c:	af00      	add	r7, sp, #0
   1986e:	0002      	movs	r2, r0
   19870:	1dfb      	adds	r3, r7, #7
   19872:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   19874:	4a03      	ldr	r2, [pc, #12]	; (19884 <system_cpu_clock_set_divider+0x1c>)
   19876:	1dfb      	adds	r3, r7, #7
   19878:	781b      	ldrb	r3, [r3, #0]
   1987a:	7213      	strb	r3, [r2, #8]
}
   1987c:	46c0      	nop			; (mov r8, r8)
   1987e:	46bd      	mov	sp, r7
   19880:	b002      	add	sp, #8
   19882:	bd80      	pop	{r7, pc}
   19884:	40000400 	.word	0x40000400

00019888 <system_apb_clock_set_divider>:
{
   19888:	b580      	push	{r7, lr}
   1988a:	b082      	sub	sp, #8
   1988c:	af00      	add	r7, sp, #0
   1988e:	0002      	movs	r2, r0
   19890:	1dfb      	adds	r3, r7, #7
   19892:	701a      	strb	r2, [r3, #0]
   19894:	1dbb      	adds	r3, r7, #6
   19896:	1c0a      	adds	r2, r1, #0
   19898:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1989a:	1dfb      	adds	r3, r7, #7
   1989c:	781b      	ldrb	r3, [r3, #0]
   1989e:	2b01      	cmp	r3, #1
   198a0:	d008      	beq.n	198b4 <system_apb_clock_set_divider+0x2c>
   198a2:	2b02      	cmp	r3, #2
   198a4:	d00b      	beq.n	198be <system_apb_clock_set_divider+0x36>
   198a6:	2b00      	cmp	r3, #0
   198a8:	d10e      	bne.n	198c8 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   198aa:	4a0b      	ldr	r2, [pc, #44]	; (198d8 <system_apb_clock_set_divider+0x50>)
   198ac:	1dbb      	adds	r3, r7, #6
   198ae:	781b      	ldrb	r3, [r3, #0]
   198b0:	7253      	strb	r3, [r2, #9]
			break;
   198b2:	e00b      	b.n	198cc <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   198b4:	4a08      	ldr	r2, [pc, #32]	; (198d8 <system_apb_clock_set_divider+0x50>)
   198b6:	1dbb      	adds	r3, r7, #6
   198b8:	781b      	ldrb	r3, [r3, #0]
   198ba:	7293      	strb	r3, [r2, #10]
			break;
   198bc:	e006      	b.n	198cc <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   198be:	4a06      	ldr	r2, [pc, #24]	; (198d8 <system_apb_clock_set_divider+0x50>)
   198c0:	1dbb      	adds	r3, r7, #6
   198c2:	781b      	ldrb	r3, [r3, #0]
   198c4:	72d3      	strb	r3, [r2, #11]
			break;
   198c6:	e001      	b.n	198cc <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   198c8:	2317      	movs	r3, #23
   198ca:	e000      	b.n	198ce <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   198cc:	2300      	movs	r3, #0
}
   198ce:	0018      	movs	r0, r3
   198d0:	46bd      	mov	sp, r7
   198d2:	b002      	add	sp, #8
   198d4:	bd80      	pop	{r7, pc}
   198d6:	46c0      	nop			; (mov r8, r8)
   198d8:	40000400 	.word	0x40000400

000198dc <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   198dc:	b580      	push	{r7, lr}
   198de:	b082      	sub	sp, #8
   198e0:	af00      	add	r7, sp, #0
   198e2:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   198e4:	687b      	ldr	r3, [r7, #4]
   198e6:	2201      	movs	r2, #1
   198e8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   198ea:	687b      	ldr	r3, [r7, #4]
   198ec:	2200      	movs	r2, #0
   198ee:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   198f0:	687b      	ldr	r3, [r7, #4]
   198f2:	2200      	movs	r2, #0
   198f4:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   198f6:	687b      	ldr	r3, [r7, #4]
   198f8:	2200      	movs	r2, #0
   198fa:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   198fc:	687b      	ldr	r3, [r7, #4]
   198fe:	2200      	movs	r2, #0
   19900:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   19902:	687b      	ldr	r3, [r7, #4]
   19904:	4a0a      	ldr	r2, [pc, #40]	; (19930 <system_clock_source_dpll_get_config_defaults+0x54>)
   19906:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   19908:	687b      	ldr	r3, [r7, #4]
   1990a:	2280      	movs	r2, #128	; 0x80
   1990c:	0212      	lsls	r2, r2, #8
   1990e:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   19910:	687b      	ldr	r3, [r7, #4]
   19912:	2201      	movs	r2, #1
   19914:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   19916:	687b      	ldr	r3, [r7, #4]
   19918:	2200      	movs	r2, #0
   1991a:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   1991c:	687b      	ldr	r3, [r7, #4]
   1991e:	2200      	movs	r2, #0
   19920:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   19922:	687b      	ldr	r3, [r7, #4]
   19924:	2200      	movs	r2, #0
   19926:	749a      	strb	r2, [r3, #18]
};
   19928:	46c0      	nop			; (mov r8, r8)
   1992a:	46bd      	mov	sp, r7
   1992c:	b002      	add	sp, #8
   1992e:	bd80      	pop	{r7, pc}
   19930:	02dc6c00 	.word	0x02dc6c00

00019934 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   19934:	b580      	push	{r7, lr}
   19936:	b082      	sub	sp, #8
   19938:	af00      	add	r7, sp, #0
   1993a:	0002      	movs	r2, r0
   1993c:	1dfb      	adds	r3, r7, #7
   1993e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   19940:	4a08      	ldr	r2, [pc, #32]	; (19964 <system_flash_set_waitstates+0x30>)
   19942:	1dfb      	adds	r3, r7, #7
   19944:	781b      	ldrb	r3, [r3, #0]
   19946:	210f      	movs	r1, #15
   19948:	400b      	ands	r3, r1
   1994a:	b2d9      	uxtb	r1, r3
   1994c:	6853      	ldr	r3, [r2, #4]
   1994e:	200f      	movs	r0, #15
   19950:	4001      	ands	r1, r0
   19952:	0049      	lsls	r1, r1, #1
   19954:	201e      	movs	r0, #30
   19956:	4383      	bics	r3, r0
   19958:	430b      	orrs	r3, r1
   1995a:	6053      	str	r3, [r2, #4]
}
   1995c:	46c0      	nop			; (mov r8, r8)
   1995e:	46bd      	mov	sp, r7
   19960:	b002      	add	sp, #8
   19962:	bd80      	pop	{r7, pc}
   19964:	41004000 	.word	0x41004000

00019968 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   19968:	b580      	push	{r7, lr}
   1996a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1996c:	46c0      	nop			; (mov r8, r8)
   1996e:	4b04      	ldr	r3, [pc, #16]	; (19980 <_system_dfll_wait_for_sync+0x18>)
   19970:	68db      	ldr	r3, [r3, #12]
   19972:	2210      	movs	r2, #16
   19974:	4013      	ands	r3, r2
   19976:	d0fa      	beq.n	1996e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   19978:	46c0      	nop			; (mov r8, r8)
   1997a:	46bd      	mov	sp, r7
   1997c:	bd80      	pop	{r7, pc}
   1997e:	46c0      	nop			; (mov r8, r8)
   19980:	40000800 	.word	0x40000800

00019984 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   19984:	b580      	push	{r7, lr}
   19986:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   19988:	4b0c      	ldr	r3, [pc, #48]	; (199bc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1998a:	2202      	movs	r2, #2
   1998c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   1998e:	4b0c      	ldr	r3, [pc, #48]	; (199c0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   19990:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   19992:	4a0a      	ldr	r2, [pc, #40]	; (199bc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   19994:	4b0b      	ldr	r3, [pc, #44]	; (199c4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   19996:	689b      	ldr	r3, [r3, #8]
   19998:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   1999a:	4a08      	ldr	r2, [pc, #32]	; (199bc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1999c:	4b09      	ldr	r3, [pc, #36]	; (199c4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   1999e:	685b      	ldr	r3, [r3, #4]
   199a0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   199a2:	4b06      	ldr	r3, [pc, #24]	; (199bc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   199a4:	2200      	movs	r2, #0
   199a6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   199a8:	4b05      	ldr	r3, [pc, #20]	; (199c0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   199aa:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   199ac:	4a03      	ldr	r2, [pc, #12]	; (199bc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   199ae:	4b05      	ldr	r3, [pc, #20]	; (199c4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   199b0:	681b      	ldr	r3, [r3, #0]
   199b2:	b29b      	uxth	r3, r3
   199b4:	8493      	strh	r3, [r2, #36]	; 0x24
}
   199b6:	46c0      	nop			; (mov r8, r8)
   199b8:	46bd      	mov	sp, r7
   199ba:	bd80      	pop	{r7, pc}
   199bc:	40000800 	.word	0x40000800
   199c0:	00019969 	.word	0x00019969
   199c4:	20002d38 	.word	0x20002d38

000199c8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   199c8:	b580      	push	{r7, lr}
   199ca:	b082      	sub	sp, #8
   199cc:	af00      	add	r7, sp, #0
   199ce:	0002      	movs	r2, r0
   199d0:	1dfb      	adds	r3, r7, #7
   199d2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   199d4:	1dfb      	adds	r3, r7, #7
   199d6:	781b      	ldrb	r3, [r3, #0]
   199d8:	2b08      	cmp	r3, #8
   199da:	d841      	bhi.n	19a60 <system_clock_source_get_hz+0x98>
   199dc:	009a      	lsls	r2, r3, #2
   199de:	4b23      	ldr	r3, [pc, #140]	; (19a6c <system_clock_source_get_hz+0xa4>)
   199e0:	18d3      	adds	r3, r2, r3
   199e2:	681b      	ldr	r3, [r3, #0]
   199e4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   199e6:	4b22      	ldr	r3, [pc, #136]	; (19a70 <system_clock_source_get_hz+0xa8>)
   199e8:	691b      	ldr	r3, [r3, #16]
   199ea:	e03a      	b.n	19a62 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   199ec:	4b21      	ldr	r3, [pc, #132]	; (19a74 <system_clock_source_get_hz+0xac>)
   199ee:	6a1b      	ldr	r3, [r3, #32]
   199f0:	059b      	lsls	r3, r3, #22
   199f2:	0f9b      	lsrs	r3, r3, #30
   199f4:	b2db      	uxtb	r3, r3
   199f6:	001a      	movs	r2, r3
   199f8:	4b1f      	ldr	r3, [pc, #124]	; (19a78 <system_clock_source_get_hz+0xb0>)
   199fa:	40d3      	lsrs	r3, r2
   199fc:	e031      	b.n	19a62 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   199fe:	2380      	movs	r3, #128	; 0x80
   19a00:	021b      	lsls	r3, r3, #8
   19a02:	e02e      	b.n	19a62 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   19a04:	2380      	movs	r3, #128	; 0x80
   19a06:	021b      	lsls	r3, r3, #8
   19a08:	e02b      	b.n	19a62 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   19a0a:	4b19      	ldr	r3, [pc, #100]	; (19a70 <system_clock_source_get_hz+0xa8>)
   19a0c:	695b      	ldr	r3, [r3, #20]
   19a0e:	e028      	b.n	19a62 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   19a10:	4b17      	ldr	r3, [pc, #92]	; (19a70 <system_clock_source_get_hz+0xa8>)
   19a12:	681b      	ldr	r3, [r3, #0]
   19a14:	2202      	movs	r2, #2
   19a16:	4013      	ands	r3, r2
   19a18:	d101      	bne.n	19a1e <system_clock_source_get_hz+0x56>
			return 0;
   19a1a:	2300      	movs	r3, #0
   19a1c:	e021      	b.n	19a62 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   19a1e:	4b17      	ldr	r3, [pc, #92]	; (19a7c <system_clock_source_get_hz+0xb4>)
   19a20:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   19a22:	4b13      	ldr	r3, [pc, #76]	; (19a70 <system_clock_source_get_hz+0xa8>)
   19a24:	681b      	ldr	r3, [r3, #0]
   19a26:	2224      	movs	r2, #36	; 0x24
   19a28:	4013      	ands	r3, r2
   19a2a:	2b04      	cmp	r3, #4
   19a2c:	d109      	bne.n	19a42 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   19a2e:	2000      	movs	r0, #0
   19a30:	4b13      	ldr	r3, [pc, #76]	; (19a80 <system_clock_source_get_hz+0xb8>)
   19a32:	4798      	blx	r3
   19a34:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   19a36:	4b0e      	ldr	r3, [pc, #56]	; (19a70 <system_clock_source_get_hz+0xa8>)
   19a38:	689b      	ldr	r3, [r3, #8]
   19a3a:	041b      	lsls	r3, r3, #16
   19a3c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   19a3e:	4353      	muls	r3, r2
   19a40:	e00f      	b.n	19a62 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   19a42:	4b10      	ldr	r3, [pc, #64]	; (19a84 <system_clock_source_get_hz+0xbc>)
   19a44:	e00d      	b.n	19a62 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   19a46:	4a0b      	ldr	r2, [pc, #44]	; (19a74 <system_clock_source_get_hz+0xac>)
   19a48:	2350      	movs	r3, #80	; 0x50
   19a4a:	5cd3      	ldrb	r3, [r2, r3]
   19a4c:	b2db      	uxtb	r3, r3
   19a4e:	001a      	movs	r2, r3
   19a50:	2304      	movs	r3, #4
   19a52:	4013      	ands	r3, r2
   19a54:	d101      	bne.n	19a5a <system_clock_source_get_hz+0x92>
			return 0;
   19a56:	2300      	movs	r3, #0
   19a58:	e003      	b.n	19a62 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   19a5a:	4b05      	ldr	r3, [pc, #20]	; (19a70 <system_clock_source_get_hz+0xa8>)
   19a5c:	68db      	ldr	r3, [r3, #12]
   19a5e:	e000      	b.n	19a62 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   19a60:	2300      	movs	r3, #0
	}
}
   19a62:	0018      	movs	r0, r3
   19a64:	46bd      	mov	sp, r7
   19a66:	b002      	add	sp, #8
   19a68:	bd80      	pop	{r7, pc}
   19a6a:	46c0      	nop			; (mov r8, r8)
   19a6c:	0001e4f8 	.word	0x0001e4f8
   19a70:	20002d38 	.word	0x20002d38
   19a74:	40000800 	.word	0x40000800
   19a78:	007a1200 	.word	0x007a1200
   19a7c:	00019969 	.word	0x00019969
   19a80:	0001a429 	.word	0x0001a429
   19a84:	02dc6c00 	.word	0x02dc6c00

00019a88 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   19a88:	b580      	push	{r7, lr}
   19a8a:	b084      	sub	sp, #16
   19a8c:	af00      	add	r7, sp, #0
   19a8e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   19a90:	4b1a      	ldr	r3, [pc, #104]	; (19afc <system_clock_source_osc8m_set_config+0x74>)
   19a92:	6a1b      	ldr	r3, [r3, #32]
   19a94:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   19a96:	687b      	ldr	r3, [r7, #4]
   19a98:	781b      	ldrb	r3, [r3, #0]
   19a9a:	1c1a      	adds	r2, r3, #0
   19a9c:	2303      	movs	r3, #3
   19a9e:	4013      	ands	r3, r2
   19aa0:	b2da      	uxtb	r2, r3
   19aa2:	230d      	movs	r3, #13
   19aa4:	18fb      	adds	r3, r7, r3
   19aa6:	2103      	movs	r1, #3
   19aa8:	400a      	ands	r2, r1
   19aaa:	0010      	movs	r0, r2
   19aac:	781a      	ldrb	r2, [r3, #0]
   19aae:	2103      	movs	r1, #3
   19ab0:	438a      	bics	r2, r1
   19ab2:	1c11      	adds	r1, r2, #0
   19ab4:	1c02      	adds	r2, r0, #0
   19ab6:	430a      	orrs	r2, r1
   19ab8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   19aba:	687b      	ldr	r3, [r7, #4]
   19abc:	789a      	ldrb	r2, [r3, #2]
   19abe:	230c      	movs	r3, #12
   19ac0:	18fb      	adds	r3, r7, r3
   19ac2:	01d0      	lsls	r0, r2, #7
   19ac4:	781a      	ldrb	r2, [r3, #0]
   19ac6:	217f      	movs	r1, #127	; 0x7f
   19ac8:	400a      	ands	r2, r1
   19aca:	1c11      	adds	r1, r2, #0
   19acc:	1c02      	adds	r2, r0, #0
   19ace:	430a      	orrs	r2, r1
   19ad0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   19ad2:	687b      	ldr	r3, [r7, #4]
   19ad4:	785a      	ldrb	r2, [r3, #1]
   19ad6:	230c      	movs	r3, #12
   19ad8:	18fb      	adds	r3, r7, r3
   19ada:	2101      	movs	r1, #1
   19adc:	400a      	ands	r2, r1
   19ade:	0190      	lsls	r0, r2, #6
   19ae0:	781a      	ldrb	r2, [r3, #0]
   19ae2:	2140      	movs	r1, #64	; 0x40
   19ae4:	438a      	bics	r2, r1
   19ae6:	1c11      	adds	r1, r2, #0
   19ae8:	1c02      	adds	r2, r0, #0
   19aea:	430a      	orrs	r2, r1
   19aec:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   19aee:	4b03      	ldr	r3, [pc, #12]	; (19afc <system_clock_source_osc8m_set_config+0x74>)
   19af0:	68fa      	ldr	r2, [r7, #12]
   19af2:	621a      	str	r2, [r3, #32]
}
   19af4:	46c0      	nop			; (mov r8, r8)
   19af6:	46bd      	mov	sp, r7
   19af8:	b004      	add	sp, #16
   19afa:	bd80      	pop	{r7, pc}
   19afc:	40000800 	.word	0x40000800

00019b00 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   19b00:	b580      	push	{r7, lr}
   19b02:	b086      	sub	sp, #24
   19b04:	af00      	add	r7, sp, #0
   19b06:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   19b08:	687b      	ldr	r3, [r7, #4]
   19b0a:	68db      	ldr	r3, [r3, #12]
   19b0c:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   19b0e:	687b      	ldr	r3, [r7, #4]
   19b10:	7d1b      	ldrb	r3, [r3, #20]
   19b12:	2b01      	cmp	r3, #1
   19b14:	d10a      	bne.n	19b2c <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   19b16:	687b      	ldr	r3, [r7, #4]
   19b18:	8a1b      	ldrh	r3, [r3, #16]
   19b1a:	3301      	adds	r3, #1
   19b1c:	005b      	lsls	r3, r3, #1
   19b1e:	001a      	movs	r2, r3
   19b20:	4b36      	ldr	r3, [pc, #216]	; (19bfc <system_clock_source_dpll_set_config+0xfc>)
   19b22:	0011      	movs	r1, r2
   19b24:	6978      	ldr	r0, [r7, #20]
   19b26:	4798      	blx	r3
   19b28:	0003      	movs	r3, r0
   19b2a:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   19b2c:	687b      	ldr	r3, [r7, #4]
   19b2e:	689b      	ldr	r3, [r3, #8]
   19b30:	011a      	lsls	r2, r3, #4
   19b32:	4b32      	ldr	r3, [pc, #200]	; (19bfc <system_clock_source_dpll_set_config+0xfc>)
   19b34:	6979      	ldr	r1, [r7, #20]
   19b36:	0010      	movs	r0, r2
   19b38:	4798      	blx	r3
   19b3a:	0003      	movs	r3, r0
   19b3c:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   19b3e:	693b      	ldr	r3, [r7, #16]
   19b40:	b2da      	uxtb	r2, r3
   19b42:	230f      	movs	r3, #15
   19b44:	18fb      	adds	r3, r7, r3
   19b46:	210f      	movs	r1, #15
   19b48:	400a      	ands	r2, r1
   19b4a:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   19b4c:	693b      	ldr	r3, [r7, #16]
   19b4e:	091b      	lsrs	r3, r3, #4
   19b50:	3b01      	subs	r3, #1
   19b52:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   19b54:	492a      	ldr	r1, [pc, #168]	; (19c00 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   19b56:	687b      	ldr	r3, [r7, #4]
   19b58:	781b      	ldrb	r3, [r3, #0]
   19b5a:	01db      	lsls	r3, r3, #7
   19b5c:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   19b5e:	687b      	ldr	r3, [r7, #4]
   19b60:	785b      	ldrb	r3, [r3, #1]
   19b62:	019b      	lsls	r3, r3, #6
   19b64:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   19b66:	4313      	orrs	r3, r2
   19b68:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   19b6a:	2344      	movs	r3, #68	; 0x44
   19b6c:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   19b6e:	4b24      	ldr	r3, [pc, #144]	; (19c00 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   19b70:	220f      	movs	r2, #15
   19b72:	18ba      	adds	r2, r7, r2
   19b74:	7812      	ldrb	r2, [r2, #0]
   19b76:	0412      	lsls	r2, r2, #16
   19b78:	0011      	movs	r1, r2
   19b7a:	22f0      	movs	r2, #240	; 0xf0
   19b7c:	0312      	lsls	r2, r2, #12
   19b7e:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   19b80:	693a      	ldr	r2, [r7, #16]
   19b82:	0512      	lsls	r2, r2, #20
   19b84:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   19b86:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   19b88:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   19b8a:	4b1d      	ldr	r3, [pc, #116]	; (19c00 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   19b8c:	687a      	ldr	r2, [r7, #4]
   19b8e:	8a12      	ldrh	r2, [r2, #16]
   19b90:	0412      	lsls	r2, r2, #16
   19b92:	0011      	movs	r1, r2
   19b94:	4a1b      	ldr	r2, [pc, #108]	; (19c04 <system_clock_source_dpll_set_config+0x104>)
   19b96:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   19b98:	687a      	ldr	r2, [r7, #4]
   19b9a:	7892      	ldrb	r2, [r2, #2]
   19b9c:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   19b9e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   19ba0:	687a      	ldr	r2, [r7, #4]
   19ba2:	7cd2      	ldrb	r2, [r2, #19]
   19ba4:	0212      	lsls	r2, r2, #8
   19ba6:	0010      	movs	r0, r2
   19ba8:	22e0      	movs	r2, #224	; 0xe0
   19baa:	00d2      	lsls	r2, r2, #3
   19bac:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   19bae:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   19bb0:	687a      	ldr	r2, [r7, #4]
   19bb2:	7d12      	ldrb	r2, [r2, #20]
   19bb4:	0112      	lsls	r2, r2, #4
   19bb6:	0010      	movs	r0, r2
   19bb8:	2230      	movs	r2, #48	; 0x30
   19bba:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   19bbc:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   19bbe:	687a      	ldr	r2, [r7, #4]
   19bc0:	78d2      	ldrb	r2, [r2, #3]
   19bc2:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   19bc4:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   19bc6:	687a      	ldr	r2, [r7, #4]
   19bc8:	7912      	ldrb	r2, [r2, #4]
   19bca:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   19bcc:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   19bce:	687a      	ldr	r2, [r7, #4]
   19bd0:	7c92      	ldrb	r2, [r2, #18]
   19bd2:	0010      	movs	r0, r2
   19bd4:	2203      	movs	r2, #3
   19bd6:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   19bd8:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   19bda:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   19bdc:	693b      	ldr	r3, [r7, #16]
   19bde:	3301      	adds	r3, #1
   19be0:	011a      	lsls	r2, r3, #4
   19be2:	230f      	movs	r3, #15
   19be4:	18fb      	adds	r3, r7, r3
   19be6:	781b      	ldrb	r3, [r3, #0]
   19be8:	18d3      	adds	r3, r2, r3
   19bea:	697a      	ldr	r2, [r7, #20]
   19bec:	4353      	muls	r3, r2
   19bee:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   19bf0:	4b05      	ldr	r3, [pc, #20]	; (19c08 <system_clock_source_dpll_set_config+0x108>)
   19bf2:	60da      	str	r2, [r3, #12]
}
   19bf4:	46c0      	nop			; (mov r8, r8)
   19bf6:	46bd      	mov	sp, r7
   19bf8:	b006      	add	sp, #24
   19bfa:	bd80      	pop	{r7, pc}
   19bfc:	0001ab09 	.word	0x0001ab09
   19c00:	40000800 	.word	0x40000800
   19c04:	07ff0000 	.word	0x07ff0000
   19c08:	20002d38 	.word	0x20002d38

00019c0c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   19c0c:	b580      	push	{r7, lr}
   19c0e:	b082      	sub	sp, #8
   19c10:	af00      	add	r7, sp, #0
   19c12:	0002      	movs	r2, r0
   19c14:	1dfb      	adds	r3, r7, #7
   19c16:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   19c18:	1dfb      	adds	r3, r7, #7
   19c1a:	781b      	ldrb	r3, [r3, #0]
   19c1c:	2b08      	cmp	r3, #8
   19c1e:	d83b      	bhi.n	19c98 <system_clock_source_enable+0x8c>
   19c20:	009a      	lsls	r2, r3, #2
   19c22:	4b21      	ldr	r3, [pc, #132]	; (19ca8 <system_clock_source_enable+0x9c>)
   19c24:	18d3      	adds	r3, r2, r3
   19c26:	681b      	ldr	r3, [r3, #0]
   19c28:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   19c2a:	4b20      	ldr	r3, [pc, #128]	; (19cac <system_clock_source_enable+0xa0>)
   19c2c:	4a1f      	ldr	r2, [pc, #124]	; (19cac <system_clock_source_enable+0xa0>)
   19c2e:	6a12      	ldr	r2, [r2, #32]
   19c30:	2102      	movs	r1, #2
   19c32:	430a      	orrs	r2, r1
   19c34:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   19c36:	2300      	movs	r3, #0
   19c38:	e031      	b.n	19c9e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   19c3a:	4b1c      	ldr	r3, [pc, #112]	; (19cac <system_clock_source_enable+0xa0>)
   19c3c:	4a1b      	ldr	r2, [pc, #108]	; (19cac <system_clock_source_enable+0xa0>)
   19c3e:	6992      	ldr	r2, [r2, #24]
   19c40:	2102      	movs	r1, #2
   19c42:	430a      	orrs	r2, r1
   19c44:	619a      	str	r2, [r3, #24]
		break;
   19c46:	e029      	b.n	19c9c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   19c48:	4a18      	ldr	r2, [pc, #96]	; (19cac <system_clock_source_enable+0xa0>)
   19c4a:	4b18      	ldr	r3, [pc, #96]	; (19cac <system_clock_source_enable+0xa0>)
   19c4c:	8a1b      	ldrh	r3, [r3, #16]
   19c4e:	b29b      	uxth	r3, r3
   19c50:	2102      	movs	r1, #2
   19c52:	430b      	orrs	r3, r1
   19c54:	b29b      	uxth	r3, r3
   19c56:	8213      	strh	r3, [r2, #16]
		break;
   19c58:	e020      	b.n	19c9c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   19c5a:	4a14      	ldr	r2, [pc, #80]	; (19cac <system_clock_source_enable+0xa0>)
   19c5c:	4b13      	ldr	r3, [pc, #76]	; (19cac <system_clock_source_enable+0xa0>)
   19c5e:	8a9b      	ldrh	r3, [r3, #20]
   19c60:	b29b      	uxth	r3, r3
   19c62:	2102      	movs	r1, #2
   19c64:	430b      	orrs	r3, r1
   19c66:	b29b      	uxth	r3, r3
   19c68:	8293      	strh	r3, [r2, #20]
		break;
   19c6a:	e017      	b.n	19c9c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   19c6c:	4b10      	ldr	r3, [pc, #64]	; (19cb0 <system_clock_source_enable+0xa4>)
   19c6e:	681b      	ldr	r3, [r3, #0]
   19c70:	2202      	movs	r2, #2
   19c72:	431a      	orrs	r2, r3
   19c74:	4b0e      	ldr	r3, [pc, #56]	; (19cb0 <system_clock_source_enable+0xa4>)
   19c76:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   19c78:	4b0e      	ldr	r3, [pc, #56]	; (19cb4 <system_clock_source_enable+0xa8>)
   19c7a:	4798      	blx	r3
		break;
   19c7c:	e00e      	b.n	19c9c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   19c7e:	4a0b      	ldr	r2, [pc, #44]	; (19cac <system_clock_source_enable+0xa0>)
   19c80:	490a      	ldr	r1, [pc, #40]	; (19cac <system_clock_source_enable+0xa0>)
   19c82:	2344      	movs	r3, #68	; 0x44
   19c84:	5ccb      	ldrb	r3, [r1, r3]
   19c86:	b2db      	uxtb	r3, r3
   19c88:	2102      	movs	r1, #2
   19c8a:	430b      	orrs	r3, r1
   19c8c:	b2d9      	uxtb	r1, r3
   19c8e:	2344      	movs	r3, #68	; 0x44
   19c90:	54d1      	strb	r1, [r2, r3]
		break;
   19c92:	e003      	b.n	19c9c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   19c94:	2300      	movs	r3, #0
   19c96:	e002      	b.n	19c9e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   19c98:	2317      	movs	r3, #23
   19c9a:	e000      	b.n	19c9e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   19c9c:	2300      	movs	r3, #0
}
   19c9e:	0018      	movs	r0, r3
   19ca0:	46bd      	mov	sp, r7
   19ca2:	b002      	add	sp, #8
   19ca4:	bd80      	pop	{r7, pc}
   19ca6:	46c0      	nop			; (mov r8, r8)
   19ca8:	0001e51c 	.word	0x0001e51c
   19cac:	40000800 	.word	0x40000800
   19cb0:	20002d38 	.word	0x20002d38
   19cb4:	00019985 	.word	0x00019985

00019cb8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   19cb8:	b580      	push	{r7, lr}
   19cba:	b084      	sub	sp, #16
   19cbc:	af00      	add	r7, sp, #0
   19cbe:	0002      	movs	r2, r0
   19cc0:	1dfb      	adds	r3, r7, #7
   19cc2:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   19cc4:	2300      	movs	r3, #0
   19cc6:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   19cc8:	1dfb      	adds	r3, r7, #7
   19cca:	781b      	ldrb	r3, [r3, #0]
   19ccc:	2b08      	cmp	r3, #8
   19cce:	d821      	bhi.n	19d14 <system_clock_source_is_ready+0x5c>
   19cd0:	009a      	lsls	r2, r3, #2
   19cd2:	4b18      	ldr	r3, [pc, #96]	; (19d34 <system_clock_source_is_ready+0x7c>)
   19cd4:	18d3      	adds	r3, r2, r3
   19cd6:	681b      	ldr	r3, [r3, #0]
   19cd8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   19cda:	2308      	movs	r3, #8
   19cdc:	60fb      	str	r3, [r7, #12]
		break;
   19cde:	e01b      	b.n	19d18 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   19ce0:	2304      	movs	r3, #4
   19ce2:	60fb      	str	r3, [r7, #12]
		break;
   19ce4:	e018      	b.n	19d18 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   19ce6:	2301      	movs	r3, #1
   19ce8:	60fb      	str	r3, [r7, #12]
		break;
   19cea:	e015      	b.n	19d18 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   19cec:	2302      	movs	r3, #2
   19cee:	60fb      	str	r3, [r7, #12]
		break;
   19cf0:	e012      	b.n	19d18 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   19cf2:	2310      	movs	r3, #16
   19cf4:	60fb      	str	r3, [r7, #12]
		}
		break;
   19cf6:	e00f      	b.n	19d18 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   19cf8:	4a0f      	ldr	r2, [pc, #60]	; (19d38 <system_clock_source_is_ready+0x80>)
   19cfa:	2350      	movs	r3, #80	; 0x50
   19cfc:	5cd3      	ldrb	r3, [r2, r3]
   19cfe:	b2db      	uxtb	r3, r3
   19d00:	001a      	movs	r2, r3
   19d02:	2303      	movs	r3, #3
   19d04:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   19d06:	3b03      	subs	r3, #3
   19d08:	425a      	negs	r2, r3
   19d0a:	4153      	adcs	r3, r2
   19d0c:	b2db      	uxtb	r3, r3
   19d0e:	e00c      	b.n	19d2a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   19d10:	2301      	movs	r3, #1
   19d12:	e00a      	b.n	19d2a <system_clock_source_is_ready+0x72>

	default:
		return false;
   19d14:	2300      	movs	r3, #0
   19d16:	e008      	b.n	19d2a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   19d18:	4b07      	ldr	r3, [pc, #28]	; (19d38 <system_clock_source_is_ready+0x80>)
   19d1a:	68db      	ldr	r3, [r3, #12]
   19d1c:	68fa      	ldr	r2, [r7, #12]
   19d1e:	401a      	ands	r2, r3
   19d20:	68fb      	ldr	r3, [r7, #12]
   19d22:	1ad3      	subs	r3, r2, r3
   19d24:	425a      	negs	r2, r3
   19d26:	4153      	adcs	r3, r2
   19d28:	b2db      	uxtb	r3, r3
}
   19d2a:	0018      	movs	r0, r3
   19d2c:	46bd      	mov	sp, r7
   19d2e:	b004      	add	sp, #16
   19d30:	bd80      	pop	{r7, pc}
   19d32:	46c0      	nop			; (mov r8, r8)
   19d34:	0001e540 	.word	0x0001e540
   19d38:	40000800 	.word	0x40000800

00019d3c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   19d3c:	b580      	push	{r7, lr}
   19d3e:	b082      	sub	sp, #8
   19d40:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   19d42:	003b      	movs	r3, r7
   19d44:	2203      	movs	r2, #3
   19d46:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   19d48:	2300      	movs	r3, #0
   19d4a:	607b      	str	r3, [r7, #4]
   19d4c:	e009      	b.n	19d62 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   19d4e:	687b      	ldr	r3, [r7, #4]
   19d50:	b2db      	uxtb	r3, r3
   19d52:	003a      	movs	r2, r7
   19d54:	0011      	movs	r1, r2
   19d56:	0018      	movs	r0, r3
   19d58:	4b05      	ldr	r3, [pc, #20]	; (19d70 <_switch_peripheral_gclk+0x34>)
   19d5a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   19d5c:	687b      	ldr	r3, [r7, #4]
   19d5e:	3301      	adds	r3, #1
   19d60:	607b      	str	r3, [r7, #4]
   19d62:	687b      	ldr	r3, [r7, #4]
   19d64:	2b24      	cmp	r3, #36	; 0x24
   19d66:	d9f2      	bls.n	19d4e <_switch_peripheral_gclk+0x12>
	}
}
   19d68:	46c0      	nop			; (mov r8, r8)
   19d6a:	46bd      	mov	sp, r7
   19d6c:	b002      	add	sp, #8
   19d6e:	bd80      	pop	{r7, pc}
   19d70:	0001a305 	.word	0x0001a305

00019d74 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   19d74:	b580      	push	{r7, lr}
   19d76:	b0a6      	sub	sp, #152	; 0x98
   19d78:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   19d7a:	4b83      	ldr	r3, [pc, #524]	; (19f88 <system_clock_init+0x214>)
   19d7c:	22c2      	movs	r2, #194	; 0xc2
   19d7e:	00d2      	lsls	r2, r2, #3
   19d80:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   19d82:	2003      	movs	r0, #3
   19d84:	4b81      	ldr	r3, [pc, #516]	; (19f8c <system_clock_init+0x218>)
   19d86:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   19d88:	4b81      	ldr	r3, [pc, #516]	; (19f90 <system_clock_init+0x21c>)
   19d8a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   19d8c:	2394      	movs	r3, #148	; 0x94
   19d8e:	18fb      	adds	r3, r7, r3
   19d90:	0018      	movs	r0, r3
   19d92:	4b80      	ldr	r3, [pc, #512]	; (19f94 <system_clock_init+0x220>)
   19d94:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   19d96:	2394      	movs	r3, #148	; 0x94
   19d98:	18fb      	adds	r3, r7, r3
   19d9a:	2200      	movs	r2, #0
   19d9c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   19d9e:	2394      	movs	r3, #148	; 0x94
   19da0:	18fb      	adds	r3, r7, r3
   19da2:	2201      	movs	r2, #1
   19da4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   19da6:	2394      	movs	r3, #148	; 0x94
   19da8:	18fb      	adds	r3, r7, r3
   19daa:	2200      	movs	r2, #0
   19dac:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   19dae:	2394      	movs	r3, #148	; 0x94
   19db0:	18fb      	adds	r3, r7, r3
   19db2:	0018      	movs	r0, r3
   19db4:	4b78      	ldr	r3, [pc, #480]	; (19f98 <system_clock_init+0x224>)
   19db6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   19db8:	2006      	movs	r0, #6
   19dba:	4b78      	ldr	r3, [pc, #480]	; (19f9c <system_clock_init+0x228>)
   19dbc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   19dbe:	4b78      	ldr	r3, [pc, #480]	; (19fa0 <system_clock_init+0x22c>)
   19dc0:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   19dc2:	2360      	movs	r3, #96	; 0x60
   19dc4:	18fb      	adds	r3, r7, r3
   19dc6:	0018      	movs	r0, r3
   19dc8:	4b76      	ldr	r3, [pc, #472]	; (19fa4 <system_clock_init+0x230>)
   19dca:	4798      	blx	r3
   19dcc:	2360      	movs	r3, #96	; 0x60
   19dce:	18fb      	adds	r3, r7, r3
   19dd0:	2206      	movs	r2, #6
   19dd2:	701a      	strb	r2, [r3, #0]
   19dd4:	2360      	movs	r3, #96	; 0x60
   19dd6:	18fb      	adds	r3, r7, r3
   19dd8:	2208      	movs	r2, #8
   19dda:	605a      	str	r2, [r3, #4]
   19ddc:	2360      	movs	r3, #96	; 0x60
   19dde:	18fb      	adds	r3, r7, r3
   19de0:	2200      	movs	r2, #0
   19de2:	721a      	strb	r2, [r3, #8]
   19de4:	2360      	movs	r3, #96	; 0x60
   19de6:	18fb      	adds	r3, r7, r3
   19de8:	2200      	movs	r2, #0
   19dea:	725a      	strb	r2, [r3, #9]
   19dec:	2360      	movs	r3, #96	; 0x60
   19dee:	18fb      	adds	r3, r7, r3
   19df0:	0019      	movs	r1, r3
   19df2:	2001      	movs	r0, #1
   19df4:	4b6c      	ldr	r3, [pc, #432]	; (19fa8 <system_clock_init+0x234>)
   19df6:	4798      	blx	r3
   19df8:	2001      	movs	r0, #1
   19dfa:	4b6c      	ldr	r3, [pc, #432]	; (19fac <system_clock_init+0x238>)
   19dfc:	4798      	blx	r3
   19dfe:	2354      	movs	r3, #84	; 0x54
   19e00:	18fb      	adds	r3, r7, r3
   19e02:	0018      	movs	r0, r3
   19e04:	4b67      	ldr	r3, [pc, #412]	; (19fa4 <system_clock_init+0x230>)
   19e06:	4798      	blx	r3
   19e08:	2354      	movs	r3, #84	; 0x54
   19e0a:	18fb      	adds	r3, r7, r3
   19e0c:	2203      	movs	r2, #3
   19e0e:	701a      	strb	r2, [r3, #0]
   19e10:	2354      	movs	r3, #84	; 0x54
   19e12:	18fb      	adds	r3, r7, r3
   19e14:	2201      	movs	r2, #1
   19e16:	605a      	str	r2, [r3, #4]
   19e18:	2354      	movs	r3, #84	; 0x54
   19e1a:	18fb      	adds	r3, r7, r3
   19e1c:	2201      	movs	r2, #1
   19e1e:	721a      	strb	r2, [r3, #8]
   19e20:	2354      	movs	r3, #84	; 0x54
   19e22:	18fb      	adds	r3, r7, r3
   19e24:	2200      	movs	r2, #0
   19e26:	725a      	strb	r2, [r3, #9]
   19e28:	2354      	movs	r3, #84	; 0x54
   19e2a:	18fb      	adds	r3, r7, r3
   19e2c:	0019      	movs	r1, r3
   19e2e:	2002      	movs	r0, #2
   19e30:	4b5d      	ldr	r3, [pc, #372]	; (19fa8 <system_clock_init+0x234>)
   19e32:	4798      	blx	r3
   19e34:	2002      	movs	r0, #2
   19e36:	4b5d      	ldr	r3, [pc, #372]	; (19fac <system_clock_init+0x238>)
   19e38:	4798      	blx	r3
   19e3a:	233c      	movs	r3, #60	; 0x3c
   19e3c:	18fb      	adds	r3, r7, r3
   19e3e:	0018      	movs	r0, r3
   19e40:	4b58      	ldr	r3, [pc, #352]	; (19fa4 <system_clock_init+0x230>)
   19e42:	4798      	blx	r3
   19e44:	233c      	movs	r3, #60	; 0x3c
   19e46:	18fb      	adds	r3, r7, r3
   19e48:	2203      	movs	r2, #3
   19e4a:	701a      	strb	r2, [r3, #0]
   19e4c:	233c      	movs	r3, #60	; 0x3c
   19e4e:	18fb      	adds	r3, r7, r3
   19e50:	2220      	movs	r2, #32
   19e52:	605a      	str	r2, [r3, #4]
   19e54:	233c      	movs	r3, #60	; 0x3c
   19e56:	18fb      	adds	r3, r7, r3
   19e58:	2200      	movs	r2, #0
   19e5a:	721a      	strb	r2, [r3, #8]
   19e5c:	233c      	movs	r3, #60	; 0x3c
   19e5e:	18fb      	adds	r3, r7, r3
   19e60:	2200      	movs	r2, #0
   19e62:	725a      	strb	r2, [r3, #9]
   19e64:	233c      	movs	r3, #60	; 0x3c
   19e66:	18fb      	adds	r3, r7, r3
   19e68:	0019      	movs	r1, r3
   19e6a:	2004      	movs	r0, #4
   19e6c:	4b4e      	ldr	r3, [pc, #312]	; (19fa8 <system_clock_init+0x234>)
   19e6e:	4798      	blx	r3
   19e70:	2004      	movs	r0, #4
   19e72:	4b4e      	ldr	r3, [pc, #312]	; (19fac <system_clock_init+0x238>)
   19e74:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   19e76:	2390      	movs	r3, #144	; 0x90
   19e78:	18fb      	adds	r3, r7, r3
   19e7a:	0018      	movs	r0, r3
   19e7c:	4b4c      	ldr	r3, [pc, #304]	; (19fb0 <system_clock_init+0x23c>)
   19e7e:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   19e80:	2390      	movs	r3, #144	; 0x90
   19e82:	18fb      	adds	r3, r7, r3
   19e84:	2201      	movs	r2, #1
   19e86:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   19e88:	2390      	movs	r3, #144	; 0x90
   19e8a:	18fb      	adds	r3, r7, r3
   19e8c:	0019      	movs	r1, r3
   19e8e:	2001      	movs	r0, #1
   19e90:	4b48      	ldr	r3, [pc, #288]	; (19fb4 <system_clock_init+0x240>)
   19e92:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   19e94:	2001      	movs	r0, #1
   19e96:	4b48      	ldr	r3, [pc, #288]	; (19fb8 <system_clock_init+0x244>)
   19e98:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   19e9a:	2378      	movs	r3, #120	; 0x78
   19e9c:	18fb      	adds	r3, r7, r3
   19e9e:	0018      	movs	r0, r3
   19ea0:	4b46      	ldr	r3, [pc, #280]	; (19fbc <system_clock_init+0x248>)
   19ea2:	4798      	blx	r3

	dpll_config.on_demand        = false;
   19ea4:	2378      	movs	r3, #120	; 0x78
   19ea6:	18fb      	adds	r3, r7, r3
   19ea8:	2200      	movs	r2, #0
   19eaa:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   19eac:	2378      	movs	r3, #120	; 0x78
   19eae:	18fb      	adds	r3, r7, r3
   19eb0:	2200      	movs	r2, #0
   19eb2:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   19eb4:	2378      	movs	r3, #120	; 0x78
   19eb6:	18fb      	adds	r3, r7, r3
   19eb8:	2200      	movs	r2, #0
   19eba:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   19ebc:	2378      	movs	r3, #120	; 0x78
   19ebe:	18fb      	adds	r3, r7, r3
   19ec0:	2200      	movs	r2, #0
   19ec2:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   19ec4:	2378      	movs	r3, #120	; 0x78
   19ec6:	18fb      	adds	r3, r7, r3
   19ec8:	2200      	movs	r2, #0
   19eca:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   19ecc:	2378      	movs	r3, #120	; 0x78
   19ece:	18fb      	adds	r3, r7, r3
   19ed0:	2200      	movs	r2, #0
   19ed2:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   19ed4:	2378      	movs	r3, #120	; 0x78
   19ed6:	18fb      	adds	r3, r7, r3
   19ed8:	2200      	movs	r2, #0
   19eda:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   19edc:	2378      	movs	r3, #120	; 0x78
   19ede:	18fb      	adds	r3, r7, r3
   19ee0:	2202      	movs	r2, #2
   19ee2:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   19ee4:	2378      	movs	r3, #120	; 0x78
   19ee6:	18fb      	adds	r3, r7, r3
   19ee8:	4a35      	ldr	r2, [pc, #212]	; (19fc0 <system_clock_init+0x24c>)
   19eea:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   19eec:	2378      	movs	r3, #120	; 0x78
   19eee:	18fb      	adds	r3, r7, r3
   19ef0:	2201      	movs	r2, #1
   19ef2:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   19ef4:	2378      	movs	r3, #120	; 0x78
   19ef6:	18fb      	adds	r3, r7, r3
   19ef8:	4a32      	ldr	r2, [pc, #200]	; (19fc4 <system_clock_init+0x250>)
   19efa:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   19efc:	2378      	movs	r3, #120	; 0x78
   19efe:	18fb      	adds	r3, r7, r3
   19f00:	0018      	movs	r0, r3
   19f02:	4b31      	ldr	r3, [pc, #196]	; (19fc8 <system_clock_init+0x254>)
   19f04:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   19f06:	2008      	movs	r0, #8
   19f08:	4b24      	ldr	r3, [pc, #144]	; (19f9c <system_clock_init+0x228>)
   19f0a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   19f0c:	46c0      	nop			; (mov r8, r8)
   19f0e:	2008      	movs	r0, #8
   19f10:	4b2e      	ldr	r3, [pc, #184]	; (19fcc <system_clock_init+0x258>)
   19f12:	4798      	blx	r3
   19f14:	0003      	movs	r3, r0
   19f16:	001a      	movs	r2, r3
   19f18:	2301      	movs	r3, #1
   19f1a:	4053      	eors	r3, r2
   19f1c:	b2db      	uxtb	r3, r3
   19f1e:	2b00      	cmp	r3, #0
   19f20:	d1f5      	bne.n	19f0e <system_clock_init+0x19a>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   19f22:	4919      	ldr	r1, [pc, #100]	; (19f88 <system_clock_init+0x214>)
   19f24:	2244      	movs	r2, #68	; 0x44
   19f26:	5c8b      	ldrb	r3, [r1, r2]
   19f28:	2080      	movs	r0, #128	; 0x80
   19f2a:	4240      	negs	r0, r0
   19f2c:	4303      	orrs	r3, r0
   19f2e:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   19f30:	2000      	movs	r0, #0
   19f32:	4b27      	ldr	r3, [pc, #156]	; (19fd0 <system_clock_init+0x25c>)
   19f34:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   19f36:	2100      	movs	r1, #0
   19f38:	2000      	movs	r0, #0
   19f3a:	4b26      	ldr	r3, [pc, #152]	; (19fd4 <system_clock_init+0x260>)
   19f3c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   19f3e:	2100      	movs	r1, #0
   19f40:	2001      	movs	r0, #1
   19f42:	4b24      	ldr	r3, [pc, #144]	; (19fd4 <system_clock_init+0x260>)
   19f44:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   19f46:	2100      	movs	r1, #0
   19f48:	2002      	movs	r0, #2
   19f4a:	4b22      	ldr	r3, [pc, #136]	; (19fd4 <system_clock_init+0x260>)
   19f4c:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   19f4e:	003b      	movs	r3, r7
   19f50:	0018      	movs	r0, r3
   19f52:	4b14      	ldr	r3, [pc, #80]	; (19fa4 <system_clock_init+0x230>)
   19f54:	4798      	blx	r3
   19f56:	003b      	movs	r3, r7
   19f58:	2208      	movs	r2, #8
   19f5a:	701a      	strb	r2, [r3, #0]
   19f5c:	003b      	movs	r3, r7
   19f5e:	2201      	movs	r2, #1
   19f60:	605a      	str	r2, [r3, #4]
   19f62:	003b      	movs	r3, r7
   19f64:	2200      	movs	r2, #0
   19f66:	721a      	strb	r2, [r3, #8]
   19f68:	003b      	movs	r3, r7
   19f6a:	2201      	movs	r2, #1
   19f6c:	725a      	strb	r2, [r3, #9]
   19f6e:	003b      	movs	r3, r7
   19f70:	0019      	movs	r1, r3
   19f72:	2000      	movs	r0, #0
   19f74:	4b0c      	ldr	r3, [pc, #48]	; (19fa8 <system_clock_init+0x234>)
   19f76:	4798      	blx	r3
   19f78:	2000      	movs	r0, #0
   19f7a:	4b0c      	ldr	r3, [pc, #48]	; (19fac <system_clock_init+0x238>)
   19f7c:	4798      	blx	r3
#endif
}
   19f7e:	46c0      	nop			; (mov r8, r8)
   19f80:	46bd      	mov	sp, r7
   19f82:	b026      	add	sp, #152	; 0x98
   19f84:	bd80      	pop	{r7, pc}
   19f86:	46c0      	nop			; (mov r8, r8)
   19f88:	40000800 	.word	0x40000800
   19f8c:	00019935 	.word	0x00019935
   19f90:	00019d3d 	.word	0x00019d3d
   19f94:	00019845 	.word	0x00019845
   19f98:	00019a89 	.word	0x00019a89
   19f9c:	00019c0d 	.word	0x00019c0d
   19fa0:	0001a07d 	.word	0x0001a07d
   19fa4:	00019801 	.word	0x00019801
   19fa8:	0001a0ad 	.word	0x0001a0ad
   19fac:	0001a1d1 	.word	0x0001a1d1
   19fb0:	0001982f 	.word	0x0001982f
   19fb4:	0001a305 	.word	0x0001a305
   19fb8:	0001a349 	.word	0x0001a349
   19fbc:	000198dd 	.word	0x000198dd
   19fc0:	000f4240 	.word	0x000f4240
   19fc4:	02dc6c00 	.word	0x02dc6c00
   19fc8:	00019b01 	.word	0x00019b01
   19fcc:	00019cb9 	.word	0x00019cb9
   19fd0:	00019869 	.word	0x00019869
   19fd4:	00019889 	.word	0x00019889

00019fd8 <system_apb_clock_set_mask>:
{
   19fd8:	b580      	push	{r7, lr}
   19fda:	b082      	sub	sp, #8
   19fdc:	af00      	add	r7, sp, #0
   19fde:	0002      	movs	r2, r0
   19fe0:	6039      	str	r1, [r7, #0]
   19fe2:	1dfb      	adds	r3, r7, #7
   19fe4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   19fe6:	1dfb      	adds	r3, r7, #7
   19fe8:	781b      	ldrb	r3, [r3, #0]
   19fea:	2b01      	cmp	r3, #1
   19fec:	d00a      	beq.n	1a004 <system_apb_clock_set_mask+0x2c>
   19fee:	2b02      	cmp	r3, #2
   19ff0:	d00f      	beq.n	1a012 <system_apb_clock_set_mask+0x3a>
   19ff2:	2b00      	cmp	r3, #0
   19ff4:	d114      	bne.n	1a020 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   19ff6:	4b0e      	ldr	r3, [pc, #56]	; (1a030 <system_apb_clock_set_mask+0x58>)
   19ff8:	4a0d      	ldr	r2, [pc, #52]	; (1a030 <system_apb_clock_set_mask+0x58>)
   19ffa:	6991      	ldr	r1, [r2, #24]
   19ffc:	683a      	ldr	r2, [r7, #0]
   19ffe:	430a      	orrs	r2, r1
   1a000:	619a      	str	r2, [r3, #24]
			break;
   1a002:	e00f      	b.n	1a024 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1a004:	4b0a      	ldr	r3, [pc, #40]	; (1a030 <system_apb_clock_set_mask+0x58>)
   1a006:	4a0a      	ldr	r2, [pc, #40]	; (1a030 <system_apb_clock_set_mask+0x58>)
   1a008:	69d1      	ldr	r1, [r2, #28]
   1a00a:	683a      	ldr	r2, [r7, #0]
   1a00c:	430a      	orrs	r2, r1
   1a00e:	61da      	str	r2, [r3, #28]
			break;
   1a010:	e008      	b.n	1a024 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1a012:	4b07      	ldr	r3, [pc, #28]	; (1a030 <system_apb_clock_set_mask+0x58>)
   1a014:	4a06      	ldr	r2, [pc, #24]	; (1a030 <system_apb_clock_set_mask+0x58>)
   1a016:	6a11      	ldr	r1, [r2, #32]
   1a018:	683a      	ldr	r2, [r7, #0]
   1a01a:	430a      	orrs	r2, r1
   1a01c:	621a      	str	r2, [r3, #32]
			break;
   1a01e:	e001      	b.n	1a024 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1a020:	2317      	movs	r3, #23
   1a022:	e000      	b.n	1a026 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1a024:	2300      	movs	r3, #0
}
   1a026:	0018      	movs	r0, r3
   1a028:	46bd      	mov	sp, r7
   1a02a:	b002      	add	sp, #8
   1a02c:	bd80      	pop	{r7, pc}
   1a02e:	46c0      	nop			; (mov r8, r8)
   1a030:	40000400 	.word	0x40000400

0001a034 <system_interrupt_enter_critical_section>:
{
   1a034:	b580      	push	{r7, lr}
   1a036:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1a038:	4b02      	ldr	r3, [pc, #8]	; (1a044 <system_interrupt_enter_critical_section+0x10>)
   1a03a:	4798      	blx	r3
}
   1a03c:	46c0      	nop			; (mov r8, r8)
   1a03e:	46bd      	mov	sp, r7
   1a040:	bd80      	pop	{r7, pc}
   1a042:	46c0      	nop			; (mov r8, r8)
   1a044:	00017e59 	.word	0x00017e59

0001a048 <system_interrupt_leave_critical_section>:
{
   1a048:	b580      	push	{r7, lr}
   1a04a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1a04c:	4b02      	ldr	r3, [pc, #8]	; (1a058 <system_interrupt_leave_critical_section+0x10>)
   1a04e:	4798      	blx	r3
}
   1a050:	46c0      	nop			; (mov r8, r8)
   1a052:	46bd      	mov	sp, r7
   1a054:	bd80      	pop	{r7, pc}
   1a056:	46c0      	nop			; (mov r8, r8)
   1a058:	00017ead 	.word	0x00017ead

0001a05c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   1a05c:	b580      	push	{r7, lr}
   1a05e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1a060:	4b05      	ldr	r3, [pc, #20]	; (1a078 <system_gclk_is_syncing+0x1c>)
   1a062:	785b      	ldrb	r3, [r3, #1]
   1a064:	b2db      	uxtb	r3, r3
   1a066:	b25b      	sxtb	r3, r3
   1a068:	2b00      	cmp	r3, #0
   1a06a:	da01      	bge.n	1a070 <system_gclk_is_syncing+0x14>
		return true;
   1a06c:	2301      	movs	r3, #1
   1a06e:	e000      	b.n	1a072 <system_gclk_is_syncing+0x16>
	}

	return false;
   1a070:	2300      	movs	r3, #0
}
   1a072:	0018      	movs	r0, r3
   1a074:	46bd      	mov	sp, r7
   1a076:	bd80      	pop	{r7, pc}
   1a078:	40000c00 	.word	0x40000c00

0001a07c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   1a07c:	b580      	push	{r7, lr}
   1a07e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   1a080:	2108      	movs	r1, #8
   1a082:	2000      	movs	r0, #0
   1a084:	4b07      	ldr	r3, [pc, #28]	; (1a0a4 <system_gclk_init+0x28>)
   1a086:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   1a088:	4b07      	ldr	r3, [pc, #28]	; (1a0a8 <system_gclk_init+0x2c>)
   1a08a:	2201      	movs	r2, #1
   1a08c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   1a08e:	46c0      	nop			; (mov r8, r8)
   1a090:	4b05      	ldr	r3, [pc, #20]	; (1a0a8 <system_gclk_init+0x2c>)
   1a092:	781b      	ldrb	r3, [r3, #0]
   1a094:	b2db      	uxtb	r3, r3
   1a096:	001a      	movs	r2, r3
   1a098:	2301      	movs	r3, #1
   1a09a:	4013      	ands	r3, r2
   1a09c:	d1f8      	bne.n	1a090 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   1a09e:	46c0      	nop			; (mov r8, r8)
   1a0a0:	46bd      	mov	sp, r7
   1a0a2:	bd80      	pop	{r7, pc}
   1a0a4:	00019fd9 	.word	0x00019fd9
   1a0a8:	40000c00 	.word	0x40000c00

0001a0ac <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   1a0ac:	b580      	push	{r7, lr}
   1a0ae:	b086      	sub	sp, #24
   1a0b0:	af00      	add	r7, sp, #0
   1a0b2:	0002      	movs	r2, r0
   1a0b4:	6039      	str	r1, [r7, #0]
   1a0b6:	1dfb      	adds	r3, r7, #7
   1a0b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   1a0ba:	1dfb      	adds	r3, r7, #7
   1a0bc:	781b      	ldrb	r3, [r3, #0]
   1a0be:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   1a0c0:	1dfb      	adds	r3, r7, #7
   1a0c2:	781b      	ldrb	r3, [r3, #0]
   1a0c4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   1a0c6:	683b      	ldr	r3, [r7, #0]
   1a0c8:	781b      	ldrb	r3, [r3, #0]
   1a0ca:	021b      	lsls	r3, r3, #8
   1a0cc:	001a      	movs	r2, r3
   1a0ce:	697b      	ldr	r3, [r7, #20]
   1a0d0:	4313      	orrs	r3, r2
   1a0d2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   1a0d4:	683b      	ldr	r3, [r7, #0]
   1a0d6:	785b      	ldrb	r3, [r3, #1]
   1a0d8:	2b00      	cmp	r3, #0
   1a0da:	d004      	beq.n	1a0e6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   1a0dc:	697b      	ldr	r3, [r7, #20]
   1a0de:	2280      	movs	r2, #128	; 0x80
   1a0e0:	02d2      	lsls	r2, r2, #11
   1a0e2:	4313      	orrs	r3, r2
   1a0e4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   1a0e6:	683b      	ldr	r3, [r7, #0]
   1a0e8:	7a5b      	ldrb	r3, [r3, #9]
   1a0ea:	2b00      	cmp	r3, #0
   1a0ec:	d004      	beq.n	1a0f8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   1a0ee:	697b      	ldr	r3, [r7, #20]
   1a0f0:	2280      	movs	r2, #128	; 0x80
   1a0f2:	0312      	lsls	r2, r2, #12
   1a0f4:	4313      	orrs	r3, r2
   1a0f6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   1a0f8:	683b      	ldr	r3, [r7, #0]
   1a0fa:	685b      	ldr	r3, [r3, #4]
   1a0fc:	2b01      	cmp	r3, #1
   1a0fe:	d92c      	bls.n	1a15a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   1a100:	683b      	ldr	r3, [r7, #0]
   1a102:	685a      	ldr	r2, [r3, #4]
   1a104:	683b      	ldr	r3, [r7, #0]
   1a106:	685b      	ldr	r3, [r3, #4]
   1a108:	3b01      	subs	r3, #1
   1a10a:	4013      	ands	r3, r2
   1a10c:	d11a      	bne.n	1a144 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   1a10e:	2300      	movs	r3, #0
   1a110:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   1a112:	2302      	movs	r3, #2
   1a114:	60bb      	str	r3, [r7, #8]
   1a116:	e005      	b.n	1a124 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   1a118:	68fb      	ldr	r3, [r7, #12]
   1a11a:	3301      	adds	r3, #1
   1a11c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   1a11e:	68bb      	ldr	r3, [r7, #8]
   1a120:	005b      	lsls	r3, r3, #1
   1a122:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   1a124:	683b      	ldr	r3, [r7, #0]
   1a126:	685a      	ldr	r2, [r3, #4]
   1a128:	68bb      	ldr	r3, [r7, #8]
   1a12a:	429a      	cmp	r2, r3
   1a12c:	d8f4      	bhi.n	1a118 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   1a12e:	68fb      	ldr	r3, [r7, #12]
   1a130:	021b      	lsls	r3, r3, #8
   1a132:	693a      	ldr	r2, [r7, #16]
   1a134:	4313      	orrs	r3, r2
   1a136:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   1a138:	697b      	ldr	r3, [r7, #20]
   1a13a:	2280      	movs	r2, #128	; 0x80
   1a13c:	0352      	lsls	r2, r2, #13
   1a13e:	4313      	orrs	r3, r2
   1a140:	617b      	str	r3, [r7, #20]
   1a142:	e00a      	b.n	1a15a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   1a144:	683b      	ldr	r3, [r7, #0]
   1a146:	685b      	ldr	r3, [r3, #4]
   1a148:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   1a14a:	693a      	ldr	r2, [r7, #16]
   1a14c:	4313      	orrs	r3, r2
   1a14e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   1a150:	697b      	ldr	r3, [r7, #20]
   1a152:	2280      	movs	r2, #128	; 0x80
   1a154:	0292      	lsls	r2, r2, #10
   1a156:	4313      	orrs	r3, r2
   1a158:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   1a15a:	683b      	ldr	r3, [r7, #0]
   1a15c:	7a1b      	ldrb	r3, [r3, #8]
   1a15e:	2b00      	cmp	r3, #0
   1a160:	d004      	beq.n	1a16c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   1a162:	697b      	ldr	r3, [r7, #20]
   1a164:	2280      	movs	r2, #128	; 0x80
   1a166:	0392      	lsls	r2, r2, #14
   1a168:	4313      	orrs	r3, r2
   1a16a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   1a16c:	46c0      	nop			; (mov r8, r8)
   1a16e:	4b13      	ldr	r3, [pc, #76]	; (1a1bc <system_gclk_gen_set_config+0x110>)
   1a170:	4798      	blx	r3
   1a172:	1e03      	subs	r3, r0, #0
   1a174:	d1fb      	bne.n	1a16e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1a176:	4b12      	ldr	r3, [pc, #72]	; (1a1c0 <system_gclk_gen_set_config+0x114>)
   1a178:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1a17a:	4a12      	ldr	r2, [pc, #72]	; (1a1c4 <system_gclk_gen_set_config+0x118>)
   1a17c:	1dfb      	adds	r3, r7, #7
   1a17e:	781b      	ldrb	r3, [r3, #0]
   1a180:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   1a182:	46c0      	nop			; (mov r8, r8)
   1a184:	4b0d      	ldr	r3, [pc, #52]	; (1a1bc <system_gclk_gen_set_config+0x110>)
   1a186:	4798      	blx	r3
   1a188:	1e03      	subs	r3, r0, #0
   1a18a:	d1fb      	bne.n	1a184 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   1a18c:	4b0e      	ldr	r3, [pc, #56]	; (1a1c8 <system_gclk_gen_set_config+0x11c>)
   1a18e:	693a      	ldr	r2, [r7, #16]
   1a190:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   1a192:	46c0      	nop			; (mov r8, r8)
   1a194:	4b09      	ldr	r3, [pc, #36]	; (1a1bc <system_gclk_gen_set_config+0x110>)
   1a196:	4798      	blx	r3
   1a198:	1e03      	subs	r3, r0, #0
   1a19a:	d1fb      	bne.n	1a194 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   1a19c:	4b0a      	ldr	r3, [pc, #40]	; (1a1c8 <system_gclk_gen_set_config+0x11c>)
   1a19e:	4a0a      	ldr	r2, [pc, #40]	; (1a1c8 <system_gclk_gen_set_config+0x11c>)
   1a1a0:	6851      	ldr	r1, [r2, #4]
   1a1a2:	2280      	movs	r2, #128	; 0x80
   1a1a4:	0252      	lsls	r2, r2, #9
   1a1a6:	4011      	ands	r1, r2
   1a1a8:	697a      	ldr	r2, [r7, #20]
   1a1aa:	430a      	orrs	r2, r1
   1a1ac:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   1a1ae:	4b07      	ldr	r3, [pc, #28]	; (1a1cc <system_gclk_gen_set_config+0x120>)
   1a1b0:	4798      	blx	r3
}
   1a1b2:	46c0      	nop			; (mov r8, r8)
   1a1b4:	46bd      	mov	sp, r7
   1a1b6:	b006      	add	sp, #24
   1a1b8:	bd80      	pop	{r7, pc}
   1a1ba:	46c0      	nop			; (mov r8, r8)
   1a1bc:	0001a05d 	.word	0x0001a05d
   1a1c0:	0001a035 	.word	0x0001a035
   1a1c4:	40000c08 	.word	0x40000c08
   1a1c8:	40000c00 	.word	0x40000c00
   1a1cc:	0001a049 	.word	0x0001a049

0001a1d0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   1a1d0:	b580      	push	{r7, lr}
   1a1d2:	b082      	sub	sp, #8
   1a1d4:	af00      	add	r7, sp, #0
   1a1d6:	0002      	movs	r2, r0
   1a1d8:	1dfb      	adds	r3, r7, #7
   1a1da:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   1a1dc:	46c0      	nop			; (mov r8, r8)
   1a1de:	4b0e      	ldr	r3, [pc, #56]	; (1a218 <system_gclk_gen_enable+0x48>)
   1a1e0:	4798      	blx	r3
   1a1e2:	1e03      	subs	r3, r0, #0
   1a1e4:	d1fb      	bne.n	1a1de <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1a1e6:	4b0d      	ldr	r3, [pc, #52]	; (1a21c <system_gclk_gen_enable+0x4c>)
   1a1e8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1a1ea:	4a0d      	ldr	r2, [pc, #52]	; (1a220 <system_gclk_gen_enable+0x50>)
   1a1ec:	1dfb      	adds	r3, r7, #7
   1a1ee:	781b      	ldrb	r3, [r3, #0]
   1a1f0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   1a1f2:	46c0      	nop			; (mov r8, r8)
   1a1f4:	4b08      	ldr	r3, [pc, #32]	; (1a218 <system_gclk_gen_enable+0x48>)
   1a1f6:	4798      	blx	r3
   1a1f8:	1e03      	subs	r3, r0, #0
   1a1fa:	d1fb      	bne.n	1a1f4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   1a1fc:	4b09      	ldr	r3, [pc, #36]	; (1a224 <system_gclk_gen_enable+0x54>)
   1a1fe:	4a09      	ldr	r2, [pc, #36]	; (1a224 <system_gclk_gen_enable+0x54>)
   1a200:	6852      	ldr	r2, [r2, #4]
   1a202:	2180      	movs	r1, #128	; 0x80
   1a204:	0249      	lsls	r1, r1, #9
   1a206:	430a      	orrs	r2, r1
   1a208:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   1a20a:	4b07      	ldr	r3, [pc, #28]	; (1a228 <system_gclk_gen_enable+0x58>)
   1a20c:	4798      	blx	r3
}
   1a20e:	46c0      	nop			; (mov r8, r8)
   1a210:	46bd      	mov	sp, r7
   1a212:	b002      	add	sp, #8
   1a214:	bd80      	pop	{r7, pc}
   1a216:	46c0      	nop			; (mov r8, r8)
   1a218:	0001a05d 	.word	0x0001a05d
   1a21c:	0001a035 	.word	0x0001a035
   1a220:	40000c04 	.word	0x40000c04
   1a224:	40000c00 	.word	0x40000c00
   1a228:	0001a049 	.word	0x0001a049

0001a22c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   1a22c:	b580      	push	{r7, lr}
   1a22e:	b086      	sub	sp, #24
   1a230:	af00      	add	r7, sp, #0
   1a232:	0002      	movs	r2, r0
   1a234:	1dfb      	adds	r3, r7, #7
   1a236:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   1a238:	46c0      	nop			; (mov r8, r8)
   1a23a:	4b2a      	ldr	r3, [pc, #168]	; (1a2e4 <system_gclk_gen_get_hz+0xb8>)
   1a23c:	4798      	blx	r3
   1a23e:	1e03      	subs	r3, r0, #0
   1a240:	d1fb      	bne.n	1a23a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1a242:	4b29      	ldr	r3, [pc, #164]	; (1a2e8 <system_gclk_gen_get_hz+0xbc>)
   1a244:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1a246:	4a29      	ldr	r2, [pc, #164]	; (1a2ec <system_gclk_gen_get_hz+0xc0>)
   1a248:	1dfb      	adds	r3, r7, #7
   1a24a:	781b      	ldrb	r3, [r3, #0]
   1a24c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   1a24e:	46c0      	nop			; (mov r8, r8)
   1a250:	4b24      	ldr	r3, [pc, #144]	; (1a2e4 <system_gclk_gen_get_hz+0xb8>)
   1a252:	4798      	blx	r3
   1a254:	1e03      	subs	r3, r0, #0
   1a256:	d1fb      	bne.n	1a250 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   1a258:	4b25      	ldr	r3, [pc, #148]	; (1a2f0 <system_gclk_gen_get_hz+0xc4>)
   1a25a:	685b      	ldr	r3, [r3, #4]
   1a25c:	04db      	lsls	r3, r3, #19
   1a25e:	0edb      	lsrs	r3, r3, #27
   1a260:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1a262:	0018      	movs	r0, r3
   1a264:	4b23      	ldr	r3, [pc, #140]	; (1a2f4 <system_gclk_gen_get_hz+0xc8>)
   1a266:	4798      	blx	r3
   1a268:	0003      	movs	r3, r0
   1a26a:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1a26c:	4a1f      	ldr	r2, [pc, #124]	; (1a2ec <system_gclk_gen_get_hz+0xc0>)
   1a26e:	1dfb      	adds	r3, r7, #7
   1a270:	781b      	ldrb	r3, [r3, #0]
   1a272:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1a274:	4b1e      	ldr	r3, [pc, #120]	; (1a2f0 <system_gclk_gen_get_hz+0xc4>)
   1a276:	685b      	ldr	r3, [r3, #4]
   1a278:	02db      	lsls	r3, r3, #11
   1a27a:	0fdb      	lsrs	r3, r3, #31
   1a27c:	b2da      	uxtb	r2, r3
   1a27e:	2313      	movs	r3, #19
   1a280:	18fb      	adds	r3, r7, r3
   1a282:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1a284:	4a1c      	ldr	r2, [pc, #112]	; (1a2f8 <system_gclk_gen_get_hz+0xcc>)
   1a286:	1dfb      	adds	r3, r7, #7
   1a288:	781b      	ldrb	r3, [r3, #0]
   1a28a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   1a28c:	46c0      	nop			; (mov r8, r8)
   1a28e:	4b15      	ldr	r3, [pc, #84]	; (1a2e4 <system_gclk_gen_get_hz+0xb8>)
   1a290:	4798      	blx	r3
   1a292:	1e03      	subs	r3, r0, #0
   1a294:	d1fb      	bne.n	1a28e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1a296:	4b16      	ldr	r3, [pc, #88]	; (1a2f0 <system_gclk_gen_get_hz+0xc4>)
   1a298:	689b      	ldr	r3, [r3, #8]
   1a29a:	021b      	lsls	r3, r3, #8
   1a29c:	0c1b      	lsrs	r3, r3, #16
   1a29e:	b29b      	uxth	r3, r3
   1a2a0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   1a2a2:	4b16      	ldr	r3, [pc, #88]	; (1a2fc <system_gclk_gen_get_hz+0xd0>)
   1a2a4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1a2a6:	2313      	movs	r3, #19
   1a2a8:	18fb      	adds	r3, r7, r3
   1a2aa:	781b      	ldrb	r3, [r3, #0]
   1a2ac:	2b00      	cmp	r3, #0
   1a2ae:	d109      	bne.n	1a2c4 <system_gclk_gen_get_hz+0x98>
   1a2b0:	68fb      	ldr	r3, [r7, #12]
   1a2b2:	2b01      	cmp	r3, #1
   1a2b4:	d906      	bls.n	1a2c4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   1a2b6:	4b12      	ldr	r3, [pc, #72]	; (1a300 <system_gclk_gen_get_hz+0xd4>)
   1a2b8:	68f9      	ldr	r1, [r7, #12]
   1a2ba:	6978      	ldr	r0, [r7, #20]
   1a2bc:	4798      	blx	r3
   1a2be:	0003      	movs	r3, r0
   1a2c0:	617b      	str	r3, [r7, #20]
   1a2c2:	e00a      	b.n	1a2da <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   1a2c4:	2313      	movs	r3, #19
   1a2c6:	18fb      	adds	r3, r7, r3
   1a2c8:	781b      	ldrb	r3, [r3, #0]
   1a2ca:	2b00      	cmp	r3, #0
   1a2cc:	d005      	beq.n	1a2da <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   1a2ce:	68fb      	ldr	r3, [r7, #12]
   1a2d0:	3301      	adds	r3, #1
   1a2d2:	697a      	ldr	r2, [r7, #20]
   1a2d4:	40da      	lsrs	r2, r3
   1a2d6:	0013      	movs	r3, r2
   1a2d8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   1a2da:	697b      	ldr	r3, [r7, #20]
}
   1a2dc:	0018      	movs	r0, r3
   1a2de:	46bd      	mov	sp, r7
   1a2e0:	b006      	add	sp, #24
   1a2e2:	bd80      	pop	{r7, pc}
   1a2e4:	0001a05d 	.word	0x0001a05d
   1a2e8:	0001a035 	.word	0x0001a035
   1a2ec:	40000c04 	.word	0x40000c04
   1a2f0:	40000c00 	.word	0x40000c00
   1a2f4:	000199c9 	.word	0x000199c9
   1a2f8:	40000c08 	.word	0x40000c08
   1a2fc:	0001a049 	.word	0x0001a049
   1a300:	0001ab09 	.word	0x0001ab09

0001a304 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   1a304:	b580      	push	{r7, lr}
   1a306:	b084      	sub	sp, #16
   1a308:	af00      	add	r7, sp, #0
   1a30a:	0002      	movs	r2, r0
   1a30c:	6039      	str	r1, [r7, #0]
   1a30e:	1dfb      	adds	r3, r7, #7
   1a310:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   1a312:	1dfb      	adds	r3, r7, #7
   1a314:	781b      	ldrb	r3, [r3, #0]
   1a316:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   1a318:	683b      	ldr	r3, [r7, #0]
   1a31a:	781b      	ldrb	r3, [r3, #0]
   1a31c:	021b      	lsls	r3, r3, #8
   1a31e:	001a      	movs	r2, r3
   1a320:	68fb      	ldr	r3, [r7, #12]
   1a322:	4313      	orrs	r3, r2
   1a324:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   1a326:	1dfb      	adds	r3, r7, #7
   1a328:	781b      	ldrb	r3, [r3, #0]
   1a32a:	0018      	movs	r0, r3
   1a32c:	4b04      	ldr	r3, [pc, #16]	; (1a340 <system_gclk_chan_set_config+0x3c>)
   1a32e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   1a330:	4b04      	ldr	r3, [pc, #16]	; (1a344 <system_gclk_chan_set_config+0x40>)
   1a332:	68fa      	ldr	r2, [r7, #12]
   1a334:	b292      	uxth	r2, r2
   1a336:	805a      	strh	r2, [r3, #2]
}
   1a338:	46c0      	nop			; (mov r8, r8)
   1a33a:	46bd      	mov	sp, r7
   1a33c:	b004      	add	sp, #16
   1a33e:	bd80      	pop	{r7, pc}
   1a340:	0001a391 	.word	0x0001a391
   1a344:	40000c00 	.word	0x40000c00

0001a348 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   1a348:	b580      	push	{r7, lr}
   1a34a:	b082      	sub	sp, #8
   1a34c:	af00      	add	r7, sp, #0
   1a34e:	0002      	movs	r2, r0
   1a350:	1dfb      	adds	r3, r7, #7
   1a352:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   1a354:	4b0a      	ldr	r3, [pc, #40]	; (1a380 <system_gclk_chan_enable+0x38>)
   1a356:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1a358:	4a0a      	ldr	r2, [pc, #40]	; (1a384 <system_gclk_chan_enable+0x3c>)
   1a35a:	1dfb      	adds	r3, r7, #7
   1a35c:	781b      	ldrb	r3, [r3, #0]
   1a35e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   1a360:	4909      	ldr	r1, [pc, #36]	; (1a388 <system_gclk_chan_enable+0x40>)
   1a362:	4b09      	ldr	r3, [pc, #36]	; (1a388 <system_gclk_chan_enable+0x40>)
   1a364:	885b      	ldrh	r3, [r3, #2]
   1a366:	b29b      	uxth	r3, r3
   1a368:	2280      	movs	r2, #128	; 0x80
   1a36a:	01d2      	lsls	r2, r2, #7
   1a36c:	4313      	orrs	r3, r2
   1a36e:	b29b      	uxth	r3, r3
   1a370:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   1a372:	4b06      	ldr	r3, [pc, #24]	; (1a38c <system_gclk_chan_enable+0x44>)
   1a374:	4798      	blx	r3
}
   1a376:	46c0      	nop			; (mov r8, r8)
   1a378:	46bd      	mov	sp, r7
   1a37a:	b002      	add	sp, #8
   1a37c:	bd80      	pop	{r7, pc}
   1a37e:	46c0      	nop			; (mov r8, r8)
   1a380:	0001a035 	.word	0x0001a035
   1a384:	40000c02 	.word	0x40000c02
   1a388:	40000c00 	.word	0x40000c00
   1a38c:	0001a049 	.word	0x0001a049

0001a390 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   1a390:	b580      	push	{r7, lr}
   1a392:	b084      	sub	sp, #16
   1a394:	af00      	add	r7, sp, #0
   1a396:	0002      	movs	r2, r0
   1a398:	1dfb      	adds	r3, r7, #7
   1a39a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   1a39c:	4b1c      	ldr	r3, [pc, #112]	; (1a410 <system_gclk_chan_disable+0x80>)
   1a39e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1a3a0:	4a1c      	ldr	r2, [pc, #112]	; (1a414 <system_gclk_chan_disable+0x84>)
   1a3a2:	1dfb      	adds	r3, r7, #7
   1a3a4:	781b      	ldrb	r3, [r3, #0]
   1a3a6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   1a3a8:	4b1b      	ldr	r3, [pc, #108]	; (1a418 <system_gclk_chan_disable+0x88>)
   1a3aa:	885b      	ldrh	r3, [r3, #2]
   1a3ac:	051b      	lsls	r3, r3, #20
   1a3ae:	0f1b      	lsrs	r3, r3, #28
   1a3b0:	b2db      	uxtb	r3, r3
   1a3b2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   1a3b4:	4a18      	ldr	r2, [pc, #96]	; (1a418 <system_gclk_chan_disable+0x88>)
   1a3b6:	8853      	ldrh	r3, [r2, #2]
   1a3b8:	4918      	ldr	r1, [pc, #96]	; (1a41c <system_gclk_chan_disable+0x8c>)
   1a3ba:	400b      	ands	r3, r1
   1a3bc:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   1a3be:	4a16      	ldr	r2, [pc, #88]	; (1a418 <system_gclk_chan_disable+0x88>)
   1a3c0:	4b15      	ldr	r3, [pc, #84]	; (1a418 <system_gclk_chan_disable+0x88>)
   1a3c2:	885b      	ldrh	r3, [r3, #2]
   1a3c4:	b29b      	uxth	r3, r3
   1a3c6:	4916      	ldr	r1, [pc, #88]	; (1a420 <system_gclk_chan_disable+0x90>)
   1a3c8:	400b      	ands	r3, r1
   1a3ca:	b29b      	uxth	r3, r3
   1a3cc:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   1a3ce:	46c0      	nop			; (mov r8, r8)
   1a3d0:	4b11      	ldr	r3, [pc, #68]	; (1a418 <system_gclk_chan_disable+0x88>)
   1a3d2:	885b      	ldrh	r3, [r3, #2]
   1a3d4:	b29b      	uxth	r3, r3
   1a3d6:	001a      	movs	r2, r3
   1a3d8:	2380      	movs	r3, #128	; 0x80
   1a3da:	01db      	lsls	r3, r3, #7
   1a3dc:	4013      	ands	r3, r2
   1a3de:	d1f7      	bne.n	1a3d0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   1a3e0:	4a0d      	ldr	r2, [pc, #52]	; (1a418 <system_gclk_chan_disable+0x88>)
   1a3e2:	68fb      	ldr	r3, [r7, #12]
   1a3e4:	b2db      	uxtb	r3, r3
   1a3e6:	1c19      	adds	r1, r3, #0
   1a3e8:	230f      	movs	r3, #15
   1a3ea:	400b      	ands	r3, r1
   1a3ec:	b2d9      	uxtb	r1, r3
   1a3ee:	8853      	ldrh	r3, [r2, #2]
   1a3f0:	1c08      	adds	r0, r1, #0
   1a3f2:	210f      	movs	r1, #15
   1a3f4:	4001      	ands	r1, r0
   1a3f6:	0208      	lsls	r0, r1, #8
   1a3f8:	4908      	ldr	r1, [pc, #32]	; (1a41c <system_gclk_chan_disable+0x8c>)
   1a3fa:	400b      	ands	r3, r1
   1a3fc:	1c19      	adds	r1, r3, #0
   1a3fe:	1c03      	adds	r3, r0, #0
   1a400:	430b      	orrs	r3, r1
   1a402:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   1a404:	4b07      	ldr	r3, [pc, #28]	; (1a424 <system_gclk_chan_disable+0x94>)
   1a406:	4798      	blx	r3
}
   1a408:	46c0      	nop			; (mov r8, r8)
   1a40a:	46bd      	mov	sp, r7
   1a40c:	b004      	add	sp, #16
   1a40e:	bd80      	pop	{r7, pc}
   1a410:	0001a035 	.word	0x0001a035
   1a414:	40000c02 	.word	0x40000c02
   1a418:	40000c00 	.word	0x40000c00
   1a41c:	fffff0ff 	.word	0xfffff0ff
   1a420:	ffffbfff 	.word	0xffffbfff
   1a424:	0001a049 	.word	0x0001a049

0001a428 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   1a428:	b580      	push	{r7, lr}
   1a42a:	b084      	sub	sp, #16
   1a42c:	af00      	add	r7, sp, #0
   1a42e:	0002      	movs	r2, r0
   1a430:	1dfb      	adds	r3, r7, #7
   1a432:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   1a434:	4b0d      	ldr	r3, [pc, #52]	; (1a46c <system_gclk_chan_get_hz+0x44>)
   1a436:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   1a438:	4a0d      	ldr	r2, [pc, #52]	; (1a470 <system_gclk_chan_get_hz+0x48>)
   1a43a:	1dfb      	adds	r3, r7, #7
   1a43c:	781b      	ldrb	r3, [r3, #0]
   1a43e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   1a440:	4b0c      	ldr	r3, [pc, #48]	; (1a474 <system_gclk_chan_get_hz+0x4c>)
   1a442:	885b      	ldrh	r3, [r3, #2]
   1a444:	051b      	lsls	r3, r3, #20
   1a446:	0f1b      	lsrs	r3, r3, #28
   1a448:	b2da      	uxtb	r2, r3
   1a44a:	230f      	movs	r3, #15
   1a44c:	18fb      	adds	r3, r7, r3
   1a44e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   1a450:	4b09      	ldr	r3, [pc, #36]	; (1a478 <system_gclk_chan_get_hz+0x50>)
   1a452:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   1a454:	230f      	movs	r3, #15
   1a456:	18fb      	adds	r3, r7, r3
   1a458:	781b      	ldrb	r3, [r3, #0]
   1a45a:	0018      	movs	r0, r3
   1a45c:	4b07      	ldr	r3, [pc, #28]	; (1a47c <system_gclk_chan_get_hz+0x54>)
   1a45e:	4798      	blx	r3
   1a460:	0003      	movs	r3, r0
}
   1a462:	0018      	movs	r0, r3
   1a464:	46bd      	mov	sp, r7
   1a466:	b004      	add	sp, #16
   1a468:	bd80      	pop	{r7, pc}
   1a46a:	46c0      	nop			; (mov r8, r8)
   1a46c:	0001a035 	.word	0x0001a035
   1a470:	40000c02 	.word	0x40000c02
   1a474:	40000c00 	.word	0x40000c00
   1a478:	0001a049 	.word	0x0001a049
   1a47c:	0001a22d 	.word	0x0001a22d

0001a480 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   1a480:	b580      	push	{r7, lr}
   1a482:	b084      	sub	sp, #16
   1a484:	af00      	add	r7, sp, #0
   1a486:	0002      	movs	r2, r0
   1a488:	1dfb      	adds	r3, r7, #7
   1a48a:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   1a48c:	230f      	movs	r3, #15
   1a48e:	18fb      	adds	r3, r7, r3
   1a490:	2200      	movs	r2, #0
   1a492:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   1a494:	1dfb      	adds	r3, r7, #7
   1a496:	781b      	ldrb	r3, [r3, #0]
   1a498:	2b7f      	cmp	r3, #127	; 0x7f
   1a49a:	d80b      	bhi.n	1a4b4 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   1a49c:	4a13      	ldr	r2, [pc, #76]	; (1a4ec <system_interrupt_clear_pending+0x6c>)
   1a49e:	1dfb      	adds	r3, r7, #7
   1a4a0:	781b      	ldrb	r3, [r3, #0]
   1a4a2:	b25b      	sxtb	r3, r3
   1a4a4:	2101      	movs	r1, #1
   1a4a6:	4099      	lsls	r1, r3
   1a4a8:	000b      	movs	r3, r1
   1a4aa:	0019      	movs	r1, r3
   1a4ac:	23c0      	movs	r3, #192	; 0xc0
   1a4ae:	005b      	lsls	r3, r3, #1
   1a4b0:	50d1      	str	r1, [r2, r3]
   1a4b2:	e014      	b.n	1a4de <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   1a4b4:	1dfb      	adds	r3, r7, #7
   1a4b6:	781b      	ldrb	r3, [r3, #0]
   1a4b8:	b25b      	sxtb	r3, r3
   1a4ba:	330e      	adds	r3, #14
   1a4bc:	d101      	bne.n	1a4c2 <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   1a4be:	2317      	movs	r3, #23
   1a4c0:	e010      	b.n	1a4e4 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   1a4c2:	1dfb      	adds	r3, r7, #7
   1a4c4:	781b      	ldrb	r3, [r3, #0]
   1a4c6:	b25b      	sxtb	r3, r3
   1a4c8:	3301      	adds	r3, #1
   1a4ca:	d104      	bne.n	1a4d6 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   1a4cc:	4b08      	ldr	r3, [pc, #32]	; (1a4f0 <system_interrupt_clear_pending+0x70>)
   1a4ce:	2280      	movs	r2, #128	; 0x80
   1a4d0:	0492      	lsls	r2, r2, #18
   1a4d2:	605a      	str	r2, [r3, #4]
   1a4d4:	e003      	b.n	1a4de <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   1a4d6:	230f      	movs	r3, #15
   1a4d8:	18fb      	adds	r3, r7, r3
   1a4da:	2217      	movs	r2, #23
   1a4dc:	701a      	strb	r2, [r3, #0]
	}

	return status;
   1a4de:	230f      	movs	r3, #15
   1a4e0:	18fb      	adds	r3, r7, r3
   1a4e2:	781b      	ldrb	r3, [r3, #0]
}
   1a4e4:	0018      	movs	r0, r3
   1a4e6:	46bd      	mov	sp, r7
   1a4e8:	b004      	add	sp, #16
   1a4ea:	bd80      	pop	{r7, pc}
   1a4ec:	e000e100 	.word	0xe000e100
   1a4f0:	e000ed00 	.word	0xe000ed00

0001a4f4 <system_pinmux_get_group_from_gpio_pin>:
{
   1a4f4:	b580      	push	{r7, lr}
   1a4f6:	b084      	sub	sp, #16
   1a4f8:	af00      	add	r7, sp, #0
   1a4fa:	0002      	movs	r2, r0
   1a4fc:	1dfb      	adds	r3, r7, #7
   1a4fe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1a500:	230f      	movs	r3, #15
   1a502:	18fb      	adds	r3, r7, r3
   1a504:	1dfa      	adds	r2, r7, #7
   1a506:	7812      	ldrb	r2, [r2, #0]
   1a508:	09d2      	lsrs	r2, r2, #7
   1a50a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1a50c:	230e      	movs	r3, #14
   1a50e:	18fb      	adds	r3, r7, r3
   1a510:	1dfa      	adds	r2, r7, #7
   1a512:	7812      	ldrb	r2, [r2, #0]
   1a514:	0952      	lsrs	r2, r2, #5
   1a516:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1a518:	4b0d      	ldr	r3, [pc, #52]	; (1a550 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1a51a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1a51c:	230f      	movs	r3, #15
   1a51e:	18fb      	adds	r3, r7, r3
   1a520:	781b      	ldrb	r3, [r3, #0]
   1a522:	2b00      	cmp	r3, #0
   1a524:	d10f      	bne.n	1a546 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1a526:	230f      	movs	r3, #15
   1a528:	18fb      	adds	r3, r7, r3
   1a52a:	781b      	ldrb	r3, [r3, #0]
   1a52c:	009b      	lsls	r3, r3, #2
   1a52e:	2210      	movs	r2, #16
   1a530:	4694      	mov	ip, r2
   1a532:	44bc      	add	ip, r7
   1a534:	4463      	add	r3, ip
   1a536:	3b08      	subs	r3, #8
   1a538:	681a      	ldr	r2, [r3, #0]
   1a53a:	230e      	movs	r3, #14
   1a53c:	18fb      	adds	r3, r7, r3
   1a53e:	781b      	ldrb	r3, [r3, #0]
   1a540:	01db      	lsls	r3, r3, #7
   1a542:	18d3      	adds	r3, r2, r3
   1a544:	e000      	b.n	1a548 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1a546:	2300      	movs	r3, #0
}
   1a548:	0018      	movs	r0, r3
   1a54a:	46bd      	mov	sp, r7
   1a54c:	b004      	add	sp, #16
   1a54e:	bd80      	pop	{r7, pc}
   1a550:	41004400 	.word	0x41004400

0001a554 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   1a554:	b580      	push	{r7, lr}
   1a556:	b088      	sub	sp, #32
   1a558:	af00      	add	r7, sp, #0
   1a55a:	60f8      	str	r0, [r7, #12]
   1a55c:	60b9      	str	r1, [r7, #8]
   1a55e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   1a560:	2300      	movs	r3, #0
   1a562:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   1a564:	687b      	ldr	r3, [r7, #4]
   1a566:	78db      	ldrb	r3, [r3, #3]
   1a568:	2201      	movs	r2, #1
   1a56a:	4053      	eors	r3, r2
   1a56c:	b2db      	uxtb	r3, r3
   1a56e:	2b00      	cmp	r3, #0
   1a570:	d035      	beq.n	1a5de <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   1a572:	687b      	ldr	r3, [r7, #4]
   1a574:	781b      	ldrb	r3, [r3, #0]
   1a576:	2b80      	cmp	r3, #128	; 0x80
   1a578:	d00b      	beq.n	1a592 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   1a57a:	69fb      	ldr	r3, [r7, #28]
   1a57c:	2280      	movs	r2, #128	; 0x80
   1a57e:	0252      	lsls	r2, r2, #9
   1a580:	4313      	orrs	r3, r2
   1a582:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   1a584:	687b      	ldr	r3, [r7, #4]
   1a586:	781b      	ldrb	r3, [r3, #0]
   1a588:	061b      	lsls	r3, r3, #24
   1a58a:	001a      	movs	r2, r3
   1a58c:	69fb      	ldr	r3, [r7, #28]
   1a58e:	4313      	orrs	r3, r2
   1a590:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1a592:	687b      	ldr	r3, [r7, #4]
   1a594:	785b      	ldrb	r3, [r3, #1]
   1a596:	2b00      	cmp	r3, #0
   1a598:	d003      	beq.n	1a5a2 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   1a59a:	687b      	ldr	r3, [r7, #4]
   1a59c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1a59e:	2b02      	cmp	r3, #2
   1a5a0:	d110      	bne.n	1a5c4 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   1a5a2:	69fb      	ldr	r3, [r7, #28]
   1a5a4:	2280      	movs	r2, #128	; 0x80
   1a5a6:	0292      	lsls	r2, r2, #10
   1a5a8:	4313      	orrs	r3, r2
   1a5aa:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   1a5ac:	687b      	ldr	r3, [r7, #4]
   1a5ae:	789b      	ldrb	r3, [r3, #2]
   1a5b0:	2b00      	cmp	r3, #0
   1a5b2:	d004      	beq.n	1a5be <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1a5b4:	69fb      	ldr	r3, [r7, #28]
   1a5b6:	2280      	movs	r2, #128	; 0x80
   1a5b8:	02d2      	lsls	r2, r2, #11
   1a5ba:	4313      	orrs	r3, r2
   1a5bc:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   1a5be:	68fb      	ldr	r3, [r7, #12]
   1a5c0:	68ba      	ldr	r2, [r7, #8]
   1a5c2:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1a5c4:	687b      	ldr	r3, [r7, #4]
   1a5c6:	785b      	ldrb	r3, [r3, #1]
   1a5c8:	2b01      	cmp	r3, #1
   1a5ca:	d003      	beq.n	1a5d4 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   1a5cc:	687b      	ldr	r3, [r7, #4]
   1a5ce:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1a5d0:	2b02      	cmp	r3, #2
   1a5d2:	d107      	bne.n	1a5e4 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   1a5d4:	69fb      	ldr	r3, [r7, #28]
   1a5d6:	4a22      	ldr	r2, [pc, #136]	; (1a660 <_system_pinmux_config+0x10c>)
   1a5d8:	4013      	ands	r3, r2
   1a5da:	61fb      	str	r3, [r7, #28]
   1a5dc:	e002      	b.n	1a5e4 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   1a5de:	68fb      	ldr	r3, [r7, #12]
   1a5e0:	68ba      	ldr	r2, [r7, #8]
   1a5e2:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1a5e4:	68bb      	ldr	r3, [r7, #8]
   1a5e6:	041b      	lsls	r3, r3, #16
   1a5e8:	0c1b      	lsrs	r3, r3, #16
   1a5ea:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1a5ec:	68bb      	ldr	r3, [r7, #8]
   1a5ee:	0c1b      	lsrs	r3, r3, #16
   1a5f0:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1a5f2:	69ba      	ldr	r2, [r7, #24]
   1a5f4:	69fb      	ldr	r3, [r7, #28]
   1a5f6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1a5f8:	22a0      	movs	r2, #160	; 0xa0
   1a5fa:	05d2      	lsls	r2, r2, #23
   1a5fc:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1a5fe:	68fb      	ldr	r3, [r7, #12]
   1a600:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1a602:	697a      	ldr	r2, [r7, #20]
   1a604:	69fb      	ldr	r3, [r7, #28]
   1a606:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1a608:	22d0      	movs	r2, #208	; 0xd0
   1a60a:	0612      	lsls	r2, r2, #24
   1a60c:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1a60e:	68fb      	ldr	r3, [r7, #12]
   1a610:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   1a612:	687b      	ldr	r3, [r7, #4]
   1a614:	78db      	ldrb	r3, [r3, #3]
   1a616:	2201      	movs	r2, #1
   1a618:	4053      	eors	r3, r2
   1a61a:	b2db      	uxtb	r3, r3
   1a61c:	2b00      	cmp	r3, #0
   1a61e:	d01a      	beq.n	1a656 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   1a620:	69fa      	ldr	r2, [r7, #28]
   1a622:	2380      	movs	r3, #128	; 0x80
   1a624:	02db      	lsls	r3, r3, #11
   1a626:	4013      	ands	r3, r2
   1a628:	d00a      	beq.n	1a640 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   1a62a:	687b      	ldr	r3, [r7, #4]
   1a62c:	789b      	ldrb	r3, [r3, #2]
   1a62e:	2b01      	cmp	r3, #1
   1a630:	d103      	bne.n	1a63a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   1a632:	68fb      	ldr	r3, [r7, #12]
   1a634:	68ba      	ldr	r2, [r7, #8]
   1a636:	619a      	str	r2, [r3, #24]
   1a638:	e002      	b.n	1a640 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   1a63a:	68fb      	ldr	r3, [r7, #12]
   1a63c:	68ba      	ldr	r2, [r7, #8]
   1a63e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1a640:	687b      	ldr	r3, [r7, #4]
   1a642:	785b      	ldrb	r3, [r3, #1]
   1a644:	2b01      	cmp	r3, #1
   1a646:	d003      	beq.n	1a650 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   1a648:	687b      	ldr	r3, [r7, #4]
   1a64a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1a64c:	2b02      	cmp	r3, #2
   1a64e:	d102      	bne.n	1a656 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   1a650:	68fb      	ldr	r3, [r7, #12]
   1a652:	68ba      	ldr	r2, [r7, #8]
   1a654:	609a      	str	r2, [r3, #8]
		}
	}
}
   1a656:	46c0      	nop			; (mov r8, r8)
   1a658:	46bd      	mov	sp, r7
   1a65a:	b008      	add	sp, #32
   1a65c:	bd80      	pop	{r7, pc}
   1a65e:	46c0      	nop			; (mov r8, r8)
   1a660:	fffbffff 	.word	0xfffbffff

0001a664 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   1a664:	b580      	push	{r7, lr}
   1a666:	b084      	sub	sp, #16
   1a668:	af00      	add	r7, sp, #0
   1a66a:	0002      	movs	r2, r0
   1a66c:	6039      	str	r1, [r7, #0]
   1a66e:	1dfb      	adds	r3, r7, #7
   1a670:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1a672:	1dfb      	adds	r3, r7, #7
   1a674:	781b      	ldrb	r3, [r3, #0]
   1a676:	0018      	movs	r0, r3
   1a678:	4b0a      	ldr	r3, [pc, #40]	; (1a6a4 <system_pinmux_pin_set_config+0x40>)
   1a67a:	4798      	blx	r3
   1a67c:	0003      	movs	r3, r0
   1a67e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   1a680:	1dfb      	adds	r3, r7, #7
   1a682:	781b      	ldrb	r3, [r3, #0]
   1a684:	221f      	movs	r2, #31
   1a686:	4013      	ands	r3, r2
   1a688:	2201      	movs	r2, #1
   1a68a:	409a      	lsls	r2, r3
   1a68c:	0013      	movs	r3, r2
   1a68e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   1a690:	683a      	ldr	r2, [r7, #0]
   1a692:	68b9      	ldr	r1, [r7, #8]
   1a694:	68fb      	ldr	r3, [r7, #12]
   1a696:	0018      	movs	r0, r3
   1a698:	4b03      	ldr	r3, [pc, #12]	; (1a6a8 <system_pinmux_pin_set_config+0x44>)
   1a69a:	4798      	blx	r3
}
   1a69c:	46c0      	nop			; (mov r8, r8)
   1a69e:	46bd      	mov	sp, r7
   1a6a0:	b004      	add	sp, #16
   1a6a2:	bd80      	pop	{r7, pc}
   1a6a4:	0001a4f5 	.word	0x0001a4f5
   1a6a8:	0001a555 	.word	0x0001a555

0001a6ac <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   1a6ac:	b580      	push	{r7, lr}
   1a6ae:	af00      	add	r7, sp, #0
	return;
   1a6b0:	46c0      	nop			; (mov r8, r8)
}
   1a6b2:	46bd      	mov	sp, r7
   1a6b4:	bd80      	pop	{r7, pc}
	...

0001a6b8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   1a6b8:	b580      	push	{r7, lr}
   1a6ba:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   1a6bc:	4b06      	ldr	r3, [pc, #24]	; (1a6d8 <system_init+0x20>)
   1a6be:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   1a6c0:	4b06      	ldr	r3, [pc, #24]	; (1a6dc <system_init+0x24>)
   1a6c2:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   1a6c4:	4b06      	ldr	r3, [pc, #24]	; (1a6e0 <system_init+0x28>)
   1a6c6:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   1a6c8:	4b06      	ldr	r3, [pc, #24]	; (1a6e4 <system_init+0x2c>)
   1a6ca:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   1a6cc:	4b06      	ldr	r3, [pc, #24]	; (1a6e8 <system_init+0x30>)
   1a6ce:	4798      	blx	r3
}
   1a6d0:	46c0      	nop			; (mov r8, r8)
   1a6d2:	46bd      	mov	sp, r7
   1a6d4:	bd80      	pop	{r7, pc}
   1a6d6:	46c0      	nop			; (mov r8, r8)
   1a6d8:	00019d75 	.word	0x00019d75
   1a6dc:	00017fe9 	.word	0x00017fe9
   1a6e0:	0001a6ad 	.word	0x0001a6ad
   1a6e4:	00018259 	.word	0x00018259
   1a6e8:	0001a6ad 	.word	0x0001a6ad

0001a6ec <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   1a6ec:	b580      	push	{r7, lr}
   1a6ee:	af00      	add	r7, sp, #0
   1a6f0:	2000      	movs	r0, #0
   1a6f2:	4b02      	ldr	r3, [pc, #8]	; (1a6fc <TCC0_Handler+0x10>)
   1a6f4:	4798      	blx	r3
   1a6f6:	46c0      	nop			; (mov r8, r8)
   1a6f8:	46bd      	mov	sp, r7
   1a6fa:	bd80      	pop	{r7, pc}
   1a6fc:	0001a729 	.word	0x0001a729

0001a700 <TCC1_Handler>:
   1a700:	b580      	push	{r7, lr}
   1a702:	af00      	add	r7, sp, #0
   1a704:	2001      	movs	r0, #1
   1a706:	4b02      	ldr	r3, [pc, #8]	; (1a710 <TCC1_Handler+0x10>)
   1a708:	4798      	blx	r3
   1a70a:	46c0      	nop			; (mov r8, r8)
   1a70c:	46bd      	mov	sp, r7
   1a70e:	bd80      	pop	{r7, pc}
   1a710:	0001a729 	.word	0x0001a729

0001a714 <TCC2_Handler>:
   1a714:	b580      	push	{r7, lr}
   1a716:	af00      	add	r7, sp, #0
   1a718:	2002      	movs	r0, #2
   1a71a:	4b02      	ldr	r3, [pc, #8]	; (1a724 <TCC2_Handler+0x10>)
   1a71c:	4798      	blx	r3
   1a71e:	46c0      	nop			; (mov r8, r8)
   1a720:	46bd      	mov	sp, r7
   1a722:	bd80      	pop	{r7, pc}
   1a724:	0001a729 	.word	0x0001a729

0001a728 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   1a728:	b580      	push	{r7, lr}
   1a72a:	b086      	sub	sp, #24
   1a72c:	af00      	add	r7, sp, #0
   1a72e:	0002      	movs	r2, r0
   1a730:	1dfb      	adds	r3, r7, #7
   1a732:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   1a734:	1dfb      	adds	r3, r7, #7
   1a736:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   1a738:	4b18      	ldr	r3, [pc, #96]	; (1a79c <_tcc_interrupt_handler+0x74>)
   1a73a:	0092      	lsls	r2, r2, #2
   1a73c:	58d3      	ldr	r3, [r2, r3]
   1a73e:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1a740:	693b      	ldr	r3, [r7, #16]
   1a742:	681b      	ldr	r3, [r3, #0]
   1a744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   1a746:	693b      	ldr	r3, [r7, #16]
   1a748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1a74a:	401a      	ands	r2, r3
			module->enable_callback_mask);
   1a74c:	693b      	ldr	r3, [r7, #16]
   1a74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   1a750:	4013      	ands	r3, r2
   1a752:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1a754:	2300      	movs	r3, #0
   1a756:	617b      	str	r3, [r7, #20]
   1a758:	e019      	b.n	1a78e <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1a75a:	4b11      	ldr	r3, [pc, #68]	; (1a7a0 <_tcc_interrupt_handler+0x78>)
   1a75c:	697a      	ldr	r2, [r7, #20]
   1a75e:	0092      	lsls	r2, r2, #2
   1a760:	58d3      	ldr	r3, [r2, r3]
   1a762:	68fa      	ldr	r2, [r7, #12]
   1a764:	4013      	ands	r3, r2
   1a766:	d00f      	beq.n	1a788 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   1a768:	693a      	ldr	r2, [r7, #16]
   1a76a:	697b      	ldr	r3, [r7, #20]
   1a76c:	009b      	lsls	r3, r3, #2
   1a76e:	18d3      	adds	r3, r2, r3
   1a770:	3304      	adds	r3, #4
   1a772:	681b      	ldr	r3, [r3, #0]
   1a774:	693a      	ldr	r2, [r7, #16]
   1a776:	0010      	movs	r0, r2
   1a778:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   1a77a:	693b      	ldr	r3, [r7, #16]
   1a77c:	681b      	ldr	r3, [r3, #0]
   1a77e:	4a08      	ldr	r2, [pc, #32]	; (1a7a0 <_tcc_interrupt_handler+0x78>)
   1a780:	6979      	ldr	r1, [r7, #20]
   1a782:	0089      	lsls	r1, r1, #2
   1a784:	588a      	ldr	r2, [r1, r2]
   1a786:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   1a788:	697b      	ldr	r3, [r7, #20]
   1a78a:	3301      	adds	r3, #1
   1a78c:	617b      	str	r3, [r7, #20]
   1a78e:	697b      	ldr	r3, [r7, #20]
   1a790:	2b0b      	cmp	r3, #11
   1a792:	dde2      	ble.n	1a75a <_tcc_interrupt_handler+0x32>
		}
	}
}
   1a794:	46c0      	nop			; (mov r8, r8)
   1a796:	46bd      	mov	sp, r7
   1a798:	b006      	add	sp, #24
   1a79a:	bd80      	pop	{r7, pc}
   1a79c:	20003328 	.word	0x20003328
   1a7a0:	0001e564 	.word	0x0001e564

0001a7a4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   1a7a4:	b580      	push	{r7, lr}
   1a7a6:	b082      	sub	sp, #8
   1a7a8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   1a7aa:	4b2f      	ldr	r3, [pc, #188]	; (1a868 <Reset_Handler+0xc4>)
   1a7ac:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   1a7ae:	4b2f      	ldr	r3, [pc, #188]	; (1a86c <Reset_Handler+0xc8>)
   1a7b0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   1a7b2:	687a      	ldr	r2, [r7, #4]
   1a7b4:	683b      	ldr	r3, [r7, #0]
   1a7b6:	429a      	cmp	r2, r3
   1a7b8:	d00c      	beq.n	1a7d4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   1a7ba:	e007      	b.n	1a7cc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   1a7bc:	683b      	ldr	r3, [r7, #0]
   1a7be:	1d1a      	adds	r2, r3, #4
   1a7c0:	603a      	str	r2, [r7, #0]
   1a7c2:	687a      	ldr	r2, [r7, #4]
   1a7c4:	1d11      	adds	r1, r2, #4
   1a7c6:	6079      	str	r1, [r7, #4]
   1a7c8:	6812      	ldr	r2, [r2, #0]
   1a7ca:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   1a7cc:	683a      	ldr	r2, [r7, #0]
   1a7ce:	4b28      	ldr	r3, [pc, #160]	; (1a870 <Reset_Handler+0xcc>)
   1a7d0:	429a      	cmp	r2, r3
   1a7d2:	d3f3      	bcc.n	1a7bc <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   1a7d4:	4b27      	ldr	r3, [pc, #156]	; (1a874 <Reset_Handler+0xd0>)
   1a7d6:	603b      	str	r3, [r7, #0]
   1a7d8:	e004      	b.n	1a7e4 <Reset_Handler+0x40>
                *pDest++ = 0;
   1a7da:	683b      	ldr	r3, [r7, #0]
   1a7dc:	1d1a      	adds	r2, r3, #4
   1a7de:	603a      	str	r2, [r7, #0]
   1a7e0:	2200      	movs	r2, #0
   1a7e2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   1a7e4:	683a      	ldr	r2, [r7, #0]
   1a7e6:	4b24      	ldr	r3, [pc, #144]	; (1a878 <Reset_Handler+0xd4>)
   1a7e8:	429a      	cmp	r2, r3
   1a7ea:	d3f6      	bcc.n	1a7da <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   1a7ec:	4b23      	ldr	r3, [pc, #140]	; (1a87c <Reset_Handler+0xd8>)
   1a7ee:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   1a7f0:	4b23      	ldr	r3, [pc, #140]	; (1a880 <Reset_Handler+0xdc>)
   1a7f2:	687a      	ldr	r2, [r7, #4]
   1a7f4:	21ff      	movs	r1, #255	; 0xff
   1a7f6:	438a      	bics	r2, r1
   1a7f8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   1a7fa:	4a22      	ldr	r2, [pc, #136]	; (1a884 <Reset_Handler+0xe0>)
   1a7fc:	2390      	movs	r3, #144	; 0x90
   1a7fe:	005b      	lsls	r3, r3, #1
   1a800:	2102      	movs	r1, #2
   1a802:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   1a804:	4a20      	ldr	r2, [pc, #128]	; (1a888 <Reset_Handler+0xe4>)
   1a806:	78d3      	ldrb	r3, [r2, #3]
   1a808:	2103      	movs	r1, #3
   1a80a:	438b      	bics	r3, r1
   1a80c:	1c19      	adds	r1, r3, #0
   1a80e:	2302      	movs	r3, #2
   1a810:	430b      	orrs	r3, r1
   1a812:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   1a814:	4a1c      	ldr	r2, [pc, #112]	; (1a888 <Reset_Handler+0xe4>)
   1a816:	78d3      	ldrb	r3, [r2, #3]
   1a818:	210c      	movs	r1, #12
   1a81a:	438b      	bics	r3, r1
   1a81c:	1c19      	adds	r1, r3, #0
   1a81e:	2308      	movs	r3, #8
   1a820:	430b      	orrs	r3, r1
   1a822:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   1a824:	4a19      	ldr	r2, [pc, #100]	; (1a88c <Reset_Handler+0xe8>)
   1a826:	7b93      	ldrb	r3, [r2, #14]
   1a828:	2130      	movs	r1, #48	; 0x30
   1a82a:	438b      	bics	r3, r1
   1a82c:	1c19      	adds	r1, r3, #0
   1a82e:	2320      	movs	r3, #32
   1a830:	430b      	orrs	r3, r1
   1a832:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   1a834:	4a15      	ldr	r2, [pc, #84]	; (1a88c <Reset_Handler+0xe8>)
   1a836:	7b93      	ldrb	r3, [r2, #14]
   1a838:	210c      	movs	r1, #12
   1a83a:	438b      	bics	r3, r1
   1a83c:	1c19      	adds	r1, r3, #0
   1a83e:	2308      	movs	r3, #8
   1a840:	430b      	orrs	r3, r1
   1a842:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   1a844:	4a11      	ldr	r2, [pc, #68]	; (1a88c <Reset_Handler+0xe8>)
   1a846:	7b93      	ldrb	r3, [r2, #14]
   1a848:	2103      	movs	r1, #3
   1a84a:	438b      	bics	r3, r1
   1a84c:	1c19      	adds	r1, r3, #0
   1a84e:	2302      	movs	r3, #2
   1a850:	430b      	orrs	r3, r1
   1a852:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   1a854:	4a0e      	ldr	r2, [pc, #56]	; (1a890 <Reset_Handler+0xec>)
   1a856:	6853      	ldr	r3, [r2, #4]
   1a858:	2180      	movs	r1, #128	; 0x80
   1a85a:	430b      	orrs	r3, r1
   1a85c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   1a85e:	4b0d      	ldr	r3, [pc, #52]	; (1a894 <Reset_Handler+0xf0>)
   1a860:	4798      	blx	r3

        /* Branch to main function */
        main();
   1a862:	4b0d      	ldr	r3, [pc, #52]	; (1a898 <Reset_Handler+0xf4>)
   1a864:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   1a866:	e7fe      	b.n	1a866 <Reset_Handler+0xc2>
   1a868:	0001e93c 	.word	0x0001e93c
   1a86c:	20000000 	.word	0x20000000
   1a870:	200001fc 	.word	0x200001fc
   1a874:	200001fc 	.word	0x200001fc
   1a878:	20003378 	.word	0x20003378
   1a87c:	00012000 	.word	0x00012000
   1a880:	e000ed00 	.word	0xe000ed00
   1a884:	41007000 	.word	0x41007000
   1a888:	41005000 	.word	0x41005000
   1a88c:	41004800 	.word	0x41004800
   1a890:	41004000 	.word	0x41004000
   1a894:	0001c549 	.word	0x0001c549
   1a898:	0001a97d 	.word	0x0001a97d

0001a89c <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   1a89c:	b580      	push	{r7, lr}
   1a89e:	af00      	add	r7, sp, #0
  __asm volatile (
   1a8a0:	2004      	movs	r0, #4
   1a8a2:	4671      	mov	r1, lr
   1a8a4:	4208      	tst	r0, r1
   1a8a6:	d002      	beq.n	1a8ae <_MSP>
   1a8a8:	f3ef 8009 	mrs	r0, PSP
   1a8ac:	e001      	b.n	1a8b2 <_HALT>

0001a8ae <_MSP>:
   1a8ae:	f3ef 8008 	mrs	r0, MSP

0001a8b2 <_HALT>:
   1a8b2:	6941      	ldr	r1, [r0, #20]
   1a8b4:	e004      	b.n	1a8c0 <HardFault_HandlerC>
   1a8b6:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   1a8b8:	46c0      	nop			; (mov r8, r8)
   1a8ba:	46bd      	mov	sp, r7
   1a8bc:	bd80      	pop	{r7, pc}
	...

0001a8c0 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   1a8c0:	b580      	push	{r7, lr}
   1a8c2:	b090      	sub	sp, #64	; 0x40
   1a8c4:	af00      	add	r7, sp, #0
   1a8c6:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   1a8c8:	687b      	ldr	r3, [r7, #4]
   1a8ca:	681b      	ldr	r3, [r3, #0]
   1a8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   1a8ce:	687b      	ldr	r3, [r7, #4]
   1a8d0:	685b      	ldr	r3, [r3, #4]
   1a8d2:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   1a8d4:	687b      	ldr	r3, [r7, #4]
   1a8d6:	689b      	ldr	r3, [r3, #8]
   1a8d8:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   1a8da:	687b      	ldr	r3, [r7, #4]
   1a8dc:	68db      	ldr	r3, [r3, #12]
   1a8de:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   1a8e0:	687b      	ldr	r3, [r7, #4]
   1a8e2:	691b      	ldr	r3, [r3, #16]
   1a8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   1a8e6:	687b      	ldr	r3, [r7, #4]
   1a8e8:	695b      	ldr	r3, [r3, #20]
   1a8ea:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   1a8ec:	687b      	ldr	r3, [r7, #4]
   1a8ee:	699b      	ldr	r3, [r3, #24]
   1a8f0:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   1a8f2:	687b      	ldr	r3, [r7, #4]
   1a8f4:	69db      	ldr	r3, [r3, #28]
   1a8f6:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   1a8f8:	4b0b      	ldr	r3, [pc, #44]	; (1a928 <HardFault_HandlerC+0x68>)
   1a8fa:	681b      	ldr	r3, [r3, #0]
   1a8fc:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   1a8fe:	4b0b      	ldr	r3, [pc, #44]	; (1a92c <HardFault_HandlerC+0x6c>)
   1a900:	681b      	ldr	r3, [r3, #0]
   1a902:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   1a904:	4b0a      	ldr	r3, [pc, #40]	; (1a930 <HardFault_HandlerC+0x70>)
   1a906:	681b      	ldr	r3, [r3, #0]
   1a908:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   1a90a:	4b0a      	ldr	r3, [pc, #40]	; (1a934 <HardFault_HandlerC+0x74>)
   1a90c:	681b      	ldr	r3, [r3, #0]
   1a90e:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   1a910:	4b09      	ldr	r3, [pc, #36]	; (1a938 <HardFault_HandlerC+0x78>)
   1a912:	681b      	ldr	r3, [r3, #0]
   1a914:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   1a916:	4b09      	ldr	r3, [pc, #36]	; (1a93c <HardFault_HandlerC+0x7c>)
   1a918:	681b      	ldr	r3, [r3, #0]
   1a91a:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   1a91c:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   1a91e:	46c0      	nop			; (mov r8, r8)
   1a920:	46bd      	mov	sp, r7
   1a922:	b010      	add	sp, #64	; 0x40
   1a924:	bd80      	pop	{r7, pc}
   1a926:	46c0      	nop			; (mov r8, r8)
   1a928:	e000ed28 	.word	0xe000ed28
   1a92c:	e000ed2c 	.word	0xe000ed2c
   1a930:	e000ed30 	.word	0xe000ed30
   1a934:	e000ed3c 	.word	0xe000ed3c
   1a938:	e000ed34 	.word	0xe000ed34
   1a93c:	e000ed38 	.word	0xe000ed38

0001a940 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   1a940:	b580      	push	{r7, lr}
   1a942:	b084      	sub	sp, #16
   1a944:	af00      	add	r7, sp, #0
   1a946:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   1a948:	4b0a      	ldr	r3, [pc, #40]	; (1a974 <_sbrk+0x34>)
   1a94a:	681b      	ldr	r3, [r3, #0]
   1a94c:	2b00      	cmp	r3, #0
   1a94e:	d102      	bne.n	1a956 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   1a950:	4b08      	ldr	r3, [pc, #32]	; (1a974 <_sbrk+0x34>)
   1a952:	4a09      	ldr	r2, [pc, #36]	; (1a978 <_sbrk+0x38>)
   1a954:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   1a956:	4b07      	ldr	r3, [pc, #28]	; (1a974 <_sbrk+0x34>)
   1a958:	681b      	ldr	r3, [r3, #0]
   1a95a:	60fb      	str	r3, [r7, #12]

	heap += incr;
   1a95c:	4b05      	ldr	r3, [pc, #20]	; (1a974 <_sbrk+0x34>)
   1a95e:	681a      	ldr	r2, [r3, #0]
   1a960:	687b      	ldr	r3, [r7, #4]
   1a962:	18d2      	adds	r2, r2, r3
   1a964:	4b03      	ldr	r3, [pc, #12]	; (1a974 <_sbrk+0x34>)
   1a966:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   1a968:	68fb      	ldr	r3, [r7, #12]
}
   1a96a:	0018      	movs	r0, r3
   1a96c:	46bd      	mov	sp, r7
   1a96e:	b004      	add	sp, #16
   1a970:	bd80      	pop	{r7, pc}
   1a972:	46c0      	nop			; (mov r8, r8)
   1a974:	20002d50 	.word	0x20002d50
   1a978:	20005378 	.word	0x20005378

0001a97c <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
   1a97c:	b580      	push	{r7, lr}
   1a97e:	af00      	add	r7, sp, #0


	/* Initialize the board. */
	system_init();
   1a980:	4b05      	ldr	r3, [pc, #20]	; (1a998 <main+0x1c>)
   1a982:	4798      	blx	r3

	/* Initialize the UART console. */
	InitializeSerialConsole();
   1a984:	4b05      	ldr	r3, [pc, #20]	; (1a99c <main+0x20>)
   1a986:	4798      	blx	r3
	/* Initialize the I2C driver. */
	I2cInitializeDriver();
   1a988:	4b05      	ldr	r3, [pc, #20]	; (1a9a0 <main+0x24>)
   1a98a:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   1a98c:	4b05      	ldr	r3, [pc, #20]	; (1a9a4 <main+0x28>)
   1a98e:	4798      	blx	r3


	return 0;
   1a990:	2300      	movs	r3, #0
}
   1a992:	0018      	movs	r0, r3
   1a994:	46bd      	mov	sp, r7
   1a996:	bd80      	pop	{r7, pc}
   1a998:	0001a6b9 	.word	0x0001a6b9
   1a99c:	00017b65 	.word	0x00017b65
   1a9a0:	00013309 	.word	0x00013309
   1a9a4:	000166ad 	.word	0x000166ad

0001a9a8 <vApplicationDaemonTaskStartupHook>:
* @param[in]        None
* @return           None
*****************************************************************************/

void vApplicationDaemonTaskStartupHook(void)
{
   1a9a8:	b580      	push	{r7, lr}
   1a9aa:	af00      	add	r7, sp, #0
// #ifdef BOOT_TEST
// 	TestA(); //Comment me for Test B
// 	//TestB(); //Comment me for Test A
// #endif
	if (InitializeOLEDdriver() != STATUS_OK)
   1a9ac:	4b0b      	ldr	r3, [pc, #44]	; (1a9dc <vApplicationDaemonTaskStartupHook+0x34>)
   1a9ae:	4798      	blx	r3
   1a9b0:	1e03      	subs	r3, r0, #0
   1a9b2:	d004      	beq.n	1a9be <vApplicationDaemonTaskStartupHook+0x16>
	{
		SerialConsoleWriteString("Error initializing OLED Driver!\r\n");
   1a9b4:	4b0a      	ldr	r3, [pc, #40]	; (1a9e0 <vApplicationDaemonTaskStartupHook+0x38>)
   1a9b6:	0018      	movs	r0, r3
   1a9b8:	4b0a      	ldr	r3, [pc, #40]	; (1a9e4 <vApplicationDaemonTaskStartupHook+0x3c>)
   1a9ba:	4798      	blx	r3
   1a9bc:	e003      	b.n	1a9c6 <vApplicationDaemonTaskStartupHook+0x1e>
	}
	else
	{
		SerialConsoleWriteString("Initialized OLED Driver!\r\n");
   1a9be:	4b0a      	ldr	r3, [pc, #40]	; (1a9e8 <vApplicationDaemonTaskStartupHook+0x40>)
   1a9c0:	0018      	movs	r0, r3
   1a9c2:	4b08      	ldr	r3, [pc, #32]	; (1a9e4 <vApplicationDaemonTaskStartupHook+0x3c>)
   1a9c4:	4798      	blx	r3
	}
	StartTasks();
   1a9c6:	4b09      	ldr	r3, [pc, #36]	; (1a9ec <vApplicationDaemonTaskStartupHook+0x44>)
   1a9c8:	4798      	blx	r3

	vTaskSuspend(daemonTaskHandle);
   1a9ca:	4b09      	ldr	r3, [pc, #36]	; (1a9f0 <vApplicationDaemonTaskStartupHook+0x48>)
   1a9cc:	681b      	ldr	r3, [r3, #0]
   1a9ce:	0018      	movs	r0, r3
   1a9d0:	4b08      	ldr	r3, [pc, #32]	; (1a9f4 <vApplicationDaemonTaskStartupHook+0x4c>)
   1a9d2:	4798      	blx	r3
}
   1a9d4:	46c0      	nop			; (mov r8, r8)
   1a9d6:	46bd      	mov	sp, r7
   1a9d8:	bd80      	pop	{r7, pc}
   1a9da:	46c0      	nop			; (mov r8, r8)
   1a9dc:	00013b01 	.word	0x00013b01
   1a9e0:	0001e594 	.word	0x0001e594
   1a9e4:	00017bd5 	.word	0x00017bd5
   1a9e8:	0001e5b8 	.word	0x0001e5b8
   1a9ec:	0001a9f9 	.word	0x0001a9f9
   1a9f0:	20002d58 	.word	0x20002d58
   1a9f4:	000165c5 	.word	0x000165c5

0001a9f8 <StartTasks>:
* @details
* @param[in]        None
* @return           None
*****************************************************************************/
static void StartTasks(void)
{
   1a9f8:	b590      	push	{r4, r7, lr}
   1a9fa:	b083      	sub	sp, #12
   1a9fc:	af02      	add	r7, sp, #8
	snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   1a9fe:	4b26      	ldr	r3, [pc, #152]	; (1aa98 <StartTasks+0xa0>)
   1aa00:	4798      	blx	r3
   1aa02:	0003      	movs	r3, r0
   1aa04:	4a25      	ldr	r2, [pc, #148]	; (1aa9c <StartTasks+0xa4>)
   1aa06:	4826      	ldr	r0, [pc, #152]	; (1aaa0 <StartTasks+0xa8>)
   1aa08:	2140      	movs	r1, #64	; 0x40
   1aa0a:	4c26      	ldr	r4, [pc, #152]	; (1aaa4 <StartTasks+0xac>)
   1aa0c:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   1aa0e:	4b24      	ldr	r3, [pc, #144]	; (1aaa0 <StartTasks+0xa8>)
   1aa10:	0018      	movs	r0, r3
   1aa12:	4b25      	ldr	r3, [pc, #148]	; (1aaa8 <StartTasks+0xb0>)
   1aa14:	4798      	blx	r3

	//Initialize Tasks here

	if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   1aa16:	23c8      	movs	r3, #200	; 0xc8
   1aa18:	005a      	lsls	r2, r3, #1
   1aa1a:	4924      	ldr	r1, [pc, #144]	; (1aaac <StartTasks+0xb4>)
   1aa1c:	4824      	ldr	r0, [pc, #144]	; (1aab0 <StartTasks+0xb8>)
   1aa1e:	4b25      	ldr	r3, [pc, #148]	; (1aab4 <StartTasks+0xbc>)
   1aa20:	9301      	str	r3, [sp, #4]
   1aa22:	2304      	movs	r3, #4
   1aa24:	9300      	str	r3, [sp, #0]
   1aa26:	2300      	movs	r3, #0
   1aa28:	4c23      	ldr	r4, [pc, #140]	; (1aab8 <StartTasks+0xc0>)
   1aa2a:	47a0      	blx	r4
   1aa2c:	0003      	movs	r3, r0
   1aa2e:	2b01      	cmp	r3, #1
   1aa30:	d003      	beq.n	1aa3a <StartTasks+0x42>
		SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   1aa32:	4b22      	ldr	r3, [pc, #136]	; (1aabc <StartTasks+0xc4>)
   1aa34:	0018      	movs	r0, r3
   1aa36:	4b1c      	ldr	r3, [pc, #112]	; (1aaa8 <StartTasks+0xb0>)
   1aa38:	4798      	blx	r3
	}

	snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   1aa3a:	4b17      	ldr	r3, [pc, #92]	; (1aa98 <StartTasks+0xa0>)
   1aa3c:	4798      	blx	r3
   1aa3e:	0003      	movs	r3, r0
   1aa40:	4a1f      	ldr	r2, [pc, #124]	; (1aac0 <StartTasks+0xc8>)
   1aa42:	4817      	ldr	r0, [pc, #92]	; (1aaa0 <StartTasks+0xa8>)
   1aa44:	2140      	movs	r1, #64	; 0x40
   1aa46:	4c17      	ldr	r4, [pc, #92]	; (1aaa4 <StartTasks+0xac>)
   1aa48:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   1aa4a:	4b15      	ldr	r3, [pc, #84]	; (1aaa0 <StartTasks+0xa8>)
   1aa4c:	0018      	movs	r0, r3
   1aa4e:	4b16      	ldr	r3, [pc, #88]	; (1aaa8 <StartTasks+0xb0>)
   1aa50:	4798      	blx	r3
// 	}
// 
// 	snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
// 	SerialConsoleWriteString(bufferPrint);

	if (xTaskCreate(vSensorReadTask, "LIGHT_TASK", LIGHT_TASK_SIZE, NULL, LIGHTSENSOR_PRIORITY, &SensorReadTaskHandle) != pdPASS) {
   1aa52:	2380      	movs	r3, #128	; 0x80
   1aa54:	005a      	lsls	r2, r3, #1
   1aa56:	491b      	ldr	r1, [pc, #108]	; (1aac4 <StartTasks+0xcc>)
   1aa58:	481b      	ldr	r0, [pc, #108]	; (1aac8 <StartTasks+0xd0>)
   1aa5a:	4b1c      	ldr	r3, [pc, #112]	; (1aacc <StartTasks+0xd4>)
   1aa5c:	9301      	str	r3, [sp, #4]
   1aa5e:	2302      	movs	r3, #2
   1aa60:	9300      	str	r3, [sp, #0]
   1aa62:	2300      	movs	r3, #0
   1aa64:	4c14      	ldr	r4, [pc, #80]	; (1aab8 <StartTasks+0xc0>)
   1aa66:	47a0      	blx	r4
   1aa68:	0003      	movs	r3, r0
   1aa6a:	2b01      	cmp	r3, #1
   1aa6c:	d003      	beq.n	1aa76 <StartTasks+0x7e>
		SerialConsoleWriteString("ERR: LIGHT task could not be initialized!\r\n");
   1aa6e:	4b18      	ldr	r3, [pc, #96]	; (1aad0 <StartTasks+0xd8>)
   1aa70:	0018      	movs	r0, r3
   1aa72:	4b0d      	ldr	r3, [pc, #52]	; (1aaa8 <StartTasks+0xb0>)
   1aa74:	4798      	blx	r3
	}

	snprintf(bufferPrint, 64, "Heap after starting LIGHT: %d\r\n", xPortGetFreeHeapSize());
   1aa76:	4b08      	ldr	r3, [pc, #32]	; (1aa98 <StartTasks+0xa0>)
   1aa78:	4798      	blx	r3
   1aa7a:	0003      	movs	r3, r0
   1aa7c:	4a15      	ldr	r2, [pc, #84]	; (1aad4 <StartTasks+0xdc>)
   1aa7e:	4808      	ldr	r0, [pc, #32]	; (1aaa0 <StartTasks+0xa8>)
   1aa80:	2140      	movs	r1, #64	; 0x40
   1aa82:	4c08      	ldr	r4, [pc, #32]	; (1aaa4 <StartTasks+0xac>)
   1aa84:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   1aa86:	4b06      	ldr	r3, [pc, #24]	; (1aaa0 <StartTasks+0xa8>)
   1aa88:	0018      	movs	r0, r3
   1aa8a:	4b07      	ldr	r3, [pc, #28]	; (1aaa8 <StartTasks+0xb0>)
   1aa8c:	4798      	blx	r3
}
   1aa8e:	46c0      	nop			; (mov r8, r8)
   1aa90:	46bd      	mov	sp, r7
   1aa92:	b001      	add	sp, #4
   1aa94:	bd90      	pop	{r4, r7, pc}
   1aa96:	46c0      	nop			; (mov r8, r8)
   1aa98:	0001557d 	.word	0x0001557d
   1aa9c:	0001e5d4 	.word	0x0001e5d4
   1aaa0:	20003334 	.word	0x20003334
   1aaa4:	0001c761 	.word	0x0001c761
   1aaa8:	00017bd5 	.word	0x00017bd5
   1aaac:	0001e5f8 	.word	0x0001e5f8
   1aab0:	0001292d 	.word	0x0001292d
   1aab4:	20002d54 	.word	0x20002d54
   1aab8:	000162f1 	.word	0x000162f1
   1aabc:	0001e604 	.word	0x0001e604
   1aac0:	0001e630 	.word	0x0001e630
   1aac4:	0001e650 	.word	0x0001e650
   1aac8:	000143fd 	.word	0x000143fd
   1aacc:	20002d5c 	.word	0x20002d5c
   1aad0:	0001e65c 	.word	0x0001e65c
   1aad4:	0001e688 	.word	0x0001e688

0001aad8 <vApplicationMallocFailedHook>:




void vApplicationMallocFailedHook(void)
{
   1aad8:	b580      	push	{r7, lr}
   1aada:	af00      	add	r7, sp, #0
SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   1aadc:	4b02      	ldr	r3, [pc, #8]	; (1aae8 <vApplicationMallocFailedHook+0x10>)
   1aade:	0018      	movs	r0, r3
   1aae0:	4b02      	ldr	r3, [pc, #8]	; (1aaec <vApplicationMallocFailedHook+0x14>)
   1aae2:	4798      	blx	r3
while(1);
   1aae4:	e7fe      	b.n	1aae4 <vApplicationMallocFailedHook+0xc>
   1aae6:	46c0      	nop			; (mov r8, r8)
   1aae8:	0001e6a8 	.word	0x0001e6a8
   1aaec:	00017bd5 	.word	0x00017bd5

0001aaf0 <vApplicationStackOverflowHook>:
}

void vApplicationStackOverflowHook(void)
{
   1aaf0:	b580      	push	{r7, lr}
   1aaf2:	af00      	add	r7, sp, #0
SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   1aaf4:	4b02      	ldr	r3, [pc, #8]	; (1ab00 <vApplicationStackOverflowHook+0x10>)
   1aaf6:	0018      	movs	r0, r3
   1aaf8:	4b02      	ldr	r3, [pc, #8]	; (1ab04 <vApplicationStackOverflowHook+0x14>)
   1aafa:	4798      	blx	r3
while(1);
   1aafc:	e7fe      	b.n	1aafc <vApplicationStackOverflowHook+0xc>
   1aafe:	46c0      	nop			; (mov r8, r8)
   1ab00:	0001e6d4 	.word	0x0001e6d4
   1ab04:	00017bd5 	.word	0x00017bd5

0001ab08 <__udivsi3>:
   1ab08:	2200      	movs	r2, #0
   1ab0a:	0843      	lsrs	r3, r0, #1
   1ab0c:	428b      	cmp	r3, r1
   1ab0e:	d374      	bcc.n	1abfa <__udivsi3+0xf2>
   1ab10:	0903      	lsrs	r3, r0, #4
   1ab12:	428b      	cmp	r3, r1
   1ab14:	d35f      	bcc.n	1abd6 <__udivsi3+0xce>
   1ab16:	0a03      	lsrs	r3, r0, #8
   1ab18:	428b      	cmp	r3, r1
   1ab1a:	d344      	bcc.n	1aba6 <__udivsi3+0x9e>
   1ab1c:	0b03      	lsrs	r3, r0, #12
   1ab1e:	428b      	cmp	r3, r1
   1ab20:	d328      	bcc.n	1ab74 <__udivsi3+0x6c>
   1ab22:	0c03      	lsrs	r3, r0, #16
   1ab24:	428b      	cmp	r3, r1
   1ab26:	d30d      	bcc.n	1ab44 <__udivsi3+0x3c>
   1ab28:	22ff      	movs	r2, #255	; 0xff
   1ab2a:	0209      	lsls	r1, r1, #8
   1ab2c:	ba12      	rev	r2, r2
   1ab2e:	0c03      	lsrs	r3, r0, #16
   1ab30:	428b      	cmp	r3, r1
   1ab32:	d302      	bcc.n	1ab3a <__udivsi3+0x32>
   1ab34:	1212      	asrs	r2, r2, #8
   1ab36:	0209      	lsls	r1, r1, #8
   1ab38:	d065      	beq.n	1ac06 <__udivsi3+0xfe>
   1ab3a:	0b03      	lsrs	r3, r0, #12
   1ab3c:	428b      	cmp	r3, r1
   1ab3e:	d319      	bcc.n	1ab74 <__udivsi3+0x6c>
   1ab40:	e000      	b.n	1ab44 <__udivsi3+0x3c>
   1ab42:	0a09      	lsrs	r1, r1, #8
   1ab44:	0bc3      	lsrs	r3, r0, #15
   1ab46:	428b      	cmp	r3, r1
   1ab48:	d301      	bcc.n	1ab4e <__udivsi3+0x46>
   1ab4a:	03cb      	lsls	r3, r1, #15
   1ab4c:	1ac0      	subs	r0, r0, r3
   1ab4e:	4152      	adcs	r2, r2
   1ab50:	0b83      	lsrs	r3, r0, #14
   1ab52:	428b      	cmp	r3, r1
   1ab54:	d301      	bcc.n	1ab5a <__udivsi3+0x52>
   1ab56:	038b      	lsls	r3, r1, #14
   1ab58:	1ac0      	subs	r0, r0, r3
   1ab5a:	4152      	adcs	r2, r2
   1ab5c:	0b43      	lsrs	r3, r0, #13
   1ab5e:	428b      	cmp	r3, r1
   1ab60:	d301      	bcc.n	1ab66 <__udivsi3+0x5e>
   1ab62:	034b      	lsls	r3, r1, #13
   1ab64:	1ac0      	subs	r0, r0, r3
   1ab66:	4152      	adcs	r2, r2
   1ab68:	0b03      	lsrs	r3, r0, #12
   1ab6a:	428b      	cmp	r3, r1
   1ab6c:	d301      	bcc.n	1ab72 <__udivsi3+0x6a>
   1ab6e:	030b      	lsls	r3, r1, #12
   1ab70:	1ac0      	subs	r0, r0, r3
   1ab72:	4152      	adcs	r2, r2
   1ab74:	0ac3      	lsrs	r3, r0, #11
   1ab76:	428b      	cmp	r3, r1
   1ab78:	d301      	bcc.n	1ab7e <__udivsi3+0x76>
   1ab7a:	02cb      	lsls	r3, r1, #11
   1ab7c:	1ac0      	subs	r0, r0, r3
   1ab7e:	4152      	adcs	r2, r2
   1ab80:	0a83      	lsrs	r3, r0, #10
   1ab82:	428b      	cmp	r3, r1
   1ab84:	d301      	bcc.n	1ab8a <__udivsi3+0x82>
   1ab86:	028b      	lsls	r3, r1, #10
   1ab88:	1ac0      	subs	r0, r0, r3
   1ab8a:	4152      	adcs	r2, r2
   1ab8c:	0a43      	lsrs	r3, r0, #9
   1ab8e:	428b      	cmp	r3, r1
   1ab90:	d301      	bcc.n	1ab96 <__udivsi3+0x8e>
   1ab92:	024b      	lsls	r3, r1, #9
   1ab94:	1ac0      	subs	r0, r0, r3
   1ab96:	4152      	adcs	r2, r2
   1ab98:	0a03      	lsrs	r3, r0, #8
   1ab9a:	428b      	cmp	r3, r1
   1ab9c:	d301      	bcc.n	1aba2 <__udivsi3+0x9a>
   1ab9e:	020b      	lsls	r3, r1, #8
   1aba0:	1ac0      	subs	r0, r0, r3
   1aba2:	4152      	adcs	r2, r2
   1aba4:	d2cd      	bcs.n	1ab42 <__udivsi3+0x3a>
   1aba6:	09c3      	lsrs	r3, r0, #7
   1aba8:	428b      	cmp	r3, r1
   1abaa:	d301      	bcc.n	1abb0 <__udivsi3+0xa8>
   1abac:	01cb      	lsls	r3, r1, #7
   1abae:	1ac0      	subs	r0, r0, r3
   1abb0:	4152      	adcs	r2, r2
   1abb2:	0983      	lsrs	r3, r0, #6
   1abb4:	428b      	cmp	r3, r1
   1abb6:	d301      	bcc.n	1abbc <__udivsi3+0xb4>
   1abb8:	018b      	lsls	r3, r1, #6
   1abba:	1ac0      	subs	r0, r0, r3
   1abbc:	4152      	adcs	r2, r2
   1abbe:	0943      	lsrs	r3, r0, #5
   1abc0:	428b      	cmp	r3, r1
   1abc2:	d301      	bcc.n	1abc8 <__udivsi3+0xc0>
   1abc4:	014b      	lsls	r3, r1, #5
   1abc6:	1ac0      	subs	r0, r0, r3
   1abc8:	4152      	adcs	r2, r2
   1abca:	0903      	lsrs	r3, r0, #4
   1abcc:	428b      	cmp	r3, r1
   1abce:	d301      	bcc.n	1abd4 <__udivsi3+0xcc>
   1abd0:	010b      	lsls	r3, r1, #4
   1abd2:	1ac0      	subs	r0, r0, r3
   1abd4:	4152      	adcs	r2, r2
   1abd6:	08c3      	lsrs	r3, r0, #3
   1abd8:	428b      	cmp	r3, r1
   1abda:	d301      	bcc.n	1abe0 <__udivsi3+0xd8>
   1abdc:	00cb      	lsls	r3, r1, #3
   1abde:	1ac0      	subs	r0, r0, r3
   1abe0:	4152      	adcs	r2, r2
   1abe2:	0883      	lsrs	r3, r0, #2
   1abe4:	428b      	cmp	r3, r1
   1abe6:	d301      	bcc.n	1abec <__udivsi3+0xe4>
   1abe8:	008b      	lsls	r3, r1, #2
   1abea:	1ac0      	subs	r0, r0, r3
   1abec:	4152      	adcs	r2, r2
   1abee:	0843      	lsrs	r3, r0, #1
   1abf0:	428b      	cmp	r3, r1
   1abf2:	d301      	bcc.n	1abf8 <__udivsi3+0xf0>
   1abf4:	004b      	lsls	r3, r1, #1
   1abf6:	1ac0      	subs	r0, r0, r3
   1abf8:	4152      	adcs	r2, r2
   1abfa:	1a41      	subs	r1, r0, r1
   1abfc:	d200      	bcs.n	1ac00 <__udivsi3+0xf8>
   1abfe:	4601      	mov	r1, r0
   1ac00:	4152      	adcs	r2, r2
   1ac02:	4610      	mov	r0, r2
   1ac04:	4770      	bx	lr
   1ac06:	e7ff      	b.n	1ac08 <__udivsi3+0x100>
   1ac08:	b501      	push	{r0, lr}
   1ac0a:	2000      	movs	r0, #0
   1ac0c:	f000 f806 	bl	1ac1c <__aeabi_idiv0>
   1ac10:	bd02      	pop	{r1, pc}
   1ac12:	46c0      	nop			; (mov r8, r8)

0001ac14 <__aeabi_uidivmod>:
   1ac14:	2900      	cmp	r1, #0
   1ac16:	d0f7      	beq.n	1ac08 <__udivsi3+0x100>
   1ac18:	e776      	b.n	1ab08 <__udivsi3>
   1ac1a:	4770      	bx	lr

0001ac1c <__aeabi_idiv0>:
   1ac1c:	4770      	bx	lr
   1ac1e:	46c0      	nop			; (mov r8, r8)

0001ac20 <__aeabi_lmul>:
   1ac20:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac22:	46ce      	mov	lr, r9
   1ac24:	4647      	mov	r7, r8
   1ac26:	0415      	lsls	r5, r2, #16
   1ac28:	0c2d      	lsrs	r5, r5, #16
   1ac2a:	002e      	movs	r6, r5
   1ac2c:	b580      	push	{r7, lr}
   1ac2e:	0407      	lsls	r7, r0, #16
   1ac30:	0c14      	lsrs	r4, r2, #16
   1ac32:	0c3f      	lsrs	r7, r7, #16
   1ac34:	4699      	mov	r9, r3
   1ac36:	0c03      	lsrs	r3, r0, #16
   1ac38:	437e      	muls	r6, r7
   1ac3a:	435d      	muls	r5, r3
   1ac3c:	4367      	muls	r7, r4
   1ac3e:	4363      	muls	r3, r4
   1ac40:	197f      	adds	r7, r7, r5
   1ac42:	0c34      	lsrs	r4, r6, #16
   1ac44:	19e4      	adds	r4, r4, r7
   1ac46:	469c      	mov	ip, r3
   1ac48:	42a5      	cmp	r5, r4
   1ac4a:	d903      	bls.n	1ac54 <__aeabi_lmul+0x34>
   1ac4c:	2380      	movs	r3, #128	; 0x80
   1ac4e:	025b      	lsls	r3, r3, #9
   1ac50:	4698      	mov	r8, r3
   1ac52:	44c4      	add	ip, r8
   1ac54:	464b      	mov	r3, r9
   1ac56:	4351      	muls	r1, r2
   1ac58:	4343      	muls	r3, r0
   1ac5a:	0436      	lsls	r6, r6, #16
   1ac5c:	0c36      	lsrs	r6, r6, #16
   1ac5e:	0c25      	lsrs	r5, r4, #16
   1ac60:	0424      	lsls	r4, r4, #16
   1ac62:	4465      	add	r5, ip
   1ac64:	19a4      	adds	r4, r4, r6
   1ac66:	1859      	adds	r1, r3, r1
   1ac68:	1949      	adds	r1, r1, r5
   1ac6a:	0020      	movs	r0, r4
   1ac6c:	bc0c      	pop	{r2, r3}
   1ac6e:	4690      	mov	r8, r2
   1ac70:	4699      	mov	r9, r3
   1ac72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ac74 <__aeabi_dadd>:
   1ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac76:	4645      	mov	r5, r8
   1ac78:	46de      	mov	lr, fp
   1ac7a:	4657      	mov	r7, sl
   1ac7c:	464e      	mov	r6, r9
   1ac7e:	030c      	lsls	r4, r1, #12
   1ac80:	b5e0      	push	{r5, r6, r7, lr}
   1ac82:	004e      	lsls	r6, r1, #1
   1ac84:	0fc9      	lsrs	r1, r1, #31
   1ac86:	4688      	mov	r8, r1
   1ac88:	000d      	movs	r5, r1
   1ac8a:	0a61      	lsrs	r1, r4, #9
   1ac8c:	0f44      	lsrs	r4, r0, #29
   1ac8e:	430c      	orrs	r4, r1
   1ac90:	00c7      	lsls	r7, r0, #3
   1ac92:	0319      	lsls	r1, r3, #12
   1ac94:	0058      	lsls	r0, r3, #1
   1ac96:	0fdb      	lsrs	r3, r3, #31
   1ac98:	469b      	mov	fp, r3
   1ac9a:	0a4b      	lsrs	r3, r1, #9
   1ac9c:	0f51      	lsrs	r1, r2, #29
   1ac9e:	430b      	orrs	r3, r1
   1aca0:	0d76      	lsrs	r6, r6, #21
   1aca2:	0d40      	lsrs	r0, r0, #21
   1aca4:	0019      	movs	r1, r3
   1aca6:	00d2      	lsls	r2, r2, #3
   1aca8:	45d8      	cmp	r8, fp
   1acaa:	d100      	bne.n	1acae <__aeabi_dadd+0x3a>
   1acac:	e0ae      	b.n	1ae0c <__aeabi_dadd+0x198>
   1acae:	1a35      	subs	r5, r6, r0
   1acb0:	2d00      	cmp	r5, #0
   1acb2:	dc00      	bgt.n	1acb6 <__aeabi_dadd+0x42>
   1acb4:	e0f6      	b.n	1aea4 <__aeabi_dadd+0x230>
   1acb6:	2800      	cmp	r0, #0
   1acb8:	d10f      	bne.n	1acda <__aeabi_dadd+0x66>
   1acba:	4313      	orrs	r3, r2
   1acbc:	d100      	bne.n	1acc0 <__aeabi_dadd+0x4c>
   1acbe:	e0db      	b.n	1ae78 <__aeabi_dadd+0x204>
   1acc0:	1e6b      	subs	r3, r5, #1
   1acc2:	2b00      	cmp	r3, #0
   1acc4:	d000      	beq.n	1acc8 <__aeabi_dadd+0x54>
   1acc6:	e137      	b.n	1af38 <__aeabi_dadd+0x2c4>
   1acc8:	1aba      	subs	r2, r7, r2
   1acca:	4297      	cmp	r7, r2
   1accc:	41bf      	sbcs	r7, r7
   1acce:	1a64      	subs	r4, r4, r1
   1acd0:	427f      	negs	r7, r7
   1acd2:	1be4      	subs	r4, r4, r7
   1acd4:	2601      	movs	r6, #1
   1acd6:	0017      	movs	r7, r2
   1acd8:	e024      	b.n	1ad24 <__aeabi_dadd+0xb0>
   1acda:	4bc6      	ldr	r3, [pc, #792]	; (1aff4 <__aeabi_dadd+0x380>)
   1acdc:	429e      	cmp	r6, r3
   1acde:	d04d      	beq.n	1ad7c <__aeabi_dadd+0x108>
   1ace0:	2380      	movs	r3, #128	; 0x80
   1ace2:	041b      	lsls	r3, r3, #16
   1ace4:	4319      	orrs	r1, r3
   1ace6:	2d38      	cmp	r5, #56	; 0x38
   1ace8:	dd00      	ble.n	1acec <__aeabi_dadd+0x78>
   1acea:	e107      	b.n	1aefc <__aeabi_dadd+0x288>
   1acec:	2d1f      	cmp	r5, #31
   1acee:	dd00      	ble.n	1acf2 <__aeabi_dadd+0x7e>
   1acf0:	e138      	b.n	1af64 <__aeabi_dadd+0x2f0>
   1acf2:	2020      	movs	r0, #32
   1acf4:	1b43      	subs	r3, r0, r5
   1acf6:	469a      	mov	sl, r3
   1acf8:	000b      	movs	r3, r1
   1acfa:	4650      	mov	r0, sl
   1acfc:	4083      	lsls	r3, r0
   1acfe:	4699      	mov	r9, r3
   1ad00:	0013      	movs	r3, r2
   1ad02:	4648      	mov	r0, r9
   1ad04:	40eb      	lsrs	r3, r5
   1ad06:	4318      	orrs	r0, r3
   1ad08:	0003      	movs	r3, r0
   1ad0a:	4650      	mov	r0, sl
   1ad0c:	4082      	lsls	r2, r0
   1ad0e:	1e50      	subs	r0, r2, #1
   1ad10:	4182      	sbcs	r2, r0
   1ad12:	40e9      	lsrs	r1, r5
   1ad14:	431a      	orrs	r2, r3
   1ad16:	1aba      	subs	r2, r7, r2
   1ad18:	1a61      	subs	r1, r4, r1
   1ad1a:	4297      	cmp	r7, r2
   1ad1c:	41a4      	sbcs	r4, r4
   1ad1e:	0017      	movs	r7, r2
   1ad20:	4264      	negs	r4, r4
   1ad22:	1b0c      	subs	r4, r1, r4
   1ad24:	0223      	lsls	r3, r4, #8
   1ad26:	d562      	bpl.n	1adee <__aeabi_dadd+0x17a>
   1ad28:	0264      	lsls	r4, r4, #9
   1ad2a:	0a65      	lsrs	r5, r4, #9
   1ad2c:	2d00      	cmp	r5, #0
   1ad2e:	d100      	bne.n	1ad32 <__aeabi_dadd+0xbe>
   1ad30:	e0df      	b.n	1aef2 <__aeabi_dadd+0x27e>
   1ad32:	0028      	movs	r0, r5
   1ad34:	f001 fbe4 	bl	1c500 <__clzsi2>
   1ad38:	0003      	movs	r3, r0
   1ad3a:	3b08      	subs	r3, #8
   1ad3c:	2b1f      	cmp	r3, #31
   1ad3e:	dd00      	ble.n	1ad42 <__aeabi_dadd+0xce>
   1ad40:	e0d2      	b.n	1aee8 <__aeabi_dadd+0x274>
   1ad42:	2220      	movs	r2, #32
   1ad44:	003c      	movs	r4, r7
   1ad46:	1ad2      	subs	r2, r2, r3
   1ad48:	409d      	lsls	r5, r3
   1ad4a:	40d4      	lsrs	r4, r2
   1ad4c:	409f      	lsls	r7, r3
   1ad4e:	4325      	orrs	r5, r4
   1ad50:	429e      	cmp	r6, r3
   1ad52:	dd00      	ble.n	1ad56 <__aeabi_dadd+0xe2>
   1ad54:	e0c4      	b.n	1aee0 <__aeabi_dadd+0x26c>
   1ad56:	1b9e      	subs	r6, r3, r6
   1ad58:	1c73      	adds	r3, r6, #1
   1ad5a:	2b1f      	cmp	r3, #31
   1ad5c:	dd00      	ble.n	1ad60 <__aeabi_dadd+0xec>
   1ad5e:	e0f1      	b.n	1af44 <__aeabi_dadd+0x2d0>
   1ad60:	2220      	movs	r2, #32
   1ad62:	0038      	movs	r0, r7
   1ad64:	0029      	movs	r1, r5
   1ad66:	1ad2      	subs	r2, r2, r3
   1ad68:	40d8      	lsrs	r0, r3
   1ad6a:	4091      	lsls	r1, r2
   1ad6c:	4097      	lsls	r7, r2
   1ad6e:	002c      	movs	r4, r5
   1ad70:	4301      	orrs	r1, r0
   1ad72:	1e78      	subs	r0, r7, #1
   1ad74:	4187      	sbcs	r7, r0
   1ad76:	40dc      	lsrs	r4, r3
   1ad78:	2600      	movs	r6, #0
   1ad7a:	430f      	orrs	r7, r1
   1ad7c:	077b      	lsls	r3, r7, #29
   1ad7e:	d009      	beq.n	1ad94 <__aeabi_dadd+0x120>
   1ad80:	230f      	movs	r3, #15
   1ad82:	403b      	ands	r3, r7
   1ad84:	2b04      	cmp	r3, #4
   1ad86:	d005      	beq.n	1ad94 <__aeabi_dadd+0x120>
   1ad88:	1d3b      	adds	r3, r7, #4
   1ad8a:	42bb      	cmp	r3, r7
   1ad8c:	41bf      	sbcs	r7, r7
   1ad8e:	427f      	negs	r7, r7
   1ad90:	19e4      	adds	r4, r4, r7
   1ad92:	001f      	movs	r7, r3
   1ad94:	0223      	lsls	r3, r4, #8
   1ad96:	d52c      	bpl.n	1adf2 <__aeabi_dadd+0x17e>
   1ad98:	4b96      	ldr	r3, [pc, #600]	; (1aff4 <__aeabi_dadd+0x380>)
   1ad9a:	3601      	adds	r6, #1
   1ad9c:	429e      	cmp	r6, r3
   1ad9e:	d100      	bne.n	1ada2 <__aeabi_dadd+0x12e>
   1ada0:	e09a      	b.n	1aed8 <__aeabi_dadd+0x264>
   1ada2:	4645      	mov	r5, r8
   1ada4:	4b94      	ldr	r3, [pc, #592]	; (1aff8 <__aeabi_dadd+0x384>)
   1ada6:	08ff      	lsrs	r7, r7, #3
   1ada8:	401c      	ands	r4, r3
   1adaa:	0760      	lsls	r0, r4, #29
   1adac:	0576      	lsls	r6, r6, #21
   1adae:	0264      	lsls	r4, r4, #9
   1adb0:	4307      	orrs	r7, r0
   1adb2:	0b24      	lsrs	r4, r4, #12
   1adb4:	0d76      	lsrs	r6, r6, #21
   1adb6:	2100      	movs	r1, #0
   1adb8:	0324      	lsls	r4, r4, #12
   1adba:	0b23      	lsrs	r3, r4, #12
   1adbc:	0d0c      	lsrs	r4, r1, #20
   1adbe:	4a8f      	ldr	r2, [pc, #572]	; (1affc <__aeabi_dadd+0x388>)
   1adc0:	0524      	lsls	r4, r4, #20
   1adc2:	431c      	orrs	r4, r3
   1adc4:	4014      	ands	r4, r2
   1adc6:	0533      	lsls	r3, r6, #20
   1adc8:	4323      	orrs	r3, r4
   1adca:	005b      	lsls	r3, r3, #1
   1adcc:	07ed      	lsls	r5, r5, #31
   1adce:	085b      	lsrs	r3, r3, #1
   1add0:	432b      	orrs	r3, r5
   1add2:	0038      	movs	r0, r7
   1add4:	0019      	movs	r1, r3
   1add6:	bc3c      	pop	{r2, r3, r4, r5}
   1add8:	4690      	mov	r8, r2
   1adda:	4699      	mov	r9, r3
   1addc:	46a2      	mov	sl, r4
   1adde:	46ab      	mov	fp, r5
   1ade0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ade2:	4664      	mov	r4, ip
   1ade4:	4304      	orrs	r4, r0
   1ade6:	d100      	bne.n	1adea <__aeabi_dadd+0x176>
   1ade8:	e211      	b.n	1b20e <__aeabi_dadd+0x59a>
   1adea:	0004      	movs	r4, r0
   1adec:	4667      	mov	r7, ip
   1adee:	077b      	lsls	r3, r7, #29
   1adf0:	d1c6      	bne.n	1ad80 <__aeabi_dadd+0x10c>
   1adf2:	4645      	mov	r5, r8
   1adf4:	0760      	lsls	r0, r4, #29
   1adf6:	08ff      	lsrs	r7, r7, #3
   1adf8:	4307      	orrs	r7, r0
   1adfa:	08e4      	lsrs	r4, r4, #3
   1adfc:	4b7d      	ldr	r3, [pc, #500]	; (1aff4 <__aeabi_dadd+0x380>)
   1adfe:	429e      	cmp	r6, r3
   1ae00:	d030      	beq.n	1ae64 <__aeabi_dadd+0x1f0>
   1ae02:	0324      	lsls	r4, r4, #12
   1ae04:	0576      	lsls	r6, r6, #21
   1ae06:	0b24      	lsrs	r4, r4, #12
   1ae08:	0d76      	lsrs	r6, r6, #21
   1ae0a:	e7d4      	b.n	1adb6 <__aeabi_dadd+0x142>
   1ae0c:	1a33      	subs	r3, r6, r0
   1ae0e:	469a      	mov	sl, r3
   1ae10:	2b00      	cmp	r3, #0
   1ae12:	dd78      	ble.n	1af06 <__aeabi_dadd+0x292>
   1ae14:	2800      	cmp	r0, #0
   1ae16:	d031      	beq.n	1ae7c <__aeabi_dadd+0x208>
   1ae18:	4876      	ldr	r0, [pc, #472]	; (1aff4 <__aeabi_dadd+0x380>)
   1ae1a:	4286      	cmp	r6, r0
   1ae1c:	d0ae      	beq.n	1ad7c <__aeabi_dadd+0x108>
   1ae1e:	2080      	movs	r0, #128	; 0x80
   1ae20:	0400      	lsls	r0, r0, #16
   1ae22:	4301      	orrs	r1, r0
   1ae24:	4653      	mov	r3, sl
   1ae26:	2b38      	cmp	r3, #56	; 0x38
   1ae28:	dc00      	bgt.n	1ae2c <__aeabi_dadd+0x1b8>
   1ae2a:	e0e9      	b.n	1b000 <__aeabi_dadd+0x38c>
   1ae2c:	430a      	orrs	r2, r1
   1ae2e:	1e51      	subs	r1, r2, #1
   1ae30:	418a      	sbcs	r2, r1
   1ae32:	2100      	movs	r1, #0
   1ae34:	19d2      	adds	r2, r2, r7
   1ae36:	42ba      	cmp	r2, r7
   1ae38:	41bf      	sbcs	r7, r7
   1ae3a:	1909      	adds	r1, r1, r4
   1ae3c:	427c      	negs	r4, r7
   1ae3e:	0017      	movs	r7, r2
   1ae40:	190c      	adds	r4, r1, r4
   1ae42:	0223      	lsls	r3, r4, #8
   1ae44:	d5d3      	bpl.n	1adee <__aeabi_dadd+0x17a>
   1ae46:	4b6b      	ldr	r3, [pc, #428]	; (1aff4 <__aeabi_dadd+0x380>)
   1ae48:	3601      	adds	r6, #1
   1ae4a:	429e      	cmp	r6, r3
   1ae4c:	d100      	bne.n	1ae50 <__aeabi_dadd+0x1dc>
   1ae4e:	e13a      	b.n	1b0c6 <__aeabi_dadd+0x452>
   1ae50:	2001      	movs	r0, #1
   1ae52:	4b69      	ldr	r3, [pc, #420]	; (1aff8 <__aeabi_dadd+0x384>)
   1ae54:	401c      	ands	r4, r3
   1ae56:	087b      	lsrs	r3, r7, #1
   1ae58:	4007      	ands	r7, r0
   1ae5a:	431f      	orrs	r7, r3
   1ae5c:	07e0      	lsls	r0, r4, #31
   1ae5e:	4307      	orrs	r7, r0
   1ae60:	0864      	lsrs	r4, r4, #1
   1ae62:	e78b      	b.n	1ad7c <__aeabi_dadd+0x108>
   1ae64:	0023      	movs	r3, r4
   1ae66:	433b      	orrs	r3, r7
   1ae68:	d100      	bne.n	1ae6c <__aeabi_dadd+0x1f8>
   1ae6a:	e1cb      	b.n	1b204 <__aeabi_dadd+0x590>
   1ae6c:	2280      	movs	r2, #128	; 0x80
   1ae6e:	0312      	lsls	r2, r2, #12
   1ae70:	4314      	orrs	r4, r2
   1ae72:	0324      	lsls	r4, r4, #12
   1ae74:	0b24      	lsrs	r4, r4, #12
   1ae76:	e79e      	b.n	1adb6 <__aeabi_dadd+0x142>
   1ae78:	002e      	movs	r6, r5
   1ae7a:	e77f      	b.n	1ad7c <__aeabi_dadd+0x108>
   1ae7c:	0008      	movs	r0, r1
   1ae7e:	4310      	orrs	r0, r2
   1ae80:	d100      	bne.n	1ae84 <__aeabi_dadd+0x210>
   1ae82:	e0b4      	b.n	1afee <__aeabi_dadd+0x37a>
   1ae84:	1e58      	subs	r0, r3, #1
   1ae86:	2800      	cmp	r0, #0
   1ae88:	d000      	beq.n	1ae8c <__aeabi_dadd+0x218>
   1ae8a:	e0de      	b.n	1b04a <__aeabi_dadd+0x3d6>
   1ae8c:	18ba      	adds	r2, r7, r2
   1ae8e:	42ba      	cmp	r2, r7
   1ae90:	419b      	sbcs	r3, r3
   1ae92:	1864      	adds	r4, r4, r1
   1ae94:	425b      	negs	r3, r3
   1ae96:	18e4      	adds	r4, r4, r3
   1ae98:	0017      	movs	r7, r2
   1ae9a:	2601      	movs	r6, #1
   1ae9c:	0223      	lsls	r3, r4, #8
   1ae9e:	d5a6      	bpl.n	1adee <__aeabi_dadd+0x17a>
   1aea0:	2602      	movs	r6, #2
   1aea2:	e7d5      	b.n	1ae50 <__aeabi_dadd+0x1dc>
   1aea4:	2d00      	cmp	r5, #0
   1aea6:	d16e      	bne.n	1af86 <__aeabi_dadd+0x312>
   1aea8:	1c70      	adds	r0, r6, #1
   1aeaa:	0540      	lsls	r0, r0, #21
   1aeac:	0d40      	lsrs	r0, r0, #21
   1aeae:	2801      	cmp	r0, #1
   1aeb0:	dc00      	bgt.n	1aeb4 <__aeabi_dadd+0x240>
   1aeb2:	e0f9      	b.n	1b0a8 <__aeabi_dadd+0x434>
   1aeb4:	1ab8      	subs	r0, r7, r2
   1aeb6:	4684      	mov	ip, r0
   1aeb8:	4287      	cmp	r7, r0
   1aeba:	4180      	sbcs	r0, r0
   1aebc:	1ae5      	subs	r5, r4, r3
   1aebe:	4240      	negs	r0, r0
   1aec0:	1a2d      	subs	r5, r5, r0
   1aec2:	0228      	lsls	r0, r5, #8
   1aec4:	d400      	bmi.n	1aec8 <__aeabi_dadd+0x254>
   1aec6:	e089      	b.n	1afdc <__aeabi_dadd+0x368>
   1aec8:	1bd7      	subs	r7, r2, r7
   1aeca:	42ba      	cmp	r2, r7
   1aecc:	4192      	sbcs	r2, r2
   1aece:	1b1c      	subs	r4, r3, r4
   1aed0:	4252      	negs	r2, r2
   1aed2:	1aa5      	subs	r5, r4, r2
   1aed4:	46d8      	mov	r8, fp
   1aed6:	e729      	b.n	1ad2c <__aeabi_dadd+0xb8>
   1aed8:	4645      	mov	r5, r8
   1aeda:	2400      	movs	r4, #0
   1aedc:	2700      	movs	r7, #0
   1aede:	e76a      	b.n	1adb6 <__aeabi_dadd+0x142>
   1aee0:	4c45      	ldr	r4, [pc, #276]	; (1aff8 <__aeabi_dadd+0x384>)
   1aee2:	1af6      	subs	r6, r6, r3
   1aee4:	402c      	ands	r4, r5
   1aee6:	e749      	b.n	1ad7c <__aeabi_dadd+0x108>
   1aee8:	003d      	movs	r5, r7
   1aeea:	3828      	subs	r0, #40	; 0x28
   1aeec:	4085      	lsls	r5, r0
   1aeee:	2700      	movs	r7, #0
   1aef0:	e72e      	b.n	1ad50 <__aeabi_dadd+0xdc>
   1aef2:	0038      	movs	r0, r7
   1aef4:	f001 fb04 	bl	1c500 <__clzsi2>
   1aef8:	3020      	adds	r0, #32
   1aefa:	e71d      	b.n	1ad38 <__aeabi_dadd+0xc4>
   1aefc:	430a      	orrs	r2, r1
   1aefe:	1e51      	subs	r1, r2, #1
   1af00:	418a      	sbcs	r2, r1
   1af02:	2100      	movs	r1, #0
   1af04:	e707      	b.n	1ad16 <__aeabi_dadd+0xa2>
   1af06:	2b00      	cmp	r3, #0
   1af08:	d000      	beq.n	1af0c <__aeabi_dadd+0x298>
   1af0a:	e0f3      	b.n	1b0f4 <__aeabi_dadd+0x480>
   1af0c:	1c70      	adds	r0, r6, #1
   1af0e:	0543      	lsls	r3, r0, #21
   1af10:	0d5b      	lsrs	r3, r3, #21
   1af12:	2b01      	cmp	r3, #1
   1af14:	dc00      	bgt.n	1af18 <__aeabi_dadd+0x2a4>
   1af16:	e0ad      	b.n	1b074 <__aeabi_dadd+0x400>
   1af18:	4b36      	ldr	r3, [pc, #216]	; (1aff4 <__aeabi_dadd+0x380>)
   1af1a:	4298      	cmp	r0, r3
   1af1c:	d100      	bne.n	1af20 <__aeabi_dadd+0x2ac>
   1af1e:	e0d1      	b.n	1b0c4 <__aeabi_dadd+0x450>
   1af20:	18ba      	adds	r2, r7, r2
   1af22:	42ba      	cmp	r2, r7
   1af24:	41bf      	sbcs	r7, r7
   1af26:	1864      	adds	r4, r4, r1
   1af28:	427f      	negs	r7, r7
   1af2a:	19e4      	adds	r4, r4, r7
   1af2c:	07e7      	lsls	r7, r4, #31
   1af2e:	0852      	lsrs	r2, r2, #1
   1af30:	4317      	orrs	r7, r2
   1af32:	0864      	lsrs	r4, r4, #1
   1af34:	0006      	movs	r6, r0
   1af36:	e721      	b.n	1ad7c <__aeabi_dadd+0x108>
   1af38:	482e      	ldr	r0, [pc, #184]	; (1aff4 <__aeabi_dadd+0x380>)
   1af3a:	4285      	cmp	r5, r0
   1af3c:	d100      	bne.n	1af40 <__aeabi_dadd+0x2cc>
   1af3e:	e093      	b.n	1b068 <__aeabi_dadd+0x3f4>
   1af40:	001d      	movs	r5, r3
   1af42:	e6d0      	b.n	1ace6 <__aeabi_dadd+0x72>
   1af44:	0029      	movs	r1, r5
   1af46:	3e1f      	subs	r6, #31
   1af48:	40f1      	lsrs	r1, r6
   1af4a:	2b20      	cmp	r3, #32
   1af4c:	d100      	bne.n	1af50 <__aeabi_dadd+0x2dc>
   1af4e:	e08d      	b.n	1b06c <__aeabi_dadd+0x3f8>
   1af50:	2240      	movs	r2, #64	; 0x40
   1af52:	1ad3      	subs	r3, r2, r3
   1af54:	409d      	lsls	r5, r3
   1af56:	432f      	orrs	r7, r5
   1af58:	1e7d      	subs	r5, r7, #1
   1af5a:	41af      	sbcs	r7, r5
   1af5c:	2400      	movs	r4, #0
   1af5e:	430f      	orrs	r7, r1
   1af60:	2600      	movs	r6, #0
   1af62:	e744      	b.n	1adee <__aeabi_dadd+0x17a>
   1af64:	002b      	movs	r3, r5
   1af66:	0008      	movs	r0, r1
   1af68:	3b20      	subs	r3, #32
   1af6a:	40d8      	lsrs	r0, r3
   1af6c:	0003      	movs	r3, r0
   1af6e:	2d20      	cmp	r5, #32
   1af70:	d100      	bne.n	1af74 <__aeabi_dadd+0x300>
   1af72:	e07d      	b.n	1b070 <__aeabi_dadd+0x3fc>
   1af74:	2040      	movs	r0, #64	; 0x40
   1af76:	1b45      	subs	r5, r0, r5
   1af78:	40a9      	lsls	r1, r5
   1af7a:	430a      	orrs	r2, r1
   1af7c:	1e51      	subs	r1, r2, #1
   1af7e:	418a      	sbcs	r2, r1
   1af80:	2100      	movs	r1, #0
   1af82:	431a      	orrs	r2, r3
   1af84:	e6c7      	b.n	1ad16 <__aeabi_dadd+0xa2>
   1af86:	2e00      	cmp	r6, #0
   1af88:	d050      	beq.n	1b02c <__aeabi_dadd+0x3b8>
   1af8a:	4e1a      	ldr	r6, [pc, #104]	; (1aff4 <__aeabi_dadd+0x380>)
   1af8c:	42b0      	cmp	r0, r6
   1af8e:	d057      	beq.n	1b040 <__aeabi_dadd+0x3cc>
   1af90:	2680      	movs	r6, #128	; 0x80
   1af92:	426b      	negs	r3, r5
   1af94:	4699      	mov	r9, r3
   1af96:	0436      	lsls	r6, r6, #16
   1af98:	4334      	orrs	r4, r6
   1af9a:	464b      	mov	r3, r9
   1af9c:	2b38      	cmp	r3, #56	; 0x38
   1af9e:	dd00      	ble.n	1afa2 <__aeabi_dadd+0x32e>
   1afa0:	e0d6      	b.n	1b150 <__aeabi_dadd+0x4dc>
   1afa2:	2b1f      	cmp	r3, #31
   1afa4:	dd00      	ble.n	1afa8 <__aeabi_dadd+0x334>
   1afa6:	e135      	b.n	1b214 <__aeabi_dadd+0x5a0>
   1afa8:	2620      	movs	r6, #32
   1afaa:	1af5      	subs	r5, r6, r3
   1afac:	0026      	movs	r6, r4
   1afae:	40ae      	lsls	r6, r5
   1afb0:	46b2      	mov	sl, r6
   1afb2:	003e      	movs	r6, r7
   1afb4:	40de      	lsrs	r6, r3
   1afb6:	46ac      	mov	ip, r5
   1afb8:	0035      	movs	r5, r6
   1afba:	4656      	mov	r6, sl
   1afbc:	432e      	orrs	r6, r5
   1afbe:	4665      	mov	r5, ip
   1afc0:	40af      	lsls	r7, r5
   1afc2:	1e7d      	subs	r5, r7, #1
   1afc4:	41af      	sbcs	r7, r5
   1afc6:	40dc      	lsrs	r4, r3
   1afc8:	4337      	orrs	r7, r6
   1afca:	1bd7      	subs	r7, r2, r7
   1afcc:	42ba      	cmp	r2, r7
   1afce:	4192      	sbcs	r2, r2
   1afd0:	1b0c      	subs	r4, r1, r4
   1afd2:	4252      	negs	r2, r2
   1afd4:	1aa4      	subs	r4, r4, r2
   1afd6:	0006      	movs	r6, r0
   1afd8:	46d8      	mov	r8, fp
   1afda:	e6a3      	b.n	1ad24 <__aeabi_dadd+0xb0>
   1afdc:	4664      	mov	r4, ip
   1afde:	4667      	mov	r7, ip
   1afe0:	432c      	orrs	r4, r5
   1afe2:	d000      	beq.n	1afe6 <__aeabi_dadd+0x372>
   1afe4:	e6a2      	b.n	1ad2c <__aeabi_dadd+0xb8>
   1afe6:	2500      	movs	r5, #0
   1afe8:	2600      	movs	r6, #0
   1afea:	2700      	movs	r7, #0
   1afec:	e706      	b.n	1adfc <__aeabi_dadd+0x188>
   1afee:	001e      	movs	r6, r3
   1aff0:	e6c4      	b.n	1ad7c <__aeabi_dadd+0x108>
   1aff2:	46c0      	nop			; (mov r8, r8)
   1aff4:	000007ff 	.word	0x000007ff
   1aff8:	ff7fffff 	.word	0xff7fffff
   1affc:	800fffff 	.word	0x800fffff
   1b000:	2b1f      	cmp	r3, #31
   1b002:	dc63      	bgt.n	1b0cc <__aeabi_dadd+0x458>
   1b004:	2020      	movs	r0, #32
   1b006:	1ac3      	subs	r3, r0, r3
   1b008:	0008      	movs	r0, r1
   1b00a:	4098      	lsls	r0, r3
   1b00c:	469c      	mov	ip, r3
   1b00e:	4683      	mov	fp, r0
   1b010:	4653      	mov	r3, sl
   1b012:	0010      	movs	r0, r2
   1b014:	40d8      	lsrs	r0, r3
   1b016:	0003      	movs	r3, r0
   1b018:	4658      	mov	r0, fp
   1b01a:	4318      	orrs	r0, r3
   1b01c:	4663      	mov	r3, ip
   1b01e:	409a      	lsls	r2, r3
   1b020:	1e53      	subs	r3, r2, #1
   1b022:	419a      	sbcs	r2, r3
   1b024:	4653      	mov	r3, sl
   1b026:	4302      	orrs	r2, r0
   1b028:	40d9      	lsrs	r1, r3
   1b02a:	e703      	b.n	1ae34 <__aeabi_dadd+0x1c0>
   1b02c:	0026      	movs	r6, r4
   1b02e:	433e      	orrs	r6, r7
   1b030:	d006      	beq.n	1b040 <__aeabi_dadd+0x3cc>
   1b032:	43eb      	mvns	r3, r5
   1b034:	4699      	mov	r9, r3
   1b036:	2b00      	cmp	r3, #0
   1b038:	d0c7      	beq.n	1afca <__aeabi_dadd+0x356>
   1b03a:	4e94      	ldr	r6, [pc, #592]	; (1b28c <__aeabi_dadd+0x618>)
   1b03c:	42b0      	cmp	r0, r6
   1b03e:	d1ac      	bne.n	1af9a <__aeabi_dadd+0x326>
   1b040:	000c      	movs	r4, r1
   1b042:	0017      	movs	r7, r2
   1b044:	0006      	movs	r6, r0
   1b046:	46d8      	mov	r8, fp
   1b048:	e698      	b.n	1ad7c <__aeabi_dadd+0x108>
   1b04a:	4b90      	ldr	r3, [pc, #576]	; (1b28c <__aeabi_dadd+0x618>)
   1b04c:	459a      	cmp	sl, r3
   1b04e:	d00b      	beq.n	1b068 <__aeabi_dadd+0x3f4>
   1b050:	4682      	mov	sl, r0
   1b052:	e6e7      	b.n	1ae24 <__aeabi_dadd+0x1b0>
   1b054:	2800      	cmp	r0, #0
   1b056:	d000      	beq.n	1b05a <__aeabi_dadd+0x3e6>
   1b058:	e09e      	b.n	1b198 <__aeabi_dadd+0x524>
   1b05a:	0018      	movs	r0, r3
   1b05c:	4310      	orrs	r0, r2
   1b05e:	d100      	bne.n	1b062 <__aeabi_dadd+0x3ee>
   1b060:	e0e9      	b.n	1b236 <__aeabi_dadd+0x5c2>
   1b062:	001c      	movs	r4, r3
   1b064:	0017      	movs	r7, r2
   1b066:	46d8      	mov	r8, fp
   1b068:	4e88      	ldr	r6, [pc, #544]	; (1b28c <__aeabi_dadd+0x618>)
   1b06a:	e687      	b.n	1ad7c <__aeabi_dadd+0x108>
   1b06c:	2500      	movs	r5, #0
   1b06e:	e772      	b.n	1af56 <__aeabi_dadd+0x2e2>
   1b070:	2100      	movs	r1, #0
   1b072:	e782      	b.n	1af7a <__aeabi_dadd+0x306>
   1b074:	0023      	movs	r3, r4
   1b076:	433b      	orrs	r3, r7
   1b078:	2e00      	cmp	r6, #0
   1b07a:	d000      	beq.n	1b07e <__aeabi_dadd+0x40a>
   1b07c:	e0ab      	b.n	1b1d6 <__aeabi_dadd+0x562>
   1b07e:	2b00      	cmp	r3, #0
   1b080:	d100      	bne.n	1b084 <__aeabi_dadd+0x410>
   1b082:	e0e7      	b.n	1b254 <__aeabi_dadd+0x5e0>
   1b084:	000b      	movs	r3, r1
   1b086:	4313      	orrs	r3, r2
   1b088:	d100      	bne.n	1b08c <__aeabi_dadd+0x418>
   1b08a:	e677      	b.n	1ad7c <__aeabi_dadd+0x108>
   1b08c:	18ba      	adds	r2, r7, r2
   1b08e:	42ba      	cmp	r2, r7
   1b090:	41bf      	sbcs	r7, r7
   1b092:	1864      	adds	r4, r4, r1
   1b094:	427f      	negs	r7, r7
   1b096:	19e4      	adds	r4, r4, r7
   1b098:	0223      	lsls	r3, r4, #8
   1b09a:	d400      	bmi.n	1b09e <__aeabi_dadd+0x42a>
   1b09c:	e0f2      	b.n	1b284 <__aeabi_dadd+0x610>
   1b09e:	4b7c      	ldr	r3, [pc, #496]	; (1b290 <__aeabi_dadd+0x61c>)
   1b0a0:	0017      	movs	r7, r2
   1b0a2:	401c      	ands	r4, r3
   1b0a4:	0006      	movs	r6, r0
   1b0a6:	e669      	b.n	1ad7c <__aeabi_dadd+0x108>
   1b0a8:	0020      	movs	r0, r4
   1b0aa:	4338      	orrs	r0, r7
   1b0ac:	2e00      	cmp	r6, #0
   1b0ae:	d1d1      	bne.n	1b054 <__aeabi_dadd+0x3e0>
   1b0b0:	2800      	cmp	r0, #0
   1b0b2:	d15b      	bne.n	1b16c <__aeabi_dadd+0x4f8>
   1b0b4:	001c      	movs	r4, r3
   1b0b6:	4314      	orrs	r4, r2
   1b0b8:	d100      	bne.n	1b0bc <__aeabi_dadd+0x448>
   1b0ba:	e0a8      	b.n	1b20e <__aeabi_dadd+0x59a>
   1b0bc:	001c      	movs	r4, r3
   1b0be:	0017      	movs	r7, r2
   1b0c0:	46d8      	mov	r8, fp
   1b0c2:	e65b      	b.n	1ad7c <__aeabi_dadd+0x108>
   1b0c4:	0006      	movs	r6, r0
   1b0c6:	2400      	movs	r4, #0
   1b0c8:	2700      	movs	r7, #0
   1b0ca:	e697      	b.n	1adfc <__aeabi_dadd+0x188>
   1b0cc:	4650      	mov	r0, sl
   1b0ce:	000b      	movs	r3, r1
   1b0d0:	3820      	subs	r0, #32
   1b0d2:	40c3      	lsrs	r3, r0
   1b0d4:	4699      	mov	r9, r3
   1b0d6:	4653      	mov	r3, sl
   1b0d8:	2b20      	cmp	r3, #32
   1b0da:	d100      	bne.n	1b0de <__aeabi_dadd+0x46a>
   1b0dc:	e095      	b.n	1b20a <__aeabi_dadd+0x596>
   1b0de:	2340      	movs	r3, #64	; 0x40
   1b0e0:	4650      	mov	r0, sl
   1b0e2:	1a1b      	subs	r3, r3, r0
   1b0e4:	4099      	lsls	r1, r3
   1b0e6:	430a      	orrs	r2, r1
   1b0e8:	1e51      	subs	r1, r2, #1
   1b0ea:	418a      	sbcs	r2, r1
   1b0ec:	464b      	mov	r3, r9
   1b0ee:	2100      	movs	r1, #0
   1b0f0:	431a      	orrs	r2, r3
   1b0f2:	e69f      	b.n	1ae34 <__aeabi_dadd+0x1c0>
   1b0f4:	2e00      	cmp	r6, #0
   1b0f6:	d130      	bne.n	1b15a <__aeabi_dadd+0x4e6>
   1b0f8:	0026      	movs	r6, r4
   1b0fa:	433e      	orrs	r6, r7
   1b0fc:	d067      	beq.n	1b1ce <__aeabi_dadd+0x55a>
   1b0fe:	43db      	mvns	r3, r3
   1b100:	469a      	mov	sl, r3
   1b102:	2b00      	cmp	r3, #0
   1b104:	d01c      	beq.n	1b140 <__aeabi_dadd+0x4cc>
   1b106:	4e61      	ldr	r6, [pc, #388]	; (1b28c <__aeabi_dadd+0x618>)
   1b108:	42b0      	cmp	r0, r6
   1b10a:	d060      	beq.n	1b1ce <__aeabi_dadd+0x55a>
   1b10c:	4653      	mov	r3, sl
   1b10e:	2b38      	cmp	r3, #56	; 0x38
   1b110:	dd00      	ble.n	1b114 <__aeabi_dadd+0x4a0>
   1b112:	e096      	b.n	1b242 <__aeabi_dadd+0x5ce>
   1b114:	2b1f      	cmp	r3, #31
   1b116:	dd00      	ble.n	1b11a <__aeabi_dadd+0x4a6>
   1b118:	e09f      	b.n	1b25a <__aeabi_dadd+0x5e6>
   1b11a:	2620      	movs	r6, #32
   1b11c:	1af3      	subs	r3, r6, r3
   1b11e:	0026      	movs	r6, r4
   1b120:	409e      	lsls	r6, r3
   1b122:	469c      	mov	ip, r3
   1b124:	46b3      	mov	fp, r6
   1b126:	4653      	mov	r3, sl
   1b128:	003e      	movs	r6, r7
   1b12a:	40de      	lsrs	r6, r3
   1b12c:	0033      	movs	r3, r6
   1b12e:	465e      	mov	r6, fp
   1b130:	431e      	orrs	r6, r3
   1b132:	4663      	mov	r3, ip
   1b134:	409f      	lsls	r7, r3
   1b136:	1e7b      	subs	r3, r7, #1
   1b138:	419f      	sbcs	r7, r3
   1b13a:	4653      	mov	r3, sl
   1b13c:	40dc      	lsrs	r4, r3
   1b13e:	4337      	orrs	r7, r6
   1b140:	18bf      	adds	r7, r7, r2
   1b142:	4297      	cmp	r7, r2
   1b144:	4192      	sbcs	r2, r2
   1b146:	1864      	adds	r4, r4, r1
   1b148:	4252      	negs	r2, r2
   1b14a:	18a4      	adds	r4, r4, r2
   1b14c:	0006      	movs	r6, r0
   1b14e:	e678      	b.n	1ae42 <__aeabi_dadd+0x1ce>
   1b150:	4327      	orrs	r7, r4
   1b152:	1e7c      	subs	r4, r7, #1
   1b154:	41a7      	sbcs	r7, r4
   1b156:	2400      	movs	r4, #0
   1b158:	e737      	b.n	1afca <__aeabi_dadd+0x356>
   1b15a:	4e4c      	ldr	r6, [pc, #304]	; (1b28c <__aeabi_dadd+0x618>)
   1b15c:	42b0      	cmp	r0, r6
   1b15e:	d036      	beq.n	1b1ce <__aeabi_dadd+0x55a>
   1b160:	2680      	movs	r6, #128	; 0x80
   1b162:	425b      	negs	r3, r3
   1b164:	0436      	lsls	r6, r6, #16
   1b166:	469a      	mov	sl, r3
   1b168:	4334      	orrs	r4, r6
   1b16a:	e7cf      	b.n	1b10c <__aeabi_dadd+0x498>
   1b16c:	0018      	movs	r0, r3
   1b16e:	4310      	orrs	r0, r2
   1b170:	d100      	bne.n	1b174 <__aeabi_dadd+0x500>
   1b172:	e603      	b.n	1ad7c <__aeabi_dadd+0x108>
   1b174:	1ab8      	subs	r0, r7, r2
   1b176:	4684      	mov	ip, r0
   1b178:	4567      	cmp	r7, ip
   1b17a:	41ad      	sbcs	r5, r5
   1b17c:	1ae0      	subs	r0, r4, r3
   1b17e:	426d      	negs	r5, r5
   1b180:	1b40      	subs	r0, r0, r5
   1b182:	0205      	lsls	r5, r0, #8
   1b184:	d400      	bmi.n	1b188 <__aeabi_dadd+0x514>
   1b186:	e62c      	b.n	1ade2 <__aeabi_dadd+0x16e>
   1b188:	1bd7      	subs	r7, r2, r7
   1b18a:	42ba      	cmp	r2, r7
   1b18c:	4192      	sbcs	r2, r2
   1b18e:	1b1c      	subs	r4, r3, r4
   1b190:	4252      	negs	r2, r2
   1b192:	1aa4      	subs	r4, r4, r2
   1b194:	46d8      	mov	r8, fp
   1b196:	e5f1      	b.n	1ad7c <__aeabi_dadd+0x108>
   1b198:	0018      	movs	r0, r3
   1b19a:	4310      	orrs	r0, r2
   1b19c:	d100      	bne.n	1b1a0 <__aeabi_dadd+0x52c>
   1b19e:	e763      	b.n	1b068 <__aeabi_dadd+0x3f4>
   1b1a0:	08f8      	lsrs	r0, r7, #3
   1b1a2:	0767      	lsls	r7, r4, #29
   1b1a4:	4307      	orrs	r7, r0
   1b1a6:	2080      	movs	r0, #128	; 0x80
   1b1a8:	08e4      	lsrs	r4, r4, #3
   1b1aa:	0300      	lsls	r0, r0, #12
   1b1ac:	4204      	tst	r4, r0
   1b1ae:	d008      	beq.n	1b1c2 <__aeabi_dadd+0x54e>
   1b1b0:	08dd      	lsrs	r5, r3, #3
   1b1b2:	4205      	tst	r5, r0
   1b1b4:	d105      	bne.n	1b1c2 <__aeabi_dadd+0x54e>
   1b1b6:	08d2      	lsrs	r2, r2, #3
   1b1b8:	0759      	lsls	r1, r3, #29
   1b1ba:	4311      	orrs	r1, r2
   1b1bc:	000f      	movs	r7, r1
   1b1be:	002c      	movs	r4, r5
   1b1c0:	46d8      	mov	r8, fp
   1b1c2:	0f7b      	lsrs	r3, r7, #29
   1b1c4:	00e4      	lsls	r4, r4, #3
   1b1c6:	431c      	orrs	r4, r3
   1b1c8:	00ff      	lsls	r7, r7, #3
   1b1ca:	4e30      	ldr	r6, [pc, #192]	; (1b28c <__aeabi_dadd+0x618>)
   1b1cc:	e5d6      	b.n	1ad7c <__aeabi_dadd+0x108>
   1b1ce:	000c      	movs	r4, r1
   1b1d0:	0017      	movs	r7, r2
   1b1d2:	0006      	movs	r6, r0
   1b1d4:	e5d2      	b.n	1ad7c <__aeabi_dadd+0x108>
   1b1d6:	2b00      	cmp	r3, #0
   1b1d8:	d038      	beq.n	1b24c <__aeabi_dadd+0x5d8>
   1b1da:	000b      	movs	r3, r1
   1b1dc:	4313      	orrs	r3, r2
   1b1de:	d100      	bne.n	1b1e2 <__aeabi_dadd+0x56e>
   1b1e0:	e742      	b.n	1b068 <__aeabi_dadd+0x3f4>
   1b1e2:	08f8      	lsrs	r0, r7, #3
   1b1e4:	0767      	lsls	r7, r4, #29
   1b1e6:	4307      	orrs	r7, r0
   1b1e8:	2080      	movs	r0, #128	; 0x80
   1b1ea:	08e4      	lsrs	r4, r4, #3
   1b1ec:	0300      	lsls	r0, r0, #12
   1b1ee:	4204      	tst	r4, r0
   1b1f0:	d0e7      	beq.n	1b1c2 <__aeabi_dadd+0x54e>
   1b1f2:	08cb      	lsrs	r3, r1, #3
   1b1f4:	4203      	tst	r3, r0
   1b1f6:	d1e4      	bne.n	1b1c2 <__aeabi_dadd+0x54e>
   1b1f8:	08d2      	lsrs	r2, r2, #3
   1b1fa:	0749      	lsls	r1, r1, #29
   1b1fc:	4311      	orrs	r1, r2
   1b1fe:	000f      	movs	r7, r1
   1b200:	001c      	movs	r4, r3
   1b202:	e7de      	b.n	1b1c2 <__aeabi_dadd+0x54e>
   1b204:	2700      	movs	r7, #0
   1b206:	2400      	movs	r4, #0
   1b208:	e5d5      	b.n	1adb6 <__aeabi_dadd+0x142>
   1b20a:	2100      	movs	r1, #0
   1b20c:	e76b      	b.n	1b0e6 <__aeabi_dadd+0x472>
   1b20e:	2500      	movs	r5, #0
   1b210:	2700      	movs	r7, #0
   1b212:	e5f3      	b.n	1adfc <__aeabi_dadd+0x188>
   1b214:	464e      	mov	r6, r9
   1b216:	0025      	movs	r5, r4
   1b218:	3e20      	subs	r6, #32
   1b21a:	40f5      	lsrs	r5, r6
   1b21c:	464b      	mov	r3, r9
   1b21e:	002e      	movs	r6, r5
   1b220:	2b20      	cmp	r3, #32
   1b222:	d02d      	beq.n	1b280 <__aeabi_dadd+0x60c>
   1b224:	2540      	movs	r5, #64	; 0x40
   1b226:	1aed      	subs	r5, r5, r3
   1b228:	40ac      	lsls	r4, r5
   1b22a:	4327      	orrs	r7, r4
   1b22c:	1e7c      	subs	r4, r7, #1
   1b22e:	41a7      	sbcs	r7, r4
   1b230:	2400      	movs	r4, #0
   1b232:	4337      	orrs	r7, r6
   1b234:	e6c9      	b.n	1afca <__aeabi_dadd+0x356>
   1b236:	2480      	movs	r4, #128	; 0x80
   1b238:	2500      	movs	r5, #0
   1b23a:	0324      	lsls	r4, r4, #12
   1b23c:	4e13      	ldr	r6, [pc, #76]	; (1b28c <__aeabi_dadd+0x618>)
   1b23e:	2700      	movs	r7, #0
   1b240:	e5dc      	b.n	1adfc <__aeabi_dadd+0x188>
   1b242:	4327      	orrs	r7, r4
   1b244:	1e7c      	subs	r4, r7, #1
   1b246:	41a7      	sbcs	r7, r4
   1b248:	2400      	movs	r4, #0
   1b24a:	e779      	b.n	1b140 <__aeabi_dadd+0x4cc>
   1b24c:	000c      	movs	r4, r1
   1b24e:	0017      	movs	r7, r2
   1b250:	4e0e      	ldr	r6, [pc, #56]	; (1b28c <__aeabi_dadd+0x618>)
   1b252:	e593      	b.n	1ad7c <__aeabi_dadd+0x108>
   1b254:	000c      	movs	r4, r1
   1b256:	0017      	movs	r7, r2
   1b258:	e590      	b.n	1ad7c <__aeabi_dadd+0x108>
   1b25a:	4656      	mov	r6, sl
   1b25c:	0023      	movs	r3, r4
   1b25e:	3e20      	subs	r6, #32
   1b260:	40f3      	lsrs	r3, r6
   1b262:	4699      	mov	r9, r3
   1b264:	4653      	mov	r3, sl
   1b266:	2b20      	cmp	r3, #32
   1b268:	d00e      	beq.n	1b288 <__aeabi_dadd+0x614>
   1b26a:	2340      	movs	r3, #64	; 0x40
   1b26c:	4656      	mov	r6, sl
   1b26e:	1b9b      	subs	r3, r3, r6
   1b270:	409c      	lsls	r4, r3
   1b272:	4327      	orrs	r7, r4
   1b274:	1e7c      	subs	r4, r7, #1
   1b276:	41a7      	sbcs	r7, r4
   1b278:	464b      	mov	r3, r9
   1b27a:	2400      	movs	r4, #0
   1b27c:	431f      	orrs	r7, r3
   1b27e:	e75f      	b.n	1b140 <__aeabi_dadd+0x4cc>
   1b280:	2400      	movs	r4, #0
   1b282:	e7d2      	b.n	1b22a <__aeabi_dadd+0x5b6>
   1b284:	0017      	movs	r7, r2
   1b286:	e5b2      	b.n	1adee <__aeabi_dadd+0x17a>
   1b288:	2400      	movs	r4, #0
   1b28a:	e7f2      	b.n	1b272 <__aeabi_dadd+0x5fe>
   1b28c:	000007ff 	.word	0x000007ff
   1b290:	ff7fffff 	.word	0xff7fffff

0001b294 <__aeabi_ddiv>:
   1b294:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b296:	4657      	mov	r7, sl
   1b298:	4645      	mov	r5, r8
   1b29a:	46de      	mov	lr, fp
   1b29c:	464e      	mov	r6, r9
   1b29e:	b5e0      	push	{r5, r6, r7, lr}
   1b2a0:	004c      	lsls	r4, r1, #1
   1b2a2:	030e      	lsls	r6, r1, #12
   1b2a4:	b087      	sub	sp, #28
   1b2a6:	4683      	mov	fp, r0
   1b2a8:	4692      	mov	sl, r2
   1b2aa:	001d      	movs	r5, r3
   1b2ac:	4680      	mov	r8, r0
   1b2ae:	0b36      	lsrs	r6, r6, #12
   1b2b0:	0d64      	lsrs	r4, r4, #21
   1b2b2:	0fcf      	lsrs	r7, r1, #31
   1b2b4:	2c00      	cmp	r4, #0
   1b2b6:	d04f      	beq.n	1b358 <__aeabi_ddiv+0xc4>
   1b2b8:	4b6f      	ldr	r3, [pc, #444]	; (1b478 <__aeabi_ddiv+0x1e4>)
   1b2ba:	429c      	cmp	r4, r3
   1b2bc:	d035      	beq.n	1b32a <__aeabi_ddiv+0x96>
   1b2be:	2380      	movs	r3, #128	; 0x80
   1b2c0:	0f42      	lsrs	r2, r0, #29
   1b2c2:	041b      	lsls	r3, r3, #16
   1b2c4:	00f6      	lsls	r6, r6, #3
   1b2c6:	4313      	orrs	r3, r2
   1b2c8:	4333      	orrs	r3, r6
   1b2ca:	4699      	mov	r9, r3
   1b2cc:	00c3      	lsls	r3, r0, #3
   1b2ce:	4698      	mov	r8, r3
   1b2d0:	4b6a      	ldr	r3, [pc, #424]	; (1b47c <__aeabi_ddiv+0x1e8>)
   1b2d2:	2600      	movs	r6, #0
   1b2d4:	469c      	mov	ip, r3
   1b2d6:	2300      	movs	r3, #0
   1b2d8:	4464      	add	r4, ip
   1b2da:	9303      	str	r3, [sp, #12]
   1b2dc:	032b      	lsls	r3, r5, #12
   1b2de:	0b1b      	lsrs	r3, r3, #12
   1b2e0:	469b      	mov	fp, r3
   1b2e2:	006b      	lsls	r3, r5, #1
   1b2e4:	0fed      	lsrs	r5, r5, #31
   1b2e6:	4650      	mov	r0, sl
   1b2e8:	0d5b      	lsrs	r3, r3, #21
   1b2ea:	9501      	str	r5, [sp, #4]
   1b2ec:	d05e      	beq.n	1b3ac <__aeabi_ddiv+0x118>
   1b2ee:	4a62      	ldr	r2, [pc, #392]	; (1b478 <__aeabi_ddiv+0x1e4>)
   1b2f0:	4293      	cmp	r3, r2
   1b2f2:	d053      	beq.n	1b39c <__aeabi_ddiv+0x108>
   1b2f4:	465a      	mov	r2, fp
   1b2f6:	00d1      	lsls	r1, r2, #3
   1b2f8:	2280      	movs	r2, #128	; 0x80
   1b2fa:	0f40      	lsrs	r0, r0, #29
   1b2fc:	0412      	lsls	r2, r2, #16
   1b2fe:	4302      	orrs	r2, r0
   1b300:	430a      	orrs	r2, r1
   1b302:	4693      	mov	fp, r2
   1b304:	4652      	mov	r2, sl
   1b306:	00d1      	lsls	r1, r2, #3
   1b308:	4a5c      	ldr	r2, [pc, #368]	; (1b47c <__aeabi_ddiv+0x1e8>)
   1b30a:	4694      	mov	ip, r2
   1b30c:	2200      	movs	r2, #0
   1b30e:	4463      	add	r3, ip
   1b310:	0038      	movs	r0, r7
   1b312:	4068      	eors	r0, r5
   1b314:	4684      	mov	ip, r0
   1b316:	9002      	str	r0, [sp, #8]
   1b318:	1ae4      	subs	r4, r4, r3
   1b31a:	4316      	orrs	r6, r2
   1b31c:	2e0f      	cmp	r6, #15
   1b31e:	d900      	bls.n	1b322 <__aeabi_ddiv+0x8e>
   1b320:	e0b4      	b.n	1b48c <__aeabi_ddiv+0x1f8>
   1b322:	4b57      	ldr	r3, [pc, #348]	; (1b480 <__aeabi_ddiv+0x1ec>)
   1b324:	00b6      	lsls	r6, r6, #2
   1b326:	599b      	ldr	r3, [r3, r6]
   1b328:	469f      	mov	pc, r3
   1b32a:	0003      	movs	r3, r0
   1b32c:	4333      	orrs	r3, r6
   1b32e:	4699      	mov	r9, r3
   1b330:	d16c      	bne.n	1b40c <__aeabi_ddiv+0x178>
   1b332:	2300      	movs	r3, #0
   1b334:	4698      	mov	r8, r3
   1b336:	3302      	adds	r3, #2
   1b338:	2608      	movs	r6, #8
   1b33a:	9303      	str	r3, [sp, #12]
   1b33c:	e7ce      	b.n	1b2dc <__aeabi_ddiv+0x48>
   1b33e:	46cb      	mov	fp, r9
   1b340:	4641      	mov	r1, r8
   1b342:	9a03      	ldr	r2, [sp, #12]
   1b344:	9701      	str	r7, [sp, #4]
   1b346:	2a02      	cmp	r2, #2
   1b348:	d165      	bne.n	1b416 <__aeabi_ddiv+0x182>
   1b34a:	9b01      	ldr	r3, [sp, #4]
   1b34c:	4c4a      	ldr	r4, [pc, #296]	; (1b478 <__aeabi_ddiv+0x1e4>)
   1b34e:	469c      	mov	ip, r3
   1b350:	2300      	movs	r3, #0
   1b352:	2200      	movs	r2, #0
   1b354:	4698      	mov	r8, r3
   1b356:	e06b      	b.n	1b430 <__aeabi_ddiv+0x19c>
   1b358:	0003      	movs	r3, r0
   1b35a:	4333      	orrs	r3, r6
   1b35c:	4699      	mov	r9, r3
   1b35e:	d04e      	beq.n	1b3fe <__aeabi_ddiv+0x16a>
   1b360:	2e00      	cmp	r6, #0
   1b362:	d100      	bne.n	1b366 <__aeabi_ddiv+0xd2>
   1b364:	e1bc      	b.n	1b6e0 <__aeabi_ddiv+0x44c>
   1b366:	0030      	movs	r0, r6
   1b368:	f001 f8ca 	bl	1c500 <__clzsi2>
   1b36c:	0003      	movs	r3, r0
   1b36e:	3b0b      	subs	r3, #11
   1b370:	2b1c      	cmp	r3, #28
   1b372:	dd00      	ble.n	1b376 <__aeabi_ddiv+0xe2>
   1b374:	e1ac      	b.n	1b6d0 <__aeabi_ddiv+0x43c>
   1b376:	221d      	movs	r2, #29
   1b378:	1ad3      	subs	r3, r2, r3
   1b37a:	465a      	mov	r2, fp
   1b37c:	0001      	movs	r1, r0
   1b37e:	40da      	lsrs	r2, r3
   1b380:	3908      	subs	r1, #8
   1b382:	408e      	lsls	r6, r1
   1b384:	0013      	movs	r3, r2
   1b386:	4333      	orrs	r3, r6
   1b388:	4699      	mov	r9, r3
   1b38a:	465b      	mov	r3, fp
   1b38c:	408b      	lsls	r3, r1
   1b38e:	4698      	mov	r8, r3
   1b390:	2300      	movs	r3, #0
   1b392:	4c3c      	ldr	r4, [pc, #240]	; (1b484 <__aeabi_ddiv+0x1f0>)
   1b394:	2600      	movs	r6, #0
   1b396:	1a24      	subs	r4, r4, r0
   1b398:	9303      	str	r3, [sp, #12]
   1b39a:	e79f      	b.n	1b2dc <__aeabi_ddiv+0x48>
   1b39c:	4651      	mov	r1, sl
   1b39e:	465a      	mov	r2, fp
   1b3a0:	4311      	orrs	r1, r2
   1b3a2:	d129      	bne.n	1b3f8 <__aeabi_ddiv+0x164>
   1b3a4:	2200      	movs	r2, #0
   1b3a6:	4693      	mov	fp, r2
   1b3a8:	3202      	adds	r2, #2
   1b3aa:	e7b1      	b.n	1b310 <__aeabi_ddiv+0x7c>
   1b3ac:	4659      	mov	r1, fp
   1b3ae:	4301      	orrs	r1, r0
   1b3b0:	d01e      	beq.n	1b3f0 <__aeabi_ddiv+0x15c>
   1b3b2:	465b      	mov	r3, fp
   1b3b4:	2b00      	cmp	r3, #0
   1b3b6:	d100      	bne.n	1b3ba <__aeabi_ddiv+0x126>
   1b3b8:	e19e      	b.n	1b6f8 <__aeabi_ddiv+0x464>
   1b3ba:	4658      	mov	r0, fp
   1b3bc:	f001 f8a0 	bl	1c500 <__clzsi2>
   1b3c0:	0003      	movs	r3, r0
   1b3c2:	3b0b      	subs	r3, #11
   1b3c4:	2b1c      	cmp	r3, #28
   1b3c6:	dd00      	ble.n	1b3ca <__aeabi_ddiv+0x136>
   1b3c8:	e18f      	b.n	1b6ea <__aeabi_ddiv+0x456>
   1b3ca:	0002      	movs	r2, r0
   1b3cc:	4659      	mov	r1, fp
   1b3ce:	3a08      	subs	r2, #8
   1b3d0:	4091      	lsls	r1, r2
   1b3d2:	468b      	mov	fp, r1
   1b3d4:	211d      	movs	r1, #29
   1b3d6:	1acb      	subs	r3, r1, r3
   1b3d8:	4651      	mov	r1, sl
   1b3da:	40d9      	lsrs	r1, r3
   1b3dc:	000b      	movs	r3, r1
   1b3de:	4659      	mov	r1, fp
   1b3e0:	430b      	orrs	r3, r1
   1b3e2:	4651      	mov	r1, sl
   1b3e4:	469b      	mov	fp, r3
   1b3e6:	4091      	lsls	r1, r2
   1b3e8:	4b26      	ldr	r3, [pc, #152]	; (1b484 <__aeabi_ddiv+0x1f0>)
   1b3ea:	2200      	movs	r2, #0
   1b3ec:	1a1b      	subs	r3, r3, r0
   1b3ee:	e78f      	b.n	1b310 <__aeabi_ddiv+0x7c>
   1b3f0:	2300      	movs	r3, #0
   1b3f2:	2201      	movs	r2, #1
   1b3f4:	469b      	mov	fp, r3
   1b3f6:	e78b      	b.n	1b310 <__aeabi_ddiv+0x7c>
   1b3f8:	4651      	mov	r1, sl
   1b3fa:	2203      	movs	r2, #3
   1b3fc:	e788      	b.n	1b310 <__aeabi_ddiv+0x7c>
   1b3fe:	2300      	movs	r3, #0
   1b400:	4698      	mov	r8, r3
   1b402:	3301      	adds	r3, #1
   1b404:	2604      	movs	r6, #4
   1b406:	2400      	movs	r4, #0
   1b408:	9303      	str	r3, [sp, #12]
   1b40a:	e767      	b.n	1b2dc <__aeabi_ddiv+0x48>
   1b40c:	2303      	movs	r3, #3
   1b40e:	46b1      	mov	r9, r6
   1b410:	9303      	str	r3, [sp, #12]
   1b412:	260c      	movs	r6, #12
   1b414:	e762      	b.n	1b2dc <__aeabi_ddiv+0x48>
   1b416:	2a03      	cmp	r2, #3
   1b418:	d100      	bne.n	1b41c <__aeabi_ddiv+0x188>
   1b41a:	e25c      	b.n	1b8d6 <__aeabi_ddiv+0x642>
   1b41c:	9b01      	ldr	r3, [sp, #4]
   1b41e:	2a01      	cmp	r2, #1
   1b420:	d000      	beq.n	1b424 <__aeabi_ddiv+0x190>
   1b422:	e1e4      	b.n	1b7ee <__aeabi_ddiv+0x55a>
   1b424:	4013      	ands	r3, r2
   1b426:	469c      	mov	ip, r3
   1b428:	2300      	movs	r3, #0
   1b42a:	2400      	movs	r4, #0
   1b42c:	2200      	movs	r2, #0
   1b42e:	4698      	mov	r8, r3
   1b430:	2100      	movs	r1, #0
   1b432:	0312      	lsls	r2, r2, #12
   1b434:	0b13      	lsrs	r3, r2, #12
   1b436:	0d0a      	lsrs	r2, r1, #20
   1b438:	0512      	lsls	r2, r2, #20
   1b43a:	431a      	orrs	r2, r3
   1b43c:	0523      	lsls	r3, r4, #20
   1b43e:	4c12      	ldr	r4, [pc, #72]	; (1b488 <__aeabi_ddiv+0x1f4>)
   1b440:	4640      	mov	r0, r8
   1b442:	4022      	ands	r2, r4
   1b444:	4313      	orrs	r3, r2
   1b446:	4662      	mov	r2, ip
   1b448:	005b      	lsls	r3, r3, #1
   1b44a:	07d2      	lsls	r2, r2, #31
   1b44c:	085b      	lsrs	r3, r3, #1
   1b44e:	4313      	orrs	r3, r2
   1b450:	0019      	movs	r1, r3
   1b452:	b007      	add	sp, #28
   1b454:	bc3c      	pop	{r2, r3, r4, r5}
   1b456:	4690      	mov	r8, r2
   1b458:	4699      	mov	r9, r3
   1b45a:	46a2      	mov	sl, r4
   1b45c:	46ab      	mov	fp, r5
   1b45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b460:	2300      	movs	r3, #0
   1b462:	2280      	movs	r2, #128	; 0x80
   1b464:	469c      	mov	ip, r3
   1b466:	0312      	lsls	r2, r2, #12
   1b468:	4698      	mov	r8, r3
   1b46a:	4c03      	ldr	r4, [pc, #12]	; (1b478 <__aeabi_ddiv+0x1e4>)
   1b46c:	e7e0      	b.n	1b430 <__aeabi_ddiv+0x19c>
   1b46e:	2300      	movs	r3, #0
   1b470:	4c01      	ldr	r4, [pc, #4]	; (1b478 <__aeabi_ddiv+0x1e4>)
   1b472:	2200      	movs	r2, #0
   1b474:	4698      	mov	r8, r3
   1b476:	e7db      	b.n	1b430 <__aeabi_ddiv+0x19c>
   1b478:	000007ff 	.word	0x000007ff
   1b47c:	fffffc01 	.word	0xfffffc01
   1b480:	0001e6fc 	.word	0x0001e6fc
   1b484:	fffffc0d 	.word	0xfffffc0d
   1b488:	800fffff 	.word	0x800fffff
   1b48c:	45d9      	cmp	r9, fp
   1b48e:	d900      	bls.n	1b492 <__aeabi_ddiv+0x1fe>
   1b490:	e139      	b.n	1b706 <__aeabi_ddiv+0x472>
   1b492:	d100      	bne.n	1b496 <__aeabi_ddiv+0x202>
   1b494:	e134      	b.n	1b700 <__aeabi_ddiv+0x46c>
   1b496:	2300      	movs	r3, #0
   1b498:	4646      	mov	r6, r8
   1b49a:	464d      	mov	r5, r9
   1b49c:	469a      	mov	sl, r3
   1b49e:	3c01      	subs	r4, #1
   1b4a0:	465b      	mov	r3, fp
   1b4a2:	0e0a      	lsrs	r2, r1, #24
   1b4a4:	021b      	lsls	r3, r3, #8
   1b4a6:	431a      	orrs	r2, r3
   1b4a8:	020b      	lsls	r3, r1, #8
   1b4aa:	0c17      	lsrs	r7, r2, #16
   1b4ac:	9303      	str	r3, [sp, #12]
   1b4ae:	0413      	lsls	r3, r2, #16
   1b4b0:	0c1b      	lsrs	r3, r3, #16
   1b4b2:	0039      	movs	r1, r7
   1b4b4:	0028      	movs	r0, r5
   1b4b6:	4690      	mov	r8, r2
   1b4b8:	9301      	str	r3, [sp, #4]
   1b4ba:	f7ff fb25 	bl	1ab08 <__udivsi3>
   1b4be:	0002      	movs	r2, r0
   1b4c0:	9b01      	ldr	r3, [sp, #4]
   1b4c2:	4683      	mov	fp, r0
   1b4c4:	435a      	muls	r2, r3
   1b4c6:	0028      	movs	r0, r5
   1b4c8:	0039      	movs	r1, r7
   1b4ca:	4691      	mov	r9, r2
   1b4cc:	f7ff fba2 	bl	1ac14 <__aeabi_uidivmod>
   1b4d0:	0c35      	lsrs	r5, r6, #16
   1b4d2:	0409      	lsls	r1, r1, #16
   1b4d4:	430d      	orrs	r5, r1
   1b4d6:	45a9      	cmp	r9, r5
   1b4d8:	d90d      	bls.n	1b4f6 <__aeabi_ddiv+0x262>
   1b4da:	465b      	mov	r3, fp
   1b4dc:	4445      	add	r5, r8
   1b4de:	3b01      	subs	r3, #1
   1b4e0:	45a8      	cmp	r8, r5
   1b4e2:	d900      	bls.n	1b4e6 <__aeabi_ddiv+0x252>
   1b4e4:	e13a      	b.n	1b75c <__aeabi_ddiv+0x4c8>
   1b4e6:	45a9      	cmp	r9, r5
   1b4e8:	d800      	bhi.n	1b4ec <__aeabi_ddiv+0x258>
   1b4ea:	e137      	b.n	1b75c <__aeabi_ddiv+0x4c8>
   1b4ec:	2302      	movs	r3, #2
   1b4ee:	425b      	negs	r3, r3
   1b4f0:	469c      	mov	ip, r3
   1b4f2:	4445      	add	r5, r8
   1b4f4:	44e3      	add	fp, ip
   1b4f6:	464b      	mov	r3, r9
   1b4f8:	1aeb      	subs	r3, r5, r3
   1b4fa:	0039      	movs	r1, r7
   1b4fc:	0018      	movs	r0, r3
   1b4fe:	9304      	str	r3, [sp, #16]
   1b500:	f7ff fb02 	bl	1ab08 <__udivsi3>
   1b504:	9b01      	ldr	r3, [sp, #4]
   1b506:	0005      	movs	r5, r0
   1b508:	4343      	muls	r3, r0
   1b50a:	0039      	movs	r1, r7
   1b50c:	9804      	ldr	r0, [sp, #16]
   1b50e:	4699      	mov	r9, r3
   1b510:	f7ff fb80 	bl	1ac14 <__aeabi_uidivmod>
   1b514:	0433      	lsls	r3, r6, #16
   1b516:	0409      	lsls	r1, r1, #16
   1b518:	0c1b      	lsrs	r3, r3, #16
   1b51a:	430b      	orrs	r3, r1
   1b51c:	4599      	cmp	r9, r3
   1b51e:	d909      	bls.n	1b534 <__aeabi_ddiv+0x2a0>
   1b520:	4443      	add	r3, r8
   1b522:	1e6a      	subs	r2, r5, #1
   1b524:	4598      	cmp	r8, r3
   1b526:	d900      	bls.n	1b52a <__aeabi_ddiv+0x296>
   1b528:	e11a      	b.n	1b760 <__aeabi_ddiv+0x4cc>
   1b52a:	4599      	cmp	r9, r3
   1b52c:	d800      	bhi.n	1b530 <__aeabi_ddiv+0x29c>
   1b52e:	e117      	b.n	1b760 <__aeabi_ddiv+0x4cc>
   1b530:	3d02      	subs	r5, #2
   1b532:	4443      	add	r3, r8
   1b534:	464a      	mov	r2, r9
   1b536:	1a9b      	subs	r3, r3, r2
   1b538:	465a      	mov	r2, fp
   1b53a:	0412      	lsls	r2, r2, #16
   1b53c:	432a      	orrs	r2, r5
   1b53e:	9903      	ldr	r1, [sp, #12]
   1b540:	4693      	mov	fp, r2
   1b542:	0c10      	lsrs	r0, r2, #16
   1b544:	0c0a      	lsrs	r2, r1, #16
   1b546:	4691      	mov	r9, r2
   1b548:	0409      	lsls	r1, r1, #16
   1b54a:	465a      	mov	r2, fp
   1b54c:	0c09      	lsrs	r1, r1, #16
   1b54e:	464e      	mov	r6, r9
   1b550:	000d      	movs	r5, r1
   1b552:	0412      	lsls	r2, r2, #16
   1b554:	0c12      	lsrs	r2, r2, #16
   1b556:	4345      	muls	r5, r0
   1b558:	9105      	str	r1, [sp, #20]
   1b55a:	4351      	muls	r1, r2
   1b55c:	4372      	muls	r2, r6
   1b55e:	4370      	muls	r0, r6
   1b560:	1952      	adds	r2, r2, r5
   1b562:	0c0e      	lsrs	r6, r1, #16
   1b564:	18b2      	adds	r2, r6, r2
   1b566:	4295      	cmp	r5, r2
   1b568:	d903      	bls.n	1b572 <__aeabi_ddiv+0x2de>
   1b56a:	2580      	movs	r5, #128	; 0x80
   1b56c:	026d      	lsls	r5, r5, #9
   1b56e:	46ac      	mov	ip, r5
   1b570:	4460      	add	r0, ip
   1b572:	0c15      	lsrs	r5, r2, #16
   1b574:	0409      	lsls	r1, r1, #16
   1b576:	0412      	lsls	r2, r2, #16
   1b578:	0c09      	lsrs	r1, r1, #16
   1b57a:	1828      	adds	r0, r5, r0
   1b57c:	1852      	adds	r2, r2, r1
   1b57e:	4283      	cmp	r3, r0
   1b580:	d200      	bcs.n	1b584 <__aeabi_ddiv+0x2f0>
   1b582:	e0ce      	b.n	1b722 <__aeabi_ddiv+0x48e>
   1b584:	d100      	bne.n	1b588 <__aeabi_ddiv+0x2f4>
   1b586:	e0c8      	b.n	1b71a <__aeabi_ddiv+0x486>
   1b588:	1a1d      	subs	r5, r3, r0
   1b58a:	4653      	mov	r3, sl
   1b58c:	1a9e      	subs	r6, r3, r2
   1b58e:	45b2      	cmp	sl, r6
   1b590:	4192      	sbcs	r2, r2
   1b592:	4252      	negs	r2, r2
   1b594:	1aab      	subs	r3, r5, r2
   1b596:	469a      	mov	sl, r3
   1b598:	4598      	cmp	r8, r3
   1b59a:	d100      	bne.n	1b59e <__aeabi_ddiv+0x30a>
   1b59c:	e117      	b.n	1b7ce <__aeabi_ddiv+0x53a>
   1b59e:	0039      	movs	r1, r7
   1b5a0:	0018      	movs	r0, r3
   1b5a2:	f7ff fab1 	bl	1ab08 <__udivsi3>
   1b5a6:	9b01      	ldr	r3, [sp, #4]
   1b5a8:	0005      	movs	r5, r0
   1b5aa:	4343      	muls	r3, r0
   1b5ac:	0039      	movs	r1, r7
   1b5ae:	4650      	mov	r0, sl
   1b5b0:	9304      	str	r3, [sp, #16]
   1b5b2:	f7ff fb2f 	bl	1ac14 <__aeabi_uidivmod>
   1b5b6:	9804      	ldr	r0, [sp, #16]
   1b5b8:	040b      	lsls	r3, r1, #16
   1b5ba:	0c31      	lsrs	r1, r6, #16
   1b5bc:	4319      	orrs	r1, r3
   1b5be:	4288      	cmp	r0, r1
   1b5c0:	d909      	bls.n	1b5d6 <__aeabi_ddiv+0x342>
   1b5c2:	4441      	add	r1, r8
   1b5c4:	1e6b      	subs	r3, r5, #1
   1b5c6:	4588      	cmp	r8, r1
   1b5c8:	d900      	bls.n	1b5cc <__aeabi_ddiv+0x338>
   1b5ca:	e107      	b.n	1b7dc <__aeabi_ddiv+0x548>
   1b5cc:	4288      	cmp	r0, r1
   1b5ce:	d800      	bhi.n	1b5d2 <__aeabi_ddiv+0x33e>
   1b5d0:	e104      	b.n	1b7dc <__aeabi_ddiv+0x548>
   1b5d2:	3d02      	subs	r5, #2
   1b5d4:	4441      	add	r1, r8
   1b5d6:	9b04      	ldr	r3, [sp, #16]
   1b5d8:	1acb      	subs	r3, r1, r3
   1b5da:	0018      	movs	r0, r3
   1b5dc:	0039      	movs	r1, r7
   1b5de:	9304      	str	r3, [sp, #16]
   1b5e0:	f7ff fa92 	bl	1ab08 <__udivsi3>
   1b5e4:	9b01      	ldr	r3, [sp, #4]
   1b5e6:	4682      	mov	sl, r0
   1b5e8:	4343      	muls	r3, r0
   1b5ea:	0039      	movs	r1, r7
   1b5ec:	9804      	ldr	r0, [sp, #16]
   1b5ee:	9301      	str	r3, [sp, #4]
   1b5f0:	f7ff fb10 	bl	1ac14 <__aeabi_uidivmod>
   1b5f4:	9801      	ldr	r0, [sp, #4]
   1b5f6:	040b      	lsls	r3, r1, #16
   1b5f8:	0431      	lsls	r1, r6, #16
   1b5fa:	0c09      	lsrs	r1, r1, #16
   1b5fc:	4319      	orrs	r1, r3
   1b5fe:	4288      	cmp	r0, r1
   1b600:	d90d      	bls.n	1b61e <__aeabi_ddiv+0x38a>
   1b602:	4653      	mov	r3, sl
   1b604:	4441      	add	r1, r8
   1b606:	3b01      	subs	r3, #1
   1b608:	4588      	cmp	r8, r1
   1b60a:	d900      	bls.n	1b60e <__aeabi_ddiv+0x37a>
   1b60c:	e0e8      	b.n	1b7e0 <__aeabi_ddiv+0x54c>
   1b60e:	4288      	cmp	r0, r1
   1b610:	d800      	bhi.n	1b614 <__aeabi_ddiv+0x380>
   1b612:	e0e5      	b.n	1b7e0 <__aeabi_ddiv+0x54c>
   1b614:	2302      	movs	r3, #2
   1b616:	425b      	negs	r3, r3
   1b618:	469c      	mov	ip, r3
   1b61a:	4441      	add	r1, r8
   1b61c:	44e2      	add	sl, ip
   1b61e:	9b01      	ldr	r3, [sp, #4]
   1b620:	042d      	lsls	r5, r5, #16
   1b622:	1ace      	subs	r6, r1, r3
   1b624:	4651      	mov	r1, sl
   1b626:	4329      	orrs	r1, r5
   1b628:	9d05      	ldr	r5, [sp, #20]
   1b62a:	464f      	mov	r7, r9
   1b62c:	002a      	movs	r2, r5
   1b62e:	040b      	lsls	r3, r1, #16
   1b630:	0c08      	lsrs	r0, r1, #16
   1b632:	0c1b      	lsrs	r3, r3, #16
   1b634:	435a      	muls	r2, r3
   1b636:	4345      	muls	r5, r0
   1b638:	437b      	muls	r3, r7
   1b63a:	4378      	muls	r0, r7
   1b63c:	195b      	adds	r3, r3, r5
   1b63e:	0c17      	lsrs	r7, r2, #16
   1b640:	18fb      	adds	r3, r7, r3
   1b642:	429d      	cmp	r5, r3
   1b644:	d903      	bls.n	1b64e <__aeabi_ddiv+0x3ba>
   1b646:	2580      	movs	r5, #128	; 0x80
   1b648:	026d      	lsls	r5, r5, #9
   1b64a:	46ac      	mov	ip, r5
   1b64c:	4460      	add	r0, ip
   1b64e:	0c1d      	lsrs	r5, r3, #16
   1b650:	0412      	lsls	r2, r2, #16
   1b652:	041b      	lsls	r3, r3, #16
   1b654:	0c12      	lsrs	r2, r2, #16
   1b656:	1828      	adds	r0, r5, r0
   1b658:	189b      	adds	r3, r3, r2
   1b65a:	4286      	cmp	r6, r0
   1b65c:	d200      	bcs.n	1b660 <__aeabi_ddiv+0x3cc>
   1b65e:	e093      	b.n	1b788 <__aeabi_ddiv+0x4f4>
   1b660:	d100      	bne.n	1b664 <__aeabi_ddiv+0x3d0>
   1b662:	e08e      	b.n	1b782 <__aeabi_ddiv+0x4ee>
   1b664:	2301      	movs	r3, #1
   1b666:	4319      	orrs	r1, r3
   1b668:	4ba0      	ldr	r3, [pc, #640]	; (1b8ec <__aeabi_ddiv+0x658>)
   1b66a:	18e3      	adds	r3, r4, r3
   1b66c:	2b00      	cmp	r3, #0
   1b66e:	dc00      	bgt.n	1b672 <__aeabi_ddiv+0x3de>
   1b670:	e099      	b.n	1b7a6 <__aeabi_ddiv+0x512>
   1b672:	074a      	lsls	r2, r1, #29
   1b674:	d000      	beq.n	1b678 <__aeabi_ddiv+0x3e4>
   1b676:	e09e      	b.n	1b7b6 <__aeabi_ddiv+0x522>
   1b678:	465a      	mov	r2, fp
   1b67a:	01d2      	lsls	r2, r2, #7
   1b67c:	d506      	bpl.n	1b68c <__aeabi_ddiv+0x3f8>
   1b67e:	465a      	mov	r2, fp
   1b680:	4b9b      	ldr	r3, [pc, #620]	; (1b8f0 <__aeabi_ddiv+0x65c>)
   1b682:	401a      	ands	r2, r3
   1b684:	2380      	movs	r3, #128	; 0x80
   1b686:	4693      	mov	fp, r2
   1b688:	00db      	lsls	r3, r3, #3
   1b68a:	18e3      	adds	r3, r4, r3
   1b68c:	4a99      	ldr	r2, [pc, #612]	; (1b8f4 <__aeabi_ddiv+0x660>)
   1b68e:	4293      	cmp	r3, r2
   1b690:	dd68      	ble.n	1b764 <__aeabi_ddiv+0x4d0>
   1b692:	2301      	movs	r3, #1
   1b694:	9a02      	ldr	r2, [sp, #8]
   1b696:	4c98      	ldr	r4, [pc, #608]	; (1b8f8 <__aeabi_ddiv+0x664>)
   1b698:	401a      	ands	r2, r3
   1b69a:	2300      	movs	r3, #0
   1b69c:	4694      	mov	ip, r2
   1b69e:	4698      	mov	r8, r3
   1b6a0:	2200      	movs	r2, #0
   1b6a2:	e6c5      	b.n	1b430 <__aeabi_ddiv+0x19c>
   1b6a4:	2280      	movs	r2, #128	; 0x80
   1b6a6:	464b      	mov	r3, r9
   1b6a8:	0312      	lsls	r2, r2, #12
   1b6aa:	4213      	tst	r3, r2
   1b6ac:	d00a      	beq.n	1b6c4 <__aeabi_ddiv+0x430>
   1b6ae:	465b      	mov	r3, fp
   1b6b0:	4213      	tst	r3, r2
   1b6b2:	d106      	bne.n	1b6c2 <__aeabi_ddiv+0x42e>
   1b6b4:	431a      	orrs	r2, r3
   1b6b6:	0312      	lsls	r2, r2, #12
   1b6b8:	0b12      	lsrs	r2, r2, #12
   1b6ba:	46ac      	mov	ip, r5
   1b6bc:	4688      	mov	r8, r1
   1b6be:	4c8e      	ldr	r4, [pc, #568]	; (1b8f8 <__aeabi_ddiv+0x664>)
   1b6c0:	e6b6      	b.n	1b430 <__aeabi_ddiv+0x19c>
   1b6c2:	464b      	mov	r3, r9
   1b6c4:	431a      	orrs	r2, r3
   1b6c6:	0312      	lsls	r2, r2, #12
   1b6c8:	0b12      	lsrs	r2, r2, #12
   1b6ca:	46bc      	mov	ip, r7
   1b6cc:	4c8a      	ldr	r4, [pc, #552]	; (1b8f8 <__aeabi_ddiv+0x664>)
   1b6ce:	e6af      	b.n	1b430 <__aeabi_ddiv+0x19c>
   1b6d0:	0003      	movs	r3, r0
   1b6d2:	465a      	mov	r2, fp
   1b6d4:	3b28      	subs	r3, #40	; 0x28
   1b6d6:	409a      	lsls	r2, r3
   1b6d8:	2300      	movs	r3, #0
   1b6da:	4691      	mov	r9, r2
   1b6dc:	4698      	mov	r8, r3
   1b6de:	e657      	b.n	1b390 <__aeabi_ddiv+0xfc>
   1b6e0:	4658      	mov	r0, fp
   1b6e2:	f000 ff0d 	bl	1c500 <__clzsi2>
   1b6e6:	3020      	adds	r0, #32
   1b6e8:	e640      	b.n	1b36c <__aeabi_ddiv+0xd8>
   1b6ea:	0003      	movs	r3, r0
   1b6ec:	4652      	mov	r2, sl
   1b6ee:	3b28      	subs	r3, #40	; 0x28
   1b6f0:	409a      	lsls	r2, r3
   1b6f2:	2100      	movs	r1, #0
   1b6f4:	4693      	mov	fp, r2
   1b6f6:	e677      	b.n	1b3e8 <__aeabi_ddiv+0x154>
   1b6f8:	f000 ff02 	bl	1c500 <__clzsi2>
   1b6fc:	3020      	adds	r0, #32
   1b6fe:	e65f      	b.n	1b3c0 <__aeabi_ddiv+0x12c>
   1b700:	4588      	cmp	r8, r1
   1b702:	d200      	bcs.n	1b706 <__aeabi_ddiv+0x472>
   1b704:	e6c7      	b.n	1b496 <__aeabi_ddiv+0x202>
   1b706:	464b      	mov	r3, r9
   1b708:	07de      	lsls	r6, r3, #31
   1b70a:	085d      	lsrs	r5, r3, #1
   1b70c:	4643      	mov	r3, r8
   1b70e:	085b      	lsrs	r3, r3, #1
   1b710:	431e      	orrs	r6, r3
   1b712:	4643      	mov	r3, r8
   1b714:	07db      	lsls	r3, r3, #31
   1b716:	469a      	mov	sl, r3
   1b718:	e6c2      	b.n	1b4a0 <__aeabi_ddiv+0x20c>
   1b71a:	2500      	movs	r5, #0
   1b71c:	4592      	cmp	sl, r2
   1b71e:	d300      	bcc.n	1b722 <__aeabi_ddiv+0x48e>
   1b720:	e733      	b.n	1b58a <__aeabi_ddiv+0x2f6>
   1b722:	9e03      	ldr	r6, [sp, #12]
   1b724:	4659      	mov	r1, fp
   1b726:	46b4      	mov	ip, r6
   1b728:	44e2      	add	sl, ip
   1b72a:	45b2      	cmp	sl, r6
   1b72c:	41ad      	sbcs	r5, r5
   1b72e:	426d      	negs	r5, r5
   1b730:	4445      	add	r5, r8
   1b732:	18eb      	adds	r3, r5, r3
   1b734:	3901      	subs	r1, #1
   1b736:	4598      	cmp	r8, r3
   1b738:	d207      	bcs.n	1b74a <__aeabi_ddiv+0x4b6>
   1b73a:	4298      	cmp	r0, r3
   1b73c:	d900      	bls.n	1b740 <__aeabi_ddiv+0x4ac>
   1b73e:	e07f      	b.n	1b840 <__aeabi_ddiv+0x5ac>
   1b740:	d100      	bne.n	1b744 <__aeabi_ddiv+0x4b0>
   1b742:	e0bc      	b.n	1b8be <__aeabi_ddiv+0x62a>
   1b744:	1a1d      	subs	r5, r3, r0
   1b746:	468b      	mov	fp, r1
   1b748:	e71f      	b.n	1b58a <__aeabi_ddiv+0x2f6>
   1b74a:	4598      	cmp	r8, r3
   1b74c:	d1fa      	bne.n	1b744 <__aeabi_ddiv+0x4b0>
   1b74e:	9d03      	ldr	r5, [sp, #12]
   1b750:	4555      	cmp	r5, sl
   1b752:	d9f2      	bls.n	1b73a <__aeabi_ddiv+0x4a6>
   1b754:	4643      	mov	r3, r8
   1b756:	468b      	mov	fp, r1
   1b758:	1a1d      	subs	r5, r3, r0
   1b75a:	e716      	b.n	1b58a <__aeabi_ddiv+0x2f6>
   1b75c:	469b      	mov	fp, r3
   1b75e:	e6ca      	b.n	1b4f6 <__aeabi_ddiv+0x262>
   1b760:	0015      	movs	r5, r2
   1b762:	e6e7      	b.n	1b534 <__aeabi_ddiv+0x2a0>
   1b764:	465a      	mov	r2, fp
   1b766:	08c9      	lsrs	r1, r1, #3
   1b768:	0752      	lsls	r2, r2, #29
   1b76a:	430a      	orrs	r2, r1
   1b76c:	055b      	lsls	r3, r3, #21
   1b76e:	4690      	mov	r8, r2
   1b770:	0d5c      	lsrs	r4, r3, #21
   1b772:	465a      	mov	r2, fp
   1b774:	2301      	movs	r3, #1
   1b776:	9902      	ldr	r1, [sp, #8]
   1b778:	0252      	lsls	r2, r2, #9
   1b77a:	4019      	ands	r1, r3
   1b77c:	0b12      	lsrs	r2, r2, #12
   1b77e:	468c      	mov	ip, r1
   1b780:	e656      	b.n	1b430 <__aeabi_ddiv+0x19c>
   1b782:	2b00      	cmp	r3, #0
   1b784:	d100      	bne.n	1b788 <__aeabi_ddiv+0x4f4>
   1b786:	e76f      	b.n	1b668 <__aeabi_ddiv+0x3d4>
   1b788:	4446      	add	r6, r8
   1b78a:	1e4a      	subs	r2, r1, #1
   1b78c:	45b0      	cmp	r8, r6
   1b78e:	d929      	bls.n	1b7e4 <__aeabi_ddiv+0x550>
   1b790:	0011      	movs	r1, r2
   1b792:	4286      	cmp	r6, r0
   1b794:	d000      	beq.n	1b798 <__aeabi_ddiv+0x504>
   1b796:	e765      	b.n	1b664 <__aeabi_ddiv+0x3d0>
   1b798:	9a03      	ldr	r2, [sp, #12]
   1b79a:	4293      	cmp	r3, r2
   1b79c:	d000      	beq.n	1b7a0 <__aeabi_ddiv+0x50c>
   1b79e:	e761      	b.n	1b664 <__aeabi_ddiv+0x3d0>
   1b7a0:	e762      	b.n	1b668 <__aeabi_ddiv+0x3d4>
   1b7a2:	2101      	movs	r1, #1
   1b7a4:	4249      	negs	r1, r1
   1b7a6:	2001      	movs	r0, #1
   1b7a8:	1ac2      	subs	r2, r0, r3
   1b7aa:	2a38      	cmp	r2, #56	; 0x38
   1b7ac:	dd21      	ble.n	1b7f2 <__aeabi_ddiv+0x55e>
   1b7ae:	9b02      	ldr	r3, [sp, #8]
   1b7b0:	4003      	ands	r3, r0
   1b7b2:	469c      	mov	ip, r3
   1b7b4:	e638      	b.n	1b428 <__aeabi_ddiv+0x194>
   1b7b6:	220f      	movs	r2, #15
   1b7b8:	400a      	ands	r2, r1
   1b7ba:	2a04      	cmp	r2, #4
   1b7bc:	d100      	bne.n	1b7c0 <__aeabi_ddiv+0x52c>
   1b7be:	e75b      	b.n	1b678 <__aeabi_ddiv+0x3e4>
   1b7c0:	000a      	movs	r2, r1
   1b7c2:	1d11      	adds	r1, r2, #4
   1b7c4:	4291      	cmp	r1, r2
   1b7c6:	4192      	sbcs	r2, r2
   1b7c8:	4252      	negs	r2, r2
   1b7ca:	4493      	add	fp, r2
   1b7cc:	e754      	b.n	1b678 <__aeabi_ddiv+0x3e4>
   1b7ce:	4b47      	ldr	r3, [pc, #284]	; (1b8ec <__aeabi_ddiv+0x658>)
   1b7d0:	18e3      	adds	r3, r4, r3
   1b7d2:	2b00      	cmp	r3, #0
   1b7d4:	dde5      	ble.n	1b7a2 <__aeabi_ddiv+0x50e>
   1b7d6:	2201      	movs	r2, #1
   1b7d8:	4252      	negs	r2, r2
   1b7da:	e7f2      	b.n	1b7c2 <__aeabi_ddiv+0x52e>
   1b7dc:	001d      	movs	r5, r3
   1b7de:	e6fa      	b.n	1b5d6 <__aeabi_ddiv+0x342>
   1b7e0:	469a      	mov	sl, r3
   1b7e2:	e71c      	b.n	1b61e <__aeabi_ddiv+0x38a>
   1b7e4:	42b0      	cmp	r0, r6
   1b7e6:	d839      	bhi.n	1b85c <__aeabi_ddiv+0x5c8>
   1b7e8:	d06e      	beq.n	1b8c8 <__aeabi_ddiv+0x634>
   1b7ea:	0011      	movs	r1, r2
   1b7ec:	e73a      	b.n	1b664 <__aeabi_ddiv+0x3d0>
   1b7ee:	9302      	str	r3, [sp, #8]
   1b7f0:	e73a      	b.n	1b668 <__aeabi_ddiv+0x3d4>
   1b7f2:	2a1f      	cmp	r2, #31
   1b7f4:	dc3c      	bgt.n	1b870 <__aeabi_ddiv+0x5dc>
   1b7f6:	2320      	movs	r3, #32
   1b7f8:	1a9b      	subs	r3, r3, r2
   1b7fa:	000c      	movs	r4, r1
   1b7fc:	4658      	mov	r0, fp
   1b7fe:	4099      	lsls	r1, r3
   1b800:	4098      	lsls	r0, r3
   1b802:	1e4b      	subs	r3, r1, #1
   1b804:	4199      	sbcs	r1, r3
   1b806:	465b      	mov	r3, fp
   1b808:	40d4      	lsrs	r4, r2
   1b80a:	40d3      	lsrs	r3, r2
   1b80c:	4320      	orrs	r0, r4
   1b80e:	4308      	orrs	r0, r1
   1b810:	001a      	movs	r2, r3
   1b812:	0743      	lsls	r3, r0, #29
   1b814:	d009      	beq.n	1b82a <__aeabi_ddiv+0x596>
   1b816:	230f      	movs	r3, #15
   1b818:	4003      	ands	r3, r0
   1b81a:	2b04      	cmp	r3, #4
   1b81c:	d005      	beq.n	1b82a <__aeabi_ddiv+0x596>
   1b81e:	0001      	movs	r1, r0
   1b820:	1d08      	adds	r0, r1, #4
   1b822:	4288      	cmp	r0, r1
   1b824:	419b      	sbcs	r3, r3
   1b826:	425b      	negs	r3, r3
   1b828:	18d2      	adds	r2, r2, r3
   1b82a:	0213      	lsls	r3, r2, #8
   1b82c:	d53a      	bpl.n	1b8a4 <__aeabi_ddiv+0x610>
   1b82e:	2301      	movs	r3, #1
   1b830:	9a02      	ldr	r2, [sp, #8]
   1b832:	2401      	movs	r4, #1
   1b834:	401a      	ands	r2, r3
   1b836:	2300      	movs	r3, #0
   1b838:	4694      	mov	ip, r2
   1b83a:	4698      	mov	r8, r3
   1b83c:	2200      	movs	r2, #0
   1b83e:	e5f7      	b.n	1b430 <__aeabi_ddiv+0x19c>
   1b840:	2102      	movs	r1, #2
   1b842:	4249      	negs	r1, r1
   1b844:	468c      	mov	ip, r1
   1b846:	9d03      	ldr	r5, [sp, #12]
   1b848:	44e3      	add	fp, ip
   1b84a:	46ac      	mov	ip, r5
   1b84c:	44e2      	add	sl, ip
   1b84e:	45aa      	cmp	sl, r5
   1b850:	41ad      	sbcs	r5, r5
   1b852:	426d      	negs	r5, r5
   1b854:	4445      	add	r5, r8
   1b856:	18ed      	adds	r5, r5, r3
   1b858:	1a2d      	subs	r5, r5, r0
   1b85a:	e696      	b.n	1b58a <__aeabi_ddiv+0x2f6>
   1b85c:	1e8a      	subs	r2, r1, #2
   1b85e:	9903      	ldr	r1, [sp, #12]
   1b860:	004d      	lsls	r5, r1, #1
   1b862:	428d      	cmp	r5, r1
   1b864:	4189      	sbcs	r1, r1
   1b866:	4249      	negs	r1, r1
   1b868:	4441      	add	r1, r8
   1b86a:	1876      	adds	r6, r6, r1
   1b86c:	9503      	str	r5, [sp, #12]
   1b86e:	e78f      	b.n	1b790 <__aeabi_ddiv+0x4fc>
   1b870:	201f      	movs	r0, #31
   1b872:	4240      	negs	r0, r0
   1b874:	1ac3      	subs	r3, r0, r3
   1b876:	4658      	mov	r0, fp
   1b878:	40d8      	lsrs	r0, r3
   1b87a:	0003      	movs	r3, r0
   1b87c:	2a20      	cmp	r2, #32
   1b87e:	d028      	beq.n	1b8d2 <__aeabi_ddiv+0x63e>
   1b880:	2040      	movs	r0, #64	; 0x40
   1b882:	465d      	mov	r5, fp
   1b884:	1a82      	subs	r2, r0, r2
   1b886:	4095      	lsls	r5, r2
   1b888:	4329      	orrs	r1, r5
   1b88a:	1e4a      	subs	r2, r1, #1
   1b88c:	4191      	sbcs	r1, r2
   1b88e:	4319      	orrs	r1, r3
   1b890:	2307      	movs	r3, #7
   1b892:	2200      	movs	r2, #0
   1b894:	400b      	ands	r3, r1
   1b896:	d009      	beq.n	1b8ac <__aeabi_ddiv+0x618>
   1b898:	230f      	movs	r3, #15
   1b89a:	2200      	movs	r2, #0
   1b89c:	400b      	ands	r3, r1
   1b89e:	0008      	movs	r0, r1
   1b8a0:	2b04      	cmp	r3, #4
   1b8a2:	d1bd      	bne.n	1b820 <__aeabi_ddiv+0x58c>
   1b8a4:	0001      	movs	r1, r0
   1b8a6:	0753      	lsls	r3, r2, #29
   1b8a8:	0252      	lsls	r2, r2, #9
   1b8aa:	0b12      	lsrs	r2, r2, #12
   1b8ac:	08c9      	lsrs	r1, r1, #3
   1b8ae:	4319      	orrs	r1, r3
   1b8b0:	2301      	movs	r3, #1
   1b8b2:	4688      	mov	r8, r1
   1b8b4:	9902      	ldr	r1, [sp, #8]
   1b8b6:	2400      	movs	r4, #0
   1b8b8:	4019      	ands	r1, r3
   1b8ba:	468c      	mov	ip, r1
   1b8bc:	e5b8      	b.n	1b430 <__aeabi_ddiv+0x19c>
   1b8be:	4552      	cmp	r2, sl
   1b8c0:	d8be      	bhi.n	1b840 <__aeabi_ddiv+0x5ac>
   1b8c2:	468b      	mov	fp, r1
   1b8c4:	2500      	movs	r5, #0
   1b8c6:	e660      	b.n	1b58a <__aeabi_ddiv+0x2f6>
   1b8c8:	9d03      	ldr	r5, [sp, #12]
   1b8ca:	429d      	cmp	r5, r3
   1b8cc:	d3c6      	bcc.n	1b85c <__aeabi_ddiv+0x5c8>
   1b8ce:	0011      	movs	r1, r2
   1b8d0:	e762      	b.n	1b798 <__aeabi_ddiv+0x504>
   1b8d2:	2500      	movs	r5, #0
   1b8d4:	e7d8      	b.n	1b888 <__aeabi_ddiv+0x5f4>
   1b8d6:	2280      	movs	r2, #128	; 0x80
   1b8d8:	465b      	mov	r3, fp
   1b8da:	0312      	lsls	r2, r2, #12
   1b8dc:	431a      	orrs	r2, r3
   1b8de:	9b01      	ldr	r3, [sp, #4]
   1b8e0:	0312      	lsls	r2, r2, #12
   1b8e2:	0b12      	lsrs	r2, r2, #12
   1b8e4:	469c      	mov	ip, r3
   1b8e6:	4688      	mov	r8, r1
   1b8e8:	4c03      	ldr	r4, [pc, #12]	; (1b8f8 <__aeabi_ddiv+0x664>)
   1b8ea:	e5a1      	b.n	1b430 <__aeabi_ddiv+0x19c>
   1b8ec:	000003ff 	.word	0x000003ff
   1b8f0:	feffffff 	.word	0xfeffffff
   1b8f4:	000007fe 	.word	0x000007fe
   1b8f8:	000007ff 	.word	0x000007ff

0001b8fc <__aeabi_dmul>:
   1b8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b8fe:	4657      	mov	r7, sl
   1b900:	4645      	mov	r5, r8
   1b902:	46de      	mov	lr, fp
   1b904:	464e      	mov	r6, r9
   1b906:	b5e0      	push	{r5, r6, r7, lr}
   1b908:	030c      	lsls	r4, r1, #12
   1b90a:	4698      	mov	r8, r3
   1b90c:	004e      	lsls	r6, r1, #1
   1b90e:	0b23      	lsrs	r3, r4, #12
   1b910:	b087      	sub	sp, #28
   1b912:	0007      	movs	r7, r0
   1b914:	4692      	mov	sl, r2
   1b916:	469b      	mov	fp, r3
   1b918:	0d76      	lsrs	r6, r6, #21
   1b91a:	0fcd      	lsrs	r5, r1, #31
   1b91c:	2e00      	cmp	r6, #0
   1b91e:	d06b      	beq.n	1b9f8 <__aeabi_dmul+0xfc>
   1b920:	4b6d      	ldr	r3, [pc, #436]	; (1bad8 <__aeabi_dmul+0x1dc>)
   1b922:	429e      	cmp	r6, r3
   1b924:	d035      	beq.n	1b992 <__aeabi_dmul+0x96>
   1b926:	2480      	movs	r4, #128	; 0x80
   1b928:	465b      	mov	r3, fp
   1b92a:	0f42      	lsrs	r2, r0, #29
   1b92c:	0424      	lsls	r4, r4, #16
   1b92e:	00db      	lsls	r3, r3, #3
   1b930:	4314      	orrs	r4, r2
   1b932:	431c      	orrs	r4, r3
   1b934:	00c3      	lsls	r3, r0, #3
   1b936:	4699      	mov	r9, r3
   1b938:	4b68      	ldr	r3, [pc, #416]	; (1badc <__aeabi_dmul+0x1e0>)
   1b93a:	46a3      	mov	fp, r4
   1b93c:	469c      	mov	ip, r3
   1b93e:	2300      	movs	r3, #0
   1b940:	2700      	movs	r7, #0
   1b942:	4466      	add	r6, ip
   1b944:	9302      	str	r3, [sp, #8]
   1b946:	4643      	mov	r3, r8
   1b948:	031c      	lsls	r4, r3, #12
   1b94a:	005a      	lsls	r2, r3, #1
   1b94c:	0fdb      	lsrs	r3, r3, #31
   1b94e:	4650      	mov	r0, sl
   1b950:	0b24      	lsrs	r4, r4, #12
   1b952:	0d52      	lsrs	r2, r2, #21
   1b954:	4698      	mov	r8, r3
   1b956:	d100      	bne.n	1b95a <__aeabi_dmul+0x5e>
   1b958:	e076      	b.n	1ba48 <__aeabi_dmul+0x14c>
   1b95a:	4b5f      	ldr	r3, [pc, #380]	; (1bad8 <__aeabi_dmul+0x1dc>)
   1b95c:	429a      	cmp	r2, r3
   1b95e:	d06d      	beq.n	1ba3c <__aeabi_dmul+0x140>
   1b960:	2380      	movs	r3, #128	; 0x80
   1b962:	0f41      	lsrs	r1, r0, #29
   1b964:	041b      	lsls	r3, r3, #16
   1b966:	430b      	orrs	r3, r1
   1b968:	495c      	ldr	r1, [pc, #368]	; (1badc <__aeabi_dmul+0x1e0>)
   1b96a:	00e4      	lsls	r4, r4, #3
   1b96c:	468c      	mov	ip, r1
   1b96e:	431c      	orrs	r4, r3
   1b970:	00c3      	lsls	r3, r0, #3
   1b972:	2000      	movs	r0, #0
   1b974:	4462      	add	r2, ip
   1b976:	4641      	mov	r1, r8
   1b978:	18b6      	adds	r6, r6, r2
   1b97a:	4069      	eors	r1, r5
   1b97c:	1c72      	adds	r2, r6, #1
   1b97e:	9101      	str	r1, [sp, #4]
   1b980:	4694      	mov	ip, r2
   1b982:	4307      	orrs	r7, r0
   1b984:	2f0f      	cmp	r7, #15
   1b986:	d900      	bls.n	1b98a <__aeabi_dmul+0x8e>
   1b988:	e0b0      	b.n	1baec <__aeabi_dmul+0x1f0>
   1b98a:	4a55      	ldr	r2, [pc, #340]	; (1bae0 <__aeabi_dmul+0x1e4>)
   1b98c:	00bf      	lsls	r7, r7, #2
   1b98e:	59d2      	ldr	r2, [r2, r7]
   1b990:	4697      	mov	pc, r2
   1b992:	465b      	mov	r3, fp
   1b994:	4303      	orrs	r3, r0
   1b996:	4699      	mov	r9, r3
   1b998:	d000      	beq.n	1b99c <__aeabi_dmul+0xa0>
   1b99a:	e087      	b.n	1baac <__aeabi_dmul+0x1b0>
   1b99c:	2300      	movs	r3, #0
   1b99e:	469b      	mov	fp, r3
   1b9a0:	3302      	adds	r3, #2
   1b9a2:	2708      	movs	r7, #8
   1b9a4:	9302      	str	r3, [sp, #8]
   1b9a6:	e7ce      	b.n	1b946 <__aeabi_dmul+0x4a>
   1b9a8:	4642      	mov	r2, r8
   1b9aa:	9201      	str	r2, [sp, #4]
   1b9ac:	2802      	cmp	r0, #2
   1b9ae:	d067      	beq.n	1ba80 <__aeabi_dmul+0x184>
   1b9b0:	2803      	cmp	r0, #3
   1b9b2:	d100      	bne.n	1b9b6 <__aeabi_dmul+0xba>
   1b9b4:	e20e      	b.n	1bdd4 <__aeabi_dmul+0x4d8>
   1b9b6:	2801      	cmp	r0, #1
   1b9b8:	d000      	beq.n	1b9bc <__aeabi_dmul+0xc0>
   1b9ba:	e162      	b.n	1bc82 <__aeabi_dmul+0x386>
   1b9bc:	2300      	movs	r3, #0
   1b9be:	2400      	movs	r4, #0
   1b9c0:	2200      	movs	r2, #0
   1b9c2:	4699      	mov	r9, r3
   1b9c4:	9901      	ldr	r1, [sp, #4]
   1b9c6:	4001      	ands	r1, r0
   1b9c8:	b2cd      	uxtb	r5, r1
   1b9ca:	2100      	movs	r1, #0
   1b9cc:	0312      	lsls	r2, r2, #12
   1b9ce:	0d0b      	lsrs	r3, r1, #20
   1b9d0:	0b12      	lsrs	r2, r2, #12
   1b9d2:	051b      	lsls	r3, r3, #20
   1b9d4:	4313      	orrs	r3, r2
   1b9d6:	4a43      	ldr	r2, [pc, #268]	; (1bae4 <__aeabi_dmul+0x1e8>)
   1b9d8:	0524      	lsls	r4, r4, #20
   1b9da:	4013      	ands	r3, r2
   1b9dc:	431c      	orrs	r4, r3
   1b9de:	0064      	lsls	r4, r4, #1
   1b9e0:	07ed      	lsls	r5, r5, #31
   1b9e2:	0864      	lsrs	r4, r4, #1
   1b9e4:	432c      	orrs	r4, r5
   1b9e6:	4648      	mov	r0, r9
   1b9e8:	0021      	movs	r1, r4
   1b9ea:	b007      	add	sp, #28
   1b9ec:	bc3c      	pop	{r2, r3, r4, r5}
   1b9ee:	4690      	mov	r8, r2
   1b9f0:	4699      	mov	r9, r3
   1b9f2:	46a2      	mov	sl, r4
   1b9f4:	46ab      	mov	fp, r5
   1b9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b9f8:	4303      	orrs	r3, r0
   1b9fa:	4699      	mov	r9, r3
   1b9fc:	d04f      	beq.n	1ba9e <__aeabi_dmul+0x1a2>
   1b9fe:	465b      	mov	r3, fp
   1ba00:	2b00      	cmp	r3, #0
   1ba02:	d100      	bne.n	1ba06 <__aeabi_dmul+0x10a>
   1ba04:	e189      	b.n	1bd1a <__aeabi_dmul+0x41e>
   1ba06:	4658      	mov	r0, fp
   1ba08:	f000 fd7a 	bl	1c500 <__clzsi2>
   1ba0c:	0003      	movs	r3, r0
   1ba0e:	3b0b      	subs	r3, #11
   1ba10:	2b1c      	cmp	r3, #28
   1ba12:	dd00      	ble.n	1ba16 <__aeabi_dmul+0x11a>
   1ba14:	e17a      	b.n	1bd0c <__aeabi_dmul+0x410>
   1ba16:	221d      	movs	r2, #29
   1ba18:	1ad3      	subs	r3, r2, r3
   1ba1a:	003a      	movs	r2, r7
   1ba1c:	0001      	movs	r1, r0
   1ba1e:	465c      	mov	r4, fp
   1ba20:	40da      	lsrs	r2, r3
   1ba22:	3908      	subs	r1, #8
   1ba24:	408c      	lsls	r4, r1
   1ba26:	0013      	movs	r3, r2
   1ba28:	408f      	lsls	r7, r1
   1ba2a:	4323      	orrs	r3, r4
   1ba2c:	469b      	mov	fp, r3
   1ba2e:	46b9      	mov	r9, r7
   1ba30:	2300      	movs	r3, #0
   1ba32:	4e2d      	ldr	r6, [pc, #180]	; (1bae8 <__aeabi_dmul+0x1ec>)
   1ba34:	2700      	movs	r7, #0
   1ba36:	1a36      	subs	r6, r6, r0
   1ba38:	9302      	str	r3, [sp, #8]
   1ba3a:	e784      	b.n	1b946 <__aeabi_dmul+0x4a>
   1ba3c:	4653      	mov	r3, sl
   1ba3e:	4323      	orrs	r3, r4
   1ba40:	d12a      	bne.n	1ba98 <__aeabi_dmul+0x19c>
   1ba42:	2400      	movs	r4, #0
   1ba44:	2002      	movs	r0, #2
   1ba46:	e796      	b.n	1b976 <__aeabi_dmul+0x7a>
   1ba48:	4653      	mov	r3, sl
   1ba4a:	4323      	orrs	r3, r4
   1ba4c:	d020      	beq.n	1ba90 <__aeabi_dmul+0x194>
   1ba4e:	2c00      	cmp	r4, #0
   1ba50:	d100      	bne.n	1ba54 <__aeabi_dmul+0x158>
   1ba52:	e157      	b.n	1bd04 <__aeabi_dmul+0x408>
   1ba54:	0020      	movs	r0, r4
   1ba56:	f000 fd53 	bl	1c500 <__clzsi2>
   1ba5a:	0003      	movs	r3, r0
   1ba5c:	3b0b      	subs	r3, #11
   1ba5e:	2b1c      	cmp	r3, #28
   1ba60:	dd00      	ble.n	1ba64 <__aeabi_dmul+0x168>
   1ba62:	e149      	b.n	1bcf8 <__aeabi_dmul+0x3fc>
   1ba64:	211d      	movs	r1, #29
   1ba66:	1acb      	subs	r3, r1, r3
   1ba68:	4651      	mov	r1, sl
   1ba6a:	0002      	movs	r2, r0
   1ba6c:	40d9      	lsrs	r1, r3
   1ba6e:	4653      	mov	r3, sl
   1ba70:	3a08      	subs	r2, #8
   1ba72:	4094      	lsls	r4, r2
   1ba74:	4093      	lsls	r3, r2
   1ba76:	430c      	orrs	r4, r1
   1ba78:	4a1b      	ldr	r2, [pc, #108]	; (1bae8 <__aeabi_dmul+0x1ec>)
   1ba7a:	1a12      	subs	r2, r2, r0
   1ba7c:	2000      	movs	r0, #0
   1ba7e:	e77a      	b.n	1b976 <__aeabi_dmul+0x7a>
   1ba80:	2501      	movs	r5, #1
   1ba82:	9b01      	ldr	r3, [sp, #4]
   1ba84:	4c14      	ldr	r4, [pc, #80]	; (1bad8 <__aeabi_dmul+0x1dc>)
   1ba86:	401d      	ands	r5, r3
   1ba88:	2300      	movs	r3, #0
   1ba8a:	2200      	movs	r2, #0
   1ba8c:	4699      	mov	r9, r3
   1ba8e:	e79c      	b.n	1b9ca <__aeabi_dmul+0xce>
   1ba90:	2400      	movs	r4, #0
   1ba92:	2200      	movs	r2, #0
   1ba94:	2001      	movs	r0, #1
   1ba96:	e76e      	b.n	1b976 <__aeabi_dmul+0x7a>
   1ba98:	4653      	mov	r3, sl
   1ba9a:	2003      	movs	r0, #3
   1ba9c:	e76b      	b.n	1b976 <__aeabi_dmul+0x7a>
   1ba9e:	2300      	movs	r3, #0
   1baa0:	469b      	mov	fp, r3
   1baa2:	3301      	adds	r3, #1
   1baa4:	2704      	movs	r7, #4
   1baa6:	2600      	movs	r6, #0
   1baa8:	9302      	str	r3, [sp, #8]
   1baaa:	e74c      	b.n	1b946 <__aeabi_dmul+0x4a>
   1baac:	2303      	movs	r3, #3
   1baae:	4681      	mov	r9, r0
   1bab0:	270c      	movs	r7, #12
   1bab2:	9302      	str	r3, [sp, #8]
   1bab4:	e747      	b.n	1b946 <__aeabi_dmul+0x4a>
   1bab6:	2280      	movs	r2, #128	; 0x80
   1bab8:	2300      	movs	r3, #0
   1baba:	2500      	movs	r5, #0
   1babc:	0312      	lsls	r2, r2, #12
   1babe:	4699      	mov	r9, r3
   1bac0:	4c05      	ldr	r4, [pc, #20]	; (1bad8 <__aeabi_dmul+0x1dc>)
   1bac2:	e782      	b.n	1b9ca <__aeabi_dmul+0xce>
   1bac4:	465c      	mov	r4, fp
   1bac6:	464b      	mov	r3, r9
   1bac8:	9802      	ldr	r0, [sp, #8]
   1baca:	e76f      	b.n	1b9ac <__aeabi_dmul+0xb0>
   1bacc:	465c      	mov	r4, fp
   1bace:	464b      	mov	r3, r9
   1bad0:	9501      	str	r5, [sp, #4]
   1bad2:	9802      	ldr	r0, [sp, #8]
   1bad4:	e76a      	b.n	1b9ac <__aeabi_dmul+0xb0>
   1bad6:	46c0      	nop			; (mov r8, r8)
   1bad8:	000007ff 	.word	0x000007ff
   1badc:	fffffc01 	.word	0xfffffc01
   1bae0:	0001e73c 	.word	0x0001e73c
   1bae4:	800fffff 	.word	0x800fffff
   1bae8:	fffffc0d 	.word	0xfffffc0d
   1baec:	464a      	mov	r2, r9
   1baee:	4649      	mov	r1, r9
   1baf0:	0c17      	lsrs	r7, r2, #16
   1baf2:	0c1a      	lsrs	r2, r3, #16
   1baf4:	041b      	lsls	r3, r3, #16
   1baf6:	0c1b      	lsrs	r3, r3, #16
   1baf8:	0408      	lsls	r0, r1, #16
   1bafa:	0019      	movs	r1, r3
   1bafc:	0c00      	lsrs	r0, r0, #16
   1bafe:	4341      	muls	r1, r0
   1bb00:	0015      	movs	r5, r2
   1bb02:	4688      	mov	r8, r1
   1bb04:	0019      	movs	r1, r3
   1bb06:	437d      	muls	r5, r7
   1bb08:	4379      	muls	r1, r7
   1bb0a:	9503      	str	r5, [sp, #12]
   1bb0c:	4689      	mov	r9, r1
   1bb0e:	0029      	movs	r1, r5
   1bb10:	0015      	movs	r5, r2
   1bb12:	4345      	muls	r5, r0
   1bb14:	444d      	add	r5, r9
   1bb16:	9502      	str	r5, [sp, #8]
   1bb18:	4645      	mov	r5, r8
   1bb1a:	0c2d      	lsrs	r5, r5, #16
   1bb1c:	46aa      	mov	sl, r5
   1bb1e:	9d02      	ldr	r5, [sp, #8]
   1bb20:	4455      	add	r5, sl
   1bb22:	45a9      	cmp	r9, r5
   1bb24:	d906      	bls.n	1bb34 <__aeabi_dmul+0x238>
   1bb26:	468a      	mov	sl, r1
   1bb28:	2180      	movs	r1, #128	; 0x80
   1bb2a:	0249      	lsls	r1, r1, #9
   1bb2c:	4689      	mov	r9, r1
   1bb2e:	44ca      	add	sl, r9
   1bb30:	4651      	mov	r1, sl
   1bb32:	9103      	str	r1, [sp, #12]
   1bb34:	0c29      	lsrs	r1, r5, #16
   1bb36:	9104      	str	r1, [sp, #16]
   1bb38:	4641      	mov	r1, r8
   1bb3a:	0409      	lsls	r1, r1, #16
   1bb3c:	042d      	lsls	r5, r5, #16
   1bb3e:	0c09      	lsrs	r1, r1, #16
   1bb40:	4688      	mov	r8, r1
   1bb42:	0029      	movs	r1, r5
   1bb44:	0c25      	lsrs	r5, r4, #16
   1bb46:	0424      	lsls	r4, r4, #16
   1bb48:	4441      	add	r1, r8
   1bb4a:	0c24      	lsrs	r4, r4, #16
   1bb4c:	9105      	str	r1, [sp, #20]
   1bb4e:	0021      	movs	r1, r4
   1bb50:	4341      	muls	r1, r0
   1bb52:	4688      	mov	r8, r1
   1bb54:	0021      	movs	r1, r4
   1bb56:	4379      	muls	r1, r7
   1bb58:	468a      	mov	sl, r1
   1bb5a:	4368      	muls	r0, r5
   1bb5c:	4641      	mov	r1, r8
   1bb5e:	4450      	add	r0, sl
   1bb60:	4681      	mov	r9, r0
   1bb62:	0c08      	lsrs	r0, r1, #16
   1bb64:	4448      	add	r0, r9
   1bb66:	436f      	muls	r7, r5
   1bb68:	4582      	cmp	sl, r0
   1bb6a:	d903      	bls.n	1bb74 <__aeabi_dmul+0x278>
   1bb6c:	2180      	movs	r1, #128	; 0x80
   1bb6e:	0249      	lsls	r1, r1, #9
   1bb70:	4689      	mov	r9, r1
   1bb72:	444f      	add	r7, r9
   1bb74:	0c01      	lsrs	r1, r0, #16
   1bb76:	4689      	mov	r9, r1
   1bb78:	0039      	movs	r1, r7
   1bb7a:	4449      	add	r1, r9
   1bb7c:	9102      	str	r1, [sp, #8]
   1bb7e:	4641      	mov	r1, r8
   1bb80:	040f      	lsls	r7, r1, #16
   1bb82:	9904      	ldr	r1, [sp, #16]
   1bb84:	0c3f      	lsrs	r7, r7, #16
   1bb86:	4688      	mov	r8, r1
   1bb88:	0400      	lsls	r0, r0, #16
   1bb8a:	19c0      	adds	r0, r0, r7
   1bb8c:	4480      	add	r8, r0
   1bb8e:	4641      	mov	r1, r8
   1bb90:	9104      	str	r1, [sp, #16]
   1bb92:	4659      	mov	r1, fp
   1bb94:	0c0f      	lsrs	r7, r1, #16
   1bb96:	0409      	lsls	r1, r1, #16
   1bb98:	0c09      	lsrs	r1, r1, #16
   1bb9a:	4688      	mov	r8, r1
   1bb9c:	4359      	muls	r1, r3
   1bb9e:	468a      	mov	sl, r1
   1bba0:	0039      	movs	r1, r7
   1bba2:	4351      	muls	r1, r2
   1bba4:	4689      	mov	r9, r1
   1bba6:	4641      	mov	r1, r8
   1bba8:	434a      	muls	r2, r1
   1bbaa:	4651      	mov	r1, sl
   1bbac:	0c09      	lsrs	r1, r1, #16
   1bbae:	468b      	mov	fp, r1
   1bbb0:	437b      	muls	r3, r7
   1bbb2:	18d2      	adds	r2, r2, r3
   1bbb4:	445a      	add	r2, fp
   1bbb6:	4293      	cmp	r3, r2
   1bbb8:	d903      	bls.n	1bbc2 <__aeabi_dmul+0x2c6>
   1bbba:	2380      	movs	r3, #128	; 0x80
   1bbbc:	025b      	lsls	r3, r3, #9
   1bbbe:	469b      	mov	fp, r3
   1bbc0:	44d9      	add	r9, fp
   1bbc2:	4651      	mov	r1, sl
   1bbc4:	0409      	lsls	r1, r1, #16
   1bbc6:	0c09      	lsrs	r1, r1, #16
   1bbc8:	468a      	mov	sl, r1
   1bbca:	4641      	mov	r1, r8
   1bbcc:	4361      	muls	r1, r4
   1bbce:	437c      	muls	r4, r7
   1bbd0:	0c13      	lsrs	r3, r2, #16
   1bbd2:	0412      	lsls	r2, r2, #16
   1bbd4:	444b      	add	r3, r9
   1bbd6:	4452      	add	r2, sl
   1bbd8:	46a1      	mov	r9, r4
   1bbda:	468a      	mov	sl, r1
   1bbdc:	003c      	movs	r4, r7
   1bbde:	4641      	mov	r1, r8
   1bbe0:	436c      	muls	r4, r5
   1bbe2:	434d      	muls	r5, r1
   1bbe4:	4651      	mov	r1, sl
   1bbe6:	444d      	add	r5, r9
   1bbe8:	0c0f      	lsrs	r7, r1, #16
   1bbea:	197d      	adds	r5, r7, r5
   1bbec:	45a9      	cmp	r9, r5
   1bbee:	d903      	bls.n	1bbf8 <__aeabi_dmul+0x2fc>
   1bbf0:	2180      	movs	r1, #128	; 0x80
   1bbf2:	0249      	lsls	r1, r1, #9
   1bbf4:	4688      	mov	r8, r1
   1bbf6:	4444      	add	r4, r8
   1bbf8:	9f04      	ldr	r7, [sp, #16]
   1bbfa:	9903      	ldr	r1, [sp, #12]
   1bbfc:	46b8      	mov	r8, r7
   1bbfe:	4441      	add	r1, r8
   1bc00:	468b      	mov	fp, r1
   1bc02:	4583      	cmp	fp, r0
   1bc04:	4180      	sbcs	r0, r0
   1bc06:	4241      	negs	r1, r0
   1bc08:	4688      	mov	r8, r1
   1bc0a:	4651      	mov	r1, sl
   1bc0c:	0408      	lsls	r0, r1, #16
   1bc0e:	042f      	lsls	r7, r5, #16
   1bc10:	0c00      	lsrs	r0, r0, #16
   1bc12:	183f      	adds	r7, r7, r0
   1bc14:	4658      	mov	r0, fp
   1bc16:	9902      	ldr	r1, [sp, #8]
   1bc18:	1810      	adds	r0, r2, r0
   1bc1a:	4689      	mov	r9, r1
   1bc1c:	4290      	cmp	r0, r2
   1bc1e:	4192      	sbcs	r2, r2
   1bc20:	444f      	add	r7, r9
   1bc22:	46ba      	mov	sl, r7
   1bc24:	4252      	negs	r2, r2
   1bc26:	4699      	mov	r9, r3
   1bc28:	4693      	mov	fp, r2
   1bc2a:	44c2      	add	sl, r8
   1bc2c:	44d1      	add	r9, sl
   1bc2e:	44cb      	add	fp, r9
   1bc30:	428f      	cmp	r7, r1
   1bc32:	41bf      	sbcs	r7, r7
   1bc34:	45c2      	cmp	sl, r8
   1bc36:	4189      	sbcs	r1, r1
   1bc38:	4599      	cmp	r9, r3
   1bc3a:	419b      	sbcs	r3, r3
   1bc3c:	4593      	cmp	fp, r2
   1bc3e:	4192      	sbcs	r2, r2
   1bc40:	427f      	negs	r7, r7
   1bc42:	4249      	negs	r1, r1
   1bc44:	0c2d      	lsrs	r5, r5, #16
   1bc46:	4252      	negs	r2, r2
   1bc48:	430f      	orrs	r7, r1
   1bc4a:	425b      	negs	r3, r3
   1bc4c:	4313      	orrs	r3, r2
   1bc4e:	197f      	adds	r7, r7, r5
   1bc50:	18ff      	adds	r7, r7, r3
   1bc52:	465b      	mov	r3, fp
   1bc54:	193c      	adds	r4, r7, r4
   1bc56:	0ddb      	lsrs	r3, r3, #23
   1bc58:	9a05      	ldr	r2, [sp, #20]
   1bc5a:	0264      	lsls	r4, r4, #9
   1bc5c:	431c      	orrs	r4, r3
   1bc5e:	0243      	lsls	r3, r0, #9
   1bc60:	4313      	orrs	r3, r2
   1bc62:	1e5d      	subs	r5, r3, #1
   1bc64:	41ab      	sbcs	r3, r5
   1bc66:	465a      	mov	r2, fp
   1bc68:	0dc0      	lsrs	r0, r0, #23
   1bc6a:	4303      	orrs	r3, r0
   1bc6c:	0252      	lsls	r2, r2, #9
   1bc6e:	4313      	orrs	r3, r2
   1bc70:	01e2      	lsls	r2, r4, #7
   1bc72:	d556      	bpl.n	1bd22 <__aeabi_dmul+0x426>
   1bc74:	2001      	movs	r0, #1
   1bc76:	085a      	lsrs	r2, r3, #1
   1bc78:	4003      	ands	r3, r0
   1bc7a:	4313      	orrs	r3, r2
   1bc7c:	07e2      	lsls	r2, r4, #31
   1bc7e:	4313      	orrs	r3, r2
   1bc80:	0864      	lsrs	r4, r4, #1
   1bc82:	485a      	ldr	r0, [pc, #360]	; (1bdec <__aeabi_dmul+0x4f0>)
   1bc84:	4460      	add	r0, ip
   1bc86:	2800      	cmp	r0, #0
   1bc88:	dd4d      	ble.n	1bd26 <__aeabi_dmul+0x42a>
   1bc8a:	075a      	lsls	r2, r3, #29
   1bc8c:	d009      	beq.n	1bca2 <__aeabi_dmul+0x3a6>
   1bc8e:	220f      	movs	r2, #15
   1bc90:	401a      	ands	r2, r3
   1bc92:	2a04      	cmp	r2, #4
   1bc94:	d005      	beq.n	1bca2 <__aeabi_dmul+0x3a6>
   1bc96:	1d1a      	adds	r2, r3, #4
   1bc98:	429a      	cmp	r2, r3
   1bc9a:	419b      	sbcs	r3, r3
   1bc9c:	425b      	negs	r3, r3
   1bc9e:	18e4      	adds	r4, r4, r3
   1bca0:	0013      	movs	r3, r2
   1bca2:	01e2      	lsls	r2, r4, #7
   1bca4:	d504      	bpl.n	1bcb0 <__aeabi_dmul+0x3b4>
   1bca6:	2080      	movs	r0, #128	; 0x80
   1bca8:	4a51      	ldr	r2, [pc, #324]	; (1bdf0 <__aeabi_dmul+0x4f4>)
   1bcaa:	00c0      	lsls	r0, r0, #3
   1bcac:	4014      	ands	r4, r2
   1bcae:	4460      	add	r0, ip
   1bcb0:	4a50      	ldr	r2, [pc, #320]	; (1bdf4 <__aeabi_dmul+0x4f8>)
   1bcb2:	4290      	cmp	r0, r2
   1bcb4:	dd00      	ble.n	1bcb8 <__aeabi_dmul+0x3bc>
   1bcb6:	e6e3      	b.n	1ba80 <__aeabi_dmul+0x184>
   1bcb8:	2501      	movs	r5, #1
   1bcba:	08db      	lsrs	r3, r3, #3
   1bcbc:	0762      	lsls	r2, r4, #29
   1bcbe:	431a      	orrs	r2, r3
   1bcc0:	0264      	lsls	r4, r4, #9
   1bcc2:	9b01      	ldr	r3, [sp, #4]
   1bcc4:	4691      	mov	r9, r2
   1bcc6:	0b22      	lsrs	r2, r4, #12
   1bcc8:	0544      	lsls	r4, r0, #21
   1bcca:	0d64      	lsrs	r4, r4, #21
   1bccc:	401d      	ands	r5, r3
   1bcce:	e67c      	b.n	1b9ca <__aeabi_dmul+0xce>
   1bcd0:	2280      	movs	r2, #128	; 0x80
   1bcd2:	4659      	mov	r1, fp
   1bcd4:	0312      	lsls	r2, r2, #12
   1bcd6:	4211      	tst	r1, r2
   1bcd8:	d008      	beq.n	1bcec <__aeabi_dmul+0x3f0>
   1bcda:	4214      	tst	r4, r2
   1bcdc:	d106      	bne.n	1bcec <__aeabi_dmul+0x3f0>
   1bcde:	4322      	orrs	r2, r4
   1bce0:	0312      	lsls	r2, r2, #12
   1bce2:	0b12      	lsrs	r2, r2, #12
   1bce4:	4645      	mov	r5, r8
   1bce6:	4699      	mov	r9, r3
   1bce8:	4c43      	ldr	r4, [pc, #268]	; (1bdf8 <__aeabi_dmul+0x4fc>)
   1bcea:	e66e      	b.n	1b9ca <__aeabi_dmul+0xce>
   1bcec:	465b      	mov	r3, fp
   1bcee:	431a      	orrs	r2, r3
   1bcf0:	0312      	lsls	r2, r2, #12
   1bcf2:	0b12      	lsrs	r2, r2, #12
   1bcf4:	4c40      	ldr	r4, [pc, #256]	; (1bdf8 <__aeabi_dmul+0x4fc>)
   1bcf6:	e668      	b.n	1b9ca <__aeabi_dmul+0xce>
   1bcf8:	0003      	movs	r3, r0
   1bcfa:	4654      	mov	r4, sl
   1bcfc:	3b28      	subs	r3, #40	; 0x28
   1bcfe:	409c      	lsls	r4, r3
   1bd00:	2300      	movs	r3, #0
   1bd02:	e6b9      	b.n	1ba78 <__aeabi_dmul+0x17c>
   1bd04:	f000 fbfc 	bl	1c500 <__clzsi2>
   1bd08:	3020      	adds	r0, #32
   1bd0a:	e6a6      	b.n	1ba5a <__aeabi_dmul+0x15e>
   1bd0c:	0003      	movs	r3, r0
   1bd0e:	3b28      	subs	r3, #40	; 0x28
   1bd10:	409f      	lsls	r7, r3
   1bd12:	2300      	movs	r3, #0
   1bd14:	46bb      	mov	fp, r7
   1bd16:	4699      	mov	r9, r3
   1bd18:	e68a      	b.n	1ba30 <__aeabi_dmul+0x134>
   1bd1a:	f000 fbf1 	bl	1c500 <__clzsi2>
   1bd1e:	3020      	adds	r0, #32
   1bd20:	e674      	b.n	1ba0c <__aeabi_dmul+0x110>
   1bd22:	46b4      	mov	ip, r6
   1bd24:	e7ad      	b.n	1bc82 <__aeabi_dmul+0x386>
   1bd26:	2501      	movs	r5, #1
   1bd28:	1a2a      	subs	r2, r5, r0
   1bd2a:	2a38      	cmp	r2, #56	; 0x38
   1bd2c:	dd06      	ble.n	1bd3c <__aeabi_dmul+0x440>
   1bd2e:	9b01      	ldr	r3, [sp, #4]
   1bd30:	2400      	movs	r4, #0
   1bd32:	401d      	ands	r5, r3
   1bd34:	2300      	movs	r3, #0
   1bd36:	2200      	movs	r2, #0
   1bd38:	4699      	mov	r9, r3
   1bd3a:	e646      	b.n	1b9ca <__aeabi_dmul+0xce>
   1bd3c:	2a1f      	cmp	r2, #31
   1bd3e:	dc21      	bgt.n	1bd84 <__aeabi_dmul+0x488>
   1bd40:	2520      	movs	r5, #32
   1bd42:	0020      	movs	r0, r4
   1bd44:	1aad      	subs	r5, r5, r2
   1bd46:	001e      	movs	r6, r3
   1bd48:	40ab      	lsls	r3, r5
   1bd4a:	40a8      	lsls	r0, r5
   1bd4c:	40d6      	lsrs	r6, r2
   1bd4e:	1e5d      	subs	r5, r3, #1
   1bd50:	41ab      	sbcs	r3, r5
   1bd52:	4330      	orrs	r0, r6
   1bd54:	4318      	orrs	r0, r3
   1bd56:	40d4      	lsrs	r4, r2
   1bd58:	0743      	lsls	r3, r0, #29
   1bd5a:	d009      	beq.n	1bd70 <__aeabi_dmul+0x474>
   1bd5c:	230f      	movs	r3, #15
   1bd5e:	4003      	ands	r3, r0
   1bd60:	2b04      	cmp	r3, #4
   1bd62:	d005      	beq.n	1bd70 <__aeabi_dmul+0x474>
   1bd64:	0003      	movs	r3, r0
   1bd66:	1d18      	adds	r0, r3, #4
   1bd68:	4298      	cmp	r0, r3
   1bd6a:	419b      	sbcs	r3, r3
   1bd6c:	425b      	negs	r3, r3
   1bd6e:	18e4      	adds	r4, r4, r3
   1bd70:	0223      	lsls	r3, r4, #8
   1bd72:	d521      	bpl.n	1bdb8 <__aeabi_dmul+0x4bc>
   1bd74:	2501      	movs	r5, #1
   1bd76:	9b01      	ldr	r3, [sp, #4]
   1bd78:	2401      	movs	r4, #1
   1bd7a:	401d      	ands	r5, r3
   1bd7c:	2300      	movs	r3, #0
   1bd7e:	2200      	movs	r2, #0
   1bd80:	4699      	mov	r9, r3
   1bd82:	e622      	b.n	1b9ca <__aeabi_dmul+0xce>
   1bd84:	251f      	movs	r5, #31
   1bd86:	0021      	movs	r1, r4
   1bd88:	426d      	negs	r5, r5
   1bd8a:	1a28      	subs	r0, r5, r0
   1bd8c:	40c1      	lsrs	r1, r0
   1bd8e:	0008      	movs	r0, r1
   1bd90:	2a20      	cmp	r2, #32
   1bd92:	d01d      	beq.n	1bdd0 <__aeabi_dmul+0x4d4>
   1bd94:	355f      	adds	r5, #95	; 0x5f
   1bd96:	1aaa      	subs	r2, r5, r2
   1bd98:	4094      	lsls	r4, r2
   1bd9a:	4323      	orrs	r3, r4
   1bd9c:	1e5c      	subs	r4, r3, #1
   1bd9e:	41a3      	sbcs	r3, r4
   1bda0:	2507      	movs	r5, #7
   1bda2:	4303      	orrs	r3, r0
   1bda4:	401d      	ands	r5, r3
   1bda6:	2200      	movs	r2, #0
   1bda8:	2d00      	cmp	r5, #0
   1bdaa:	d009      	beq.n	1bdc0 <__aeabi_dmul+0x4c4>
   1bdac:	220f      	movs	r2, #15
   1bdae:	2400      	movs	r4, #0
   1bdb0:	401a      	ands	r2, r3
   1bdb2:	0018      	movs	r0, r3
   1bdb4:	2a04      	cmp	r2, #4
   1bdb6:	d1d6      	bne.n	1bd66 <__aeabi_dmul+0x46a>
   1bdb8:	0003      	movs	r3, r0
   1bdba:	0765      	lsls	r5, r4, #29
   1bdbc:	0264      	lsls	r4, r4, #9
   1bdbe:	0b22      	lsrs	r2, r4, #12
   1bdc0:	08db      	lsrs	r3, r3, #3
   1bdc2:	432b      	orrs	r3, r5
   1bdc4:	2501      	movs	r5, #1
   1bdc6:	4699      	mov	r9, r3
   1bdc8:	9b01      	ldr	r3, [sp, #4]
   1bdca:	2400      	movs	r4, #0
   1bdcc:	401d      	ands	r5, r3
   1bdce:	e5fc      	b.n	1b9ca <__aeabi_dmul+0xce>
   1bdd0:	2400      	movs	r4, #0
   1bdd2:	e7e2      	b.n	1bd9a <__aeabi_dmul+0x49e>
   1bdd4:	2280      	movs	r2, #128	; 0x80
   1bdd6:	2501      	movs	r5, #1
   1bdd8:	0312      	lsls	r2, r2, #12
   1bdda:	4322      	orrs	r2, r4
   1bddc:	9901      	ldr	r1, [sp, #4]
   1bdde:	0312      	lsls	r2, r2, #12
   1bde0:	0b12      	lsrs	r2, r2, #12
   1bde2:	400d      	ands	r5, r1
   1bde4:	4699      	mov	r9, r3
   1bde6:	4c04      	ldr	r4, [pc, #16]	; (1bdf8 <__aeabi_dmul+0x4fc>)
   1bde8:	e5ef      	b.n	1b9ca <__aeabi_dmul+0xce>
   1bdea:	46c0      	nop			; (mov r8, r8)
   1bdec:	000003ff 	.word	0x000003ff
   1bdf0:	feffffff 	.word	0xfeffffff
   1bdf4:	000007fe 	.word	0x000007fe
   1bdf8:	000007ff 	.word	0x000007ff

0001bdfc <__aeabi_dsub>:
   1bdfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bdfe:	4646      	mov	r6, r8
   1be00:	46d6      	mov	lr, sl
   1be02:	464f      	mov	r7, r9
   1be04:	030c      	lsls	r4, r1, #12
   1be06:	b5c0      	push	{r6, r7, lr}
   1be08:	0fcd      	lsrs	r5, r1, #31
   1be0a:	004e      	lsls	r6, r1, #1
   1be0c:	0a61      	lsrs	r1, r4, #9
   1be0e:	0f44      	lsrs	r4, r0, #29
   1be10:	430c      	orrs	r4, r1
   1be12:	00c1      	lsls	r1, r0, #3
   1be14:	0058      	lsls	r0, r3, #1
   1be16:	0d40      	lsrs	r0, r0, #21
   1be18:	4684      	mov	ip, r0
   1be1a:	468a      	mov	sl, r1
   1be1c:	000f      	movs	r7, r1
   1be1e:	0319      	lsls	r1, r3, #12
   1be20:	0f50      	lsrs	r0, r2, #29
   1be22:	0a49      	lsrs	r1, r1, #9
   1be24:	4301      	orrs	r1, r0
   1be26:	48c6      	ldr	r0, [pc, #792]	; (1c140 <__aeabi_dsub+0x344>)
   1be28:	0d76      	lsrs	r6, r6, #21
   1be2a:	46a8      	mov	r8, r5
   1be2c:	0fdb      	lsrs	r3, r3, #31
   1be2e:	00d2      	lsls	r2, r2, #3
   1be30:	4584      	cmp	ip, r0
   1be32:	d100      	bne.n	1be36 <__aeabi_dsub+0x3a>
   1be34:	e0d8      	b.n	1bfe8 <__aeabi_dsub+0x1ec>
   1be36:	2001      	movs	r0, #1
   1be38:	4043      	eors	r3, r0
   1be3a:	42ab      	cmp	r3, r5
   1be3c:	d100      	bne.n	1be40 <__aeabi_dsub+0x44>
   1be3e:	e0a6      	b.n	1bf8e <__aeabi_dsub+0x192>
   1be40:	4660      	mov	r0, ip
   1be42:	1a35      	subs	r5, r6, r0
   1be44:	2d00      	cmp	r5, #0
   1be46:	dc00      	bgt.n	1be4a <__aeabi_dsub+0x4e>
   1be48:	e105      	b.n	1c056 <__aeabi_dsub+0x25a>
   1be4a:	2800      	cmp	r0, #0
   1be4c:	d110      	bne.n	1be70 <__aeabi_dsub+0x74>
   1be4e:	000b      	movs	r3, r1
   1be50:	4313      	orrs	r3, r2
   1be52:	d100      	bne.n	1be56 <__aeabi_dsub+0x5a>
   1be54:	e0d7      	b.n	1c006 <__aeabi_dsub+0x20a>
   1be56:	1e6b      	subs	r3, r5, #1
   1be58:	2b00      	cmp	r3, #0
   1be5a:	d000      	beq.n	1be5e <__aeabi_dsub+0x62>
   1be5c:	e14b      	b.n	1c0f6 <__aeabi_dsub+0x2fa>
   1be5e:	4653      	mov	r3, sl
   1be60:	1a9f      	subs	r7, r3, r2
   1be62:	45ba      	cmp	sl, r7
   1be64:	4180      	sbcs	r0, r0
   1be66:	1a64      	subs	r4, r4, r1
   1be68:	4240      	negs	r0, r0
   1be6a:	1a24      	subs	r4, r4, r0
   1be6c:	2601      	movs	r6, #1
   1be6e:	e01e      	b.n	1beae <__aeabi_dsub+0xb2>
   1be70:	4bb3      	ldr	r3, [pc, #716]	; (1c140 <__aeabi_dsub+0x344>)
   1be72:	429e      	cmp	r6, r3
   1be74:	d048      	beq.n	1bf08 <__aeabi_dsub+0x10c>
   1be76:	2380      	movs	r3, #128	; 0x80
   1be78:	041b      	lsls	r3, r3, #16
   1be7a:	4319      	orrs	r1, r3
   1be7c:	2d38      	cmp	r5, #56	; 0x38
   1be7e:	dd00      	ble.n	1be82 <__aeabi_dsub+0x86>
   1be80:	e119      	b.n	1c0b6 <__aeabi_dsub+0x2ba>
   1be82:	2d1f      	cmp	r5, #31
   1be84:	dd00      	ble.n	1be88 <__aeabi_dsub+0x8c>
   1be86:	e14c      	b.n	1c122 <__aeabi_dsub+0x326>
   1be88:	2320      	movs	r3, #32
   1be8a:	000f      	movs	r7, r1
   1be8c:	1b5b      	subs	r3, r3, r5
   1be8e:	0010      	movs	r0, r2
   1be90:	409a      	lsls	r2, r3
   1be92:	409f      	lsls	r7, r3
   1be94:	40e8      	lsrs	r0, r5
   1be96:	1e53      	subs	r3, r2, #1
   1be98:	419a      	sbcs	r2, r3
   1be9a:	40e9      	lsrs	r1, r5
   1be9c:	4307      	orrs	r7, r0
   1be9e:	4317      	orrs	r7, r2
   1bea0:	4653      	mov	r3, sl
   1bea2:	1bdf      	subs	r7, r3, r7
   1bea4:	1a61      	subs	r1, r4, r1
   1bea6:	45ba      	cmp	sl, r7
   1bea8:	41a4      	sbcs	r4, r4
   1beaa:	4264      	negs	r4, r4
   1beac:	1b0c      	subs	r4, r1, r4
   1beae:	0223      	lsls	r3, r4, #8
   1beb0:	d400      	bmi.n	1beb4 <__aeabi_dsub+0xb8>
   1beb2:	e0c5      	b.n	1c040 <__aeabi_dsub+0x244>
   1beb4:	0264      	lsls	r4, r4, #9
   1beb6:	0a65      	lsrs	r5, r4, #9
   1beb8:	2d00      	cmp	r5, #0
   1beba:	d100      	bne.n	1bebe <__aeabi_dsub+0xc2>
   1bebc:	e0f6      	b.n	1c0ac <__aeabi_dsub+0x2b0>
   1bebe:	0028      	movs	r0, r5
   1bec0:	f000 fb1e 	bl	1c500 <__clzsi2>
   1bec4:	0003      	movs	r3, r0
   1bec6:	3b08      	subs	r3, #8
   1bec8:	2b1f      	cmp	r3, #31
   1beca:	dd00      	ble.n	1bece <__aeabi_dsub+0xd2>
   1becc:	e0e9      	b.n	1c0a2 <__aeabi_dsub+0x2a6>
   1bece:	2220      	movs	r2, #32
   1bed0:	003c      	movs	r4, r7
   1bed2:	1ad2      	subs	r2, r2, r3
   1bed4:	409d      	lsls	r5, r3
   1bed6:	40d4      	lsrs	r4, r2
   1bed8:	409f      	lsls	r7, r3
   1beda:	4325      	orrs	r5, r4
   1bedc:	429e      	cmp	r6, r3
   1bede:	dd00      	ble.n	1bee2 <__aeabi_dsub+0xe6>
   1bee0:	e0db      	b.n	1c09a <__aeabi_dsub+0x29e>
   1bee2:	1b9e      	subs	r6, r3, r6
   1bee4:	1c73      	adds	r3, r6, #1
   1bee6:	2b1f      	cmp	r3, #31
   1bee8:	dd00      	ble.n	1beec <__aeabi_dsub+0xf0>
   1beea:	e10a      	b.n	1c102 <__aeabi_dsub+0x306>
   1beec:	2220      	movs	r2, #32
   1beee:	0038      	movs	r0, r7
   1bef0:	1ad2      	subs	r2, r2, r3
   1bef2:	0029      	movs	r1, r5
   1bef4:	4097      	lsls	r7, r2
   1bef6:	002c      	movs	r4, r5
   1bef8:	4091      	lsls	r1, r2
   1befa:	40d8      	lsrs	r0, r3
   1befc:	1e7a      	subs	r2, r7, #1
   1befe:	4197      	sbcs	r7, r2
   1bf00:	40dc      	lsrs	r4, r3
   1bf02:	2600      	movs	r6, #0
   1bf04:	4301      	orrs	r1, r0
   1bf06:	430f      	orrs	r7, r1
   1bf08:	077b      	lsls	r3, r7, #29
   1bf0a:	d009      	beq.n	1bf20 <__aeabi_dsub+0x124>
   1bf0c:	230f      	movs	r3, #15
   1bf0e:	403b      	ands	r3, r7
   1bf10:	2b04      	cmp	r3, #4
   1bf12:	d005      	beq.n	1bf20 <__aeabi_dsub+0x124>
   1bf14:	1d3b      	adds	r3, r7, #4
   1bf16:	42bb      	cmp	r3, r7
   1bf18:	41bf      	sbcs	r7, r7
   1bf1a:	427f      	negs	r7, r7
   1bf1c:	19e4      	adds	r4, r4, r7
   1bf1e:	001f      	movs	r7, r3
   1bf20:	0223      	lsls	r3, r4, #8
   1bf22:	d525      	bpl.n	1bf70 <__aeabi_dsub+0x174>
   1bf24:	4b86      	ldr	r3, [pc, #536]	; (1c140 <__aeabi_dsub+0x344>)
   1bf26:	3601      	adds	r6, #1
   1bf28:	429e      	cmp	r6, r3
   1bf2a:	d100      	bne.n	1bf2e <__aeabi_dsub+0x132>
   1bf2c:	e0af      	b.n	1c08e <__aeabi_dsub+0x292>
   1bf2e:	4b85      	ldr	r3, [pc, #532]	; (1c144 <__aeabi_dsub+0x348>)
   1bf30:	2501      	movs	r5, #1
   1bf32:	401c      	ands	r4, r3
   1bf34:	4643      	mov	r3, r8
   1bf36:	0762      	lsls	r2, r4, #29
   1bf38:	08ff      	lsrs	r7, r7, #3
   1bf3a:	0264      	lsls	r4, r4, #9
   1bf3c:	0576      	lsls	r6, r6, #21
   1bf3e:	4317      	orrs	r7, r2
   1bf40:	0b24      	lsrs	r4, r4, #12
   1bf42:	0d76      	lsrs	r6, r6, #21
   1bf44:	401d      	ands	r5, r3
   1bf46:	2100      	movs	r1, #0
   1bf48:	0324      	lsls	r4, r4, #12
   1bf4a:	0b23      	lsrs	r3, r4, #12
   1bf4c:	0d0c      	lsrs	r4, r1, #20
   1bf4e:	4a7e      	ldr	r2, [pc, #504]	; (1c148 <__aeabi_dsub+0x34c>)
   1bf50:	0524      	lsls	r4, r4, #20
   1bf52:	431c      	orrs	r4, r3
   1bf54:	4014      	ands	r4, r2
   1bf56:	0533      	lsls	r3, r6, #20
   1bf58:	4323      	orrs	r3, r4
   1bf5a:	005b      	lsls	r3, r3, #1
   1bf5c:	07ed      	lsls	r5, r5, #31
   1bf5e:	085b      	lsrs	r3, r3, #1
   1bf60:	432b      	orrs	r3, r5
   1bf62:	0038      	movs	r0, r7
   1bf64:	0019      	movs	r1, r3
   1bf66:	bc1c      	pop	{r2, r3, r4}
   1bf68:	4690      	mov	r8, r2
   1bf6a:	4699      	mov	r9, r3
   1bf6c:	46a2      	mov	sl, r4
   1bf6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bf70:	2501      	movs	r5, #1
   1bf72:	4643      	mov	r3, r8
   1bf74:	0762      	lsls	r2, r4, #29
   1bf76:	08ff      	lsrs	r7, r7, #3
   1bf78:	4317      	orrs	r7, r2
   1bf7a:	08e4      	lsrs	r4, r4, #3
   1bf7c:	401d      	ands	r5, r3
   1bf7e:	4b70      	ldr	r3, [pc, #448]	; (1c140 <__aeabi_dsub+0x344>)
   1bf80:	429e      	cmp	r6, r3
   1bf82:	d036      	beq.n	1bff2 <__aeabi_dsub+0x1f6>
   1bf84:	0324      	lsls	r4, r4, #12
   1bf86:	0576      	lsls	r6, r6, #21
   1bf88:	0b24      	lsrs	r4, r4, #12
   1bf8a:	0d76      	lsrs	r6, r6, #21
   1bf8c:	e7db      	b.n	1bf46 <__aeabi_dsub+0x14a>
   1bf8e:	4663      	mov	r3, ip
   1bf90:	1af3      	subs	r3, r6, r3
   1bf92:	2b00      	cmp	r3, #0
   1bf94:	dc00      	bgt.n	1bf98 <__aeabi_dsub+0x19c>
   1bf96:	e094      	b.n	1c0c2 <__aeabi_dsub+0x2c6>
   1bf98:	4660      	mov	r0, ip
   1bf9a:	2800      	cmp	r0, #0
   1bf9c:	d035      	beq.n	1c00a <__aeabi_dsub+0x20e>
   1bf9e:	4868      	ldr	r0, [pc, #416]	; (1c140 <__aeabi_dsub+0x344>)
   1bfa0:	4286      	cmp	r6, r0
   1bfa2:	d0b1      	beq.n	1bf08 <__aeabi_dsub+0x10c>
   1bfa4:	2780      	movs	r7, #128	; 0x80
   1bfa6:	043f      	lsls	r7, r7, #16
   1bfa8:	4339      	orrs	r1, r7
   1bfaa:	2b38      	cmp	r3, #56	; 0x38
   1bfac:	dc00      	bgt.n	1bfb0 <__aeabi_dsub+0x1b4>
   1bfae:	e0fd      	b.n	1c1ac <__aeabi_dsub+0x3b0>
   1bfb0:	430a      	orrs	r2, r1
   1bfb2:	0017      	movs	r7, r2
   1bfb4:	2100      	movs	r1, #0
   1bfb6:	1e7a      	subs	r2, r7, #1
   1bfb8:	4197      	sbcs	r7, r2
   1bfba:	4457      	add	r7, sl
   1bfbc:	4557      	cmp	r7, sl
   1bfbe:	4180      	sbcs	r0, r0
   1bfc0:	1909      	adds	r1, r1, r4
   1bfc2:	4244      	negs	r4, r0
   1bfc4:	190c      	adds	r4, r1, r4
   1bfc6:	0223      	lsls	r3, r4, #8
   1bfc8:	d53a      	bpl.n	1c040 <__aeabi_dsub+0x244>
   1bfca:	4b5d      	ldr	r3, [pc, #372]	; (1c140 <__aeabi_dsub+0x344>)
   1bfcc:	3601      	adds	r6, #1
   1bfce:	429e      	cmp	r6, r3
   1bfd0:	d100      	bne.n	1bfd4 <__aeabi_dsub+0x1d8>
   1bfd2:	e14b      	b.n	1c26c <__aeabi_dsub+0x470>
   1bfd4:	2201      	movs	r2, #1
   1bfd6:	4b5b      	ldr	r3, [pc, #364]	; (1c144 <__aeabi_dsub+0x348>)
   1bfd8:	401c      	ands	r4, r3
   1bfda:	087b      	lsrs	r3, r7, #1
   1bfdc:	4017      	ands	r7, r2
   1bfde:	431f      	orrs	r7, r3
   1bfe0:	07e2      	lsls	r2, r4, #31
   1bfe2:	4317      	orrs	r7, r2
   1bfe4:	0864      	lsrs	r4, r4, #1
   1bfe6:	e78f      	b.n	1bf08 <__aeabi_dsub+0x10c>
   1bfe8:	0008      	movs	r0, r1
   1bfea:	4310      	orrs	r0, r2
   1bfec:	d000      	beq.n	1bff0 <__aeabi_dsub+0x1f4>
   1bfee:	e724      	b.n	1be3a <__aeabi_dsub+0x3e>
   1bff0:	e721      	b.n	1be36 <__aeabi_dsub+0x3a>
   1bff2:	0023      	movs	r3, r4
   1bff4:	433b      	orrs	r3, r7
   1bff6:	d100      	bne.n	1bffa <__aeabi_dsub+0x1fe>
   1bff8:	e1b9      	b.n	1c36e <__aeabi_dsub+0x572>
   1bffa:	2280      	movs	r2, #128	; 0x80
   1bffc:	0312      	lsls	r2, r2, #12
   1bffe:	4314      	orrs	r4, r2
   1c000:	0324      	lsls	r4, r4, #12
   1c002:	0b24      	lsrs	r4, r4, #12
   1c004:	e79f      	b.n	1bf46 <__aeabi_dsub+0x14a>
   1c006:	002e      	movs	r6, r5
   1c008:	e77e      	b.n	1bf08 <__aeabi_dsub+0x10c>
   1c00a:	0008      	movs	r0, r1
   1c00c:	4310      	orrs	r0, r2
   1c00e:	d100      	bne.n	1c012 <__aeabi_dsub+0x216>
   1c010:	e0ca      	b.n	1c1a8 <__aeabi_dsub+0x3ac>
   1c012:	1e58      	subs	r0, r3, #1
   1c014:	4684      	mov	ip, r0
   1c016:	2800      	cmp	r0, #0
   1c018:	d000      	beq.n	1c01c <__aeabi_dsub+0x220>
   1c01a:	e0e7      	b.n	1c1ec <__aeabi_dsub+0x3f0>
   1c01c:	4452      	add	r2, sl
   1c01e:	4552      	cmp	r2, sl
   1c020:	4180      	sbcs	r0, r0
   1c022:	1864      	adds	r4, r4, r1
   1c024:	4240      	negs	r0, r0
   1c026:	1824      	adds	r4, r4, r0
   1c028:	0017      	movs	r7, r2
   1c02a:	2601      	movs	r6, #1
   1c02c:	0223      	lsls	r3, r4, #8
   1c02e:	d507      	bpl.n	1c040 <__aeabi_dsub+0x244>
   1c030:	2602      	movs	r6, #2
   1c032:	e7cf      	b.n	1bfd4 <__aeabi_dsub+0x1d8>
   1c034:	4664      	mov	r4, ip
   1c036:	432c      	orrs	r4, r5
   1c038:	d100      	bne.n	1c03c <__aeabi_dsub+0x240>
   1c03a:	e1b3      	b.n	1c3a4 <__aeabi_dsub+0x5a8>
   1c03c:	002c      	movs	r4, r5
   1c03e:	4667      	mov	r7, ip
   1c040:	077b      	lsls	r3, r7, #29
   1c042:	d000      	beq.n	1c046 <__aeabi_dsub+0x24a>
   1c044:	e762      	b.n	1bf0c <__aeabi_dsub+0x110>
   1c046:	0763      	lsls	r3, r4, #29
   1c048:	08ff      	lsrs	r7, r7, #3
   1c04a:	431f      	orrs	r7, r3
   1c04c:	2501      	movs	r5, #1
   1c04e:	4643      	mov	r3, r8
   1c050:	08e4      	lsrs	r4, r4, #3
   1c052:	401d      	ands	r5, r3
   1c054:	e793      	b.n	1bf7e <__aeabi_dsub+0x182>
   1c056:	2d00      	cmp	r5, #0
   1c058:	d178      	bne.n	1c14c <__aeabi_dsub+0x350>
   1c05a:	1c75      	adds	r5, r6, #1
   1c05c:	056d      	lsls	r5, r5, #21
   1c05e:	0d6d      	lsrs	r5, r5, #21
   1c060:	2d01      	cmp	r5, #1
   1c062:	dc00      	bgt.n	1c066 <__aeabi_dsub+0x26a>
   1c064:	e0f2      	b.n	1c24c <__aeabi_dsub+0x450>
   1c066:	4650      	mov	r0, sl
   1c068:	1a80      	subs	r0, r0, r2
   1c06a:	4582      	cmp	sl, r0
   1c06c:	41bf      	sbcs	r7, r7
   1c06e:	1a65      	subs	r5, r4, r1
   1c070:	427f      	negs	r7, r7
   1c072:	1bed      	subs	r5, r5, r7
   1c074:	4684      	mov	ip, r0
   1c076:	0228      	lsls	r0, r5, #8
   1c078:	d400      	bmi.n	1c07c <__aeabi_dsub+0x280>
   1c07a:	e08c      	b.n	1c196 <__aeabi_dsub+0x39a>
   1c07c:	4650      	mov	r0, sl
   1c07e:	1a17      	subs	r7, r2, r0
   1c080:	42ba      	cmp	r2, r7
   1c082:	4192      	sbcs	r2, r2
   1c084:	1b0c      	subs	r4, r1, r4
   1c086:	4255      	negs	r5, r2
   1c088:	1b65      	subs	r5, r4, r5
   1c08a:	4698      	mov	r8, r3
   1c08c:	e714      	b.n	1beb8 <__aeabi_dsub+0xbc>
   1c08e:	2501      	movs	r5, #1
   1c090:	4643      	mov	r3, r8
   1c092:	2400      	movs	r4, #0
   1c094:	401d      	ands	r5, r3
   1c096:	2700      	movs	r7, #0
   1c098:	e755      	b.n	1bf46 <__aeabi_dsub+0x14a>
   1c09a:	4c2a      	ldr	r4, [pc, #168]	; (1c144 <__aeabi_dsub+0x348>)
   1c09c:	1af6      	subs	r6, r6, r3
   1c09e:	402c      	ands	r4, r5
   1c0a0:	e732      	b.n	1bf08 <__aeabi_dsub+0x10c>
   1c0a2:	003d      	movs	r5, r7
   1c0a4:	3828      	subs	r0, #40	; 0x28
   1c0a6:	4085      	lsls	r5, r0
   1c0a8:	2700      	movs	r7, #0
   1c0aa:	e717      	b.n	1bedc <__aeabi_dsub+0xe0>
   1c0ac:	0038      	movs	r0, r7
   1c0ae:	f000 fa27 	bl	1c500 <__clzsi2>
   1c0b2:	3020      	adds	r0, #32
   1c0b4:	e706      	b.n	1bec4 <__aeabi_dsub+0xc8>
   1c0b6:	430a      	orrs	r2, r1
   1c0b8:	0017      	movs	r7, r2
   1c0ba:	2100      	movs	r1, #0
   1c0bc:	1e7a      	subs	r2, r7, #1
   1c0be:	4197      	sbcs	r7, r2
   1c0c0:	e6ee      	b.n	1bea0 <__aeabi_dsub+0xa4>
   1c0c2:	2b00      	cmp	r3, #0
   1c0c4:	d000      	beq.n	1c0c8 <__aeabi_dsub+0x2cc>
   1c0c6:	e0e5      	b.n	1c294 <__aeabi_dsub+0x498>
   1c0c8:	1c73      	adds	r3, r6, #1
   1c0ca:	469c      	mov	ip, r3
   1c0cc:	055b      	lsls	r3, r3, #21
   1c0ce:	0d5b      	lsrs	r3, r3, #21
   1c0d0:	2b01      	cmp	r3, #1
   1c0d2:	dc00      	bgt.n	1c0d6 <__aeabi_dsub+0x2da>
   1c0d4:	e09f      	b.n	1c216 <__aeabi_dsub+0x41a>
   1c0d6:	4b1a      	ldr	r3, [pc, #104]	; (1c140 <__aeabi_dsub+0x344>)
   1c0d8:	459c      	cmp	ip, r3
   1c0da:	d100      	bne.n	1c0de <__aeabi_dsub+0x2e2>
   1c0dc:	e0c5      	b.n	1c26a <__aeabi_dsub+0x46e>
   1c0de:	4452      	add	r2, sl
   1c0e0:	4552      	cmp	r2, sl
   1c0e2:	4180      	sbcs	r0, r0
   1c0e4:	1864      	adds	r4, r4, r1
   1c0e6:	4240      	negs	r0, r0
   1c0e8:	1824      	adds	r4, r4, r0
   1c0ea:	07e7      	lsls	r7, r4, #31
   1c0ec:	0852      	lsrs	r2, r2, #1
   1c0ee:	4317      	orrs	r7, r2
   1c0f0:	0864      	lsrs	r4, r4, #1
   1c0f2:	4666      	mov	r6, ip
   1c0f4:	e708      	b.n	1bf08 <__aeabi_dsub+0x10c>
   1c0f6:	4812      	ldr	r0, [pc, #72]	; (1c140 <__aeabi_dsub+0x344>)
   1c0f8:	4285      	cmp	r5, r0
   1c0fa:	d100      	bne.n	1c0fe <__aeabi_dsub+0x302>
   1c0fc:	e085      	b.n	1c20a <__aeabi_dsub+0x40e>
   1c0fe:	001d      	movs	r5, r3
   1c100:	e6bc      	b.n	1be7c <__aeabi_dsub+0x80>
   1c102:	0029      	movs	r1, r5
   1c104:	3e1f      	subs	r6, #31
   1c106:	40f1      	lsrs	r1, r6
   1c108:	2b20      	cmp	r3, #32
   1c10a:	d100      	bne.n	1c10e <__aeabi_dsub+0x312>
   1c10c:	e07f      	b.n	1c20e <__aeabi_dsub+0x412>
   1c10e:	2240      	movs	r2, #64	; 0x40
   1c110:	1ad3      	subs	r3, r2, r3
   1c112:	409d      	lsls	r5, r3
   1c114:	432f      	orrs	r7, r5
   1c116:	1e7d      	subs	r5, r7, #1
   1c118:	41af      	sbcs	r7, r5
   1c11a:	2400      	movs	r4, #0
   1c11c:	430f      	orrs	r7, r1
   1c11e:	2600      	movs	r6, #0
   1c120:	e78e      	b.n	1c040 <__aeabi_dsub+0x244>
   1c122:	002b      	movs	r3, r5
   1c124:	000f      	movs	r7, r1
   1c126:	3b20      	subs	r3, #32
   1c128:	40df      	lsrs	r7, r3
   1c12a:	2d20      	cmp	r5, #32
   1c12c:	d071      	beq.n	1c212 <__aeabi_dsub+0x416>
   1c12e:	2340      	movs	r3, #64	; 0x40
   1c130:	1b5d      	subs	r5, r3, r5
   1c132:	40a9      	lsls	r1, r5
   1c134:	430a      	orrs	r2, r1
   1c136:	1e51      	subs	r1, r2, #1
   1c138:	418a      	sbcs	r2, r1
   1c13a:	2100      	movs	r1, #0
   1c13c:	4317      	orrs	r7, r2
   1c13e:	e6af      	b.n	1bea0 <__aeabi_dsub+0xa4>
   1c140:	000007ff 	.word	0x000007ff
   1c144:	ff7fffff 	.word	0xff7fffff
   1c148:	800fffff 	.word	0x800fffff
   1c14c:	2e00      	cmp	r6, #0
   1c14e:	d03e      	beq.n	1c1ce <__aeabi_dsub+0x3d2>
   1c150:	4eb3      	ldr	r6, [pc, #716]	; (1c420 <__aeabi_dsub+0x624>)
   1c152:	45b4      	cmp	ip, r6
   1c154:	d045      	beq.n	1c1e2 <__aeabi_dsub+0x3e6>
   1c156:	2680      	movs	r6, #128	; 0x80
   1c158:	0436      	lsls	r6, r6, #16
   1c15a:	426d      	negs	r5, r5
   1c15c:	4334      	orrs	r4, r6
   1c15e:	2d38      	cmp	r5, #56	; 0x38
   1c160:	dd00      	ble.n	1c164 <__aeabi_dsub+0x368>
   1c162:	e0a8      	b.n	1c2b6 <__aeabi_dsub+0x4ba>
   1c164:	2d1f      	cmp	r5, #31
   1c166:	dd00      	ble.n	1c16a <__aeabi_dsub+0x36e>
   1c168:	e11f      	b.n	1c3aa <__aeabi_dsub+0x5ae>
   1c16a:	2620      	movs	r6, #32
   1c16c:	0027      	movs	r7, r4
   1c16e:	4650      	mov	r0, sl
   1c170:	1b76      	subs	r6, r6, r5
   1c172:	40b7      	lsls	r7, r6
   1c174:	40e8      	lsrs	r0, r5
   1c176:	4307      	orrs	r7, r0
   1c178:	4650      	mov	r0, sl
   1c17a:	40b0      	lsls	r0, r6
   1c17c:	1e46      	subs	r6, r0, #1
   1c17e:	41b0      	sbcs	r0, r6
   1c180:	40ec      	lsrs	r4, r5
   1c182:	4338      	orrs	r0, r7
   1c184:	1a17      	subs	r7, r2, r0
   1c186:	42ba      	cmp	r2, r7
   1c188:	4192      	sbcs	r2, r2
   1c18a:	1b0c      	subs	r4, r1, r4
   1c18c:	4252      	negs	r2, r2
   1c18e:	1aa4      	subs	r4, r4, r2
   1c190:	4666      	mov	r6, ip
   1c192:	4698      	mov	r8, r3
   1c194:	e68b      	b.n	1beae <__aeabi_dsub+0xb2>
   1c196:	4664      	mov	r4, ip
   1c198:	4667      	mov	r7, ip
   1c19a:	432c      	orrs	r4, r5
   1c19c:	d000      	beq.n	1c1a0 <__aeabi_dsub+0x3a4>
   1c19e:	e68b      	b.n	1beb8 <__aeabi_dsub+0xbc>
   1c1a0:	2500      	movs	r5, #0
   1c1a2:	2600      	movs	r6, #0
   1c1a4:	2700      	movs	r7, #0
   1c1a6:	e6ea      	b.n	1bf7e <__aeabi_dsub+0x182>
   1c1a8:	001e      	movs	r6, r3
   1c1aa:	e6ad      	b.n	1bf08 <__aeabi_dsub+0x10c>
   1c1ac:	2b1f      	cmp	r3, #31
   1c1ae:	dc60      	bgt.n	1c272 <__aeabi_dsub+0x476>
   1c1b0:	2720      	movs	r7, #32
   1c1b2:	1af8      	subs	r0, r7, r3
   1c1b4:	000f      	movs	r7, r1
   1c1b6:	4684      	mov	ip, r0
   1c1b8:	4087      	lsls	r7, r0
   1c1ba:	0010      	movs	r0, r2
   1c1bc:	40d8      	lsrs	r0, r3
   1c1be:	4307      	orrs	r7, r0
   1c1c0:	4660      	mov	r0, ip
   1c1c2:	4082      	lsls	r2, r0
   1c1c4:	1e50      	subs	r0, r2, #1
   1c1c6:	4182      	sbcs	r2, r0
   1c1c8:	40d9      	lsrs	r1, r3
   1c1ca:	4317      	orrs	r7, r2
   1c1cc:	e6f5      	b.n	1bfba <__aeabi_dsub+0x1be>
   1c1ce:	0026      	movs	r6, r4
   1c1d0:	4650      	mov	r0, sl
   1c1d2:	4306      	orrs	r6, r0
   1c1d4:	d005      	beq.n	1c1e2 <__aeabi_dsub+0x3e6>
   1c1d6:	43ed      	mvns	r5, r5
   1c1d8:	2d00      	cmp	r5, #0
   1c1da:	d0d3      	beq.n	1c184 <__aeabi_dsub+0x388>
   1c1dc:	4e90      	ldr	r6, [pc, #576]	; (1c420 <__aeabi_dsub+0x624>)
   1c1de:	45b4      	cmp	ip, r6
   1c1e0:	d1bd      	bne.n	1c15e <__aeabi_dsub+0x362>
   1c1e2:	000c      	movs	r4, r1
   1c1e4:	0017      	movs	r7, r2
   1c1e6:	4666      	mov	r6, ip
   1c1e8:	4698      	mov	r8, r3
   1c1ea:	e68d      	b.n	1bf08 <__aeabi_dsub+0x10c>
   1c1ec:	488c      	ldr	r0, [pc, #560]	; (1c420 <__aeabi_dsub+0x624>)
   1c1ee:	4283      	cmp	r3, r0
   1c1f0:	d00b      	beq.n	1c20a <__aeabi_dsub+0x40e>
   1c1f2:	4663      	mov	r3, ip
   1c1f4:	e6d9      	b.n	1bfaa <__aeabi_dsub+0x1ae>
   1c1f6:	2d00      	cmp	r5, #0
   1c1f8:	d000      	beq.n	1c1fc <__aeabi_dsub+0x400>
   1c1fa:	e096      	b.n	1c32a <__aeabi_dsub+0x52e>
   1c1fc:	0008      	movs	r0, r1
   1c1fe:	4310      	orrs	r0, r2
   1c200:	d100      	bne.n	1c204 <__aeabi_dsub+0x408>
   1c202:	e0e2      	b.n	1c3ca <__aeabi_dsub+0x5ce>
   1c204:	000c      	movs	r4, r1
   1c206:	0017      	movs	r7, r2
   1c208:	4698      	mov	r8, r3
   1c20a:	4e85      	ldr	r6, [pc, #532]	; (1c420 <__aeabi_dsub+0x624>)
   1c20c:	e67c      	b.n	1bf08 <__aeabi_dsub+0x10c>
   1c20e:	2500      	movs	r5, #0
   1c210:	e780      	b.n	1c114 <__aeabi_dsub+0x318>
   1c212:	2100      	movs	r1, #0
   1c214:	e78e      	b.n	1c134 <__aeabi_dsub+0x338>
   1c216:	0023      	movs	r3, r4
   1c218:	4650      	mov	r0, sl
   1c21a:	4303      	orrs	r3, r0
   1c21c:	2e00      	cmp	r6, #0
   1c21e:	d000      	beq.n	1c222 <__aeabi_dsub+0x426>
   1c220:	e0a8      	b.n	1c374 <__aeabi_dsub+0x578>
   1c222:	2b00      	cmp	r3, #0
   1c224:	d100      	bne.n	1c228 <__aeabi_dsub+0x42c>
   1c226:	e0de      	b.n	1c3e6 <__aeabi_dsub+0x5ea>
   1c228:	000b      	movs	r3, r1
   1c22a:	4313      	orrs	r3, r2
   1c22c:	d100      	bne.n	1c230 <__aeabi_dsub+0x434>
   1c22e:	e66b      	b.n	1bf08 <__aeabi_dsub+0x10c>
   1c230:	4452      	add	r2, sl
   1c232:	4552      	cmp	r2, sl
   1c234:	4180      	sbcs	r0, r0
   1c236:	1864      	adds	r4, r4, r1
   1c238:	4240      	negs	r0, r0
   1c23a:	1824      	adds	r4, r4, r0
   1c23c:	0017      	movs	r7, r2
   1c23e:	0223      	lsls	r3, r4, #8
   1c240:	d400      	bmi.n	1c244 <__aeabi_dsub+0x448>
   1c242:	e6fd      	b.n	1c040 <__aeabi_dsub+0x244>
   1c244:	4b77      	ldr	r3, [pc, #476]	; (1c424 <__aeabi_dsub+0x628>)
   1c246:	4666      	mov	r6, ip
   1c248:	401c      	ands	r4, r3
   1c24a:	e65d      	b.n	1bf08 <__aeabi_dsub+0x10c>
   1c24c:	0025      	movs	r5, r4
   1c24e:	4650      	mov	r0, sl
   1c250:	4305      	orrs	r5, r0
   1c252:	2e00      	cmp	r6, #0
   1c254:	d1cf      	bne.n	1c1f6 <__aeabi_dsub+0x3fa>
   1c256:	2d00      	cmp	r5, #0
   1c258:	d14f      	bne.n	1c2fa <__aeabi_dsub+0x4fe>
   1c25a:	000c      	movs	r4, r1
   1c25c:	4314      	orrs	r4, r2
   1c25e:	d100      	bne.n	1c262 <__aeabi_dsub+0x466>
   1c260:	e0a0      	b.n	1c3a4 <__aeabi_dsub+0x5a8>
   1c262:	000c      	movs	r4, r1
   1c264:	0017      	movs	r7, r2
   1c266:	4698      	mov	r8, r3
   1c268:	e64e      	b.n	1bf08 <__aeabi_dsub+0x10c>
   1c26a:	4666      	mov	r6, ip
   1c26c:	2400      	movs	r4, #0
   1c26e:	2700      	movs	r7, #0
   1c270:	e685      	b.n	1bf7e <__aeabi_dsub+0x182>
   1c272:	001f      	movs	r7, r3
   1c274:	0008      	movs	r0, r1
   1c276:	3f20      	subs	r7, #32
   1c278:	40f8      	lsrs	r0, r7
   1c27a:	0007      	movs	r7, r0
   1c27c:	2b20      	cmp	r3, #32
   1c27e:	d100      	bne.n	1c282 <__aeabi_dsub+0x486>
   1c280:	e08e      	b.n	1c3a0 <__aeabi_dsub+0x5a4>
   1c282:	2040      	movs	r0, #64	; 0x40
   1c284:	1ac3      	subs	r3, r0, r3
   1c286:	4099      	lsls	r1, r3
   1c288:	430a      	orrs	r2, r1
   1c28a:	1e51      	subs	r1, r2, #1
   1c28c:	418a      	sbcs	r2, r1
   1c28e:	2100      	movs	r1, #0
   1c290:	4317      	orrs	r7, r2
   1c292:	e692      	b.n	1bfba <__aeabi_dsub+0x1be>
   1c294:	2e00      	cmp	r6, #0
   1c296:	d114      	bne.n	1c2c2 <__aeabi_dsub+0x4c6>
   1c298:	0026      	movs	r6, r4
   1c29a:	4650      	mov	r0, sl
   1c29c:	4306      	orrs	r6, r0
   1c29e:	d062      	beq.n	1c366 <__aeabi_dsub+0x56a>
   1c2a0:	43db      	mvns	r3, r3
   1c2a2:	2b00      	cmp	r3, #0
   1c2a4:	d15c      	bne.n	1c360 <__aeabi_dsub+0x564>
   1c2a6:	1887      	adds	r7, r0, r2
   1c2a8:	4297      	cmp	r7, r2
   1c2aa:	4192      	sbcs	r2, r2
   1c2ac:	1864      	adds	r4, r4, r1
   1c2ae:	4252      	negs	r2, r2
   1c2b0:	18a4      	adds	r4, r4, r2
   1c2b2:	4666      	mov	r6, ip
   1c2b4:	e687      	b.n	1bfc6 <__aeabi_dsub+0x1ca>
   1c2b6:	4650      	mov	r0, sl
   1c2b8:	4320      	orrs	r0, r4
   1c2ba:	1e44      	subs	r4, r0, #1
   1c2bc:	41a0      	sbcs	r0, r4
   1c2be:	2400      	movs	r4, #0
   1c2c0:	e760      	b.n	1c184 <__aeabi_dsub+0x388>
   1c2c2:	4e57      	ldr	r6, [pc, #348]	; (1c420 <__aeabi_dsub+0x624>)
   1c2c4:	45b4      	cmp	ip, r6
   1c2c6:	d04e      	beq.n	1c366 <__aeabi_dsub+0x56a>
   1c2c8:	2680      	movs	r6, #128	; 0x80
   1c2ca:	0436      	lsls	r6, r6, #16
   1c2cc:	425b      	negs	r3, r3
   1c2ce:	4334      	orrs	r4, r6
   1c2d0:	2b38      	cmp	r3, #56	; 0x38
   1c2d2:	dd00      	ble.n	1c2d6 <__aeabi_dsub+0x4da>
   1c2d4:	e07f      	b.n	1c3d6 <__aeabi_dsub+0x5da>
   1c2d6:	2b1f      	cmp	r3, #31
   1c2d8:	dd00      	ble.n	1c2dc <__aeabi_dsub+0x4e0>
   1c2da:	e08b      	b.n	1c3f4 <__aeabi_dsub+0x5f8>
   1c2dc:	2620      	movs	r6, #32
   1c2de:	0027      	movs	r7, r4
   1c2e0:	4650      	mov	r0, sl
   1c2e2:	1af6      	subs	r6, r6, r3
   1c2e4:	40b7      	lsls	r7, r6
   1c2e6:	40d8      	lsrs	r0, r3
   1c2e8:	4307      	orrs	r7, r0
   1c2ea:	4650      	mov	r0, sl
   1c2ec:	40b0      	lsls	r0, r6
   1c2ee:	1e46      	subs	r6, r0, #1
   1c2f0:	41b0      	sbcs	r0, r6
   1c2f2:	4307      	orrs	r7, r0
   1c2f4:	40dc      	lsrs	r4, r3
   1c2f6:	18bf      	adds	r7, r7, r2
   1c2f8:	e7d6      	b.n	1c2a8 <__aeabi_dsub+0x4ac>
   1c2fa:	000d      	movs	r5, r1
   1c2fc:	4315      	orrs	r5, r2
   1c2fe:	d100      	bne.n	1c302 <__aeabi_dsub+0x506>
   1c300:	e602      	b.n	1bf08 <__aeabi_dsub+0x10c>
   1c302:	4650      	mov	r0, sl
   1c304:	1a80      	subs	r0, r0, r2
   1c306:	4582      	cmp	sl, r0
   1c308:	41bf      	sbcs	r7, r7
   1c30a:	1a65      	subs	r5, r4, r1
   1c30c:	427f      	negs	r7, r7
   1c30e:	1bed      	subs	r5, r5, r7
   1c310:	4684      	mov	ip, r0
   1c312:	0228      	lsls	r0, r5, #8
   1c314:	d400      	bmi.n	1c318 <__aeabi_dsub+0x51c>
   1c316:	e68d      	b.n	1c034 <__aeabi_dsub+0x238>
   1c318:	4650      	mov	r0, sl
   1c31a:	1a17      	subs	r7, r2, r0
   1c31c:	42ba      	cmp	r2, r7
   1c31e:	4192      	sbcs	r2, r2
   1c320:	1b0c      	subs	r4, r1, r4
   1c322:	4252      	negs	r2, r2
   1c324:	1aa4      	subs	r4, r4, r2
   1c326:	4698      	mov	r8, r3
   1c328:	e5ee      	b.n	1bf08 <__aeabi_dsub+0x10c>
   1c32a:	000d      	movs	r5, r1
   1c32c:	4315      	orrs	r5, r2
   1c32e:	d100      	bne.n	1c332 <__aeabi_dsub+0x536>
   1c330:	e76b      	b.n	1c20a <__aeabi_dsub+0x40e>
   1c332:	4650      	mov	r0, sl
   1c334:	0767      	lsls	r7, r4, #29
   1c336:	08c0      	lsrs	r0, r0, #3
   1c338:	4307      	orrs	r7, r0
   1c33a:	2080      	movs	r0, #128	; 0x80
   1c33c:	08e4      	lsrs	r4, r4, #3
   1c33e:	0300      	lsls	r0, r0, #12
   1c340:	4204      	tst	r4, r0
   1c342:	d007      	beq.n	1c354 <__aeabi_dsub+0x558>
   1c344:	08cd      	lsrs	r5, r1, #3
   1c346:	4205      	tst	r5, r0
   1c348:	d104      	bne.n	1c354 <__aeabi_dsub+0x558>
   1c34a:	002c      	movs	r4, r5
   1c34c:	4698      	mov	r8, r3
   1c34e:	08d7      	lsrs	r7, r2, #3
   1c350:	0749      	lsls	r1, r1, #29
   1c352:	430f      	orrs	r7, r1
   1c354:	0f7b      	lsrs	r3, r7, #29
   1c356:	00e4      	lsls	r4, r4, #3
   1c358:	431c      	orrs	r4, r3
   1c35a:	00ff      	lsls	r7, r7, #3
   1c35c:	4e30      	ldr	r6, [pc, #192]	; (1c420 <__aeabi_dsub+0x624>)
   1c35e:	e5d3      	b.n	1bf08 <__aeabi_dsub+0x10c>
   1c360:	4e2f      	ldr	r6, [pc, #188]	; (1c420 <__aeabi_dsub+0x624>)
   1c362:	45b4      	cmp	ip, r6
   1c364:	d1b4      	bne.n	1c2d0 <__aeabi_dsub+0x4d4>
   1c366:	000c      	movs	r4, r1
   1c368:	0017      	movs	r7, r2
   1c36a:	4666      	mov	r6, ip
   1c36c:	e5cc      	b.n	1bf08 <__aeabi_dsub+0x10c>
   1c36e:	2700      	movs	r7, #0
   1c370:	2400      	movs	r4, #0
   1c372:	e5e8      	b.n	1bf46 <__aeabi_dsub+0x14a>
   1c374:	2b00      	cmp	r3, #0
   1c376:	d039      	beq.n	1c3ec <__aeabi_dsub+0x5f0>
   1c378:	000b      	movs	r3, r1
   1c37a:	4313      	orrs	r3, r2
   1c37c:	d100      	bne.n	1c380 <__aeabi_dsub+0x584>
   1c37e:	e744      	b.n	1c20a <__aeabi_dsub+0x40e>
   1c380:	08c0      	lsrs	r0, r0, #3
   1c382:	0767      	lsls	r7, r4, #29
   1c384:	4307      	orrs	r7, r0
   1c386:	2080      	movs	r0, #128	; 0x80
   1c388:	08e4      	lsrs	r4, r4, #3
   1c38a:	0300      	lsls	r0, r0, #12
   1c38c:	4204      	tst	r4, r0
   1c38e:	d0e1      	beq.n	1c354 <__aeabi_dsub+0x558>
   1c390:	08cb      	lsrs	r3, r1, #3
   1c392:	4203      	tst	r3, r0
   1c394:	d1de      	bne.n	1c354 <__aeabi_dsub+0x558>
   1c396:	08d7      	lsrs	r7, r2, #3
   1c398:	0749      	lsls	r1, r1, #29
   1c39a:	430f      	orrs	r7, r1
   1c39c:	001c      	movs	r4, r3
   1c39e:	e7d9      	b.n	1c354 <__aeabi_dsub+0x558>
   1c3a0:	2100      	movs	r1, #0
   1c3a2:	e771      	b.n	1c288 <__aeabi_dsub+0x48c>
   1c3a4:	2500      	movs	r5, #0
   1c3a6:	2700      	movs	r7, #0
   1c3a8:	e5e9      	b.n	1bf7e <__aeabi_dsub+0x182>
   1c3aa:	002e      	movs	r6, r5
   1c3ac:	0027      	movs	r7, r4
   1c3ae:	3e20      	subs	r6, #32
   1c3b0:	40f7      	lsrs	r7, r6
   1c3b2:	2d20      	cmp	r5, #32
   1c3b4:	d02f      	beq.n	1c416 <__aeabi_dsub+0x61a>
   1c3b6:	2640      	movs	r6, #64	; 0x40
   1c3b8:	1b75      	subs	r5, r6, r5
   1c3ba:	40ac      	lsls	r4, r5
   1c3bc:	4650      	mov	r0, sl
   1c3be:	4320      	orrs	r0, r4
   1c3c0:	1e44      	subs	r4, r0, #1
   1c3c2:	41a0      	sbcs	r0, r4
   1c3c4:	2400      	movs	r4, #0
   1c3c6:	4338      	orrs	r0, r7
   1c3c8:	e6dc      	b.n	1c184 <__aeabi_dsub+0x388>
   1c3ca:	2480      	movs	r4, #128	; 0x80
   1c3cc:	2500      	movs	r5, #0
   1c3ce:	0324      	lsls	r4, r4, #12
   1c3d0:	4e13      	ldr	r6, [pc, #76]	; (1c420 <__aeabi_dsub+0x624>)
   1c3d2:	2700      	movs	r7, #0
   1c3d4:	e5d3      	b.n	1bf7e <__aeabi_dsub+0x182>
   1c3d6:	4650      	mov	r0, sl
   1c3d8:	4320      	orrs	r0, r4
   1c3da:	0007      	movs	r7, r0
   1c3dc:	1e78      	subs	r0, r7, #1
   1c3de:	4187      	sbcs	r7, r0
   1c3e0:	2400      	movs	r4, #0
   1c3e2:	18bf      	adds	r7, r7, r2
   1c3e4:	e760      	b.n	1c2a8 <__aeabi_dsub+0x4ac>
   1c3e6:	000c      	movs	r4, r1
   1c3e8:	0017      	movs	r7, r2
   1c3ea:	e58d      	b.n	1bf08 <__aeabi_dsub+0x10c>
   1c3ec:	000c      	movs	r4, r1
   1c3ee:	0017      	movs	r7, r2
   1c3f0:	4e0b      	ldr	r6, [pc, #44]	; (1c420 <__aeabi_dsub+0x624>)
   1c3f2:	e589      	b.n	1bf08 <__aeabi_dsub+0x10c>
   1c3f4:	001e      	movs	r6, r3
   1c3f6:	0027      	movs	r7, r4
   1c3f8:	3e20      	subs	r6, #32
   1c3fa:	40f7      	lsrs	r7, r6
   1c3fc:	2b20      	cmp	r3, #32
   1c3fe:	d00c      	beq.n	1c41a <__aeabi_dsub+0x61e>
   1c400:	2640      	movs	r6, #64	; 0x40
   1c402:	1af3      	subs	r3, r6, r3
   1c404:	409c      	lsls	r4, r3
   1c406:	4650      	mov	r0, sl
   1c408:	4320      	orrs	r0, r4
   1c40a:	1e44      	subs	r4, r0, #1
   1c40c:	41a0      	sbcs	r0, r4
   1c40e:	4307      	orrs	r7, r0
   1c410:	2400      	movs	r4, #0
   1c412:	18bf      	adds	r7, r7, r2
   1c414:	e748      	b.n	1c2a8 <__aeabi_dsub+0x4ac>
   1c416:	2400      	movs	r4, #0
   1c418:	e7d0      	b.n	1c3bc <__aeabi_dsub+0x5c0>
   1c41a:	2400      	movs	r4, #0
   1c41c:	e7f3      	b.n	1c406 <__aeabi_dsub+0x60a>
   1c41e:	46c0      	nop			; (mov r8, r8)
   1c420:	000007ff 	.word	0x000007ff
   1c424:	ff7fffff 	.word	0xff7fffff

0001c428 <__aeabi_d2iz>:
   1c428:	b530      	push	{r4, r5, lr}
   1c42a:	4d13      	ldr	r5, [pc, #76]	; (1c478 <__aeabi_d2iz+0x50>)
   1c42c:	030a      	lsls	r2, r1, #12
   1c42e:	004b      	lsls	r3, r1, #1
   1c430:	0b12      	lsrs	r2, r2, #12
   1c432:	0d5b      	lsrs	r3, r3, #21
   1c434:	0fc9      	lsrs	r1, r1, #31
   1c436:	2400      	movs	r4, #0
   1c438:	42ab      	cmp	r3, r5
   1c43a:	dd10      	ble.n	1c45e <__aeabi_d2iz+0x36>
   1c43c:	4c0f      	ldr	r4, [pc, #60]	; (1c47c <__aeabi_d2iz+0x54>)
   1c43e:	42a3      	cmp	r3, r4
   1c440:	dc0f      	bgt.n	1c462 <__aeabi_d2iz+0x3a>
   1c442:	2480      	movs	r4, #128	; 0x80
   1c444:	4d0e      	ldr	r5, [pc, #56]	; (1c480 <__aeabi_d2iz+0x58>)
   1c446:	0364      	lsls	r4, r4, #13
   1c448:	4322      	orrs	r2, r4
   1c44a:	1aed      	subs	r5, r5, r3
   1c44c:	2d1f      	cmp	r5, #31
   1c44e:	dd0b      	ble.n	1c468 <__aeabi_d2iz+0x40>
   1c450:	480c      	ldr	r0, [pc, #48]	; (1c484 <__aeabi_d2iz+0x5c>)
   1c452:	1ac3      	subs	r3, r0, r3
   1c454:	40da      	lsrs	r2, r3
   1c456:	4254      	negs	r4, r2
   1c458:	2900      	cmp	r1, #0
   1c45a:	d100      	bne.n	1c45e <__aeabi_d2iz+0x36>
   1c45c:	0014      	movs	r4, r2
   1c45e:	0020      	movs	r0, r4
   1c460:	bd30      	pop	{r4, r5, pc}
   1c462:	4b09      	ldr	r3, [pc, #36]	; (1c488 <__aeabi_d2iz+0x60>)
   1c464:	18cc      	adds	r4, r1, r3
   1c466:	e7fa      	b.n	1c45e <__aeabi_d2iz+0x36>
   1c468:	4c08      	ldr	r4, [pc, #32]	; (1c48c <__aeabi_d2iz+0x64>)
   1c46a:	40e8      	lsrs	r0, r5
   1c46c:	46a4      	mov	ip, r4
   1c46e:	4463      	add	r3, ip
   1c470:	409a      	lsls	r2, r3
   1c472:	4302      	orrs	r2, r0
   1c474:	e7ef      	b.n	1c456 <__aeabi_d2iz+0x2e>
   1c476:	46c0      	nop			; (mov r8, r8)
   1c478:	000003fe 	.word	0x000003fe
   1c47c:	0000041d 	.word	0x0000041d
   1c480:	00000433 	.word	0x00000433
   1c484:	00000413 	.word	0x00000413
   1c488:	7fffffff 	.word	0x7fffffff
   1c48c:	fffffbed 	.word	0xfffffbed

0001c490 <__aeabi_ui2d>:
   1c490:	b510      	push	{r4, lr}
   1c492:	1e04      	subs	r4, r0, #0
   1c494:	d028      	beq.n	1c4e8 <__aeabi_ui2d+0x58>
   1c496:	f000 f833 	bl	1c500 <__clzsi2>
   1c49a:	4b15      	ldr	r3, [pc, #84]	; (1c4f0 <__aeabi_ui2d+0x60>)
   1c49c:	4a15      	ldr	r2, [pc, #84]	; (1c4f4 <__aeabi_ui2d+0x64>)
   1c49e:	1a1b      	subs	r3, r3, r0
   1c4a0:	1ad2      	subs	r2, r2, r3
   1c4a2:	2a1f      	cmp	r2, #31
   1c4a4:	dd15      	ble.n	1c4d2 <__aeabi_ui2d+0x42>
   1c4a6:	4a14      	ldr	r2, [pc, #80]	; (1c4f8 <__aeabi_ui2d+0x68>)
   1c4a8:	1ad2      	subs	r2, r2, r3
   1c4aa:	4094      	lsls	r4, r2
   1c4ac:	2200      	movs	r2, #0
   1c4ae:	0324      	lsls	r4, r4, #12
   1c4b0:	055b      	lsls	r3, r3, #21
   1c4b2:	0b24      	lsrs	r4, r4, #12
   1c4b4:	0d5b      	lsrs	r3, r3, #21
   1c4b6:	2100      	movs	r1, #0
   1c4b8:	0010      	movs	r0, r2
   1c4ba:	0324      	lsls	r4, r4, #12
   1c4bc:	0d0a      	lsrs	r2, r1, #20
   1c4be:	0b24      	lsrs	r4, r4, #12
   1c4c0:	0512      	lsls	r2, r2, #20
   1c4c2:	4322      	orrs	r2, r4
   1c4c4:	4c0d      	ldr	r4, [pc, #52]	; (1c4fc <__aeabi_ui2d+0x6c>)
   1c4c6:	051b      	lsls	r3, r3, #20
   1c4c8:	4022      	ands	r2, r4
   1c4ca:	4313      	orrs	r3, r2
   1c4cc:	005b      	lsls	r3, r3, #1
   1c4ce:	0859      	lsrs	r1, r3, #1
   1c4d0:	bd10      	pop	{r4, pc}
   1c4d2:	0021      	movs	r1, r4
   1c4d4:	4091      	lsls	r1, r2
   1c4d6:	000a      	movs	r2, r1
   1c4d8:	210b      	movs	r1, #11
   1c4da:	1a08      	subs	r0, r1, r0
   1c4dc:	40c4      	lsrs	r4, r0
   1c4de:	055b      	lsls	r3, r3, #21
   1c4e0:	0324      	lsls	r4, r4, #12
   1c4e2:	0b24      	lsrs	r4, r4, #12
   1c4e4:	0d5b      	lsrs	r3, r3, #21
   1c4e6:	e7e6      	b.n	1c4b6 <__aeabi_ui2d+0x26>
   1c4e8:	2300      	movs	r3, #0
   1c4ea:	2400      	movs	r4, #0
   1c4ec:	2200      	movs	r2, #0
   1c4ee:	e7e2      	b.n	1c4b6 <__aeabi_ui2d+0x26>
   1c4f0:	0000041e 	.word	0x0000041e
   1c4f4:	00000433 	.word	0x00000433
   1c4f8:	00000413 	.word	0x00000413
   1c4fc:	800fffff 	.word	0x800fffff

0001c500 <__clzsi2>:
   1c500:	211c      	movs	r1, #28
   1c502:	2301      	movs	r3, #1
   1c504:	041b      	lsls	r3, r3, #16
   1c506:	4298      	cmp	r0, r3
   1c508:	d301      	bcc.n	1c50e <__clzsi2+0xe>
   1c50a:	0c00      	lsrs	r0, r0, #16
   1c50c:	3910      	subs	r1, #16
   1c50e:	0a1b      	lsrs	r3, r3, #8
   1c510:	4298      	cmp	r0, r3
   1c512:	d301      	bcc.n	1c518 <__clzsi2+0x18>
   1c514:	0a00      	lsrs	r0, r0, #8
   1c516:	3908      	subs	r1, #8
   1c518:	091b      	lsrs	r3, r3, #4
   1c51a:	4298      	cmp	r0, r3
   1c51c:	d301      	bcc.n	1c522 <__clzsi2+0x22>
   1c51e:	0900      	lsrs	r0, r0, #4
   1c520:	3904      	subs	r1, #4
   1c522:	a202      	add	r2, pc, #8	; (adr r2, 1c52c <__clzsi2+0x2c>)
   1c524:	5c10      	ldrb	r0, [r2, r0]
   1c526:	1840      	adds	r0, r0, r1
   1c528:	4770      	bx	lr
   1c52a:	46c0      	nop			; (mov r8, r8)
   1c52c:	02020304 	.word	0x02020304
   1c530:	01010101 	.word	0x01010101
	...

0001c53c <atoi>:
   1c53c:	b510      	push	{r4, lr}
   1c53e:	220a      	movs	r2, #10
   1c540:	2100      	movs	r1, #0
   1c542:	f000 fa33 	bl	1c9ac <strtol>
   1c546:	bd10      	pop	{r4, pc}

0001c548 <__libc_init_array>:
   1c548:	b570      	push	{r4, r5, r6, lr}
   1c54a:	2600      	movs	r6, #0
   1c54c:	4d0c      	ldr	r5, [pc, #48]	; (1c580 <__libc_init_array+0x38>)
   1c54e:	4c0d      	ldr	r4, [pc, #52]	; (1c584 <__libc_init_array+0x3c>)
   1c550:	1b64      	subs	r4, r4, r5
   1c552:	10a4      	asrs	r4, r4, #2
   1c554:	42a6      	cmp	r6, r4
   1c556:	d109      	bne.n	1c56c <__libc_init_array+0x24>
   1c558:	2600      	movs	r6, #0
   1c55a:	f002 f9df 	bl	1e91c <_init>
   1c55e:	4d0a      	ldr	r5, [pc, #40]	; (1c588 <__libc_init_array+0x40>)
   1c560:	4c0a      	ldr	r4, [pc, #40]	; (1c58c <__libc_init_array+0x44>)
   1c562:	1b64      	subs	r4, r4, r5
   1c564:	10a4      	asrs	r4, r4, #2
   1c566:	42a6      	cmp	r6, r4
   1c568:	d105      	bne.n	1c576 <__libc_init_array+0x2e>
   1c56a:	bd70      	pop	{r4, r5, r6, pc}
   1c56c:	00b3      	lsls	r3, r6, #2
   1c56e:	58eb      	ldr	r3, [r5, r3]
   1c570:	4798      	blx	r3
   1c572:	3601      	adds	r6, #1
   1c574:	e7ee      	b.n	1c554 <__libc_init_array+0xc>
   1c576:	00b3      	lsls	r3, r6, #2
   1c578:	58eb      	ldr	r3, [r5, r3]
   1c57a:	4798      	blx	r3
   1c57c:	3601      	adds	r6, #1
   1c57e:	e7f2      	b.n	1c566 <__libc_init_array+0x1e>
   1c580:	0001e928 	.word	0x0001e928
   1c584:	0001e928 	.word	0x0001e928
   1c588:	0001e928 	.word	0x0001e928
   1c58c:	0001e92c 	.word	0x0001e92c

0001c590 <malloc>:
   1c590:	b510      	push	{r4, lr}
   1c592:	4b03      	ldr	r3, [pc, #12]	; (1c5a0 <malloc+0x10>)
   1c594:	0001      	movs	r1, r0
   1c596:	6818      	ldr	r0, [r3, #0]
   1c598:	f000 f872 	bl	1c680 <_malloc_r>
   1c59c:	bd10      	pop	{r4, pc}
   1c59e:	46c0      	nop			; (mov r8, r8)
   1c5a0:	2000002c 	.word	0x2000002c

0001c5a4 <memcpy>:
   1c5a4:	2300      	movs	r3, #0
   1c5a6:	b510      	push	{r4, lr}
   1c5a8:	429a      	cmp	r2, r3
   1c5aa:	d100      	bne.n	1c5ae <memcpy+0xa>
   1c5ac:	bd10      	pop	{r4, pc}
   1c5ae:	5ccc      	ldrb	r4, [r1, r3]
   1c5b0:	54c4      	strb	r4, [r0, r3]
   1c5b2:	3301      	adds	r3, #1
   1c5b4:	e7f8      	b.n	1c5a8 <memcpy+0x4>

0001c5b6 <memmove>:
   1c5b6:	b510      	push	{r4, lr}
   1c5b8:	4288      	cmp	r0, r1
   1c5ba:	d902      	bls.n	1c5c2 <memmove+0xc>
   1c5bc:	188b      	adds	r3, r1, r2
   1c5be:	4298      	cmp	r0, r3
   1c5c0:	d308      	bcc.n	1c5d4 <memmove+0x1e>
   1c5c2:	2300      	movs	r3, #0
   1c5c4:	429a      	cmp	r2, r3
   1c5c6:	d007      	beq.n	1c5d8 <memmove+0x22>
   1c5c8:	5ccc      	ldrb	r4, [r1, r3]
   1c5ca:	54c4      	strb	r4, [r0, r3]
   1c5cc:	3301      	adds	r3, #1
   1c5ce:	e7f9      	b.n	1c5c4 <memmove+0xe>
   1c5d0:	5c8b      	ldrb	r3, [r1, r2]
   1c5d2:	5483      	strb	r3, [r0, r2]
   1c5d4:	3a01      	subs	r2, #1
   1c5d6:	d2fb      	bcs.n	1c5d0 <memmove+0x1a>
   1c5d8:	bd10      	pop	{r4, pc}

0001c5da <memset>:
   1c5da:	0003      	movs	r3, r0
   1c5dc:	1882      	adds	r2, r0, r2
   1c5de:	4293      	cmp	r3, r2
   1c5e0:	d100      	bne.n	1c5e4 <memset+0xa>
   1c5e2:	4770      	bx	lr
   1c5e4:	7019      	strb	r1, [r3, #0]
   1c5e6:	3301      	adds	r3, #1
   1c5e8:	e7f9      	b.n	1c5de <memset+0x4>
	...

0001c5ec <_free_r>:
   1c5ec:	b570      	push	{r4, r5, r6, lr}
   1c5ee:	0005      	movs	r5, r0
   1c5f0:	2900      	cmp	r1, #0
   1c5f2:	d010      	beq.n	1c616 <_free_r+0x2a>
   1c5f4:	1f0c      	subs	r4, r1, #4
   1c5f6:	6823      	ldr	r3, [r4, #0]
   1c5f8:	2b00      	cmp	r3, #0
   1c5fa:	da00      	bge.n	1c5fe <_free_r+0x12>
   1c5fc:	18e4      	adds	r4, r4, r3
   1c5fe:	0028      	movs	r0, r5
   1c600:	f000 fa0c 	bl	1ca1c <__malloc_lock>
   1c604:	4a1d      	ldr	r2, [pc, #116]	; (1c67c <_free_r+0x90>)
   1c606:	6813      	ldr	r3, [r2, #0]
   1c608:	2b00      	cmp	r3, #0
   1c60a:	d105      	bne.n	1c618 <_free_r+0x2c>
   1c60c:	6063      	str	r3, [r4, #4]
   1c60e:	6014      	str	r4, [r2, #0]
   1c610:	0028      	movs	r0, r5
   1c612:	f000 fa04 	bl	1ca1e <__malloc_unlock>
   1c616:	bd70      	pop	{r4, r5, r6, pc}
   1c618:	42a3      	cmp	r3, r4
   1c61a:	d909      	bls.n	1c630 <_free_r+0x44>
   1c61c:	6821      	ldr	r1, [r4, #0]
   1c61e:	1860      	adds	r0, r4, r1
   1c620:	4283      	cmp	r3, r0
   1c622:	d1f3      	bne.n	1c60c <_free_r+0x20>
   1c624:	6818      	ldr	r0, [r3, #0]
   1c626:	685b      	ldr	r3, [r3, #4]
   1c628:	1841      	adds	r1, r0, r1
   1c62a:	6021      	str	r1, [r4, #0]
   1c62c:	e7ee      	b.n	1c60c <_free_r+0x20>
   1c62e:	0013      	movs	r3, r2
   1c630:	685a      	ldr	r2, [r3, #4]
   1c632:	2a00      	cmp	r2, #0
   1c634:	d001      	beq.n	1c63a <_free_r+0x4e>
   1c636:	42a2      	cmp	r2, r4
   1c638:	d9f9      	bls.n	1c62e <_free_r+0x42>
   1c63a:	6819      	ldr	r1, [r3, #0]
   1c63c:	1858      	adds	r0, r3, r1
   1c63e:	42a0      	cmp	r0, r4
   1c640:	d10b      	bne.n	1c65a <_free_r+0x6e>
   1c642:	6820      	ldr	r0, [r4, #0]
   1c644:	1809      	adds	r1, r1, r0
   1c646:	1858      	adds	r0, r3, r1
   1c648:	6019      	str	r1, [r3, #0]
   1c64a:	4282      	cmp	r2, r0
   1c64c:	d1e0      	bne.n	1c610 <_free_r+0x24>
   1c64e:	6810      	ldr	r0, [r2, #0]
   1c650:	6852      	ldr	r2, [r2, #4]
   1c652:	1841      	adds	r1, r0, r1
   1c654:	6019      	str	r1, [r3, #0]
   1c656:	605a      	str	r2, [r3, #4]
   1c658:	e7da      	b.n	1c610 <_free_r+0x24>
   1c65a:	42a0      	cmp	r0, r4
   1c65c:	d902      	bls.n	1c664 <_free_r+0x78>
   1c65e:	230c      	movs	r3, #12
   1c660:	602b      	str	r3, [r5, #0]
   1c662:	e7d5      	b.n	1c610 <_free_r+0x24>
   1c664:	6821      	ldr	r1, [r4, #0]
   1c666:	1860      	adds	r0, r4, r1
   1c668:	4282      	cmp	r2, r0
   1c66a:	d103      	bne.n	1c674 <_free_r+0x88>
   1c66c:	6810      	ldr	r0, [r2, #0]
   1c66e:	6852      	ldr	r2, [r2, #4]
   1c670:	1841      	adds	r1, r0, r1
   1c672:	6021      	str	r1, [r4, #0]
   1c674:	6062      	str	r2, [r4, #4]
   1c676:	605c      	str	r4, [r3, #4]
   1c678:	e7ca      	b.n	1c610 <_free_r+0x24>
   1c67a:	46c0      	nop			; (mov r8, r8)
   1c67c:	20002d60 	.word	0x20002d60

0001c680 <_malloc_r>:
   1c680:	2303      	movs	r3, #3
   1c682:	b570      	push	{r4, r5, r6, lr}
   1c684:	1ccd      	adds	r5, r1, #3
   1c686:	439d      	bics	r5, r3
   1c688:	3508      	adds	r5, #8
   1c68a:	0006      	movs	r6, r0
   1c68c:	2d0c      	cmp	r5, #12
   1c68e:	d21e      	bcs.n	1c6ce <_malloc_r+0x4e>
   1c690:	250c      	movs	r5, #12
   1c692:	42a9      	cmp	r1, r5
   1c694:	d81d      	bhi.n	1c6d2 <_malloc_r+0x52>
   1c696:	0030      	movs	r0, r6
   1c698:	f000 f9c0 	bl	1ca1c <__malloc_lock>
   1c69c:	4a25      	ldr	r2, [pc, #148]	; (1c734 <_malloc_r+0xb4>)
   1c69e:	6814      	ldr	r4, [r2, #0]
   1c6a0:	0021      	movs	r1, r4
   1c6a2:	2900      	cmp	r1, #0
   1c6a4:	d119      	bne.n	1c6da <_malloc_r+0x5a>
   1c6a6:	4c24      	ldr	r4, [pc, #144]	; (1c738 <_malloc_r+0xb8>)
   1c6a8:	6823      	ldr	r3, [r4, #0]
   1c6aa:	2b00      	cmp	r3, #0
   1c6ac:	d103      	bne.n	1c6b6 <_malloc_r+0x36>
   1c6ae:	0030      	movs	r0, r6
   1c6b0:	f000 f844 	bl	1c73c <_sbrk_r>
   1c6b4:	6020      	str	r0, [r4, #0]
   1c6b6:	0029      	movs	r1, r5
   1c6b8:	0030      	movs	r0, r6
   1c6ba:	f000 f83f 	bl	1c73c <_sbrk_r>
   1c6be:	1c43      	adds	r3, r0, #1
   1c6c0:	d12c      	bne.n	1c71c <_malloc_r+0x9c>
   1c6c2:	230c      	movs	r3, #12
   1c6c4:	0030      	movs	r0, r6
   1c6c6:	6033      	str	r3, [r6, #0]
   1c6c8:	f000 f9a9 	bl	1ca1e <__malloc_unlock>
   1c6cc:	e003      	b.n	1c6d6 <_malloc_r+0x56>
   1c6ce:	2d00      	cmp	r5, #0
   1c6d0:	dadf      	bge.n	1c692 <_malloc_r+0x12>
   1c6d2:	230c      	movs	r3, #12
   1c6d4:	6033      	str	r3, [r6, #0]
   1c6d6:	2000      	movs	r0, #0
   1c6d8:	bd70      	pop	{r4, r5, r6, pc}
   1c6da:	680b      	ldr	r3, [r1, #0]
   1c6dc:	1b5b      	subs	r3, r3, r5
   1c6de:	d41a      	bmi.n	1c716 <_malloc_r+0x96>
   1c6e0:	2b0b      	cmp	r3, #11
   1c6e2:	d903      	bls.n	1c6ec <_malloc_r+0x6c>
   1c6e4:	600b      	str	r3, [r1, #0]
   1c6e6:	18cc      	adds	r4, r1, r3
   1c6e8:	6025      	str	r5, [r4, #0]
   1c6ea:	e003      	b.n	1c6f4 <_malloc_r+0x74>
   1c6ec:	428c      	cmp	r4, r1
   1c6ee:	d10e      	bne.n	1c70e <_malloc_r+0x8e>
   1c6f0:	6863      	ldr	r3, [r4, #4]
   1c6f2:	6013      	str	r3, [r2, #0]
   1c6f4:	0030      	movs	r0, r6
   1c6f6:	f000 f992 	bl	1ca1e <__malloc_unlock>
   1c6fa:	0020      	movs	r0, r4
   1c6fc:	2207      	movs	r2, #7
   1c6fe:	300b      	adds	r0, #11
   1c700:	1d23      	adds	r3, r4, #4
   1c702:	4390      	bics	r0, r2
   1c704:	1ac3      	subs	r3, r0, r3
   1c706:	d0e7      	beq.n	1c6d8 <_malloc_r+0x58>
   1c708:	425a      	negs	r2, r3
   1c70a:	50e2      	str	r2, [r4, r3]
   1c70c:	e7e4      	b.n	1c6d8 <_malloc_r+0x58>
   1c70e:	684b      	ldr	r3, [r1, #4]
   1c710:	6063      	str	r3, [r4, #4]
   1c712:	000c      	movs	r4, r1
   1c714:	e7ee      	b.n	1c6f4 <_malloc_r+0x74>
   1c716:	000c      	movs	r4, r1
   1c718:	6849      	ldr	r1, [r1, #4]
   1c71a:	e7c2      	b.n	1c6a2 <_malloc_r+0x22>
   1c71c:	2303      	movs	r3, #3
   1c71e:	1cc4      	adds	r4, r0, #3
   1c720:	439c      	bics	r4, r3
   1c722:	42a0      	cmp	r0, r4
   1c724:	d0e0      	beq.n	1c6e8 <_malloc_r+0x68>
   1c726:	1a21      	subs	r1, r4, r0
   1c728:	0030      	movs	r0, r6
   1c72a:	f000 f807 	bl	1c73c <_sbrk_r>
   1c72e:	1c43      	adds	r3, r0, #1
   1c730:	d1da      	bne.n	1c6e8 <_malloc_r+0x68>
   1c732:	e7c6      	b.n	1c6c2 <_malloc_r+0x42>
   1c734:	20002d60 	.word	0x20002d60
   1c738:	20002d64 	.word	0x20002d64

0001c73c <_sbrk_r>:
   1c73c:	2300      	movs	r3, #0
   1c73e:	b570      	push	{r4, r5, r6, lr}
   1c740:	4c06      	ldr	r4, [pc, #24]	; (1c75c <_sbrk_r+0x20>)
   1c742:	0005      	movs	r5, r0
   1c744:	0008      	movs	r0, r1
   1c746:	6023      	str	r3, [r4, #0]
   1c748:	f7fe f8fa 	bl	1a940 <_sbrk>
   1c74c:	1c43      	adds	r3, r0, #1
   1c74e:	d103      	bne.n	1c758 <_sbrk_r+0x1c>
   1c750:	6823      	ldr	r3, [r4, #0]
   1c752:	2b00      	cmp	r3, #0
   1c754:	d000      	beq.n	1c758 <_sbrk_r+0x1c>
   1c756:	602b      	str	r3, [r5, #0]
   1c758:	bd70      	pop	{r4, r5, r6, pc}
   1c75a:	46c0      	nop			; (mov r8, r8)
   1c75c:	20003374 	.word	0x20003374

0001c760 <sniprintf>:
   1c760:	b40c      	push	{r2, r3}
   1c762:	b530      	push	{r4, r5, lr}
   1c764:	4b16      	ldr	r3, [pc, #88]	; (1c7c0 <sniprintf+0x60>)
   1c766:	b09d      	sub	sp, #116	; 0x74
   1c768:	1e0c      	subs	r4, r1, #0
   1c76a:	681d      	ldr	r5, [r3, #0]
   1c76c:	da08      	bge.n	1c780 <sniprintf+0x20>
   1c76e:	238b      	movs	r3, #139	; 0x8b
   1c770:	2001      	movs	r0, #1
   1c772:	602b      	str	r3, [r5, #0]
   1c774:	4240      	negs	r0, r0
   1c776:	b01d      	add	sp, #116	; 0x74
   1c778:	bc30      	pop	{r4, r5}
   1c77a:	bc08      	pop	{r3}
   1c77c:	b002      	add	sp, #8
   1c77e:	4718      	bx	r3
   1c780:	2382      	movs	r3, #130	; 0x82
   1c782:	a902      	add	r1, sp, #8
   1c784:	009b      	lsls	r3, r3, #2
   1c786:	818b      	strh	r3, [r1, #12]
   1c788:	2300      	movs	r3, #0
   1c78a:	9002      	str	r0, [sp, #8]
   1c78c:	6108      	str	r0, [r1, #16]
   1c78e:	429c      	cmp	r4, r3
   1c790:	d000      	beq.n	1c794 <sniprintf+0x34>
   1c792:	1e63      	subs	r3, r4, #1
   1c794:	608b      	str	r3, [r1, #8]
   1c796:	614b      	str	r3, [r1, #20]
   1c798:	2301      	movs	r3, #1
   1c79a:	425b      	negs	r3, r3
   1c79c:	81cb      	strh	r3, [r1, #14]
   1c79e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1c7a0:	ab21      	add	r3, sp, #132	; 0x84
   1c7a2:	0028      	movs	r0, r5
   1c7a4:	9301      	str	r3, [sp, #4]
   1c7a6:	f000 f99d 	bl	1cae4 <_svfiprintf_r>
   1c7aa:	1c43      	adds	r3, r0, #1
   1c7ac:	da01      	bge.n	1c7b2 <sniprintf+0x52>
   1c7ae:	238b      	movs	r3, #139	; 0x8b
   1c7b0:	602b      	str	r3, [r5, #0]
   1c7b2:	2c00      	cmp	r4, #0
   1c7b4:	d0df      	beq.n	1c776 <sniprintf+0x16>
   1c7b6:	2300      	movs	r3, #0
   1c7b8:	9a02      	ldr	r2, [sp, #8]
   1c7ba:	7013      	strb	r3, [r2, #0]
   1c7bc:	e7db      	b.n	1c776 <sniprintf+0x16>
   1c7be:	46c0      	nop			; (mov r8, r8)
   1c7c0:	2000002c 	.word	0x2000002c

0001c7c4 <siprintf>:
   1c7c4:	b40e      	push	{r1, r2, r3}
   1c7c6:	b510      	push	{r4, lr}
   1c7c8:	b09d      	sub	sp, #116	; 0x74
   1c7ca:	a902      	add	r1, sp, #8
   1c7cc:	9002      	str	r0, [sp, #8]
   1c7ce:	6108      	str	r0, [r1, #16]
   1c7d0:	480b      	ldr	r0, [pc, #44]	; (1c800 <siprintf+0x3c>)
   1c7d2:	2482      	movs	r4, #130	; 0x82
   1c7d4:	6088      	str	r0, [r1, #8]
   1c7d6:	6148      	str	r0, [r1, #20]
   1c7d8:	2001      	movs	r0, #1
   1c7da:	4240      	negs	r0, r0
   1c7dc:	ab1f      	add	r3, sp, #124	; 0x7c
   1c7de:	81c8      	strh	r0, [r1, #14]
   1c7e0:	4808      	ldr	r0, [pc, #32]	; (1c804 <siprintf+0x40>)
   1c7e2:	cb04      	ldmia	r3!, {r2}
   1c7e4:	00a4      	lsls	r4, r4, #2
   1c7e6:	6800      	ldr	r0, [r0, #0]
   1c7e8:	9301      	str	r3, [sp, #4]
   1c7ea:	818c      	strh	r4, [r1, #12]
   1c7ec:	f000 f97a 	bl	1cae4 <_svfiprintf_r>
   1c7f0:	2300      	movs	r3, #0
   1c7f2:	9a02      	ldr	r2, [sp, #8]
   1c7f4:	7013      	strb	r3, [r2, #0]
   1c7f6:	b01d      	add	sp, #116	; 0x74
   1c7f8:	bc10      	pop	{r4}
   1c7fa:	bc08      	pop	{r3}
   1c7fc:	b003      	add	sp, #12
   1c7fe:	4718      	bx	r3
   1c800:	7fffffff 	.word	0x7fffffff
   1c804:	2000002c 	.word	0x2000002c

0001c808 <strcasecmp>:
   1c808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c80a:	0007      	movs	r7, r0
   1c80c:	000e      	movs	r6, r1
   1c80e:	783c      	ldrb	r4, [r7, #0]
   1c810:	f000 f8e4 	bl	1c9dc <__locale_ctype_ptr>
   1c814:	2203      	movs	r2, #3
   1c816:	1900      	adds	r0, r0, r4
   1c818:	7843      	ldrb	r3, [r0, #1]
   1c81a:	4013      	ands	r3, r2
   1c81c:	2b01      	cmp	r3, #1
   1c81e:	d100      	bne.n	1c822 <strcasecmp+0x1a>
   1c820:	3420      	adds	r4, #32
   1c822:	7835      	ldrb	r5, [r6, #0]
   1c824:	f000 f8da 	bl	1c9dc <__locale_ctype_ptr>
   1c828:	2203      	movs	r2, #3
   1c82a:	1940      	adds	r0, r0, r5
   1c82c:	7843      	ldrb	r3, [r0, #1]
   1c82e:	4013      	ands	r3, r2
   1c830:	2b01      	cmp	r3, #1
   1c832:	d100      	bne.n	1c836 <strcasecmp+0x2e>
   1c834:	3520      	adds	r5, #32
   1c836:	1b60      	subs	r0, r4, r5
   1c838:	d103      	bne.n	1c842 <strcasecmp+0x3a>
   1c83a:	3701      	adds	r7, #1
   1c83c:	3601      	adds	r6, #1
   1c83e:	2d00      	cmp	r5, #0
   1c840:	d1e5      	bne.n	1c80e <strcasecmp+0x6>
   1c842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c844 <strlen>:
   1c844:	2300      	movs	r3, #0
   1c846:	5cc2      	ldrb	r2, [r0, r3]
   1c848:	3301      	adds	r3, #1
   1c84a:	2a00      	cmp	r2, #0
   1c84c:	d1fb      	bne.n	1c846 <strlen+0x2>
   1c84e:	1e58      	subs	r0, r3, #1
   1c850:	4770      	bx	lr

0001c852 <strncmp>:
   1c852:	2300      	movs	r3, #0
   1c854:	b530      	push	{r4, r5, lr}
   1c856:	429a      	cmp	r2, r3
   1c858:	d00a      	beq.n	1c870 <strncmp+0x1e>
   1c85a:	3a01      	subs	r2, #1
   1c85c:	5cc4      	ldrb	r4, [r0, r3]
   1c85e:	5ccd      	ldrb	r5, [r1, r3]
   1c860:	42ac      	cmp	r4, r5
   1c862:	d104      	bne.n	1c86e <strncmp+0x1c>
   1c864:	429a      	cmp	r2, r3
   1c866:	d002      	beq.n	1c86e <strncmp+0x1c>
   1c868:	3301      	adds	r3, #1
   1c86a:	2c00      	cmp	r4, #0
   1c86c:	d1f6      	bne.n	1c85c <strncmp+0xa>
   1c86e:	1b63      	subs	r3, r4, r5
   1c870:	0018      	movs	r0, r3
   1c872:	bd30      	pop	{r4, r5, pc}

0001c874 <strncpy>:
   1c874:	b570      	push	{r4, r5, r6, lr}
   1c876:	0004      	movs	r4, r0
   1c878:	2a00      	cmp	r2, #0
   1c87a:	d100      	bne.n	1c87e <strncpy+0xa>
   1c87c:	bd70      	pop	{r4, r5, r6, pc}
   1c87e:	780d      	ldrb	r5, [r1, #0]
   1c880:	1e56      	subs	r6, r2, #1
   1c882:	1c63      	adds	r3, r4, #1
   1c884:	7025      	strb	r5, [r4, #0]
   1c886:	3101      	adds	r1, #1
   1c888:	2d00      	cmp	r5, #0
   1c88a:	d105      	bne.n	1c898 <strncpy+0x24>
   1c88c:	18a4      	adds	r4, r4, r2
   1c88e:	429c      	cmp	r4, r3
   1c890:	d0f4      	beq.n	1c87c <strncpy+0x8>
   1c892:	701d      	strb	r5, [r3, #0]
   1c894:	3301      	adds	r3, #1
   1c896:	e7fa      	b.n	1c88e <strncpy+0x1a>
   1c898:	001c      	movs	r4, r3
   1c89a:	0032      	movs	r2, r6
   1c89c:	e7ec      	b.n	1c878 <strncpy+0x4>
	...

0001c8a0 <_strtol_l.isra.0>:
   1c8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c8a2:	001f      	movs	r7, r3
   1c8a4:	000e      	movs	r6, r1
   1c8a6:	b087      	sub	sp, #28
   1c8a8:	9005      	str	r0, [sp, #20]
   1c8aa:	9103      	str	r1, [sp, #12]
   1c8ac:	9202      	str	r2, [sp, #8]
   1c8ae:	980c      	ldr	r0, [sp, #48]	; 0x30
   1c8b0:	7834      	ldrb	r4, [r6, #0]
   1c8b2:	f000 f88f 	bl	1c9d4 <__locale_ctype_ptr_l>
   1c8b6:	2208      	movs	r2, #8
   1c8b8:	1900      	adds	r0, r0, r4
   1c8ba:	7843      	ldrb	r3, [r0, #1]
   1c8bc:	1c75      	adds	r5, r6, #1
   1c8be:	4013      	ands	r3, r2
   1c8c0:	d10c      	bne.n	1c8dc <_strtol_l.isra.0+0x3c>
   1c8c2:	2c2d      	cmp	r4, #45	; 0x2d
   1c8c4:	d10c      	bne.n	1c8e0 <_strtol_l.isra.0+0x40>
   1c8c6:	3301      	adds	r3, #1
   1c8c8:	782c      	ldrb	r4, [r5, #0]
   1c8ca:	9301      	str	r3, [sp, #4]
   1c8cc:	1cb5      	adds	r5, r6, #2
   1c8ce:	2f00      	cmp	r7, #0
   1c8d0:	d00c      	beq.n	1c8ec <_strtol_l.isra.0+0x4c>
   1c8d2:	2f10      	cmp	r7, #16
   1c8d4:	d114      	bne.n	1c900 <_strtol_l.isra.0+0x60>
   1c8d6:	2c30      	cmp	r4, #48	; 0x30
   1c8d8:	d00a      	beq.n	1c8f0 <_strtol_l.isra.0+0x50>
   1c8da:	e011      	b.n	1c900 <_strtol_l.isra.0+0x60>
   1c8dc:	002e      	movs	r6, r5
   1c8de:	e7e6      	b.n	1c8ae <_strtol_l.isra.0+0xe>
   1c8e0:	9301      	str	r3, [sp, #4]
   1c8e2:	2c2b      	cmp	r4, #43	; 0x2b
   1c8e4:	d1f3      	bne.n	1c8ce <_strtol_l.isra.0+0x2e>
   1c8e6:	782c      	ldrb	r4, [r5, #0]
   1c8e8:	1cb5      	adds	r5, r6, #2
   1c8ea:	e7f0      	b.n	1c8ce <_strtol_l.isra.0+0x2e>
   1c8ec:	2c30      	cmp	r4, #48	; 0x30
   1c8ee:	d12f      	bne.n	1c950 <_strtol_l.isra.0+0xb0>
   1c8f0:	2220      	movs	r2, #32
   1c8f2:	782b      	ldrb	r3, [r5, #0]
   1c8f4:	4393      	bics	r3, r2
   1c8f6:	2b58      	cmp	r3, #88	; 0x58
   1c8f8:	d151      	bne.n	1c99e <_strtol_l.isra.0+0xfe>
   1c8fa:	2710      	movs	r7, #16
   1c8fc:	786c      	ldrb	r4, [r5, #1]
   1c8fe:	3502      	adds	r5, #2
   1c900:	9b01      	ldr	r3, [sp, #4]
   1c902:	4a29      	ldr	r2, [pc, #164]	; (1c9a8 <_strtol_l.isra.0+0x108>)
   1c904:	0039      	movs	r1, r7
   1c906:	189e      	adds	r6, r3, r2
   1c908:	0030      	movs	r0, r6
   1c90a:	f7fe f983 	bl	1ac14 <__aeabi_uidivmod>
   1c90e:	0030      	movs	r0, r6
   1c910:	9104      	str	r1, [sp, #16]
   1c912:	0039      	movs	r1, r7
   1c914:	f7fe f8f8 	bl	1ab08 <__udivsi3>
   1c918:	2101      	movs	r1, #1
   1c91a:	2300      	movs	r3, #0
   1c91c:	4249      	negs	r1, r1
   1c91e:	0002      	movs	r2, r0
   1c920:	468c      	mov	ip, r1
   1c922:	0018      	movs	r0, r3
   1c924:	0021      	movs	r1, r4
   1c926:	3930      	subs	r1, #48	; 0x30
   1c928:	2909      	cmp	r1, #9
   1c92a:	d813      	bhi.n	1c954 <_strtol_l.isra.0+0xb4>
   1c92c:	000c      	movs	r4, r1
   1c92e:	42a7      	cmp	r7, r4
   1c930:	dd1c      	ble.n	1c96c <_strtol_l.isra.0+0xcc>
   1c932:	1c59      	adds	r1, r3, #1
   1c934:	d009      	beq.n	1c94a <_strtol_l.isra.0+0xaa>
   1c936:	4663      	mov	r3, ip
   1c938:	4282      	cmp	r2, r0
   1c93a:	d306      	bcc.n	1c94a <_strtol_l.isra.0+0xaa>
   1c93c:	d102      	bne.n	1c944 <_strtol_l.isra.0+0xa4>
   1c93e:	9904      	ldr	r1, [sp, #16]
   1c940:	42a1      	cmp	r1, r4
   1c942:	db02      	blt.n	1c94a <_strtol_l.isra.0+0xaa>
   1c944:	2301      	movs	r3, #1
   1c946:	4378      	muls	r0, r7
   1c948:	1820      	adds	r0, r4, r0
   1c94a:	782c      	ldrb	r4, [r5, #0]
   1c94c:	3501      	adds	r5, #1
   1c94e:	e7e9      	b.n	1c924 <_strtol_l.isra.0+0x84>
   1c950:	270a      	movs	r7, #10
   1c952:	e7d5      	b.n	1c900 <_strtol_l.isra.0+0x60>
   1c954:	0021      	movs	r1, r4
   1c956:	3941      	subs	r1, #65	; 0x41
   1c958:	2919      	cmp	r1, #25
   1c95a:	d801      	bhi.n	1c960 <_strtol_l.isra.0+0xc0>
   1c95c:	3c37      	subs	r4, #55	; 0x37
   1c95e:	e7e6      	b.n	1c92e <_strtol_l.isra.0+0x8e>
   1c960:	0021      	movs	r1, r4
   1c962:	3961      	subs	r1, #97	; 0x61
   1c964:	2919      	cmp	r1, #25
   1c966:	d801      	bhi.n	1c96c <_strtol_l.isra.0+0xcc>
   1c968:	3c57      	subs	r4, #87	; 0x57
   1c96a:	e7e0      	b.n	1c92e <_strtol_l.isra.0+0x8e>
   1c96c:	1c5a      	adds	r2, r3, #1
   1c96e:	d108      	bne.n	1c982 <_strtol_l.isra.0+0xe2>
   1c970:	9a05      	ldr	r2, [sp, #20]
   1c972:	3323      	adds	r3, #35	; 0x23
   1c974:	6013      	str	r3, [r2, #0]
   1c976:	9b02      	ldr	r3, [sp, #8]
   1c978:	0030      	movs	r0, r6
   1c97a:	2b00      	cmp	r3, #0
   1c97c:	d10b      	bne.n	1c996 <_strtol_l.isra.0+0xf6>
   1c97e:	b007      	add	sp, #28
   1c980:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c982:	9a01      	ldr	r2, [sp, #4]
   1c984:	2a00      	cmp	r2, #0
   1c986:	d000      	beq.n	1c98a <_strtol_l.isra.0+0xea>
   1c988:	4240      	negs	r0, r0
   1c98a:	9a02      	ldr	r2, [sp, #8]
   1c98c:	2a00      	cmp	r2, #0
   1c98e:	d0f6      	beq.n	1c97e <_strtol_l.isra.0+0xde>
   1c990:	9a03      	ldr	r2, [sp, #12]
   1c992:	2b00      	cmp	r3, #0
   1c994:	d000      	beq.n	1c998 <_strtol_l.isra.0+0xf8>
   1c996:	1e6a      	subs	r2, r5, #1
   1c998:	9b02      	ldr	r3, [sp, #8]
   1c99a:	601a      	str	r2, [r3, #0]
   1c99c:	e7ef      	b.n	1c97e <_strtol_l.isra.0+0xde>
   1c99e:	2430      	movs	r4, #48	; 0x30
   1c9a0:	2f00      	cmp	r7, #0
   1c9a2:	d1ad      	bne.n	1c900 <_strtol_l.isra.0+0x60>
   1c9a4:	3708      	adds	r7, #8
   1c9a6:	e7ab      	b.n	1c900 <_strtol_l.isra.0+0x60>
   1c9a8:	7fffffff 	.word	0x7fffffff

0001c9ac <strtol>:
   1c9ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c9ae:	0013      	movs	r3, r2
   1c9b0:	4a06      	ldr	r2, [pc, #24]	; (1c9cc <strtol+0x20>)
   1c9b2:	0005      	movs	r5, r0
   1c9b4:	6810      	ldr	r0, [r2, #0]
   1c9b6:	6a04      	ldr	r4, [r0, #32]
   1c9b8:	2c00      	cmp	r4, #0
   1c9ba:	d100      	bne.n	1c9be <strtol+0x12>
   1c9bc:	4c04      	ldr	r4, [pc, #16]	; (1c9d0 <strtol+0x24>)
   1c9be:	000a      	movs	r2, r1
   1c9c0:	9400      	str	r4, [sp, #0]
   1c9c2:	0029      	movs	r1, r5
   1c9c4:	f7ff ff6c 	bl	1c8a0 <_strtol_l.isra.0>
   1c9c8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1c9ca:	46c0      	nop			; (mov r8, r8)
   1c9cc:	2000002c 	.word	0x2000002c
   1c9d0:	20000090 	.word	0x20000090

0001c9d4 <__locale_ctype_ptr_l>:
   1c9d4:	30ec      	adds	r0, #236	; 0xec
   1c9d6:	6800      	ldr	r0, [r0, #0]
   1c9d8:	4770      	bx	lr
	...

0001c9dc <__locale_ctype_ptr>:
   1c9dc:	4b04      	ldr	r3, [pc, #16]	; (1c9f0 <__locale_ctype_ptr+0x14>)
   1c9de:	681b      	ldr	r3, [r3, #0]
   1c9e0:	6a1b      	ldr	r3, [r3, #32]
   1c9e2:	2b00      	cmp	r3, #0
   1c9e4:	d100      	bne.n	1c9e8 <__locale_ctype_ptr+0xc>
   1c9e6:	4b03      	ldr	r3, [pc, #12]	; (1c9f4 <__locale_ctype_ptr+0x18>)
   1c9e8:	33ec      	adds	r3, #236	; 0xec
   1c9ea:	6818      	ldr	r0, [r3, #0]
   1c9ec:	4770      	bx	lr
   1c9ee:	46c0      	nop			; (mov r8, r8)
   1c9f0:	2000002c 	.word	0x2000002c
   1c9f4:	20000090 	.word	0x20000090

0001c9f8 <__ascii_mbtowc>:
   1c9f8:	b082      	sub	sp, #8
   1c9fa:	2900      	cmp	r1, #0
   1c9fc:	d100      	bne.n	1ca00 <__ascii_mbtowc+0x8>
   1c9fe:	a901      	add	r1, sp, #4
   1ca00:	1e10      	subs	r0, r2, #0
   1ca02:	d006      	beq.n	1ca12 <__ascii_mbtowc+0x1a>
   1ca04:	2b00      	cmp	r3, #0
   1ca06:	d006      	beq.n	1ca16 <__ascii_mbtowc+0x1e>
   1ca08:	7813      	ldrb	r3, [r2, #0]
   1ca0a:	600b      	str	r3, [r1, #0]
   1ca0c:	7810      	ldrb	r0, [r2, #0]
   1ca0e:	1e43      	subs	r3, r0, #1
   1ca10:	4198      	sbcs	r0, r3
   1ca12:	b002      	add	sp, #8
   1ca14:	4770      	bx	lr
   1ca16:	2002      	movs	r0, #2
   1ca18:	4240      	negs	r0, r0
   1ca1a:	e7fa      	b.n	1ca12 <__ascii_mbtowc+0x1a>

0001ca1c <__malloc_lock>:
   1ca1c:	4770      	bx	lr

0001ca1e <__malloc_unlock>:
   1ca1e:	4770      	bx	lr

0001ca20 <__ssputs_r>:
   1ca20:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ca22:	688e      	ldr	r6, [r1, #8]
   1ca24:	b085      	sub	sp, #20
   1ca26:	0007      	movs	r7, r0
   1ca28:	000c      	movs	r4, r1
   1ca2a:	9203      	str	r2, [sp, #12]
   1ca2c:	9301      	str	r3, [sp, #4]
   1ca2e:	429e      	cmp	r6, r3
   1ca30:	d839      	bhi.n	1caa6 <__ssputs_r+0x86>
   1ca32:	2390      	movs	r3, #144	; 0x90
   1ca34:	898a      	ldrh	r2, [r1, #12]
   1ca36:	00db      	lsls	r3, r3, #3
   1ca38:	421a      	tst	r2, r3
   1ca3a:	d034      	beq.n	1caa6 <__ssputs_r+0x86>
   1ca3c:	2503      	movs	r5, #3
   1ca3e:	6909      	ldr	r1, [r1, #16]
   1ca40:	6823      	ldr	r3, [r4, #0]
   1ca42:	1a5b      	subs	r3, r3, r1
   1ca44:	9302      	str	r3, [sp, #8]
   1ca46:	6963      	ldr	r3, [r4, #20]
   1ca48:	9802      	ldr	r0, [sp, #8]
   1ca4a:	435d      	muls	r5, r3
   1ca4c:	0feb      	lsrs	r3, r5, #31
   1ca4e:	195d      	adds	r5, r3, r5
   1ca50:	9b01      	ldr	r3, [sp, #4]
   1ca52:	106d      	asrs	r5, r5, #1
   1ca54:	3301      	adds	r3, #1
   1ca56:	181b      	adds	r3, r3, r0
   1ca58:	42ab      	cmp	r3, r5
   1ca5a:	d900      	bls.n	1ca5e <__ssputs_r+0x3e>
   1ca5c:	001d      	movs	r5, r3
   1ca5e:	0553      	lsls	r3, r2, #21
   1ca60:	d532      	bpl.n	1cac8 <__ssputs_r+0xa8>
   1ca62:	0029      	movs	r1, r5
   1ca64:	0038      	movs	r0, r7
   1ca66:	f7ff fe0b 	bl	1c680 <_malloc_r>
   1ca6a:	1e06      	subs	r6, r0, #0
   1ca6c:	d109      	bne.n	1ca82 <__ssputs_r+0x62>
   1ca6e:	230c      	movs	r3, #12
   1ca70:	603b      	str	r3, [r7, #0]
   1ca72:	2340      	movs	r3, #64	; 0x40
   1ca74:	2001      	movs	r0, #1
   1ca76:	89a2      	ldrh	r2, [r4, #12]
   1ca78:	4240      	negs	r0, r0
   1ca7a:	4313      	orrs	r3, r2
   1ca7c:	81a3      	strh	r3, [r4, #12]
   1ca7e:	b005      	add	sp, #20
   1ca80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ca82:	9a02      	ldr	r2, [sp, #8]
   1ca84:	6921      	ldr	r1, [r4, #16]
   1ca86:	f7ff fd8d 	bl	1c5a4 <memcpy>
   1ca8a:	89a3      	ldrh	r3, [r4, #12]
   1ca8c:	4a14      	ldr	r2, [pc, #80]	; (1cae0 <__ssputs_r+0xc0>)
   1ca8e:	401a      	ands	r2, r3
   1ca90:	2380      	movs	r3, #128	; 0x80
   1ca92:	4313      	orrs	r3, r2
   1ca94:	81a3      	strh	r3, [r4, #12]
   1ca96:	9b02      	ldr	r3, [sp, #8]
   1ca98:	6126      	str	r6, [r4, #16]
   1ca9a:	18f6      	adds	r6, r6, r3
   1ca9c:	6026      	str	r6, [r4, #0]
   1ca9e:	6165      	str	r5, [r4, #20]
   1caa0:	9e01      	ldr	r6, [sp, #4]
   1caa2:	1aed      	subs	r5, r5, r3
   1caa4:	60a5      	str	r5, [r4, #8]
   1caa6:	9b01      	ldr	r3, [sp, #4]
   1caa8:	42b3      	cmp	r3, r6
   1caaa:	d200      	bcs.n	1caae <__ssputs_r+0x8e>
   1caac:	001e      	movs	r6, r3
   1caae:	0032      	movs	r2, r6
   1cab0:	9903      	ldr	r1, [sp, #12]
   1cab2:	6820      	ldr	r0, [r4, #0]
   1cab4:	f7ff fd7f 	bl	1c5b6 <memmove>
   1cab8:	68a3      	ldr	r3, [r4, #8]
   1caba:	2000      	movs	r0, #0
   1cabc:	1b9b      	subs	r3, r3, r6
   1cabe:	60a3      	str	r3, [r4, #8]
   1cac0:	6823      	ldr	r3, [r4, #0]
   1cac2:	199e      	adds	r6, r3, r6
   1cac4:	6026      	str	r6, [r4, #0]
   1cac6:	e7da      	b.n	1ca7e <__ssputs_r+0x5e>
   1cac8:	002a      	movs	r2, r5
   1caca:	0038      	movs	r0, r7
   1cacc:	f000 faad 	bl	1d02a <_realloc_r>
   1cad0:	1e06      	subs	r6, r0, #0
   1cad2:	d1e0      	bne.n	1ca96 <__ssputs_r+0x76>
   1cad4:	6921      	ldr	r1, [r4, #16]
   1cad6:	0038      	movs	r0, r7
   1cad8:	f7ff fd88 	bl	1c5ec <_free_r>
   1cadc:	e7c7      	b.n	1ca6e <__ssputs_r+0x4e>
   1cade:	46c0      	nop			; (mov r8, r8)
   1cae0:	fffffb7f 	.word	0xfffffb7f

0001cae4 <_svfiprintf_r>:
   1cae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cae6:	b09f      	sub	sp, #124	; 0x7c
   1cae8:	9002      	str	r0, [sp, #8]
   1caea:	9305      	str	r3, [sp, #20]
   1caec:	898b      	ldrh	r3, [r1, #12]
   1caee:	000f      	movs	r7, r1
   1caf0:	0016      	movs	r6, r2
   1caf2:	061b      	lsls	r3, r3, #24
   1caf4:	d511      	bpl.n	1cb1a <_svfiprintf_r+0x36>
   1caf6:	690b      	ldr	r3, [r1, #16]
   1caf8:	2b00      	cmp	r3, #0
   1cafa:	d10e      	bne.n	1cb1a <_svfiprintf_r+0x36>
   1cafc:	2140      	movs	r1, #64	; 0x40
   1cafe:	f7ff fdbf 	bl	1c680 <_malloc_r>
   1cb02:	6038      	str	r0, [r7, #0]
   1cb04:	6138      	str	r0, [r7, #16]
   1cb06:	2800      	cmp	r0, #0
   1cb08:	d105      	bne.n	1cb16 <_svfiprintf_r+0x32>
   1cb0a:	230c      	movs	r3, #12
   1cb0c:	9a02      	ldr	r2, [sp, #8]
   1cb0e:	3801      	subs	r0, #1
   1cb10:	6013      	str	r3, [r2, #0]
   1cb12:	b01f      	add	sp, #124	; 0x7c
   1cb14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cb16:	2340      	movs	r3, #64	; 0x40
   1cb18:	617b      	str	r3, [r7, #20]
   1cb1a:	2300      	movs	r3, #0
   1cb1c:	ad06      	add	r5, sp, #24
   1cb1e:	616b      	str	r3, [r5, #20]
   1cb20:	3320      	adds	r3, #32
   1cb22:	766b      	strb	r3, [r5, #25]
   1cb24:	3310      	adds	r3, #16
   1cb26:	76ab      	strb	r3, [r5, #26]
   1cb28:	0034      	movs	r4, r6
   1cb2a:	7823      	ldrb	r3, [r4, #0]
   1cb2c:	2b00      	cmp	r3, #0
   1cb2e:	d147      	bne.n	1cbc0 <_svfiprintf_r+0xdc>
   1cb30:	1ba3      	subs	r3, r4, r6
   1cb32:	9304      	str	r3, [sp, #16]
   1cb34:	d00d      	beq.n	1cb52 <_svfiprintf_r+0x6e>
   1cb36:	1ba3      	subs	r3, r4, r6
   1cb38:	0032      	movs	r2, r6
   1cb3a:	0039      	movs	r1, r7
   1cb3c:	9802      	ldr	r0, [sp, #8]
   1cb3e:	f7ff ff6f 	bl	1ca20 <__ssputs_r>
   1cb42:	1c43      	adds	r3, r0, #1
   1cb44:	d100      	bne.n	1cb48 <_svfiprintf_r+0x64>
   1cb46:	e0b5      	b.n	1ccb4 <_svfiprintf_r+0x1d0>
   1cb48:	696a      	ldr	r2, [r5, #20]
   1cb4a:	9b04      	ldr	r3, [sp, #16]
   1cb4c:	4694      	mov	ip, r2
   1cb4e:	4463      	add	r3, ip
   1cb50:	616b      	str	r3, [r5, #20]
   1cb52:	7823      	ldrb	r3, [r4, #0]
   1cb54:	2b00      	cmp	r3, #0
   1cb56:	d100      	bne.n	1cb5a <_svfiprintf_r+0x76>
   1cb58:	e0ac      	b.n	1ccb4 <_svfiprintf_r+0x1d0>
   1cb5a:	2201      	movs	r2, #1
   1cb5c:	2300      	movs	r3, #0
   1cb5e:	4252      	negs	r2, r2
   1cb60:	606a      	str	r2, [r5, #4]
   1cb62:	a902      	add	r1, sp, #8
   1cb64:	3254      	adds	r2, #84	; 0x54
   1cb66:	1852      	adds	r2, r2, r1
   1cb68:	3401      	adds	r4, #1
   1cb6a:	602b      	str	r3, [r5, #0]
   1cb6c:	60eb      	str	r3, [r5, #12]
   1cb6e:	60ab      	str	r3, [r5, #8]
   1cb70:	7013      	strb	r3, [r2, #0]
   1cb72:	65ab      	str	r3, [r5, #88]	; 0x58
   1cb74:	4e58      	ldr	r6, [pc, #352]	; (1ccd8 <_svfiprintf_r+0x1f4>)
   1cb76:	2205      	movs	r2, #5
   1cb78:	7821      	ldrb	r1, [r4, #0]
   1cb7a:	0030      	movs	r0, r6
   1cb7c:	f000 fa4a 	bl	1d014 <memchr>
   1cb80:	1c62      	adds	r2, r4, #1
   1cb82:	2800      	cmp	r0, #0
   1cb84:	d120      	bne.n	1cbc8 <_svfiprintf_r+0xe4>
   1cb86:	6829      	ldr	r1, [r5, #0]
   1cb88:	06cb      	lsls	r3, r1, #27
   1cb8a:	d504      	bpl.n	1cb96 <_svfiprintf_r+0xb2>
   1cb8c:	2353      	movs	r3, #83	; 0x53
   1cb8e:	ae02      	add	r6, sp, #8
   1cb90:	3020      	adds	r0, #32
   1cb92:	199b      	adds	r3, r3, r6
   1cb94:	7018      	strb	r0, [r3, #0]
   1cb96:	070b      	lsls	r3, r1, #28
   1cb98:	d504      	bpl.n	1cba4 <_svfiprintf_r+0xc0>
   1cb9a:	2353      	movs	r3, #83	; 0x53
   1cb9c:	202b      	movs	r0, #43	; 0x2b
   1cb9e:	ae02      	add	r6, sp, #8
   1cba0:	199b      	adds	r3, r3, r6
   1cba2:	7018      	strb	r0, [r3, #0]
   1cba4:	7823      	ldrb	r3, [r4, #0]
   1cba6:	2b2a      	cmp	r3, #42	; 0x2a
   1cba8:	d016      	beq.n	1cbd8 <_svfiprintf_r+0xf4>
   1cbaa:	2000      	movs	r0, #0
   1cbac:	210a      	movs	r1, #10
   1cbae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cbb0:	7822      	ldrb	r2, [r4, #0]
   1cbb2:	3a30      	subs	r2, #48	; 0x30
   1cbb4:	2a09      	cmp	r2, #9
   1cbb6:	d955      	bls.n	1cc64 <_svfiprintf_r+0x180>
   1cbb8:	2800      	cmp	r0, #0
   1cbba:	d015      	beq.n	1cbe8 <_svfiprintf_r+0x104>
   1cbbc:	9309      	str	r3, [sp, #36]	; 0x24
   1cbbe:	e013      	b.n	1cbe8 <_svfiprintf_r+0x104>
   1cbc0:	2b25      	cmp	r3, #37	; 0x25
   1cbc2:	d0b5      	beq.n	1cb30 <_svfiprintf_r+0x4c>
   1cbc4:	3401      	adds	r4, #1
   1cbc6:	e7b0      	b.n	1cb2a <_svfiprintf_r+0x46>
   1cbc8:	2301      	movs	r3, #1
   1cbca:	1b80      	subs	r0, r0, r6
   1cbcc:	4083      	lsls	r3, r0
   1cbce:	6829      	ldr	r1, [r5, #0]
   1cbd0:	0014      	movs	r4, r2
   1cbd2:	430b      	orrs	r3, r1
   1cbd4:	602b      	str	r3, [r5, #0]
   1cbd6:	e7cd      	b.n	1cb74 <_svfiprintf_r+0x90>
   1cbd8:	9b05      	ldr	r3, [sp, #20]
   1cbda:	1d18      	adds	r0, r3, #4
   1cbdc:	681b      	ldr	r3, [r3, #0]
   1cbde:	9005      	str	r0, [sp, #20]
   1cbe0:	2b00      	cmp	r3, #0
   1cbe2:	db39      	blt.n	1cc58 <_svfiprintf_r+0x174>
   1cbe4:	9309      	str	r3, [sp, #36]	; 0x24
   1cbe6:	0014      	movs	r4, r2
   1cbe8:	7823      	ldrb	r3, [r4, #0]
   1cbea:	2b2e      	cmp	r3, #46	; 0x2e
   1cbec:	d10b      	bne.n	1cc06 <_svfiprintf_r+0x122>
   1cbee:	7863      	ldrb	r3, [r4, #1]
   1cbf0:	1c62      	adds	r2, r4, #1
   1cbf2:	2b2a      	cmp	r3, #42	; 0x2a
   1cbf4:	d13e      	bne.n	1cc74 <_svfiprintf_r+0x190>
   1cbf6:	9b05      	ldr	r3, [sp, #20]
   1cbf8:	3402      	adds	r4, #2
   1cbfa:	1d1a      	adds	r2, r3, #4
   1cbfc:	681b      	ldr	r3, [r3, #0]
   1cbfe:	9205      	str	r2, [sp, #20]
   1cc00:	2b00      	cmp	r3, #0
   1cc02:	db34      	blt.n	1cc6e <_svfiprintf_r+0x18a>
   1cc04:	9307      	str	r3, [sp, #28]
   1cc06:	4e35      	ldr	r6, [pc, #212]	; (1ccdc <_svfiprintf_r+0x1f8>)
   1cc08:	7821      	ldrb	r1, [r4, #0]
   1cc0a:	2203      	movs	r2, #3
   1cc0c:	0030      	movs	r0, r6
   1cc0e:	f000 fa01 	bl	1d014 <memchr>
   1cc12:	2800      	cmp	r0, #0
   1cc14:	d006      	beq.n	1cc24 <_svfiprintf_r+0x140>
   1cc16:	2340      	movs	r3, #64	; 0x40
   1cc18:	1b80      	subs	r0, r0, r6
   1cc1a:	4083      	lsls	r3, r0
   1cc1c:	682a      	ldr	r2, [r5, #0]
   1cc1e:	3401      	adds	r4, #1
   1cc20:	4313      	orrs	r3, r2
   1cc22:	602b      	str	r3, [r5, #0]
   1cc24:	7821      	ldrb	r1, [r4, #0]
   1cc26:	2206      	movs	r2, #6
   1cc28:	482d      	ldr	r0, [pc, #180]	; (1cce0 <_svfiprintf_r+0x1fc>)
   1cc2a:	1c66      	adds	r6, r4, #1
   1cc2c:	7629      	strb	r1, [r5, #24]
   1cc2e:	f000 f9f1 	bl	1d014 <memchr>
   1cc32:	2800      	cmp	r0, #0
   1cc34:	d046      	beq.n	1ccc4 <_svfiprintf_r+0x1e0>
   1cc36:	4b2b      	ldr	r3, [pc, #172]	; (1cce4 <_svfiprintf_r+0x200>)
   1cc38:	2b00      	cmp	r3, #0
   1cc3a:	d12f      	bne.n	1cc9c <_svfiprintf_r+0x1b8>
   1cc3c:	6829      	ldr	r1, [r5, #0]
   1cc3e:	9b05      	ldr	r3, [sp, #20]
   1cc40:	2207      	movs	r2, #7
   1cc42:	05c9      	lsls	r1, r1, #23
   1cc44:	d528      	bpl.n	1cc98 <_svfiprintf_r+0x1b4>
   1cc46:	189b      	adds	r3, r3, r2
   1cc48:	4393      	bics	r3, r2
   1cc4a:	3308      	adds	r3, #8
   1cc4c:	9305      	str	r3, [sp, #20]
   1cc4e:	696b      	ldr	r3, [r5, #20]
   1cc50:	9a03      	ldr	r2, [sp, #12]
   1cc52:	189b      	adds	r3, r3, r2
   1cc54:	616b      	str	r3, [r5, #20]
   1cc56:	e767      	b.n	1cb28 <_svfiprintf_r+0x44>
   1cc58:	425b      	negs	r3, r3
   1cc5a:	60eb      	str	r3, [r5, #12]
   1cc5c:	2302      	movs	r3, #2
   1cc5e:	430b      	orrs	r3, r1
   1cc60:	602b      	str	r3, [r5, #0]
   1cc62:	e7c0      	b.n	1cbe6 <_svfiprintf_r+0x102>
   1cc64:	434b      	muls	r3, r1
   1cc66:	3401      	adds	r4, #1
   1cc68:	189b      	adds	r3, r3, r2
   1cc6a:	2001      	movs	r0, #1
   1cc6c:	e7a0      	b.n	1cbb0 <_svfiprintf_r+0xcc>
   1cc6e:	2301      	movs	r3, #1
   1cc70:	425b      	negs	r3, r3
   1cc72:	e7c7      	b.n	1cc04 <_svfiprintf_r+0x120>
   1cc74:	2300      	movs	r3, #0
   1cc76:	0014      	movs	r4, r2
   1cc78:	200a      	movs	r0, #10
   1cc7a:	001a      	movs	r2, r3
   1cc7c:	606b      	str	r3, [r5, #4]
   1cc7e:	7821      	ldrb	r1, [r4, #0]
   1cc80:	3930      	subs	r1, #48	; 0x30
   1cc82:	2909      	cmp	r1, #9
   1cc84:	d903      	bls.n	1cc8e <_svfiprintf_r+0x1aa>
   1cc86:	2b00      	cmp	r3, #0
   1cc88:	d0bd      	beq.n	1cc06 <_svfiprintf_r+0x122>
   1cc8a:	9207      	str	r2, [sp, #28]
   1cc8c:	e7bb      	b.n	1cc06 <_svfiprintf_r+0x122>
   1cc8e:	4342      	muls	r2, r0
   1cc90:	3401      	adds	r4, #1
   1cc92:	1852      	adds	r2, r2, r1
   1cc94:	2301      	movs	r3, #1
   1cc96:	e7f2      	b.n	1cc7e <_svfiprintf_r+0x19a>
   1cc98:	3307      	adds	r3, #7
   1cc9a:	e7d5      	b.n	1cc48 <_svfiprintf_r+0x164>
   1cc9c:	ab05      	add	r3, sp, #20
   1cc9e:	9300      	str	r3, [sp, #0]
   1cca0:	003a      	movs	r2, r7
   1cca2:	4b11      	ldr	r3, [pc, #68]	; (1cce8 <_svfiprintf_r+0x204>)
   1cca4:	0029      	movs	r1, r5
   1cca6:	9802      	ldr	r0, [sp, #8]
   1cca8:	e000      	b.n	1ccac <_svfiprintf_r+0x1c8>
   1ccaa:	bf00      	nop
   1ccac:	9003      	str	r0, [sp, #12]
   1ccae:	9b03      	ldr	r3, [sp, #12]
   1ccb0:	3301      	adds	r3, #1
   1ccb2:	d1cc      	bne.n	1cc4e <_svfiprintf_r+0x16a>
   1ccb4:	89bb      	ldrh	r3, [r7, #12]
   1ccb6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1ccb8:	065b      	lsls	r3, r3, #25
   1ccba:	d400      	bmi.n	1ccbe <_svfiprintf_r+0x1da>
   1ccbc:	e729      	b.n	1cb12 <_svfiprintf_r+0x2e>
   1ccbe:	2001      	movs	r0, #1
   1ccc0:	4240      	negs	r0, r0
   1ccc2:	e726      	b.n	1cb12 <_svfiprintf_r+0x2e>
   1ccc4:	ab05      	add	r3, sp, #20
   1ccc6:	9300      	str	r3, [sp, #0]
   1ccc8:	003a      	movs	r2, r7
   1ccca:	4b07      	ldr	r3, [pc, #28]	; (1cce8 <_svfiprintf_r+0x204>)
   1cccc:	0029      	movs	r1, r5
   1ccce:	9802      	ldr	r0, [sp, #8]
   1ccd0:	f000 f87a 	bl	1cdc8 <_printf_i>
   1ccd4:	e7ea      	b.n	1ccac <_svfiprintf_r+0x1c8>
   1ccd6:	46c0      	nop			; (mov r8, r8)
   1ccd8:	0001e7e6 	.word	0x0001e7e6
   1ccdc:	0001e7ec 	.word	0x0001e7ec
   1cce0:	0001e7f0 	.word	0x0001e7f0
   1cce4:	00000000 	.word	0x00000000
   1cce8:	0001ca21 	.word	0x0001ca21

0001ccec <_printf_common>:
   1ccec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ccee:	0015      	movs	r5, r2
   1ccf0:	9301      	str	r3, [sp, #4]
   1ccf2:	688a      	ldr	r2, [r1, #8]
   1ccf4:	690b      	ldr	r3, [r1, #16]
   1ccf6:	9000      	str	r0, [sp, #0]
   1ccf8:	000c      	movs	r4, r1
   1ccfa:	4293      	cmp	r3, r2
   1ccfc:	da00      	bge.n	1cd00 <_printf_common+0x14>
   1ccfe:	0013      	movs	r3, r2
   1cd00:	0022      	movs	r2, r4
   1cd02:	602b      	str	r3, [r5, #0]
   1cd04:	3243      	adds	r2, #67	; 0x43
   1cd06:	7812      	ldrb	r2, [r2, #0]
   1cd08:	2a00      	cmp	r2, #0
   1cd0a:	d001      	beq.n	1cd10 <_printf_common+0x24>
   1cd0c:	3301      	adds	r3, #1
   1cd0e:	602b      	str	r3, [r5, #0]
   1cd10:	6823      	ldr	r3, [r4, #0]
   1cd12:	069b      	lsls	r3, r3, #26
   1cd14:	d502      	bpl.n	1cd1c <_printf_common+0x30>
   1cd16:	682b      	ldr	r3, [r5, #0]
   1cd18:	3302      	adds	r3, #2
   1cd1a:	602b      	str	r3, [r5, #0]
   1cd1c:	2706      	movs	r7, #6
   1cd1e:	6823      	ldr	r3, [r4, #0]
   1cd20:	401f      	ands	r7, r3
   1cd22:	d027      	beq.n	1cd74 <_printf_common+0x88>
   1cd24:	0023      	movs	r3, r4
   1cd26:	3343      	adds	r3, #67	; 0x43
   1cd28:	781b      	ldrb	r3, [r3, #0]
   1cd2a:	1e5a      	subs	r2, r3, #1
   1cd2c:	4193      	sbcs	r3, r2
   1cd2e:	6822      	ldr	r2, [r4, #0]
   1cd30:	0692      	lsls	r2, r2, #26
   1cd32:	d430      	bmi.n	1cd96 <_printf_common+0xaa>
   1cd34:	0022      	movs	r2, r4
   1cd36:	9901      	ldr	r1, [sp, #4]
   1cd38:	3243      	adds	r2, #67	; 0x43
   1cd3a:	9800      	ldr	r0, [sp, #0]
   1cd3c:	9e08      	ldr	r6, [sp, #32]
   1cd3e:	47b0      	blx	r6
   1cd40:	1c43      	adds	r3, r0, #1
   1cd42:	d025      	beq.n	1cd90 <_printf_common+0xa4>
   1cd44:	2306      	movs	r3, #6
   1cd46:	6820      	ldr	r0, [r4, #0]
   1cd48:	682a      	ldr	r2, [r5, #0]
   1cd4a:	68e1      	ldr	r1, [r4, #12]
   1cd4c:	4003      	ands	r3, r0
   1cd4e:	2500      	movs	r5, #0
   1cd50:	2b04      	cmp	r3, #4
   1cd52:	d103      	bne.n	1cd5c <_printf_common+0x70>
   1cd54:	1a8d      	subs	r5, r1, r2
   1cd56:	43eb      	mvns	r3, r5
   1cd58:	17db      	asrs	r3, r3, #31
   1cd5a:	401d      	ands	r5, r3
   1cd5c:	68a3      	ldr	r3, [r4, #8]
   1cd5e:	6922      	ldr	r2, [r4, #16]
   1cd60:	4293      	cmp	r3, r2
   1cd62:	dd01      	ble.n	1cd68 <_printf_common+0x7c>
   1cd64:	1a9b      	subs	r3, r3, r2
   1cd66:	18ed      	adds	r5, r5, r3
   1cd68:	2700      	movs	r7, #0
   1cd6a:	42bd      	cmp	r5, r7
   1cd6c:	d120      	bne.n	1cdb0 <_printf_common+0xc4>
   1cd6e:	2000      	movs	r0, #0
   1cd70:	e010      	b.n	1cd94 <_printf_common+0xa8>
   1cd72:	3701      	adds	r7, #1
   1cd74:	68e3      	ldr	r3, [r4, #12]
   1cd76:	682a      	ldr	r2, [r5, #0]
   1cd78:	1a9b      	subs	r3, r3, r2
   1cd7a:	429f      	cmp	r7, r3
   1cd7c:	dad2      	bge.n	1cd24 <_printf_common+0x38>
   1cd7e:	0022      	movs	r2, r4
   1cd80:	2301      	movs	r3, #1
   1cd82:	3219      	adds	r2, #25
   1cd84:	9901      	ldr	r1, [sp, #4]
   1cd86:	9800      	ldr	r0, [sp, #0]
   1cd88:	9e08      	ldr	r6, [sp, #32]
   1cd8a:	47b0      	blx	r6
   1cd8c:	1c43      	adds	r3, r0, #1
   1cd8e:	d1f0      	bne.n	1cd72 <_printf_common+0x86>
   1cd90:	2001      	movs	r0, #1
   1cd92:	4240      	negs	r0, r0
   1cd94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1cd96:	2030      	movs	r0, #48	; 0x30
   1cd98:	18e1      	adds	r1, r4, r3
   1cd9a:	3143      	adds	r1, #67	; 0x43
   1cd9c:	7008      	strb	r0, [r1, #0]
   1cd9e:	0021      	movs	r1, r4
   1cda0:	1c5a      	adds	r2, r3, #1
   1cda2:	3145      	adds	r1, #69	; 0x45
   1cda4:	7809      	ldrb	r1, [r1, #0]
   1cda6:	18a2      	adds	r2, r4, r2
   1cda8:	3243      	adds	r2, #67	; 0x43
   1cdaa:	3302      	adds	r3, #2
   1cdac:	7011      	strb	r1, [r2, #0]
   1cdae:	e7c1      	b.n	1cd34 <_printf_common+0x48>
   1cdb0:	0022      	movs	r2, r4
   1cdb2:	2301      	movs	r3, #1
   1cdb4:	321a      	adds	r2, #26
   1cdb6:	9901      	ldr	r1, [sp, #4]
   1cdb8:	9800      	ldr	r0, [sp, #0]
   1cdba:	9e08      	ldr	r6, [sp, #32]
   1cdbc:	47b0      	blx	r6
   1cdbe:	1c43      	adds	r3, r0, #1
   1cdc0:	d0e6      	beq.n	1cd90 <_printf_common+0xa4>
   1cdc2:	3701      	adds	r7, #1
   1cdc4:	e7d1      	b.n	1cd6a <_printf_common+0x7e>
	...

0001cdc8 <_printf_i>:
   1cdc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cdca:	b08b      	sub	sp, #44	; 0x2c
   1cdcc:	9206      	str	r2, [sp, #24]
   1cdce:	000a      	movs	r2, r1
   1cdd0:	3243      	adds	r2, #67	; 0x43
   1cdd2:	9307      	str	r3, [sp, #28]
   1cdd4:	9005      	str	r0, [sp, #20]
   1cdd6:	9204      	str	r2, [sp, #16]
   1cdd8:	7e0a      	ldrb	r2, [r1, #24]
   1cdda:	000c      	movs	r4, r1
   1cddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1cdde:	2a6e      	cmp	r2, #110	; 0x6e
   1cde0:	d100      	bne.n	1cde4 <_printf_i+0x1c>
   1cde2:	e08f      	b.n	1cf04 <_printf_i+0x13c>
   1cde4:	d817      	bhi.n	1ce16 <_printf_i+0x4e>
   1cde6:	2a63      	cmp	r2, #99	; 0x63
   1cde8:	d02c      	beq.n	1ce44 <_printf_i+0x7c>
   1cdea:	d808      	bhi.n	1cdfe <_printf_i+0x36>
   1cdec:	2a00      	cmp	r2, #0
   1cdee:	d100      	bne.n	1cdf2 <_printf_i+0x2a>
   1cdf0:	e099      	b.n	1cf26 <_printf_i+0x15e>
   1cdf2:	2a58      	cmp	r2, #88	; 0x58
   1cdf4:	d054      	beq.n	1cea0 <_printf_i+0xd8>
   1cdf6:	0026      	movs	r6, r4
   1cdf8:	3642      	adds	r6, #66	; 0x42
   1cdfa:	7032      	strb	r2, [r6, #0]
   1cdfc:	e029      	b.n	1ce52 <_printf_i+0x8a>
   1cdfe:	2a64      	cmp	r2, #100	; 0x64
   1ce00:	d001      	beq.n	1ce06 <_printf_i+0x3e>
   1ce02:	2a69      	cmp	r2, #105	; 0x69
   1ce04:	d1f7      	bne.n	1cdf6 <_printf_i+0x2e>
   1ce06:	6821      	ldr	r1, [r4, #0]
   1ce08:	681a      	ldr	r2, [r3, #0]
   1ce0a:	0608      	lsls	r0, r1, #24
   1ce0c:	d523      	bpl.n	1ce56 <_printf_i+0x8e>
   1ce0e:	1d11      	adds	r1, r2, #4
   1ce10:	6019      	str	r1, [r3, #0]
   1ce12:	6815      	ldr	r5, [r2, #0]
   1ce14:	e025      	b.n	1ce62 <_printf_i+0x9a>
   1ce16:	2a73      	cmp	r2, #115	; 0x73
   1ce18:	d100      	bne.n	1ce1c <_printf_i+0x54>
   1ce1a:	e088      	b.n	1cf2e <_printf_i+0x166>
   1ce1c:	d808      	bhi.n	1ce30 <_printf_i+0x68>
   1ce1e:	2a6f      	cmp	r2, #111	; 0x6f
   1ce20:	d029      	beq.n	1ce76 <_printf_i+0xae>
   1ce22:	2a70      	cmp	r2, #112	; 0x70
   1ce24:	d1e7      	bne.n	1cdf6 <_printf_i+0x2e>
   1ce26:	2220      	movs	r2, #32
   1ce28:	6809      	ldr	r1, [r1, #0]
   1ce2a:	430a      	orrs	r2, r1
   1ce2c:	6022      	str	r2, [r4, #0]
   1ce2e:	e003      	b.n	1ce38 <_printf_i+0x70>
   1ce30:	2a75      	cmp	r2, #117	; 0x75
   1ce32:	d020      	beq.n	1ce76 <_printf_i+0xae>
   1ce34:	2a78      	cmp	r2, #120	; 0x78
   1ce36:	d1de      	bne.n	1cdf6 <_printf_i+0x2e>
   1ce38:	0022      	movs	r2, r4
   1ce3a:	2178      	movs	r1, #120	; 0x78
   1ce3c:	3245      	adds	r2, #69	; 0x45
   1ce3e:	7011      	strb	r1, [r2, #0]
   1ce40:	4a6c      	ldr	r2, [pc, #432]	; (1cff4 <_printf_i+0x22c>)
   1ce42:	e030      	b.n	1cea6 <_printf_i+0xde>
   1ce44:	000e      	movs	r6, r1
   1ce46:	681a      	ldr	r2, [r3, #0]
   1ce48:	3642      	adds	r6, #66	; 0x42
   1ce4a:	1d11      	adds	r1, r2, #4
   1ce4c:	6019      	str	r1, [r3, #0]
   1ce4e:	6813      	ldr	r3, [r2, #0]
   1ce50:	7033      	strb	r3, [r6, #0]
   1ce52:	2301      	movs	r3, #1
   1ce54:	e079      	b.n	1cf4a <_printf_i+0x182>
   1ce56:	0649      	lsls	r1, r1, #25
   1ce58:	d5d9      	bpl.n	1ce0e <_printf_i+0x46>
   1ce5a:	1d11      	adds	r1, r2, #4
   1ce5c:	6019      	str	r1, [r3, #0]
   1ce5e:	2300      	movs	r3, #0
   1ce60:	5ed5      	ldrsh	r5, [r2, r3]
   1ce62:	2d00      	cmp	r5, #0
   1ce64:	da03      	bge.n	1ce6e <_printf_i+0xa6>
   1ce66:	232d      	movs	r3, #45	; 0x2d
   1ce68:	9a04      	ldr	r2, [sp, #16]
   1ce6a:	426d      	negs	r5, r5
   1ce6c:	7013      	strb	r3, [r2, #0]
   1ce6e:	4b62      	ldr	r3, [pc, #392]	; (1cff8 <_printf_i+0x230>)
   1ce70:	270a      	movs	r7, #10
   1ce72:	9303      	str	r3, [sp, #12]
   1ce74:	e02f      	b.n	1ced6 <_printf_i+0x10e>
   1ce76:	6820      	ldr	r0, [r4, #0]
   1ce78:	6819      	ldr	r1, [r3, #0]
   1ce7a:	0605      	lsls	r5, r0, #24
   1ce7c:	d503      	bpl.n	1ce86 <_printf_i+0xbe>
   1ce7e:	1d08      	adds	r0, r1, #4
   1ce80:	6018      	str	r0, [r3, #0]
   1ce82:	680d      	ldr	r5, [r1, #0]
   1ce84:	e005      	b.n	1ce92 <_printf_i+0xca>
   1ce86:	0640      	lsls	r0, r0, #25
   1ce88:	d5f9      	bpl.n	1ce7e <_printf_i+0xb6>
   1ce8a:	680d      	ldr	r5, [r1, #0]
   1ce8c:	1d08      	adds	r0, r1, #4
   1ce8e:	6018      	str	r0, [r3, #0]
   1ce90:	b2ad      	uxth	r5, r5
   1ce92:	4b59      	ldr	r3, [pc, #356]	; (1cff8 <_printf_i+0x230>)
   1ce94:	2708      	movs	r7, #8
   1ce96:	9303      	str	r3, [sp, #12]
   1ce98:	2a6f      	cmp	r2, #111	; 0x6f
   1ce9a:	d018      	beq.n	1cece <_printf_i+0x106>
   1ce9c:	270a      	movs	r7, #10
   1ce9e:	e016      	b.n	1cece <_printf_i+0x106>
   1cea0:	3145      	adds	r1, #69	; 0x45
   1cea2:	700a      	strb	r2, [r1, #0]
   1cea4:	4a54      	ldr	r2, [pc, #336]	; (1cff8 <_printf_i+0x230>)
   1cea6:	9203      	str	r2, [sp, #12]
   1cea8:	681a      	ldr	r2, [r3, #0]
   1ceaa:	6821      	ldr	r1, [r4, #0]
   1ceac:	1d10      	adds	r0, r2, #4
   1ceae:	6018      	str	r0, [r3, #0]
   1ceb0:	6815      	ldr	r5, [r2, #0]
   1ceb2:	0608      	lsls	r0, r1, #24
   1ceb4:	d522      	bpl.n	1cefc <_printf_i+0x134>
   1ceb6:	07cb      	lsls	r3, r1, #31
   1ceb8:	d502      	bpl.n	1cec0 <_printf_i+0xf8>
   1ceba:	2320      	movs	r3, #32
   1cebc:	4319      	orrs	r1, r3
   1cebe:	6021      	str	r1, [r4, #0]
   1cec0:	2710      	movs	r7, #16
   1cec2:	2d00      	cmp	r5, #0
   1cec4:	d103      	bne.n	1cece <_printf_i+0x106>
   1cec6:	2320      	movs	r3, #32
   1cec8:	6822      	ldr	r2, [r4, #0]
   1ceca:	439a      	bics	r2, r3
   1cecc:	6022      	str	r2, [r4, #0]
   1cece:	0023      	movs	r3, r4
   1ced0:	2200      	movs	r2, #0
   1ced2:	3343      	adds	r3, #67	; 0x43
   1ced4:	701a      	strb	r2, [r3, #0]
   1ced6:	6863      	ldr	r3, [r4, #4]
   1ced8:	60a3      	str	r3, [r4, #8]
   1ceda:	2b00      	cmp	r3, #0
   1cedc:	db5c      	blt.n	1cf98 <_printf_i+0x1d0>
   1cede:	2204      	movs	r2, #4
   1cee0:	6821      	ldr	r1, [r4, #0]
   1cee2:	4391      	bics	r1, r2
   1cee4:	6021      	str	r1, [r4, #0]
   1cee6:	2d00      	cmp	r5, #0
   1cee8:	d158      	bne.n	1cf9c <_printf_i+0x1d4>
   1ceea:	9e04      	ldr	r6, [sp, #16]
   1ceec:	2b00      	cmp	r3, #0
   1ceee:	d064      	beq.n	1cfba <_printf_i+0x1f2>
   1cef0:	0026      	movs	r6, r4
   1cef2:	9b03      	ldr	r3, [sp, #12]
   1cef4:	3642      	adds	r6, #66	; 0x42
   1cef6:	781b      	ldrb	r3, [r3, #0]
   1cef8:	7033      	strb	r3, [r6, #0]
   1cefa:	e05e      	b.n	1cfba <_printf_i+0x1f2>
   1cefc:	0648      	lsls	r0, r1, #25
   1cefe:	d5da      	bpl.n	1ceb6 <_printf_i+0xee>
   1cf00:	b2ad      	uxth	r5, r5
   1cf02:	e7d8      	b.n	1ceb6 <_printf_i+0xee>
   1cf04:	6809      	ldr	r1, [r1, #0]
   1cf06:	681a      	ldr	r2, [r3, #0]
   1cf08:	0608      	lsls	r0, r1, #24
   1cf0a:	d505      	bpl.n	1cf18 <_printf_i+0x150>
   1cf0c:	1d11      	adds	r1, r2, #4
   1cf0e:	6019      	str	r1, [r3, #0]
   1cf10:	6813      	ldr	r3, [r2, #0]
   1cf12:	6962      	ldr	r2, [r4, #20]
   1cf14:	601a      	str	r2, [r3, #0]
   1cf16:	e006      	b.n	1cf26 <_printf_i+0x15e>
   1cf18:	0649      	lsls	r1, r1, #25
   1cf1a:	d5f7      	bpl.n	1cf0c <_printf_i+0x144>
   1cf1c:	1d11      	adds	r1, r2, #4
   1cf1e:	6019      	str	r1, [r3, #0]
   1cf20:	6813      	ldr	r3, [r2, #0]
   1cf22:	8aa2      	ldrh	r2, [r4, #20]
   1cf24:	801a      	strh	r2, [r3, #0]
   1cf26:	2300      	movs	r3, #0
   1cf28:	9e04      	ldr	r6, [sp, #16]
   1cf2a:	6123      	str	r3, [r4, #16]
   1cf2c:	e054      	b.n	1cfd8 <_printf_i+0x210>
   1cf2e:	681a      	ldr	r2, [r3, #0]
   1cf30:	1d11      	adds	r1, r2, #4
   1cf32:	6019      	str	r1, [r3, #0]
   1cf34:	6816      	ldr	r6, [r2, #0]
   1cf36:	2100      	movs	r1, #0
   1cf38:	6862      	ldr	r2, [r4, #4]
   1cf3a:	0030      	movs	r0, r6
   1cf3c:	f000 f86a 	bl	1d014 <memchr>
   1cf40:	2800      	cmp	r0, #0
   1cf42:	d001      	beq.n	1cf48 <_printf_i+0x180>
   1cf44:	1b80      	subs	r0, r0, r6
   1cf46:	6060      	str	r0, [r4, #4]
   1cf48:	6863      	ldr	r3, [r4, #4]
   1cf4a:	6123      	str	r3, [r4, #16]
   1cf4c:	2300      	movs	r3, #0
   1cf4e:	9a04      	ldr	r2, [sp, #16]
   1cf50:	7013      	strb	r3, [r2, #0]
   1cf52:	e041      	b.n	1cfd8 <_printf_i+0x210>
   1cf54:	6923      	ldr	r3, [r4, #16]
   1cf56:	0032      	movs	r2, r6
   1cf58:	9906      	ldr	r1, [sp, #24]
   1cf5a:	9805      	ldr	r0, [sp, #20]
   1cf5c:	9d07      	ldr	r5, [sp, #28]
   1cf5e:	47a8      	blx	r5
   1cf60:	1c43      	adds	r3, r0, #1
   1cf62:	d043      	beq.n	1cfec <_printf_i+0x224>
   1cf64:	6823      	ldr	r3, [r4, #0]
   1cf66:	2500      	movs	r5, #0
   1cf68:	079b      	lsls	r3, r3, #30
   1cf6a:	d40f      	bmi.n	1cf8c <_printf_i+0x1c4>
   1cf6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cf6e:	68e0      	ldr	r0, [r4, #12]
   1cf70:	4298      	cmp	r0, r3
   1cf72:	da3d      	bge.n	1cff0 <_printf_i+0x228>
   1cf74:	0018      	movs	r0, r3
   1cf76:	e03b      	b.n	1cff0 <_printf_i+0x228>
   1cf78:	0022      	movs	r2, r4
   1cf7a:	2301      	movs	r3, #1
   1cf7c:	3219      	adds	r2, #25
   1cf7e:	9906      	ldr	r1, [sp, #24]
   1cf80:	9805      	ldr	r0, [sp, #20]
   1cf82:	9e07      	ldr	r6, [sp, #28]
   1cf84:	47b0      	blx	r6
   1cf86:	1c43      	adds	r3, r0, #1
   1cf88:	d030      	beq.n	1cfec <_printf_i+0x224>
   1cf8a:	3501      	adds	r5, #1
   1cf8c:	68e3      	ldr	r3, [r4, #12]
   1cf8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cf90:	1a9b      	subs	r3, r3, r2
   1cf92:	429d      	cmp	r5, r3
   1cf94:	dbf0      	blt.n	1cf78 <_printf_i+0x1b0>
   1cf96:	e7e9      	b.n	1cf6c <_printf_i+0x1a4>
   1cf98:	2d00      	cmp	r5, #0
   1cf9a:	d0a9      	beq.n	1cef0 <_printf_i+0x128>
   1cf9c:	9e04      	ldr	r6, [sp, #16]
   1cf9e:	0028      	movs	r0, r5
   1cfa0:	0039      	movs	r1, r7
   1cfa2:	f7fd fe37 	bl	1ac14 <__aeabi_uidivmod>
   1cfa6:	9b03      	ldr	r3, [sp, #12]
   1cfa8:	3e01      	subs	r6, #1
   1cfaa:	5c5b      	ldrb	r3, [r3, r1]
   1cfac:	0028      	movs	r0, r5
   1cfae:	7033      	strb	r3, [r6, #0]
   1cfb0:	0039      	movs	r1, r7
   1cfb2:	f7fd fda9 	bl	1ab08 <__udivsi3>
   1cfb6:	1e05      	subs	r5, r0, #0
   1cfb8:	d1f1      	bne.n	1cf9e <_printf_i+0x1d6>
   1cfba:	2f08      	cmp	r7, #8
   1cfbc:	d109      	bne.n	1cfd2 <_printf_i+0x20a>
   1cfbe:	6823      	ldr	r3, [r4, #0]
   1cfc0:	07db      	lsls	r3, r3, #31
   1cfc2:	d506      	bpl.n	1cfd2 <_printf_i+0x20a>
   1cfc4:	6863      	ldr	r3, [r4, #4]
   1cfc6:	6922      	ldr	r2, [r4, #16]
   1cfc8:	4293      	cmp	r3, r2
   1cfca:	dc02      	bgt.n	1cfd2 <_printf_i+0x20a>
   1cfcc:	2330      	movs	r3, #48	; 0x30
   1cfce:	3e01      	subs	r6, #1
   1cfd0:	7033      	strb	r3, [r6, #0]
   1cfd2:	9b04      	ldr	r3, [sp, #16]
   1cfd4:	1b9b      	subs	r3, r3, r6
   1cfd6:	6123      	str	r3, [r4, #16]
   1cfd8:	9b07      	ldr	r3, [sp, #28]
   1cfda:	aa09      	add	r2, sp, #36	; 0x24
   1cfdc:	9300      	str	r3, [sp, #0]
   1cfde:	0021      	movs	r1, r4
   1cfe0:	9b06      	ldr	r3, [sp, #24]
   1cfe2:	9805      	ldr	r0, [sp, #20]
   1cfe4:	f7ff fe82 	bl	1ccec <_printf_common>
   1cfe8:	1c43      	adds	r3, r0, #1
   1cfea:	d1b3      	bne.n	1cf54 <_printf_i+0x18c>
   1cfec:	2001      	movs	r0, #1
   1cfee:	4240      	negs	r0, r0
   1cff0:	b00b      	add	sp, #44	; 0x2c
   1cff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cff4:	0001e808 	.word	0x0001e808
   1cff8:	0001e7f7 	.word	0x0001e7f7

0001cffc <__ascii_wctomb>:
   1cffc:	1e0b      	subs	r3, r1, #0
   1cffe:	d004      	beq.n	1d00a <__ascii_wctomb+0xe>
   1d000:	2aff      	cmp	r2, #255	; 0xff
   1d002:	d904      	bls.n	1d00e <__ascii_wctomb+0x12>
   1d004:	238a      	movs	r3, #138	; 0x8a
   1d006:	6003      	str	r3, [r0, #0]
   1d008:	3b8b      	subs	r3, #139	; 0x8b
   1d00a:	0018      	movs	r0, r3
   1d00c:	4770      	bx	lr
   1d00e:	700a      	strb	r2, [r1, #0]
   1d010:	2301      	movs	r3, #1
   1d012:	e7fa      	b.n	1d00a <__ascii_wctomb+0xe>

0001d014 <memchr>:
   1d014:	b2c9      	uxtb	r1, r1
   1d016:	1882      	adds	r2, r0, r2
   1d018:	4290      	cmp	r0, r2
   1d01a:	d101      	bne.n	1d020 <memchr+0xc>
   1d01c:	2000      	movs	r0, #0
   1d01e:	4770      	bx	lr
   1d020:	7803      	ldrb	r3, [r0, #0]
   1d022:	428b      	cmp	r3, r1
   1d024:	d0fb      	beq.n	1d01e <memchr+0xa>
   1d026:	3001      	adds	r0, #1
   1d028:	e7f6      	b.n	1d018 <memchr+0x4>

0001d02a <_realloc_r>:
   1d02a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d02c:	0007      	movs	r7, r0
   1d02e:	000d      	movs	r5, r1
   1d030:	0016      	movs	r6, r2
   1d032:	2900      	cmp	r1, #0
   1d034:	d105      	bne.n	1d042 <_realloc_r+0x18>
   1d036:	0011      	movs	r1, r2
   1d038:	f7ff fb22 	bl	1c680 <_malloc_r>
   1d03c:	0004      	movs	r4, r0
   1d03e:	0020      	movs	r0, r4
   1d040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d042:	2a00      	cmp	r2, #0
   1d044:	d103      	bne.n	1d04e <_realloc_r+0x24>
   1d046:	f7ff fad1 	bl	1c5ec <_free_r>
   1d04a:	0034      	movs	r4, r6
   1d04c:	e7f7      	b.n	1d03e <_realloc_r+0x14>
   1d04e:	f000 f812 	bl	1d076 <_malloc_usable_size_r>
   1d052:	002c      	movs	r4, r5
   1d054:	4286      	cmp	r6, r0
   1d056:	d9f2      	bls.n	1d03e <_realloc_r+0x14>
   1d058:	0031      	movs	r1, r6
   1d05a:	0038      	movs	r0, r7
   1d05c:	f7ff fb10 	bl	1c680 <_malloc_r>
   1d060:	1e04      	subs	r4, r0, #0
   1d062:	d0ec      	beq.n	1d03e <_realloc_r+0x14>
   1d064:	0029      	movs	r1, r5
   1d066:	0032      	movs	r2, r6
   1d068:	f7ff fa9c 	bl	1c5a4 <memcpy>
   1d06c:	0029      	movs	r1, r5
   1d06e:	0038      	movs	r0, r7
   1d070:	f7ff fabc 	bl	1c5ec <_free_r>
   1d074:	e7e3      	b.n	1d03e <_realloc_r+0x14>

0001d076 <_malloc_usable_size_r>:
   1d076:	1f0b      	subs	r3, r1, #4
   1d078:	681b      	ldr	r3, [r3, #0]
   1d07a:	1f18      	subs	r0, r3, #4
   1d07c:	2b00      	cmp	r3, #0
   1d07e:	da01      	bge.n	1d084 <_malloc_usable_size_r+0xe>
   1d080:	580b      	ldr	r3, [r1, r0]
   1d082:	18c0      	adds	r0, r0, r3
   1d084:	4770      	bx	lr
   1d086:	0000      	movs	r0, r0
   1d088:	65657246 	.word	0x65657246
   1d08c:	534f5452 	.word	0x534f5452
   1d090:	494c4320 	.word	0x494c4320
   1d094:	540a0d2e 	.word	0x540a0d2e
   1d098:	20657079 	.word	0x20657079
   1d09c:	706c6548 	.word	0x706c6548
   1d0a0:	206f7420 	.word	0x206f7420
   1d0a4:	77656976 	.word	0x77656976
   1d0a8:	6c206120 	.word	0x6c206120
   1d0ac:	20747369 	.word	0x20747369
   1d0b0:	7220666f 	.word	0x7220666f
   1d0b4:	73696765 	.word	0x73696765
   1d0b8:	65726574 	.word	0x65726574
   1d0bc:	6f632064 	.word	0x6f632064
   1d0c0:	6e616d6d 	.word	0x6e616d6d
   1d0c4:	0d2e7364 	.word	0x0d2e7364
   1d0c8:	0000000a 	.word	0x0000000a
   1d0cc:	00534c41 	.word	0x00534c41
   1d0d0:	3a534c41 	.word	0x3a534c41
   1d0d4:	74655220 	.word	0x74655220
   1d0d8:	736e7275 	.word	0x736e7275
   1d0dc:	76206120 	.word	0x76206120
   1d0e0:	65756c61 	.word	0x65756c61
   1d0e4:	6f726620 	.word	0x6f726620
   1d0e8:	6874206d 	.word	0x6874206d
   1d0ec:	694c2065 	.word	0x694c2065
   1d0f0:	20746867 	.word	0x20746867
   1d0f4:	736e6553 	.word	0x736e6553
   1d0f8:	0a0d726f 	.word	0x0a0d726f
   1d0fc:	00000000 	.word	0x00000000
   1d100:	65736572 	.word	0x65736572
   1d104:	00000074 	.word	0x00000074
   1d108:	65736572 	.word	0x65736572
   1d10c:	52203a74 	.word	0x52203a74
   1d110:	74657365 	.word	0x74657365
   1d114:	68742073 	.word	0x68742073
   1d118:	65642065 	.word	0x65642065
   1d11c:	65636976 	.word	0x65636976
   1d120:	00000a0d 	.word	0x00000a0d
   1d124:	0064656c 	.word	0x0064656c
   1d128:	2064656c 	.word	0x2064656c
   1d12c:	79656b5b 	.word	0x79656b5b
   1d130:	5d6d756e 	.word	0x5d6d756e
   1d134:	5b5d525b 	.word	0x5b5d525b
   1d138:	425b5d47 	.word	0x425b5d47
   1d13c:	53203a5d 	.word	0x53203a5d
   1d140:	20737465 	.word	0x20737465
   1d144:	20656874 	.word	0x20656874
   1d148:	65766967 	.word	0x65766967
   1d14c:	454c206e 	.word	0x454c206e
   1d150:	6f742044 	.word	0x6f742044
   1d154:	65687420 	.word	0x65687420
   1d158:	76696720 	.word	0x76696720
   1d15c:	52206e65 	.word	0x52206e65
   1d160:	422c472c 	.word	0x422c472c
   1d164:	6c617620 	.word	0x6c617620
   1d168:	2e736575 	.word	0x2e736575
   1d16c:	00000a0d 	.word	0x00000a0d
   1d170:	77617264 	.word	0x77617264
   1d174:	00000000 	.word	0x00000000
   1d178:	77617264 	.word	0x77617264
   1d17c:	5d785b20 	.word	0x5d785b20
   1d180:	5b5d795b 	.word	0x5b5d795b
   1d184:	69646172 	.word	0x69646172
   1d188:	5b5d7375 	.word	0x5b5d7375
   1d18c:	6f6c6f63 	.word	0x6f6c6f63
   1d190:	203a5d72 	.word	0x203a5d72
   1d194:	77617264 	.word	0x77617264
   1d198:	63206120 	.word	0x63206120
   1d19c:	6c637269 	.word	0x6c637269
   1d1a0:	6e6f2065 	.word	0x6e6f2065
   1d1a4:	454c4f20 	.word	0x454c4f20
   1d1a8:	0a0d2e44 	.word	0x0a0d2e44
   1d1ac:	6c6f6320 	.word	0x6c6f6320
   1d1b0:	7320726f 	.word	0x7320726f
   1d1b4:	63656c65 	.word	0x63656c65
   1d1b8:	6e6f6974 	.word	0x6e6f6974
   1d1bc:	3028203a 	.word	0x3028203a
   1d1c0:	6c622029 	.word	0x6c622029
   1d1c4:	206b6361 	.word	0x206b6361
   1d1c8:	20293128 	.word	0x20293128
   1d1cc:	74696877 	.word	0x74696877
   1d1d0:	000a0d65 	.word	0x000a0d65
   1d1d4:	00736c63 	.word	0x00736c63
   1d1d8:	3a736c63 	.word	0x3a736c63
   1d1dc:	656c4320 	.word	0x656c4320
   1d1e0:	20737261 	.word	0x20737261
   1d1e4:	20656874 	.word	0x20656874
   1d1e8:	6d726574 	.word	0x6d726574
   1d1ec:	6c616e69 	.word	0x6c616e69
   1d1f0:	72637320 	.word	0x72637320
   1d1f4:	0d6e6565 	.word	0x0d6e6565
   1d1f8:	0000000a 	.word	0x0000000a
   1d1fc:	00000a0d 	.word	0x00000a0d
   1d200:	0000616f 	.word	0x0000616f
   1d204:	325b6325 	.word	0x325b6325
   1d208:	003e0d4b 	.word	0x003e0d4b
   1d20c:	00082008 	.word	0x00082008
   1d210:	6867694c 	.word	0x6867694c
   1d214:	4c412074 	.word	0x4c412074
   1d218:	25203a53 	.word	0x25203a53
   1d21c:	00000064 	.word	0x00000064
   1d220:	325b6325 	.word	0x325b6325
   1d224:	0000004a 	.word	0x0000004a
   1d228:	206f654e 	.word	0x206f654e
   1d22c:	6f727245 	.word	0x6f727245
   1d230:	0a0d2172 	.word	0x0a0d2172
   1d234:	00000000 	.word	0x00000000
   1d238:	63637553 	.word	0x63637553
   1d23c:	21737365 	.word	0x21737365
   1d240:	79654b20 	.word	0x79654b20
   1d244:	2075253a 	.word	0x2075253a
   1d248:	75253a52 	.word	0x75253a52
   1d24c:	253a4720 	.word	0x253a4720
   1d250:	3a422075 	.word	0x3a422075
   1d254:	0a0d7525 	.word	0x0a0d7525
   1d258:	00000020 	.word	0x00000020
   1d25c:	6c756f43 	.word	0x6c756f43
   1d260:	6f6e2064 	.word	0x6f6e2064
   1d264:	69642074 	.word	0x69642074
   1d268:	616c7073 	.word	0x616c7073
   1d26c:	6e6f2079 	.word	0x6e6f2079
   1d270:	454c4f20 	.word	0x454c4f20
   1d274:	0a0d2144 	.word	0x0a0d2144
   1d278:	00000000 	.word	0x00000000
   1d27c:	63726943 	.word	0x63726943
   1d280:	4f20656c 	.word	0x4f20656c
   1d284:	696c7475 	.word	0x696c7475
   1d288:	6920656e 	.word	0x6920656e
   1d28c:	72642073 	.word	0x72642073
   1d290:	216e7761 	.word	0x216e7761
   1d294:	00000a0d 	.word	0x00000a0d

0001d298 <xGetLightDataCommand>:
   1d298:	0001d0cc 0001d0d0 00012bd9 00000000     .........+......

0001d2a8 <xResetCommand>:
   1d2a8:	0001d100 0001d108 00012c59 00000000     ........Y,......

0001d2b8 <xNeotrellisTurnLEDCommand>:
   1d2b8:	0001d124 0001d128 00012c79 00000004     $...(...y,......

0001d2c8 <xOLEDdrawCircleCommand>:
   1d2c8:	0001d170 0001d178 00012dcd 00000004     p...x....-......

0001d2d8 <xClearScreen>:
   1d2d8:	0001d1d4 0001d1d8 00012c11 00000000     .........,......
   1d2e8:	6f727245 6e692072 61697469 697a696c     Error initializi
   1d2f8:	5320676e 61736565 0a0d2177 00000000     ng Seesaw!......
   1d308:	6f727245 2f722f72 0000006e 6e756f46     Error/r/n...Foun
   1d318:	65532064 77617365 2f722f21 0000006e     d Seesaw!/r/n...
   1d328:	6c756f43 6f6e2064 72772074 20657469     Could not write 
   1d338:	73656553 70207761 2f216e69 006e2f72     Seesaw pin!/r/n.
   1d348:	6c756f43 6f6e2064 65732074 65732074     Could not set se
   1d358:	77617365 6f654e20 65786970 7073206c     esaw Neopixel sp
   1d368:	21646565 6e2f722f 00000000 6c756f43     eed!/r/n....Coul
   1d378:	6f6e2064 65732074 65732074 77617365     d not set seesaw
   1d388:	6f654e20 65786970 756e206c 7265626d      Neopixel number
   1d398:	20666f20 69766564 2f736563 006e2f72      of devices/r/n.
   1d3a8:	6f727245 65722072 6e696461 65532067     Error reading Se
   1d3b8:	77617365 756f6320 2173746e 6e2f722f     esaw counts!/r/n
   1d3c8:	00000000 00001010 0000050e 6c756f43     ............Coul
   1d3d8:	6f6e2064 6e692074 61697469 657a696c     d not initialize
   1d3e8:	79654b20 21646170 6e2f722f 00000000      Keypad!/r/n....

0001d3f8 <font5x7>:
   1d3f8:	ff000805 00004b0c 3e000000 3e5b4f5b     .....K.....>[O[>
   1d408:	6b4f6b3e 7c3e1c3e 3c181c3e 1c183c7e     >kOk>.>|>..<~<..
   1d418:	1c577d57 5e7f5e1c 3c18001c e7ff0018     W}W..^.^...<....
   1d428:	00ffe7c3 00182418 e7dbe7ff 3a4830ff     .....$.......0H:
   1d438:	29260e06 40262979 0705057f 25057f40     ..&)y)&@....@..%
   1d448:	e73c5a3f 3e7f5a3c 08081c1c 7f3e1c1c     ?Z<.<Z.>......>.
   1d458:	227f2214 005f5f14 09065f5f 007f017f     .".".__.__......
   1d468:	6a958966 60606060 ffa29460 040894a2     f..j`````.......
   1d478:	1008047e 10207e20 1c2a0808 2a1c0808     ~... ~ ...*....*
   1d488:	101e0808 0c101010 0c1e0c1e 383e3830     ............08>8
   1d498:	3e0e0630 0000060e 00000000 00005f00     0..>........._..
   1d4a8:	07000700 147f1400 2a24147f 23122a7f     ..........$*.*.#
   1d4b8:	62640813 20564936 07080050 1c000003     ..db6IV P.......
   1d4c8:	00004122 001c2241 1c7f1c2a 3e08082a     "A..A"..*...*..>
   1d4d8:	80000808 08003070 08080808 60600000     ....p0........``
   1d4e8:	08102000 513e0204 003e4549 00407f42     . ....>QIE>.B.@.
   1d4f8:	49494972 49412146 1418334d 27107f12     rIIIF!AIM3.....'
   1d508:	39454545 49494a3c 11214131 49360709     EEE9<JII1A!...6I
   1d518:	46364949 1e294949 00140000 34400000     II6FII).......@4
   1d528:	08000000 14412214 14141414 14224100     ....."A......A".
   1d538:	59010208 413e0609 7c4e595d 7c121112     ...Y..>A]YN|...|
   1d548:	4949497f 41413e36 417f2241 7f3e4141     .III6>AAA".AAA>.
   1d558:	41494949 0909097f 41413e01 087f7351     IIIA.....>AAQs..
   1d568:	007f0808 00417f41 3f414020 14087f01     ....A.A. @A?....
   1d578:	407f4122 7f404040 7f021c02 1008047f     "A.@@@@.........
   1d588:	41413e7f 097f3e41 3e060909 5e215141     .>AAA>.....>AQ!^
   1d598:	2919097f 49492646 01033249 3f03017f     ...)F&III2.....?
   1d5a8:	3f404040 2040201f 38403f1f 14633f40     @@@?. @ .?@8@?c.
   1d5b8:	03631408 03047804 4d495961 417f0043     ..c..x..aYIMC..A
   1d5c8:	04024141 00201008 7f414141 02010204     AA.... .AAA.....
   1d5d8:	40404004 03004040 20000807 40785454     .@@@@@..... TTx@
   1d5e8:	4444287f 44443838 44382844 387f2844     .(DD88DDD(8DD(.8
   1d5f8:	18545454 097e0800 a4a41802 087f789c     TTT...~......x..
   1d608:	00780404 00407d44 3d404020 28107f00     ..x.D}@. @@=...(
   1d618:	41000044 7c00407f 78047804 0404087c     D..A.@.|.x.x|...
   1d628:	44443878 18fc3844 18182424 fc182424     x8DDD8..$$..$$..
   1d638:	0404087c 54544808 04042454 3c24443f     |....HTTT$..?D$<
   1d648:	7c204040 2040201c 30403c1c 28443c40     @@ |. @ .<@0@<D(
   1d658:	4c442810 7c909090 4c546444 36080044     .(DL...|DdTLD..6
   1d668:	00000041 00000077 00083641 04020102     A...w...A6......
   1d678:	23263c02 a11e3c26 3a1261a1 7a204040     .<&#&<...a.:@@ z
   1d688:	55545438 55552159 54214179 21417854     8TTUY!UUyA!TTxA!
   1d698:	40785455 79555420 521e0c40 55391272     UTx@ TUy@..Rr.9U
   1d6a8:	39595555 59545454 54545539 45000058     UUY9TTTY9UTTX..E
   1d6b8:	0200417c 00427d45 407c4501 292429f0     |A..E}B..E|@.)$)
   1d6c8:	2528f0f0 547cf028 20004555 547c5454     ..(%(.|TUE. TT|T
   1d6d8:	7f090a7c 49493249 48323249 32324848     |...I2III22HHH22
   1d6e8:	3048484a 2141413a 40423a7a 9d007820     JHH0:AA!z:B@ x..
   1d6f8:	397da0a0 39444444 4040403d ff243c3d     ..}9DDD9=@@@=<$.
   1d708:	7e482424 2b664349 2b2ffc2f f62909ff     $$H~ICf+/./+..).
   1d718:	7e88c020 54200309 00417954 417d4400      ..~.. TTyA..D}A
   1d728:	4a484830 40403832 7a007a22 7d720a0a     0HHJ28@@"z.z..r}
   1d738:	7d31190d 2f292926 29292628 48302629     ..1}&))/(&)))&0H
   1d748:	3820404d 08080808 08080808 c8102f38     M@ 8........8/..
   1d758:	102fbaac 00fa3428 00007b00 142a1408     ../.(4...{....*.
   1d768:	2a142222 00aa0814 aaaa0055 aa55aa55     "".*....U...U.U.
   1d778:	ff000000 10101000 141400ff 1000ff14     ................
   1d788:	ff00ff10 10f01010 141414f0 141400fc     ................
   1d798:	00ff00f7 ff00ff00 04f41414 171414fc     ................
   1d7a8:	10101f10 141f101f 001f1414 f0101010     ................
   1d7b8:	00000000 1010101f 10101f10 10f01010     ................
   1d7c8:	ff000000 10101010 10101010 0010ff10     ................
   1d7d8:	14ff0000 00ff0000 1f0000ff 00001710     ................
   1d7e8:	14f404fc 17101714 04f41414 ff0000f4     ................
   1d7f8:	1414f700 14141414 f700f714 17141414     ................
   1d808:	1f101014 14141f10 1014f414 f010f010     ................
   1d818:	101f0000 0000001f 0000141f 0014fc00     ................
   1d828:	f010f000 10ff1010 141414ff 101014ff     ................
   1d838:	00001f10 10f00000 ffffffff f0f0f0ff     ................
   1d848:	fffff0f0 000000ff ffff0000 0f0f0f0f     ................
   1d858:	4444380f 2a7c4438 7e143e2a 06060202     .8DD8D|**>.~....
   1d868:	7e027e02 49556302 44386341 40043c44     .~.~.cUIAc8DD<.@
   1d878:	201e207e 027e0206 e7a59902 2a1c99a5     ~ . ..~........*
   1d888:	4c1c2a49 4c720172 4d4d4a30 78483030     I*.Lr.rL0JMM00Hx
   1d898:	62bc3048 3e3d465a 00494949 0101017e     H0.bZF=>III.~...
   1d8a8:	2a2a2a7e 44442a2a 4044445f 40444a51     ~*****DD_DD@QJD@
   1d8b8:	514a4440 ff000040 80e00301 080000ff     @DJQ@...........
   1d8c8:	086b6b08 24361236 090f0636 0000060f     .kk.6.6$6.......
   1d8d8:	00001818 00101000 01ff4030 011f0001     ........0@......
   1d8e8:	19001e01 0012171d 3c3c3c3c 00000000     ........<<<<....
   1d8f8:	00000000                                ....

0001d8fc <font8x16>:
   1d8fc:	60201008 00003802 00000000 00000000     .. `.8..........
   1d90c:	0000fe00 00000000 000e000e d0000000     ................
   1d91c:	bed090be 1c000090 80c2ff62 120c0000     ........b.......
   1d92c:	88b04c92 7c800006 c01cb262 00000000     .L.....|b.......
   1d93c:	00000e0e e0000000 02020418 02000000     ................
   1d94c:	e0180402 24000000 24187e18 80800000     .......$.~.$....
   1d95c:	8080f080 00000080 00000000 80000000     ................
   1d96c:	00808080 00000000 00000000 00000000     ................
   1d97c:	06186080 04f80000 f80c32c2 04000000     .`.......2......
   1d98c:	0000fe04 02000000 1c224282 02000000     .........B".....
   1d99c:	dc222222 a0c00000 80fe8498 1e000080     """.............
   1d9ac:	c2221212 44f80000 c0222222 02000000     .."....D""".....
   1d9bc:	0a32c202 8c000006 8c522252 423c0000     ..2.....R"R...<B
   1d9cc:	f8264242 00000000 00003030 00000000     BB&.....00......
   1d9dc:	00003030 80800000 20204040 40400010     00......@@  ..@@
   1d9ec:	40404040 20100000 80404020 02000080     @@@@...  @@.....
   1d9fc:	1c224282 00000000 00000000 00000000     .B".............
   1da0c:	00000500 00000000 00000000 07000000     ................
   1da1c:	00070000 04000000 03040f04 02040000     ................
   1da2c:	04040301 04030003 03050404 00000004     ................
   1da3c:	00000000 03000000 10100806 10000000     ................
   1da4c:	03060810 00000000 00000000 00000000     ................
   1da5c:	00000700 00000000 00000e16 00000000     ................
	...
   1da74:	00000606 02040000 00000001 03010000     ................
   1da84:	01020404 04000000 04040704 07000000     ................
   1da94:	04040404 04000000 03040404 00000000     ................
   1daa4:	00070000 04000000 03040404 02010000     ................
   1dab4:	03040404 00000000 00000007 03000000     ................
   1dac4:	03040404 04000000 01020404 00000000     ................
   1dad4:	00000606 00000000 00000e16 00000000     ................
   1dae4:	02020101 01010004 01010101 02040000     ................
   1daf4:	00010102 00000000 00000005 04f80000     ................
   1db04:	84fa8a72 c0000078 c0380638 fe000000     r...x...8.8.....
   1db14:	dc222222 04f80000 02020202 02fe0000     """.............
   1db24:	f8040202 fe000000 22222222 fe000000     ........""""....
   1db34:	22222222 04f80000 e2220202 20fe0000     """"......".... 
   1db44:	fe202020 02000000 0202fe02 00000000        .............
   1db54:	fe020200 40fe0000 020408b0 fe000000     .......@........
   1db64:	00000000 0cfe0000 0c708070 0cfe00fe     ........p.p.....
   1db74:	fe00c030 04f80000 f8040202 42fe0000     0..............B
   1db84:	1c224242 04f80000 f8040202 fe000000     BB".............
   1db94:	1ca24242 1c000000 80424222 02020000     BB......"BB.....
   1dba4:	0202fe02 00fe0002 fe000000 38060000     ...............8
   1dbb4:	38c000c0 c03e0006 c0f00ef0 0600003e     ...8..>.....>...
   1dbc4:	06986098 06000000 0618e018 02020000     .`..............
   1dbd4:	060a32c2 00000000 020202fe 06000002     .2..............
   1dbe4:	00806018 02020000 00fe0202 30400000     .`............@0
   1dbf4:	40300c0c 00000000 00000000 02010000     ..0@............
   1dc04:	00040404 01060000 01010101 07000006     ................
   1dc14:	03040404 02010000 04040404 04070000     ................
   1dc24:	01020404 07000000 04040404 07000000     ................
   1dc34:	00000000 02010000 07040404 00070000     ................
   1dc44:	07000000 04000000 04040704 04000000     ................
   1dc54:	03040404 00070000 04020100 07000000     ................
   1dc64:	04040404 00070000 00000100 00070007     ................
   1dc74:	07030000 02010000 01020404 00070000     ................
   1dc84:	00000000 02010000 11120c04 07000010     ................
   1dc94:	06010000 04000000 03040404 00000000     ................
   1dca4:	00000700 04030000 03040404 00000000     ................
   1dcb4:	00010601 07000000 07000000 06000000     ................
   1dcc4:	06010001 00000000 00000700 05060000     ................
   1dcd4:	04040404 00000000 1010101f 00000010     ................
   1dce4:	02010000 10100004 001f1010 00000000     ................
   1dcf4:	00000000 08080000 08080808 00000000     ................
   1dd04:	00000402 e0000000 f0101010 fe000000     ................
   1dd14:	e0101020 e0000000 10101010 e0000000      ...............
   1dd24:	fe101010 e0000000 e0909090 20000000     ............... 
   1dd34:	222222fc e0000002 f0101010 fe000000     ."""............
   1dd44:	e0101020 10100000 000000f2 10000000      ...............
   1dd54:	00f21010 fe000000 10204080 02000000     .........@ .....
   1dd64:	0000fe02 20f00000 1020f010 f00000f0     ....... .. .....
   1dd74:	e0101020 e0000000 e0101010 f0000000      ...............
   1dd84:	e0101020 e0000000 f0101010 f0000000      ...............
   1dd94:	70101020 60000000 20909090 20000000      ..p...`... ... 
   1dda4:	2020fc20 f0000020 f0000000 70000000      .   ..........p
   1ddb4:	70800080 00f00000 00c030c0 300000f0     ...p.....0.....0
   1ddc4:	0030c0c0 30000000 708000c0 10000000     ..0....0...p....
   1ddd4:	30509010 80000000 02027e80 00000000     ..P0.....~......
   1dde4:	0000fe00 02000000 80807e02 80000000     .........~......
   1ddf4:	00000080 00000080 00000000 00000000     ................
   1de04:	00000000 03000000 07020404 07000000     ................
   1de14:	03040404 03000000 04040404 03000000     ................
   1de24:	07020404 03000000 04040404 00000000     ................
   1de34:	00000007 33000000 1f222424 07000000     .......3$$".....
   1de44:	07000000 00000000 00040407 20200000     ..............  
   1de54:	001f2020 07000000 04020100 00000000       ..............
   1de64:	04040700 00070000 00000700 07000007     ................
   1de74:	07000000 03000000 03040404 3f000000     ...............?
   1de84:	03040404 03000000 3f020404 07000000     ...........?....
   1de94:	00000000 02000000 03040404 00000000     ................
   1dea4:	04040300 03000004 07020404 00000000     ................
   1deb4:	00030403 06010000 06010001 06000001     ................
   1dec4:	00060101 20200000 00030e31 06000000     ......  1.......
   1ded4:	04040405 00000000 10101f00 00000000     ................
   1dee4:	00000700 10000000 00001f10 00010000     ................
   1def4:	01010100 00000000 00000000 00000000     ................

0001df04 <sevensegment>:
   1df04:	0d2e100a 00001e01 00000000 00000000     ................
	...
   1df1c:	fc780000 03030302 78fc0203 00000000     ..x........x....
   1df2c:	00000000 00007eff 83838302 78fc0283     .....~.........x
   1df3c:	83020000 02838383 ff7e78fc 80808000     .........x~.....
   1df4c:	7eff0080 8302fc78 02838383 fc780000     ...~x.........x.
   1df5c:	83838302 00000283 03030200 02030303     ................
   1df6c:	fc7878fc 83838302 78fc0283 8302fc78     .xx........xx...
   1df7c:	02838383 000078fc 3c180000 0000183c     .....x.....<<...
   1df8c:	60000000 0060f0f0 00000000 00000000     ...`..`.........
   1df9c:	00000000 c0403f1e 40c0c0c0 00001e3f     .....?@....@?...
   1dfac:	00000000 7eff0000 c1413e1c 41c1c1c1     .......~.>A....A
   1dfbc:	00000000 c1c1c141 1c3e41c1 01010000     ....A....A>.....
   1dfcc:	01010101 00007eff c1c1c141 1c3e41c1     .....~..A....A>.
   1dfdc:	c1413e1c 41c1c1c1 00001c3e 00000000     .>A....A>.......
   1dfec:	7eff0000 c1413e1c 41c1c1c1 00001c3e     ...~.>A....A>...
   1dffc:	c1c1c141 1c3e41c1 00000000 183c3c18     A....A>......<<.
   1e00c:	00000000                                ....

0001e010 <fontlargenumber>:
   1e010:	0b30300c c0002001 3e3e7cf8 00c0f8fc     .00.. ...|>>....
   1e020:	00000000 fe78e080 000000fe f0000000     ......x.........
   1e030:	3e3e3c7c 00e0fcfe 7c000000 fe3e3e3e     |<>>.......|>>>.
   1e040:	0000c0f8 00000000 f8000000 0000fefe     ................
   1e050:	fe000000 3e3e3efe 00003e3e 00000000     .....>>>>>......
   1e060:	3efcf080 00fc3e3e 3e000000 3e3e3e3e     ...>>>.....>>>>>
   1e070:	fefe3e3e 00000000 3efef8c0 00e0fc7e     >>.........>~...
   1e080:	00000000 3e7efce0 00c0f8fe 00000000     ......~>........
   1e090:	e0c00000 000000c0 fff00000 0000000f     ................
   1e0a0:	f0fffff9 00000000 ff000307 000000ff     ................
   1e0b0:	01000000 00000000 00ffff00 00000000     ................
   1e0c0:	00000000 0000ffff 00000000 1fffe000     ................
   1e0d0:	0000ffff ff000000 000000ff 00000000     ................
   1e0e0:	e0000000 00003fff 00000000 00000000     .....?..........
   1e0f0:	00000000 037ffcc0 00000000 0000ffff     ................
   1e100:	00ffff00 fe000000 000003ff f0ffff00     ................
   1e110:	00000000 7f3f0000 0000003f ffff0000     ......?.?.......
   1e120:	ffe00000 ffff001f 00000000 ff000000     ................
   1e130:	000000ff 00000000 e0000000 00011ffe     ................
   1e140:	00000000 fffcf8f8 000000c7 c0000000     ................
   1e150:	00033ffe 0000ffff 3f000000 fc7e3e3f     .?.........??>~.
   1e160:	0000e0f8 ff000000 7cf080ff 00f0f87c     ...........||...
   1e170:	00000000 f8800000 000007ff 00000000     ................
   1e180:	f8ff9f01 00011ffe ff000000 0000c0ff     ................
   1e190:	ffffff80 00000000 00000000 00000000     ................
   1e1a0:	ffff0000 037ffcc0 ffff0000 00000000     ................
   1e1b0:	ff000000 000000ff 00000000 0ffee000     ................
   1e1c0:	00000001 00000000 01000000 00f8ff0f     ................
   1e1d0:	fff80000 e0e0e0e7 e0e0ffff 000000e0     ................
   1e1e0:	00000000 00feff07 ff000000 0003ffff     ................
   1e1f0:	ffff0100 00000000 0ffff000 00000000     ................
   1e200:	c0000000 03033ffc c0fcff1f 00000000     .....?..........
   1e210:	3e3e1f0f ffff010f 00000000 80000000     ..>>............
   1e220:	00000000 ff070000 000007ff 07fffc00     ................
   1e230:	00000000 ff000000 000000ff e0000000     ................
   1e240:	00000ffe 00000000 00000000 00000000     ................
   1e250:	007fffc0 03030000 03030303 0303ffff     ................
   1e260:	00000003 00000000 007fffc0 0f000000     ................
   1e270:	0080ffff 7fff8000 00000000 0003fffe     ................
   1e280:	00000000 ff000000 000080ff ffff8000     ................
	...
   1e298:	07fffc80 00000000 ffff0000 000000ff     ................
   1e2a8:	03000000 7c7c3f1f 00031f3f 00000000     .....?||?.......
   1e2b8:	7f7c7c7c 7c7c7c7f 7f000000 7c7c7c7f     |||..|||.....|||
   1e2c8:	007c7c7c 3f000000 7e7c7c7e 0000071f     |||....?~||~....
	...
   1e2e0:	00007f7f 1f000000 3e7c7c3e 0000071f     ........>||>....
   1e2f0:	00000000 7c7f1f03 00073f7c 00000000     .......||?......
   1e300:	00007f7f 00000000 01000000 7c7e3f1f     .............?~|
   1e310:	011f3f7e 00000000 7e7c7c3e 00010f3f     ~?......>||~?...
   1e320:	00000000 01000000 00000000 00000000     ................
   1e330:	6f727245 6e692072 61697469 697a696c     Error initializi
   1e340:	4f20676e 2144454c 00000a0d 44454c4f     ng OLED!....OLED
   1e350:	72755420 2064656e 2166666f 00000a0d      Turned off!....
   1e360:	6f727245 6e692072 61697469 697a696c     Error initializi
   1e370:	4f20676e 2044454c 636f6c63 0a0d216b     ng OLED clock!..
   1e380:	00000000 44454c4f 6f6c6320 73206b63     ....OLED clock s
   1e390:	0d217465 0000000a 65657246 534f5452     et!.....FreeRTOS
   1e3a0:	6e655320 20726f73 6b736154 000a0d2e      Sensor Task....
   1e3b0:	706c6568 00000000 65680a0d 0d3a706c     help......help:.
   1e3c0:	694c200a 20737473 206c6c61 20656874     . Lists all the 
   1e3d0:	69676572 72657473 63206465 616d6d6f     registered comma
   1e3e0:	0d73646e 000a0d0a 6f636e49 63657272     nds.....Incorrec
   1e3f0:	6f632074 6e616d6d 61702064 656d6172     t command parame
   1e400:	28726574 202e2973 746e4520 22207265     ter(s).  Enter "
   1e410:	706c6568 6f742022 65697620 20612077     help" to view a 
   1e420:	7473696c 20666f20 69617661 6c62616c     list of availabl
   1e430:	6f632065 6e616d6d 0d2e7364 000a0d0a     e commands......
   1e440:	6d6d6f43 20646e61 20746f6e 6f636572     Command not reco
   1e450:	73696e67 202e6465 746e4520 27207265     gnised.  Enter '
   1e460:	706c6568 6f742027 65697620 20612077     help' to view a 
   1e470:	7473696c 20666f20 69617661 6c62616c     list of availabl
   1e480:	6f632065 6e616d6d 0d2e7364 000a0d0a     e commands......

0001e490 <xHelpCommand>:
   1e490:	0001e3b0 0001e3b8 00015029 00000000     ........)P......
   1e4a0:	454c4449 00000000 20726d54 00637653     IDLE....Tmr Svc.
   1e4b0:	00017608 00017608 00017608 00017696     .v...v...v...v..
   1e4c0:	00017660 0001768a 00017608 00017608     `v...v...v...v..
   1e4d0:	00017696 00017660 42000800 42000c00     .v..`v.....B...B
   1e4e0:	42001000 42001400 42001800 42001c00     ...B...B...B...B
   1e4f0:	0c0b0a09 00000e0d 000199e6 00019a60     ............`...
   1e500:	00019a60 00019a04 000199fe 00019a0a     `...............
   1e510:	000199ec 00019a10 00019a46 00019c48     ........F...H...
   1e520:	00019c98 00019c98 00019c94 00019c3a     ............:...
   1e530:	00019c5a 00019c2a 00019c6c 00019c7e     Z...*...l...~...
   1e540:	00019ce6 00019d14 00019d14 00019d10     ................
   1e550:	00019ce0 00019cec 00019cda 00019cf2     ................
   1e560:	00019cf8                                ....

0001e564 <_tcc_intflag>:
   1e564:	00000001 00000002 00000004 00000008     ................
   1e574:	00001000 00002000 00004000 00008000     ..... ...@......
   1e584:	00010000 00020000 00040000 00080000     ................
   1e594:	6f727245 6e692072 61697469 697a696c     Error initializi
   1e5a4:	4f20676e 2044454c 76697244 0d217265     ng OLED Driver!.
   1e5b4:	0000000a 74696e49 696c6169 2064657a     ....Initialized 
   1e5c4:	44454c4f 69724420 21726576 00000a0d     OLED Driver!....
   1e5d4:	70616548 66656220 2065726f 72617473     Heap before star
   1e5e4:	676e6974 73617420 203a736b 0a0d6425     ting tasks: %d..
   1e5f4:	00000000 5f494c43 4b534154 00000000     ....CLI_TASK....
   1e604:	3a525245 494c4320 73617420 6f63206b     ERR: CLI task co
   1e614:	20646c75 20746f6e 69206562 6974696e     uld not be initi
   1e624:	7a696c61 0d216465 0000000a 70616548     alized!.....Heap
   1e634:	74666120 73207265 74726174 20676e69      after starting 
   1e644:	3a494c43 0d642520 0000000a 4847494c     CLI: %d.....LIGH
   1e654:	41545f54 00004b53 3a525245 47494c20     T_TASK..ERR: LIG
   1e664:	74205448 206b7361 6c756f63 6f6e2064     HT task could no
   1e674:	65622074 696e6920 6c616974 64657a69     t be initialized
   1e684:	000a0d21 70616548 74666120 73207265     !...Heap after s
   1e694:	74726174 20676e69 4847494c 25203a54     tarting LIGHT: %
   1e6a4:	000a0d64 6f727245 6e6f2072 6d656d20     d...Error on mem
   1e6b4:	2079726f 6f6c6c61 69746163 6f206e6f     ory allocation o
   1e6c4:	5246206e 54524545 0d21534f 0000000a     n FREERTOS!.....
   1e6d4:	6f727245 6e6f2072 61747320 6f206b63     Error on stack o
   1e6e4:	66726576 20776f6c 46206e6f 52454552     verflow on FREER
   1e6f4:	21534f54 00000a0d 0001b48c 0001b46e     TOS!........n...
   1e704:	0001b428 0001b346 0001b428 0001b460     (...F...(...`...
   1e714:	0001b428 0001b346 0001b46e 0001b46e     (...F...n...n...
   1e724:	0001b460 0001b346 0001b33e 0001b33e     `...F...>...>...
   1e734:	0001b33e 0001b6a4 0001baec 0001b9ac     >...............
   1e744:	0001b9ac 0001b9a8 0001bac4 0001bac4     ................
   1e754:	0001bab6 0001b9a8 0001bac4 0001bab6     ................
   1e764:	0001bac4 0001b9a8 0001bacc 0001bacc     ................
   1e774:	0001bacc 0001bcd0                       ........

0001e77c <__sf_fake_stderr>:
	...

0001e79c <__sf_fake_stdin>:
	...

0001e7bc <__sf_fake_stdout>:
	...
   1e7dc:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   1e7ec:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   1e7fc:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   1e80c:	37363534 62613938 66656463 20200000              456789abcdef.

0001e819 <_ctype_>:
   1e819:	20202000 20202020 28282020 20282828     .         ((((( 
   1e829:	20202020 20202020 20202020 20202020                     
   1e839:	10108820 10101010 10101010 10101010      ...............
   1e849:	04040410 04040404 10040404 10101010     ................
   1e859:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1e869:	01010101 01010101 01010101 10101010     ................
   1e879:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1e889:	02020202 02020202 02020202 10101010     ................
   1e899:	00000020 00000000 00000000 00000000      ...............
	...

0001e91c <_init>:
   1e91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e91e:	46c0      	nop			; (mov r8, r8)
   1e920:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1e922:	bc08      	pop	{r3}
   1e924:	469e      	mov	lr, r3
   1e926:	4770      	bx	lr

0001e928 <__init_array_start>:
   1e928:	000120dd 	.word	0x000120dd

0001e92c <_fini>:
   1e92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e92e:	46c0      	nop			; (mov r8, r8)
   1e930:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1e932:	bc08      	pop	{r3}
   1e934:	469e      	mov	lr, r3
   1e936:	4770      	bx	lr

0001e938 <__fini_array_start>:
   1e938:	000120b5 	.word	0x000120b5
