
ESE516 BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025d8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  000025d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000008dc  20000070  00002648  00020070  2**2
                  ALLOC
  3 .stack        00002004  2000094c  00002f24  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002a454  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004225  00000000  00000000  0004a545  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000057c4  00000000  00000000  0004e76a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005b8  00000000  00000000  00053f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000698  00000000  00000000  000544e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001ba0c  00000000  00000000  00054b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e1e3  00000000  00000000  0007058a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00090b3d  00000000  00000000  0007e76d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000012d8  00000000  00000000  0010f2ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 29 00 20 c9 18 00 00 c5 18 00 00 c5 18 00 00     P). ............
	...
      2c:	c5 18 00 00 00 00 00 00 00 00 00 00 c5 18 00 00     ................
      3c:	81 01 00 00 c5 18 00 00 c5 18 00 00 c5 18 00 00     ................
      4c:	c5 18 00 00 c5 18 00 00 c5 18 00 00 c5 18 00 00     ................
      5c:	c5 18 00 00 c5 18 00 00 5d 0a 00 00 6d 0a 00 00     ........]...m...
      6c:	7d 0a 00 00 8d 0a 00 00 9d 0a 00 00 ad 0a 00 00     }...............
      7c:	c5 18 00 00 c5 18 00 00 c5 18 00 00 c5 18 00 00     ................
      8c:	c5 18 00 00 c5 18 00 00 00 00 00 00 00 00 00 00     ................
      9c:	c5 18 00 00 c5 18 00 00 c5 18 00 00 c5 18 00 00     ................
      ac:	c5 18 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	000025d8 	.word	0x000025d8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	000025d8 	.word	0x000025d8
     10c:	000025d8 	.word	0x000025d8
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00001655 	.word	0x00001655
     140:	00001b2d 	.word	0x00001b2d
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <SysTick_Handler>:
 *
 ******************************************************************************/
void SysTick_Handler(void)
{
	
	ul_tickcount++;
     180:	4a02      	ldr	r2, [pc, #8]	; (18c <SysTick_Handler+0xc>)
     182:	6813      	ldr	r3, [r2, #0]
     184:	3301      	adds	r3, #1
     186:	6013      	str	r3, [r2, #0]
}
     188:	4770      	bx	lr
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	2000008c 	.word	0x2000008c

00000190 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     190:	b5f0      	push	{r4, r5, r6, r7, lr}
     192:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     194:	ac01      	add	r4, sp, #4
     196:	2501      	movs	r5, #1
     198:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     19a:	2700      	movs	r7, #0
     19c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     19e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     1a0:	0021      	movs	r1, r4
     1a2:	2017      	movs	r0, #23
     1a4:	4e06      	ldr	r6, [pc, #24]	; (1c0 <system_board_init+0x30>)
     1a6:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1a8:	2280      	movs	r2, #128	; 0x80
     1aa:	0412      	lsls	r2, r2, #16
     1ac:	4b05      	ldr	r3, [pc, #20]	; (1c4 <system_board_init+0x34>)
     1ae:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     1b0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     1b2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     1b4:	0021      	movs	r1, r4
     1b6:	2037      	movs	r0, #55	; 0x37
     1b8:	47b0      	blx	r6
}
     1ba:	b003      	add	sp, #12
     1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	00000655 	.word	0x00000655
     1c4:	41004400 	.word	0x41004400

000001c8 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     1c8:	b510      	push	{r4, lr}
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     1ca:	4a1e      	ldr	r2, [pc, #120]	; (244 <nvm_set_config+0x7c>)
     1cc:	69d3      	ldr	r3, [r2, #28]
     1ce:	2104      	movs	r1, #4
     1d0:	430b      	orrs	r3, r1
     1d2:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     1d4:	4b1c      	ldr	r3, [pc, #112]	; (248 <nvm_set_config+0x80>)
     1d6:	2220      	movs	r2, #32
     1d8:	32ff      	adds	r2, #255	; 0xff
     1da:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     1dc:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     1de:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
     1e0:	07d2      	lsls	r2, r2, #31
     1e2:	d401      	bmi.n	1e8 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
     1e4:	0018      	movs	r0, r3
     1e6:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     1e8:	7803      	ldrb	r3, [r0, #0]
     1ea:	021b      	lsls	r3, r3, #8
     1ec:	22c0      	movs	r2, #192	; 0xc0
     1ee:	0092      	lsls	r2, r2, #2
     1f0:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     1f2:	7841      	ldrb	r1, [r0, #1]
     1f4:	01c9      	lsls	r1, r1, #7
     1f6:	22ff      	movs	r2, #255	; 0xff
     1f8:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     1fa:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     1fc:	7881      	ldrb	r1, [r0, #2]
     1fe:	0049      	lsls	r1, r1, #1
     200:	221e      	movs	r2, #30
     202:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     204:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     206:	78c2      	ldrb	r2, [r0, #3]
     208:	0492      	lsls	r2, r2, #18
     20a:	2180      	movs	r1, #128	; 0x80
     20c:	02c9      	lsls	r1, r1, #11
     20e:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     210:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     212:	7902      	ldrb	r2, [r0, #4]
     214:	0412      	lsls	r2, r2, #16
     216:	21c0      	movs	r1, #192	; 0xc0
     218:	0289      	lsls	r1, r1, #10
     21a:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     21c:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     21e:	4a0a      	ldr	r2, [pc, #40]	; (248 <nvm_set_config+0x80>)
     220:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     222:	6893      	ldr	r3, [r2, #8]
     224:	035b      	lsls	r3, r3, #13
     226:	0f5b      	lsrs	r3, r3, #29
     228:	4908      	ldr	r1, [pc, #32]	; (24c <nvm_set_config+0x84>)
     22a:	2408      	movs	r4, #8
     22c:	409c      	lsls	r4, r3
     22e:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     230:	6893      	ldr	r3, [r2, #8]
     232:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     234:	7843      	ldrb	r3, [r0, #1]
     236:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     238:	8b13      	ldrh	r3, [r2, #24]
     23a:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     23c:	0fdb      	lsrs	r3, r3, #31
     23e:	011b      	lsls	r3, r3, #4
     240:	e7d0      	b.n	1e4 <nvm_set_config+0x1c>
     242:	46c0      	nop			; (mov r8, r8)
     244:	40000400 	.word	0x40000400
     248:	41004000 	.word	0x41004000
     24c:	20000090 	.word	0x20000090

00000250 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     250:	b510      	push	{r4, lr}
     252:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
     254:	7c03      	ldrb	r3, [r0, #16]
     256:	2b00      	cmp	r3, #0
     258:	d005      	beq.n	266 <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     25a:	6883      	ldr	r3, [r0, #8]
     25c:	1c58      	adds	r0, r3, #1
     25e:	68e1      	ldr	r1, [r4, #12]
     260:	4b07      	ldr	r3, [pc, #28]	; (280 <advance_pointer+0x30>)
     262:	4798      	blx	r3
     264:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     266:	6863      	ldr	r3, [r4, #4]
     268:	1c58      	adds	r0, r3, #1
     26a:	68e1      	ldr	r1, [r4, #12]
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <advance_pointer+0x30>)
     26e:	4798      	blx	r3
     270:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     272:	68a3      	ldr	r3, [r4, #8]
     274:	1a59      	subs	r1, r3, r1
     276:	424a      	negs	r2, r1
     278:	414a      	adcs	r2, r1
     27a:	7422      	strb	r2, [r4, #16]
 }
     27c:	bd10      	pop	{r4, pc}
     27e:	46c0      	nop			; (mov r8, r8)
     280:	00001c39 	.word	0x00001c39

00000284 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     284:	b570      	push	{r4, r5, r6, lr}
     286:	0005      	movs	r5, r0
     288:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     28a:	2014      	movs	r0, #20
     28c:	4b04      	ldr	r3, [pc, #16]	; (2a0 <circular_buf_init+0x1c>)
     28e:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     290:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
     292:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
     294:	2300      	movs	r3, #0
     296:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
     298:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
     29a:	7403      	strb	r3, [r0, #16]
 }
     29c:	bd70      	pop	{r4, r5, r6, pc}
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	00001ce1 	.word	0x00001ce1

000002a4 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     2a4:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     2a6:	6803      	ldr	r3, [r0, #0]
     2a8:	6842      	ldr	r2, [r0, #4]
     2aa:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
     2ac:	4b01      	ldr	r3, [pc, #4]	; (2b4 <circular_buf_put+0x10>)
     2ae:	4798      	blx	r3
 }
     2b0:	bd10      	pop	{r4, pc}
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	00000251 	.word	0x00000251

000002b8 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     2b8:	7c02      	ldrb	r2, [r0, #16]
     2ba:	2300      	movs	r3, #0
     2bc:	2a00      	cmp	r2, #0
     2be:	d105      	bne.n	2cc <circular_buf_empty+0x14>
     2c0:	6843      	ldr	r3, [r0, #4]
     2c2:	6880      	ldr	r0, [r0, #8]
     2c4:	1a1b      	subs	r3, r3, r0
     2c6:	4258      	negs	r0, r3
     2c8:	4143      	adcs	r3, r0
     2ca:	b2db      	uxtb	r3, r3
     2cc:	0018      	movs	r0, r3
 }
     2ce:	4770      	bx	lr

000002d0 <circular_buf_get>:
 {
     2d0:	b570      	push	{r4, r5, r6, lr}
     2d2:	0004      	movs	r4, r0
     2d4:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
     2d6:	4b0a      	ldr	r3, [pc, #40]	; (300 <circular_buf_get+0x30>)
     2d8:	4798      	blx	r3
     2da:	2800      	cmp	r0, #0
     2dc:	d10d      	bne.n	2fa <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
     2de:	6823      	ldr	r3, [r4, #0]
     2e0:	68a2      	ldr	r2, [r4, #8]
     2e2:	5c9b      	ldrb	r3, [r3, r2]
     2e4:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
     2e6:	2300      	movs	r3, #0
     2e8:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     2ea:	68a3      	ldr	r3, [r4, #8]
     2ec:	1c58      	adds	r0, r3, #1
     2ee:	68e1      	ldr	r1, [r4, #12]
     2f0:	4b04      	ldr	r3, [pc, #16]	; (304 <circular_buf_get+0x34>)
     2f2:	4798      	blx	r3
     2f4:	60a1      	str	r1, [r4, #8]
		 r = 0;
     2f6:	2000      	movs	r0, #0
 }
     2f8:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
     2fa:	2001      	movs	r0, #1
     2fc:	4240      	negs	r0, r0
	 return r;
     2fe:	e7fb      	b.n	2f8 <circular_buf_get+0x28>
     300:	000002b9 	.word	0x000002b9
     304:	00001c39 	.word	0x00001c39

00000308 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     308:	b570      	push	{r4, r5, r6, lr}
     30a:	b082      	sub	sp, #8
     30c:	0005      	movs	r5, r0
     30e:	000e      	movs	r6, r1
	uint16_t temp = 0;
     310:	2200      	movs	r2, #0
     312:	466b      	mov	r3, sp
     314:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     316:	4c06      	ldr	r4, [pc, #24]	; (330 <usart_serial_getchar+0x28>)
     318:	466b      	mov	r3, sp
     31a:	1d99      	adds	r1, r3, #6
     31c:	0028      	movs	r0, r5
     31e:	47a0      	blx	r4
     320:	2800      	cmp	r0, #0
     322:	d1f9      	bne.n	318 <usart_serial_getchar+0x10>

	*c = temp;
     324:	466b      	mov	r3, sp
     326:	3306      	adds	r3, #6
     328:	881b      	ldrh	r3, [r3, #0]
     32a:	7033      	strb	r3, [r6, #0]
}
     32c:	b002      	add	sp, #8
     32e:	bd70      	pop	{r4, r5, r6, pc}
     330:	00000e2d 	.word	0x00000e2d

00000334 <usart_serial_putchar>:
{
     334:	b570      	push	{r4, r5, r6, lr}
     336:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
     338:	b28c      	uxth	r4, r1
     33a:	4e03      	ldr	r6, [pc, #12]	; (348 <usart_serial_putchar+0x14>)
     33c:	0021      	movs	r1, r4
     33e:	0028      	movs	r0, r5
     340:	47b0      	blx	r6
     342:	2800      	cmp	r0, #0
     344:	d1fa      	bne.n	33c <usart_serial_putchar+0x8>
}
     346:	bd70      	pop	{r4, r5, r6, pc}
     348:	00000e01 	.word	0x00000e01

0000034c <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
     34c:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
     34e:	4b06      	ldr	r3, [pc, #24]	; (368 <usart_write_callback+0x1c>)
     350:	6818      	ldr	r0, [r3, #0]
     352:	4906      	ldr	r1, [pc, #24]	; (36c <usart_write_callback+0x20>)
     354:	4b06      	ldr	r3, [pc, #24]	; (370 <usart_write_callback+0x24>)
     356:	4798      	blx	r3
     358:	1c43      	adds	r3, r0, #1
     35a:	d004      	beq.n	366 <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     35c:	2201      	movs	r2, #1
     35e:	4903      	ldr	r1, [pc, #12]	; (36c <usart_write_callback+0x20>)
     360:	4804      	ldr	r0, [pc, #16]	; (374 <usart_write_callback+0x28>)
     362:	4b05      	ldr	r3, [pc, #20]	; (378 <usart_write_callback+0x2c>)
     364:	4798      	blx	r3
	}
	
}
     366:	bd10      	pop	{r4, pc}
     368:	20000920 	.word	0x20000920
     36c:	2000091c 	.word	0x2000091c
     370:	000002d1 	.word	0x000002d1
     374:	200000e0 	.word	0x200000e0
     378:	00000f41 	.word	0x00000f41

0000037c <InitializeSerialConsole>:
{
     37c:	b570      	push	{r4, r5, r6, lr}
     37e:	b090      	sub	sp, #64	; 0x40
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     380:	2580      	movs	r5, #128	; 0x80
     382:	00ed      	lsls	r5, r5, #3
     384:	0029      	movs	r1, r5
     386:	483f      	ldr	r0, [pc, #252]	; (484 <InitializeSerialConsole+0x108>)
     388:	4c3f      	ldr	r4, [pc, #252]	; (488 <InitializeSerialConsole+0x10c>)
     38a:	47a0      	blx	r4
     38c:	4b3f      	ldr	r3, [pc, #252]	; (48c <InitializeSerialConsole+0x110>)
     38e:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
     390:	0029      	movs	r1, r5
     392:	483f      	ldr	r0, [pc, #252]	; (490 <InitializeSerialConsole+0x114>)
     394:	47a0      	blx	r4
     396:	4b3f      	ldr	r3, [pc, #252]	; (494 <InitializeSerialConsole+0x118>)
     398:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     39a:	2380      	movs	r3, #128	; 0x80
     39c:	05db      	lsls	r3, r3, #23
     39e:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     3a0:	2300      	movs	r3, #0
     3a2:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     3a4:	22ff      	movs	r2, #255	; 0xff
     3a6:	4669      	mov	r1, sp
     3a8:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     3aa:	2200      	movs	r2, #0
     3ac:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     3ae:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     3b0:	2101      	movs	r1, #1
     3b2:	2024      	movs	r0, #36	; 0x24
     3b4:	466c      	mov	r4, sp
     3b6:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     3b8:	3001      	adds	r0, #1
     3ba:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     3bc:	3125      	adds	r1, #37	; 0x25
     3be:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     3c0:	3101      	adds	r1, #1
     3c2:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     3c4:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     3c6:	3105      	adds	r1, #5
     3c8:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     3ca:	3101      	adds	r1, #1
     3cc:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     3ce:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     3d0:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     3d2:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     3d4:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     3d6:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     3d8:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     3da:	2313      	movs	r3, #19
     3dc:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     3de:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
     3e0:	23e1      	movs	r3, #225	; 0xe1
     3e2:	025b      	lsls	r3, r3, #9
     3e4:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     3e6:	23c4      	movs	r3, #196	; 0xc4
     3e8:	039b      	lsls	r3, r3, #14
     3ea:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     3ec:	2301      	movs	r3, #1
     3ee:	425b      	negs	r3, r3
     3f0:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     3f2:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     3f4:	4b28      	ldr	r3, [pc, #160]	; (498 <InitializeSerialConsole+0x11c>)
     3f6:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     3f8:	4b28      	ldr	r3, [pc, #160]	; (49c <InitializeSerialConsole+0x120>)
     3fa:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
     3fc:	4d28      	ldr	r5, [pc, #160]	; (4a0 <InitializeSerialConsole+0x124>)
     3fe:	4c29      	ldr	r4, [pc, #164]	; (4a4 <InitializeSerialConsole+0x128>)
     400:	466a      	mov	r2, sp
     402:	4929      	ldr	r1, [pc, #164]	; (4a8 <InitializeSerialConsole+0x12c>)
     404:	0028      	movs	r0, r5
     406:	47a0      	blx	r4
     408:	2800      	cmp	r0, #0
     40a:	d1f9      	bne.n	400 <InitializeSerialConsole+0x84>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     40c:	4d24      	ldr	r5, [pc, #144]	; (4a0 <InitializeSerialConsole+0x124>)
     40e:	4b27      	ldr	r3, [pc, #156]	; (4ac <InitializeSerialConsole+0x130>)
     410:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     412:	4a27      	ldr	r2, [pc, #156]	; (4b0 <InitializeSerialConsole+0x134>)
     414:	4b27      	ldr	r3, [pc, #156]	; (4b4 <InitializeSerialConsole+0x138>)
     416:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     418:	4a27      	ldr	r2, [pc, #156]	; (4b8 <InitializeSerialConsole+0x13c>)
     41a:	4b28      	ldr	r3, [pc, #160]	; (4bc <InitializeSerialConsole+0x140>)
     41c:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     41e:	4e28      	ldr	r6, [pc, #160]	; (4c0 <InitializeSerialConsole+0x144>)
     420:	6833      	ldr	r3, [r6, #0]
     422:	6898      	ldr	r0, [r3, #8]
     424:	2100      	movs	r1, #0
     426:	4c27      	ldr	r4, [pc, #156]	; (4c4 <InitializeSerialConsole+0x148>)
     428:	47a0      	blx	r4
	setbuf(stdin, NULL);
     42a:	6833      	ldr	r3, [r6, #0]
     42c:	6858      	ldr	r0, [r3, #4]
     42e:	2100      	movs	r1, #0
     430:	47a0      	blx	r4
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     432:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     434:	0020      	movs	r0, r4
     436:	4b24      	ldr	r3, [pc, #144]	; (4c8 <InitializeSerialConsole+0x14c>)
     438:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     43a:	231f      	movs	r3, #31
     43c:	4018      	ands	r0, r3
     43e:	3b1e      	subs	r3, #30
     440:	4083      	lsls	r3, r0
     442:	4a22      	ldr	r2, [pc, #136]	; (4cc <InitializeSerialConsole+0x150>)
     444:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     446:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     448:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     44a:	2b00      	cmp	r3, #0
     44c:	d1fc      	bne.n	448 <InitializeSerialConsole+0xcc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     44e:	6823      	ldr	r3, [r4, #0]
     450:	2202      	movs	r2, #2
     452:	4313      	orrs	r3, r2
     454:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
     456:	4c12      	ldr	r4, [pc, #72]	; (4a0 <InitializeSerialConsole+0x124>)
     458:	2200      	movs	r2, #0
     45a:	491d      	ldr	r1, [pc, #116]	; (4d0 <InitializeSerialConsole+0x154>)
     45c:	0020      	movs	r0, r4
     45e:	4d1d      	ldr	r5, [pc, #116]	; (4d4 <InitializeSerialConsole+0x158>)
     460:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
     462:	2201      	movs	r2, #1
     464:	491c      	ldr	r1, [pc, #112]	; (4d8 <InitializeSerialConsole+0x15c>)
     466:	0020      	movs	r0, r4
     468:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     46a:	2231      	movs	r2, #49	; 0x31
     46c:	5ca3      	ldrb	r3, [r4, r2]
     46e:	2103      	movs	r1, #3
     470:	430b      	orrs	r3, r1
     472:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     474:	3a30      	subs	r2, #48	; 0x30
     476:	4919      	ldr	r1, [pc, #100]	; (4dc <InitializeSerialConsole+0x160>)
     478:	0020      	movs	r0, r4
     47a:	4b19      	ldr	r3, [pc, #100]	; (4e0 <InitializeSerialConsole+0x164>)
     47c:	4798      	blx	r3
}
     47e:	b010      	add	sp, #64	; 0x40
     480:	bd70      	pop	{r4, r5, r6, pc}
     482:	46c0      	nop			; (mov r8, r8)
     484:	2000051c 	.word	0x2000051c
     488:	00000285 	.word	0x00000285
     48c:	20000114 	.word	0x20000114
     490:	2000011c 	.word	0x2000011c
     494:	20000920 	.word	0x20000920
     498:	002a0003 	.word	0x002a0003
     49c:	002b0003 	.word	0x002b0003
     4a0:	200000e0 	.word	0x200000e0
     4a4:	00000abd 	.word	0x00000abd
     4a8:	42001800 	.word	0x42001800
     4ac:	20000944 	.word	0x20000944
     4b0:	00000335 	.word	0x00000335
     4b4:	20000940 	.word	0x20000940
     4b8:	00000309 	.word	0x00000309
     4bc:	2000093c 	.word	0x2000093c
     4c0:	2000000c 	.word	0x2000000c
     4c4:	00001e79 	.word	0x00001e79
     4c8:	00000a2d 	.word	0x00000a2d
     4cc:	e000e100 	.word	0xe000e100
     4d0:	0000034d 	.word	0x0000034d
     4d4:	00000f29 	.word	0x00000f29
     4d8:	00000591 	.word	0x00000591
     4dc:	20000118 	.word	0x20000118
     4e0:	00000f61 	.word	0x00000f61

000004e4 <DeinitializeSerialConsole>:
{
     4e4:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     4e6:	4d0a      	ldr	r5, [pc, #40]	; (510 <DeinitializeSerialConsole+0x2c>)
     4e8:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     4ea:	0020      	movs	r0, r4
     4ec:	4b09      	ldr	r3, [pc, #36]	; (514 <DeinitializeSerialConsole+0x30>)
     4ee:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     4f0:	231f      	movs	r3, #31
     4f2:	4018      	ands	r0, r3
     4f4:	3b1e      	subs	r3, #30
     4f6:	4083      	lsls	r3, r0
     4f8:	2280      	movs	r2, #128	; 0x80
     4fa:	4907      	ldr	r1, [pc, #28]	; (518 <DeinitializeSerialConsole+0x34>)
     4fc:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
     4fe:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     500:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     502:	2b00      	cmp	r3, #0
     504:	d1fc      	bne.n	500 <DeinitializeSerialConsole+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     506:	6823      	ldr	r3, [r4, #0]
     508:	2202      	movs	r2, #2
     50a:	4393      	bics	r3, r2
     50c:	6023      	str	r3, [r4, #0]
}
     50e:	bd70      	pop	{r4, r5, r6, pc}
     510:	200000e0 	.word	0x200000e0
     514:	00000a2d 	.word	0x00000a2d
     518:	e000e100 	.word	0xe000e100

0000051c <SerialConsoleWriteString>:
{
     51c:	b5f0      	push	{r4, r5, r6, r7, lr}
     51e:	46c6      	mov	lr, r8
     520:	b500      	push	{lr}
     522:	0005      	movs	r5, r0
     524:	2400      	movs	r4, #0
	if(string != NULL)
     526:	2800      	cmp	r0, #0
     528:	d012      	beq.n	550 <SerialConsoleWriteString+0x34>
		for (size_t iter = 0; iter < strlen(string); iter++)
     52a:	4e11      	ldr	r6, [pc, #68]	; (570 <SerialConsoleWriteString+0x54>)
			circular_buf_put(cbufTx, string[iter]);
     52c:	4f11      	ldr	r7, [pc, #68]	; (574 <SerialConsoleWriteString+0x58>)
     52e:	4b12      	ldr	r3, [pc, #72]	; (578 <SerialConsoleWriteString+0x5c>)
     530:	4698      	mov	r8, r3
     532:	e003      	b.n	53c <SerialConsoleWriteString+0x20>
     534:	5d29      	ldrb	r1, [r5, r4]
     536:	6838      	ldr	r0, [r7, #0]
     538:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
     53a:	3401      	adds	r4, #1
     53c:	0028      	movs	r0, r5
     53e:	47b0      	blx	r6
     540:	4284      	cmp	r4, r0
     542:	d3f7      	bcc.n	534 <SerialConsoleWriteString+0x18>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     544:	2101      	movs	r1, #1
     546:	480d      	ldr	r0, [pc, #52]	; (57c <SerialConsoleWriteString+0x60>)
     548:	4b0d      	ldr	r3, [pc, #52]	; (580 <SerialConsoleWriteString+0x64>)
     54a:	4798      	blx	r3
     54c:	2800      	cmp	r0, #0
     54e:	d002      	beq.n	556 <SerialConsoleWriteString+0x3a>
}
     550:	bc04      	pop	{r2}
     552:	4690      	mov	r8, r2
     554:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
     556:	4c0b      	ldr	r4, [pc, #44]	; (584 <SerialConsoleWriteString+0x68>)
     558:	4b06      	ldr	r3, [pc, #24]	; (574 <SerialConsoleWriteString+0x58>)
     55a:	6818      	ldr	r0, [r3, #0]
     55c:	0021      	movs	r1, r4
     55e:	4b0a      	ldr	r3, [pc, #40]	; (588 <SerialConsoleWriteString+0x6c>)
     560:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     562:	2201      	movs	r2, #1
     564:	0021      	movs	r1, r4
     566:	4805      	ldr	r0, [pc, #20]	; (57c <SerialConsoleWriteString+0x60>)
     568:	4b08      	ldr	r3, [pc, #32]	; (58c <SerialConsoleWriteString+0x70>)
     56a:	4798      	blx	r3
}
     56c:	e7f0      	b.n	550 <SerialConsoleWriteString+0x34>
     56e:	46c0      	nop			; (mov r8, r8)
     570:	00001fe5 	.word	0x00001fe5
     574:	20000920 	.word	0x20000920
     578:	000002a5 	.word	0x000002a5
     57c:	200000e0 	.word	0x200000e0
     580:	00000f81 	.word	0x00000f81
     584:	2000091c 	.word	0x2000091c
     588:	000002d1 	.word	0x000002d1
     58c:	00000f41 	.word	0x00000f41

00000590 <usart_read_callback>:
{
     590:	b510      	push	{r4, lr}
     592:	b082      	sub	sp, #8
	SerialConsoleWriteString(&latestRx);
     594:	4c0d      	ldr	r4, [pc, #52]	; (5cc <usart_read_callback+0x3c>)
     596:	0020      	movs	r0, r4
     598:	4b0d      	ldr	r3, [pc, #52]	; (5d0 <usart_read_callback+0x40>)
     59a:	4798      	blx	r3
	if(latestRx == 0x08)
     59c:	7823      	ldrb	r3, [r4, #0]
     59e:	2b08      	cmp	r3, #8
     5a0:	d00c      	beq.n	5bc <usart_read_callback+0x2c>
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
     5a2:	4c0a      	ldr	r4, [pc, #40]	; (5cc <usart_read_callback+0x3c>)
     5a4:	7821      	ldrb	r1, [r4, #0]
     5a6:	4b0b      	ldr	r3, [pc, #44]	; (5d4 <usart_read_callback+0x44>)
     5a8:	6818      	ldr	r0, [r3, #0]
     5aa:	4b0b      	ldr	r3, [pc, #44]	; (5d8 <usart_read_callback+0x48>)
     5ac:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
     5ae:	2201      	movs	r2, #1
     5b0:	0021      	movs	r1, r4
     5b2:	480a      	ldr	r0, [pc, #40]	; (5dc <usart_read_callback+0x4c>)
     5b4:	4b0a      	ldr	r3, [pc, #40]	; (5e0 <usart_read_callback+0x50>)
     5b6:	4798      	blx	r3
}
     5b8:	b002      	add	sp, #8
     5ba:	bd10      	pop	{r4, pc}
	a[0] = 0x20;
     5bc:	a801      	add	r0, sp, #4
     5be:	3318      	adds	r3, #24
     5c0:	7003      	strb	r3, [r0, #0]
	a[1]= 0x08;
     5c2:	3b18      	subs	r3, #24
     5c4:	7043      	strb	r3, [r0, #1]
	SerialConsoleWriteString(&a);
     5c6:	4b02      	ldr	r3, [pc, #8]	; (5d0 <usart_read_callback+0x40>)
     5c8:	4798      	blx	r3
     5ca:	e7ea      	b.n	5a2 <usart_read_callback+0x12>
     5cc:	20000118 	.word	0x20000118
     5d0:	0000051d 	.word	0x0000051d
     5d4:	20000114 	.word	0x20000114
     5d8:	000002a5 	.word	0x000002a5
     5dc:	200000e0 	.word	0x200000e0
     5e0:	00000f61 	.word	0x00000f61

000005e4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     5e4:	4b0c      	ldr	r3, [pc, #48]	; (618 <cpu_irq_enter_critical+0x34>)
     5e6:	681b      	ldr	r3, [r3, #0]
     5e8:	2b00      	cmp	r3, #0
     5ea:	d106      	bne.n	5fa <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     5ec:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     5f0:	2b00      	cmp	r3, #0
     5f2:	d007      	beq.n	604 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     5f4:	2200      	movs	r2, #0
     5f6:	4b09      	ldr	r3, [pc, #36]	; (61c <cpu_irq_enter_critical+0x38>)
     5f8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     5fa:	4a07      	ldr	r2, [pc, #28]	; (618 <cpu_irq_enter_critical+0x34>)
     5fc:	6813      	ldr	r3, [r2, #0]
     5fe:	3301      	adds	r3, #1
     600:	6013      	str	r3, [r2, #0]
}
     602:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     604:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     606:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     60a:	2200      	movs	r2, #0
     60c:	4b04      	ldr	r3, [pc, #16]	; (620 <cpu_irq_enter_critical+0x3c>)
     60e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     610:	3201      	adds	r2, #1
     612:	4b02      	ldr	r3, [pc, #8]	; (61c <cpu_irq_enter_critical+0x38>)
     614:	701a      	strb	r2, [r3, #0]
     616:	e7f0      	b.n	5fa <cpu_irq_enter_critical+0x16>
     618:	20000098 	.word	0x20000098
     61c:	2000009c 	.word	0x2000009c
     620:	20000008 	.word	0x20000008

00000624 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     624:	4b08      	ldr	r3, [pc, #32]	; (648 <cpu_irq_leave_critical+0x24>)
     626:	681a      	ldr	r2, [r3, #0]
     628:	3a01      	subs	r2, #1
     62a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     62c:	681b      	ldr	r3, [r3, #0]
     62e:	2b00      	cmp	r3, #0
     630:	d109      	bne.n	646 <cpu_irq_leave_critical+0x22>
     632:	4b06      	ldr	r3, [pc, #24]	; (64c <cpu_irq_leave_critical+0x28>)
     634:	781b      	ldrb	r3, [r3, #0]
     636:	2b00      	cmp	r3, #0
     638:	d005      	beq.n	646 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     63a:	2201      	movs	r2, #1
     63c:	4b04      	ldr	r3, [pc, #16]	; (650 <cpu_irq_leave_critical+0x2c>)
     63e:	701a      	strb	r2, [r3, #0]
     640:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     644:	b662      	cpsie	i
	}
}
     646:	4770      	bx	lr
     648:	20000098 	.word	0x20000098
     64c:	2000009c 	.word	0x2000009c
     650:	20000008 	.word	0x20000008

00000654 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     654:	b500      	push	{lr}
     656:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     658:	ab01      	add	r3, sp, #4
     65a:	2280      	movs	r2, #128	; 0x80
     65c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     65e:	780a      	ldrb	r2, [r1, #0]
     660:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     662:	784a      	ldrb	r2, [r1, #1]
     664:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     666:	788a      	ldrb	r2, [r1, #2]
     668:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     66a:	0019      	movs	r1, r3
     66c:	4b01      	ldr	r3, [pc, #4]	; (674 <port_pin_set_config+0x20>)
     66e:	4798      	blx	r3
}
     670:	b003      	add	sp, #12
     672:	bd00      	pop	{pc}
     674:	00001865 	.word	0x00001865

00000678 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     678:	b5f0      	push	{r4, r5, r6, r7, lr}
     67a:	46de      	mov	lr, fp
     67c:	4657      	mov	r7, sl
     67e:	464e      	mov	r6, r9
     680:	4645      	mov	r5, r8
     682:	b5e0      	push	{r5, r6, r7, lr}
     684:	b087      	sub	sp, #28
     686:	4680      	mov	r8, r0
     688:	9104      	str	r1, [sp, #16]
     68a:	0016      	movs	r6, r2
     68c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     68e:	2200      	movs	r2, #0
     690:	2300      	movs	r3, #0
     692:	2100      	movs	r1, #0
     694:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     696:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     698:	2001      	movs	r0, #1
     69a:	0021      	movs	r1, r4
     69c:	9600      	str	r6, [sp, #0]
     69e:	9701      	str	r7, [sp, #4]
     6a0:	465c      	mov	r4, fp
     6a2:	9403      	str	r4, [sp, #12]
     6a4:	4644      	mov	r4, r8
     6a6:	9405      	str	r4, [sp, #20]
     6a8:	e013      	b.n	6d2 <long_division+0x5a>
     6aa:	2420      	movs	r4, #32
     6ac:	1a64      	subs	r4, r4, r1
     6ae:	0005      	movs	r5, r0
     6b0:	40e5      	lsrs	r5, r4
     6b2:	46a8      	mov	r8, r5
     6b4:	e014      	b.n	6e0 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     6b6:	9c00      	ldr	r4, [sp, #0]
     6b8:	9d01      	ldr	r5, [sp, #4]
     6ba:	1b12      	subs	r2, r2, r4
     6bc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     6be:	465c      	mov	r4, fp
     6c0:	464d      	mov	r5, r9
     6c2:	432c      	orrs	r4, r5
     6c4:	46a3      	mov	fp, r4
     6c6:	9c03      	ldr	r4, [sp, #12]
     6c8:	4645      	mov	r5, r8
     6ca:	432c      	orrs	r4, r5
     6cc:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     6ce:	3901      	subs	r1, #1
     6d0:	d325      	bcc.n	71e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     6d2:	2420      	movs	r4, #32
     6d4:	4264      	negs	r4, r4
     6d6:	190c      	adds	r4, r1, r4
     6d8:	d4e7      	bmi.n	6aa <long_division+0x32>
     6da:	0005      	movs	r5, r0
     6dc:	40a5      	lsls	r5, r4
     6de:	46a8      	mov	r8, r5
     6e0:	0004      	movs	r4, r0
     6e2:	408c      	lsls	r4, r1
     6e4:	46a1      	mov	r9, r4
		r = r << 1;
     6e6:	1892      	adds	r2, r2, r2
     6e8:	415b      	adcs	r3, r3
     6ea:	0014      	movs	r4, r2
     6ec:	001d      	movs	r5, r3
		if (n & bit_shift) {
     6ee:	9e05      	ldr	r6, [sp, #20]
     6f0:	464f      	mov	r7, r9
     6f2:	403e      	ands	r6, r7
     6f4:	46b4      	mov	ip, r6
     6f6:	9e04      	ldr	r6, [sp, #16]
     6f8:	4647      	mov	r7, r8
     6fa:	403e      	ands	r6, r7
     6fc:	46b2      	mov	sl, r6
     6fe:	4666      	mov	r6, ip
     700:	4657      	mov	r7, sl
     702:	433e      	orrs	r6, r7
     704:	d003      	beq.n	70e <long_division+0x96>
			r |= 0x01;
     706:	0006      	movs	r6, r0
     708:	4326      	orrs	r6, r4
     70a:	0032      	movs	r2, r6
     70c:	002b      	movs	r3, r5
		if (r >= d) {
     70e:	9c00      	ldr	r4, [sp, #0]
     710:	9d01      	ldr	r5, [sp, #4]
     712:	429d      	cmp	r5, r3
     714:	d8db      	bhi.n	6ce <long_division+0x56>
     716:	d1ce      	bne.n	6b6 <long_division+0x3e>
     718:	4294      	cmp	r4, r2
     71a:	d8d8      	bhi.n	6ce <long_division+0x56>
     71c:	e7cb      	b.n	6b6 <long_division+0x3e>
     71e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     720:	4658      	mov	r0, fp
     722:	0019      	movs	r1, r3
     724:	b007      	add	sp, #28
     726:	bc3c      	pop	{r2, r3, r4, r5}
     728:	4690      	mov	r8, r2
     72a:	4699      	mov	r9, r3
     72c:	46a2      	mov	sl, r4
     72e:	46ab      	mov	fp, r5
     730:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000732 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     732:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     734:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     736:	2340      	movs	r3, #64	; 0x40
     738:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     73a:	4281      	cmp	r1, r0
     73c:	d202      	bcs.n	744 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     73e:	0018      	movs	r0, r3
     740:	bd10      	pop	{r4, pc}
		baud_calculated++;
     742:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     744:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     746:	1c63      	adds	r3, r4, #1
     748:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     74a:	4288      	cmp	r0, r1
     74c:	d9f9      	bls.n	742 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     74e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     750:	2cff      	cmp	r4, #255	; 0xff
     752:	d8f4      	bhi.n	73e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     754:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     756:	2300      	movs	r3, #0
     758:	e7f1      	b.n	73e <_sercom_get_sync_baud_val+0xc>
	...

0000075c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     75c:	b5f0      	push	{r4, r5, r6, r7, lr}
     75e:	b083      	sub	sp, #12
     760:	000f      	movs	r7, r1
     762:	0016      	movs	r6, r2
     764:	aa08      	add	r2, sp, #32
     766:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     768:	0004      	movs	r4, r0
     76a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     76c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     76e:	42bc      	cmp	r4, r7
     770:	d902      	bls.n	778 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     772:	0010      	movs	r0, r2
     774:	b003      	add	sp, #12
     776:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     778:	2b00      	cmp	r3, #0
     77a:	d114      	bne.n	7a6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     77c:	0002      	movs	r2, r0
     77e:	0008      	movs	r0, r1
     780:	2100      	movs	r1, #0
     782:	4c19      	ldr	r4, [pc, #100]	; (7e8 <_sercom_get_async_baud_val+0x8c>)
     784:	47a0      	blx	r4
     786:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     788:	003a      	movs	r2, r7
     78a:	2300      	movs	r3, #0
     78c:	2000      	movs	r0, #0
     78e:	4c17      	ldr	r4, [pc, #92]	; (7ec <_sercom_get_async_baud_val+0x90>)
     790:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     792:	2200      	movs	r2, #0
     794:	2301      	movs	r3, #1
     796:	1a12      	subs	r2, r2, r0
     798:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     79a:	0c12      	lsrs	r2, r2, #16
     79c:	041b      	lsls	r3, r3, #16
     79e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     7a0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     7a2:	2200      	movs	r2, #0
     7a4:	e7e5      	b.n	772 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     7a6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     7a8:	2b01      	cmp	r3, #1
     7aa:	d1f9      	bne.n	7a0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     7ac:	000a      	movs	r2, r1
     7ae:	2300      	movs	r3, #0
     7b0:	2100      	movs	r1, #0
     7b2:	4c0d      	ldr	r4, [pc, #52]	; (7e8 <_sercom_get_async_baud_val+0x8c>)
     7b4:	47a0      	blx	r4
     7b6:	0002      	movs	r2, r0
     7b8:	000b      	movs	r3, r1
     7ba:	9200      	str	r2, [sp, #0]
     7bc:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     7be:	0038      	movs	r0, r7
     7c0:	2100      	movs	r1, #0
     7c2:	4c0a      	ldr	r4, [pc, #40]	; (7ec <_sercom_get_async_baud_val+0x90>)
     7c4:	47a0      	blx	r4
     7c6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     7c8:	2380      	movs	r3, #128	; 0x80
     7ca:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7cc:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     7ce:	4298      	cmp	r0, r3
     7d0:	d8cf      	bhi.n	772 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     7d2:	0f79      	lsrs	r1, r7, #29
     7d4:	00f8      	lsls	r0, r7, #3
     7d6:	9a00      	ldr	r2, [sp, #0]
     7d8:	9b01      	ldr	r3, [sp, #4]
     7da:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     7dc:	00ea      	lsls	r2, r5, #3
     7de:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     7e0:	b2d2      	uxtb	r2, r2
     7e2:	0352      	lsls	r2, r2, #13
     7e4:	432a      	orrs	r2, r5
     7e6:	e7db      	b.n	7a0 <_sercom_get_async_baud_val+0x44>
     7e8:	00001c45 	.word	0x00001c45
     7ec:	00000679 	.word	0x00000679

000007f0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     7f0:	b510      	push	{r4, lr}
     7f2:	b082      	sub	sp, #8
     7f4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     7f6:	4b0e      	ldr	r3, [pc, #56]	; (830 <sercom_set_gclk_generator+0x40>)
     7f8:	781b      	ldrb	r3, [r3, #0]
     7fa:	2b00      	cmp	r3, #0
     7fc:	d007      	beq.n	80e <sercom_set_gclk_generator+0x1e>
     7fe:	2900      	cmp	r1, #0
     800:	d105      	bne.n	80e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     802:	4b0b      	ldr	r3, [pc, #44]	; (830 <sercom_set_gclk_generator+0x40>)
     804:	785b      	ldrb	r3, [r3, #1]
     806:	4283      	cmp	r3, r0
     808:	d010      	beq.n	82c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     80a:	201d      	movs	r0, #29
     80c:	e00c      	b.n	828 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     80e:	a901      	add	r1, sp, #4
     810:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     812:	2013      	movs	r0, #19
     814:	4b07      	ldr	r3, [pc, #28]	; (834 <sercom_set_gclk_generator+0x44>)
     816:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     818:	2013      	movs	r0, #19
     81a:	4b07      	ldr	r3, [pc, #28]	; (838 <sercom_set_gclk_generator+0x48>)
     81c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     81e:	4b04      	ldr	r3, [pc, #16]	; (830 <sercom_set_gclk_generator+0x40>)
     820:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     822:	2201      	movs	r2, #1
     824:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     826:	2000      	movs	r0, #0
}
     828:	b002      	add	sp, #8
     82a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     82c:	2000      	movs	r0, #0
     82e:	e7fb      	b.n	828 <sercom_set_gclk_generator+0x38>
     830:	200000a0 	.word	0x200000a0
     834:	0000176d 	.word	0x0000176d
     838:	000016e1 	.word	0x000016e1

0000083c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     83c:	4b40      	ldr	r3, [pc, #256]	; (940 <_sercom_get_default_pad+0x104>)
     83e:	4298      	cmp	r0, r3
     840:	d031      	beq.n	8a6 <_sercom_get_default_pad+0x6a>
     842:	d90a      	bls.n	85a <_sercom_get_default_pad+0x1e>
     844:	4b3f      	ldr	r3, [pc, #252]	; (944 <_sercom_get_default_pad+0x108>)
     846:	4298      	cmp	r0, r3
     848:	d04d      	beq.n	8e6 <_sercom_get_default_pad+0xaa>
     84a:	4b3f      	ldr	r3, [pc, #252]	; (948 <_sercom_get_default_pad+0x10c>)
     84c:	4298      	cmp	r0, r3
     84e:	d05a      	beq.n	906 <_sercom_get_default_pad+0xca>
     850:	4b3e      	ldr	r3, [pc, #248]	; (94c <_sercom_get_default_pad+0x110>)
     852:	4298      	cmp	r0, r3
     854:	d037      	beq.n	8c6 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     856:	2000      	movs	r0, #0
}
     858:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     85a:	4b3d      	ldr	r3, [pc, #244]	; (950 <_sercom_get_default_pad+0x114>)
     85c:	4298      	cmp	r0, r3
     85e:	d00c      	beq.n	87a <_sercom_get_default_pad+0x3e>
     860:	4b3c      	ldr	r3, [pc, #240]	; (954 <_sercom_get_default_pad+0x118>)
     862:	4298      	cmp	r0, r3
     864:	d1f7      	bne.n	856 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     866:	2901      	cmp	r1, #1
     868:	d017      	beq.n	89a <_sercom_get_default_pad+0x5e>
     86a:	2900      	cmp	r1, #0
     86c:	d05d      	beq.n	92a <_sercom_get_default_pad+0xee>
     86e:	2902      	cmp	r1, #2
     870:	d015      	beq.n	89e <_sercom_get_default_pad+0x62>
     872:	2903      	cmp	r1, #3
     874:	d015      	beq.n	8a2 <_sercom_get_default_pad+0x66>
	return 0;
     876:	2000      	movs	r0, #0
     878:	e7ee      	b.n	858 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     87a:	2901      	cmp	r1, #1
     87c:	d007      	beq.n	88e <_sercom_get_default_pad+0x52>
     87e:	2900      	cmp	r1, #0
     880:	d051      	beq.n	926 <_sercom_get_default_pad+0xea>
     882:	2902      	cmp	r1, #2
     884:	d005      	beq.n	892 <_sercom_get_default_pad+0x56>
     886:	2903      	cmp	r1, #3
     888:	d005      	beq.n	896 <_sercom_get_default_pad+0x5a>
	return 0;
     88a:	2000      	movs	r0, #0
     88c:	e7e4      	b.n	858 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     88e:	4832      	ldr	r0, [pc, #200]	; (958 <_sercom_get_default_pad+0x11c>)
     890:	e7e2      	b.n	858 <_sercom_get_default_pad+0x1c>
     892:	4832      	ldr	r0, [pc, #200]	; (95c <_sercom_get_default_pad+0x120>)
     894:	e7e0      	b.n	858 <_sercom_get_default_pad+0x1c>
     896:	4832      	ldr	r0, [pc, #200]	; (960 <_sercom_get_default_pad+0x124>)
     898:	e7de      	b.n	858 <_sercom_get_default_pad+0x1c>
     89a:	4832      	ldr	r0, [pc, #200]	; (964 <_sercom_get_default_pad+0x128>)
     89c:	e7dc      	b.n	858 <_sercom_get_default_pad+0x1c>
     89e:	4832      	ldr	r0, [pc, #200]	; (968 <_sercom_get_default_pad+0x12c>)
     8a0:	e7da      	b.n	858 <_sercom_get_default_pad+0x1c>
     8a2:	4832      	ldr	r0, [pc, #200]	; (96c <_sercom_get_default_pad+0x130>)
     8a4:	e7d8      	b.n	858 <_sercom_get_default_pad+0x1c>
     8a6:	2901      	cmp	r1, #1
     8a8:	d007      	beq.n	8ba <_sercom_get_default_pad+0x7e>
     8aa:	2900      	cmp	r1, #0
     8ac:	d03f      	beq.n	92e <_sercom_get_default_pad+0xf2>
     8ae:	2902      	cmp	r1, #2
     8b0:	d005      	beq.n	8be <_sercom_get_default_pad+0x82>
     8b2:	2903      	cmp	r1, #3
     8b4:	d005      	beq.n	8c2 <_sercom_get_default_pad+0x86>
	return 0;
     8b6:	2000      	movs	r0, #0
     8b8:	e7ce      	b.n	858 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8ba:	482d      	ldr	r0, [pc, #180]	; (970 <_sercom_get_default_pad+0x134>)
     8bc:	e7cc      	b.n	858 <_sercom_get_default_pad+0x1c>
     8be:	482d      	ldr	r0, [pc, #180]	; (974 <_sercom_get_default_pad+0x138>)
     8c0:	e7ca      	b.n	858 <_sercom_get_default_pad+0x1c>
     8c2:	482d      	ldr	r0, [pc, #180]	; (978 <_sercom_get_default_pad+0x13c>)
     8c4:	e7c8      	b.n	858 <_sercom_get_default_pad+0x1c>
     8c6:	2901      	cmp	r1, #1
     8c8:	d007      	beq.n	8da <_sercom_get_default_pad+0x9e>
     8ca:	2900      	cmp	r1, #0
     8cc:	d031      	beq.n	932 <_sercom_get_default_pad+0xf6>
     8ce:	2902      	cmp	r1, #2
     8d0:	d005      	beq.n	8de <_sercom_get_default_pad+0xa2>
     8d2:	2903      	cmp	r1, #3
     8d4:	d005      	beq.n	8e2 <_sercom_get_default_pad+0xa6>
	return 0;
     8d6:	2000      	movs	r0, #0
     8d8:	e7be      	b.n	858 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8da:	4828      	ldr	r0, [pc, #160]	; (97c <_sercom_get_default_pad+0x140>)
     8dc:	e7bc      	b.n	858 <_sercom_get_default_pad+0x1c>
     8de:	4828      	ldr	r0, [pc, #160]	; (980 <_sercom_get_default_pad+0x144>)
     8e0:	e7ba      	b.n	858 <_sercom_get_default_pad+0x1c>
     8e2:	4828      	ldr	r0, [pc, #160]	; (984 <_sercom_get_default_pad+0x148>)
     8e4:	e7b8      	b.n	858 <_sercom_get_default_pad+0x1c>
     8e6:	2901      	cmp	r1, #1
     8e8:	d007      	beq.n	8fa <_sercom_get_default_pad+0xbe>
     8ea:	2900      	cmp	r1, #0
     8ec:	d023      	beq.n	936 <_sercom_get_default_pad+0xfa>
     8ee:	2902      	cmp	r1, #2
     8f0:	d005      	beq.n	8fe <_sercom_get_default_pad+0xc2>
     8f2:	2903      	cmp	r1, #3
     8f4:	d005      	beq.n	902 <_sercom_get_default_pad+0xc6>
	return 0;
     8f6:	2000      	movs	r0, #0
     8f8:	e7ae      	b.n	858 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8fa:	4823      	ldr	r0, [pc, #140]	; (988 <_sercom_get_default_pad+0x14c>)
     8fc:	e7ac      	b.n	858 <_sercom_get_default_pad+0x1c>
     8fe:	4823      	ldr	r0, [pc, #140]	; (98c <_sercom_get_default_pad+0x150>)
     900:	e7aa      	b.n	858 <_sercom_get_default_pad+0x1c>
     902:	4823      	ldr	r0, [pc, #140]	; (990 <_sercom_get_default_pad+0x154>)
     904:	e7a8      	b.n	858 <_sercom_get_default_pad+0x1c>
     906:	2901      	cmp	r1, #1
     908:	d007      	beq.n	91a <_sercom_get_default_pad+0xde>
     90a:	2900      	cmp	r1, #0
     90c:	d015      	beq.n	93a <_sercom_get_default_pad+0xfe>
     90e:	2902      	cmp	r1, #2
     910:	d005      	beq.n	91e <_sercom_get_default_pad+0xe2>
     912:	2903      	cmp	r1, #3
     914:	d005      	beq.n	922 <_sercom_get_default_pad+0xe6>
	return 0;
     916:	2000      	movs	r0, #0
     918:	e79e      	b.n	858 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     91a:	481e      	ldr	r0, [pc, #120]	; (994 <_sercom_get_default_pad+0x158>)
     91c:	e79c      	b.n	858 <_sercom_get_default_pad+0x1c>
     91e:	481e      	ldr	r0, [pc, #120]	; (998 <_sercom_get_default_pad+0x15c>)
     920:	e79a      	b.n	858 <_sercom_get_default_pad+0x1c>
     922:	481e      	ldr	r0, [pc, #120]	; (99c <_sercom_get_default_pad+0x160>)
     924:	e798      	b.n	858 <_sercom_get_default_pad+0x1c>
     926:	481e      	ldr	r0, [pc, #120]	; (9a0 <_sercom_get_default_pad+0x164>)
     928:	e796      	b.n	858 <_sercom_get_default_pad+0x1c>
     92a:	2003      	movs	r0, #3
     92c:	e794      	b.n	858 <_sercom_get_default_pad+0x1c>
     92e:	481d      	ldr	r0, [pc, #116]	; (9a4 <_sercom_get_default_pad+0x168>)
     930:	e792      	b.n	858 <_sercom_get_default_pad+0x1c>
     932:	481d      	ldr	r0, [pc, #116]	; (9a8 <_sercom_get_default_pad+0x16c>)
     934:	e790      	b.n	858 <_sercom_get_default_pad+0x1c>
     936:	481d      	ldr	r0, [pc, #116]	; (9ac <_sercom_get_default_pad+0x170>)
     938:	e78e      	b.n	858 <_sercom_get_default_pad+0x1c>
     93a:	481d      	ldr	r0, [pc, #116]	; (9b0 <_sercom_get_default_pad+0x174>)
     93c:	e78c      	b.n	858 <_sercom_get_default_pad+0x1c>
     93e:	46c0      	nop			; (mov r8, r8)
     940:	42001000 	.word	0x42001000
     944:	42001800 	.word	0x42001800
     948:	42001c00 	.word	0x42001c00
     94c:	42001400 	.word	0x42001400
     950:	42000800 	.word	0x42000800
     954:	42000c00 	.word	0x42000c00
     958:	00050003 	.word	0x00050003
     95c:	00060003 	.word	0x00060003
     960:	00070003 	.word	0x00070003
     964:	00010003 	.word	0x00010003
     968:	001e0003 	.word	0x001e0003
     96c:	001f0003 	.word	0x001f0003
     970:	00090003 	.word	0x00090003
     974:	000a0003 	.word	0x000a0003
     978:	000b0003 	.word	0x000b0003
     97c:	00110003 	.word	0x00110003
     980:	00120003 	.word	0x00120003
     984:	00130003 	.word	0x00130003
     988:	000d0003 	.word	0x000d0003
     98c:	000e0003 	.word	0x000e0003
     990:	000f0003 	.word	0x000f0003
     994:	00170003 	.word	0x00170003
     998:	00180003 	.word	0x00180003
     99c:	00190003 	.word	0x00190003
     9a0:	00040003 	.word	0x00040003
     9a4:	00080003 	.word	0x00080003
     9a8:	00100003 	.word	0x00100003
     9ac:	000c0003 	.word	0x000c0003
     9b0:	00160003 	.word	0x00160003

000009b4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     9b4:	b530      	push	{r4, r5, lr}
     9b6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     9b8:	4b0b      	ldr	r3, [pc, #44]	; (9e8 <_sercom_get_sercom_inst_index+0x34>)
     9ba:	466a      	mov	r2, sp
     9bc:	cb32      	ldmia	r3!, {r1, r4, r5}
     9be:	c232      	stmia	r2!, {r1, r4, r5}
     9c0:	cb32      	ldmia	r3!, {r1, r4, r5}
     9c2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     9c4:	9b00      	ldr	r3, [sp, #0]
     9c6:	4283      	cmp	r3, r0
     9c8:	d00b      	beq.n	9e2 <_sercom_get_sercom_inst_index+0x2e>
     9ca:	2301      	movs	r3, #1
     9cc:	009a      	lsls	r2, r3, #2
     9ce:	4669      	mov	r1, sp
     9d0:	5852      	ldr	r2, [r2, r1]
     9d2:	4282      	cmp	r2, r0
     9d4:	d006      	beq.n	9e4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9d6:	3301      	adds	r3, #1
     9d8:	2b06      	cmp	r3, #6
     9da:	d1f7      	bne.n	9cc <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     9dc:	2000      	movs	r0, #0
}
     9de:	b007      	add	sp, #28
     9e0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9e2:	2300      	movs	r3, #0
			return i;
     9e4:	b2d8      	uxtb	r0, r3
     9e6:	e7fa      	b.n	9de <_sercom_get_sercom_inst_index+0x2a>
     9e8:	000024bc 	.word	0x000024bc

000009ec <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     9ec:	4770      	bx	lr
	...

000009f0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     9f2:	4b0a      	ldr	r3, [pc, #40]	; (a1c <_sercom_set_handler+0x2c>)
     9f4:	781b      	ldrb	r3, [r3, #0]
     9f6:	2b00      	cmp	r3, #0
     9f8:	d10c      	bne.n	a14 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     9fa:	4f09      	ldr	r7, [pc, #36]	; (a20 <_sercom_set_handler+0x30>)
     9fc:	4e09      	ldr	r6, [pc, #36]	; (a24 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     9fe:	4d0a      	ldr	r5, [pc, #40]	; (a28 <_sercom_set_handler+0x38>)
     a00:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a02:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     a04:	195a      	adds	r2, r3, r5
     a06:	6014      	str	r4, [r2, #0]
     a08:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a0a:	2b18      	cmp	r3, #24
     a0c:	d1f9      	bne.n	a02 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     a0e:	2201      	movs	r2, #1
     a10:	4b02      	ldr	r3, [pc, #8]	; (a1c <_sercom_set_handler+0x2c>)
     a12:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     a14:	0080      	lsls	r0, r0, #2
     a16:	4b02      	ldr	r3, [pc, #8]	; (a20 <_sercom_set_handler+0x30>)
     a18:	50c1      	str	r1, [r0, r3]
}
     a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a1c:	200000a2 	.word	0x200000a2
     a20:	200000a4 	.word	0x200000a4
     a24:	000009ed 	.word	0x000009ed
     a28:	20000924 	.word	0x20000924

00000a2c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     a2c:	b500      	push	{lr}
     a2e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     a30:	2309      	movs	r3, #9
     a32:	466a      	mov	r2, sp
     a34:	7013      	strb	r3, [r2, #0]
     a36:	3301      	adds	r3, #1
     a38:	7053      	strb	r3, [r2, #1]
     a3a:	3301      	adds	r3, #1
     a3c:	7093      	strb	r3, [r2, #2]
     a3e:	3301      	adds	r3, #1
     a40:	70d3      	strb	r3, [r2, #3]
     a42:	3301      	adds	r3, #1
     a44:	7113      	strb	r3, [r2, #4]
     a46:	3301      	adds	r3, #1
     a48:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     a4a:	4b03      	ldr	r3, [pc, #12]	; (a58 <_sercom_get_interrupt_vector+0x2c>)
     a4c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     a4e:	466b      	mov	r3, sp
     a50:	5618      	ldrsb	r0, [r3, r0]
}
     a52:	b003      	add	sp, #12
     a54:	bd00      	pop	{pc}
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	000009b5 	.word	0x000009b5

00000a5c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     a5c:	b510      	push	{r4, lr}
     a5e:	4b02      	ldr	r3, [pc, #8]	; (a68 <SERCOM0_Handler+0xc>)
     a60:	681b      	ldr	r3, [r3, #0]
     a62:	2000      	movs	r0, #0
     a64:	4798      	blx	r3
     a66:	bd10      	pop	{r4, pc}
     a68:	200000a4 	.word	0x200000a4

00000a6c <SERCOM1_Handler>:
     a6c:	b510      	push	{r4, lr}
     a6e:	4b02      	ldr	r3, [pc, #8]	; (a78 <SERCOM1_Handler+0xc>)
     a70:	685b      	ldr	r3, [r3, #4]
     a72:	2001      	movs	r0, #1
     a74:	4798      	blx	r3
     a76:	bd10      	pop	{r4, pc}
     a78:	200000a4 	.word	0x200000a4

00000a7c <SERCOM2_Handler>:
     a7c:	b510      	push	{r4, lr}
     a7e:	4b02      	ldr	r3, [pc, #8]	; (a88 <SERCOM2_Handler+0xc>)
     a80:	689b      	ldr	r3, [r3, #8]
     a82:	2002      	movs	r0, #2
     a84:	4798      	blx	r3
     a86:	bd10      	pop	{r4, pc}
     a88:	200000a4 	.word	0x200000a4

00000a8c <SERCOM3_Handler>:
     a8c:	b510      	push	{r4, lr}
     a8e:	4b02      	ldr	r3, [pc, #8]	; (a98 <SERCOM3_Handler+0xc>)
     a90:	68db      	ldr	r3, [r3, #12]
     a92:	2003      	movs	r0, #3
     a94:	4798      	blx	r3
     a96:	bd10      	pop	{r4, pc}
     a98:	200000a4 	.word	0x200000a4

00000a9c <SERCOM4_Handler>:
     a9c:	b510      	push	{r4, lr}
     a9e:	4b02      	ldr	r3, [pc, #8]	; (aa8 <SERCOM4_Handler+0xc>)
     aa0:	691b      	ldr	r3, [r3, #16]
     aa2:	2004      	movs	r0, #4
     aa4:	4798      	blx	r3
     aa6:	bd10      	pop	{r4, pc}
     aa8:	200000a4 	.word	0x200000a4

00000aac <SERCOM5_Handler>:
     aac:	b510      	push	{r4, lr}
     aae:	4b02      	ldr	r3, [pc, #8]	; (ab8 <SERCOM5_Handler+0xc>)
     ab0:	695b      	ldr	r3, [r3, #20]
     ab2:	2005      	movs	r0, #5
     ab4:	4798      	blx	r3
     ab6:	bd10      	pop	{r4, pc}
     ab8:	200000a4 	.word	0x200000a4

00000abc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     abc:	b5f0      	push	{r4, r5, r6, r7, lr}
     abe:	46de      	mov	lr, fp
     ac0:	4657      	mov	r7, sl
     ac2:	464e      	mov	r6, r9
     ac4:	4645      	mov	r5, r8
     ac6:	b5e0      	push	{r5, r6, r7, lr}
     ac8:	b091      	sub	sp, #68	; 0x44
     aca:	0005      	movs	r5, r0
     acc:	000c      	movs	r4, r1
     ace:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     ad0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ad2:	0008      	movs	r0, r1
     ad4:	4bbc      	ldr	r3, [pc, #752]	; (dc8 <usart_init+0x30c>)
     ad6:	4798      	blx	r3
     ad8:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ada:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     adc:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ade:	07db      	lsls	r3, r3, #31
     ae0:	d506      	bpl.n	af0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     ae2:	b011      	add	sp, #68	; 0x44
     ae4:	bc3c      	pop	{r2, r3, r4, r5}
     ae6:	4690      	mov	r8, r2
     ae8:	4699      	mov	r9, r3
     aea:	46a2      	mov	sl, r4
     aec:	46ab      	mov	fp, r5
     aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     af0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     af2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     af4:	079b      	lsls	r3, r3, #30
     af6:	d4f4      	bmi.n	ae2 <usart_init+0x26>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     af8:	49b4      	ldr	r1, [pc, #720]	; (dcc <usart_init+0x310>)
     afa:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     afc:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     afe:	2301      	movs	r3, #1
     b00:	40bb      	lsls	r3, r7
     b02:	4303      	orrs	r3, r0
     b04:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     b06:	a90f      	add	r1, sp, #60	; 0x3c
     b08:	272d      	movs	r7, #45	; 0x2d
     b0a:	5df3      	ldrb	r3, [r6, r7]
     b0c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b0e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b10:	b2d3      	uxtb	r3, r2
     b12:	9302      	str	r3, [sp, #8]
     b14:	0018      	movs	r0, r3
     b16:	4bae      	ldr	r3, [pc, #696]	; (dd0 <usart_init+0x314>)
     b18:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b1a:	9802      	ldr	r0, [sp, #8]
     b1c:	4bad      	ldr	r3, [pc, #692]	; (dd4 <usart_init+0x318>)
     b1e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b20:	5df0      	ldrb	r0, [r6, r7]
     b22:	2100      	movs	r1, #0
     b24:	4bac      	ldr	r3, [pc, #688]	; (dd8 <usart_init+0x31c>)
     b26:	4798      	blx	r3
	module->character_size = config->character_size;
     b28:	7af3      	ldrb	r3, [r6, #11]
     b2a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     b2c:	2324      	movs	r3, #36	; 0x24
     b2e:	5cf3      	ldrb	r3, [r6, r3]
     b30:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     b32:	2325      	movs	r3, #37	; 0x25
     b34:	5cf3      	ldrb	r3, [r6, r3]
     b36:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     b38:	7ef3      	ldrb	r3, [r6, #27]
     b3a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     b3c:	7f33      	ldrb	r3, [r6, #28]
     b3e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     b40:	682b      	ldr	r3, [r5, #0]
     b42:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b44:	0018      	movs	r0, r3
     b46:	4ba0      	ldr	r3, [pc, #640]	; (dc8 <usart_init+0x30c>)
     b48:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b4a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     b4c:	2200      	movs	r2, #0
     b4e:	230e      	movs	r3, #14
     b50:	a906      	add	r1, sp, #24
     b52:	468c      	mov	ip, r1
     b54:	4463      	add	r3, ip
     b56:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     b58:	8a32      	ldrh	r2, [r6, #16]
     b5a:	9202      	str	r2, [sp, #8]
     b5c:	2380      	movs	r3, #128	; 0x80
     b5e:	01db      	lsls	r3, r3, #7
     b60:	429a      	cmp	r2, r3
     b62:	d100      	bne.n	b66 <usart_init+0xaa>
     b64:	e09e      	b.n	ca4 <usart_init+0x1e8>
     b66:	d90f      	bls.n	b88 <usart_init+0xcc>
     b68:	23c0      	movs	r3, #192	; 0xc0
     b6a:	01db      	lsls	r3, r3, #7
     b6c:	9a02      	ldr	r2, [sp, #8]
     b6e:	429a      	cmp	r2, r3
     b70:	d100      	bne.n	b74 <usart_init+0xb8>
     b72:	e092      	b.n	c9a <usart_init+0x1de>
     b74:	2380      	movs	r3, #128	; 0x80
     b76:	021b      	lsls	r3, r3, #8
     b78:	429a      	cmp	r2, r3
     b7a:	d000      	beq.n	b7e <usart_init+0xc2>
     b7c:	e11f      	b.n	dbe <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     b7e:	2303      	movs	r3, #3
     b80:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b82:	2300      	movs	r3, #0
     b84:	9307      	str	r3, [sp, #28]
     b86:	e008      	b.n	b9a <usart_init+0xde>
	switch (config->sample_rate) {
     b88:	2380      	movs	r3, #128	; 0x80
     b8a:	019b      	lsls	r3, r3, #6
     b8c:	429a      	cmp	r2, r3
     b8e:	d000      	beq.n	b92 <usart_init+0xd6>
     b90:	e115      	b.n	dbe <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b92:	2310      	movs	r3, #16
     b94:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b96:	3b0f      	subs	r3, #15
     b98:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     b9a:	6833      	ldr	r3, [r6, #0]
     b9c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     b9e:	68f3      	ldr	r3, [r6, #12]
     ba0:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     ba2:	6973      	ldr	r3, [r6, #20]
     ba4:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ba6:	7e33      	ldrb	r3, [r6, #24]
     ba8:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     baa:	2326      	movs	r3, #38	; 0x26
     bac:	5cf3      	ldrb	r3, [r6, r3]
     bae:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     bb0:	6873      	ldr	r3, [r6, #4]
     bb2:	4699      	mov	r9, r3
	switch (transfer_mode)
     bb4:	2b00      	cmp	r3, #0
     bb6:	d100      	bne.n	bba <usart_init+0xfe>
     bb8:	e0a0      	b.n	cfc <usart_init+0x240>
     bba:	2380      	movs	r3, #128	; 0x80
     bbc:	055b      	lsls	r3, r3, #21
     bbe:	4599      	cmp	r9, r3
     bc0:	d100      	bne.n	bc4 <usart_init+0x108>
     bc2:	e084      	b.n	cce <usart_init+0x212>
	if(config->encoding_format_enable) {
     bc4:	7e73      	ldrb	r3, [r6, #25]
     bc6:	2b00      	cmp	r3, #0
     bc8:	d002      	beq.n	bd0 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     bca:	7eb3      	ldrb	r3, [r6, #26]
     bcc:	4642      	mov	r2, r8
     bce:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     bd0:	682a      	ldr	r2, [r5, #0]
     bd2:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     bd4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     bd6:	2b00      	cmp	r3, #0
     bd8:	d1fc      	bne.n	bd4 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     bda:	330e      	adds	r3, #14
     bdc:	aa06      	add	r2, sp, #24
     bde:	4694      	mov	ip, r2
     be0:	4463      	add	r3, ip
     be2:	881b      	ldrh	r3, [r3, #0]
     be4:	4642      	mov	r2, r8
     be6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     be8:	9b05      	ldr	r3, [sp, #20]
     bea:	9a03      	ldr	r2, [sp, #12]
     bec:	4313      	orrs	r3, r2
     bee:	9a04      	ldr	r2, [sp, #16]
     bf0:	4313      	orrs	r3, r2
     bf2:	464a      	mov	r2, r9
     bf4:	4313      	orrs	r3, r2
     bf6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     bf8:	465b      	mov	r3, fp
     bfa:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     bfc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     bfe:	4653      	mov	r3, sl
     c00:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     c02:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     c04:	2327      	movs	r3, #39	; 0x27
     c06:	5cf3      	ldrb	r3, [r6, r3]
     c08:	2b00      	cmp	r3, #0
     c0a:	d101      	bne.n	c10 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     c0c:	3304      	adds	r3, #4
     c0e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c10:	7e73      	ldrb	r3, [r6, #25]
     c12:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c14:	7f32      	ldrb	r2, [r6, #28]
     c16:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c18:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c1a:	7f72      	ldrb	r2, [r6, #29]
     c1c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c1e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c20:	2224      	movs	r2, #36	; 0x24
     c22:	5cb2      	ldrb	r2, [r6, r2]
     c24:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c26:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     c28:	2225      	movs	r2, #37	; 0x25
     c2a:	5cb2      	ldrb	r2, [r6, r2]
     c2c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c2e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     c30:	7ab1      	ldrb	r1, [r6, #10]
     c32:	7af2      	ldrb	r2, [r6, #11]
     c34:	4311      	orrs	r1, r2
     c36:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     c38:	8933      	ldrh	r3, [r6, #8]
     c3a:	2bff      	cmp	r3, #255	; 0xff
     c3c:	d100      	bne.n	c40 <usart_init+0x184>
     c3e:	e081      	b.n	d44 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     c40:	2280      	movs	r2, #128	; 0x80
     c42:	0452      	lsls	r2, r2, #17
     c44:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     c46:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     c48:	232c      	movs	r3, #44	; 0x2c
     c4a:	5cf3      	ldrb	r3, [r6, r3]
     c4c:	2b00      	cmp	r3, #0
     c4e:	d103      	bne.n	c58 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     c50:	4b62      	ldr	r3, [pc, #392]	; (ddc <usart_init+0x320>)
     c52:	789b      	ldrb	r3, [r3, #2]
     c54:	079b      	lsls	r3, r3, #30
     c56:	d501      	bpl.n	c5c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     c58:	2380      	movs	r3, #128	; 0x80
     c5a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     c5c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     c5e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     c60:	2b00      	cmp	r3, #0
     c62:	d1fc      	bne.n	c5e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     c64:	4643      	mov	r3, r8
     c66:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     c68:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     c6a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     c6c:	2b00      	cmp	r3, #0
     c6e:	d1fc      	bne.n	c6a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     c70:	4643      	mov	r3, r8
     c72:	601f      	str	r7, [r3, #0]
     c74:	ab0e      	add	r3, sp, #56	; 0x38
     c76:	2280      	movs	r2, #128	; 0x80
     c78:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c7a:	2200      	movs	r2, #0
     c7c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     c7e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c80:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     c82:	6b33      	ldr	r3, [r6, #48]	; 0x30
     c84:	930a      	str	r3, [sp, #40]	; 0x28
     c86:	6b73      	ldr	r3, [r6, #52]	; 0x34
     c88:	930b      	str	r3, [sp, #44]	; 0x2c
     c8a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     c8c:	930c      	str	r3, [sp, #48]	; 0x30
     c8e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     c90:	9302      	str	r3, [sp, #8]
     c92:	930d      	str	r3, [sp, #52]	; 0x34
     c94:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c96:	ae0a      	add	r6, sp, #40	; 0x28
     c98:	e063      	b.n	d62 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     c9a:	2308      	movs	r3, #8
     c9c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c9e:	3b07      	subs	r3, #7
     ca0:	9307      	str	r3, [sp, #28]
     ca2:	e77a      	b.n	b9a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     ca4:	6833      	ldr	r3, [r6, #0]
     ca6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     ca8:	68f3      	ldr	r3, [r6, #12]
     caa:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     cac:	6973      	ldr	r3, [r6, #20]
     cae:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     cb0:	7e33      	ldrb	r3, [r6, #24]
     cb2:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     cb4:	2326      	movs	r3, #38	; 0x26
     cb6:	5cf3      	ldrb	r3, [r6, r3]
     cb8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     cba:	6873      	ldr	r3, [r6, #4]
     cbc:	4699      	mov	r9, r3
	switch (transfer_mode)
     cbe:	2b00      	cmp	r3, #0
     cc0:	d018      	beq.n	cf4 <usart_init+0x238>
     cc2:	2380      	movs	r3, #128	; 0x80
     cc4:	055b      	lsls	r3, r3, #21
     cc6:	4599      	cmp	r9, r3
     cc8:	d001      	beq.n	cce <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     cca:	2000      	movs	r0, #0
     ccc:	e025      	b.n	d1a <usart_init+0x25e>
			if (!config->use_external_clock) {
     cce:	2327      	movs	r3, #39	; 0x27
     cd0:	5cf3      	ldrb	r3, [r6, r3]
     cd2:	2b00      	cmp	r3, #0
     cd4:	d000      	beq.n	cd8 <usart_init+0x21c>
     cd6:	e775      	b.n	bc4 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     cd8:	6a33      	ldr	r3, [r6, #32]
     cda:	001f      	movs	r7, r3
     cdc:	b2c0      	uxtb	r0, r0
     cde:	4b40      	ldr	r3, [pc, #256]	; (de0 <usart_init+0x324>)
     ce0:	4798      	blx	r3
     ce2:	0001      	movs	r1, r0
     ce4:	220e      	movs	r2, #14
     ce6:	ab06      	add	r3, sp, #24
     ce8:	469c      	mov	ip, r3
     cea:	4462      	add	r2, ip
     cec:	0038      	movs	r0, r7
     cee:	4b3d      	ldr	r3, [pc, #244]	; (de4 <usart_init+0x328>)
     cf0:	4798      	blx	r3
     cf2:	e012      	b.n	d1a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     cf4:	2308      	movs	r3, #8
     cf6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     cf8:	2300      	movs	r3, #0
     cfa:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     cfc:	2327      	movs	r3, #39	; 0x27
     cfe:	5cf3      	ldrb	r3, [r6, r3]
     d00:	2b00      	cmp	r3, #0
     d02:	d00e      	beq.n	d22 <usart_init+0x266>
				status_code =
     d04:	9b06      	ldr	r3, [sp, #24]
     d06:	9300      	str	r3, [sp, #0]
     d08:	9b07      	ldr	r3, [sp, #28]
     d0a:	220e      	movs	r2, #14
     d0c:	a906      	add	r1, sp, #24
     d0e:	468c      	mov	ip, r1
     d10:	4462      	add	r2, ip
     d12:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     d14:	6a30      	ldr	r0, [r6, #32]
     d16:	4f34      	ldr	r7, [pc, #208]	; (de8 <usart_init+0x32c>)
     d18:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     d1a:	2800      	cmp	r0, #0
     d1c:	d000      	beq.n	d20 <usart_init+0x264>
     d1e:	e6e0      	b.n	ae2 <usart_init+0x26>
     d20:	e750      	b.n	bc4 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     d22:	6a33      	ldr	r3, [r6, #32]
     d24:	001f      	movs	r7, r3
     d26:	b2c0      	uxtb	r0, r0
     d28:	4b2d      	ldr	r3, [pc, #180]	; (de0 <usart_init+0x324>)
     d2a:	4798      	blx	r3
     d2c:	0001      	movs	r1, r0
				status_code =
     d2e:	9b06      	ldr	r3, [sp, #24]
     d30:	9300      	str	r3, [sp, #0]
     d32:	9b07      	ldr	r3, [sp, #28]
     d34:	220e      	movs	r2, #14
     d36:	a806      	add	r0, sp, #24
     d38:	4684      	mov	ip, r0
     d3a:	4462      	add	r2, ip
     d3c:	0038      	movs	r0, r7
     d3e:	4f2a      	ldr	r7, [pc, #168]	; (de8 <usart_init+0x32c>)
     d40:	47b8      	blx	r7
     d42:	e7ea      	b.n	d1a <usart_init+0x25e>
		if(config->lin_slave_enable) {
     d44:	7ef3      	ldrb	r3, [r6, #27]
     d46:	2b00      	cmp	r3, #0
     d48:	d100      	bne.n	d4c <usart_init+0x290>
     d4a:	e77d      	b.n	c48 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     d4c:	2380      	movs	r3, #128	; 0x80
     d4e:	04db      	lsls	r3, r3, #19
     d50:	431f      	orrs	r7, r3
     d52:	e779      	b.n	c48 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     d54:	0020      	movs	r0, r4
     d56:	4b25      	ldr	r3, [pc, #148]	; (dec <usart_init+0x330>)
     d58:	4798      	blx	r3
     d5a:	e007      	b.n	d6c <usart_init+0x2b0>
     d5c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     d5e:	2f04      	cmp	r7, #4
     d60:	d00d      	beq.n	d7e <usart_init+0x2c2>
     d62:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d64:	00bb      	lsls	r3, r7, #2
     d66:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     d68:	2800      	cmp	r0, #0
     d6a:	d0f3      	beq.n	d54 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     d6c:	1c43      	adds	r3, r0, #1
     d6e:	d0f5      	beq.n	d5c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     d70:	a90e      	add	r1, sp, #56	; 0x38
     d72:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     d74:	0c00      	lsrs	r0, r0, #16
     d76:	b2c0      	uxtb	r0, r0
     d78:	4b1d      	ldr	r3, [pc, #116]	; (df0 <usart_init+0x334>)
     d7a:	4798      	blx	r3
     d7c:	e7ee      	b.n	d5c <usart_init+0x2a0>
		module->callback[i]            = NULL;
     d7e:	2300      	movs	r3, #0
     d80:	60eb      	str	r3, [r5, #12]
     d82:	612b      	str	r3, [r5, #16]
     d84:	616b      	str	r3, [r5, #20]
     d86:	61ab      	str	r3, [r5, #24]
     d88:	61eb      	str	r3, [r5, #28]
     d8a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     d8c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     d8e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     d90:	2200      	movs	r2, #0
     d92:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     d94:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     d96:	3330      	adds	r3, #48	; 0x30
     d98:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     d9a:	3301      	adds	r3, #1
     d9c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     d9e:	3301      	adds	r3, #1
     da0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     da2:	3301      	adds	r3, #1
     da4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     da6:	6828      	ldr	r0, [r5, #0]
     da8:	4b07      	ldr	r3, [pc, #28]	; (dc8 <usart_init+0x30c>)
     daa:	4798      	blx	r3
     dac:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     dae:	4911      	ldr	r1, [pc, #68]	; (df4 <usart_init+0x338>)
     db0:	4b11      	ldr	r3, [pc, #68]	; (df8 <usart_init+0x33c>)
     db2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     db4:	00a4      	lsls	r4, r4, #2
     db6:	4b11      	ldr	r3, [pc, #68]	; (dfc <usart_init+0x340>)
     db8:	50e5      	str	r5, [r4, r3]
	return status_code;
     dba:	2000      	movs	r0, #0
     dbc:	e691      	b.n	ae2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     dbe:	2310      	movs	r3, #16
     dc0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     dc2:	2300      	movs	r3, #0
     dc4:	9307      	str	r3, [sp, #28]
     dc6:	e6e8      	b.n	b9a <usart_init+0xde>
     dc8:	000009b5 	.word	0x000009b5
     dcc:	40000400 	.word	0x40000400
     dd0:	0000176d 	.word	0x0000176d
     dd4:	000016e1 	.word	0x000016e1
     dd8:	000007f1 	.word	0x000007f1
     ddc:	41002000 	.word	0x41002000
     de0:	00001789 	.word	0x00001789
     de4:	00000733 	.word	0x00000733
     de8:	0000075d 	.word	0x0000075d
     dec:	0000083d 	.word	0x0000083d
     df0:	00001865 	.word	0x00001865
     df4:	00000f9d 	.word	0x00000f9d
     df8:	000009f1 	.word	0x000009f1
     dfc:	20000924 	.word	0x20000924

00000e00 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     e00:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     e02:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     e04:	2a00      	cmp	r2, #0
     e06:	d101      	bne.n	e0c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     e08:	0018      	movs	r0, r3
     e0a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     e0c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     e0e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     e10:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     e12:	2a00      	cmp	r2, #0
     e14:	d1f8      	bne.n	e08 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     e16:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     e18:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     e1a:	2a00      	cmp	r2, #0
     e1c:	d1fc      	bne.n	e18 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     e1e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     e20:	2102      	movs	r1, #2
     e22:	7e1a      	ldrb	r2, [r3, #24]
     e24:	420a      	tst	r2, r1
     e26:	d0fc      	beq.n	e22 <usart_write_wait+0x22>
	return STATUS_OK;
     e28:	2300      	movs	r3, #0
     e2a:	e7ed      	b.n	e08 <usart_write_wait+0x8>

00000e2c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     e2c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     e2e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     e30:	2a00      	cmp	r2, #0
     e32:	d101      	bne.n	e38 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     e34:	0018      	movs	r0, r3
     e36:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     e38:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     e3a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     e3c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     e3e:	2a00      	cmp	r2, #0
     e40:	d1f8      	bne.n	e34 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     e42:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     e44:	7e10      	ldrb	r0, [r2, #24]
     e46:	0740      	lsls	r0, r0, #29
     e48:	d5f4      	bpl.n	e34 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     e4a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     e4c:	2b00      	cmp	r3, #0
     e4e:	d1fc      	bne.n	e4a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     e50:	8b53      	ldrh	r3, [r2, #26]
     e52:	b2db      	uxtb	r3, r3
	if (error_code) {
     e54:	0698      	lsls	r0, r3, #26
     e56:	d01d      	beq.n	e94 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     e58:	0798      	lsls	r0, r3, #30
     e5a:	d503      	bpl.n	e64 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     e5c:	2302      	movs	r3, #2
     e5e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     e60:	3318      	adds	r3, #24
     e62:	e7e7      	b.n	e34 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     e64:	0758      	lsls	r0, r3, #29
     e66:	d503      	bpl.n	e70 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     e68:	2304      	movs	r3, #4
     e6a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     e6c:	331a      	adds	r3, #26
     e6e:	e7e1      	b.n	e34 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     e70:	07d8      	lsls	r0, r3, #31
     e72:	d503      	bpl.n	e7c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     e74:	2301      	movs	r3, #1
     e76:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     e78:	3312      	adds	r3, #18
     e7a:	e7db      	b.n	e34 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     e7c:	06d8      	lsls	r0, r3, #27
     e7e:	d503      	bpl.n	e88 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     e80:	2310      	movs	r3, #16
     e82:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     e84:	3332      	adds	r3, #50	; 0x32
     e86:	e7d5      	b.n	e34 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     e88:	069b      	lsls	r3, r3, #26
     e8a:	d503      	bpl.n	e94 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     e8c:	2320      	movs	r3, #32
     e8e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     e90:	3321      	adds	r3, #33	; 0x21
     e92:	e7cf      	b.n	e34 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     e94:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     e96:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     e98:	2300      	movs	r3, #0
     e9a:	e7cb      	b.n	e34 <usart_read_wait+0x8>

00000e9c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e9e:	0006      	movs	r6, r0
     ea0:	000c      	movs	r4, r1
     ea2:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ea4:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     ea6:	4b0a      	ldr	r3, [pc, #40]	; (ed0 <_usart_write_buffer+0x34>)
     ea8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     eaa:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
     eac:	b29b      	uxth	r3, r3
     eae:	2b00      	cmp	r3, #0
     eb0:	d003      	beq.n	eba <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     eb2:	4b08      	ldr	r3, [pc, #32]	; (ed4 <_usart_write_buffer+0x38>)
     eb4:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     eb6:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
     eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
     eba:	85f5      	strh	r5, [r6, #46]	; 0x2e
     ebc:	4b05      	ldr	r3, [pc, #20]	; (ed4 <_usart_write_buffer+0x38>)
     ebe:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
     ec0:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
     ec2:	2205      	movs	r2, #5
     ec4:	2333      	movs	r3, #51	; 0x33
     ec6:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     ec8:	3b32      	subs	r3, #50	; 0x32
     eca:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
     ecc:	2000      	movs	r0, #0
     ece:	e7f3      	b.n	eb8 <_usart_write_buffer+0x1c>
     ed0:	000005e5 	.word	0x000005e5
     ed4:	00000625 	.word	0x00000625

00000ed8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     eda:	0004      	movs	r4, r0
     edc:	000d      	movs	r5, r1
     ede:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ee0:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     ee2:	4b0f      	ldr	r3, [pc, #60]	; (f20 <_usart_read_buffer+0x48>)
     ee4:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     ee6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     ee8:	b29b      	uxth	r3, r3
     eea:	2b00      	cmp	r3, #0
     eec:	d003      	beq.n	ef6 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
     eee:	4b0d      	ldr	r3, [pc, #52]	; (f24 <_usart_read_buffer+0x4c>)
     ef0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     ef2:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     ef6:	85a6      	strh	r6, [r4, #44]	; 0x2c
     ef8:	4b0a      	ldr	r3, [pc, #40]	; (f24 <_usart_read_buffer+0x4c>)
     efa:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     efc:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     efe:	2205      	movs	r2, #5
     f00:	2332      	movs	r3, #50	; 0x32
     f02:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     f04:	3b2e      	subs	r3, #46	; 0x2e
     f06:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
     f08:	7a23      	ldrb	r3, [r4, #8]
     f0a:	2b00      	cmp	r3, #0
     f0c:	d001      	beq.n	f12 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     f0e:	2320      	movs	r3, #32
     f10:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
     f12:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
     f14:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
     f16:	2b00      	cmp	r3, #0
     f18:	d0ec      	beq.n	ef4 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     f1a:	2308      	movs	r3, #8
     f1c:	75bb      	strb	r3, [r7, #22]
     f1e:	e7e9      	b.n	ef4 <_usart_read_buffer+0x1c>
     f20:	000005e5 	.word	0x000005e5
     f24:	00000625 	.word	0x00000625

00000f28 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     f28:	1c93      	adds	r3, r2, #2
     f2a:	009b      	lsls	r3, r3, #2
     f2c:	18c3      	adds	r3, r0, r3
     f2e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     f30:	2130      	movs	r1, #48	; 0x30
     f32:	2301      	movs	r3, #1
     f34:	4093      	lsls	r3, r2
     f36:	001a      	movs	r2, r3
     f38:	5c43      	ldrb	r3, [r0, r1]
     f3a:	4313      	orrs	r3, r2
     f3c:	5443      	strb	r3, [r0, r1]
}
     f3e:	4770      	bx	lr

00000f40 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     f40:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     f42:	2317      	movs	r3, #23
	if (length == 0) {
     f44:	2a00      	cmp	r2, #0
     f46:	d101      	bne.n	f4c <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
     f48:	0018      	movs	r0, r3
     f4a:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
     f4c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     f4e:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
     f50:	2c00      	cmp	r4, #0
     f52:	d0f9      	beq.n	f48 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
     f54:	4b01      	ldr	r3, [pc, #4]	; (f5c <usart_write_buffer_job+0x1c>)
     f56:	4798      	blx	r3
     f58:	0003      	movs	r3, r0
     f5a:	e7f5      	b.n	f48 <usart_write_buffer_job+0x8>
     f5c:	00000e9d 	.word	0x00000e9d

00000f60 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     f60:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     f62:	2317      	movs	r3, #23
	if (length == 0) {
     f64:	2a00      	cmp	r2, #0
     f66:	d101      	bne.n	f6c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     f68:	0018      	movs	r0, r3
     f6a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     f6c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     f6e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
     f70:	2c00      	cmp	r4, #0
     f72:	d0f9      	beq.n	f68 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     f74:	4b01      	ldr	r3, [pc, #4]	; (f7c <usart_read_buffer_job+0x1c>)
     f76:	4798      	blx	r3
     f78:	0003      	movs	r3, r0
     f7a:	e7f5      	b.n	f68 <usart_read_buffer_job+0x8>
     f7c:	00000ed9 	.word	0x00000ed9

00000f80 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
     f80:	2900      	cmp	r1, #0
     f82:	d003      	beq.n	f8c <usart_get_job_status+0xc>
     f84:	2901      	cmp	r1, #1
     f86:	d005      	beq.n	f94 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
     f88:	2017      	movs	r0, #23
     f8a:	e002      	b.n	f92 <usart_get_job_status+0x12>
			status_code = module->rx_status;
     f8c:	2332      	movs	r3, #50	; 0x32
     f8e:	5cc0      	ldrb	r0, [r0, r3]
     f90:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
     f92:	4770      	bx	lr
			status_code = module->tx_status;
     f94:	2333      	movs	r3, #51	; 0x33
     f96:	5cc0      	ldrb	r0, [r0, r3]
     f98:	b2c0      	uxtb	r0, r0
			break;
     f9a:	e7fa      	b.n	f92 <usart_get_job_status+0x12>

00000f9c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     f9e:	0080      	lsls	r0, r0, #2
     fa0:	4b62      	ldr	r3, [pc, #392]	; (112c <_usart_interrupt_handler+0x190>)
     fa2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     fa4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     fa6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     fa8:	2b00      	cmp	r3, #0
     faa:	d1fc      	bne.n	fa6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     fac:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     fae:	7da6      	ldrb	r6, [r4, #22]
     fb0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     fb2:	2330      	movs	r3, #48	; 0x30
     fb4:	5ceb      	ldrb	r3, [r5, r3]
     fb6:	2231      	movs	r2, #49	; 0x31
     fb8:	5caf      	ldrb	r7, [r5, r2]
     fba:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     fbc:	07f3      	lsls	r3, r6, #31
     fbe:	d522      	bpl.n	1006 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     fc0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     fc2:	b29b      	uxth	r3, r3
     fc4:	2b00      	cmp	r3, #0
     fc6:	d01c      	beq.n	1002 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     fc8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     fca:	7813      	ldrb	r3, [r2, #0]
     fcc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     fce:	1c51      	adds	r1, r2, #1
     fd0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     fd2:	7969      	ldrb	r1, [r5, #5]
     fd4:	2901      	cmp	r1, #1
     fd6:	d00e      	beq.n	ff6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     fd8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     fda:	05db      	lsls	r3, r3, #23
     fdc:	0ddb      	lsrs	r3, r3, #23
     fde:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     fe0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     fe2:	3b01      	subs	r3, #1
     fe4:	b29b      	uxth	r3, r3
     fe6:	85eb      	strh	r3, [r5, #46]	; 0x2e
     fe8:	2b00      	cmp	r3, #0
     fea:	d10c      	bne.n	1006 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     fec:	3301      	adds	r3, #1
     fee:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     ff0:	3301      	adds	r3, #1
     ff2:	75a3      	strb	r3, [r4, #22]
     ff4:	e007      	b.n	1006 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     ff6:	7851      	ldrb	r1, [r2, #1]
     ff8:	0209      	lsls	r1, r1, #8
     ffa:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     ffc:	3202      	adds	r2, #2
     ffe:	62aa      	str	r2, [r5, #40]	; 0x28
    1000:	e7eb      	b.n	fda <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1002:	2301      	movs	r3, #1
    1004:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1006:	07b3      	lsls	r3, r6, #30
    1008:	d506      	bpl.n	1018 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    100a:	2302      	movs	r3, #2
    100c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    100e:	2200      	movs	r2, #0
    1010:	3331      	adds	r3, #49	; 0x31
    1012:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1014:	07fb      	lsls	r3, r7, #31
    1016:	d41a      	bmi.n	104e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1018:	0773      	lsls	r3, r6, #29
    101a:	d565      	bpl.n	10e8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    101c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    101e:	b29b      	uxth	r3, r3
    1020:	2b00      	cmp	r3, #0
    1022:	d05f      	beq.n	10e4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1024:	8b63      	ldrh	r3, [r4, #26]
    1026:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1028:	071a      	lsls	r2, r3, #28
    102a:	d414      	bmi.n	1056 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    102c:	223f      	movs	r2, #63	; 0x3f
    102e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1030:	2b00      	cmp	r3, #0
    1032:	d034      	beq.n	109e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1034:	079a      	lsls	r2, r3, #30
    1036:	d511      	bpl.n	105c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1038:	221a      	movs	r2, #26
    103a:	2332      	movs	r3, #50	; 0x32
    103c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    103e:	3b30      	subs	r3, #48	; 0x30
    1040:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1042:	077b      	lsls	r3, r7, #29
    1044:	d550      	bpl.n	10e8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1046:	0028      	movs	r0, r5
    1048:	696b      	ldr	r3, [r5, #20]
    104a:	4798      	blx	r3
    104c:	e04c      	b.n	10e8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    104e:	0028      	movs	r0, r5
    1050:	68eb      	ldr	r3, [r5, #12]
    1052:	4798      	blx	r3
    1054:	e7e0      	b.n	1018 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1056:	2237      	movs	r2, #55	; 0x37
    1058:	4013      	ands	r3, r2
    105a:	e7e9      	b.n	1030 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    105c:	075a      	lsls	r2, r3, #29
    105e:	d505      	bpl.n	106c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1060:	221e      	movs	r2, #30
    1062:	2332      	movs	r3, #50	; 0x32
    1064:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1066:	3b2e      	subs	r3, #46	; 0x2e
    1068:	8363      	strh	r3, [r4, #26]
    106a:	e7ea      	b.n	1042 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    106c:	07da      	lsls	r2, r3, #31
    106e:	d505      	bpl.n	107c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1070:	2213      	movs	r2, #19
    1072:	2332      	movs	r3, #50	; 0x32
    1074:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1076:	3b31      	subs	r3, #49	; 0x31
    1078:	8363      	strh	r3, [r4, #26]
    107a:	e7e2      	b.n	1042 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    107c:	06da      	lsls	r2, r3, #27
    107e:	d505      	bpl.n	108c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1080:	2242      	movs	r2, #66	; 0x42
    1082:	2332      	movs	r3, #50	; 0x32
    1084:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1086:	3b22      	subs	r3, #34	; 0x22
    1088:	8363      	strh	r3, [r4, #26]
    108a:	e7da      	b.n	1042 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    108c:	2220      	movs	r2, #32
    108e:	421a      	tst	r2, r3
    1090:	d0d7      	beq.n	1042 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1092:	3221      	adds	r2, #33	; 0x21
    1094:	2332      	movs	r3, #50	; 0x32
    1096:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1098:	3b12      	subs	r3, #18
    109a:	8363      	strh	r3, [r4, #26]
    109c:	e7d1      	b.n	1042 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    109e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    10a0:	05db      	lsls	r3, r3, #23
    10a2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    10a4:	b2da      	uxtb	r2, r3
    10a6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    10a8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    10aa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    10ac:	1c51      	adds	r1, r2, #1
    10ae:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    10b0:	7969      	ldrb	r1, [r5, #5]
    10b2:	2901      	cmp	r1, #1
    10b4:	d010      	beq.n	10d8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    10b6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    10b8:	3b01      	subs	r3, #1
    10ba:	b29b      	uxth	r3, r3
    10bc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    10be:	2b00      	cmp	r3, #0
    10c0:	d112      	bne.n	10e8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    10c2:	3304      	adds	r3, #4
    10c4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    10c6:	2200      	movs	r2, #0
    10c8:	332e      	adds	r3, #46	; 0x2e
    10ca:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    10cc:	07bb      	lsls	r3, r7, #30
    10ce:	d50b      	bpl.n	10e8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    10d0:	0028      	movs	r0, r5
    10d2:	692b      	ldr	r3, [r5, #16]
    10d4:	4798      	blx	r3
    10d6:	e007      	b.n	10e8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    10d8:	0a1b      	lsrs	r3, r3, #8
    10da:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    10dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    10de:	3301      	adds	r3, #1
    10e0:	626b      	str	r3, [r5, #36]	; 0x24
    10e2:	e7e8      	b.n	10b6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    10e4:	2304      	movs	r3, #4
    10e6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    10e8:	06f3      	lsls	r3, r6, #27
    10ea:	d504      	bpl.n	10f6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    10ec:	2310      	movs	r3, #16
    10ee:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    10f0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    10f2:	06fb      	lsls	r3, r7, #27
    10f4:	d40e      	bmi.n	1114 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    10f6:	06b3      	lsls	r3, r6, #26
    10f8:	d504      	bpl.n	1104 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    10fa:	2320      	movs	r3, #32
    10fc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    10fe:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1100:	073b      	lsls	r3, r7, #28
    1102:	d40b      	bmi.n	111c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1104:	0733      	lsls	r3, r6, #28
    1106:	d504      	bpl.n	1112 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1108:	2308      	movs	r3, #8
    110a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    110c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    110e:	06bb      	lsls	r3, r7, #26
    1110:	d408      	bmi.n	1124 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1114:	0028      	movs	r0, r5
    1116:	69eb      	ldr	r3, [r5, #28]
    1118:	4798      	blx	r3
    111a:	e7ec      	b.n	10f6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    111c:	0028      	movs	r0, r5
    111e:	69ab      	ldr	r3, [r5, #24]
    1120:	4798      	blx	r3
    1122:	e7ef      	b.n	1104 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1124:	6a2b      	ldr	r3, [r5, #32]
    1126:	0028      	movs	r0, r5
    1128:	4798      	blx	r3
}
    112a:	e7f2      	b.n	1112 <_usart_interrupt_handler+0x176>
    112c:	20000924 	.word	0x20000924

00001130 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1130:	b510      	push	{r4, lr}
	switch (clock_source) {
    1132:	2808      	cmp	r0, #8
    1134:	d803      	bhi.n	113e <system_clock_source_get_hz+0xe>
    1136:	0080      	lsls	r0, r0, #2
    1138:	4b1c      	ldr	r3, [pc, #112]	; (11ac <system_clock_source_get_hz+0x7c>)
    113a:	581b      	ldr	r3, [r3, r0]
    113c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    113e:	2000      	movs	r0, #0
    1140:	e032      	b.n	11a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1142:	4b1b      	ldr	r3, [pc, #108]	; (11b0 <system_clock_source_get_hz+0x80>)
    1144:	6918      	ldr	r0, [r3, #16]
    1146:	e02f      	b.n	11a8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1148:	4b1a      	ldr	r3, [pc, #104]	; (11b4 <system_clock_source_get_hz+0x84>)
    114a:	6a1b      	ldr	r3, [r3, #32]
    114c:	059b      	lsls	r3, r3, #22
    114e:	0f9b      	lsrs	r3, r3, #30
    1150:	4819      	ldr	r0, [pc, #100]	; (11b8 <system_clock_source_get_hz+0x88>)
    1152:	40d8      	lsrs	r0, r3
    1154:	e028      	b.n	11a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1156:	4b16      	ldr	r3, [pc, #88]	; (11b0 <system_clock_source_get_hz+0x80>)
    1158:	6958      	ldr	r0, [r3, #20]
    115a:	e025      	b.n	11a8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    115c:	4b14      	ldr	r3, [pc, #80]	; (11b0 <system_clock_source_get_hz+0x80>)
    115e:	681b      	ldr	r3, [r3, #0]
			return 0;
    1160:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1162:	079b      	lsls	r3, r3, #30
    1164:	d520      	bpl.n	11a8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1166:	4913      	ldr	r1, [pc, #76]	; (11b4 <system_clock_source_get_hz+0x84>)
    1168:	2210      	movs	r2, #16
    116a:	68cb      	ldr	r3, [r1, #12]
    116c:	421a      	tst	r2, r3
    116e:	d0fc      	beq.n	116a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1170:	4b0f      	ldr	r3, [pc, #60]	; (11b0 <system_clock_source_get_hz+0x80>)
    1172:	681a      	ldr	r2, [r3, #0]
    1174:	2324      	movs	r3, #36	; 0x24
    1176:	4013      	ands	r3, r2
    1178:	2b04      	cmp	r3, #4
    117a:	d001      	beq.n	1180 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    117c:	480f      	ldr	r0, [pc, #60]	; (11bc <system_clock_source_get_hz+0x8c>)
    117e:	e013      	b.n	11a8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1180:	2000      	movs	r0, #0
    1182:	4b0f      	ldr	r3, [pc, #60]	; (11c0 <system_clock_source_get_hz+0x90>)
    1184:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1186:	4b0a      	ldr	r3, [pc, #40]	; (11b0 <system_clock_source_get_hz+0x80>)
    1188:	689b      	ldr	r3, [r3, #8]
    118a:	041b      	lsls	r3, r3, #16
    118c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    118e:	4358      	muls	r0, r3
    1190:	e00a      	b.n	11a8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1192:	2350      	movs	r3, #80	; 0x50
    1194:	4a07      	ldr	r2, [pc, #28]	; (11b4 <system_clock_source_get_hz+0x84>)
    1196:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1198:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    119a:	075b      	lsls	r3, r3, #29
    119c:	d504      	bpl.n	11a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    119e:	4b04      	ldr	r3, [pc, #16]	; (11b0 <system_clock_source_get_hz+0x80>)
    11a0:	68d8      	ldr	r0, [r3, #12]
    11a2:	e001      	b.n	11a8 <system_clock_source_get_hz+0x78>
		return 32768UL;
    11a4:	2080      	movs	r0, #128	; 0x80
    11a6:	0200      	lsls	r0, r0, #8
	}
}
    11a8:	bd10      	pop	{r4, pc}
    11aa:	46c0      	nop			; (mov r8, r8)
    11ac:	000024d4 	.word	0x000024d4
    11b0:	200000bc 	.word	0x200000bc
    11b4:	40000800 	.word	0x40000800
    11b8:	007a1200 	.word	0x007a1200
    11bc:	02dc6c00 	.word	0x02dc6c00
    11c0:	00001789 	.word	0x00001789

000011c4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    11c4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    11c6:	490c      	ldr	r1, [pc, #48]	; (11f8 <system_clock_source_osc8m_set_config+0x34>)
    11c8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    11ca:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    11cc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    11ce:	7840      	ldrb	r0, [r0, #1]
    11d0:	2201      	movs	r2, #1
    11d2:	4010      	ands	r0, r2
    11d4:	0180      	lsls	r0, r0, #6
    11d6:	2640      	movs	r6, #64	; 0x40
    11d8:	43b3      	bics	r3, r6
    11da:	4303      	orrs	r3, r0
    11dc:	402a      	ands	r2, r5
    11de:	01d2      	lsls	r2, r2, #7
    11e0:	2080      	movs	r0, #128	; 0x80
    11e2:	4383      	bics	r3, r0
    11e4:	4313      	orrs	r3, r2
    11e6:	2203      	movs	r2, #3
    11e8:	4022      	ands	r2, r4
    11ea:	0212      	lsls	r2, r2, #8
    11ec:	4803      	ldr	r0, [pc, #12]	; (11fc <system_clock_source_osc8m_set_config+0x38>)
    11ee:	4003      	ands	r3, r0
    11f0:	4313      	orrs	r3, r2
    11f2:	620b      	str	r3, [r1, #32]
}
    11f4:	bd70      	pop	{r4, r5, r6, pc}
    11f6:	46c0      	nop			; (mov r8, r8)
    11f8:	40000800 	.word	0x40000800
    11fc:	fffffcff 	.word	0xfffffcff

00001200 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1200:	b5f0      	push	{r4, r5, r6, r7, lr}
    1202:	46de      	mov	lr, fp
    1204:	4657      	mov	r7, sl
    1206:	464e      	mov	r6, r9
    1208:	4645      	mov	r5, r8
    120a:	b5e0      	push	{r5, r6, r7, lr}
    120c:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    120e:	4b26      	ldr	r3, [pc, #152]	; (12a8 <system_clock_source_xosc32k_set_config+0xa8>)
    1210:	469b      	mov	fp, r3
    1212:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1214:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1216:	7800      	ldrb	r0, [r0, #0]
    1218:	4242      	negs	r2, r0
    121a:	4142      	adcs	r2, r0
    121c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    121e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1220:	78ca      	ldrb	r2, [r1, #3]
    1222:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1224:	790a      	ldrb	r2, [r1, #4]
    1226:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1228:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    122a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    122c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    122e:	688a      	ldr	r2, [r1, #8]
    1230:	491e      	ldr	r1, [pc, #120]	; (12ac <system_clock_source_xosc32k_set_config+0xac>)
    1232:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1234:	2101      	movs	r1, #1
    1236:	464a      	mov	r2, r9
    1238:	0092      	lsls	r2, r2, #2
    123a:	4691      	mov	r9, r2
    123c:	2204      	movs	r2, #4
    123e:	4393      	bics	r3, r2
    1240:	464a      	mov	r2, r9
    1242:	4313      	orrs	r3, r2
    1244:	4642      	mov	r2, r8
    1246:	400a      	ands	r2, r1
    1248:	00d2      	lsls	r2, r2, #3
    124a:	4690      	mov	r8, r2
    124c:	2208      	movs	r2, #8
    124e:	4393      	bics	r3, r2
    1250:	4642      	mov	r2, r8
    1252:	4313      	orrs	r3, r2
    1254:	4662      	mov	r2, ip
    1256:	400a      	ands	r2, r1
    1258:	0112      	lsls	r2, r2, #4
    125a:	4694      	mov	ip, r2
    125c:	2210      	movs	r2, #16
    125e:	4393      	bics	r3, r2
    1260:	4662      	mov	r2, ip
    1262:	4313      	orrs	r3, r2
    1264:	4008      	ands	r0, r1
    1266:	0140      	lsls	r0, r0, #5
    1268:	2220      	movs	r2, #32
    126a:	4393      	bics	r3, r2
    126c:	4303      	orrs	r3, r0
    126e:	400f      	ands	r7, r1
    1270:	01bf      	lsls	r7, r7, #6
    1272:	2040      	movs	r0, #64	; 0x40
    1274:	4383      	bics	r3, r0
    1276:	433b      	orrs	r3, r7
    1278:	400e      	ands	r6, r1
    127a:	01f6      	lsls	r6, r6, #7
    127c:	3040      	adds	r0, #64	; 0x40
    127e:	4383      	bics	r3, r0
    1280:	4333      	orrs	r3, r6
    1282:	3879      	subs	r0, #121	; 0x79
    1284:	4005      	ands	r5, r0
    1286:	022d      	lsls	r5, r5, #8
    1288:	4809      	ldr	r0, [pc, #36]	; (12b0 <system_clock_source_xosc32k_set_config+0xb0>)
    128a:	4003      	ands	r3, r0
    128c:	432b      	orrs	r3, r5
    128e:	4021      	ands	r1, r4
    1290:	0309      	lsls	r1, r1, #12
    1292:	4808      	ldr	r0, [pc, #32]	; (12b4 <system_clock_source_xosc32k_set_config+0xb4>)
    1294:	4003      	ands	r3, r0
    1296:	430b      	orrs	r3, r1
    1298:	465a      	mov	r2, fp
    129a:	8293      	strh	r3, [r2, #20]
}
    129c:	bc3c      	pop	{r2, r3, r4, r5}
    129e:	4690      	mov	r8, r2
    12a0:	4699      	mov	r9, r3
    12a2:	46a2      	mov	sl, r4
    12a4:	46ab      	mov	fp, r5
    12a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12a8:	40000800 	.word	0x40000800
    12ac:	200000bc 	.word	0x200000bc
    12b0:	fffff8ff 	.word	0xfffff8ff
    12b4:	ffffefff 	.word	0xffffefff

000012b8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    12b8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    12ba:	7a03      	ldrb	r3, [r0, #8]
    12bc:	069b      	lsls	r3, r3, #26
    12be:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    12c0:	8942      	ldrh	r2, [r0, #10]
    12c2:	0592      	lsls	r2, r2, #22
    12c4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    12c6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    12c8:	4918      	ldr	r1, [pc, #96]	; (132c <system_clock_source_dfll_set_config+0x74>)
    12ca:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    12cc:	7983      	ldrb	r3, [r0, #6]
    12ce:	79c2      	ldrb	r2, [r0, #7]
    12d0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    12d2:	8842      	ldrh	r2, [r0, #2]
    12d4:	8884      	ldrh	r4, [r0, #4]
    12d6:	4322      	orrs	r2, r4
    12d8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    12da:	7842      	ldrb	r2, [r0, #1]
    12dc:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    12de:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    12e0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    12e2:	7803      	ldrb	r3, [r0, #0]
    12e4:	2b04      	cmp	r3, #4
    12e6:	d011      	beq.n	130c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    12e8:	2b20      	cmp	r3, #32
    12ea:	d10e      	bne.n	130a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    12ec:	7b03      	ldrb	r3, [r0, #12]
    12ee:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    12f0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    12f2:	4313      	orrs	r3, r2
    12f4:	89c2      	ldrh	r2, [r0, #14]
    12f6:	0412      	lsls	r2, r2, #16
    12f8:	490d      	ldr	r1, [pc, #52]	; (1330 <system_clock_source_dfll_set_config+0x78>)
    12fa:	400a      	ands	r2, r1
    12fc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    12fe:	4a0b      	ldr	r2, [pc, #44]	; (132c <system_clock_source_dfll_set_config+0x74>)
    1300:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1302:	6811      	ldr	r1, [r2, #0]
    1304:	4b0b      	ldr	r3, [pc, #44]	; (1334 <system_clock_source_dfll_set_config+0x7c>)
    1306:	430b      	orrs	r3, r1
    1308:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    130a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    130c:	7b03      	ldrb	r3, [r0, #12]
    130e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1310:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1312:	4313      	orrs	r3, r2
    1314:	89c2      	ldrh	r2, [r0, #14]
    1316:	0412      	lsls	r2, r2, #16
    1318:	4905      	ldr	r1, [pc, #20]	; (1330 <system_clock_source_dfll_set_config+0x78>)
    131a:	400a      	ands	r2, r1
    131c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    131e:	4a03      	ldr	r2, [pc, #12]	; (132c <system_clock_source_dfll_set_config+0x74>)
    1320:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1322:	6813      	ldr	r3, [r2, #0]
    1324:	2104      	movs	r1, #4
    1326:	430b      	orrs	r3, r1
    1328:	6013      	str	r3, [r2, #0]
    132a:	e7ee      	b.n	130a <system_clock_source_dfll_set_config+0x52>
    132c:	200000bc 	.word	0x200000bc
    1330:	03ff0000 	.word	0x03ff0000
    1334:	00000424 	.word	0x00000424

00001338 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1338:	2808      	cmp	r0, #8
    133a:	d803      	bhi.n	1344 <system_clock_source_enable+0xc>
    133c:	0080      	lsls	r0, r0, #2
    133e:	4b25      	ldr	r3, [pc, #148]	; (13d4 <system_clock_source_enable+0x9c>)
    1340:	581b      	ldr	r3, [r3, r0]
    1342:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1344:	2017      	movs	r0, #23
    1346:	e044      	b.n	13d2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1348:	4a23      	ldr	r2, [pc, #140]	; (13d8 <system_clock_source_enable+0xa0>)
    134a:	6a13      	ldr	r3, [r2, #32]
    134c:	2102      	movs	r1, #2
    134e:	430b      	orrs	r3, r1
    1350:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1352:	2000      	movs	r0, #0
    1354:	e03d      	b.n	13d2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1356:	4a20      	ldr	r2, [pc, #128]	; (13d8 <system_clock_source_enable+0xa0>)
    1358:	6993      	ldr	r3, [r2, #24]
    135a:	2102      	movs	r1, #2
    135c:	430b      	orrs	r3, r1
    135e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1360:	2000      	movs	r0, #0
		break;
    1362:	e036      	b.n	13d2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1364:	4a1c      	ldr	r2, [pc, #112]	; (13d8 <system_clock_source_enable+0xa0>)
    1366:	8a13      	ldrh	r3, [r2, #16]
    1368:	2102      	movs	r1, #2
    136a:	430b      	orrs	r3, r1
    136c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    136e:	2000      	movs	r0, #0
		break;
    1370:	e02f      	b.n	13d2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1372:	4a19      	ldr	r2, [pc, #100]	; (13d8 <system_clock_source_enable+0xa0>)
    1374:	8a93      	ldrh	r3, [r2, #20]
    1376:	2102      	movs	r1, #2
    1378:	430b      	orrs	r3, r1
    137a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    137c:	2000      	movs	r0, #0
		break;
    137e:	e028      	b.n	13d2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1380:	4916      	ldr	r1, [pc, #88]	; (13dc <system_clock_source_enable+0xa4>)
    1382:	680b      	ldr	r3, [r1, #0]
    1384:	2202      	movs	r2, #2
    1386:	4313      	orrs	r3, r2
    1388:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    138a:	4b13      	ldr	r3, [pc, #76]	; (13d8 <system_clock_source_enable+0xa0>)
    138c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    138e:	0019      	movs	r1, r3
    1390:	320e      	adds	r2, #14
    1392:	68cb      	ldr	r3, [r1, #12]
    1394:	421a      	tst	r2, r3
    1396:	d0fc      	beq.n	1392 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1398:	4a10      	ldr	r2, [pc, #64]	; (13dc <system_clock_source_enable+0xa4>)
    139a:	6891      	ldr	r1, [r2, #8]
    139c:	4b0e      	ldr	r3, [pc, #56]	; (13d8 <system_clock_source_enable+0xa0>)
    139e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    13a0:	6852      	ldr	r2, [r2, #4]
    13a2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    13a4:	2200      	movs	r2, #0
    13a6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    13a8:	0019      	movs	r1, r3
    13aa:	3210      	adds	r2, #16
    13ac:	68cb      	ldr	r3, [r1, #12]
    13ae:	421a      	tst	r2, r3
    13b0:	d0fc      	beq.n	13ac <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    13b2:	4b0a      	ldr	r3, [pc, #40]	; (13dc <system_clock_source_enable+0xa4>)
    13b4:	681b      	ldr	r3, [r3, #0]
    13b6:	b29b      	uxth	r3, r3
    13b8:	4a07      	ldr	r2, [pc, #28]	; (13d8 <system_clock_source_enable+0xa0>)
    13ba:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    13bc:	2000      	movs	r0, #0
    13be:	e008      	b.n	13d2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    13c0:	4905      	ldr	r1, [pc, #20]	; (13d8 <system_clock_source_enable+0xa0>)
    13c2:	2244      	movs	r2, #68	; 0x44
    13c4:	5c8b      	ldrb	r3, [r1, r2]
    13c6:	2002      	movs	r0, #2
    13c8:	4303      	orrs	r3, r0
    13ca:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    13cc:	2000      	movs	r0, #0
		break;
    13ce:	e000      	b.n	13d2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    13d0:	2000      	movs	r0, #0
}
    13d2:	4770      	bx	lr
    13d4:	000024f8 	.word	0x000024f8
    13d8:	40000800 	.word	0x40000800
    13dc:	200000bc 	.word	0x200000bc

000013e0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    13e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13e2:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    13e4:	22c2      	movs	r2, #194	; 0xc2
    13e6:	00d2      	lsls	r2, r2, #3
    13e8:	4b45      	ldr	r3, [pc, #276]	; (1500 <system_clock_init+0x120>)
    13ea:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    13ec:	4a45      	ldr	r2, [pc, #276]	; (1504 <system_clock_init+0x124>)
    13ee:	6853      	ldr	r3, [r2, #4]
    13f0:	211e      	movs	r1, #30
    13f2:	438b      	bics	r3, r1
    13f4:	391a      	subs	r1, #26
    13f6:	430b      	orrs	r3, r1
    13f8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    13fa:	2202      	movs	r2, #2
    13fc:	ab01      	add	r3, sp, #4
    13fe:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1400:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1402:	4d41      	ldr	r5, [pc, #260]	; (1508 <system_clock_init+0x128>)
    1404:	b2e0      	uxtb	r0, r4
    1406:	a901      	add	r1, sp, #4
    1408:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    140a:	3401      	adds	r4, #1
    140c:	2c25      	cmp	r4, #37	; 0x25
    140e:	d1f9      	bne.n	1404 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1410:	a80a      	add	r0, sp, #40	; 0x28
    1412:	2300      	movs	r3, #0
    1414:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1416:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1418:	2280      	movs	r2, #128	; 0x80
    141a:	0212      	lsls	r2, r2, #8
    141c:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    141e:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1420:	2201      	movs	r2, #1
    1422:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    1424:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1426:	2106      	movs	r1, #6
    1428:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    142a:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    142c:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    142e:	4b37      	ldr	r3, [pc, #220]	; (150c <system_clock_init+0x12c>)
    1430:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1432:	2005      	movs	r0, #5
    1434:	4b36      	ldr	r3, [pc, #216]	; (1510 <system_clock_init+0x130>)
    1436:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1438:	4931      	ldr	r1, [pc, #196]	; (1500 <system_clock_init+0x120>)
    143a:	2202      	movs	r2, #2
    143c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    143e:	421a      	tst	r2, r3
    1440:	d0fc      	beq.n	143c <system_clock_init+0x5c>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1442:	ab05      	add	r3, sp, #20
    1444:	2100      	movs	r1, #0
    1446:	2200      	movs	r2, #0
    1448:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    144a:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    144c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    144e:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1450:	313f      	adds	r1, #63	; 0x3f
    1452:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1454:	393b      	subs	r1, #59	; 0x3b
    1456:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1458:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    145a:	4b2e      	ldr	r3, [pc, #184]	; (1514 <system_clock_init+0x134>)
    145c:	681b      	ldr	r3, [r3, #0]
    145e:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1460:	2b3f      	cmp	r3, #63	; 0x3f
    1462:	d04b      	beq.n	14fc <system_clock_init+0x11c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1464:	a805      	add	r0, sp, #20
    1466:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1468:	23b7      	movs	r3, #183	; 0xb7
    146a:	00db      	lsls	r3, r3, #3
    146c:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    146e:	2303      	movs	r3, #3
    1470:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1472:	331c      	adds	r3, #28
    1474:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1476:	4b28      	ldr	r3, [pc, #160]	; (1518 <system_clock_init+0x138>)
    1478:	4798      	blx	r3
	config->on_demand       = true;
    147a:	a804      	add	r0, sp, #16
    147c:	2501      	movs	r5, #1
    147e:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1480:	2600      	movs	r6, #0
    1482:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1484:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1486:	4b25      	ldr	r3, [pc, #148]	; (151c <system_clock_init+0x13c>)
    1488:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    148a:	2006      	movs	r0, #6
    148c:	4f20      	ldr	r7, [pc, #128]	; (1510 <system_clock_init+0x130>)
    148e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1490:	4b23      	ldr	r3, [pc, #140]	; (1520 <system_clock_init+0x140>)
    1492:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1494:	ac01      	add	r4, sp, #4
    1496:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    1498:	7066      	strb	r6, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    149a:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    149c:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    149e:	2305      	movs	r3, #5
    14a0:	7023      	strb	r3, [r4, #0]
    14a2:	0021      	movs	r1, r4
    14a4:	2001      	movs	r0, #1
    14a6:	4b1f      	ldr	r3, [pc, #124]	; (1524 <system_clock_init+0x144>)
    14a8:	4798      	blx	r3
    14aa:	2001      	movs	r0, #1
    14ac:	4b1e      	ldr	r3, [pc, #120]	; (1528 <system_clock_init+0x148>)
    14ae:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    14b0:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    14b2:	0021      	movs	r1, r4
    14b4:	2000      	movs	r0, #0
    14b6:	4b14      	ldr	r3, [pc, #80]	; (1508 <system_clock_init+0x128>)
    14b8:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    14ba:	2000      	movs	r0, #0
    14bc:	4b1b      	ldr	r3, [pc, #108]	; (152c <system_clock_init+0x14c>)
    14be:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    14c0:	2007      	movs	r0, #7
    14c2:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    14c4:	490e      	ldr	r1, [pc, #56]	; (1500 <system_clock_init+0x120>)
    14c6:	22d0      	movs	r2, #208	; 0xd0
    14c8:	68cb      	ldr	r3, [r1, #12]
    14ca:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    14cc:	2bd0      	cmp	r3, #208	; 0xd0
    14ce:	d1fb      	bne.n	14c8 <system_clock_init+0xe8>
	PM->CPUSEL.reg = (uint32_t)divider;
    14d0:	4a17      	ldr	r2, [pc, #92]	; (1530 <system_clock_init+0x150>)
    14d2:	2300      	movs	r3, #0
    14d4:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    14d6:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    14d8:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    14da:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    14dc:	a901      	add	r1, sp, #4
    14de:	2201      	movs	r2, #1
    14e0:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    14e2:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    14e4:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    14e6:	3307      	adds	r3, #7
    14e8:	700b      	strb	r3, [r1, #0]
    14ea:	720a      	strb	r2, [r1, #8]
    14ec:	2000      	movs	r0, #0
    14ee:	4b0d      	ldr	r3, [pc, #52]	; (1524 <system_clock_init+0x144>)
    14f0:	4798      	blx	r3
    14f2:	2000      	movs	r0, #0
    14f4:	4b0c      	ldr	r3, [pc, #48]	; (1528 <system_clock_init+0x148>)
    14f6:	4798      	blx	r3
#endif
}
    14f8:	b00f      	add	sp, #60	; 0x3c
    14fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    14fc:	3b20      	subs	r3, #32
    14fe:	e7b1      	b.n	1464 <system_clock_init+0x84>
    1500:	40000800 	.word	0x40000800
    1504:	41004000 	.word	0x41004000
    1508:	0000176d 	.word	0x0000176d
    150c:	00001201 	.word	0x00001201
    1510:	00001339 	.word	0x00001339
    1514:	00806024 	.word	0x00806024
    1518:	000012b9 	.word	0x000012b9
    151c:	000011c5 	.word	0x000011c5
    1520:	00001535 	.word	0x00001535
    1524:	00001559 	.word	0x00001559
    1528:	00001611 	.word	0x00001611
    152c:	000016e1 	.word	0x000016e1
    1530:	40000400 	.word	0x40000400

00001534 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1534:	4a06      	ldr	r2, [pc, #24]	; (1550 <system_gclk_init+0x1c>)
    1536:	6993      	ldr	r3, [r2, #24]
    1538:	2108      	movs	r1, #8
    153a:	430b      	orrs	r3, r1
    153c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    153e:	2201      	movs	r2, #1
    1540:	4b04      	ldr	r3, [pc, #16]	; (1554 <system_gclk_init+0x20>)
    1542:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1544:	0019      	movs	r1, r3
    1546:	780b      	ldrb	r3, [r1, #0]
    1548:	4213      	tst	r3, r2
    154a:	d1fc      	bne.n	1546 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    154c:	4770      	bx	lr
    154e:	46c0      	nop			; (mov r8, r8)
    1550:	40000400 	.word	0x40000400
    1554:	40000c00 	.word	0x40000c00

00001558 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1558:	b570      	push	{r4, r5, r6, lr}
    155a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    155c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    155e:	780d      	ldrb	r5, [r1, #0]
    1560:	022d      	lsls	r5, r5, #8
    1562:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1564:	784b      	ldrb	r3, [r1, #1]
    1566:	2b00      	cmp	r3, #0
    1568:	d002      	beq.n	1570 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    156a:	2380      	movs	r3, #128	; 0x80
    156c:	02db      	lsls	r3, r3, #11
    156e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1570:	7a4b      	ldrb	r3, [r1, #9]
    1572:	2b00      	cmp	r3, #0
    1574:	d002      	beq.n	157c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1576:	2380      	movs	r3, #128	; 0x80
    1578:	031b      	lsls	r3, r3, #12
    157a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    157c:	6848      	ldr	r0, [r1, #4]
    157e:	2801      	cmp	r0, #1
    1580:	d910      	bls.n	15a4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1582:	1e43      	subs	r3, r0, #1
    1584:	4218      	tst	r0, r3
    1586:	d134      	bne.n	15f2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1588:	2802      	cmp	r0, #2
    158a:	d930      	bls.n	15ee <system_gclk_gen_set_config+0x96>
    158c:	2302      	movs	r3, #2
    158e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1590:	3201      	adds	r2, #1
						mask <<= 1) {
    1592:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1594:	4298      	cmp	r0, r3
    1596:	d8fb      	bhi.n	1590 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1598:	0212      	lsls	r2, r2, #8
    159a:	4332      	orrs	r2, r6
    159c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    159e:	2380      	movs	r3, #128	; 0x80
    15a0:	035b      	lsls	r3, r3, #13
    15a2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    15a4:	7a0b      	ldrb	r3, [r1, #8]
    15a6:	2b00      	cmp	r3, #0
    15a8:	d002      	beq.n	15b0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    15aa:	2380      	movs	r3, #128	; 0x80
    15ac:	039b      	lsls	r3, r3, #14
    15ae:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15b0:	4a13      	ldr	r2, [pc, #76]	; (1600 <system_gclk_gen_set_config+0xa8>)
    15b2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    15b4:	b25b      	sxtb	r3, r3
    15b6:	2b00      	cmp	r3, #0
    15b8:	dbfb      	blt.n	15b2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    15ba:	4b12      	ldr	r3, [pc, #72]	; (1604 <system_gclk_gen_set_config+0xac>)
    15bc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    15be:	4b12      	ldr	r3, [pc, #72]	; (1608 <system_gclk_gen_set_config+0xb0>)
    15c0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15c2:	4a0f      	ldr	r2, [pc, #60]	; (1600 <system_gclk_gen_set_config+0xa8>)
    15c4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    15c6:	b25b      	sxtb	r3, r3
    15c8:	2b00      	cmp	r3, #0
    15ca:	dbfb      	blt.n	15c4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    15cc:	4b0c      	ldr	r3, [pc, #48]	; (1600 <system_gclk_gen_set_config+0xa8>)
    15ce:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15d0:	001a      	movs	r2, r3
    15d2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    15d4:	b25b      	sxtb	r3, r3
    15d6:	2b00      	cmp	r3, #0
    15d8:	dbfb      	blt.n	15d2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    15da:	4a09      	ldr	r2, [pc, #36]	; (1600 <system_gclk_gen_set_config+0xa8>)
    15dc:	6853      	ldr	r3, [r2, #4]
    15de:	2180      	movs	r1, #128	; 0x80
    15e0:	0249      	lsls	r1, r1, #9
    15e2:	400b      	ands	r3, r1
    15e4:	431d      	orrs	r5, r3
    15e6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    15e8:	4b08      	ldr	r3, [pc, #32]	; (160c <system_gclk_gen_set_config+0xb4>)
    15ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    15ec:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    15ee:	2200      	movs	r2, #0
    15f0:	e7d2      	b.n	1598 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    15f2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    15f4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    15f6:	2380      	movs	r3, #128	; 0x80
    15f8:	029b      	lsls	r3, r3, #10
    15fa:	431d      	orrs	r5, r3
    15fc:	e7d2      	b.n	15a4 <system_gclk_gen_set_config+0x4c>
    15fe:	46c0      	nop			; (mov r8, r8)
    1600:	40000c00 	.word	0x40000c00
    1604:	000005e5 	.word	0x000005e5
    1608:	40000c08 	.word	0x40000c08
    160c:	00000625 	.word	0x00000625

00001610 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1610:	b510      	push	{r4, lr}
    1612:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1614:	4a0b      	ldr	r2, [pc, #44]	; (1644 <system_gclk_gen_enable+0x34>)
    1616:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1618:	b25b      	sxtb	r3, r3
    161a:	2b00      	cmp	r3, #0
    161c:	dbfb      	blt.n	1616 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    161e:	4b0a      	ldr	r3, [pc, #40]	; (1648 <system_gclk_gen_enable+0x38>)
    1620:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1622:	4b0a      	ldr	r3, [pc, #40]	; (164c <system_gclk_gen_enable+0x3c>)
    1624:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1626:	4a07      	ldr	r2, [pc, #28]	; (1644 <system_gclk_gen_enable+0x34>)
    1628:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    162a:	b25b      	sxtb	r3, r3
    162c:	2b00      	cmp	r3, #0
    162e:	dbfb      	blt.n	1628 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1630:	4a04      	ldr	r2, [pc, #16]	; (1644 <system_gclk_gen_enable+0x34>)
    1632:	6851      	ldr	r1, [r2, #4]
    1634:	2380      	movs	r3, #128	; 0x80
    1636:	025b      	lsls	r3, r3, #9
    1638:	430b      	orrs	r3, r1
    163a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    163c:	4b04      	ldr	r3, [pc, #16]	; (1650 <system_gclk_gen_enable+0x40>)
    163e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1640:	bd10      	pop	{r4, pc}
    1642:	46c0      	nop			; (mov r8, r8)
    1644:	40000c00 	.word	0x40000c00
    1648:	000005e5 	.word	0x000005e5
    164c:	40000c04 	.word	0x40000c04
    1650:	00000625 	.word	0x00000625

00001654 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1654:	b570      	push	{r4, r5, r6, lr}
    1656:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1658:	4a1a      	ldr	r2, [pc, #104]	; (16c4 <system_gclk_gen_get_hz+0x70>)
    165a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    165c:	b25b      	sxtb	r3, r3
    165e:	2b00      	cmp	r3, #0
    1660:	dbfb      	blt.n	165a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1662:	4b19      	ldr	r3, [pc, #100]	; (16c8 <system_gclk_gen_get_hz+0x74>)
    1664:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1666:	4b19      	ldr	r3, [pc, #100]	; (16cc <system_gclk_gen_get_hz+0x78>)
    1668:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    166a:	4a16      	ldr	r2, [pc, #88]	; (16c4 <system_gclk_gen_get_hz+0x70>)
    166c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    166e:	b25b      	sxtb	r3, r3
    1670:	2b00      	cmp	r3, #0
    1672:	dbfb      	blt.n	166c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1674:	4e13      	ldr	r6, [pc, #76]	; (16c4 <system_gclk_gen_get_hz+0x70>)
    1676:	6870      	ldr	r0, [r6, #4]
    1678:	04c0      	lsls	r0, r0, #19
    167a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    167c:	4b14      	ldr	r3, [pc, #80]	; (16d0 <system_gclk_gen_get_hz+0x7c>)
    167e:	4798      	blx	r3
    1680:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1682:	4b12      	ldr	r3, [pc, #72]	; (16cc <system_gclk_gen_get_hz+0x78>)
    1684:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1686:	6876      	ldr	r6, [r6, #4]
    1688:	02f6      	lsls	r6, r6, #11
    168a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    168c:	4b11      	ldr	r3, [pc, #68]	; (16d4 <system_gclk_gen_get_hz+0x80>)
    168e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1690:	4a0c      	ldr	r2, [pc, #48]	; (16c4 <system_gclk_gen_get_hz+0x70>)
    1692:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1694:	b25b      	sxtb	r3, r3
    1696:	2b00      	cmp	r3, #0
    1698:	dbfb      	blt.n	1692 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    169a:	4b0a      	ldr	r3, [pc, #40]	; (16c4 <system_gclk_gen_get_hz+0x70>)
    169c:	689c      	ldr	r4, [r3, #8]
    169e:	0224      	lsls	r4, r4, #8
    16a0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    16a2:	4b0d      	ldr	r3, [pc, #52]	; (16d8 <system_gclk_gen_get_hz+0x84>)
    16a4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    16a6:	2e00      	cmp	r6, #0
    16a8:	d107      	bne.n	16ba <system_gclk_gen_get_hz+0x66>
    16aa:	2c01      	cmp	r4, #1
    16ac:	d907      	bls.n	16be <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    16ae:	0021      	movs	r1, r4
    16b0:	0028      	movs	r0, r5
    16b2:	4b0a      	ldr	r3, [pc, #40]	; (16dc <system_gclk_gen_get_hz+0x88>)
    16b4:	4798      	blx	r3
    16b6:	0005      	movs	r5, r0
    16b8:	e001      	b.n	16be <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    16ba:	3401      	adds	r4, #1
    16bc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    16be:	0028      	movs	r0, r5
    16c0:	bd70      	pop	{r4, r5, r6, pc}
    16c2:	46c0      	nop			; (mov r8, r8)
    16c4:	40000c00 	.word	0x40000c00
    16c8:	000005e5 	.word	0x000005e5
    16cc:	40000c04 	.word	0x40000c04
    16d0:	00001131 	.word	0x00001131
    16d4:	40000c08 	.word	0x40000c08
    16d8:	00000625 	.word	0x00000625
    16dc:	00001b2d 	.word	0x00001b2d

000016e0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    16e0:	b510      	push	{r4, lr}
    16e2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    16e4:	4b06      	ldr	r3, [pc, #24]	; (1700 <system_gclk_chan_enable+0x20>)
    16e6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    16e8:	4b06      	ldr	r3, [pc, #24]	; (1704 <system_gclk_chan_enable+0x24>)
    16ea:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    16ec:	4a06      	ldr	r2, [pc, #24]	; (1708 <system_gclk_chan_enable+0x28>)
    16ee:	8853      	ldrh	r3, [r2, #2]
    16f0:	2180      	movs	r1, #128	; 0x80
    16f2:	01c9      	lsls	r1, r1, #7
    16f4:	430b      	orrs	r3, r1
    16f6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    16f8:	4b04      	ldr	r3, [pc, #16]	; (170c <system_gclk_chan_enable+0x2c>)
    16fa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    16fc:	bd10      	pop	{r4, pc}
    16fe:	46c0      	nop			; (mov r8, r8)
    1700:	000005e5 	.word	0x000005e5
    1704:	40000c02 	.word	0x40000c02
    1708:	40000c00 	.word	0x40000c00
    170c:	00000625 	.word	0x00000625

00001710 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1710:	b510      	push	{r4, lr}
    1712:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1714:	4b0f      	ldr	r3, [pc, #60]	; (1754 <system_gclk_chan_disable+0x44>)
    1716:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1718:	4b0f      	ldr	r3, [pc, #60]	; (1758 <system_gclk_chan_disable+0x48>)
    171a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    171c:	4a0f      	ldr	r2, [pc, #60]	; (175c <system_gclk_chan_disable+0x4c>)
    171e:	8853      	ldrh	r3, [r2, #2]
    1720:	051b      	lsls	r3, r3, #20
    1722:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1724:	8853      	ldrh	r3, [r2, #2]
    1726:	490e      	ldr	r1, [pc, #56]	; (1760 <system_gclk_chan_disable+0x50>)
    1728:	400b      	ands	r3, r1
    172a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    172c:	8853      	ldrh	r3, [r2, #2]
    172e:	490d      	ldr	r1, [pc, #52]	; (1764 <system_gclk_chan_disable+0x54>)
    1730:	400b      	ands	r3, r1
    1732:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1734:	0011      	movs	r1, r2
    1736:	2280      	movs	r2, #128	; 0x80
    1738:	01d2      	lsls	r2, r2, #7
    173a:	884b      	ldrh	r3, [r1, #2]
    173c:	4213      	tst	r3, r2
    173e:	d1fc      	bne.n	173a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1740:	4906      	ldr	r1, [pc, #24]	; (175c <system_gclk_chan_disable+0x4c>)
    1742:	884a      	ldrh	r2, [r1, #2]
    1744:	0203      	lsls	r3, r0, #8
    1746:	4806      	ldr	r0, [pc, #24]	; (1760 <system_gclk_chan_disable+0x50>)
    1748:	4002      	ands	r2, r0
    174a:	4313      	orrs	r3, r2
    174c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    174e:	4b06      	ldr	r3, [pc, #24]	; (1768 <system_gclk_chan_disable+0x58>)
    1750:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1752:	bd10      	pop	{r4, pc}
    1754:	000005e5 	.word	0x000005e5
    1758:	40000c02 	.word	0x40000c02
    175c:	40000c00 	.word	0x40000c00
    1760:	fffff0ff 	.word	0xfffff0ff
    1764:	ffffbfff 	.word	0xffffbfff
    1768:	00000625 	.word	0x00000625

0000176c <system_gclk_chan_set_config>:
{
    176c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    176e:	780c      	ldrb	r4, [r1, #0]
    1770:	0224      	lsls	r4, r4, #8
    1772:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1774:	4b02      	ldr	r3, [pc, #8]	; (1780 <system_gclk_chan_set_config+0x14>)
    1776:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1778:	b2a4      	uxth	r4, r4
    177a:	4b02      	ldr	r3, [pc, #8]	; (1784 <system_gclk_chan_set_config+0x18>)
    177c:	805c      	strh	r4, [r3, #2]
}
    177e:	bd10      	pop	{r4, pc}
    1780:	00001711 	.word	0x00001711
    1784:	40000c00 	.word	0x40000c00

00001788 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1788:	b510      	push	{r4, lr}
    178a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    178c:	4b06      	ldr	r3, [pc, #24]	; (17a8 <system_gclk_chan_get_hz+0x20>)
    178e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1790:	4b06      	ldr	r3, [pc, #24]	; (17ac <system_gclk_chan_get_hz+0x24>)
    1792:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1794:	4b06      	ldr	r3, [pc, #24]	; (17b0 <system_gclk_chan_get_hz+0x28>)
    1796:	885c      	ldrh	r4, [r3, #2]
    1798:	0524      	lsls	r4, r4, #20
    179a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    179c:	4b05      	ldr	r3, [pc, #20]	; (17b4 <system_gclk_chan_get_hz+0x2c>)
    179e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    17a0:	0020      	movs	r0, r4
    17a2:	4b05      	ldr	r3, [pc, #20]	; (17b8 <system_gclk_chan_get_hz+0x30>)
    17a4:	4798      	blx	r3
}
    17a6:	bd10      	pop	{r4, pc}
    17a8:	000005e5 	.word	0x000005e5
    17ac:	40000c02 	.word	0x40000c02
    17b0:	40000c00 	.word	0x40000c00
    17b4:	00000625 	.word	0x00000625
    17b8:	00001655 	.word	0x00001655

000017bc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    17bc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    17be:	78d3      	ldrb	r3, [r2, #3]
    17c0:	2b00      	cmp	r3, #0
    17c2:	d135      	bne.n	1830 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    17c4:	7813      	ldrb	r3, [r2, #0]
    17c6:	2b80      	cmp	r3, #128	; 0x80
    17c8:	d029      	beq.n	181e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    17ca:	061b      	lsls	r3, r3, #24
    17cc:	2480      	movs	r4, #128	; 0x80
    17ce:	0264      	lsls	r4, r4, #9
    17d0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    17d2:	7854      	ldrb	r4, [r2, #1]
    17d4:	2502      	movs	r5, #2
    17d6:	43ac      	bics	r4, r5
    17d8:	d106      	bne.n	17e8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    17da:	7894      	ldrb	r4, [r2, #2]
    17dc:	2c00      	cmp	r4, #0
    17de:	d120      	bne.n	1822 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    17e0:	2480      	movs	r4, #128	; 0x80
    17e2:	02a4      	lsls	r4, r4, #10
    17e4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    17e6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    17e8:	7854      	ldrb	r4, [r2, #1]
    17ea:	3c01      	subs	r4, #1
    17ec:	2c01      	cmp	r4, #1
    17ee:	d91c      	bls.n	182a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    17f0:	040d      	lsls	r5, r1, #16
    17f2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    17f4:	24a0      	movs	r4, #160	; 0xa0
    17f6:	05e4      	lsls	r4, r4, #23
    17f8:	432c      	orrs	r4, r5
    17fa:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17fc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    17fe:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1800:	24d0      	movs	r4, #208	; 0xd0
    1802:	0624      	lsls	r4, r4, #24
    1804:	432c      	orrs	r4, r5
    1806:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1808:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    180a:	78d4      	ldrb	r4, [r2, #3]
    180c:	2c00      	cmp	r4, #0
    180e:	d122      	bne.n	1856 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1810:	035b      	lsls	r3, r3, #13
    1812:	d51c      	bpl.n	184e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1814:	7893      	ldrb	r3, [r2, #2]
    1816:	2b01      	cmp	r3, #1
    1818:	d01e      	beq.n	1858 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    181a:	6141      	str	r1, [r0, #20]
    181c:	e017      	b.n	184e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    181e:	2300      	movs	r3, #0
    1820:	e7d7      	b.n	17d2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1822:	24c0      	movs	r4, #192	; 0xc0
    1824:	02e4      	lsls	r4, r4, #11
    1826:	4323      	orrs	r3, r4
    1828:	e7dd      	b.n	17e6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    182a:	4c0d      	ldr	r4, [pc, #52]	; (1860 <_system_pinmux_config+0xa4>)
    182c:	4023      	ands	r3, r4
    182e:	e7df      	b.n	17f0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1830:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1832:	040c      	lsls	r4, r1, #16
    1834:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1836:	23a0      	movs	r3, #160	; 0xa0
    1838:	05db      	lsls	r3, r3, #23
    183a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    183c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    183e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1840:	23d0      	movs	r3, #208	; 0xd0
    1842:	061b      	lsls	r3, r3, #24
    1844:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1846:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1848:	78d3      	ldrb	r3, [r2, #3]
    184a:	2b00      	cmp	r3, #0
    184c:	d103      	bne.n	1856 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    184e:	7853      	ldrb	r3, [r2, #1]
    1850:	3b01      	subs	r3, #1
    1852:	2b01      	cmp	r3, #1
    1854:	d902      	bls.n	185c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1856:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1858:	6181      	str	r1, [r0, #24]
    185a:	e7f8      	b.n	184e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    185c:	6081      	str	r1, [r0, #8]
}
    185e:	e7fa      	b.n	1856 <_system_pinmux_config+0x9a>
    1860:	fffbffff 	.word	0xfffbffff

00001864 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1864:	b510      	push	{r4, lr}
    1866:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1868:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    186a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    186c:	2900      	cmp	r1, #0
    186e:	d104      	bne.n	187a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1870:	0943      	lsrs	r3, r0, #5
    1872:	01db      	lsls	r3, r3, #7
    1874:	4905      	ldr	r1, [pc, #20]	; (188c <system_pinmux_pin_set_config+0x28>)
    1876:	468c      	mov	ip, r1
    1878:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    187a:	241f      	movs	r4, #31
    187c:	4020      	ands	r0, r4
    187e:	2101      	movs	r1, #1
    1880:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1882:	0018      	movs	r0, r3
    1884:	4b02      	ldr	r3, [pc, #8]	; (1890 <system_pinmux_pin_set_config+0x2c>)
    1886:	4798      	blx	r3
}
    1888:	bd10      	pop	{r4, pc}
    188a:	46c0      	nop			; (mov r8, r8)
    188c:	41004400 	.word	0x41004400
    1890:	000017bd 	.word	0x000017bd

00001894 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1894:	4770      	bx	lr
	...

00001898 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1898:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    189a:	4b05      	ldr	r3, [pc, #20]	; (18b0 <system_init+0x18>)
    189c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    189e:	4b05      	ldr	r3, [pc, #20]	; (18b4 <system_init+0x1c>)
    18a0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <system_init+0x20>)
    18a4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    18a6:	4b05      	ldr	r3, [pc, #20]	; (18bc <system_init+0x24>)
    18a8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    18aa:	4b05      	ldr	r3, [pc, #20]	; (18c0 <system_init+0x28>)
    18ac:	4798      	blx	r3
}
    18ae:	bd10      	pop	{r4, pc}
    18b0:	000013e1 	.word	0x000013e1
    18b4:	00000191 	.word	0x00000191
    18b8:	00001895 	.word	0x00001895
    18bc:	00001895 	.word	0x00001895
    18c0:	00001895 	.word	0x00001895

000018c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    18c4:	e7fe      	b.n	18c4 <Dummy_Handler>
	...

000018c8 <Reset_Handler>:
{
    18c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    18ca:	4a2a      	ldr	r2, [pc, #168]	; (1974 <Reset_Handler+0xac>)
    18cc:	4b2a      	ldr	r3, [pc, #168]	; (1978 <Reset_Handler+0xb0>)
    18ce:	429a      	cmp	r2, r3
    18d0:	d011      	beq.n	18f6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    18d2:	001a      	movs	r2, r3
    18d4:	4b29      	ldr	r3, [pc, #164]	; (197c <Reset_Handler+0xb4>)
    18d6:	429a      	cmp	r2, r3
    18d8:	d20d      	bcs.n	18f6 <Reset_Handler+0x2e>
    18da:	4a29      	ldr	r2, [pc, #164]	; (1980 <Reset_Handler+0xb8>)
    18dc:	3303      	adds	r3, #3
    18de:	1a9b      	subs	r3, r3, r2
    18e0:	089b      	lsrs	r3, r3, #2
    18e2:	3301      	adds	r3, #1
    18e4:	009b      	lsls	r3, r3, #2
    18e6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    18e8:	4823      	ldr	r0, [pc, #140]	; (1978 <Reset_Handler+0xb0>)
    18ea:	4922      	ldr	r1, [pc, #136]	; (1974 <Reset_Handler+0xac>)
    18ec:	588c      	ldr	r4, [r1, r2]
    18ee:	5084      	str	r4, [r0, r2]
    18f0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    18f2:	429a      	cmp	r2, r3
    18f4:	d1fa      	bne.n	18ec <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    18f6:	4a23      	ldr	r2, [pc, #140]	; (1984 <Reset_Handler+0xbc>)
    18f8:	4b23      	ldr	r3, [pc, #140]	; (1988 <Reset_Handler+0xc0>)
    18fa:	429a      	cmp	r2, r3
    18fc:	d20a      	bcs.n	1914 <Reset_Handler+0x4c>
    18fe:	43d3      	mvns	r3, r2
    1900:	4921      	ldr	r1, [pc, #132]	; (1988 <Reset_Handler+0xc0>)
    1902:	185b      	adds	r3, r3, r1
    1904:	2103      	movs	r1, #3
    1906:	438b      	bics	r3, r1
    1908:	3304      	adds	r3, #4
    190a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    190c:	2100      	movs	r1, #0
    190e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1910:	4293      	cmp	r3, r2
    1912:	d1fc      	bne.n	190e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1914:	4a1d      	ldr	r2, [pc, #116]	; (198c <Reset_Handler+0xc4>)
    1916:	21ff      	movs	r1, #255	; 0xff
    1918:	4b1d      	ldr	r3, [pc, #116]	; (1990 <Reset_Handler+0xc8>)
    191a:	438b      	bics	r3, r1
    191c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    191e:	39fd      	subs	r1, #253	; 0xfd
    1920:	2390      	movs	r3, #144	; 0x90
    1922:	005b      	lsls	r3, r3, #1
    1924:	4a1b      	ldr	r2, [pc, #108]	; (1994 <Reset_Handler+0xcc>)
    1926:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1928:	4a1b      	ldr	r2, [pc, #108]	; (1998 <Reset_Handler+0xd0>)
    192a:	78d3      	ldrb	r3, [r2, #3]
    192c:	2503      	movs	r5, #3
    192e:	43ab      	bics	r3, r5
    1930:	2402      	movs	r4, #2
    1932:	4323      	orrs	r3, r4
    1934:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1936:	78d3      	ldrb	r3, [r2, #3]
    1938:	270c      	movs	r7, #12
    193a:	43bb      	bics	r3, r7
    193c:	2608      	movs	r6, #8
    193e:	4333      	orrs	r3, r6
    1940:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1942:	4b16      	ldr	r3, [pc, #88]	; (199c <Reset_Handler+0xd4>)
    1944:	7b98      	ldrb	r0, [r3, #14]
    1946:	2230      	movs	r2, #48	; 0x30
    1948:	4390      	bics	r0, r2
    194a:	2220      	movs	r2, #32
    194c:	4310      	orrs	r0, r2
    194e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1950:	7b99      	ldrb	r1, [r3, #14]
    1952:	43b9      	bics	r1, r7
    1954:	4331      	orrs	r1, r6
    1956:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1958:	7b9a      	ldrb	r2, [r3, #14]
    195a:	43aa      	bics	r2, r5
    195c:	4322      	orrs	r2, r4
    195e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1960:	4a0f      	ldr	r2, [pc, #60]	; (19a0 <Reset_Handler+0xd8>)
    1962:	6853      	ldr	r3, [r2, #4]
    1964:	2180      	movs	r1, #128	; 0x80
    1966:	430b      	orrs	r3, r1
    1968:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    196a:	4b0e      	ldr	r3, [pc, #56]	; (19a4 <Reset_Handler+0xdc>)
    196c:	4798      	blx	r3
        main();
    196e:	4b0e      	ldr	r3, [pc, #56]	; (19a8 <Reset_Handler+0xe0>)
    1970:	4798      	blx	r3
    1972:	e7fe      	b.n	1972 <Reset_Handler+0xaa>
    1974:	000025d8 	.word	0x000025d8
    1978:	20000000 	.word	0x20000000
    197c:	20000070 	.word	0x20000070
    1980:	20000004 	.word	0x20000004
    1984:	20000070 	.word	0x20000070
    1988:	2000094c 	.word	0x2000094c
    198c:	e000ed00 	.word	0xe000ed00
    1990:	00000000 	.word	0x00000000
    1994:	41007000 	.word	0x41007000
    1998:	41005000 	.word	0x41005000
    199c:	41004800 	.word	0x41004800
    19a0:	41004000 	.word	0x41004000
    19a4:	00001c99 	.word	0x00001c99
    19a8:	00001a79 	.word	0x00001a79

000019ac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    19ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ae:	46c6      	mov	lr, r8
    19b0:	b500      	push	{lr}
    19b2:	000c      	movs	r4, r1
    19b4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    19b6:	2800      	cmp	r0, #0
    19b8:	d10f      	bne.n	19da <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    19ba:	2a00      	cmp	r2, #0
    19bc:	dd11      	ble.n	19e2 <_read+0x36>
    19be:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    19c0:	4e09      	ldr	r6, [pc, #36]	; (19e8 <_read+0x3c>)
    19c2:	4d0a      	ldr	r5, [pc, #40]	; (19ec <_read+0x40>)
    19c4:	6830      	ldr	r0, [r6, #0]
    19c6:	0021      	movs	r1, r4
    19c8:	682b      	ldr	r3, [r5, #0]
    19ca:	4798      	blx	r3
		ptr++;
    19cc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    19ce:	42bc      	cmp	r4, r7
    19d0:	d1f8      	bne.n	19c4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    19d2:	4640      	mov	r0, r8
    19d4:	bc04      	pop	{r2}
    19d6:	4690      	mov	r8, r2
    19d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    19da:	2301      	movs	r3, #1
    19dc:	425b      	negs	r3, r3
    19de:	4698      	mov	r8, r3
    19e0:	e7f7      	b.n	19d2 <_read+0x26>
	for (; len > 0; --len) {
    19e2:	4680      	mov	r8, r0
    19e4:	e7f5      	b.n	19d2 <_read+0x26>
    19e6:	46c0      	nop			; (mov r8, r8)
    19e8:	20000944 	.word	0x20000944
    19ec:	2000093c 	.word	0x2000093c

000019f0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    19f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19f2:	46c6      	mov	lr, r8
    19f4:	b500      	push	{lr}
    19f6:	000e      	movs	r6, r1
    19f8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    19fa:	3801      	subs	r0, #1
    19fc:	2802      	cmp	r0, #2
    19fe:	d810      	bhi.n	1a22 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1a00:	2a00      	cmp	r2, #0
    1a02:	d011      	beq.n	1a28 <_write+0x38>
    1a04:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1a06:	4b0c      	ldr	r3, [pc, #48]	; (1a38 <_write+0x48>)
    1a08:	4698      	mov	r8, r3
    1a0a:	4f0c      	ldr	r7, [pc, #48]	; (1a3c <_write+0x4c>)
    1a0c:	4643      	mov	r3, r8
    1a0e:	6818      	ldr	r0, [r3, #0]
    1a10:	5d31      	ldrb	r1, [r6, r4]
    1a12:	683b      	ldr	r3, [r7, #0]
    1a14:	4798      	blx	r3
    1a16:	2800      	cmp	r0, #0
    1a18:	db08      	blt.n	1a2c <_write+0x3c>
			return -1;
		}
		++nChars;
    1a1a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1a1c:	42a5      	cmp	r5, r4
    1a1e:	d1f5      	bne.n	1a0c <_write+0x1c>
    1a20:	e006      	b.n	1a30 <_write+0x40>
		return -1;
    1a22:	2401      	movs	r4, #1
    1a24:	4264      	negs	r4, r4
    1a26:	e003      	b.n	1a30 <_write+0x40>
	for (; len != 0; --len) {
    1a28:	0014      	movs	r4, r2
    1a2a:	e001      	b.n	1a30 <_write+0x40>
			return -1;
    1a2c:	2401      	movs	r4, #1
    1a2e:	4264      	negs	r4, r4
	}
	return nChars;
}
    1a30:	0020      	movs	r0, r4
    1a32:	bc04      	pop	{r2}
    1a34:	4690      	mov	r8, r2
    1a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a38:	20000944 	.word	0x20000944
    1a3c:	20000940 	.word	0x20000940

00001a40 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1a40:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1a42:	4a06      	ldr	r2, [pc, #24]	; (1a5c <_sbrk+0x1c>)
    1a44:	6812      	ldr	r2, [r2, #0]
    1a46:	2a00      	cmp	r2, #0
    1a48:	d004      	beq.n	1a54 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1a4a:	4a04      	ldr	r2, [pc, #16]	; (1a5c <_sbrk+0x1c>)
    1a4c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1a4e:	18c3      	adds	r3, r0, r3
    1a50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1a52:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1a54:	4902      	ldr	r1, [pc, #8]	; (1a60 <_sbrk+0x20>)
    1a56:	4a01      	ldr	r2, [pc, #4]	; (1a5c <_sbrk+0x1c>)
    1a58:	6011      	str	r1, [r2, #0]
    1a5a:	e7f6      	b.n	1a4a <_sbrk+0xa>
    1a5c:	200000d4 	.word	0x200000d4
    1a60:	20002950 	.word	0x20002950

00001a64 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1a64:	2001      	movs	r0, #1
    1a66:	4240      	negs	r0, r0
    1a68:	4770      	bx	lr

00001a6a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1a6a:	2380      	movs	r3, #128	; 0x80
    1a6c:	019b      	lsls	r3, r3, #6
    1a6e:	604b      	str	r3, [r1, #4]

	return 0;
}
    1a70:	2000      	movs	r0, #0
    1a72:	4770      	bx	lr

00001a74 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1a74:	2000      	movs	r0, #0
    1a76:	4770      	bx	lr

00001a78 <main>:
* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/

int main(void)
{
    1a78:	b5b0      	push	{r4, r5, r7, lr}
    1a7a:	b082      	sub	sp, #8
    1a7c:	af00      	add	r7, sp, #0

	/*1.) INIT SYSTEM PERIPHERALS INITIALIZATION*/
	system_init();
    1a7e:	4b1d      	ldr	r3, [pc, #116]	; (1af4 <main+0x7c>)
    1a80:	4798      	blx	r3
	delay_init();
    1a82:	4b1d      	ldr	r3, [pc, #116]	; (1af8 <main+0x80>)
    1a84:	4798      	blx	r3
	InitializeSerialConsole();
    1a86:	4b1d      	ldr	r3, [pc, #116]	; (1afc <main+0x84>)
    1a88:	4798      	blx	r3
	cpu_irq_enable();
    1a8a:	4c1d      	ldr	r4, [pc, #116]	; (1b00 <main+0x88>)
    1a8c:	2501      	movs	r5, #1
    1a8e:	7025      	strb	r5, [r4, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1a90:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1a94:	b662      	cpsie	i
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    1a96:	2200      	movs	r2, #0
    1a98:	703a      	strb	r2, [r7, #0]
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    1a9a:	4b1a      	ldr	r3, [pc, #104]	; (1b04 <main+0x8c>)
    1a9c:	685b      	ldr	r3, [r3, #4]
    1a9e:	06db      	lsls	r3, r3, #27
    1aa0:	0f1b      	lsrs	r3, r3, #28
    1aa2:	70bb      	strb	r3, [r7, #2]
	config->disable_cache     = false;
    1aa4:	70fa      	strb	r2, [r7, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    1aa6:	713a      	strb	r2, [r7, #4]
******************************************************************************/
static void configure_nvm(void)
{
    struct nvm_config config_nvm;
    nvm_get_config_defaults(&config_nvm);
    config_nvm.manual_page_write = false;
    1aa8:	707a      	strb	r2, [r7, #1]
    nvm_set_config(&config_nvm);
    1aaa:	0038      	movs	r0, r7
    1aac:	4b16      	ldr	r3, [pc, #88]	; (1b08 <main+0x90>)
    1aae:	4798      	blx	r3
	cpu_irq_enable();
    1ab0:	7025      	strb	r5, [r4, #0]
    1ab2:	f3bf 8f5f 	dmb	sy
    1ab6:	b662      	cpsie	i
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1ab8:	4a14      	ldr	r2, [pc, #80]	; (1b0c <main+0x94>)
    1aba:	69d3      	ldr	r3, [r2, #28]
    1abc:	2102      	movs	r1, #2
    1abe:	430b      	orrs	r3, r1
    1ac0:	61d3      	str	r3, [r2, #28]
	SerialConsoleWriteString("ESE516 - ENTER BOOTLOADER");	//Order to add string to TX Buffer
    1ac2:	4813      	ldr	r0, [pc, #76]	; (1b10 <main+0x98>)
    1ac4:	4c13      	ldr	r4, [pc, #76]	; (1b14 <main+0x9c>)
    1ac6:	47a0      	blx	r4
	SerialConsoleWriteString("ESE516 - EXIT BOOTLOADER");	//Order to add string to TX Buffer
    1ac8:	4813      	ldr	r0, [pc, #76]	; (1b18 <main+0xa0>)
    1aca:	47a0      	blx	r4
	delay_cycles_ms(100); //Delay to allow print
    1acc:	2064      	movs	r0, #100	; 0x64
    1ace:	4b13      	ldr	r3, [pc, #76]	; (1b1c <main+0xa4>)
    1ad0:	4798      	blx	r3
	DeinitializeSerialConsole(); //Deinitializes UART
    1ad2:	4b13      	ldr	r3, [pc, #76]	; (1b20 <main+0xa8>)
    1ad4:	4798      	blx	r3
__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    1ad6:	2390      	movs	r3, #144	; 0x90
    1ad8:	025b      	lsls	r3, r3, #9

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    1ada:	681a      	ldr	r2, [r3, #0]
    1adc:	f382 8808 	msr	MSP, r2
SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    1ae0:	4a10      	ldr	r2, [pc, #64]	; (1b24 <main+0xac>)
    1ae2:	6093      	str	r3, [r2, #8]
(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    1ae4:	4b10      	ldr	r3, [pc, #64]	; (1b28 <main+0xb0>)
applicationCodeEntry();
    1ae6:	681b      	ldr	r3, [r3, #0]
    1ae8:	4798      	blx	r3
}
    1aea:	2000      	movs	r0, #0
    1aec:	46bd      	mov	sp, r7
    1aee:	b002      	add	sp, #8
    1af0:	bdb0      	pop	{r4, r5, r7, pc}
    1af2:	46c0      	nop			; (mov r8, r8)
    1af4:	00001899 	.word	0x00001899
    1af8:	00000115 	.word	0x00000115
    1afc:	0000037d 	.word	0x0000037d
    1b00:	20000008 	.word	0x20000008
    1b04:	41004000 	.word	0x41004000
    1b08:	000001c9 	.word	0x000001c9
    1b0c:	40000400 	.word	0x40000400
    1b10:	0000251c 	.word	0x0000251c
    1b14:	0000051d 	.word	0x0000051d
    1b18:	00002538 	.word	0x00002538
    1b1c:	00000155 	.word	0x00000155
    1b20:	000004e5 	.word	0x000004e5
    1b24:	e000ed00 	.word	0xe000ed00
    1b28:	00012004 	.word	0x00012004

00001b2c <__udivsi3>:
    1b2c:	2200      	movs	r2, #0
    1b2e:	0843      	lsrs	r3, r0, #1
    1b30:	428b      	cmp	r3, r1
    1b32:	d374      	bcc.n	1c1e <__udivsi3+0xf2>
    1b34:	0903      	lsrs	r3, r0, #4
    1b36:	428b      	cmp	r3, r1
    1b38:	d35f      	bcc.n	1bfa <__udivsi3+0xce>
    1b3a:	0a03      	lsrs	r3, r0, #8
    1b3c:	428b      	cmp	r3, r1
    1b3e:	d344      	bcc.n	1bca <__udivsi3+0x9e>
    1b40:	0b03      	lsrs	r3, r0, #12
    1b42:	428b      	cmp	r3, r1
    1b44:	d328      	bcc.n	1b98 <__udivsi3+0x6c>
    1b46:	0c03      	lsrs	r3, r0, #16
    1b48:	428b      	cmp	r3, r1
    1b4a:	d30d      	bcc.n	1b68 <__udivsi3+0x3c>
    1b4c:	22ff      	movs	r2, #255	; 0xff
    1b4e:	0209      	lsls	r1, r1, #8
    1b50:	ba12      	rev	r2, r2
    1b52:	0c03      	lsrs	r3, r0, #16
    1b54:	428b      	cmp	r3, r1
    1b56:	d302      	bcc.n	1b5e <__udivsi3+0x32>
    1b58:	1212      	asrs	r2, r2, #8
    1b5a:	0209      	lsls	r1, r1, #8
    1b5c:	d065      	beq.n	1c2a <__udivsi3+0xfe>
    1b5e:	0b03      	lsrs	r3, r0, #12
    1b60:	428b      	cmp	r3, r1
    1b62:	d319      	bcc.n	1b98 <__udivsi3+0x6c>
    1b64:	e000      	b.n	1b68 <__udivsi3+0x3c>
    1b66:	0a09      	lsrs	r1, r1, #8
    1b68:	0bc3      	lsrs	r3, r0, #15
    1b6a:	428b      	cmp	r3, r1
    1b6c:	d301      	bcc.n	1b72 <__udivsi3+0x46>
    1b6e:	03cb      	lsls	r3, r1, #15
    1b70:	1ac0      	subs	r0, r0, r3
    1b72:	4152      	adcs	r2, r2
    1b74:	0b83      	lsrs	r3, r0, #14
    1b76:	428b      	cmp	r3, r1
    1b78:	d301      	bcc.n	1b7e <__udivsi3+0x52>
    1b7a:	038b      	lsls	r3, r1, #14
    1b7c:	1ac0      	subs	r0, r0, r3
    1b7e:	4152      	adcs	r2, r2
    1b80:	0b43      	lsrs	r3, r0, #13
    1b82:	428b      	cmp	r3, r1
    1b84:	d301      	bcc.n	1b8a <__udivsi3+0x5e>
    1b86:	034b      	lsls	r3, r1, #13
    1b88:	1ac0      	subs	r0, r0, r3
    1b8a:	4152      	adcs	r2, r2
    1b8c:	0b03      	lsrs	r3, r0, #12
    1b8e:	428b      	cmp	r3, r1
    1b90:	d301      	bcc.n	1b96 <__udivsi3+0x6a>
    1b92:	030b      	lsls	r3, r1, #12
    1b94:	1ac0      	subs	r0, r0, r3
    1b96:	4152      	adcs	r2, r2
    1b98:	0ac3      	lsrs	r3, r0, #11
    1b9a:	428b      	cmp	r3, r1
    1b9c:	d301      	bcc.n	1ba2 <__udivsi3+0x76>
    1b9e:	02cb      	lsls	r3, r1, #11
    1ba0:	1ac0      	subs	r0, r0, r3
    1ba2:	4152      	adcs	r2, r2
    1ba4:	0a83      	lsrs	r3, r0, #10
    1ba6:	428b      	cmp	r3, r1
    1ba8:	d301      	bcc.n	1bae <__udivsi3+0x82>
    1baa:	028b      	lsls	r3, r1, #10
    1bac:	1ac0      	subs	r0, r0, r3
    1bae:	4152      	adcs	r2, r2
    1bb0:	0a43      	lsrs	r3, r0, #9
    1bb2:	428b      	cmp	r3, r1
    1bb4:	d301      	bcc.n	1bba <__udivsi3+0x8e>
    1bb6:	024b      	lsls	r3, r1, #9
    1bb8:	1ac0      	subs	r0, r0, r3
    1bba:	4152      	adcs	r2, r2
    1bbc:	0a03      	lsrs	r3, r0, #8
    1bbe:	428b      	cmp	r3, r1
    1bc0:	d301      	bcc.n	1bc6 <__udivsi3+0x9a>
    1bc2:	020b      	lsls	r3, r1, #8
    1bc4:	1ac0      	subs	r0, r0, r3
    1bc6:	4152      	adcs	r2, r2
    1bc8:	d2cd      	bcs.n	1b66 <__udivsi3+0x3a>
    1bca:	09c3      	lsrs	r3, r0, #7
    1bcc:	428b      	cmp	r3, r1
    1bce:	d301      	bcc.n	1bd4 <__udivsi3+0xa8>
    1bd0:	01cb      	lsls	r3, r1, #7
    1bd2:	1ac0      	subs	r0, r0, r3
    1bd4:	4152      	adcs	r2, r2
    1bd6:	0983      	lsrs	r3, r0, #6
    1bd8:	428b      	cmp	r3, r1
    1bda:	d301      	bcc.n	1be0 <__udivsi3+0xb4>
    1bdc:	018b      	lsls	r3, r1, #6
    1bde:	1ac0      	subs	r0, r0, r3
    1be0:	4152      	adcs	r2, r2
    1be2:	0943      	lsrs	r3, r0, #5
    1be4:	428b      	cmp	r3, r1
    1be6:	d301      	bcc.n	1bec <__udivsi3+0xc0>
    1be8:	014b      	lsls	r3, r1, #5
    1bea:	1ac0      	subs	r0, r0, r3
    1bec:	4152      	adcs	r2, r2
    1bee:	0903      	lsrs	r3, r0, #4
    1bf0:	428b      	cmp	r3, r1
    1bf2:	d301      	bcc.n	1bf8 <__udivsi3+0xcc>
    1bf4:	010b      	lsls	r3, r1, #4
    1bf6:	1ac0      	subs	r0, r0, r3
    1bf8:	4152      	adcs	r2, r2
    1bfa:	08c3      	lsrs	r3, r0, #3
    1bfc:	428b      	cmp	r3, r1
    1bfe:	d301      	bcc.n	1c04 <__udivsi3+0xd8>
    1c00:	00cb      	lsls	r3, r1, #3
    1c02:	1ac0      	subs	r0, r0, r3
    1c04:	4152      	adcs	r2, r2
    1c06:	0883      	lsrs	r3, r0, #2
    1c08:	428b      	cmp	r3, r1
    1c0a:	d301      	bcc.n	1c10 <__udivsi3+0xe4>
    1c0c:	008b      	lsls	r3, r1, #2
    1c0e:	1ac0      	subs	r0, r0, r3
    1c10:	4152      	adcs	r2, r2
    1c12:	0843      	lsrs	r3, r0, #1
    1c14:	428b      	cmp	r3, r1
    1c16:	d301      	bcc.n	1c1c <__udivsi3+0xf0>
    1c18:	004b      	lsls	r3, r1, #1
    1c1a:	1ac0      	subs	r0, r0, r3
    1c1c:	4152      	adcs	r2, r2
    1c1e:	1a41      	subs	r1, r0, r1
    1c20:	d200      	bcs.n	1c24 <__udivsi3+0xf8>
    1c22:	4601      	mov	r1, r0
    1c24:	4152      	adcs	r2, r2
    1c26:	4610      	mov	r0, r2
    1c28:	4770      	bx	lr
    1c2a:	e7ff      	b.n	1c2c <__udivsi3+0x100>
    1c2c:	b501      	push	{r0, lr}
    1c2e:	2000      	movs	r0, #0
    1c30:	f000 f806 	bl	1c40 <__aeabi_idiv0>
    1c34:	bd02      	pop	{r1, pc}
    1c36:	46c0      	nop			; (mov r8, r8)

00001c38 <__aeabi_uidivmod>:
    1c38:	2900      	cmp	r1, #0
    1c3a:	d0f7      	beq.n	1c2c <__udivsi3+0x100>
    1c3c:	e776      	b.n	1b2c <__udivsi3>
    1c3e:	4770      	bx	lr

00001c40 <__aeabi_idiv0>:
    1c40:	4770      	bx	lr
    1c42:	46c0      	nop			; (mov r8, r8)

00001c44 <__aeabi_lmul>:
    1c44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c46:	46ce      	mov	lr, r9
    1c48:	4647      	mov	r7, r8
    1c4a:	0415      	lsls	r5, r2, #16
    1c4c:	0c2d      	lsrs	r5, r5, #16
    1c4e:	002e      	movs	r6, r5
    1c50:	b580      	push	{r7, lr}
    1c52:	0407      	lsls	r7, r0, #16
    1c54:	0c14      	lsrs	r4, r2, #16
    1c56:	0c3f      	lsrs	r7, r7, #16
    1c58:	4699      	mov	r9, r3
    1c5a:	0c03      	lsrs	r3, r0, #16
    1c5c:	437e      	muls	r6, r7
    1c5e:	435d      	muls	r5, r3
    1c60:	4367      	muls	r7, r4
    1c62:	4363      	muls	r3, r4
    1c64:	197f      	adds	r7, r7, r5
    1c66:	0c34      	lsrs	r4, r6, #16
    1c68:	19e4      	adds	r4, r4, r7
    1c6a:	469c      	mov	ip, r3
    1c6c:	42a5      	cmp	r5, r4
    1c6e:	d903      	bls.n	1c78 <__aeabi_lmul+0x34>
    1c70:	2380      	movs	r3, #128	; 0x80
    1c72:	025b      	lsls	r3, r3, #9
    1c74:	4698      	mov	r8, r3
    1c76:	44c4      	add	ip, r8
    1c78:	464b      	mov	r3, r9
    1c7a:	4351      	muls	r1, r2
    1c7c:	4343      	muls	r3, r0
    1c7e:	0436      	lsls	r6, r6, #16
    1c80:	0c36      	lsrs	r6, r6, #16
    1c82:	0c25      	lsrs	r5, r4, #16
    1c84:	0424      	lsls	r4, r4, #16
    1c86:	4465      	add	r5, ip
    1c88:	19a4      	adds	r4, r4, r6
    1c8a:	1859      	adds	r1, r3, r1
    1c8c:	1949      	adds	r1, r1, r5
    1c8e:	0020      	movs	r0, r4
    1c90:	bc0c      	pop	{r2, r3}
    1c92:	4690      	mov	r8, r2
    1c94:	4699      	mov	r9, r3
    1c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001c98 <__libc_init_array>:
    1c98:	b570      	push	{r4, r5, r6, lr}
    1c9a:	2600      	movs	r6, #0
    1c9c:	4d0c      	ldr	r5, [pc, #48]	; (1cd0 <__libc_init_array+0x38>)
    1c9e:	4c0d      	ldr	r4, [pc, #52]	; (1cd4 <__libc_init_array+0x3c>)
    1ca0:	1b64      	subs	r4, r4, r5
    1ca2:	10a4      	asrs	r4, r4, #2
    1ca4:	42a6      	cmp	r6, r4
    1ca6:	d109      	bne.n	1cbc <__libc_init_array+0x24>
    1ca8:	2600      	movs	r6, #0
    1caa:	f000 fc85 	bl	25b8 <_init>
    1cae:	4d0a      	ldr	r5, [pc, #40]	; (1cd8 <__libc_init_array+0x40>)
    1cb0:	4c0a      	ldr	r4, [pc, #40]	; (1cdc <__libc_init_array+0x44>)
    1cb2:	1b64      	subs	r4, r4, r5
    1cb4:	10a4      	asrs	r4, r4, #2
    1cb6:	42a6      	cmp	r6, r4
    1cb8:	d105      	bne.n	1cc6 <__libc_init_array+0x2e>
    1cba:	bd70      	pop	{r4, r5, r6, pc}
    1cbc:	00b3      	lsls	r3, r6, #2
    1cbe:	58eb      	ldr	r3, [r5, r3]
    1cc0:	4798      	blx	r3
    1cc2:	3601      	adds	r6, #1
    1cc4:	e7ee      	b.n	1ca4 <__libc_init_array+0xc>
    1cc6:	00b3      	lsls	r3, r6, #2
    1cc8:	58eb      	ldr	r3, [r5, r3]
    1cca:	4798      	blx	r3
    1ccc:	3601      	adds	r6, #1
    1cce:	e7f2      	b.n	1cb6 <__libc_init_array+0x1e>
    1cd0:	000025c4 	.word	0x000025c4
    1cd4:	000025c4 	.word	0x000025c4
    1cd8:	000025c4 	.word	0x000025c4
    1cdc:	000025c8 	.word	0x000025c8

00001ce0 <malloc>:
    1ce0:	b510      	push	{r4, lr}
    1ce2:	4b03      	ldr	r3, [pc, #12]	; (1cf0 <malloc+0x10>)
    1ce4:	0001      	movs	r1, r0
    1ce6:	6818      	ldr	r0, [r3, #0]
    1ce8:	f000 f856 	bl	1d98 <_malloc_r>
    1cec:	bd10      	pop	{r4, pc}
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	2000000c 	.word	0x2000000c

00001cf4 <memset>:
    1cf4:	0003      	movs	r3, r0
    1cf6:	1882      	adds	r2, r0, r2
    1cf8:	4293      	cmp	r3, r2
    1cfa:	d100      	bne.n	1cfe <memset+0xa>
    1cfc:	4770      	bx	lr
    1cfe:	7019      	strb	r1, [r3, #0]
    1d00:	3301      	adds	r3, #1
    1d02:	e7f9      	b.n	1cf8 <memset+0x4>

00001d04 <_free_r>:
    1d04:	b570      	push	{r4, r5, r6, lr}
    1d06:	0005      	movs	r5, r0
    1d08:	2900      	cmp	r1, #0
    1d0a:	d010      	beq.n	1d2e <_free_r+0x2a>
    1d0c:	1f0c      	subs	r4, r1, #4
    1d0e:	6823      	ldr	r3, [r4, #0]
    1d10:	2b00      	cmp	r3, #0
    1d12:	da00      	bge.n	1d16 <_free_r+0x12>
    1d14:	18e4      	adds	r4, r4, r3
    1d16:	0028      	movs	r0, r5
    1d18:	f000 fb22 	bl	2360 <__malloc_lock>
    1d1c:	4a1d      	ldr	r2, [pc, #116]	; (1d94 <_free_r+0x90>)
    1d1e:	6813      	ldr	r3, [r2, #0]
    1d20:	2b00      	cmp	r3, #0
    1d22:	d105      	bne.n	1d30 <_free_r+0x2c>
    1d24:	6063      	str	r3, [r4, #4]
    1d26:	6014      	str	r4, [r2, #0]
    1d28:	0028      	movs	r0, r5
    1d2a:	f000 fb1a 	bl	2362 <__malloc_unlock>
    1d2e:	bd70      	pop	{r4, r5, r6, pc}
    1d30:	42a3      	cmp	r3, r4
    1d32:	d909      	bls.n	1d48 <_free_r+0x44>
    1d34:	6821      	ldr	r1, [r4, #0]
    1d36:	1860      	adds	r0, r4, r1
    1d38:	4283      	cmp	r3, r0
    1d3a:	d1f3      	bne.n	1d24 <_free_r+0x20>
    1d3c:	6818      	ldr	r0, [r3, #0]
    1d3e:	685b      	ldr	r3, [r3, #4]
    1d40:	1841      	adds	r1, r0, r1
    1d42:	6021      	str	r1, [r4, #0]
    1d44:	e7ee      	b.n	1d24 <_free_r+0x20>
    1d46:	0013      	movs	r3, r2
    1d48:	685a      	ldr	r2, [r3, #4]
    1d4a:	2a00      	cmp	r2, #0
    1d4c:	d001      	beq.n	1d52 <_free_r+0x4e>
    1d4e:	42a2      	cmp	r2, r4
    1d50:	d9f9      	bls.n	1d46 <_free_r+0x42>
    1d52:	6819      	ldr	r1, [r3, #0]
    1d54:	1858      	adds	r0, r3, r1
    1d56:	42a0      	cmp	r0, r4
    1d58:	d10b      	bne.n	1d72 <_free_r+0x6e>
    1d5a:	6820      	ldr	r0, [r4, #0]
    1d5c:	1809      	adds	r1, r1, r0
    1d5e:	1858      	adds	r0, r3, r1
    1d60:	6019      	str	r1, [r3, #0]
    1d62:	4282      	cmp	r2, r0
    1d64:	d1e0      	bne.n	1d28 <_free_r+0x24>
    1d66:	6810      	ldr	r0, [r2, #0]
    1d68:	6852      	ldr	r2, [r2, #4]
    1d6a:	1841      	adds	r1, r0, r1
    1d6c:	6019      	str	r1, [r3, #0]
    1d6e:	605a      	str	r2, [r3, #4]
    1d70:	e7da      	b.n	1d28 <_free_r+0x24>
    1d72:	42a0      	cmp	r0, r4
    1d74:	d902      	bls.n	1d7c <_free_r+0x78>
    1d76:	230c      	movs	r3, #12
    1d78:	602b      	str	r3, [r5, #0]
    1d7a:	e7d5      	b.n	1d28 <_free_r+0x24>
    1d7c:	6821      	ldr	r1, [r4, #0]
    1d7e:	1860      	adds	r0, r4, r1
    1d80:	4282      	cmp	r2, r0
    1d82:	d103      	bne.n	1d8c <_free_r+0x88>
    1d84:	6810      	ldr	r0, [r2, #0]
    1d86:	6852      	ldr	r2, [r2, #4]
    1d88:	1841      	adds	r1, r0, r1
    1d8a:	6021      	str	r1, [r4, #0]
    1d8c:	6062      	str	r2, [r4, #4]
    1d8e:	605c      	str	r4, [r3, #4]
    1d90:	e7ca      	b.n	1d28 <_free_r+0x24>
    1d92:	46c0      	nop			; (mov r8, r8)
    1d94:	200000d8 	.word	0x200000d8

00001d98 <_malloc_r>:
    1d98:	2303      	movs	r3, #3
    1d9a:	b570      	push	{r4, r5, r6, lr}
    1d9c:	1ccd      	adds	r5, r1, #3
    1d9e:	439d      	bics	r5, r3
    1da0:	3508      	adds	r5, #8
    1da2:	0006      	movs	r6, r0
    1da4:	2d0c      	cmp	r5, #12
    1da6:	d21e      	bcs.n	1de6 <_malloc_r+0x4e>
    1da8:	250c      	movs	r5, #12
    1daa:	42a9      	cmp	r1, r5
    1dac:	d81d      	bhi.n	1dea <_malloc_r+0x52>
    1dae:	0030      	movs	r0, r6
    1db0:	f000 fad6 	bl	2360 <__malloc_lock>
    1db4:	4a25      	ldr	r2, [pc, #148]	; (1e4c <_malloc_r+0xb4>)
    1db6:	6814      	ldr	r4, [r2, #0]
    1db8:	0021      	movs	r1, r4
    1dba:	2900      	cmp	r1, #0
    1dbc:	d119      	bne.n	1df2 <_malloc_r+0x5a>
    1dbe:	4c24      	ldr	r4, [pc, #144]	; (1e50 <_malloc_r+0xb8>)
    1dc0:	6823      	ldr	r3, [r4, #0]
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	d103      	bne.n	1dce <_malloc_r+0x36>
    1dc6:	0030      	movs	r0, r6
    1dc8:	f000 f844 	bl	1e54 <_sbrk_r>
    1dcc:	6020      	str	r0, [r4, #0]
    1dce:	0029      	movs	r1, r5
    1dd0:	0030      	movs	r0, r6
    1dd2:	f000 f83f 	bl	1e54 <_sbrk_r>
    1dd6:	1c43      	adds	r3, r0, #1
    1dd8:	d12c      	bne.n	1e34 <_malloc_r+0x9c>
    1dda:	230c      	movs	r3, #12
    1ddc:	0030      	movs	r0, r6
    1dde:	6033      	str	r3, [r6, #0]
    1de0:	f000 fabf 	bl	2362 <__malloc_unlock>
    1de4:	e003      	b.n	1dee <_malloc_r+0x56>
    1de6:	2d00      	cmp	r5, #0
    1de8:	dadf      	bge.n	1daa <_malloc_r+0x12>
    1dea:	230c      	movs	r3, #12
    1dec:	6033      	str	r3, [r6, #0]
    1dee:	2000      	movs	r0, #0
    1df0:	bd70      	pop	{r4, r5, r6, pc}
    1df2:	680b      	ldr	r3, [r1, #0]
    1df4:	1b5b      	subs	r3, r3, r5
    1df6:	d41a      	bmi.n	1e2e <_malloc_r+0x96>
    1df8:	2b0b      	cmp	r3, #11
    1dfa:	d903      	bls.n	1e04 <_malloc_r+0x6c>
    1dfc:	600b      	str	r3, [r1, #0]
    1dfe:	18cc      	adds	r4, r1, r3
    1e00:	6025      	str	r5, [r4, #0]
    1e02:	e003      	b.n	1e0c <_malloc_r+0x74>
    1e04:	428c      	cmp	r4, r1
    1e06:	d10e      	bne.n	1e26 <_malloc_r+0x8e>
    1e08:	6863      	ldr	r3, [r4, #4]
    1e0a:	6013      	str	r3, [r2, #0]
    1e0c:	0030      	movs	r0, r6
    1e0e:	f000 faa8 	bl	2362 <__malloc_unlock>
    1e12:	0020      	movs	r0, r4
    1e14:	2207      	movs	r2, #7
    1e16:	300b      	adds	r0, #11
    1e18:	1d23      	adds	r3, r4, #4
    1e1a:	4390      	bics	r0, r2
    1e1c:	1ac3      	subs	r3, r0, r3
    1e1e:	d0e7      	beq.n	1df0 <_malloc_r+0x58>
    1e20:	425a      	negs	r2, r3
    1e22:	50e2      	str	r2, [r4, r3]
    1e24:	e7e4      	b.n	1df0 <_malloc_r+0x58>
    1e26:	684b      	ldr	r3, [r1, #4]
    1e28:	6063      	str	r3, [r4, #4]
    1e2a:	000c      	movs	r4, r1
    1e2c:	e7ee      	b.n	1e0c <_malloc_r+0x74>
    1e2e:	000c      	movs	r4, r1
    1e30:	6849      	ldr	r1, [r1, #4]
    1e32:	e7c2      	b.n	1dba <_malloc_r+0x22>
    1e34:	2303      	movs	r3, #3
    1e36:	1cc4      	adds	r4, r0, #3
    1e38:	439c      	bics	r4, r3
    1e3a:	42a0      	cmp	r0, r4
    1e3c:	d0e0      	beq.n	1e00 <_malloc_r+0x68>
    1e3e:	1a21      	subs	r1, r4, r0
    1e40:	0030      	movs	r0, r6
    1e42:	f000 f807 	bl	1e54 <_sbrk_r>
    1e46:	1c43      	adds	r3, r0, #1
    1e48:	d1da      	bne.n	1e00 <_malloc_r+0x68>
    1e4a:	e7c6      	b.n	1dda <_malloc_r+0x42>
    1e4c:	200000d8 	.word	0x200000d8
    1e50:	200000dc 	.word	0x200000dc

00001e54 <_sbrk_r>:
    1e54:	2300      	movs	r3, #0
    1e56:	b570      	push	{r4, r5, r6, lr}
    1e58:	4c06      	ldr	r4, [pc, #24]	; (1e74 <_sbrk_r+0x20>)
    1e5a:	0005      	movs	r5, r0
    1e5c:	0008      	movs	r0, r1
    1e5e:	6023      	str	r3, [r4, #0]
    1e60:	f7ff fdee 	bl	1a40 <_sbrk>
    1e64:	1c43      	adds	r3, r0, #1
    1e66:	d103      	bne.n	1e70 <_sbrk_r+0x1c>
    1e68:	6823      	ldr	r3, [r4, #0]
    1e6a:	2b00      	cmp	r3, #0
    1e6c:	d000      	beq.n	1e70 <_sbrk_r+0x1c>
    1e6e:	602b      	str	r3, [r5, #0]
    1e70:	bd70      	pop	{r4, r5, r6, pc}
    1e72:	46c0      	nop			; (mov r8, r8)
    1e74:	20000948 	.word	0x20000948

00001e78 <setbuf>:
    1e78:	424a      	negs	r2, r1
    1e7a:	414a      	adcs	r2, r1
    1e7c:	2380      	movs	r3, #128	; 0x80
    1e7e:	b510      	push	{r4, lr}
    1e80:	0052      	lsls	r2, r2, #1
    1e82:	00db      	lsls	r3, r3, #3
    1e84:	f000 f802 	bl	1e8c <setvbuf>
    1e88:	bd10      	pop	{r4, pc}
	...

00001e8c <setvbuf>:
    1e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e8e:	001d      	movs	r5, r3
    1e90:	4b4f      	ldr	r3, [pc, #316]	; (1fd0 <setvbuf+0x144>)
    1e92:	b085      	sub	sp, #20
    1e94:	681e      	ldr	r6, [r3, #0]
    1e96:	0004      	movs	r4, r0
    1e98:	000f      	movs	r7, r1
    1e9a:	9200      	str	r2, [sp, #0]
    1e9c:	2e00      	cmp	r6, #0
    1e9e:	d005      	beq.n	1eac <setvbuf+0x20>
    1ea0:	69b3      	ldr	r3, [r6, #24]
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	d102      	bne.n	1eac <setvbuf+0x20>
    1ea6:	0030      	movs	r0, r6
    1ea8:	f000 f99c 	bl	21e4 <__sinit>
    1eac:	4b49      	ldr	r3, [pc, #292]	; (1fd4 <setvbuf+0x148>)
    1eae:	429c      	cmp	r4, r3
    1eb0:	d150      	bne.n	1f54 <setvbuf+0xc8>
    1eb2:	6874      	ldr	r4, [r6, #4]
    1eb4:	9b00      	ldr	r3, [sp, #0]
    1eb6:	2b02      	cmp	r3, #2
    1eb8:	d005      	beq.n	1ec6 <setvbuf+0x3a>
    1eba:	2b01      	cmp	r3, #1
    1ebc:	d900      	bls.n	1ec0 <setvbuf+0x34>
    1ebe:	e084      	b.n	1fca <setvbuf+0x13e>
    1ec0:	2d00      	cmp	r5, #0
    1ec2:	da00      	bge.n	1ec6 <setvbuf+0x3a>
    1ec4:	e081      	b.n	1fca <setvbuf+0x13e>
    1ec6:	0021      	movs	r1, r4
    1ec8:	0030      	movs	r0, r6
    1eca:	f000 f91d 	bl	2108 <_fflush_r>
    1ece:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1ed0:	2900      	cmp	r1, #0
    1ed2:	d008      	beq.n	1ee6 <setvbuf+0x5a>
    1ed4:	0023      	movs	r3, r4
    1ed6:	3344      	adds	r3, #68	; 0x44
    1ed8:	4299      	cmp	r1, r3
    1eda:	d002      	beq.n	1ee2 <setvbuf+0x56>
    1edc:	0030      	movs	r0, r6
    1ede:	f7ff ff11 	bl	1d04 <_free_r>
    1ee2:	2300      	movs	r3, #0
    1ee4:	6363      	str	r3, [r4, #52]	; 0x34
    1ee6:	2300      	movs	r3, #0
    1ee8:	61a3      	str	r3, [r4, #24]
    1eea:	6063      	str	r3, [r4, #4]
    1eec:	89a3      	ldrh	r3, [r4, #12]
    1eee:	061b      	lsls	r3, r3, #24
    1ef0:	d503      	bpl.n	1efa <setvbuf+0x6e>
    1ef2:	6921      	ldr	r1, [r4, #16]
    1ef4:	0030      	movs	r0, r6
    1ef6:	f7ff ff05 	bl	1d04 <_free_r>
    1efa:	89a3      	ldrh	r3, [r4, #12]
    1efc:	4a36      	ldr	r2, [pc, #216]	; (1fd8 <setvbuf+0x14c>)
    1efe:	4013      	ands	r3, r2
    1f00:	81a3      	strh	r3, [r4, #12]
    1f02:	9b00      	ldr	r3, [sp, #0]
    1f04:	2b02      	cmp	r3, #2
    1f06:	d05a      	beq.n	1fbe <setvbuf+0x132>
    1f08:	ab03      	add	r3, sp, #12
    1f0a:	aa02      	add	r2, sp, #8
    1f0c:	0021      	movs	r1, r4
    1f0e:	0030      	movs	r0, r6
    1f10:	f000 f9fe 	bl	2310 <__swhatbuf_r>
    1f14:	89a3      	ldrh	r3, [r4, #12]
    1f16:	4318      	orrs	r0, r3
    1f18:	81a0      	strh	r0, [r4, #12]
    1f1a:	2d00      	cmp	r5, #0
    1f1c:	d124      	bne.n	1f68 <setvbuf+0xdc>
    1f1e:	9d02      	ldr	r5, [sp, #8]
    1f20:	0028      	movs	r0, r5
    1f22:	f7ff fedd 	bl	1ce0 <malloc>
    1f26:	9501      	str	r5, [sp, #4]
    1f28:	1e07      	subs	r7, r0, #0
    1f2a:	d142      	bne.n	1fb2 <setvbuf+0x126>
    1f2c:	9b02      	ldr	r3, [sp, #8]
    1f2e:	9301      	str	r3, [sp, #4]
    1f30:	42ab      	cmp	r3, r5
    1f32:	d139      	bne.n	1fa8 <setvbuf+0x11c>
    1f34:	2001      	movs	r0, #1
    1f36:	4240      	negs	r0, r0
    1f38:	2302      	movs	r3, #2
    1f3a:	89a2      	ldrh	r2, [r4, #12]
    1f3c:	4313      	orrs	r3, r2
    1f3e:	81a3      	strh	r3, [r4, #12]
    1f40:	2300      	movs	r3, #0
    1f42:	60a3      	str	r3, [r4, #8]
    1f44:	0023      	movs	r3, r4
    1f46:	3347      	adds	r3, #71	; 0x47
    1f48:	6023      	str	r3, [r4, #0]
    1f4a:	6123      	str	r3, [r4, #16]
    1f4c:	2301      	movs	r3, #1
    1f4e:	6163      	str	r3, [r4, #20]
    1f50:	b005      	add	sp, #20
    1f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f54:	4b21      	ldr	r3, [pc, #132]	; (1fdc <setvbuf+0x150>)
    1f56:	429c      	cmp	r4, r3
    1f58:	d101      	bne.n	1f5e <setvbuf+0xd2>
    1f5a:	68b4      	ldr	r4, [r6, #8]
    1f5c:	e7aa      	b.n	1eb4 <setvbuf+0x28>
    1f5e:	4b20      	ldr	r3, [pc, #128]	; (1fe0 <setvbuf+0x154>)
    1f60:	429c      	cmp	r4, r3
    1f62:	d1a7      	bne.n	1eb4 <setvbuf+0x28>
    1f64:	68f4      	ldr	r4, [r6, #12]
    1f66:	e7a5      	b.n	1eb4 <setvbuf+0x28>
    1f68:	2f00      	cmp	r7, #0
    1f6a:	d0d9      	beq.n	1f20 <setvbuf+0x94>
    1f6c:	69b3      	ldr	r3, [r6, #24]
    1f6e:	2b00      	cmp	r3, #0
    1f70:	d102      	bne.n	1f78 <setvbuf+0xec>
    1f72:	0030      	movs	r0, r6
    1f74:	f000 f936 	bl	21e4 <__sinit>
    1f78:	9b00      	ldr	r3, [sp, #0]
    1f7a:	2b01      	cmp	r3, #1
    1f7c:	d103      	bne.n	1f86 <setvbuf+0xfa>
    1f7e:	89a3      	ldrh	r3, [r4, #12]
    1f80:	9a00      	ldr	r2, [sp, #0]
    1f82:	431a      	orrs	r2, r3
    1f84:	81a2      	strh	r2, [r4, #12]
    1f86:	2008      	movs	r0, #8
    1f88:	89a3      	ldrh	r3, [r4, #12]
    1f8a:	6027      	str	r7, [r4, #0]
    1f8c:	6127      	str	r7, [r4, #16]
    1f8e:	6165      	str	r5, [r4, #20]
    1f90:	4018      	ands	r0, r3
    1f92:	d018      	beq.n	1fc6 <setvbuf+0x13a>
    1f94:	2001      	movs	r0, #1
    1f96:	4018      	ands	r0, r3
    1f98:	2300      	movs	r3, #0
    1f9a:	4298      	cmp	r0, r3
    1f9c:	d011      	beq.n	1fc2 <setvbuf+0x136>
    1f9e:	426d      	negs	r5, r5
    1fa0:	60a3      	str	r3, [r4, #8]
    1fa2:	61a5      	str	r5, [r4, #24]
    1fa4:	0018      	movs	r0, r3
    1fa6:	e7d3      	b.n	1f50 <setvbuf+0xc4>
    1fa8:	9801      	ldr	r0, [sp, #4]
    1faa:	f7ff fe99 	bl	1ce0 <malloc>
    1fae:	1e07      	subs	r7, r0, #0
    1fb0:	d0c0      	beq.n	1f34 <setvbuf+0xa8>
    1fb2:	2380      	movs	r3, #128	; 0x80
    1fb4:	89a2      	ldrh	r2, [r4, #12]
    1fb6:	9d01      	ldr	r5, [sp, #4]
    1fb8:	4313      	orrs	r3, r2
    1fba:	81a3      	strh	r3, [r4, #12]
    1fbc:	e7d6      	b.n	1f6c <setvbuf+0xe0>
    1fbe:	2000      	movs	r0, #0
    1fc0:	e7ba      	b.n	1f38 <setvbuf+0xac>
    1fc2:	60a5      	str	r5, [r4, #8]
    1fc4:	e7c4      	b.n	1f50 <setvbuf+0xc4>
    1fc6:	60a0      	str	r0, [r4, #8]
    1fc8:	e7c2      	b.n	1f50 <setvbuf+0xc4>
    1fca:	2001      	movs	r0, #1
    1fcc:	4240      	negs	r0, r0
    1fce:	e7bf      	b.n	1f50 <setvbuf+0xc4>
    1fd0:	2000000c 	.word	0x2000000c
    1fd4:	00002578 	.word	0x00002578
    1fd8:	fffff35c 	.word	0xfffff35c
    1fdc:	00002598 	.word	0x00002598
    1fe0:	00002558 	.word	0x00002558

00001fe4 <strlen>:
    1fe4:	2300      	movs	r3, #0
    1fe6:	5cc2      	ldrb	r2, [r0, r3]
    1fe8:	3301      	adds	r3, #1
    1fea:	2a00      	cmp	r2, #0
    1fec:	d1fb      	bne.n	1fe6 <strlen+0x2>
    1fee:	1e58      	subs	r0, r3, #1
    1ff0:	4770      	bx	lr
	...

00001ff4 <__sflush_r>:
    1ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1ff6:	898a      	ldrh	r2, [r1, #12]
    1ff8:	0005      	movs	r5, r0
    1ffa:	000c      	movs	r4, r1
    1ffc:	0713      	lsls	r3, r2, #28
    1ffe:	d460      	bmi.n	20c2 <STACK_SIZE+0xc2>
    2000:	684b      	ldr	r3, [r1, #4]
    2002:	2b00      	cmp	r3, #0
    2004:	dc04      	bgt.n	2010 <STACK_SIZE+0x10>
    2006:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2008:	2b00      	cmp	r3, #0
    200a:	dc01      	bgt.n	2010 <STACK_SIZE+0x10>
    200c:	2000      	movs	r0, #0
    200e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2010:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2012:	2f00      	cmp	r7, #0
    2014:	d0fa      	beq.n	200c <STACK_SIZE+0xc>
    2016:	2300      	movs	r3, #0
    2018:	682e      	ldr	r6, [r5, #0]
    201a:	602b      	str	r3, [r5, #0]
    201c:	2380      	movs	r3, #128	; 0x80
    201e:	015b      	lsls	r3, r3, #5
    2020:	401a      	ands	r2, r3
    2022:	d034      	beq.n	208e <STACK_SIZE+0x8e>
    2024:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2026:	89a3      	ldrh	r3, [r4, #12]
    2028:	075b      	lsls	r3, r3, #29
    202a:	d506      	bpl.n	203a <STACK_SIZE+0x3a>
    202c:	6863      	ldr	r3, [r4, #4]
    202e:	1ac0      	subs	r0, r0, r3
    2030:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2032:	2b00      	cmp	r3, #0
    2034:	d001      	beq.n	203a <STACK_SIZE+0x3a>
    2036:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2038:	1ac0      	subs	r0, r0, r3
    203a:	0002      	movs	r2, r0
    203c:	6a21      	ldr	r1, [r4, #32]
    203e:	2300      	movs	r3, #0
    2040:	0028      	movs	r0, r5
    2042:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2044:	47b8      	blx	r7
    2046:	89a1      	ldrh	r1, [r4, #12]
    2048:	1c43      	adds	r3, r0, #1
    204a:	d106      	bne.n	205a <STACK_SIZE+0x5a>
    204c:	682b      	ldr	r3, [r5, #0]
    204e:	2b1d      	cmp	r3, #29
    2050:	d831      	bhi.n	20b6 <STACK_SIZE+0xb6>
    2052:	4a2c      	ldr	r2, [pc, #176]	; (2104 <STACK_SIZE+0x104>)
    2054:	40da      	lsrs	r2, r3
    2056:	07d3      	lsls	r3, r2, #31
    2058:	d52d      	bpl.n	20b6 <STACK_SIZE+0xb6>
    205a:	2300      	movs	r3, #0
    205c:	6063      	str	r3, [r4, #4]
    205e:	6923      	ldr	r3, [r4, #16]
    2060:	6023      	str	r3, [r4, #0]
    2062:	04cb      	lsls	r3, r1, #19
    2064:	d505      	bpl.n	2072 <STACK_SIZE+0x72>
    2066:	1c43      	adds	r3, r0, #1
    2068:	d102      	bne.n	2070 <STACK_SIZE+0x70>
    206a:	682b      	ldr	r3, [r5, #0]
    206c:	2b00      	cmp	r3, #0
    206e:	d100      	bne.n	2072 <STACK_SIZE+0x72>
    2070:	6560      	str	r0, [r4, #84]	; 0x54
    2072:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2074:	602e      	str	r6, [r5, #0]
    2076:	2900      	cmp	r1, #0
    2078:	d0c8      	beq.n	200c <STACK_SIZE+0xc>
    207a:	0023      	movs	r3, r4
    207c:	3344      	adds	r3, #68	; 0x44
    207e:	4299      	cmp	r1, r3
    2080:	d002      	beq.n	2088 <STACK_SIZE+0x88>
    2082:	0028      	movs	r0, r5
    2084:	f7ff fe3e 	bl	1d04 <_free_r>
    2088:	2000      	movs	r0, #0
    208a:	6360      	str	r0, [r4, #52]	; 0x34
    208c:	e7bf      	b.n	200e <STACK_SIZE+0xe>
    208e:	2301      	movs	r3, #1
    2090:	6a21      	ldr	r1, [r4, #32]
    2092:	0028      	movs	r0, r5
    2094:	47b8      	blx	r7
    2096:	1c43      	adds	r3, r0, #1
    2098:	d1c5      	bne.n	2026 <STACK_SIZE+0x26>
    209a:	682b      	ldr	r3, [r5, #0]
    209c:	2b00      	cmp	r3, #0
    209e:	d0c2      	beq.n	2026 <STACK_SIZE+0x26>
    20a0:	2b1d      	cmp	r3, #29
    20a2:	d001      	beq.n	20a8 <STACK_SIZE+0xa8>
    20a4:	2b16      	cmp	r3, #22
    20a6:	d101      	bne.n	20ac <STACK_SIZE+0xac>
    20a8:	602e      	str	r6, [r5, #0]
    20aa:	e7af      	b.n	200c <STACK_SIZE+0xc>
    20ac:	2340      	movs	r3, #64	; 0x40
    20ae:	89a2      	ldrh	r2, [r4, #12]
    20b0:	4313      	orrs	r3, r2
    20b2:	81a3      	strh	r3, [r4, #12]
    20b4:	e7ab      	b.n	200e <STACK_SIZE+0xe>
    20b6:	2340      	movs	r3, #64	; 0x40
    20b8:	430b      	orrs	r3, r1
    20ba:	2001      	movs	r0, #1
    20bc:	81a3      	strh	r3, [r4, #12]
    20be:	4240      	negs	r0, r0
    20c0:	e7a5      	b.n	200e <STACK_SIZE+0xe>
    20c2:	690f      	ldr	r7, [r1, #16]
    20c4:	2f00      	cmp	r7, #0
    20c6:	d0a1      	beq.n	200c <STACK_SIZE+0xc>
    20c8:	680b      	ldr	r3, [r1, #0]
    20ca:	600f      	str	r7, [r1, #0]
    20cc:	1bdb      	subs	r3, r3, r7
    20ce:	9301      	str	r3, [sp, #4]
    20d0:	2300      	movs	r3, #0
    20d2:	0792      	lsls	r2, r2, #30
    20d4:	d100      	bne.n	20d8 <STACK_SIZE+0xd8>
    20d6:	694b      	ldr	r3, [r1, #20]
    20d8:	60a3      	str	r3, [r4, #8]
    20da:	9b01      	ldr	r3, [sp, #4]
    20dc:	2b00      	cmp	r3, #0
    20de:	dc00      	bgt.n	20e2 <STACK_SIZE+0xe2>
    20e0:	e794      	b.n	200c <STACK_SIZE+0xc>
    20e2:	9b01      	ldr	r3, [sp, #4]
    20e4:	003a      	movs	r2, r7
    20e6:	6a21      	ldr	r1, [r4, #32]
    20e8:	0028      	movs	r0, r5
    20ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    20ec:	47b0      	blx	r6
    20ee:	2800      	cmp	r0, #0
    20f0:	dc03      	bgt.n	20fa <STACK_SIZE+0xfa>
    20f2:	2340      	movs	r3, #64	; 0x40
    20f4:	89a2      	ldrh	r2, [r4, #12]
    20f6:	4313      	orrs	r3, r2
    20f8:	e7df      	b.n	20ba <STACK_SIZE+0xba>
    20fa:	9b01      	ldr	r3, [sp, #4]
    20fc:	183f      	adds	r7, r7, r0
    20fe:	1a1b      	subs	r3, r3, r0
    2100:	9301      	str	r3, [sp, #4]
    2102:	e7ea      	b.n	20da <STACK_SIZE+0xda>
    2104:	20400001 	.word	0x20400001

00002108 <_fflush_r>:
    2108:	690b      	ldr	r3, [r1, #16]
    210a:	b570      	push	{r4, r5, r6, lr}
    210c:	0005      	movs	r5, r0
    210e:	000c      	movs	r4, r1
    2110:	2b00      	cmp	r3, #0
    2112:	d101      	bne.n	2118 <_fflush_r+0x10>
    2114:	2000      	movs	r0, #0
    2116:	bd70      	pop	{r4, r5, r6, pc}
    2118:	2800      	cmp	r0, #0
    211a:	d004      	beq.n	2126 <_fflush_r+0x1e>
    211c:	6983      	ldr	r3, [r0, #24]
    211e:	2b00      	cmp	r3, #0
    2120:	d101      	bne.n	2126 <_fflush_r+0x1e>
    2122:	f000 f85f 	bl	21e4 <__sinit>
    2126:	4b0b      	ldr	r3, [pc, #44]	; (2154 <_fflush_r+0x4c>)
    2128:	429c      	cmp	r4, r3
    212a:	d109      	bne.n	2140 <_fflush_r+0x38>
    212c:	686c      	ldr	r4, [r5, #4]
    212e:	220c      	movs	r2, #12
    2130:	5ea3      	ldrsh	r3, [r4, r2]
    2132:	2b00      	cmp	r3, #0
    2134:	d0ee      	beq.n	2114 <_fflush_r+0xc>
    2136:	0021      	movs	r1, r4
    2138:	0028      	movs	r0, r5
    213a:	f7ff ff5b 	bl	1ff4 <__sflush_r>
    213e:	e7ea      	b.n	2116 <_fflush_r+0xe>
    2140:	4b05      	ldr	r3, [pc, #20]	; (2158 <_fflush_r+0x50>)
    2142:	429c      	cmp	r4, r3
    2144:	d101      	bne.n	214a <_fflush_r+0x42>
    2146:	68ac      	ldr	r4, [r5, #8]
    2148:	e7f1      	b.n	212e <_fflush_r+0x26>
    214a:	4b04      	ldr	r3, [pc, #16]	; (215c <_fflush_r+0x54>)
    214c:	429c      	cmp	r4, r3
    214e:	d1ee      	bne.n	212e <_fflush_r+0x26>
    2150:	68ec      	ldr	r4, [r5, #12]
    2152:	e7ec      	b.n	212e <_fflush_r+0x26>
    2154:	00002578 	.word	0x00002578
    2158:	00002598 	.word	0x00002598
    215c:	00002558 	.word	0x00002558

00002160 <_cleanup_r>:
    2160:	b510      	push	{r4, lr}
    2162:	4902      	ldr	r1, [pc, #8]	; (216c <_cleanup_r+0xc>)
    2164:	f000 f8b2 	bl	22cc <_fwalk_reent>
    2168:	bd10      	pop	{r4, pc}
    216a:	46c0      	nop			; (mov r8, r8)
    216c:	00002109 	.word	0x00002109

00002170 <std.isra.0>:
    2170:	2300      	movs	r3, #0
    2172:	b510      	push	{r4, lr}
    2174:	0004      	movs	r4, r0
    2176:	6003      	str	r3, [r0, #0]
    2178:	6043      	str	r3, [r0, #4]
    217a:	6083      	str	r3, [r0, #8]
    217c:	8181      	strh	r1, [r0, #12]
    217e:	6643      	str	r3, [r0, #100]	; 0x64
    2180:	81c2      	strh	r2, [r0, #14]
    2182:	6103      	str	r3, [r0, #16]
    2184:	6143      	str	r3, [r0, #20]
    2186:	6183      	str	r3, [r0, #24]
    2188:	0019      	movs	r1, r3
    218a:	2208      	movs	r2, #8
    218c:	305c      	adds	r0, #92	; 0x5c
    218e:	f7ff fdb1 	bl	1cf4 <memset>
    2192:	4b05      	ldr	r3, [pc, #20]	; (21a8 <std.isra.0+0x38>)
    2194:	6224      	str	r4, [r4, #32]
    2196:	6263      	str	r3, [r4, #36]	; 0x24
    2198:	4b04      	ldr	r3, [pc, #16]	; (21ac <std.isra.0+0x3c>)
    219a:	62a3      	str	r3, [r4, #40]	; 0x28
    219c:	4b04      	ldr	r3, [pc, #16]	; (21b0 <std.isra.0+0x40>)
    219e:	62e3      	str	r3, [r4, #44]	; 0x2c
    21a0:	4b04      	ldr	r3, [pc, #16]	; (21b4 <std.isra.0+0x44>)
    21a2:	6323      	str	r3, [r4, #48]	; 0x30
    21a4:	bd10      	pop	{r4, pc}
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	00002365 	.word	0x00002365
    21ac:	0000238d 	.word	0x0000238d
    21b0:	000023c5 	.word	0x000023c5
    21b4:	000023f1 	.word	0x000023f1

000021b8 <__sfmoreglue>:
    21b8:	b570      	push	{r4, r5, r6, lr}
    21ba:	2568      	movs	r5, #104	; 0x68
    21bc:	1e4a      	subs	r2, r1, #1
    21be:	4355      	muls	r5, r2
    21c0:	000e      	movs	r6, r1
    21c2:	0029      	movs	r1, r5
    21c4:	3174      	adds	r1, #116	; 0x74
    21c6:	f7ff fde7 	bl	1d98 <_malloc_r>
    21ca:	1e04      	subs	r4, r0, #0
    21cc:	d008      	beq.n	21e0 <__sfmoreglue+0x28>
    21ce:	2100      	movs	r1, #0
    21d0:	002a      	movs	r2, r5
    21d2:	6001      	str	r1, [r0, #0]
    21d4:	6046      	str	r6, [r0, #4]
    21d6:	300c      	adds	r0, #12
    21d8:	60a0      	str	r0, [r4, #8]
    21da:	3268      	adds	r2, #104	; 0x68
    21dc:	f7ff fd8a 	bl	1cf4 <memset>
    21e0:	0020      	movs	r0, r4
    21e2:	bd70      	pop	{r4, r5, r6, pc}

000021e4 <__sinit>:
    21e4:	6983      	ldr	r3, [r0, #24]
    21e6:	b513      	push	{r0, r1, r4, lr}
    21e8:	0004      	movs	r4, r0
    21ea:	2b00      	cmp	r3, #0
    21ec:	d128      	bne.n	2240 <__sinit+0x5c>
    21ee:	6483      	str	r3, [r0, #72]	; 0x48
    21f0:	64c3      	str	r3, [r0, #76]	; 0x4c
    21f2:	6503      	str	r3, [r0, #80]	; 0x50
    21f4:	4b13      	ldr	r3, [pc, #76]	; (2244 <__sinit+0x60>)
    21f6:	4a14      	ldr	r2, [pc, #80]	; (2248 <__sinit+0x64>)
    21f8:	681b      	ldr	r3, [r3, #0]
    21fa:	6282      	str	r2, [r0, #40]	; 0x28
    21fc:	9301      	str	r3, [sp, #4]
    21fe:	4298      	cmp	r0, r3
    2200:	d101      	bne.n	2206 <__sinit+0x22>
    2202:	2301      	movs	r3, #1
    2204:	6183      	str	r3, [r0, #24]
    2206:	0020      	movs	r0, r4
    2208:	f000 f820 	bl	224c <__sfp>
    220c:	6060      	str	r0, [r4, #4]
    220e:	0020      	movs	r0, r4
    2210:	f000 f81c 	bl	224c <__sfp>
    2214:	60a0      	str	r0, [r4, #8]
    2216:	0020      	movs	r0, r4
    2218:	f000 f818 	bl	224c <__sfp>
    221c:	2200      	movs	r2, #0
    221e:	60e0      	str	r0, [r4, #12]
    2220:	2104      	movs	r1, #4
    2222:	6860      	ldr	r0, [r4, #4]
    2224:	f7ff ffa4 	bl	2170 <std.isra.0>
    2228:	2201      	movs	r2, #1
    222a:	2109      	movs	r1, #9
    222c:	68a0      	ldr	r0, [r4, #8]
    222e:	f7ff ff9f 	bl	2170 <std.isra.0>
    2232:	2202      	movs	r2, #2
    2234:	2112      	movs	r1, #18
    2236:	68e0      	ldr	r0, [r4, #12]
    2238:	f7ff ff9a 	bl	2170 <std.isra.0>
    223c:	2301      	movs	r3, #1
    223e:	61a3      	str	r3, [r4, #24]
    2240:	bd13      	pop	{r0, r1, r4, pc}
    2242:	46c0      	nop			; (mov r8, r8)
    2244:	00002554 	.word	0x00002554
    2248:	00002161 	.word	0x00002161

0000224c <__sfp>:
    224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    224e:	4b1e      	ldr	r3, [pc, #120]	; (22c8 <__sfp+0x7c>)
    2250:	0007      	movs	r7, r0
    2252:	681e      	ldr	r6, [r3, #0]
    2254:	69b3      	ldr	r3, [r6, #24]
    2256:	2b00      	cmp	r3, #0
    2258:	d102      	bne.n	2260 <__sfp+0x14>
    225a:	0030      	movs	r0, r6
    225c:	f7ff ffc2 	bl	21e4 <__sinit>
    2260:	3648      	adds	r6, #72	; 0x48
    2262:	68b4      	ldr	r4, [r6, #8]
    2264:	6873      	ldr	r3, [r6, #4]
    2266:	3b01      	subs	r3, #1
    2268:	d504      	bpl.n	2274 <__sfp+0x28>
    226a:	6833      	ldr	r3, [r6, #0]
    226c:	2b00      	cmp	r3, #0
    226e:	d007      	beq.n	2280 <__sfp+0x34>
    2270:	6836      	ldr	r6, [r6, #0]
    2272:	e7f6      	b.n	2262 <__sfp+0x16>
    2274:	220c      	movs	r2, #12
    2276:	5ea5      	ldrsh	r5, [r4, r2]
    2278:	2d00      	cmp	r5, #0
    227a:	d00d      	beq.n	2298 <__sfp+0x4c>
    227c:	3468      	adds	r4, #104	; 0x68
    227e:	e7f2      	b.n	2266 <__sfp+0x1a>
    2280:	2104      	movs	r1, #4
    2282:	0038      	movs	r0, r7
    2284:	f7ff ff98 	bl	21b8 <__sfmoreglue>
    2288:	6030      	str	r0, [r6, #0]
    228a:	2800      	cmp	r0, #0
    228c:	d1f0      	bne.n	2270 <__sfp+0x24>
    228e:	230c      	movs	r3, #12
    2290:	0004      	movs	r4, r0
    2292:	603b      	str	r3, [r7, #0]
    2294:	0020      	movs	r0, r4
    2296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2298:	2301      	movs	r3, #1
    229a:	0020      	movs	r0, r4
    229c:	425b      	negs	r3, r3
    229e:	81e3      	strh	r3, [r4, #14]
    22a0:	3302      	adds	r3, #2
    22a2:	81a3      	strh	r3, [r4, #12]
    22a4:	6665      	str	r5, [r4, #100]	; 0x64
    22a6:	6025      	str	r5, [r4, #0]
    22a8:	60a5      	str	r5, [r4, #8]
    22aa:	6065      	str	r5, [r4, #4]
    22ac:	6125      	str	r5, [r4, #16]
    22ae:	6165      	str	r5, [r4, #20]
    22b0:	61a5      	str	r5, [r4, #24]
    22b2:	2208      	movs	r2, #8
    22b4:	0029      	movs	r1, r5
    22b6:	305c      	adds	r0, #92	; 0x5c
    22b8:	f7ff fd1c 	bl	1cf4 <memset>
    22bc:	6365      	str	r5, [r4, #52]	; 0x34
    22be:	63a5      	str	r5, [r4, #56]	; 0x38
    22c0:	64a5      	str	r5, [r4, #72]	; 0x48
    22c2:	64e5      	str	r5, [r4, #76]	; 0x4c
    22c4:	e7e6      	b.n	2294 <__sfp+0x48>
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	00002554 	.word	0x00002554

000022cc <_fwalk_reent>:
    22cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    22ce:	0004      	movs	r4, r0
    22d0:	0007      	movs	r7, r0
    22d2:	2600      	movs	r6, #0
    22d4:	9101      	str	r1, [sp, #4]
    22d6:	3448      	adds	r4, #72	; 0x48
    22d8:	2c00      	cmp	r4, #0
    22da:	d101      	bne.n	22e0 <_fwalk_reent+0x14>
    22dc:	0030      	movs	r0, r6
    22de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    22e0:	6863      	ldr	r3, [r4, #4]
    22e2:	68a5      	ldr	r5, [r4, #8]
    22e4:	9300      	str	r3, [sp, #0]
    22e6:	9b00      	ldr	r3, [sp, #0]
    22e8:	3b01      	subs	r3, #1
    22ea:	9300      	str	r3, [sp, #0]
    22ec:	d501      	bpl.n	22f2 <_fwalk_reent+0x26>
    22ee:	6824      	ldr	r4, [r4, #0]
    22f0:	e7f2      	b.n	22d8 <_fwalk_reent+0xc>
    22f2:	89ab      	ldrh	r3, [r5, #12]
    22f4:	2b01      	cmp	r3, #1
    22f6:	d908      	bls.n	230a <_fwalk_reent+0x3e>
    22f8:	220e      	movs	r2, #14
    22fa:	5eab      	ldrsh	r3, [r5, r2]
    22fc:	3301      	adds	r3, #1
    22fe:	d004      	beq.n	230a <_fwalk_reent+0x3e>
    2300:	0029      	movs	r1, r5
    2302:	0038      	movs	r0, r7
    2304:	9b01      	ldr	r3, [sp, #4]
    2306:	4798      	blx	r3
    2308:	4306      	orrs	r6, r0
    230a:	3568      	adds	r5, #104	; 0x68
    230c:	e7eb      	b.n	22e6 <_fwalk_reent+0x1a>
	...

00002310 <__swhatbuf_r>:
    2310:	b570      	push	{r4, r5, r6, lr}
    2312:	000e      	movs	r6, r1
    2314:	001d      	movs	r5, r3
    2316:	230e      	movs	r3, #14
    2318:	5ec9      	ldrsh	r1, [r1, r3]
    231a:	b090      	sub	sp, #64	; 0x40
    231c:	0014      	movs	r4, r2
    231e:	2900      	cmp	r1, #0
    2320:	da07      	bge.n	2332 <__swhatbuf_r+0x22>
    2322:	2300      	movs	r3, #0
    2324:	602b      	str	r3, [r5, #0]
    2326:	89b3      	ldrh	r3, [r6, #12]
    2328:	061b      	lsls	r3, r3, #24
    232a:	d411      	bmi.n	2350 <__swhatbuf_r+0x40>
    232c:	2380      	movs	r3, #128	; 0x80
    232e:	00db      	lsls	r3, r3, #3
    2330:	e00f      	b.n	2352 <__swhatbuf_r+0x42>
    2332:	aa01      	add	r2, sp, #4
    2334:	f000 f888 	bl	2448 <_fstat_r>
    2338:	2800      	cmp	r0, #0
    233a:	dbf2      	blt.n	2322 <__swhatbuf_r+0x12>
    233c:	22f0      	movs	r2, #240	; 0xf0
    233e:	9b02      	ldr	r3, [sp, #8]
    2340:	0212      	lsls	r2, r2, #8
    2342:	4013      	ands	r3, r2
    2344:	4a05      	ldr	r2, [pc, #20]	; (235c <__swhatbuf_r+0x4c>)
    2346:	189b      	adds	r3, r3, r2
    2348:	425a      	negs	r2, r3
    234a:	4153      	adcs	r3, r2
    234c:	602b      	str	r3, [r5, #0]
    234e:	e7ed      	b.n	232c <__swhatbuf_r+0x1c>
    2350:	2340      	movs	r3, #64	; 0x40
    2352:	2000      	movs	r0, #0
    2354:	6023      	str	r3, [r4, #0]
    2356:	b010      	add	sp, #64	; 0x40
    2358:	bd70      	pop	{r4, r5, r6, pc}
    235a:	46c0      	nop			; (mov r8, r8)
    235c:	ffffe000 	.word	0xffffe000

00002360 <__malloc_lock>:
    2360:	4770      	bx	lr

00002362 <__malloc_unlock>:
    2362:	4770      	bx	lr

00002364 <__sread>:
    2364:	b570      	push	{r4, r5, r6, lr}
    2366:	000c      	movs	r4, r1
    2368:	250e      	movs	r5, #14
    236a:	5f49      	ldrsh	r1, [r1, r5]
    236c:	f000 f892 	bl	2494 <_read_r>
    2370:	2800      	cmp	r0, #0
    2372:	db03      	blt.n	237c <__sread+0x18>
    2374:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2376:	181b      	adds	r3, r3, r0
    2378:	6563      	str	r3, [r4, #84]	; 0x54
    237a:	bd70      	pop	{r4, r5, r6, pc}
    237c:	89a3      	ldrh	r3, [r4, #12]
    237e:	4a02      	ldr	r2, [pc, #8]	; (2388 <__sread+0x24>)
    2380:	4013      	ands	r3, r2
    2382:	81a3      	strh	r3, [r4, #12]
    2384:	e7f9      	b.n	237a <__sread+0x16>
    2386:	46c0      	nop			; (mov r8, r8)
    2388:	ffffefff 	.word	0xffffefff

0000238c <__swrite>:
    238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    238e:	001f      	movs	r7, r3
    2390:	898b      	ldrh	r3, [r1, #12]
    2392:	0005      	movs	r5, r0
    2394:	000c      	movs	r4, r1
    2396:	0016      	movs	r6, r2
    2398:	05db      	lsls	r3, r3, #23
    239a:	d505      	bpl.n	23a8 <__swrite+0x1c>
    239c:	230e      	movs	r3, #14
    239e:	5ec9      	ldrsh	r1, [r1, r3]
    23a0:	2200      	movs	r2, #0
    23a2:	2302      	movs	r3, #2
    23a4:	f000 f862 	bl	246c <_lseek_r>
    23a8:	89a3      	ldrh	r3, [r4, #12]
    23aa:	4a05      	ldr	r2, [pc, #20]	; (23c0 <__swrite+0x34>)
    23ac:	0028      	movs	r0, r5
    23ae:	4013      	ands	r3, r2
    23b0:	81a3      	strh	r3, [r4, #12]
    23b2:	0032      	movs	r2, r6
    23b4:	230e      	movs	r3, #14
    23b6:	5ee1      	ldrsh	r1, [r4, r3]
    23b8:	003b      	movs	r3, r7
    23ba:	f000 f81f 	bl	23fc <_write_r>
    23be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23c0:	ffffefff 	.word	0xffffefff

000023c4 <__sseek>:
    23c4:	b570      	push	{r4, r5, r6, lr}
    23c6:	000c      	movs	r4, r1
    23c8:	250e      	movs	r5, #14
    23ca:	5f49      	ldrsh	r1, [r1, r5]
    23cc:	f000 f84e 	bl	246c <_lseek_r>
    23d0:	89a3      	ldrh	r3, [r4, #12]
    23d2:	1c42      	adds	r2, r0, #1
    23d4:	d103      	bne.n	23de <__sseek+0x1a>
    23d6:	4a05      	ldr	r2, [pc, #20]	; (23ec <__sseek+0x28>)
    23d8:	4013      	ands	r3, r2
    23da:	81a3      	strh	r3, [r4, #12]
    23dc:	bd70      	pop	{r4, r5, r6, pc}
    23de:	2280      	movs	r2, #128	; 0x80
    23e0:	0152      	lsls	r2, r2, #5
    23e2:	4313      	orrs	r3, r2
    23e4:	81a3      	strh	r3, [r4, #12]
    23e6:	6560      	str	r0, [r4, #84]	; 0x54
    23e8:	e7f8      	b.n	23dc <__sseek+0x18>
    23ea:	46c0      	nop			; (mov r8, r8)
    23ec:	ffffefff 	.word	0xffffefff

000023f0 <__sclose>:
    23f0:	b510      	push	{r4, lr}
    23f2:	230e      	movs	r3, #14
    23f4:	5ec9      	ldrsh	r1, [r1, r3]
    23f6:	f000 f815 	bl	2424 <_close_r>
    23fa:	bd10      	pop	{r4, pc}

000023fc <_write_r>:
    23fc:	b570      	push	{r4, r5, r6, lr}
    23fe:	0005      	movs	r5, r0
    2400:	0008      	movs	r0, r1
    2402:	0011      	movs	r1, r2
    2404:	2200      	movs	r2, #0
    2406:	4c06      	ldr	r4, [pc, #24]	; (2420 <_write_r+0x24>)
    2408:	6022      	str	r2, [r4, #0]
    240a:	001a      	movs	r2, r3
    240c:	f7ff faf0 	bl	19f0 <_write>
    2410:	1c43      	adds	r3, r0, #1
    2412:	d103      	bne.n	241c <_write_r+0x20>
    2414:	6823      	ldr	r3, [r4, #0]
    2416:	2b00      	cmp	r3, #0
    2418:	d000      	beq.n	241c <_write_r+0x20>
    241a:	602b      	str	r3, [r5, #0]
    241c:	bd70      	pop	{r4, r5, r6, pc}
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	20000948 	.word	0x20000948

00002424 <_close_r>:
    2424:	2300      	movs	r3, #0
    2426:	b570      	push	{r4, r5, r6, lr}
    2428:	4c06      	ldr	r4, [pc, #24]	; (2444 <_close_r+0x20>)
    242a:	0005      	movs	r5, r0
    242c:	0008      	movs	r0, r1
    242e:	6023      	str	r3, [r4, #0]
    2430:	f7ff fb18 	bl	1a64 <_close>
    2434:	1c43      	adds	r3, r0, #1
    2436:	d103      	bne.n	2440 <_close_r+0x1c>
    2438:	6823      	ldr	r3, [r4, #0]
    243a:	2b00      	cmp	r3, #0
    243c:	d000      	beq.n	2440 <_close_r+0x1c>
    243e:	602b      	str	r3, [r5, #0]
    2440:	bd70      	pop	{r4, r5, r6, pc}
    2442:	46c0      	nop			; (mov r8, r8)
    2444:	20000948 	.word	0x20000948

00002448 <_fstat_r>:
    2448:	2300      	movs	r3, #0
    244a:	b570      	push	{r4, r5, r6, lr}
    244c:	4c06      	ldr	r4, [pc, #24]	; (2468 <_fstat_r+0x20>)
    244e:	0005      	movs	r5, r0
    2450:	0008      	movs	r0, r1
    2452:	0011      	movs	r1, r2
    2454:	6023      	str	r3, [r4, #0]
    2456:	f7ff fb08 	bl	1a6a <_fstat>
    245a:	1c43      	adds	r3, r0, #1
    245c:	d103      	bne.n	2466 <_fstat_r+0x1e>
    245e:	6823      	ldr	r3, [r4, #0]
    2460:	2b00      	cmp	r3, #0
    2462:	d000      	beq.n	2466 <_fstat_r+0x1e>
    2464:	602b      	str	r3, [r5, #0]
    2466:	bd70      	pop	{r4, r5, r6, pc}
    2468:	20000948 	.word	0x20000948

0000246c <_lseek_r>:
    246c:	b570      	push	{r4, r5, r6, lr}
    246e:	0005      	movs	r5, r0
    2470:	0008      	movs	r0, r1
    2472:	0011      	movs	r1, r2
    2474:	2200      	movs	r2, #0
    2476:	4c06      	ldr	r4, [pc, #24]	; (2490 <_lseek_r+0x24>)
    2478:	6022      	str	r2, [r4, #0]
    247a:	001a      	movs	r2, r3
    247c:	f7ff fafa 	bl	1a74 <_lseek>
    2480:	1c43      	adds	r3, r0, #1
    2482:	d103      	bne.n	248c <_lseek_r+0x20>
    2484:	6823      	ldr	r3, [r4, #0]
    2486:	2b00      	cmp	r3, #0
    2488:	d000      	beq.n	248c <_lseek_r+0x20>
    248a:	602b      	str	r3, [r5, #0]
    248c:	bd70      	pop	{r4, r5, r6, pc}
    248e:	46c0      	nop			; (mov r8, r8)
    2490:	20000948 	.word	0x20000948

00002494 <_read_r>:
    2494:	b570      	push	{r4, r5, r6, lr}
    2496:	0005      	movs	r5, r0
    2498:	0008      	movs	r0, r1
    249a:	0011      	movs	r1, r2
    249c:	2200      	movs	r2, #0
    249e:	4c06      	ldr	r4, [pc, #24]	; (24b8 <_read_r+0x24>)
    24a0:	6022      	str	r2, [r4, #0]
    24a2:	001a      	movs	r2, r3
    24a4:	f7ff fa82 	bl	19ac <_read>
    24a8:	1c43      	adds	r3, r0, #1
    24aa:	d103      	bne.n	24b4 <_read_r+0x20>
    24ac:	6823      	ldr	r3, [r4, #0]
    24ae:	2b00      	cmp	r3, #0
    24b0:	d000      	beq.n	24b4 <_read_r+0x20>
    24b2:	602b      	str	r3, [r5, #0]
    24b4:	bd70      	pop	{r4, r5, r6, pc}
    24b6:	46c0      	nop			; (mov r8, r8)
    24b8:	20000948 	.word	0x20000948
    24bc:	42000800 	.word	0x42000800
    24c0:	42000c00 	.word	0x42000c00
    24c4:	42001000 	.word	0x42001000
    24c8:	42001400 	.word	0x42001400
    24cc:	42001800 	.word	0x42001800
    24d0:	42001c00 	.word	0x42001c00
    24d4:	00001142 	.word	0x00001142
    24d8:	0000113e 	.word	0x0000113e
    24dc:	0000113e 	.word	0x0000113e
    24e0:	000011a4 	.word	0x000011a4
    24e4:	000011a4 	.word	0x000011a4
    24e8:	00001156 	.word	0x00001156
    24ec:	00001148 	.word	0x00001148
    24f0:	0000115c 	.word	0x0000115c
    24f4:	00001192 	.word	0x00001192
    24f8:	00001364 	.word	0x00001364
    24fc:	00001344 	.word	0x00001344
    2500:	00001344 	.word	0x00001344
    2504:	000013d0 	.word	0x000013d0
    2508:	00001356 	.word	0x00001356
    250c:	00001372 	.word	0x00001372
    2510:	00001348 	.word	0x00001348
    2514:	00001380 	.word	0x00001380
    2518:	000013c0 	.word	0x000013c0
    251c:	35455345 	.word	0x35455345
    2520:	2d203631 	.word	0x2d203631
    2524:	544e4520 	.word	0x544e4520
    2528:	42205245 	.word	0x42205245
    252c:	4c544f4f 	.word	0x4c544f4f
    2530:	4544414f 	.word	0x4544414f
    2534:	00000052 	.word	0x00000052
    2538:	35455345 	.word	0x35455345
    253c:	2d203631 	.word	0x2d203631
    2540:	49584520 	.word	0x49584520
    2544:	4f422054 	.word	0x4f422054
    2548:	4f4c544f 	.word	0x4f4c544f
    254c:	52454441 	.word	0x52454441
    2550:	00000000 	.word	0x00000000

00002554 <_global_impure_ptr>:
    2554:	20000010                                ... 

00002558 <__sf_fake_stderr>:
	...

00002578 <__sf_fake_stdin>:
	...

00002598 <__sf_fake_stdout>:
	...

000025b8 <_init>:
    25b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25ba:	46c0      	nop			; (mov r8, r8)
    25bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    25be:	bc08      	pop	{r3}
    25c0:	469e      	mov	lr, r3
    25c2:	4770      	bx	lr

000025c4 <__init_array_start>:
    25c4:	000000dd 	.word	0x000000dd

000025c8 <_fini>:
    25c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25ca:	46c0      	nop			; (mov r8, r8)
    25cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    25ce:	bc08      	pop	{r3}
    25d0:	469e      	mov	lr, r3
    25d2:	4770      	bx	lr

000025d4 <__fini_array_start>:
    25d4:	000000b5 	.word	0x000000b5
